[
  {
    "instance_id": "spring-projects__spring-security-17314",
    "pr_id": 17314,
    "issue_id": 17300,
    "repo": "spring-projects/spring-security",
    "problem_statement": "Remove Base64\nIt has been superceded by `java.util.Base64`.",
    "issue_word_count": 10,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "crypto/src/main/java/org/springframework/security/crypto/codec/Base64.java",
      "crypto/src/test/java/org/springframework/security/crypto/codec/Base64Tests.java"
    ],
    "pr_changed_test_files": [
      "crypto/src/test/java/org/springframework/security/crypto/codec/Base64Tests.java"
    ],
    "base_commit": "afb3d5d5710c08def6e31603aca65cdb1060513e",
    "head_commit": "41eed2e13bb526b043ed5e6eb3ae69be56d7e94e",
    "repo_url": "https://github.com/spring-projects/spring-security/pull/17314",
    "swe_url": "https://swe-bench-plus.turing.com/repos/spring-projects__spring-security/17314",
    "dockerfile": "",
    "pr_merged_at": "2025-06-27T19:24:54.000Z",
    "patch": "diff --git a/crypto/src/main/java/org/springframework/security/crypto/codec/Base64.java b/crypto/src/main/java/org/springframework/security/crypto/codec/Base64.java\ndeleted file mode 100644\nindex b696c0c4bf2..00000000000\n--- a/crypto/src/main/java/org/springframework/security/crypto/codec/Base64.java\n+++ /dev/null\n@@ -1,629 +0,0 @@\n-/*\n- * Copyright 2002-2016 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.security.crypto.codec;\n-\n-/**\n- * Base64 encoder which is a reduced version of Robert Harder's public domain\n- * implementation (version 2.3.7). See <a href=\n- * \"http://iharder.sourceforge.net/current/java/base64/\">http://iharder.sourceforge.net/current/java/base64/</a>\n- * for more information.\n- * <p>\n- * For internal use only.\n- *\n- * @author Luke Taylor\n- * @since 3.0\n- * @deprecated Use java.util.Base64\n- */\n-@Deprecated\n-public final class Base64 {\n-\n-\t/** No options specified. Value is zero. */\n-\tpublic static final int NO_OPTIONS = 0;\n-\n-\t/** Specify encoding in first bit. Value is one. */\n-\tpublic static final int ENCODE = 1;\n-\n-\t/** Specify decoding in first bit. Value is zero. */\n-\tpublic static final int DECODE = 0;\n-\n-\t/** Do break lines when encoding. Value is 8. */\n-\tpublic static final int DO_BREAK_LINES = 8;\n-\n-\t/**\n-\t * Encode using Base64-like encoding that is URL- and Filename-safe as described in\n-\t * Section 4 of RFC3548: <a href=\n-\t * \"https://tools.ietf.org/html/rfc3548\">https://tools.ietf.org/html/rfc3548</a>. It\n-\t * is important to note that data encoded this way is <em>not</em> officially valid\n-\t * Base64, or at the very least should not be called Base64 without also specifying\n-\t * that is was encoded using the URL- and Filename-safe dialect.\n-\t */\n-\tpublic static final int URL_SAFE = 16;\n-\n-\t/**\n-\t * Encode using the special \"ordered\" dialect of Base64.\n-\t */\n-\tpublic static final int ORDERED = 32;\n-\n-\t/** Maximum line length (76) of Base64 output. */\n-\tprivate static final int MAX_LINE_LENGTH = 76;\n-\n-\t/** The equals sign (=) as a byte. */\n-\tprivate static final byte EQUALS_SIGN = (byte) '=';\n-\n-\t/** The new line character (\\n) as a byte. */\n-\tprivate static final byte NEW_LINE = (byte) '\\n';\n-\n-\tprivate static final byte WHITE_SPACE_ENC = -5; // Indicates white space in encoding\n-\n-\tprivate static final byte EQUALS_SIGN_ENC = -1; // Indicates equals sign in encoding\n-\n-\t/* ******** S T A N D A R D B A S E 6 4 A L P H A B E T ******** */\n-\n-\t/** The 64 valid Base64 values. */\n-\t/* Host platform me be something funny like EBCDIC, so we hardcode these values. */\n-\tprivate static final byte[] _STANDARD_ALPHABET = { (byte) 'A', (byte) 'B', (byte) 'C', (byte) 'D', (byte) 'E',\n-\t\t\t(byte) 'F', (byte) 'G', (byte) 'H', (byte) 'I', (byte) 'J', (byte) 'K', (byte) 'L', (byte) 'M', (byte) 'N',\n-\t\t\t(byte) 'O', (byte) 'P', (byte) 'Q', (byte) 'R', (byte) 'S', (byte) 'T', (byte) 'U', (byte) 'V', (byte) 'W',\n-\t\t\t(byte) 'X', (byte) 'Y', (byte) 'Z', (byte) 'a', (byte) 'b', (byte) 'c', (byte) 'd', (byte) 'e', (byte) 'f',\n-\t\t\t(byte) 'g', (byte) 'h', (byte) 'i', (byte) 'j', (byte) 'k', (byte) 'l', (byte) 'm', (byte) 'n', (byte) 'o',\n-\t\t\t(byte) 'p', (byte) 'q', (byte) 'r', (byte) 's', (byte) 't', (byte) 'u', (byte) 'v', (byte) 'w', (byte) 'x',\n-\t\t\t(byte) 'y', (byte) 'z', (byte) '0', (byte) '1', (byte) '2', (byte) '3', (byte) '4', (byte) '5', (byte) '6',\n-\t\t\t(byte) '7', (byte) '8', (byte) '9', (byte) '+', (byte) '/' };\n-\n-\t/**\n-\t * Translates a Base64 value to either its 6-bit reconstruction value or a negative\n-\t * number indicating some other meaning.\n-\t **/\n-\tprivate static final byte[] _STANDARD_DECODABET = { -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 0\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// -\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 8\n-\t\t\t-5, -5, // Whitespace: Tab and Linefeed\n-\t\t\t-9, -9, // Decimal 11 - 12\n-\t\t\t-5, // Whitespace: Carriage Return\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 14 - 26\n-\t\t\t-9, -9, -9, -9, -9, // Decimal 27 - 31\n-\t\t\t-5, // Whitespace: Space\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 33 - 42\n-\t\t\t62, // Plus sign at decimal 43\n-\t\t\t-9, -9, -9, // Decimal 44 - 46\n-\t\t\t63, // Slash at decimal 47\n-\t\t\t52, 53, 54, 55, 56, 57, 58, 59, 60, 61, // Numbers zero through nine\n-\t\t\t-9, -9, -9, // Decimal 58 - 60\n-\t\t\t-1, // Equals sign at decimal 61\n-\t\t\t-9, -9, -9, // Decimal 62 - 64\n-\t\t\t0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, // Letters 'A' through 'N'\n-\t\t\t14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, // Letters 'O' through 'Z'\n-\t\t\t-9, -9, -9, -9, -9, -9, // Decimal 91 - 96\n-\t\t\t26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, // Letters 'a' through 'm'\n-\t\t\t39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, // Letters 'n' through 'z'\n-\t\t\t-9, -9, -9, -9, -9, // Decimal 123 - 127\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 128 - 139\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 140 - 152\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 153 - 165\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 166 - 178\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 179 - 191\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 192 - 204\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 205 - 217\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 218 - 230\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 231 - 243\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9 // Decimal 244 - 255\n-\t};\n-\n-\t/* ******** U R L S A F E B A S E 6 4 A L P H A B E T ******** */\n-\n-\t/**\n-\t * Used in the URL- and Filename-safe dialect described in Section 4 of RFC3548:\n-\t * <a href\n-\t * =\"https://tools.ietf.org/html/rfc3548\">https://tools.ietf.org/html/rfc3548</a>.\n-\t * Notice that the last two bytes become \"hyphen\" and \"underscore\" instead of \"plus\"\n-\t * and \"slash.\"\n-\t */\n-\tprivate static final byte[] _URL_SAFE_ALPHABET = { (byte) 'A', (byte) 'B', (byte) 'C', (byte) 'D', (byte) 'E',\n-\t\t\t(byte) 'F', (byte) 'G', (byte) 'H', (byte) 'I', (byte) 'J', (byte) 'K', (byte) 'L', (byte) 'M', (byte) 'N',\n-\t\t\t(byte) 'O', (byte) 'P', (byte) 'Q', (byte) 'R', (byte) 'S', (byte) 'T', (byte) 'U', (byte) 'V', (byte) 'W',\n-\t\t\t(byte) 'X', (byte) 'Y', (byte) 'Z', (byte) 'a', (byte) 'b', (byte) 'c', (byte) 'd', (byte) 'e', (byte) 'f',\n-\t\t\t(byte) 'g', (byte) 'h', (byte) 'i', (byte) 'j', (byte) 'k', (byte) 'l', (byte) 'm', (byte) 'n', (byte) 'o',\n-\t\t\t(byte) 'p', (byte) 'q', (byte) 'r', (byte) 's', (byte) 't', (byte) 'u', (byte) 'v', (byte) 'w', (byte) 'x',\n-\t\t\t(byte) 'y', (byte) 'z', (byte) '0', (byte) '1', (byte) '2', (byte) '3', (byte) '4', (byte) '5', (byte) '6',\n-\t\t\t(byte) '7', (byte) '8', (byte) '9', (byte) '-', (byte) '_' };\n-\n-\t/**\n-\t * Used in decoding URL- and Filename-safe dialects of Base64.\n-\t */\n-\tprivate static final byte[] _URL_SAFE_DECODABET = { -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 0\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// -\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 8\n-\t\t\t-5, -5, // Whitespace: Tab and Linefeed\n-\t\t\t-9, -9, // Decimal 11 - 12\n-\t\t\t-5, // Whitespace: Carriage Return\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 14 - 26\n-\t\t\t-9, -9, -9, -9, -9, // Decimal 27 - 31\n-\t\t\t-5, // Whitespace: Space\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 33 - 42\n-\t\t\t-9, // Plus sign at decimal 43\n-\t\t\t-9, // Decimal 44\n-\t\t\t62, // Minus sign at decimal 45\n-\t\t\t-9, // Decimal 46\n-\t\t\t-9, // Slash at decimal 47\n-\t\t\t52, 53, 54, 55, 56, 57, 58, 59, 60, 61, // Numbers zero through nine\n-\t\t\t-9, -9, -9, // Decimal 58 - 60\n-\t\t\t-1, // Equals sign at decimal 61\n-\t\t\t-9, -9, -9, // Decimal 62 - 64\n-\t\t\t0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, // Letters 'A' through 'N'\n-\t\t\t14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, // Letters 'O' through 'Z'\n-\t\t\t-9, -9, -9, -9, // Decimal 91 - 94\n-\t\t\t63, // Underscore at decimal 95\n-\t\t\t-9, // Decimal 96\n-\t\t\t26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, // Letters 'a' through 'm'\n-\t\t\t39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, // Letters 'n' through 'z'\n-\t\t\t-9, -9, -9, -9, -9, // Decimal 123 - 127\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 128 - 139\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 140 - 152\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 153 - 165\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 166 - 178\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 179 - 191\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 192 - 204\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 205 - 217\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 218 - 230\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 231 - 243\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9 // Decimal 244 - 255\n-\t};\n-\n-\t/* ******** O R D E R E D B A S E 6 4 A L P H A B E T ******** */\n-\n-\tprivate static final byte[] _ORDERED_ALPHABET = { (byte) '-', (byte) '0', (byte) '1', (byte) '2', (byte) '3',\n-\t\t\t(byte) '4', (byte) '5', (byte) '6', (byte) '7', (byte) '8', (byte) '9', (byte) 'A', (byte) 'B', (byte) 'C',\n-\t\t\t(byte) 'D', (byte) 'E', (byte) 'F', (byte) 'G', (byte) 'H', (byte) 'I', (byte) 'J', (byte) 'K', (byte) 'L',\n-\t\t\t(byte) 'M', (byte) 'N', (byte) 'O', (byte) 'P', (byte) 'Q', (byte) 'R', (byte) 'S', (byte) 'T', (byte) 'U',\n-\t\t\t(byte) 'V', (byte) 'W', (byte) 'X', (byte) 'Y', (byte) 'Z', (byte) '_', (byte) 'a', (byte) 'b', (byte) 'c',\n-\t\t\t(byte) 'd', (byte) 'e', (byte) 'f', (byte) 'g', (byte) 'h', (byte) 'i', (byte) 'j', (byte) 'k', (byte) 'l',\n-\t\t\t(byte) 'm', (byte) 'n', (byte) 'o', (byte) 'p', (byte) 'q', (byte) 'r', (byte) 's', (byte) 't', (byte) 'u',\n-\t\t\t(byte) 'v', (byte) 'w', (byte) 'x', (byte) 'y', (byte) 'z' };\n-\n-\t/**\n-\t * Used in decoding the \"ordered\" dialect of Base64.\n-\t */\n-\tprivate static final byte[] _ORDERED_DECODABET = { -9, -9, -9, -9, -9, -9, -9, -9, -9,\n-\t\t\t// Decimal 0 - 8\n-\t\t\t-5, -5, // Whitespace: Tab and Linefeed\n-\t\t\t-9, -9, // Decimal 11 - 12\n-\t\t\t-5, // Whitespace: Carriage Return\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 14 - 26\n-\t\t\t-9, -9, -9, -9, -9, // Decimal 27 - 31\n-\t\t\t-5, // Whitespace: Space\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 33 - 42\n-\t\t\t-9, // Plus sign at decimal 43\n-\t\t\t-9, // Decimal 44\n-\t\t\t0, // Minus sign at decimal 45\n-\t\t\t-9, // Decimal 46\n-\t\t\t-9, // Slash at decimal 47\n-\t\t\t1, 2, 3, 4, 5, 6, 7, 8, 9, 10, // Numbers zero through nine\n-\t\t\t-9, -9, -9, // Decimal 58 - 60\n-\t\t\t-1, // Equals sign at decimal 61\n-\t\t\t-9, -9, -9, // Decimal 62 - 64\n-\t\t\t11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, // Letters 'A' through 'M'\n-\t\t\t24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, // Letters 'N' through 'Z'\n-\t\t\t-9, -9, -9, -9, // Decimal 91 - 94\n-\t\t\t37, // Underscore at decimal 95\n-\t\t\t-9, // Decimal 96\n-\t\t\t38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, // Letters 'a' through 'm'\n-\t\t\t51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, // Letters 'n' through 'z'\n-\t\t\t-9, -9, -9, -9, -9, // Decimal 123 - 127\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 128 - 139\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 140 - 152\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 153 - 165\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 166 - 178\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 179 - 191\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 192 - 204\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 205 - 217\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 218 - 230\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 231 - 243\n-\t\t\t-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9 // Decimal 244 - 255\n-\t};\n-\n-\tprivate Base64() {\n-\t}\n-\n-\tpublic static byte[] decode(byte[] bytes) {\n-\t\treturn decode(bytes, 0, bytes.length, NO_OPTIONS);\n-\t}\n-\n-\tpublic static byte[] encode(byte[] bytes) {\n-\t\treturn encodeBytesToBytes(bytes, 0, bytes.length, NO_OPTIONS);\n-\t}\n-\n-\tpublic static boolean isBase64(byte[] bytes) {\n-\t\ttry {\n-\t\t\tdecode(bytes);\n-\t\t}\n-\t\tcatch (InvalidBase64CharacterException ex) {\n-\t\t\treturn false;\n-\t\t}\n-\t\treturn true;\n-\t}\n-\n-\t/**\n-\t * Returns one of the _SOMETHING_ALPHABET byte arrays depending on the options\n-\t * specified. It's possible, though silly, to specify ORDERED <b>and</b> URLSAFE in\n-\t * which case one of them will be picked, though there is no guarantee as to which one\n-\t * will be picked.\n-\t */\n-\tprivate static byte[] getAlphabet(int options) {\n-\t\tif ((options & URL_SAFE) == URL_SAFE) {\n-\t\t\treturn _URL_SAFE_ALPHABET;\n-\t\t}\n-\t\telse if ((options & ORDERED) == ORDERED) {\n-\t\t\treturn _ORDERED_ALPHABET;\n-\t\t}\n-\t\telse {\n-\t\t\treturn _STANDARD_ALPHABET;\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Returns one of the _SOMETHING_DECODABET byte arrays depending on the options\n-\t * specified. It's possible, though silly, to specify ORDERED and URL_SAFE in which\n-\t * case one of them will be picked, though there is no guarantee as to which one will\n-\t * be picked.\n-\t */\n-\tprivate static byte[] getDecodabet(int options) {\n-\t\tif ((options & URL_SAFE) == URL_SAFE) {\n-\t\t\treturn _URL_SAFE_DECODABET;\n-\t\t}\n-\t\telse if ((options & ORDERED) == ORDERED) {\n-\t\t\treturn _ORDERED_DECODABET;\n-\t\t}\n-\t\telse {\n-\t\t\treturn _STANDARD_DECODABET;\n-\t\t}\n-\t}\n-\n-\t/* ******** E N C O D I N G M E T H O D S ******** */\n-\n-\t/**\n-\t * <p>\n-\t * Encodes up to three bytes of the array <var>source</var> and writes the resulting\n-\t * four Base64 bytes to <var>destination</var>. The source and destination arrays can\n-\t * be manipulated anywhere along their length by specifying <var>srcOffset</var> and\n-\t * <var>destOffset</var>. This method does not check to make sure your arrays are\n-\t * large enough to accomodate <var>srcOffset</var> + 3 for the <var>source</var> array\n-\t * or <var>destOffset</var> + 4 for the <var>destination</var> array. The actual\n-\t * number of significant bytes in your array is given by <var>numSigBytes</var>.\n-\t * </p>\n-\t * <p>\n-\t * This is the lowest level of the encoding methods with all possible parameters.\n-\t * </p>\n-\t * @param source the array to convert\n-\t * @param srcOffset the index where conversion begins\n-\t * @param numSigBytes the number of significant bytes in your array\n-\t * @param destination the array to hold the conversion\n-\t * @param destOffset the index where output will be put\n-\t * @return the <var>destination</var> array\n-\t * @since 1.3\n-\t */\n-\tprivate static byte[] encode3to4(byte[] source, int srcOffset, int numSigBytes, byte[] destination, int destOffset,\n-\t\t\tint options) {\n-\n-\t\tbyte[] ALPHABET = getAlphabet(options);\n-\n-\t\t// 1 2 3\n-\t\t// 01234567890123456789012345678901 Bit position\n-\t\t// --------000000001111111122222222 Array position from threeBytes\n-\t\t// --------| || || || | Six bit groups to index ALPHABET\n-\t\t// >>18 >>12 >> 6 >> 0 Right shift necessary\n-\t\t// 0x3f 0x3f 0x3f Additional AND\n-\n-\t\t// Create buffer with zero-padding if there are only one or two\n-\t\t// significant bytes passed in the array.\n-\t\t// We have to shift left 24 in order to flush out the 1's that appear\n-\t\t// when Java treats a value as negative that is cast from a byte to an int.\n-\t\tint inBuff = ((numSigBytes > 0) ? ((source[srcOffset] << 24) >>> 8) : 0)\n-\t\t\t\t| ((numSigBytes > 1) ? ((source[srcOffset + 1] << 24) >>> 16) : 0)\n-\t\t\t\t| ((numSigBytes > 2) ? ((source[srcOffset + 2] << 24) >>> 24) : 0);\n-\n-\t\tswitch (numSigBytes) {\n-\t\t\tcase 3:\n-\t\t\t\tdestination[destOffset] = ALPHABET[(inBuff >>> 18)];\n-\t\t\t\tdestination[destOffset + 1] = ALPHABET[(inBuff >>> 12) & 0x3f];\n-\t\t\t\tdestination[destOffset + 2] = ALPHABET[(inBuff >>> 6) & 0x3f];\n-\t\t\t\tdestination[destOffset + 3] = ALPHABET[(inBuff) & 0x3f];\n-\t\t\t\treturn destination;\n-\n-\t\t\tcase 2:\n-\t\t\t\tdestination[destOffset] = ALPHABET[(inBuff >>> 18)];\n-\t\t\t\tdestination[destOffset + 1] = ALPHABET[(inBuff >>> 12) & 0x3f];\n-\t\t\t\tdestination[destOffset + 2] = ALPHABET[(inBuff >>> 6) & 0x3f];\n-\t\t\t\tdestination[destOffset + 3] = EQUALS_SIGN;\n-\t\t\t\treturn destination;\n-\n-\t\t\tcase 1:\n-\t\t\t\tdestination[destOffset] = ALPHABET[(inBuff >>> 18)];\n-\t\t\t\tdestination[destOffset + 1] = ALPHABET[(inBuff >>> 12) & 0x3f];\n-\t\t\t\tdestination[destOffset + 2] = EQUALS_SIGN;\n-\t\t\t\tdestination[destOffset + 3] = EQUALS_SIGN;\n-\t\t\t\treturn destination;\n-\n-\t\t\tdefault:\n-\t\t\t\treturn destination;\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * @param source The data to convert\n-\t * @param off Offset in array where conversion should begin\n-\t * @param len Length of data to convert\n-\t * @param options Specified options\n-\t * @return The Base64-encoded data as a String\n-\t * @throws java.io.IOException if there is an error\n-\t * @throws NullPointerException if source array is null\n-\t * @throws IllegalArgumentException if source array, offset, or length are invalid\n-\t * @since 2.3.1\n-\t * @see Base64#DO_BREAK_LINES\n-\t */\n-\tprivate static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) {\n-\n-\t\tif (source == null) {\n-\t\t\tthrow new NullPointerException(\"Cannot serialize a null array.\");\n-\t\t} // end if: null\n-\n-\t\tif (off < 0) {\n-\t\t\tthrow new IllegalArgumentException(\"Cannot have negative offset: \" + off);\n-\t\t} // end if: off < 0\n-\n-\t\tif (len < 0) {\n-\t\t\tthrow new IllegalArgumentException(\"Cannot have length offset: \" + len);\n-\t\t} // end if: len < 0\n-\n-\t\tif (off + len > source.length) {\n-\t\t\tthrow new IllegalArgumentException(String\n-\t\t\t\t.format(\"Cannot have offset of %d and length of %d with array of length %d\", off, len, source.length));\n-\t\t} // end if: off < 0\n-\n-\t\tboolean breakLines = (options & DO_BREAK_LINES) > 0;\n-\n-\t\t// int len43 = len * 4 / 3;\n-\t\t// byte[] outBuff = new byte[ ( len43 ) // Main 4:3\n-\t\t// + ( (len % 3) > 0 ? 4 : 0 ) // Account for padding\n-\t\t// + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n-\t\t// Try to determine more precisely how big the array needs to be.\n-\t\t// If we get it right, we don't have to do an array copy, and\n-\t\t// we save a bunch of memory.\n-\n-\t\t// Bytes needed for actual encoding\n-\t\tint encLen = (len / 3) * 4 + ((len % 3 > 0) ? 4 : 0);\n-\n-\t\tif (breakLines) {\n-\t\t\tencLen += encLen / MAX_LINE_LENGTH; // Plus extra newline characters\n-\t\t}\n-\t\tbyte[] outBuff = new byte[encLen];\n-\n-\t\tint d = 0;\n-\t\tint e = 0;\n-\t\tint len2 = len - 2;\n-\t\tint lineLength = 0;\n-\t\tfor (; d < len2; d += 3, e += 4) {\n-\t\t\tencode3to4(source, d + off, 3, outBuff, e, options);\n-\n-\t\t\tlineLength += 4;\n-\t\t\tif (breakLines && lineLength >= MAX_LINE_LENGTH) {\n-\t\t\t\toutBuff[e + 4] = NEW_LINE;\n-\t\t\t\te++;\n-\t\t\t\tlineLength = 0;\n-\t\t\t} // end if: end of line\n-\t\t} // en dfor: each piece of array\n-\n-\t\tif (d < len) {\n-\t\t\tencode3to4(source, d + off, len - d, outBuff, e, options);\n-\t\t\te += 4;\n-\t\t} // end if: some padding needed\n-\n-\t\t// Only resize array if we didn't guess it right.\n-\t\tif (e <= outBuff.length - 1) {\n-\t\t\tbyte[] finalOut = new byte[e];\n-\t\t\tSystem.arraycopy(outBuff, 0, finalOut, 0, e);\n-\t\t\t// System.err.println(\"Having to resize array from \" + outBuff.length + \" to \"\n-\t\t\t// + e );\n-\t\t\treturn finalOut;\n-\t\t}\n-\t\telse {\n-\t\t\t// System.err.println(\"No need to resize array.\");\n-\t\t\treturn outBuff;\n-\t\t}\n-\t}\n-\n-\t/* ******** D E C O D I N G M E T H O D S ******** */\n-\n-\t/**\n-\t * Decodes four bytes from array <var>source</var> and writes the resulting bytes (up\n-\t * to three of them) to <var>destination</var>. The source and destination arrays can\n-\t * be manipulated anywhere along their length by specifying <var>srcOffset</var> and\n-\t * <var>destOffset</var>. This method does not check to make sure your arrays are\n-\t * large enough to accomodate <var>srcOffset</var> + 4 for the <var>source</var> array\n-\t * or <var>destOffset</var> + 3 for the <var>destination</var> array. This method\n-\t * returns the actual number of bytes that were converted from the Base64 encoding.\n-\t * <p>\n-\t * This is the lowest level of the decoding methods with all possible parameters.\n-\t * </p>\n-\t * @param source the array to convert\n-\t * @param srcOffset the index where conversion begins\n-\t * @param destination the array to hold the conversion\n-\t * @param destOffset the index where output will be put\n-\t * @param options alphabet type is pulled from this (standard, url-safe, ordered)\n-\t * @return the number of decoded bytes converted\n-\t * @throws NullPointerException if source or destination arrays are null\n-\t * @throws IllegalArgumentException if srcOffset or destOffset are invalid or there is\n-\t * not enough room in the array.\n-\t * @since 1.3\n-\t */\n-\tprivate static int decode4to3(final byte[] source, final int srcOffset, final byte[] destination,\n-\t\t\tfinal int destOffset, final int options) {\n-\n-\t\t// Lots of error checking and exception throwing\n-\t\tif (source == null) {\n-\t\t\tthrow new NullPointerException(\"Source array was null.\");\n-\t\t} // end if\n-\t\tif (destination == null) {\n-\t\t\tthrow new NullPointerException(\"Destination array was null.\");\n-\t\t} // end if\n-\t\tif (srcOffset < 0 || srcOffset + 3 >= source.length) {\n-\t\t\tthrow new IllegalArgumentException(\n-\t\t\t\t\tString.format(\"Source array with length %d cannot have offset of %d and still process four bytes.\",\n-\t\t\t\t\t\t\tsource.length, srcOffset));\n-\t\t} // end if\n-\t\tif (destOffset < 0 || destOffset + 2 >= destination.length) {\n-\t\t\tthrow new IllegalArgumentException(String.format(\n-\t\t\t\t\t\"Destination array with length %d cannot have offset of %d and still store three bytes.\",\n-\t\t\t\t\tdestination.length, destOffset));\n-\t\t} // end if\n-\n-\t\tbyte[] DECODABET = getDecodabet(options);\n-\n-\t\t// Example: Dk==\n-\t\tif (source[srcOffset + 2] == EQUALS_SIGN) {\n-\t\t\t// Two ways to do the same thing. Don't know which way I like best.\n-\t\t\t// int outBuff = ( ( DECODABET[ source[ srcOffset ] ] << 24 ) >>> 6 )\n-\t\t\t// | ( ( DECODABET[ source[ srcOffset + 1] ] << 24 ) >>> 12 );\n-\t\t\tint outBuff = ((DECODABET[source[srcOffset]] & 0xFF) << 18)\n-\t\t\t\t\t| ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);\n-\n-\t\t\tdestination[destOffset] = (byte) (outBuff >>> 16);\n-\t\t\treturn 1;\n-\t\t}\n-\n-\t\t// Example: DkL=\n-\t\telse if (source[srcOffset + 3] == EQUALS_SIGN) {\n-\t\t\t// Two ways to do the same thing. Don't know which way I like best.\n-\t\t\t// int outBuff = ( ( DECODABET[ source[ srcOffset ] ] << 24 ) >>> 6 )\n-\t\t\t// | ( ( DECODABET[ source[ srcOffset + 1 ] ] << 24 ) >>> 12 )\n-\t\t\t// | ( ( DECODABET[ source[ srcOffset + 2 ] ] << 24 ) >>> 18 );\n-\t\t\tint outBuff = ((DECODABET[source[srcOffset]] & 0xFF) << 18)\n-\t\t\t\t\t| ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12)\n-\t\t\t\t\t| ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);\n-\n-\t\t\tdestination[destOffset] = (byte) (outBuff >>> 16);\n-\t\t\tdestination[destOffset + 1] = (byte) (outBuff >>> 8);\n-\t\t\treturn 2;\n-\t\t}\n-\n-\t\t// Example: DkLE\n-\t\telse {\n-\t\t\t// Two ways to do the same thing. Don't know which way I like best.\n-\t\t\t// int outBuff = ( ( DECODABET[ source[ srcOffset ] ] << 24 ) >>> 6 )\n-\t\t\t// | ( ( DECODABET[ source[ srcOffset + 1 ] ] << 24 ) >>> 12 )\n-\t\t\t// | ( ( DECODABET[ source[ srcOffset + 2 ] ] << 24 ) >>> 18 )\n-\t\t\t// | ( ( DECODABET[ source[ srcOffset + 3 ] ] << 24 ) >>> 24 );\n-\t\t\tint outBuff = ((DECODABET[source[srcOffset]] & 0xFF) << 18)\n-\t\t\t\t\t| ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12)\n-\t\t\t\t\t| ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6) | ((DECODABET[source[srcOffset + 3]] & 0xFF));\n-\n-\t\t\tdestination[destOffset] = (byte) (outBuff >> 16);\n-\t\t\tdestination[destOffset + 1] = (byte) (outBuff >> 8);\n-\t\t\tdestination[destOffset + 2] = (byte) (outBuff);\n-\n-\t\t\treturn 3;\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Low-level access to decoding ASCII characters in the form of a byte array.\n-\t * <strong>Ignores GUNZIP option, if it's set.</strong> This is not generally a\n-\t * recommended method, although it is used internally as part of the decoding process.\n-\t * Special case: if len = 0, an empty array is returned. Still, if you need more speed\n-\t * and reduced memory footprint (and aren't gzipping), consider this method.\n-\t * @param source The Base64 encoded data\n-\t * @param off The offset of where to begin decoding\n-\t * @param len The length of characters to decode\n-\t * @param options Can specify options such as alphabet type to use\n-\t * @return decoded data\n-\t * @throws IllegalArgumentException If bogus characters exist in source data\n-\t */\n-\tprivate static byte[] decode(final byte[] source, final int off, final int len, final int options) {\n-\n-\t\t// Lots of error checking and exception throwing\n-\t\tif (source == null) {\n-\t\t\tthrow new NullPointerException(\"Cannot decode null source array.\");\n-\t\t} // end if\n-\t\tif (off < 0 || off + len > source.length) {\n-\t\t\tthrow new IllegalArgumentException(\n-\t\t\t\t\tString.format(\"Source array with length %d cannot have offset of %d and process %d bytes.\",\n-\t\t\t\t\t\t\tsource.length, off, len));\n-\t\t} // end if\n-\n-\t\tif (len == 0) {\n-\t\t\treturn new byte[0];\n-\t\t}\n-\t\telse if (len < 4) {\n-\t\t\tthrow new IllegalArgumentException(\n-\t\t\t\t\t\"Base64-encoded string must have at least four characters, but length specified was \" + len);\n-\t\t} // end if\n-\n-\t\tbyte[] DECODABET = getDecodabet(options);\n-\n-\t\tint len34 = len * 3 / 4; // Estimate on array size\n-\t\tbyte[] outBuff = new byte[len34]; // Upper limit on size of output\n-\t\tint outBuffPosn = 0; // Keep track of where we're writing\n-\n-\t\tbyte[] b4 = new byte[4]; // Four byte buffer from source, eliminating white space\n-\t\tint b4Posn = 0; // Keep track of four byte input buffer\n-\t\tint i = 0; // Source array counter\n-\t\tbyte sbiDecode = 0; // Special value from DECODABET\n-\n-\t\tfor (i = off; i < off + len; i++) { // Loop through source\n-\n-\t\t\tsbiDecode = DECODABET[source[i] & 0xFF];\n-\n-\t\t\t// White space, Equals sign, or legit Base64 character\n-\t\t\t// Note the values such as -5 and -9 in the\n-\t\t\t// DECODABETs at the top of the file.\n-\t\t\tif (sbiDecode >= WHITE_SPACE_ENC) {\n-\t\t\t\tif (sbiDecode >= EQUALS_SIGN_ENC) {\n-\t\t\t\t\tb4[b4Posn++] = source[i]; // Save non-whitespace\n-\t\t\t\t\tif (b4Posn > 3) { // Time to decode?\n-\t\t\t\t\t\toutBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n-\t\t\t\t\t\tb4Posn = 0;\n-\n-\t\t\t\t\t\t// If that was the equals sign, break out of 'for' loop\n-\t\t\t\t\t\tif (source[i] == EQUALS_SIGN) {\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\t// There's a bad input character in the Base64 stream.\n-\t\t\t\tthrow new InvalidBase64CharacterException(String\n-\t\t\t\t\t.format(\"Bad Base64 input character decimal %d in array position %d\", (source[i]) & 0xFF, i));\n-\t\t\t}\n-\t\t}\n-\n-\t\tbyte[] out = new byte[outBuffPosn];\n-\t\tSystem.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n-\t\treturn out;\n-\t}\n-\n-\t@SuppressWarnings(\"serial\")\n-\tstatic class InvalidBase64CharacterException extends IllegalArgumentException {\n-\n-\t\tInvalidBase64CharacterException(String message) {\n-\t\t\tsuper(message);\n-\t\t}\n-\n-\t}\n-\n-}\n",
    "test_patch": "diff --git a/crypto/src/test/java/org/springframework/security/crypto/codec/Base64Tests.java b/crypto/src/test/java/org/springframework/security/crypto/codec/Base64Tests.java\ndeleted file mode 100644\nindex e53eddc564f..00000000000\n--- a/crypto/src/test/java/org/springframework/security/crypto/codec/Base64Tests.java\n+++ /dev/null\n@@ -1,52 +0,0 @@\n-/*\n- * Copyright 2002-2016 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.security.crypto.codec;\n-\n-import org.junit.jupiter.api.Test;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n-import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n-\n-/**\n- * @author Luke Taylor\n- */\n-@SuppressWarnings(\"deprecation\")\n-public class Base64Tests {\n-\n-\t@Test\n-\tpublic void isBase64ReturnsTrueForValidBase64() {\n-\t\tassertThat(Base64.isBase64(new byte[] { (byte) 'A', (byte) 'B', (byte) 'C', (byte) 'D' })).isTrue();\n-\t}\n-\n-\t@Test\n-\tpublic void isBase64ReturnsFalseForInvalidBase64() {\n-\t\t// Include invalid '`' character\n-\t\tassertThat(Base64.isBase64(new byte[] { (byte) 'A', (byte) 'B', (byte) 'C', (byte) '`' })).isFalse();\n-\t}\n-\n-\t@Test\n-\tpublic void isBase64RejectsNull() {\n-\t\tassertThatExceptionOfType(NullPointerException.class).isThrownBy(() -> Base64.isBase64(null));\n-\t}\n-\n-\t@Test\n-\tpublic void isBase64RejectsInvalidLength() {\n-\t\tassertThatIllegalArgumentException().isThrownBy(() -> Base64.isBase64(new byte[] { (byte) 'A' }));\n-\t}\n-\n-}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "spring-projects__spring-security-17091",
    "pr_id": 17091,
    "issue_id": 17012,
    "repo": "spring-projects/spring-security",
    "problem_statement": "Base64StringKeyGenerator should not have a minimum length\n**Expected Behavior**\n\nAs with all other `StringKeyGenerator`s and `BytesKeyGenerator`s, developers should be free to choose an output length as small as they wish.\n\n**Current Behavior**\n\nThrows `IllegalArgumentException` if `keyLength` is less than 32.\n\n**Context**\n\nI want to generate random keys that are reasonably easy for humans to transcribe.\nBase64 provides a good balance of usable character set and entropy per character.\n\nHowever, this forces a _minimum_ of 43 characters (`⌈ 32 * 4/3 ⌉`), which is unreasonable for human use.",
    "issue_word_count": 87,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "crypto/src/main/java/org/springframework/security/crypto/keygen/Base64StringKeyGenerator.java",
      "crypto/src/test/java/org/springframework/security/crypto/keygen/Base64StringKeyGeneratorTests.java"
    ],
    "pr_changed_test_files": [
      "crypto/src/test/java/org/springframework/security/crypto/keygen/Base64StringKeyGeneratorTests.java"
    ],
    "base_commit": "ba7be9c8b94728b049913c7c6bc295d6f6c09232",
    "head_commit": "1b30069b2c5446a9e8c7ac0743079d8229e8e90b",
    "repo_url": "https://github.com/spring-projects/spring-security/pull/17091",
    "swe_url": "https://swe-bench-plus.turing.com/repos/spring-projects__spring-security/17091",
    "dockerfile": "",
    "pr_merged_at": "2025-05-14T16:41:30.000Z",
    "patch": "diff --git a/crypto/src/main/java/org/springframework/security/crypto/keygen/Base64StringKeyGenerator.java b/crypto/src/main/java/org/springframework/security/crypto/keygen/Base64StringKeyGenerator.java\nindex 9b28d68a723..40e89d10fb7 100644\n--- a/crypto/src/main/java/org/springframework/security/crypto/keygen/Base64StringKeyGenerator.java\n+++ b/crypto/src/main/java/org/springframework/security/crypto/keygen/Base64StringKeyGenerator.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -24,6 +24,7 @@\n  *\n  * @author Joe Grandja\n  * @author Rob Winch\n+ * @author Andrey Litvitski\n  * @since 5.0\n  */\n public class Base64StringKeyGenerator implements StringKeyGenerator {\n@@ -67,8 +68,8 @@ public Base64StringKeyGenerator(Base64.Encoder encoder, int keyLength) {\n \t\tif (encoder == null) {\n \t\t\tthrow new IllegalArgumentException(\"encode cannot be null\");\n \t\t}\n-\t\tif (keyLength < DEFAULT_KEY_LENGTH) {\n-\t\t\tthrow new IllegalArgumentException(\"keyLength must be greater than or equal to \" + DEFAULT_KEY_LENGTH);\n+\t\tif (keyLength <= 0) {\n+\t\t\tthrow new IllegalArgumentException(\"keyLength must be greater than 0\");\n \t\t}\n \t\tthis.encoder = encoder;\n \t\tthis.keyGenerator = KeyGenerators.secureRandom(keyLength);\n",
    "test_patch": "diff --git a/crypto/src/test/java/org/springframework/security/crypto/keygen/Base64StringKeyGeneratorTests.java b/crypto/src/test/java/org/springframework/security/crypto/keygen/Base64StringKeyGeneratorTests.java\nindex 4590b676835..a781513f680 100644\n--- a/crypto/src/test/java/org/springframework/security/crypto/keygen/Base64StringKeyGeneratorTests.java\n+++ b/crypto/src/test/java/org/springframework/security/crypto/keygen/Base64StringKeyGeneratorTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -25,13 +25,14 @@\n \n /**\n  * @author Rob Winch\n+ * @author Andrey Litvitski\n  * @since 5.0\n  */\n public class Base64StringKeyGeneratorTests {\n \n \t@Test\n-\tpublic void constructorIntWhenLessThan32ThenIllegalArgumentException() {\n-\t\tassertThatIllegalArgumentException().isThrownBy(() -> new Base64StringKeyGenerator(31));\n+\tpublic void constructorIntWhenEqual0ThenIllegalArgumentException() {\n+\t\tassertThatIllegalArgumentException().isThrownBy(() -> new Base64StringKeyGenerator(0));\n \t}\n \n \t@Test\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "spring-projects__spring-security-17084",
    "pr_id": 17084,
    "issue_id": 16705,
    "repo": "spring-projects/spring-security",
    "problem_statement": "Add a Null-Returning MethodAuthorizationDeniedHandler\nBy default `@HandleAuthorizationDenied` uses an exception-throwing implementation. Another useful implementation would be to return `null`.\n\nIt would go in the same package as `MethodAuthorizationDeniedHandler`.",
    "issue_word_count": 30,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "core/src/main/java/org/springframework/security/authorization/method/NullReturningMethodAuthorizationDeniedHandler.java",
      "core/src/test/java/org/springframework/security/authorization/method/NullReturningMethodAuthorizationDeniedHandlerTests.java"
    ],
    "pr_changed_test_files": [
      "core/src/test/java/org/springframework/security/authorization/method/NullReturningMethodAuthorizationDeniedHandlerTests.java"
    ],
    "base_commit": "ba7be9c8b94728b049913c7c6bc295d6f6c09232",
    "head_commit": "e324d1dae4b4f35a3de45034e8b0fcd660981e51",
    "repo_url": "https://github.com/spring-projects/spring-security/pull/17084",
    "swe_url": "https://swe-bench-plus.turing.com/repos/spring-projects__spring-security/17084",
    "dockerfile": "",
    "pr_merged_at": "2025-05-14T16:45:48.000Z",
    "patch": "diff --git a/core/src/main/java/org/springframework/security/authorization/method/NullReturningMethodAuthorizationDeniedHandler.java b/core/src/main/java/org/springframework/security/authorization/method/NullReturningMethodAuthorizationDeniedHandler.java\nnew file mode 100644\nindex 00000000000..f81a7cb50bf\n--- /dev/null\n+++ b/core/src/main/java/org/springframework/security/authorization/method/NullReturningMethodAuthorizationDeniedHandler.java\n@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2002-2025 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.security.authorization.method;\n+\n+import org.aopalliance.intercept.MethodInvocation;\n+\n+import org.springframework.security.authorization.AuthorizationDeniedException;\n+import org.springframework.security.authorization.AuthorizationResult;\n+\n+/**\n+ * An implementation of {@link MethodAuthorizationDeniedHandler} that return {@code null}.\n+ *\n+ * @author Heejong Yoon\n+ * @since 6.5.0\n+ */\n+public final class NullReturningMethodAuthorizationDeniedHandler implements MethodAuthorizationDeniedHandler {\n+\n+\t@Override\n+\tpublic Object handleDeniedInvocation(MethodInvocation methodInvocation, AuthorizationResult authorizationResult) {\n+\t\tif (authorizationResult instanceof AuthorizationDeniedException exception) {\n+\t\t\tthrow exception;\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic Object handleDeniedInvocationResult(MethodInvocationResult methodInvocationResult,\n+\t\t\tAuthorizationResult authorizationResult) {\n+\t\tif (authorizationResult instanceof AuthorizationDeniedException exception) {\n+\t\t\tthrow exception;\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+}\n",
    "test_patch": "diff --git a/core/src/test/java/org/springframework/security/authorization/method/NullReturningMethodAuthorizationDeniedHandlerTests.java b/core/src/test/java/org/springframework/security/authorization/method/NullReturningMethodAuthorizationDeniedHandlerTests.java\nnew file mode 100644\nindex 00000000000..0064280d1ba\n--- /dev/null\n+++ b/core/src/test/java/org/springframework/security/authorization/method/NullReturningMethodAuthorizationDeniedHandlerTests.java\n@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2002-2025 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.security.authorization.method;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import org.springframework.security.authorization.AuthorizationDeniedException;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+\n+/**\n+ * Tests for {@link NullReturningMethodAuthorizationDeniedHandler}.\n+ *\n+ * @author Heejong Yoon\n+ */\n+class NullReturningMethodAuthorizationDeniedHandlerTests {\n+\n+\t@Test\n+\tvoid handleNullReturningMethod() {\n+\t\tassertThat(new NullReturningMethodAuthorizationDeniedHandler().handleDeniedInvocation(null, null)).isNull();\n+\t}\n+\n+\t@Test\n+\tvoid handleNullReturningMethodWithException() {\n+\t\tassertThatExceptionOfType(AuthorizationDeniedException.class)\n+\t\t\t.isThrownBy(() -> new NullReturningMethodAuthorizationDeniedHandler().handleDeniedInvocation(null,\n+\t\t\t\t\tnew AuthorizationDeniedException(\"test\")));\n+\t}\n+\n+\t@Test\n+\tvoid handleNullReturningMethodWithInvocationResult() {\n+\t\tassertThat(new NullReturningMethodAuthorizationDeniedHandler().handleDeniedInvocationResult(null, null))\n+\t\t\t.isNull();\n+\t}\n+\n+\t@Test\n+\tvoid handleNullReturningMethodWithInvocationResultWithException() {\n+\t\tassertThatExceptionOfType(AuthorizationDeniedException.class)\n+\t\t\t.isThrownBy(() -> new NullReturningMethodAuthorizationDeniedHandler().handleDeniedInvocationResult(null,\n+\t\t\t\t\tnew AuthorizationDeniedException(\"test\")));\n+\t}\n+\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "spring-projects__spring-security-17070",
    "pr_id": 17070,
    "issue_id": 17062,
    "repo": "spring-projects/spring-security",
    "problem_statement": "Consider removal of APPLICATION_JSON_UTF8 (and MediaTypes)\nMediaTypes was put in as a temporary measure for getting updated to Spring Framework 7 so that we could more carefully consider the removal of APPLICATION_JSON_UTF8.\n\nSpring Framework [removed APPLICATION_JSON_UTF8](https://github.com/spring-projects/spring-framework/commit/5044b70a4038f2ae29cee262f63fb0e940297bda#diff-ad51108bdef54c453f4b18b455169d4d5db0b469b1be2033cf521edbf92fd3b9L123-L136) because:\n\n\n> Deprecated as of 5.2 in favor ofAPPLICATION_JSON since major browsers like Chrome <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=438464\"> now comply with the specification</a> and interpret correctly UTF-8 special characters without requiring a UTF-8 parameter.\n\nWe should review if APPLICATION_JSON_UTF8 can be removed from Spring Security. In order to do this, we need to review Spring Security implementations that use it and see if the corresponding specifications require APPLICATION_JSON_UTF8 or if APPLICATION_JSON is acceptable. In particular, this appears to impact a number of OAuth classes, so their corresponding specs must be reviewed.",
    "issue_word_count": 150,
    "test_files_count": 13,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/endpoint/DefaultOAuth2TokenRequestHeadersConverter.java",
      "oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultAuthorizationCodeTokenResponseClientTests.java",
      "oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultClientCredentialsTokenResponseClientTests.java",
      "oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultJwtBearerTokenResponseClientTests.java",
      "oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultOAuth2TokenRequestHeadersConverterTests.java",
      "oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultPasswordTokenResponseClientTests.java",
      "oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultRefreshTokenTokenResponseClientTests.java",
      "oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultTokenExchangeTokenResponseClientTests.java",
      "oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/JwtBearerGrantRequestEntityConverterTests.java",
      "oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/OAuth2AuthorizationCodeGrantRequestEntityConverterTests.java",
      "oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/OAuth2ClientCredentialsGrantRequestEntityConverterTests.java",
      "oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/OAuth2PasswordGrantRequestEntityConverterTests.java",
      "oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/OAuth2RefreshTokenGrantRequestEntityConverterTests.java",
      "oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/TokenExchangeGrantRequestEntityConverterTests.java",
      "web/src/main/java/org/springframework/security/http/MediaTypes.java"
    ],
    "pr_changed_test_files": [
      "oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultAuthorizationCodeTokenResponseClientTests.java",
      "oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultClientCredentialsTokenResponseClientTests.java",
      "oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultJwtBearerTokenResponseClientTests.java",
      "oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultOAuth2TokenRequestHeadersConverterTests.java",
      "oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultPasswordTokenResponseClientTests.java",
      "oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultRefreshTokenTokenResponseClientTests.java",
      "oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultTokenExchangeTokenResponseClientTests.java",
      "oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/JwtBearerGrantRequestEntityConverterTests.java",
      "oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/OAuth2AuthorizationCodeGrantRequestEntityConverterTests.java",
      "oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/OAuth2ClientCredentialsGrantRequestEntityConverterTests.java",
      "oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/OAuth2PasswordGrantRequestEntityConverterTests.java",
      "oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/OAuth2RefreshTokenGrantRequestEntityConverterTests.java",
      "oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/TokenExchangeGrantRequestEntityConverterTests.java"
    ],
    "base_commit": "d52289bd7a27acae736a44737ff636ab21a2d2ca",
    "head_commit": "32403ced9c8e16dd43cff86a0bb6d4824eaae64f",
    "repo_url": "https://github.com/spring-projects/spring-security/pull/17070",
    "swe_url": "https://swe-bench-plus.turing.com/repos/spring-projects__spring-security/17070",
    "dockerfile": "",
    "pr_merged_at": "2025-05-07T19:59:15.000Z",
    "patch": "diff --git a/oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/endpoint/DefaultOAuth2TokenRequestHeadersConverter.java b/oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/endpoint/DefaultOAuth2TokenRequestHeadersConverter.java\nindex c7bb26f91f8..40419e11432 100644\n--- a/oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/endpoint/DefaultOAuth2TokenRequestHeadersConverter.java\n+++ b/oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/endpoint/DefaultOAuth2TokenRequestHeadersConverter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2024 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -24,7 +24,6 @@\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.MediaType;\n import org.springframework.http.RequestEntity;\n-import org.springframework.security.http.MediaTypes;\n import org.springframework.security.oauth2.client.registration.ClientRegistration;\n import org.springframework.security.oauth2.core.ClientAuthenticationMethod;\n \n@@ -92,14 +91,13 @@ public void setEncodeClientCredentials(boolean encodeClientCredentials) {\n \n \t/**\n \t * Creates a {@link DefaultOAuth2TokenRequestHeadersConverter} that populates default\n-\t * {@link HttpHeaders} that includes {@code charset=UTF-8} on both the {@code Accept}\n-\t * and {@code Content-Type} headers to provide backwards compatibility for\n+\t * {@link HttpHeaders} that includes {@code charset=UTF-8} on {@code Content-Type}\n+\t * headers to provide backwards compatibility for\n \t * {@link AbstractOAuth2AuthorizationGrantRequestEntityConverter}.\n \t * @return the default headers converter\n \t */\n \tstatic <T extends AbstractOAuth2AuthorizationGrantRequest> DefaultOAuth2TokenRequestHeadersConverter<T> withCharsetUtf8() {\n \t\tDefaultOAuth2TokenRequestHeadersConverter<T> converter = new DefaultOAuth2TokenRequestHeadersConverter<>();\n-\t\tconverter.accept = List.of(MediaTypes.APPLICATION_JSON_UTF8);\n \t\tconverter.contentType = APPLICATION_FORM_URLENCODED_UTF8;\n \t\treturn converter;\n \t}\n\ndiff --git a/web/src/main/java/org/springframework/security/http/MediaTypes.java b/web/src/main/java/org/springframework/security/http/MediaTypes.java\ndeleted file mode 100644\nindex 96b6c2d989d..00000000000\n--- a/web/src/main/java/org/springframework/security/http/MediaTypes.java\n+++ /dev/null\n@@ -1,39 +0,0 @@\n-/*\n- * Copyright 2002-2021 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.security.http;\n-\n-import java.nio.charset.StandardCharsets;\n-\n-import org.springframework.http.MediaType;\n-\n-/**\n- * This is a placeholder to allow an incremental update to Spring Framework 7.0.\n- *\n- * @deprecated For removal\n- */\n-@Deprecated(since = \"7.0.0\", forRemoval = true)\n-public final class MediaTypes {\n-\n-\tpublic static final MediaType APPLICATION_JSON_UTF8 = new MediaType(MediaType.APPLICATION_JSON,\n-\t\t\tStandardCharsets.UTF_8);\n-\n-\tpublic static final String APPLICATION_JSON_UTF8_VALUE = APPLICATION_JSON_UTF8.toString();\n-\n-\tprivate MediaTypes() {\n-\t}\n-\n-}\n",
    "test_patch": "diff --git a/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultAuthorizationCodeTokenResponseClientTests.java b/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultAuthorizationCodeTokenResponseClientTests.java\nindex e285c61ff69..57cdd38b188 100644\n--- a/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultAuthorizationCodeTokenResponseClientTests.java\n+++ b/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultAuthorizationCodeTokenResponseClientTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -33,7 +33,6 @@\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.MediaType;\n-import org.springframework.security.http.MediaTypes;\n import org.springframework.security.oauth2.client.registration.ClientRegistration;\n import org.springframework.security.oauth2.client.registration.TestClientRegistrations;\n import org.springframework.security.oauth2.core.ClientAuthenticationMethod;\n@@ -119,7 +118,7 @@ public void getTokenResponseWhenSuccessResponseThenReturnAccessTokenResponse() t\n \t\tInstant expiresAtAfter = Instant.now().plusSeconds(3600);\n \t\tRecordedRequest recordedRequest = this.server.takeRequest();\n \t\tassertThat(recordedRequest.getMethod()).isEqualTo(HttpMethod.POST.toString());\n-\t\tassertThat(recordedRequest.getHeader(HttpHeaders.ACCEPT)).isEqualTo(MediaTypes.APPLICATION_JSON_UTF8_VALUE);\n+\t\tassertThat(recordedRequest.getHeader(HttpHeaders.ACCEPT)).isEqualTo(MediaType.APPLICATION_JSON_VALUE);\n \t\tassertThat(recordedRequest.getHeader(HttpHeaders.CONTENT_TYPE))\n \t\t\t.isEqualTo(MediaType.APPLICATION_FORM_URLENCODED_VALUE + \";charset=UTF-8\");\n \t\tString formParameters = recordedRequest.getBody().readUtf8();\n\ndiff --git a/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultClientCredentialsTokenResponseClientTests.java b/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultClientCredentialsTokenResponseClientTests.java\nindex d175bcf22b9..96c6de171c1 100644\n--- a/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultClientCredentialsTokenResponseClientTests.java\n+++ b/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultClientCredentialsTokenResponseClientTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -33,7 +33,6 @@\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.MediaType;\n-import org.springframework.security.http.MediaTypes;\n import org.springframework.security.oauth2.client.registration.ClientRegistration;\n import org.springframework.security.oauth2.client.registration.TestClientRegistrations;\n import org.springframework.security.oauth2.core.ClientAuthenticationMethod;\n@@ -122,7 +121,7 @@ public void getTokenResponseWhenSuccessResponseThenReturnAccessTokenResponse() t\n \t\tInstant expiresAtAfter = Instant.now().plusSeconds(3600);\n \t\tRecordedRequest recordedRequest = this.server.takeRequest();\n \t\tassertThat(recordedRequest.getMethod()).isEqualTo(HttpMethod.POST.toString());\n-\t\tassertThat(recordedRequest.getHeader(HttpHeaders.ACCEPT)).isEqualTo(MediaTypes.APPLICATION_JSON_UTF8_VALUE);\n+\t\tassertThat(recordedRequest.getHeader(HttpHeaders.ACCEPT)).isEqualTo(MediaType.APPLICATION_JSON_VALUE);\n \t\tassertThat(recordedRequest.getHeader(HttpHeaders.CONTENT_TYPE))\n \t\t\t.isEqualTo(MediaType.APPLICATION_FORM_URLENCODED_VALUE + \";charset=UTF-8\");\n \t\tString formParameters = recordedRequest.getBody().readUtf8();\n\ndiff --git a/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultJwtBearerTokenResponseClientTests.java b/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultJwtBearerTokenResponseClientTests.java\nindex a00a9b00905..d2a95f6418e 100644\n--- a/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultJwtBearerTokenResponseClientTests.java\n+++ b/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultJwtBearerTokenResponseClientTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -29,7 +29,6 @@\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.MediaType;\n-import org.springframework.security.http.MediaTypes;\n import org.springframework.security.oauth2.client.registration.ClientRegistration;\n import org.springframework.security.oauth2.client.registration.TestClientRegistrations;\n import org.springframework.security.oauth2.core.AuthorizationGrantType;\n@@ -116,7 +115,7 @@ public void getTokenResponseWhenSuccessResponseThenReturnAccessTokenResponse() t\n \t\tInstant expiresAtAfter = Instant.now().plusSeconds(3600);\n \t\tRecordedRequest recordedRequest = this.server.takeRequest();\n \t\tassertThat(recordedRequest.getMethod()).isEqualTo(HttpMethod.POST.toString());\n-\t\tassertThat(recordedRequest.getHeader(HttpHeaders.ACCEPT)).isEqualTo(MediaTypes.APPLICATION_JSON_UTF8_VALUE);\n+\t\tassertThat(recordedRequest.getHeader(HttpHeaders.ACCEPT)).isEqualTo(MediaType.APPLICATION_JSON_VALUE);\n \t\tassertThat(recordedRequest.getHeader(HttpHeaders.CONTENT_TYPE))\n \t\t\t.isEqualTo(MediaType.APPLICATION_FORM_URLENCODED_VALUE + \";charset=UTF-8\");\n \t\tString formParameters = recordedRequest.getBody().readUtf8();\n\ndiff --git a/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultOAuth2TokenRequestHeadersConverterTests.java b/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultOAuth2TokenRequestHeadersConverterTests.java\nindex 2ba7888ecdf..f2646797968 100644\n--- a/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultOAuth2TokenRequestHeadersConverterTests.java\n+++ b/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultOAuth2TokenRequestHeadersConverterTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2024 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -35,9 +35,6 @@\n  */\n public class DefaultOAuth2TokenRequestHeadersConverterTests {\n \n-\tprivate static final MediaType APPLICATION_JSON_UTF8 = new MediaType(MediaType.APPLICATION_JSON,\n-\t\t\tStandardCharsets.UTF_8);\n-\n \tprivate static final MediaType APPLICATION_FORM_URLENCODED_UTF8 = new MediaType(\n \t\t\tMediaType.APPLICATION_FORM_URLENCODED, StandardCharsets.UTF_8);\n \n@@ -92,7 +89,7 @@ public void convertWhenWithCharsetUtf8AndEncodeClientCredentialsTrueThenConverts\n \t\t// @formatter:on\n \t\tOAuth2ClientCredentialsGrantRequest grantRequest = new OAuth2ClientCredentialsGrantRequest(clientRegistration);\n \t\tHttpHeaders defaultHeaders = this.converter.convert(grantRequest);\n-\t\tassertThat(defaultHeaders.getAccept()).containsExactly(APPLICATION_JSON_UTF8);\n+\t\tassertThat(defaultHeaders.getAccept()).containsExactly(MediaType.APPLICATION_JSON);\n \t\tassertThat(defaultHeaders.getContentType()).isEqualTo(APPLICATION_FORM_URLENCODED_UTF8);\n \t\tassertThat(defaultHeaders.getFirst(HttpHeaders.AUTHORIZATION))\n \t\t\t.isEqualTo(\"Basic Y2xpZW50SWQ6Y2xpZW50U2VjcmV0JTNE\");\n@@ -110,7 +107,7 @@ public void convertWhenWithCharsetUtf8EncodeClientCredentialsFalseThenConvertsWi\n \t\t// @formatter:on\n \t\tOAuth2ClientCredentialsGrantRequest grantRequest = new OAuth2ClientCredentialsGrantRequest(clientRegistration);\n \t\tHttpHeaders defaultHeaders = this.converter.convert(grantRequest);\n-\t\tassertThat(defaultHeaders.getAccept()).containsExactly(APPLICATION_JSON_UTF8);\n+\t\tassertThat(defaultHeaders.getAccept()).containsExactly(MediaType.APPLICATION_JSON);\n \t\tassertThat(defaultHeaders.getContentType()).isEqualTo(APPLICATION_FORM_URLENCODED_UTF8);\n \t\tassertThat(defaultHeaders.getFirst(HttpHeaders.AUTHORIZATION))\n \t\t\t.isEqualTo(\"Basic Y2xpZW50SWQ6Y2xpZW50U2VjcmV0PQ==\");\n\ndiff --git a/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultPasswordTokenResponseClientTests.java b/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultPasswordTokenResponseClientTests.java\nindex a33b234e64e..62ea7dc2c3b 100644\n--- a/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultPasswordTokenResponseClientTests.java\n+++ b/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultPasswordTokenResponseClientTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -33,7 +33,6 @@\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.MediaType;\n-import org.springframework.security.http.MediaTypes;\n import org.springframework.security.oauth2.client.registration.ClientRegistration;\n import org.springframework.security.oauth2.client.registration.TestClientRegistrations;\n import org.springframework.security.oauth2.core.ClientAuthenticationMethod;\n@@ -116,7 +115,7 @@ public void getTokenResponseWhenSuccessResponseThenReturnAccessTokenResponse() t\n \t\tInstant expiresAtAfter = Instant.now().plusSeconds(3600);\n \t\tRecordedRequest recordedRequest = this.server.takeRequest();\n \t\tassertThat(recordedRequest.getMethod()).isEqualTo(HttpMethod.POST.toString());\n-\t\tassertThat(recordedRequest.getHeader(HttpHeaders.ACCEPT)).isEqualTo(MediaTypes.APPLICATION_JSON_UTF8_VALUE);\n+\t\tassertThat(recordedRequest.getHeader(HttpHeaders.ACCEPT)).isEqualTo(MediaType.APPLICATION_JSON_VALUE);\n \t\tassertThat(recordedRequest.getHeader(HttpHeaders.CONTENT_TYPE))\n \t\t\t.isEqualTo(MediaType.APPLICATION_FORM_URLENCODED_VALUE + \";charset=UTF-8\");\n \t\tString formParameters = recordedRequest.getBody().readUtf8();\n\ndiff --git a/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultRefreshTokenTokenResponseClientTests.java b/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultRefreshTokenTokenResponseClientTests.java\nindex 61c4f2d2de6..c1ee06fcd34 100644\n--- a/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultRefreshTokenTokenResponseClientTests.java\n+++ b/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultRefreshTokenTokenResponseClientTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -34,7 +34,6 @@\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.MediaType;\n-import org.springframework.security.http.MediaTypes;\n import org.springframework.security.oauth2.client.registration.ClientRegistration;\n import org.springframework.security.oauth2.client.registration.TestClientRegistrations;\n import org.springframework.security.oauth2.core.ClientAuthenticationMethod;\n@@ -118,7 +117,7 @@ public void getTokenResponseWhenSuccessResponseThenReturnAccessTokenResponse() t\n \t\tInstant expiresAtAfter = Instant.now().plusSeconds(3600);\n \t\tRecordedRequest recordedRequest = this.server.takeRequest();\n \t\tassertThat(recordedRequest.getMethod()).isEqualTo(HttpMethod.POST.toString());\n-\t\tassertThat(recordedRequest.getHeader(HttpHeaders.ACCEPT)).isEqualTo(MediaTypes.APPLICATION_JSON_UTF8_VALUE);\n+\t\tassertThat(recordedRequest.getHeader(HttpHeaders.ACCEPT)).isEqualTo(MediaType.APPLICATION_JSON_VALUE);\n \t\tassertThat(recordedRequest.getHeader(HttpHeaders.CONTENT_TYPE))\n \t\t\t.isEqualTo(MediaType.APPLICATION_FORM_URLENCODED_VALUE + \";charset=UTF-8\");\n \t\tassertThat(recordedRequest.getHeader(HttpHeaders.AUTHORIZATION)).startsWith(\"Basic \");\n\ndiff --git a/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultTokenExchangeTokenResponseClientTests.java b/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultTokenExchangeTokenResponseClientTests.java\nindex 9624c6465cf..4d0afc9163f 100644\n--- a/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultTokenExchangeTokenResponseClientTests.java\n+++ b/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/DefaultTokenExchangeTokenResponseClientTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2024 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -149,8 +149,7 @@ public void getTokenResponseWhenSuccessResponseThenReturnAccessTokenResponse() t\n \t\tInstant expiresAtAfter = Instant.now().plusSeconds(3600);\n \t\tRecordedRequest recordedRequest = this.server.takeRequest();\n \t\tassertThat(recordedRequest.getMethod()).isEqualTo(HttpMethod.POST.toString());\n-\t\tassertThat(recordedRequest.getHeader(HttpHeaders.ACCEPT))\n-\t\t\t.isEqualTo(MediaType.APPLICATION_JSON_VALUE + \";charset=UTF-8\");\n+\t\tassertThat(recordedRequest.getHeader(HttpHeaders.ACCEPT)).isEqualTo(MediaType.APPLICATION_JSON_VALUE);\n \t\tassertThat(recordedRequest.getHeader(HttpHeaders.CONTENT_TYPE))\n \t\t\t.isEqualTo(MediaType.APPLICATION_FORM_URLENCODED_VALUE + \";charset=UTF-8\");\n \t\tString formParameters = recordedRequest.getBody().readUtf8();\n@@ -189,8 +188,7 @@ public void getTokenResponseWhenSubjectTokenIsJwtThenSubjectTokenTypeIsJwt() thr\n \t\tInstant expiresAtAfter = Instant.now().plusSeconds(3600);\n \t\tRecordedRequest recordedRequest = this.server.takeRequest();\n \t\tassertThat(recordedRequest.getMethod()).isEqualTo(HttpMethod.POST.toString());\n-\t\tassertThat(recordedRequest.getHeader(HttpHeaders.ACCEPT))\n-\t\t\t.isEqualTo(MediaType.APPLICATION_JSON_VALUE + \";charset=UTF-8\");\n+\t\tassertThat(recordedRequest.getHeader(HttpHeaders.ACCEPT)).isEqualTo(MediaType.APPLICATION_JSON_VALUE);\n \t\tassertThat(recordedRequest.getHeader(HttpHeaders.CONTENT_TYPE))\n \t\t\t.isEqualTo(MediaType.APPLICATION_FORM_URLENCODED_VALUE + \";charset=UTF-8\");\n \t\tString formParameters = recordedRequest.getBody().readUtf8();\n@@ -229,8 +227,7 @@ public void getTokenResponseWhenActorTokenIsNotNullThenActorParametersAreSent()\n \t\tInstant expiresAtAfter = Instant.now().plusSeconds(3600);\n \t\tRecordedRequest recordedRequest = this.server.takeRequest();\n \t\tassertThat(recordedRequest.getMethod()).isEqualTo(HttpMethod.POST.toString());\n-\t\tassertThat(recordedRequest.getHeader(HttpHeaders.ACCEPT))\n-\t\t\t.isEqualTo(MediaType.APPLICATION_JSON_VALUE + \";charset=UTF-8\");\n+\t\tassertThat(recordedRequest.getHeader(HttpHeaders.ACCEPT)).isEqualTo(MediaType.APPLICATION_JSON_VALUE);\n \t\tassertThat(recordedRequest.getHeader(HttpHeaders.CONTENT_TYPE))\n \t\t\t.isEqualTo(MediaType.APPLICATION_FORM_URLENCODED_VALUE + \";charset=UTF-8\");\n \t\tString formParameters = recordedRequest.getBody().readUtf8();\n@@ -271,8 +268,7 @@ public void getTokenResponseWhenActorTokenIsJwtThenActorTokenTypeIsJwt() throws\n \t\tInstant expiresAtAfter = Instant.now().plusSeconds(3600);\n \t\tRecordedRequest recordedRequest = this.server.takeRequest();\n \t\tassertThat(recordedRequest.getMethod()).isEqualTo(HttpMethod.POST.toString());\n-\t\tassertThat(recordedRequest.getHeader(HttpHeaders.ACCEPT))\n-\t\t\t.isEqualTo(MediaType.APPLICATION_JSON_VALUE + \";charset=UTF-8\");\n+\t\tassertThat(recordedRequest.getHeader(HttpHeaders.ACCEPT)).isEqualTo(MediaType.APPLICATION_JSON_VALUE);\n \t\tassertThat(recordedRequest.getHeader(HttpHeaders.CONTENT_TYPE))\n \t\t\t.isEqualTo(MediaType.APPLICATION_FORM_URLENCODED_VALUE + \";charset=UTF-8\");\n \t\tString formParameters = recordedRequest.getBody().readUtf8();\n\ndiff --git a/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/JwtBearerGrantRequestEntityConverterTests.java b/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/JwtBearerGrantRequestEntityConverterTests.java\nindex 88d06285b2b..d228e2bd8af 100644\n--- a/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/JwtBearerGrantRequestEntityConverterTests.java\n+++ b/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/JwtBearerGrantRequestEntityConverterTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2021 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -25,7 +25,6 @@\n import org.springframework.http.HttpMethod;\n import org.springframework.http.MediaType;\n import org.springframework.http.RequestEntity;\n-import org.springframework.security.http.MediaTypes;\n import org.springframework.security.oauth2.client.registration.ClientRegistration;\n import org.springframework.security.oauth2.client.registration.TestClientRegistrations;\n import org.springframework.security.oauth2.core.AuthorizationGrantType;\n@@ -135,7 +134,7 @@ public void convertWhenGrantRequestValidThenConverts() {\n \t\tassertThat(requestEntity.getUrl().toASCIIString())\n \t\t\t.isEqualTo(clientRegistration.getProviderDetails().getTokenUri());\n \t\tHttpHeaders headers = requestEntity.getHeaders();\n-\t\tassertThat(headers.getAccept()).contains(MediaType.valueOf(MediaTypes.APPLICATION_JSON_UTF8_VALUE));\n+\t\tassertThat(headers.getAccept()).contains(MediaType.APPLICATION_JSON);\n \t\tassertThat(headers.getContentType())\n \t\t\t.isEqualTo(MediaType.valueOf(MediaType.APPLICATION_FORM_URLENCODED_VALUE + \";charset=UTF-8\"));\n \t\tassertThat(headers.getFirst(HttpHeaders.AUTHORIZATION)).startsWith(\"Basic \");\n\ndiff --git a/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/OAuth2AuthorizationCodeGrantRequestEntityConverterTests.java b/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/OAuth2AuthorizationCodeGrantRequestEntityConverterTests.java\nindex ac824a681df..a90201938b2 100644\n--- a/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/OAuth2AuthorizationCodeGrantRequestEntityConverterTests.java\n+++ b/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/OAuth2AuthorizationCodeGrantRequestEntityConverterTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2024 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -28,7 +28,6 @@\n import org.springframework.http.HttpMethod;\n import org.springframework.http.MediaType;\n import org.springframework.http.RequestEntity;\n-import org.springframework.security.http.MediaTypes;\n import org.springframework.security.oauth2.client.registration.ClientRegistration;\n import org.springframework.security.oauth2.client.registration.TestClientRegistrations;\n import org.springframework.security.oauth2.core.AuthorizationGrantType;\n@@ -139,7 +138,7 @@ public void convertWhenGrantRequestValidThenConverts() {\n \t\tassertThat(requestEntity.getUrl().toASCIIString())\n \t\t\t.isEqualTo(clientRegistration.getProviderDetails().getTokenUri());\n \t\tHttpHeaders headers = requestEntity.getHeaders();\n-\t\tassertThat(headers.getAccept()).contains(MediaTypes.APPLICATION_JSON_UTF8);\n+\t\tassertThat(headers.getAccept()).contains(MediaType.APPLICATION_JSON);\n \t\tassertThat(headers.getContentType())\n \t\t\t.isEqualTo(MediaType.valueOf(MediaType.APPLICATION_FORM_URLENCODED_VALUE + \";charset=UTF-8\"));\n \t\tassertThat(headers.getFirst(HttpHeaders.AUTHORIZATION)).isEqualTo(\"Basic Y2xpZW50SWQ6Y2xpZW50U2VjcmV0JTNE\");\n@@ -178,7 +177,7 @@ public void convertWhenPkceGrantRequestValidThenConverts() {\n \t\tassertThat(requestEntity.getUrl().toASCIIString())\n \t\t\t.isEqualTo(clientRegistration.getProviderDetails().getTokenUri());\n \t\tHttpHeaders headers = requestEntity.getHeaders();\n-\t\tassertThat(headers.getAccept()).contains(MediaTypes.APPLICATION_JSON_UTF8);\n+\t\tassertThat(headers.getAccept()).contains(MediaType.APPLICATION_JSON);\n \t\tassertThat(headers.getContentType())\n \t\t\t.isEqualTo(MediaType.valueOf(MediaType.APPLICATION_FORM_URLENCODED_VALUE + \";charset=UTF-8\"));\n \t\tassertThat(headers.getFirst(HttpHeaders.AUTHORIZATION)).isNull();\n\ndiff --git a/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/OAuth2ClientCredentialsGrantRequestEntityConverterTests.java b/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/OAuth2ClientCredentialsGrantRequestEntityConverterTests.java\nindex af25ccb9f15..91d9e36c1cd 100644\n--- a/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/OAuth2ClientCredentialsGrantRequestEntityConverterTests.java\n+++ b/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/OAuth2ClientCredentialsGrantRequestEntityConverterTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2021 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -30,7 +30,6 @@\n import org.springframework.http.HttpMethod;\n import org.springframework.http.MediaType;\n import org.springframework.http.RequestEntity;\n-import org.springframework.security.http.MediaTypes;\n import org.springframework.security.oauth2.client.registration.ClientRegistration;\n import org.springframework.security.oauth2.client.registration.TestClientRegistrations;\n import org.springframework.security.oauth2.core.AuthorizationGrantType;\n@@ -124,7 +123,7 @@ public void convertWhenGrantRequestValidThenConverts() {\n \t\tassertThat(requestEntity.getUrl().toASCIIString())\n \t\t\t.isEqualTo(clientRegistration.getProviderDetails().getTokenUri());\n \t\tHttpHeaders headers = requestEntity.getHeaders();\n-\t\tassertThat(headers.getAccept()).contains(MediaTypes.APPLICATION_JSON_UTF8);\n+\t\tassertThat(headers.getAccept()).contains(MediaType.APPLICATION_JSON);\n \t\tassertThat(headers.getContentType())\n \t\t\t.isEqualTo(MediaType.valueOf(MediaType.APPLICATION_FORM_URLENCODED_VALUE + \";charset=UTF-8\"));\n \t\tassertThat(headers.getFirst(HttpHeaders.AUTHORIZATION)).startsWith(\"Basic \");\n@@ -153,7 +152,7 @@ public void convertWhenSpecialCharactersThenConvertsWithEncodedClientCredentials\n \t\tassertThat(requestEntity.getUrl().toASCIIString())\n \t\t\t.isEqualTo(clientRegistration.getProviderDetails().getTokenUri());\n \t\tHttpHeaders headers = requestEntity.getHeaders();\n-\t\tassertThat(headers.getAccept()).contains(MediaTypes.APPLICATION_JSON_UTF8);\n+\t\tassertThat(headers.getAccept()).contains(MediaType.APPLICATION_JSON);\n \t\tassertThat(headers.getContentType())\n \t\t\t.isEqualTo(MediaType.valueOf(MediaType.APPLICATION_FORM_URLENCODED_VALUE + \";charset=UTF-8\"));\n \t\tString urlEncodedClientCredential = URLEncoder.encode(clientCredentialWithAnsiKeyboardSpecialCharacters,\n\ndiff --git a/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/OAuth2PasswordGrantRequestEntityConverterTests.java b/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/OAuth2PasswordGrantRequestEntityConverterTests.java\nindex 5a6a8811e88..a9de0ceba7a 100644\n--- a/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/OAuth2PasswordGrantRequestEntityConverterTests.java\n+++ b/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/OAuth2PasswordGrantRequestEntityConverterTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2021 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -25,7 +25,6 @@\n import org.springframework.http.HttpMethod;\n import org.springframework.http.MediaType;\n import org.springframework.http.RequestEntity;\n-import org.springframework.security.http.MediaTypes;\n import org.springframework.security.oauth2.client.registration.ClientRegistration;\n import org.springframework.security.oauth2.client.registration.TestClientRegistrations;\n import org.springframework.security.oauth2.core.AuthorizationGrantType;\n@@ -119,7 +118,7 @@ public void convertWhenGrantRequestValidThenConverts() {\n \t\tassertThat(requestEntity.getUrl().toASCIIString())\n \t\t\t.isEqualTo(clientRegistration.getProviderDetails().getTokenUri());\n \t\tHttpHeaders headers = requestEntity.getHeaders();\n-\t\tassertThat(headers.getAccept()).contains(MediaTypes.APPLICATION_JSON_UTF8);\n+\t\tassertThat(headers.getAccept()).contains(MediaType.APPLICATION_JSON);\n \t\tassertThat(headers.getContentType())\n \t\t\t.isEqualTo(MediaType.valueOf(MediaType.APPLICATION_FORM_URLENCODED_VALUE + \";charset=UTF-8\"));\n \t\tassertThat(headers.getFirst(HttpHeaders.AUTHORIZATION)).startsWith(\"Basic \");\n\ndiff --git a/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/OAuth2RefreshTokenGrantRequestEntityConverterTests.java b/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/OAuth2RefreshTokenGrantRequestEntityConverterTests.java\nindex fee0e2b02c3..959b92fbb04 100644\n--- a/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/OAuth2RefreshTokenGrantRequestEntityConverterTests.java\n+++ b/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/OAuth2RefreshTokenGrantRequestEntityConverterTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2021 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -27,7 +27,6 @@\n import org.springframework.http.HttpMethod;\n import org.springframework.http.MediaType;\n import org.springframework.http.RequestEntity;\n-import org.springframework.security.http.MediaTypes;\n import org.springframework.security.oauth2.client.registration.ClientRegistration;\n import org.springframework.security.oauth2.client.registration.TestClientRegistrations;\n import org.springframework.security.oauth2.core.AuthorizationGrantType;\n@@ -131,7 +130,7 @@ public void convertWhenGrantRequestValidThenConverts() {\n \t\tassertThat(requestEntity.getUrl().toASCIIString())\n \t\t\t.isEqualTo(clientRegistration.getProviderDetails().getTokenUri());\n \t\tHttpHeaders headers = requestEntity.getHeaders();\n-\t\tassertThat(headers.getAccept()).contains(MediaTypes.APPLICATION_JSON_UTF8);\n+\t\tassertThat(headers.getAccept()).contains(MediaType.APPLICATION_JSON);\n \t\tassertThat(headers.getContentType())\n \t\t\t.isEqualTo(MediaType.valueOf(MediaType.APPLICATION_FORM_URLENCODED_VALUE + \";charset=UTF-8\"));\n \t\tassertThat(headers.getFirst(HttpHeaders.AUTHORIZATION)).startsWith(\"Basic \");\n\ndiff --git a/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/TokenExchangeGrantRequestEntityConverterTests.java b/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/TokenExchangeGrantRequestEntityConverterTests.java\nindex 8a77a66dfb6..38c2c29e6f9 100644\n--- a/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/TokenExchangeGrantRequestEntityConverterTests.java\n+++ b/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/endpoint/TokenExchangeGrantRequestEntityConverterTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2024 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -161,8 +161,7 @@ public void convertWhenGrantRequestValidThenConverts() {\n \t\tassertThat(requestEntity.getUrl().toASCIIString())\n \t\t\t.isEqualTo(clientRegistration.getProviderDetails().getTokenUri());\n \t\tHttpHeaders headers = requestEntity.getHeaders();\n-\t\tassertThat(headers.getAccept())\n-\t\t\t.contains(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE + \";charset=UTF-8\"));\n+\t\tassertThat(headers.getAccept()).contains(MediaType.APPLICATION_JSON);\n \t\tassertThat(headers.getContentType())\n \t\t\t.isEqualTo(MediaType.valueOf(MediaType.APPLICATION_FORM_URLENCODED_VALUE + \";charset=UTF-8\"));\n \t\tassertThat(headers.getFirst(HttpHeaders.AUTHORIZATION)).startsWith(\"Basic \");\n@@ -197,8 +196,7 @@ public void convertWhenClientAuthenticationMethodIsClientSecretPostThenClientIdA\n \t\tassertThat(requestEntity.getUrl().toASCIIString())\n \t\t\t.isEqualTo(clientRegistration.getProviderDetails().getTokenUri());\n \t\tHttpHeaders headers = requestEntity.getHeaders();\n-\t\tassertThat(headers.getAccept())\n-\t\t\t.contains(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE + \";charset=UTF-8\"));\n+\t\tassertThat(headers.getAccept()).contains(MediaType.APPLICATION_JSON);\n \t\tassertThat(headers.getContentType())\n \t\t\t.isEqualTo(MediaType.valueOf(MediaType.APPLICATION_FORM_URLENCODED_VALUE + \";charset=UTF-8\"));\n \t\tassertThat(headers.getFirst(HttpHeaders.AUTHORIZATION)).isNull();\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "spring-projects__spring-security-17064",
    "pr_id": 17064,
    "issue_id": 17041,
    "repo": "spring-projects/spring-security",
    "problem_statement": "SwitchUserGrantedAuthority cannot be deserialized in Webflux\n**Describe the bug**\n\nI used SwitchUserWebfilter to implement an impersonation function, but it didn't work very well, pleas see the log below:\n\nI found a similar issue in <https://github.com/spring-projects/spring-security/issues/11775>, but the PR https://github.com/spring-projects/spring-security/pull/11758 only resolved in Servlet.\n\n```java\nHalo  | Caused by: com.fasterxml.jackson.databind.JsonMappingException: The class with org.springframework.security.web.authentication.switchuser.SwitchUserGrantedAuthority and name of org.springframework.security.web.authentication.switchuser.SwitchUserGrantedAuthority is not in the allowlist. If you believe this class is safe to deserialize, please provide an explicit mapping using Jackson annotations or by providing a Mixin. If the serialization is only done by a trusted source, you can also enable default typing. See https://github.com/spring-projects/spring-security/issues/4370 for details (through reference chain: org.springframework.security.core.context.SecurityContextImpl[\"authentication\"])\nHalo  | \tat com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:401) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \tat com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:360) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.wrapAndThrow(BeanDeserializerBase.java:1964) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:401) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \tat com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:220) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:187) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \tat com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedForId(AsPropertyTypeDeserializer.java:170) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \tat com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:136) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeWithType(BeanDeserializerBase.java:1382) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \tat com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize(TypeWrappedDeserializer.java:74) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \tat com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:342) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4931) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3970) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \tat org.springframework.data.redis.serializer.JacksonObjectReader.lambda$create$0(JacksonObjectReader.java:54) ~[spring-data-redis-3.4.5.jar:3.4.5]\nHalo  | \tat org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer.deserialize(GenericJackson2JsonRedisSerializer.java:309) ~[spring-data-redis-3.4.5.jar:3.4.5]\nHalo  | \tat org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer.deserialize(GenericJackson2JsonRedisSerializer.java:281) ~[spring-data-redis-3.4.5.jar:3.4.5]\nHalo  | \tat org.springframework.data.redis.serializer.DefaultRedisElementReader.read(DefaultRedisElementReader.java:46) ~[spring-data-redis-3.4.5.jar:3.4.5]\nHalo  | \tat org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair.read(RedisSerializationContext.java:277) ~[spring-data-redis-3.4.5.jar:3.4.5]\nHalo  | \tat org.springframework.data.redis.core.DefaultReactiveHashOperations.readHashValue(DefaultReactiveHashOperations.java:292) ~[spring-data-redis-3.4.5.jar:3.4.5]\nHalo  | \tat org.springframework.data.redis.core.DefaultReactiveHashOperations.deserializeHashEntry(DefaultReactiveHashOperations.java:307) ~[spring-data-redis-3.4.5.jar:3.4.5]\nHalo  | \tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106) ~[reactor-core-3.7.5.jar:3.7.5]\nHalo  | \tat reactor.core.publisher.FluxFlatMap$FlatMapMain.tryEmit(FluxFlatMap.java:547) ~[reactor-core-3.7.5.jar:3.7.5]\nHalo  | \tat reactor.core.publisher.FluxFlatMap$FlatMapInner.onNext(FluxFlatMap.java:988) ~[reactor-core-3.7.5.jar:3.7.5]\nHalo  | \tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122) ~[reactor-core-3.7.5.jar:3.7.5]\nHalo  | \tat io.lettuce.core.RedisPublisher$ImmediateSubscriber.onNext(RedisPublisher.java:895) ~[lettuce-core-6.4.2.RELEASE.jar:6.4.2.RELEASE/f4dfb40]\nHalo  | \tat io.lettuce.core.RedisPublisher$RedisSubscription.onNext(RedisPublisher.java:295) ~[lettuce-core-6.4.2.RELEASE.jar:6.4.2.RELEASE/f4dfb40]\nHalo  | \tat io.lettuce.core.output.StreamingOutput$Subscriber.onNext(StreamingOutput.java:49) ~[lettuce-core-6.4.2.RELEASE.jar:6.4.2.RELEASE/f4dfb40]\nHalo  | \tat io.lettuce.core.output.KeyValueListOutput.set(KeyValueListOutput.java:61) ~[lettuce-core-6.4.2.RELEASE.jar:6.4.2.RELEASE/f4dfb40]\nHalo  | \tat io.lettuce.core.protocol.RedisStateMachine.safeSet(RedisStateMachine.java:814) ~[lettuce-core-6.4.2.RELEASE.jar:6.4.2.RELEASE/f4dfb40]\nHalo  | \tat io.lettuce.core.protocol.RedisStateMachine.handleBytes(RedisStateMachine.java:601) ~[lettuce-core-6.4.2.RELEASE.jar:6.4.2.RELEASE/f4dfb40]\nHalo  | \tat io.lettuce.core.protocol.RedisStateMachine$State$Type.handle(RedisStateMachine.java:210) ~[lettuce-core-6.4.2.RELEASE.jar:6.4.2.RELEASE/f4dfb40]\nHalo  | \tat io.lettuce.core.protocol.RedisStateMachine.doDecode(RedisStateMachine.java:363) ~[lettuce-core-6.4.2.RELEASE.jar:6.4.2.RELEASE/f4dfb40]\nHalo  | \tat io.lettuce.core.protocol.RedisStateMachine.decode(RedisStateMachine.java:324) ~[lettuce-core-6.4.2.RELEASE.jar:6.4.2.RELEASE/f4dfb40]\nHalo  | \tat io.lettuce.core.protocol.CommandHandler.decode(CommandHandler.java:844) ~[lettuce-core-6.4.2.RELEASE.jar:6.4.2.RELEASE/f4dfb40]\nHalo  | \tat io.lettuce.core.protocol.CommandHandler.decode0(CommandHandler.java:795) ~[lettuce-core-6.4.2.RELEASE.jar:6.4.2.RELEASE/f4dfb40]\nHalo  | \tat io.lettuce.core.protocol.CommandHandler.decode(CommandHandler.java:769) ~[lettuce-core-6.4.2.RELEASE.jar:6.4.2.RELEASE/f4dfb40]\nHalo  | \tat io.lettuce.core.protocol.CommandHandler.decode(CommandHandler.java:661) ~[lettuce-core-6.4.2.RELEASE.jar:6.4.2.RELEASE/f4dfb40]\nHalo  | \tat io.lettuce.core.protocol.CommandHandler.channelRead(CommandHandler.java:601) ~[lettuce-core-6.4.2.RELEASE.jar:6.4.2.RELEASE/f4dfb40]\nHalo  | \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442) ~[netty-transport-4.1.119.Final.jar:4.1.119.Final]\nHalo  | \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420) ~[netty-transport-4.1.119.Final.jar:4.1.119.Final]\nHalo  | \tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412) ~[netty-transport-4.1.119.Final.jar:4.1.119.Final]\nHalo  | \tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357) ~[netty-transport-4.1.119.Final.jar:4.1.119.Final]\nHalo  | \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440) ~[netty-transport-4.1.119.Final.jar:4.1.119.Final]\nHalo  | \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420) ~[netty-transport-4.1.119.Final.jar:4.1.119.Final]\nHalo  | \tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868) ~[netty-transport-4.1.119.Final.jar:4.1.119.Final]\nHalo  | \tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:799) ~[netty-transport-classes-epoll-4.1.119.Final.jar:4.1.119.Final]\nHalo  | \tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:501) ~[netty-transport-classes-epoll-4.1.119.Final.jar:4.1.119.Final]\nHalo  | \tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:399) ~[netty-transport-classes-epoll-4.1.119.Final.jar:4.1.119.Final]\nHalo  | \tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998) ~[netty-common-4.1.119.Final.jar:4.1.119.Final]\nHalo  | \tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74) ~[netty-common-4.1.119.Final.jar:4.1.119.Final]\nHalo  | \tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) ~[netty-common-4.1.119.Final.jar:4.1.119.Final]\nHalo  | \tat java.base/java.lang.Thread.run(Unknown Source) ~[na:na]\nHalo  | Caused by: java.lang.IllegalArgumentException: The class with org.springframework.security.web.authentication.switchuser.SwitchUserGrantedAuthority and name of org.springframework.security.web.authentication.switchuser.SwitchUserGrantedAuthority is not in the allowlist. If you believe this class is safe to deserialize, please provide an explicit mapping using Jackson annotations or by providing a Mixin. If the serialization is only done by a trusted source, you can also enable default typing. See https://github.com/spring-projects/spring-security/issues/4370 for details\nHalo  | \tat org.springframework.security.jackson2.SecurityJackson2Modules$AllowlistTypeIdResolver.typeFromId(SecurityJackson2Modules.java:293) ~[spring-security-core-6.4.5.jar:6.4.5]\nHalo  | \tat com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase._findDeserializer(TypeDeserializerBase.java:159) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \tat com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedForId(AsPropertyTypeDeserializer.java:151) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \tat com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:136) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \tat com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromAny(AsPropertyTypeDeserializer.java:240) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \tat com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializerNR.deserializeWithType(UntypedObjectDeserializerNR.java:112) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \tat com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize(TypeWrappedDeserializer.java:74) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \tat com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:342) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \tat com.fasterxml.jackson.databind.ObjectMapper._readValue(ObjectMapper.java:4904) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3036) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \tat org.springframework.security.jackson2.AbstractUnmodifiableCollectionDeserializer.deserialize(AbstractUnmodifiableCollectionDeserializer.java:51) ~[spring-security-core-6.4.5.jar:6.4.5]\nHalo  | \tat com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer._deserialize(AsArrayTypeDeserializer.java:123) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \tat com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer.deserializeTypedFromArray(AsArrayTypeDeserializer.java:56) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \tat com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserializeWithType(CollectionDeserializer.java:285) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \tat com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize(TypeWrappedDeserializer.java:74) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \tat com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:342) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \tat com.fasterxml.jackson.databind.ObjectMapper._readValue(ObjectMapper.java:4904) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3061) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \tat org.springframework.security.jackson2.UsernamePasswordAuthenticationTokenDeserializer.deserialize(UsernamePasswordAuthenticationTokenDeserializer.java:78) ~[spring-security-core-6.4.5.jar:6.4.5]\nHalo  | \tat org.springframework.security.jackson2.UsernamePasswordAuthenticationTokenDeserializer.deserialize(UsernamePasswordAuthenticationTokenDeserializer.java:51) ~[spring-security-core-6.4.5.jar:6.4.5]\nHalo  | \tat com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedForId(AsPropertyTypeDeserializer.java:170) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \tat com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:136) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \tat com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType(AbstractDeserializer.java:263) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \tat com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:138) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:399) ~[jackson-databind-2.18.3.jar:2.18.3]\nHalo  | \t... 48 common frames omitted\n```\n\n**To Reproduce**\n\n1. Add additional web filter: SwitchUserWebFilter\n```java\n        var filter = new SwitchUserWebFilter(userDetailsService, \"/\", \"/login?error=impersonate\");\n        http.addFilterAfter(filter, SecurityWebFiltersOrder.AUTHORIZATION);\n```\n2. Add spring-session-data-redis dependency\n\n```gradle\n    implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'\n    implementation 'org.springframework.session:spring-session-data-redis'\n```\n\n3. Start a Redis instance\n4. Try to switch user\n5. See the error\n\n**Expected behavior**\n\nShould work with session deserialization.\n\nI'm willing to propose a PR to resolve the issue.\n\n**Sample**\n\n```java\nimport static org.junit.jupiter.api.Assertions.assertInstanceOf;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.authority.AuthorityUtils;\nimport org.springframework.security.jackson2.SecurityJackson2Modules;\nimport org.springframework.security.web.authentication.switchuser.SwitchUserGrantedAuthority;\nimport org.springframework.security.web.server.jackson2.WebServerJackson2Module;\n\nclass SwitchUserAuthorityTest {\n\n    @Test\n    void deserializeTest() throws JsonProcessingException {\n        var objectMapper = Jackson2ObjectMapperBuilder.json()\n            .modules(SecurityJackson2Modules.getModules(this.getClass().getClassLoader()))\n            .indentOutput(true)\n            .build();\n\n        var authentication = UsernamePasswordAuthenticationToken.authenticated(\n            \"admin\", \"openadmin\", AuthorityUtils.createAuthorityList(\"ROLE_ADMIN\")\n        );\n        var switchUserGrantedAuthority =\n            new SwitchUserGrantedAuthority(\"ADMIN\", authentication);\n        var extendedAuthorities = new ArrayList<>(authentication.getAuthorities());\n        extendedAuthorities.add(switchUserGrantedAuthority);\n        authentication = UsernamePasswordAuthenticationToken.authenticated(\n            authentication.getPrincipal(), authentication.getCredentials(), extendedAuthorities\n        );\n\n        var json = objectMapper.writeValueAsString(authentication);\n        var resolved = objectMapper.readValue(json, Authentication.class);\n        assertInstanceOf(UsernamePasswordAuthenticationToken.class, resolved);\n    }\n}\n```",
    "issue_word_count": 2132,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "web/src/main/java/org/springframework/security/web/jackson2/SwitchUserGrantedAuthorityMixIn.java",
      "web/src/main/java/org/springframework/security/web/jackson2/WebJackson2Module.java",
      "web/src/test/java/org/springframework/security/web/jackson2/SwitchUserGrantedAuthorityMixInTests.java"
    ],
    "pr_changed_test_files": [
      "web/src/test/java/org/springframework/security/web/jackson2/SwitchUserGrantedAuthorityMixInTests.java"
    ],
    "base_commit": "ba7be9c8b94728b049913c7c6bc295d6f6c09232",
    "head_commit": "fe2f8a1e2d603af03414a4415c5099491198f702",
    "repo_url": "https://github.com/spring-projects/spring-security/pull/17064",
    "swe_url": "https://swe-bench-plus.turing.com/repos/spring-projects__spring-security/17064",
    "dockerfile": "",
    "pr_merged_at": "2025-05-23T20:42:54.000Z",
    "patch": "diff --git a/web/src/main/java/org/springframework/security/web/jackson2/SwitchUserGrantedAuthorityMixIn.java b/web/src/main/java/org/springframework/security/web/jackson2/SwitchUserGrantedAuthorityMixIn.java\nindex 4fff7ffdc41..f61b8a05bf0 100644\n--- a/web/src/main/java/org/springframework/security/web/jackson2/SwitchUserGrantedAuthorityMixIn.java\n+++ b/web/src/main/java/org/springframework/security/web/jackson2/SwitchUserGrantedAuthorityMixIn.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2024 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -30,6 +30,7 @@\n  *\n  * @author Markus Heiden\n  * @since 6.3\n+ * @see WebJackson2Module\n  * @see WebServletJackson2Module\n  * @see org.springframework.security.jackson2.SecurityJackson2Modules\n  */\n\ndiff --git a/web/src/main/java/org/springframework/security/web/jackson2/WebJackson2Module.java b/web/src/main/java/org/springframework/security/web/jackson2/WebJackson2Module.java\nindex 87daedcc40d..b8cee4fee05 100644\n--- a/web/src/main/java/org/springframework/security/web/jackson2/WebJackson2Module.java\n+++ b/web/src/main/java/org/springframework/security/web/jackson2/WebJackson2Module.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2015-2016 the original author or authors.\n+ * Copyright 2015-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -21,14 +21,16 @@\n \n import org.springframework.security.jackson2.SecurityJackson2Modules;\n import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;\n+import org.springframework.security.web.authentication.switchuser.SwitchUserGrantedAuthority;\n import org.springframework.security.web.csrf.DefaultCsrfToken;\n \n /**\n  * Jackson module for spring-security-web. This module register\n- * {@link DefaultCsrfTokenMixin} and {@link PreAuthenticatedAuthenticationTokenMixin}. If\n- * no default typing enabled by default then it'll enable it because typing info is needed\n- * to properly serialize/deserialize objects. In order to use this module just add this\n- * module into your ObjectMapper configuration.\n+ * {@link DefaultCsrfTokenMixin}, {@link PreAuthenticatedAuthenticationTokenMixin} and\n+ * {@link SwitchUserGrantedAuthorityMixIn}. If no default typing enabled by default then\n+ * it'll enable it because typing info is needed to properly serialize/deserialize\n+ * objects. In order to use this module just add this module into your ObjectMapper\n+ * configuration.\n  *\n  * <pre>\n  *     ObjectMapper mapper = new ObjectMapper();\n@@ -53,6 +55,7 @@ public void setupModule(SetupContext context) {\n \t\tcontext.setMixInAnnotations(DefaultCsrfToken.class, DefaultCsrfTokenMixin.class);\n \t\tcontext.setMixInAnnotations(PreAuthenticatedAuthenticationToken.class,\n \t\t\t\tPreAuthenticatedAuthenticationTokenMixin.class);\n+\t\tcontext.setMixInAnnotations(SwitchUserGrantedAuthority.class, SwitchUserGrantedAuthorityMixIn.class);\n \t}\n \n }\n",
    "test_patch": "diff --git a/web/src/test/java/org/springframework/security/web/jackson2/SwitchUserGrantedAuthorityMixInTests.java b/web/src/test/java/org/springframework/security/web/jackson2/SwitchUserGrantedAuthorityMixInTests.java\nindex 703811658c6..70bba02513f 100644\n--- a/web/src/test/java/org/springframework/security/web/jackson2/SwitchUserGrantedAuthorityMixInTests.java\n+++ b/web/src/test/java/org/springframework/security/web/jackson2/SwitchUserGrantedAuthorityMixInTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2024 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -16,14 +16,20 @@\n \n package org.springframework.security.web.jackson2;\n \n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n import org.skyscreamer.jsonassert.JSONAssert;\n \n import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.core.authority.AuthorityUtils;\n-import org.springframework.security.jackson2.AbstractMixinTests;\n+import org.springframework.security.jackson2.CoreJackson2Module;\n+import org.springframework.security.jackson2.SecurityJackson2Modules;\n import org.springframework.security.jackson2.SimpleGrantedAuthorityMixinTests;\n import org.springframework.security.web.authentication.switchuser.SwitchUserGrantedAuthority;\n \n@@ -33,7 +39,7 @@\n  * @author Markus Heiden\n  * @since 6.3\n  */\n-public class SwitchUserGrantedAuthorityMixInTests extends AbstractMixinTests {\n+public class SwitchUserGrantedAuthorityMixInTests {\n \n \t// language=JSON\n \tprivate static final String SWITCH_JSON = \"\"\"\n@@ -53,22 +59,42 @@ public class SwitchUserGrantedAuthorityMixInTests extends AbstractMixinTests {\n \n \tprivate Authentication source;\n \n+\tstatic Stream<Arguments> mappers() {\n+\t\tObjectMapper securityJackson2ModulesMapper = new ObjectMapper();\n+\t\tClassLoader classLoader = SwitchUserGrantedAuthorityMixInTests.class.getClassLoader();\n+\t\tsecurityJackson2ModulesMapper.registerModules(SecurityJackson2Modules.getModules(classLoader));\n+\n+\t\tObjectMapper webJackson2ModuleMapper = new ObjectMapper();\n+\t\twebJackson2ModuleMapper.registerModule(new CoreJackson2Module());\n+\t\twebJackson2ModuleMapper.registerModule(new WebJackson2Module());\n+\n+\t\tObjectMapper webServletJackson2ModuleMapper = new ObjectMapper();\n+\t\twebServletJackson2ModuleMapper.registerModule(new CoreJackson2Module());\n+\t\twebServletJackson2ModuleMapper.registerModule(new WebServletJackson2Module());\n+\n+\t\treturn Stream.of(Arguments.of(securityJackson2ModulesMapper), Arguments.of(webJackson2ModuleMapper),\n+\t\t\t\tArguments.of(webServletJackson2ModuleMapper));\n+\t}\n+\n \t@BeforeEach\n \tpublic void setUp() {\n \t\tthis.source = new UsernamePasswordAuthenticationToken(\"principal\", \"credentials\",\n \t\t\t\tAuthorityUtils.createAuthorityList(\"ROLE_USER\"));\n \t}\n \n-\t@Test\n-\tpublic void serializeWhenPrincipalCredentialsAuthoritiesThenSuccess() throws Exception {\n+\t@ParameterizedTest\n+\t@MethodSource(\"mappers\")\n+\tpublic void serializeWhenPrincipalCredentialsAuthoritiesThenSuccess(ObjectMapper mapper) throws Exception {\n \t\tSwitchUserGrantedAuthority expected = new SwitchUserGrantedAuthority(\"switched\", this.source);\n-\t\tString serializedJson = this.mapper.writeValueAsString(expected);\n+\t\tString serializedJson = mapper.writeValueAsString(expected);\n \t\tJSONAssert.assertEquals(SWITCH_JSON, serializedJson, true);\n \t}\n \n-\t@Test\n-\tpublic void deserializeWhenSourceIsUsernamePasswordAuthenticationTokenThenSuccess() throws Exception {\n-\t\tSwitchUserGrantedAuthority deserialized = this.mapper.readValue(SWITCH_JSON, SwitchUserGrantedAuthority.class);\n+\t@ParameterizedTest\n+\t@MethodSource(\"mappers\")\n+\tpublic void deserializeWhenSourceIsUsernamePasswordAuthenticationTokenThenSuccess(ObjectMapper mapper)\n+\t\t\tthrows Exception {\n+\t\tSwitchUserGrantedAuthority deserialized = mapper.readValue(SWITCH_JSON, SwitchUserGrantedAuthority.class);\n \t\tassertThat(deserialized).isNotNull();\n \t\tassertThat(deserialized.getAuthority()).isEqualTo(\"switched\");\n \t\tassertThat(deserialized.getSource()).isEqualTo(this.source);\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "spring-projects__spring-security-17030",
    "pr_id": 17030,
    "issue_id": 17004,
    "repo": "spring-projects/spring-security",
    "problem_statement": "JOSE Validators claim mandatoriness option\n**Expected Behavior**\n\nI would like to build a control in ```JwtTimestampValidator```, ```JwtIssuerValidator``` and ```JwtAudienceValidator``` that mandatoriness of the specific JWT clause is specified. So that a ```required``` parameter can specify the same way like it is done in JwtIssuedAtValidator.\n\n**Current Behavior**\n\nThe above mentioned validators are simply falling through with successful check when the given clause is missing form JWT. This may be a misleading behavior because validator is created for a reason. However it is understandable the claims are optional by the specification - in general.\n\n**Context**\n\nI would like to create the alternative that the implementor could control if the fields must be mandatory. Currently this could be achieved by adding multiple validators. It is more elegant to specify if the given validator requires the claim and make the validation fail if the claim is missing. So this way more strict and rigorous control could be built.",
    "issue_word_count": 153,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "oauth2/oauth2-jose/src/main/java/org/springframework/security/oauth2/jwt/JwtTimestampValidator.java",
      "oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/JwtTimestampValidatorTests.java"
    ],
    "pr_changed_test_files": [
      "oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/JwtTimestampValidatorTests.java"
    ],
    "base_commit": "ff8b77df296990eea4abd1a3676c87a327e2d71c",
    "head_commit": "36513ffef9f20afa27b59510c227a5fd81107d9a",
    "repo_url": "https://github.com/spring-projects/spring-security/pull/17030",
    "swe_url": "https://swe-bench-plus.turing.com/repos/spring-projects__spring-security/17030",
    "dockerfile": "",
    "pr_merged_at": "2025-05-27T18:22:26.000Z",
    "patch": "diff --git a/oauth2/oauth2-jose/src/main/java/org/springframework/security/oauth2/jwt/JwtTimestampValidator.java b/oauth2/oauth2-jose/src/main/java/org/springframework/security/oauth2/jwt/JwtTimestampValidator.java\nindex d191b8b11a6..f23dfbe4f76 100644\n--- a/oauth2/oauth2-jose/src/main/java/org/springframework/security/oauth2/jwt/JwtTimestampValidator.java\n+++ b/oauth2/oauth2-jose/src/main/java/org/springframework/security/oauth2/jwt/JwtTimestampValidator.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -29,6 +29,7 @@\n import org.springframework.security.oauth2.core.OAuth2TokenValidator;\n import org.springframework.security.oauth2.core.OAuth2TokenValidatorResult;\n import org.springframework.util.Assert;\n+import org.springframework.util.ObjectUtils;\n \n /**\n  * An implementation of {@link OAuth2TokenValidator} for verifying claims in a Jwt-based\n@@ -54,6 +55,10 @@ public final class JwtTimestampValidator implements OAuth2TokenValidator<Jwt> {\n \n \tprivate final Duration clockSkew;\n \n+\tprivate boolean allowEmptyExpiryClaim = true;\n+\n+\tprivate boolean allowEmptyNotBeforeClaim = true;\n+\n \tprivate Clock clock = Clock.systemUTC();\n \n \t/**\n@@ -68,30 +73,54 @@ public JwtTimestampValidator(Duration clockSkew) {\n \t\tthis.clockSkew = clockSkew;\n \t}\n \n+\t/**\n+\t * Whether to allow the {@code exp} header to be empty. The default value is\n+\t * {@code true}\n+\t *\n+\t * @since 7.0\n+\t */\n+\tpublic void setAllowEmptyExpiryClaim(boolean allowEmptyExpiryClaim) {\n+\t\tthis.allowEmptyExpiryClaim = allowEmptyExpiryClaim;\n+\t}\n+\n+\t/**\n+\t * Whether to allow the {@code nbf} header to be empty. The default value is\n+\t * {@code true}\n+\t *\n+\t * @since 7.0\n+\t */\n+\tpublic void setAllowEmptyNotBeforeClaim(boolean allowEmptyNotBeforeClaim) {\n+\t\tthis.allowEmptyNotBeforeClaim = allowEmptyNotBeforeClaim;\n+\t}\n+\n \t@Override\n \tpublic OAuth2TokenValidatorResult validate(Jwt jwt) {\n \t\tAssert.notNull(jwt, \"jwt cannot be null\");\n \t\tInstant expiry = jwt.getExpiresAt();\n+\t\tif (!this.allowEmptyExpiryClaim && ObjectUtils.isEmpty(expiry)) {\n+\t\t\treturn createOAuth2Error(\"exp is required\");\n+\t\t}\n \t\tif (expiry != null) {\n \t\t\tif (Instant.now(this.clock).minus(this.clockSkew).isAfter(expiry)) {\n-\t\t\t\tOAuth2Error oAuth2Error = createOAuth2Error(String.format(\"Jwt expired at %s\", jwt.getExpiresAt()));\n-\t\t\t\treturn OAuth2TokenValidatorResult.failure(oAuth2Error);\n+\t\t\t\treturn createOAuth2Error(String.format(\"Jwt expired at %s\", jwt.getExpiresAt()));\n \t\t\t}\n \t\t}\n \t\tInstant notBefore = jwt.getNotBefore();\n+\t\tif (!this.allowEmptyNotBeforeClaim && ObjectUtils.isEmpty(notBefore)) {\n+\t\t\treturn createOAuth2Error(\"nbf is required\");\n+\t\t}\n \t\tif (notBefore != null) {\n \t\t\tif (Instant.now(this.clock).plus(this.clockSkew).isBefore(notBefore)) {\n-\t\t\t\tOAuth2Error oAuth2Error = createOAuth2Error(String.format(\"Jwt used before %s\", jwt.getNotBefore()));\n-\t\t\t\treturn OAuth2TokenValidatorResult.failure(oAuth2Error);\n+\t\t\t\treturn createOAuth2Error(String.format(\"Jwt used before %s\", jwt.getNotBefore()));\n \t\t\t}\n \t\t}\n \t\treturn OAuth2TokenValidatorResult.success();\n \t}\n \n-\tprivate OAuth2Error createOAuth2Error(String reason) {\n+\tprivate OAuth2TokenValidatorResult createOAuth2Error(String reason) {\n \t\tthis.logger.debug(reason);\n-\t\treturn new OAuth2Error(OAuth2ErrorCodes.INVALID_TOKEN, reason,\n-\t\t\t\t\"https://tools.ietf.org/html/rfc6750#section-3.1\");\n+\t\treturn OAuth2TokenValidatorResult.failure(new OAuth2Error(OAuth2ErrorCodes.INVALID_TOKEN, reason,\n+\t\t\t\t\"https://tools.ietf.org/html/rfc6750#section-3.1\"));\n \t}\n \n \t/**\n",
    "test_patch": "diff --git a/oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/JwtTimestampValidatorTests.java b/oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/JwtTimestampValidatorTests.java\nindex 72164cf21b7..0d88794c0fe 100644\n--- a/oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/JwtTimestampValidatorTests.java\n+++ b/oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/JwtTimestampValidatorTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2021 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -129,6 +129,23 @@ public void validateWhenConfiguredWithFixedClockThenValidatesUsingFixedTime() {\n \n \t@Test\n \tpublic void validateWhenNeitherExpiryNorNotBeforeIsSpecifiedThenReturnsSuccessfulResult() {\n+\t\tJwt jwt = TestJwts.jwt().claims((c) -> {\n+\t\t\tc.remove(JwtClaimNames.EXP);\n+\t\t\tc.remove(JwtClaimNames.NBF);\n+\t\t}).build();\n+\t\tJwtTimestampValidator jwtValidator = new JwtTimestampValidator();\n+\t\tassertThat(jwtValidator.validate(jwt).hasErrors()).isFalse();\n+\t}\n+\n+\t@Test\n+\tpublic void validateWhenExpiryIsSpecifiedThenReturnsSuccessfulResult() {\n+\t\tJwt jwt = TestJwts.jwt().claims((c) -> c.remove(JwtClaimNames.EXP)).build();\n+\t\tJwtTimestampValidator jwtValidator = new JwtTimestampValidator();\n+\t\tassertThat(jwtValidator.validate(jwt).hasErrors()).isFalse();\n+\t}\n+\n+\t@Test\n+\tpublic void validateWhenNotBeforeIsSpecifiedThenReturnsSuccessfulResult() {\n \t\tJwt jwt = TestJwts.jwt().claims((c) -> c.remove(JwtClaimNames.EXP)).build();\n \t\tJwtTimestampValidator jwtValidator = new JwtTimestampValidator();\n \t\tassertThat(jwtValidator.validate(jwt).hasErrors()).isFalse();\n@@ -141,6 +158,22 @@ public void validateWhenNotBeforeIsValidAndExpiryIsNotSpecifiedThenReturnsSucces\n \t\tassertThat(jwtValidator.validate(jwt).hasErrors()).isFalse();\n \t}\n \n+\t@Test\n+\tpublic void validateWhenNotAllowEmptyExpiryClaimAndNotBeforeIsValidAndExpiryIsNotSpecifiedThenReturnsSuccessfulResult() {\n+\t\tJwt jwt = TestJwts.jwt().claims((c) -> c.remove(JwtClaimNames.EXP)).notBefore(Instant.MIN).build();\n+\t\tJwtTimestampValidator jwtValidator = new JwtTimestampValidator();\n+\t\tjwtValidator.setAllowEmptyExpiryClaim(false);\n+\t\tassertThat(jwtValidator.validate(jwt).hasErrors()).isTrue();\n+\t}\n+\n+\t@Test\n+\tpublic void validateWhenNotAllowEmptyNotBeforeClaimAndNotBeforeIsNotSpecifiedThenReturnsSuccessfulResult() {\n+\t\tJwt jwt = TestJwts.jwt().claims((c) -> c.remove(JwtClaimNames.NBF)).build();\n+\t\tJwtTimestampValidator jwtValidator = new JwtTimestampValidator();\n+\t\tjwtValidator.setAllowEmptyNotBeforeClaim(false);\n+\t\tassertThat(jwtValidator.validate(jwt).hasErrors()).isTrue();\n+\t}\n+\n \t@Test\n \tpublic void validateWhenExpiryIsValidAndNotBeforeIsNotSpecifiedThenReturnsSuccessfulResult() {\n \t\tJwt jwt = TestJwts.jwt().build();\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "spring-projects__spring-security-16996",
    "pr_id": 16996,
    "issue_id": 16706,
    "repo": "spring-projects/spring-security",
    "problem_statement": "AuthorizationProxyFactory.proxy should return the same type that is passed into the method\nThis would make it type safe for consumers of the API. Instead of\n\n```java\nService service = (Service) factory.proxy(new Service());\n```\n\nit could be written\n\n```java\nService service = factory.proxy(new Service());\n```\n\nNOTE: I think this might be a change fore 7.0",
    "issue_word_count": 56,
    "test_files_count": 2,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "config/src/main/java/org/springframework/security/config/annotation/method/configuration/AuthorizationProxyWebConfiguration.java",
      "config/src/test/java/org/springframework/security/config/annotation/method/configuration/AuthorizationProxyConfigurationTests.java",
      "core/src/main/java/org/springframework/security/aot/hint/AuthorizeReturnObjectHintsRegistrar.java",
      "core/src/main/java/org/springframework/security/authorization/AuthorizationProxyFactory.java",
      "core/src/main/java/org/springframework/security/authorization/method/AuthorizationAdvisorProxyFactory.java",
      "core/src/test/java/org/springframework/security/authorization/AuthorizationAdvisorProxyFactoryTests.java"
    ],
    "pr_changed_test_files": [
      "config/src/test/java/org/springframework/security/config/annotation/method/configuration/AuthorizationProxyConfigurationTests.java",
      "core/src/test/java/org/springframework/security/authorization/AuthorizationAdvisorProxyFactoryTests.java"
    ],
    "base_commit": "ff8b77df296990eea4abd1a3676c87a327e2d71c",
    "head_commit": "3c8a94d22794731f8911a161a31b22a2c85c5d45",
    "repo_url": "https://github.com/spring-projects/spring-security/pull/16996",
    "swe_url": "https://swe-bench-plus.turing.com/repos/spring-projects__spring-security/16996",
    "dockerfile": "",
    "pr_merged_at": "2025-05-23T20:48:11.000Z",
    "patch": "diff --git a/config/src/main/java/org/springframework/security/config/annotation/method/configuration/AuthorizationProxyWebConfiguration.java b/config/src/main/java/org/springframework/security/config/annotation/method/configuration/AuthorizationProxyWebConfiguration.java\nindex 4af062ef96f..62faa1a6bc6 100644\n--- a/config/src/main/java/org/springframework/security/config/annotation/method/configuration/AuthorizationProxyWebConfiguration.java\n+++ b/config/src/main/java/org/springframework/security/config/annotation/method/configuration/AuthorizationProxyWebConfiguration.java\n@@ -51,7 +51,7 @@ public Object visit(AuthorizationAdvisorProxyFactory proxyFactory, Object target\n \t\t\tif (target instanceof ModelAndView mav) {\n \t\t\t\tView view = mav.getView();\n \t\t\t\tString viewName = mav.getViewName();\n-\t\t\t\tMap<String, Object> model = (Map<String, Object>) proxyFactory.proxy(mav.getModel());\n+\t\t\t\tMap<String, Object> model = proxyFactory.proxy(mav.getModel());\n \t\t\t\tModelAndView proxied = (view != null) ? new ModelAndView(view, model)\n \t\t\t\t\t\t: new ModelAndView(viewName, model);\n \t\t\t\tproxied.setStatus(mav.getStatus());\n\ndiff --git a/core/src/main/java/org/springframework/security/aot/hint/AuthorizeReturnObjectHintsRegistrar.java b/core/src/main/java/org/springframework/security/aot/hint/AuthorizeReturnObjectHintsRegistrar.java\nindex 0c430160b72..d2194eff7fc 100644\n--- a/core/src/main/java/org/springframework/security/aot/hint/AuthorizeReturnObjectHintsRegistrar.java\n+++ b/core/src/main/java/org/springframework/security/aot/hint/AuthorizeReturnObjectHintsRegistrar.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2024 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -109,7 +109,7 @@ public void registerHints(RuntimeHints hints, ConfigurableListableBeanFactory be\n \t}\n \n \tprivate void registerProxy(RuntimeHints hints, Class<?> clazz) {\n-\t\tClass<?> proxied = (Class<?>) this.proxyFactory.proxy(clazz);\n+\t\tClass<?> proxied = this.proxyFactory.proxy(clazz);\n \t\tif (proxied == null) {\n \t\t\treturn;\n \t\t}\n\ndiff --git a/core/src/main/java/org/springframework/security/authorization/AuthorizationProxyFactory.java b/core/src/main/java/org/springframework/security/authorization/AuthorizationProxyFactory.java\nindex c425db9a01d..e6e1210e74b 100644\n--- a/core/src/main/java/org/springframework/security/authorization/AuthorizationProxyFactory.java\n+++ b/core/src/main/java/org/springframework/security/authorization/AuthorizationProxyFactory.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2024 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -20,6 +20,7 @@\n  * A factory for wrapping arbitrary objects in authorization-related advice\n  *\n  * @author Josh Cummings\n+ * @author daewon kim\n  * @since 6.3\n  * @see org.springframework.security.authorization.method.AuthorizationAdvisorProxyFactory\n  */\n@@ -30,11 +31,12 @@ public interface AuthorizationProxyFactory {\n \t *\n \t * <p>\n \t * Please check the implementation for which kinds of objects it supports.\n+\t * @param <T> the type of the object being proxied\n \t * @param object the object to proxy\n \t * @return the proxied object\n \t * @throws org.springframework.aop.framework.AopConfigException if a proxy cannot be\n \t * created\n \t */\n-\tObject proxy(Object object);\n+\t<T> T proxy(T object);\n \n }\n\ndiff --git a/core/src/main/java/org/springframework/security/authorization/method/AuthorizationAdvisorProxyFactory.java b/core/src/main/java/org/springframework/security/authorization/method/AuthorizationAdvisorProxyFactory.java\nindex dd4abb3754c..f0f3984cb7c 100644\n--- a/core/src/main/java/org/springframework/security/authorization/method/AuthorizationAdvisorProxyFactory.java\n+++ b/core/src/main/java/org/springframework/security/authorization/method/AuthorizationAdvisorProxyFactory.java\n@@ -172,16 +172,16 @@ public void afterSingletonsInstantiated() {\n \t * @return the proxied instance\n \t */\n \t@Override\n-\tpublic Object proxy(Object target) {\n+\tpublic <T> T proxy(T target) {\n \t\tif (target == null) {\n \t\t\treturn null;\n \t\t}\n \t\tif (target instanceof AuthorizationProxy proxied) {\n-\t\t\treturn proxied;\n+\t\t\treturn (T) proxied;\n \t\t}\n \t\tObject proxied = this.visitor.visit(this, target);\n \t\tif (proxied != null) {\n-\t\t\treturn proxied;\n+\t\t\treturn (T) proxied;\n \t\t}\n \t\tProxyFactory factory = new ProxyFactory(target);\n \t\tfactory.addAdvisors(this.authorizationProxy);\n@@ -191,7 +191,7 @@ public Object proxy(Object target) {\n \t\tfactory.addInterface(AuthorizationProxy.class);\n \t\tfactory.setOpaque(true);\n \t\tfactory.setProxyTargetClass(!Modifier.isFinal(target.getClass().getModifiers()));\n-\t\treturn factory.getProxy();\n+\t\treturn (T) factory.getProxy();\n \t}\n \n \t/**\n@@ -442,7 +442,7 @@ public Object visit(AuthorizationAdvisorProxyFactory proxyFactory, Object target\n \n \t\t@SuppressWarnings(\"unchecked\")\n \t\tprivate <T> T proxyCast(AuthorizationProxyFactory proxyFactory, T target) {\n-\t\t\treturn (T) proxyFactory.proxy(target);\n+\t\t\treturn proxyFactory.proxy(target);\n \t\t}\n \n \t\tprivate <T> Iterable<T> proxyIterable(AuthorizationProxyFactory proxyFactory, Iterable<T> iterable) {\n",
    "test_patch": "diff --git a/config/src/test/java/org/springframework/security/config/annotation/method/configuration/AuthorizationProxyConfigurationTests.java b/config/src/test/java/org/springframework/security/config/annotation/method/configuration/AuthorizationProxyConfigurationTests.java\nindex 254c8b08713..8a668819294 100644\n--- a/config/src/test/java/org/springframework/security/config/annotation/method/configuration/AuthorizationProxyConfigurationTests.java\n+++ b/config/src/test/java/org/springframework/security/config/annotation/method/configuration/AuthorizationProxyConfigurationTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2024 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -58,7 +58,7 @@ public class AuthorizationProxyConfigurationTests {\n \t@Test\n \tpublic void proxyWhenNotPreAuthorizedThenDenies() {\n \t\tthis.spring.register(DefaultsConfig.class).autowire();\n-\t\tToaster toaster = (Toaster) this.proxyFactory.proxy(new Toaster());\n+\t\tToaster toaster = this.proxyFactory.proxy(new Toaster());\n \t\tassertThatExceptionOfType(AccessDeniedException.class).isThrownBy(toaster::makeToast)\n \t\t\t.withMessage(\"Access Denied\");\n \t\tassertThatExceptionOfType(AccessDeniedException.class).isThrownBy(toaster::extractBread)\n@@ -69,7 +69,7 @@ public void proxyWhenNotPreAuthorizedThenDenies() {\n \t@Test\n \tpublic void proxyWhenPreAuthorizedThenAllows() {\n \t\tthis.spring.register(DefaultsConfig.class).autowire();\n-\t\tToaster toaster = (Toaster) this.proxyFactory.proxy(new Toaster());\n+\t\tToaster toaster = this.proxyFactory.proxy(new Toaster());\n \t\ttoaster.makeToast();\n \t\tassertThat(toaster.extractBread()).isEqualTo(\"yummy\");\n \t}\n@@ -77,7 +77,7 @@ public void proxyWhenPreAuthorizedThenAllows() {\n \t@Test\n \tpublic void proxyReactiveWhenNotPreAuthorizedThenDenies() {\n \t\tthis.spring.register(ReactiveDefaultsConfig.class).autowire();\n-\t\tToaster toaster = (Toaster) this.proxyFactory.proxy(new Toaster());\n+\t\tToaster toaster = this.proxyFactory.proxy(new Toaster());\n \t\tAuthentication user = TestAuthentication.authenticatedUser();\n \t\tStepVerifier\n \t\t\t.create(toaster.reactiveMakeToast().contextWrite(ReactiveSecurityContextHolder.withAuthentication(user)))\n@@ -90,7 +90,7 @@ public void proxyReactiveWhenNotPreAuthorizedThenDenies() {\n \t@Test\n \tpublic void proxyReactiveWhenPreAuthorizedThenAllows() {\n \t\tthis.spring.register(ReactiveDefaultsConfig.class).autowire();\n-\t\tToaster toaster = (Toaster) this.proxyFactory.proxy(new Toaster());\n+\t\tToaster toaster = this.proxyFactory.proxy(new Toaster());\n \t\tAuthentication admin = TestAuthentication.authenticatedAdmin();\n \t\tStepVerifier\n \t\t\t.create(toaster.reactiveMakeToast().contextWrite(ReactiveSecurityContextHolder.withAuthentication(admin)))\n\ndiff --git a/core/src/test/java/org/springframework/security/authorization/AuthorizationAdvisorProxyFactoryTests.java b/core/src/test/java/org/springframework/security/authorization/AuthorizationAdvisorProxyFactoryTests.java\nindex 93d7ee1520c..3babccf147d 100644\n--- a/core/src/test/java/org/springframework/security/authorization/AuthorizationAdvisorProxyFactoryTests.java\n+++ b/core/src/test/java/org/springframework/security/authorization/AuthorizationAdvisorProxyFactoryTests.java\n@@ -335,7 +335,7 @@ public void setTargetVisitorThenUses() {\n \t@Test\n \tpublic void setTargetVisitorIgnoreValueTypesThenIgnores() {\n \t\tAuthorizationAdvisorProxyFactory factory = AuthorizationAdvisorProxyFactory.withDefaults();\n-\t\tassertThatExceptionOfType(ClassCastException.class).isThrownBy(() -> ((Integer) factory.proxy(35)).intValue());\n+\t\tassertThatExceptionOfType(ClassCastException.class).isThrownBy(() -> factory.proxy(35).intValue());\n \t\tfactory.setTargetVisitor(TargetVisitor.defaultsSkipValueTypes());\n \t\tassertThat(factory.proxy(35)).isEqualTo(35);\n \t}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "spring-projects__spring-security-16686",
    "pr_id": 16686,
    "issue_id": 16604,
    "repo": "spring-projects/spring-security",
    "problem_statement": "Update WebAuthn Test Objects Class Names\nBy convention, Spring Security test objects are [named `Test{Object}s`](https://github.com/spring-projects/spring-security/issues/5699), as in `TestAuthentications` or `TestKeys`.\n\nIt would be nice to rename the WebAuthn test objects like `TestAuthenticatorAttestationResponse` to `TestAuthenticatorAttestationResponses`.\n\nAs an exception, I think we should leave classes that are already pluralized as `TestPublicKeyCredentialCreationOptions` since `TestPublicKeyCredentialCreationOptionses` is a little tricky to say.\n\nI believe the following is a comprehensive list of the classes to change:\n\n- [ ] `TestAuthenticatorAttestationResponse`\n- [ ] `TestCredentialRecord`\n- [ ] `TestPublicKeyCredential`\n- [ ] `TestPublicKeyCredentialUserEntity`\n- [ ] `TestPublicKeyCredentialRpEntity`",
    "issue_word_count": 86,
    "test_files_count": 6,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "config/src/test/java/org/springframework/security/config/annotation/web/builders/TestHttpSecurities.java",
      "config/src/test/java/org/springframework/security/config/annotation/web/configurers/DefaultFiltersTests.java",
      "config/src/test/java/org/springframework/security/config/annotation/web/configurers/NamespaceHttpCustomFilterTests.java",
      "config/src/test/java/org/springframework/security/config/annotation/web/configurers/SecurityContextConfigurerTests.java",
      "web/src/test/java/org/springframework/security/web/access/RequestMatcherDelegatingWebInvocationPrivilegeEvaluatorTests.java",
      "web/src/test/java/org/springframework/security/web/access/TestWebInvocationPrivilegeEvaluators.java"
    ],
    "pr_changed_test_files": [
      "config/src/test/java/org/springframework/security/config/annotation/web/builders/TestHttpSecurities.java",
      "config/src/test/java/org/springframework/security/config/annotation/web/configurers/DefaultFiltersTests.java",
      "config/src/test/java/org/springframework/security/config/annotation/web/configurers/NamespaceHttpCustomFilterTests.java",
      "config/src/test/java/org/springframework/security/config/annotation/web/configurers/SecurityContextConfigurerTests.java",
      "web/src/test/java/org/springframework/security/web/access/RequestMatcherDelegatingWebInvocationPrivilegeEvaluatorTests.java",
      "web/src/test/java/org/springframework/security/web/access/TestWebInvocationPrivilegeEvaluators.java"
    ],
    "base_commit": "4cdc6dab217f1ce505de0956a0a5e231827707b3",
    "head_commit": "a96dcf5870f111636f3ef1badaeae9de1a3c2c47",
    "repo_url": "https://github.com/spring-projects/spring-security/pull/16686",
    "swe_url": "https://swe-bench-plus.turing.com/repos/spring-projects__spring-security/16686",
    "dockerfile": "",
    "pr_merged_at": "2025-04-03T22:33:35.000Z",
    "patch": "",
    "test_patch": "diff --git a/config/src/test/java/org/springframework/security/config/annotation/web/builders/TestHttpSecurity.java b/config/src/test/java/org/springframework/security/config/annotation/web/builders/TestHttpSecurities.java\nsimilarity index 95%\nrename from config/src/test/java/org/springframework/security/config/annotation/web/builders/TestHttpSecurity.java\nrename to config/src/test/java/org/springframework/security/config/annotation/web/builders/TestHttpSecurities.java\nindex d55d978cabf..b123ce25cdd 100644\n--- a/config/src/test/java/org/springframework/security/config/annotation/web/builders/TestHttpSecurity.java\n+++ b/config/src/test/java/org/springframework/security/config/annotation/web/builders/TestHttpSecurities.java\n@@ -21,9 +21,9 @@\n import org.springframework.security.config.annotation.web.configurers.DefaultLoginPageConfigurer;\n import org.springframework.test.util.ReflectionTestUtils;\n \n-public final class TestHttpSecurity {\n+public final class TestHttpSecurities {\n \n-\tprivate TestHttpSecurity() {\n+\tprivate TestHttpSecurities() {\n \n \t}\n \n\ndiff --git a/config/src/test/java/org/springframework/security/config/annotation/web/configurers/DefaultFiltersTests.java b/config/src/test/java/org/springframework/security/config/annotation/web/configurers/DefaultFiltersTests.java\nindex d551a2e3058..e5a3b3cc0b8 100644\n--- a/config/src/test/java/org/springframework/security/config/annotation/web/configurers/DefaultFiltersTests.java\n+++ b/config/src/test/java/org/springframework/security/config/annotation/web/configurers/DefaultFiltersTests.java\n@@ -31,7 +31,7 @@\n import org.springframework.mock.web.MockHttpServletRequest;\n import org.springframework.mock.web.MockHttpServletResponse;\n import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n-import org.springframework.security.config.annotation.web.builders.TestHttpSecurity;\n+import org.springframework.security.config.annotation.web.builders.TestHttpSecurities;\n import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n import org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer;\n import org.springframework.security.config.test.SpringTestContext;\n@@ -169,7 +169,7 @@ static class NullWebInvocationPrivilegeEvaluatorConfig {\n \n \t\t@Bean\n \t\tSecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n-\t\t\tTestHttpSecurity.disableDefaults(http);\n+\t\t\tTestHttpSecurities.disableDefaults(http);\n \t\t\thttp.formLogin();\n \t\t\treturn http.build();\n \t\t}\n\ndiff --git a/config/src/test/java/org/springframework/security/config/annotation/web/configurers/NamespaceHttpCustomFilterTests.java b/config/src/test/java/org/springframework/security/config/annotation/web/configurers/NamespaceHttpCustomFilterTests.java\nindex 19caf278ef6..36920cd85a1 100644\n--- a/config/src/test/java/org/springframework/security/config/annotation/web/configurers/NamespaceHttpCustomFilterTests.java\n+++ b/config/src/test/java/org/springframework/security/config/annotation/web/configurers/NamespaceHttpCustomFilterTests.java\n@@ -32,7 +32,7 @@\n import org.springframework.context.annotation.Configuration;\n import org.springframework.security.authentication.AuthenticationManager;\n import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n-import org.springframework.security.config.annotation.web.builders.TestHttpSecurity;\n+import org.springframework.security.config.annotation.web.builders.TestHttpSecurities;\n import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n import org.springframework.security.config.test.SpringTestContext;\n import org.springframework.security.config.test.SpringTestContextExtension;\n@@ -140,7 +140,7 @@ static class CustomFilterPositionConfig {\n \t\t@Bean\n \t\tSecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n \t\t\t// @formatter:off\n-\t\t\tTestHttpSecurity.disableDefaults(http);\n+\t\t\tTestHttpSecurities.disableDefaults(http);\n \t\t\thttp\n \t\t\t\t// this works so long as the CustomFilter extends one of the standard filters\n \t\t\t\t// if not, use addFilterBefore or addFilterAfter\n@@ -158,7 +158,7 @@ static class CustomFilterPositionAtConfig {\n \t\t@Bean\n \t\tSecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n \t\t\t// @formatter:off\n-\t\t\tTestHttpSecurity.disableDefaults(http);\n+\t\t\tTestHttpSecurities.disableDefaults(http);\n \t\t\thttp\n \t\t\t\t.addFilterAt(new OtherCustomFilter(), UsernamePasswordAuthenticationFilter.class);\n \t\t\treturn http.build();\n@@ -179,7 +179,7 @@ AuthenticationManager authenticationManager() {\n \t\t@Bean\n \t\tSecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n \t\t\t// @formatter:off\n-\t\t\tTestHttpSecurity.disableDefaults(http);\n+\t\t\tTestHttpSecurities.disableDefaults(http);\n \t\t\thttp\n \t\t\t\t.authorizeRequests()\n \t\t\t\t\t.anyRequest().hasRole(\"USER\")\n\ndiff --git a/config/src/test/java/org/springframework/security/config/annotation/web/configurers/SecurityContextConfigurerTests.java b/config/src/test/java/org/springframework/security/config/annotation/web/configurers/SecurityContextConfigurerTests.java\nindex 5de55764f45..31c6fbfc665 100644\n--- a/config/src/test/java/org/springframework/security/config/annotation/web/configurers/SecurityContextConfigurerTests.java\n+++ b/config/src/test/java/org/springframework/security/config/annotation/web/configurers/SecurityContextConfigurerTests.java\n@@ -31,7 +31,7 @@\n import org.springframework.security.config.ObjectPostProcessor;\n import org.springframework.security.config.TestDeferredSecurityContext;\n import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n-import org.springframework.security.config.annotation.web.builders.TestHttpSecurity;\n+import org.springframework.security.config.annotation.web.builders.TestHttpSecurities;\n import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n import org.springframework.security.config.test.SpringTestContext;\n import org.springframework.security.config.test.SpringTestContextExtension;\n@@ -199,7 +199,7 @@ static class SecurityContextRepositoryDefaultsSecurityContextRepositoryConfig {\n \n \t\t@Bean\n \t\tSecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n-\t\t\tTestHttpSecurity.disableDefaults(http);\n+\t\t\tTestHttpSecurities.disableDefaults(http);\n \t\t\t// @formatter:off\n \t\t\thttp\n \t\t\t\t.addFilter(new WebAsyncManagerIntegrationFilter())\n\ndiff --git a/web/src/test/java/org/springframework/security/web/access/RequestMatcherDelegatingWebInvocationPrivilegeEvaluatorTests.java b/web/src/test/java/org/springframework/security/web/access/RequestMatcherDelegatingWebInvocationPrivilegeEvaluatorTests.java\nindex b2417ec3aae..8847cfa93ef 100644\n--- a/web/src/test/java/org/springframework/security/web/access/RequestMatcherDelegatingWebInvocationPrivilegeEvaluatorTests.java\n+++ b/web/src/test/java/org/springframework/security/web/access/RequestMatcherDelegatingWebInvocationPrivilegeEvaluatorTests.java\n@@ -75,7 +75,7 @@ void isAllowedWhenDelegatesEmptyThenAllowed() {\n \t@Test\n \tvoid isAllowedWhenNotMatchThenAllowed() {\n \t\tRequestMatcherEntry<List<WebInvocationPrivilegeEvaluator>> notMatch = entry(this.alwaysDeny,\n-\t\t\t\tTestWebInvocationPrivilegeEvaluator.alwaysAllow());\n+\t\t\t\tTestWebInvocationPrivilegeEvaluators.alwaysAllow());\n \t\tWebInvocationPrivilegeEvaluator delegating = evaluator(notMatch);\n \t\tassertThat(delegating.isAllowed(this.uri, this.authentication)).isTrue();\n \t\tverify(notMatch.getRequestMatcher()).matches(any());\n@@ -96,9 +96,9 @@ void isAllowedWhenPrivilegeEvaluatorDenyThenAllowedFalse() {\n \t@Test\n \tvoid isAllowedWhenNotMatchThenMatchThenOnlySecondDelegateInvoked() {\n \t\tRequestMatcherEntry<List<WebInvocationPrivilegeEvaluator>> notMatchDelegate = entry(this.alwaysDeny,\n-\t\t\t\tTestWebInvocationPrivilegeEvaluator.alwaysAllow());\n+\t\t\t\tTestWebInvocationPrivilegeEvaluators.alwaysAllow());\n \t\tRequestMatcherEntry<List<WebInvocationPrivilegeEvaluator>> matchDelegate = entry(this.alwaysMatch,\n-\t\t\t\tTestWebInvocationPrivilegeEvaluator.alwaysAllow());\n+\t\t\t\tTestWebInvocationPrivilegeEvaluators.alwaysAllow());\n \t\tRequestMatcherEntry<List<WebInvocationPrivilegeEvaluator>> spyNotMatchDelegate = spy(notMatchDelegate);\n \t\tRequestMatcherEntry<List<WebInvocationPrivilegeEvaluator>> spyMatchDelegate = spy(matchDelegate);\n \n@@ -120,8 +120,8 @@ void isAllowedWhenDelegatePrivilegeEvaluatorsEmptyThenAllowedTrue() {\n \n \t@Test\n \tvoid isAllowedWhenFirstDelegateDenyThenDoNotInvokeOthers() {\n-\t\tWebInvocationPrivilegeEvaluator deny = TestWebInvocationPrivilegeEvaluator.alwaysDeny();\n-\t\tWebInvocationPrivilegeEvaluator allow = TestWebInvocationPrivilegeEvaluator.alwaysAllow();\n+\t\tWebInvocationPrivilegeEvaluator deny = TestWebInvocationPrivilegeEvaluators.alwaysDeny();\n+\t\tWebInvocationPrivilegeEvaluator allow = TestWebInvocationPrivilegeEvaluators.alwaysAllow();\n \t\tWebInvocationPrivilegeEvaluator spyDeny = spy(deny);\n \t\tWebInvocationPrivilegeEvaluator spyAllow = spy(allow);\n \t\tRequestMatcherEntry<List<WebInvocationPrivilegeEvaluator>> delegate = entry(this.alwaysMatch, spyDeny,\n@@ -136,7 +136,7 @@ void isAllowedWhenFirstDelegateDenyThenDoNotInvokeOthers() {\n \n \t@Test\n \tvoid isAllowedWhenDifferentArgumentsThenCallSpecificIsAllowedInDelegate() {\n-\t\tWebInvocationPrivilegeEvaluator deny = TestWebInvocationPrivilegeEvaluator.alwaysDeny();\n+\t\tWebInvocationPrivilegeEvaluator deny = TestWebInvocationPrivilegeEvaluators.alwaysDeny();\n \t\tWebInvocationPrivilegeEvaluator spyDeny = spy(deny);\n \t\tRequestMatcherEntry<List<WebInvocationPrivilegeEvaluator>> delegate = entry(this.alwaysMatch, spyDeny);\n \n@@ -197,11 +197,11 @@ private RequestMatcherDelegatingWebInvocationPrivilegeEvaluator evaluator(Reques\n \t}\n \n \tprivate RequestMatcherEntry<List<WebInvocationPrivilegeEvaluator>> allow(RequestMatcher requestMatcher) {\n-\t\treturn entry(requestMatcher, TestWebInvocationPrivilegeEvaluator.alwaysAllow());\n+\t\treturn entry(requestMatcher, TestWebInvocationPrivilegeEvaluators.alwaysAllow());\n \t}\n \n \tprivate RequestMatcherEntry<List<WebInvocationPrivilegeEvaluator>> deny(RequestMatcher requestMatcher) {\n-\t\treturn entry(requestMatcher, TestWebInvocationPrivilegeEvaluator.alwaysDeny());\n+\t\treturn entry(requestMatcher, TestWebInvocationPrivilegeEvaluators.alwaysDeny());\n \t}\n \n \tprivate RequestMatcherEntry<List<WebInvocationPrivilegeEvaluator>> entry(RequestMatcher requestMatcher,\n\ndiff --git a/web/src/test/java/org/springframework/security/web/access/TestWebInvocationPrivilegeEvaluator.java b/web/src/test/java/org/springframework/security/web/access/TestWebInvocationPrivilegeEvaluators.java\nsimilarity index 94%\nrename from web/src/test/java/org/springframework/security/web/access/TestWebInvocationPrivilegeEvaluator.java\nrename to web/src/test/java/org/springframework/security/web/access/TestWebInvocationPrivilegeEvaluators.java\nindex 54ab666cd52..9ee7278a1c1 100644\n--- a/web/src/test/java/org/springframework/security/web/access/TestWebInvocationPrivilegeEvaluator.java\n+++ b/web/src/test/java/org/springframework/security/web/access/TestWebInvocationPrivilegeEvaluators.java\n@@ -18,13 +18,13 @@\n \n import org.springframework.security.core.Authentication;\n \n-public final class TestWebInvocationPrivilegeEvaluator {\n+public final class TestWebInvocationPrivilegeEvaluators {\n \n \tprivate static final AlwaysAllowWebInvocationPrivilegeEvaluator ALWAYS_ALLOW = new AlwaysAllowWebInvocationPrivilegeEvaluator();\n \n \tprivate static final AlwaysDenyWebInvocationPrivilegeEvaluator ALWAYS_DENY = new AlwaysDenyWebInvocationPrivilegeEvaluator();\n \n-\tprivate TestWebInvocationPrivilegeEvaluator() {\n+\tprivate TestWebInvocationPrivilegeEvaluators() {\n \t}\n \n \tpublic static WebInvocationPrivilegeEvaluator alwaysAllow() {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "spring-projects__spring-security-16575",
    "pr_id": 16575,
    "issue_id": 16473,
    "repo": "spring-projects/spring-security",
    "problem_statement": "One Time Token Error Message\nI'm trying to test out One Time Token Authentication and I came across an issue. If I tried to login with a user that was not in the system I would get taken back to the login screen and the username would be displayed as an error above both the form login and ott login. \n\n![Image](https://github.com/user-attachments/assets/9abe7594-478e-4ff7-9300-cbfcf234fe2b)\n\nIf I logged in with a user that was available in Spring Security everything worked as expected. \n",
    "issue_word_count": 90,
    "test_files_count": 2,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "config/src/test/java/org/springframework/security/config/annotation/web/configurers/DefaultLoginPageConfigurerTests.java",
      "core/src/main/java/org/springframework/security/authentication/ProviderManager.java",
      "web/src/main/java/org/springframework/security/web/authentication/ui/DefaultLoginPageGeneratingFilter.java",
      "web/src/test/java/org/springframework/security/web/authentication/DefaultLoginPageGeneratingFilterTests.java"
    ],
    "pr_changed_test_files": [
      "config/src/test/java/org/springframework/security/config/annotation/web/configurers/DefaultLoginPageConfigurerTests.java",
      "web/src/test/java/org/springframework/security/web/authentication/DefaultLoginPageGeneratingFilterTests.java"
    ],
    "base_commit": "f9e04594a7ef6f0d479a8b97fcb5aba77a00e404",
    "head_commit": "82078a18345f492af7c7ff63eab4d7f5d2f888db",
    "repo_url": "https://github.com/spring-projects/spring-security/pull/16575",
    "swe_url": "https://swe-bench-plus.turing.com/repos/spring-projects__spring-security/16575",
    "dockerfile": "",
    "pr_merged_at": "2025-02-14T23:01:22.000Z",
    "patch": "diff --git a/core/src/main/java/org/springframework/security/authentication/ProviderManager.java b/core/src/main/java/org/springframework/security/authentication/ProviderManager.java\nindex a09283b08c0..303444cc6b1 100644\n--- a/core/src/main/java/org/springframework/security/authentication/ProviderManager.java\n+++ b/core/src/main/java/org/springframework/security/authentication/ProviderManager.java\n@@ -185,13 +185,25 @@ public Authentication authenticate(Authentication authentication) throws Authent\n \t\t\t\t\tbreak;\n \t\t\t\t}\n \t\t\t}\n-\t\t\tcatch (AccountStatusException | InternalAuthenticationServiceException ex) {\n+\t\t\tcatch (AccountStatusException ex) {\n \t\t\t\tprepareException(ex, authentication);\n+\t\t\t\tlogger.debug(LogMessage.format(\"Authentication failed for user '%s' since account status is %s\",\n+\t\t\t\t\t\tauthentication.getName(), ex.getMessage()));\n+\t\t\t\t// SEC-546: Avoid polling additional providers if auth failure is due to\n+\t\t\t\t// invalid account status\n+\t\t\t\tthrow ex;\n+\t\t\t}\n+\t\t\tcatch (InternalAuthenticationServiceException ex) {\n+\t\t\t\tprepareException(ex, authentication);\n+\t\t\t\tlogger.debug(LogMessage.format(\n+\t\t\t\t\t\t\"Authentication failed due to an internal authentication service error: %s\", ex.getMessage()));\n \t\t\t\t// SEC-546: Avoid polling additional providers if auth failure is due to\n \t\t\t\t// invalid account status\n \t\t\t\tthrow ex;\n \t\t\t}\n \t\t\tcatch (AuthenticationException ex) {\n+\t\t\t\tlogger.debug(LogMessage.format(\"Authentication failed with provider %s since %s\",\n+\t\t\t\t\t\tprovider.getClass().getSimpleName(), ex.getMessage()));\n \t\t\t\tlastException = ex;\n \t\t\t}\n \t\t}\n@@ -241,6 +253,13 @@ public Authentication authenticate(Authentication authentication) throws Authent\n \t\tif (parentException == null) {\n \t\t\tprepareException(lastException, authentication);\n \t\t}\n+\n+\t\t// Ensure this message is not logged when authentication is attempted by\n+\t\t// the parent provider\n+\t\tif (this.parent != null) {\n+\t\t\tlogger.debug(\"Denying authentication since all attempted providers failed\");\n+\t\t}\n+\n \t\tthrow lastException;\n \t}\n \n\ndiff --git a/web/src/main/java/org/springframework/security/web/authentication/ui/DefaultLoginPageGeneratingFilter.java b/web/src/main/java/org/springframework/security/web/authentication/ui/DefaultLoginPageGeneratingFilter.java\nindex 4085eed3458..1acc36e4efa 100644\n--- a/web/src/main/java/org/springframework/security/web/authentication/ui/DefaultLoginPageGeneratingFilter.java\n+++ b/web/src/main/java/org/springframework/security/web/authentication/ui/DefaultLoginPageGeneratingFilter.java\n@@ -29,14 +29,10 @@\n import jakarta.servlet.ServletResponse;\n import jakarta.servlet.http.HttpServletRequest;\n import jakarta.servlet.http.HttpServletResponse;\n-import jakarta.servlet.http.HttpSession;\n \n-import org.springframework.security.core.AuthenticationException;\n-import org.springframework.security.web.WebAttributes;\n import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\n import org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices;\n import org.springframework.util.Assert;\n-import org.springframework.util.StringUtils;\n import org.springframework.web.filter.GenericFilterBean;\n \n /**\n@@ -221,7 +217,7 @@ private void doFilter(HttpServletRequest request, HttpServletResponse response,\n \t}\n \n \tprivate String generateLoginPageHtml(HttpServletRequest request, boolean loginError, boolean logoutSuccess) {\n-\t\tString errorMsg = loginError ? getLoginErrorMessage(request) : \"Invalid credentials\";\n+\t\tString errorMsg = \"Invalid credentials\";\n \t\tString contextPath = request.getContextPath();\n \n \t\treturn HtmlTemplates.fromTemplate(LOGIN_PAGE_TEMPLATE)\n@@ -358,21 +354,6 @@ private static String renderSaml2Row(String contextPath, String url, String clie\n \t\t\t.render();\n \t}\n \n-\tprivate String getLoginErrorMessage(HttpServletRequest request) {\n-\t\tHttpSession session = request.getSession(false);\n-\t\tif (session == null) {\n-\t\t\treturn \"Invalid credentials\";\n-\t\t}\n-\t\tif (!(session\n-\t\t\t.getAttribute(WebAttributes.AUTHENTICATION_EXCEPTION) instanceof AuthenticationException exception)) {\n-\t\t\treturn \"Invalid credentials\";\n-\t\t}\n-\t\tif (!StringUtils.hasText(exception.getMessage())) {\n-\t\t\treturn \"Invalid credentials\";\n-\t\t}\n-\t\treturn exception.getMessage();\n-\t}\n-\n \tprivate String renderHiddenInput(String name, String value) {\n \t\treturn HtmlTemplates.fromTemplate(HIDDEN_HTML_INPUT_TEMPLATE)\n \t\t\t.withValue(\"name\", name)\n",
    "test_patch": "diff --git a/config/src/test/java/org/springframework/security/config/annotation/web/configurers/DefaultLoginPageConfigurerTests.java b/config/src/test/java/org/springframework/security/config/annotation/web/configurers/DefaultLoginPageConfigurerTests.java\nindex f4646fe6f53..4a1c9d05d7d 100644\n--- a/config/src/test/java/org/springframework/security/config/annotation/web/configurers/DefaultLoginPageConfigurerTests.java\n+++ b/config/src/test/java/org/springframework/security/config/annotation/web/configurers/DefaultLoginPageConfigurerTests.java\n@@ -22,14 +22,12 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.context.support.MessageSourceAccessor;\n import org.springframework.mock.web.MockHttpSession;\n import org.springframework.security.config.ObjectPostProcessor;\n import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n import org.springframework.security.config.test.SpringTestContext;\n import org.springframework.security.config.test.SpringTestContextExtension;\n-import org.springframework.security.core.SpringSecurityMessageSource;\n import org.springframework.security.core.userdetails.PasswordEncodedUser;\n import org.springframework.security.core.userdetails.UserDetailsService;\n import org.springframework.security.provisioning.InMemoryUserDetailsManager;\n@@ -77,8 +75,6 @@ public class DefaultLoginPageConfigurerTests {\n \t@Autowired\n \tMockMvc mvc;\n \n-\tMessageSourceAccessor messages = SpringSecurityMessageSource.getAccessor();\n-\n \t@Test\n \tpublic void getWhenFormLoginEnabledThenRedirectsToLoginPage() throws Exception {\n \t\tthis.spring.register(DefaultLoginPageConfig.class).autowire();\n@@ -148,8 +144,7 @@ public void loginPageWhenErrorThenDefaultLoginPageWithError() throws Exception {\n \t\tthis.mvc.perform(get(\"/login?error\").session((MockHttpSession) mvcResult.getRequest().getSession())\n \t\t\t\t.sessionAttr(csrfAttributeName, csrfToken))\n \t\t\t\t.andExpect((result) -> {\n-\t\t\t\t\tString badCredentialsLocalizedMessage = this.messages\n-\t\t\t\t\t\t\t.getMessage(\"AbstractUserDetailsAuthenticationProvider.badCredentials\", \"Bad credentials\");\n+\t\t\t\t\tString defaultErrorMessage = \"Invalid credentials\";\n \t\t\t\t\tCsrfToken token = (CsrfToken) result.getRequest().getAttribute(CsrfToken.class.getName());\n \t\t\t\t\tassertThat(result.getResponse().getContentAsString()).isEqualTo(\"\"\"\n \t\t\t\t\t\t<!DOCTYPE html>\n@@ -184,7 +179,7 @@ public void loginPageWhenErrorThenDefaultLoginPageWithError() throws Exception {\n \n \t\t\t\t\t\t    </div>\n \t\t\t\t\t\t  </body>\n-\t\t\t\t\t\t</html>\"\"\".formatted(badCredentialsLocalizedMessage, token.getToken()));\n+\t\t\t\t\t\t</html>\"\"\".formatted(defaultErrorMessage, token.getToken()));\n \t\t\t\t});\n \t\t// @formatter:on\n \t}\n\ndiff --git a/web/src/test/java/org/springframework/security/web/authentication/DefaultLoginPageGeneratingFilterTests.java b/web/src/test/java/org/springframework/security/web/authentication/DefaultLoginPageGeneratingFilterTests.java\nindex a3b62830d6b..39bdc513e04 100644\n--- a/web/src/test/java/org/springframework/security/web/authentication/DefaultLoginPageGeneratingFilterTests.java\n+++ b/web/src/test/java/org/springframework/security/web/authentication/DefaultLoginPageGeneratingFilterTests.java\n@@ -18,17 +18,14 @@\n \n import java.io.IOException;\n import java.util.Collections;\n-import java.util.Locale;\n \n import jakarta.servlet.FilterChain;\n import jakarta.servlet.ServletException;\n import org.junit.jupiter.api.Test;\n \n-import org.springframework.context.support.MessageSourceAccessor;\n import org.springframework.mock.web.MockHttpServletRequest;\n import org.springframework.mock.web.MockHttpServletResponse;\n import org.springframework.security.authentication.BadCredentialsException;\n-import org.springframework.security.core.SpringSecurityMessageSource;\n import org.springframework.security.web.WebAttributes;\n import org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter;\n \n@@ -128,22 +125,6 @@ public void generatesForWithQueryNoMatch() throws Exception {\n \t\tassertThat(response.getContentAsString()).isEmpty();\n \t}\n \n-\t/* SEC-1111 */\n-\t@Test\n-\tpublic void handlesNonIso8859CharsInErrorMessage() throws Exception {\n-\t\tDefaultLoginPageGeneratingFilter filter = new DefaultLoginPageGeneratingFilter(\n-\t\t\t\tnew UsernamePasswordAuthenticationFilter());\n-\t\tMockHttpServletRequest request = new MockHttpServletRequest(\"GET\", \"/login\");\n-\t\tMockHttpServletResponse response = new MockHttpServletResponse();\n-\t\trequest.setQueryString(\"error\");\n-\t\tMessageSourceAccessor messages = SpringSecurityMessageSource.getAccessor();\n-\t\tString message = messages.getMessage(\"AbstractUserDetailsAuthenticationProvider.badCredentials\",\n-\t\t\t\t\"Bad credentials\", Locale.KOREA);\n-\t\trequest.getSession().setAttribute(WebAttributes.AUTHENTICATION_EXCEPTION, new BadCredentialsException(message));\n-\t\tfilter.doFilter(request, response, this.chain);\n-\t\tassertThat(response.getContentAsString()).contains(message);\n-\t}\n-\n \t// gh-5394\n \t@Test\n \tpublic void generatesForOAuth2LoginAndEscapesClientName() throws Exception {\n@@ -244,7 +225,7 @@ void generatesThenRenders() throws ServletException, IOException {\n \t\t\t\t    <div class=\"content\">\n \t\t\t\t      <form class=\"login-form\" method=\"post\" action=\"null\">\n \t\t\t\t        <h2>Please sign in</h2>\n-\t\t\t\t<div class=\"alert alert-danger\" role=\"alert\">Bad credentials</div>\n+\t\t\t\t<div class=\"alert alert-danger\" role=\"alert\">Invalid credentials</div>\n \t\t\t\t        <p>\n \t\t\t\t          <label for=\"username\" class=\"screenreader\">Username</label>\n \t\t\t\t          <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"Username\" required autofocus>\n@@ -259,12 +240,12 @@ void generatesThenRenders() throws ServletException, IOException {\n \t\t\t\t      </form>\n \n \t\t\t\t<h2>Login with OAuth 2.0</h2>\n-\t\t\t\t<div class=\"alert alert-danger\" role=\"alert\">Bad credentials</div>\n+\t\t\t\t<div class=\"alert alert-danger\" role=\"alert\">Invalid credentials</div>\n \t\t\t\t<table class=\"table table-striped\">\n \t\t\t\t  <tr><td><a href=\"/oauth2/authorization/google\">Google &lt; &gt; &quot; &#39; &amp;</a></td></tr>\n \t\t\t\t</table>\n \t\t\t\t<h2>Login with SAML 2.0</h2>\n-\t\t\t\t<div class=\"alert alert-danger\" role=\"alert\">Bad credentials</div>\n+\t\t\t\t<div class=\"alert alert-danger\" role=\"alert\">Invalid credentials</div>\n \t\t\t\t<table class=\"table table-striped\">\n \t\t\t\t  <tr><td><a href=\"/saml/sso/google\">Google &lt; &gt; &quot; &#39; &amp;</a></td></tr>\n \t\t\t\t</table>\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "spring-projects__spring-security-16574",
    "pr_id": 16574,
    "issue_id": 1813,
    "repo": "spring-projects/spring-security",
    "problem_statement": "SEC-1571: Let User have a \n[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davidkarlsen) (Migrated from [SEC-1571](https://jira.spring.io/browse/SEC-1571?redirect=false)) said:\n\norg.springframework.security.core.userdetails.User takes a Collection of GrantedAuthority as one of it's arguments.\nIt feels cleaner if this instead was a GrantedAuthoritiesContainer which fulfills the same role - but behind a cleaner interface.\nThen it could contain mutable or immutable containers.\nThe Collection<GrantedAuthority> getAuthorities() method could keep it's signature as this would simply be a delegation to the containers getAuthorities()\n",
    "issue_word_count": 98,
    "test_files_count": 3,
    "non_test_files_count": 7,
    "pr_changed_files": [
      "config/src/main/java/org/springframework/security/config/annotation/web/configurers/oauth2/server/resource/DPoPAuthenticationConfigurer.java",
      "config/src/main/java/org/springframework/security/config/annotation/web/configurers/oauth2/server/resource/OAuth2ResourceServerConfigurer.java",
      "config/src/test/java/org/springframework/security/config/annotation/web/configurers/oauth2/server/resource/DPoPAuthenticationConfigurerTests.java",
      "oauth2/oauth2-core/src/main/java/org/springframework/security/oauth2/core/OAuth2ErrorCodes.java",
      "oauth2/oauth2-jose/src/main/java/org/springframework/security/oauth2/jwt/DPoPProofContext.java",
      "oauth2/oauth2-jose/src/main/java/org/springframework/security/oauth2/jwt/DPoPProofJwtDecoderFactory.java",
      "oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/DPoPProofJwtDecoderFactoryTests.java",
      "oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/authentication/DPoPAuthenticationProvider.java",
      "oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/authentication/DPoPAuthenticationToken.java",
      "oauth2/oauth2-resource-server/src/test/java/org/springframework/security/oauth2/server/resource/authentication/DPoPAuthenticationProviderTests.java"
    ],
    "pr_changed_test_files": [
      "config/src/test/java/org/springframework/security/config/annotation/web/configurers/oauth2/server/resource/DPoPAuthenticationConfigurerTests.java",
      "oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/DPoPProofJwtDecoderFactoryTests.java",
      "oauth2/oauth2-resource-server/src/test/java/org/springframework/security/oauth2/server/resource/authentication/DPoPAuthenticationProviderTests.java"
    ],
    "base_commit": "27cb1154f25c74a6532dbd222ead9da53e880020",
    "head_commit": "8153fb81bcb87bd6ddeba89bfa6bfa83c946d65f",
    "repo_url": "https://github.com/spring-projects/spring-security/pull/16574",
    "swe_url": "https://swe-bench-plus.turing.com/repos/spring-projects__spring-security/16574",
    "dockerfile": "",
    "pr_merged_at": "2025-02-11T19:10:23.000Z",
    "patch": "diff --git a/config/src/main/java/org/springframework/security/config/annotation/web/configurers/oauth2/server/resource/DPoPAuthenticationConfigurer.java b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/oauth2/server/resource/DPoPAuthenticationConfigurer.java\nnew file mode 100644\nindex 00000000000..acbe8221917\n--- /dev/null\n+++ b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/oauth2/server/resource/DPoPAuthenticationConfigurer.java\n@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2002-2025 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.security.config.annotation.web.configurers.oauth2.server.resource;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import jakarta.servlet.http.HttpServletRequest;\n+\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.authentication.AuthenticationManager;\n+import org.springframework.security.config.annotation.web.HttpSecurityBuilder;\n+import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.core.OAuth2AuthenticationException;\n+import org.springframework.security.oauth2.core.OAuth2Error;\n+import org.springframework.security.oauth2.core.OAuth2ErrorCodes;\n+import org.springframework.security.oauth2.server.resource.authentication.DPoPAuthenticationProvider;\n+import org.springframework.security.oauth2.server.resource.authentication.DPoPAuthenticationToken;\n+import org.springframework.security.web.authentication.AuthenticationConverter;\n+import org.springframework.security.web.authentication.AuthenticationEntryPointFailureHandler;\n+import org.springframework.security.web.authentication.AuthenticationFailureHandler;\n+import org.springframework.security.web.authentication.AuthenticationFilter;\n+import org.springframework.security.web.authentication.AuthenticationSuccessHandler;\n+import org.springframework.security.web.authentication.HttpStatusEntryPoint;\n+import org.springframework.security.web.context.RequestAttributeSecurityContextRepository;\n+import org.springframework.security.web.util.matcher.RequestMatcher;\n+import org.springframework.util.CollectionUtils;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * @author Joe Grandja\n+ * @since 6.5\n+ * @see DPoPAuthenticationProvider\n+ */\n+final class DPoPAuthenticationConfigurer<B extends HttpSecurityBuilder<B>>\n+\t\textends AbstractHttpConfigurer<DPoPAuthenticationConfigurer<B>, B> {\n+\n+\tprivate RequestMatcher requestMatcher;\n+\n+\tprivate AuthenticationConverter authenticationConverter;\n+\n+\tprivate AuthenticationSuccessHandler authenticationSuccessHandler;\n+\n+\tprivate AuthenticationFailureHandler authenticationFailureHandler;\n+\n+\t@Override\n+\tpublic void configure(B http) {\n+\t\tAuthenticationManager authenticationManager = http.getSharedObject(AuthenticationManager.class);\n+\t\thttp.authenticationProvider(new DPoPAuthenticationProvider(authenticationManager));\n+\t\tAuthenticationFilter authenticationFilter = new AuthenticationFilter(authenticationManager,\n+\t\t\t\tgetAuthenticationConverter());\n+\t\tauthenticationFilter.setRequestMatcher(getRequestMatcher());\n+\t\tauthenticationFilter.setSuccessHandler(getAuthenticationSuccessHandler());\n+\t\tauthenticationFilter.setFailureHandler(getAuthenticationFailureHandler());\n+\t\tauthenticationFilter.setSecurityContextRepository(new RequestAttributeSecurityContextRepository());\n+\t\tauthenticationFilter = postProcess(authenticationFilter);\n+\t\thttp.addFilter(authenticationFilter);\n+\t}\n+\n+\tprivate RequestMatcher getRequestMatcher() {\n+\t\tif (this.requestMatcher == null) {\n+\t\t\tthis.requestMatcher = new DPoPRequestMatcher();\n+\t\t}\n+\t\treturn this.requestMatcher;\n+\t}\n+\n+\tprivate AuthenticationConverter getAuthenticationConverter() {\n+\t\tif (this.authenticationConverter == null) {\n+\t\t\tthis.authenticationConverter = new DPoPAuthenticationConverter();\n+\t\t}\n+\t\treturn this.authenticationConverter;\n+\t}\n+\n+\tprivate AuthenticationSuccessHandler getAuthenticationSuccessHandler() {\n+\t\tif (this.authenticationSuccessHandler == null) {\n+\t\t\tthis.authenticationSuccessHandler = (request, response, authentication) -> {\n+\t\t\t\t// No-op - will continue on filter chain\n+\t\t\t};\n+\t\t}\n+\t\treturn this.authenticationSuccessHandler;\n+\t}\n+\n+\tprivate AuthenticationFailureHandler getAuthenticationFailureHandler() {\n+\t\tif (this.authenticationFailureHandler == null) {\n+\t\t\tthis.authenticationFailureHandler = new AuthenticationEntryPointFailureHandler(\n+\t\t\t\t\tnew HttpStatusEntryPoint(HttpStatus.UNAUTHORIZED));\n+\t\t}\n+\t\treturn this.authenticationFailureHandler;\n+\t}\n+\n+\tprivate static final class DPoPRequestMatcher implements RequestMatcher {\n+\n+\t\t@Override\n+\t\tpublic boolean matches(HttpServletRequest request) {\n+\t\t\tString authorization = request.getHeader(HttpHeaders.AUTHORIZATION);\n+\t\t\tif (!StringUtils.hasText(authorization)) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\treturn StringUtils.startsWithIgnoreCase(authorization, OAuth2AccessToken.TokenType.DPOP.getValue());\n+\t\t}\n+\n+\t}\n+\n+\tprivate static final class DPoPAuthenticationConverter implements AuthenticationConverter {\n+\n+\t\tprivate static final Pattern AUTHORIZATION_PATTERN = Pattern.compile(\"^DPoP (?<token>[a-zA-Z0-9-._~+/]+=*)$\",\n+\t\t\t\tPattern.CASE_INSENSITIVE);\n+\n+\t\t@Override\n+\t\tpublic Authentication convert(HttpServletRequest request) {\n+\t\t\tList<String> authorizationList = Collections.list(request.getHeaders(HttpHeaders.AUTHORIZATION));\n+\t\t\tif (CollectionUtils.isEmpty(authorizationList)) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tif (authorizationList.size() != 1) {\n+\t\t\t\tOAuth2Error error = new OAuth2Error(OAuth2ErrorCodes.INVALID_REQUEST,\n+\t\t\t\t\t\t\"Found multiple Authorization headers.\", null);\n+\t\t\t\tthrow new OAuth2AuthenticationException(error);\n+\t\t\t}\n+\t\t\tString authorization = authorizationList.get(0);\n+\t\t\tif (!StringUtils.startsWithIgnoreCase(authorization, OAuth2AccessToken.TokenType.DPOP.getValue())) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tMatcher matcher = AUTHORIZATION_PATTERN.matcher(authorization);\n+\t\t\tif (!matcher.matches()) {\n+\t\t\t\tOAuth2Error error = new OAuth2Error(OAuth2ErrorCodes.INVALID_TOKEN, \"DPoP access token is malformed.\",\n+\t\t\t\t\t\tnull);\n+\t\t\t\tthrow new OAuth2AuthenticationException(error);\n+\t\t\t}\n+\t\t\tString accessToken = matcher.group(\"token\");\n+\t\t\tList<String> dPoPProofList = Collections\n+\t\t\t\t.list(request.getHeaders(OAuth2AccessToken.TokenType.DPOP.getValue()));\n+\t\t\tif (CollectionUtils.isEmpty(dPoPProofList) || dPoPProofList.size() != 1) {\n+\t\t\t\tOAuth2Error error = new OAuth2Error(OAuth2ErrorCodes.INVALID_REQUEST,\n+\t\t\t\t\t\t\"DPoP proof is missing or invalid.\", null);\n+\t\t\t\tthrow new OAuth2AuthenticationException(error);\n+\t\t\t}\n+\t\t\tString dPoPProof = dPoPProofList.get(0);\n+\t\t\treturn new DPoPAuthenticationToken(accessToken, dPoPProof, request.getMethod(),\n+\t\t\t\t\trequest.getRequestURL().toString());\n+\t\t}\n+\n+\t}\n+\n+}\n\ndiff --git a/config/src/main/java/org/springframework/security/config/annotation/web/configurers/oauth2/server/resource/OAuth2ResourceServerConfigurer.java b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/oauth2/server/resource/OAuth2ResourceServerConfigurer.java\nindex 31a8c265a04..e9a425d46d2 100644\n--- a/config/src/main/java/org/springframework/security/config/annotation/web/configurers/oauth2/server/resource/OAuth2ResourceServerConfigurer.java\n+++ b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/oauth2/server/resource/OAuth2ResourceServerConfigurer.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2024 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -152,6 +152,8 @@ public final class OAuth2ResourceServerConfigurer<H extends HttpSecurityBuilder<\n \n \tprivate final ApplicationContext context;\n \n+\tprivate final DPoPAuthenticationConfigurer<H> dPoPAuthenticationConfigurer = new DPoPAuthenticationConfigurer<>();\n+\n \tprivate AuthenticationManagerResolver<HttpServletRequest> authenticationManagerResolver;\n \n \tprivate BearerTokenResolver bearerTokenResolver;\n@@ -283,6 +285,7 @@ public void configure(H http) {\n \t\tfilter.setSecurityContextHolderStrategy(getSecurityContextHolderStrategy());\n \t\tfilter = postProcess(filter);\n \t\thttp.addFilter(filter);\n+\t\tthis.dPoPAuthenticationConfigurer.configure(http);\n \t}\n \n \tprivate void validateConfiguration() {\n\ndiff --git a/oauth2/oauth2-core/src/main/java/org/springframework/security/oauth2/core/OAuth2ErrorCodes.java b/oauth2/oauth2-core/src/main/java/org/springframework/security/oauth2/core/OAuth2ErrorCodes.java\nindex 47587435bc1..004c65350ad 100644\n--- a/oauth2/oauth2-core/src/main/java/org/springframework/security/oauth2/core/OAuth2ErrorCodes.java\n+++ b/oauth2/oauth2-core/src/main/java/org/springframework/security/oauth2/core/OAuth2ErrorCodes.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -139,6 +139,15 @@ public final class OAuth2ErrorCodes {\n \t */\n \tpublic static final String INVALID_REDIRECT_URI = \"invalid_redirect_uri\";\n \n+\t/**\n+\t * {@code invalid_dpop_proof} - The DPoP Proof JWT is invalid.\n+\t *\n+\t * @since 6.5\n+\t * @see <a href=\"https://datatracker.ietf.org/doc/html/rfc9449\">RFC-9449 - OAuth 2.0\n+\t * Demonstrating Proof of Possession (DPoP)</a>\n+\t */\n+\tpublic static final String INVALID_DPOP_PROOF = \"invalid_dpop_proof\";\n+\n \tprivate OAuth2ErrorCodes() {\n \t}\n \n\ndiff --git a/oauth2/oauth2-jose/src/main/java/org/springframework/security/oauth2/jwt/DPoPProofContext.java b/oauth2/oauth2-jose/src/main/java/org/springframework/security/oauth2/jwt/DPoPProofContext.java\nnew file mode 100644\nindex 00000000000..16a5947cf5c\n--- /dev/null\n+++ b/oauth2/oauth2-jose/src/main/java/org/springframework/security/oauth2/jwt/DPoPProofContext.java\n@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2002-2025 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.security.oauth2.jwt;\n+\n+import java.net.URI;\n+\n+import org.springframework.lang.Nullable;\n+import org.springframework.security.oauth2.core.OAuth2Token;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * @author Joe Grandja\n+ * @since 6.5\n+ * @see DPoPProofJwtDecoderFactory\n+ */\n+public final class DPoPProofContext {\n+\n+\tprivate final String dPoPProof;\n+\n+\tprivate final String method;\n+\n+\tprivate final String targetUri;\n+\n+\tprivate final OAuth2Token accessToken;\n+\n+\tprivate DPoPProofContext(String dPoPProof, String method, String targetUri, @Nullable OAuth2Token accessToken) {\n+\t\tthis.dPoPProof = dPoPProof;\n+\t\tthis.method = method;\n+\t\tthis.targetUri = targetUri;\n+\t\tthis.accessToken = accessToken;\n+\t}\n+\n+\tpublic String getDPoPProof() {\n+\t\treturn this.dPoPProof;\n+\t}\n+\n+\tpublic String getMethod() {\n+\t\treturn this.method;\n+\t}\n+\n+\tpublic String getTargetUri() {\n+\t\treturn this.targetUri;\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\t@Nullable\n+\tpublic <T extends OAuth2Token> T getAccessToken() {\n+\t\treturn (T) this.accessToken;\n+\t}\n+\n+\tpublic static Builder withDPoPProof(String dPoPProof) {\n+\t\treturn new Builder(dPoPProof);\n+\t}\n+\n+\tpublic static final class Builder {\n+\n+\t\tprivate String dPoPProof;\n+\n+\t\tprivate String method;\n+\n+\t\tprivate String targetUri;\n+\n+\t\tprivate OAuth2Token accessToken;\n+\n+\t\tprivate Builder(String dPoPProof) {\n+\t\t\tAssert.hasText(dPoPProof, \"dPoPProof cannot be empty\");\n+\t\t\tthis.dPoPProof = dPoPProof;\n+\t\t}\n+\n+\t\tpublic Builder method(String method) {\n+\t\t\tthis.method = method;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic Builder targetUri(String targetUri) {\n+\t\t\tthis.targetUri = targetUri;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic Builder accessToken(OAuth2Token accessToken) {\n+\t\t\tthis.accessToken = accessToken;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DPoPProofContext build() {\n+\t\t\tvalidate();\n+\t\t\treturn new DPoPProofContext(this.dPoPProof, this.method, this.targetUri, this.accessToken);\n+\t\t}\n+\n+\t\tprivate void validate() {\n+\t\t\tAssert.hasText(this.method, \"method cannot be empty\");\n+\t\t\tAssert.hasText(this.targetUri, \"targetUri cannot be empty\");\n+\t\t\tif (!\"GET\".equals(this.method) && !\"HEAD\".equals(this.method) && !\"POST\".equals(this.method)\n+\t\t\t\t\t&& !\"PUT\".equals(this.method) && !\"PATCH\".equals(this.method) && !\"DELETE\".equals(this.method)\n+\t\t\t\t\t&& !\"OPTIONS\".equals(this.method) && !\"TRACE\".equals(this.method)) {\n+\t\t\t\tthrow new IllegalArgumentException(\"method is invalid\");\n+\t\t\t}\n+\t\t\tURI uri;\n+\t\t\ttry {\n+\t\t\t\turi = new URI(this.targetUri);\n+\t\t\t\turi.toURL();\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\tthrow new IllegalArgumentException(\"targetUri must be a valid URL\", ex);\n+\t\t\t}\n+\t\t\tif (uri.getQuery() != null || uri.getFragment() != null) {\n+\t\t\t\tthrow new IllegalArgumentException(\"targetUri cannot contain query or fragment parts\");\n+\t\t\t}\n+\t\t}\n+\n+\t}\n+\n+}\n\ndiff --git a/oauth2/oauth2-jose/src/main/java/org/springframework/security/oauth2/jwt/DPoPProofJwtDecoderFactory.java b/oauth2/oauth2-jose/src/main/java/org/springframework/security/oauth2/jwt/DPoPProofJwtDecoderFactory.java\nnew file mode 100644\nindex 00000000000..32a59135264\n--- /dev/null\n+++ b/oauth2/oauth2-jose/src/main/java/org/springframework/security/oauth2/jwt/DPoPProofJwtDecoderFactory.java\n@@ -0,0 +1,203 @@\n+/*\n+ * Copyright 2002-2025 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.security.oauth2.jwt;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.time.Clock;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+import com.nimbusds.jose.JOSEException;\n+import com.nimbusds.jose.JOSEObjectType;\n+import com.nimbusds.jose.JWSAlgorithm;\n+import com.nimbusds.jose.jwk.ECKey;\n+import com.nimbusds.jose.jwk.JWK;\n+import com.nimbusds.jose.jwk.RSAKey;\n+import com.nimbusds.jose.proc.DefaultJOSEObjectTypeVerifier;\n+import com.nimbusds.jose.proc.JOSEObjectTypeVerifier;\n+import com.nimbusds.jose.proc.JWSKeySelector;\n+import com.nimbusds.jose.proc.SecurityContext;\n+import com.nimbusds.jwt.proc.ConfigurableJWTProcessor;\n+import com.nimbusds.jwt.proc.DefaultJWTProcessor;\n+\n+import org.springframework.security.oauth2.core.DelegatingOAuth2TokenValidator;\n+import org.springframework.security.oauth2.core.OAuth2Error;\n+import org.springframework.security.oauth2.core.OAuth2ErrorCodes;\n+import org.springframework.security.oauth2.core.OAuth2TokenValidator;\n+import org.springframework.security.oauth2.core.OAuth2TokenValidatorResult;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * @author Joe Grandja\n+ * @since 6.5\n+ * @see DPoPProofContext\n+ */\n+public final class DPoPProofJwtDecoderFactory implements JwtDecoderFactory<DPoPProofContext> {\n+\n+\tprivate static final JOSEObjectTypeVerifier<SecurityContext> DPOP_TYPE_VERIFIER = new DefaultJOSEObjectTypeVerifier<>(\n+\t\t\tnew JOSEObjectType(\"dpop+jwt\"));\n+\n+\tpublic static final Function<DPoPProofContext, OAuth2TokenValidator<Jwt>> DEFAULT_JWT_VALIDATOR_FACTORY = defaultJwtValidatorFactory();\n+\n+\tprivate Function<DPoPProofContext, OAuth2TokenValidator<Jwt>> jwtValidatorFactory = DEFAULT_JWT_VALIDATOR_FACTORY;\n+\n+\t@Override\n+\tpublic JwtDecoder createDecoder(DPoPProofContext dPoPProofContext) {\n+\t\tAssert.notNull(dPoPProofContext, \"dPoPProofContext cannot be null\");\n+\t\tNimbusJwtDecoder jwtDecoder = buildDecoder();\n+\t\tjwtDecoder.setJwtValidator(this.jwtValidatorFactory.apply(dPoPProofContext));\n+\t\treturn jwtDecoder;\n+\t}\n+\n+\tpublic void setJwtValidatorFactory(Function<DPoPProofContext, OAuth2TokenValidator<Jwt>> jwtValidatorFactory) {\n+\t\tAssert.notNull(jwtValidatorFactory, \"jwtValidatorFactory cannot be null\");\n+\t\tthis.jwtValidatorFactory = jwtValidatorFactory;\n+\t}\n+\n+\tprivate static NimbusJwtDecoder buildDecoder() {\n+\t\tConfigurableJWTProcessor<SecurityContext> jwtProcessor = new DefaultJWTProcessor<>();\n+\t\tjwtProcessor.setJWSTypeVerifier(DPOP_TYPE_VERIFIER);\n+\t\tjwtProcessor.setJWSKeySelector(jwsKeySelector());\n+\t\t// Override the default Nimbus claims set verifier and use jwtValidatorFactory for\n+\t\t// claims validation\n+\t\tjwtProcessor.setJWTClaimsSetVerifier((claims, context) -> {\n+\t\t});\n+\t\treturn new NimbusJwtDecoder(jwtProcessor);\n+\t}\n+\n+\tprivate static JWSKeySelector<SecurityContext> jwsKeySelector() {\n+\t\treturn (header, context) -> {\n+\t\t\tJWSAlgorithm algorithm = header.getAlgorithm();\n+\t\t\tif (!JWSAlgorithm.Family.RSA.contains(algorithm) && !JWSAlgorithm.Family.EC.contains(algorithm)) {\n+\t\t\t\tthrow new BadJwtException(\"Unsupported alg parameter in JWS Header: \" + algorithm.getName());\n+\t\t\t}\n+\n+\t\t\tJWK jwk = header.getJWK();\n+\t\t\tif (jwk == null) {\n+\t\t\t\tthrow new BadJwtException(\"Missing jwk parameter in JWS Header.\");\n+\t\t\t}\n+\t\t\tif (jwk.isPrivate()) {\n+\t\t\t\tthrow new BadJwtException(\"Invalid jwk parameter in JWS Header.\");\n+\t\t\t}\n+\n+\t\t\ttry {\n+\t\t\t\tif (JWSAlgorithm.Family.RSA.contains(algorithm) && jwk instanceof RSAKey rsaKey) {\n+\t\t\t\t\treturn Collections.singletonList(rsaKey.toRSAPublicKey());\n+\t\t\t\t}\n+\t\t\t\telse if (JWSAlgorithm.Family.EC.contains(algorithm) && jwk instanceof ECKey ecKey) {\n+\t\t\t\t\treturn Collections.singletonList(ecKey.toECPublicKey());\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (JOSEException ex) {\n+\t\t\t\tthrow new BadJwtException(\"Invalid jwk parameter in JWS Header.\");\n+\t\t\t}\n+\n+\t\t\tthrow new BadJwtException(\"Invalid alg / jwk parameter in JWS Header: alg=\" + algorithm.getName()\n+\t\t\t\t\t+ \", jwk.kty=\" + jwk.getKeyType().getValue());\n+\t\t};\n+\t}\n+\n+\tprivate static Function<DPoPProofContext, OAuth2TokenValidator<Jwt>> defaultJwtValidatorFactory() {\n+\t\treturn (context) -> new DelegatingOAuth2TokenValidator<>(\n+\t\t\t\tnew JwtClaimValidator<>(\"htm\", context.getMethod()::equals),\n+\t\t\t\tnew JwtClaimValidator<>(\"htu\", context.getTargetUri()::equals), new JtiClaimValidator(),\n+\t\t\t\tnew IatClaimValidator());\n+\t}\n+\n+\tprivate static final class JtiClaimValidator implements OAuth2TokenValidator<Jwt> {\n+\n+\t\tprivate static final Map<String, Long> jtiCache = new ConcurrentHashMap<>();\n+\n+\t\t@Override\n+\t\tpublic OAuth2TokenValidatorResult validate(Jwt jwt) {\n+\t\t\tAssert.notNull(jwt, \"DPoP proof jwt cannot be null\");\n+\t\t\tString jti = jwt.getId();\n+\t\t\tif (!StringUtils.hasText(jti)) {\n+\t\t\t\tOAuth2Error error = createOAuth2Error(\"jti claim is required.\");\n+\t\t\t\treturn OAuth2TokenValidatorResult.failure(error);\n+\t\t\t}\n+\n+\t\t\t// Enforce single-use to protect against DPoP proof replay\n+\t\t\tString jtiHash;\n+\t\t\ttry {\n+\t\t\t\tjtiHash = computeSHA256(jti);\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\tOAuth2Error error = createOAuth2Error(\"jti claim is invalid.\");\n+\t\t\t\treturn OAuth2TokenValidatorResult.failure(error);\n+\t\t\t}\n+\t\t\tInstant now = Instant.now(Clock.systemUTC());\n+\t\t\tif ((jtiCache.putIfAbsent(jtiHash, now.toEpochMilli())) != null) {\n+\t\t\t\t// Already used\n+\t\t\t\tOAuth2Error error = createOAuth2Error(\"jti claim is invalid.\");\n+\t\t\t\treturn OAuth2TokenValidatorResult.failure(error);\n+\t\t\t}\n+\t\t\treturn OAuth2TokenValidatorResult.success();\n+\t\t}\n+\n+\t\tprivate static OAuth2Error createOAuth2Error(String reason) {\n+\t\t\treturn new OAuth2Error(OAuth2ErrorCodes.INVALID_DPOP_PROOF, reason, null);\n+\t\t}\n+\n+\t\tprivate static String computeSHA256(String value) throws Exception {\n+\t\t\tMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n+\t\t\tbyte[] digest = md.digest(value.getBytes(StandardCharsets.UTF_8));\n+\t\t\treturn Base64.getUrlEncoder().withoutPadding().encodeToString(digest);\n+\t\t}\n+\n+\t}\n+\n+\tprivate static final class IatClaimValidator implements OAuth2TokenValidator<Jwt> {\n+\n+\t\tprivate final Duration clockSkew = Duration.ofSeconds(60);\n+\n+\t\tprivate final Clock clock = Clock.systemUTC();\n+\n+\t\t@Override\n+\t\tpublic OAuth2TokenValidatorResult validate(Jwt jwt) {\n+\t\t\tAssert.notNull(jwt, \"DPoP proof jwt cannot be null\");\n+\t\t\tInstant issuedAt = jwt.getIssuedAt();\n+\t\t\tif (issuedAt == null) {\n+\t\t\t\tOAuth2Error error = createOAuth2Error(\"iat claim is required.\");\n+\t\t\t\treturn OAuth2TokenValidatorResult.failure(error);\n+\t\t\t}\n+\n+\t\t\t// Check time window of validity\n+\t\t\tInstant now = Instant.now(this.clock);\n+\t\t\tInstant notBefore = now.minus(this.clockSkew);\n+\t\t\tInstant notAfter = now.plus(this.clockSkew);\n+\t\t\tif (issuedAt.isBefore(notBefore) || issuedAt.isAfter(notAfter)) {\n+\t\t\t\tOAuth2Error error = createOAuth2Error(\"iat claim is invalid.\");\n+\t\t\t\treturn OAuth2TokenValidatorResult.failure(error);\n+\t\t\t}\n+\t\t\treturn OAuth2TokenValidatorResult.success();\n+\t\t}\n+\n+\t\tprivate static OAuth2Error createOAuth2Error(String reason) {\n+\t\t\treturn new OAuth2Error(OAuth2ErrorCodes.INVALID_DPOP_PROOF, reason, null);\n+\t\t}\n+\n+\t}\n+\n+}\n\ndiff --git a/oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/authentication/DPoPAuthenticationProvider.java b/oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/authentication/DPoPAuthenticationProvider.java\nnew file mode 100644\nindex 00000000000..b26cb754c70\n--- /dev/null\n+++ b/oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/authentication/DPoPAuthenticationProvider.java\n@@ -0,0 +1,273 @@\n+/*\n+ * Copyright 2002-2025 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.security.oauth2.server.resource.authentication;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.PublicKey;\n+import java.time.Instant;\n+import java.util.Base64;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import com.nimbusds.jose.jwk.AsymmetricJWK;\n+import com.nimbusds.jose.jwk.JWK;\n+\n+import org.springframework.security.authentication.AuthenticationManager;\n+import org.springframework.security.authentication.AuthenticationProvider;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.AuthenticationException;\n+import org.springframework.security.oauth2.core.ClaimAccessor;\n+import org.springframework.security.oauth2.core.DelegatingOAuth2TokenValidator;\n+import org.springframework.security.oauth2.core.OAuth2AuthenticationException;\n+import org.springframework.security.oauth2.core.OAuth2Error;\n+import org.springframework.security.oauth2.core.OAuth2ErrorCodes;\n+import org.springframework.security.oauth2.core.OAuth2Token;\n+import org.springframework.security.oauth2.core.OAuth2TokenValidator;\n+import org.springframework.security.oauth2.core.OAuth2TokenValidatorResult;\n+import org.springframework.security.oauth2.jwt.DPoPProofContext;\n+import org.springframework.security.oauth2.jwt.DPoPProofJwtDecoderFactory;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.jwt.JwtDecoder;\n+import org.springframework.security.oauth2.jwt.JwtDecoderFactory;\n+import org.springframework.security.oauth2.jwt.JwtException;\n+import org.springframework.util.Assert;\n+import org.springframework.util.CollectionUtils;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * @author Joe Grandja\n+ * @since 6.5\n+ * @see DPoPAuthenticationToken\n+ * @see DPoPProofJwtDecoderFactory\n+ */\n+public final class DPoPAuthenticationProvider implements AuthenticationProvider {\n+\n+\tprivate final AuthenticationManager tokenAuthenticationManager;\n+\n+\tprivate JwtDecoderFactory<DPoPProofContext> dPoPProofVerifierFactory;\n+\n+\tpublic DPoPAuthenticationProvider(AuthenticationManager tokenAuthenticationManager) {\n+\t\tAssert.notNull(tokenAuthenticationManager, \"tokenAuthenticationManager cannot be null\");\n+\t\tthis.tokenAuthenticationManager = tokenAuthenticationManager;\n+\t\tFunction<DPoPProofContext, OAuth2TokenValidator<Jwt>> jwtValidatorFactory = (\n+\t\t\t\tcontext) -> new DelegatingOAuth2TokenValidator<>(\n+\t\t\t\t\t\t// Use default validators\n+\t\t\t\t\t\tDPoPProofJwtDecoderFactory.DEFAULT_JWT_VALIDATOR_FACTORY.apply(context),\n+\t\t\t\t\t\t// Add custom validators\n+\t\t\t\t\t\tnew AthClaimValidator(context.getAccessToken()),\n+\t\t\t\t\t\tnew JwkThumbprintValidator(context.getAccessToken()));\n+\t\tDPoPProofJwtDecoderFactory dPoPProofJwtDecoderFactory = new DPoPProofJwtDecoderFactory();\n+\t\tdPoPProofJwtDecoderFactory.setJwtValidatorFactory(jwtValidatorFactory);\n+\t\tthis.dPoPProofVerifierFactory = dPoPProofJwtDecoderFactory;\n+\t}\n+\n+\t@Override\n+\tpublic Authentication authenticate(Authentication authentication) throws AuthenticationException {\n+\t\tDPoPAuthenticationToken dPoPAuthenticationToken = (DPoPAuthenticationToken) authentication;\n+\n+\t\tBearerTokenAuthenticationToken accessTokenAuthenticationRequest = new BearerTokenAuthenticationToken(\n+\t\t\t\tdPoPAuthenticationToken.getAccessToken());\n+\t\tAuthentication accessTokenAuthenticationResult = this.tokenAuthenticationManager\n+\t\t\t.authenticate(accessTokenAuthenticationRequest);\n+\n+\t\tAbstractOAuth2TokenAuthenticationToken<OAuth2Token> accessTokenAuthentication = null;\n+\t\tif (accessTokenAuthenticationResult instanceof AbstractOAuth2TokenAuthenticationToken) {\n+\t\t\taccessTokenAuthentication = (AbstractOAuth2TokenAuthenticationToken) accessTokenAuthenticationResult;\n+\t\t}\n+\t\tif (accessTokenAuthentication == null) {\n+\t\t\tOAuth2Error error = new OAuth2Error(OAuth2ErrorCodes.INVALID_TOKEN,\n+\t\t\t\t\t\"Unable to authenticate the DPoP-bound access token.\", null);\n+\t\t\tthrow new OAuth2AuthenticationException(error);\n+\t\t}\n+\n+\t\tOAuth2AccessTokenClaims accessToken = new OAuth2AccessTokenClaims(accessTokenAuthentication.getToken(),\n+\t\t\t\taccessTokenAuthentication.getTokenAttributes());\n+\n+\t\tDPoPProofContext dPoPProofContext = DPoPProofContext.withDPoPProof(dPoPAuthenticationToken.getDPoPProof())\n+\t\t\t.accessToken(accessToken)\n+\t\t\t.method(dPoPAuthenticationToken.getMethod())\n+\t\t\t.targetUri(dPoPAuthenticationToken.getResourceUri())\n+\t\t\t.build();\n+\t\tJwtDecoder dPoPProofVerifier = this.dPoPProofVerifierFactory.createDecoder(dPoPProofContext);\n+\n+\t\ttry {\n+\t\t\tdPoPProofVerifier.decode(dPoPProofContext.getDPoPProof());\n+\t\t}\n+\t\tcatch (JwtException ex) {\n+\t\t\tOAuth2Error error = new OAuth2Error(OAuth2ErrorCodes.INVALID_DPOP_PROOF);\n+\t\t\tthrow new OAuth2AuthenticationException(error, ex);\n+\t\t}\n+\n+\t\treturn accessTokenAuthenticationResult;\n+\t}\n+\n+\t@Override\n+\tpublic boolean supports(Class<?> authentication) {\n+\t\treturn DPoPAuthenticationToken.class.isAssignableFrom(authentication);\n+\t}\n+\n+\tpublic void setDPoPProofVerifierFactory(JwtDecoderFactory<DPoPProofContext> dPoPProofVerifierFactory) {\n+\t\tAssert.notNull(dPoPProofVerifierFactory, \"dPoPProofVerifierFactory cannot be null\");\n+\t\tthis.dPoPProofVerifierFactory = dPoPProofVerifierFactory;\n+\t}\n+\n+\tprivate static final class AthClaimValidator implements OAuth2TokenValidator<Jwt> {\n+\n+\t\tprivate final OAuth2AccessTokenClaims accessToken;\n+\n+\t\tprivate AthClaimValidator(OAuth2AccessTokenClaims accessToken) {\n+\t\t\tAssert.notNull(accessToken, \"accessToken cannot be null\");\n+\t\t\tthis.accessToken = accessToken;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic OAuth2TokenValidatorResult validate(Jwt jwt) {\n+\t\t\tAssert.notNull(jwt, \"DPoP proof jwt cannot be null\");\n+\t\t\tString accessTokenHashClaim = jwt.getClaimAsString(\"ath\");\n+\t\t\tif (!StringUtils.hasText(accessTokenHashClaim)) {\n+\t\t\t\tOAuth2Error error = createOAuth2Error(\"ath claim is required.\");\n+\t\t\t\treturn OAuth2TokenValidatorResult.failure(error);\n+\t\t\t}\n+\n+\t\t\tString accessTokenHash;\n+\t\t\ttry {\n+\t\t\t\taccessTokenHash = computeSHA256(this.accessToken.getTokenValue());\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\tOAuth2Error error = createOAuth2Error(\"Failed to compute SHA-256 Thumbprint for access token.\");\n+\t\t\t\treturn OAuth2TokenValidatorResult.failure(error);\n+\t\t\t}\n+\t\t\tif (!accessTokenHashClaim.equals(accessTokenHash)) {\n+\t\t\t\tOAuth2Error error = createOAuth2Error(\"ath claim is invalid.\");\n+\t\t\t\treturn OAuth2TokenValidatorResult.failure(error);\n+\t\t\t}\n+\t\t\treturn OAuth2TokenValidatorResult.success();\n+\t\t}\n+\n+\t\tprivate static OAuth2Error createOAuth2Error(String reason) {\n+\t\t\treturn new OAuth2Error(OAuth2ErrorCodes.INVALID_DPOP_PROOF, reason, null);\n+\t\t}\n+\n+\t\tprivate static String computeSHA256(String value) throws Exception {\n+\t\t\tMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n+\t\t\tbyte[] digest = md.digest(value.getBytes(StandardCharsets.UTF_8));\n+\t\t\treturn Base64.getUrlEncoder().withoutPadding().encodeToString(digest);\n+\t\t}\n+\n+\t}\n+\n+\tprivate static final class JwkThumbprintValidator implements OAuth2TokenValidator<Jwt> {\n+\n+\t\tprivate final OAuth2AccessTokenClaims accessToken;\n+\n+\t\tprivate JwkThumbprintValidator(OAuth2AccessTokenClaims accessToken) {\n+\t\t\tAssert.notNull(accessToken, \"accessToken cannot be null\");\n+\t\t\tthis.accessToken = accessToken;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic OAuth2TokenValidatorResult validate(Jwt jwt) {\n+\t\t\tAssert.notNull(jwt, \"DPoP proof jwt cannot be null\");\n+\t\t\tString jwkThumbprintClaim = null;\n+\t\t\tMap<String, Object> confirmationMethodClaim = this.accessToken.getClaimAsMap(\"cnf\");\n+\t\t\tif (!CollectionUtils.isEmpty(confirmationMethodClaim) && confirmationMethodClaim.containsKey(\"jkt\")) {\n+\t\t\t\tjwkThumbprintClaim = (String) confirmationMethodClaim.get(\"jkt\");\n+\t\t\t}\n+\t\t\tif (jwkThumbprintClaim == null) {\n+\t\t\t\tOAuth2Error error = createOAuth2Error(\"jkt claim is required.\");\n+\t\t\t\treturn OAuth2TokenValidatorResult.failure(error);\n+\t\t\t}\n+\n+\t\t\tPublicKey publicKey = null;\n+\t\t\t@SuppressWarnings(\"unchecked\")\n+\t\t\tMap<String, Object> jwkJson = (Map<String, Object>) jwt.getHeaders().get(\"jwk\");\n+\t\t\ttry {\n+\t\t\t\tJWK jwk = JWK.parse(jwkJson);\n+\t\t\t\tif (jwk instanceof AsymmetricJWK) {\n+\t\t\t\t\tpublicKey = ((AsymmetricJWK) jwk).toPublicKey();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (Exception ignored) {\n+\t\t\t}\n+\t\t\tif (publicKey == null) {\n+\t\t\t\tOAuth2Error error = createOAuth2Error(\"jwk header is missing or invalid.\");\n+\t\t\t\treturn OAuth2TokenValidatorResult.failure(error);\n+\t\t\t}\n+\n+\t\t\tString jwkThumbprint;\n+\t\t\ttry {\n+\t\t\t\tjwkThumbprint = computeSHA256(publicKey);\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\tOAuth2Error error = createOAuth2Error(\"Failed to compute SHA-256 Thumbprint for jwk.\");\n+\t\t\t\treturn OAuth2TokenValidatorResult.failure(error);\n+\t\t\t}\n+\n+\t\t\tif (!jwkThumbprintClaim.equals(jwkThumbprint)) {\n+\t\t\t\tOAuth2Error error = createOAuth2Error(\"jkt claim is invalid.\");\n+\t\t\t\treturn OAuth2TokenValidatorResult.failure(error);\n+\t\t\t}\n+\t\t\treturn OAuth2TokenValidatorResult.success();\n+\t\t}\n+\n+\t\tprivate static OAuth2Error createOAuth2Error(String reason) {\n+\t\t\treturn new OAuth2Error(OAuth2ErrorCodes.INVALID_DPOP_PROOF, reason, null);\n+\t\t}\n+\n+\t\tprivate static String computeSHA256(PublicKey publicKey) throws Exception {\n+\t\t\tMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n+\t\t\tbyte[] digest = md.digest(publicKey.getEncoded());\n+\t\t\treturn Base64.getUrlEncoder().withoutPadding().encodeToString(digest);\n+\t\t}\n+\n+\t}\n+\n+\tprivate static final class OAuth2AccessTokenClaims implements OAuth2Token, ClaimAccessor {\n+\n+\t\tprivate final OAuth2Token accessToken;\n+\n+\t\tprivate final Map<String, Object> claims;\n+\n+\t\tprivate OAuth2AccessTokenClaims(OAuth2Token accessToken, Map<String, Object> claims) {\n+\t\t\tthis.accessToken = accessToken;\n+\t\t\tthis.claims = claims;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String getTokenValue() {\n+\t\t\treturn this.accessToken.getTokenValue();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Instant getIssuedAt() {\n+\t\t\treturn this.accessToken.getIssuedAt();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Instant getExpiresAt() {\n+\t\t\treturn this.accessToken.getExpiresAt();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Map<String, Object> getClaims() {\n+\t\t\treturn this.claims;\n+\t\t}\n+\n+\t}\n+\n+}\n\ndiff --git a/oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/authentication/DPoPAuthenticationToken.java b/oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/authentication/DPoPAuthenticationToken.java\nnew file mode 100644\nindex 00000000000..0abca697068\n--- /dev/null\n+++ b/oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/authentication/DPoPAuthenticationToken.java\n@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2002-2025 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.security.oauth2.server.resource.authentication;\n+\n+import java.io.Serial;\n+import java.util.Collections;\n+\n+import org.springframework.security.authentication.AbstractAuthenticationToken;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * @author Joe Grandja\n+ * @since 6.5\n+ * @see DPoPAuthenticationProvider\n+ */\n+public class DPoPAuthenticationToken extends AbstractAuthenticationToken {\n+\n+\t@Serial\n+\tprivate static final long serialVersionUID = 5481690438914686216L;\n+\n+\tprivate final String accessToken;\n+\n+\tprivate final String dPoPProof;\n+\n+\tprivate final String method;\n+\n+\tprivate final String resourceUri;\n+\n+\tpublic DPoPAuthenticationToken(String accessToken, String dPoPProof, String method, String resourceUri) {\n+\t\tsuper(Collections.emptyList());\n+\t\tAssert.hasText(accessToken, \"accessToken cannot be empty\");\n+\t\tAssert.hasText(dPoPProof, \"dPoPProof cannot be empty\");\n+\t\tAssert.hasText(method, \"method cannot be empty\");\n+\t\tAssert.hasText(resourceUri, \"resourceUri cannot be empty\");\n+\t\tthis.accessToken = accessToken;\n+\t\tthis.dPoPProof = dPoPProof;\n+\t\tthis.method = method;\n+\t\tthis.resourceUri = resourceUri;\n+\t}\n+\n+\t@Override\n+\tpublic Object getPrincipal() {\n+\t\treturn getAccessToken();\n+\t}\n+\n+\t@Override\n+\tpublic Object getCredentials() {\n+\t\treturn getAccessToken();\n+\t}\n+\n+\tpublic String getAccessToken() {\n+\t\treturn this.accessToken;\n+\t}\n+\n+\tpublic String getDPoPProof() {\n+\t\treturn this.dPoPProof;\n+\t}\n+\n+\tpublic String getMethod() {\n+\t\treturn this.method;\n+\t}\n+\n+\tpublic String getResourceUri() {\n+\t\treturn this.resourceUri;\n+\t}\n+\n+}\n",
    "test_patch": "diff --git a/config/src/test/java/org/springframework/security/config/annotation/web/configurers/oauth2/server/resource/DPoPAuthenticationConfigurerTests.java b/config/src/test/java/org/springframework/security/config/annotation/web/configurers/oauth2/server/resource/DPoPAuthenticationConfigurerTests.java\nnew file mode 100644\nindex 00000000000..00117286244\n--- /dev/null\n+++ b/config/src/test/java/org/springframework/security/config/annotation/web/configurers/oauth2/server/resource/DPoPAuthenticationConfigurerTests.java\n@@ -0,0 +1,279 @@\n+/*\n+ * Copyright 2002-2025 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.security.config.annotation.web.configurers.oauth2.server.resource;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.PublicKey;\n+import java.security.interfaces.ECPrivateKey;\n+import java.security.interfaces.ECPublicKey;\n+import java.security.interfaces.RSAPrivateKey;\n+import java.security.interfaces.RSAPublicKey;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import com.nimbusds.jose.jwk.ECKey;\n+import com.nimbusds.jose.jwk.JWKSet;\n+import com.nimbusds.jose.jwk.RSAKey;\n+import com.nimbusds.jose.jwk.source.JWKSource;\n+import com.nimbusds.jose.proc.SecurityContext;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.security.config.Customizer;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.config.test.SpringTestContext;\n+import org.springframework.security.config.test.SpringTestContextExtension;\n+import org.springframework.security.oauth2.core.endpoint.OAuth2ParameterNames;\n+import org.springframework.security.oauth2.jose.TestJwks;\n+import org.springframework.security.oauth2.jose.TestKeys;\n+import org.springframework.security.oauth2.jose.jws.SignatureAlgorithm;\n+import org.springframework.security.oauth2.jwt.JwsHeader;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.jwt.JwtClaimsSet;\n+import org.springframework.security.oauth2.jwt.JwtEncoderParameters;\n+import org.springframework.security.oauth2.jwt.NimbusJwtDecoder;\n+import org.springframework.security.oauth2.jwt.NimbusJwtEncoder;\n+import org.springframework.security.web.SecurityFilterChain;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.servlet.config.annotation.EnableWebMvc;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+/**\n+ * Tests for {@link DPoPAuthenticationConfigurer}.\n+ *\n+ * @author Joe Grandja\n+ */\n+@ExtendWith(SpringTestContextExtension.class)\n+public class DPoPAuthenticationConfigurerTests {\n+\n+\tprivate static final RSAPublicKey PROVIDER_RSA_PUBLIC_KEY = TestKeys.DEFAULT_PUBLIC_KEY;\n+\n+\tprivate static final RSAPrivateKey PROVIDER_RSA_PRIVATE_KEY = TestKeys.DEFAULT_PRIVATE_KEY;\n+\n+\tprivate static final ECPublicKey CLIENT_EC_PUBLIC_KEY = (ECPublicKey) TestKeys.DEFAULT_EC_KEY_PAIR.getPublic();\n+\n+\tprivate static final ECPrivateKey CLIENT_EC_PRIVATE_KEY = (ECPrivateKey) TestKeys.DEFAULT_EC_KEY_PAIR.getPrivate();\n+\n+\tprivate static NimbusJwtEncoder providerJwtEncoder;\n+\n+\tprivate static NimbusJwtEncoder clientJwtEncoder;\n+\n+\tpublic final SpringTestContext spring = new SpringTestContext(this);\n+\n+\t@Autowired\n+\tprivate MockMvc mvc;\n+\n+\t@BeforeAll\n+\tpublic static void init() {\n+\t\tRSAKey providerRsaKey = TestJwks.jwk(PROVIDER_RSA_PUBLIC_KEY, PROVIDER_RSA_PRIVATE_KEY).build();\n+\t\tJWKSource<SecurityContext> providerJwkSource = (jwkSelector, securityContext) -> jwkSelector\n+\t\t\t.select(new JWKSet(providerRsaKey));\n+\t\tproviderJwtEncoder = new NimbusJwtEncoder(providerJwkSource);\n+\t\tECKey clientEcKey = TestJwks.jwk(CLIENT_EC_PUBLIC_KEY, CLIENT_EC_PRIVATE_KEY).build();\n+\t\tJWKSource<SecurityContext> clientJwkSource = (jwkSelector, securityContext) -> jwkSelector\n+\t\t\t.select(new JWKSet(clientEcKey));\n+\t\tclientJwtEncoder = new NimbusJwtEncoder(clientJwkSource);\n+\t}\n+\n+\t@Test\n+\tpublic void requestWhenDPoPAndBearerAuthenticationThenUnauthorized() throws Exception {\n+\t\tthis.spring.register(SecurityConfig.class, ResourceEndpoints.class).autowire();\n+\t\tSet<String> scope = Collections.singleton(\"resource1.read\");\n+\t\tString accessToken = generateAccessToken(scope, CLIENT_EC_PUBLIC_KEY);\n+\t\tString dPoPProof = generateDPoPProof(HttpMethod.GET.name(), \"http://localhost/resource1\", accessToken);\n+\t\t// @formatter:off\n+\t\tthis.mvc.perform(get(\"/resource1\")\n+\t\t\t\t\t\t.header(HttpHeaders.AUTHORIZATION, \"DPoP \" + accessToken)\n+\t\t\t\t\t\t.header(HttpHeaders.AUTHORIZATION, \"Bearer \" + accessToken)\n+\t\t\t\t\t\t.header(\"DPoP\", dPoPProof))\n+\t\t\t\t.andExpect(status().isUnauthorized());\n+\t\t// @formatter:on\n+\t}\n+\n+\t@Test\n+\tpublic void requestWhenDPoPAccessTokenMalformedThenUnauthorized() throws Exception {\n+\t\tthis.spring.register(SecurityConfig.class, ResourceEndpoints.class).autowire();\n+\t\tSet<String> scope = Collections.singleton(\"resource1.read\");\n+\t\tString accessToken = generateAccessToken(scope, CLIENT_EC_PUBLIC_KEY);\n+\t\tString dPoPProof = generateDPoPProof(HttpMethod.GET.name(), \"http://localhost/resource1\", accessToken);\n+\t\t// @formatter:off\n+\t\tthis.mvc.perform(get(\"/resource1\")\n+\t\t\t\t\t\t.header(HttpHeaders.AUTHORIZATION, \"DPoP \" + accessToken + \" m a l f o r m e d \")\n+\t\t\t\t\t\t.header(\"DPoP\", dPoPProof))\n+\t\t\t\t.andExpect(status().isUnauthorized());\n+\t\t// @formatter:on\n+\t}\n+\n+\t@Test\n+\tpublic void requestWhenMultipleDPoPProofsThenUnauthorized() throws Exception {\n+\t\tthis.spring.register(SecurityConfig.class, ResourceEndpoints.class).autowire();\n+\t\tSet<String> scope = Collections.singleton(\"resource1.read\");\n+\t\tString accessToken = generateAccessToken(scope, CLIENT_EC_PUBLIC_KEY);\n+\t\tString dPoPProof = generateDPoPProof(HttpMethod.GET.name(), \"http://localhost/resource1\", accessToken);\n+\t\t// @formatter:off\n+\t\tthis.mvc.perform(get(\"/resource1\")\n+\t\t\t\t\t\t.header(HttpHeaders.AUTHORIZATION, \"DPoP \" + accessToken)\n+\t\t\t\t\t\t.header(\"DPoP\", dPoPProof)\n+\t\t\t\t\t\t.header(\"DPoP\", dPoPProof))\n+\t\t\t\t.andExpect(status().isUnauthorized());\n+\t\t// @formatter:on\n+\t}\n+\n+\t@Test\n+\tpublic void requestWhenDPoPAuthenticationValidThenAccessed() throws Exception {\n+\t\tthis.spring.register(SecurityConfig.class, ResourceEndpoints.class).autowire();\n+\t\tSet<String> scope = Collections.singleton(\"resource1.read\");\n+\t\tString accessToken = generateAccessToken(scope, CLIENT_EC_PUBLIC_KEY);\n+\t\tString dPoPProof = generateDPoPProof(HttpMethod.GET.name(), \"http://localhost/resource1\", accessToken);\n+\t\t// @formatter:off\n+\t\tthis.mvc.perform(get(\"/resource1\")\n+\t\t\t\t\t\t.header(HttpHeaders.AUTHORIZATION, \"DPoP \" + accessToken)\n+\t\t\t\t\t\t.header(\"DPoP\", dPoPProof))\n+\t\t\t\t.andExpect(status().isOk())\n+\t\t\t\t.andExpect(content().string(\"resource1\"));\n+\t\t// @formatter:on\n+\t}\n+\n+\tprivate static String generateAccessToken(Set<String> scope, PublicKey clientPublicKey) {\n+\t\tMap<String, Object> jktClaim = null;\n+\t\tif (clientPublicKey != null) {\n+\t\t\ttry {\n+\t\t\t\tString sha256Thumbprint = computeSHA256(clientPublicKey);\n+\t\t\t\tjktClaim = new HashMap<>();\n+\t\t\t\tjktClaim.put(\"jkt\", sha256Thumbprint);\n+\t\t\t}\n+\t\t\tcatch (Exception ignored) {\n+\t\t\t}\n+\t\t}\n+\t\tJwsHeader jwsHeader = JwsHeader.with(SignatureAlgorithm.RS256).build();\n+\t\tInstant issuedAt = Instant.now();\n+\t\tInstant expiresAt = issuedAt.plus(30, ChronoUnit.MINUTES);\n+\t\t// @formatter:off\n+\t\tJwtClaimsSet.Builder claimsBuilder = JwtClaimsSet.builder()\n+\t\t\t\t.issuer(\"https://provider.com\")\n+\t\t\t\t.subject(\"subject\")\n+\t\t\t\t.issuedAt(issuedAt)\n+\t\t\t\t.expiresAt(expiresAt)\n+\t\t\t\t.id(UUID.randomUUID().toString())\n+\t\t\t\t.claim(OAuth2ParameterNames.SCOPE, scope);\n+\t\tif (jktClaim != null) {\n+\t\t\tclaimsBuilder.claim(\"cnf\", jktClaim);\t// Bind client public key\n+\t\t}\n+\t\t// @formatter:on\n+\t\tJwt jwt = providerJwtEncoder.encode(JwtEncoderParameters.from(jwsHeader, claimsBuilder.build()));\n+\t\treturn jwt.getTokenValue();\n+\t}\n+\n+\tprivate static String generateDPoPProof(String method, String resourceUri, String accessToken) throws Exception {\n+\t\t// @formatter:off\n+\t\tMap<String, Object> publicJwk = TestJwks.jwk(CLIENT_EC_PUBLIC_KEY, CLIENT_EC_PRIVATE_KEY)\n+\t\t\t\t.build()\n+\t\t\t\t.toPublicJWK()\n+\t\t\t\t.toJSONObject();\n+\t\tJwsHeader jwsHeader = JwsHeader.with(SignatureAlgorithm.ES256)\n+\t\t\t\t.type(\"dpop+jwt\")\n+\t\t\t\t.jwk(publicJwk)\n+\t\t\t\t.build();\n+\t\tJwtClaimsSet claims = JwtClaimsSet.builder()\n+\t\t\t\t.issuedAt(Instant.now())\n+\t\t\t\t.claim(\"htm\", method)\n+\t\t\t\t.claim(\"htu\", resourceUri)\n+\t\t\t\t.claim(\"ath\", computeSHA256(accessToken))\n+\t\t\t\t.id(UUID.randomUUID().toString())\n+\t\t\t\t.build();\n+\t\t// @formatter:on\n+\t\tJwt jwt = clientJwtEncoder.encode(JwtEncoderParameters.from(jwsHeader, claims));\n+\t\treturn jwt.getTokenValue();\n+\t}\n+\n+\tprivate static String computeSHA256(String value) throws Exception {\n+\t\tMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n+\t\tbyte[] digest = md.digest(value.getBytes(StandardCharsets.UTF_8));\n+\t\treturn Base64.getUrlEncoder().withoutPadding().encodeToString(digest);\n+\t}\n+\n+\tprivate static String computeSHA256(PublicKey publicKey) throws Exception {\n+\t\tMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n+\t\tbyte[] digest = md.digest(publicKey.getEncoded());\n+\t\treturn Base64.getUrlEncoder().withoutPadding().encodeToString(digest);\n+\t}\n+\n+\t@Configuration\n+\t@EnableWebSecurity\n+\t@EnableWebMvc\n+\tstatic class SecurityConfig {\n+\n+\t\t@Bean\n+\t\tSecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n+\t\t\t// @formatter:off\n+\t\t\thttp\n+\t\t\t\t.authorizeHttpRequests((authorize) ->\n+\t\t\t\t\tauthorize\n+\t\t\t\t\t\t.requestMatchers(\"/resource1\").hasAnyAuthority(\"SCOPE_resource1.read\", \"SCOPE_resource1.write\")\n+\t\t\t\t\t\t.requestMatchers(\"/resource2\").hasAnyAuthority(\"SCOPE_resource2.read\", \"SCOPE_resource2.write\")\n+\t\t\t\t\t\t.anyRequest().authenticated()\n+\t\t\t\t)\n+\t\t\t\t.oauth2ResourceServer((oauth2ResourceServer) ->\n+\t\t\t\t\toauth2ResourceServer\n+\t\t\t\t\t\t.jwt(Customizer.withDefaults()));\n+\t\t\t// @formatter:on\n+\t\t\treturn http.build();\n+\t\t}\n+\n+\t\t@Bean\n+\t\tNimbusJwtDecoder jwtDecoder() {\n+\t\t\treturn NimbusJwtDecoder.withPublicKey(PROVIDER_RSA_PUBLIC_KEY).build();\n+\t\t}\n+\n+\t}\n+\n+\t@RestController\n+\tstatic class ResourceEndpoints {\n+\n+\t\t@RequestMapping(value = \"/resource1\", method = { RequestMethod.GET, RequestMethod.POST })\n+\t\tString resource1() {\n+\t\t\treturn \"resource1\";\n+\t\t}\n+\n+\t\t@RequestMapping(value = \"/resource2\", method = { RequestMethod.GET, RequestMethod.POST })\n+\t\tString resource2() {\n+\t\t\treturn \"resource2\";\n+\t\t}\n+\n+\t}\n+\n+}\n\ndiff --git a/oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/DPoPProofJwtDecoderFactoryTests.java b/oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/DPoPProofJwtDecoderFactoryTests.java\nnew file mode 100644\nindex 00000000000..6f107fa6757\n--- /dev/null\n+++ b/oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/DPoPProofJwtDecoderFactoryTests.java\n@@ -0,0 +1,451 @@\n+/*\n+ * Copyright 2002-2025 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.security.oauth2.jwt;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import com.nimbusds.jose.jwk.RSAKey;\n+import com.nimbusds.jose.jwk.source.JWKSource;\n+import com.nimbusds.jose.proc.SecurityContext;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import org.springframework.security.oauth2.jose.TestJwks;\n+import org.springframework.security.oauth2.jose.jws.SignatureAlgorithm;\n+\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.BDDMockito.given;\n+import static org.mockito.Mockito.mock;\n+\n+/**\n+ * Tests for {@link DPoPProofJwtDecoderFactory}.\n+ *\n+ * @author Joe Grandja\n+ */\n+public class DPoPProofJwtDecoderFactoryTests {\n+\n+\tprivate JWKSource<SecurityContext> jwkSource;\n+\n+\tprivate NimbusJwtEncoder jwtEncoder;\n+\n+\tprivate DPoPProofJwtDecoderFactory jwtDecoderFactory = new DPoPProofJwtDecoderFactory();\n+\n+\t@BeforeEach\n+\tpublic void setUp() {\n+\t\tthis.jwkSource = mock(JWKSource.class);\n+\t\tthis.jwtEncoder = new NimbusJwtEncoder(this.jwkSource);\n+\t}\n+\n+\t@Test\n+\tpublic void setJwtValidatorFactoryWhenNullThenThrowIllegalArgumentException() {\n+\t\tassertThatIllegalArgumentException().isThrownBy(() -> this.jwtDecoderFactory.setJwtValidatorFactory(null))\n+\t\t\t.withMessage(\"jwtValidatorFactory cannot be null\");\n+\t}\n+\n+\t@Test\n+\tpublic void createDecoderWhenContextNullThenThrowIllegalArgumentException() {\n+\t\tassertThatIllegalArgumentException().isThrownBy(() -> this.jwtDecoderFactory.createDecoder(null))\n+\t\t\t.withMessage(\"dPoPProofContext cannot be null\");\n+\t}\n+\n+\t@Test\n+\tpublic void decodeWhenJoseTypeInvalidThenThrowBadJwtException() throws Exception {\n+\t\tRSAKey rsaJwk = TestJwks.DEFAULT_RSA_JWK;\n+\t\tgiven(this.jwkSource.get(any(), any())).willReturn(Collections.singletonList(rsaJwk));\n+\n+\t\tString method = \"GET\";\n+\t\tString targetUri = \"https://resource1\";\n+\n+\t\t// @formatter:off\n+\t\tMap<String, Object> publicJwk = rsaJwk.toPublicJWK().toJSONObject();\n+\t\tJwsHeader jwsHeader = JwsHeader.with(SignatureAlgorithm.RS256)\n+\t\t\t\t.type(\"invalid-type\")\n+\t\t\t\t.jwk(publicJwk)\n+\t\t\t\t.build();\n+\t\tJwtClaimsSet claims = JwtClaimsSet.builder()\n+\t\t\t\t.issuedAt(Instant.now())\n+\t\t\t\t.claim(\"htm\", method)\n+\t\t\t\t.claim(\"htu\", targetUri)\n+\t\t\t\t.id(UUID.randomUUID().toString())\n+\t\t\t\t.build();\n+\t\t// @formatter:on\n+\n+\t\tJwt dPoPProof = this.jwtEncoder.encode(JwtEncoderParameters.from(jwsHeader, claims));\n+\n+\t\t// @formatter:off\n+\t\tDPoPProofContext dPoPProofContext = DPoPProofContext.withDPoPProof(dPoPProof.getTokenValue())\n+\t\t\t\t.method(method)\n+\t\t\t\t.targetUri(targetUri)\n+\t\t\t\t.build();\n+\t\t// @formatter:on\n+\n+\t\tJwtDecoder jwtDecoder = this.jwtDecoderFactory.createDecoder(dPoPProofContext);\n+\n+\t\tassertThatExceptionOfType(BadJwtException.class)\n+\t\t\t.isThrownBy(() -> jwtDecoder.decode(dPoPProofContext.getDPoPProof()))\n+\t\t\t.withMessageContaining(\"JOSE header typ (type) invalid-type not allowed\");\n+\t}\n+\n+\t@Test\n+\tpublic void decodeWhenJwkMissingThenThrowBadJwtException() throws Exception {\n+\t\tRSAKey rsaJwk = TestJwks.DEFAULT_RSA_JWK;\n+\t\tgiven(this.jwkSource.get(any(), any())).willReturn(Collections.singletonList(rsaJwk));\n+\n+\t\tString method = \"GET\";\n+\t\tString targetUri = \"https://resource1\";\n+\n+\t\t// @formatter:off\n+\t\tMap<String, Object> publicJwk = rsaJwk.toPublicJWK().toJSONObject();\n+\t\tJwsHeader jwsHeader = JwsHeader.with(SignatureAlgorithm.RS256)\n+\t\t\t\t.type(\"dpop+jwt\")\n+//\t\t\t\t.jwk(publicJwk)\n+\t\t\t\t.build();\n+\t\tJwtClaimsSet claims = JwtClaimsSet.builder()\n+\t\t\t\t.issuedAt(Instant.now())\n+\t\t\t\t.claim(\"htm\", method)\n+\t\t\t\t.claim(\"htu\", targetUri)\n+\t\t\t\t.id(UUID.randomUUID().toString())\n+\t\t\t\t.build();\n+\t\t// @formatter:on\n+\n+\t\tJwt dPoPProof = this.jwtEncoder.encode(JwtEncoderParameters.from(jwsHeader, claims));\n+\n+\t\t// @formatter:off\n+\t\tDPoPProofContext dPoPProofContext = DPoPProofContext.withDPoPProof(dPoPProof.getTokenValue())\n+\t\t\t\t.method(method)\n+\t\t\t\t.targetUri(targetUri)\n+\t\t\t\t.build();\n+\t\t// @formatter:on\n+\n+\t\tJwtDecoder jwtDecoder = this.jwtDecoderFactory.createDecoder(dPoPProofContext);\n+\n+\t\tassertThatExceptionOfType(BadJwtException.class)\n+\t\t\t.isThrownBy(() -> jwtDecoder.decode(dPoPProofContext.getDPoPProof()))\n+\t\t\t.withMessageContaining(\"Missing jwk parameter in JWS Header.\");\n+\t}\n+\n+\t@Test\n+\tpublic void decodeWhenMethodInvalidThenThrowBadJwtException() throws Exception {\n+\t\tRSAKey rsaJwk = TestJwks.DEFAULT_RSA_JWK;\n+\t\tgiven(this.jwkSource.get(any(), any())).willReturn(Collections.singletonList(rsaJwk));\n+\n+\t\tString method = \"GET\";\n+\t\tString targetUri = \"https://resource1\";\n+\n+\t\t// @formatter:off\n+\t\tMap<String, Object> publicJwk = rsaJwk.toPublicJWK().toJSONObject();\n+\t\tJwsHeader jwsHeader = JwsHeader.with(SignatureAlgorithm.RS256)\n+\t\t\t\t.type(\"dpop+jwt\")\n+\t\t\t\t.jwk(publicJwk)\n+\t\t\t\t.build();\n+\t\tJwtClaimsSet claims = JwtClaimsSet.builder()\n+\t\t\t\t.issuedAt(Instant.now())\n+\t\t\t\t.claim(\"htm\", method)\n+\t\t\t\t.claim(\"htu\", targetUri)\n+\t\t\t\t.id(UUID.randomUUID().toString())\n+\t\t\t\t.build();\n+\t\t// @formatter:on\n+\n+\t\tJwt dPoPProof = this.jwtEncoder.encode(JwtEncoderParameters.from(jwsHeader, claims));\n+\n+\t\t// @formatter:off\n+\t\tDPoPProofContext dPoPProofContext = DPoPProofContext.withDPoPProof(dPoPProof.getTokenValue())\n+\t\t\t\t.method(\"POST\")\t\t// Mismatch\n+\t\t\t\t.targetUri(targetUri)\n+\t\t\t\t.build();\n+\t\t// @formatter:on\n+\n+\t\tJwtDecoder jwtDecoder = this.jwtDecoderFactory.createDecoder(dPoPProofContext);\n+\n+\t\tassertThatExceptionOfType(BadJwtException.class)\n+\t\t\t.isThrownBy(() -> jwtDecoder.decode(dPoPProofContext.getDPoPProof()))\n+\t\t\t.withMessageContaining(\"The htm claim is not valid\");\n+\t}\n+\n+\t@Test\n+\tpublic void decodeWhenTargetUriInvalidThenThrowBadJwtException() throws Exception {\n+\t\tRSAKey rsaJwk = TestJwks.DEFAULT_RSA_JWK;\n+\t\tgiven(this.jwkSource.get(any(), any())).willReturn(Collections.singletonList(rsaJwk));\n+\n+\t\tString method = \"GET\";\n+\t\tString targetUri = \"https://resource1\";\n+\n+\t\t// @formatter:off\n+\t\tMap<String, Object> publicJwk = rsaJwk.toPublicJWK().toJSONObject();\n+\t\tJwsHeader jwsHeader = JwsHeader.with(SignatureAlgorithm.RS256)\n+\t\t\t\t.type(\"dpop+jwt\")\n+\t\t\t\t.jwk(publicJwk)\n+\t\t\t\t.build();\n+\t\tJwtClaimsSet claims = JwtClaimsSet.builder()\n+\t\t\t\t.issuedAt(Instant.now())\n+\t\t\t\t.claim(\"htm\", method)\n+\t\t\t\t.claim(\"htu\", targetUri)\n+\t\t\t\t.id(UUID.randomUUID().toString())\n+\t\t\t\t.build();\n+\t\t// @formatter:on\n+\n+\t\tJwt dPoPProof = this.jwtEncoder.encode(JwtEncoderParameters.from(jwsHeader, claims));\n+\n+\t\t// @formatter:off\n+\t\tDPoPProofContext dPoPProofContext = DPoPProofContext.withDPoPProof(dPoPProof.getTokenValue())\n+\t\t\t\t.method(method)\n+\t\t\t\t.targetUri(\"https://resource2\")\t\t// Mismatch\n+\t\t\t\t.build();\n+\t\t// @formatter:on\n+\n+\t\tJwtDecoder jwtDecoder = this.jwtDecoderFactory.createDecoder(dPoPProofContext);\n+\n+\t\tassertThatExceptionOfType(BadJwtException.class)\n+\t\t\t.isThrownBy(() -> jwtDecoder.decode(dPoPProofContext.getDPoPProof()))\n+\t\t\t.withMessageContaining(\"The htu claim is not valid\");\n+\t}\n+\n+\t@Test\n+\tpublic void decodeWhenJtiMissingThenThrowBadJwtException() throws Exception {\n+\t\tRSAKey rsaJwk = TestJwks.DEFAULT_RSA_JWK;\n+\t\tgiven(this.jwkSource.get(any(), any())).willReturn(Collections.singletonList(rsaJwk));\n+\n+\t\tString method = \"GET\";\n+\t\tString targetUri = \"https://resource1\";\n+\n+\t\t// @formatter:off\n+\t\tMap<String, Object> publicJwk = rsaJwk.toPublicJWK().toJSONObject();\n+\t\tJwsHeader jwsHeader = JwsHeader.with(SignatureAlgorithm.RS256)\n+\t\t\t\t.type(\"dpop+jwt\")\n+\t\t\t\t.jwk(publicJwk)\n+\t\t\t\t.build();\n+\t\tJwtClaimsSet claims = JwtClaimsSet.builder()\n+\t\t\t\t.issuedAt(Instant.now())\n+\t\t\t\t.claim(\"htm\", method)\n+\t\t\t\t.claim(\"htu\", targetUri)\n+//\t\t\t\t.id(UUID.randomUUID().toString())\n+\t\t\t\t.build();\n+\t\t// @formatter:on\n+\n+\t\tJwt dPoPProof = this.jwtEncoder.encode(JwtEncoderParameters.from(jwsHeader, claims));\n+\n+\t\t// @formatter:off\n+\t\tDPoPProofContext dPoPProofContext = DPoPProofContext.withDPoPProof(dPoPProof.getTokenValue())\n+\t\t\t\t.method(method)\n+\t\t\t\t.targetUri(targetUri)\n+\t\t\t\t.build();\n+\t\t// @formatter:on\n+\n+\t\tJwtDecoder jwtDecoder = this.jwtDecoderFactory.createDecoder(dPoPProofContext);\n+\n+\t\tassertThatExceptionOfType(BadJwtException.class)\n+\t\t\t.isThrownBy(() -> jwtDecoder.decode(dPoPProofContext.getDPoPProof()))\n+\t\t\t.withMessageContaining(\"jti claim is required\");\n+\t}\n+\n+\t@Test\n+\tpublic void decodeWhenJtiAlreadyUsedThenThrowBadJwtException() throws Exception {\n+\t\tRSAKey rsaJwk = TestJwks.DEFAULT_RSA_JWK;\n+\t\tgiven(this.jwkSource.get(any(), any())).willReturn(Collections.singletonList(rsaJwk));\n+\n+\t\tString method = \"GET\";\n+\t\tString targetUri = \"https://resource1\";\n+\n+\t\t// @formatter:off\n+\t\tMap<String, Object> publicJwk = rsaJwk.toPublicJWK().toJSONObject();\n+\t\tJwsHeader jwsHeader = JwsHeader.with(SignatureAlgorithm.RS256)\n+\t\t\t\t.type(\"dpop+jwt\")\n+\t\t\t\t.jwk(publicJwk)\n+\t\t\t\t.build();\n+\t\tJwtClaimsSet claims = JwtClaimsSet.builder()\n+\t\t\t\t.issuedAt(Instant.now())\n+\t\t\t\t.claim(\"htm\", method)\n+\t\t\t\t.claim(\"htu\", targetUri)\n+\t\t\t\t.id(UUID.randomUUID().toString())\n+\t\t\t\t.build();\n+\t\t// @formatter:on\n+\n+\t\tJwt dPoPProof = this.jwtEncoder.encode(JwtEncoderParameters.from(jwsHeader, claims));\n+\n+\t\t// @formatter:off\n+\t\tDPoPProofContext dPoPProofContext = DPoPProofContext.withDPoPProof(dPoPProof.getTokenValue())\n+\t\t\t\t.method(method)\n+\t\t\t\t.targetUri(targetUri)\n+\t\t\t\t.build();\n+\t\t// @formatter:on\n+\n+\t\tJwtDecoder jwtDecoder = this.jwtDecoderFactory.createDecoder(dPoPProofContext);\n+\n+\t\tjwtDecoder.decode(dPoPProofContext.getDPoPProof());\n+\t\tassertThatExceptionOfType(BadJwtException.class)\n+\t\t\t.isThrownBy(() -> jwtDecoder.decode(dPoPProofContext.getDPoPProof()))\n+\t\t\t.withMessageContaining(\"jti claim is invalid\");\n+\t}\n+\n+\t@Test\n+\tpublic void decodeWhenIatMissingThenThrowBadJwtException() throws Exception {\n+\t\tRSAKey rsaJwk = TestJwks.DEFAULT_RSA_JWK;\n+\t\tgiven(this.jwkSource.get(any(), any())).willReturn(Collections.singletonList(rsaJwk));\n+\n+\t\tString method = \"GET\";\n+\t\tString targetUri = \"https://resource1\";\n+\n+\t\t// @formatter:off\n+\t\tMap<String, Object> publicJwk = rsaJwk.toPublicJWK().toJSONObject();\n+\t\tJwsHeader jwsHeader = JwsHeader.with(SignatureAlgorithm.RS256)\n+\t\t\t\t.type(\"dpop+jwt\")\n+\t\t\t\t.jwk(publicJwk)\n+\t\t\t\t.build();\n+\t\tJwtClaimsSet claims = JwtClaimsSet.builder()\n+//\t\t\t\t.issuedAt(Instant.now())\n+\t\t\t\t.claim(\"htm\", method)\n+\t\t\t\t.claim(\"htu\", targetUri)\n+\t\t\t\t.id(UUID.randomUUID().toString())\n+\t\t\t\t.build();\n+\t\t// @formatter:on\n+\n+\t\tJwt dPoPProof = this.jwtEncoder.encode(JwtEncoderParameters.from(jwsHeader, claims));\n+\n+\t\t// @formatter:off\n+\t\tDPoPProofContext dPoPProofContext = DPoPProofContext.withDPoPProof(dPoPProof.getTokenValue())\n+\t\t\t\t.method(method)\n+\t\t\t\t.targetUri(targetUri)\n+\t\t\t\t.build();\n+\t\t// @formatter:on\n+\n+\t\tJwtDecoder jwtDecoder = this.jwtDecoderFactory.createDecoder(dPoPProofContext);\n+\n+\t\tassertThatExceptionOfType(BadJwtException.class)\n+\t\t\t.isThrownBy(() -> jwtDecoder.decode(dPoPProofContext.getDPoPProof()))\n+\t\t\t.withMessageContaining(\"iat claim is required\");\n+\t}\n+\n+\t@Test\n+\tpublic void decodeWhenIatBeforeTimeWindowThenThrowBadJwtException() throws Exception {\n+\t\tRSAKey rsaJwk = TestJwks.DEFAULT_RSA_JWK;\n+\t\tgiven(this.jwkSource.get(any(), any())).willReturn(Collections.singletonList(rsaJwk));\n+\n+\t\tString method = \"GET\";\n+\t\tString targetUri = \"https://resource1\";\n+\n+\t\t// @formatter:off\n+\t\tMap<String, Object> publicJwk = rsaJwk.toPublicJWK().toJSONObject();\n+\t\tJwsHeader jwsHeader = JwsHeader.with(SignatureAlgorithm.RS256)\n+\t\t\t\t.type(\"dpop+jwt\")\n+\t\t\t\t.jwk(publicJwk)\n+\t\t\t\t.build();\n+\t\tInstant issuedAt = Instant.now().minus(Duration.ofSeconds(65));\t\t// now minus 65 seconds\n+\t\tJwtClaimsSet claims = JwtClaimsSet.builder()\n+\t\t\t\t.issuedAt(issuedAt)\n+\t\t\t\t.claim(\"htm\", method)\n+\t\t\t\t.claim(\"htu\", targetUri)\n+\t\t\t\t.id(UUID.randomUUID().toString())\n+\t\t\t\t.build();\n+\t\t// @formatter:on\n+\n+\t\tJwt dPoPProof = this.jwtEncoder.encode(JwtEncoderParameters.from(jwsHeader, claims));\n+\n+\t\t// @formatter:off\n+\t\tDPoPProofContext dPoPProofContext = DPoPProofContext.withDPoPProof(dPoPProof.getTokenValue())\n+\t\t\t\t.method(method)\n+\t\t\t\t.targetUri(targetUri)\n+\t\t\t\t.build();\n+\t\t// @formatter:on\n+\n+\t\tJwtDecoder jwtDecoder = this.jwtDecoderFactory.createDecoder(dPoPProofContext);\n+\n+\t\tassertThatExceptionOfType(BadJwtException.class)\n+\t\t\t.isThrownBy(() -> jwtDecoder.decode(dPoPProofContext.getDPoPProof()))\n+\t\t\t.withMessageContaining(\"iat claim is invalid\");\n+\t}\n+\n+\t@Test\n+\tpublic void decodeWhenIatAfterTimeWindowThenThrowBadJwtException() throws Exception {\n+\t\tRSAKey rsaJwk = TestJwks.DEFAULT_RSA_JWK;\n+\t\tgiven(this.jwkSource.get(any(), any())).willReturn(Collections.singletonList(rsaJwk));\n+\n+\t\tString method = \"GET\";\n+\t\tString targetUri = \"https://resource1\";\n+\n+\t\t// @formatter:off\n+\t\tMap<String, Object> publicJwk = rsaJwk.toPublicJWK().toJSONObject();\n+\t\tJwsHeader jwsHeader = JwsHeader.with(SignatureAlgorithm.RS256)\n+\t\t\t\t.type(\"dpop+jwt\")\n+\t\t\t\t.jwk(publicJwk)\n+\t\t\t\t.build();\n+\t\tInstant issuedAt = Instant.now().plus(Duration.ofSeconds(65));\t\t// now plus 65 seconds\n+\t\tJwtClaimsSet claims = JwtClaimsSet.builder()\n+\t\t\t\t.issuedAt(issuedAt)\n+\t\t\t\t.claim(\"htm\", method)\n+\t\t\t\t.claim(\"htu\", targetUri)\n+\t\t\t\t.id(UUID.randomUUID().toString())\n+\t\t\t\t.build();\n+\t\t// @formatter:on\n+\n+\t\tJwt dPoPProof = this.jwtEncoder.encode(JwtEncoderParameters.from(jwsHeader, claims));\n+\n+\t\t// @formatter:off\n+\t\tDPoPProofContext dPoPProofContext = DPoPProofContext.withDPoPProof(dPoPProof.getTokenValue())\n+\t\t\t\t.method(method)\n+\t\t\t\t.targetUri(targetUri)\n+\t\t\t\t.build();\n+\t\t// @formatter:on\n+\n+\t\tJwtDecoder jwtDecoder = this.jwtDecoderFactory.createDecoder(dPoPProofContext);\n+\n+\t\tassertThatExceptionOfType(BadJwtException.class)\n+\t\t\t.isThrownBy(() -> jwtDecoder.decode(dPoPProofContext.getDPoPProof()))\n+\t\t\t.withMessageContaining(\"iat claim is invalid\");\n+\t}\n+\n+\t@Test\n+\tpublic void decodeWhenDPoPProofValidThenDecoded() throws Exception {\n+\t\tRSAKey rsaJwk = TestJwks.DEFAULT_RSA_JWK;\n+\t\tgiven(this.jwkSource.get(any(), any())).willReturn(Collections.singletonList(rsaJwk));\n+\n+\t\tString method = \"GET\";\n+\t\tString targetUri = \"https://resource1\";\n+\n+\t\t// @formatter:off\n+\t\tMap<String, Object> publicJwk = rsaJwk.toPublicJWK().toJSONObject();\n+\t\tJwsHeader jwsHeader = JwsHeader.with(SignatureAlgorithm.RS256)\n+\t\t\t\t.type(\"dpop+jwt\")\n+\t\t\t\t.jwk(publicJwk)\n+\t\t\t\t.build();\n+\t\tJwtClaimsSet claims = JwtClaimsSet.builder()\n+\t\t\t\t.issuedAt(Instant.now())\n+\t\t\t\t.claim(\"htm\", method)\n+\t\t\t\t.claim(\"htu\", targetUri)\n+\t\t\t\t.id(UUID.randomUUID().toString())\n+\t\t\t\t.build();\n+\t\t// @formatter:on\n+\n+\t\tJwt dPoPProof = this.jwtEncoder.encode(JwtEncoderParameters.from(jwsHeader, claims));\n+\n+\t\t// @formatter:off\n+\t\tDPoPProofContext dPoPProofContext = DPoPProofContext.withDPoPProof(dPoPProof.getTokenValue())\n+\t\t\t\t.method(method)\n+\t\t\t\t.targetUri(targetUri)\n+\t\t\t\t.build();\n+\t\t// @formatter:on\n+\n+\t\tJwtDecoder jwtDecoder = this.jwtDecoderFactory.createDecoder(dPoPProofContext);\n+\t\tjwtDecoder.decode(dPoPProof.getTokenValue());\n+\t}\n+\n+}\n\ndiff --git a/oauth2/oauth2-resource-server/src/test/java/org/springframework/security/oauth2/server/resource/authentication/DPoPAuthenticationProviderTests.java b/oauth2/oauth2-resource-server/src/test/java/org/springframework/security/oauth2/server/resource/authentication/DPoPAuthenticationProviderTests.java\nnew file mode 100644\nindex 00000000000..08aec389000\n--- /dev/null\n+++ b/oauth2/oauth2-resource-server/src/test/java/org/springframework/security/oauth2/server/resource/authentication/DPoPAuthenticationProviderTests.java\n@@ -0,0 +1,331 @@\n+/*\n+ * Copyright 2002-2025 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.security.oauth2.server.resource.authentication;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.PublicKey;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import com.nimbusds.jose.jwk.JWKSet;\n+import com.nimbusds.jose.jwk.source.JWKSource;\n+import com.nimbusds.jose.proc.SecurityContext;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import org.springframework.security.authentication.AuthenticationManager;\n+import org.springframework.security.oauth2.core.OAuth2AuthenticationException;\n+import org.springframework.security.oauth2.core.OAuth2ErrorCodes;\n+import org.springframework.security.oauth2.jose.TestJwks;\n+import org.springframework.security.oauth2.jose.TestKeys;\n+import org.springframework.security.oauth2.jose.jws.SignatureAlgorithm;\n+import org.springframework.security.oauth2.jwt.JwsHeader;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.jwt.JwtClaimsSet;\n+import org.springframework.security.oauth2.jwt.JwtEncoderParameters;\n+import org.springframework.security.oauth2.jwt.NimbusJwtEncoder;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.BDDMockito.given;\n+import static org.mockito.Mockito.mock;\n+\n+/**\n+ * Tests for {@link DPoPAuthenticationProvider}.\n+ *\n+ * @author Joe Grandja\n+ */\n+public class DPoPAuthenticationProviderTests {\n+\n+\tprivate NimbusJwtEncoder accessTokenJwtEncoder;\n+\n+\tprivate NimbusJwtEncoder dPoPProofJwtEncoder;\n+\n+\tprivate AuthenticationManager tokenAuthenticationManager;\n+\n+\tprivate DPoPAuthenticationProvider authenticationProvider;\n+\n+\t@BeforeEach\n+\tpublic void setUp() {\n+\t\tJWKSource<SecurityContext> jwkSource = (jwkSelector, securityContext) -> jwkSelector\n+\t\t\t.select(new JWKSet(TestJwks.DEFAULT_EC_JWK));\n+\t\tthis.accessTokenJwtEncoder = new NimbusJwtEncoder(jwkSource);\n+\t\tjwkSource = (jwkSelector, securityContext) -> jwkSelector.select(new JWKSet(TestJwks.DEFAULT_RSA_JWK));\n+\t\tthis.dPoPProofJwtEncoder = new NimbusJwtEncoder(jwkSource);\n+\t\tthis.tokenAuthenticationManager = mock(AuthenticationManager.class);\n+\t\tthis.authenticationProvider = new DPoPAuthenticationProvider(this.tokenAuthenticationManager);\n+\t}\n+\n+\t@Test\n+\tpublic void constructorWhenTokenAuthenticationManagerNullThenThrowIllegalArgumentException() {\n+\t\tassertThatIllegalArgumentException().isThrownBy(() -> new DPoPAuthenticationProvider(null))\n+\t\t\t.withMessage(\"tokenAuthenticationManager cannot be null\");\n+\t}\n+\n+\t@Test\n+\tpublic void supportsWhenDPoPAuthenticationTokenThenReturnsTrue() {\n+\t\tassertThat(this.authenticationProvider.supports(DPoPAuthenticationToken.class)).isTrue();\n+\t}\n+\n+\t@Test\n+\tpublic void setDPoPProofVerifierFactoryWhenNullThenThrowIllegalArgumentException() {\n+\t\tassertThatIllegalArgumentException()\n+\t\t\t.isThrownBy(() -> this.authenticationProvider.setDPoPProofVerifierFactory(null))\n+\t\t\t.withMessage(\"dPoPProofVerifierFactory cannot be null\");\n+\t}\n+\n+\t@Test\n+\tpublic void authenticateWhenUnableToAuthenticateAccessTokenThenThrowOAuth2AuthenticationException() {\n+\t\tDPoPAuthenticationToken dPoPAuthenticationToken = new DPoPAuthenticationToken(\"access-token\", \"dpop-proof\",\n+\t\t\t\t\"GET\", \"https://resource1\");\n+\t\tassertThatExceptionOfType(OAuth2AuthenticationException.class)\n+\t\t\t.isThrownBy(() -> this.authenticationProvider.authenticate(dPoPAuthenticationToken))\n+\t\t\t.satisfies((ex) -> {\n+\t\t\t\tassertThat(ex.getError().getErrorCode()).isEqualTo(OAuth2ErrorCodes.INVALID_TOKEN);\n+\t\t\t\tassertThat(ex.getError().getDescription())\n+\t\t\t\t\t.isEqualTo(\"Unable to authenticate the DPoP-bound access token.\");\n+\t\t\t});\n+\t}\n+\n+\t@Test\n+\tpublic void authenticateWhenAthMissingThenThrowOAuth2AuthenticationException() {\n+\t\tJwt accessToken = generateAccessToken();\n+\t\tJwtAuthenticationToken jwtAuthenticationToken = new JwtAuthenticationToken(accessToken);\n+\t\tgiven(this.tokenAuthenticationManager.authenticate(any())).willReturn(jwtAuthenticationToken);\n+\n+\t\tString method = \"GET\";\n+\t\tString resourceUri = \"https://resource1\";\n+\n+\t\t// @formatter:off\n+\t\tMap<String, Object> publicJwk = TestJwks.DEFAULT_RSA_JWK.toPublicJWK().toJSONObject();\n+\t\tJwsHeader jwsHeader = JwsHeader.with(SignatureAlgorithm.RS256)\n+\t\t\t\t.type(\"dpop+jwt\")\n+\t\t\t\t.jwk(publicJwk)\n+\t\t\t\t.build();\n+\t\tJwtClaimsSet claims = JwtClaimsSet.builder()\n+\t\t\t\t.issuedAt(Instant.now())\n+\t\t\t\t.claim(\"htm\", method)\n+\t\t\t\t.claim(\"htu\", resourceUri)\n+//\t\t\t\t.claim(\"ath\", computeSHA256(accessToken.getTokenValue()))\n+\t\t\t\t.id(UUID.randomUUID().toString())\n+\t\t\t\t.build();\n+\t\t// @formatter:on\n+\n+\t\tJwt dPoPProof = this.dPoPProofJwtEncoder.encode(JwtEncoderParameters.from(jwsHeader, claims));\n+\n+\t\tDPoPAuthenticationToken dPoPAuthenticationToken = new DPoPAuthenticationToken(accessToken.getTokenValue(),\n+\t\t\t\tdPoPProof.getTokenValue(), method, resourceUri);\n+\t\tassertThatExceptionOfType(OAuth2AuthenticationException.class)\n+\t\t\t.isThrownBy(() -> this.authenticationProvider.authenticate(dPoPAuthenticationToken))\n+\t\t\t.satisfies((ex) -> {\n+\t\t\t\tassertThat(ex.getError().getErrorCode()).isEqualTo(OAuth2ErrorCodes.INVALID_DPOP_PROOF);\n+\t\t\t\tassertThat(ex.getMessage()).contains(\"ath claim is required\");\n+\t\t\t});\n+\t}\n+\n+\t@Test\n+\tpublic void authenticateWhenAthDoesNotMatchThenThrowOAuth2AuthenticationException() throws Exception {\n+\t\tJwt accessToken = generateAccessToken();\n+\t\tJwtAuthenticationToken jwtAuthenticationToken = new JwtAuthenticationToken(accessToken);\n+\t\tgiven(this.tokenAuthenticationManager.authenticate(any())).willReturn(jwtAuthenticationToken);\n+\n+\t\tString method = \"GET\";\n+\t\tString resourceUri = \"https://resource1\";\n+\n+\t\t// @formatter:off\n+\t\tMap<String, Object> publicJwk = TestJwks.DEFAULT_RSA_JWK.toPublicJWK().toJSONObject();\n+\t\tJwsHeader jwsHeader = JwsHeader.with(SignatureAlgorithm.RS256)\n+\t\t\t\t.type(\"dpop+jwt\")\n+\t\t\t\t.jwk(publicJwk)\n+\t\t\t\t.build();\n+\t\tJwtClaimsSet claims = JwtClaimsSet.builder()\n+\t\t\t\t.issuedAt(Instant.now())\n+\t\t\t\t.claim(\"htm\", method)\n+\t\t\t\t.claim(\"htu\", resourceUri)\n+\t\t\t\t.claim(\"ath\", computeSHA256(accessToken.getTokenValue()) + \"-mismatch\")\n+\t\t\t\t.id(UUID.randomUUID().toString())\n+\t\t\t\t.build();\n+\t\t// @formatter:on\n+\n+\t\tJwt dPoPProof = this.dPoPProofJwtEncoder.encode(JwtEncoderParameters.from(jwsHeader, claims));\n+\n+\t\tDPoPAuthenticationToken dPoPAuthenticationToken = new DPoPAuthenticationToken(accessToken.getTokenValue(),\n+\t\t\t\tdPoPProof.getTokenValue(), method, resourceUri);\n+\t\tassertThatExceptionOfType(OAuth2AuthenticationException.class)\n+\t\t\t.isThrownBy(() -> this.authenticationProvider.authenticate(dPoPAuthenticationToken))\n+\t\t\t.satisfies((ex) -> {\n+\t\t\t\tassertThat(ex.getError().getErrorCode()).isEqualTo(OAuth2ErrorCodes.INVALID_DPOP_PROOF);\n+\t\t\t\tassertThat(ex.getMessage()).contains(\"ath claim is invalid\");\n+\t\t\t});\n+\t}\n+\n+\t@Test\n+\tpublic void authenticateWhenJktMissingThenThrowOAuth2AuthenticationException() throws Exception {\n+\t\tJwt accessToken = generateAccessToken(null); // jkt claim is not added\n+\t\tJwtAuthenticationToken jwtAuthenticationToken = new JwtAuthenticationToken(accessToken);\n+\t\tgiven(this.tokenAuthenticationManager.authenticate(any())).willReturn(jwtAuthenticationToken);\n+\n+\t\tString method = \"GET\";\n+\t\tString resourceUri = \"https://resource1\";\n+\n+\t\t// @formatter:off\n+\t\tMap<String, Object> publicJwk = TestJwks.DEFAULT_RSA_JWK.toPublicJWK().toJSONObject();\n+\t\tJwsHeader jwsHeader = JwsHeader.with(SignatureAlgorithm.RS256)\n+\t\t\t\t.type(\"dpop+jwt\")\n+\t\t\t\t.jwk(publicJwk)\n+\t\t\t\t.build();\n+\t\tJwtClaimsSet claims = JwtClaimsSet.builder()\n+\t\t\t\t.issuedAt(Instant.now())\n+\t\t\t\t.claim(\"htm\", method)\n+\t\t\t\t.claim(\"htu\", resourceUri)\n+\t\t\t\t.claim(\"ath\", computeSHA256(accessToken.getTokenValue()))\n+\t\t\t\t.id(UUID.randomUUID().toString())\n+\t\t\t\t.build();\n+\t\t// @formatter:on\n+\n+\t\tJwt dPoPProof = this.dPoPProofJwtEncoder.encode(JwtEncoderParameters.from(jwsHeader, claims));\n+\n+\t\tDPoPAuthenticationToken dPoPAuthenticationToken = new DPoPAuthenticationToken(accessToken.getTokenValue(),\n+\t\t\t\tdPoPProof.getTokenValue(), method, resourceUri);\n+\t\tassertThatExceptionOfType(OAuth2AuthenticationException.class)\n+\t\t\t.isThrownBy(() -> this.authenticationProvider.authenticate(dPoPAuthenticationToken))\n+\t\t\t.satisfies((ex) -> {\n+\t\t\t\tassertThat(ex.getError().getErrorCode()).isEqualTo(OAuth2ErrorCodes.INVALID_DPOP_PROOF);\n+\t\t\t\tassertThat(ex.getMessage()).contains(\"jkt claim is required\");\n+\t\t\t});\n+\t}\n+\n+\t@Test\n+\tpublic void authenticateWhenJktDoesNotMatchThenThrowOAuth2AuthenticationException() throws Exception {\n+\t\t// Use different client public key\n+\t\tJwt accessToken = generateAccessToken(TestKeys.DEFAULT_EC_KEY_PAIR.getPublic());\n+\t\tJwtAuthenticationToken jwtAuthenticationToken = new JwtAuthenticationToken(accessToken);\n+\t\tgiven(this.tokenAuthenticationManager.authenticate(any())).willReturn(jwtAuthenticationToken);\n+\n+\t\tString method = \"GET\";\n+\t\tString resourceUri = \"https://resource1\";\n+\n+\t\t// @formatter:off\n+\t\tMap<String, Object> publicJwk = TestJwks.DEFAULT_RSA_JWK.toPublicJWK().toJSONObject();\n+\t\tJwsHeader jwsHeader = JwsHeader.with(SignatureAlgorithm.RS256)\n+\t\t\t\t.type(\"dpop+jwt\")\n+\t\t\t\t.jwk(publicJwk)\n+\t\t\t\t.build();\n+\t\tJwtClaimsSet claims = JwtClaimsSet.builder()\n+\t\t\t\t.issuedAt(Instant.now())\n+\t\t\t\t.claim(\"htm\", method)\n+\t\t\t\t.claim(\"htu\", resourceUri)\n+\t\t\t\t.claim(\"ath\", computeSHA256(accessToken.getTokenValue()))\n+\t\t\t\t.id(UUID.randomUUID().toString())\n+\t\t\t\t.build();\n+\t\t// @formatter:on\n+\n+\t\tJwt dPoPProof = this.dPoPProofJwtEncoder.encode(JwtEncoderParameters.from(jwsHeader, claims));\n+\n+\t\tDPoPAuthenticationToken dPoPAuthenticationToken = new DPoPAuthenticationToken(accessToken.getTokenValue(),\n+\t\t\t\tdPoPProof.getTokenValue(), method, resourceUri);\n+\t\tassertThatExceptionOfType(OAuth2AuthenticationException.class)\n+\t\t\t.isThrownBy(() -> this.authenticationProvider.authenticate(dPoPAuthenticationToken))\n+\t\t\t.satisfies((ex) -> {\n+\t\t\t\tassertThat(ex.getError().getErrorCode()).isEqualTo(OAuth2ErrorCodes.INVALID_DPOP_PROOF);\n+\t\t\t\tassertThat(ex.getMessage()).contains(\"jkt claim is invalid\");\n+\t\t\t});\n+\t}\n+\n+\t@Test\n+\tpublic void authenticateWhenDPoPProofValidThenSuccess() throws Exception {\n+\t\tJwt accessToken = generateAccessToken();\n+\t\tJwtAuthenticationToken jwtAuthenticationToken = new JwtAuthenticationToken(accessToken);\n+\t\tgiven(this.tokenAuthenticationManager.authenticate(any())).willReturn(jwtAuthenticationToken);\n+\n+\t\tString method = \"GET\";\n+\t\tString resourceUri = \"https://resource1\";\n+\n+\t\t// @formatter:off\n+\t\tMap<String, Object> publicJwk = TestJwks.DEFAULT_RSA_JWK.toPublicJWK().toJSONObject();\n+\t\tJwsHeader jwsHeader = JwsHeader.with(SignatureAlgorithm.RS256)\n+\t\t\t\t.type(\"dpop+jwt\")\n+\t\t\t\t.jwk(publicJwk)\n+\t\t\t\t.build();\n+\t\tJwtClaimsSet claims = JwtClaimsSet.builder()\n+\t\t\t\t.issuedAt(Instant.now())\n+\t\t\t\t.claim(\"htm\", method)\n+\t\t\t\t.claim(\"htu\", resourceUri)\n+\t\t\t\t.claim(\"ath\", computeSHA256(accessToken.getTokenValue()))\n+\t\t\t\t.id(UUID.randomUUID().toString())\n+\t\t\t\t.build();\n+\t\t// @formatter:on\n+\n+\t\tJwt dPoPProof = this.dPoPProofJwtEncoder.encode(JwtEncoderParameters.from(jwsHeader, claims));\n+\n+\t\tDPoPAuthenticationToken dPoPAuthenticationToken = new DPoPAuthenticationToken(accessToken.getTokenValue(),\n+\t\t\t\tdPoPProof.getTokenValue(), method, resourceUri);\n+\t\tassertThat(this.authenticationProvider.authenticate(dPoPAuthenticationToken)).isSameAs(jwtAuthenticationToken);\n+\t}\n+\n+\tprivate Jwt generateAccessToken() {\n+\t\treturn generateAccessToken(TestKeys.DEFAULT_PUBLIC_KEY);\n+\t}\n+\n+\tprivate Jwt generateAccessToken(PublicKey clientPublicKey) {\n+\t\tMap<String, Object> jktClaim = null;\n+\t\tif (clientPublicKey != null) {\n+\t\t\ttry {\n+\t\t\t\tString sha256Thumbprint = computeSHA256(clientPublicKey);\n+\t\t\t\tjktClaim = new HashMap<>();\n+\t\t\t\tjktClaim.put(\"jkt\", sha256Thumbprint);\n+\t\t\t}\n+\t\t\tcatch (Exception ignored) {\n+\t\t\t}\n+\t\t}\n+\t\tJwsHeader jwsHeader = JwsHeader.with(SignatureAlgorithm.ES256).build();\n+\t\tInstant issuedAt = Instant.now();\n+\t\tInstant expiresAt = issuedAt.plus(30, ChronoUnit.MINUTES);\n+\t\t// @formatter:off\n+\t\tJwtClaimsSet.Builder claimsBuilder = JwtClaimsSet.builder()\n+\t\t\t\t.issuer(\"https://provider.com\")\n+\t\t\t\t.subject(\"subject\")\n+\t\t\t\t.issuedAt(issuedAt)\n+\t\t\t\t.expiresAt(expiresAt)\n+\t\t\t\t.id(UUID.randomUUID().toString());\n+\t\tif (jktClaim != null) {\n+\t\t\tclaimsBuilder.claim(\"cnf\", jktClaim);\t// Bind client public key\n+\t\t}\n+\t\t// @formatter:on\n+\t\treturn this.accessTokenJwtEncoder.encode(JwtEncoderParameters.from(jwsHeader, claimsBuilder.build()));\n+\t}\n+\n+\tprivate static String computeSHA256(String value) throws Exception {\n+\t\tMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n+\t\tbyte[] digest = md.digest(value.getBytes(StandardCharsets.UTF_8));\n+\t\treturn Base64.getUrlEncoder().withoutPadding().encodeToString(digest);\n+\t}\n+\n+\tprivate static String computeSHA256(PublicKey publicKey) throws Exception {\n+\t\tMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n+\t\tbyte[] digest = md.digest(publicKey.getEncoded());\n+\t\treturn Base64.getUrlEncoder().withoutPadding().encodeToString(digest);\n+\t}\n+\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "spring-projects__spring-security-16505",
    "pr_id": 16505,
    "issue_id": 16444,
    "repo": "spring-projects/spring-security",
    "problem_statement": "In the UsernamePasswordAuthenticationFilter, the authRequest is added as an attribute to the HttpServletRequest.\n**Expected Behavior**\n\nYou expect to receive username and password in the application/json format and be able to extract them again in the unsuccessHandler.\n\n\nIn traditional HTML forms, the default encoding is x-www-urlencoded, but nowadays, application/json format is more commonly preferred in web development. While it is up to the developer to customize UsernamePasswordAuthenticationFilter to handle application/json format for username and password, an issue arises.\n\nThe HttpServletRequest in application/json format is a consumable stream, meaning once the data is extracted, it cannot be extracted again. This leads to a problem where, in the unsuccessHandler, you are unable to perform subsequent actions (e.g., incrementing account error counts for the username) because the stream has already been consumed.\n\nTo solve this problem, developers may find that completely customizing the filter is inefficient and means they are missing out on useful functionality provided by Spring Security.\n\nTherefore, if authRequest is saved in the HttpServletRequest in UsernamePasswordAuthenticationFilter, it would resolve this issue.\n \n\n**Context**\n\nAfter receiving the login credentials in the application/json format for form login, you'd like to use the username and password in the unsuccessHandler for subsequent processing like error count increments.\n\n\n```java\n\npublic class CustomLoginFailureHandler implements AuthenticationFailureHandler {\n\t\n\t@Override\n\tpublic void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception) throws IOException {\n\t\n\t\tUsernamePasswordAuthenticationToken authRequest = (UsernamePasswordAuthenticationToken) request.getAttribute(\"authRequest\");\n\t\t// For example, you can extract the username using authRequest.getPrincipal() \n\t\t// and increment the account failure count.\n\t\t\n}\n```",
    "issue_word_count": 250,
    "test_files_count": 6,
    "non_test_files_count": 11,
    "pr_changed_files": [
      "core/src/main/java/org/springframework/security/authentication/DelegatingReactiveAuthenticationManager.java",
      "core/src/main/java/org/springframework/security/authentication/ProviderManager.java",
      "core/src/main/java/org/springframework/security/core/AuthenticationException.java",
      "core/src/main/java/org/springframework/security/jackson2/BadCredentialsExceptionMixin.java",
      "core/src/test/java/org/springframework/security/authentication/DelegatingReactiveAuthenticationManagerTests.java",
      "core/src/test/java/org/springframework/security/authentication/ProviderManagerTests.java",
      "etc/checkstyle/checkstyle-suppressions.xml",
      "oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerAuthenticationManagerResolver.java",
      "oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerReactiveAuthenticationManagerResolver.java",
      "oauth2/oauth2-resource-server/src/test/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerAuthenticationManagerResolverTests.java",
      "oauth2/oauth2-resource-server/src/test/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerReactiveAuthenticationManagerResolverTests.java",
      "web/src/main/java/org/springframework/security/web/access/ExceptionTranslationFilter.java",
      "web/src/main/java/org/springframework/security/web/authentication/RequestMatcherDelegatingAuthenticationManagerResolver.java",
      "web/src/main/java/org/springframework/security/web/server/authentication/ServerWebExchangeDelegatingReactiveAuthenticationManagerResolver.java",
      "web/src/main/java/org/springframework/security/web/server/authorization/ExceptionTranslationWebFilter.java",
      "web/src/test/java/org/springframework/security/web/access/ExceptionTranslationFilterTests.java",
      "web/src/test/java/org/springframework/security/web/server/authorization/ExceptionTranslationWebFilterTests.java"
    ],
    "pr_changed_test_files": [
      "core/src/test/java/org/springframework/security/authentication/DelegatingReactiveAuthenticationManagerTests.java",
      "core/src/test/java/org/springframework/security/authentication/ProviderManagerTests.java",
      "oauth2/oauth2-resource-server/src/test/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerAuthenticationManagerResolverTests.java",
      "oauth2/oauth2-resource-server/src/test/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerReactiveAuthenticationManagerResolverTests.java",
      "web/src/test/java/org/springframework/security/web/access/ExceptionTranslationFilterTests.java",
      "web/src/test/java/org/springframework/security/web/server/authorization/ExceptionTranslationWebFilterTests.java"
    ],
    "base_commit": "10ed5009e6f922b993080f2f640abe0eedb64691",
    "head_commit": "659e7d25f49963ac4b2f6f104a8a69032def89d6",
    "repo_url": "https://github.com/spring-projects/spring-security/pull/16505",
    "swe_url": "https://swe-bench-plus.turing.com/repos/spring-projects__spring-security/16505",
    "dockerfile": "",
    "pr_merged_at": "2025-03-22T03:54:32.000Z",
    "patch": "diff --git a/core/src/main/java/org/springframework/security/authentication/DelegatingReactiveAuthenticationManager.java b/core/src/main/java/org/springframework/security/authentication/DelegatingReactiveAuthenticationManager.java\nindex 2fdc2d48c42..399e2aede59 100644\n--- a/core/src/main/java/org/springframework/security/authentication/DelegatingReactiveAuthenticationManager.java\n+++ b/core/src/main/java/org/springframework/security/authentication/DelegatingReactiveAuthenticationManager.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2024 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -26,6 +26,7 @@\n import reactor.core.publisher.Mono;\n \n import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.AuthenticationException;\n import org.springframework.util.Assert;\n \n /**\n@@ -58,6 +59,7 @@ public DelegatingReactiveAuthenticationManager(List<ReactiveAuthenticationManage\n \tpublic Mono<Authentication> authenticate(Authentication authentication) {\n \t\tFlux<ReactiveAuthenticationManager> result = Flux.fromIterable(this.delegates);\n \t\tFunction<ReactiveAuthenticationManager, Mono<Authentication>> logging = (m) -> m.authenticate(authentication)\n+\t\t\t.doOnError(AuthenticationException.class, (ex) -> ex.setAuthenticationRequest(authentication))\n \t\t\t.doOnError(this.logger::debug);\n \n \t\treturn ((this.continueOnError) ? result.concatMapDelayError(logging) : result.concatMap(logging)).next();\n\ndiff --git a/core/src/main/java/org/springframework/security/authentication/ProviderManager.java b/core/src/main/java/org/springframework/security/authentication/ProviderManager.java\nindex 479f99f704e..aa8b82bcd71 100644\n--- a/core/src/main/java/org/springframework/security/authentication/ProviderManager.java\n+++ b/core/src/main/java/org/springframework/security/authentication/ProviderManager.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -202,6 +202,7 @@ public Authentication authenticate(Authentication authentication) throws Authent\n \t\t\t\tthrow ex;\n \t\t\t}\n \t\t\tcatch (AuthenticationException ex) {\n+\t\t\t\tex.setAuthenticationRequest(authentication);\n \t\t\t\tlogger.debug(LogMessage.format(\"Authentication failed with provider %s since %s\",\n \t\t\t\t\t\tprovider.getClass().getSimpleName(), ex.getMessage()));\n \t\t\t\tlastException = ex;\n@@ -265,6 +266,7 @@ public Authentication authenticate(Authentication authentication) throws Authent\n \n \t@SuppressWarnings(\"deprecation\")\n \tprivate void prepareException(AuthenticationException ex, Authentication auth) {\n+\t\tex.setAuthenticationRequest(auth);\n \t\tthis.eventPublisher.publishAuthenticationFailure(ex, auth);\n \t}\n \n\ndiff --git a/core/src/main/java/org/springframework/security/core/AuthenticationException.java b/core/src/main/java/org/springframework/security/core/AuthenticationException.java\nindex 9e1fb756086..8efe1be55f1 100644\n--- a/core/src/main/java/org/springframework/security/core/AuthenticationException.java\n+++ b/core/src/main/java/org/springframework/security/core/AuthenticationException.java\n@@ -18,6 +18,8 @@\n \n import java.io.Serial;\n \n+import org.springframework.util.Assert;\n+\n /**\n  * Abstract superclass for all exceptions related to an {@link Authentication} object\n  * being invalid for whatever reason.\n@@ -29,6 +31,8 @@ public abstract class AuthenticationException extends RuntimeException {\n \t@Serial\n \tprivate static final long serialVersionUID = 2018827803361503060L;\n \n+\tprivate Authentication authenticationRequest;\n+\n \t/**\n \t * Constructs an {@code AuthenticationException} with the specified message and root\n \t * cause.\n@@ -48,4 +52,31 @@ public AuthenticationException(String msg) {\n \t\tsuper(msg);\n \t}\n \n+\t/**\n+\t * Get the {@link Authentication} object representing the failed authentication\n+\t * attempt.\n+\t * <p>\n+\t * This field captures the authentication request that was attempted but ultimately\n+\t * failed, providing critical information for diagnosing the failure and facilitating\n+\t * debugging\n+\t * @since 6.5\n+\t */\n+\tpublic Authentication getAuthenticationRequest() {\n+\t\treturn this.authenticationRequest;\n+\t}\n+\n+\t/**\n+\t * Set the {@link Authentication} object representing the failed authentication\n+\t * attempt.\n+\t * <p>\n+\t * The provided {@code authenticationRequest} should not be null\n+\t * @param authenticationRequest the authentication request associated with the failed\n+\t * authentication attempt\n+\t * @since 6.5\n+\t */\n+\tpublic void setAuthenticationRequest(Authentication authenticationRequest) {\n+\t\tAssert.notNull(authenticationRequest, \"authenticationRequest cannot be null\");\n+\t\tthis.authenticationRequest = authenticationRequest;\n+\t}\n+\n }\n\ndiff --git a/core/src/main/java/org/springframework/security/jackson2/BadCredentialsExceptionMixin.java b/core/src/main/java/org/springframework/security/jackson2/BadCredentialsExceptionMixin.java\nindex 5471374b4d7..aedb7507adf 100644\n--- a/core/src/main/java/org/springframework/security/jackson2/BadCredentialsExceptionMixin.java\n+++ b/core/src/main/java/org/springframework/security/jackson2/BadCredentialsExceptionMixin.java\n@@ -40,7 +40,7 @@\n  * @see CoreJackson2Module\n  */\n @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY)\n-@JsonIgnoreProperties(ignoreUnknown = true, value = { \"cause\", \"stackTrace\" })\n+@JsonIgnoreProperties(ignoreUnknown = true, value = { \"cause\", \"stackTrace\", \"authenticationRequest\" })\n class BadCredentialsExceptionMixin {\n \n \t/**\n\ndiff --git a/etc/checkstyle/checkstyle-suppressions.xml b/etc/checkstyle/checkstyle-suppressions.xml\nindex b368ce84e84..c1c5baf08a3 100644\n--- a/etc/checkstyle/checkstyle-suppressions.xml\n+++ b/etc/checkstyle/checkstyle-suppressions.xml\n@@ -38,6 +38,7 @@\n \t<suppress files=\"AbstractOAuth2AuthorizationGrantRequestEntityConverter\\.java\" checks=\"SpringMethodVisibility\"/>\n \t<suppress files=\"JoseHeader\\.java\" checks=\"SpringMethodVisibility\"/>\n \t<suppress files=\"DefaultLoginPageGeneratingFilterTests\\.java\" checks=\"SpringLeadingWhitespace\"/>\n+\t<suppress files=\"AuthenticationException\\.java\" checks=\"MutableException\"/>\n \n \t<!-- Lambdas that we can't replace with a method reference because a closure is required -->\n \t<suppress files=\"BearerTokenAuthenticationFilter\\.java\" checks=\"SpringLambda\"/>\n\ndiff --git a/oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerAuthenticationManagerResolver.java b/oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerAuthenticationManagerResolver.java\nindex 5d80e981bb0..de1bda32a7c 100644\n--- a/oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerAuthenticationManagerResolver.java\n+++ b/oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerAuthenticationManagerResolver.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -176,9 +176,17 @@ public Authentication authenticate(Authentication authentication) throws Authent\n \t\t\tString issuer = this.issuerConverter.convert(token);\n \t\t\tAuthenticationManager authenticationManager = this.issuerAuthenticationManagerResolver.resolve(issuer);\n \t\t\tif (authenticationManager == null) {\n-\t\t\t\tthrow new InvalidBearerTokenException(\"Invalid issuer\");\n+\t\t\t\tAuthenticationException ex = new InvalidBearerTokenException(\"Invalid issuer\");\n+\t\t\t\tex.setAuthenticationRequest(authentication);\n+\t\t\t\tthrow ex;\n+\t\t\t}\n+\t\t\ttry {\n+\t\t\t\treturn authenticationManager.authenticate(authentication);\n+\t\t\t}\n+\t\t\tcatch (AuthenticationException ex) {\n+\t\t\t\tex.setAuthenticationRequest(authentication);\n+\t\t\t\tthrow ex;\n \t\t\t}\n-\t\t\treturn authenticationManager.authenticate(authentication);\n \t\t}\n \n \t}\n@@ -194,10 +202,14 @@ public String convert(@NonNull BearerTokenAuthenticationToken authentication) {\n \t\t\t\t\treturn issuer;\n \t\t\t\t}\n \t\t\t}\n-\t\t\tcatch (Exception ex) {\n-\t\t\t\tthrow new InvalidBearerTokenException(ex.getMessage(), ex);\n+\t\t\tcatch (Exception cause) {\n+\t\t\t\tAuthenticationException ex = new InvalidBearerTokenException(cause.getMessage(), cause);\n+\t\t\t\tex.setAuthenticationRequest(authentication);\n+\t\t\t\tthrow ex;\n \t\t\t}\n-\t\t\tthrow new InvalidBearerTokenException(\"Missing issuer\");\n+\t\t\tAuthenticationException ex = new InvalidBearerTokenException(\"Missing issuer\");\n+\t\t\tex.setAuthenticationRequest(authentication);\n+\t\t\tthrow ex;\n \t\t}\n \n \t}\n\ndiff --git a/oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerReactiveAuthenticationManagerResolver.java b/oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerReactiveAuthenticationManagerResolver.java\nindex 2e81d3b3d8b..b764e4ca76c 100644\n--- a/oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerReactiveAuthenticationManagerResolver.java\n+++ b/oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerReactiveAuthenticationManagerResolver.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2021 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -36,6 +36,7 @@\n import org.springframework.security.authentication.ReactiveAuthenticationManager;\n import org.springframework.security.authentication.ReactiveAuthenticationManagerResolver;\n import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.AuthenticationException;\n import org.springframework.security.oauth2.core.OAuth2AuthenticationException;\n import org.springframework.security.oauth2.jwt.ReactiveJwtDecoders;\n import org.springframework.security.oauth2.server.resource.InvalidBearerTokenException;\n@@ -181,8 +182,13 @@ public Mono<Authentication> authenticate(Authentication authentication) {\n \t\t\tBearerTokenAuthenticationToken token = (BearerTokenAuthenticationToken) authentication;\n \t\t\treturn this.issuerConverter.convert(token)\n \t\t\t\t.flatMap((issuer) -> this.issuerAuthenticationManagerResolver.resolve(issuer)\n-\t\t\t\t\t.switchIfEmpty(Mono.error(() -> new InvalidBearerTokenException(\"Invalid issuer \" + issuer))))\n-\t\t\t\t.flatMap((manager) -> manager.authenticate(authentication));\n+\t\t\t\t\t.switchIfEmpty(Mono.error(() -> {\n+\t\t\t\t\t\tAuthenticationException ex = new InvalidBearerTokenException(\"Invalid issuer \" + issuer);\n+\t\t\t\t\t\tex.setAuthenticationRequest(authentication);\n+\t\t\t\t\t\treturn ex;\n+\t\t\t\t\t})))\n+\t\t\t\t.flatMap((manager) -> manager.authenticate(authentication))\n+\t\t\t\t.doOnError(AuthenticationException.class, (ex) -> ex.setAuthenticationRequest(authentication));\n \t\t}\n \n \t}\n@@ -194,12 +200,18 @@ public Mono<String> convert(@NonNull BearerTokenAuthenticationToken token) {\n \t\t\ttry {\n \t\t\t\tString issuer = JWTParser.parse(token.getToken()).getJWTClaimsSet().getIssuer();\n \t\t\t\tif (issuer == null) {\n-\t\t\t\t\tthrow new InvalidBearerTokenException(\"Missing issuer\");\n+\t\t\t\t\tAuthenticationException ex = new InvalidBearerTokenException(\"Missing issuer\");\n+\t\t\t\t\tex.setAuthenticationRequest(token);\n+\t\t\t\t\tthrow ex;\n \t\t\t\t}\n \t\t\t\treturn Mono.just(issuer);\n \t\t\t}\n-\t\t\tcatch (Exception ex) {\n-\t\t\t\treturn Mono.error(() -> new InvalidBearerTokenException(ex.getMessage(), ex));\n+\t\t\tcatch (Exception cause) {\n+\t\t\t\treturn Mono.error(() -> {\n+\t\t\t\t\tAuthenticationException ex = new InvalidBearerTokenException(cause.getMessage(), cause);\n+\t\t\t\t\tex.setAuthenticationRequest(token);\n+\t\t\t\t\treturn ex;\n+\t\t\t\t});\n \t\t\t}\n \t\t}\n \n\ndiff --git a/web/src/main/java/org/springframework/security/web/access/ExceptionTranslationFilter.java b/web/src/main/java/org/springframework/security/web/access/ExceptionTranslationFilter.java\nindex 9a38b1d2312..765fec6ed3d 100644\n--- a/web/src/main/java/org/springframework/security/web/access/ExceptionTranslationFilter.java\n+++ b/web/src/main/java/org/springframework/security/web/access/ExceptionTranslationFilter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2004-2022 the original author or authors.\n+ * Copyright 2004-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -194,10 +194,11 @@ private void handleAccessDeniedException(HttpServletRequest request, HttpServlet\n \t\t\t\tlogger.trace(LogMessage.format(\"Sending %s to authentication entry point since access is denied\",\n \t\t\t\t\t\tauthentication), exception);\n \t\t\t}\n-\t\t\tsendStartAuthentication(request, response, chain,\n-\t\t\t\t\tnew InsufficientAuthenticationException(\n-\t\t\t\t\t\t\tthis.messages.getMessage(\"ExceptionTranslationFilter.insufficientAuthentication\",\n-\t\t\t\t\t\t\t\t\t\"Full authentication is required to access this resource\")));\n+\t\t\tAuthenticationException ex = new InsufficientAuthenticationException(\n+\t\t\t\t\tthis.messages.getMessage(\"ExceptionTranslationFilter.insufficientAuthentication\",\n+\t\t\t\t\t\t\t\"Full authentication is required to access this resource\"));\n+\t\t\tex.setAuthenticationRequest(authentication);\n+\t\t\tsendStartAuthentication(request, response, chain, ex);\n \t\t}\n \t\telse {\n \t\t\tif (logger.isTraceEnabled()) {\n\ndiff --git a/web/src/main/java/org/springframework/security/web/authentication/RequestMatcherDelegatingAuthenticationManagerResolver.java b/web/src/main/java/org/springframework/security/web/authentication/RequestMatcherDelegatingAuthenticationManagerResolver.java\nindex 04833fdeae5..eb164ea9e89 100644\n--- a/web/src/main/java/org/springframework/security/web/authentication/RequestMatcherDelegatingAuthenticationManagerResolver.java\n+++ b/web/src/main/java/org/springframework/security/web/authentication/RequestMatcherDelegatingAuthenticationManagerResolver.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -27,6 +27,7 @@\n import org.springframework.security.authentication.AuthenticationManagerResolver;\n import org.springframework.security.authentication.AuthenticationServiceException;\n import org.springframework.security.authorization.AuthorizationManager;\n+import org.springframework.security.core.AuthenticationException;\n import org.springframework.security.web.access.intercept.RequestMatcherDelegatingAuthorizationManager;\n import org.springframework.security.web.util.matcher.RequestMatcher;\n import org.springframework.security.web.util.matcher.RequestMatcherEntry;\n@@ -46,7 +47,9 @@ public final class RequestMatcherDelegatingAuthenticationManagerResolver\n \tprivate final List<RequestMatcherEntry<AuthenticationManager>> authenticationManagers;\n \n \tprivate AuthenticationManager defaultAuthenticationManager = (authentication) -> {\n-\t\tthrow new AuthenticationServiceException(\"Cannot authenticate \" + authentication);\n+\t\tAuthenticationException ex = new AuthenticationServiceException(\"Cannot authenticate \" + authentication);\n+\t\tex.setAuthenticationRequest(authentication);\n+\t\tthrow ex;\n \t};\n \n \t/**\n\ndiff --git a/web/src/main/java/org/springframework/security/web/server/authentication/ServerWebExchangeDelegatingReactiveAuthenticationManagerResolver.java b/web/src/main/java/org/springframework/security/web/server/authentication/ServerWebExchangeDelegatingReactiveAuthenticationManagerResolver.java\nindex 4605b0d1993..efca0acb628 100644\n--- a/web/src/main/java/org/springframework/security/web/server/authentication/ServerWebExchangeDelegatingReactiveAuthenticationManagerResolver.java\n+++ b/web/src/main/java/org/springframework/security/web/server/authentication/ServerWebExchangeDelegatingReactiveAuthenticationManagerResolver.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2024 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -26,6 +26,7 @@\n import org.springframework.security.authentication.AuthenticationServiceException;\n import org.springframework.security.authentication.ReactiveAuthenticationManager;\n import org.springframework.security.authentication.ReactiveAuthenticationManagerResolver;\n+import org.springframework.security.core.AuthenticationException;\n import org.springframework.security.web.access.intercept.RequestMatcherDelegatingAuthorizationManager;\n import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;\n import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcherEntry;\n@@ -46,8 +47,11 @@ public final class ServerWebExchangeDelegatingReactiveAuthenticationManagerResol\n \n \tprivate final List<ServerWebExchangeMatcherEntry<ReactiveAuthenticationManager>> authenticationManagers;\n \n-\tprivate ReactiveAuthenticationManager defaultAuthenticationManager = (authentication) -> Mono\n-\t\t.error(new AuthenticationServiceException(\"Cannot authenticate \" + authentication));\n+\tprivate ReactiveAuthenticationManager defaultAuthenticationManager = (authentication) -> {\n+\t\tAuthenticationException ex = new AuthenticationServiceException(\"Cannot authenticate \" + authentication);\n+\t\tex.setAuthenticationRequest(authentication);\n+\t\treturn Mono.error(ex);\n+\t};\n \n \t/**\n \t * Construct an\n\ndiff --git a/web/src/main/java/org/springframework/security/web/server/authorization/ExceptionTranslationWebFilter.java b/web/src/main/java/org/springframework/security/web/server/authorization/ExceptionTranslationWebFilter.java\nindex 6be2a6258ea..0c85e6ef033 100644\n--- a/web/src/main/java/org/springframework/security/web/server/authorization/ExceptionTranslationWebFilter.java\n+++ b/web/src/main/java/org/springframework/security/web/server/authorization/ExceptionTranslationWebFilter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -50,14 +50,19 @@ public class ExceptionTranslationWebFilter implements WebFilter {\n \t@Override\n \tpublic Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {\n \t\treturn chain.filter(exchange)\n-\t\t\t.onErrorResume(AccessDeniedException.class, (denied) -> exchange.getPrincipal()\n-\t\t\t\t.filter((principal) -> (!(principal instanceof Authentication) || (principal instanceof Authentication\n-\t\t\t\t\t\t&& (this.authenticationTrustResolver.isAuthenticated((Authentication) principal)))))\n-\t\t\t\t.switchIfEmpty(commenceAuthentication(exchange,\n-\t\t\t\t\t\tnew InsufficientAuthenticationException(\n-\t\t\t\t\t\t\t\t\"Full authentication is required to access this resource\")))\n-\t\t\t\t.flatMap((principal) -> this.accessDeniedHandler.handle(exchange, denied))\n-\t\t\t\t.then());\n+\t\t\t.onErrorResume(AccessDeniedException.class,\n+\t\t\t\t\t(denied) -> exchange.getPrincipal()\n+\t\t\t\t\t\t.switchIfEmpty(Mono.defer(() -> commenceAuthentication(exchange, null)))\n+\t\t\t\t\t\t.flatMap((principal) -> {\n+\t\t\t\t\t\t\tif (!(principal instanceof Authentication authentication)) {\n+\t\t\t\t\t\t\t\treturn this.accessDeniedHandler.handle(exchange, denied);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (this.authenticationTrustResolver.isAuthenticated(authentication)) {\n+\t\t\t\t\t\t\t\treturn this.accessDeniedHandler.handle(exchange, denied);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\treturn commenceAuthentication(exchange, authentication);\n+\t\t\t\t\t\t})\n+\t\t\t\t\t\t.then());\n \t}\n \n \t/**\n@@ -92,10 +97,14 @@ public void setAuthenticationTrustResolver(AuthenticationTrustResolver authentic\n \t\tthis.authenticationTrustResolver = authenticationTrustResolver;\n \t}\n \n-\tprivate <T> Mono<T> commenceAuthentication(ServerWebExchange exchange, AuthenticationException denied) {\n-\t\treturn this.authenticationEntryPoint\n-\t\t\t.commence(exchange, new AuthenticationCredentialsNotFoundException(\"Not Authenticated\", denied))\n-\t\t\t.then(Mono.empty());\n+\tprivate <T> Mono<T> commenceAuthentication(ServerWebExchange exchange, Authentication authentication) {\n+\t\tAuthenticationException cause = new InsufficientAuthenticationException(\n+\t\t\t\t\"Full authentication is required to access this resource\");\n+\t\tAuthenticationException ex = new AuthenticationCredentialsNotFoundException(\"Not Authenticated\", cause);\n+\t\tif (authentication != null) {\n+\t\t\tex.setAuthenticationRequest(authentication);\n+\t\t}\n+\t\treturn this.authenticationEntryPoint.commence(exchange, ex).then(Mono.empty());\n \t}\n \n }\n",
    "test_patch": "diff --git a/core/src/test/java/org/springframework/security/authentication/DelegatingReactiveAuthenticationManagerTests.java b/core/src/test/java/org/springframework/security/authentication/DelegatingReactiveAuthenticationManagerTests.java\nindex 2d4b2c7a158..6d7aa590184 100644\n--- a/core/src/test/java/org/springframework/security/authentication/DelegatingReactiveAuthenticationManagerTests.java\n+++ b/core/src/test/java/org/springframework/security/authentication/DelegatingReactiveAuthenticationManagerTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2024 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -26,6 +26,7 @@\n import reactor.test.StepVerifier;\n \n import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.AuthenticationException;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.ArgumentMatchers.any;\n@@ -108,6 +109,15 @@ public void authenticateWhenContinueOnErrorAndDelegate1NotEmptyThenReturnsNotEmp\n \t\tassertThat(manager.authenticate(this.authentication).block()).isEqualTo(this.authentication);\n \t}\n \n+\t@Test\n+\tvoid whenAccountStatusExceptionThenAuthenticationRequestIsIncluded() {\n+\t\tAuthenticationException expected = new LockedException(\"\");\n+\t\tgiven(this.delegate1.authenticate(any())).willReturn(Mono.error(expected));\n+\t\tReactiveAuthenticationManager manager = new DelegatingReactiveAuthenticationManager(this.delegate1);\n+\t\tStepVerifier.create(manager.authenticate(this.authentication)).expectError(LockedException.class).verify();\n+\t\tassertThat(expected.getAuthenticationRequest()).isEqualTo(this.authentication);\n+\t}\n+\n \tprivate DelegatingReactiveAuthenticationManager managerWithContinueOnError() {\n \t\tDelegatingReactiveAuthenticationManager manager = new DelegatingReactiveAuthenticationManager(this.delegate1,\n \t\t\t\tthis.delegate2);\n\ndiff --git a/core/src/test/java/org/springframework/security/authentication/ProviderManagerTests.java b/core/src/test/java/org/springframework/security/authentication/ProviderManagerTests.java\nindex 9b98bd522a9..7bb0c136bca 100644\n--- a/core/src/test/java/org/springframework/security/authentication/ProviderManagerTests.java\n+++ b/core/src/test/java/org/springframework/security/authentication/ProviderManagerTests.java\n@@ -18,7 +18,6 @@\n \n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collections;\n import java.util.List;\n \n import org.junit.jupiter.api.Test;\n@@ -47,7 +46,7 @@\n public class ProviderManagerTests {\n \n \t@Test\n-\tpublic void authenticationFailsWithUnsupportedToken() {\n+\tvoid authenticationFailsWithUnsupportedToken() {\n \t\tAuthentication token = new AbstractAuthenticationToken(null) {\n \t\t\t@Override\n \t\t\tpublic Object getCredentials() {\n@@ -65,7 +64,7 @@ public Object getPrincipal() {\n \t}\n \n \t@Test\n-\tpublic void credentialsAreClearedByDefault() {\n+\tvoid credentialsAreClearedByDefault() {\n \t\tUsernamePasswordAuthenticationToken token = UsernamePasswordAuthenticationToken.unauthenticated(\"Test\",\n \t\t\t\t\"Password\");\n \t\tProviderManager mgr = makeProviderManager();\n@@ -78,8 +77,8 @@ public void credentialsAreClearedByDefault() {\n \t}\n \n \t@Test\n-\tpublic void authenticationSucceedsWithSupportedTokenAndReturnsExpectedObject() {\n-\t\tfinal Authentication a = mock(Authentication.class);\n+\tvoid authenticationSucceedsWithSupportedTokenAndReturnsExpectedObject() {\n+\t\tAuthentication a = mock(Authentication.class);\n \t\tProviderManager mgr = new ProviderManager(createProviderWhichReturns(a));\n \t\tAuthenticationEventPublisher publisher = mock(AuthenticationEventPublisher.class);\n \t\tmgr.setAuthenticationEventPublisher(publisher);\n@@ -89,8 +88,8 @@ public void authenticationSucceedsWithSupportedTokenAndReturnsExpectedObject() {\n \t}\n \n \t@Test\n-\tpublic void authenticationSucceedsWhenFirstProviderReturnsNullButSecondAuthenticates() {\n-\t\tfinal Authentication a = mock(Authentication.class);\n+\tvoid authenticationSucceedsWhenFirstProviderReturnsNullButSecondAuthenticates() {\n+\t\tAuthentication a = mock(Authentication.class);\n \t\tProviderManager mgr = new ProviderManager(\n \t\t\t\tArrays.asList(createProviderWhichReturns(null), createProviderWhichReturns(a)));\n \t\tAuthenticationEventPublisher publisher = mock(AuthenticationEventPublisher.class);\n@@ -101,24 +100,24 @@ public void authenticationSucceedsWhenFirstProviderReturnsNullButSecondAuthentic\n \t}\n \n \t@Test\n-\tpublic void testStartupFailsIfProvidersNotSetAsList() {\n+\tvoid testStartupFailsIfProvidersNotSetAsList() {\n \t\tassertThatIllegalArgumentException().isThrownBy(() -> new ProviderManager((List<AuthenticationProvider>) null));\n \t}\n \n \t@Test\n-\tpublic void testStartupFailsIfProvidersNotSetAsVarargs() {\n+\tvoid testStartupFailsIfProvidersNotSetAsVarargs() {\n \t\tassertThatIllegalArgumentException().isThrownBy(() -> new ProviderManager((AuthenticationProvider) null));\n \t}\n \n \t@Test\n-\tpublic void testStartupFailsIfProvidersContainNullElement() {\n+\tvoid testStartupFailsIfProvidersContainNullElement() {\n \t\tassertThatIllegalArgumentException()\n \t\t\t.isThrownBy(() -> new ProviderManager(Arrays.asList(mock(AuthenticationProvider.class), null)));\n \t}\n \n \t// gh-8689\n \t@Test\n-\tpublic void constructorWhenUsingListOfThenNoException() {\n+\tvoid constructorWhenUsingListOfThenNoException() {\n \t\tList<AuthenticationProvider> providers = spy(ArrayList.class);\n \t\t// List.of(null) in JDK 9 throws a NullPointerException\n \t\tgiven(providers.contains(eq(null))).willThrow(NullPointerException.class);\n@@ -127,7 +126,7 @@ public void constructorWhenUsingListOfThenNoException() {\n \t}\n \n \t@Test\n-\tpublic void detailsAreNotSetOnAuthenticationTokenIfAlreadySetByProvider() {\n+\tvoid detailsAreNotSetOnAuthenticationTokenIfAlreadySetByProvider() {\n \t\tObject requestDetails = \"(Request Details)\";\n \t\tfinal Object resultDetails = \"(Result Details)\";\n \t\t// A provider which sets the details object\n@@ -151,7 +150,7 @@ public boolean supports(Class<?> authentication) {\n \t}\n \n \t@Test\n-\tpublic void detailsAreSetOnAuthenticationTokenIfNotAlreadySetByProvider() {\n+\tvoid detailsAreSetOnAuthenticationTokenIfNotAlreadySetByProvider() {\n \t\tObject details = new Object();\n \t\tProviderManager authMgr = makeProviderManager();\n \t\tTestingAuthenticationToken request = createAuthenticationToken();\n@@ -162,8 +161,8 @@ public void detailsAreSetOnAuthenticationTokenIfNotAlreadySetByProvider() {\n \t}\n \n \t@Test\n-\tpublic void authenticationExceptionIsIgnoredIfLaterProviderAuthenticates() {\n-\t\tfinal Authentication authReq = mock(Authentication.class);\n+\tvoid authenticationExceptionIsIgnoredIfLaterProviderAuthenticates() {\n+\t\tAuthentication authReq = mock(Authentication.class);\n \t\tProviderManager mgr = new ProviderManager(\n \t\t\t\tcreateProviderWhichThrows(new BadCredentialsException(\"\", new Throwable())),\n \t\t\t\tcreateProviderWhichReturns(authReq));\n@@ -171,7 +170,7 @@ public void authenticationExceptionIsIgnoredIfLaterProviderAuthenticates() {\n \t}\n \n \t@Test\n-\tpublic void authenticationExceptionIsRethrownIfNoLaterProviderAuthenticates() {\n+\tvoid authenticationExceptionIsRethrownIfNoLaterProviderAuthenticates() {\n \t\tProviderManager mgr = new ProviderManager(Arrays\n \t\t\t.asList(createProviderWhichThrows(new BadCredentialsException(\"\")), createProviderWhichReturns(null)));\n \t\tassertThatExceptionOfType(BadCredentialsException.class)\n@@ -180,7 +179,7 @@ public void authenticationExceptionIsRethrownIfNoLaterProviderAuthenticates() {\n \n \t// SEC-546\n \t@Test\n-\tpublic void accountStatusExceptionPreventsCallsToSubsequentProviders() {\n+\tvoid accountStatusExceptionPreventsCallsToSubsequentProviders() {\n \t\tAuthenticationProvider iThrowAccountStatusException = createProviderWhichThrows(new AccountStatusException(\"\") {\n \t\t});\n \t\tAuthenticationProvider otherProvider = mock(AuthenticationProvider.class);\n@@ -191,48 +190,47 @@ public void accountStatusExceptionPreventsCallsToSubsequentProviders() {\n \t}\n \n \t@Test\n-\tpublic void parentAuthenticationIsUsedIfProvidersDontAuthenticate() {\n+\tvoid parentAuthenticationIsUsedIfProvidersDontAuthenticate() {\n \t\tAuthenticationManager parent = mock(AuthenticationManager.class);\n \t\tAuthentication authReq = mock(Authentication.class);\n \t\tgiven(parent.authenticate(authReq)).willReturn(authReq);\n-\t\tProviderManager mgr = new ProviderManager(Collections.singletonList(mock(AuthenticationProvider.class)),\n-\t\t\t\tparent);\n+\t\tProviderManager mgr = new ProviderManager(List.of(mock(AuthenticationProvider.class)), parent);\n \t\tassertThat(mgr.authenticate(authReq)).isSameAs(authReq);\n \t}\n \n \t@Test\n-\tpublic void parentIsNotCalledIfAccountStatusExceptionIsThrown() {\n+\tvoid parentIsNotCalledIfAccountStatusExceptionIsThrown() {\n \t\tAuthenticationProvider iThrowAccountStatusException = createProviderWhichThrows(\n \t\t\t\tnew AccountStatusException(\"\", new Throwable()) {\n \t\t\t\t});\n \t\tAuthenticationManager parent = mock(AuthenticationManager.class);\n-\t\tProviderManager mgr = new ProviderManager(Collections.singletonList(iThrowAccountStatusException), parent);\n+\t\tProviderManager mgr = new ProviderManager(List.of(iThrowAccountStatusException), parent);\n \t\tassertThatExceptionOfType(AccountStatusException.class)\n \t\t\t.isThrownBy(() -> mgr.authenticate(mock(Authentication.class)));\n \t\tverifyNoInteractions(parent);\n \t}\n \n \t@Test\n-\tpublic void providerNotFoundFromParentIsIgnored() {\n+\tvoid providerNotFoundFromParentIsIgnored() {\n \t\tfinal Authentication authReq = mock(Authentication.class);\n \t\tAuthenticationEventPublisher publisher = mock(AuthenticationEventPublisher.class);\n \t\tAuthenticationManager parent = mock(AuthenticationManager.class);\n \t\tgiven(parent.authenticate(authReq)).willThrow(new ProviderNotFoundException(\"\"));\n \t\t// Set a provider that throws an exception - this is the exception we expect to be\n \t\t// propagated\n-\t\tProviderManager mgr = new ProviderManager(\n-\t\t\t\tCollections.singletonList(createProviderWhichThrows(new BadCredentialsException(\"\"))), parent);\n+\t\tProviderManager mgr = new ProviderManager(List.of(createProviderWhichThrows(new BadCredentialsException(\"\"))),\n+\t\t\t\tparent);\n \t\tmgr.setAuthenticationEventPublisher(publisher);\n \t\tassertThatExceptionOfType(BadCredentialsException.class).isThrownBy(() -> mgr.authenticate(authReq))\n \t\t\t.satisfies((ex) -> verify(publisher).publishAuthenticationFailure(ex, authReq));\n \t}\n \n \t@Test\n-\tpublic void authenticationExceptionFromParentOverridesPreviousOnes() {\n+\tvoid authenticationExceptionFromParentOverridesPreviousOnes() {\n \t\tAuthenticationManager parent = mock(AuthenticationManager.class);\n-\t\tProviderManager mgr = new ProviderManager(\n-\t\t\t\tCollections.singletonList(createProviderWhichThrows(new BadCredentialsException(\"\"))), parent);\n-\t\tfinal Authentication authReq = mock(Authentication.class);\n+\t\tProviderManager mgr = new ProviderManager(List.of(createProviderWhichThrows(new BadCredentialsException(\"\"))),\n+\t\t\t\tparent);\n+\t\tAuthentication authReq = mock(Authentication.class);\n \t\tAuthenticationEventPublisher publisher = mock(AuthenticationEventPublisher.class);\n \t\tmgr.setAuthenticationEventPublisher(publisher);\n \t\t// Set a provider that throws an exception - this is the exception we expect to be\n@@ -244,21 +242,48 @@ public void authenticationExceptionFromParentOverridesPreviousOnes() {\n \t}\n \n \t@Test\n-\tpublic void statusExceptionIsPublished() {\n+\tvoid statusExceptionIsPublished() {\n \t\tAuthenticationManager parent = mock(AuthenticationManager.class);\n-\t\tfinal LockedException expected = new LockedException(\"\");\n-\t\tProviderManager mgr = new ProviderManager(Collections.singletonList(createProviderWhichThrows(expected)),\n-\t\t\t\tparent);\n-\t\tfinal Authentication authReq = mock(Authentication.class);\n+\t\tLockedException expected = new LockedException(\"\");\n+\t\tProviderManager mgr = new ProviderManager(List.of(createProviderWhichThrows(expected)), parent);\n+\t\tAuthentication authReq = mock(Authentication.class);\n \t\tAuthenticationEventPublisher publisher = mock(AuthenticationEventPublisher.class);\n \t\tmgr.setAuthenticationEventPublisher(publisher);\n \t\tassertThatExceptionOfType(LockedException.class).isThrownBy(() -> mgr.authenticate(authReq));\n \t\tverify(publisher).publishAuthenticationFailure(expected, authReq);\n \t}\n \n+\t@Test\n+\tvoid whenAccountStatusExceptionThenAuthenticationRequestIsIncluded() {\n+\t\tAuthenticationException expected = new LockedException(\"\");\n+\t\tProviderManager mgr = new ProviderManager(createProviderWhichThrows(expected));\n+\t\tAuthentication authReq = mock(Authentication.class);\n+\t\tassertThatExceptionOfType(LockedException.class).isThrownBy(() -> mgr.authenticate(authReq));\n+\t\tassertThat(expected.getAuthenticationRequest()).isEqualTo(authReq);\n+\t}\n+\n+\t@Test\n+\tvoid whenInternalServiceAuthenticationExceptionThenAuthenticationRequestIsIncluded() {\n+\t\tAuthenticationException expected = new InternalAuthenticationServiceException(\"\");\n+\t\tProviderManager mgr = new ProviderManager(createProviderWhichThrows(expected));\n+\t\tAuthentication authReq = mock(Authentication.class);\n+\t\tassertThatExceptionOfType(InternalAuthenticationServiceException.class)\n+\t\t\t.isThrownBy(() -> mgr.authenticate(authReq));\n+\t\tassertThat(expected.getAuthenticationRequest()).isEqualTo(authReq);\n+\t}\n+\n+\t@Test\n+\tvoid whenAuthenticationExceptionThenAuthenticationRequestIsIncluded() {\n+\t\tAuthenticationException expected = new BadCredentialsException(\"\");\n+\t\tProviderManager mgr = new ProviderManager(createProviderWhichThrows(expected));\n+\t\tAuthentication authReq = mock(Authentication.class);\n+\t\tassertThatExceptionOfType(BadCredentialsException.class).isThrownBy(() -> mgr.authenticate(authReq));\n+\t\tassertThat(expected.getAuthenticationRequest()).isEqualTo(authReq);\n+\t}\n+\n \t// SEC-2367\n \t@Test\n-\tpublic void providerThrowsInternalAuthenticationServiceException() {\n+\tvoid providerThrowsInternalAuthenticationServiceException() {\n \t\tInternalAuthenticationServiceException expected = new InternalAuthenticationServiceException(\"Expected\");\n \t\tProviderManager mgr = new ProviderManager(Arrays.asList(createProviderWhichThrows(expected),\n \t\t\t\tcreateProviderWhichThrows(new BadCredentialsException(\"Oops\"))), null);\n@@ -269,15 +294,15 @@ public void providerThrowsInternalAuthenticationServiceException() {\n \n \t// gh-6281\n \t@Test\n-\tpublic void authenticateWhenFailsInParentAndPublishesThenChildDoesNotPublish() {\n+\tvoid authenticateWhenFailsInParentAndPublishesThenChildDoesNotPublish() {\n \t\tBadCredentialsException badCredentialsExParent = new BadCredentialsException(\"Bad Credentials in parent\");\n \t\tProviderManager parentMgr = new ProviderManager(createProviderWhichThrows(badCredentialsExParent));\n-\t\tProviderManager childMgr = new ProviderManager(Collections.singletonList(\n-\t\t\t\tcreateProviderWhichThrows(new BadCredentialsException(\"Bad Credentials in child\"))), parentMgr);\n+\t\tProviderManager childMgr = new ProviderManager(\n+\t\t\t\tList.of(createProviderWhichThrows(new BadCredentialsException(\"Bad Credentials in child\"))), parentMgr);\n \t\tAuthenticationEventPublisher publisher = mock(AuthenticationEventPublisher.class);\n \t\tparentMgr.setAuthenticationEventPublisher(publisher);\n \t\tchildMgr.setAuthenticationEventPublisher(publisher);\n-\t\tfinal Authentication authReq = mock(Authentication.class);\n+\t\tAuthentication authReq = mock(Authentication.class);\n \t\tassertThatExceptionOfType(BadCredentialsException.class).isThrownBy(() -> childMgr.authenticate(authReq))\n \t\t\t.isSameAs(badCredentialsExParent);\n \t\tverify(publisher).publishAuthenticationFailure(badCredentialsExParent, authReq); // Parent\n\ndiff --git a/oauth2/oauth2-resource-server/src/test/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerAuthenticationManagerResolverTests.java b/oauth2/oauth2-resource-server/src/test/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerAuthenticationManagerResolverTests.java\nindex 8a50dab1530..8d5e9c7780e 100644\n--- a/oauth2/oauth2-resource-server/src/test/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerAuthenticationManagerResolverTests.java\n+++ b/oauth2/oauth2-resource-server/src/test/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerAuthenticationManagerResolverTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -37,14 +37,18 @@\n import org.springframework.security.authentication.AuthenticationManager;\n import org.springframework.security.authentication.AuthenticationManagerResolver;\n import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.AuthenticationException;\n import org.springframework.security.oauth2.core.OAuth2AuthenticationException;\n import org.springframework.security.oauth2.jose.TestKeys;\n import org.springframework.security.oauth2.jwt.JwtClaimNames;\n+import org.springframework.security.oauth2.server.resource.InvalidBearerTokenException;\n import org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.BDDMockito.given;\n import static org.mockito.BDDMockito.mock;\n import static org.mockito.BDDMockito.verify;\n \n@@ -263,6 +267,19 @@ public void resolveWhenBearerTokenEvilThenGenericException() {\n \t\t// @formatter:on\n \t}\n \n+\t@Test\n+\tpublic void resolveWhenAuthenticationExceptionThenAuthenticationRequestIsIncluded() {\n+\t\tAuthentication authentication = new BearerTokenAuthenticationToken(this.jwt);\n+\t\tAuthenticationException ex = new InvalidBearerTokenException(\"\");\n+\t\tAuthenticationManager manager = mock(AuthenticationManager.class);\n+\t\tgiven(manager.authenticate(any())).willThrow(ex);\n+\t\tJwtIssuerAuthenticationManagerResolver resolver = new JwtIssuerAuthenticationManagerResolver(\n+\t\t\t\t(issuer) -> manager);\n+\t\tassertThatExceptionOfType(InvalidBearerTokenException.class)\n+\t\t\t.isThrownBy(() -> resolver.resolve(null).authenticate(authentication));\n+\t\tassertThat(ex.getAuthenticationRequest()).isEqualTo(authentication);\n+\t}\n+\n \t@Test\n \tpublic void factoryWhenNullOrEmptyIssuersThenException() {\n \t\tassertThatIllegalArgumentException()\n\ndiff --git a/oauth2/oauth2-resource-server/src/test/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerReactiveAuthenticationManagerResolverTests.java b/oauth2/oauth2-resource-server/src/test/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerReactiveAuthenticationManagerResolverTests.java\nindex f12c6d65be5..63bd66cf735 100644\n--- a/oauth2/oauth2-resource-server/src/test/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerReactiveAuthenticationManagerResolverTests.java\n+++ b/oauth2/oauth2-resource-server/src/test/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerReactiveAuthenticationManagerResolverTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -34,13 +34,16 @@\n import okhttp3.mockwebserver.MockWebServer;\n import org.junit.jupiter.api.Test;\n import reactor.core.publisher.Mono;\n+import reactor.test.StepVerifier;\n \n import org.springframework.security.authentication.ReactiveAuthenticationManager;\n import org.springframework.security.authentication.ReactiveAuthenticationManagerResolver;\n import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.AuthenticationException;\n import org.springframework.security.oauth2.core.OAuth2AuthenticationException;\n import org.springframework.security.oauth2.jose.TestKeys;\n import org.springframework.security.oauth2.jwt.JwtClaimNames;\n+import org.springframework.security.oauth2.server.resource.InvalidBearerTokenException;\n import org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver;\n \n import static org.assertj.core.api.Assertions.assertThat;\n@@ -262,6 +265,20 @@ public void resolveWhenBearerTokenEvilThenGenericException() {\n \t\t// @formatter:on\n \t}\n \n+\t@Test\n+\tpublic void resolveWhenAuthenticationExceptionThenAuthenticationRequestIsIncluded() {\n+\t\tAuthentication authentication = new BearerTokenAuthenticationToken(this.jwt);\n+\t\tAuthenticationException ex = new InvalidBearerTokenException(\"\");\n+\t\tReactiveAuthenticationManager manager = mock(ReactiveAuthenticationManager.class);\n+\t\tgiven(manager.authenticate(any())).willReturn(Mono.error(ex));\n+\t\tJwtIssuerReactiveAuthenticationManagerResolver resolver = new JwtIssuerReactiveAuthenticationManagerResolver(\n+\t\t\t\t(issuer) -> Mono.just(manager));\n+\t\tStepVerifier.create(resolver.resolve(null).block().authenticate(authentication))\n+\t\t\t.expectError(InvalidBearerTokenException.class)\n+\t\t\t.verify();\n+\t\tassertThat(ex.getAuthenticationRequest()).isEqualTo(authentication);\n+\t}\n+\n \t@Test\n \tpublic void factoryWhenNullOrEmptyIssuersThenException() {\n \t\tassertThatIllegalArgumentException().isThrownBy(\n\ndiff --git a/web/src/test/java/org/springframework/security/web/access/ExceptionTranslationFilterTests.java b/web/src/test/java/org/springframework/security/web/access/ExceptionTranslationFilterTests.java\nindex 085ec955780..89159fd7377 100644\n--- a/web/src/test/java/org/springframework/security/web/access/ExceptionTranslationFilterTests.java\n+++ b/web/src/test/java/org/springframework/security/web/access/ExceptionTranslationFilterTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2004-2024 the original author or authors.\n+ * Copyright 2004-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -27,6 +27,7 @@\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n \n import org.springframework.context.MessageSource;\n import org.springframework.context.i18n.LocaleContextHolder;\n@@ -38,6 +39,7 @@\n import org.springframework.security.authentication.AuthenticationTrustResolverImpl;\n import org.springframework.security.authentication.BadCredentialsException;\n import org.springframework.security.authentication.RememberMeAuthenticationToken;\n+import org.springframework.security.core.AuthenticationException;\n import org.springframework.security.core.authority.AuthorityUtils;\n import org.springframework.security.core.context.SecurityContext;\n import org.springframework.security.core.context.SecurityContextHolder;\n@@ -107,6 +109,23 @@ public void testAccessDeniedWhenAnonymous() throws Exception {\n \t\tassertThat(response.getRedirectedUrl()).isEqualTo(\"/mycontext/login.jsp\");\n \t}\n \n+\t@Test\n+\tpublic void testAccessDeniedWhenAnonymousThenIncludesAuthenticationRequest() throws Exception {\n+\t\t// Setup our HTTP request\n+\t\tMockHttpServletRequest request = new MockHttpServletRequest(\"GET\", \"/\");\n+\t\tFilterChain fc = mockFilterChainWithException(new AccessDeniedException(\"\"));\n+\t\tAnonymousAuthenticationToken token = new AnonymousAuthenticationToken(\"ignored\", \"ignored\",\n+\t\t\t\tAuthorityUtils.createAuthorityList(\"IGNORED\"));\n+\t\tSecurityContextHolder.getContext().setAuthentication(token);\n+\t\tAuthenticationEntryPoint entryPoint = mock(AuthenticationEntryPoint.class);\n+\t\tExceptionTranslationFilter filter = new ExceptionTranslationFilter(entryPoint);\n+\t\tMockHttpServletResponse response = new MockHttpServletResponse();\n+\t\tfilter.doFilter(request, response, fc);\n+\t\tArgumentCaptor<AuthenticationException> ex = ArgumentCaptor.forClass(AuthenticationException.class);\n+\t\tverify(entryPoint).commence(any(), any(), ex.capture());\n+\t\tassertThat(ex.getValue().getAuthenticationRequest()).isEqualTo(token);\n+\t}\n+\n \t@Test\n \tpublic void testAccessDeniedWithRememberMe() throws Exception {\n \t\t// Setup our HTTP request\n\ndiff --git a/web/src/test/java/org/springframework/security/web/server/authorization/ExceptionTranslationWebFilterTests.java b/web/src/test/java/org/springframework/security/web/server/authorization/ExceptionTranslationWebFilterTests.java\nindex e323572b1af..0c4f2a21775 100644\n--- a/web/src/test/java/org/springframework/security/web/server/authorization/ExceptionTranslationWebFilterTests.java\n+++ b/web/src/test/java/org/springframework/security/web/server/authorization/ExceptionTranslationWebFilterTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -21,6 +21,7 @@\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n import org.mockito.Mock;\n import org.mockito.junit.jupiter.MockitoExtension;\n import reactor.core.publisher.Mono;\n@@ -31,6 +32,7 @@\n import org.springframework.mock.http.server.reactive.MockServerHttpResponse;\n import org.springframework.security.access.AccessDeniedException;\n import org.springframework.security.authentication.AnonymousAuthenticationToken;\n+import org.springframework.security.core.AuthenticationException;\n import org.springframework.security.web.server.ServerAuthenticationEntryPoint;\n import org.springframework.web.server.ServerWebExchange;\n import org.springframework.web.server.WebFilterChain;\n@@ -39,6 +41,7 @@\n import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.BDDMockito.given;\n+import static org.mockito.Mockito.verify;\n \n /**\n  * @author Rob Winch\n@@ -129,7 +132,6 @@ public void filterWhenDefaultsAndAccessDeniedExceptionAndNotAuthenticatedThenUna\n \t@Test\n \tpublic void filterWhenAccessDeniedExceptionAndAuthenticatedThenHandled() {\n \t\tgiven(this.deniedHandler.handle(any(), any())).willReturn(this.deniedPublisher.mono());\n-\t\tgiven(this.entryPoint.commence(any(), any())).willReturn(this.entryPointPublisher.mono());\n \t\tgiven(this.exchange.getPrincipal()).willReturn(Mono.just(this.principal));\n \t\tgiven(this.chain.filter(this.exchange)).willReturn(Mono.error(new AccessDeniedException(\"Not Authorized\")));\n \t\tStepVerifier.create(this.filter.filter(this.exchange, this.chain)).expectComplete().verify();\n@@ -147,6 +149,17 @@ public void filterWhenAccessDeniedExceptionAndAnonymousAuthenticatedThenHandled(\n \t\tthis.entryPointPublisher.assertWasSubscribed();\n \t}\n \n+\t@Test\n+\tpublic void filterWhenAccessDeniedExceptionAndAnonymousAuthenticatedThenIncludesAuthenticationRequest() {\n+\t\tgiven(this.entryPoint.commence(any(), any())).willReturn(this.entryPointPublisher.mono());\n+\t\tgiven(this.exchange.getPrincipal()).willReturn(Mono.just(this.anonymousPrincipal));\n+\t\tgiven(this.chain.filter(this.exchange)).willReturn(Mono.error(new AccessDeniedException(\"Not Authorized\")));\n+\t\tStepVerifier.create(this.filter.filter(this.exchange, this.chain)).expectComplete().verify();\n+\t\tArgumentCaptor<AuthenticationException> ex = ArgumentCaptor.forClass(AuthenticationException.class);\n+\t\tverify(this.entryPoint).commence(any(), ex.capture());\n+\t\tassertThat(ex.getValue().getAuthenticationRequest()).isEqualTo(this.anonymousPrincipal);\n+\t}\n+\n \t@Test\n \tpublic void setAccessDeniedHandlerWhenNullThenException() {\n \t\tassertThatIllegalArgumentException().isThrownBy(() -> this.filter.setAccessDeniedHandler(null));\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "spring-projects__spring-security-16245",
    "pr_id": 16245,
    "issue_id": 16177,
    "repo": "spring-projects/spring-security",
    "problem_statement": "Issue when using @AuthenticationPrincipal on interfaces\nIn the current version of Spring Security (version 6.4), a changed behavior occurs when using the `@AuthenticationPrincipal` annotation on an interface. If the annotation is applied directly to the concrete implementation, everything works as expected and the `UserDetails` object is passed correctly. However, if the annotation is applied to an interface, the implementation receives a new or empty UserDetails object.\r\n\r\n**Reproduction of the problem:**\r\nThe problem can be reproduced with the example project: [K-e-l-v-i-n-12/spring-security](https://github.com/K-e-l-v-i-n-12/spring-security)\r\n\r\n**Steps to reproduce:**\r\n- Start the application.\r\n- Call `http://localhost:8080/userByInterface` (any username/password). The response is: Hello, null.\r\n- Call `http://localhost:8080/userByImplementation` (any username/password). The response is: Hello, test.\r\n\r\n**Actual behaviour:**\r\nIf `@AuthenticationPrincipal` is applied to an interface, the implementation receives an empty UserDetails object.\r\n\r\n**Expected behaviour:**\r\nThe UserDetails object should be passed correctly even when an interface is used.\r\n\r\n**Proposed solution:**\r\nExtend support for @AuthenticationPrincipal to interfaces.",
    "issue_word_count": 172,
    "test_files_count": 5,
    "non_test_files_count": 7,
    "pr_changed_files": [
      "config/src/test/java/org/springframework/security/config/annotation/web/reactive/EnableWebFluxSecurityTests.java",
      "messaging/src/main/java/org/springframework/security/messaging/context/AuthenticationPrincipalArgumentResolver.java",
      "messaging/src/main/java/org/springframework/security/messaging/handler/invocation/reactive/AuthenticationPrincipalArgumentResolver.java",
      "messaging/src/main/java/org/springframework/security/messaging/handler/invocation/reactive/CurrentSecurityContextArgumentResolver.java",
      "messaging/src/test/java/org/springframework/security/messaging/context/AuthenticationPrincipalArgumentResolverTests.java",
      "messaging/src/test/java/org/springframework/security/messaging/handler/invocation/reactive/AuthenticationPrincipalArgumentResolverTests.java",
      "web/src/main/java/org/springframework/security/web/method/annotation/AuthenticationPrincipalArgumentResolver.java",
      "web/src/main/java/org/springframework/security/web/method/annotation/CurrentSecurityContextArgumentResolver.java",
      "web/src/main/java/org/springframework/security/web/reactive/result/method/annotation/AuthenticationPrincipalArgumentResolver.java",
      "web/src/main/java/org/springframework/security/web/reactive/result/method/annotation/CurrentSecurityContextArgumentResolver.java",
      "web/src/test/java/org/springframework/security/web/method/annotation/AuthenticationPrincipalArgumentResolverTests.java",
      "web/src/test/java/org/springframework/security/web/reactive/result/method/annotation/AuthenticationPrincipalArgumentResolverTests.java"
    ],
    "pr_changed_test_files": [
      "config/src/test/java/org/springframework/security/config/annotation/web/reactive/EnableWebFluxSecurityTests.java",
      "messaging/src/test/java/org/springframework/security/messaging/context/AuthenticationPrincipalArgumentResolverTests.java",
      "messaging/src/test/java/org/springframework/security/messaging/handler/invocation/reactive/AuthenticationPrincipalArgumentResolverTests.java",
      "web/src/test/java/org/springframework/security/web/method/annotation/AuthenticationPrincipalArgumentResolverTests.java",
      "web/src/test/java/org/springframework/security/web/reactive/result/method/annotation/AuthenticationPrincipalArgumentResolverTests.java"
    ],
    "base_commit": "b168ec5f0d9c3de9cfc5c33d6736de370d04a0fd",
    "head_commit": "8018b0ed552d618f3cb6fc4f52b0acaac804b6d6",
    "repo_url": "https://github.com/spring-projects/spring-security/pull/16245",
    "swe_url": "https://swe-bench-plus.turing.com/repos/spring-projects__spring-security/16245",
    "dockerfile": "",
    "pr_merged_at": "2024-12-10T21:09:47.000Z",
    "patch": "diff --git a/messaging/src/main/java/org/springframework/security/messaging/context/AuthenticationPrincipalArgumentResolver.java b/messaging/src/main/java/org/springframework/security/messaging/context/AuthenticationPrincipalArgumentResolver.java\nindex f3f6f80fbea..5cee1b49acb 100644\n--- a/messaging/src/main/java/org/springframework/security/messaging/context/AuthenticationPrincipalArgumentResolver.java\n+++ b/messaging/src/main/java/org/springframework/security/messaging/context/AuthenticationPrincipalArgumentResolver.java\n@@ -19,6 +19,8 @@\n import java.lang.annotation.Annotation;\n \n import org.springframework.core.MethodParameter;\n+import org.springframework.core.annotation.AnnotationUtils;\n+import org.springframework.core.annotation.MergedAnnotations;\n import org.springframework.expression.Expression;\n import org.springframework.expression.ExpressionParser;\n import org.springframework.expression.spel.standard.SpelExpressionParser;\n@@ -95,8 +97,12 @@ public final class AuthenticationPrincipalArgumentResolver implements HandlerMet\n \n \tprivate ExpressionParser parser = new SpelExpressionParser();\n \n+\tprivate final Class<AuthenticationPrincipal> annotationType = AuthenticationPrincipal.class;\n+\n \tprivate SecurityAnnotationScanner<AuthenticationPrincipal> scanner = SecurityAnnotationScanners\n-\t\t.requireUnique(AuthenticationPrincipal.class);\n+\t\t.requireUnique(this.annotationType);\n+\n+\tprivate boolean useAnnotationTemplate = false;\n \n \t@Override\n \tpublic boolean supportsParameter(MethodParameter parameter) {\n@@ -149,6 +155,7 @@ public void setSecurityContextHolderStrategy(SecurityContextHolderStrategy secur\n \t * @since 6.4\n \t */\n \tpublic void setTemplateDefaults(AnnotationTemplateExpressionDefaults templateDefaults) {\n+\t\tthis.useAnnotationTemplate = templateDefaults != null;\n \t\tthis.scanner = SecurityAnnotationScanners.requireUnique(AuthenticationPrincipal.class, templateDefaults);\n \t}\n \n@@ -158,9 +165,22 @@ public void setTemplateDefaults(AnnotationTemplateExpressionDefaults templateDef\n \t * @param parameter the {@link MethodParameter} to search for an {@link Annotation}\n \t * @return the {@link Annotation} that was found or null.\n \t */\n-\t@SuppressWarnings(\"unchecked\")\n-\tprivate <T extends Annotation> T findMethodAnnotation(MethodParameter parameter) {\n-\t\treturn (T) this.scanner.scan(parameter.getParameter());\n+\tprivate AuthenticationPrincipal findMethodAnnotation(MethodParameter parameter) {\n+\t\tif (this.useAnnotationTemplate) {\n+\t\t\treturn this.scanner.scan(parameter.getParameter());\n+\t\t}\n+\t\tAuthenticationPrincipal annotation = parameter.getParameterAnnotation(this.annotationType);\n+\t\tif (annotation != null) {\n+\t\t\treturn annotation;\n+\t\t}\n+\t\tAnnotation[] annotationsToSearch = parameter.getParameterAnnotations();\n+\t\tfor (Annotation toSearch : annotationsToSearch) {\n+\t\t\tannotation = AnnotationUtils.findAnnotation(toSearch.annotationType(), this.annotationType);\n+\t\t\tif (annotation != null) {\n+\t\t\t\treturn MergedAnnotations.from(toSearch).get(this.annotationType).synthesize();\n+\t\t\t}\n+\t\t}\n+\t\treturn null;\n \t}\n \n }\n\ndiff --git a/messaging/src/main/java/org/springframework/security/messaging/handler/invocation/reactive/AuthenticationPrincipalArgumentResolver.java b/messaging/src/main/java/org/springframework/security/messaging/handler/invocation/reactive/AuthenticationPrincipalArgumentResolver.java\nindex bb0590a9caa..ef8a93a4d4e 100644\n--- a/messaging/src/main/java/org/springframework/security/messaging/handler/invocation/reactive/AuthenticationPrincipalArgumentResolver.java\n+++ b/messaging/src/main/java/org/springframework/security/messaging/handler/invocation/reactive/AuthenticationPrincipalArgumentResolver.java\n@@ -25,6 +25,8 @@\n import org.springframework.core.ReactiveAdapter;\n import org.springframework.core.ReactiveAdapterRegistry;\n import org.springframework.core.ResolvableType;\n+import org.springframework.core.annotation.AnnotationUtils;\n+import org.springframework.core.annotation.MergedAnnotations;\n import org.springframework.expression.BeanResolver;\n import org.springframework.expression.Expression;\n import org.springframework.expression.ExpressionParser;\n@@ -99,8 +101,12 @@ public class AuthenticationPrincipalArgumentResolver implements HandlerMethodArg\n \n \tprivate ExpressionParser parser = new SpelExpressionParser();\n \n+\tprivate final Class<AuthenticationPrincipal> annotationType = AuthenticationPrincipal.class;\n+\n \tprivate SecurityAnnotationScanner<AuthenticationPrincipal> scanner = SecurityAnnotationScanners\n-\t\t.requireUnique(AuthenticationPrincipal.class);\n+\t\t.requireUnique(this.annotationType);\n+\n+\tprivate boolean useAnnotationTemplate = false;\n \n \tprivate BeanResolver beanResolver;\n \n@@ -190,6 +196,7 @@ private boolean isInvalidType(MethodParameter parameter, Object principal) {\n \t * @since 6.4\n \t */\n \tpublic void setTemplateDefaults(AnnotationTemplateExpressionDefaults templateDefaults) {\n+\t\tthis.useAnnotationTemplate = templateDefaults != null;\n \t\tthis.scanner = SecurityAnnotationScanners.requireUnique(AuthenticationPrincipal.class, templateDefaults);\n \t}\n \n@@ -199,9 +206,22 @@ public void setTemplateDefaults(AnnotationTemplateExpressionDefaults templateDef\n \t * @param parameter the {@link MethodParameter} to search for an {@link Annotation}\n \t * @return the {@link Annotation} that was found or null.\n \t */\n-\t@SuppressWarnings(\"unchecked\")\n-\tprivate <T extends Annotation> T findMethodAnnotation(MethodParameter parameter) {\n-\t\treturn (T) this.scanner.scan(parameter.getParameter());\n+\tprivate AuthenticationPrincipal findMethodAnnotation(MethodParameter parameter) {\n+\t\tif (this.useAnnotationTemplate) {\n+\t\t\treturn this.scanner.scan(parameter.getParameter());\n+\t\t}\n+\t\tAuthenticationPrincipal annotation = parameter.getParameterAnnotation(this.annotationType);\n+\t\tif (annotation != null) {\n+\t\t\treturn annotation;\n+\t\t}\n+\t\tAnnotation[] annotationsToSearch = parameter.getParameterAnnotations();\n+\t\tfor (Annotation toSearch : annotationsToSearch) {\n+\t\t\tannotation = AnnotationUtils.findAnnotation(toSearch.annotationType(), this.annotationType);\n+\t\t\tif (annotation != null) {\n+\t\t\t\treturn MergedAnnotations.from(toSearch).get(this.annotationType).synthesize();\n+\t\t\t}\n+\t\t}\n+\t\treturn null;\n \t}\n \n }\n\ndiff --git a/messaging/src/main/java/org/springframework/security/messaging/handler/invocation/reactive/CurrentSecurityContextArgumentResolver.java b/messaging/src/main/java/org/springframework/security/messaging/handler/invocation/reactive/CurrentSecurityContextArgumentResolver.java\nindex 62f25fefbb1..f2d7aafa4d6 100644\n--- a/messaging/src/main/java/org/springframework/security/messaging/handler/invocation/reactive/CurrentSecurityContextArgumentResolver.java\n+++ b/messaging/src/main/java/org/springframework/security/messaging/handler/invocation/reactive/CurrentSecurityContextArgumentResolver.java\n@@ -25,6 +25,8 @@\n import org.springframework.core.ReactiveAdapter;\n import org.springframework.core.ReactiveAdapterRegistry;\n import org.springframework.core.ResolvableType;\n+import org.springframework.core.annotation.AnnotationUtils;\n+import org.springframework.core.annotation.MergedAnnotations;\n import org.springframework.expression.BeanResolver;\n import org.springframework.expression.Expression;\n import org.springframework.expression.ExpressionParser;\n@@ -97,8 +99,12 @@ public class CurrentSecurityContextArgumentResolver implements HandlerMethodArgu\n \n \tprivate ExpressionParser parser = new SpelExpressionParser();\n \n+\tprivate final Class<CurrentSecurityContext> annotationType = CurrentSecurityContext.class;\n+\n \tprivate SecurityAnnotationScanner<CurrentSecurityContext> scanner = SecurityAnnotationScanners\n-\t\t.requireUnique(CurrentSecurityContext.class);\n+\t\t.requireUnique(this.annotationType);\n+\n+\tprivate boolean useAnnotationTemplate = false;\n \n \tprivate BeanResolver beanResolver;\n \n@@ -208,6 +214,7 @@ private boolean isInvalidType(MethodParameter parameter, Object value) {\n \t * @since 6.4\n \t */\n \tpublic void setTemplateDefaults(AnnotationTemplateExpressionDefaults templateDefaults) {\n+\t\tthis.useAnnotationTemplate = templateDefaults != null;\n \t\tthis.scanner = SecurityAnnotationScanners.requireUnique(CurrentSecurityContext.class, templateDefaults);\n \t}\n \n@@ -216,9 +223,22 @@ public void setTemplateDefaults(AnnotationTemplateExpressionDefaults templateDef\n \t * @param parameter the {@link MethodParameter} to search for an {@link Annotation}\n \t * @return the {@link Annotation} that was found or null.\n \t */\n-\t@SuppressWarnings(\"unchecked\")\n-\tprivate <T extends Annotation> T findMethodAnnotation(MethodParameter parameter) {\n-\t\treturn (T) this.scanner.scan(parameter.getParameter());\n+\tprivate CurrentSecurityContext findMethodAnnotation(MethodParameter parameter) {\n+\t\tif (this.useAnnotationTemplate) {\n+\t\t\treturn this.scanner.scan(parameter.getParameter());\n+\t\t}\n+\t\tCurrentSecurityContext annotation = parameter.getParameterAnnotation(this.annotationType);\n+\t\tif (annotation != null) {\n+\t\t\treturn annotation;\n+\t\t}\n+\t\tAnnotation[] annotationsToSearch = parameter.getParameterAnnotations();\n+\t\tfor (Annotation toSearch : annotationsToSearch) {\n+\t\t\tannotation = AnnotationUtils.findAnnotation(toSearch.annotationType(), this.annotationType);\n+\t\t\tif (annotation != null) {\n+\t\t\t\treturn MergedAnnotations.from(toSearch).get(this.annotationType).synthesize();\n+\t\t\t}\n+\t\t}\n+\t\treturn null;\n \t}\n \n }\n\ndiff --git a/web/src/main/java/org/springframework/security/web/method/annotation/AuthenticationPrincipalArgumentResolver.java b/web/src/main/java/org/springframework/security/web/method/annotation/AuthenticationPrincipalArgumentResolver.java\nindex 63a660012d7..94471bb3476 100644\n--- a/web/src/main/java/org/springframework/security/web/method/annotation/AuthenticationPrincipalArgumentResolver.java\n+++ b/web/src/main/java/org/springframework/security/web/method/annotation/AuthenticationPrincipalArgumentResolver.java\n@@ -19,6 +19,8 @@\n import java.lang.annotation.Annotation;\n \n import org.springframework.core.MethodParameter;\n+import org.springframework.core.annotation.AnnotationUtils;\n+import org.springframework.core.annotation.MergedAnnotations;\n import org.springframework.expression.BeanResolver;\n import org.springframework.expression.Expression;\n import org.springframework.expression.ExpressionParser;\n@@ -93,6 +95,8 @@\n  */\n public final class AuthenticationPrincipalArgumentResolver implements HandlerMethodArgumentResolver {\n \n+\tprivate final Class<AuthenticationPrincipal> annotationType = AuthenticationPrincipal.class;\n+\n \tprivate SecurityContextHolderStrategy securityContextHolderStrategy = SecurityContextHolder\n \t\t.getContextHolderStrategy();\n \n@@ -101,6 +105,8 @@ public final class AuthenticationPrincipalArgumentResolver implements HandlerMet\n \tprivate SecurityAnnotationScanner<AuthenticationPrincipal> scanner = SecurityAnnotationScanners\n \t\t.requireUnique(AuthenticationPrincipal.class);\n \n+\tprivate boolean useAnnotationTemplate = false;\n+\n \tprivate BeanResolver beanResolver;\n \n \t@Override\n@@ -165,6 +171,7 @@ public void setSecurityContextHolderStrategy(SecurityContextHolderStrategy secur\n \t */\n \tpublic void setTemplateDefaults(AnnotationTemplateExpressionDefaults templateDefaults) {\n \t\tthis.scanner = SecurityAnnotationScanners.requireUnique(AuthenticationPrincipal.class, templateDefaults);\n+\t\tthis.useAnnotationTemplate = templateDefaults != null;\n \t}\n \n \t/**\n@@ -174,8 +181,22 @@ public void setTemplateDefaults(AnnotationTemplateExpressionDefaults templateDef\n \t * @return the {@link Annotation} that was found or null.\n \t */\n \t@SuppressWarnings(\"unchecked\")\n-\tprivate <T extends Annotation> T findMethodAnnotation(MethodParameter parameter) {\n-\t\treturn (T) this.scanner.scan(parameter.getParameter());\n+\tprivate AuthenticationPrincipal findMethodAnnotation(MethodParameter parameter) {\n+\t\tif (this.useAnnotationTemplate) {\n+\t\t\treturn this.scanner.scan(parameter.getParameter());\n+\t\t}\n+\t\tAuthenticationPrincipal annotation = parameter.getParameterAnnotation(this.annotationType);\n+\t\tif (annotation != null) {\n+\t\t\treturn annotation;\n+\t\t}\n+\t\tAnnotation[] annotationsToSearch = parameter.getParameterAnnotations();\n+\t\tfor (Annotation toSearch : annotationsToSearch) {\n+\t\t\tannotation = AnnotationUtils.findAnnotation(toSearch.annotationType(), this.annotationType);\n+\t\t\tif (annotation != null) {\n+\t\t\t\treturn MergedAnnotations.from(toSearch).get(this.annotationType).synthesize();\n+\t\t\t}\n+\t\t}\n+\t\treturn null;\n \t}\n \n }\n\ndiff --git a/web/src/main/java/org/springframework/security/web/method/annotation/CurrentSecurityContextArgumentResolver.java b/web/src/main/java/org/springframework/security/web/method/annotation/CurrentSecurityContextArgumentResolver.java\nindex 600060e78e9..74d68e5d09f 100644\n--- a/web/src/main/java/org/springframework/security/web/method/annotation/CurrentSecurityContextArgumentResolver.java\n+++ b/web/src/main/java/org/springframework/security/web/method/annotation/CurrentSecurityContextArgumentResolver.java\n@@ -19,6 +19,8 @@\n import java.lang.annotation.Annotation;\n \n import org.springframework.core.MethodParameter;\n+import org.springframework.core.annotation.AnnotationUtils;\n+import org.springframework.core.annotation.MergedAnnotations;\n import org.springframework.expression.BeanResolver;\n import org.springframework.expression.Expression;\n import org.springframework.expression.ExpressionParser;\n@@ -84,8 +86,12 @@ public final class CurrentSecurityContextArgumentResolver implements HandlerMeth\n \n \tprivate ExpressionParser parser = new SpelExpressionParser();\n \n+\tprivate final Class<CurrentSecurityContext> annotationType = CurrentSecurityContext.class;\n+\n \tprivate SecurityAnnotationScanner<CurrentSecurityContext> scanner = SecurityAnnotationScanners\n-\t\t.requireUnique(CurrentSecurityContext.class);\n+\t\t.requireUnique(this.annotationType);\n+\n+\tprivate boolean useAnnotationTemplate = false;\n \n \tprivate BeanResolver beanResolver;\n \n@@ -140,6 +146,7 @@ public void setBeanResolver(BeanResolver beanResolver) {\n \t * @since 6.4\n \t */\n \tpublic void setTemplateDefaults(AnnotationTemplateExpressionDefaults templateDefaults) {\n+\t\tthis.useAnnotationTemplate = templateDefaults != null;\n \t\tthis.scanner = SecurityAnnotationScanners.requireUnique(CurrentSecurityContext.class, templateDefaults);\n \t}\n \n@@ -171,9 +178,22 @@ private Object resolveSecurityContextFromAnnotation(MethodParameter parameter, C\n \t * @param parameter the {@link MethodParameter} to search for an {@link Annotation}\n \t * @return the {@link Annotation} that was found or null.\n \t */\n-\t@SuppressWarnings(\"unchecked\")\n-\tprivate <T extends Annotation> T findMethodAnnotation(MethodParameter parameter) {\n-\t\treturn (T) this.scanner.scan(parameter.getParameter());\n+\tprivate CurrentSecurityContext findMethodAnnotation(MethodParameter parameter) {\n+\t\tif (this.useAnnotationTemplate) {\n+\t\t\treturn this.scanner.scan(parameter.getParameter());\n+\t\t}\n+\t\tCurrentSecurityContext annotation = parameter.getParameterAnnotation(this.annotationType);\n+\t\tif (annotation != null) {\n+\t\t\treturn annotation;\n+\t\t}\n+\t\tAnnotation[] annotationsToSearch = parameter.getParameterAnnotations();\n+\t\tfor (Annotation toSearch : annotationsToSearch) {\n+\t\t\tannotation = AnnotationUtils.findAnnotation(toSearch.annotationType(), this.annotationType);\n+\t\t\tif (annotation != null) {\n+\t\t\t\treturn MergedAnnotations.from(toSearch).get(this.annotationType).synthesize();\n+\t\t\t}\n+\t\t}\n+\t\treturn null;\n \t}\n \n }\n\ndiff --git a/web/src/main/java/org/springframework/security/web/reactive/result/method/annotation/AuthenticationPrincipalArgumentResolver.java b/web/src/main/java/org/springframework/security/web/reactive/result/method/annotation/AuthenticationPrincipalArgumentResolver.java\nindex aae0b46be22..31faf325a65 100644\n--- a/web/src/main/java/org/springframework/security/web/reactive/result/method/annotation/AuthenticationPrincipalArgumentResolver.java\n+++ b/web/src/main/java/org/springframework/security/web/reactive/result/method/annotation/AuthenticationPrincipalArgumentResolver.java\n@@ -25,6 +25,8 @@\n import org.springframework.core.ReactiveAdapter;\n import org.springframework.core.ReactiveAdapterRegistry;\n import org.springframework.core.ResolvableType;\n+import org.springframework.core.annotation.AnnotationUtils;\n+import org.springframework.core.annotation.MergedAnnotations;\n import org.springframework.expression.BeanResolver;\n import org.springframework.expression.Expression;\n import org.springframework.expression.ExpressionParser;\n@@ -53,8 +55,12 @@ public class AuthenticationPrincipalArgumentResolver extends HandlerMethodArgume\n \n \tprivate ExpressionParser parser = new SpelExpressionParser();\n \n+\tprivate final Class<AuthenticationPrincipal> annotationType = AuthenticationPrincipal.class;\n+\n \tprivate SecurityAnnotationScanner<AuthenticationPrincipal> scanner = SecurityAnnotationScanners\n-\t\t.requireUnique(AuthenticationPrincipal.class);\n+\t\t.requireUnique(this.annotationType);\n+\n+\tprivate boolean useAnnotationTemplate = false;\n \n \tprivate BeanResolver beanResolver;\n \n@@ -134,6 +140,7 @@ private boolean isInvalidType(MethodParameter parameter, Object principal) {\n \t * @since 6.4\n \t */\n \tpublic void setTemplateDefaults(AnnotationTemplateExpressionDefaults templateDefaults) {\n+\t\tthis.useAnnotationTemplate = templateDefaults != null;\n \t\tthis.scanner = SecurityAnnotationScanners.requireUnique(AuthenticationPrincipal.class, templateDefaults);\n \t}\n \n@@ -143,9 +150,22 @@ public void setTemplateDefaults(AnnotationTemplateExpressionDefaults templateDef\n \t * @param parameter the {@link MethodParameter} to search for an {@link Annotation}\n \t * @return the {@link Annotation} that was found or null.\n \t */\n-\t@SuppressWarnings(\"unchecked\")\n-\tprivate <T extends Annotation> T findMethodAnnotation(MethodParameter parameter) {\n-\t\treturn (T) this.scanner.scan(parameter.getParameter());\n+\tprivate AuthenticationPrincipal findMethodAnnotation(MethodParameter parameter) {\n+\t\tif (this.useAnnotationTemplate) {\n+\t\t\treturn this.scanner.scan(parameter.getParameter());\n+\t\t}\n+\t\tAuthenticationPrincipal annotation = parameter.getParameterAnnotation(this.annotationType);\n+\t\tif (annotation != null) {\n+\t\t\treturn annotation;\n+\t\t}\n+\t\tAnnotation[] annotationsToSearch = parameter.getParameterAnnotations();\n+\t\tfor (Annotation toSearch : annotationsToSearch) {\n+\t\t\tannotation = AnnotationUtils.findAnnotation(toSearch.annotationType(), this.annotationType);\n+\t\t\tif (annotation != null) {\n+\t\t\t\treturn MergedAnnotations.from(toSearch).get(this.annotationType).synthesize();\n+\t\t\t}\n+\t\t}\n+\t\treturn null;\n \t}\n \n }\n\ndiff --git a/web/src/main/java/org/springframework/security/web/reactive/result/method/annotation/CurrentSecurityContextArgumentResolver.java b/web/src/main/java/org/springframework/security/web/reactive/result/method/annotation/CurrentSecurityContextArgumentResolver.java\nindex 8fd7c724755..c7107cc150d 100644\n--- a/web/src/main/java/org/springframework/security/web/reactive/result/method/annotation/CurrentSecurityContextArgumentResolver.java\n+++ b/web/src/main/java/org/springframework/security/web/reactive/result/method/annotation/CurrentSecurityContextArgumentResolver.java\n@@ -25,6 +25,8 @@\n import org.springframework.core.ReactiveAdapter;\n import org.springframework.core.ReactiveAdapterRegistry;\n import org.springframework.core.ResolvableType;\n+import org.springframework.core.annotation.AnnotationUtils;\n+import org.springframework.core.annotation.MergedAnnotations;\n import org.springframework.expression.BeanResolver;\n import org.springframework.expression.Expression;\n import org.springframework.expression.ExpressionParser;\n@@ -53,8 +55,12 @@ public class CurrentSecurityContextArgumentResolver extends HandlerMethodArgumen\n \n \tprivate ExpressionParser parser = new SpelExpressionParser();\n \n+\tprivate final Class<CurrentSecurityContext> annotationType = CurrentSecurityContext.class;\n+\n \tprivate SecurityAnnotationScanner<CurrentSecurityContext> scanner = SecurityAnnotationScanners\n-\t\t.requireUnique(CurrentSecurityContext.class);\n+\t\t.requireUnique(this.annotationType);\n+\n+\tprivate boolean useAnnotationTemplate = false;\n \n \tprivate BeanResolver beanResolver;\n \n@@ -81,6 +87,7 @@ public void setBeanResolver(BeanResolver beanResolver) {\n \t * @since 6.4\n \t */\n \tpublic void setTemplateDefaults(AnnotationTemplateExpressionDefaults templateDefaults) {\n+\t\tthis.useAnnotationTemplate = templateDefaults != null;\n \t\tthis.scanner = SecurityAnnotationScanners.requireUnique(CurrentSecurityContext.class, templateDefaults);\n \t}\n \n@@ -183,9 +190,22 @@ private boolean isInvalidType(MethodParameter parameter, Object reactiveSecurity\n \t * @param parameter the {@link MethodParameter} to search for an {@link Annotation}\n \t * @return the {@link Annotation} that was found or null.\n \t */\n-\t@SuppressWarnings(\"unchecked\")\n-\tprivate <T extends Annotation> T findMethodAnnotation(MethodParameter parameter) {\n-\t\treturn (T) this.scanner.scan(parameter.getParameter());\n+\tprivate CurrentSecurityContext findMethodAnnotation(MethodParameter parameter) {\n+\t\tif (this.useAnnotationTemplate) {\n+\t\t\treturn this.scanner.scan(parameter.getParameter());\n+\t\t}\n+\t\tCurrentSecurityContext annotation = parameter.getParameterAnnotation(this.annotationType);\n+\t\tif (annotation != null) {\n+\t\t\treturn annotation;\n+\t\t}\n+\t\tAnnotation[] annotationsToSearch = parameter.getParameterAnnotations();\n+\t\tfor (Annotation toSearch : annotationsToSearch) {\n+\t\t\tannotation = AnnotationUtils.findAnnotation(toSearch.annotationType(), this.annotationType);\n+\t\t\tif (annotation != null) {\n+\t\t\t\treturn MergedAnnotations.from(toSearch).get(this.annotationType).synthesize();\n+\t\t\t}\n+\t\t}\n+\t\treturn null;\n \t}\n \n }\n",
    "test_patch": "diff --git a/config/src/test/java/org/springframework/security/config/annotation/web/reactive/EnableWebFluxSecurityTests.java b/config/src/test/java/org/springframework/security/config/annotation/web/reactive/EnableWebFluxSecurityTests.java\nindex 890af2bfa07..a2c0a7de2ff 100644\n--- a/config/src/test/java/org/springframework/security/config/annotation/web/reactive/EnableWebFluxSecurityTests.java\n+++ b/config/src/test/java/org/springframework/security/config/annotation/web/reactive/EnableWebFluxSecurityTests.java\n@@ -16,6 +16,10 @@\n \n package org.springframework.security.config.annotation.web.reactive;\n \n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n import java.nio.charset.StandardCharsets;\n \n import org.junit.jupiter.api.Test;\n@@ -28,6 +32,7 @@\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n import org.springframework.core.Ordered;\n+import org.springframework.core.annotation.AliasFor;\n import org.springframework.core.annotation.Order;\n import org.springframework.core.io.buffer.DataBuffer;\n import org.springframework.core.io.buffer.DefaultDataBufferFactory;\n@@ -404,11 +409,28 @@ public String username(UserDetails user) {\n \n \t\t}\n \n+\t\t@Target({ ElementType.PARAMETER })\n+\t\t@Retention(RetentionPolicy.RUNTIME)\n+\t\t@AuthenticationPrincipal\n+\t\t@interface Property {\n+\n+\t\t\t@AliasFor(attribute = \"expression\", annotation = AuthenticationPrincipal.class)\n+\t\t\tString value() default \"id\";\n+\n+\t\t}\n+\n+\t\tinterface UsernameResolver {\n+\n+\t\t\tString username(@Property(\"@principalBean.username(#this)\") String username);\n+\n+\t\t}\n+\n \t\t@RestController\n-\t\tstatic class AuthenticationPrincipalResolver {\n+\t\tstatic class AuthenticationPrincipalResolver implements UsernameResolver {\n \n+\t\t\t@Override\n \t\t\t@GetMapping(\"/spel\")\n-\t\t\tString username(@AuthenticationPrincipal(expression = \"@principalBean.username(#this)\") String username) {\n+\t\t\tpublic String username(String username) {\n \t\t\t\treturn username;\n \t\t\t}\n \n\ndiff --git a/messaging/src/test/java/org/springframework/security/messaging/context/AuthenticationPrincipalArgumentResolverTests.java b/messaging/src/test/java/org/springframework/security/messaging/context/AuthenticationPrincipalArgumentResolverTests.java\nindex 0074657e222..a2b7a0603e1 100644\n--- a/messaging/src/test/java/org/springframework/security/messaging/context/AuthenticationPrincipalArgumentResolverTests.java\n+++ b/messaging/src/test/java/org/springframework/security/messaging/context/AuthenticationPrincipalArgumentResolverTests.java\n@@ -28,6 +28,7 @@\n \n import org.springframework.core.MethodParameter;\n import org.springframework.core.annotation.AliasFor;\n+import org.springframework.core.annotation.AnnotatedMethod;\n import org.springframework.security.authentication.TestingAuthenticationToken;\n import org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults;\n import org.springframework.security.core.annotation.AuthenticationPrincipal;\n@@ -186,10 +187,21 @@ public void resolveArgumentCustomMetaAnnotationTpl() throws Exception {\n \t\tassertThat(this.resolver.resolveArgument(showUserCustomMetaAnnotationTpl(), null)).isEqualTo(principal.id);\n \t}\n \n+\t@Test\n+\tpublic void resolveArgumentWhenAliasForOnInterfaceThenInherits() {\n+\t\tCustomUserPrincipal principal = new CustomUserPrincipal();\n+\t\tsetAuthenticationPrincipal(principal);\n+\t\tassertThat(this.resolver.resolveArgument(showUserNoConcreteAnnotation(), null)).isEqualTo(principal.property);\n+\t}\n+\n \tprivate MethodParameter showUserNoAnnotation() {\n \t\treturn getMethodParameter(\"showUserNoAnnotation\", String.class);\n \t}\n \n+\tprivate MethodParameter showUserNoConcreteAnnotation() {\n+\t\treturn getMethodParameter(\"showUserNoConcreteAnnotation\", String.class);\n+\t}\n+\n \tprivate MethodParameter showUserAnnotationString() {\n \t\treturn getMethodParameter(\"showUserAnnotation\", String.class);\n \t}\n@@ -240,7 +252,7 @@ private MethodParameter showUserAnnotationObject() {\n \n \tprivate MethodParameter getMethodParameter(String methodName, Class<?>... paramTypes) {\n \t\tMethod method = ReflectionUtils.findMethod(TestController.class, methodName, paramTypes);\n-\t\treturn new MethodParameter(method, 0);\n+\t\treturn new AnnotatedMethod(method).getMethodParameters()[0];\n \t}\n \n \tprivate void setAuthenticationPrincipal(Object principal) {\n@@ -280,11 +292,32 @@ private void setAuthenticationPrincipal(Object principal) {\n \n \t}\n \n-\tpublic static class TestController {\n+\t@Target({ ElementType.PARAMETER })\n+\t@Retention(RetentionPolicy.RUNTIME)\n+\t@AuthenticationPrincipal\n+\t@interface Property {\n+\n+\t\t@AliasFor(attribute = \"expression\", annotation = AuthenticationPrincipal.class)\n+\t\tString value() default \"id\";\n+\n+\t}\n+\n+\tprivate interface TestInterface {\n+\n+\t\tvoid showUserNoConcreteAnnotation(@Property(\"property\") String property);\n+\n+\t}\n+\n+\tpublic static class TestController implements TestInterface {\n \n \t\tpublic void showUserNoAnnotation(String user) {\n \t\t}\n \n+\t\t@Override\n+\t\tpublic void showUserNoConcreteAnnotation(String user) {\n+\n+\t\t}\n+\n \t\tpublic void showUserAnnotation(@AuthenticationPrincipal String user) {\n \t\t}\n \n\ndiff --git a/messaging/src/test/java/org/springframework/security/messaging/handler/invocation/reactive/AuthenticationPrincipalArgumentResolverTests.java b/messaging/src/test/java/org/springframework/security/messaging/handler/invocation/reactive/AuthenticationPrincipalArgumentResolverTests.java\nindex 67c77123b86..3d1b6440367 100644\n--- a/messaging/src/test/java/org/springframework/security/messaging/handler/invocation/reactive/AuthenticationPrincipalArgumentResolverTests.java\n+++ b/messaging/src/test/java/org/springframework/security/messaging/handler/invocation/reactive/AuthenticationPrincipalArgumentResolverTests.java\n@@ -16,14 +16,17 @@\n \n package org.springframework.security.messaging.handler.invocation.reactive;\n \n+import java.lang.annotation.ElementType;\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n \n import org.junit.jupiter.api.Test;\n import reactor.core.publisher.Mono;\n \n import org.springframework.core.MethodParameter;\n import org.springframework.core.annotation.AliasFor;\n+import org.springframework.core.annotation.AnnotatedMethod;\n import org.springframework.core.annotation.SynthesizingMethodParameter;\n import org.springframework.security.authentication.TestAuthentication;\n import org.springframework.security.authentication.TestingAuthenticationToken;\n@@ -128,6 +131,19 @@ public void supportsParameterWhenNotAnnotatedThenFalse() {\n \t\tassertThat(this.resolver.supportsParameter(arg0(\"monoUserDetails\"))).isFalse();\n \t}\n \n+\t@Test\n+\tpublic void resolveArgumentWhenAliasForOnInterfaceThenInherits() {\n+\t\tCustomUserPrincipal principal = new CustomUserPrincipal();\n+\t\tAuthentication authentication = new TestingAuthenticationToken(principal, \"password\", \"ROLE_USER\");\n+\t\tResolvableMethod method = ResolvableMethod.on(TestController.class)\n+\t\t\t.named(\"showUserNoConcreteAnnotation\")\n+\t\t\t.method();\n+\t\tMethodParameter parameter = new AnnotatedMethod(method.method()).getMethodParameters()[0];\n+\t\tMono<Object> result = this.resolver.resolveArgument(parameter, null)\n+\t\t\t.contextWrite(ReactiveSecurityContextHolder.withAuthentication(authentication));\n+\t\tassertThat(result.block()).isEqualTo(principal.property);\n+\t}\n+\n \t@SuppressWarnings(\"unused\")\n \tprivate void monoUserDetails(Mono<UserDetails> user) {\n \t}\n@@ -172,6 +188,8 @@ static class CustomUserPrincipal {\n \n \t\tpublic final int id = 1;\n \n+\t\tpublic final String property = \"property\";\n+\n \t\tpublic Object getPrincipal() {\n \t\t\treturn this;\n \t\t}\n@@ -195,4 +213,29 @@ public Object getPrincipal() {\n \n \t}\n \n+\t@Target({ ElementType.PARAMETER })\n+\t@Retention(RetentionPolicy.RUNTIME)\n+\t@AuthenticationPrincipal\n+\t@interface Property {\n+\n+\t\t@AliasFor(attribute = \"expression\", annotation = AuthenticationPrincipal.class)\n+\t\tString value() default \"id\";\n+\n+\t}\n+\n+\tprivate interface TestInterface {\n+\n+\t\tvoid showUserNoConcreteAnnotation(@Property(\"property\") String property);\n+\n+\t}\n+\n+\tprivate static class TestController implements TestInterface {\n+\n+\t\t@Override\n+\t\tpublic void showUserNoConcreteAnnotation(String user) {\n+\n+\t\t}\n+\n+\t}\n+\n }\n\ndiff --git a/web/src/test/java/org/springframework/security/web/method/annotation/AuthenticationPrincipalArgumentResolverTests.java b/web/src/test/java/org/springframework/security/web/method/annotation/AuthenticationPrincipalArgumentResolverTests.java\nindex eda4249315b..fcc1e05088c 100644\n--- a/web/src/test/java/org/springframework/security/web/method/annotation/AuthenticationPrincipalArgumentResolverTests.java\n+++ b/web/src/test/java/org/springframework/security/web/method/annotation/AuthenticationPrincipalArgumentResolverTests.java\n@@ -28,6 +28,7 @@\n \n import org.springframework.core.MethodParameter;\n import org.springframework.core.annotation.AliasFor;\n+import org.springframework.core.annotation.AnnotatedMethod;\n import org.springframework.expression.BeanResolver;\n import org.springframework.security.authentication.TestingAuthenticationToken;\n import org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults;\n@@ -214,10 +215,22 @@ public void resolveArgumentCustomMetaAnnotationTpl() throws Exception {\n \t\t\t.isEqualTo(this.expectedPrincipal);\n \t}\n \n+\t@Test\n+\tpublic void resolveArgumentWhenAliasForOnInterfaceThenInherits() throws Exception {\n+\t\tCustomUserPrincipal principal = new CustomUserPrincipal();\n+\t\tsetAuthenticationPrincipal(principal);\n+\t\tassertThat(this.resolver.resolveArgument(showUserNoConcreteAnnotation(), null, null, null))\n+\t\t\t.isEqualTo(principal.property);\n+\t}\n+\n \tprivate MethodParameter showUserNoAnnotation() {\n \t\treturn getMethodParameter(\"showUserNoAnnotation\", String.class);\n \t}\n \n+\tprivate MethodParameter showUserNoConcreteAnnotation() {\n+\t\treturn getMethodParameter(\"showUserNoConcreteAnnotation\", String.class);\n+\t}\n+\n \tprivate MethodParameter showUserAnnotationString() {\n \t\treturn getMethodParameter(\"showUserAnnotation\", String.class);\n \t}\n@@ -272,7 +285,7 @@ private MethodParameter showUserCustomMetaAnnotationTpl() {\n \n \tprivate MethodParameter getMethodParameter(String methodName, Class<?>... paramTypes) {\n \t\tMethod method = ReflectionUtils.findMethod(TestController.class, methodName, paramTypes);\n-\t\treturn new MethodParameter(method, 0);\n+\t\treturn new AnnotatedMethod(method).getMethodParameters()[0];\n \t}\n \n \tprivate void setAuthenticationPrincipal(Object principal) {\n@@ -295,6 +308,16 @@ private void setAuthenticationPrincipal(Object principal) {\n \n \t}\n \n+\t@Target({ ElementType.PARAMETER })\n+\t@Retention(RetentionPolicy.RUNTIME)\n+\t@AuthenticationPrincipal\n+\t@interface Property {\n+\n+\t\t@AliasFor(attribute = \"expression\", annotation = AuthenticationPrincipal.class)\n+\t\tString value() default \"id\";\n+\n+\t}\n+\n \t@Retention(RetentionPolicy.RUNTIME)\n \t@AuthenticationPrincipal\n \tpublic @interface CurrentUser2 {\n@@ -312,11 +335,22 @@ private void setAuthenticationPrincipal(Object principal) {\n \n \t}\n \n-\tpublic static class TestController {\n+\tpublic interface TestInterface {\n+\n+\t\tvoid showUserNoConcreteAnnotation(@Property(\"property\") String property);\n+\n+\t}\n+\n+\tpublic static class TestController implements TestInterface {\n \n \t\tpublic void showUserNoAnnotation(String user) {\n \t\t}\n \n+\t\t@Override\n+\t\tpublic void showUserNoConcreteAnnotation(String user) {\n+\n+\t\t}\n+\n \t\tpublic void showUserAnnotation(@AuthenticationPrincipal String user) {\n \t\t}\n \n\ndiff --git a/web/src/test/java/org/springframework/security/web/reactive/result/method/annotation/AuthenticationPrincipalArgumentResolverTests.java b/web/src/test/java/org/springframework/security/web/reactive/result/method/annotation/AuthenticationPrincipalArgumentResolverTests.java\nindex 507175a9df9..63d6deea0aa 100644\n--- a/web/src/test/java/org/springframework/security/web/reactive/result/method/annotation/AuthenticationPrincipalArgumentResolverTests.java\n+++ b/web/src/test/java/org/springframework/security/web/reactive/result/method/annotation/AuthenticationPrincipalArgumentResolverTests.java\n@@ -32,6 +32,7 @@\n import org.springframework.core.MethodParameter;\n import org.springframework.core.ReactiveAdapterRegistry;\n import org.springframework.core.annotation.AliasFor;\n+import org.springframework.core.annotation.AnnotatedMethod;\n import org.springframework.core.annotation.SynthesizingMethodParameter;\n import org.springframework.expression.BeanResolver;\n import org.springframework.security.core.Authentication;\n@@ -230,6 +231,19 @@ public void resolveArgumentCustomMetaAnnotationTpl() {\n \t\tassertThat(result.block()).isEqualTo(principal.id);\n \t}\n \n+\t@Test\n+\tpublic void resolveArgumentWhenAliasForOnInterfaceThenInherits() {\n+\t\tCustomUserPrincipal principal = new CustomUserPrincipal();\n+\t\tgiven(this.authentication.getPrincipal()).willReturn(principal);\n+\t\tResolvableMethod method = ResolvableMethod.on(TestController.class)\n+\t\t\t.named(\"showUserNoConcreteAnnotation\")\n+\t\t\t.build();\n+\t\tMethodParameter parameter = new AnnotatedMethod(method.method()).getMethodParameters()[0];\n+\t\tMono<Object> result = this.resolver.resolveArgument(parameter, this.bindingContext, this.exchange)\n+\t\t\t.contextWrite(ReactiveSecurityContextHolder.withAuthentication(this.authentication));\n+\t\tassertThat(result.block()).isEqualTo(principal.property);\n+\t}\n+\n \tprivate MethodParameter arg0(String methodName) {\n \t\tResolvableMethod method = ResolvableMethod.on(getClass()).named(methodName).build();\n \t\treturn new SynthesizingMethodParameter(method.method(), 0);\n@@ -317,6 +331,8 @@ static class CustomUserPrincipal {\n \n \t\tpublic final int id = 1;\n \n+\t\tpublic final String property = \"property\";\n+\n \t\tpublic Object getPrincipal() {\n \t\t\treturn this;\n \t\t}\n@@ -340,4 +356,29 @@ public Object getPrincipal() {\n \n \t}\n \n+\t@Target({ ElementType.PARAMETER })\n+\t@Retention(RetentionPolicy.RUNTIME)\n+\t@AuthenticationPrincipal\n+\t@interface Property {\n+\n+\t\t@AliasFor(attribute = \"expression\", annotation = AuthenticationPrincipal.class)\n+\t\tString value() default \"id\";\n+\n+\t}\n+\n+\tprivate interface TestInterface {\n+\n+\t\tvoid showUserNoConcreteAnnotation(@Property(\"property\") String property);\n+\n+\t}\n+\n+\tprivate static class TestController implements TestInterface {\n+\n+\t\t@Override\n+\t\tpublic void showUserNoConcreteAnnotation(String user) {\n+\n+\t\t}\n+\n+\t}\n+\n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "spring-projects__spring-security-16159",
    "pr_id": 16159,
    "issue_id": 16153,
    "repo": "spring-projects/spring-security",
    "problem_statement": "contribute graalvm native image hints for resources needed in spring security 3.4\nsmall regression in that the following `Resource`s don't seem to exist when compiling to a graalvm native image \r\n\r\n\r\n```\r\n\r\npublic static DefaultResourcesFilter css() {\r\n    return new DefaultResourcesFilter(AntPathRequestMatcher.antMatcher(HttpMethod.GET, \"/default-ui.css\"), new ClassPathResource(\"org/springframework/security/default-ui.css\"), new MediaType(\"text\", \"css\", StandardCharsets.UTF_8));\r\n}\r\n\r\npublic static DefaultResourcesFilter webauthn() {\r\n    return new DefaultResourcesFilter(AntPathRequestMatcher.antMatcher(HttpMethod.GET, \"/login/webauthn.js\"), new ClassPathResource(\"org/springframework/security/spring-security-webauthn.js\"), new MediaType(\"text\", \"javascript\", StandardCharsets.UTF_8));\r\n\r\n```\r\n\r\nits easy to fix \r\n\r\n\r\n`@ImportRuntimehints(UiResourcesRuntimeHintsRegistrar.class)`\r\n\r\nand \r\n\r\n```\r\nstatic class UiResourcesRuntimeHintsRegistrar implements RuntimeHintsRegistrar {\r\n\r\n    @Override\r\n    public void registerHints(RuntimeHints hints, ClassLoader classLoader) {\r\n\r\n       var resources = Set.of(new ClassPathResource(\"org/springframework/security/spring-security-webauthn.js\"),\r\n             new ClassPathResource(\"org/springframework/security/default-ui.css\"));\r\n\r\n       for (var r : resources)\r\n          hints.resources().registerResource(r);\r\n\r\n    }\r\n\r\n}\r\n```\r\n\r\nit would be ideal if those hints were furnished as part of spring security, however ",
    "issue_word_count": 155,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "web/src/main/java/org/springframework/security/web/aot/hint/WebMvcSecurityRuntimeHints.java",
      "web/src/test/java/org/springframework/security/web/aot/hint/WebMvcSecurityRuntimeHintsTests.java"
    ],
    "pr_changed_test_files": [
      "web/src/test/java/org/springframework/security/web/aot/hint/WebMvcSecurityRuntimeHintsTests.java"
    ],
    "base_commit": "409d552ae0a78de4490002d6406f16d778e54052",
    "head_commit": "5fbf5ca372d5ed852781d5031ba386e05f5f4284",
    "repo_url": "https://github.com/spring-projects/spring-security/pull/16159",
    "swe_url": "https://swe-bench-plus.turing.com/repos/spring-projects__spring-security/16159",
    "dockerfile": "",
    "pr_merged_at": "2024-11-25T19:06:50.000Z",
    "patch": "diff --git a/web/src/main/java/org/springframework/security/web/aot/hint/WebMvcSecurityRuntimeHints.java b/web/src/main/java/org/springframework/security/web/aot/hint/WebMvcSecurityRuntimeHints.java\nindex 9d49bc72bdf..86df3618f27 100644\n--- a/web/src/main/java/org/springframework/security/web/aot/hint/WebMvcSecurityRuntimeHints.java\n+++ b/web/src/main/java/org/springframework/security/web/aot/hint/WebMvcSecurityRuntimeHints.java\n@@ -27,6 +27,7 @@\n  * {@link RuntimeHintsRegistrar} for WebMVC classes\n  *\n  * @author Marcus Da Coregio\n+ * @author Daniel Garnier-Moiroux\n  * @since 6.0\n  */\n class WebMvcSecurityRuntimeHints implements RuntimeHintsRegistrar {\n@@ -47,6 +48,12 @@ public void registerHints(RuntimeHints hints, ClassLoader classLoader) {\n \t\t\thints.resources().registerResource(css);\n \t\t}\n \n+\t\tClassPathResource webauthnJavascript = new ClassPathResource(\n+\t\t\t\t\"org/springframework/security/spring-security-webauthn.js\");\n+\t\tif (webauthnJavascript.exists()) {\n+\t\t\thints.resources().registerResource(webauthnJavascript);\n+\t\t}\n+\n \t}\n \n }\n",
    "test_patch": "diff --git a/web/src/test/java/org/springframework/security/web/aot/hint/WebMvcSecurityRuntimeHintsTests.java b/web/src/test/java/org/springframework/security/web/aot/hint/WebMvcSecurityRuntimeHintsTests.java\nindex 7ed25e570fb..180d10db48c 100644\n--- a/web/src/test/java/org/springframework/security/web/aot/hint/WebMvcSecurityRuntimeHintsTests.java\n+++ b/web/src/test/java/org/springframework/security/web/aot/hint/WebMvcSecurityRuntimeHintsTests.java\n@@ -68,4 +68,10 @@ void cssHasHints() {\n \t\t\t.accepts(this.hints);\n \t}\n \n+\t@Test\n+\tvoid webauthnJavascriptHasHints() {\n+\t\tassertThat(RuntimeHintsPredicates.resource()\n+\t\t\t.forResource(\"org/springframework/security/spring-security-webauthn.js\")).accepts(this.hints);\n+\t}\n+\n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "spring-projects__spring-security-16113",
    "pr_id": 16113,
    "issue_id": 16011,
    "repo": "spring-projects/spring-security",
    "problem_statement": "Fix conflicting bean names between @EnableWebSecurity and @EnableWebSocketSecurity\n**Describe the bug**\r\n```\r\n***************************\r\nAPPLICATION FAILED TO START\r\n***************************\r\n\r\nDescription:\r\n\r\nThe bean 'webAuthorizationManagerPostProcessor', defined in class path resource [org/springframework/security/config/annotation/web/configuration/ObservationConfiguration.class], could not be registered. A bean with that name has already been defined in class path resource [org/springframework/security/config/annotation/web/socket/WebSocketObservationConfiguration.class] and overriding is disabled.\r\n\r\nAction:\r\n\r\nConsider renaming one of the beans or enabling overriding by setting spring.main.allow-bean-definition-overriding=true\r\n```\r\n\r\nthe naming conflict is between:\r\n* https://github.com/spring-projects/spring-security/blob/6.4.0-RC1/config/src/main/java/org/springframework/security/config/annotation/web/configuration/ObservationConfiguration.java#L48\r\n* https://github.com/spring-projects/spring-security/blob/6.4.0-RC1/config/src/main/java/org/springframework/security/config/annotation/web/socket/WebSocketObservationConfiguration.java#L44\r\n\r\n**To Reproduce**\r\n* create an empty boot-3.4.0-RC1 app with spring-web, spring-security, spring-websocket\r\n* add `spring-security-messaging` as dependency\r\n* add `@EnableWebSocketSecurity`\r\n\r\n**Expected behavior**\r\n\r\napp starts\r\n\r\n**Sample**\r\n\r\nsample app will be referenced asap, thank you!",
    "issue_word_count": 178,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "config/src/main/java/org/springframework/security/config/annotation/rsocket/ReactiveObservationConfiguration.java",
      "config/src/main/java/org/springframework/security/config/annotation/web/socket/WebSocketObservationConfiguration.java",
      "config/src/test/java/org/springframework/security/config/annotation/web/socket/WebSocketMessageBrokerSecurityConfigurationTests.java"
    ],
    "pr_changed_test_files": [
      "config/src/test/java/org/springframework/security/config/annotation/web/socket/WebSocketMessageBrokerSecurityConfigurationTests.java"
    ],
    "base_commit": "30c9860fc3f93771d80efc596f32cf999f662036",
    "head_commit": "e57f0755556c1cda20e958afa9f97571674b03ca",
    "repo_url": "https://github.com/spring-projects/spring-security/pull/16113",
    "swe_url": "https://swe-bench-plus.turing.com/repos/spring-projects__spring-security/16113",
    "dockerfile": "",
    "pr_merged_at": "2024-11-20T20:28:06.000Z",
    "patch": "diff --git a/config/src/main/java/org/springframework/security/config/annotation/rsocket/ReactiveObservationConfiguration.java b/config/src/main/java/org/springframework/security/config/annotation/rsocket/ReactiveObservationConfiguration.java\nindex 18f6f03e8fb..14862d79b9f 100644\n--- a/config/src/main/java/org/springframework/security/config/annotation/rsocket/ReactiveObservationConfiguration.java\n+++ b/config/src/main/java/org/springframework/security/config/annotation/rsocket/ReactiveObservationConfiguration.java\n@@ -45,7 +45,7 @@ class ReactiveObservationConfiguration {\n \n \t@Bean\n \t@Role(BeanDefinition.ROLE_INFRASTRUCTURE)\n-\tstatic ObjectPostProcessor<ReactiveAuthorizationManager<ServerWebExchange>> webAuthorizationManagerPostProcessor(\n+\tstatic ObjectPostProcessor<ReactiveAuthorizationManager<ServerWebExchange>> rSocketAuthorizationManagerPostProcessor(\n \t\t\tObjectProvider<ObservationRegistry> registry, ObjectProvider<SecurityObservationSettings> predicate) {\n \t\treturn new ObjectPostProcessor<>() {\n \t\t\t@Override\n@@ -59,7 +59,7 @@ public ReactiveAuthorizationManager postProcess(ReactiveAuthorizationManager obj\n \n \t@Bean\n \t@Role(BeanDefinition.ROLE_INFRASTRUCTURE)\n-\tstatic ObjectPostProcessor<ReactiveAuthenticationManager> authenticationManagerPostProcessor(\n+\tstatic ObjectPostProcessor<ReactiveAuthenticationManager> rSocketAuthenticationManagerPostProcessor(\n \t\t\tObjectProvider<ObservationRegistry> registry, ObjectProvider<SecurityObservationSettings> predicate) {\n \t\treturn new ObjectPostProcessor<>() {\n \t\t\t@Override\n@@ -73,7 +73,7 @@ public ReactiveAuthenticationManager postProcess(ReactiveAuthenticationManager o\n \n \t@Bean\n \t@Role(BeanDefinition.ROLE_INFRASTRUCTURE)\n-\tstatic ObjectPostProcessor<WebFilterChainDecorator> filterChainDecoratorPostProcessor(\n+\tstatic ObjectPostProcessor<WebFilterChainDecorator> rSocketFilterChainDecoratorPostProcessor(\n \t\t\tObjectProvider<ObservationRegistry> registry, ObjectProvider<SecurityObservationSettings> predicate) {\n \t\treturn new ObjectPostProcessor<>() {\n \t\t\t@Override\n\ndiff --git a/config/src/main/java/org/springframework/security/config/annotation/web/socket/WebSocketObservationConfiguration.java b/config/src/main/java/org/springframework/security/config/annotation/web/socket/WebSocketObservationConfiguration.java\nindex 7d0fb806d59..341df742381 100644\n--- a/config/src/main/java/org/springframework/security/config/annotation/web/socket/WebSocketObservationConfiguration.java\n+++ b/config/src/main/java/org/springframework/security/config/annotation/web/socket/WebSocketObservationConfiguration.java\n@@ -41,7 +41,7 @@ class WebSocketObservationConfiguration {\n \n \t@Bean\n \t@Role(BeanDefinition.ROLE_INFRASTRUCTURE)\n-\tstatic ObjectPostProcessor<AuthorizationManager<Message<?>>> webAuthorizationManagerPostProcessor(\n+\tstatic ObjectPostProcessor<AuthorizationManager<Message<?>>> webSocketAuthorizationManagerPostProcessor(\n \t\t\tObjectProvider<ObservationRegistry> registry, ObjectProvider<SecurityObservationSettings> predicate) {\n \t\treturn new ObjectPostProcessor<>() {\n \t\t\t@Override\n",
    "test_patch": "diff --git a/config/src/test/java/org/springframework/security/config/annotation/web/socket/WebSocketMessageBrokerSecurityConfigurationTests.java b/config/src/test/java/org/springframework/security/config/annotation/web/socket/WebSocketMessageBrokerSecurityConfigurationTests.java\nindex 099207d0b5e..cf2d0358069 100644\n--- a/config/src/test/java/org/springframework/security/config/annotation/web/socket/WebSocketMessageBrokerSecurityConfigurationTests.java\n+++ b/config/src/test/java/org/springframework/security/config/annotation/web/socket/WebSocketMessageBrokerSecurityConfigurationTests.java\n@@ -68,6 +68,7 @@\n import org.springframework.security.authorization.AuthorizationDecision;\n import org.springframework.security.authorization.AuthorizationManager;\n import org.springframework.security.config.annotation.SecurityContextChangedListenerConfig;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n import org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry;\n import org.springframework.security.config.observation.SecurityObservationSettings;\n import org.springframework.security.core.Authentication;\n@@ -438,6 +439,12 @@ public void sendMessageWhenExcludeAuthorizationObservationsThenUnobserved() {\n \t\tverifyNoInteractions(observationHandler);\n \t}\n \n+\t// gh-16011\n+\t@Test\n+\tpublic void enableWebSocketSecurityWhenWebSocketSecurityUsedThenAutowires() {\n+\t\tloadConfig(WithWebSecurity.class);\n+\t}\n+\n \tprivate void assertHandshake(HttpServletRequest request) {\n \t\tTestHandshakeHandler handshakeHandler = this.context.getBean(TestHandshakeHandler.class);\n \t\tassertThatCsrfToken(handshakeHandler.attributes.get(CsrfToken.class.getName())).isEqualTo(this.token);\n@@ -489,6 +496,7 @@ private <T extends MessageChannel> T clientInboundChannel() {\n \n \tprivate void loadConfig(Class<?>... configs) {\n \t\tthis.context = new AnnotationConfigWebApplicationContext();\n+\t\tthis.context.setAllowBeanDefinitionOverriding(false);\n \t\tthis.context.register(configs);\n \t\tthis.context.setServletConfig(new MockServletConfig());\n \t\tthis.context.refresh();\n@@ -939,6 +947,13 @@ TestHandshakeHandler testHandshakeHandler() {\n \n \t}\n \n+\t@Configuration(proxyBeanMethods = false)\n+\t@EnableWebSecurity\n+\t@Import(WebSocketSecurityConfig.class)\n+\tstatic class WithWebSecurity {\n+\n+\t}\n+\n \t@Configuration\n \tstatic class SyncExecutorConfig {\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "spring-projects__spring-security-15978",
    "pr_id": 15978,
    "issue_id": 15948,
    "repo": "spring-projects/spring-security",
    "problem_statement": "RequestMatcherDelegatingAuthorizationManager should be post-processable\nCurrently there is not way enforce the [Principle of least privilege](https://en.wikipedia.org/wiki/Principle_of_least_privilege) with respect to Handler Mappings and method security, e.g. PreAuthorize. \r\n\r\nSome [frameworks](http://github.com/grails/spring-security-core) built on top of Spring Security accomplish this by providing a [AnnotationFilterInvocationDefinition](https://github.com/grails/grails-spring-security-core/blob/7.0.x/plugin/src/main/groovy/grails/plugin/springsecurity/web/access/intercept/AnnotationFilterInvocationDefinition.groovy) to the [FilterSecurityInterceptor](https://github.com/spring-projects/spring-security/blob/dd94b119cab4945b7f1ddae0c46faf94100df95a/web/src/main/java/org/springframework/security/web/access/intercept/FilterSecurityInterceptor.java#L47-L5) that checks both the request mappings and method level annotations.\r\n\r\nThis approach, however, will no longer be possible in Spring Security 7 due to the fact that the FilterSecurityInterceptor is set for removal in favor of the AuthorizationFilter.\r\n\r\nWhile it is possible to create an instance of the AuthorizationFilter with its own [AuthorizationManager](https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/authorization/AuthorizationManager.html), it is impossible to utilize the convenient creation of a RequestMatcherDelegatingAuthorizationManager.  \r\n\r\nA very simple solution for achieving the  Principle of least privilege while honoring method level overrides, would be to instantiate a AuthorizationFilter with a wrapped RequestMatcherDelegatingAuthorizationManager that first checks the authorization level of request mapping and then does the method level check annotation check as an override.  This is not currently possible because [RequestMatcherDelegatingAuthorizationManager](https://github.com/spring-projects/spring-security/blob/7a1718887c0c10149b1f5057a7b532320f136b0a/web/src/main/java/org/springframework/security/web/access/intercept/RequestMatcherDelegatingAuthorizationManager.java) can not be built independently to the AuthorizationFilter, nor can it be customized to perform further checks.\r\n\r\nMaking it extensible or allowing it to be built outside of the AuthorizationFilter would enable the new approach to be accomplished and promote code reuse.  The goal here is to utilize the RequestMatcherDelegatingAuthorizationManager when creating a custom approach to securing requests that involves method level security.\r\n\r\n",
    "issue_word_count": 322,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "config/src/main/java/org/springframework/security/config/annotation/web/configurers/AuthorizeHttpRequestsConfigurer.java",
      "config/src/test/java/org/springframework/security/config/annotation/web/configurers/AuthorizeHttpRequestsConfigurerTests.java"
    ],
    "pr_changed_test_files": [
      "config/src/test/java/org/springframework/security/config/annotation/web/configurers/AuthorizeHttpRequestsConfigurerTests.java"
    ],
    "base_commit": "e9bbe31b1a4d4d1ed0b3d2c1d14db60cba92a2d6",
    "head_commit": "b3d072686fafe24d223dcc1e488aeb0adfa712ae",
    "repo_url": "https://github.com/spring-projects/spring-security/pull/15978",
    "swe_url": "https://swe-bench-plus.turing.com/repos/spring-projects__spring-security/15978",
    "dockerfile": "",
    "pr_merged_at": "2024-10-23T22:15:10.000Z",
    "patch": "diff --git a/config/src/main/java/org/springframework/security/config/annotation/web/configurers/AuthorizeHttpRequestsConfigurer.java b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/AuthorizeHttpRequestsConfigurer.java\nindex 1de4750a494..0d8ee818d7d 100644\n--- a/config/src/main/java/org/springframework/security/config/annotation/web/configurers/AuthorizeHttpRequestsConfigurer.java\n+++ b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/AuthorizeHttpRequestsConfigurer.java\n@@ -171,7 +171,8 @@ private AuthorizationManager<HttpServletRequest> createAuthorizationManager() {\n \t\t\tAssert.state(this.mappingCount > 0,\n \t\t\t\t\t\"At least one mapping is required (for example, authorizeHttpRequests().anyRequest().authenticated())\");\n \t\t\tObservationRegistry registry = getObservationRegistry();\n-\t\t\tRequestMatcherDelegatingAuthorizationManager manager = postProcess(this.managerBuilder.build());\n+\t\t\tAuthorizationManager<HttpServletRequest> manager = postProcess(\n+\t\t\t\t\t(AuthorizationManager<HttpServletRequest>) this.managerBuilder.build());\n \t\t\tif (registry.isNoop()) {\n \t\t\t\treturn manager;\n \t\t\t}\n",
    "test_patch": "diff --git a/config/src/test/java/org/springframework/security/config/annotation/web/configurers/AuthorizeHttpRequestsConfigurerTests.java b/config/src/test/java/org/springframework/security/config/annotation/web/configurers/AuthorizeHttpRequestsConfigurerTests.java\nindex c2d99042b02..d380703bcdd 100644\n--- a/config/src/test/java/org/springframework/security/config/annotation/web/configurers/AuthorizeHttpRequestsConfigurerTests.java\n+++ b/config/src/test/java/org/springframework/security/config/annotation/web/configurers/AuthorizeHttpRequestsConfigurerTests.java\n@@ -153,6 +153,7 @@ public void configureWhenObjectPostProcessorRegisteredThenInvokedOnAuthorization\n \t\tthis.spring.register(ObjectPostProcessorConfig.class).autowire();\n \t\tObjectPostProcessor objectPostProcessor = this.spring.getContext().getBean(ObjectPostProcessor.class);\n \t\tverify(objectPostProcessor).postProcess(any(RequestMatcherDelegatingAuthorizationManager.class));\n+\t\tverify(objectPostProcessor).postProcess(any(AuthorizationManager.class));\n \t\tverify(objectPostProcessor).postProcess(any(AuthorizationFilter.class));\n \t}\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "spring-projects__spring-security-15853",
    "pr_id": 15853,
    "issue_id": 15852,
    "repo": "spring-projects/spring-security",
    "problem_statement": "JwtDecoderProviderConfigurationUtils incorrectly handles issuer URI\n**Describe the bug**\r\n`JwtDecoderProviderConfigurationUtils` use `UriComponentsBuilder` to modify a `URI` in `oidc`, `oidcRfc8414` and `oauth`.\r\nDue to a known issue in UriComponents builder (https://github.com/spring-projects/spring-framework/issues/27774), this produces invalid URIs in the cases where the URI contains an `authority`, but no `host`.\r\nThese still come up in practice though, e.g. see the following partial backtrace:\r\n\r\n```\r\nCaused by: java.lang.IllegalArgumentException: Unable to resolve the Configuration with the provided Issuer of \"http://elated_sutherland:8080/auth/realms/my-realm\"\r\n        at org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils.getConfiguration(JwtDecoderProviderConfigurationUtils.java:178)\r\n        at org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils.getConfigurationForIssuerLocation(JwtDecoderProviderConfigurationUtils.java:90)\r\n        at org.springframework.security.oauth2.jwt.NimbusJwtDecoder.lambda$withIssuerLocation$2(NimbusJwtDecoder.java:226)\r\n        at org.springframework.security.oauth2.jwt.NimbusJwtDecoder$JwkSetUriJwtDecoderBuilder.processor(NimbusJwtDecoder.java:389)\r\n        at org.springframework.security.oauth2.jwt.NimbusJwtDecoder$JwkSetUriJwtDecoderBuilder.build(NimbusJwtDecoder.java:405)\r\n        at org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerJwtConfiguration$JwtDecoderConfiguration.lambda$jwtDecoderByIssuerUri$3(OAuth2ResourceServerJwtConfiguration.java:159)\r\n        at org.springframework.security.oauth2.jwt.SupplierJwtDecoder.lambda$new$0(SupplierJwtDecoder.java:36)\r\n        ... 88 common frames omitted\r\nCaused by: org.springframework.web.client.ResourceAccessException: I/O error on GET request for \"http:/auth/realms/my-realm/.well-known/openid-configuration\": Failed to select a proxy\r\n        at org.springframework.web.client.RestTemplate.createResourceAccessException(RestTemplate.java:915)\r\n        at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:895)\r\n        at org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:740)\r\n        at org.springframework.security.oauth2.jwt.JwtDecoderProviderConfigurationUtils.getConfiguration(JwtDecoderProviderConfigurationUtils.java:167)\r\n        ... 94 common frames omitted\r\n```\r\n\r\n**To Reproduce**\r\n```java\r\nimport org.springframework.web.util.UriComponentsBuilder;\r\n\r\nimport java.net.URI;\r\nimport java.util.Collections;\r\n\r\nString rawUrl = \"http://elated_sutherland:8080/auth/realms/my-realm\";\r\nURI uri = URI.create(rawUrl);\r\nSystem.out.println(uri.getAuthority());\r\nSystem.out.println(uri.getHost());\r\nURI newUrl = UriComponentsBuilder.fromUri(uri)\r\n  .replacePath(uri.getPath() + \"/.well-known/openid-configuration\")\r\n  .build(Collections.emptyMap());\r\nSystem.out.println(newUrl);\r\n```\r\n\r\nshows what happens. It outputs:\r\n```\r\nelated_sutherland:8080\r\nnull\r\nhttp:/auth/realms/my-realm/.well-known/openid-configuration\r\n```\r\n\r\n**Expected behavior**\r\nThe correct oidc URI should be generated: `http://elated_sutherland:8080/auth/realms/my-realm/.well-known/openid-configuration`.",
    "issue_word_count": 352,
    "test_files_count": 3,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/registration/ClientRegistrations.java",
      "oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/registration/ClientRegistrationsTests.java",
      "oauth2/oauth2-jose/src/main/java/org/springframework/security/oauth2/jwt/JwtDecoderProviderConfigurationUtils.java",
      "oauth2/oauth2-jose/src/main/java/org/springframework/security/oauth2/jwt/ReactiveJwtDecoderProviderConfigurationUtils.java",
      "oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/JwtDecoderProviderConfigurationUtilsTests.java",
      "oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/ReactiveJwtDecoderProviderConfigurationUtilsTests.java"
    ],
    "pr_changed_test_files": [
      "oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/registration/ClientRegistrationsTests.java",
      "oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/JwtDecoderProviderConfigurationUtilsTests.java",
      "oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/ReactiveJwtDecoderProviderConfigurationUtilsTests.java"
    ],
    "base_commit": "43ddf73ddbba2ca7f331bfa4f60afe495b5d4ddd",
    "head_commit": "49e5d3796e019d8ba03c68481e7c1a4327cad751",
    "repo_url": "https://github.com/spring-projects/spring-security/pull/15853",
    "swe_url": "https://swe-bench-plus.turing.com/repos/spring-projects__spring-security/15853",
    "dockerfile": "",
    "pr_merged_at": "2025-02-20T23:54:24.000Z",
    "patch": "diff --git a/oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/registration/ClientRegistrations.java b/oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/registration/ClientRegistrations.java\nindex 91517d640a5..54efef5107d 100644\n--- a/oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/registration/ClientRegistrations.java\n+++ b/oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/registration/ClientRegistrations.java\n@@ -17,7 +17,6 @@\n package org.springframework.security.oauth2.client.registration;\n \n import java.net.URI;\n-import java.util.Collections;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n@@ -37,6 +36,7 @@\n import org.springframework.util.Assert;\n import org.springframework.web.client.HttpClientErrorException;\n import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.util.UriComponents;\n import org.springframework.web.util.UriComponentsBuilder;\n \n /**\n@@ -145,7 +145,7 @@ public static ClientRegistration.Builder fromOidcConfiguration(Map<String, Objec\n \t */\n \tpublic static ClientRegistration.Builder fromOidcIssuerLocation(String issuer) {\n \t\tAssert.hasText(issuer, \"issuer cannot be empty\");\n-\t\treturn getBuilder(issuer, oidc(URI.create(issuer)));\n+\t\treturn getBuilder(issuer, oidc(issuer));\n \t}\n \n \t/**\n@@ -188,21 +188,17 @@ public static ClientRegistration.Builder fromOidcIssuerLocation(String issuer) {\n \t */\n \tpublic static ClientRegistration.Builder fromIssuerLocation(String issuer) {\n \t\tAssert.hasText(issuer, \"issuer cannot be empty\");\n-\t\tURI uri = URI.create(issuer);\n-\t\treturn getBuilder(issuer, oidc(uri), oidcRfc8414(uri), oauth(uri));\n+\t\treturn getBuilder(issuer, oidc(issuer), oidcRfc8414(issuer), oauth(issuer));\n \t}\n \n-\tprivate static Supplier<ClientRegistration.Builder> oidc(URI issuer) {\n-\t\t// @formatter:off\n-\t\tURI uri = UriComponentsBuilder.fromUri(issuer)\n-\t\t\t\t.replacePath(issuer.getPath() + OIDC_METADATA_PATH)\n-\t\t\t\t.build(Collections.emptyMap());\n+\tstatic Supplier<ClientRegistration.Builder> oidc(String issuer) {\n+\t\tUriComponents uri = oidcUri(issuer);\n \t\t// @formatter:on\n \t\treturn () -> {\n-\t\t\tRequestEntity<Void> request = RequestEntity.get(uri).build();\n+\t\t\tRequestEntity<Void> request = RequestEntity.get(uri.toUriString()).build();\n \t\t\tMap<String, Object> configuration = rest.exchange(request, typeReference).getBody();\n \t\t\tOIDCProviderMetadata metadata = parse(configuration, OIDCProviderMetadata::parse);\n-\t\t\tClientRegistration.Builder builder = withProviderConfiguration(metadata, issuer.toASCIIString())\n+\t\t\tClientRegistration.Builder builder = withProviderConfiguration(metadata, issuer)\n \t\t\t\t.jwkSetUri(metadata.getJWKSetURI().toASCIIString());\n \t\t\tif (metadata.getUserInfoEndpointURI() != null) {\n \t\t\t\tbuilder.userInfoUri(metadata.getUserInfoEndpointURI().toASCIIString());\n@@ -211,30 +207,48 @@ private static Supplier<ClientRegistration.Builder> oidc(URI issuer) {\n \t\t};\n \t}\n \n-\tprivate static Supplier<ClientRegistration.Builder> oidcRfc8414(URI issuer) {\n+\tstatic UriComponents oidcUri(String issuer) {\n+\t\tUriComponents uri = UriComponentsBuilder.fromUriString(issuer).build();\n \t\t// @formatter:off\n-\t\tURI uri = UriComponentsBuilder.fromUri(issuer)\n-\t\t\t\t.replacePath(OIDC_METADATA_PATH + issuer.getPath())\n-\t\t\t\t.build(Collections.emptyMap());\n+\t\treturn UriComponentsBuilder.newInstance().uriComponents(uri)\n+\t\t\t\t.replacePath(uri.getPath() + OIDC_METADATA_PATH)\n+\t\t\t\t.build();\n+\t}\n+\n+\tstatic Supplier<ClientRegistration.Builder> oidcRfc8414(String issuer) {\n+\t\tUriComponents uri = oidcRfc8414Uri(issuer);\n \t\t// @formatter:on\n \t\treturn getRfc8414Builder(issuer, uri);\n \t}\n \n-\tprivate static Supplier<ClientRegistration.Builder> oauth(URI issuer) {\n+\tstatic UriComponents oidcRfc8414Uri(String issuer) {\n+\t\tUriComponents uri = UriComponentsBuilder.fromUriString(issuer).build();\n \t\t// @formatter:off\n-\t\tURI uri = UriComponentsBuilder.fromUri(issuer)\n-\t\t\t\t.replacePath(OAUTH_METADATA_PATH + issuer.getPath())\n-\t\t\t\t.build(Collections.emptyMap());\n-\t\t// @formatter:on\n+\t\treturn UriComponentsBuilder.newInstance().uriComponents(uri)\n+\t\t\t\t.replacePath(OIDC_METADATA_PATH + uri.getPath())\n+\t\t\t\t.build();\n+\t}\n+\n+\tstatic Supplier<ClientRegistration.Builder> oauth(String issuer) {\n+\t\tUriComponents uri = oauthUri(issuer);\n \t\treturn getRfc8414Builder(issuer, uri);\n \t}\n \n-\tprivate static Supplier<ClientRegistration.Builder> getRfc8414Builder(URI issuer, URI uri) {\n+\tstatic UriComponents oauthUri(String issuer) {\n+\t\tUriComponents uri = UriComponentsBuilder.fromUriString(issuer).build();\n+\t\t// @formatter:off\n+\t\treturn UriComponentsBuilder.newInstance().uriComponents(uri)\n+\t\t\t\t.replacePath(OAUTH_METADATA_PATH + uri.getPath())\n+\t\t\t\t.build();\n+\t\t// @formatter:on\n+\t}\n+\n+\tprivate static Supplier<ClientRegistration.Builder> getRfc8414Builder(String issuer, UriComponents uri) {\n \t\treturn () -> {\n-\t\t\tRequestEntity<Void> request = RequestEntity.get(uri).build();\n+\t\t\tRequestEntity<Void> request = RequestEntity.get(uri.toUriString()).build();\n \t\t\tMap<String, Object> configuration = rest.exchange(request, typeReference).getBody();\n \t\t\tAuthorizationServerMetadata metadata = parse(configuration, AuthorizationServerMetadata::parse);\n-\t\t\tClientRegistration.Builder builder = withProviderConfiguration(metadata, issuer.toASCIIString());\n+\t\t\tClientRegistration.Builder builder = withProviderConfiguration(metadata, issuer);\n \t\t\tURI jwkSetUri = metadata.getJWKSetURI();\n \t\t\tif (jwkSetUri != null) {\n \t\t\t\tbuilder.jwkSetUri(jwkSetUri.toASCIIString());\n\ndiff --git a/oauth2/oauth2-jose/src/main/java/org/springframework/security/oauth2/jwt/JwtDecoderProviderConfigurationUtils.java b/oauth2/oauth2-jose/src/main/java/org/springframework/security/oauth2/jwt/JwtDecoderProviderConfigurationUtils.java\nindex e69286c2d67..d901743e371 100644\n--- a/oauth2/oauth2-jose/src/main/java/org/springframework/security/oauth2/jwt/JwtDecoderProviderConfigurationUtils.java\n+++ b/oauth2/oauth2-jose/src/main/java/org/springframework/security/oauth2/jwt/JwtDecoderProviderConfigurationUtils.java\n@@ -16,8 +16,6 @@\n \n package org.springframework.security.oauth2.jwt;\n \n-import java.net.URI;\n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n@@ -45,6 +43,7 @@\n import org.springframework.web.client.HttpClientErrorException;\n import org.springframework.web.client.RestOperations;\n import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.util.UriComponents;\n import org.springframework.web.util.UriComponentsBuilder;\n \n /**\n@@ -82,12 +81,11 @@ private JwtDecoderProviderConfigurationUtils() {\n \t}\n \n \tstatic Map<String, Object> getConfigurationForOidcIssuerLocation(String oidcIssuerLocation) {\n-\t\treturn getConfiguration(oidcIssuerLocation, rest, oidc(URI.create(oidcIssuerLocation)));\n+\t\treturn getConfiguration(oidcIssuerLocation, rest, oidc(oidcIssuerLocation));\n \t}\n \n \tstatic Map<String, Object> getConfigurationForIssuerLocation(String issuer, RestOperations rest) {\n-\t\tURI uri = URI.create(issuer);\n-\t\treturn getConfiguration(issuer, rest, oidc(uri), oidcRfc8414(uri), oauth(uri));\n+\t\treturn getConfiguration(issuer, rest, oidc(issuer), oidcRfc8414(issuer), oauth(issuer));\n \t}\n \n \tstatic Map<String, Object> getConfigurationForIssuerLocation(String issuer) {\n@@ -159,11 +157,11 @@ private static String getMetadataIssuer(Map<String, Object> configuration) {\n \t\treturn \"(unavailable)\";\n \t}\n \n-\tprivate static Map<String, Object> getConfiguration(String issuer, RestOperations rest, URI... uris) {\n+\tprivate static Map<String, Object> getConfiguration(String issuer, RestOperations rest, UriComponents... uris) {\n \t\tString errorMessage = \"Unable to resolve the Configuration with the provided Issuer of \" + \"\\\"\" + issuer + \"\\\"\";\n-\t\tfor (URI uri : uris) {\n+\t\tfor (UriComponents uri : uris) {\n \t\t\ttry {\n-\t\t\t\tRequestEntity<Void> request = RequestEntity.get(uri).build();\n+\t\t\t\tRequestEntity<Void> request = RequestEntity.get(uri.toUriString()).build();\n \t\t\t\tResponseEntity<Map<String, Object>> response = rest.exchange(request, STRING_OBJECT_MAP);\n \t\t\t\tMap<String, Object> configuration = response.getBody();\n \t\t\t\tAssert.isTrue(configuration.get(\"jwks_uri\") != null, \"The public JWK set URI must not be null\");\n@@ -183,27 +181,30 @@ private static Map<String, Object> getConfiguration(String issuer, RestOperation\n \t\tthrow new IllegalArgumentException(errorMessage);\n \t}\n \n-\tprivate static URI oidc(URI issuer) {\n+\tstatic UriComponents oidc(String issuer) {\n+\t\tUriComponents uri = UriComponentsBuilder.fromUriString(issuer).build();\n \t\t// @formatter:off\n-\t\treturn UriComponentsBuilder.fromUri(issuer)\n-\t\t\t\t.replacePath(issuer.getPath() + OIDC_METADATA_PATH)\n-\t\t\t\t.build(Collections.emptyMap());\n+\t\treturn UriComponentsBuilder.newInstance().uriComponents(uri)\n+\t\t\t\t.replacePath(uri.getPath() + OIDC_METADATA_PATH)\n+\t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n \n-\tprivate static URI oidcRfc8414(URI issuer) {\n+\tstatic UriComponents oidcRfc8414(String issuer) {\n+\t\tUriComponents uri = UriComponentsBuilder.fromUriString(issuer).build();\n \t\t// @formatter:off\n-\t\treturn UriComponentsBuilder.fromUri(issuer)\n-\t\t\t\t.replacePath(OIDC_METADATA_PATH + issuer.getPath())\n-\t\t\t\t.build(Collections.emptyMap());\n+\t\treturn UriComponentsBuilder.newInstance().uriComponents(uri)\n+\t\t\t\t.replacePath(OIDC_METADATA_PATH + uri.getPath())\n+\t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n \n-\tprivate static URI oauth(URI issuer) {\n+\tstatic UriComponents oauth(String issuer) {\n+\t\tUriComponents uri = UriComponentsBuilder.fromUriString(issuer).build();\n \t\t// @formatter:off\n-\t\treturn UriComponentsBuilder.fromUri(issuer)\n-\t\t\t\t.replacePath(OAUTH_METADATA_PATH + issuer.getPath())\n-\t\t\t\t.build(Collections.emptyMap());\n+\t\treturn UriComponentsBuilder.newInstance().uriComponents(uri)\n+\t\t\t\t.replacePath(OAUTH_METADATA_PATH + uri.getPath())\n+\t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n \n\ndiff --git a/oauth2/oauth2-jose/src/main/java/org/springframework/security/oauth2/jwt/ReactiveJwtDecoderProviderConfigurationUtils.java b/oauth2/oauth2-jose/src/main/java/org/springframework/security/oauth2/jwt/ReactiveJwtDecoderProviderConfigurationUtils.java\nindex 7b0b98e6eed..d9506d900df 100644\n--- a/oauth2/oauth2-jose/src/main/java/org/springframework/security/oauth2/jwt/ReactiveJwtDecoderProviderConfigurationUtils.java\n+++ b/oauth2/oauth2-jose/src/main/java/org/springframework/security/oauth2/jwt/ReactiveJwtDecoderProviderConfigurationUtils.java\n@@ -16,8 +16,6 @@\n \n package org.springframework.security.oauth2.jwt;\n \n-import java.net.URI;\n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n@@ -41,6 +39,7 @@\n import org.springframework.util.Assert;\n import org.springframework.web.reactive.function.client.WebClient;\n import org.springframework.web.reactive.function.client.WebClientResponseException;\n+import org.springframework.web.util.UriComponents;\n import org.springframework.web.util.UriComponentsBuilder;\n \n final class ReactiveJwtDecoderProviderConfigurationUtils {\n@@ -93,38 +92,40 @@ else if (jwk.getKeyType() == KeyType.EC) {\n \t}\n \n \tstatic Mono<Map<String, Object>> getConfigurationForIssuerLocation(String issuer, WebClient web) {\n-\t\tURI uri = URI.create(issuer);\n-\t\treturn getConfiguration(issuer, web, oidc(uri), oidcRfc8414(uri), oauth(uri));\n+\t\treturn getConfiguration(issuer, web, oidc(issuer), oidcRfc8414(issuer), oauth(issuer));\n \t}\n \n-\tprivate static URI oidc(URI issuer) {\n+\tstatic UriComponents oidc(String issuer) {\n+\t\tUriComponents uri = UriComponentsBuilder.fromUriString(issuer).build();\n \t\t// @formatter:off\n-\t\treturn UriComponentsBuilder.fromUri(issuer)\n-\t\t\t\t.replacePath(issuer.getPath() + OIDC_METADATA_PATH)\n-\t\t\t\t.build(Collections.emptyMap());\n+\t\treturn UriComponentsBuilder.newInstance().uriComponents(uri)\n+\t\t\t\t.replacePath(uri.getPath() + OIDC_METADATA_PATH)\n+\t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n \n-\tprivate static URI oidcRfc8414(URI issuer) {\n+\tstatic UriComponents oidcRfc8414(String issuer) {\n+\t\tUriComponents uri = UriComponentsBuilder.fromUriString(issuer).build();\n \t\t// @formatter:off\n-\t\treturn UriComponentsBuilder.fromUri(issuer)\n-\t\t\t\t.replacePath(OIDC_METADATA_PATH + issuer.getPath())\n-\t\t\t\t.build(Collections.emptyMap());\n+\t\treturn UriComponentsBuilder.newInstance().uriComponents(uri)\n+\t\t\t\t.replacePath(OIDC_METADATA_PATH + uri.getPath())\n+\t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n \n-\tprivate static URI oauth(URI issuer) {\n+\tstatic UriComponents oauth(String issuer) {\n+\t\tUriComponents uri = UriComponentsBuilder.fromUriString(issuer).build();\n \t\t// @formatter:off\n-\t\treturn UriComponentsBuilder.fromUri(issuer)\n-\t\t\t\t.replacePath(OAUTH_METADATA_PATH + issuer.getPath())\n-\t\t\t\t.build(Collections.emptyMap());\n+\t\treturn UriComponentsBuilder.newInstance().uriComponents(uri)\n+\t\t\t\t.replacePath(OAUTH_METADATA_PATH + uri.getPath())\n+\t\t\t\t.build();\n \t\t// @formatter:on\n \t}\n \n-\tprivate static Mono<Map<String, Object>> getConfiguration(String issuer, WebClient web, URI... uris) {\n+\tprivate static Mono<Map<String, Object>> getConfiguration(String issuer, WebClient web, UriComponents... uris) {\n \t\tString errorMessage = \"Unable to resolve the Configuration with the provided Issuer of \" + \"\\\"\" + issuer + \"\\\"\";\n \t\treturn Flux.just(uris)\n-\t\t\t.concatMap((uri) -> web.get().uri(uri).retrieve().bodyToMono(STRING_OBJECT_MAP))\n+\t\t\t.concatMap((uri) -> web.get().uri(uri.toUriString()).retrieve().bodyToMono(STRING_OBJECT_MAP))\n \t\t\t.flatMap((configuration) -> {\n \t\t\t\tif (configuration.get(\"jwks_uri\") == null) {\n \t\t\t\t\treturn Mono.error(() -> new IllegalArgumentException(\"The public JWK set URI must not be null\"));\n",
    "test_patch": "diff --git a/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/registration/ClientRegistrationsTests.java b/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/registration/ClientRegistrationsTests.java\nindex 59c0fb05288..f66fe394548 100644\n--- a/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/registration/ClientRegistrationsTests.java\n+++ b/oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/registration/ClientRegistrationsTests.java\n@@ -34,6 +34,7 @@\n import org.springframework.http.MediaType;\n import org.springframework.security.oauth2.core.AuthorizationGrantType;\n import org.springframework.security.oauth2.core.ClientAuthenticationMethod;\n+import org.springframework.web.util.UriComponents;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n@@ -569,6 +570,17 @@ public void issuerWhenOidcConfigurationTlsClientAuthMethodThenSuccess() throws E\n \t\t\t.isEqualTo(ClientAuthenticationMethod.CLIENT_SECRET_BASIC);\n \t}\n \n+\t// gh-15852\n+\t@Test\n+\tpublic void oidcWhenHostContainsUnderscoreThenRetains() {\n+\t\tUriComponents oidc = ClientRegistrations.oidcUri(\"https://elated_sutherland:8080/path\");\n+\t\tassertThat(oidc.getHost()).isEqualTo(\"elated_sutherland\");\n+\t\tUriComponents oauth = ClientRegistrations.oauthUri(\"https://elated_sutherland:8080/path\");\n+\t\tassertThat(oauth.getHost()).isEqualTo(\"elated_sutherland\");\n+\t\tUriComponents oidcRfc8414 = ClientRegistrations.oidcRfc8414Uri(\"https://elated_sutherland:8080/path\");\n+\t\tassertThat(oidcRfc8414.getHost()).isEqualTo(\"elated_sutherland\");\n+\t}\n+\n \tprivate ClientRegistration.Builder registration(String path) throws Exception {\n \t\tthis.issuer = createIssuerFromServer(path);\n \t\tthis.response.put(\"issuer\", this.issuer);\n\ndiff --git a/oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/JwtDecoderProviderConfigurationUtilsTests.java b/oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/JwtDecoderProviderConfigurationUtilsTests.java\nindex 1b88d6f3f35..ec87e7a1de1 100644\n--- a/oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/JwtDecoderProviderConfigurationUtilsTests.java\n+++ b/oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/JwtDecoderProviderConfigurationUtilsTests.java\n@@ -35,6 +35,7 @@\n import org.springframework.security.oauth2.jose.TestKeys;\n import org.springframework.security.oauth2.jose.jws.JwsAlgorithms;\n import org.springframework.security.oauth2.jose.jws.SignatureAlgorithm;\n+import org.springframework.web.util.UriComponents;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n@@ -90,4 +91,16 @@ public void getSignatureAlgorithmsWhenAlgorithmThenParses() throws Exception {\n \t\tassertThat(algorithms).containsOnly(SignatureAlgorithm.RS256);\n \t}\n \n+\t// gh-15852\n+\t@Test\n+\tpublic void oidcWhenHostContainsUnderscoreThenRetains() {\n+\t\tUriComponents oidc = JwtDecoderProviderConfigurationUtils.oidc(\"https://elated_sutherland:8080/path\");\n+\t\tassertThat(oidc.getHost()).isEqualTo(\"elated_sutherland\");\n+\t\tUriComponents oauth = JwtDecoderProviderConfigurationUtils.oauth(\"https://elated_sutherland:8080/path\");\n+\t\tassertThat(oauth.getHost()).isEqualTo(\"elated_sutherland\");\n+\t\tUriComponents oidcRfc8414 = JwtDecoderProviderConfigurationUtils\n+\t\t\t.oidcRfc8414(\"https://elated_sutherland:8080/path\");\n+\t\tassertThat(oidcRfc8414.getHost()).isEqualTo(\"elated_sutherland\");\n+\t}\n+\n }\n\ndiff --git a/oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/ReactiveJwtDecoderProviderConfigurationUtilsTests.java b/oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/ReactiveJwtDecoderProviderConfigurationUtilsTests.java\nindex 30a0affd144..12ccd7c46fb 100644\n--- a/oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/ReactiveJwtDecoderProviderConfigurationUtilsTests.java\n+++ b/oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/ReactiveJwtDecoderProviderConfigurationUtilsTests.java\n@@ -37,6 +37,7 @@\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.MediaType;\n import org.springframework.web.reactive.function.client.WebClient;\n+import org.springframework.web.util.UriComponents;\n import org.springframework.web.util.UriComponentsBuilder;\n \n import static org.assertj.core.api.Assertions.assertThat;\n@@ -227,6 +228,18 @@ public void issuerWhenOidcFallbackRequestedIssuerIsUnresponsiveThenThrowsIllegal\n \t\t// @formatter:on\n \t}\n \n+\t// gh-15852\n+\t@Test\n+\tpublic void oidcWhenHostContainsUnderscoreThenRetains() {\n+\t\tUriComponents oidc = ReactiveJwtDecoderProviderConfigurationUtils.oidc(\"https://elated_sutherland:8080/path\");\n+\t\tassertThat(oidc.getHost()).isEqualTo(\"elated_sutherland\");\n+\t\tUriComponents oauth = ReactiveJwtDecoderProviderConfigurationUtils.oauth(\"https://elated_sutherland:8080/path\");\n+\t\tassertThat(oauth.getHost()).isEqualTo(\"elated_sutherland\");\n+\t\tUriComponents oidcRfc8414 = ReactiveJwtDecoderProviderConfigurationUtils\n+\t\t\t.oidcRfc8414(\"https://elated_sutherland:8080/path\");\n+\t\tassertThat(oidcRfc8414.getHost()).isEqualTo(\"elated_sutherland\");\n+\t}\n+\n \tprivate void prepareConfigurationResponse() {\n \t\tString body = String.format(DEFAULT_RESPONSE_TEMPLATE, this.issuer, this.issuer);\n \t\tprepareConfigurationResponse(body);\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "spring-projects__spring-security-15816",
    "pr_id": 15816,
    "issue_id": 15805,
    "repo": "spring-projects/spring-security",
    "problem_statement": "Favor ObjectProvider over custom getBeanOrNull method\nInternal to many of Spring Security's configuration classes is a technique for ensuring that it only uses beans with a unique instance in the application context.\r\n\r\nSpring Framework's `ObjectProvider` exposes an API for this kind of thing and it would be interesting to see how many places we could replace this custom code using `ApplicationContext#getBeanProvider`.",
    "issue_word_count": 64,
    "test_files_count": 1,
    "non_test_files_count": 24,
    "pr_changed_files": [
      "config/src/main/java/org/springframework/security/config/annotation/authentication/configuration/AuthenticationConfiguration.java",
      "config/src/main/java/org/springframework/security/config/annotation/authentication/configuration/InitializeUserDetailsBeanManagerConfigurer.java",
      "config/src/main/java/org/springframework/security/config/annotation/method/configuration/GlobalMethodSecurityConfiguration.java",
      "config/src/main/java/org/springframework/security/config/annotation/rsocket/RSocketSecurity.java",
      "config/src/main/java/org/springframework/security/config/annotation/web/builders/HttpSecurity.java",
      "config/src/main/java/org/springframework/security/config/annotation/web/configuration/HttpSecurityConfiguration.java",
      "config/src/main/java/org/springframework/security/config/annotation/web/configurers/ExpressionUrlAuthorizationConfigurer.java",
      "config/src/main/java/org/springframework/security/config/annotation/web/configurers/RememberMeConfigurer.java",
      "config/src/main/java/org/springframework/security/config/annotation/web/configurers/RequestCacheConfigurer.java",
      "config/src/main/java/org/springframework/security/config/annotation/web/configurers/ServletApiConfigurer.java",
      "config/src/main/java/org/springframework/security/config/annotation/web/configurers/SessionManagementConfigurer.java",
      "config/src/main/java/org/springframework/security/config/annotation/web/configurers/X509Configurer.java",
      "config/src/main/java/org/springframework/security/config/annotation/web/configurers/oauth2/client/OAuth2ClientConfigurer.java",
      "config/src/main/java/org/springframework/security/config/annotation/web/configurers/oauth2/client/OAuth2LoginConfigurer.java",
      "config/src/main/java/org/springframework/security/config/annotation/web/configurers/oauth2/client/OidcLogoutConfigurer.java",
      "config/src/main/java/org/springframework/security/config/annotation/web/configurers/ott/OneTimeTokenLoginConfigurer.java",
      "config/src/main/java/org/springframework/security/config/annotation/web/configurers/saml2/Saml2LoginConfigurer.java",
      "config/src/main/java/org/springframework/security/config/annotation/web/configurers/saml2/Saml2LogoutConfigurer.java",
      "config/src/main/java/org/springframework/security/config/annotation/web/configurers/saml2/Saml2MetadataConfigurer.java",
      "config/src/main/java/org/springframework/security/config/authentication/AuthenticationManagerFactoryBean.java",
      "config/src/main/java/org/springframework/security/config/http/GrantedAuthorityDefaultsParserUtils.java",
      "config/src/main/java/org/springframework/security/config/method/GlobalMethodSecurityBeanDefinitionParser.java",
      "config/src/main/java/org/springframework/security/config/method/MethodSecurityBeanDefinitionParser.java",
      "config/src/main/java/org/springframework/security/config/web/server/ServerHttpSecurity.java",
      "config/src/test/java/org/springframework/security/config/web/server/CorsSpecTests.java"
    ],
    "pr_changed_test_files": [
      "config/src/test/java/org/springframework/security/config/web/server/CorsSpecTests.java"
    ],
    "base_commit": "4a9a350ed0356c99ce3b52e4a31a0ddaa1208791",
    "head_commit": "4dcf5b1dc8c851e1ad06348546a8be3de07e47b6",
    "repo_url": "https://github.com/spring-projects/spring-security/pull/15816",
    "swe_url": "https://swe-bench-plus.turing.com/repos/spring-projects__spring-security/15816",
    "dockerfile": "",
    "pr_merged_at": "2024-09-23T23:11:43.000Z",
    "patch": "diff --git a/config/src/main/java/org/springframework/security/config/annotation/authentication/configuration/AuthenticationConfiguration.java b/config/src/main/java/org/springframework/security/config/annotation/authentication/configuration/AuthenticationConfiguration.java\nindex e85fdb0886a..9c5e6b5013e 100644\n--- a/config/src/main/java/org/springframework/security/config/annotation/authentication/configuration/AuthenticationConfiguration.java\n+++ b/config/src/main/java/org/springframework/security/config/annotation/authentication/configuration/AuthenticationConfiguration.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -28,7 +28,6 @@\n import org.springframework.aop.framework.ProxyFactoryBean;\n import org.springframework.aop.target.LazyInitTargetSource;\n import org.springframework.beans.factory.BeanFactoryUtils;\n-import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.ConfigurableApplicationContext;\n@@ -57,6 +56,7 @@\n  * Exports the authentication {@link Configuration}\n  *\n  * @author Rob Winch\n+ * @author Ngoc Nhan\n  * @since 3.2\n  *\n  */\n@@ -197,15 +197,6 @@ private AuthenticationManager getAuthenticationManagerBean() {\n \t\treturn lazyBean(AuthenticationManager.class);\n \t}\n \n-\tprivate static <T> T getBeanOrNull(ApplicationContext applicationContext, Class<T> type) {\n-\t\ttry {\n-\t\t\treturn applicationContext.getBean(type);\n-\t\t}\n-\t\tcatch (NoSuchBeanDefinitionException notFound) {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n \tprivate static class EnableGlobalAuthenticationAutowiredConfigurer extends GlobalAuthenticationConfigurerAdapter {\n \n \t\tprivate final ApplicationContext context;\n@@ -330,12 +321,9 @@ private PasswordEncoder getPasswordEncoder() {\n \t\t\tif (this.passwordEncoder != null) {\n \t\t\t\treturn this.passwordEncoder;\n \t\t\t}\n-\t\t\tPasswordEncoder passwordEncoder = getBeanOrNull(this.applicationContext, PasswordEncoder.class);\n-\t\t\tif (passwordEncoder == null) {\n-\t\t\t\tpasswordEncoder = PasswordEncoderFactories.createDelegatingPasswordEncoder();\n-\t\t\t}\n-\t\t\tthis.passwordEncoder = passwordEncoder;\n-\t\t\treturn passwordEncoder;\n+\t\t\tthis.passwordEncoder = this.applicationContext.getBeanProvider(PasswordEncoder.class)\n+\t\t\t\t.getIfUnique(PasswordEncoderFactories::createDelegatingPasswordEncoder);\n+\t\t\treturn this.passwordEncoder;\n \t\t}\n \n \t\t@Override\n\ndiff --git a/config/src/main/java/org/springframework/security/config/annotation/authentication/configuration/InitializeUserDetailsBeanManagerConfigurer.java b/config/src/main/java/org/springframework/security/config/annotation/authentication/configuration/InitializeUserDetailsBeanManagerConfigurer.java\nindex 35fb14c3f33..60c68725d95 100644\n--- a/config/src/main/java/org/springframework/security/config/annotation/authentication/configuration/InitializeUserDetailsBeanManagerConfigurer.java\n+++ b/config/src/main/java/org/springframework/security/config/annotation/authentication/configuration/InitializeUserDetailsBeanManagerConfigurer.java\n@@ -39,6 +39,7 @@\n  * {@link PasswordEncoder} is defined will wire this up too.\n  *\n  * @author Rob Winch\n+ * @author Ngoc Nhan\n  * @since 4.1\n  */\n @Order(InitializeUserDetailsBeanManagerConfigurer.DEFAULT_ORDER)\n@@ -121,11 +122,7 @@ else if (userDetailsServices.size() > 1) {\n \t\t * component, null otherwise.\n \t\t */\n \t\tprivate <T> T getBeanOrNull(Class<T> type) {\n-\t\t\tString[] beanNames = InitializeUserDetailsBeanManagerConfigurer.this.context.getBeanNamesForType(type);\n-\t\t\tif (beanNames.length != 1) {\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t\treturn InitializeUserDetailsBeanManagerConfigurer.this.context.getBean(beanNames[0], type);\n+\t\t\treturn InitializeUserDetailsBeanManagerConfigurer.this.context.getBeanProvider(type).getIfUnique();\n \t\t}\n \n \t\t/**\n\ndiff --git a/config/src/main/java/org/springframework/security/config/annotation/method/configuration/GlobalMethodSecurityConfiguration.java b/config/src/main/java/org/springframework/security/config/annotation/method/configuration/GlobalMethodSecurityConfiguration.java\nindex 95e657aaa28..8191e490537 100644\n--- a/config/src/main/java/org/springframework/security/config/annotation/method/configuration/GlobalMethodSecurityConfiguration.java\n+++ b/config/src/main/java/org/springframework/security/config/annotation/method/configuration/GlobalMethodSecurityConfiguration.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -27,7 +27,6 @@\n import org.springframework.beans.BeansException;\n import org.springframework.beans.factory.BeanFactory;\n import org.springframework.beans.factory.BeanFactoryAware;\n-import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n import org.springframework.beans.factory.SmartInitializingSingleton;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.config.BeanDefinition;\n@@ -84,6 +83,7 @@\n  *\n  * @author Rob Winch\n  * @author Eddú Meléndez\n+ * @author Ngoc Nhan\n  * @since 3.2\n  * @see EnableGlobalMethodSecurity\n  * @deprecated Use {@link PrePostMethodSecurityConfiguration},\n@@ -168,19 +168,19 @@ public void afterSingletonsInstantiated() {\n \t\tcatch (Exception ex) {\n \t\t\tthrow new RuntimeException(ex);\n \t\t}\n-\t\tPermissionEvaluator permissionEvaluator = getSingleBeanOrNull(PermissionEvaluator.class);\n+\t\tPermissionEvaluator permissionEvaluator = getBeanOrNull(PermissionEvaluator.class);\n \t\tif (permissionEvaluator != null) {\n \t\t\tthis.defaultMethodExpressionHandler.setPermissionEvaluator(permissionEvaluator);\n \t\t}\n-\t\tRoleHierarchy roleHierarchy = getSingleBeanOrNull(RoleHierarchy.class);\n+\t\tRoleHierarchy roleHierarchy = getBeanOrNull(RoleHierarchy.class);\n \t\tif (roleHierarchy != null) {\n \t\t\tthis.defaultMethodExpressionHandler.setRoleHierarchy(roleHierarchy);\n \t\t}\n-\t\tAuthenticationTrustResolver trustResolver = getSingleBeanOrNull(AuthenticationTrustResolver.class);\n+\t\tAuthenticationTrustResolver trustResolver = getBeanOrNull(AuthenticationTrustResolver.class);\n \t\tif (trustResolver != null) {\n \t\t\tthis.defaultMethodExpressionHandler.setTrustResolver(trustResolver);\n \t\t}\n-\t\tGrantedAuthorityDefaults grantedAuthorityDefaults = getSingleBeanOrNull(GrantedAuthorityDefaults.class);\n+\t\tGrantedAuthorityDefaults grantedAuthorityDefaults = getBeanOrNull(GrantedAuthorityDefaults.class);\n \t\tif (grantedAuthorityDefaults != null) {\n \t\t\tthis.defaultMethodExpressionHandler.setDefaultRolePrefix(grantedAuthorityDefaults.getRolePrefix());\n \t\t}\n@@ -188,13 +188,8 @@ public void afterSingletonsInstantiated() {\n \t\tthis.defaultMethodExpressionHandler = this.objectPostProcessor.postProcess(this.defaultMethodExpressionHandler);\n \t}\n \n-\tprivate <T> T getSingleBeanOrNull(Class<T> type) {\n-\t\ttry {\n-\t\t\treturn this.context.getBean(type);\n-\t\t}\n-\t\tcatch (NoSuchBeanDefinitionException ex) {\n-\t\t}\n-\t\treturn null;\n+\tprivate <T> T getBeanOrNull(Class<T> type) {\n+\t\treturn this.context.getBeanProvider(type).getIfUnique();\n \t}\n \n \tprivate void initializeMethodSecurityInterceptor() throws Exception {\n@@ -262,7 +257,7 @@ protected AccessDecisionManager accessDecisionManager() {\n \t\t\tdecisionVoters.add(new Jsr250Voter());\n \t\t}\n \t\tRoleVoter roleVoter = new RoleVoter();\n-\t\tGrantedAuthorityDefaults grantedAuthorityDefaults = getSingleBeanOrNull(GrantedAuthorityDefaults.class);\n+\t\tGrantedAuthorityDefaults grantedAuthorityDefaults = getBeanOrNull(GrantedAuthorityDefaults.class);\n \t\tif (grantedAuthorityDefaults != null) {\n \t\t\troleVoter.setRolePrefix(grantedAuthorityDefaults.getRolePrefix());\n \t\t}\n@@ -373,7 +368,7 @@ public MethodSecurityMetadataSource methodSecurityMetadataSource() {\n \t\t\tsources.add(new SecuredAnnotationSecurityMetadataSource());\n \t\t}\n \t\tif (isJsr250Enabled) {\n-\t\t\tGrantedAuthorityDefaults grantedAuthorityDefaults = getSingleBeanOrNull(GrantedAuthorityDefaults.class);\n+\t\t\tGrantedAuthorityDefaults grantedAuthorityDefaults = getBeanOrNull(GrantedAuthorityDefaults.class);\n \t\t\tJsr250MethodSecurityMetadataSource jsr250MethodSecurityMetadataSource = this.context\n \t\t\t\t.getBean(Jsr250MethodSecurityMetadataSource.class);\n \t\t\tif (grantedAuthorityDefaults != null) {\n\ndiff --git a/config/src/main/java/org/springframework/security/config/annotation/rsocket/RSocketSecurity.java b/config/src/main/java/org/springframework/security/config/annotation/rsocket/RSocketSecurity.java\nindex 50b7ae5f975..c868b29ba33 100644\n--- a/config/src/main/java/org/springframework/security/config/annotation/rsocket/RSocketSecurity.java\n+++ b/config/src/main/java/org/springframework/security/config/annotation/rsocket/RSocketSecurity.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019-2021 the original author or authors.\n+ * Copyright 2019-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -108,6 +108,7 @@\n  * @author Luis Felipe Vega\n  * @author Manuel Tejeda\n  * @author Ebert Toribio\n+ * @author Ngoc Nhan\n  * @since 5.2\n  */\n public class RSocketSecurity {\n@@ -238,15 +239,12 @@ private <T> T getBeanOrNull(Class<T> beanClass) {\n \t\treturn getBeanOrNull(ResolvableType.forClass(beanClass));\n \t}\n \n+\t@SuppressWarnings(\"unchecked\")\n \tprivate <T> T getBeanOrNull(ResolvableType type) {\n \t\tif (this.context == null) {\n \t\t\treturn null;\n \t\t}\n-\t\tString[] names = this.context.getBeanNamesForType(type);\n-\t\tif (names.length == 1) {\n-\t\t\treturn (T) this.context.getBean(names[0]);\n-\t\t}\n-\t\treturn null;\n+\t\treturn (T) this.context.getBeanProvider(type).getIfUnique();\n \t}\n \n \tprotected void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n\ndiff --git a/config/src/main/java/org/springframework/security/config/annotation/web/builders/HttpSecurity.java b/config/src/main/java/org/springframework/security/config/annotation/web/builders/HttpSecurity.java\nindex 12253d65da8..de3c773f8b2 100644\n--- a/config/src/main/java/org/springframework/security/config/annotation/web/builders/HttpSecurity.java\n+++ b/config/src/main/java/org/springframework/security/config/annotation/web/builders/HttpSecurity.java\n@@ -139,6 +139,7 @@\n  *\n  * @author Rob Winch\n  * @author Joe Grandja\n+ * @author Ngoc Nhan\n  * @since 3.2\n  * @see EnableWebSecurity\n  */\n@@ -3719,12 +3720,7 @@ private <C extends SecurityConfigurerAdapter<DefaultSecurityFilterChain, HttpSec\n \t}\n \n \tprivate ObservationRegistry getObservationRegistry() {\n-\t\tApplicationContext context = getContext();\n-\t\tString[] names = context.getBeanNamesForType(ObservationRegistry.class);\n-\t\tif (names.length == 1) {\n-\t\t\treturn (ObservationRegistry) context.getBean(names[0]);\n-\t\t}\n-\t\treturn ObservationRegistry.NOOP;\n+\t\treturn getContext().getBeanProvider(ObservationRegistry.class).getIfUnique(() -> ObservationRegistry.NOOP);\n \t}\n \n \t/**\n\ndiff --git a/config/src/main/java/org/springframework/security/config/annotation/web/configuration/HttpSecurityConfiguration.java b/config/src/main/java/org/springframework/security/config/annotation/web/configuration/HttpSecurityConfiguration.java\nindex 39a3633db4c..93b2290d30d 100644\n--- a/config/src/main/java/org/springframework/security/config/annotation/web/configuration/HttpSecurityConfiguration.java\n+++ b/config/src/main/java/org/springframework/security/config/annotation/web/configuration/HttpSecurityConfiguration.java\n@@ -20,7 +20,6 @@\n import java.util.List;\n import java.util.Map;\n \n-import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n@@ -56,6 +55,7 @@\n  *\n  * @author Eleftheria Stein\n  * @author Jinwoo Bae\n+ * @author Ngoc Nhan\n  * @since 5.4\n  */\n @Configuration(proxyBeanMethods = false)\n@@ -226,21 +226,9 @@ private PasswordEncoder getPasswordEncoder() {\n \t\t\tif (this.passwordEncoder != null) {\n \t\t\t\treturn this.passwordEncoder;\n \t\t\t}\n-\t\t\tPasswordEncoder passwordEncoder = getBeanOrNull(PasswordEncoder.class);\n-\t\t\tif (passwordEncoder == null) {\n-\t\t\t\tpasswordEncoder = PasswordEncoderFactories.createDelegatingPasswordEncoder();\n-\t\t\t}\n-\t\t\tthis.passwordEncoder = passwordEncoder;\n-\t\t\treturn passwordEncoder;\n-\t\t}\n-\n-\t\tprivate <T> T getBeanOrNull(Class<T> type) {\n-\t\t\ttry {\n-\t\t\t\treturn this.applicationContext.getBean(type);\n-\t\t\t}\n-\t\t\tcatch (NoSuchBeanDefinitionException ex) {\n-\t\t\t\treturn null;\n-\t\t\t}\n+\t\t\tthis.passwordEncoder = this.applicationContext.getBeanProvider(PasswordEncoder.class)\n+\t\t\t\t.getIfUnique(PasswordEncoderFactories::createDelegatingPasswordEncoder);\n+\t\t\treturn this.passwordEncoder;\n \t\t}\n \n \t\t@Override\n\ndiff --git a/config/src/main/java/org/springframework/security/config/annotation/web/configurers/ExpressionUrlAuthorizationConfigurer.java b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/ExpressionUrlAuthorizationConfigurer.java\nindex ac7bdcaf544..d0509a8ab11 100644\n--- a/config/src/main/java/org/springframework/security/config/annotation/web/configurers/ExpressionUrlAuthorizationConfigurer.java\n+++ b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/ExpressionUrlAuthorizationConfigurer.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -75,6 +75,7 @@\n  * @param <H> the type of {@link HttpSecurityBuilder} that is being configured\n  * @author Rob Winch\n  * @author Yanming Zhou\n+ * @author Ngoc Nhan\n  * @since 3.2\n  * @see org.springframework.security.config.annotation.web.builders.HttpSecurity#authorizeRequests()\n  * @deprecated Use {@link AuthorizeHttpRequestsConfigurer} instead\n@@ -106,10 +107,9 @@ public final class ExpressionUrlAuthorizationConfigurer<H extends HttpSecurityBu\n \t * @see HttpSecurity#authorizeRequests()\n \t */\n \tpublic ExpressionUrlAuthorizationConfigurer(ApplicationContext context) {\n-\t\tString[] grantedAuthorityDefaultsBeanNames = context.getBeanNamesForType(GrantedAuthorityDefaults.class);\n-\t\tif (grantedAuthorityDefaultsBeanNames.length == 1) {\n-\t\t\tGrantedAuthorityDefaults grantedAuthorityDefaults = context.getBean(grantedAuthorityDefaultsBeanNames[0],\n-\t\t\t\t\tGrantedAuthorityDefaults.class);\n+\t\tGrantedAuthorityDefaults grantedAuthorityDefaults = context.getBeanProvider(GrantedAuthorityDefaults.class)\n+\t\t\t.getIfUnique();\n+\t\tif (grantedAuthorityDefaults != null) {\n \t\t\tthis.rolePrefix = grantedAuthorityDefaults.getRolePrefix();\n \t\t}\n \t\telse {\n@@ -167,22 +167,11 @@ private SecurityExpressionHandler<FilterInvocation> getExpressionHandler(H http)\n \t\t}\n \t\tApplicationContext context = http.getSharedObject(ApplicationContext.class);\n \t\tif (context != null) {\n-\t\t\tString[] roleHiearchyBeanNames = context.getBeanNamesForType(RoleHierarchy.class);\n-\t\t\tif (roleHiearchyBeanNames.length == 1) {\n-\t\t\t\tdefaultHandler.setRoleHierarchy(context.getBean(roleHiearchyBeanNames[0], RoleHierarchy.class));\n-\t\t\t}\n-\t\t\tString[] grantedAuthorityDefaultsBeanNames = context.getBeanNamesForType(GrantedAuthorityDefaults.class);\n-\t\t\tif (grantedAuthorityDefaultsBeanNames.length == 1) {\n-\t\t\t\tGrantedAuthorityDefaults grantedAuthorityDefaults = context\n-\t\t\t\t\t.getBean(grantedAuthorityDefaultsBeanNames[0], GrantedAuthorityDefaults.class);\n-\t\t\t\tdefaultHandler.setDefaultRolePrefix(grantedAuthorityDefaults.getRolePrefix());\n-\t\t\t}\n-\t\t\tString[] permissionEvaluatorBeanNames = context.getBeanNamesForType(PermissionEvaluator.class);\n-\t\t\tif (permissionEvaluatorBeanNames.length == 1) {\n-\t\t\t\tPermissionEvaluator permissionEvaluator = context.getBean(permissionEvaluatorBeanNames[0],\n-\t\t\t\t\t\tPermissionEvaluator.class);\n-\t\t\t\tdefaultHandler.setPermissionEvaluator(permissionEvaluator);\n-\t\t\t}\n+\t\t\tcontext.getBeanProvider(RoleHierarchy.class).ifUnique(defaultHandler::setRoleHierarchy);\n+\t\t\tcontext.getBeanProvider(GrantedAuthorityDefaults.class)\n+\t\t\t\t.ifUnique((grantedAuthorityDefaults) -> defaultHandler\n+\t\t\t\t\t.setDefaultRolePrefix(grantedAuthorityDefaults.getRolePrefix()));\n+\t\t\tcontext.getBeanProvider(PermissionEvaluator.class).ifUnique(defaultHandler::setPermissionEvaluator);\n \t\t}\n \t\tthis.expressionHandler = postProcess(defaultHandler);\n \t\treturn this.expressionHandler;\n\ndiff --git a/config/src/main/java/org/springframework/security/config/annotation/web/configurers/RememberMeConfigurer.java b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/RememberMeConfigurer.java\nindex 0125a22baed..2b36664fbf5 100644\n--- a/config/src/main/java/org/springframework/security/config/annotation/web/configurers/RememberMeConfigurer.java\n+++ b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/RememberMeConfigurer.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -18,7 +18,6 @@\n \n import java.util.UUID;\n \n-import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n import org.springframework.context.ApplicationContext;\n import org.springframework.security.authentication.AuthenticationManager;\n import org.springframework.security.authentication.RememberMeAuthenticationProvider;\n@@ -78,6 +77,7 @@\n  *\n  * @author Rob Winch\n  * @author Eddú Meléndez\n+ * @author Ngoc Nhan\n  * @since 3.2\n  */\n public final class RememberMeConfigurer<H extends HttpSecurityBuilder<H>>\n@@ -444,20 +444,12 @@ private <C> C getSharedOrBean(H http, Class<C> type) {\n \t\tif (shared != null) {\n \t\t\treturn shared;\n \t\t}\n-\t\treturn getBeanOrNull(type);\n-\t}\n \n-\tprivate <T> T getBeanOrNull(Class<T> type) {\n \t\tApplicationContext context = getBuilder().getSharedObject(ApplicationContext.class);\n \t\tif (context == null) {\n \t\t\treturn null;\n \t\t}\n-\t\ttry {\n-\t\t\treturn context.getBean(type);\n-\t\t}\n-\t\tcatch (NoSuchBeanDefinitionException ex) {\n-\t\t\treturn null;\n-\t\t}\n+\t\treturn context.getBeanProvider(type).getIfUnique();\n \t}\n \n }\n\ndiff --git a/config/src/main/java/org/springframework/security/config/annotation/web/configurers/RequestCacheConfigurer.java b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/RequestCacheConfigurer.java\nindex e7eae3f2831..712c89073f8 100644\n--- a/config/src/main/java/org/springframework/security/config/annotation/web/configurers/RequestCacheConfigurer.java\n+++ b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/RequestCacheConfigurer.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2013 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -20,7 +20,6 @@\n import java.util.Collections;\n import java.util.List;\n \n-import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n import org.springframework.context.ApplicationContext;\n import org.springframework.http.MediaType;\n import org.springframework.security.config.annotation.web.HttpSecurityBuilder;\n@@ -67,6 +66,7 @@\n  * </ul>\n  *\n  * @author Rob Winch\n+ * @author Ngoc Nhan\n  * @since 3.2\n  * @see RequestCache\n  */\n@@ -134,12 +134,8 @@ private <T> T getBeanOrNull(Class<T> type) {\n \t\tif (context == null) {\n \t\t\treturn null;\n \t\t}\n-\t\ttry {\n-\t\t\treturn context.getBean(type);\n-\t\t}\n-\t\tcatch (NoSuchBeanDefinitionException ex) {\n-\t\t\treturn null;\n-\t\t}\n+\n+\t\treturn context.getBeanProvider(type).getIfUnique();\n \t}\n \n \t@SuppressWarnings(\"unchecked\")\n\ndiff --git a/config/src/main/java/org/springframework/security/config/annotation/web/configurers/ServletApiConfigurer.java b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/ServletApiConfigurer.java\nindex ba4769d996b..a1b64f1ea0b 100644\n--- a/config/src/main/java/org/springframework/security/config/annotation/web/configurers/ServletApiConfigurer.java\n+++ b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/ServletApiConfigurer.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -56,6 +56,7 @@\n  * </ul>\n  *\n  * @author Rob Winch\n+ * @author Ngoc Nhan\n  * @since 3.2\n  */\n public final class ServletApiConfigurer<H extends HttpSecurityBuilder<H>>\n@@ -92,12 +93,9 @@ public void configure(H http) {\n \t\t}\n \t\tApplicationContext context = http.getSharedObject(ApplicationContext.class);\n \t\tif (context != null) {\n-\t\t\tString[] grantedAuthorityDefaultsBeanNames = context.getBeanNamesForType(GrantedAuthorityDefaults.class);\n-\t\t\tif (grantedAuthorityDefaultsBeanNames.length == 1) {\n-\t\t\t\tGrantedAuthorityDefaults grantedAuthorityDefaults = context\n-\t\t\t\t\t.getBean(grantedAuthorityDefaultsBeanNames[0], GrantedAuthorityDefaults.class);\n-\t\t\t\tthis.securityContextRequestFilter.setRolePrefix(grantedAuthorityDefaults.getRolePrefix());\n-\t\t\t}\n+\t\t\tcontext.getBeanProvider(GrantedAuthorityDefaults.class)\n+\t\t\t\t.ifUnique((grantedAuthorityDefaults) -> this.securityContextRequestFilter\n+\t\t\t\t\t.setRolePrefix(grantedAuthorityDefaults.getRolePrefix()));\n \t\t\tthis.securityContextRequestFilter.setSecurityContextHolderStrategy(getSecurityContextHolderStrategy());\n \t\t}\n \t\tthis.securityContextRequestFilter = postProcess(this.securityContextRequestFilter);\n\ndiff --git a/config/src/main/java/org/springframework/security/config/annotation/web/configurers/SessionManagementConfigurer.java b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/SessionManagementConfigurer.java\nindex 504d68262ce..fc4a2a38804 100644\n--- a/config/src/main/java/org/springframework/security/config/annotation/web/configurers/SessionManagementConfigurer.java\n+++ b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/SessionManagementConfigurer.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -25,7 +25,6 @@\n import jakarta.servlet.http.HttpServletResponse;\n import jakarta.servlet.http.HttpSession;\n \n-import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.ApplicationListener;\n import org.springframework.context.event.GenericApplicationListenerAdapter;\n@@ -100,6 +99,7 @@\n  *\n  * @author Rob Winch\n  * @author Onur Kagan Ozcan\n+ * @author Ngoc Nhan\n  * @since 3.2\n  * @see SessionManagementFilter\n  * @see ConcurrentSessionFilter\n@@ -630,12 +630,8 @@ private <T> T getBeanOrNull(Class<T> type) {\n \t\tif (context == null) {\n \t\t\treturn null;\n \t\t}\n-\t\ttry {\n-\t\t\treturn context.getBean(type);\n-\t\t}\n-\t\tcatch (NoSuchBeanDefinitionException ex) {\n-\t\t\treturn null;\n-\t\t}\n+\n+\t\treturn context.getBeanProvider(type).getIfUnique();\n \t}\n \n \t/**\n\ndiff --git a/config/src/main/java/org/springframework/security/config/annotation/web/configurers/X509Configurer.java b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/X509Configurer.java\nindex 7f89cdf184e..a3818e2a9ac 100644\n--- a/config/src/main/java/org/springframework/security/config/annotation/web/configurers/X509Configurer.java\n+++ b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/X509Configurer.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -18,7 +18,6 @@\n \n import jakarta.servlet.http.HttpServletRequest;\n \n-import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n import org.springframework.context.ApplicationContext;\n import org.springframework.security.authentication.AuthenticationDetailsSource;\n import org.springframework.security.authentication.AuthenticationManager;\n@@ -74,6 +73,7 @@\n  * </ul>\n  *\n  * @author Rob Winch\n+ * @author Ngoc Nhan\n  * @since 3.2\n  */\n public final class X509Configurer<H extends HttpSecurityBuilder<H>>\n@@ -214,20 +214,11 @@ private <C> C getSharedOrBean(H http, Class<C> type) {\n \t\tif (shared != null) {\n \t\t\treturn shared;\n \t\t}\n-\t\treturn getBeanOrNull(type);\n-\t}\n-\n-\tprivate <T> T getBeanOrNull(Class<T> type) {\n \t\tApplicationContext context = getBuilder().getSharedObject(ApplicationContext.class);\n \t\tif (context == null) {\n \t\t\treturn null;\n \t\t}\n-\t\ttry {\n-\t\t\treturn context.getBean(type);\n-\t\t}\n-\t\tcatch (NoSuchBeanDefinitionException ex) {\n-\t\t\treturn null;\n-\t\t}\n+\t\treturn context.getBeanProvider(type).getIfUnique();\n \t}\n \n }\n\ndiff --git a/config/src/main/java/org/springframework/security/config/annotation/web/configurers/oauth2/client/OAuth2ClientConfigurer.java b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/oauth2/client/OAuth2ClientConfigurer.java\nindex ba334bd383c..17c3c73ca49 100644\n--- a/config/src/main/java/org/springframework/security/config/annotation/web/configurers/oauth2/client/OAuth2ClientConfigurer.java\n+++ b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/oauth2/client/OAuth2ClientConfigurer.java\n@@ -86,6 +86,7 @@\n  *\n  * @author Joe Grandja\n  * @author Parikshit Dutta\n+ * @author Ngoc Nhan\n  * @since 5.1\n  * @see OAuth2AuthorizationRequestRedirectFilter\n  * @see OAuth2AuthorizationCodeGrantFilter\n@@ -320,13 +321,10 @@ private OAuth2AccessTokenResponseClient<OAuth2AuthorizationCodeGrantRequest> get\n \t\t@SuppressWarnings(\"unchecked\")\n \t\tprivate <T> T getBeanOrNull(ResolvableType type) {\n \t\t\tApplicationContext context = getBuilder().getSharedObject(ApplicationContext.class);\n-\t\t\tif (context != null) {\n-\t\t\t\tString[] names = context.getBeanNamesForType(type);\n-\t\t\t\tif (names.length == 1) {\n-\t\t\t\t\treturn (T) context.getBean(names[0]);\n-\t\t\t\t}\n+\t\t\tif (context == null) {\n+\t\t\t\treturn null;\n \t\t\t}\n-\t\t\treturn null;\n+\t\t\treturn (T) context.getBeanProvider(type).getIfUnique();\n \t\t}\n \n \t}\n\ndiff --git a/config/src/main/java/org/springframework/security/config/annotation/web/configurers/oauth2/client/OAuth2LoginConfigurer.java b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/oauth2/client/OAuth2LoginConfigurer.java\nindex a6b5f7c52bf..d191bb740be 100644\n--- a/config/src/main/java/org/springframework/security/config/annotation/web/configurers/oauth2/client/OAuth2LoginConfigurer.java\n+++ b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/oauth2/client/OAuth2LoginConfigurer.java\n@@ -149,6 +149,7 @@\n  *\n  * @author Joe Grandja\n  * @author Kazuki Shimizu\n+ * @author Ngoc Nhan\n  * @since 5.0\n  * @see HttpSecurity#oauth2Login()\n  * @see OAuth2AuthorizationRequestRedirectFilter\n@@ -446,12 +447,10 @@ private JwtDecoderFactory<ClientRegistration> getJwtDecoderFactoryBean() {\n \t\tif (names.length > 1) {\n \t\t\tthrow new NoUniqueBeanDefinitionException(type, names);\n \t\t}\n-\t\tif (names.length == 1) {\n-\t\t\treturn (JwtDecoderFactory<ClientRegistration>) this.getBuilder()\n-\t\t\t\t.getSharedObject(ApplicationContext.class)\n-\t\t\t\t.getBean(names[0]);\n-\t\t}\n-\t\treturn null;\n+\t\treturn (JwtDecoderFactory<ClientRegistration>) this.getBuilder()\n+\t\t\t.getSharedObject(ApplicationContext.class)\n+\t\t\t.getBeanProvider(type)\n+\t\t\t.getIfUnique();\n \t}\n \n \tprivate GrantedAuthoritiesMapper getGrantedAuthoritiesMapper() {\n@@ -503,15 +502,13 @@ private OAuth2UserService<OAuth2UserRequest, OAuth2User> getOAuth2UserService()\n \t\treturn (bean != null) ? bean : new DefaultOAuth2UserService();\n \t}\n \n+\t@SuppressWarnings(\"unchecked\")\n \tprivate <T> T getBeanOrNull(ResolvableType type) {\n \t\tApplicationContext context = getBuilder().getSharedObject(ApplicationContext.class);\n-\t\tif (context != null) {\n-\t\t\tString[] names = context.getBeanNamesForType(type);\n-\t\t\tif (names.length == 1) {\n-\t\t\t\treturn (T) context.getBean(names[0]);\n-\t\t\t}\n+\t\tif (context == null) {\n+\t\t\treturn null;\n \t\t}\n-\t\treturn null;\n+\t\treturn (T) context.getBeanProvider(type).getIfUnique();\n \t}\n \n \tprivate void initDefaultLoginFilter(B http) {\n\ndiff --git a/config/src/main/java/org/springframework/security/config/annotation/web/configurers/oauth2/client/OidcLogoutConfigurer.java b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/oauth2/client/OidcLogoutConfigurer.java\nindex 9e3eefc0e7d..1095350dc5b 100644\n--- a/config/src/main/java/org/springframework/security/config/annotation/web/configurers/oauth2/client/OidcLogoutConfigurer.java\n+++ b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/oauth2/client/OidcLogoutConfigurer.java\n@@ -65,6 +65,7 @@\n  * </ul>\n  *\n  * @author Josh Cummings\n+ * @author Ngoc Nhan\n  * @since 6.2\n  * @see HttpSecurity#oidcLogout()\n  * @see OidcBackChannelLogoutFilter\n@@ -283,15 +284,13 @@ void configure(B http) {\n \t\t\thttp.addFilterBefore(filter, CsrfFilter.class);\n \t\t}\n \n+\t\t@SuppressWarnings(\"unchecked\")\n \t\tprivate <T> T getBeanOrNull(Class<?> clazz) {\n \t\t\tApplicationContext context = getBuilder().getSharedObject(ApplicationContext.class);\n-\t\t\tif (context != null) {\n-\t\t\t\tString[] names = context.getBeanNamesForType(clazz);\n-\t\t\t\tif (names.length == 1) {\n-\t\t\t\t\treturn (T) context.getBean(names[0]);\n-\t\t\t\t}\n+\t\t\tif (context == null) {\n+\t\t\t\treturn null;\n \t\t\t}\n-\t\t\treturn null;\n+\t\t\treturn (T) context.getBeanProvider(clazz).getIfUnique();\n \t\t}\n \n \t\tprivate static final class EitherLogoutHandler implements LogoutHandler {\n\ndiff --git a/config/src/main/java/org/springframework/security/config/annotation/web/configurers/ott/OneTimeTokenLoginConfigurer.java b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/ott/OneTimeTokenLoginConfigurer.java\nindex 92e7b165f6a..dcdd8ec3a41 100644\n--- a/config/src/main/java/org/springframework/security/config/annotation/web/configurers/ott/OneTimeTokenLoginConfigurer.java\n+++ b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/ott/OneTimeTokenLoginConfigurer.java\n@@ -21,7 +21,6 @@\n \n import jakarta.servlet.http.HttpServletRequest;\n \n-import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n import org.springframework.context.ApplicationContext;\n import org.springframework.http.HttpMethod;\n import org.springframework.security.authentication.AuthenticationManager;\n@@ -321,12 +320,8 @@ private <C> C getBeanOrNull(H http, Class<C> clazz) {\n \t\tif (context == null) {\n \t\t\treturn null;\n \t\t}\n-\t\ttry {\n-\t\t\treturn context.getBean(clazz);\n-\t\t}\n-\t\tcatch (NoSuchBeanDefinitionException ex) {\n-\t\t\treturn null;\n-\t\t}\n+\n+\t\treturn context.getBeanProvider(clazz).getIfUnique();\n \t}\n \n \tprivate Map<String, String> hiddenInputs(HttpServletRequest request) {\n\ndiff --git a/config/src/main/java/org/springframework/security/config/annotation/web/configurers/saml2/Saml2LoginConfigurer.java b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/saml2/Saml2LoginConfigurer.java\nindex 29bcc10e6b5..b07b034d143 100644\n--- a/config/src/main/java/org/springframework/security/config/annotation/web/configurers/saml2/Saml2LoginConfigurer.java\n+++ b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/saml2/Saml2LoginConfigurer.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -24,7 +24,6 @@\n import jakarta.servlet.http.HttpServletRequest;\n import org.opensaml.core.Version;\n \n-import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n import org.springframework.context.ApplicationContext;\n import org.springframework.security.authentication.AuthenticationManager;\n import org.springframework.security.authentication.AuthenticationProvider;\n@@ -501,12 +500,7 @@ private <C> C getBeanOrNull(B http, Class<C> clazz) {\n \t\tif (context == null) {\n \t\t\treturn null;\n \t\t}\n-\t\ttry {\n-\t\t\treturn context.getBean(clazz);\n-\t\t}\n-\t\tcatch (NoSuchBeanDefinitionException ex) {\n-\t\t\treturn null;\n-\t\t}\n+\t\treturn context.getBeanProvider(clazz).getIfUnique();\n \t}\n \n \tprivate <C> void setSharedObject(B http, Class<C> clazz, C object) {\n\ndiff --git a/config/src/main/java/org/springframework/security/config/annotation/web/configurers/saml2/Saml2LogoutConfigurer.java b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/saml2/Saml2LogoutConfigurer.java\nindex d3e5dd912b4..92c7cef819f 100644\n--- a/config/src/main/java/org/springframework/security/config/annotation/web/configurers/saml2/Saml2LogoutConfigurer.java\n+++ b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/saml2/Saml2LogoutConfigurer.java\n@@ -107,6 +107,7 @@\n  * Uses {@link CsrfTokenRepository} to add the {@link CsrfLogoutHandler}.\n  *\n  * @author Josh Cummings\n+ * @author Ngoc Nhan\n  * @since 5.6\n  * @see Saml2LogoutConfigurer\n  */\n@@ -336,10 +337,7 @@ private <C> C getBeanOrNull(Class<C> clazz) {\n \t\tif (this.context == null) {\n \t\t\treturn null;\n \t\t}\n-\t\tif (this.context.getBeanNamesForType(clazz).length == 0) {\n-\t\t\treturn null;\n-\t\t}\n-\t\treturn this.context.getBean(clazz);\n+\t\treturn this.context.getBeanProvider(clazz).getIfAvailable();\n \t}\n \n \t/**\n\ndiff --git a/config/src/main/java/org/springframework/security/config/annotation/web/configurers/saml2/Saml2MetadataConfigurer.java b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/saml2/Saml2MetadataConfigurer.java\nindex baf82dc6354..349e3a66066 100644\n--- a/config/src/main/java/org/springframework/security/config/annotation/web/configurers/saml2/Saml2MetadataConfigurer.java\n+++ b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/saml2/Saml2MetadataConfigurer.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -174,10 +174,7 @@ private <C> C getBeanOrNull(Class<C> clazz) {\n \t\tif (this.context == null) {\n \t\t\treturn null;\n \t\t}\n-\t\tif (this.context.getBeanNamesForType(clazz).length == 0) {\n-\t\t\treturn null;\n-\t\t}\n-\t\treturn this.context.getBean(clazz);\n+\t\treturn this.context.getBeanProvider(clazz).getIfAvailable();\n \t}\n \n }\n\ndiff --git a/config/src/main/java/org/springframework/security/config/authentication/AuthenticationManagerFactoryBean.java b/config/src/main/java/org/springframework/security/config/authentication/AuthenticationManagerFactoryBean.java\nindex 9e2b6a8a65d..cbb7cfa0dcb 100644\n--- a/config/src/main/java/org/springframework/security/config/authentication/AuthenticationManagerFactoryBean.java\n+++ b/config/src/main/java/org/springframework/security/config/authentication/AuthenticationManagerFactoryBean.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -40,6 +40,7 @@\n  * has forgotten to declare the &lt;authentication-manager&gt; element.\n  *\n  * @author Luke Taylor\n+ * @author Ngoc Nhan\n  * @since 3.0\n  */\n public class AuthenticationManagerFactoryBean implements FactoryBean<AuthenticationManager>, BeanFactoryAware {\n@@ -61,13 +62,13 @@ public AuthenticationManager getObject() throws Exception {\n \t\t\tif (!BeanIds.AUTHENTICATION_MANAGER.equals(ex.getBeanName())) {\n \t\t\t\tthrow ex;\n \t\t\t}\n-\t\t\tUserDetailsService uds = getBeanOrNull(UserDetailsService.class);\n+\t\t\tUserDetailsService uds = this.bf.getBeanProvider(UserDetailsService.class).getIfUnique();\n \t\t\tif (uds == null) {\n \t\t\t\tthrow new NoSuchBeanDefinitionException(BeanIds.AUTHENTICATION_MANAGER, MISSING_BEAN_ERROR_MESSAGE);\n \t\t\t}\n \t\t\tDaoAuthenticationProvider provider = new DaoAuthenticationProvider();\n \t\t\tprovider.setUserDetailsService(uds);\n-\t\t\tPasswordEncoder passwordEncoder = getBeanOrNull(PasswordEncoder.class);\n+\t\t\tPasswordEncoder passwordEncoder = this.bf.getBeanProvider(PasswordEncoder.class).getIfUnique();\n \t\t\tif (passwordEncoder != null) {\n \t\t\t\tprovider.setPasswordEncoder(passwordEncoder);\n \t\t\t}\n@@ -99,13 +100,4 @@ public void setObservationRegistry(ObservationRegistry observationRegistry) {\n \t\tthis.observationRegistry = observationRegistry;\n \t}\n \n-\tprivate <T> T getBeanOrNull(Class<T> type) {\n-\t\ttry {\n-\t\t\treturn this.bf.getBean(type);\n-\t\t}\n-\t\tcatch (NoSuchBeanDefinitionException noUds) {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n }\n\ndiff --git a/config/src/main/java/org/springframework/security/config/http/GrantedAuthorityDefaultsParserUtils.java b/config/src/main/java/org/springframework/security/config/http/GrantedAuthorityDefaultsParserUtils.java\nindex 611e46cbfad..570edfd764f 100644\n--- a/config/src/main/java/org/springframework/security/config/http/GrantedAuthorityDefaultsParserUtils.java\n+++ b/config/src/main/java/org/springframework/security/config/http/GrantedAuthorityDefaultsParserUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2018 the original author or authors.\n+ * Copyright 2012-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -25,6 +25,7 @@\n \n /**\n  * @author Rob Winch\n+ * @author Ngoc Nhan\n  * @since 4.2\n  */\n final class GrantedAuthorityDefaultsParserUtils {\n@@ -49,13 +50,8 @@ abstract static class AbstractGrantedAuthorityDefaultsBeanFactory implements App\n \n \t\t@Override\n \t\tpublic final void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n-\t\t\tString[] grantedAuthorityDefaultsBeanNames = applicationContext\n-\t\t\t\t.getBeanNamesForType(GrantedAuthorityDefaults.class);\n-\t\t\tif (grantedAuthorityDefaultsBeanNames.length == 1) {\n-\t\t\t\tGrantedAuthorityDefaults grantedAuthorityDefaults = applicationContext\n-\t\t\t\t\t.getBean(grantedAuthorityDefaultsBeanNames[0], GrantedAuthorityDefaults.class);\n-\t\t\t\tthis.rolePrefix = grantedAuthorityDefaults.getRolePrefix();\n-\t\t\t}\n+\t\t\tapplicationContext.getBeanProvider(GrantedAuthorityDefaults.class)\n+\t\t\t\t.ifUnique((grantedAuthorityDefaults) -> this.rolePrefix = grantedAuthorityDefaults.getRolePrefix());\n \t\t}\n \n \t\tabstract Object getBean();\n\ndiff --git a/config/src/main/java/org/springframework/security/config/method/GlobalMethodSecurityBeanDefinitionParser.java b/config/src/main/java/org/springframework/security/config/method/GlobalMethodSecurityBeanDefinitionParser.java\nindex 70bb1965799..a2717d5be27 100644\n--- a/config/src/main/java/org/springframework/security/config/method/GlobalMethodSecurityBeanDefinitionParser.java\n+++ b/config/src/main/java/org/springframework/security/config/method/GlobalMethodSecurityBeanDefinitionParser.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -88,6 +88,7 @@\n  * @author Ben Alex\n  * @author Luke Taylor\n  * @author Rob Winch\n+ * @author Ngoc Nhan\n  * @since 2.0\n  * @deprecated Use {@link MethodSecurityBeanDefinitionParser} instead\n  */\n@@ -483,13 +484,8 @@ abstract static class AbstractGrantedAuthorityDefaultsBeanFactory implements App\n \n \t\t@Override\n \t\tpublic final void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n-\t\t\tString[] grantedAuthorityDefaultsBeanNames = applicationContext\n-\t\t\t\t.getBeanNamesForType(GrantedAuthorityDefaults.class);\n-\t\t\tif (grantedAuthorityDefaultsBeanNames.length == 1) {\n-\t\t\t\tGrantedAuthorityDefaults grantedAuthorityDefaults = applicationContext\n-\t\t\t\t\t.getBean(grantedAuthorityDefaultsBeanNames[0], GrantedAuthorityDefaults.class);\n-\t\t\t\tthis.rolePrefix = grantedAuthorityDefaults.getRolePrefix();\n-\t\t\t}\n+\t\t\tapplicationContext.getBeanProvider(GrantedAuthorityDefaults.class)\n+\t\t\t\t.ifUnique((grantedAuthorityDefaults) -> this.rolePrefix = grantedAuthorityDefaults.getRolePrefix());\n \t\t}\n \n \t}\n\ndiff --git a/config/src/main/java/org/springframework/security/config/method/MethodSecurityBeanDefinitionParser.java b/config/src/main/java/org/springframework/security/config/method/MethodSecurityBeanDefinitionParser.java\nindex 8bde3921433..fef5a1a3549 100644\n--- a/config/src/main/java/org/springframework/security/config/method/MethodSecurityBeanDefinitionParser.java\n+++ b/config/src/main/java/org/springframework/security/config/method/MethodSecurityBeanDefinitionParser.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -67,6 +67,7 @@\n  * Processes the top-level \"method-security\" element.\n  *\n  * @author Josh Cummings\n+ * @author Ngoc Nhan\n  * @since 5.6\n  */\n public class MethodSecurityBeanDefinitionParser implements BeanDefinitionParser {\n@@ -307,13 +308,9 @@ public Class<?> getObjectType() {\n \n \t\t@Override\n \t\tpublic void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n-\t\t\tString[] grantedAuthorityDefaultsBeanNames = applicationContext\n-\t\t\t\t.getBeanNamesForType(GrantedAuthorityDefaults.class);\n-\t\t\tif (grantedAuthorityDefaultsBeanNames.length == 1) {\n-\t\t\t\tGrantedAuthorityDefaults grantedAuthorityDefaults = applicationContext\n-\t\t\t\t\t.getBean(grantedAuthorityDefaultsBeanNames[0], GrantedAuthorityDefaults.class);\n-\t\t\t\tthis.expressionHandler.setDefaultRolePrefix(grantedAuthorityDefaults.getRolePrefix());\n-\t\t\t}\n+\t\t\tapplicationContext.getBeanProvider(GrantedAuthorityDefaults.class)\n+\t\t\t\t.ifUnique((grantedAuthorityDefaults) -> this.expressionHandler\n+\t\t\t\t\t.setDefaultRolePrefix(grantedAuthorityDefaults.getRolePrefix()));\n \t\t}\n \n \t}\n@@ -347,13 +344,9 @@ public Class<?> getObjectType() {\n \n \t\t@Override\n \t\tpublic void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n-\t\t\tString[] grantedAuthorityDefaultsBeanNames = applicationContext\n-\t\t\t\t.getBeanNamesForType(GrantedAuthorityDefaults.class);\n-\t\t\tif (grantedAuthorityDefaultsBeanNames.length == 1) {\n-\t\t\t\tGrantedAuthorityDefaults grantedAuthorityDefaults = applicationContext\n-\t\t\t\t\t.getBean(grantedAuthorityDefaultsBeanNames[0], GrantedAuthorityDefaults.class);\n-\t\t\t\tthis.manager.setRolePrefix(grantedAuthorityDefaults.getRolePrefix());\n-\t\t\t}\n+\t\t\tapplicationContext.getBeanProvider(GrantedAuthorityDefaults.class)\n+\t\t\t\t.ifUnique((grantedAuthorityDefaults) -> this.manager\n+\t\t\t\t\t.setRolePrefix(grantedAuthorityDefaults.getRolePrefix()));\n \t\t}\n \n \t\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\ndiff --git a/config/src/main/java/org/springframework/security/config/web/server/ServerHttpSecurity.java b/config/src/main/java/org/springframework/security/config/web/server/ServerHttpSecurity.java\nindex cd52e80738a..465caecb6ac 100644\n--- a/config/src/main/java/org/springframework/security/config/web/server/ServerHttpSecurity.java\n+++ b/config/src/main/java/org/springframework/security/config/web/server/ServerHttpSecurity.java\n@@ -1734,26 +1734,22 @@ private <T> T getBean(Class<T> beanClass) {\n \t}\n \n \tprivate <T> T getBeanOrDefault(Class<T> beanClass, T defaultInstance) {\n-\t\tT bean = getBeanOrNull(beanClass);\n-\t\tif (bean == null) {\n+\t\tif (this.context == null) {\n \t\t\treturn defaultInstance;\n \t\t}\n-\t\treturn bean;\n+\t\treturn this.context.getBeanProvider(beanClass).getIfUnique(() -> defaultInstance);\n \t}\n \n \tprivate <T> T getBeanOrNull(Class<T> beanClass) {\n \t\treturn getBeanOrNull(ResolvableType.forClass(beanClass));\n \t}\n \n+\t@SuppressWarnings(\"unchecked\")\n \tprivate <T> T getBeanOrNull(ResolvableType type) {\n \t\tif (this.context == null) {\n \t\t\treturn null;\n \t\t}\n-\t\tString[] names = this.context.getBeanNamesForType(type);\n-\t\tif (names.length == 1) {\n-\t\t\treturn (T) this.context.getBean(names[0]);\n-\t\t}\n-\t\treturn null;\n+\t\treturn (T) this.context.getBeanProvider(type).getIfUnique();\n \t}\n \n \tprivate <T> T getBeanOrNull(String beanName, Class<T> requiredClass) {\n",
    "test_patch": "diff --git a/config/src/test/java/org/springframework/security/config/web/server/CorsSpecTests.java b/config/src/test/java/org/springframework/security/config/web/server/CorsSpecTests.java\nindex 07d22be6172..63646400efd 100644\n--- a/config/src/test/java/org/springframework/security/config/web/server/CorsSpecTests.java\n+++ b/config/src/test/java/org/springframework/security/config/web/server/CorsSpecTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -29,7 +29,7 @@\n import org.mockito.junit.jupiter.MockitoExtension;\n \n import org.springframework.context.ApplicationContext;\n-import org.springframework.core.ResolvableType;\n+import org.springframework.context.support.GenericApplicationContext;\n import org.springframework.http.HttpHeaders;\n import org.springframework.security.test.web.reactive.server.WebTestClientBuilder;\n import org.springframework.test.web.reactive.server.FluxExchangeResult;\n@@ -51,7 +51,6 @@ public class CorsSpecTests {\n \t@Mock\n \tprivate CorsConfigurationSource source;\n \n-\t@Mock\n \tprivate ApplicationContext context;\n \n \tServerHttpSecurity http;\n@@ -62,6 +61,8 @@ public class CorsSpecTests {\n \n \t@BeforeEach\n \tpublic void setup() {\n+\t\tthis.context = new GenericApplicationContext();\n+\t\t((GenericApplicationContext) this.context).refresh();\n \t\tthis.http = new TestingServerHttpSecurity().applicationContext(this.context);\n \t}\n \n@@ -92,9 +93,7 @@ public void corsWhenEnabledInLambdaThenAccessControlAllowOriginAndSecurityHeader\n \t@Test\n \tpublic void corsWhenCorsConfigurationSourceBeanThenAccessControlAllowOriginAndSecurityHeaders() {\n \t\tgivenGetCorsConfigurationWillReturnWildcard();\n-\t\tgiven(this.context.getBeanNamesForType(any(ResolvableType.class))).willReturn(new String[] { \"source\" },\n-\t\t\t\tnew String[0]);\n-\t\tgiven(this.context.getBean(\"source\")).willReturn(this.source);\n+\t\t((GenericApplicationContext) this.context).registerBean(CorsConfigurationSource.class, () -> this.source);\n \t\tthis.expectedHeaders.set(\"Access-Control-Allow-Origin\", \"*\");\n \t\tthis.expectedHeaders.set(\"X-Frame-Options\", \"DENY\");\n \t\tassertHeaders();\n@@ -102,7 +101,6 @@ public void corsWhenCorsConfigurationSourceBeanThenAccessControlAllowOriginAndSe\n \n \t@Test\n \tpublic void corsWhenNoConfigurationSourceThenNoCorsHeaders() {\n-\t\tgiven(this.context.getBeanNamesForType(any(ResolvableType.class))).willReturn(new String[0]);\n \t\tthis.headerNamesNotPresent.add(\"Access-Control-Allow-Origin\");\n \t\tassertHeaders();\n \t}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "spring-projects__spring-security-15685",
    "pr_id": 15685,
    "issue_id": 15204,
    "repo": "spring-projects/spring-security",
    "problem_statement": "CookieRequestCache should set SameSite on the REDIRECT_URI cookie\n**Describe the bug**\r\nWhen using CookieRequestCache, Firefox complains:\r\n\r\n> Cookie “REDIRECT_URI” does not have a proper “SameSite” attribute value. Soon, cookies without the “SameSite” attribute or with an invalid value will be treated as “Lax”. This means that the cookie will no longer be sent in third-party contexts. If your application depends on this cookie being available in such contexts, please add the “SameSite=None“ attribute to it. To know more about the “SameSite“ attribute, read https://developer.mozilla.org/docs/Web/HTTP/Headers/Set-Cookie/SameSite\r\n\r\n![image](https://github.com/spring-projects/spring-security/assets/647851/fff9ae1c-5cbc-4711-9d1a-247bce26f8fd)\r\n\r\n**To Reproduce**\r\nConfigure your application to use CookieRequestCache, like so:\r\n```java\r\nhttp.requestCache(config -> config.requestCache(new CookieRequestCache()));\r\n```\r\nNote that due to #2932 you likely also need to separately pass the CookieRequestCache to SavedRequestAwareAuthenticationSuccessHandler.\r\n\r\n**Expected behavior**\r\nNo warning in Firefox. The POST /login request should also not show up as “blocked”.\r\n\r\n![image](https://github.com/spring-projects/spring-security/assets/647851/b12268ac-da33-4aae-9b84-071b0ac1f65d)\r\n\r\n**Sample**\r\n\r\nNo sample provided. This is easy to try on any project.",
    "issue_word_count": 188,
    "test_files_count": 2,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "web/src/main/java/org/springframework/security/web/savedrequest/CookieRequestCache.java",
      "web/src/main/java/org/springframework/security/web/server/savedrequest/CookieServerRequestCache.java",
      "web/src/test/java/org/springframework/security/web/savedrequest/CookieRequestCacheTests.java",
      "web/src/test/java/org/springframework/security/web/server/savedrequest/CookieServerRequestCacheTests.java"
    ],
    "pr_changed_test_files": [
      "web/src/test/java/org/springframework/security/web/savedrequest/CookieRequestCacheTests.java",
      "web/src/test/java/org/springframework/security/web/server/savedrequest/CookieServerRequestCacheTests.java"
    ],
    "base_commit": "add5c561360daf61b7a4978dd895b4b386c8c527",
    "head_commit": "33e802ca6c8b488c5c654d5fac48084ea9908b41",
    "repo_url": "https://github.com/spring-projects/spring-security/pull/15685",
    "swe_url": "https://swe-bench-plus.turing.com/repos/spring-projects__spring-security/15685",
    "dockerfile": "",
    "pr_merged_at": "2024-09-03T12:41:30.000Z",
    "patch": "diff --git a/web/src/main/java/org/springframework/security/web/savedrequest/CookieRequestCache.java b/web/src/main/java/org/springframework/security/web/savedrequest/CookieRequestCache.java\nindex 8f245eb7ea0..a51960532f1 100644\n--- a/web/src/main/java/org/springframework/security/web/savedrequest/CookieRequestCache.java\n+++ b/web/src/main/java/org/springframework/security/web/savedrequest/CookieRequestCache.java\n@@ -18,6 +18,7 @@\n \n import java.util.Base64;\n import java.util.Collections;\n+import java.util.function.Consumer;\n \n import jakarta.servlet.http.Cookie;\n import jakarta.servlet.http.HttpServletRequest;\n@@ -51,6 +52,9 @@ public class CookieRequestCache implements RequestCache {\n \n \tprivate static final int COOKIE_MAX_AGE = -1;\n \n+\tprivate Consumer<Cookie> cookieCustomizer = (cookie) -> {\n+\t};\n+\n \t@Override\n \tpublic void saveRequest(HttpServletRequest request, HttpServletResponse response) {\n \t\tif (!this.requestMatcher.matches(request)) {\n@@ -63,6 +67,7 @@ public void saveRequest(HttpServletRequest request, HttpServletResponse response\n \t\tsavedCookie.setSecure(request.isSecure());\n \t\tsavedCookie.setPath(getCookiePath(request));\n \t\tsavedCookie.setHttpOnly(true);\n+\t\tthis.cookieCustomizer.accept(savedCookie);\n \t\tresponse.addCookie(savedCookie);\n \t}\n \n@@ -152,4 +157,14 @@ public void setRequestMatcher(RequestMatcher requestMatcher) {\n \t\tthis.requestMatcher = requestMatcher;\n \t}\n \n+\t/**\n+\t * Sets the {@link Consumer}, allowing customization of cookie.\n+\t * @param cookieCustomizer customize for cookie\n+\t * @since 6.4\n+\t */\n+\tpublic void setCookieCustomizer(Consumer<Cookie> cookieCustomizer) {\n+\t\tAssert.notNull(cookieCustomizer, \"cookieCustomizer cannot be null\");\n+\t\tthis.cookieCustomizer = cookieCustomizer;\n+\t}\n+\n }\n\ndiff --git a/web/src/main/java/org/springframework/security/web/server/savedrequest/CookieServerRequestCache.java b/web/src/main/java/org/springframework/security/web/server/savedrequest/CookieServerRequestCache.java\nindex bbe16dce1f9..0c9302a70d5 100644\n--- a/web/src/main/java/org/springframework/security/web/server/savedrequest/CookieServerRequestCache.java\n+++ b/web/src/main/java/org/springframework/security/web/server/savedrequest/CookieServerRequestCache.java\n@@ -20,6 +20,7 @@\n import java.time.Duration;\n import java.util.Base64;\n import java.util.Collections;\n+import java.util.function.Consumer;\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n@@ -59,6 +60,9 @@ public class CookieServerRequestCache implements ServerRequestCache {\n \n \tprivate ServerWebExchangeMatcher saveRequestMatcher = createDefaultRequestMatcher();\n \n+\tprivate Consumer<ResponseCookie.ResponseCookieBuilder> cookieCustomizer = (cookieBuilder) -> {\n+\t};\n+\n \t/**\n \t * Sets the matcher to determine if the request should be saved. The default is to\n \t * match on any GET request.\n@@ -77,8 +81,10 @@ public Mono<Void> saveRequest(ServerWebExchange exchange) {\n \t\t\t.map((m) -> exchange.getResponse())\n \t\t\t.map(ServerHttpResponse::getCookies)\n \t\t\t.doOnNext((cookies) -> {\n-\t\t\t\tResponseCookie redirectUriCookie = createRedirectUriCookie(exchange.getRequest());\n-\t\t\t\tcookies.add(REDIRECT_URI_COOKIE_NAME, redirectUriCookie);\n+\t\t\t\tResponseCookie.ResponseCookieBuilder redirectUriCookie = createRedirectUriCookieBuilder(\n+\t\t\t\t\t\texchange.getRequest());\n+\t\t\t\tthis.cookieCustomizer.accept(redirectUriCookie);\n+\t\t\t\tcookies.add(REDIRECT_URI_COOKIE_NAME, redirectUriCookie.build());\n \t\t\t\tlogger.debug(LogMessage.format(\"Request added to Cookie: %s\", redirectUriCookie));\n \t\t\t})\n \t\t\t.then();\n@@ -103,25 +109,35 @@ public Mono<ServerHttpRequest> removeMatchingRequest(ServerWebExchange exchange)\n \t\t\t.thenReturn(exchange.getRequest());\n \t}\n \n-\tprivate static ResponseCookie createRedirectUriCookie(ServerHttpRequest request) {\n+\t/**\n+\t * Sets the {@link Consumer}, allowing customization of cookie.\n+\t * @param cookieCustomizer customize for cookie\n+\t * @since 6.4\n+\t */\n+\tpublic void setCookieCustomizer(Consumer<ResponseCookie.ResponseCookieBuilder> cookieCustomizer) {\n+\t\tAssert.notNull(cookieCustomizer, \"cookieCustomizer cannot be null\");\n+\t\tthis.cookieCustomizer = cookieCustomizer;\n+\t}\n+\n+\tprivate static ResponseCookie.ResponseCookieBuilder createRedirectUriCookieBuilder(ServerHttpRequest request) {\n \t\tString path = request.getPath().pathWithinApplication().value();\n \t\tString query = request.getURI().getRawQuery();\n \t\tString redirectUri = path + ((query != null) ? \"?\" + query : \"\");\n-\t\treturn createResponseCookie(request, encodeCookie(redirectUri), COOKIE_MAX_AGE);\n+\t\treturn createResponseCookieBuilder(request, encodeCookie(redirectUri), COOKIE_MAX_AGE);\n \t}\n \n \tprivate static ResponseCookie invalidateRedirectUriCookie(ServerHttpRequest request) {\n-\t\treturn createResponseCookie(request, null, Duration.ZERO);\n+\t\treturn createResponseCookieBuilder(request, null, Duration.ZERO).build();\n \t}\n \n-\tprivate static ResponseCookie createResponseCookie(ServerHttpRequest request, String cookieValue, Duration age) {\n+\tprivate static ResponseCookie.ResponseCookieBuilder createResponseCookieBuilder(ServerHttpRequest request,\n+\t\t\tString cookieValue, Duration age) {\n \t\treturn ResponseCookie.from(REDIRECT_URI_COOKIE_NAME, cookieValue)\n \t\t\t.path(request.getPath().contextPath().value() + \"/\")\n \t\t\t.maxAge(age)\n \t\t\t.httpOnly(true)\n \t\t\t.secure(\"https\".equalsIgnoreCase(request.getURI().getScheme()))\n-\t\t\t.sameSite(\"Lax\")\n-\t\t\t.build();\n+\t\t\t.sameSite(\"Lax\");\n \t}\n \n \tprivate static String encodeCookie(String cookieValue) {\n",
    "test_patch": "diff --git a/web/src/test/java/org/springframework/security/web/savedrequest/CookieRequestCacheTests.java b/web/src/test/java/org/springframework/security/web/savedrequest/CookieRequestCacheTests.java\nindex 71def1f3255..6b18e05002d 100644\n--- a/web/src/test/java/org/springframework/security/web/savedrequest/CookieRequestCacheTests.java\n+++ b/web/src/test/java/org/springframework/security/web/savedrequest/CookieRequestCacheTests.java\n@@ -20,6 +20,7 @@\n import java.util.Base64;\n import java.util.Collections;\n import java.util.Locale;\n+import java.util.function.Consumer;\n \n import jakarta.servlet.http.Cookie;\n import jakarta.servlet.http.HttpServletRequest;\n@@ -204,6 +205,22 @@ public void matchingRequestWhenMatchThenKeepOriginalRequestLocale() {\n \t\tassertThat(Collections.list(matchingRequest.getLocales())).contains(Locale.FRENCH, Locale.GERMANY);\n \t}\n \n+\t@Test\n+\tpublic void setCookieCustomizer() {\n+\t\tConsumer<Cookie> cookieCustomizer = (cookie) -> {\n+\t\t\tcookie.setAttribute(\"SameSite\", \"Strict\");\n+\t\t\tcookie.setAttribute(\"CustomAttribute\", \"CustomValue\");\n+\t\t};\n+\t\tCookieRequestCache cookieRequestCache = new CookieRequestCache();\n+\t\tcookieRequestCache.setCookieCustomizer(cookieCustomizer);\n+\t\tMockHttpServletResponse response = new MockHttpServletResponse();\n+\t\tcookieRequestCache.saveRequest(new MockHttpServletRequest(), response);\n+\t\tCookie savedCookie = response.getCookie(DEFAULT_COOKIE_NAME);\n+\t\tassertThat(savedCookie).isNotNull();\n+\t\tassertThat(savedCookie.getAttribute(\"SameSite\")).isEqualTo(\"Strict\");\n+\t\tassertThat(savedCookie.getAttribute(\"CustomAttribute\")).isEqualTo(\"CustomValue\");\n+\t}\n+\n \tprivate static String encodeCookie(String cookieValue) {\n \t\treturn Base64.getEncoder().encodeToString(cookieValue.getBytes());\n \t}\n\ndiff --git a/web/src/test/java/org/springframework/security/web/server/savedrequest/CookieServerRequestCacheTests.java b/web/src/test/java/org/springframework/security/web/server/savedrequest/CookieServerRequestCacheTests.java\nindex 0c4ce943e0e..759579b0b34 100644\n--- a/web/src/test/java/org/springframework/security/web/server/savedrequest/CookieServerRequestCacheTests.java\n+++ b/web/src/test/java/org/springframework/security/web/server/savedrequest/CookieServerRequestCacheTests.java\n@@ -138,4 +138,20 @@ public void removeMatchingRequestThenRedirectUriCookieExpired() {\n \t\t\t\t\"REDIRECT_URI=; Path=/; Max-Age=0; Expires=Thu, 01 Jan 1970 00:00:00 GMT; HttpOnly; SameSite=Lax\");\n \t}\n \n+\t@Test\n+\tpublic void saveRequestWithCookieCustomizerThenSameSiteStrict() {\n+\t\tMockServerWebExchange exchange = MockServerWebExchange\n+\t\t\t.from(MockServerHttpRequest.get(\"/secured/\").accept(MediaType.TEXT_HTML));\n+\t\tCookieServerRequestCache cacheWithCustomizer = new CookieServerRequestCache();\n+\t\tcacheWithCustomizer.setCookieCustomizer(((cookieBuilder) -> cookieBuilder.sameSite(\"Strict\")));\n+\t\tcacheWithCustomizer.saveRequest(exchange).block();\n+\t\tMultiValueMap<String, ResponseCookie> cookies = exchange.getResponse().getCookies();\n+\t\tassertThat(cookies).hasSize(1);\n+\t\tResponseCookie cookie = cookies.getFirst(\"REDIRECT_URI\");\n+\t\tassertThat(cookie).isNotNull();\n+\t\tString encodedRedirectUrl = Base64.getEncoder().encodeToString(\"/secured/\".getBytes());\n+\t\tassertThat(cookie.toString())\n+\t\t\t.isEqualTo(\"REDIRECT_URI=\" + encodedRedirectUrl + \"; Path=/; HttpOnly; SameSite=Strict\");\n+\t}\n+\n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "spring-projects__spring-security-15580",
    "pr_id": 15580,
    "issue_id": 421,
    "repo": "spring-projects/spring-security",
    "problem_statement": "SEC-160:  NullPointerException when Initializing FilterSecurityInterceptor\n[\"Luke Taylor\":https://jira.spring.io/secure/ViewProfile.jspa?name=luke](Migrated from [\"SEC-160\":https://jira.spring.io/browse/SEC-160?redirect=false]) said:\n\nhttp://forum.springframework.org/showthread.php?t=21046\n\nUsing a \"==\" in the objectDefinitionSource causes FilterInvocationDefinitionSourceEditor to parse an empty config attribute.\n",
    "issue_word_count": 52,
    "test_files_count": 8,
    "non_test_files_count": 7,
    "pr_changed_files": [
      "config/src/test/java/org/springframework/security/config/annotation/web/configurers/DefaultLoginPageConfigurerTests.java",
      "config/src/test/java/org/springframework/security/config/http/FormLoginBeanDefinitionParserTests.java",
      "web/src/main/java/org/springframework/security/web/authentication/ui/DefaultLoginPageGeneratingFilter.java",
      "web/src/main/java/org/springframework/security/web/authentication/ui/DefaultLogoutPageGeneratingFilter.java",
      "web/src/main/java/org/springframework/security/web/authentication/ui/DefaultOneTimeTokenSubmitPageGeneratingFilter.java",
      "web/src/main/java/org/springframework/security/web/authentication/ui/HtmlTemplates.java",
      "web/src/main/java/org/springframework/security/web/server/ui/HtmlTemplates.java",
      "web/src/main/java/org/springframework/security/web/server/ui/LoginPageGeneratingWebFilter.java",
      "web/src/main/java/org/springframework/security/web/server/ui/LogoutPageGeneratingWebFilter.java",
      "web/src/test/java/org/springframework/security/web/authentication/DefaultLoginPageGeneratingFilterTests.java",
      "web/src/test/java/org/springframework/security/web/authentication/ui/DefaultLogoutPageGeneratingFilterTests.java",
      "web/src/test/java/org/springframework/security/web/authentication/ui/DefaultOneTimeTokenSubmitPageGeneratingFilterTests.java",
      "web/src/test/java/org/springframework/security/web/authentication/ui/HtmlTemplatesTests.java",
      "web/src/test/java/org/springframework/security/web/server/ui/LoginPageGeneratingWebFilterTests.java",
      "web/src/test/java/org/springframework/security/web/server/ui/LogoutPageGeneratingWebFilterTests.java"
    ],
    "pr_changed_test_files": [
      "config/src/test/java/org/springframework/security/config/annotation/web/configurers/DefaultLoginPageConfigurerTests.java",
      "config/src/test/java/org/springframework/security/config/http/FormLoginBeanDefinitionParserTests.java",
      "web/src/test/java/org/springframework/security/web/authentication/DefaultLoginPageGeneratingFilterTests.java",
      "web/src/test/java/org/springframework/security/web/authentication/ui/DefaultLogoutPageGeneratingFilterTests.java",
      "web/src/test/java/org/springframework/security/web/authentication/ui/DefaultOneTimeTokenSubmitPageGeneratingFilterTests.java",
      "web/src/test/java/org/springframework/security/web/authentication/ui/HtmlTemplatesTests.java",
      "web/src/test/java/org/springframework/security/web/server/ui/LoginPageGeneratingWebFilterTests.java",
      "web/src/test/java/org/springframework/security/web/server/ui/LogoutPageGeneratingWebFilterTests.java"
    ],
    "base_commit": "33495441b56ec6ce9e85b5e824460b2b4984f7e6",
    "head_commit": "194ccbcb9ac5837977a6a462fc1d006a78582727",
    "repo_url": "https://github.com/spring-projects/spring-security/pull/15580",
    "swe_url": "https://swe-bench-plus.turing.com/repos/spring-projects__spring-security/15580",
    "dockerfile": "",
    "pr_merged_at": "2024-09-05T22:02:42.000Z",
    "patch": "diff --git a/web/src/main/java/org/springframework/security/web/authentication/ui/DefaultLoginPageGeneratingFilter.java b/web/src/main/java/org/springframework/security/web/authentication/ui/DefaultLoginPageGeneratingFilter.java\nindex 042fc41d262..7373443dce9 100644\n--- a/web/src/main/java/org/springframework/security/web/authentication/ui/DefaultLoginPageGeneratingFilter.java\n+++ b/web/src/main/java/org/springframework/security/web/authentication/ui/DefaultLoginPageGeneratingFilter.java\n@@ -21,6 +21,7 @@\n import java.util.Collections;\n import java.util.Map;\n import java.util.function.Function;\n+import java.util.stream.Collectors;\n \n import jakarta.servlet.FilterChain;\n import jakarta.servlet.ServletException;\n@@ -38,7 +39,6 @@\n import org.springframework.util.Assert;\n import org.springframework.util.StringUtils;\n import org.springframework.web.filter.GenericFilterBean;\n-import org.springframework.web.util.HtmlUtils;\n \n /**\n  * For internal use with namespace configuration in the case where a user doesn't\n@@ -205,87 +205,106 @@ private void doFilter(HttpServletRequest request, HttpServletResponse response,\n \tprivate String generateLoginPageHtml(HttpServletRequest request, boolean loginError, boolean logoutSuccess) {\n \t\tString errorMsg = loginError ? getLoginErrorMessage(request) : \"Invalid credentials\";\n \t\tString contextPath = request.getContextPath();\n-\t\tStringBuilder sb = new StringBuilder();\n-\t\tsb.append(\"<!DOCTYPE html>\\n\");\n-\t\tsb.append(\"<html lang=\\\"en\\\">\\n\");\n-\t\tsb.append(\"  <head>\\n\");\n-\t\tsb.append(\"    <meta charset=\\\"utf-8\\\">\\n\");\n-\t\tsb.append(\"    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1, shrink-to-fit=no\\\">\\n\");\n-\t\tsb.append(\"    <meta name=\\\"description\\\" content=\\\"\\\">\\n\");\n-\t\tsb.append(\"    <meta name=\\\"author\\\" content=\\\"\\\">\\n\");\n-\t\tsb.append(\"    <title>Please sign in</title>\\n\");\n-\t\tsb.append(CssUtils.getCssStyleBlock().indent(4));\n-\t\tsb.append(\"  </head>\\n\");\n-\t\tsb.append(\"  <body>\\n\");\n-\t\tsb.append(\"     <div class=\\\"content\\\">\\n\");\n-\t\tif (this.formLoginEnabled) {\n-\t\t\tsb.append(\"      <form class=\\\"login-form\\\" method=\\\"post\\\" action=\\\"\" + contextPath\n-\t\t\t\t\t+ this.authenticationUrl + \"\\\">\\n\");\n-\t\t\tsb.append(\"        <h2>Please sign in</h2>\\n\");\n-\t\t\tsb.append(createError(loginError, errorMsg) + createLogoutSuccess(logoutSuccess) + \"        <p>\\n\");\n-\t\t\tsb.append(\"          <label for=\\\"username\\\" class=\\\"screenreader\\\">Username</label>\\n\");\n-\t\t\tsb.append(\"          <input type=\\\"text\\\" id=\\\"username\\\" name=\\\"\" + this.usernameParameter\n-\t\t\t\t\t+ \"\\\" placeholder=\\\"Username\\\" required autofocus>\\n\");\n-\t\t\tsb.append(\"        </p>\\n\");\n-\t\t\tsb.append(\"        <p>\\n\");\n-\t\t\tsb.append(\"          <label for=\\\"password\\\" class=\\\"screenreader\\\">Password</label>\\n\");\n-\t\t\tsb.append(\"          <input type=\\\"password\\\" id=\\\"password\\\" name=\\\"\" + this.passwordParameter\n-\t\t\t\t\t+ \"\\\" placeholder=\\\"Password\\\" required>\\n\");\n-\t\t\tsb.append(\"        </p>\\n\");\n-\t\t\tsb.append(createRememberMe(this.rememberMeParameter) + renderHiddenInputs(request));\n-\t\t\tsb.append(\"        <button type=\\\"submit\\\" class=\\\"primary\\\">Sign in</button>\\n\");\n-\t\t\tsb.append(\"      </form>\\n\");\n+\n+\t\treturn HtmlTemplates.fromTemplate(LOGIN_PAGE_TEMPLATE)\n+\t\t\t.withRawHtml(\"cssStyle\", CssUtils.getCssStyleBlock().indent(4))\n+\t\t\t.withRawHtml(\"formLogin\", renderFormLogin(request, loginError, logoutSuccess, contextPath, errorMsg))\n+\t\t\t.withRawHtml(\"oneTimeTokenLogin\",\n+\t\t\t\t\trenderOneTimeTokenLogin(request, loginError, logoutSuccess, contextPath, errorMsg))\n+\t\t\t.withRawHtml(\"oauth2Login\", renderOAuth2Login(loginError, logoutSuccess, errorMsg, contextPath))\n+\t\t\t.withRawHtml(\"saml2Login\", renderSaml2Login(loginError, logoutSuccess, errorMsg, contextPath))\n+\t\t\t.render();\n+\t}\n+\n+\tprivate String renderFormLogin(HttpServletRequest request, boolean loginError, boolean logoutSuccess,\n+\t\t\tString contextPath, String errorMsg) {\n+\t\tif (!this.formLoginEnabled) {\n+\t\t\treturn \"\";\n \t\t}\n-\t\tif (this.oneTimeTokenEnabled) {\n-\t\t\tsb.append(\"      <form id=\\\"ott-form\\\" class=\\\"login-form\\\" method=\\\"post\\\" action=\\\"\" + contextPath\n-\t\t\t\t\t+ this.generateOneTimeTokenUrl + \"\\\">\\n\");\n-\t\t\tsb.append(\"        <h2>Request a One-Time Token</h2>\\n\");\n-\t\t\tsb.append(createError(loginError, errorMsg) + createLogoutSuccess(logoutSuccess) + \"<p>\\n\");\n-\t\t\tsb.append(\"          <label for=\\\"ott-username\\\" class=\\\"screenreader\\\">Username</label>\\n\");\n-\t\t\tsb.append(\n-\t\t\t\t\t\"          <input type=\\\"text\\\" id=\\\"ott-username\\\" name=\\\"username\\\" placeholder=\\\"Username\\\" required>\\n\");\n-\t\t\tsb.append(\"        </p>\\n\");\n-\t\t\tsb.append(renderHiddenInputs(request));\n-\t\t\tsb.append(\"          <button class=\\\"primary\\\" type=\\\"submit\\\" form=\\\"ott-form\\\">Send Token</button>\\n\");\n-\t\t\tsb.append(\"      </form>\\n\");\n+\n+\t\tString hiddenInputs = this.resolveHiddenInputs.apply(request)\n+\t\t\t.entrySet()\n+\t\t\t.stream()\n+\t\t\t.map((inputKeyValue) -> renderHiddenInput(inputKeyValue.getKey(), inputKeyValue.getValue()))\n+\t\t\t.collect(Collectors.joining(\"\\n\"));\n+\n+\t\treturn HtmlTemplates.fromTemplate(LOGIN_FORM_TEMPLATE)\n+\t\t\t.withValue(\"loginUrl\", contextPath + this.authenticationUrl)\n+\t\t\t.withRawHtml(\"errorMessage\", renderError(loginError, errorMsg))\n+\t\t\t.withRawHtml(\"logoutMessage\", renderSuccess(logoutSuccess))\n+\t\t\t.withValue(\"usernameParameter\", this.usernameParameter)\n+\t\t\t.withValue(\"passwordParameter\", this.passwordParameter)\n+\t\t\t.withRawHtml(\"rememberMeInput\", renderRememberMe(this.rememberMeParameter))\n+\t\t\t.withRawHtml(\"hiddenInputs\", hiddenInputs)\n+\t\t\t.render();\n+\t}\n+\n+\tprivate String renderOneTimeTokenLogin(HttpServletRequest request, boolean loginError, boolean logoutSuccess,\n+\t\t\tString contextPath, String errorMsg) {\n+\t\tif (!this.oneTimeTokenEnabled) {\n+\t\t\treturn \"\";\n \t\t}\n-\t\tif (this.oauth2LoginEnabled) {\n-\t\t\tsb.append(\"<h2>Login with OAuth 2.0</h2>\");\n-\t\t\tsb.append(createError(loginError, errorMsg));\n-\t\t\tsb.append(createLogoutSuccess(logoutSuccess));\n-\t\t\tsb.append(\"<table class=\\\"table table-striped\\\">\\n\");\n-\t\t\tfor (Map.Entry<String, String> clientAuthenticationUrlToClientName : this.oauth2AuthenticationUrlToClientName\n-\t\t\t\t.entrySet()) {\n-\t\t\t\tsb.append(\" <tr><td>\");\n-\t\t\t\tString url = clientAuthenticationUrlToClientName.getKey();\n-\t\t\t\tsb.append(\"<a href=\\\"\").append(contextPath).append(url).append(\"\\\">\");\n-\t\t\t\tString clientName = HtmlUtils.htmlEscape(clientAuthenticationUrlToClientName.getValue());\n-\t\t\t\tsb.append(clientName);\n-\t\t\t\tsb.append(\"</a>\");\n-\t\t\t\tsb.append(\"</td></tr>\\n\");\n-\t\t\t}\n-\t\t\tsb.append(\"</table>\\n\");\n+\n+\t\tString hiddenInputs = this.resolveHiddenInputs.apply(request)\n+\t\t\t.entrySet()\n+\t\t\t.stream()\n+\t\t\t.map((inputKeyValue) -> renderHiddenInput(inputKeyValue.getKey(), inputKeyValue.getValue()))\n+\t\t\t.collect(Collectors.joining(\"\\n\"));\n+\n+\t\treturn HtmlTemplates.fromTemplate(ONE_TIME_TEMPLATE)\n+\t\t\t.withValue(\"generateOneTimeTokenUrl\", contextPath + this.generateOneTimeTokenUrl)\n+\t\t\t.withRawHtml(\"errorMessage\", renderError(loginError, errorMsg))\n+\t\t\t.withRawHtml(\"logoutMessage\", renderSuccess(logoutSuccess))\n+\t\t\t.withRawHtml(\"hiddenInputs\", hiddenInputs)\n+\t\t\t.render();\n+\t}\n+\n+\tprivate String renderOAuth2Login(boolean loginError, boolean logoutSuccess, String errorMsg, String contextPath) {\n+\t\tif (!this.oauth2LoginEnabled) {\n+\t\t\treturn \"\";\n \t\t}\n-\t\tif (this.saml2LoginEnabled) {\n-\t\t\tsb.append(\"<h2>Login with SAML 2.0</h2>\");\n-\t\t\tsb.append(createError(loginError, errorMsg));\n-\t\t\tsb.append(createLogoutSuccess(logoutSuccess));\n-\t\t\tsb.append(\"<table class=\\\"table table-striped\\\">\\n\");\n-\t\t\tfor (Map.Entry<String, String> relyingPartyUrlToName : this.saml2AuthenticationUrlToProviderName\n-\t\t\t\t.entrySet()) {\n-\t\t\t\tsb.append(\" <tr><td>\");\n-\t\t\t\tString url = relyingPartyUrlToName.getKey();\n-\t\t\t\tsb.append(\"<a href=\\\"\").append(contextPath).append(url).append(\"\\\">\");\n-\t\t\t\tString partyName = HtmlUtils.htmlEscape(relyingPartyUrlToName.getValue());\n-\t\t\t\tsb.append(partyName);\n-\t\t\t\tsb.append(\"</a>\");\n-\t\t\t\tsb.append(\"</td></tr>\\n\");\n-\t\t\t}\n-\t\t\tsb.append(\"</table>\\n\");\n+\n+\t\tString oauth2Rows = this.oauth2AuthenticationUrlToClientName.entrySet()\n+\t\t\t.stream()\n+\t\t\t.map((urlToName) -> renderOAuth2Row(contextPath, urlToName.getKey(), urlToName.getValue()))\n+\t\t\t.collect(Collectors.joining(\"\\n\"));\n+\n+\t\treturn HtmlTemplates.fromTemplate(OAUTH2_LOGIN_TEMPLATE)\n+\t\t\t.withRawHtml(\"errorMessage\", renderError(loginError, errorMsg))\n+\t\t\t.withRawHtml(\"logoutMessage\", renderSuccess(logoutSuccess))\n+\t\t\t.withRawHtml(\"oauth2Rows\", oauth2Rows)\n+\t\t\t.render();\n+\t}\n+\n+\tprivate static String renderOAuth2Row(String contextPath, String url, String clientName) {\n+\t\treturn HtmlTemplates.fromTemplate(OAUTH2_ROW_TEMPLATE)\n+\t\t\t.withValue(\"url\", contextPath + url)\n+\t\t\t.withValue(\"clientName\", clientName)\n+\t\t\t.render();\n+\t}\n+\n+\tprivate String renderSaml2Login(boolean loginError, boolean logoutSuccess, String errorMsg, String contextPath) {\n+\t\tif (!this.saml2LoginEnabled) {\n+\t\t\treturn \"\";\n \t\t}\n-\t\tsb.append(\"</div>\\n\");\n-\t\tsb.append(\"</body></html>\");\n-\t\treturn sb.toString();\n+\n+\t\tString samlRows = this.saml2AuthenticationUrlToProviderName.entrySet()\n+\t\t\t.stream()\n+\t\t\t.map((urlToName) -> renderSaml2Row(contextPath, urlToName.getKey(), urlToName.getValue()))\n+\t\t\t.collect(Collectors.joining(\"\\n\"));\n+\n+\t\treturn HtmlTemplates.fromTemplate(SAML_LOGIN_TEMPLATE)\n+\t\t\t.withRawHtml(\"errorMessage\", renderError(loginError, errorMsg))\n+\t\t\t.withRawHtml(\"logoutMessage\", renderSuccess(logoutSuccess))\n+\t\t\t.withRawHtml(\"samlRows\", samlRows)\n+\t\t\t.render();\n+\t}\n+\n+\tprivate static String renderSaml2Row(String contextPath, String url, String clientName) {\n+\t\treturn HtmlTemplates.fromTemplate(SAML_ROW_TEMPLATE)\n+\t\t\t.withValue(\"url\", contextPath + url)\n+\t\t\t.withValue(\"clientName\", clientName)\n+\t\t\t.render();\n \t}\n \n \tprivate String getLoginErrorMessage(HttpServletRequest request) {\n@@ -303,23 +322,21 @@ private String getLoginErrorMessage(HttpServletRequest request) {\n \t\treturn exception.getMessage();\n \t}\n \n-\tprivate String renderHiddenInputs(HttpServletRequest request) {\n-\t\tStringBuilder sb = new StringBuilder();\n-\t\tfor (Map.Entry<String, String> input : this.resolveHiddenInputs.apply(request).entrySet()) {\n-\t\t\tsb.append(\"<input name=\\\"\");\n-\t\t\tsb.append(input.getKey());\n-\t\t\tsb.append(\"\\\" type=\\\"hidden\\\" value=\\\"\");\n-\t\t\tsb.append(input.getValue());\n-\t\t\tsb.append(\"\\\" />\\n\");\n-\t\t}\n-\t\treturn sb.toString();\n+\tprivate String renderHiddenInput(String name, String value) {\n+\t\treturn HtmlTemplates.fromTemplate(HIDDEN_HTML_INPUT_TEMPLATE)\n+\t\t\t.withValue(\"name\", name)\n+\t\t\t.withValue(\"value\", value)\n+\t\t\t.render();\n \t}\n \n-\tprivate String createRememberMe(String paramName) {\n+\tprivate String renderRememberMe(String paramName) {\n \t\tif (paramName == null) {\n \t\t\treturn \"\";\n \t\t}\n-\t\treturn \"<p><input type='checkbox' name='\" + paramName + \"'/> Remember me on this computer.</p>\\n\";\n+\t\treturn HtmlTemplates\n+\t\t\t.fromTemplate(\"<p><input type='checkbox' name='{{paramName}}'/> Remember me on this computer.</p>\")\n+\t\t\t.withValue(\"paramName\", paramName)\n+\t\t\t.render();\n \t}\n \n \tprivate boolean isLogoutSuccess(HttpServletRequest request) {\n@@ -334,14 +351,14 @@ private boolean isErrorPage(HttpServletRequest request) {\n \t\treturn matches(request, this.failureUrl);\n \t}\n \n-\tprivate String createError(boolean isError, String message) {\n+\tprivate String renderError(boolean isError, String message) {\n \t\tif (!isError) {\n \t\t\treturn \"\";\n \t\t}\n-\t\treturn \"<div class=\\\"alert alert-danger\\\" role=\\\"alert\\\">\" + HtmlUtils.htmlEscape(message) + \"</div>\";\n+\t\treturn HtmlTemplates.fromTemplate(ALERT_TEMPLATE).withValue(\"message\", message).render();\n \t}\n \n-\tprivate String createLogoutSuccess(boolean isLogoutSuccess) {\n+\tprivate String renderSuccess(boolean isLogoutSuccess) {\n \t\tif (!isLogoutSuccess) {\n \t\t\treturn \"\";\n \t\t}\n@@ -367,4 +384,81 @@ private boolean matches(HttpServletRequest request, String url) {\n \t\treturn uri.equals(request.getContextPath() + url);\n \t}\n \n+\tprivate static final String LOGIN_PAGE_TEMPLATE = \"\"\"\n+\t\t\t<!DOCTYPE html>\n+\t\t\t<html lang=\"en\">\n+\t\t\t  <head>\n+\t\t\t    <meta charset=\"utf-8\">\n+\t\t\t    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n+\t\t\t    <meta name=\"description\" content=\"\">\n+\t\t\t    <meta name=\"author\" content=\"\">\n+\t\t\t    <title>Please sign in</title>\n+\t\t\t{{cssStyle}}\n+\t\t\t  </head>\n+\t\t\t  <body>\n+\t\t\t    <div class=\"content\">\n+\t\t\t{{formLogin}}\n+\t\t\t{{oneTimeTokenLogin}}\n+\t\t\t{{oauth2Login}}\n+\t\t\t{{saml2Login}}\n+\t\t\t    </div>\n+\t\t\t  </body>\n+\t\t\t</html>\"\"\";\n+\n+\tprivate static final String LOGIN_FORM_TEMPLATE = \"\"\"\n+\t\t\t      <form class=\"login-form\" method=\"post\" action=\"{{loginUrl}}\">\n+\t\t\t        <h2>Please sign in</h2>\n+\t\t\t        {{errorMessage}}{{logoutMessage}}\n+\t\t\t        <p>\n+\t\t\t          <label for=\"username\" class=\"screenreader\">Username</label>\n+\t\t\t          <input type=\"text\" id=\"username\" name=\"{{usernameParameter}}\" placeholder=\"Username\" required autofocus>\n+\t\t\t        </p>\n+\t\t\t        <p>\n+\t\t\t          <label for=\"password\" class=\"screenreader\">Password</label>\n+\t\t\t          <input type=\"password\" id=\"password\" name=\"{{passwordParameter}}\" placeholder=\"Password\" required>\n+\t\t\t        </p>\n+\t\t\t{{rememberMeInput}}\n+\t\t\t{{hiddenInputs}}\n+\t\t\t        <button type=\"submit\" class=\"primary\">Sign in</button>\n+\t\t\t      </form>\"\"\";\n+\n+\tprivate static final String HIDDEN_HTML_INPUT_TEMPLATE = \"\"\"\n+\t\t\t<input name=\"{{name}}\" type=\"hidden\" value=\"{{value}}\" />\n+\t\t\t\"\"\";\n+\n+\tprivate static final String ALERT_TEMPLATE = \"\"\"\n+\t\t\t<div class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\"\"\";\n+\n+\tprivate static final String OAUTH2_LOGIN_TEMPLATE = \"\"\"\n+\t\t\t<h2>Login with OAuth 2.0</h2>\n+\t\t\t{{errorMessage}}{{logoutMessage}}\n+\t\t\t<table class=\"table table-striped\">\n+\t\t\t  {{oauth2Rows}}\n+\t\t\t</table>\"\"\";\n+\n+\tprivate static final String OAUTH2_ROW_TEMPLATE = \"\"\"\n+\t\t\t<tr><td><a href=\"{{url}}\">{{clientName}}</a></td></tr>\"\"\";\n+\n+\tprivate static final String SAML_LOGIN_TEMPLATE = \"\"\"\n+\t\t\t<h2>Login with SAML 2.0</h2>\n+\t\t\t{{errorMessage}}{{logoutMessage}}\n+\t\t\t<table class=\"table table-striped\">\n+\t\t\t  {{samlRows}}\n+\t\t\t</table>\"\"\";\n+\n+\tprivate static final String SAML_ROW_TEMPLATE = OAUTH2_ROW_TEMPLATE;\n+\n+\tprivate static final String ONE_TIME_TEMPLATE = \"\"\"\n+\t\t\t      <form id=\"ott-form\" class=\"login-form\" method=\"post\" action=\"{{generateOneTimeTokenUrl}}\">\n+\t\t\t        <h2>Request a One-Time Token</h2>\n+\t\t\t      {{errorMessage}}{{logoutMessage}}\n+\t\t\t        <p>\n+\t\t\t          <label for=\"ott-username\" class=\"screenreader\">Username</label>\n+\t\t\t          <input type=\"text\" id=\"ott-username\" name=\"username\" placeholder=\"Username\" required>\n+\t\t\t        </p>\n+\t\t\t      {{hiddenInputs}}\n+\t\t\t        <button class=\"primary\" type=\"submit\" form=\"ott-form\">Send Token</button>\n+\t\t\t      </form>\n+\t\t\t\"\"\";\n+\n }\n\ndiff --git a/web/src/main/java/org/springframework/security/web/authentication/ui/DefaultLogoutPageGeneratingFilter.java b/web/src/main/java/org/springframework/security/web/authentication/ui/DefaultLogoutPageGeneratingFilter.java\nindex 9c38b8cb5e5..d5dbf85f2d0 100644\n--- a/web/src/main/java/org/springframework/security/web/authentication/ui/DefaultLogoutPageGeneratingFilter.java\n+++ b/web/src/main/java/org/springframework/security/web/authentication/ui/DefaultLogoutPageGeneratingFilter.java\n@@ -61,30 +61,13 @@ protected void doFilterInternal(HttpServletRequest request, HttpServletResponse\n \t}\n \n \tprivate void renderLogout(HttpServletRequest request, HttpServletResponse response) throws IOException {\n-\t\tStringBuilder sb = new StringBuilder();\n-\t\tsb.append(\"<!DOCTYPE html>\\n\");\n-\t\tsb.append(\"<html lang=\\\"en\\\">\\n\");\n-\t\tsb.append(\"  <head>\\n\");\n-\t\tsb.append(\"    <meta charset=\\\"utf-8\\\">\\n\");\n-\t\tsb.append(\"    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1, shrink-to-fit=no\\\">\\n\");\n-\t\tsb.append(\"    <meta name=\\\"description\\\" content=\\\"\\\">\\n\");\n-\t\tsb.append(\"    <meta name=\\\"author\\\" content=\\\"\\\">\\n\");\n-\t\tsb.append(\"    <title>Confirm Log Out?</title>\\n\");\n-\t\tsb.append(CssUtils.getCssStyleBlock().indent(4));\n-\t\tsb.append(\"  </head>\\n\");\n-\t\tsb.append(\"  <body>\\n\");\n-\t\tsb.append(\"     <div class=\\\"content\\\">\\n\");\n-\t\tsb.append(\"      <form class=\\\"logout-form\\\" method=\\\"post\\\" action=\\\"\" + request.getContextPath()\n-\t\t\t\t+ \"/logout\\\">\\n\");\n-\t\tsb.append(\"        <h2>Are you sure you want to log out?</h2>\\n\");\n-\t\tsb.append(renderHiddenInputs(request));\n-\t\tsb.append(\"        <button class=\\\"primary\\\" type=\\\"submit\\\">Log Out</button>\\n\");\n-\t\tsb.append(\"      </form>\\n\");\n-\t\tsb.append(\"    </div>\\n\");\n-\t\tsb.append(\"  </body>\\n\");\n-\t\tsb.append(\"</html>\");\n+\t\tString renderedPage = HtmlTemplates.fromTemplate(LOGOUT_PAGE_TEMPLATE)\n+\t\t\t.withRawHtml(\"cssStyle\", CssUtils.getCssStyleBlock().indent(4))\n+\t\t\t.withValue(\"contextPath\", request.getContextPath())\n+\t\t\t.withRawHtml(\"hiddenInputs\", renderHiddenInputs(request).indent(8))\n+\t\t\t.render();\n \t\tresponse.setContentType(\"text/html;charset=UTF-8\");\n-\t\tresponse.getWriter().write(sb.toString());\n+\t\tresponse.getWriter().write(renderedPage);\n \t}\n \n \t/**\n@@ -101,13 +84,39 @@ public void setResolveHiddenInputs(Function<HttpServletRequest, Map<String, Stri\n \tprivate String renderHiddenInputs(HttpServletRequest request) {\n \t\tStringBuilder sb = new StringBuilder();\n \t\tfor (Map.Entry<String, String> input : this.resolveHiddenInputs.apply(request).entrySet()) {\n-\t\t\tsb.append(\"<input name=\\\"\");\n-\t\t\tsb.append(input.getKey());\n-\t\t\tsb.append(\"\\\" type=\\\"hidden\\\" value=\\\"\");\n-\t\t\tsb.append(input.getValue());\n-\t\t\tsb.append(\"\\\" />\\n\");\n+\t\t\tString inputElement = HtmlTemplates.fromTemplate(HIDDEN_HTML_INPUT_TEMPLATE)\n+\t\t\t\t.withValue(\"name\", input.getKey())\n+\t\t\t\t.withValue(\"value\", input.getValue())\n+\t\t\t\t.render();\n+\t\t\tsb.append(inputElement);\n \t\t}\n \t\treturn sb.toString();\n \t}\n \n+\tprivate static final String LOGOUT_PAGE_TEMPLATE = \"\"\"\n+\t\t\t<!DOCTYPE html>\n+\t\t\t<html lang=\"en\">\n+\t\t\t  <head>\n+\t\t\t    <meta charset=\"utf-8\">\n+\t\t\t    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n+\t\t\t    <meta name=\"description\" content=\"\">\n+\t\t\t    <meta name=\"author\" content=\"\">\n+\t\t\t    <title>Confirm Log Out?</title>\n+\t\t\t{{cssStyle}}\n+\t\t\t  </head>\n+\t\t\t  <body>\n+\t\t\t    <div class=\"content\">\n+\t\t\t      <form class=\"logout-form\" method=\"post\" action=\"{{contextPath}}/logout\">\n+\t\t\t        <h2>Are you sure you want to log out?</h2>\n+\t\t\t{{hiddenInputs}}\n+\t\t\t        <button class=\"primary\" type=\"submit\">Log Out</button>\n+\t\t\t      </form>\n+\t\t\t    </div>\n+\t\t\t  </body>\n+\t\t\t</html>\"\"\";\n+\n+\tprivate static final String HIDDEN_HTML_INPUT_TEMPLATE = \"\"\"\n+\t\t\t<input name=\"{{name}}\" type=\"hidden\" value=\"{{value}}\" />\n+\t\t\t\"\"\";\n+\n }\n\ndiff --git a/web/src/main/java/org/springframework/security/web/authentication/ui/DefaultOneTimeTokenSubmitPageGeneratingFilter.java b/web/src/main/java/org/springframework/security/web/authentication/ui/DefaultOneTimeTokenSubmitPageGeneratingFilter.java\nindex 8d47ebc7bd4..86681958ae0 100644\n--- a/web/src/main/java/org/springframework/security/web/authentication/ui/DefaultOneTimeTokenSubmitPageGeneratingFilter.java\n+++ b/web/src/main/java/org/springframework/security/web/authentication/ui/DefaultOneTimeTokenSubmitPageGeneratingFilter.java\n@@ -21,6 +21,7 @@\n import java.util.Collections;\n import java.util.Map;\n import java.util.function.Function;\n+import java.util.stream.Collectors;\n \n import jakarta.servlet.FilterChain;\n import jakarta.servlet.ServletException;\n@@ -33,7 +34,6 @@\n import org.springframework.util.Assert;\n import org.springframework.util.StringUtils;\n import org.springframework.web.filter.OncePerRequestFilter;\n-import org.springframework.web.util.HtmlUtils;\n \n /**\n  * Creates a default one-time token submit page. If the request contains a {@code token}\n@@ -65,54 +65,27 @@ protected void doFilterInternal(HttpServletRequest request, HttpServletResponse\n \n \tprivate String generateHtml(HttpServletRequest request) {\n \t\tString token = request.getParameter(\"token\");\n-\t\tString inputValue = StringUtils.hasText(token) ? HtmlUtils.htmlEscape(token) : \"\";\n-\t\tString input = \"<input type=\\\"text\\\" id=\\\"token\\\" name=\\\"token\\\" value=\\\"\" + inputValue + \"\\\"\"\n-\t\t\t\t+ \" placeholder=\\\"Token\\\" required=\\\"true\\\" autofocus=\\\"autofocus\\\"/>\";\n-\t\treturn \"\"\"\n-\t\t\t\t<!DOCTYPE html>\n-\t\t\t\t<html lang=\"en\">\n-\t\t\t\t<head>\n-\t\t\t\t\t<title>One-Time Token Login</title>\n-\t\t\t\t\t<meta charset=\"utf-8\"/>\n-\t\t\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"/>\n-\t\t\t\t\t<meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'sha256-oZhLbc2kO8b8oaYLrUc7uye1MgVKMyLtPqWR4WtKF+c='\"/>\n-\t\t\t\t\"\"\"\n-\t\t\t\t+ CssUtils.getCssStyleBlock().indent(4)\n-\t\t\t\t+ \"\"\"\n-\t\t\t\t\t\t</head>\n-\t\t\t\t\t\t<body>\n-\t\t\t\t\t\t\t<noscript>\n-\t\t\t\t\t\t\t\t<p>\n-\t\t\t\t\t\t\t\t\t<strong>Note:</strong> Since your browser does not support JavaScript, you must press the Sign In button once to proceed.\n-\t\t\t\t\t\t\t\t</p>\n-\t\t\t\t\t\t\t</noscript>\n-\t\t\t\t\t\t\t<div class=\"container\">\n-\t\t\t\t\t\t\"\"\"\n-\t\t\t\t+ \"<form class=\\\"login-form\\\" action=\\\"\" + this.loginProcessingUrl + \"\\\" method=\\\"post\\\">\" + \"\"\"\n-\t\t\t\t\t\t\t<h2>Please input the token</h2>\n-\t\t\t\t\t\t\t<p>\n-\t\t\t\t\t\t\t\t<label for=\"token\" class=\"screenreader\">Token</label>\n-\t\t\t\t\t\t\"\"\" + input + \"\"\"\n-\t\t\t\t\t\t\t\t</p>\n-\t\t\t\t\t\t\t\t<button class=\"primary\" type=\"submit\">Sign in</button>\n-\t\t\t\t\t\t\"\"\" + renderHiddenInputs(request) + \"\"\"\n-\t\t\t\t\t\t\t</form>\n-\t\t\t\t\t\t</div>\n-\t\t\t\t\t\t</body>\n-\t\t\t\t\t\t</html>\n-\t\t\t\t\t\t\"\"\";\n+\t\tString tokenValue = StringUtils.hasText(token) ? token : \"\";\n+\n+\t\tString hiddenInputs = this.resolveHiddenInputs.apply(request)\n+\t\t\t.entrySet()\n+\t\t\t.stream()\n+\t\t\t.map((inputKeyValue) -> renderHiddenInput(inputKeyValue.getKey(), inputKeyValue.getValue()))\n+\t\t\t.collect(Collectors.joining(\"\\n\"));\n+\n+\t\treturn HtmlTemplates.fromTemplate(ONE_TIME_TOKEN_SUBMIT_PAGE_TEMPLATE)\n+\t\t\t.withRawHtml(\"cssStyle\", CssUtils.getCssStyleBlock().indent(4))\n+\t\t\t.withValue(\"tokenValue\", tokenValue)\n+\t\t\t.withValue(\"loginProcessingUrl\", this.loginProcessingUrl)\n+\t\t\t.withRawHtml(\"hiddenInputs\", hiddenInputs)\n+\t\t\t.render();\n \t}\n \n-\tprivate String renderHiddenInputs(HttpServletRequest request) {\n-\t\tStringBuilder sb = new StringBuilder();\n-\t\tfor (Map.Entry<String, String> input : this.resolveHiddenInputs.apply(request).entrySet()) {\n-\t\t\tsb.append(\"<input name=\\\"\");\n-\t\t\tsb.append(input.getKey());\n-\t\t\tsb.append(\"\\\" type=\\\"hidden\\\" value=\\\"\");\n-\t\t\tsb.append(input.getValue());\n-\t\t\tsb.append(\"\\\" />\\n\");\n-\t\t}\n-\t\treturn sb.toString();\n+\tprivate String renderHiddenInput(String name, String value) {\n+\t\treturn HtmlTemplates.fromTemplate(HIDDEN_HTML_INPUT_TEMPLATE)\n+\t\t\t.withValue(\"name\", name)\n+\t\t\t.withValue(\"value\", value)\n+\t\t\t.render();\n \t}\n \n \tpublic void setResolveHiddenInputs(Function<HttpServletRequest, Map<String, String>> resolveHiddenInputs) {\n@@ -135,4 +108,39 @@ public void setLoginProcessingUrl(String loginProcessingUrl) {\n \t\tthis.loginProcessingUrl = loginProcessingUrl;\n \t}\n \n+\tprivate static final String ONE_TIME_TOKEN_SUBMIT_PAGE_TEMPLATE = \"\"\"\n+\t\t\t<!DOCTYPE html>\n+\t\t\t<html lang=\"en\">\n+\t\t\t  <head>\n+\t\t\t    <title>One-Time Token Login</title>\n+\t\t\t    <meta charset=\"utf-8\"/>\n+\t\t\t    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"/>\n+\t\t\t    <meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'sha256-oZhLbc2kO8b8oaYLrUc7uye1MgVKMyLtPqWR4WtKF+c='\"/>\n+\t\t\t{{cssStyle}}\n+\t\t\t  </head>\n+\t\t\t  <body>\n+\t\t\t    <noscript>\n+\t\t\t      <p>\n+\t\t\t        <strong>Note:</strong> Since your browser does not support JavaScript, you must press the Sign In button once to proceed.\n+\t\t\t      </p>\n+\t\t\t    </noscript>\n+\t\t\t    <div class=\"container\">\n+\t\t\t      <form class=\"login-form\" action=\"{{loginProcessingUrl}}\" method=\"post\">\n+\t\t\t        <h2>Please input the token</h2>\n+\t\t\t        <p>\n+\t\t\t          <label for=\"token\" class=\"screenreader\">Token</label>\n+\t\t\t          <input type=\"text\" id=\"token\" name=\"token\" value=\"{{tokenValue}}\" placeholder=\"Token\" required=\"true\" autofocus=\"autofocus\"/>\n+\t\t\t        </p>\n+\t\t\t        <button class=\"primary\" type=\"submit\">Sign in</button>\n+\t\t\t{{hiddenInputs}}\n+\t\t\t      </form>\n+\t\t\t    </div>\n+\t\t\t  </body>\n+\t\t\t</html>\n+\t\t\t\"\"\";\n+\n+\tprivate static final String HIDDEN_HTML_INPUT_TEMPLATE = \"\"\"\n+\t\t\t<input name=\"{{name}}\" type=\"hidden\" value=\"{{value}}\" />\n+\t\t\t\"\"\";\n+\n }\n\ndiff --git a/web/src/main/java/org/springframework/security/web/authentication/ui/HtmlTemplates.java b/web/src/main/java/org/springframework/security/web/authentication/ui/HtmlTemplates.java\nnew file mode 100644\nindex 00000000000..6d897ebf0f5\n--- /dev/null\n+++ b/web/src/main/java/org/springframework/security/web/authentication/ui/HtmlTemplates.java\n@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2002-2024 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.security.web.authentication.ui;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.util.HtmlUtils;\n+\n+/**\n+ * Render HTML templates using string substitution. Intended for internal use. Variables\n+ * can be templated using double curly-braces: {@code {{name}}}.\n+ *\n+ * @author Daniel Garnier-Moiroux\n+ * @since 6.4\n+ */\n+final class HtmlTemplates {\n+\n+\tprivate HtmlTemplates() {\n+\t}\n+\n+\tstatic Builder fromTemplate(String template) {\n+\t\treturn new Builder(template);\n+\t}\n+\n+\tstatic final class Builder {\n+\n+\t\tprivate final String template;\n+\n+\t\tprivate final Map<String, String> values = new HashMap<>();\n+\n+\t\tprivate Builder(String template) {\n+\t\t\tthis.template = template;\n+\t\t}\n+\n+\t\t/**\n+\t\t * HTML-escape, and inject value {@code value} in every {@code {{key}}}\n+\t\t * placeholder.\n+\t\t * @param key the placeholder name\n+\t\t * @param value the value to inject\n+\t\t * @return this instance for further templating\n+\t\t */\n+\t\tBuilder withValue(String key, String value) {\n+\t\t\tthis.values.put(key, HtmlUtils.htmlEscape(value));\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Inject value {@code value} in every {@code {{key}}} placeholder without\n+\t\t * HTML-escaping. Useful for injecting \"sub-templates\".\n+\t\t * @param key the placeholder name\n+\t\t * @param value the value to inject\n+\t\t * @return this instance for further templating\n+\t\t */\n+\t\tBuilder withRawHtml(String key, String value) {\n+\t\t\tif (!value.isEmpty() && value.charAt(value.length() - 1) == '\\n') {\n+\t\t\t\tvalue = value.substring(0, value.length() - 1);\n+\t\t\t}\n+\t\t\tthis.values.put(key, value);\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Render the template. All placeholders MUST have a corresponding value. If a\n+\t\t * placeholder does not have a corresponding value, throws\n+\t\t * {@link IllegalStateException}.\n+\t\t * @return the rendered template\n+\t\t */\n+\t\tString render() {\n+\t\t\tString template = this.template;\n+\t\t\tfor (String key : this.values.keySet()) {\n+\t\t\t\tString pattern = Pattern.quote(\"{{\" + key + \"}}\");\n+\t\t\t\ttemplate = template.replaceAll(pattern, this.values.get(key));\n+\t\t\t}\n+\n+\t\t\tString unusedPlaceholders = Pattern.compile(\"\\\\{\\\\{([a-zA-Z0-9]+)}}\")\n+\t\t\t\t.matcher(template)\n+\t\t\t\t.results()\n+\t\t\t\t.map((result) -> result.group(1))\n+\t\t\t\t.collect(Collectors.joining(\", \"));\n+\t\t\tif (StringUtils.hasLength(unusedPlaceholders)) {\n+\t\t\t\tthrow new IllegalStateException(\"Unused placeholders in template: [%s]\".formatted(unusedPlaceholders));\n+\t\t\t}\n+\n+\t\t\treturn template;\n+\t\t}\n+\n+\t}\n+\n+}\n\ndiff --git a/web/src/main/java/org/springframework/security/web/server/ui/HtmlTemplates.java b/web/src/main/java/org/springframework/security/web/server/ui/HtmlTemplates.java\nnew file mode 100644\nindex 00000000000..432b1b65a57\n--- /dev/null\n+++ b/web/src/main/java/org/springframework/security/web/server/ui/HtmlTemplates.java\n@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2002-2024 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.security.web.server.ui;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.util.HtmlUtils;\n+\n+/**\n+ * Render HTML templates using string substitution. Intended for internal use. Variables\n+ * can be templated using double curly-braces: {@code {{name}}}.\n+ *\n+ * @author Daniel Garnier-Moiroux\n+ * @since 6.4\n+ * @see org.springframework.security.web.authentication.ui.HtmlTemplates\n+ */\n+final class HtmlTemplates {\n+\n+\tprivate HtmlTemplates() {\n+\t}\n+\n+\tstatic Builder fromTemplate(String template) {\n+\t\treturn new Builder(template);\n+\t}\n+\n+\tstatic final class Builder {\n+\n+\t\tprivate final String template;\n+\n+\t\tprivate final Map<String, String> values = new HashMap<>();\n+\n+\t\tprivate Builder(String template) {\n+\t\t\tthis.template = template;\n+\t\t}\n+\n+\t\t/**\n+\t\t * HTML-escape, and inject value {@code value} in every {@code {{key}}}\n+\t\t * placeholder.\n+\t\t * @param key the placeholder name\n+\t\t * @param value the value to inject\n+\t\t * @return this instance for further templating\n+\t\t */\n+\t\tBuilder withValue(String key, String value) {\n+\t\t\tthis.values.put(key, HtmlUtils.htmlEscape(value));\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Inject value {@code value} in every {@code {{key}}} placeholder without\n+\t\t * HTML-escaping. Useful for injecting \"sub-templates\".\n+\t\t * @param key the placeholder name\n+\t\t * @param value the value to inject\n+\t\t * @return this instance for further templating\n+\t\t */\n+\t\tBuilder withRawHtml(String key, String value) {\n+\t\t\tif (!value.isEmpty() && value.charAt(value.length() - 1) == '\\n') {\n+\t\t\t\tvalue = value.substring(0, value.length() - 1);\n+\t\t\t}\n+\t\t\tthis.values.put(key, value);\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Render the template. All placeholders MUST have a corresponding value. If a\n+\t\t * placeholder does not have a corresponding value, throws\n+\t\t * {@link IllegalStateException}.\n+\t\t * @return the rendered template\n+\t\t */\n+\t\tString render() {\n+\t\t\tString template = this.template;\n+\t\t\tfor (String key : this.values.keySet()) {\n+\t\t\t\tString pattern = Pattern.quote(\"{{\" + key + \"}}\");\n+\t\t\t\ttemplate = template.replaceAll(pattern, this.values.get(key));\n+\t\t\t}\n+\n+\t\t\tString unusedPlaceholders = Pattern.compile(\"\\\\{\\\\{([a-zA-Z0-9]+)}}\")\n+\t\t\t\t.matcher(template)\n+\t\t\t\t.results()\n+\t\t\t\t.map((result) -> result.group(1))\n+\t\t\t\t.collect(Collectors.joining(\", \"));\n+\t\t\tif (StringUtils.hasLength(unusedPlaceholders)) {\n+\t\t\t\tthrow new IllegalStateException(\"Unused placeholders in template: [%s]\".formatted(unusedPlaceholders));\n+\t\t\t}\n+\n+\t\t\treturn template;\n+\t\t}\n+\n+\t}\n+\n+}\n\ndiff --git a/web/src/main/java/org/springframework/security/web/server/ui/LoginPageGeneratingWebFilter.java b/web/src/main/java/org/springframework/security/web/server/ui/LoginPageGeneratingWebFilter.java\nindex 3065796ea4e..3a18738448e 100644\n--- a/web/src/main/java/org/springframework/security/web/server/ui/LoginPageGeneratingWebFilter.java\n+++ b/web/src/main/java/org/springframework/security/web/server/ui/LoginPageGeneratingWebFilter.java\n@@ -19,6 +19,7 @@\n import java.nio.charset.Charset;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.stream.Collectors;\n \n import reactor.core.publisher.Mono;\n \n@@ -37,7 +38,6 @@\n import org.springframework.web.server.ServerWebExchange;\n import org.springframework.web.server.WebFilter;\n import org.springframework.web.server.WebFilterChain;\n-import org.springframework.web.util.HtmlUtils;\n \n /**\n  * Generates a default log in page used for authenticating users.\n@@ -89,80 +89,61 @@ private Mono<DataBuffer> createBuffer(ServerWebExchange exchange) {\n \tprivate byte[] createPage(ServerWebExchange exchange, String csrfTokenHtmlInput) {\n \t\tMultiValueMap<String, String> queryParams = exchange.getRequest().getQueryParams();\n \t\tString contextPath = exchange.getRequest().getPath().contextPath().value();\n-\t\tStringBuilder page = new StringBuilder();\n-\t\tpage.append(\"<!DOCTYPE html>\\n\");\n-\t\tpage.append(\"<html lang=\\\"en\\\">\\n\");\n-\t\tpage.append(\"  <head>\\n\");\n-\t\tpage.append(\"    <meta charset=\\\"utf-8\\\">\\n\");\n-\t\tpage.append(\"    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1, shrink-to-fit=no\\\">\\n\");\n-\t\tpage.append(\"    <meta name=\\\"description\\\" content=\\\"\\\">\\n\");\n-\t\tpage.append(\"    <meta name=\\\"author\\\" content=\\\"\\\">\\n\");\n-\t\tpage.append(\"    <title>Please sign in</title>\\n\");\n-\t\tpage.append(CssUtils.getCssStyleBlock().indent(4));\n-\t\tpage.append(\"  </head>\\n\");\n-\t\tpage.append(\"  <body>\\n\");\n-\t\tpage.append(\"     <div class=\\\"content\\\">\\n\");\n-\t\tpage.append(formLogin(queryParams, contextPath, csrfTokenHtmlInput));\n-\t\tpage.append(oauth2LoginLinks(queryParams, contextPath, this.oauth2AuthenticationUrlToClientName));\n-\t\tpage.append(\"    </div>\\n\");\n-\t\tpage.append(\"  </body>\\n\");\n-\t\tpage.append(\"</html>\");\n-\t\treturn page.toString().getBytes(Charset.defaultCharset());\n+\n+\t\treturn HtmlTemplates.fromTemplate(LOGIN_PAGE_TEMPLATE)\n+\t\t\t.withRawHtml(\"cssStyle\", CssUtils.getCssStyleBlock().indent(4))\n+\t\t\t.withRawHtml(\"formLogin\", formLogin(queryParams, contextPath, csrfTokenHtmlInput))\n+\t\t\t.withRawHtml(\"oauth2Login\", oauth2Login(queryParams, contextPath, this.oauth2AuthenticationUrlToClientName))\n+\t\t\t.render()\n+\t\t\t.getBytes(Charset.defaultCharset());\n \t}\n \n \tprivate String formLogin(MultiValueMap<String, String> queryParams, String contextPath, String csrfTokenHtmlInput) {\n \t\tif (!this.formLoginEnabled) {\n \t\t\treturn \"\";\n \t\t}\n+\n \t\tboolean isError = queryParams.containsKey(\"error\");\n \t\tboolean isLogoutSuccess = queryParams.containsKey(\"logout\");\n-\t\tStringBuilder page = new StringBuilder();\n-\t\tpage.append(\"      <form class=\\\"login-form\\\" method=\\\"post\\\" action=\\\"\" + contextPath + \"/login\\\">\\n\");\n-\t\tpage.append(\"        <h2>Please sign in</h2>\\n\");\n-\t\tpage.append(createError(isError));\n-\t\tpage.append(createLogoutSuccess(isLogoutSuccess));\n-\t\tpage.append(\"        <p>\\n\");\n-\t\tpage.append(\"          <label for=\\\"username\\\" class=\\\"screenreader\\\">Username</label>\\n\");\n-\t\tpage.append(\"          <input type=\\\"text\\\" id=\\\"username\\\" name=\\\"username\\\" \"\n-\t\t\t\t+ \"placeholder=\\\"Username\\\" required autofocus>\\n\");\n-\t\tpage.append(\"        </p>\\n\" + \"        <p>\\n\");\n-\t\tpage.append(\"          <label for=\\\"password\\\" class=\\\"screenreader\\\">Password</label>\\n\");\n-\t\tpage.append(\"          <input type=\\\"password\\\" id=\\\"password\\\" name=\\\"password\\\" \"\n-\t\t\t\t+ \"placeholder=\\\"Password\\\" required>\\n\");\n-\t\tpage.append(\"        </p>\\n\");\n-\t\tpage.append(csrfTokenHtmlInput);\n-\t\tpage.append(\"        <button class=\\\"primary\\\" type=\\\"submit\\\">Sign in</button>\\n\");\n-\t\tpage.append(\"      </form>\\n\");\n-\t\treturn page.toString();\n+\n+\t\treturn HtmlTemplates.fromTemplate(LOGIN_FORM_TEMPLATE)\n+\t\t\t.withValue(\"loginUrl\", contextPath + \"/login\")\n+\t\t\t.withRawHtml(\"errorMessage\", createError(isError))\n+\t\t\t.withRawHtml(\"logoutMessage\", createLogoutSuccess(isLogoutSuccess))\n+\t\t\t.withRawHtml(\"csrf\", csrfTokenHtmlInput)\n+\t\t\t.render();\n \t}\n \n-\tprivate static String oauth2LoginLinks(MultiValueMap<String, String> queryParams, String contextPath,\n+\tprivate static String oauth2Login(MultiValueMap<String, String> queryParams, String contextPath,\n \t\t\tMap<String, String> oauth2AuthenticationUrlToClientName) {\n \t\tif (oauth2AuthenticationUrlToClientName.isEmpty()) {\n \t\t\treturn \"\";\n \t\t}\n \t\tboolean isError = queryParams.containsKey(\"error\");\n-\t\tStringBuilder sb = new StringBuilder();\n-\t\tsb.append(\"<div class=\\\"content\\\"><h2>Login with OAuth 2.0</h2>\");\n-\t\tsb.append(createError(isError));\n-\t\tsb.append(\"<table class=\\\"table table-striped\\\">\\n\");\n-\t\tfor (Map.Entry<String, String> clientAuthenticationUrlToClientName : oauth2AuthenticationUrlToClientName\n-\t\t\t.entrySet()) {\n-\t\t\tsb.append(\" <tr><td>\");\n-\t\t\tString url = clientAuthenticationUrlToClientName.getKey();\n-\t\t\tsb.append(\"<a href=\\\"\").append(contextPath).append(url).append(\"\\\">\");\n-\t\t\tString clientName = HtmlUtils.htmlEscape(clientAuthenticationUrlToClientName.getValue());\n-\t\t\tsb.append(clientName);\n-\t\t\tsb.append(\"</a>\");\n-\t\t\tsb.append(\"</td></tr>\\n\");\n-\t\t}\n-\t\tsb.append(\"</table></div>\\n\");\n-\t\treturn sb.toString();\n+\n+\t\tString oauth2Rows = oauth2AuthenticationUrlToClientName.entrySet()\n+\t\t\t.stream()\n+\t\t\t.map((urlToName) -> oauth2LoginLink(contextPath, urlToName.getKey(), urlToName.getValue()))\n+\t\t\t.collect(Collectors.joining(\"\\n\"))\n+\t\t\t.indent(2);\n+\t\treturn HtmlTemplates.fromTemplate(OAUTH2_LOGIN_TEMPLATE)\n+\t\t\t.withRawHtml(\"errorMessage\", createError(isError))\n+\t\t\t.withRawHtml(\"oauth2Rows\", oauth2Rows)\n+\t\t\t.render();\n+\t}\n+\n+\tprivate static String oauth2LoginLink(String contextPath, String url, String clientName) {\n+\t\treturn HtmlTemplates.fromTemplate(OAUTH2_ROW_TEMPLATE)\n+\t\t\t.withValue(\"url\", contextPath + url)\n+\t\t\t.withValue(\"clientName\", clientName)\n+\t\t\t.render();\n \t}\n \n \tprivate static String csrfToken(CsrfToken token) {\n-\t\treturn \"          <input type=\\\"hidden\\\" name=\\\"\" + token.getParameterName() + \"\\\" value=\\\"\" + token.getToken()\n-\t\t\t\t+ \"\\\">\\n\";\n+\t\treturn HtmlTemplates.fromTemplate(CSRF_INPUT_TEMPLATE)\n+\t\t\t.withValue(\"name\", token.getParameterName())\n+\t\t\t.withValue(\"value\", token.getToken())\n+\t\t\t.render();\n \t}\n \n \tprivate static String createError(boolean isError) {\n@@ -174,4 +155,53 @@ private static String createLogoutSuccess(boolean isLogoutSuccess) {\n \t\t\t\t: \"\";\n \t}\n \n+\tprivate static final String LOGIN_PAGE_TEMPLATE = \"\"\"\n+\t\t\t<!DOCTYPE html>\n+\t\t\t<html lang=\"en\">\n+\t\t\t  <head>\n+\t\t\t    <meta charset=\"utf-8\">\n+\t\t\t    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n+\t\t\t    <meta name=\"description\" content=\"\">\n+\t\t\t    <meta name=\"author\" content=\"\">\n+\t\t\t    <title>Please sign in</title>\n+\t\t\t{{cssStyle}}\n+\t\t\t  </head>\n+\t\t\t  <body>\n+\t\t\t    <div class=\"content\">\n+\t\t\t{{formLogin}}\n+\t\t\t{{oauth2Login}}\n+\t\t\t    </div>\n+\t\t\t  </body>\n+\t\t\t</html>\"\"\";\n+\n+\tprivate static final String LOGIN_FORM_TEMPLATE = \"\"\"\n+\t\t\t      <form class=\"login-form\" method=\"post\" action=\"{{loginUrl}}\">\n+\t\t\t        <h2>Please sign in</h2>\n+\t\t\t{{errorMessage}}{{logoutMessage}}\n+\t\t\t        <p>\n+\t\t\t          <label for=\"username\" class=\"screenreader\">Username</label>\n+\t\t\t          <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"Username\" required autofocus>\n+\t\t\t        </p>\n+\t\t\t        <p>\n+\t\t\t          <label for=\"password\" class=\"screenreader\">Password</label>\n+\t\t\t          <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Password\" required>\n+\t\t\t        </p>\n+\t\t\t{{csrf}}\n+\t\t\t        <button type=\"submit\" class=\"primary\">Sign in</button>\n+\t\t\t      </form>\"\"\";\n+\n+\tprivate static final String CSRF_INPUT_TEMPLATE = \"\"\"\n+\t\t\t<input name=\"{{name}}\" type=\"hidden\" value=\"{{value}}\" />\n+\t\t\t\"\"\";\n+\n+\tprivate static final String OAUTH2_LOGIN_TEMPLATE = \"\"\"\n+\t\t\t<h2>Login with OAuth 2.0</h2>\n+\t\t\t{{errorMessage}}\n+\t\t\t<table class=\"table table-striped\">\n+\t\t\t{{oauth2Rows}}\n+\t\t\t</table>\"\"\";\n+\n+\tprivate static final String OAUTH2_ROW_TEMPLATE = \"\"\"\n+\t\t\t<tr><td><a href=\"{{url}}\">{{clientName}}</a></td></tr>\"\"\";\n+\n }\n\ndiff --git a/web/src/main/java/org/springframework/security/web/server/ui/LogoutPageGeneratingWebFilter.java b/web/src/main/java/org/springframework/security/web/server/ui/LogoutPageGeneratingWebFilter.java\nindex a691e2fdcbb..34e850f80b3 100644\n--- a/web/src/main/java/org/springframework/security/web/server/ui/LogoutPageGeneratingWebFilter.java\n+++ b/web/src/main/java/org/springframework/security/web/server/ui/LogoutPageGeneratingWebFilter.java\n@@ -70,33 +70,45 @@ private Mono<DataBuffer> createBuffer(ServerWebExchange exchange) {\n \t}\n \n \tprivate static byte[] createPage(String csrfTokenHtmlInput, String contextPath) {\n-\t\tStringBuilder page = new StringBuilder();\n-\t\tpage.append(\"<!DOCTYPE html>\\n\");\n-\t\tpage.append(\"<html lang=\\\"en\\\">\\n\");\n-\t\tpage.append(\"  <head>\\n\");\n-\t\tpage.append(\"    <meta charset=\\\"utf-8\\\">\\n\");\n-\t\tpage.append(\"    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1, shrink-to-fit=no\\\">\\n\");\n-\t\tpage.append(\"    <meta name=\\\"description\\\" content=\\\"\\\">\\n\");\n-\t\tpage.append(\"    <meta name=\\\"author\\\" content=\\\"\\\">\\n\");\n-\t\tpage.append(\"    <title>Confirm Log Out?</title>\\n\");\n-\t\tpage.append(CssUtils.getCssStyleBlock().indent(4));\n-\t\tpage.append(\"  </head>\\n\");\n-\t\tpage.append(\"  <body>\\n\");\n-\t\tpage.append(\"     <div class=\\\"content\\\">\\n\");\n-\t\tpage.append(\"      <form class=\\\"logout-form\\\" method=\\\"post\\\" action=\\\"\" + contextPath + \"/logout\\\">\\n\");\n-\t\tpage.append(\"        <h2>Are you sure you want to log out?</h2>\\n\");\n-\t\tpage.append(csrfTokenHtmlInput);\n-\t\tpage.append(\"        <button class=\\\"primary\\\" type=\\\"submit\\\">Log Out</button>\\n\");\n-\t\tpage.append(\"      </form>\\n\");\n-\t\tpage.append(\"    </div>\\n\");\n-\t\tpage.append(\"  </body>\\n\");\n-\t\tpage.append(\"</html>\");\n-\t\treturn page.toString().getBytes(Charset.defaultCharset());\n+\t\treturn HtmlTemplates.fromTemplate(LOGOUT_PAGE_TEMPLATE)\n+\t\t\t.withRawHtml(\"cssStyle\", CssUtils.getCssStyleBlock().indent(4))\n+\t\t\t.withValue(\"contextPath\", contextPath)\n+\t\t\t.withRawHtml(\"csrf\", csrfTokenHtmlInput.indent(8))\n+\t\t\t.render()\n+\t\t\t.getBytes(Charset.defaultCharset());\n \t}\n \n \tprivate static String csrfToken(CsrfToken token) {\n-\t\treturn \"          <input type=\\\"hidden\\\" name=\\\"\" + token.getParameterName() + \"\\\" value=\\\"\" + token.getToken()\n-\t\t\t\t+ \"\\\">\\n\";\n+\t\treturn HtmlTemplates.fromTemplate(CSRF_INPUT_TEMPLATE)\n+\t\t\t.withValue(\"name\", token.getParameterName())\n+\t\t\t.withValue(\"value\", token.getToken())\n+\t\t\t.render();\n \t}\n \n+\tprivate static final String LOGOUT_PAGE_TEMPLATE = \"\"\"\n+\t\t\t<!DOCTYPE html>\n+\t\t\t<html lang=\"en\">\n+\t\t\t  <head>\n+\t\t\t    <meta charset=\"utf-8\">\n+\t\t\t    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n+\t\t\t    <meta name=\"description\" content=\"\">\n+\t\t\t    <meta name=\"author\" content=\"\">\n+\t\t\t    <title>Confirm Log Out?</title>\n+\t\t\t{{cssStyle}}\n+\t\t\t  </head>\n+\t\t\t  <body>\n+\t\t\t    <div class=\"content\">\n+\t\t\t      <form class=\"logout-form\" method=\"post\" action=\"{{contextPath}}/logout\">\n+\t\t\t        <h2>Are you sure you want to log out?</h2>\n+\t\t\t{{csrf}}\n+\t\t\t        <button class=\"primary\" type=\"submit\">Log Out</button>\n+\t\t\t      </form>\n+\t\t\t    </div>\n+\t\t\t  </body>\n+\t\t\t</html>\"\"\";\n+\n+\tprivate static final String CSRF_INPUT_TEMPLATE = \"\"\"\n+\t\t\t<input name=\"{{name}}\" type=\"hidden\" value=\"{{value}}\" />\n+\t\t\t\"\"\";\n+\n }\n",
    "test_patch": "diff --git a/config/src/test/java/org/springframework/security/config/annotation/web/configurers/DefaultLoginPageConfigurerTests.java b/config/src/test/java/org/springframework/security/config/annotation/web/configurers/DefaultLoginPageConfigurerTests.java\nindex 0f2b64e7241..d49ade6696d 100644\n--- a/config/src/test/java/org/springframework/security/config/annotation/web/configurers/DefaultLoginPageConfigurerTests.java\n+++ b/config/src/test/java/org/springframework/security/config/annotation/web/configurers/DefaultLoginPageConfigurerTests.java\n@@ -67,140 +67,142 @@\n @ExtendWith(SpringTestContextExtension.class)\n public class DefaultLoginPageConfigurerTests {\n \n-\t//@formatter:off\n-\tpublic static final String EXPECTED_HTML_HEAD = \"  <head>\\n\"\n-\t\t\t+ \"    <meta charset=\\\"utf-8\\\">\\n\"\n-\t\t\t+ \"    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1, shrink-to-fit=no\\\">\\n\"\n-\t\t\t+ \"    <meta name=\\\"description\\\" content=\\\"\\\">\\n\"\n-\t\t\t+ \"    <meta name=\\\"author\\\" content=\\\"\\\">\\n\"\n-\t\t\t+ \"    <title>Please sign in</title>\\n\"\n-\t\t\t+ \"    <style>\\n\"\n-\t\t\t+ \"    /* General layout */\\n\"\n-\t\t\t+ \"    body {\\n\"\n-\t\t\t+ \"      font-family: system-ui, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\\n\"\n-\t\t\t+ \"      background-color: #eee;\\n\"\n-\t\t\t+ \"      padding: 40px 0;\\n\"\n-\t\t\t+ \"      margin: 0;\\n\"\n-\t\t\t+ \"      line-height: 1.5;\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    \\n\"\n-\t\t\t+ \"    h2 {\\n\"\n-\t\t\t+ \"      margin-top: 0;\\n\"\n-\t\t\t+ \"      margin-bottom: 0.5rem;\\n\"\n-\t\t\t+ \"      font-size: 2rem;\\n\"\n-\t\t\t+ \"      font-weight: 500;\\n\"\n-\t\t\t+ \"      line-height: 2rem;\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    \\n\"\n-\t\t\t+ \"    .content {\\n\"\n-\t\t\t+ \"      margin-right: auto;\\n\"\n-\t\t\t+ \"      margin-left: auto;\\n\"\n-\t\t\t+ \"      padding-right: 15px;\\n\"\n-\t\t\t+ \"      padding-left: 15px;\\n\"\n-\t\t\t+ \"      width: 100%;\\n\"\n-\t\t\t+ \"      box-sizing: border-box;\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    \\n\"\n-\t\t\t+ \"    @media (min-width: 800px) {\\n\"\n-\t\t\t+ \"      .content {\\n\"\n-\t\t\t+ \"        max-width: 760px;\\n\"\n-\t\t\t+ \"      }\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    \\n\"\n-\t\t\t+ \"    /* Components */\\n\"\n-\t\t\t+ \"    a,\\n\"\n-\t\t\t+ \"    a:visited {\\n\"\n-\t\t\t+ \"      text-decoration: none;\\n\"\n-\t\t\t+ \"      color: #06f;\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    \\n\"\n-\t\t\t+ \"    a:hover {\\n\"\n-\t\t\t+ \"      text-decoration: underline;\\n\"\n-\t\t\t+ \"      color: #003c97;\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    \\n\"\n-\t\t\t+ \"    input[type=\\\"text\\\"],\\n\"\n-\t\t\t+ \"    input[type=\\\"password\\\"] {\\n\"\n-\t\t\t+ \"      height: auto;\\n\"\n-\t\t\t+ \"      width: 100%;\\n\"\n-\t\t\t+ \"      font-size: 1rem;\\n\"\n-\t\t\t+ \"      padding: 0.5rem;\\n\"\n-\t\t\t+ \"      box-sizing: border-box;\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    \\n\"\n-\t\t\t+ \"    button {\\n\"\n-\t\t\t+ \"      padding: 0.5rem 1rem;\\n\"\n-\t\t\t+ \"      font-size: 1.25rem;\\n\"\n-\t\t\t+ \"      line-height: 1.5;\\n\"\n-\t\t\t+ \"      border: none;\\n\"\n-\t\t\t+ \"      border-radius: 0.1rem;\\n\"\n-\t\t\t+ \"      width: 100%;\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    \\n\"\n-\t\t\t+ \"    button.primary {\\n\"\n-\t\t\t+ \"      color: #fff;\\n\"\n-\t\t\t+ \"      background-color: #06f;\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    \\n\"\n-\t\t\t+ \"    .alert {\\n\"\n-\t\t\t+ \"      padding: 0.75rem 1rem;\\n\"\n-\t\t\t+ \"      margin-bottom: 1rem;\\n\"\n-\t\t\t+ \"      line-height: 1.5;\\n\"\n-\t\t\t+ \"      border-radius: 0.1rem;\\n\"\n-\t\t\t+ \"      width: 100%;\\n\"\n-\t\t\t+ \"      box-sizing: border-box;\\n\"\n-\t\t\t+ \"      border-width: 1px;\\n\"\n-\t\t\t+ \"      border-style: solid;\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    \\n\"\n-\t\t\t+ \"    .alert.alert-danger {\\n\"\n-\t\t\t+ \"      color: #6b1922;\\n\"\n-\t\t\t+ \"      background-color: #f7d5d7;\\n\"\n-\t\t\t+ \"      border-color: #eab6bb;\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    \\n\"\n-\t\t\t+ \"    .alert.alert-success {\\n\"\n-\t\t\t+ \"      color: #145222;\\n\"\n-\t\t\t+ \"      background-color: #d1f0d9;\\n\"\n-\t\t\t+ \"      border-color: #c2ebcb;\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    \\n\"\n-\t\t\t+ \"    .screenreader {\\n\"\n-\t\t\t+ \"      position: absolute;\\n\"\n-\t\t\t+ \"      clip: rect(0 0 0 0);\\n\"\n-\t\t\t+ \"      height: 1px;\\n\"\n-\t\t\t+ \"      width: 1px;\\n\"\n-\t\t\t+ \"      padding: 0;\\n\"\n-\t\t\t+ \"      border: 0;\\n\"\n-\t\t\t+ \"      overflow: hidden;\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    \\n\"\n-\t\t\t+ \"    table {\\n\"\n-\t\t\t+ \"      width: 100%;\\n\"\n-\t\t\t+ \"      max-width: 100%;\\n\"\n-\t\t\t+ \"      margin-bottom: 2rem;\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    \\n\"\n-\t\t\t+ \"    .table-striped tr:nth-of-type(2n + 1) {\\n\"\n-\t\t\t+ \"      background-color: #e1e1e1;\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    \\n\"\n-\t\t\t+ \"    td {\\n\"\n-\t\t\t+ \"      padding: 0.75rem;\\n\"\n-\t\t\t+ \"      vertical-align: top;\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    \\n\"\n-\t\t\t+ \"    /* Login / logout layouts */\\n\"\n-\t\t\t+ \"    .login-form,\\n\"\n-\t\t\t+ \"    .logout-form {\\n\"\n-\t\t\t+ \"      max-width: 340px;\\n\"\n-\t\t\t+ \"      padding: 0 15px 15px 15px;\\n\"\n-\t\t\t+ \"      margin: 0 auto 2rem auto;\\n\"\n-\t\t\t+ \"      box-sizing: border-box;\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    </style>\\n\"\n-\t\t\t+ \"  </head>\\n\";\n-\t//@formatter:on\n+\tpublic static final String EXPECTED_HTML_HEAD = \"\"\"\n+\t\t\t<!DOCTYPE html>\n+\t\t\t<html lang=\"en\">\n+\t\t\t  <head>\n+\t\t\t    <meta charset=\"utf-8\">\n+\t\t\t    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n+\t\t\t    <meta name=\"description\" content=\"\">\n+\t\t\t    <meta name=\"author\" content=\"\">\n+\t\t\t    <title>Please sign in</title>\n+\t\t\t    <style>\n+\t\t\t    /* General layout */\n+\t\t\t    body {\n+\t\t\t      font-family: system-ui, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n+\t\t\t      background-color: #eee;\n+\t\t\t      padding: 40px 0;\n+\t\t\t      margin: 0;\n+\t\t\t      line-height: 1.5;\n+\t\t\t    }\n+\t\t\t\\s\\s\\s\\s\n+\t\t\t    h2 {\n+\t\t\t      margin-top: 0;\n+\t\t\t      margin-bottom: 0.5rem;\n+\t\t\t      font-size: 2rem;\n+\t\t\t      font-weight: 500;\n+\t\t\t      line-height: 2rem;\n+\t\t\t    }\n+\t\t\t\\s\\s\\s\\s\n+\t\t\t    .content {\n+\t\t\t      margin-right: auto;\n+\t\t\t      margin-left: auto;\n+\t\t\t      padding-right: 15px;\n+\t\t\t      padding-left: 15px;\n+\t\t\t      width: 100%;\n+\t\t\t      box-sizing: border-box;\n+\t\t\t    }\n+\t\t\t\\s\\s\\s\\s\n+\t\t\t    @media (min-width: 800px) {\n+\t\t\t      .content {\n+\t\t\t        max-width: 760px;\n+\t\t\t      }\n+\t\t\t    }\n+\t\t\t\\s\\s\\s\\s\n+\t\t\t    /* Components */\n+\t\t\t    a,\n+\t\t\t    a:visited {\n+\t\t\t      text-decoration: none;\n+\t\t\t      color: #06f;\n+\t\t\t    }\n+\t\t\t\\s\\s\\s\\s\n+\t\t\t    a:hover {\n+\t\t\t      text-decoration: underline;\n+\t\t\t      color: #003c97;\n+\t\t\t    }\n+\t\t\t\\s\\s\\s\\s\n+\t\t\t    input[type=\"text\"],\n+\t\t\t    input[type=\"password\"] {\n+\t\t\t      height: auto;\n+\t\t\t      width: 100%;\n+\t\t\t      font-size: 1rem;\n+\t\t\t      padding: 0.5rem;\n+\t\t\t      box-sizing: border-box;\n+\t\t\t    }\n+\t\t\t\\s\\s\\s\\s\n+\t\t\t    button {\n+\t\t\t      padding: 0.5rem 1rem;\n+\t\t\t      font-size: 1.25rem;\n+\t\t\t      line-height: 1.5;\n+\t\t\t      border: none;\n+\t\t\t      border-radius: 0.1rem;\n+\t\t\t      width: 100%;\n+\t\t\t    }\n+\t\t\t\\s\\s\\s\\s\n+\t\t\t    button.primary {\n+\t\t\t      color: #fff;\n+\t\t\t      background-color: #06f;\n+\t\t\t    }\n+\t\t\t\\s\\s\\s\\s\n+\t\t\t    .alert {\n+\t\t\t      padding: 0.75rem 1rem;\n+\t\t\t      margin-bottom: 1rem;\n+\t\t\t      line-height: 1.5;\n+\t\t\t      border-radius: 0.1rem;\n+\t\t\t      width: 100%;\n+\t\t\t      box-sizing: border-box;\n+\t\t\t      border-width: 1px;\n+\t\t\t      border-style: solid;\n+\t\t\t    }\n+\t\t\t\\s\\s\\s\\s\n+\t\t\t    .alert.alert-danger {\n+\t\t\t      color: #6b1922;\n+\t\t\t      background-color: #f7d5d7;\n+\t\t\t      border-color: #eab6bb;\n+\t\t\t    }\n+\t\t\t\\s\\s\\s\\s\n+\t\t\t    .alert.alert-success {\n+\t\t\t      color: #145222;\n+\t\t\t      background-color: #d1f0d9;\n+\t\t\t      border-color: #c2ebcb;\n+\t\t\t    }\n+\t\t\t\\s\\s\\s\\s\n+\t\t\t    .screenreader {\n+\t\t\t      position: absolute;\n+\t\t\t      clip: rect(0 0 0 0);\n+\t\t\t      height: 1px;\n+\t\t\t      width: 1px;\n+\t\t\t      padding: 0;\n+\t\t\t      border: 0;\n+\t\t\t      overflow: hidden;\n+\t\t\t    }\n+\t\t\t\\s\\s\\s\\s\n+\t\t\t    table {\n+\t\t\t      width: 100%;\n+\t\t\t      max-width: 100%;\n+\t\t\t      margin-bottom: 2rem;\n+\t\t\t    }\n+\t\t\t\\s\\s\\s\\s\n+\t\t\t    .table-striped tr:nth-of-type(2n + 1) {\n+\t\t\t      background-color: #e1e1e1;\n+\t\t\t    }\n+\t\t\t\\s\\s\\s\\s\n+\t\t\t    td {\n+\t\t\t      padding: 0.75rem;\n+\t\t\t      vertical-align: top;\n+\t\t\t    }\n+\t\t\t\\s\\s\\s\\s\n+\t\t\t    /* Login / logout layouts */\n+\t\t\t    .login-form,\n+\t\t\t    .logout-form {\n+\t\t\t      max-width: 340px;\n+\t\t\t      padding: 0 15px 15px 15px;\n+\t\t\t      margin: 0 auto 2rem auto;\n+\t\t\t      box-sizing: border-box;\n+\t\t\t    }\n+\t\t\t    </style>\n+\t\t\t  </head>\n+\t\t\t\"\"\";\n \n \tpublic final SpringTestContext spring = new SpringTestContext(this);\n \n@@ -222,26 +224,32 @@ public void loginPageThenDefaultLoginPageIsRendered() throws Exception {\n \t\tthis.mvc.perform(get(\"/login\").sessionAttr(csrfAttributeName, csrfToken))\n \t\t\t\t.andExpect((result) -> {\n \t\t\t\t\tCsrfToken token = (CsrfToken) result.getRequest().getAttribute(CsrfToken.class.getName());\n-\t\t\t\t\tassertThat(result.getResponse().getContentAsString()).isEqualTo(\"<!DOCTYPE html>\\n\"\n-\t\t\t\t\t\t+ \"<html lang=\\\"en\\\">\\n\"\n-\t\t\t\t\t\t+ EXPECTED_HTML_HEAD\n-\t\t\t\t\t\t+ \"  <body>\\n\"\n-\t\t\t\t\t\t+ \"     <div class=\\\"content\\\">\\n\"\n-\t\t\t\t\t\t+ \"      <form class=\\\"login-form\\\" method=\\\"post\\\" action=\\\"/login\\\">\\n\"\n-\t\t\t\t\t\t+ \"        <h2>Please sign in</h2>\\n\"\n-\t\t\t\t\t\t+ \"        <p>\\n\"\n-\t\t\t\t\t\t+ \"          <label for=\\\"username\\\" class=\\\"screenreader\\\">Username</label>\\n\"\n-\t\t\t\t\t\t+ \"          <input type=\\\"text\\\" id=\\\"username\\\" name=\\\"username\\\" placeholder=\\\"Username\\\" required autofocus>\\n\"\n-\t\t\t\t\t\t+ \"        </p>\\n\"\n-\t\t\t\t\t\t+ \"        <p>\\n\"\n-\t\t\t\t\t\t+ \"          <label for=\\\"password\\\" class=\\\"screenreader\\\">Password</label>\\n\"\n-\t\t\t\t\t\t+ \"          <input type=\\\"password\\\" id=\\\"password\\\" name=\\\"password\\\" placeholder=\\\"Password\\\" required>\\n\"\n-\t\t\t\t\t\t+ \"        </p>\\n\"\n-\t\t\t\t\t\t+ \"<input name=\\\"\" + token.getParameterName() + \"\\\" type=\\\"hidden\\\" value=\\\"\" + token.getToken() + \"\\\" />\\n\"\n-\t\t\t\t\t\t+ \"        <button type=\\\"submit\\\" class=\\\"primary\\\">Sign in</button>\\n\"\n-\t\t\t\t\t\t+ \"      </form>\\n\"\n-\t\t\t\t\t\t+ \"</div>\\n\"\n-\t\t\t\t\t\t+ \"</body></html>\");\n+\t\t\t\t\tassertThat(result.getResponse().getContentAsString()).isEqualTo(\n+\t\t\t\t\t\tEXPECTED_HTML_HEAD +\n+\t\t\t\t\t\t\"\"\"\n+\t\t\t\t\t\t  <body>\n+\t\t\t\t\t\t    <div class=\"content\">\n+\t\t\t\t\t\t      <form class=\"login-form\" method=\"post\" action=\"/login\">\n+\t\t\t\t\t\t        <h2>Please sign in</h2>\n+\t\t\t\t\t\t       \\s\n+\t\t\t\t\t\t        <p>\n+\t\t\t\t\t\t          <label for=\"username\" class=\"screenreader\">Username</label>\n+\t\t\t\t\t\t          <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"Username\" required autofocus>\n+\t\t\t\t\t\t        </p>\n+\t\t\t\t\t\t        <p>\n+\t\t\t\t\t\t          <label for=\"password\" class=\"screenreader\">Password</label>\n+\t\t\t\t\t\t          <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Password\" required>\n+\t\t\t\t\t\t        </p>\n+\n+\t\t\t\t\t\t<input name=\"_csrf\" type=\"hidden\" value=\"%s\" />\n+\t\t\t\t\t\t        <button type=\"submit\" class=\"primary\">Sign in</button>\n+\t\t\t\t\t\t      </form>\n+\n+\n+\n+\t\t\t\t\t\t    </div>\n+\t\t\t\t\t\t  </body>\n+\t\t\t\t\t\t</html>\"\"\".formatted(token.getToken()));\n \t\t\t\t});\n \t\t// @formatter:on\n \t}\n@@ -263,25 +271,32 @@ public void loginPageWhenErrorThenDefaultLoginPageWithError() throws Exception {\n \t\t\t\t.sessionAttr(csrfAttributeName, csrfToken))\n \t\t\t\t.andExpect((result) -> {\n \t\t\t\t\tCsrfToken token = (CsrfToken) result.getRequest().getAttribute(CsrfToken.class.getName());\n-\t\t\t\t\tassertThat(result.getResponse().getContentAsString()).isEqualTo(\"<!DOCTYPE html>\\n\"\n-\t\t\t\t\t\t+ \"<html lang=\\\"en\\\">\\n\"\n-\t\t\t\t\t\t+ EXPECTED_HTML_HEAD\n-\t\t\t\t\t\t+ \"  <body>\\n\"\n-\t\t\t\t\t\t+ \"     <div class=\\\"content\\\">\\n\"\n-\t\t\t\t\t\t+ \"      <form class=\\\"login-form\\\" method=\\\"post\\\" action=\\\"/login\\\">\\n\"\n-\t\t\t\t\t\t+ \"        <h2>Please sign in</h2>\\n\"\n-\t\t\t\t\t\t+ \"<div class=\\\"alert alert-danger\\\" role=\\\"alert\\\">Bad credentials</div>        <p>\\n\"\n-\t\t\t\t\t\t+ \"          <label for=\\\"username\\\" class=\\\"screenreader\\\">Username</label>\\n\"\n-\t\t\t\t\t\t+ \"          <input type=\\\"text\\\" id=\\\"username\\\" name=\\\"username\\\" placeholder=\\\"Username\\\" required autofocus>\\n\"\n-\t\t\t\t\t\t+ \"        </p>\\n\" + \"        <p>\\n\"\n-\t\t\t\t\t\t+ \"          <label for=\\\"password\\\" class=\\\"screenreader\\\">Password</label>\\n\"\n-\t\t\t\t\t\t+ \"          <input type=\\\"password\\\" id=\\\"password\\\" name=\\\"password\\\" placeholder=\\\"Password\\\" required>\\n\"\n-\t\t\t\t\t\t+ \"        </p>\\n\"\n-\t\t\t\t\t\t+ \"<input name=\\\"\" + token.getParameterName() + \"\\\" type=\\\"hidden\\\" value=\\\"\" + token.getToken() + \"\\\" />\\n\"\n-\t\t\t\t\t\t+ \"        <button type=\\\"submit\\\" class=\\\"primary\\\">Sign in</button>\\n\"\n-\t\t\t\t\t\t+ \"      </form>\\n\"\n-\t\t\t\t\t\t+ \"</div>\\n\"\n-\t\t\t\t\t\t+ \"</body></html>\");\n+\t\t\t\t\tassertThat(result.getResponse().getContentAsString()).isEqualTo(\n+\t\t\t\t\t\tEXPECTED_HTML_HEAD +\n+\t\t\t\t\t\t\"\"\"\n+\t\t\t\t\t\t  <body>\n+\t\t\t\t\t\t    <div class=\"content\">\n+\t\t\t\t\t\t      <form class=\"login-form\" method=\"post\" action=\"/login\">\n+\t\t\t\t\t\t        <h2>Please sign in</h2>\n+\t\t\t\t\t\t        <div class=\"alert alert-danger\" role=\"alert\">Bad credentials</div>\n+\t\t\t\t\t\t        <p>\n+\t\t\t\t\t\t          <label for=\"username\" class=\"screenreader\">Username</label>\n+\t\t\t\t\t\t          <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"Username\" required autofocus>\n+\t\t\t\t\t\t        </p>\n+\t\t\t\t\t\t        <p>\n+\t\t\t\t\t\t          <label for=\"password\" class=\"screenreader\">Password</label>\n+\t\t\t\t\t\t          <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Password\" required>\n+\t\t\t\t\t\t        </p>\n+\n+\t\t\t\t\t\t<input name=\"_csrf\" type=\"hidden\" value=\"%s\" />\n+\t\t\t\t\t\t        <button type=\"submit\" class=\"primary\">Sign in</button>\n+\t\t\t\t\t\t      </form>\n+\n+\n+\n+\t\t\t\t\t\t    </div>\n+\t\t\t\t\t\t  </body>\n+\t\t\t\t\t\t</html>\"\"\".formatted(token.getToken()));\n \t\t\t\t});\n \t\t// @formatter:on\n \t}\n@@ -307,26 +322,32 @@ public void loginPageWhenLoggedOutThenDefaultLoginPageWithLogoutMessage() throws\n \t\tthis.mvc.perform(get(\"/login?logout\").sessionAttr(csrfAttributeName, csrfToken))\n \t\t\t\t.andExpect((result) -> {\n \t\t\t\t\tCsrfToken token = (CsrfToken) result.getRequest().getAttribute(CsrfToken.class.getName());\n-\t\t\t\t\tassertThat(result.getResponse().getContentAsString()).isEqualTo(\"<!DOCTYPE html>\\n\"\n-\t\t\t\t\t\t+ \"<html lang=\\\"en\\\">\\n\"\n-\t\t\t\t\t\t+ EXPECTED_HTML_HEAD\n-\t\t\t\t\t\t+ \"  <body>\\n\"\n-\t\t\t\t\t\t+ \"     <div class=\\\"content\\\">\\n\"\n-\t\t\t\t\t\t+ \"      <form class=\\\"login-form\\\" method=\\\"post\\\" action=\\\"/login\\\">\\n\"\n-\t\t\t\t\t\t+ \"        <h2>Please sign in</h2>\\n\"\n-\t\t\t\t\t\t+ \"<div class=\\\"alert alert-success\\\" role=\\\"alert\\\">You have been signed out</div>        <p>\\n\"\n-\t\t\t\t\t\t+ \"          <label for=\\\"username\\\" class=\\\"screenreader\\\">Username</label>\\n\"\n-\t\t\t\t\t\t+ \"          <input type=\\\"text\\\" id=\\\"username\\\" name=\\\"username\\\" placeholder=\\\"Username\\\" required autofocus>\\n\"\n-\t\t\t\t\t\t+ \"        </p>\\n\"\n-\t\t\t\t\t\t+ \"        <p>\\n\"\n-\t\t\t\t\t\t+ \"          <label for=\\\"password\\\" class=\\\"screenreader\\\">Password</label>\\n\"\n-\t\t\t\t\t\t+ \"          <input type=\\\"password\\\" id=\\\"password\\\" name=\\\"password\\\" placeholder=\\\"Password\\\" required>\\n\"\n-\t\t\t\t\t\t+ \"        </p>\\n\"\n-\t\t\t\t\t\t+ \"<input name=\\\"\" + token.getParameterName() + \"\\\" type=\\\"hidden\\\" value=\\\"\" + token.getToken() + \"\\\" />\\n\"\n-\t\t\t\t\t\t+ \"        <button type=\\\"submit\\\" class=\\\"primary\\\">Sign in</button>\\n\"\n-\t\t\t\t\t\t+ \"      </form>\\n\"\n-\t\t\t\t\t\t+ \"</div>\\n\"\n-\t\t\t\t\t\t+ \"</body></html>\");\n+\t\t\t\t\tassertThat(result.getResponse().getContentAsString()).isEqualTo(\n+\t\t\t\t\t\tEXPECTED_HTML_HEAD +\n+\t\t\t\t\t\t\"\"\"\n+\t\t\t\t\t\t  <body>\n+\t\t\t\t\t\t    <div class=\"content\">\n+\t\t\t\t\t\t      <form class=\"login-form\" method=\"post\" action=\"/login\">\n+\t\t\t\t\t\t        <h2>Please sign in</h2>\n+\t\t\t\t\t\t        <div class=\"alert alert-success\" role=\"alert\">You have been signed out</div>\n+\t\t\t\t\t\t        <p>\n+\t\t\t\t\t\t          <label for=\"username\" class=\"screenreader\">Username</label>\n+\t\t\t\t\t\t          <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"Username\" required autofocus>\n+\t\t\t\t\t\t        </p>\n+\t\t\t\t\t\t        <p>\n+\t\t\t\t\t\t          <label for=\"password\" class=\"screenreader\">Password</label>\n+\t\t\t\t\t\t          <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Password\" required>\n+\t\t\t\t\t\t        </p>\n+\n+\t\t\t\t\t\t<input name=\"_csrf\" type=\"hidden\" value=\"%s\" />\n+\t\t\t\t\t\t        <button type=\"submit\" class=\"primary\">Sign in</button>\n+\t\t\t\t\t\t      </form>\n+\n+\n+\n+\t\t\t\t\t\t    </div>\n+\t\t\t\t\t\t  </body>\n+\t\t\t\t\t\t</html>\"\"\".formatted(token.getToken()));\n \t\t\t\t});\n \t\t// @formatter:on\n \t}\n@@ -352,27 +373,32 @@ public void loginPageWhenRememberConfigureThenDefaultLoginPageWithRememberMeChec\n \t\tthis.mvc.perform(get(\"/login\").sessionAttr(csrfAttributeName, csrfToken))\n \t\t\t\t.andExpect((result) -> {\n \t\t\t\t\tCsrfToken token = (CsrfToken) result.getRequest().getAttribute(CsrfToken.class.getName());\n-\t\t\t\t\tassertThat(result.getResponse().getContentAsString()).isEqualTo(\"<!DOCTYPE html>\\n\"\n-\t\t\t\t\t\t+ \"<html lang=\\\"en\\\">\\n\"\n-\t\t\t\t\t\t+ EXPECTED_HTML_HEAD\n-\t\t\t\t\t\t+ \"  <body>\\n\"\n-\t\t\t\t\t\t+ \"     <div class=\\\"content\\\">\\n\"\n-\t\t\t\t\t\t+ \"      <form class=\\\"login-form\\\" method=\\\"post\\\" action=\\\"/login\\\">\\n\"\n-\t\t\t\t\t\t+ \"        <h2>Please sign in</h2>\\n\"\n-\t\t\t\t\t\t+ \"        <p>\\n\"\n-\t\t\t\t\t\t+ \"          <label for=\\\"username\\\" class=\\\"screenreader\\\">Username</label>\\n\"\n-\t\t\t\t\t\t+ \"          <input type=\\\"text\\\" id=\\\"username\\\" name=\\\"username\\\" placeholder=\\\"Username\\\" required autofocus>\\n\"\n-\t\t\t\t\t\t+ \"        </p>\\n\"\n-\t\t\t\t\t\t+ \"        <p>\\n\"\n-\t\t\t\t\t\t+ \"          <label for=\\\"password\\\" class=\\\"screenreader\\\">Password</label>\\n\"\n-\t\t\t\t\t\t+ \"          <input type=\\\"password\\\" id=\\\"password\\\" name=\\\"password\\\" placeholder=\\\"Password\\\" required>\\n\"\n-\t\t\t\t\t\t+ \"        </p>\\n\"\n-\t\t\t\t\t\t+ \"<p><input type='checkbox' name='remember-me'/> Remember me on this computer.</p>\\n\"\n-\t\t\t\t\t\t+ \"<input name=\\\"\" + token.getParameterName() + \"\\\" type=\\\"hidden\\\" value=\\\"\" + token.getToken() + \"\\\" />\\n\"\n-\t\t\t\t\t\t+ \"        <button type=\\\"submit\\\" class=\\\"primary\\\">Sign in</button>\\n\"\n-\t\t\t\t\t\t+ \"      </form>\\n\"\n-\t\t\t\t\t\t+ \"</div>\\n\"\n-\t\t\t\t\t\t+ \"</body></html>\");\n+\t\t\t\t\tassertThat(result.getResponse().getContentAsString()).isEqualTo(\n+\t\t\t\t\t\tEXPECTED_HTML_HEAD +\n+\t\t\t\t\t\t\"\"\"\n+\t\t\t\t\t\t  <body>\n+\t\t\t\t\t\t    <div class=\"content\">\n+\t\t\t\t\t\t      <form class=\"login-form\" method=\"post\" action=\"/login\">\n+\t\t\t\t\t\t        <h2>Please sign in</h2>\n+\t\t\t\t\t\t       \\s\n+\t\t\t\t\t\t        <p>\n+\t\t\t\t\t\t          <label for=\"username\" class=\"screenreader\">Username</label>\n+\t\t\t\t\t\t          <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"Username\" required autofocus>\n+\t\t\t\t\t\t        </p>\n+\t\t\t\t\t\t        <p>\n+\t\t\t\t\t\t          <label for=\"password\" class=\"screenreader\">Password</label>\n+\t\t\t\t\t\t          <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Password\" required>\n+\t\t\t\t\t\t        </p>\n+\t\t\t\t\t\t<p><input type='checkbox' name='remember-me'/> Remember me on this computer.</p>\n+\t\t\t\t\t\t<input name=\"_csrf\" type=\"hidden\" value=\"%s\" />\n+\t\t\t\t\t\t        <button type=\"submit\" class=\"primary\">Sign in</button>\n+\t\t\t\t\t\t      </form>\n+\n+\n+\n+\t\t\t\t\t\t    </div>\n+\t\t\t\t\t\t  </body>\n+\t\t\t\t\t\t</html>\"\"\".formatted(token.getToken()));\n \t\t\t\t});\n \t\t// @formatter:on\n \t}\n\ndiff --git a/config/src/test/java/org/springframework/security/config/http/FormLoginBeanDefinitionParserTests.java b/config/src/test/java/org/springframework/security/config/http/FormLoginBeanDefinitionParserTests.java\nindex 1d16c26571c..661d20c2352 100644\n--- a/config/src/test/java/org/springframework/security/config/http/FormLoginBeanDefinitionParserTests.java\n+++ b/config/src/test/java/org/springframework/security/config/http/FormLoginBeanDefinitionParserTests.java\n@@ -45,140 +45,142 @@ public class FormLoginBeanDefinitionParserTests {\n \n \tprivate static final String CONFIG_LOCATION_PREFIX = \"classpath:org/springframework/security/config/http/FormLoginBeanDefinitionParserTests\";\n \n-\t//@formatter:off\n-\tpublic static final String EXPECTED_HTML_HEAD = \"  <head>\\n\"\n-\t\t\t+ \"    <meta charset=\\\"utf-8\\\">\\n\"\n-\t\t\t+ \"    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1, shrink-to-fit=no\\\">\\n\"\n-\t\t\t+ \"    <meta name=\\\"description\\\" content=\\\"\\\">\\n\"\n-\t\t\t+ \"    <meta name=\\\"author\\\" content=\\\"\\\">\\n\"\n-\t\t\t+ \"    <title>Please sign in</title>\\n\"\n-\t\t\t+ \"    <style>\\n\"\n-\t\t\t+ \"    /* General layout */\\n\"\n-\t\t\t+ \"    body {\\n\"\n-\t\t\t+ \"      font-family: system-ui, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\\n\"\n-\t\t\t+ \"      background-color: #eee;\\n\"\n-\t\t\t+ \"      padding: 40px 0;\\n\"\n-\t\t\t+ \"      margin: 0;\\n\"\n-\t\t\t+ \"      line-height: 1.5;\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    \\n\"\n-\t\t\t+ \"    h2 {\\n\"\n-\t\t\t+ \"      margin-top: 0;\\n\"\n-\t\t\t+ \"      margin-bottom: 0.5rem;\\n\"\n-\t\t\t+ \"      font-size: 2rem;\\n\"\n-\t\t\t+ \"      font-weight: 500;\\n\"\n-\t\t\t+ \"      line-height: 2rem;\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    \\n\"\n-\t\t\t+ \"    .content {\\n\"\n-\t\t\t+ \"      margin-right: auto;\\n\"\n-\t\t\t+ \"      margin-left: auto;\\n\"\n-\t\t\t+ \"      padding-right: 15px;\\n\"\n-\t\t\t+ \"      padding-left: 15px;\\n\"\n-\t\t\t+ \"      width: 100%;\\n\"\n-\t\t\t+ \"      box-sizing: border-box;\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    \\n\"\n-\t\t\t+ \"    @media (min-width: 800px) {\\n\"\n-\t\t\t+ \"      .content {\\n\"\n-\t\t\t+ \"        max-width: 760px;\\n\"\n-\t\t\t+ \"      }\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    \\n\"\n-\t\t\t+ \"    /* Components */\\n\"\n-\t\t\t+ \"    a,\\n\"\n-\t\t\t+ \"    a:visited {\\n\"\n-\t\t\t+ \"      text-decoration: none;\\n\"\n-\t\t\t+ \"      color: #06f;\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    \\n\"\n-\t\t\t+ \"    a:hover {\\n\"\n-\t\t\t+ \"      text-decoration: underline;\\n\"\n-\t\t\t+ \"      color: #003c97;\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    \\n\"\n-\t\t\t+ \"    input[type=\\\"text\\\"],\\n\"\n-\t\t\t+ \"    input[type=\\\"password\\\"] {\\n\"\n-\t\t\t+ \"      height: auto;\\n\"\n-\t\t\t+ \"      width: 100%;\\n\"\n-\t\t\t+ \"      font-size: 1rem;\\n\"\n-\t\t\t+ \"      padding: 0.5rem;\\n\"\n-\t\t\t+ \"      box-sizing: border-box;\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    \\n\"\n-\t\t\t+ \"    button {\\n\"\n-\t\t\t+ \"      padding: 0.5rem 1rem;\\n\"\n-\t\t\t+ \"      font-size: 1.25rem;\\n\"\n-\t\t\t+ \"      line-height: 1.5;\\n\"\n-\t\t\t+ \"      border: none;\\n\"\n-\t\t\t+ \"      border-radius: 0.1rem;\\n\"\n-\t\t\t+ \"      width: 100%;\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    \\n\"\n-\t\t\t+ \"    button.primary {\\n\"\n-\t\t\t+ \"      color: #fff;\\n\"\n-\t\t\t+ \"      background-color: #06f;\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    \\n\"\n-\t\t\t+ \"    .alert {\\n\"\n-\t\t\t+ \"      padding: 0.75rem 1rem;\\n\"\n-\t\t\t+ \"      margin-bottom: 1rem;\\n\"\n-\t\t\t+ \"      line-height: 1.5;\\n\"\n-\t\t\t+ \"      border-radius: 0.1rem;\\n\"\n-\t\t\t+ \"      width: 100%;\\n\"\n-\t\t\t+ \"      box-sizing: border-box;\\n\"\n-\t\t\t+ \"      border-width: 1px;\\n\"\n-\t\t\t+ \"      border-style: solid;\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    \\n\"\n-\t\t\t+ \"    .alert.alert-danger {\\n\"\n-\t\t\t+ \"      color: #6b1922;\\n\"\n-\t\t\t+ \"      background-color: #f7d5d7;\\n\"\n-\t\t\t+ \"      border-color: #eab6bb;\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    \\n\"\n-\t\t\t+ \"    .alert.alert-success {\\n\"\n-\t\t\t+ \"      color: #145222;\\n\"\n-\t\t\t+ \"      background-color: #d1f0d9;\\n\"\n-\t\t\t+ \"      border-color: #c2ebcb;\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    \\n\"\n-\t\t\t+ \"    .screenreader {\\n\"\n-\t\t\t+ \"      position: absolute;\\n\"\n-\t\t\t+ \"      clip: rect(0 0 0 0);\\n\"\n-\t\t\t+ \"      height: 1px;\\n\"\n-\t\t\t+ \"      width: 1px;\\n\"\n-\t\t\t+ \"      padding: 0;\\n\"\n-\t\t\t+ \"      border: 0;\\n\"\n-\t\t\t+ \"      overflow: hidden;\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    \\n\"\n-\t\t\t+ \"    table {\\n\"\n-\t\t\t+ \"      width: 100%;\\n\"\n-\t\t\t+ \"      max-width: 100%;\\n\"\n-\t\t\t+ \"      margin-bottom: 2rem;\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    \\n\"\n-\t\t\t+ \"    .table-striped tr:nth-of-type(2n + 1) {\\n\"\n-\t\t\t+ \"      background-color: #e1e1e1;\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    \\n\"\n-\t\t\t+ \"    td {\\n\"\n-\t\t\t+ \"      padding: 0.75rem;\\n\"\n-\t\t\t+ \"      vertical-align: top;\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    \\n\"\n-\t\t\t+ \"    /* Login / logout layouts */\\n\"\n-\t\t\t+ \"    .login-form,\\n\"\n-\t\t\t+ \"    .logout-form {\\n\"\n-\t\t\t+ \"      max-width: 340px;\\n\"\n-\t\t\t+ \"      padding: 0 15px 15px 15px;\\n\"\n-\t\t\t+ \"      margin: 0 auto 2rem auto;\\n\"\n-\t\t\t+ \"      box-sizing: border-box;\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"    </style>\\n\"\n-\t\t\t+ \"  </head>\\n\";\n-\t//@formatter:on\n+\tpublic static final String EXPECTED_HTML_HEAD = \"\"\"\n+\t\t\t<!DOCTYPE html>\n+\t\t\t<html lang=\"en\">\n+\t\t\t  <head>\n+\t\t\t    <meta charset=\"utf-8\">\n+\t\t\t    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n+\t\t\t    <meta name=\"description\" content=\"\">\n+\t\t\t    <meta name=\"author\" content=\"\">\n+\t\t\t    <title>Please sign in</title>\n+\t\t\t    <style>\n+\t\t\t    /* General layout */\n+\t\t\t    body {\n+\t\t\t      font-family: system-ui, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n+\t\t\t      background-color: #eee;\n+\t\t\t      padding: 40px 0;\n+\t\t\t      margin: 0;\n+\t\t\t      line-height: 1.5;\n+\t\t\t    }\n+\t\t\t\\s\\s\\s\\s\n+\t\t\t    h2 {\n+\t\t\t      margin-top: 0;\n+\t\t\t      margin-bottom: 0.5rem;\n+\t\t\t      font-size: 2rem;\n+\t\t\t      font-weight: 500;\n+\t\t\t      line-height: 2rem;\n+\t\t\t    }\n+\t\t\t\\s\\s\\s\\s\n+\t\t\t    .content {\n+\t\t\t      margin-right: auto;\n+\t\t\t      margin-left: auto;\n+\t\t\t      padding-right: 15px;\n+\t\t\t      padding-left: 15px;\n+\t\t\t      width: 100%;\n+\t\t\t      box-sizing: border-box;\n+\t\t\t    }\n+\t\t\t\\s\\s\\s\\s\n+\t\t\t    @media (min-width: 800px) {\n+\t\t\t      .content {\n+\t\t\t        max-width: 760px;\n+\t\t\t      }\n+\t\t\t    }\n+\t\t\t\\s\\s\\s\\s\n+\t\t\t    /* Components */\n+\t\t\t    a,\n+\t\t\t    a:visited {\n+\t\t\t      text-decoration: none;\n+\t\t\t      color: #06f;\n+\t\t\t    }\n+\t\t\t\\s\\s\\s\\s\n+\t\t\t    a:hover {\n+\t\t\t      text-decoration: underline;\n+\t\t\t      color: #003c97;\n+\t\t\t    }\n+\t\t\t\\s\\s\\s\\s\n+\t\t\t    input[type=\"text\"],\n+\t\t\t    input[type=\"password\"] {\n+\t\t\t      height: auto;\n+\t\t\t      width: 100%;\n+\t\t\t      font-size: 1rem;\n+\t\t\t      padding: 0.5rem;\n+\t\t\t      box-sizing: border-box;\n+\t\t\t    }\n+\t\t\t\\s\\s\\s\\s\n+\t\t\t    button {\n+\t\t\t      padding: 0.5rem 1rem;\n+\t\t\t      font-size: 1.25rem;\n+\t\t\t      line-height: 1.5;\n+\t\t\t      border: none;\n+\t\t\t      border-radius: 0.1rem;\n+\t\t\t      width: 100%;\n+\t\t\t    }\n+\t\t\t\\s\\s\\s\\s\n+\t\t\t    button.primary {\n+\t\t\t      color: #fff;\n+\t\t\t      background-color: #06f;\n+\t\t\t    }\n+\t\t\t\\s\\s\\s\\s\n+\t\t\t    .alert {\n+\t\t\t      padding: 0.75rem 1rem;\n+\t\t\t      margin-bottom: 1rem;\n+\t\t\t      line-height: 1.5;\n+\t\t\t      border-radius: 0.1rem;\n+\t\t\t      width: 100%;\n+\t\t\t      box-sizing: border-box;\n+\t\t\t      border-width: 1px;\n+\t\t\t      border-style: solid;\n+\t\t\t    }\n+\t\t\t\\s\\s\\s\\s\n+\t\t\t    .alert.alert-danger {\n+\t\t\t      color: #6b1922;\n+\t\t\t      background-color: #f7d5d7;\n+\t\t\t      border-color: #eab6bb;\n+\t\t\t    }\n+\t\t\t\\s\\s\\s\\s\n+\t\t\t    .alert.alert-success {\n+\t\t\t      color: #145222;\n+\t\t\t      background-color: #d1f0d9;\n+\t\t\t      border-color: #c2ebcb;\n+\t\t\t    }\n+\t\t\t\\s\\s\\s\\s\n+\t\t\t    .screenreader {\n+\t\t\t      position: absolute;\n+\t\t\t      clip: rect(0 0 0 0);\n+\t\t\t      height: 1px;\n+\t\t\t      width: 1px;\n+\t\t\t      padding: 0;\n+\t\t\t      border: 0;\n+\t\t\t      overflow: hidden;\n+\t\t\t    }\n+\t\t\t\\s\\s\\s\\s\n+\t\t\t    table {\n+\t\t\t      width: 100%;\n+\t\t\t      max-width: 100%;\n+\t\t\t      margin-bottom: 2rem;\n+\t\t\t    }\n+\t\t\t\\s\\s\\s\\s\n+\t\t\t    .table-striped tr:nth-of-type(2n + 1) {\n+\t\t\t      background-color: #e1e1e1;\n+\t\t\t    }\n+\t\t\t\\s\\s\\s\\s\n+\t\t\t    td {\n+\t\t\t      padding: 0.75rem;\n+\t\t\t      vertical-align: top;\n+\t\t\t    }\n+\t\t\t\\s\\s\\s\\s\n+\t\t\t    /* Login / logout layouts */\n+\t\t\t    .login-form,\n+\t\t\t    .logout-form {\n+\t\t\t      max-width: 340px;\n+\t\t\t      padding: 0 15px 15px 15px;\n+\t\t\t      margin: 0 auto 2rem auto;\n+\t\t\t      box-sizing: border-box;\n+\t\t\t    }\n+\t\t\t    </style>\n+\t\t\t  </head>\n+\t\t\t\"\"\";\n \n \tpublic final SpringTestContext spring = new SpringTestContext(this);\n \n@@ -188,27 +190,30 @@ public class FormLoginBeanDefinitionParserTests {\n \t@Test\n \tpublic void getLoginWhenAutoConfigThenShowsDefaultLoginPage() throws Exception {\n \t\tthis.spring.configLocations(this.xml(\"Simple\")).autowire();\n-\t\t// @formatter:off\n-\t\tString expectedContent = \"<!DOCTYPE html>\\n\"\n-\t\t\t\t+ \"<html lang=\\\"en\\\">\\n\"\n-\t\t\t\t+ EXPECTED_HTML_HEAD\n-\t\t\t\t+ \"  <body>\\n\"\n-\t\t\t\t+ \"     <div class=\\\"content\\\">\\n\"\n-\t\t\t\t+ \"      <form class=\\\"login-form\\\" method=\\\"post\\\" action=\\\"/login\\\">\\n\"\n-\t\t\t\t+ \"        <h2>Please sign in</h2>\\n\"\n-\t\t\t\t+ \"        <p>\\n\"\n-\t\t\t\t+ \"          <label for=\\\"username\\\" class=\\\"screenreader\\\">Username</label>\\n\"\n-\t\t\t\t+ \"          <input type=\\\"text\\\" id=\\\"username\\\" name=\\\"username\\\" placeholder=\\\"Username\\\" required autofocus>\\n\"\n-\t\t\t\t+ \"        </p>\\n\"\n-\t\t\t\t+ \"        <p>\\n\"\n-\t\t\t\t+ \"          <label for=\\\"password\\\" class=\\\"screenreader\\\">Password</label>\\n\"\n-\t\t\t\t+ \"          <input type=\\\"password\\\" id=\\\"password\\\" name=\\\"password\\\" placeholder=\\\"Password\\\" required>\\n\"\n-\t\t\t\t+ \"        </p>\\n\"\n-\t\t\t\t+ \"        <button type=\\\"submit\\\" class=\\\"primary\\\">Sign in</button>\\n\"\n-\t\t\t\t+ \"      </form>\\n\"\n-\t\t\t\t+ \"</div>\\n\"\n-\t\t\t\t+ \"</body></html>\";\n-\t\t// @formatter:on\n+\t\tString expectedContent = EXPECTED_HTML_HEAD + \"\"\"\n+\t\t\t\t  <body>\n+\t\t\t\t    <div class=\"content\">\n+\t\t\t\t      <form class=\"login-form\" method=\"post\" action=\"/login\">\n+\t\t\t\t        <h2>Please sign in</h2>\n+\t\t\t\t       \\s\n+\t\t\t\t        <p>\n+\t\t\t\t          <label for=\"username\" class=\"screenreader\">Username</label>\n+\t\t\t\t          <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"Username\" required autofocus>\n+\t\t\t\t        </p>\n+\t\t\t\t        <p>\n+\t\t\t\t          <label for=\"password\" class=\"screenreader\">Password</label>\n+\t\t\t\t          <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Password\" required>\n+\t\t\t\t        </p>\n+\n+\n+\t\t\t\t        <button type=\"submit\" class=\"primary\">Sign in</button>\n+\t\t\t\t      </form>\n+\n+\n+\n+\t\t\t\t    </div>\n+\t\t\t\t  </body>\n+\t\t\t\t</html>\"\"\";\n \t\tthis.mvc.perform(get(\"/login\")).andExpect(content().string(expectedContent));\n \t}\n \n@@ -221,31 +226,32 @@ public void getLogoutWhenAutoConfigThenShowsDefaultLogoutPage() throws Exception\n \t@Test\n \tpublic void getLoginWhenConfiguredWithCustomAttributesThenLoginPageReflects() throws Exception {\n \t\tthis.spring.configLocations(this.xml(\"WithCustomAttributes\")).autowire();\n-\t\t// @formatter:off\n-\t\tString expectedContent = \"<!DOCTYPE html>\\n\"\n-\t\t\t\t+ \"<html lang=\\\"en\\\">\\n\"\n-\t\t\t\t+ EXPECTED_HTML_HEAD\n-\t\t\t\t+ \"  <body>\\n\"\n-\t\t\t\t+ \"     <div class=\\\"content\\\">\\n\"\n-\t\t\t\t+ \"      <form class=\\\"login-form\\\" method=\\\"post\\\" action=\\\"/signin\\\">\\n\"\n-\t\t\t\t+ \"        <h2>Please sign in</h2>\\n\"\n-\t\t\t\t+ \"        <p>\\n\"\n-\t\t\t\t+ \"          <label for=\\\"username\\\" class=\\\"screenreader\\\">Username</label>\\n\"\n-\t\t\t\t+ \"          <input type=\\\"text\\\" id=\\\"username\\\" name=\\\"custom_user\\\" placeholder=\\\"Username\\\" required autofocus>\\n\"\n-\t\t\t\t+ \"        </p>\\n\"\n-\t\t\t\t+ \"        <p>\\n\"\n-\t\t\t\t+ \"          <label for=\\\"password\\\" class=\\\"screenreader\\\">Password</label>\\n\"\n-\t\t\t\t+ \"          <input type=\\\"password\\\" id=\\\"password\\\" name=\\\"custom_pass\\\" placeholder=\\\"Password\\\" required>\\n\"\n-\t\t\t\t+ \"        </p>\\n\"\n-\t\t\t\t+ \"        <button type=\\\"submit\\\" class=\\\"primary\\\">Sign in</button>\\n\"\n-\t\t\t\t+ \"      </form>\\n\"\n-\t\t\t\t+ \"</div>\\n\"\n-\t\t\t\t+ \"</body></html>\";\n-\t\tthis.mvc.perform(get(\"/login\"))\n-\t\t\t\t.andExpect(content().string(expectedContent));\n-\t\tthis.mvc.perform(get(\"/logout\"))\n-\t\t\t\t.andExpect(status().is3xxRedirection());\n-\t\t// @formatter:on\n+\t\tString expectedContent = EXPECTED_HTML_HEAD + \"\"\"\n+\t\t\t\t  <body>\n+\t\t\t\t    <div class=\"content\">\n+\t\t\t\t      <form class=\"login-form\" method=\"post\" action=\"/signin\">\n+\t\t\t\t        <h2>Please sign in</h2>\n+\t\t\t\t       \\s\n+\t\t\t\t        <p>\n+\t\t\t\t          <label for=\"username\" class=\"screenreader\">Username</label>\n+\t\t\t\t          <input type=\"text\" id=\"username\" name=\"custom_user\" placeholder=\"Username\" required autofocus>\n+\t\t\t\t        </p>\n+\t\t\t\t        <p>\n+\t\t\t\t          <label for=\"password\" class=\"screenreader\">Password</label>\n+\t\t\t\t          <input type=\"password\" id=\"password\" name=\"custom_pass\" placeholder=\"Password\" required>\n+\t\t\t\t        </p>\n+\n+\n+\t\t\t\t        <button type=\"submit\" class=\"primary\">Sign in</button>\n+\t\t\t\t      </form>\n+\n+\n+\n+\t\t\t\t    </div>\n+\t\t\t\t  </body>\n+\t\t\t\t</html>\"\"\";\n+\t\tthis.mvc.perform(get(\"/login\")).andExpect(content().string(expectedContent));\n+\t\tthis.mvc.perform(get(\"/logout\")).andExpect(status().is3xxRedirection());\n \t}\n \n \t@Test\n\ndiff --git a/web/src/test/java/org/springframework/security/web/authentication/DefaultLoginPageGeneratingFilterTests.java b/web/src/test/java/org/springframework/security/web/authentication/DefaultLoginPageGeneratingFilterTests.java\nindex 95277098787..e9c21163f9a 100644\n--- a/web/src/test/java/org/springframework/security/web/authentication/DefaultLoginPageGeneratingFilterTests.java\n+++ b/web/src/test/java/org/springframework/security/web/authentication/DefaultLoginPageGeneratingFilterTests.java\n@@ -16,10 +16,12 @@\n \n package org.springframework.security.web.authentication;\n \n+import java.io.IOException;\n import java.util.Collections;\n import java.util.Locale;\n \n import jakarta.servlet.FilterChain;\n+import jakarta.servlet.ServletException;\n import org.junit.jupiter.api.Test;\n \n import org.springframework.context.support.MessageSourceAccessor;\n@@ -195,15 +197,204 @@ public void generateWhenOneTimeTokenLoginThenOttForm() throws Exception {\n \t\tfilter.doFilter(new MockHttpServletRequest(\"GET\", \"/login\"), response, this.chain);\n \t\tassertThat(response.getContentAsString()).contains(\"Request a One-Time Token\");\n \t\tassertThat(response.getContentAsString()).contains(\"\"\"\n-\t\t\t\t<form id=\"ott-form\" class=\"login-form\" method=\"post\" action=\"/ott/authenticate\">\n+\t\t\t\t      <form id=\"ott-form\" class=\"login-form\" method=\"post\" action=\"/ott/authenticate\">\n \t\t\t\t        <h2>Request a One-Time Token</h2>\n-\t\t\t\t<p>\n+\t\t\t\t     \\s\n+\t\t\t\t        <p>\n \t\t\t\t          <label for=\"ott-username\" class=\"screenreader\">Username</label>\n \t\t\t\t          <input type=\"text\" id=\"ott-username\" name=\"username\" placeholder=\"Username\" required>\n \t\t\t\t        </p>\n-\t\t\t\t          <button class=\"primary\" type=\"submit\" form=\"ott-form\">Send Token</button>\n+\t\t\t\t     \\s\n+\t\t\t\t        <button class=\"primary\" type=\"submit\" form=\"ott-form\">Send Token</button>\n \t\t\t\t      </form>\n \t\t\t\t\"\"\");\n \t}\n \n+\t@Test\n+\tvoid generatesThenRenders() throws ServletException, IOException {\n+\t\tDefaultLoginPageGeneratingFilter filter = new DefaultLoginPageGeneratingFilter(\n+\t\t\t\tnew UsernamePasswordAuthenticationFilter());\n+\t\tfilter.setLoginPageUrl(DefaultLoginPageGeneratingFilter.DEFAULT_LOGIN_PAGE_URL);\n+\t\tfilter.setSaml2LoginEnabled(true);\n+\t\tString clientName = \"Google < > \\\" \\' &\";\n+\t\tfilter.setSaml2AuthenticationUrlToProviderName(Collections.singletonMap(\"/saml/sso/google\", clientName));\n+\t\tfilter.setOauth2LoginEnabled(true);\n+\t\tclientName = \"Google < > \\\" \\' &\";\n+\t\tfilter.setOauth2AuthenticationUrlToClientName(\n+\t\t\t\tCollections.singletonMap(\"/oauth2/authorization/google\", clientName));\n+\n+\t\tMockHttpServletRequest request = new MockHttpServletRequest(\"GET\", \"/login\");\n+\t\trequest.setQueryString(\"error\");\n+\t\tMockHttpServletResponse response = new MockHttpServletResponse();\n+\t\trequest.getSession()\n+\t\t\t.setAttribute(WebAttributes.AUTHENTICATION_EXCEPTION, new BadCredentialsException(\"Bad credentials\"));\n+\t\tfilter.doFilter(request, response, this.chain);\n+\t\tassertThat(response.getContentAsString()).isEqualTo(\"\"\"\n+\t\t\t\t<!DOCTYPE html>\n+\t\t\t\t<html lang=\"en\">\n+\t\t\t\t  <head>\n+\t\t\t\t    <meta charset=\"utf-8\">\n+\t\t\t\t    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n+\t\t\t\t    <meta name=\"description\" content=\"\">\n+\t\t\t\t    <meta name=\"author\" content=\"\">\n+\t\t\t\t    <title>Please sign in</title>\n+\t\t\t\t    <style>\n+\t\t\t\t    /* General layout */\n+\t\t\t\t    body {\n+\t\t\t\t      font-family: system-ui, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n+\t\t\t\t      background-color: #eee;\n+\t\t\t\t      padding: 40px 0;\n+\t\t\t\t      margin: 0;\n+\t\t\t\t      line-height: 1.5;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    h2 {\n+\t\t\t\t      margin-top: 0;\n+\t\t\t\t      margin-bottom: 0.5rem;\n+\t\t\t\t      font-size: 2rem;\n+\t\t\t\t      font-weight: 500;\n+\t\t\t\t      line-height: 2rem;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    .content {\n+\t\t\t\t      margin-right: auto;\n+\t\t\t\t      margin-left: auto;\n+\t\t\t\t      padding-right: 15px;\n+\t\t\t\t      padding-left: 15px;\n+\t\t\t\t      width: 100%;\n+\t\t\t\t      box-sizing: border-box;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    @media (min-width: 800px) {\n+\t\t\t\t      .content {\n+\t\t\t\t        max-width: 760px;\n+\t\t\t\t      }\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    /* Components */\n+\t\t\t\t    a,\n+\t\t\t\t    a:visited {\n+\t\t\t\t      text-decoration: none;\n+\t\t\t\t      color: #06f;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    a:hover {\n+\t\t\t\t      text-decoration: underline;\n+\t\t\t\t      color: #003c97;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    input[type=\"text\"],\n+\t\t\t\t    input[type=\"password\"] {\n+\t\t\t\t      height: auto;\n+\t\t\t\t      width: 100%;\n+\t\t\t\t      font-size: 1rem;\n+\t\t\t\t      padding: 0.5rem;\n+\t\t\t\t      box-sizing: border-box;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    button {\n+\t\t\t\t      padding: 0.5rem 1rem;\n+\t\t\t\t      font-size: 1.25rem;\n+\t\t\t\t      line-height: 1.5;\n+\t\t\t\t      border: none;\n+\t\t\t\t      border-radius: 0.1rem;\n+\t\t\t\t      width: 100%;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    button.primary {\n+\t\t\t\t      color: #fff;\n+\t\t\t\t      background-color: #06f;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    .alert {\n+\t\t\t\t      padding: 0.75rem 1rem;\n+\t\t\t\t      margin-bottom: 1rem;\n+\t\t\t\t      line-height: 1.5;\n+\t\t\t\t      border-radius: 0.1rem;\n+\t\t\t\t      width: 100%;\n+\t\t\t\t      box-sizing: border-box;\n+\t\t\t\t      border-width: 1px;\n+\t\t\t\t      border-style: solid;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    .alert.alert-danger {\n+\t\t\t\t      color: #6b1922;\n+\t\t\t\t      background-color: #f7d5d7;\n+\t\t\t\t      border-color: #eab6bb;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    .alert.alert-success {\n+\t\t\t\t      color: #145222;\n+\t\t\t\t      background-color: #d1f0d9;\n+\t\t\t\t      border-color: #c2ebcb;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    .screenreader {\n+\t\t\t\t      position: absolute;\n+\t\t\t\t      clip: rect(0 0 0 0);\n+\t\t\t\t      height: 1px;\n+\t\t\t\t      width: 1px;\n+\t\t\t\t      padding: 0;\n+\t\t\t\t      border: 0;\n+\t\t\t\t      overflow: hidden;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    table {\n+\t\t\t\t      width: 100%;\n+\t\t\t\t      max-width: 100%;\n+\t\t\t\t      margin-bottom: 2rem;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    .table-striped tr:nth-of-type(2n + 1) {\n+\t\t\t\t      background-color: #e1e1e1;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    td {\n+\t\t\t\t      padding: 0.75rem;\n+\t\t\t\t      vertical-align: top;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    /* Login / logout layouts */\n+\t\t\t\t    .login-form,\n+\t\t\t\t    .logout-form {\n+\t\t\t\t      max-width: 340px;\n+\t\t\t\t      padding: 0 15px 15px 15px;\n+\t\t\t\t      margin: 0 auto 2rem auto;\n+\t\t\t\t      box-sizing: border-box;\n+\t\t\t\t    }\n+\t\t\t\t    </style>\n+\t\t\t\t  </head>\n+\t\t\t\t  <body>\n+\t\t\t\t    <div class=\"content\">\n+\t\t\t\t      <form class=\"login-form\" method=\"post\" action=\"null\">\n+\t\t\t\t        <h2>Please sign in</h2>\n+\t\t\t\t        <div class=\"alert alert-danger\" role=\"alert\">Bad credentials</div>\n+\t\t\t\t        <p>\n+\t\t\t\t          <label for=\"username\" class=\"screenreader\">Username</label>\n+\t\t\t\t          <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"Username\" required autofocus>\n+\t\t\t\t        </p>\n+\t\t\t\t        <p>\n+\t\t\t\t          <label for=\"password\" class=\"screenreader\">Password</label>\n+\t\t\t\t          <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Password\" required>\n+\t\t\t\t        </p>\n+\n+\n+\t\t\t\t        <button type=\"submit\" class=\"primary\">Sign in</button>\n+\t\t\t\t      </form>\n+\n+\t\t\t\t<h2>Login with OAuth 2.0</h2>\n+\t\t\t\t<div class=\"alert alert-danger\" role=\"alert\">Bad credentials</div>\n+\t\t\t\t<table class=\"table table-striped\">\n+\t\t\t\t  <tr><td><a href=\"/oauth2/authorization/google\">Google &lt; &gt; &quot; &#39; &amp;</a></td></tr>\n+\t\t\t\t</table>\n+\t\t\t\t<h2>Login with SAML 2.0</h2>\n+\t\t\t\t<div class=\"alert alert-danger\" role=\"alert\">Bad credentials</div>\n+\t\t\t\t<table class=\"table table-striped\">\n+\t\t\t\t  <tr><td><a href=\"/saml/sso/google\">Google &lt; &gt; &quot; &#39; &amp;</a></td></tr>\n+\t\t\t\t</table>\n+\t\t\t\t    </div>\n+\t\t\t\t  </body>\n+\t\t\t\t</html>\"\"\");\n+\t}\n+\n }\n\ndiff --git a/web/src/test/java/org/springframework/security/web/authentication/ui/DefaultLogoutPageGeneratingFilterTests.java b/web/src/test/java/org/springframework/security/web/authentication/ui/DefaultLogoutPageGeneratingFilterTests.java\nindex 796ef2f0730..85f76e6314c 100644\n--- a/web/src/test/java/org/springframework/security/web/authentication/ui/DefaultLogoutPageGeneratingFilterTests.java\n+++ b/web/src/test/java/org/springframework/security/web/authentication/ui/DefaultLogoutPageGeneratingFilterTests.java\n@@ -59,4 +59,156 @@ public void doFilterWhenRequestContextThenActionContainsRequestContext() throws\n \t\t\t.andExpect(content().string(containsString(\"action=\\\"/context/logout\\\"\")));\n \t}\n \n+\t@Test\n+\tvoid doFilterWhenRequestContextAndHiddenInputsSetThenRendered() throws Exception {\n+\t\tthis.filter.setResolveHiddenInputs((r) -> Collections.singletonMap(\"_csrf\", \"csrf-token-1\"));\n+\t\tMockMvc mockMvc = MockMvcBuilders.standaloneSetup(new Object()).addFilters(this.filter).build();\n+\n+\t\tmockMvc.perform(get(\"/context/logout\").contextPath(\"/context\")).andExpect(content().string(\"\"\"\n+\t\t\t\t<!DOCTYPE html>\n+\t\t\t\t<html lang=\"en\">\n+\t\t\t\t  <head>\n+\t\t\t\t    <meta charset=\"utf-8\">\n+\t\t\t\t    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n+\t\t\t\t    <meta name=\"description\" content=\"\">\n+\t\t\t\t    <meta name=\"author\" content=\"\">\n+\t\t\t\t    <title>Confirm Log Out?</title>\n+\t\t\t\t    <style>\n+\t\t\t\t    /* General layout */\n+\t\t\t\t    body {\n+\t\t\t\t      font-family: system-ui, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n+\t\t\t\t      background-color: #eee;\n+\t\t\t\t      padding: 40px 0;\n+\t\t\t\t      margin: 0;\n+\t\t\t\t      line-height: 1.5;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    h2 {\n+\t\t\t\t      margin-top: 0;\n+\t\t\t\t      margin-bottom: 0.5rem;\n+\t\t\t\t      font-size: 2rem;\n+\t\t\t\t      font-weight: 500;\n+\t\t\t\t      line-height: 2rem;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    .content {\n+\t\t\t\t      margin-right: auto;\n+\t\t\t\t      margin-left: auto;\n+\t\t\t\t      padding-right: 15px;\n+\t\t\t\t      padding-left: 15px;\n+\t\t\t\t      width: 100%;\n+\t\t\t\t      box-sizing: border-box;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    @media (min-width: 800px) {\n+\t\t\t\t      .content {\n+\t\t\t\t        max-width: 760px;\n+\t\t\t\t      }\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    /* Components */\n+\t\t\t\t    a,\n+\t\t\t\t    a:visited {\n+\t\t\t\t      text-decoration: none;\n+\t\t\t\t      color: #06f;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    a:hover {\n+\t\t\t\t      text-decoration: underline;\n+\t\t\t\t      color: #003c97;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    input[type=\"text\"],\n+\t\t\t\t    input[type=\"password\"] {\n+\t\t\t\t      height: auto;\n+\t\t\t\t      width: 100%;\n+\t\t\t\t      font-size: 1rem;\n+\t\t\t\t      padding: 0.5rem;\n+\t\t\t\t      box-sizing: border-box;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    button {\n+\t\t\t\t      padding: 0.5rem 1rem;\n+\t\t\t\t      font-size: 1.25rem;\n+\t\t\t\t      line-height: 1.5;\n+\t\t\t\t      border: none;\n+\t\t\t\t      border-radius: 0.1rem;\n+\t\t\t\t      width: 100%;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    button.primary {\n+\t\t\t\t      color: #fff;\n+\t\t\t\t      background-color: #06f;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    .alert {\n+\t\t\t\t      padding: 0.75rem 1rem;\n+\t\t\t\t      margin-bottom: 1rem;\n+\t\t\t\t      line-height: 1.5;\n+\t\t\t\t      border-radius: 0.1rem;\n+\t\t\t\t      width: 100%;\n+\t\t\t\t      box-sizing: border-box;\n+\t\t\t\t      border-width: 1px;\n+\t\t\t\t      border-style: solid;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    .alert.alert-danger {\n+\t\t\t\t      color: #6b1922;\n+\t\t\t\t      background-color: #f7d5d7;\n+\t\t\t\t      border-color: #eab6bb;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    .alert.alert-success {\n+\t\t\t\t      color: #145222;\n+\t\t\t\t      background-color: #d1f0d9;\n+\t\t\t\t      border-color: #c2ebcb;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    .screenreader {\n+\t\t\t\t      position: absolute;\n+\t\t\t\t      clip: rect(0 0 0 0);\n+\t\t\t\t      height: 1px;\n+\t\t\t\t      width: 1px;\n+\t\t\t\t      padding: 0;\n+\t\t\t\t      border: 0;\n+\t\t\t\t      overflow: hidden;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    table {\n+\t\t\t\t      width: 100%;\n+\t\t\t\t      max-width: 100%;\n+\t\t\t\t      margin-bottom: 2rem;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    .table-striped tr:nth-of-type(2n + 1) {\n+\t\t\t\t      background-color: #e1e1e1;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    td {\n+\t\t\t\t      padding: 0.75rem;\n+\t\t\t\t      vertical-align: top;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    /* Login / logout layouts */\n+\t\t\t\t    .login-form,\n+\t\t\t\t    .logout-form {\n+\t\t\t\t      max-width: 340px;\n+\t\t\t\t      padding: 0 15px 15px 15px;\n+\t\t\t\t      margin: 0 auto 2rem auto;\n+\t\t\t\t      box-sizing: border-box;\n+\t\t\t\t    }\n+\t\t\t\t    </style>\n+\t\t\t\t  </head>\n+\t\t\t\t  <body>\n+\t\t\t\t    <div class=\"content\">\n+\t\t\t\t      <form class=\"logout-form\" method=\"post\" action=\"/context/logout\">\n+\t\t\t\t        <h2>Are you sure you want to log out?</h2>\n+\t\t\t\t        <input name=\"_csrf\" type=\"hidden\" value=\"csrf-token-1\" />\n+\t\t\t\t        <button class=\"primary\" type=\"submit\">Log Out</button>\n+\t\t\t\t      </form>\n+\t\t\t\t    </div>\n+\t\t\t\t  </body>\n+\t\t\t\t</html>\"\"\"));\n+\t}\n+\n }\n\ndiff --git a/web/src/test/java/org/springframework/security/web/authentication/ui/DefaultOneTimeTokenSubmitPageGeneratingFilterTests.java b/web/src/test/java/org/springframework/security/web/authentication/ui/DefaultOneTimeTokenSubmitPageGeneratingFilterTests.java\nindex df4eab303d9..f92bfbedb44 100644\n--- a/web/src/test/java/org/springframework/security/web/authentication/ui/DefaultOneTimeTokenSubmitPageGeneratingFilterTests.java\n+++ b/web/src/test/java/org/springframework/security/web/authentication/ui/DefaultOneTimeTokenSubmitPageGeneratingFilterTests.java\n@@ -16,6 +16,8 @@\n \n package org.springframework.security.web.authentication.ui;\n \n+import java.util.Map;\n+\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n@@ -72,8 +74,7 @@ void setLoginProcessingUrlThenUseItForFormAction() throws Exception {\n \t\tthis.filter.setLoginProcessingUrl(\"/login/another\");\n \t\tthis.filter.doFilterInternal(this.request, this.response, this.filterChain);\n \t\tString response = this.response.getContentAsString();\n-\t\tassertThat(response).contains(\n-\t\t\t\t\"<form class=\\\"login-form\\\" action=\\\"/login/another\\\" method=\\\"post\\\">\\t<h2>Please input the token</h2>\");\n+\t\tassertThat(response).contains(\"<form class=\\\"login-form\\\" action=\\\"/login/another\\\" method=\\\"post\\\">\");\n \t}\n \n \t@Test\n@@ -85,4 +86,168 @@ void filterWhenTokenQueryParamUsesSpecialCharactersThenValueIsEscaped() throws E\n \t\t\t\t\"<input type=\\\"text\\\" id=\\\"token\\\" name=\\\"token\\\" value=\\\"this&lt;&gt;!@#&quot;\\\" placeholder=\\\"Token\\\" required=\\\"true\\\" autofocus=\\\"autofocus\\\"/>\");\n \t}\n \n+\t@Test\n+\tvoid filterThenRenders() throws Exception {\n+\t\tthis.request.setParameter(\"token\", \"this<>!@#\\\"\");\n+\t\tthis.filter.setLoginProcessingUrl(\"/login/another\");\n+\t\tthis.filter.setResolveHiddenInputs((request) -> Map.of(\"_csrf\", \"csrf-token-value\"));\n+\t\tthis.filter.doFilterInternal(this.request, this.response, this.filterChain);\n+\t\tString response = this.response.getContentAsString();\n+\t\tassertThat(response).isEqualTo(\n+\t\t\t\t\"\"\"\n+\t\t\t\t\t\t<!DOCTYPE html>\n+\t\t\t\t\t\t<html lang=\"en\">\n+\t\t\t\t\t\t  <head>\n+\t\t\t\t\t\t    <title>One-Time Token Login</title>\n+\t\t\t\t\t\t    <meta charset=\"utf-8\"/>\n+\t\t\t\t\t\t    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"/>\n+\t\t\t\t\t\t    <meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'sha256-oZhLbc2kO8b8oaYLrUc7uye1MgVKMyLtPqWR4WtKF+c='\"/>\n+\t\t\t\t\t\t    <style>\n+\t\t\t\t\t\t    /* General layout */\n+\t\t\t\t\t\t    body {\n+\t\t\t\t\t\t      font-family: system-ui, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n+\t\t\t\t\t\t      background-color: #eee;\n+\t\t\t\t\t\t      padding: 40px 0;\n+\t\t\t\t\t\t      margin: 0;\n+\t\t\t\t\t\t      line-height: 1.5;\n+\t\t\t\t\t\t    }\n+\t\t\t\t\t\t   \\s\n+\t\t\t\t\t\t    h2 {\n+\t\t\t\t\t\t      margin-top: 0;\n+\t\t\t\t\t\t      margin-bottom: 0.5rem;\n+\t\t\t\t\t\t      font-size: 2rem;\n+\t\t\t\t\t\t      font-weight: 500;\n+\t\t\t\t\t\t      line-height: 2rem;\n+\t\t\t\t\t\t    }\n+\t\t\t\t\t\t   \\s\n+\t\t\t\t\t\t    .content {\n+\t\t\t\t\t\t      margin-right: auto;\n+\t\t\t\t\t\t      margin-left: auto;\n+\t\t\t\t\t\t      padding-right: 15px;\n+\t\t\t\t\t\t      padding-left: 15px;\n+\t\t\t\t\t\t      width: 100%;\n+\t\t\t\t\t\t      box-sizing: border-box;\n+\t\t\t\t\t\t    }\n+\t\t\t\t\t\t   \\s\n+\t\t\t\t\t\t    @media (min-width: 800px) {\n+\t\t\t\t\t\t      .content {\n+\t\t\t\t\t\t        max-width: 760px;\n+\t\t\t\t\t\t      }\n+\t\t\t\t\t\t    }\n+\t\t\t\t\t\t   \\s\n+\t\t\t\t\t\t    /* Components */\n+\t\t\t\t\t\t    a,\n+\t\t\t\t\t\t    a:visited {\n+\t\t\t\t\t\t      text-decoration: none;\n+\t\t\t\t\t\t      color: #06f;\n+\t\t\t\t\t\t    }\n+\t\t\t\t\t\t   \\s\n+\t\t\t\t\t\t    a:hover {\n+\t\t\t\t\t\t      text-decoration: underline;\n+\t\t\t\t\t\t      color: #003c97;\n+\t\t\t\t\t\t    }\n+\t\t\t\t\t\t   \\s\n+\t\t\t\t\t\t    input[type=\"text\"],\n+\t\t\t\t\t\t    input[type=\"password\"] {\n+\t\t\t\t\t\t      height: auto;\n+\t\t\t\t\t\t      width: 100%;\n+\t\t\t\t\t\t      font-size: 1rem;\n+\t\t\t\t\t\t      padding: 0.5rem;\n+\t\t\t\t\t\t      box-sizing: border-box;\n+\t\t\t\t\t\t    }\n+\t\t\t\t\t\t   \\s\n+\t\t\t\t\t\t    button {\n+\t\t\t\t\t\t      padding: 0.5rem 1rem;\n+\t\t\t\t\t\t      font-size: 1.25rem;\n+\t\t\t\t\t\t      line-height: 1.5;\n+\t\t\t\t\t\t      border: none;\n+\t\t\t\t\t\t      border-radius: 0.1rem;\n+\t\t\t\t\t\t      width: 100%;\n+\t\t\t\t\t\t    }\n+\t\t\t\t\t\t   \\s\n+\t\t\t\t\t\t    button.primary {\n+\t\t\t\t\t\t      color: #fff;\n+\t\t\t\t\t\t      background-color: #06f;\n+\t\t\t\t\t\t    }\n+\t\t\t\t\t\t   \\s\n+\t\t\t\t\t\t    .alert {\n+\t\t\t\t\t\t      padding: 0.75rem 1rem;\n+\t\t\t\t\t\t      margin-bottom: 1rem;\n+\t\t\t\t\t\t      line-height: 1.5;\n+\t\t\t\t\t\t      border-radius: 0.1rem;\n+\t\t\t\t\t\t      width: 100%;\n+\t\t\t\t\t\t      box-sizing: border-box;\n+\t\t\t\t\t\t      border-width: 1px;\n+\t\t\t\t\t\t      border-style: solid;\n+\t\t\t\t\t\t    }\n+\t\t\t\t\t\t   \\s\n+\t\t\t\t\t\t    .alert.alert-danger {\n+\t\t\t\t\t\t      color: #6b1922;\n+\t\t\t\t\t\t      background-color: #f7d5d7;\n+\t\t\t\t\t\t      border-color: #eab6bb;\n+\t\t\t\t\t\t    }\n+\t\t\t\t\t\t   \\s\n+\t\t\t\t\t\t    .alert.alert-success {\n+\t\t\t\t\t\t      color: #145222;\n+\t\t\t\t\t\t      background-color: #d1f0d9;\n+\t\t\t\t\t\t      border-color: #c2ebcb;\n+\t\t\t\t\t\t    }\n+\t\t\t\t\t\t   \\s\n+\t\t\t\t\t\t    .screenreader {\n+\t\t\t\t\t\t      position: absolute;\n+\t\t\t\t\t\t      clip: rect(0 0 0 0);\n+\t\t\t\t\t\t      height: 1px;\n+\t\t\t\t\t\t      width: 1px;\n+\t\t\t\t\t\t      padding: 0;\n+\t\t\t\t\t\t      border: 0;\n+\t\t\t\t\t\t      overflow: hidden;\n+\t\t\t\t\t\t    }\n+\t\t\t\t\t\t   \\s\n+\t\t\t\t\t\t    table {\n+\t\t\t\t\t\t      width: 100%;\n+\t\t\t\t\t\t      max-width: 100%;\n+\t\t\t\t\t\t      margin-bottom: 2rem;\n+\t\t\t\t\t\t    }\n+\t\t\t\t\t\t   \\s\n+\t\t\t\t\t\t    .table-striped tr:nth-of-type(2n + 1) {\n+\t\t\t\t\t\t      background-color: #e1e1e1;\n+\t\t\t\t\t\t    }\n+\t\t\t\t\t\t   \\s\n+\t\t\t\t\t\t    td {\n+\t\t\t\t\t\t      padding: 0.75rem;\n+\t\t\t\t\t\t      vertical-align: top;\n+\t\t\t\t\t\t    }\n+\t\t\t\t\t\t   \\s\n+\t\t\t\t\t\t    /* Login / logout layouts */\n+\t\t\t\t\t\t    .login-form,\n+\t\t\t\t\t\t    .logout-form {\n+\t\t\t\t\t\t      max-width: 340px;\n+\t\t\t\t\t\t      padding: 0 15px 15px 15px;\n+\t\t\t\t\t\t      margin: 0 auto 2rem auto;\n+\t\t\t\t\t\t      box-sizing: border-box;\n+\t\t\t\t\t\t    }\n+\t\t\t\t\t\t    </style>\n+\t\t\t\t\t\t  </head>\n+\t\t\t\t\t\t  <body>\n+\t\t\t\t\t\t    <noscript>\n+\t\t\t\t\t\t      <p>\n+\t\t\t\t\t\t        <strong>Note:</strong> Since your browser does not support JavaScript, you must press the Sign In button once to proceed.\n+\t\t\t\t\t\t      </p>\n+\t\t\t\t\t\t    </noscript>\n+\t\t\t\t\t\t    <div class=\"container\">\n+\t\t\t\t\t\t      <form class=\"login-form\" action=\"/login/another\" method=\"post\">\n+\t\t\t\t\t\t        <h2>Please input the token</h2>\n+\t\t\t\t\t\t        <p>\n+\t\t\t\t\t\t          <label for=\"token\" class=\"screenreader\">Token</label>\n+\t\t\t\t\t\t          <input type=\"text\" id=\"token\" name=\"token\" value=\"this&lt;&gt;!@#&quot;\" placeholder=\"Token\" required=\"true\" autofocus=\"autofocus\"/>\n+\t\t\t\t\t\t        </p>\n+\t\t\t\t\t\t        <button class=\"primary\" type=\"submit\">Sign in</button>\n+\t\t\t\t\t\t<input name=\"_csrf\" type=\"hidden\" value=\"csrf-token-value\" />\n+\t\t\t\t\t\t      </form>\n+\t\t\t\t\t\t    </div>\n+\t\t\t\t\t\t  </body>\n+\t\t\t\t\t\t</html>\n+\t\t\t\t\t\t\"\"\");\n+\t}\n+\n }\n\ndiff --git a/web/src/test/java/org/springframework/security/web/authentication/ui/HtmlTemplatesTests.java b/web/src/test/java/org/springframework/security/web/authentication/ui/HtmlTemplatesTests.java\nnew file mode 100644\nindex 00000000000..22d472af09f\n--- /dev/null\n+++ b/web/src/test/java/org/springframework/security/web/authentication/ui/HtmlTemplatesTests.java\n@@ -0,0 +1,147 @@\n+/*\n+ * Copyright 2002-2024 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.security.web.authentication.ui;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+\n+/**\n+ * @author Daniel Garnier-Moiroux\n+ * @since 6.4\n+ */\n+class HtmlTemplatesTests {\n+\n+\t@Test\n+\tvoid processTemplateWhenNoVariablesThenRendersTemplate() {\n+\t\tString template = \"\"\"\n+\t\t\t\t<ul>\n+\t\t\t\t\t<li>Lorem ipsum dolor sit amet</li>\n+\t\t\t\t\t<li>consectetur adipiscing elit</li>\n+\t\t\t\t\t<li>sed do eiusmod tempor incididunt ut labore</li>\n+\t\t\t\t\t<li>et dolore magna aliqua</li>\n+\t\t\t\t</ul>\n+\t\t\t\t\"\"\";\n+\n+\t\tassertThat(HtmlTemplates.fromTemplate(template).render()).isEqualTo(template);\n+\t}\n+\n+\t@Test\n+\tvoid renderWhenVariablesThenRendersTemplate() {\n+\t\tString template = \"\"\"\n+\t\t\t\t<ul>\n+\t\t\t\t\t<li>{{one}}</li>\n+\t\t\t\t\t<li>{{two}}</li>\n+\t\t\t\t</ul>\n+\t\t\t\t\"\"\";\n+\n+\t\tString renderedTemplate = HtmlTemplates.fromTemplate(template)\n+\t\t\t.withValue(\"one\", \"Lorem ipsum dolor sit amet\")\n+\t\t\t.withValue(\"two\", \"consectetur adipiscing elit\")\n+\t\t\t.render();\n+\n+\t\tassertThat(renderedTemplate).isEqualTo(\"\"\"\n+\t\t\t\t<ul>\n+\t\t\t\t\t<li>Lorem ipsum dolor sit amet</li>\n+\t\t\t\t\t<li>consectetur adipiscing elit</li>\n+\t\t\t\t</ul>\n+\t\t\t\t\"\"\");\n+\t}\n+\n+\t@Test\n+\tvoid renderWhenVariablesThenEscapedAndRender() {\n+\t\tString template = \"<p>{{content}}</p>\";\n+\n+\t\tString renderedTemplate = HtmlTemplates.fromTemplate(template)\n+\t\t\t.withValue(\"content\", \"The <a> tag is very common in HTML.\")\n+\t\t\t.render();\n+\n+\t\tassertThat(renderedTemplate).isEqualTo(\"<p>The &lt;a&gt; tag is very common in HTML.</p>\");\n+\t}\n+\n+\t@Test\n+\tvoid renderWhenRawHtmlVariablesThenRendersTemplate() {\n+\t\tString template = \"\"\"\n+\t\t\t\t<p>\n+\t\t\t\t\tThe {{title}} is a placeholder text used in print.\n+\t\t\t\t</p>\n+\t\t\t\t\"\"\";\n+\n+\t\tString renderedTemplate = HtmlTemplates.fromTemplate(template)\n+\t\t\t.withRawHtml(\"title\", \"<strong>Lorem Ipsum</strong>\")\n+\t\t\t.render();\n+\n+\t\tassertThat(renderedTemplate).isEqualTo(\"\"\"\n+\t\t\t\t<p>\n+\t\t\t\t\tThe <strong>Lorem Ipsum</strong> is a placeholder text used in print.\n+\t\t\t\t</p>\n+\t\t\t\t\"\"\");\n+\t}\n+\n+\t@Test\n+\tvoid renderWhenRawHtmlVariablesThenTrimsTrailingNewline() {\n+\t\tString template = \"\"\"\n+\t\t\t\t<ul>\n+\t\t\t\t{{content}}\n+\t\t\t\t</ul>\n+\t\t\t\t\"\"\";\n+\n+\t\tString renderedTemplate = HtmlTemplates.fromTemplate(template)\n+\t\t\t.withRawHtml(\"content\", \"<li>Lorem ipsum dolor sit amet</li>\".indent(2))\n+\t\t\t.render();\n+\n+\t\tassertThat(renderedTemplate).isEqualTo(\"\"\"\n+\t\t\t\t<ul>\n+\t\t\t\t  <li>Lorem ipsum dolor sit amet</li>\n+\t\t\t\t</ul>\n+\t\t\t\t\"\"\");\n+\t}\n+\n+\t@Test\n+\tvoid renderWhenEmptyVariablesThenRender() {\n+\t\tString template = \"\"\"\n+\t\t\t\t<li>One: {{one}}</li>\n+\t\t\t\t{{two}}\n+\t\t\t\t\"\"\";\n+\n+\t\tString renderedTemplate = HtmlTemplates.fromTemplate(template)\n+\t\t\t.withValue(\"one\", \"\")\n+\t\t\t.withRawHtml(\"two\", \"\")\n+\t\t\t.render();\n+\n+\t\tassertThat(renderedTemplate).isEqualTo(\"\"\"\n+\t\t\t\t<li>One: </li>\n+\n+\t\t\t\t\"\"\");\n+\t}\n+\n+\t@Test\n+\tvoid renderWhenMissingVariablesThenThrows() {\n+\t\tString template = \"\"\"\n+\t\t\t\t<li>One: {{one}}</li>\n+\t\t\t\t<li>Two: {{two}}</li>\n+\t\t\t\t{{three}}\n+\t\t\t\t\"\"\";\n+\n+\t\tHtmlTemplates.Builder templateBuilder = HtmlTemplates.fromTemplate(template)\n+\t\t\t.withValue(\"one\", \"Lorem ipsum dolor sit amet\");\n+\t\tassertThatExceptionOfType(IllegalStateException.class).isThrownBy(templateBuilder::render)\n+\t\t\t.withMessage(\"Unused placeholders in template: [two, three]\");\n+\t}\n+\n+}\n\ndiff --git a/web/src/test/java/org/springframework/security/web/server/ui/LoginPageGeneratingWebFilterTests.java b/web/src/test/java/org/springframework/security/web/server/ui/LoginPageGeneratingWebFilterTests.java\nindex 731097013b3..6bbbc307e09 100644\n--- a/web/src/test/java/org/springframework/security/web/server/ui/LoginPageGeneratingWebFilterTests.java\n+++ b/web/src/test/java/org/springframework/security/web/server/ui/LoginPageGeneratingWebFilterTests.java\n@@ -16,6 +16,8 @@\n \n package org.springframework.security.web.server.ui;\n \n+import java.util.Collections;\n+\n import org.junit.jupiter.api.Test;\n import reactor.core.publisher.Mono;\n \n@@ -45,4 +47,175 @@ public void filterWhenLoginWithNoContextPathThenActionDoesNotContainsContextPath\n \t\tassertThat(exchange.getResponse().getBodyAsString().block()).contains(\"action=\\\"/login\\\"\");\n \t}\n \n+\t@Test\n+\tvoid filtersThenRendersPage() {\n+\t\tString clientName = \"Google < > \\\" \\' &\";\n+\t\tLoginPageGeneratingWebFilter filter = new LoginPageGeneratingWebFilter();\n+\t\tfilter.setOauth2AuthenticationUrlToClientName(\n+\t\t\t\tCollections.singletonMap(\"/oauth2/authorization/google\", clientName));\n+\t\tfilter.setFormLoginEnabled(true);\n+\t\tMockServerWebExchange exchange = MockServerWebExchange\n+\t\t\t.from(MockServerHttpRequest.get(\"/test/login\").contextPath(\"/test\"));\n+\t\tfilter.filter(exchange, (e) -> Mono.empty()).block();\n+\t\tassertThat(exchange.getResponse().getBodyAsString().block()).isEqualTo(\"\"\"\n+\t\t\t\t<!DOCTYPE html>\n+\t\t\t\t<html lang=\"en\">\n+\t\t\t\t  <head>\n+\t\t\t\t    <meta charset=\"utf-8\">\n+\t\t\t\t    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n+\t\t\t\t    <meta name=\"description\" content=\"\">\n+\t\t\t\t    <meta name=\"author\" content=\"\">\n+\t\t\t\t    <title>Please sign in</title>\n+\t\t\t\t    <style>\n+\t\t\t\t    /* General layout */\n+\t\t\t\t    body {\n+\t\t\t\t      font-family: system-ui, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n+\t\t\t\t      background-color: #eee;\n+\t\t\t\t      padding: 40px 0;\n+\t\t\t\t      margin: 0;\n+\t\t\t\t      line-height: 1.5;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    h2 {\n+\t\t\t\t      margin-top: 0;\n+\t\t\t\t      margin-bottom: 0.5rem;\n+\t\t\t\t      font-size: 2rem;\n+\t\t\t\t      font-weight: 500;\n+\t\t\t\t      line-height: 2rem;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    .content {\n+\t\t\t\t      margin-right: auto;\n+\t\t\t\t      margin-left: auto;\n+\t\t\t\t      padding-right: 15px;\n+\t\t\t\t      padding-left: 15px;\n+\t\t\t\t      width: 100%;\n+\t\t\t\t      box-sizing: border-box;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    @media (min-width: 800px) {\n+\t\t\t\t      .content {\n+\t\t\t\t        max-width: 760px;\n+\t\t\t\t      }\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    /* Components */\n+\t\t\t\t    a,\n+\t\t\t\t    a:visited {\n+\t\t\t\t      text-decoration: none;\n+\t\t\t\t      color: #06f;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    a:hover {\n+\t\t\t\t      text-decoration: underline;\n+\t\t\t\t      color: #003c97;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    input[type=\"text\"],\n+\t\t\t\t    input[type=\"password\"] {\n+\t\t\t\t      height: auto;\n+\t\t\t\t      width: 100%;\n+\t\t\t\t      font-size: 1rem;\n+\t\t\t\t      padding: 0.5rem;\n+\t\t\t\t      box-sizing: border-box;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    button {\n+\t\t\t\t      padding: 0.5rem 1rem;\n+\t\t\t\t      font-size: 1.25rem;\n+\t\t\t\t      line-height: 1.5;\n+\t\t\t\t      border: none;\n+\t\t\t\t      border-radius: 0.1rem;\n+\t\t\t\t      width: 100%;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    button.primary {\n+\t\t\t\t      color: #fff;\n+\t\t\t\t      background-color: #06f;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    .alert {\n+\t\t\t\t      padding: 0.75rem 1rem;\n+\t\t\t\t      margin-bottom: 1rem;\n+\t\t\t\t      line-height: 1.5;\n+\t\t\t\t      border-radius: 0.1rem;\n+\t\t\t\t      width: 100%;\n+\t\t\t\t      box-sizing: border-box;\n+\t\t\t\t      border-width: 1px;\n+\t\t\t\t      border-style: solid;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    .alert.alert-danger {\n+\t\t\t\t      color: #6b1922;\n+\t\t\t\t      background-color: #f7d5d7;\n+\t\t\t\t      border-color: #eab6bb;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    .alert.alert-success {\n+\t\t\t\t      color: #145222;\n+\t\t\t\t      background-color: #d1f0d9;\n+\t\t\t\t      border-color: #c2ebcb;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    .screenreader {\n+\t\t\t\t      position: absolute;\n+\t\t\t\t      clip: rect(0 0 0 0);\n+\t\t\t\t      height: 1px;\n+\t\t\t\t      width: 1px;\n+\t\t\t\t      padding: 0;\n+\t\t\t\t      border: 0;\n+\t\t\t\t      overflow: hidden;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    table {\n+\t\t\t\t      width: 100%;\n+\t\t\t\t      max-width: 100%;\n+\t\t\t\t      margin-bottom: 2rem;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    .table-striped tr:nth-of-type(2n + 1) {\n+\t\t\t\t      background-color: #e1e1e1;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    td {\n+\t\t\t\t      padding: 0.75rem;\n+\t\t\t\t      vertical-align: top;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    /* Login / logout layouts */\n+\t\t\t\t    .login-form,\n+\t\t\t\t    .logout-form {\n+\t\t\t\t      max-width: 340px;\n+\t\t\t\t      padding: 0 15px 15px 15px;\n+\t\t\t\t      margin: 0 auto 2rem auto;\n+\t\t\t\t      box-sizing: border-box;\n+\t\t\t\t    }\n+\t\t\t\t    </style>\n+\t\t\t\t  </head>\n+\t\t\t\t  <body>\n+\t\t\t\t    <div class=\"content\">\n+\t\t\t\t      <form class=\"login-form\" method=\"post\" action=\"/test/login\">\n+\t\t\t\t        <h2>Please sign in</h2>\n+\n+\t\t\t\t        <p>\n+\t\t\t\t          <label for=\"username\" class=\"screenreader\">Username</label>\n+\t\t\t\t          <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"Username\" required autofocus>\n+\t\t\t\t        </p>\n+\t\t\t\t        <p>\n+\t\t\t\t          <label for=\"password\" class=\"screenreader\">Password</label>\n+\t\t\t\t          <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Password\" required>\n+\t\t\t\t        </p>\n+\n+\t\t\t\t        <button type=\"submit\" class=\"primary\">Sign in</button>\n+\t\t\t\t      </form>\n+\t\t\t\t<h2>Login with OAuth 2.0</h2>\n+\n+\t\t\t\t<table class=\"table table-striped\">\n+\t\t\t\t  <tr><td><a href=\"/test/oauth2/authorization/google\">Google &lt; &gt; &quot; &#39; &amp;</a></td></tr>\n+\t\t\t\t</table>\n+\t\t\t\t    </div>\n+\t\t\t\t  </body>\n+\t\t\t\t</html>\"\"\");\n+\t}\n+\n }\n\ndiff --git a/web/src/test/java/org/springframework/security/web/server/ui/LogoutPageGeneratingWebFilterTests.java b/web/src/test/java/org/springframework/security/web/server/ui/LogoutPageGeneratingWebFilterTests.java\nindex bb2feb3e98d..fc5547767e3 100644\n--- a/web/src/test/java/org/springframework/security/web/server/ui/LogoutPageGeneratingWebFilterTests.java\n+++ b/web/src/test/java/org/springframework/security/web/server/ui/LogoutPageGeneratingWebFilterTests.java\n@@ -43,4 +43,157 @@ public void filterWhenLogoutWithNoContextPathThenActionDoesNotContainsContextPat\n \t\tassertThat(exchange.getResponse().getBodyAsString().block()).contains(\"action=\\\"/logout\\\"\");\n \t}\n \n+\t@Test\n+\tvoid filterThenRendersPage() {\n+\t\tLogoutPageGeneratingWebFilter filter = new LogoutPageGeneratingWebFilter();\n+\t\tMockServerWebExchange exchange = MockServerWebExchange\n+\t\t\t.from(MockServerHttpRequest.get(\"/test/logout\").contextPath(\"/test\"));\n+\t\tfilter.filter(exchange, (e) -> Mono.empty()).block();\n+\t\tassertThat(exchange.getResponse().getBodyAsString().block()).isEqualTo(\"\"\"\n+\t\t\t\t<!DOCTYPE html>\n+\t\t\t\t<html lang=\"en\">\n+\t\t\t\t  <head>\n+\t\t\t\t    <meta charset=\"utf-8\">\n+\t\t\t\t    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n+\t\t\t\t    <meta name=\"description\" content=\"\">\n+\t\t\t\t    <meta name=\"author\" content=\"\">\n+\t\t\t\t    <title>Confirm Log Out?</title>\n+\t\t\t\t    <style>\n+\t\t\t\t    /* General layout */\n+\t\t\t\t    body {\n+\t\t\t\t      font-family: system-ui, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n+\t\t\t\t      background-color: #eee;\n+\t\t\t\t      padding: 40px 0;\n+\t\t\t\t      margin: 0;\n+\t\t\t\t      line-height: 1.5;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    h2 {\n+\t\t\t\t      margin-top: 0;\n+\t\t\t\t      margin-bottom: 0.5rem;\n+\t\t\t\t      font-size: 2rem;\n+\t\t\t\t      font-weight: 500;\n+\t\t\t\t      line-height: 2rem;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    .content {\n+\t\t\t\t      margin-right: auto;\n+\t\t\t\t      margin-left: auto;\n+\t\t\t\t      padding-right: 15px;\n+\t\t\t\t      padding-left: 15px;\n+\t\t\t\t      width: 100%;\n+\t\t\t\t      box-sizing: border-box;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    @media (min-width: 800px) {\n+\t\t\t\t      .content {\n+\t\t\t\t        max-width: 760px;\n+\t\t\t\t      }\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    /* Components */\n+\t\t\t\t    a,\n+\t\t\t\t    a:visited {\n+\t\t\t\t      text-decoration: none;\n+\t\t\t\t      color: #06f;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    a:hover {\n+\t\t\t\t      text-decoration: underline;\n+\t\t\t\t      color: #003c97;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    input[type=\"text\"],\n+\t\t\t\t    input[type=\"password\"] {\n+\t\t\t\t      height: auto;\n+\t\t\t\t      width: 100%;\n+\t\t\t\t      font-size: 1rem;\n+\t\t\t\t      padding: 0.5rem;\n+\t\t\t\t      box-sizing: border-box;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    button {\n+\t\t\t\t      padding: 0.5rem 1rem;\n+\t\t\t\t      font-size: 1.25rem;\n+\t\t\t\t      line-height: 1.5;\n+\t\t\t\t      border: none;\n+\t\t\t\t      border-radius: 0.1rem;\n+\t\t\t\t      width: 100%;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    button.primary {\n+\t\t\t\t      color: #fff;\n+\t\t\t\t      background-color: #06f;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    .alert {\n+\t\t\t\t      padding: 0.75rem 1rem;\n+\t\t\t\t      margin-bottom: 1rem;\n+\t\t\t\t      line-height: 1.5;\n+\t\t\t\t      border-radius: 0.1rem;\n+\t\t\t\t      width: 100%;\n+\t\t\t\t      box-sizing: border-box;\n+\t\t\t\t      border-width: 1px;\n+\t\t\t\t      border-style: solid;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    .alert.alert-danger {\n+\t\t\t\t      color: #6b1922;\n+\t\t\t\t      background-color: #f7d5d7;\n+\t\t\t\t      border-color: #eab6bb;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    .alert.alert-success {\n+\t\t\t\t      color: #145222;\n+\t\t\t\t      background-color: #d1f0d9;\n+\t\t\t\t      border-color: #c2ebcb;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    .screenreader {\n+\t\t\t\t      position: absolute;\n+\t\t\t\t      clip: rect(0 0 0 0);\n+\t\t\t\t      height: 1px;\n+\t\t\t\t      width: 1px;\n+\t\t\t\t      padding: 0;\n+\t\t\t\t      border: 0;\n+\t\t\t\t      overflow: hidden;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    table {\n+\t\t\t\t      width: 100%;\n+\t\t\t\t      max-width: 100%;\n+\t\t\t\t      margin-bottom: 2rem;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    .table-striped tr:nth-of-type(2n + 1) {\n+\t\t\t\t      background-color: #e1e1e1;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    td {\n+\t\t\t\t      padding: 0.75rem;\n+\t\t\t\t      vertical-align: top;\n+\t\t\t\t    }\n+\t\t\t\t\\s\\s\\s\\s\n+\t\t\t\t    /* Login / logout layouts */\n+\t\t\t\t    .login-form,\n+\t\t\t\t    .logout-form {\n+\t\t\t\t      max-width: 340px;\n+\t\t\t\t      padding: 0 15px 15px 15px;\n+\t\t\t\t      margin: 0 auto 2rem auto;\n+\t\t\t\t      box-sizing: border-box;\n+\t\t\t\t    }\n+\t\t\t\t    </style>\n+\t\t\t\t  </head>\n+\t\t\t\t  <body>\n+\t\t\t\t    <div class=\"content\">\n+\t\t\t\t      <form class=\"logout-form\" method=\"post\" action=\"/test/logout\">\n+\t\t\t\t        <h2>Are you sure you want to log out?</h2>\n+\n+\t\t\t\t        <button class=\"primary\" type=\"submit\">Log Out</button>\n+\t\t\t\t      </form>\n+\t\t\t\t    </div>\n+\t\t\t\t  </body>\n+\t\t\t\t</html>\"\"\");\n+\t}\n+\n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "spring-projects__spring-security-15533",
    "pr_id": 15533,
    "issue_id": 15468,
    "repo": "spring-projects/spring-security",
    "problem_statement": "The additionalParameters array parameter of OAuth2AuthorizationRequest causes the authorizationRequestUri to be incorrect\n<!--\r\nDo NOT report Security Vulnerabilities here. Please use https://github.com/spring-projects/spring-security/security/policy\r\n-->\r\n\r\n**Describe the bug**\r\nThe additionalParameters array parameter of OAuth2AuthorizationRequest causes the authorizationRequestUri to be incorrect\r\n\r\n**To Reproduce**\r\nAccess the spring authorization server `http://127.0.0.1:3000/oauth2/authorize?scope=openid%20profile&client_id=xx&response_type=code&state=12345&test=1&test=2\r\n`\r\njava code:\r\n```java\r\n    OAuth2AuthorizationRequest authorizationRequest = OAuth2AuthorizationRequest.authorizationCode()\r\n        .authorizationUri(authorizationCodeRequestAuthentication.getAuthorizationUri()) // http://127.0.0.1:3000/oauth2/authorize\r\n        .clientId(registeredClient.getClientId()) //xxx\r\n        .redirectUri(authorizationCodeRequestAuthentication.getRedirectUri())\r\n        .scopes(authorizationCodeRequestAuthentication.getScopes())\r\n        .state(state)\r\n        .additionalParameters(authorizationCodeRequestAuthentication.getAdditionalParameters()) // map: {\"test\":[\"1\",\"2\"]}\r\n        .build();\r\n  authorizationRequest.getAuthorizationRequestUri() // http://127.0.0.1:3000/oauth2/authorize?response_type=code&client_id=xx&scope=openid%20profile&state=12345&test=%5BLjava.lang.String;@14ec7490\r\n```\r\n`http://127.0.0.1:3000/oauth2/authorize?response_type=code&client_id=xx&scope=openid%20profile&state=12345&test=%5BLjava.lang.String;@14ec7490`\r\nThe parameter `test` is wrong\r\n\r\n**Expected behavior**\r\n`http://127.0.0.1:3000/oauth2/authorize?response_type=code&client_id=xx&scope=openid%20profile&state=12345&test=1&test=2`\r\n",
    "issue_word_count": 184,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "oauth2/oauth2-core/src/main/java/org/springframework/security/oauth2/core/endpoint/OAuth2AuthorizationRequest.java",
      "oauth2/oauth2-core/src/test/java/org/springframework/security/oauth2/core/endpoint/OAuth2AuthorizationRequestTests.java"
    ],
    "pr_changed_test_files": [
      "oauth2/oauth2-core/src/test/java/org/springframework/security/oauth2/core/endpoint/OAuth2AuthorizationRequestTests.java"
    ],
    "base_commit": "c1a303bc928991289863156fb02c763000b00c59",
    "head_commit": "99681f134af230f37ddf35d623d00cfded494c8b",
    "repo_url": "https://github.com/spring-projects/spring-security/pull/15533",
    "swe_url": "https://swe-bench-plus.turing.com/repos/spring-projects__spring-security/15533",
    "dockerfile": "",
    "pr_merged_at": "2024-09-19T21:05:40.000Z",
    "patch": "diff --git a/oauth2/oauth2-core/src/main/java/org/springframework/security/oauth2/core/endpoint/OAuth2AuthorizationRequest.java b/oauth2/oauth2-core/src/main/java/org/springframework/security/oauth2/core/endpoint/OAuth2AuthorizationRequest.java\nindex 8522af771c9..ff40a307858 100644\n--- a/oauth2/oauth2-core/src/main/java/org/springframework/security/oauth2/core/endpoint/OAuth2AuthorizationRequest.java\n+++ b/oauth2/oauth2-core/src/main/java/org/springframework/security/oauth2/core/endpoint/OAuth2AuthorizationRequest.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -440,7 +440,21 @@ private String buildAuthorizationRequestUri() {\n \t\t\tMap<String, Object> parameters = getParameters(); // Not encoded\n \t\t\tthis.parametersConsumer.accept(parameters);\n \t\t\tMultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();\n-\t\t\tparameters.forEach((k, v) -> queryParams.set(encodeQueryParam(k), encodeQueryParam(String.valueOf(v)))); // Encoded\n+\t\t\tparameters.forEach((k, v) -> {\n+\t\t\t\tString key = encodeQueryParam(k);\n+\t\t\t\tif (v instanceof Iterable) {\n+\t\t\t\t\t((Iterable<?>) v).forEach((value) -> queryParams.add(key, encodeQueryParam(String.valueOf(value))));\n+\t\t\t\t}\n+\t\t\t\telse if (v != null && v.getClass().isArray()) {\n+\t\t\t\t\tObject[] values = (Object[]) v;\n+\t\t\t\t\tfor (Object value : values) {\n+\t\t\t\t\t\tqueryParams.add(key, encodeQueryParam(String.valueOf(value)));\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tqueryParams.set(key, encodeQueryParam(String.valueOf(v)));\n+\t\t\t\t}\n+\t\t\t});\n \t\t\tUriBuilder uriBuilder = this.uriBuilderFactory.uriString(this.authorizationUri).queryParams(queryParams);\n \t\t\treturn this.authorizationRequestUriFunction.apply(uriBuilder).toString();\n \t\t}\n",
    "test_patch": "diff --git a/oauth2/oauth2-core/src/test/java/org/springframework/security/oauth2/core/endpoint/OAuth2AuthorizationRequestTests.java b/oauth2/oauth2-core/src/test/java/org/springframework/security/oauth2/core/endpoint/OAuth2AuthorizationRequestTests.java\nindex 1a912d58a8e..1c4365560d8 100644\n--- a/oauth2/oauth2-core/src/test/java/org/springframework/security/oauth2/core/endpoint/OAuth2AuthorizationRequestTests.java\n+++ b/oauth2/oauth2-core/src/test/java/org/springframework/security/oauth2/core/endpoint/OAuth2AuthorizationRequestTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -19,6 +19,7 @@\n import java.net.URI;\n import java.util.Arrays;\n import java.util.HashMap;\n+import java.util.LinkedHashMap;\n import java.util.LinkedHashSet;\n import java.util.Map;\n import java.util.Set;\n@@ -319,4 +320,49 @@ public void buildWhenNonAsciiAdditionalParametersThenProperlyEncoded() {\n \t\t\t\t\t\t+ \"item%20amount=19.95%E2%82%AC&%C3%A2ge=4%C2%BD&item%20name=H%C3%85M%C3%96\");\n \t}\n \n+\t@Test\n+\tpublic void buildWhenAdditionalParametersContainsArrayThenProperlyEncoded() {\n+\t\tMap<String, Object> additionalParameters = new LinkedHashMap<>();\n+\t\tadditionalParameters.put(\"item1\", new String[] { \"1\", \"2\" });\n+\t\tadditionalParameters.put(\"item2\", \"value2\");\n+\t\tOAuth2AuthorizationRequest authorizationRequest = TestOAuth2AuthorizationRequests.request()\n+\t\t\t.additionalParameters(additionalParameters)\n+\t\t\t.build();\n+\t\tassertThat(authorizationRequest.getAuthorizationRequestUri()).isNotNull();\n+\t\tassertThat(authorizationRequest.getAuthorizationRequestUri())\n+\t\t\t.isEqualTo(\"https://example.com/login/oauth/authorize?response_type=code&client_id=client-id&state=state&\"\n+\t\t\t\t\t+ \"redirect_uri=https://example.com/authorize/oauth2/code/registration-id&\"\n+\t\t\t\t\t+ \"item1=1&item1=2&item2=value2\");\n+\t}\n+\n+\t@Test\n+\tpublic void buildWhenAdditionalParametersContainsIterableThenProperlyEncoded() {\n+\t\tMap<String, Object> additionalParameters = new LinkedHashMap<>();\n+\t\tadditionalParameters.put(\"item1\", Arrays.asList(\"1\", \"2\"));\n+\t\tadditionalParameters.put(\"item2\", \"value2\");\n+\t\tOAuth2AuthorizationRequest authorizationRequest = TestOAuth2AuthorizationRequests.request()\n+\t\t\t.additionalParameters(additionalParameters)\n+\t\t\t.build();\n+\t\tassertThat(authorizationRequest.getAuthorizationRequestUri()).isNotNull();\n+\t\tassertThat(authorizationRequest.getAuthorizationRequestUri())\n+\t\t\t.isEqualTo(\"https://example.com/login/oauth/authorize?response_type=code&client_id=client-id&state=state&\"\n+\t\t\t\t\t+ \"redirect_uri=https://example.com/authorize/oauth2/code/registration-id&\"\n+\t\t\t\t\t+ \"item1=1&item1=2&item2=value2\");\n+\t}\n+\n+\t@Test\n+\tpublic void buildWhenAdditionalParametersContainsNullThenAuthorizationRequestUriContainsNull() {\n+\t\tMap<String, Object> additionalParameters = new LinkedHashMap<>();\n+\t\tadditionalParameters.put(\"item1\", null);\n+\t\tadditionalParameters.put(\"item2\", \"value2\");\n+\t\tOAuth2AuthorizationRequest authorizationRequest = TestOAuth2AuthorizationRequests.request()\n+\t\t\t.additionalParameters(additionalParameters)\n+\t\t\t.build();\n+\t\tassertThat(authorizationRequest.getAuthorizationRequestUri()).isNotNull();\n+\t\tassertThat(authorizationRequest.getAuthorizationRequestUri())\n+\t\t\t.isEqualTo(\"https://example.com/login/oauth/authorize?response_type=code&client_id=client-id&state=state&\"\n+\t\t\t\t\t+ \"redirect_uri=https://example.com/authorize/oauth2/code/registration-id&\"\n+\t\t\t\t\t+ \"item1=null&item2=value2\");\n+\t}\n+\n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "spring-projects__spring-security-15444",
    "pr_id": 15444,
    "issue_id": 15378,
    "repo": "spring-projects/spring-security",
    "problem_statement": "Response header ``Vary`` since Spring Security 6.2.0\nAfter upgrading from Spring Boot 3.1.* to Spring Boot 3.2.0 which includes Spring Security 6.2.0, responses of REST services provided by ``@Controller`` classes have ``Vary`` headers if ``org.springframework.boot:spring-boot-starter-security`` is in classpath.\r\n\r\nIs this intended? We immediately noticed this change since our CDN Akamai does not cache responses with this header.",
    "issue_word_count": 70,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "config/src/main/java/org/springframework/security/config/annotation/web/configuration/HttpSecurityConfiguration.java",
      "config/src/test/java/org/springframework/security/config/annotation/web/configuration/HttpSecurityConfigurationTests.java",
      "docs/modules/ROOT/pages/servlet/integrations/cors.adoc"
    ],
    "pr_changed_test_files": [
      "config/src/test/java/org/springframework/security/config/annotation/web/configuration/HttpSecurityConfigurationTests.java"
    ],
    "base_commit": "0190763a02361b3caa4179523bc6bd1414d4f4c0",
    "head_commit": "62935fb829f6424b438a3205ed71a6a27d3c34a7",
    "repo_url": "https://github.com/spring-projects/spring-security/pull/15444",
    "swe_url": "https://swe-bench-plus.turing.com/repos/spring-projects__spring-security/15444",
    "dockerfile": "",
    "pr_merged_at": "2024-07-29T17:55:55.000Z",
    "patch": "diff --git a/config/src/main/java/org/springframework/security/config/annotation/web/configuration/HttpSecurityConfiguration.java b/config/src/main/java/org/springframework/security/config/annotation/web/configuration/HttpSecurityConfiguration.java\nindex ba962a4fad8..39a3633db4c 100644\n--- a/config/src/main/java/org/springframework/security/config/annotation/web/configuration/HttpSecurityConfiguration.java\n+++ b/config/src/main/java/org/springframework/security/config/annotation/web/configuration/HttpSecurityConfiguration.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -47,7 +47,7 @@\n import org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter;\n import org.springframework.web.accept.ContentNegotiationStrategy;\n import org.springframework.web.accept.HeaderContentNegotiationStrategy;\n-import org.springframework.web.cors.CorsConfigurationSource;\n+import org.springframework.web.cors.UrlBasedCorsConfigurationSource;\n \n import static org.springframework.security.config.Customizer.withDefaults;\n \n@@ -55,6 +55,7 @@\n  * {@link Configuration} that exposes the {@link HttpSecurity} bean.\n  *\n  * @author Eleftheria Stein\n+ * @author Jinwoo Bae\n  * @since 5.4\n  */\n @Configuration(proxyBeanMethods = false)\n@@ -131,8 +132,7 @@ HttpSecurity httpSecurity() throws Exception {\n \t}\n \n \tprivate void applyCorsIfAvailable(HttpSecurity http) throws Exception {\n-\t\tString[] beanNames = this.context.getBeanNamesForType(CorsConfigurationSource.class);\n-\t\tif (beanNames.length == 1) {\n+\t\tif (this.context.getBeanNamesForType(UrlBasedCorsConfigurationSource.class).length > 0) {\n \t\t\thttp.cors(withDefaults());\n \t\t}\n \t}\n\ndiff --git a/docs/modules/ROOT/pages/servlet/integrations/cors.adoc b/docs/modules/ROOT/pages/servlet/integrations/cors.adoc\nindex 115e9b8f9e1..a2262215ac3 100644\n--- a/docs/modules/ROOT/pages/servlet/integrations/cors.adoc\n+++ b/docs/modules/ROOT/pages/servlet/integrations/cors.adoc\n@@ -6,7 +6,7 @@ CORS must be processed before Spring Security, because the pre-flight request do\n If the request does not contain any cookies and Spring Security is first, the request determines that the user is not authenticated (since there are no cookies in the request) and rejects it.\n \n The easiest way to ensure that CORS is handled first is to use the `CorsFilter`.\n-Users can integrate the `CorsFilter` with Spring Security by providing a `CorsConfigurationSource`.\n+Users can integrate the `CorsFilter` with Spring Security by providing a `CorsConfigurationSource`. Note that Spring Security will automatically configure CORS only if a `UrlBasedCorsConfigurationSource` instance is present.\n For example, the following will integrate CORS support within Spring Security:\n \n [tabs]\n",
    "test_patch": "diff --git a/config/src/test/java/org/springframework/security/config/annotation/web/configuration/HttpSecurityConfigurationTests.java b/config/src/test/java/org/springframework/security/config/annotation/web/configuration/HttpSecurityConfigurationTests.java\nindex 2d95161fc6d..f8c075f72f6 100644\n--- a/config/src/test/java/org/springframework/security/config/annotation/web/configuration/HttpSecurityConfigurationTests.java\n+++ b/config/src/test/java/org/springframework/security/config/annotation/web/configuration/HttpSecurityConfigurationTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -362,7 +362,7 @@ public void disableConfigurerWhenAppliedByAnotherConfigurerThenNotApplied() {\n \t}\n \n \t@Test\n-\tpublic void configureWhenCorsConfigurationSourceThenApplyCors() {\n+\tpublic void configureWhenCorsConfigurationSourceThenApplyCors() throws Exception {\n \t\tthis.spring.register(CorsConfigurationSourceConfig.class, DefaultWithFilterChainConfig.class).autowire();\n \t\tSecurityFilterChain filterChain = this.spring.getContext().getBean(SecurityFilterChain.class);\n \t\tCorsFilter corsFilter = (CorsFilter) filterChain.getFilters()\n@@ -374,6 +374,16 @@ public void configureWhenCorsConfigurationSourceThenApplyCors() {\n \t\tassertThat(configSource).isInstanceOf(UrlBasedCorsConfigurationSource.class);\n \t}\n \n+\t// gh-15378\n+\t@Test\n+\tpublic void configureWhenNoUrlBasedCorsConfigThenNoCorsAppliedAndVaryHeaderNotPresent() throws Exception {\n+\t\tthis.spring.register(NonUrlBasedCorsConfig.class, DefaultWithFilterChainConfig.class).autowire();\n+\t\tSecurityFilterChain filterChain = this.spring.getContext().getBean(SecurityFilterChain.class);\n+\t\tassertThat(filterChain.getFilters()).noneMatch((filter) -> filter instanceof CorsFilter);\n+\n+\t\tthis.mockMvc.perform(get(\"/\")).andExpect(header().doesNotExist(\"Vary\"));\n+\t}\n+\n \t@Test\n \tpublic void configureWhenAddingCustomDslUsingWithThenApplied() throws Exception {\n \t\tthis.spring.register(WithCustomDslConfig.class, UserDetailsConfig.class).autowire();\n@@ -673,6 +683,33 @@ CorsConfigurationSource corsConfigurationSource() {\n \n \t}\n \n+\t@Configuration\n+\t@EnableWebSecurity\n+\tstatic class NonUrlBasedCorsConfig {\n+\n+\t\t@Bean\n+\t\tCorsConfigurationSource corsConfigurationSource() {\n+\t\t\treturn new CustomCorsConfigurationSource();\n+\t\t}\n+\n+\t\t@Bean\n+\t\tSecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n+\t\t\treturn http.build();\n+\t\t}\n+\n+\t}\n+\n+\tstatic class CustomCorsConfigurationSource implements CorsConfigurationSource {\n+\n+\t\t@Override\n+\t\tpublic CorsConfiguration getCorsConfiguration(HttpServletRequest request) {\n+\t\t\tCorsConfiguration configuration = new CorsConfiguration();\n+\t\t\tconfiguration.setAllowedOrigins(List.of(\"http://localhost:8080\"));\n+\t\t\treturn configuration;\n+\t\t}\n+\n+\t}\n+\n \tstatic class DefaultConfigurer extends AbstractHttpConfigurer<DefaultConfigurer, HttpSecurity> {\n \n \t\tboolean init;\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "spring-projects__spring-security-15407",
    "pr_id": 15407,
    "issue_id": 15338,
    "repo": "spring-projects/spring-security",
    "problem_statement": "NPE in DefaultOAuth2User.getName function\n**Describe the bug**\r\nProblem is a possible `NullPointerException` (NPE) in `DefaultOAuth2User.getName`.\r\n\r\n**To Reproduce**\r\nGet null value on the name attribute during after OAuth authentaction.\r\nOr simply create attributes for `DefaultOAuth2User` as show in the _Sample_.\r\n\r\n**Expected behavior**\r\nNPE shouldn't be going around Spring Security. It should maybe use `throw new UsernameNotFoundException(.)`, not sure.\r\n\r\n**Sample**\r\n\r\nThis is a minimal example to reproduce (without setting up an oauth2 server):\r\n```\r\n\t\tCollection<GrantedAuthority> authorities = Arrays.asList(\r\n\t\t\tnew SimpleGrantedAuthority(\"ROLE_USER\")\r\n\t\t);\r\n\t\tvar attributes = new HashMap<String, Object>();\r\n\t\tvar nameAttributeKey = \"Email\";\r\n\t\tattributes.put(\"UserName\", \"\");\r\n\t\t// notice this is in the attributes, but is null\r\n\t\tattributes.put(nameAttributeKey, null);\r\n\t\tvar test = new DefaultOAuth2User(authorities, attributes, nameAttributeKey);\r\n\t\ttest.getName();\r\n```\r\n\r\nThis code is a problem:\r\n```\r\n\t@Override\r\n\tpublic String getName() {\r\n\t\treturn this.getAttribute(this.nameAttributeKey).toString();\r\n\t}\r\n```\r\n\r\n**Real code**\r\nIn a real use case this was the attributes of the DefaultOAuth2User:\r\n> User Attributes: [{UserName=, Email=null, Authenticated=false, Claims=null}]\r\n\r\nThe name field was \"Email\", but I guess it could be anything that just so happens to be null. Note that attributes are from an external service. The service is defined by `userInfoUri` from `FactoryBean<T>`. So the attributes are essentially attributes of a user profile as returned by the identity provider (idP).\r\n\r\nThis is how getName was originally called:\r\n```\r\npublic class OAuth2UserServiceImpl extends DefaultOAuth2UserService {\r\n\tprivate static final Logger LOG = LoggerFactory.getLogger(OAuth2UserServiceImpl.class);\r\n\t// ...\r\n\t@Override\r\n\tpublic OAuth2User loadUser(OAuth2UserRequest userRequest) throws OAuth2AuthenticationException {\r\n\t\tOAuth2User oauth2user = super.loadUser(userRequest);\r\n\r\n\t\tfinal String providerId = userRequest.getClientRegistration().getRegistrationId();\r\n\t\t// this results in NPE\r\n\t\tfinal String username = oauth2user.getName();\r\n\t\t// ...\r\n}\r\n```\r\n",
    "issue_word_count": 256,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "oauth2/oauth2-core/src/main/java/org/springframework/security/oauth2/core/user/DefaultOAuth2User.java",
      "oauth2/oauth2-core/src/test/java/org/springframework/security/oauth2/core/user/DefaultOAuth2UserTests.java"
    ],
    "pr_changed_test_files": [
      "oauth2/oauth2-core/src/test/java/org/springframework/security/oauth2/core/user/DefaultOAuth2UserTests.java"
    ],
    "base_commit": "587aa495f7244d1dc33721e354b33b8f4df28342",
    "head_commit": "9d7dc4875d7a65aae1e330528d8ec7edad84e300",
    "repo_url": "https://github.com/spring-projects/spring-security/pull/15407",
    "swe_url": "https://swe-bench-plus.turing.com/repos/spring-projects__spring-security/15407",
    "dockerfile": "",
    "pr_merged_at": "2024-07-18T23:39:30.000Z",
    "patch": "diff --git a/oauth2/oauth2-core/src/main/java/org/springframework/security/oauth2/core/user/DefaultOAuth2User.java b/oauth2/oauth2-core/src/main/java/org/springframework/security/oauth2/core/user/DefaultOAuth2User.java\nindex a8ad76cd00f..6c80d7b64a2 100644\n--- a/oauth2/oauth2-core/src/main/java/org/springframework/security/oauth2/core/user/DefaultOAuth2User.java\n+++ b/oauth2/oauth2-core/src/main/java/org/springframework/security/oauth2/core/user/DefaultOAuth2User.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2021 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -44,6 +44,7 @@\n  *\n  * @author Joe Grandja\n  * @author Eddú Meléndez\n+ * @author Park Hyojong\n  * @since 5.0\n  * @see OAuth2User\n  */\n@@ -68,9 +69,9 @@ public DefaultOAuth2User(Collection<? extends GrantedAuthority> authorities, Map\n \t\t\tString nameAttributeKey) {\n \t\tAssert.notEmpty(attributes, \"attributes cannot be empty\");\n \t\tAssert.hasText(nameAttributeKey, \"nameAttributeKey cannot be empty\");\n-\t\tif (!attributes.containsKey(nameAttributeKey)) {\n-\t\t\tthrow new IllegalArgumentException(\"Missing attribute '\" + nameAttributeKey + \"' in attributes\");\n-\t\t}\n+\t\tAssert.notNull(attributes.get(nameAttributeKey),\n+\t\t\t\t\"Attribute value for '\" + nameAttributeKey + \"' cannot be null\");\n+\n \t\tthis.authorities = (authorities != null)\n \t\t\t\t? Collections.unmodifiableSet(new LinkedHashSet<>(this.sortAuthorities(authorities)))\n \t\t\t\t: Collections.unmodifiableSet(new LinkedHashSet<>(AuthorityUtils.NO_AUTHORITIES));\n",
    "test_patch": "diff --git a/oauth2/oauth2-core/src/test/java/org/springframework/security/oauth2/core/user/DefaultOAuth2UserTests.java b/oauth2/oauth2-core/src/test/java/org/springframework/security/oauth2/core/user/DefaultOAuth2UserTests.java\nindex 24f87eb5a15..a56c5bcf6a2 100644\n--- a/oauth2/oauth2-core/src/test/java/org/springframework/security/oauth2/core/user/DefaultOAuth2UserTests.java\n+++ b/oauth2/oauth2-core/src/test/java/org/springframework/security/oauth2/core/user/DefaultOAuth2UserTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2021 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -34,6 +34,7 @@\n  *\n  * @author Vedran Pavic\n  * @author Joe Grandja\n+ * @author Park Hyojong\n  */\n public class DefaultOAuth2UserTests {\n \n@@ -59,6 +60,12 @@ public void constructorWhenAttributesIsEmptyThenThrowIllegalArgumentException()\n \t\t\t.isThrownBy(() -> new DefaultOAuth2User(AUTHORITIES, Collections.emptyMap(), ATTRIBUTE_NAME_KEY));\n \t}\n \n+\t@Test\n+\tpublic void constructorWhenAttributeValueIsNullThenThrowIllegalArgumentException() {\n+\t\tassertThatIllegalArgumentException().isThrownBy(() -> new DefaultOAuth2User(AUTHORITIES,\n+\t\t\t\tCollections.singletonMap(ATTRIBUTE_NAME_KEY, null), ATTRIBUTE_NAME_KEY));\n+\t}\n+\n \t@Test\n \tpublic void constructorWhenNameAttributeKeyIsNullThenThrowIllegalArgumentException() {\n \t\tassertThatIllegalArgumentException().isThrownBy(() -> new DefaultOAuth2User(AUTHORITIES, ATTRIBUTES, null));\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "spring-projects__spring-security-15277",
    "pr_id": 15277,
    "issue_id": 15003,
    "repo": "spring-projects/spring-security",
    "problem_statement": "OIDC Backchannel Logout should allow logout tokens having `typ` header of `logout+jwt`\n**Describe the bug**\r\nOIDC Backchannel Logout does not allow logout tokens having `typ` header of `logout+jwt`. By default the logoutTokenDecoderFactory creates a decoder that only allows `null` or `JWT` and this logoutTokenDecoderFactory doesn't seem to be easily configurable using the DSL.\r\n\r\nIn the [OpenID Connect Back-Channel Logout specification](https://openid.net/specs/openid-connect-backchannel-1_0.html#LogoutToken) it is recommended that the `typ` Header Parameter is set with a value of `logout+jwt`.\r\n\r\n**To Reproduce**\r\nHave an identity provider send a back-channel logout request to the Spring backend with a logout token with `typ` header of `logout+jwt` instead of `JWT`.\r\n\r\nAn error `[invalid_request] An error occurred while attempting to decode the Jwt: JOSE header typ (type) logout+jwt not allowed` occurs.\r\n\r\n**Expected behavior**\r\nThe OIDC Backchannel Logout should by default accept and process tokens having `typ` header of `logout+jwt`.",
    "issue_word_count": 159,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "config/src/main/java/org/springframework/security/config/annotation/web/configurers/oauth2/client/OidcBackChannelLogoutAuthenticationProvider.java",
      "config/src/test/java/org/springframework/security/config/annotation/web/configurers/oauth2/client/OidcLogoutConfigurerTests.java"
    ],
    "pr_changed_test_files": [
      "config/src/test/java/org/springframework/security/config/annotation/web/configurers/oauth2/client/OidcLogoutConfigurerTests.java"
    ],
    "base_commit": "82b6d0806b3f3ba62d301ab8b12c4160892ddfd1",
    "head_commit": "71a9c8539d6752c56e6cb14d3bb535459fb16195",
    "repo_url": "https://github.com/spring-projects/spring-security/pull/15277",
    "swe_url": "https://swe-bench-plus.turing.com/repos/spring-projects__spring-security/15277",
    "dockerfile": "",
    "pr_merged_at": "2024-07-12T17:03:41.000Z",
    "patch": "diff --git a/config/src/main/java/org/springframework/security/config/annotation/web/configurers/oauth2/client/OidcBackChannelLogoutAuthenticationProvider.java b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/oauth2/client/OidcBackChannelLogoutAuthenticationProvider.java\nindex d8a217f2632..16731f19561 100644\n--- a/config/src/main/java/org/springframework/security/config/annotation/web/configurers/oauth2/client/OidcBackChannelLogoutAuthenticationProvider.java\n+++ b/config/src/main/java/org/springframework/security/config/annotation/web/configurers/oauth2/client/OidcBackChannelLogoutAuthenticationProvider.java\n@@ -16,6 +16,11 @@\n \n package org.springframework.security.config.annotation.web.configurers.oauth2.client;\n \n+import com.nimbusds.jose.JOSEObjectType;\n+import com.nimbusds.jose.proc.DefaultJOSEObjectTypeVerifier;\n+import com.nimbusds.jose.proc.JOSEObjectTypeVerifier;\n+import com.nimbusds.jose.proc.SecurityContext;\n+\n import org.springframework.security.authentication.AuthenticationProvider;\n import org.springframework.security.authentication.AuthenticationServiceException;\n import org.springframework.security.core.Authentication;\n@@ -26,11 +31,14 @@\n import org.springframework.security.oauth2.core.OAuth2AuthenticationException;\n import org.springframework.security.oauth2.core.OAuth2Error;\n import org.springframework.security.oauth2.core.OAuth2ErrorCodes;\n+import org.springframework.security.oauth2.core.converter.ClaimTypeConverter;\n import org.springframework.security.oauth2.jwt.BadJwtException;\n import org.springframework.security.oauth2.jwt.Jwt;\n import org.springframework.security.oauth2.jwt.JwtDecoder;\n import org.springframework.security.oauth2.jwt.JwtDecoderFactory;\n+import org.springframework.security.oauth2.jwt.NimbusJwtDecoder;\n import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n \n /**\n  * An {@link AuthenticationProvider} that authenticates an OIDC Logout Token; namely\n@@ -56,9 +64,27 @@ final class OidcBackChannelLogoutAuthenticationProvider implements Authenticatio\n \t * Construct an {@link OidcBackChannelLogoutAuthenticationProvider}\n \t */\n \tOidcBackChannelLogoutAuthenticationProvider() {\n-\t\tOidcIdTokenDecoderFactory logoutTokenDecoderFactory = new OidcIdTokenDecoderFactory();\n-\t\tlogoutTokenDecoderFactory.setJwtValidatorFactory(new DefaultOidcLogoutTokenValidatorFactory());\n-\t\tthis.logoutTokenDecoderFactory = logoutTokenDecoderFactory;\n+\t\tDefaultOidcLogoutTokenValidatorFactory jwtValidator = new DefaultOidcLogoutTokenValidatorFactory();\n+\t\tthis.logoutTokenDecoderFactory = (clientRegistration) -> {\n+\t\t\tString jwkSetUri = clientRegistration.getProviderDetails().getJwkSetUri();\n+\t\t\tif (!StringUtils.hasText(jwkSetUri)) {\n+\t\t\t\tOAuth2Error oauth2Error = new OAuth2Error(\"missing_signature_verifier\",\n+\t\t\t\t\t\t\"Failed to find a Signature Verifier for Client Registration: '\"\n+\t\t\t\t\t\t\t\t+ clientRegistration.getRegistrationId()\n+\t\t\t\t\t\t\t\t+ \"'. Check to ensure you have configured the JwkSet URI.\",\n+\t\t\t\t\t\tnull);\n+\t\t\t\tthrow new OAuth2AuthenticationException(oauth2Error, oauth2Error.toString());\n+\t\t\t}\n+\t\t\tJOSEObjectTypeVerifier<SecurityContext> typeVerifier = new DefaultJOSEObjectTypeVerifier<>(null,\n+\t\t\t\t\tJOSEObjectType.JWT, new JOSEObjectType(\"logout+jwt\"));\n+\t\t\tNimbusJwtDecoder decoder = NimbusJwtDecoder.withJwkSetUri(jwkSetUri)\n+\t\t\t\t.jwtProcessorCustomizer((processor) -> processor.setJWSTypeVerifier(typeVerifier))\n+\t\t\t\t.build();\n+\t\t\tdecoder.setJwtValidator(jwtValidator.apply(clientRegistration));\n+\t\t\tdecoder.setClaimSetConverter(\n+\t\t\t\t\tnew ClaimTypeConverter(OidcIdTokenDecoderFactory.createDefaultClaimTypeConverters()));\n+\t\t\treturn decoder;\n+\t\t};\n \t}\n \n \t/**\n",
    "test_patch": "diff --git a/config/src/test/java/org/springframework/security/config/annotation/web/configurers/oauth2/client/OidcLogoutConfigurerTests.java b/config/src/test/java/org/springframework/security/config/annotation/web/configurers/oauth2/client/OidcLogoutConfigurerTests.java\nindex 934c8bede91..eccf675f3df 100644\n--- a/config/src/test/java/org/springframework/security/config/annotation/web/configurers/oauth2/client/OidcLogoutConfigurerTests.java\n+++ b/config/src/test/java/org/springframework/security/config/annotation/web/configurers/oauth2/client/OidcLogoutConfigurerTests.java\n@@ -73,6 +73,8 @@\n import org.springframework.security.oauth2.core.oidc.OidcIdToken;\n import org.springframework.security.oauth2.core.oidc.TestOidcIdTokens;\n import org.springframework.security.oauth2.core.oidc.user.OidcUser;\n+import org.springframework.security.oauth2.jose.jws.SignatureAlgorithm;\n+import org.springframework.security.oauth2.jwt.JwsHeader;\n import org.springframework.security.oauth2.jwt.JwtClaimsSet;\n import org.springframework.security.oauth2.jwt.JwtEncoder;\n import org.springframework.security.oauth2.jwt.JwtEncoderParameters;\n@@ -513,8 +515,9 @@ String jwks() {\n \t\tString logoutToken(@AuthenticationPrincipal OidcUser user) {\n \t\t\tOidcLogoutToken token = TestOidcLogoutTokens.withUser(user)\n \t\t\t\t\t.audience(List.of(this.registration.getClientId())).build();\n-\t\t\tJwtEncoderParameters parameters = JwtEncoderParameters\n-\t\t\t\t\t.from(JwtClaimsSet.builder().claims((claims) -> claims.putAll(token.getClaims())).build());\n+\t\t\tJwsHeader header = JwsHeader.with(SignatureAlgorithm.RS256).type(\"logout+jwt\").build();\n+\t\t\tJwtClaimsSet claims = JwtClaimsSet.builder().claims((c) -> c.putAll(token.getClaims())).build();\n+\t\t\tJwtEncoderParameters parameters = JwtEncoderParameters.from(header, claims);\n \t\t\treturn this.encoder.encode(parameters).getTokenValue();\n \t\t}\n \n@@ -523,8 +526,9 @@ String logoutTokenAll(@AuthenticationPrincipal OidcUser user) {\n \t\t\tOidcLogoutToken token = TestOidcLogoutTokens.withUser(user)\n \t\t\t\t\t.audience(List.of(this.registration.getClientId()))\n \t\t\t\t\t.claims((claims) -> claims.remove(LogoutTokenClaimNames.SID)).build();\n-\t\t\tJwtEncoderParameters parameters = JwtEncoderParameters\n-\t\t\t\t\t.from(JwtClaimsSet.builder().claims((claims) -> claims.putAll(token.getClaims())).build());\n+\t\t\tJwsHeader header = JwsHeader.with(SignatureAlgorithm.RS256).type(\"JWT\").build();\n+\t\t\tJwtClaimsSet claims = JwtClaimsSet.builder().claims((c) -> c.putAll(token.getClaims())).build();\n+\t\t\tJwtEncoderParameters parameters = JwtEncoderParameters.from(header, claims);\n \t\t\treturn this.encoder.encode(parameters).getTokenValue();\n \t\t}\n \t}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  }
]