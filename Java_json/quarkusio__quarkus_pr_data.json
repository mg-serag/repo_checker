[
  {
    "instance_id": "quarkusio__quarkus-48639",
    "pr_id": 48639,
    "issue_id": 48631,
    "repo": "quarkusio/quarkus",
    "problem_statement": "ClassNotFoundException in native mode with custom IdentifierGenerator after upgrading to Hibernate 7\n### Describe the bug\n\nAfter upgrading to Hibernate ORM 7, our custom `IdentifierGenerator` no longer works in native mode unless we explicitly annotate it with `@RegisterForReflection`. This was not required in previous versions. \n`IdentifierGenerator` is deprecated since 7.0, but still can be used by many customers\n\n### Expected behavior\n\nCustom generators should either:\n\n- Be automatically registered for reflection (as in Hibernate 6)\n- Or the Migration guide should mention this requirement in context of update Hibernate to 7.0\n\n### Actual behavior\n\n``` posh\n2025-06-26 14:47:24,744 ERROR [io.qua.run.Application] (main) Failed to start application: java.lang.RuntimeException: Failed to start quarkus\n        at io.quarkus.runner.ApplicationImpl.doStart(Unknown Source)\n        at io.quarkus.runtime.Application.start(Application.java:101)\n        at io.quarkus.runtime.ApplicationLifecycleManager.run(ApplicationLifecycleManager.java:119)\n        at io.quarkus.runtime.Quarkus.run(Quarkus.java:80)\n        at io.quarkus.runtime.Quarkus.run(Quarkus.java:51)\n        at io.quarkus.runtime.Quarkus.run(Quarkus.java:144)\n        at io.quarkus.runner.GeneratedMain.main(Unknown Source)\nCaused by: jakarta.persistence.PersistenceException: [PersistenceUnit: <default>] Unable to build Hibernate SessionFactory\n        at io.quarkus.hibernate.orm.runtime.boot.FastBootEntityManagerFactoryBuilder.persistenceException(FastBootEntityManagerFactoryBuilder.java:127)\n        at io.quarkus.hibernate.orm.runtime.boot.FastBootEntityManagerFactoryBuilder.build(FastBootEntityManagerFactoryBuilder.java:94)\n        at io.quarkus.hibernate.orm.runtime.FastBootHibernatePersistenceProvider.createEntityManagerFactory(FastBootHibernatePersistenceProvider.java:73)\n        at jakarta.persistence.Persistence.createEntityManagerFactory(Persistence.java:90)\n        at jakarta.persistence.Persistence.createEntityManagerFactory(Persistence.java:66)\n        at io.quarkus.hibernate.orm.runtime.JPAConfig$LazyPersistenceUnit.get(JPAConfig.java:163)\n        at io.quarkus.hibernate.orm.runtime.JPAConfig$1.run(JPAConfig.java:63)\n        at java.base@21.0.7/java.lang.Thread.runWith(Thread.java:1596)\n        at java.base@21.0.7/java.lang.Thread.run(Thread.java:1583)\n        at org.graalvm.nativeimage.builder/com.oracle.svm.core.thread.PlatformThreads.threadStartRoutine(PlatformThreads.java:896)\n        at org.graalvm.nativeimage.builder/com.oracle.svm.core.thread.PlatformThreads.threadStartRoutine(PlatformThreads.java:872)\nCaused by: org.hibernate.boot.registry.classloading.spi.ClassLoadingException: Unable to load class [org.example.generator.MyCustomIdGenerator]\n        at io.quarkus.hibernate.orm.runtime.service.FlatClassLoaderService.classForName(FlatClassLoaderService.java:38)\n        at org.hibernate.boot.model.internal.GeneratorStrategies.generatorClass(GeneratorStrategies.java:107)\n        at org.hibernate.boot.model.internal.GeneratorBinder.lambda$instantiateNamedStrategyGenerator$8(GeneratorBinder.java:781)\n        at org.hibernate.mapping.SimpleValue.createGenerator(SimpleValue.java:421)\n        at org.hibernate.tuple.entity.EntityMetamodel.buildIdGenerator(EntityMetamodel.java:514)\n        at org.hibernate.tuple.entity.EntityMetamodel.lambda$new$0(EntityMetamodel.java:154)\n        at org.hibernate.tuple.entity.EntityMetamodel.<init>(EntityMetamodel.java:176)\n        at org.hibernate.tuple.entity.EntityMetamodel.<init>(EntityMetamodel.java:153)\n        at org.hibernate.metamodel.spi.RuntimeModelCreationContext.createEntityMetamodel(RuntimeModelCreationContext.java:75)\n        at org.hibernate.persister.entity.AbstractEntityPersister.<init>(AbstractEntityPersister.java:497)\n        at org.hibernate.persister.entity.SingleTableEntityPersister.<init>(SingleTableEntityPersister.java:116)\n        at java.base@21.0.7/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:502)\n        at java.base@21.0.7/java.lang.reflect.Constructor.newInstance(Constructor.java:486)\n        at org.hibernate.persister.internal.PersisterFactoryImpl.createEntityPersister(PersisterFactoryImpl.java:70)\n        at org.hibernate.metamodel.model.domain.internal.MappingMetamodelImpl.processBootEntities(MappingMetamodelImpl.java:217)\n        at org.hibernate.metamodel.model.domain.internal.MappingMetamodelImpl.finishInitialization(MappingMetamodelImpl.java:156)\n        at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:310)\n        at io.quarkus.hibernate.orm.runtime.boot.FastBootEntityManagerFactoryBuilder.build(FastBootEntityManagerFactoryBuilder.java:92)\n        ... 9 more\nCaused by: java.lang.ClassNotFoundException: org.example.generator.MyCustomIdGenerator\n        at org.graalvm.nativeimage.builder/com.oracle.svm.core.hub.ClassForNameSupport.forName(ClassForNameSupport.java:122)\n        at org.graalvm.nativeimage.builder/com.oracle.svm.core.hub.ClassForNameSupport.forName(ClassForNameSupport.java:86)\n        at java.base@21.0.7/java.lang.Class.forName(DynamicHub.java:1359)\n        at java.base@21.0.7/java.lang.Class.forName(DynamicHub.java:1348)\n        at io.quarkus.hibernate.orm.runtime.service.FlatClassLoaderService.classForName(FlatClassLoaderService.java:36)\n        ... 26 more\n```\n\n### How to Reproduce?\n\n1. `git clone https://github.com/gtroitsk/hibernate7-custom-genid-reproducer`\n2. `cd hibernate7-custom-genid-reproducer`\n3. `mvn clean verify  -Dnative`\n\n### Output of `uname -a` or `ver`\n\nLinux fedora 6.13.9-200.fc41.x86_64\n\n### Output of `java -version`\n\nOpenJDK 64-Bit Server VM Temurin-21.0.7+6 (build 21.0.7+6-LTS, mixed mode, sharing)\n\n### Mandrel or GraalVM version (if different from Java)\n\nMANDREL 23.1.7.0 JDK 21.0.7+6-LTS\n\n### Quarkus version or git rev\n\n999-SNAPSHOT; 3.24.1\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nApache Maven 3.9.6 (Red Hat 3.9.6-7)\n\n### Additional information\n\n_No response_",
    "issue_word_count": 734,
    "test_files_count": 11,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/ClassNames.java",
      "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/GraalVMFeatures.java",
      "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/JpaJandexScavenger.java",
      "integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/EntityWithCustomGenericGeneratorReferencedAsClass.java",
      "integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/EntityWithCustomGenericGeneratorReferencedAsClassName.java",
      "integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/EntityWithCustomIdGeneratorType.java",
      "integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/EntityWithCustomValueGeneratorType.java",
      "integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/GeneratedValueResource.java",
      "integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/MyCustomGenericGeneratorReferencedAsClass.java",
      "integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/MyCustomGenericGeneratorReferencedAsClassName.java",
      "integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/MyCustomIdGenerator.java",
      "integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/MyCustomIdGeneratorAnnotation.java",
      "integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/MyCustomValueGenerator.java",
      "integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/MyCustomValueGeneratorAnnotation.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/EntityWithCustomGenericGeneratorReferencedAsClass.java",
      "integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/EntityWithCustomGenericGeneratorReferencedAsClassName.java",
      "integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/EntityWithCustomIdGeneratorType.java",
      "integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/EntityWithCustomValueGeneratorType.java",
      "integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/GeneratedValueResource.java",
      "integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/MyCustomGenericGeneratorReferencedAsClass.java",
      "integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/MyCustomGenericGeneratorReferencedAsClassName.java",
      "integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/MyCustomIdGenerator.java",
      "integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/MyCustomIdGeneratorAnnotation.java",
      "integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/MyCustomValueGenerator.java",
      "integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/MyCustomValueGeneratorAnnotation.java"
    ],
    "base_commit": "cb6c87f059566ba99c99f6783ee0052108d88bda",
    "head_commit": "5bf4f4cabff6072713c31db4c82f7077249aaab2",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48639",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48639",
    "dockerfile": "",
    "pr_merged_at": "2025-06-26T17:47:51.000Z",
    "patch": "diff --git a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/ClassNames.java b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/ClassNames.java\nindex 110e37540eab2..0e2d095c1481a 100644\n--- a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/ClassNames.java\n+++ b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/ClassNames.java\n@@ -62,6 +62,10 @@ private static DotName createConstant(String fqcn) {\n     public static final DotName HIBERNATE_CACHE = createConstant(\"org.hibernate.Cache\");\n     public static final DotName PERSISTENCE_UNIT_UTIL = createConstant(\"jakarta.persistence.PersistenceUnitUtil\");\n \n+    public static final DotName GENERIC_GENERATOR = createConstant(\"org.hibernate.annotations.GenericGenerator\");\n+    public static final DotName ID_GENERATOR_TYPE = createConstant(\"org.hibernate.annotations.IdGeneratorType\");\n+    public static final DotName VALUE_GENERATION_TYPE = createConstant(\"org.hibernate.annotations.ValueGenerationType\");\n+\n     public static final DotName INTERCEPTOR = createConstant(\"org.hibernate.Interceptor\");\n     public static final DotName STATEMENT_INSPECTOR = createConstant(\"org.hibernate.resource.jdbc.spi.StatementInspector\");\n     public static final DotName FORMAT_MAPPER = createConstant(\"org.hibernate.type.format.FormatMapper\");\n\ndiff --git a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/GraalVMFeatures.java b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/GraalVMFeatures.java\nindex ffb3b15ad7452..239add6d9c9e7 100644\n--- a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/GraalVMFeatures.java\n+++ b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/GraalVMFeatures.java\n@@ -26,6 +26,8 @@ NativeImageFeatureBuildItem staticNativeImageFeature() {\n \n     // TODO try to limit registration to those that are actually needed, based on configuration + mapping.\n     //   https://github.com/quarkusio/quarkus/pull/32433#issuecomment-1497615958\n+    //   See also io.quarkus.hibernate.orm.deployment.JpaJandexScavenger.enlistClassReferences for\n+    //   the beginning of a solution (which only handles custom types, not references by name such as 'sequence').\n     @BuildStep\n     ReflectiveClassBuildItem registerGeneratorAndOptimizerClassesForReflections() {\n         return ReflectiveClassBuildItem\n\ndiff --git a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/JpaJandexScavenger.java b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/JpaJandexScavenger.java\nindex 482a087734030..7498239bdb455 100644\n--- a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/JpaJandexScavenger.java\n+++ b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/JpaJandexScavenger.java\n@@ -94,6 +94,10 @@ public JpaModelBuildItem discoverModelAndRegisterForReflection() throws BuildExc\n             enlistPotentialCdiBeanClasses(collector, annotation);\n         }\n \n+        enlistPotentialClassReferences(collector, ClassNames.GENERIC_GENERATOR, \"type\", \"strategy\");\n+        enlistPotentialClassReferences(collector, ClassNames.ID_GENERATOR_TYPE, \"value\");\n+        enlistPotentialClassReferences(collector, ClassNames.VALUE_GENERATION_TYPE, \"generatedBy\");\n+\n         for (JpaModelPersistenceUnitContributionBuildItem persistenceUnitContribution : persistenceUnitContributions) {\n             enlistExplicitMappings(collector, persistenceUnitContribution);\n         }\n@@ -214,10 +218,16 @@ private void enlistOrmXmlMappingManagedClass(Collector collector, String package\n             String nodeName) {\n         String name = safeGetClassName(packagePrefix, managed, nodeName);\n         enlistExplicitClass(collector, name);\n-        if (managed instanceof JaxbEntity) {\n+        if (managed instanceof JaxbEntity entity) {\n             // The call to 'enlistExplicitClass' above may not\n             // detect that this class is an entity if it is not annotated\n             collector.entityTypes.add(name);\n+\n+            // Generators may be instantiated reflectively\n+            if (entity.getGenericGenerator() != null) {\n+                var generator = entity.getGenericGenerator();\n+                enlistPotentialClassReference(collector, generator == null ? null : generator.getClazz());\n+            }\n         }\n \n         enlistOrmXmlMappingListeners(collector, packagePrefix, managed.getEntityListenerContainer());\n@@ -437,6 +447,47 @@ private void enlistPotentialCdiBeanClasses(Collector collector, DotName dotName)\n         }\n     }\n \n+    private void enlistPotentialClassReferences(Collector collector, DotName dotName, String... referenceAttributes) {\n+        Collection<AnnotationInstance> jpaAnnotations = index.getAnnotations(dotName);\n+\n+        if (jpaAnnotations == null) {\n+            return;\n+        }\n+\n+        for (AnnotationInstance annotation : jpaAnnotations) {\n+            for (String referenceAttribute : referenceAttributes) {\n+                var referenceValue = annotation.value(referenceAttribute);\n+                if (referenceValue == null) {\n+                    continue;\n+                }\n+                String reference = switch (referenceValue.kind()) {\n+                    case CLASS -> referenceValue.asClass().name().toString();\n+                    case STRING -> {\n+                        String stringRef = referenceValue.asString();\n+                        if (stringRef.isEmpty() || index.getClassByName(stringRef) == null) {\n+                            // No reference, or reference to a built-in strategy name like 'sequence'\n+                            // (which we can't resolve here and handle through GraalVMFeatures.registerGeneratorAndOptimizerClassesForReflections)\n+                            yield null;\n+                        }\n+                        yield stringRef;\n+                    }\n+                    default -> null;\n+                };\n+                enlistPotentialClassReference(collector, reference);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Add the class to the reflective list with only constructor and method access.\n+     */\n+    private void enlistPotentialClassReference(Collector collector, String reference) {\n+        if (reference == null) {\n+            return;\n+        }\n+        collector.javaTypes.add(reference);\n+    }\n+\n     /**\n      * Add the class to the reflective list with full method and field access.\n      * Add the superclasses recursively as well as the interfaces.\n",
    "test_patch": "diff --git a/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/EntityWithCustomGenericGeneratorReferencedAsClass.java b/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/EntityWithCustomGenericGeneratorReferencedAsClass.java\nnew file mode 100644\nindex 0000000000000..e2932d8f87d48\n--- /dev/null\n+++ b/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/EntityWithCustomGenericGeneratorReferencedAsClass.java\n@@ -0,0 +1,15 @@\n+package io.quarkus.it.jpa.generatedvalue;\n+\n+import jakarta.persistence.Entity;\n+import jakarta.persistence.GeneratedValue;\n+import jakarta.persistence.Id;\n+\n+import org.hibernate.annotations.GenericGenerator;\n+\n+@Entity\n+public class EntityWithCustomGenericGeneratorReferencedAsClass {\n+    @Id\n+    @GeneratedValue(generator = \"referenced-as-class\")\n+    @GenericGenerator(name = \"referenced-as-class\", type = MyCustomGenericGeneratorReferencedAsClass.class)\n+    public String id;\n+}\n\ndiff --git a/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/EntityWithCustomGenericGeneratorReferencedAsClassName.java b/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/EntityWithCustomGenericGeneratorReferencedAsClassName.java\nnew file mode 100644\nindex 0000000000000..26dcb013d67f2\n--- /dev/null\n+++ b/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/EntityWithCustomGenericGeneratorReferencedAsClassName.java\n@@ -0,0 +1,15 @@\n+package io.quarkus.it.jpa.generatedvalue;\n+\n+import jakarta.persistence.Entity;\n+import jakarta.persistence.GeneratedValue;\n+import jakarta.persistence.Id;\n+\n+import org.hibernate.annotations.GenericGenerator;\n+\n+@Entity\n+public class EntityWithCustomGenericGeneratorReferencedAsClassName {\n+    @Id\n+    @GeneratedValue(generator = \"referenced-as-class-name\")\n+    @GenericGenerator(name = \"referenced-as-class-name\", strategy = \"io.quarkus.it.jpa.generatedvalue.MyCustomGenericGeneratorReferencedAsClassName\")\n+    public String id;\n+}\n\ndiff --git a/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/EntityWithCustomIdGeneratorType.java b/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/EntityWithCustomIdGeneratorType.java\nnew file mode 100644\nindex 0000000000000..f00cff79251a1\n--- /dev/null\n+++ b/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/EntityWithCustomIdGeneratorType.java\n@@ -0,0 +1,13 @@\n+package io.quarkus.it.jpa.generatedvalue;\n+\n+import jakarta.persistence.Entity;\n+import jakarta.persistence.GeneratedValue;\n+import jakarta.persistence.Id;\n+\n+@Entity\n+public class EntityWithCustomIdGeneratorType {\n+    @Id\n+    @GeneratedValue\n+    @MyCustomIdGeneratorAnnotation\n+    public String id;\n+}\n\ndiff --git a/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/EntityWithCustomValueGeneratorType.java b/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/EntityWithCustomValueGeneratorType.java\nnew file mode 100644\nindex 0000000000000..d8ce8e0dacf28\n--- /dev/null\n+++ b/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/EntityWithCustomValueGeneratorType.java\n@@ -0,0 +1,15 @@\n+package io.quarkus.it.jpa.generatedvalue;\n+\n+import jakarta.persistence.Entity;\n+import jakarta.persistence.GeneratedValue;\n+import jakarta.persistence.Id;\n+\n+@Entity\n+public class EntityWithCustomValueGeneratorType {\n+    @Id\n+    @GeneratedValue\n+    public Integer id;\n+\n+    @MyCustomValueGeneratorAnnotation\n+    public String customGenerated;\n+}\n\ndiff --git a/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/GeneratedValueResource.java b/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/GeneratedValueResource.java\nindex 4c516a07fd4cd..94616c04d1be0 100644\n--- a/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/GeneratedValueResource.java\n+++ b/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/GeneratedValueResource.java\n@@ -43,6 +43,30 @@ public String test() throws Exception {\n                 e -> assertThat(e.generated).isNotNull(),\n                 e -> assertThat(e.generatedColumn).isNotNull());\n \n+        var entity2 = new EntityWithCustomIdGeneratorType();\n+        assertThat(entity2.id).isNull();\n+        em.persist(entity2);\n+        em.flush();\n+        assertThat(entity2.id).isEqualTo(MyCustomIdGenerator.STUB_VALUE);\n+\n+        var entity3 = new EntityWithCustomValueGeneratorType();\n+        assertThat(entity3.customGenerated).isNull();\n+        em.persist(entity3);\n+        em.flush();\n+        assertThat(entity3.customGenerated).isEqualTo(MyCustomValueGenerator.STUB_VALUE);\n+\n+        var entity4 = new EntityWithCustomGenericGeneratorReferencedAsClass();\n+        assertThat(entity4.id).isNull();\n+        em.persist(entity4);\n+        em.flush();\n+        assertThat(entity4.id).isEqualTo(MyCustomGenericGeneratorReferencedAsClass.STUB_VALUE);\n+\n+        var entity5 = new EntityWithCustomGenericGeneratorReferencedAsClassName();\n+        assertThat(entity5.id).isNull();\n+        em.persist(entity5);\n+        em.flush();\n+        assertThat(entity5.id).isEqualTo(MyCustomGenericGeneratorReferencedAsClassName.STUB_VALUE);\n+\n         return \"OK\";\n     }\n }\n\ndiff --git a/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/MyCustomGenericGeneratorReferencedAsClass.java b/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/MyCustomGenericGeneratorReferencedAsClass.java\nnew file mode 100644\nindex 0000000000000..99ffbe92fe69b\n--- /dev/null\n+++ b/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/MyCustomGenericGeneratorReferencedAsClass.java\n@@ -0,0 +1,13 @@\n+package io.quarkus.it.jpa.generatedvalue;\n+\n+import org.hibernate.engine.spi.SharedSessionContractImplementor;\n+import org.hibernate.id.IdentifierGenerator;\n+\n+public class MyCustomGenericGeneratorReferencedAsClass implements IdentifierGenerator {\n+    public static String STUB_VALUE = MyCustomGenericGeneratorReferencedAsClass.class.getName() + \"_STUB_VALUE\";\n+\n+    @Override\n+    public Object generate(SharedSessionContractImplementor session, Object object) {\n+        return STUB_VALUE;\n+    }\n+}\n\ndiff --git a/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/MyCustomGenericGeneratorReferencedAsClassName.java b/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/MyCustomGenericGeneratorReferencedAsClassName.java\nnew file mode 100644\nindex 0000000000000..d94baffa20bde\n--- /dev/null\n+++ b/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/MyCustomGenericGeneratorReferencedAsClassName.java\n@@ -0,0 +1,13 @@\n+package io.quarkus.it.jpa.generatedvalue;\n+\n+import org.hibernate.engine.spi.SharedSessionContractImplementor;\n+import org.hibernate.id.IdentifierGenerator;\n+\n+public class MyCustomGenericGeneratorReferencedAsClassName implements IdentifierGenerator {\n+    public static String STUB_VALUE = MyCustomGenericGeneratorReferencedAsClassName.class.getName() + \"_STUB_VALUE\";\n+\n+    @Override\n+    public Object generate(SharedSessionContractImplementor session, Object object) {\n+        return STUB_VALUE;\n+    }\n+}\n\ndiff --git a/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/MyCustomIdGenerator.java b/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/MyCustomIdGenerator.java\nnew file mode 100644\nindex 0000000000000..2928ac2d5d7e9\n--- /dev/null\n+++ b/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/MyCustomIdGenerator.java\n@@ -0,0 +1,13 @@\n+package io.quarkus.it.jpa.generatedvalue;\n+\n+import org.hibernate.engine.spi.SharedSessionContractImplementor;\n+import org.hibernate.id.IdentifierGenerator;\n+\n+public class MyCustomIdGenerator implements IdentifierGenerator {\n+    public static String STUB_VALUE = MyCustomIdGenerator.class.getName() + \"_STUB_VALUE\";\n+\n+    @Override\n+    public Object generate(SharedSessionContractImplementor session, Object object) {\n+        return STUB_VALUE;\n+    }\n+}\n\ndiff --git a/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/MyCustomIdGeneratorAnnotation.java b/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/MyCustomIdGeneratorAnnotation.java\nnew file mode 100644\nindex 0000000000000..daf855e925b09\n--- /dev/null\n+++ b/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/MyCustomIdGeneratorAnnotation.java\n@@ -0,0 +1,16 @@\n+package io.quarkus.it.jpa.generatedvalue;\n+\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import org.hibernate.annotations.IdGeneratorType;\n+\n+@IdGeneratorType(MyCustomIdGenerator.class)\n+@Retention(RUNTIME)\n+@Target({ FIELD, METHOD })\n+public @interface MyCustomIdGeneratorAnnotation {\n+}\n\ndiff --git a/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/MyCustomValueGenerator.java b/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/MyCustomValueGenerator.java\nnew file mode 100644\nindex 0000000000000..687df7b71ba41\n--- /dev/null\n+++ b/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/MyCustomValueGenerator.java\n@@ -0,0 +1,21 @@\n+package io.quarkus.it.jpa.generatedvalue;\n+\n+import java.util.EnumSet;\n+\n+import org.hibernate.engine.spi.SharedSessionContractImplementor;\n+import org.hibernate.generator.BeforeExecutionGenerator;\n+import org.hibernate.generator.EventType;\n+\n+public class MyCustomValueGenerator implements BeforeExecutionGenerator {\n+    public static String STUB_VALUE = MyCustomValueGenerator.class.getName() + \"_STUB_VALUE\";\n+\n+    @Override\n+    public Object generate(SharedSessionContractImplementor session, Object owner, Object currentValue, EventType eventType) {\n+        return STUB_VALUE;\n+    }\n+\n+    @Override\n+    public EnumSet<EventType> getEventTypes() {\n+        return EnumSet.of(EventType.INSERT, EventType.UPDATE);\n+    }\n+}\n\ndiff --git a/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/MyCustomValueGeneratorAnnotation.java b/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/MyCustomValueGeneratorAnnotation.java\nnew file mode 100644\nindex 0000000000000..6d2481a57e490\n--- /dev/null\n+++ b/integration-tests/jpa/src/main/java/io/quarkus/it/jpa/generatedvalue/MyCustomValueGeneratorAnnotation.java\n@@ -0,0 +1,16 @@\n+package io.quarkus.it.jpa.generatedvalue;\n+\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import org.hibernate.annotations.ValueGenerationType;\n+\n+@ValueGenerationType(generatedBy = MyCustomValueGenerator.class)\n+@Retention(RUNTIME)\n+@Target({ FIELD, METHOD })\n+public @interface MyCustomValueGeneratorAnnotation {\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48635",
    "pr_id": 48635,
    "issue_id": 47693,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Automatically ignore mapping roots shared by build time and runtime\n### Description\n\nIn extensions, when a mapping root shares the same prefix between build time and runtime, it can cause a `[property] does not map to any root` error. It happens when a configuration value meant to be built-time or runtime-only is available in a shared config source (like `application.properties`). \n\nFor the `quarkus` namespace we ignore the SmallRye Config behaviour with https://github.com/quarkusio/quarkus/blob/main/core/runtime/src/main/java/io/quarkus/runtime/configuration/QuarkusConfigBuilderCustomizer.java#L138\n\nExtensions that use different namespaces have to ignore this manually.\n\nSee https://github.com/quarkusio/quarkus/issues/47664\n\n\n### Implementation ideas\n\nWe should be able to detect such cases and automatically ignore them without requiring additional code from the extension side.",
    "issue_word_count": 132,
    "test_files_count": 4,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "core/deployment/src/main/java/io/quarkus/deployment/configuration/BuildTimeConfigurationReader.java",
      "core/deployment/src/main/java/io/quarkus/deployment/steps/ConfigGenerationBuildStep.java",
      "core/runtime/src/main/java/io/quarkus/runtime/configuration/AbstractConfigBuilder.java",
      "integration-tests/test-extension/extension/deployment/src/main/java/io/quarkus/extest/deployment/IgnoreSharedBuildTimeConfig.java",
      "integration-tests/test-extension/extension/deployment/src/main/java/io/quarkus/extest/deployment/TestProcessor.java",
      "integration-tests/test-extension/extension/runtime/src/main/java/io/quarkus/extest/runtime/config/IgnoreSharedRuntimeConfig.java",
      "integration-tests/test-extension/extension/runtime/src/main/resources/application.properties"
    ],
    "pr_changed_test_files": [
      "integration-tests/test-extension/extension/deployment/src/main/java/io/quarkus/extest/deployment/IgnoreSharedBuildTimeConfig.java",
      "integration-tests/test-extension/extension/deployment/src/main/java/io/quarkus/extest/deployment/TestProcessor.java",
      "integration-tests/test-extension/extension/runtime/src/main/java/io/quarkus/extest/runtime/config/IgnoreSharedRuntimeConfig.java",
      "integration-tests/test-extension/extension/runtime/src/main/resources/application.properties"
    ],
    "base_commit": "d9a7d73b7bad33bb47c5ad655ce8411835afbed3",
    "head_commit": "386d38a3381391ed1a3f658b1970e864742267c0",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48635",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48635",
    "dockerfile": "",
    "pr_merged_at": "2025-06-27T10:13:09.000Z",
    "patch": "diff --git a/core/deployment/src/main/java/io/quarkus/deployment/configuration/BuildTimeConfigurationReader.java b/core/deployment/src/main/java/io/quarkus/deployment/configuration/BuildTimeConfigurationReader.java\nindex fb1531899be62..7ca60eff7671e 100644\n--- a/core/deployment/src/main/java/io/quarkus/deployment/configuration/BuildTimeConfigurationReader.java\n+++ b/core/deployment/src/main/java/io/quarkus/deployment/configuration/BuildTimeConfigurationReader.java\n@@ -128,6 +128,7 @@ private static List<Class<?>> collectConfigRoots(ClassLoader classLoader) throws\n     final List<ConfigClass> buildTimeRunTimeMappings;\n     final List<ConfigClass> runTimeMappings;\n     final List<ConfigClass> buildTimeVisibleMappings;\n+    final Set<String> mappingsIgnorePaths;\n \n     final Set<String> deprecatedProperties;\n     final Set<String> deprecatedRuntimeProperties;\n@@ -256,6 +257,28 @@ private BuildTimeConfigurationReader(ClassLoader classLoader, final List<Class<?\n         buildTimeVisibleMappings.addAll(buildTimeMappings);\n         buildTimeVisibleMappings.addAll(buildTimeRunTimeMappings);\n \n+        mappingsIgnorePaths = new HashSet<>();\n+        for (ConfigClass buildTimeMapping : buildTimeMappings) {\n+            // Already ignored all the quarkus namespace in QuarkusConfigBuilderCustomizer\n+            if (buildTimeMapping.getPrefix().equals(\"quarkus\") || buildTimeMapping.getPrefix().startsWith(\"quarkus.\")) {\n+                continue;\n+            }\n+\n+            for (ConfigClass staticMapping : buildTimeRunTimeMappings) {\n+                if (buildTimeMapping.getPrefix().equals(staticMapping.getPrefix())) {\n+                    mappingsIgnorePaths.add(buildTimeMapping.getPrefix() + \".**\");\n+                    break;\n+                }\n+            }\n+\n+            for (ConfigClass runtimeMapping : runTimeMappings) {\n+                if (buildTimeMapping.getPrefix().equals(runtimeMapping.getPrefix())) {\n+                    mappingsIgnorePaths.add(buildTimeMapping.getPrefix() + \".**\");\n+                    break;\n+                }\n+            }\n+        }\n+\n         deprecatedProperties = getDeprecatedProperties(allRoots);\n         deprecatedRuntimeProperties = getDeprecatedProperties(runTimeRoots);\n \n@@ -422,6 +445,9 @@ public SmallRyeConfig initConfiguration(LaunchMode launchMode, Properties buildS\n         for (ConfigClass mapping : getBuildTimeVisibleMappings()) {\n             builder.withMapping(mapping);\n         }\n+        for (String mappingsIgnorePath : mappingsIgnorePaths) {\n+            builder.withMappingIgnore(mappingsIgnorePath);\n+        }\n \n         builder.withInterceptors(buildConfigTracker);\n         builder.withInterceptors(ConfigCompatibility.FrontEnd.instance(), ConfigCompatibility.BackEnd.instance());\n@@ -672,7 +698,7 @@ public void accept(final ConfigSource buildSystem) {\n \n             // ConfigMappings\n             for (ConfigClass mapping : buildTimeVisibleMappings) {\n-                objectsByClass.put(mapping.getKlass(), config.getConfigMapping(mapping.getKlass(), mapping.getPrefix()));\n+                objectsByClass.put(mapping.getType(), config.getConfigMapping(mapping.getType(), mapping.getPrefix()));\n             }\n \n             Set<PropertyName> buildTimeNames = mappingsToNames(buildTimeMappings).keySet();\n@@ -725,6 +751,7 @@ public void accept(final ConfigSource buildSystem) {\n                     .setBuildTimeMappings(buildTimeMappings)\n                     .setBuildTimeRunTimeMappings(buildTimeRunTimeMappings)\n                     .setRunTimeMappings(runTimeMappings)\n+                    .setMappingsIgnorePaths(mappingsIgnorePaths)\n                     .setUnknownBuildProperties(unknownBuildProperties)\n                     .setDeprecatedRuntimeProperties(deprecatedRuntimeProperties)\n                     .setBuildConfigTracker(buildConfigTracker)\n@@ -1319,6 +1346,7 @@ public static final class ReadResult {\n         final List<ConfigClass> buildTimeRunTimeMappings;\n         final List<ConfigClass> runTimeMappings;\n         final List<ConfigClass> allMappings;\n+        final Set<String> mappingsIgnorePaths;\n         final Map<Class<?>, ConfigClass> allMappingsByClass;\n \n         final Set<String> unknownBuildProperties;\n@@ -1343,6 +1371,7 @@ public ReadResult(final Builder builder) {\n             this.buildTimeMappings = builder.getBuildTimeMappings();\n             this.buildTimeRunTimeMappings = builder.getBuildTimeRunTimeMappings();\n             this.runTimeMappings = builder.getRunTimeMappings();\n+            this.mappingsIgnorePaths = builder.getMappingsIgnorePaths();\n             this.allMappings = new ArrayList<>(mappingsToMap(builder).values());\n             this.allMappingsByClass = mappingsToMap(builder);\n \n@@ -1363,13 +1392,13 @@ private static Map<Class<?>, RootDefinition> rootsToMap(Builder builder) {\n         private static Map<Class<?>, ConfigClass> mappingsToMap(Builder builder) {\n             Map<Class<?>, ConfigClass> map = new HashMap<>();\n             for (ConfigClass mapping : builder.getBuildTimeMappings()) {\n-                map.put(mapping.getKlass(), mapping);\n+                map.put(mapping.getType(), mapping);\n             }\n             for (ConfigClass mapping : builder.getBuildTimeRunTimeMappings()) {\n-                map.put(mapping.getKlass(), mapping);\n+                map.put(mapping.getType(), mapping);\n             }\n             for (ConfigClass mapping : builder.getRunTimeMappings()) {\n-                map.put(mapping.getKlass(), mapping);\n+                map.put(mapping.getType(), mapping);\n             }\n             return map;\n         }\n@@ -1426,6 +1455,10 @@ public List<ConfigClass> getRunTimeMappings() {\n             return runTimeMappings;\n         }\n \n+        public Set<String> getMappingsIgnorePaths() {\n+            return mappingsIgnorePaths;\n+        }\n+\n         public List<ConfigClass> getAllMappings() {\n             return allMappings;\n         }\n@@ -1467,6 +1500,7 @@ static class Builder {\n             private List<ConfigClass> buildTimeMappings;\n             private List<ConfigClass> buildTimeRunTimeMappings;\n             private List<ConfigClass> runTimeMappings;\n+            private Set<String> mappingsIgnorePaths;\n             private Set<String> unknownBuildProperties;\n             private Set<String> deprecatedRuntimeProperties;\n             private ConfigTrackingInterceptor buildConfigTracker;\n@@ -1579,6 +1613,15 @@ Builder setRunTimeMappings(final List<ConfigClass> runTimeMappings) {\n                 return this;\n             }\n \n+            Set<String> getMappingsIgnorePaths() {\n+                return mappingsIgnorePaths;\n+            }\n+\n+            Builder setMappingsIgnorePaths(final Set<String> mappingsIgnorePaths) {\n+                this.mappingsIgnorePaths = mappingsIgnorePaths;\n+                return this;\n+            }\n+\n             Set<String> getUnknownBuildProperties() {\n                 return unknownBuildProperties;\n             }\n\ndiff --git a/core/deployment/src/main/java/io/quarkus/deployment/steps/ConfigGenerationBuildStep.java b/core/deployment/src/main/java/io/quarkus/deployment/steps/ConfigGenerationBuildStep.java\nindex f6ae0262dbc40..286f54a34ab97 100644\n--- a/core/deployment/src/main/java/io/quarkus/deployment/steps/ConfigGenerationBuildStep.java\n+++ b/core/deployment/src/main/java/io/quarkus/deployment/steps/ConfigGenerationBuildStep.java\n@@ -301,6 +301,7 @@ void generateBuilders(\n                 staticSafeServices(secretKeyHandlerFactories),\n                 Set.of(),\n                 staticMappings,\n+                configItem.getReadResult().getMappingsIgnorePaths(),\n                 staticCustomizers,\n                 staticInitConfigBuilders.stream().map(StaticInitConfigBuilderBuildItem::getBuilderClassName).collect(toSet()));\n         reflectiveClass.produce(ReflectiveClassBuildItem.builder(CONFIG_STATIC_NAME).build());\n@@ -328,6 +329,7 @@ void generateBuilders(\n                 secretKeyHandlerFactories,\n                 staticMappings,\n                 runTimeMappings,\n+                configItem.getReadResult().getMappingsIgnorePaths(),\n                 runtimeCustomizers,\n                 runTimeConfigBuilders.stream().map(RunTimeConfigBuilderBuildItem::getBuilderClassName).collect(toSet()));\n         reflectiveClass.produce(ReflectiveClassBuildItem.builder(CONFIG_RUNTIME_NAME).build());\n@@ -593,6 +595,9 @@ private static String getPathWithoutExtension(Path path) {\n     private static final MethodDescriptor WITH_MAPPING_INSTANCE = MethodDescriptor.ofMethod(AbstractConfigBuilder.class,\n             \"withMappingInstance\",\n             void.class, SmallRyeConfigBuilder.class, ConfigClass.class);\n+    private static final MethodDescriptor WITH_MAPPING_IGNORE = MethodDescriptor.ofMethod(AbstractConfigBuilder.class,\n+            \"withMappingIgnore\",\n+            void.class, SmallRyeConfigBuilder.class, String.class);\n     private static final MethodDescriptor WITH_CUSTOMIZER = MethodDescriptor.ofMethod(AbstractConfigBuilder.class,\n             \"withCustomizer\",\n             void.class, SmallRyeConfigBuilder.class, SmallRyeConfigBuilderCustomizer.class);\n@@ -667,6 +672,7 @@ private static void generateConfigBuilder(\n             Set<String> secretKeyHandlerFactories,\n             Set<ConfigClass> mappingsInstances,\n             Set<ConfigClass> mappings,\n+            Set<String> mappingsIgnorePaths,\n             Set<String> configCustomizers,\n             Set<String> configBuilders) {\n \n@@ -753,6 +759,10 @@ private static void generateConfigBuilder(\n                 method.invokeStaticMethod(WITH_MAPPING, configBuilder, method.readStaticField(sharedFields.get(mapping)));\n             }\n \n+            for (String path : mappingsIgnorePaths) {\n+                method.invokeStaticMethod(WITH_MAPPING_IGNORE, configBuilder, method.load(path));\n+            }\n+\n             clinit.returnVoid();\n             method.returnVoid();\n         }\n\ndiff --git a/core/runtime/src/main/java/io/quarkus/runtime/configuration/AbstractConfigBuilder.java b/core/runtime/src/main/java/io/quarkus/runtime/configuration/AbstractConfigBuilder.java\nindex a228150274e26..4f1c9885c6d59 100644\n--- a/core/runtime/src/main/java/io/quarkus/runtime/configuration/AbstractConfigBuilder.java\n+++ b/core/runtime/src/main/java/io/quarkus/runtime/configuration/AbstractConfigBuilder.java\n@@ -87,6 +87,10 @@ protected static void withMappingInstance(SmallRyeConfigBuilder builder, ConfigC\n         builder.getMappingsBuilder().mappingInstance(mapping, config.getConfigMapping(mapping.getType(), mapping.getPrefix()));\n     }\n \n+    protected static void withMappingIgnore(SmallRyeConfigBuilder builder, String path) {\n+        builder.withMappingIgnore(path);\n+    }\n+\n     protected static void withBuilder(SmallRyeConfigBuilder builder, ConfigBuilder configBuilder) {\n         builder.withCustomizers(new SmallRyeConfigBuilderCustomizer() {\n             @Override\n",
    "test_patch": "diff --git a/integration-tests/test-extension/extension/deployment/src/main/java/io/quarkus/extest/deployment/IgnoreSharedBuildTimeConfig.java b/integration-tests/test-extension/extension/deployment/src/main/java/io/quarkus/extest/deployment/IgnoreSharedBuildTimeConfig.java\nnew file mode 100644\nindex 0000000000000..01f3ab93f974a\n--- /dev/null\n+++ b/integration-tests/test-extension/extension/deployment/src/main/java/io/quarkus/extest/deployment/IgnoreSharedBuildTimeConfig.java\n@@ -0,0 +1,12 @@\n+package io.quarkus.extest.deployment;\n+\n+import io.quarkus.runtime.annotations.ConfigPhase;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+import io.smallrye.config.ConfigMapping;\n+\n+@ConfigMapping(prefix = \"ignore.build-time.config\")\n+@ConfigRoot(phase = ConfigPhase.BUILD_TIME)\n+public interface IgnoreSharedBuildTimeConfig {\n+    /** Docs */\n+    String buildTime();\n+}\n\ndiff --git a/integration-tests/test-extension/extension/deployment/src/main/java/io/quarkus/extest/deployment/TestProcessor.java b/integration-tests/test-extension/extension/deployment/src/main/java/io/quarkus/extest/deployment/TestProcessor.java\nindex c2928977d26d2..052062fa91463 100644\n--- a/integration-tests/test-extension/extension/deployment/src/main/java/io/quarkus/extest/deployment/TestProcessor.java\n+++ b/integration-tests/test-extension/extension/deployment/src/main/java/io/quarkus/extest/deployment/TestProcessor.java\n@@ -84,6 +84,7 @@ public final class TestProcessor {\n     TestConfigRoot configRoot;\n     TestBuildTimeConfig buildTimeConfig;\n     TestBuildAndRunTimeConfig buildAndRunTimeConfig;\n+    IgnoreSharedBuildTimeConfig ignoreSharedBuildTimeConfig;\n \n     /**\n      * Register an extension capability and feature\n\ndiff --git a/integration-tests/test-extension/extension/runtime/src/main/java/io/quarkus/extest/runtime/config/IgnoreSharedRuntimeConfig.java b/integration-tests/test-extension/extension/runtime/src/main/java/io/quarkus/extest/runtime/config/IgnoreSharedRuntimeConfig.java\nnew file mode 100644\nindex 0000000000000..03de329bc179b\n--- /dev/null\n+++ b/integration-tests/test-extension/extension/runtime/src/main/java/io/quarkus/extest/runtime/config/IgnoreSharedRuntimeConfig.java\n@@ -0,0 +1,12 @@\n+package io.quarkus.extest.runtime.config;\n+\n+import io.quarkus.runtime.annotations.ConfigPhase;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+import io.smallrye.config.ConfigMapping;\n+\n+@ConfigMapping(prefix = \"ignore.build-time.config\")\n+@ConfigRoot(phase = ConfigPhase.RUN_TIME)\n+public interface IgnoreSharedRuntimeConfig {\n+    /** Docs */\n+    String runtime();\n+}\n\ndiff --git a/integration-tests/test-extension/extension/runtime/src/main/resources/application.properties b/integration-tests/test-extension/extension/runtime/src/main/resources/application.properties\nnew file mode 100644\nindex 0000000000000..92d62ef098fbe\n--- /dev/null\n+++ b/integration-tests/test-extension/extension/runtime/src/main/resources/application.properties\n@@ -0,0 +1,2 @@\n+ignore.build-time.config.build-time=value\n+ignore.build-time.config.runtime=value\n\\ No newline at end of file\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48607",
    "pr_id": 48607,
    "issue_id": 48600,
    "repo": "quarkusio/quarkus",
    "problem_statement": "QuarkusUnitTest#interceptBeforeEachMethod() throws NPE if a test expects an exception and declares BeforeEach\n### Describe the bug\n\nThe method body currently looks like:\n```java\n    @Override\n    public void interceptBeforeEachMethod(Invocation<Void> invocation, ReflectiveInvocationContext<Method> invocationContext,\n            ExtensionContext extensionContext) throws Throwable {\n        runExtensionMethod(invocationContext, extensionContext, true);\n        invocation.skip();\n    }\n```\n\nUnlike other interception methods that reflect the `assertException`, e.g.:\n\n```java\n@Override\n    public void interceptAfterEachMethod(Invocation<Void> invocation, ReflectiveInvocationContext<Method> invocationContext,\n            ExtensionContext extensionContext) throws Throwable {\n        if (assertException == null) {\n            runExtensionMethod(invocationContext, extensionContext, true);\n            invocation.skip();\n        } else {\n            invocation.proceed();\n        }\n    }\n```\n\nI have no idea if it's intentional or just an oversight.\n\n### Expected behavior\n\n_No response_\n\n### Actual behavior\n\n_No response_\n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### Quarkus version or git rev\n\n_No response_\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
    "issue_word_count": 142,
    "test_files_count": 1,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "test-framework/junit5-internal/src/main/java/io/quarkus/test/QuarkusUnitTest.java"
    ],
    "pr_changed_test_files": [
      "test-framework/junit5-internal/src/main/java/io/quarkus/test/QuarkusUnitTest.java"
    ],
    "base_commit": "3289f66d49c1d843517668c60abee6c9a42d7273",
    "head_commit": "203750a2ada9956d726bcbeebb6b35a53a2b1a03",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48607",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48607",
    "dockerfile": "",
    "pr_merged_at": "2025-06-26T07:29:33.000Z",
    "patch": "",
    "test_patch": "diff --git a/test-framework/junit5-internal/src/main/java/io/quarkus/test/QuarkusUnitTest.java b/test-framework/junit5-internal/src/main/java/io/quarkus/test/QuarkusUnitTest.java\nindex 7cd0d31c87747..d5bc90e3ff916 100644\n--- a/test-framework/junit5-internal/src/main/java/io/quarkus/test/QuarkusUnitTest.java\n+++ b/test-framework/junit5-internal/src/main/java/io/quarkus/test/QuarkusUnitTest.java\n@@ -389,23 +389,36 @@ private JavaArchive getArchiveProducerOrDefault() {\n     @Override\n     public void interceptBeforeAllMethod(Invocation<Void> invocation, ReflectiveInvocationContext<Method> invocationContext,\n             ExtensionContext extensionContext) throws Throwable {\n-        runExtensionMethod(invocationContext, extensionContext, false);\n-        invocation.skip();\n+        if (assertException == null) {\n+            runExtensionMethod(invocationContext, extensionContext, false);\n+            invocation.skip();\n+        } else {\n+            invocation.proceed();\n+        }\n     }\n \n     @Override\n     public void interceptBeforeEachMethod(Invocation<Void> invocation, ReflectiveInvocationContext<Method> invocationContext,\n             ExtensionContext extensionContext) throws Throwable {\n-        runExtensionMethod(invocationContext, extensionContext, true);\n-        invocation.skip();\n+        if (assertException == null) {\n+            runExtensionMethod(invocationContext, extensionContext, true);\n+            invocation.skip();\n+        } else {\n+            invocation.proceed();\n+        }\n     }\n \n     @Override\n     public <T> T interceptTestFactoryMethod(Invocation<T> invocation,\n             ReflectiveInvocationContext<Method> invocationContext, ExtensionContext extensionContext) throws Throwable {\n-        T result = (T) runExtensionMethod(invocationContext, extensionContext, false);\n-        invocation.skip();\n-        return result;\n+        if (assertException == null) {\n+            @SuppressWarnings(\"unchecked\")\n+            T result = (T) runExtensionMethod(invocationContext, extensionContext, false);\n+            invocation.skip();\n+            return result;\n+        } else {\n+            return invocation.proceed();\n+        }\n     }\n \n     @Override\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48597",
    "pr_id": 48597,
    "issue_id": 47471,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Quarkus REST calls protected constructor for QueryParam/PathParam and fails with 404\n### Describe the bug\n\nWe currently switch from Quarkus 3.8.6 to 3.20.0. We now have the problem that Quarkus REST tries to call the <b>protected</b> constructor of a type, which is used as path or query parameter. The REST call then fails with a HTTP 404.\n\nWith Quarkus 3.8.6 it works fine.\n\n### Example resource\n\n```java\n@Path(\"/parameters\")\npublic class ParametersResource {\n\n    public static final String URI_STRING_TYPE_PATH = \"/stringTypePath\";\n\n\n    @Path(URI_STRING_TYPE_PATH + \"/{stringValue}\")\n    @POST\n    @Produces(MediaType.TEXT_PLAIN)\n    public String stringTypePath(@PathParam(\"stringValue\") final StringType stringValue) {\n        return stringValue.getValue();\n    }\n\n}\n```\n\n### StringType\n\n```java\npublic class StringType {\n\n    private String value;\n\n\n    protected StringType() {\n    }\n\n\n    protected StringType(final String value) {\n        this.value = value;\n    }\n\n\n    public String getValue() {\n        return value;\n    }\n\n\n    public static StringType fromString(final String s) {\n        return new StringType(s);\n    }\n\n\n    @Override\n    public String toString() {\n        return value;\n    }\n}\n```\n\nWhen now having a REST client and a test, the call will fail with 404 and the log below (see section `Actual behavior`).\n\nAdditional hints:\n* When having a parent POM, the problem is not reproducible. But this is a different problem and I will create another issue for this.\n* In the [documentation](https://quarkus.io/guides/rest#parameter-mapping) it is not completely clear which priority the different variants have. So does a constructor have a higher priority than the `fromString` method? At least it looks like that, but it should be documented.\n\n### Expected behavior\n\nThe protected constructor should not be called, when this is not possible. It should behave like with Quarkus 3.8.6, where I think it was possible to call the protected constructor. Or as an alternative, other methods like the `fromString` should be called. In general this should be documented.\n\n### Actual behavior\n\nQuarkus REST tries to call the protected constructor and fails with the following error (only visible with DEBUG output):\n\n```\n[ERROR] org.acme.ParametersResourceTest.testStringTypePath -- Time elapsed: 0.008 s <<< ERROR!\norg.jboss.resteasy.reactive.ClientWebApplicationException: Received: 'Not Found, status code 404' when invoking REST Client method: 'org.acme.rest.ParametersClientApi#stringTypePath'\n\tat org.jboss.resteasy.reactive.client.impl.RestClientRequestContext.unwrapException(RestClientRequestContext.java:205)\n\tat org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext.handleException(AbstractResteasyReactiveContext.java:329)\n\tat org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext.run(AbstractResteasyReactiveContext.java:175)\n\tat io.smallrye.context.impl.wrappers.SlowContextualRunnable.run(SlowContextualRunnable.java:19)\n\tat org.jboss.resteasy.reactive.client.handlers.ClientSwitchToRequestContextRestHandler$1$1.handle(ClientSwitchToRequestContextRestHandler.java:38)\n\tat org.jboss.resteasy.reactive.client.handlers.ClientSwitchToRequestContextRestHandler$1$1.handle(ClientSwitchToRequestContextRestHandler.java:35)\n\tat io.vertx.core.impl.ContextInternal.dispatch(ContextInternal.java:270)\n\tat io.vertx.core.impl.ContextInternal.dispatch(ContextInternal.java:252)\n\tat io.vertx.core.impl.ContextInternal.lambda$runOnContext$0(ContextInternal.java:50)\n\tat io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)\n\tat io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:566)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n\tSuppressed: java.lang.IllegalAccessError: class org.base.types.StringType$quarkusrestparamConverter$ tried to access protected method 'void org.base.types.StringType.<init>(java.lang.String)' (org.base.types.StringType$quarkusrestparamConverter$ is in unnamed module of loader io.quarkus.bootstrap.classloading.QuarkusClassLoader @718f805a; org.base.types.StringType is in unnamed module of loader io.quarkus.bootstrap.classloading.QuarkusClassLoader @54d18072)\n\t\tat org.base.types.StringType$quarkusrestparamConverter$.convert(Unknown Source)\n\t\tat org.jboss.resteasy.reactive.server.handlers.ParameterHandler.handleResult(ParameterHandler.java:108)\n\t\tat org.jboss.resteasy.reactive.server.handlers.ParameterHandler.handle(ParameterHandler.java:59)\n\t\tat io.quarkus.resteasy.reactive.server.runtime.QuarkusResteasyReactiveRequestContext.invokeHandler(QuarkusResteasyReactiveRequestContext.java:137)\n\t\tat org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext.run(AbstractResteasyReactiveContext.java:147)\n\t\tat io.quarkus.vertx.core.runtime.VertxCoreRecorder$15.runWith(VertxCoreRecorder.java:638)\n\t\tat org.jboss.threads.EnhancedQueueExecutor$Task.doRunWith(EnhancedQueueExecutor.java:2675)\n\t\tat org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2654)\n\t\tat org.jboss.threads.EnhancedQueueExecutor.runThreadBody(EnhancedQueueExecutor.java:1627)\n\t\tat org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1594)\n\t\tat org.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:11)\n\t\tat org.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:11)\n\t\t... 2 more\n\tSuppressed: jakarta.ws.rs.NotFoundException: HTTP 404 Not Found\n\t\tat org.jboss.resteasy.reactive.server.handlers.ParameterHandler.handleResult(ParameterHandler.java:113)\n\t\tat org.jboss.resteasy.reactive.server.handlers.ParameterHandler.handle(ParameterHandler.java:59)\n\t\tat io.quarkus.resteasy.reactive.server.runtime.QuarkusResteasyReactiveRequestContext.invokeHandler(QuarkusResteasyReactiveRequestContext.java:137)\n\t\tat org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext.run(AbstractResteasyReactiveContext.java:147)\n\t\tat io.quarkus.vertx.core.runtime.VertxCoreRecorder$15.runWith(VertxCoreRecorder.java:638)\n\t\tat org.jboss.threads.EnhancedQueueExecutor$Task.doRunWith(EnhancedQueueExecutor.java:2675)\n\t\tat org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2654)\n\t\tat org.jboss.threads.EnhancedQueueExecutor.runThreadBody(EnhancedQueueExecutor.java:1627)\n\t\tat org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1594)\n\t\tat org.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:11)\n\t\tat org.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:11)\n\t\t... 2 more\n\tCaused by: [CIRCULAR REFERENCE: java.lang.IllegalAccessError: class org.base.types.StringType$quarkusrestparamConverter$ tried to access protected method 'void org.base.types.StringType.<init>(java.lang.String)' (org.base.types.StringType$quarkusrestparamConverter$ is in unnamed module of loader io.quarkus.bootstrap.classloading.QuarkusClassLoader @718f805a; org.base.types.StringType is in unnamed module of loader io.quarkus.bootstrap.classloading.QuarkusClassLoader @54d18072)]\nCaused by: jakarta.ws.rs.WebApplicationException: Not Found, status code 404\n\tat io.quarkus.rest.client.reactive.runtime.DefaultMicroprofileRestClientExceptionMapper.toThrowable(DefaultMicroprofileRestClientExceptionMapper.java:19)\n\tat io.quarkus.rest.client.reactive.runtime.MicroProfileRestClientResponseFilter.filter(MicroProfileRestClientResponseFilter.java:54)\n\tat org.jboss.resteasy.reactive.client.handlers.ClientResponseFilterRestHandler.handle(ClientResponseFilterRestHandler.java:21)\n\tat org.jboss.resteasy.reactive.client.handlers.ClientResponseFilterRestHandler.handle(ClientResponseFilterRestHandler.java:10)\n\tat org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext.invokeHandler(AbstractResteasyReactiveContext.java:231)\n\tat org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext.run(AbstractResteasyReactiveContext.java:147)\n\t... 14 more\n```\n\n### How to Reproduce?\n\nReproducer: https://github.com/timonzi/path-and-query-param (`main` branch)\n\nSteps to reproduce the behavior:\n1. Build `path-and-query-param-base` (`mvn clean install`)\n2. Build `path-and-query-param-usage` (`mvn clean install`) => Tests will fail\n\nSee also the README.md\n\nSwitch to [Quarkus 3.8.6](https://github.com/timonzi/path-and-query-param/tree/Quarkus_3.8.6) (branch `Quarkus_3.8.6`) and the problem is not reproducible.\n\n### Output of `uname -a` or `ver`\n\nLinux nb-timonz 6.8.0-52-generic #53~22.04.1-Ubuntu SMP PREEMPT_DYNAMIC Wed Jan 15 19:18:46 UTC 2 x86_64 x86_64 x86_64 GNU/Linux\n\n### Output of `java -version`\n\nOpenJDK 64-Bit Server VM Temurin-21.0.5+11 (build 21.0.5+11-LTS, mixed mode, sharing)\n\n### Quarkus version or git rev\n\n3.20.0\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nApache Maven 3.9.6\n\n### Additional information\n\n_No response_",
    "issue_word_count": 1147,
    "test_files_count": 10,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "extensions/resteasy-reactive/rest-common/deployment/src/main/java/io/quarkus/resteasy/reactive/common/deployment/ResteasyReactiveCommonProcessor.java",
      "extensions/resteasy-reactive/rest-common/spi-deployment/src/main/java/io/quarkus/resteasy/reactive/spi/GeneratedJaxRsResourceBuildItem.java",
      "extensions/resteasy-reactive/rest/deployment/src/main/java/io/quarkus/resteasy/reactive/server/deployment/QuarkusInvokerFactory.java",
      "extensions/resteasy-reactive/rest/deployment/src/main/java/io/quarkus/resteasy/reactive/server/deployment/ResteasyReactiveProcessor.java",
      "integration-tests/maven/src/test/java/io/quarkus/maven/it/DevMojoIT.java",
      "integration-tests/maven/src/test/resources-filtered/projects/.gitignore",
      "integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/app/pom.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/app/src/main/java/org/acme/GreetingListSortAttribute.java",
      "integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/app/src/main/java/org/acme/ParametersResource.java",
      "integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/external-lib/pom.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/external-lib/src/main/java/org/acme/lib/GreetingListFilter.java",
      "integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/external-lib/src/main/java/org/acme/lib/GreetingResource.java",
      "integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/external-lib/src/main/java/org/acme/lib/SortAttribute.java",
      "integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/external-lib/src/main/java/org/acme/lib/StringTypeProtectedConstructor.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/maven/src/test/java/io/quarkus/maven/it/DevMojoIT.java",
      "integration-tests/maven/src/test/resources-filtered/projects/.gitignore",
      "integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/app/pom.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/app/src/main/java/org/acme/GreetingListSortAttribute.java",
      "integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/app/src/main/java/org/acme/ParametersResource.java",
      "integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/external-lib/pom.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/external-lib/src/main/java/org/acme/lib/GreetingListFilter.java",
      "integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/external-lib/src/main/java/org/acme/lib/GreetingResource.java",
      "integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/external-lib/src/main/java/org/acme/lib/SortAttribute.java",
      "integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/external-lib/src/main/java/org/acme/lib/StringTypeProtectedConstructor.java"
    ],
    "base_commit": "32a74adbd751a655f17a85ff9bad62144243a32c",
    "head_commit": "018248668f81ab59fda882d268b4393920c045d8",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48597",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48597",
    "dockerfile": "",
    "pr_merged_at": "2025-06-25T11:03:58.000Z",
    "patch": "diff --git a/extensions/resteasy-reactive/rest-common/deployment/src/main/java/io/quarkus/resteasy/reactive/common/deployment/ResteasyReactiveCommonProcessor.java b/extensions/resteasy-reactive/rest-common/deployment/src/main/java/io/quarkus/resteasy/reactive/common/deployment/ResteasyReactiveCommonProcessor.java\nindex d40ef0d435120..f654992837993 100644\n--- a/extensions/resteasy-reactive/rest-common/deployment/src/main/java/io/quarkus/resteasy/reactive/common/deployment/ResteasyReactiveCommonProcessor.java\n+++ b/extensions/resteasy-reactive/rest-common/deployment/src/main/java/io/quarkus/resteasy/reactive/common/deployment/ResteasyReactiveCommonProcessor.java\n@@ -276,7 +276,8 @@ JaxRsResourceIndexBuildItem resourceIndex(CombinedIndexBuildItem combinedIndex,\n         for (GeneratedJaxRsResourceBuildItem generatedJaxRsResource : generatedJaxRsResources) {\n             indexer.index(new ByteArrayInputStream(generatedJaxRsResource.getData()));\n             generatedBeansProducer\n-                    .produce(new GeneratedBeanBuildItem(generatedJaxRsResource.getName(), generatedJaxRsResource.getData()));\n+                    .produce(new GeneratedBeanBuildItem(generatedJaxRsResource.internalName(),\n+                            generatedJaxRsResource.getData()));\n         }\n         return new JaxRsResourceIndexBuildItem(CompositeIndex.create(combinedIndex.getComputingIndex(), indexer.complete()));\n     }\n\ndiff --git a/extensions/resteasy-reactive/rest-common/spi-deployment/src/main/java/io/quarkus/resteasy/reactive/spi/GeneratedJaxRsResourceBuildItem.java b/extensions/resteasy-reactive/rest-common/spi-deployment/src/main/java/io/quarkus/resteasy/reactive/spi/GeneratedJaxRsResourceBuildItem.java\nindex 3c8bb89853e84..2fc8000cbe906 100644\n--- a/extensions/resteasy-reactive/rest-common/spi-deployment/src/main/java/io/quarkus/resteasy/reactive/spi/GeneratedJaxRsResourceBuildItem.java\n+++ b/extensions/resteasy-reactive/rest-common/spi-deployment/src/main/java/io/quarkus/resteasy/reactive/spi/GeneratedJaxRsResourceBuildItem.java\n@@ -8,16 +8,38 @@\n  */\n public final class GeneratedJaxRsResourceBuildItem extends MultiBuildItem {\n \n-    private final String name;\n+    private final String binaryName;\n+    private final String internalName;\n     private final byte[] data;\n \n     public GeneratedJaxRsResourceBuildItem(String name, byte[] data) {\n-        this.name = name;\n+        this.internalName = name.replace('.', '/');\n+        this.binaryName = name.replace('/', '.');\n         this.data = data;\n     }\n \n+    /**\n+     * @return the internal name for this class\n+     *\n+     * @deprecated Use {@link #internalName()} instead.\n+     */\n+    @Deprecated(since = \"3.23\", forRemoval = true)\n     public String getName() {\n-        return name;\n+        return internalName;\n+    }\n+\n+    /**\n+     * {@return the <em>binary name</em> of the class, which is delimited by <code>.</code> characters}\n+     */\n+    public String binaryName() {\n+        return binaryName;\n+    }\n+\n+    /**\n+     * {@return the <em>internal name</em> of the class, which is delimited by <code>/</code> characters}\n+     */\n+    public String internalName() {\n+        return internalName;\n     }\n \n     public byte[] getData() {\n\ndiff --git a/extensions/resteasy-reactive/rest/deployment/src/main/java/io/quarkus/resteasy/reactive/server/deployment/QuarkusInvokerFactory.java b/extensions/resteasy-reactive/rest/deployment/src/main/java/io/quarkus/resteasy/reactive/server/deployment/QuarkusInvokerFactory.java\nindex fddb325052e84..88feb6d2dcd32 100644\n--- a/extensions/resteasy-reactive/rest/deployment/src/main/java/io/quarkus/resteasy/reactive/server/deployment/QuarkusInvokerFactory.java\n+++ b/extensions/resteasy-reactive/rest/deployment/src/main/java/io/quarkus/resteasy/reactive/server/deployment/QuarkusInvokerFactory.java\n@@ -2,6 +2,7 @@\n \n import java.lang.reflect.Modifier;\n import java.util.Arrays;\n+import java.util.function.Predicate;\n import java.util.function.Supplier;\n \n import org.jboss.jandex.ClassInfo;\n@@ -22,11 +23,14 @@\n \n public class QuarkusInvokerFactory implements EndpointInvokerFactory {\n \n+    private final Predicate<String> applicationClassPredicate;\n     final BuildProducer<GeneratedClassBuildItem> generatedClassBuildItemBuildProducer;\n     final ResteasyReactiveRecorder recorder;\n \n-    public QuarkusInvokerFactory(BuildProducer<GeneratedClassBuildItem> generatedClassBuildItemBuildProducer,\n+    public QuarkusInvokerFactory(Predicate<String> applicationClassPredicate,\n+            BuildProducer<GeneratedClassBuildItem> generatedClassBuildItemBuildProducer,\n             ResteasyReactiveRecorder recorder) {\n+        this.applicationClassPredicate = applicationClassPredicate;\n         this.generatedClassBuildItemBuildProducer = generatedClassBuildItemBuildProducer;\n         this.recorder = recorder;\n     }\n@@ -43,7 +47,9 @@ public Supplier<EndpointInvoker> create(ResourceMethod method, ClassInfo current\n         String baseName = currentClassInfo.name() + \"$quarkusrestinvoker$\" + method.getName() + \"_\"\n                 + HashUtil.sha1(endpointIdentifier);\n         try (ClassCreator classCreator = new ClassCreator(\n-                new GeneratedClassGizmoAdaptor(generatedClassBuildItemBuildProducer, true), baseName, null,\n+                new GeneratedClassGizmoAdaptor(generatedClassBuildItemBuildProducer,\n+                        applicationClassPredicate.test(currentClassInfo.name().toString())),\n+                baseName, null,\n                 Object.class.getName(), EndpointInvoker.class.getName())) {\n             MethodCreator mc = classCreator.getMethodCreator(\"invoke\", Object.class, Object.class, Object[].class);\n             ResultHandle[] args = new ResultHandle[method.getParameters().length];\n\ndiff --git a/extensions/resteasy-reactive/rest/deployment/src/main/java/io/quarkus/resteasy/reactive/server/deployment/ResteasyReactiveProcessor.java b/extensions/resteasy-reactive/rest/deployment/src/main/java/io/quarkus/resteasy/reactive/server/deployment/ResteasyReactiveProcessor.java\nindex b255194d2925f..f6201b413b8da 100644\n--- a/extensions/resteasy-reactive/rest/deployment/src/main/java/io/quarkus/resteasy/reactive/server/deployment/ResteasyReactiveProcessor.java\n+++ b/extensions/resteasy-reactive/rest/deployment/src/main/java/io/quarkus/resteasy/reactive/server/deployment/ResteasyReactiveProcessor.java\n@@ -204,6 +204,7 @@\n import io.quarkus.resteasy.reactive.spi.DynamicFeatureBuildItem;\n import io.quarkus.resteasy.reactive.spi.EndpointValidationPredicatesBuildItem;\n import io.quarkus.resteasy.reactive.spi.ExceptionMapperBuildItem;\n+import io.quarkus.resteasy.reactive.spi.GeneratedJaxRsResourceBuildItem;\n import io.quarkus.resteasy.reactive.spi.JaxrsFeatureBuildItem;\n import io.quarkus.resteasy.reactive.spi.MessageBodyReaderBuildItem;\n import io.quarkus.resteasy.reactive.spi.MessageBodyReaderOverrideBuildItem;\n@@ -474,7 +475,8 @@ public void setupEndpoints(ApplicationIndexBuildItem applicationIndexBuildItem,\n             ResourceInterceptorsBuildItem resourceInterceptorsBuildItem,\n             Capabilities capabilities,\n             Optional<AllowNotRestParametersBuildItem> allowNotRestParametersBuildItem,\n-            List<EndpointValidationPredicatesBuildItem> validationPredicatesBuildItems) {\n+            List<EndpointValidationPredicatesBuildItem> validationPredicatesBuildItems,\n+            List<GeneratedJaxRsResourceBuildItem> generatedJaxRsResourcesBuildItems) {\n \n         if (!resourceScanningResultBuildItem.isPresent()) {\n             // no detected @Path, bail out\n@@ -512,13 +514,18 @@ public void setupEndpoints(ApplicationIndexBuildItem applicationIndexBuildItem,\n \n             List<ResteasyReactiveResourceMethodEntriesBuildItem.Entry> resourceMethodEntries = new ArrayList<>();\n \n+            // Generated JAX-RS resources are application classes\n+            Set<String> applicationGeneratedJaxRsResources = generatedJaxRsResourcesBuildItems.stream()\n+                    .map(r -> r.binaryName())\n+                    .collect(Collectors.toSet());\n+\n             Predicate<String> applicationClassPredicate = s -> {\n                 for (ApplicationClassPredicateBuildItem i : applicationClassPredicateBuildItems) {\n                     if (i.test(s)) {\n                         return true;\n                     }\n                 }\n-                return false;\n+                return applicationGeneratedJaxRsResources.contains(s);\n             };\n \n             final boolean filtersAccessResourceMethod = filtersAccessResourceMethod(\n@@ -537,7 +544,8 @@ public void setupEndpoints(ApplicationIndexBuildItem applicationIndexBuildItem,\n                     .addContextTypes(additionalContextTypes(contextTypeBuildItems))\n                     .setFactoryCreator(new QuarkusFactoryCreator(recorder, beanContainerBuildItem.getValue()))\n                     .setEndpointInvokerFactory(\n-                            new QuarkusInvokerFactory(generatedClassBuildItemBuildProducer, recorder))\n+                            new QuarkusInvokerFactory(applicationClassPredicate, generatedClassBuildItemBuildProducer,\n+                                    recorder))\n                     .setGeneratedClassBuildItemBuildProducer(generatedClassBuildItemBuildProducer)\n                     .setExistingConverters(existingConverters)\n                     .setScannedResourcePaths(scannedResourcePaths)\n@@ -560,7 +568,8 @@ public void setupEndpoints(ApplicationIndexBuildItem applicationIndexBuildItem,\n                                         initConverters.getMethodParam(0));\n                             }))\n                     .setConverterSupplierIndexerExtension(new GeneratedConverterIndexerExtension(\n-                            (name) -> new GeneratedClassGizmoAdaptor(generatedClassBuildItemBuildProducer, true)))\n+                            (name) -> new GeneratedClassGizmoAdaptor(generatedClassBuildItemBuildProducer,\n+                                    applicationClassPredicate.test(name))))\n                     .setHasRuntimeConverters(!paramConverterProviders.getParamConverterProviders().isEmpty())\n                     .setClassLevelExceptionMappers(\n                             classLevelExceptionMappers.isPresent() ? classLevelExceptionMappers.get().getMappers()\n",
    "test_patch": "diff --git a/integration-tests/maven/src/test/java/io/quarkus/maven/it/DevMojoIT.java b/integration-tests/maven/src/test/java/io/quarkus/maven/it/DevMojoIT.java\nindex cebc0029d3e09..5ac30d2af64ce 100644\n--- a/integration-tests/maven/src/test/java/io/quarkus/maven/it/DevMojoIT.java\n+++ b/integration-tests/maven/src/test/java/io/quarkus/maven/it/DevMojoIT.java\n@@ -1524,6 +1524,27 @@ public void testExternalReloadableArtifacts() throws Exception {\n                 .until(() -> devModeClient.getHttpResponse(\"/hello\").contains(\"BONJOUR!\"));\n     }\n \n+    @Test\n+    public void testResteasyReactiveExternalArtifact() throws Exception {\n+        final String rootProjectPath = \"projects/rr-external-artifacts\";\n+\n+        // Set up the external project\n+        final File externalJarDir = initProject(rootProjectPath + \"/external-lib\");\n+\n+        // Clean and install the external JAR in local repository (.m2)\n+        install(externalJarDir, true);\n+\n+        // Set up the main project that uses the external dependency\n+        this.testDir = initProject(rootProjectPath + \"/app\");\n+\n+        // Run quarkus:dev process\n+        run(true);\n+\n+        Assertions.assertEquals(\"Quarkus\", devModeClient.getHttpResponse(\"/hello/Quarkus\"));\n+        Assertions.assertEquals(\"OK\", devModeClient.getHttpResponse(\"/hello/parameterized-type-external\"));\n+        Assertions.assertEquals(\"Hello from Quarkus REST\", devModeClient.getHttpResponse(\"/greet\"));\n+    }\n+\n     @Test\n     public void testThatAptInClasspathWorks() throws MavenInvocationException, IOException {\n         testDir = initProject(\"projects/apt-in-classpath\", \"projects/project-apt-in-classpath\");\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/.gitignore b/integration-tests/maven/src/test/resources-filtered/projects/.gitignore\nnew file mode 100644\nindex 0000000000000..ebf4281dc07b9\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/.gitignore\n@@ -0,0 +1 @@\n+!lib\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/app/pom.xml b/integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/app/pom.xml\nnew file mode 100644\nindex 0000000000000..5e01ea409f93d\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/app/pom.xml\n@@ -0,0 +1,74 @@\n+<?xml version=\"1.0\"?>\n+<project\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"\n+    xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+    <groupId>org.acme</groupId>\n+    <artifactId>acme</artifactId>\n+    <version>1.0-SNAPSHOT</version>\n+\n+    <properties>\n+        <quarkus.platform.group-id>io.quarkus</quarkus.platform.group-id>\n+        <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>\n+        <quarkus.platform.version>@project.version@</quarkus.platform.version>\n+        <quarkus-plugin.version>@project.version@</quarkus-plugin.version>\n+        <compiler-plugin.version>${compiler-plugin.version}</compiler-plugin.version>\n+        <maven.compiler.source>${maven.compiler.source}</maven.compiler.source>\n+        <maven.compiler.target>${maven.compiler.target}</maven.compiler.target>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    </properties>\n+\n+    <dependencyManagement>\n+        <dependencies>\n+            <dependency>\n+                <groupId>\\${quarkus.platform.group-id}</groupId>\n+                <artifactId>\\${quarkus.platform.artifact-id}</artifactId>\n+                <version>\\${quarkus.platform.version}</version>\n+                <type>pom</type>\n+                <scope>import</scope>\n+            </dependency>\n+        </dependencies>\n+    </dependencyManagement>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-rest</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.acme.lib</groupId>\n+            <artifactId>acme-lib</artifactId>\n+            <version>1.0-SNAPSHOT</version>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <version>\\${compiler-plugin.version}</version>\n+                <configuration>\n+                    <parameters>true</parameters>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>io.quarkus</groupId>\n+                <artifactId>quarkus-maven-plugin</artifactId>\n+                <version>\\${quarkus-plugin.version}</version>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>generate-code</goal>\n+                            <goal>generate-code-tests</goal>\n+                            <goal>build</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+</project>\n\\ No newline at end of file\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/app/src/main/java/org/acme/GreetingListSortAttribute.java b/integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/app/src/main/java/org/acme/GreetingListSortAttribute.java\nnew file mode 100644\nindex 0000000000000..cde0c327e371a\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/app/src/main/java/org/acme/GreetingListSortAttribute.java\n@@ -0,0 +1,8 @@\n+package org.acme;\n+\n+import org.acme.lib.SortAttribute;\n+\n+public enum GreetingListSortAttribute implements SortAttribute{\n+    FORMALITY_FACTOR,\n+    LANGUAGE;\n+}\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/app/src/main/java/org/acme/ParametersResource.java b/integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/app/src/main/java/org/acme/ParametersResource.java\nnew file mode 100644\nindex 0000000000000..26cc2ccf9a37d\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/app/src/main/java/org/acme/ParametersResource.java\n@@ -0,0 +1,24 @@\n+package org.acme;\n+\n+import jakarta.ws.rs.*;\n+import jakarta.ws.rs.core.MediaType;\n+import org.acme.lib.StringTypeProtectedConstructor;\n+import org.acme.lib.GreetingListFilter;\n+\n+@Path(\"/hello\")\n+public class ParametersResource {\n+\n+    @Path(\"{stringValue}\")\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String stringTypePath(@PathParam(\"stringValue\") final StringTypeProtectedConstructor stringValue) {\n+        return stringValue.getValue();\n+    }\n+\n+    @Path(\"parameterized-type-external\")\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello(@BeanParam GreetingListFilter<GreetingListSortAttribute> listFilter) {\n+        return \"OK\";\n+    }\n+}\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/external-lib/pom.xml b/integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/external-lib/pom.xml\nnew file mode 100644\nindex 0000000000000..fa04e612deef2\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/external-lib/pom.xml\n@@ -0,0 +1,70 @@\n+<?xml version=\"1.0\"?>\n+<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+    <groupId>org.acme.lib</groupId>\n+    <artifactId>acme-lib</artifactId>\n+    <version>1.0-SNAPSHOT</version>\n+\n+    <properties>\n+        <quarkus.platform.group-id>io.quarkus</quarkus.platform.group-id>\n+        <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>\n+        <quarkus.platform.version>@project.version@</quarkus.platform.version>\n+        <quarkus-plugin.version>@project.version@</quarkus-plugin.version>\n+        <maven.compiler.source>${maven.compiler.source}</maven.compiler.source>\n+        <maven.compiler.target>${maven.compiler.target}</maven.compiler.target>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <compiler-plugin.version>${compiler-plugin.version}</compiler-plugin.version>\n+        <maven.jar.plugin.version>${version.jar.plugin}</maven.jar.plugin.version>\n+    </properties>\n+\n+    <dependencyManagement>\n+        <dependencies>\n+            <dependency>\n+                <groupId>\\${quarkus.platform.group-id}</groupId>\n+                <artifactId>\\${quarkus.platform.artifact-id}</artifactId>\n+                <version>\\${quarkus.platform.version}</version>\n+                <type>pom</type>\n+                <scope>import</scope>\n+            </dependency>\n+        </dependencies>\n+    </dependencyManagement>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-rest</artifactId>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <version>\\${compiler-plugin.version}</version>\n+                <configuration>\n+                    <parameters>true</parameters>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <version>\\${maven.jar.plugin.version}</version>\n+            </plugin>\n+            <plugin>\n+                <groupId>io.smallrye</groupId>\n+                <artifactId>jandex-maven-plugin</artifactId>\n+                <version>${jandex.version}</version>\n+                <executions>\n+                    <execution>\n+                        <id>make-index</id>\n+                        <goals>\n+                            <goal>jandex</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+</project>\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/external-lib/src/main/java/org/acme/lib/GreetingListFilter.java b/integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/external-lib/src/main/java/org/acme/lib/GreetingListFilter.java\nnew file mode 100644\nindex 0000000000000..d2630a780f01a\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/external-lib/src/main/java/org/acme/lib/GreetingListFilter.java\n@@ -0,0 +1,9 @@\n+package org.acme.lib;\n+\n+import jakarta.ws.rs.DefaultValue;\n+import jakarta.ws.rs.QueryParam;\n+\n+public class GreetingListFilter<T extends SortAttribute> {\n+    @QueryParam(\"sortAttribute\")\n+    public T sortAttribute;\n+}\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/external-lib/src/main/java/org/acme/lib/GreetingResource.java b/integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/external-lib/src/main/java/org/acme/lib/GreetingResource.java\nnew file mode 100644\nindex 0000000000000..b526ea255ee38\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/external-lib/src/main/java/org/acme/lib/GreetingResource.java\n@@ -0,0 +1,16 @@\n+package org.acme.lib;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.Produces;\n+import jakarta.ws.rs.core.MediaType;\n+\n+@Path(\"/greet\")\n+class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String greet() {\n+        return \"Hello from Quarkus REST\";\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/external-lib/src/main/java/org/acme/lib/SortAttribute.java b/integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/external-lib/src/main/java/org/acme/lib/SortAttribute.java\nnew file mode 100644\nindex 0000000000000..d50d79591abb2\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/external-lib/src/main/java/org/acme/lib/SortAttribute.java\n@@ -0,0 +1,4 @@\n+package org.acme.lib;\n+\n+public interface SortAttribute {\n+}\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/external-lib/src/main/java/org/acme/lib/StringTypeProtectedConstructor.java b/integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/external-lib/src/main/java/org/acme/lib/StringTypeProtectedConstructor.java\nnew file mode 100644\nindex 0000000000000..a782836dde419\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/rr-external-artifacts/external-lib/src/main/java/org/acme/lib/StringTypeProtectedConstructor.java\n@@ -0,0 +1,26 @@\n+package org.acme.lib;\n+\n+public class StringTypeProtectedConstructor {\n+\n+    private String value;\n+\n+    protected StringTypeProtectedConstructor(final String value) {\n+        this.value = value;\n+    }\n+\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+\n+    public static StringTypeProtectedConstructor fromString(final String s) {\n+        return new StringTypeProtectedConstructor(s);\n+    }\n+\n+\n+    @Override\n+    public String toString() {\n+        return value;\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48555",
    "pr_id": 48555,
    "issue_id": 47627,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Kafka dev services should not be started in augmentation phase\nSee reproducer from @vonatzigenc (thanks!):  https://github.com/vonatzigenc/reproducer-quarkus-testpofiles-3220",
    "issue_word_count": 23,
    "test_files_count": 20,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "integration-tests/kafka-devservices/pom.xml",
      "integration-tests/kafka-devservices/src/main/java/io/quarkus/it/kafka/KafkaAdminManager.java",
      "integration-tests/kafka-devservices/src/main/java/io/quarkus/it/kafka/KafkaEndpoint.java",
      "integration-tests/kafka-devservices/src/main/resources/application.properties",
      "integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/BundledEndpoint.java",
      "integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/DevServicesKafkaCustomPortITest.java",
      "integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/DevServicesKafkaCustomPortReusableServiceITest.java",
      "integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/DevServicesKafkaNonUniquePortITest.java",
      "integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/continuoustesting/DevServicesDevModeTest.java",
      "integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/continuoustesting/DevServicesKafkaContinuousTestingTest.java",
      "integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/devservices/profiles/DevServiceKafka.java",
      "integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/devservices/profiles/DevServicesCustomPortProfile.java",
      "integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/devservices/profiles/DevServicesCustomPortReusableServiceProfile.java",
      "integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/devservices/profiles/DevServicesDisabledProfile.java",
      "integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/devservices/profiles/DevServicesNonUniquePortProfile.java",
      "integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/devservices/profiles/DevServicesRandomPortProfile.java",
      "integration-tests/redis-devservices/src/test/java/io/quarkus/redis/devservices/it/DevServicesRedisCustomPortITest.java",
      "integration-tests/redis-devservices/src/test/java/io/quarkus/redis/devservices/it/DevServicesRedisCustomPortReusableServiceITest.java",
      "integration-tests/redis-devservices/src/test/java/io/quarkus/redis/devservices/it/DevServicesRedisITest.java",
      "test-framework/junit5-internal/src/main/java/io/quarkus/test/ports/SocketKit.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/kafka-devservices/pom.xml",
      "integration-tests/kafka-devservices/src/main/java/io/quarkus/it/kafka/KafkaAdminManager.java",
      "integration-tests/kafka-devservices/src/main/java/io/quarkus/it/kafka/KafkaEndpoint.java",
      "integration-tests/kafka-devservices/src/main/resources/application.properties",
      "integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/BundledEndpoint.java",
      "integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/DevServicesKafkaCustomPortITest.java",
      "integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/DevServicesKafkaCustomPortReusableServiceITest.java",
      "integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/DevServicesKafkaNonUniquePortITest.java",
      "integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/continuoustesting/DevServicesDevModeTest.java",
      "integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/continuoustesting/DevServicesKafkaContinuousTestingTest.java",
      "integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/devservices/profiles/DevServiceKafka.java",
      "integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/devservices/profiles/DevServicesCustomPortProfile.java",
      "integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/devservices/profiles/DevServicesCustomPortReusableServiceProfile.java",
      "integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/devservices/profiles/DevServicesDisabledProfile.java",
      "integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/devservices/profiles/DevServicesNonUniquePortProfile.java",
      "integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/devservices/profiles/DevServicesRandomPortProfile.java",
      "integration-tests/redis-devservices/src/test/java/io/quarkus/redis/devservices/it/DevServicesRedisCustomPortITest.java",
      "integration-tests/redis-devservices/src/test/java/io/quarkus/redis/devservices/it/DevServicesRedisCustomPortReusableServiceITest.java",
      "integration-tests/redis-devservices/src/test/java/io/quarkus/redis/devservices/it/DevServicesRedisITest.java",
      "test-framework/junit5-internal/src/main/java/io/quarkus/test/ports/SocketKit.java"
    ],
    "base_commit": "7b789e354dfde7bb5f692719bd9cdea758a8e1b5",
    "head_commit": "43a064ae42ca843181d0de4109d2784ca9a19565",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48555",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48555",
    "dockerfile": "",
    "pr_merged_at": "2025-06-25T14:39:40.000Z",
    "patch": "",
    "test_patch": "diff --git a/integration-tests/kafka-devservices/pom.xml b/integration-tests/kafka-devservices/pom.xml\nindex 6ca5e4438cfe0..3b35a9a517370 100644\n--- a/integration-tests/kafka-devservices/pom.xml\n+++ b/integration-tests/kafka-devservices/pom.xml\n@@ -57,6 +57,16 @@\n             <artifactId>quarkus-junit5</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-junit5-internal</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-devservices-common</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n         <dependency>\n             <groupId>io.rest-assured</groupId>\n             <artifactId>rest-assured</artifactId>\n@@ -205,7 +215,31 @@\n                         <configuration>\n                             <skip>false</skip>\n                         </configuration>\n-                    </plugin>\n+                            <executions>\n+                                <execution>\n+                                    <id>default-test</id>\n+                                    <goals>\n+                                        <goal>test</goal>\n+                                    </goals>\n+                                    <configuration>\n+                                        <excludes>\n+                                            <exclude>**/continuoustesting/**/*.java</exclude>\n+                                        </excludes>\n+                                    </configuration>\n+                                </execution>\n+                                <execution>\n+                                    <id>devmode-test</id>\n+                                    <goals>\n+                                        <goal>test</goal>\n+                                    </goals>\n+                                    <configuration>\n+                                        <includes>\n+                                            <include>**/continuoustesting/**/*.java</include>\n+                                        </includes>\n+                                    </configuration>\n+                                </execution>\n+                            </executions>\n+                        </plugin>\n                     <plugin>\n                         <artifactId>maven-failsafe-plugin</artifactId>\n                         <configuration>\n\ndiff --git a/integration-tests/kafka-devservices/src/main/java/io/quarkus/it/kafka/KafkaAdminManager.java b/integration-tests/kafka-devservices/src/main/java/io/quarkus/it/kafka/KafkaAdminManager.java\nindex 5b02b128bd3c1..bc1a088b35daf 100644\n--- a/integration-tests/kafka-devservices/src/main/java/io/quarkus/it/kafka/KafkaAdminManager.java\n+++ b/integration-tests/kafka-devservices/src/main/java/io/quarkus/it/kafka/KafkaAdminManager.java\n@@ -41,6 +41,7 @@ void cleanup() {\n     }\n \n     public int partitions(String topic) {\n+\n         TopicDescription topicDescription;\n         try {\n             Map<String, TopicDescription> partitions = admin.describeTopics(Collections.singletonList(topic))\n@@ -55,4 +56,15 @@ public int partitions(String topic) {\n         return topicDescription.partitions().size();\n     }\n \n+    int port() throws InterruptedException, ExecutionException {\n+        return admin.describeCluster().controller().get().port();\n+    }\n+\n+    String image() throws InterruptedException, ExecutionException {\n+        // By observation, the red panda does not return anything for the supported features call\n+        // It would be nice to have a more robust check, but hopefully this fragile check is good enough\n+        boolean isRedPanda = admin.describeFeatures().featureMetadata().get().supportedFeatures().size() == 0;\n+        return isRedPanda ? \"redpanda\" : \"kafka-native\";\n+    }\n+\n }\n\ndiff --git a/integration-tests/kafka-devservices/src/main/java/io/quarkus/it/kafka/KafkaEndpoint.java b/integration-tests/kafka-devservices/src/main/java/io/quarkus/it/kafka/KafkaEndpoint.java\nindex cf294ebd949b0..b1e497e2af76e 100644\n--- a/integration-tests/kafka-devservices/src/main/java/io/quarkus/it/kafka/KafkaEndpoint.java\n+++ b/integration-tests/kafka-devservices/src/main/java/io/quarkus/it/kafka/KafkaEndpoint.java\n@@ -1,5 +1,7 @@\n package io.quarkus.it.kafka;\n \n+import java.util.concurrent.ExecutionException;\n+\n import jakarta.inject.Inject;\n import jakarta.ws.rs.GET;\n import jakarta.ws.rs.Path;\n@@ -16,4 +18,16 @@ public class KafkaEndpoint {\n     public Integer partitions(@PathParam(\"topic\") String topic) {\n         return admin.partitions(topic);\n     }\n+\n+    @GET\n+    @Path(\"/port\")\n+    public Integer partitions() throws ExecutionException, InterruptedException {\n+        return admin.port();\n+    }\n+\n+    @GET\n+    @Path(\"/image\")\n+    public String image() throws ExecutionException, InterruptedException {\n+        return admin.image();\n+    }\n }\n\ndiff --git a/integration-tests/kafka-devservices/src/main/resources/application.properties b/integration-tests/kafka-devservices/src/main/resources/application.properties\nindex bdd341fbda057..6d2b900fe392f 100644\n--- a/integration-tests/kafka-devservices/src/main/resources/application.properties\n+++ b/integration-tests/kafka-devservices/src/main/resources/application.properties\n@@ -9,3 +9,6 @@ quarkus.kafka.devservices.provider=kafka-native\n quarkus.kafka.devservices.topic-partitions.test=2\n quarkus.kafka.devservices.topic-partitions.test-consumer=3\n quarkus.kafka.devservices.topic-partitions-timeout=4S\n+\n+# When running this project itself in dev or test mode, don't try and layer in the dev mode tests\n+quarkus.test.exclude-pattern=io.quarkus.it.kafka.continuoustesting.*\n\\ No newline at end of file\n\ndiff --git a/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/BundledEndpoint.java b/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/BundledEndpoint.java\nnew file mode 100644\nindex 0000000000000..008afe168f8cc\n--- /dev/null\n+++ b/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/BundledEndpoint.java\n@@ -0,0 +1,27 @@\n+package io.quarkus.it.kafka;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+import jakarta.inject.Inject;\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.PathParam;\n+\n+@Path(\"/kafka\")\n+public class BundledEndpoint {\n+\n+    @Inject\n+    KafkaAdminManager admin;\n+\n+    @GET\n+    @Path(\"/partitions/{topic}\")\n+    public Integer partitions(@PathParam(\"topic\") String topic) {\n+        return admin.partitions(topic);\n+    }\n+\n+    @GET\n+    @Path(\"/port\")\n+    public Integer port() throws ExecutionException, InterruptedException {\n+        return admin.port();\n+    }\n+}\n\ndiff --git a/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/DevServicesKafkaCustomPortITest.java b/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/DevServicesKafkaCustomPortITest.java\nnew file mode 100644\nindex 0000000000000..931301d85130b\n--- /dev/null\n+++ b/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/DevServicesKafkaCustomPortITest.java\n@@ -0,0 +1,30 @@\n+package io.quarkus.it.kafka;\n+\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.it.kafka.devservices.profiles.DevServicesCustomPortProfile;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.TestProfile;\n+import io.quarkus.test.ports.SocketKit;\n+import io.restassured.RestAssured;\n+\n+@QuarkusTest\n+@TestProfile(DevServicesCustomPortProfile.class)\n+public class DevServicesKafkaCustomPortITest {\n+\n+    @Test\n+    @DisplayName(\"should start kafka container with the given custom port\")\n+    public void shouldStartKafkaContainer() {\n+        Assertions.assertTrue(SocketKit.isPortAlreadyUsed(5050));\n+        RestAssured.when().get(\"/kafka/port\").then().body(Matchers.is(\"5050\"));\n+    }\n+\n+    @Test\n+    public void shouldBeCorrectImage() {\n+        RestAssured.when().get(\"/kafka/image\").then().body(Matchers.is(\"kafka-native\"));\n+    }\n+\n+}\n\ndiff --git a/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/DevServicesKafkaCustomPortReusableServiceITest.java b/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/DevServicesKafkaCustomPortReusableServiceITest.java\nnew file mode 100644\nindex 0000000000000..ca44d26a2ab13\n--- /dev/null\n+++ b/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/DevServicesKafkaCustomPortReusableServiceITest.java\n@@ -0,0 +1,28 @@\n+package io.quarkus.it.kafka;\n+\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.it.kafka.devservices.profiles.DevServicesCustomPortReusableServiceProfile;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.TestProfile;\n+import io.quarkus.test.ports.SocketKit;\n+import io.restassured.RestAssured;\n+\n+@Disabled(\"https://github.com/quarkusio/quarkus/issues/47627\")\n+@QuarkusTest\n+@TestProfile(DevServicesCustomPortReusableServiceProfile.class)\n+public class DevServicesKafkaCustomPortReusableServiceITest {\n+\n+    @Test\n+    @DisplayName(\"should start kafka container with the given custom port\")\n+    public void shouldStartKafkaContainer() {\n+        // We could strengthen this test to make sure the container is the same as seen by other tests, but it's hard since we won't know the order\n+        Assertions.assertTrue(SocketKit.isPortAlreadyUsed(5050));\n+        RestAssured.when().get(\"/kafka/port\").then().body(Matchers.is(\"5050\"));\n+    }\n+\n+}\n\ndiff --git a/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/DevServicesKafkaNonUniquePortITest.java b/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/DevServicesKafkaNonUniquePortITest.java\nnew file mode 100644\nindex 0000000000000..46d28f783d820\n--- /dev/null\n+++ b/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/DevServicesKafkaNonUniquePortITest.java\n@@ -0,0 +1,32 @@\n+package io.quarkus.it.kafka;\n+\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.it.kafka.devservices.profiles.DevServicesNonUniquePortProfile;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.TestProfile;\n+import io.quarkus.test.ports.SocketKit;\n+import io.restassured.RestAssured;\n+\n+@Disabled(\"https://github.com/quarkusio/quarkus/issues/47627\")\n+@QuarkusTest\n+@TestProfile(DevServicesNonUniquePortProfile.class)\n+public class DevServicesKafkaNonUniquePortITest {\n+\n+    @Test\n+    @DisplayName(\"should start kafka container with the given custom port\")\n+    public void shouldStartKafkaContainer() {\n+        Assertions.assertTrue(SocketKit.isPortAlreadyUsed(5050));\n+        RestAssured.when().get(\"/kafka/port\").then().body(Matchers.is(\"5050\"));\n+    }\n+\n+    @Test\n+    public void shouldBeCorrectImage() {\n+        RestAssured.when().get(\"/kafka/image\").then().body(Matchers.is(\"redpanda\"));\n+    }\n+\n+}\n\ndiff --git a/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/continuoustesting/DevServicesDevModeTest.java b/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/continuoustesting/DevServicesDevModeTest.java\nnew file mode 100644\nindex 0000000000000..5e6eb913a48d2\n--- /dev/null\n+++ b/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/continuoustesting/DevServicesDevModeTest.java\n@@ -0,0 +1,211 @@\n+package io.quarkus.it.kafka.continuoustesting;\n+\n+import static io.restassured.RestAssured.when;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.testcontainers.DockerClientFactory;\n+\n+import com.github.dockerjava.api.model.Container;\n+\n+import io.quarkus.it.kafka.BundledEndpoint;\n+import io.quarkus.it.kafka.KafkaAdminManager;\n+import io.quarkus.it.kafka.KafkaAdminTest;\n+import io.quarkus.test.QuarkusDevModeTest;\n+\n+public class DevServicesDevModeTest {\n+\n+    @RegisterExtension\n+    public static QuarkusDevModeTest test = new QuarkusDevModeTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClass(KafkaAdminManager.class)\n+                    .addClass(BundledEndpoint.class)\n+                    .addAsResource(new StringAsset(\"quarkus.kafka.devservices.provider=kafka-native\\n\" +\n+                            \"quarkus.kafka.devservices.topic-partitions.test=2\\n\"\n+                            + \"quarkus.kafka.devservices.provider=kafka-native\\n\"), \"application.properties\"))\n+            .setTestArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class).addClass(KafkaAdminTest.class));\n+\n+    @Test\n+    public void testDevModeServiceUpdatesContainersOnConfigChange() {\n+        // Interacting with the app will force a refresh\n+        // Note that driving continuous testing concurrently can sometimes cause 500s caused by containers not yet being available on slow machines\n+        ping();\n+        List<Container> started = getKafkaContainers();\n+\n+        assertFalse(started.isEmpty());\n+        Container container = started.get(0);\n+        assertTrue(Arrays.stream(container.getPorts()).noneMatch(p -> p.getPublicPort() == 6377),\n+                \"Expected random port, but got: \" + Arrays.toString(container.getPorts()));\n+\n+        int newPort = 6388;\n+        test.modifyResourceFile(\"application.properties\", s -> s + \"quarkus.kafka.devservices.port=\" + newPort);\n+\n+        // Force another refresh\n+        ping();\n+\n+        List<Container> newContainers = getKafkaContainersExcludingExisting(started);\n+\n+        // We expect 1 new containers, since test was not refreshed.\n+        // On some VMs that's what we get, but on others, a test-mode augmentation happens, and then we get two containers\n+        assertEquals(1, newContainers.size(),\n+                \"There were \" + newContainers.size() + \" new containers, and should have been 1 or 2. New containers: \"\n+                        + prettyPrintContainerList(newContainers)\n+                        + \"\\n Old containers: \" + prettyPrintContainerList(started) + \"\\n All containers: \"\n+                        + prettyPrintContainerList(getAllContainers())); // this can be wrong\n+        // We need to inspect the dev-mode container; we don't have a non-brittle way of distinguishing them, so just look in them all\n+        boolean hasRightPort = newContainers.stream()\n+                .anyMatch(newContainer -> hasPublicPort(newContainer, newPort));\n+        assertTrue(hasRightPort,\n+                \"Expected port \" + newPort + \", but got: \"\n+                        + newContainers.stream().map(c -> Arrays.toString(c.getPorts())).collect(Collectors.joining(\", \")));\n+    }\n+\n+    @Test\n+    public void testDevModeServiceDoesNotRestartContainersOnCodeChange() {\n+        ping();\n+        List<Container> started = getKafkaContainers();\n+\n+        assertFalse(started.isEmpty());\n+        Container container = started.get(0);\n+        assertTrue(Arrays.stream(container.getPorts()).noneMatch(p -> p.getPublicPort() == 6377),\n+                \"Expected random port 6377, but got: \" + Arrays.toString(container.getPorts()));\n+\n+        // Make a change that shouldn't affect dev services\n+        test.modifySourceFile(BundledEndpoint.class, s -> s.replaceAll(\"topic\", \"tropic\"));\n+\n+        ping();\n+\n+        List<Container> newContainers = getKafkaContainersExcludingExisting(started);\n+\n+        // No new containers should have spawned\n+        assertEquals(0, newContainers.size(),\n+                \"New containers: \" + newContainers + \"\\n Old containers: \" + started + \"\\n All containers: \"\n+                        + getAllContainers()); // this can be wrong\n+    }\n+\n+    @Test\n+    public void testDevModeKeepsSameInstanceWhenRefreshedOnSecondChange() {\n+        // Step 1: Ensure we have a dev service running\n+        System.out.println(\"Step 1: Ensure we have a dev service running\");\n+        ping();\n+        List<Container> step1Containers = getKafkaContainers();\n+        assertFalse(step1Containers.isEmpty());\n+        Container container = step1Containers.get(0);\n+        assertFalse(hasPublicPort(container, 6377));\n+\n+        // Step 2: Make a change that should affect dev services\n+        System.out.println(\"Step 2: Make a change that should affect dev services\");\n+        int someFixedPort = 36377;\n+        // Make a change that SHOULD affect dev services\n+        test.modifyResourceFile(\"application.properties\",\n+                s -> s\n+                        + \"quarkus.kafka.devservices.port=\" + someFixedPort + \"\\n\");\n+\n+        ping();\n+\n+        List<Container> step2Containers = getKafkaContainersExcludingExisting(step1Containers);\n+\n+        // New containers should have spawned\n+        assertEquals(1, step2Containers.size(),\n+                \"New containers: \" + step2Containers + \"\\n Old containers: \" + step1Containers + \"\\n All containers: \"\n+                        + getAllContainers());\n+\n+        assertTrue(hasPublicPort(step2Containers.get(0), someFixedPort));\n+\n+        // Step 3: Now change back to a random port, which should cause a new container to spawn\n+        System.out.println(\"Step 3: Now change back to a random port, which should cause a new container to spawn\");\n+        test.modifyResourceFile(\"application.properties\",\n+                s -> s.replaceAll(\"quarkus.kafka.devservices.port=\" + someFixedPort, \"\"));\n+\n+        ping();\n+\n+        List<Container> step3Containers = getKafkaContainersExcludingExisting(step2Containers);\n+\n+        // New containers should have spawned\n+        assertEquals(1, step3Containers.size(),\n+                \"New containers: \" + step3Containers + \"\\n Old containers: \" + step2Containers + \"\\n All containers: \"\n+                        + getAllContainers());\n+\n+        // Step 4: Now make a change that should not affect dev services\n+        System.out.println(\"Step 4: Now make a change that should not affect dev services\");\n+        test.modifySourceFile(BundledEndpoint.class, s -> s.replaceAll(\"topic\", \"tropic\"));\n+\n+        ping();\n+\n+        List<Container> step4Containers = getKafkaContainersExcludingExisting(step3Containers);\n+\n+        // No new containers should have spawned\n+        assertEquals(0, step4Containers.size(),\n+                \"New containers: \" + step4Containers + \"\\n Old containers: \" + step3Containers + \"\\n All containers: \"\n+                        + getAllContainers()); // this can be wrong\n+\n+        // Step 5: Now make a change that should not affect dev services, but is not the same as the previous change\n+        System.out.println(\n+                \"Step 5: Now make a change that should not affect dev services, but is not the same as the previous change\");\n+        test.modifySourceFile(BundledEndpoint.class, s -> s.replaceAll(\"tropic\", \"topic\"));\n+\n+        ping();\n+\n+        List<Container> step5Containers = getKafkaContainersExcludingExisting(step3Containers);\n+\n+        // No new containers should have spawned\n+        assertEquals(0, step5Containers.size(),\n+                \"New containers: \" + step5Containers + \"\\n Old containers: \" + step5Containers + \"\\n All containers: \"\n+                        + getAllContainers()); // this can be wrong\n+    }\n+\n+    private static List<Container> getAllContainers() {\n+        return DockerClientFactory.lazyClient().listContainersCmd().exec().stream()\n+                .filter(container -> isKafkaContainer(container)).toList();\n+    }\n+\n+    private static List<Container> getKafkaContainers() {\n+        return getAllContainers();\n+    }\n+\n+    private static List<Container> getKafkaContainersExcludingExisting(Collection<Container> existingContainers) {\n+        return getKafkaContainers().stream().filter(\n+                container -> existingContainers.stream().noneMatch(existing -> existing.getId().equals(container.getId())))\n+                .toList();\n+    }\n+\n+    private static List<Container> getAllContainersExcludingExisting(Collection<Container> existingContainers) {\n+        return getAllContainers().stream().filter(\n+                container -> existingContainers.stream().noneMatch(existing -> existing.getId().equals(container.getId())))\n+                .toList();\n+    }\n+\n+    private static boolean isKafkaContainer(Container container) {\n+        // This could be redpanda or kafka-native or other variants\n+        return container.getImage().contains(\"kafka\") || container.getImage().contains(\"redpanda\");\n+    }\n+\n+    private static String prettyPrintContainerList(List<Container> newContainers) {\n+        return newContainers.stream()\n+                .map(c -> Arrays.toString(c.getPorts()) + \" -- \" + Arrays.toString(c.getNames()) + \" -- \" + c.getLabels())\n+                .collect(Collectors.joining(\", \\n\"));\n+    }\n+\n+    private static boolean hasPublicPort(Container newContainer, int newPort) {\n+        return Arrays.stream(newContainer.getPorts()).anyMatch(p -> p.getPublicPort() == newPort);\n+    }\n+\n+    void ping() {\n+        when().get(\"/kafka/partitions/test\").then()\n+                .statusCode(200)\n+                .body(is(\"2\"));\n+    }\n+\n+}\n\ndiff --git a/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/continuoustesting/DevServicesKafkaContinuousTestingTest.java b/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/continuoustesting/DevServicesKafkaContinuousTestingTest.java\nnew file mode 100644\nindex 0000000000000..27ddae59d1372\n--- /dev/null\n+++ b/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/continuoustesting/DevServicesKafkaContinuousTestingTest.java\n@@ -0,0 +1,268 @@\n+package io.quarkus.it.kafka.continuoustesting;\n+\n+import static io.restassured.RestAssured.when;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.testcontainers.DockerClientFactory;\n+\n+import com.github.dockerjava.api.DockerClient;\n+import com.github.dockerjava.api.model.Container;\n+import com.github.dockerjava.api.model.ContainerPort;\n+\n+import io.quarkus.it.kafka.BundledEndpoint;\n+import io.quarkus.it.kafka.KafkaAdminManager;\n+import io.quarkus.it.kafka.KafkaAdminTest;\n+import io.quarkus.test.ContinuousTestingTestUtils;\n+import io.quarkus.test.QuarkusDevModeTest;\n+\n+/**\n+ * Note that if this test is specifically selected on the command line with -Dtest=DevServicesKafkaContinuousTestingTest, that\n+ * will override the maven executions and cause it to run twice.\n+ * That doesn't help debug anything.\n+ */\n+public class DevServicesKafkaContinuousTestingTest {\n+\n+    static final String DEVSERVICES_DISABLED_PROPERTIES = ContinuousTestingTestUtils.appProperties(\n+            \"quarkus.devservices.enabled=false\");\n+\n+    static final String FIXED_PORT_PROPERTIES = ContinuousTestingTestUtils.appProperties(\n+            \"quarkus.kafka.devservices.port=6377\");\n+\n+    static final String UPDATED_FIXED_PORT_PROPERTIES = ContinuousTestingTestUtils.appProperties(\n+            \"quarkus.kafka.devservices.port=6342\");\n+\n+    @RegisterExtension\n+    public static QuarkusDevModeTest test = new QuarkusDevModeTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClass(BundledEndpoint.class)\n+                    .addClass(KafkaAdminManager.class)\n+                    .addAsResource(\n+                            new StringAsset(ContinuousTestingTestUtils\n+                                    .appProperties(\"quarkus.kafka.devservices.provider=kafka-native\",\n+                                            \"quarkus.kafka.devservices.topic-partitions.test=2\",\n+                                            \"quarkus.kafka.devservices.topic-partitions.test-consumer=3\",\n+                                            \"quarkus.kafka.health.enabled=true\",\n+                                            \"quarkus.kafka.devservices.provider=kafka-native\")),\n+                            \"application.properties\"))\n+            .setTestArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class).addClass(KafkaAdminTest.class));\n+\n+    @AfterAll\n+    static void afterAll() {\n+        stopAllContainers();\n+    }\n+\n+    @Disabled(\"Not currently working\")\n+    @Test\n+    public void testContinuousTestingDisablesDevServicesWhenPropertiesChange() {\n+        ContinuousTestingTestUtils utils = new ContinuousTestingTestUtils();\n+        var result = utils.waitForNextCompletion();\n+        assertEquals(1, result.getTotalTestsPassed());\n+        assertEquals(0, result.getTotalTestsFailed());\n+\n+        // Now let's disable dev services globally ... BOOOOOM! Splat!\n+        test.modifyResourceFile(\"application.properties\", s -> DEVSERVICES_DISABLED_PROPERTIES);\n+        result = utils.waitForNextCompletion();\n+        assertEquals(0, result.getTotalTestsPassed());\n+        assertEquals(1, result.getTotalTestsFailed());\n+\n+        // We could check the container goes away, but we'd have to check slowly, because ryuk can be slow\n+    }\n+\n+    // This tests behaviour in dev mode proper when combined with continuous testing. This creates a possibility of port conflicts, false sharing of state, and all sorts of race conditions.\n+    @Test\n+    public void testDevModeCoexistingWithContinuousTestingServiceUpdatesContainersOnConfigChange() {\n+        // Note that driving continuous testing concurrently can sometimes cause 500s caused by containers not yet being available on slow machines\n+        ContinuousTestingTestUtils continuousTestingTestUtils = new ContinuousTestingTestUtils();\n+        ContinuousTestingTestUtils.TestStatus result = continuousTestingTestUtils.waitForNextCompletion();\n+        assertEquals(2, result.getTotalTestsPassed());\n+        assertEquals(0, result.getTotalTestsFailed());\n+        // Interacting with the app will force a refresh\n+        ping();\n+\n+        List<Container> started = getKafkaContainers();\n+        assertFalse(started.isEmpty());\n+        Container container = started.get(0);\n+        assertTrue(Arrays.stream(container.getPorts()).noneMatch(p -> p.getPublicPort() == 6377),\n+                \"Expected random port, but got: \" + Arrays.toString(container.getPorts()));\n+\n+        int newPort = 6388;\n+        int testPort = newPort + 1;\n+        // Continuous tests and dev mode should *not* share containers, even if the port is fixed\n+        // Specify that the fixed port is for dev mode, or one launch will fail with port conflicts\n+        test.modifyResourceFile(\"application.properties\",\n+                s -> s + \"\\n%dev.quarkus.kafka.devservices.port=\" + newPort\n+                        + \"\\n%test.quarkus.kafka.devservices.port=\" + testPort);\n+        test.modifyTestSourceFile(KafkaAdminTest.class, s -> s.replaceAll(\"test\\\\(\\\\) \", \"someTest()\"));\n+\n+        // Force another refresh\n+        result = continuousTestingTestUtils.waitForNextCompletion();\n+        assertEquals(2, result.getTotalTestsPassed());\n+        assertEquals(0, result.getTotalTestsFailed());\n+        ping();\n+\n+        List<Container> newContainers = getKafkaContainersExcludingExisting(started);\n+\n+        // We expect 2 new containers, since test was also refreshed\n+        assertEquals(2, newContainers.size(),\n+                \"New containers: \"\n+                        + prettyPrintContainerList(newContainers)\n+                        + \"\\n Old containers: \" + prettyPrintContainerList(started) + \"\\n All containers: \"\n+                        + prettyPrintContainerList(getAllContainers())); // this can be wrong\n+        // We need to inspect the dev-mode container; we don't have a non-brittle way of distinguishing them, so just look in them all\n+        boolean hasRightPort = newContainers.stream()\n+                .anyMatch(newContainer -> hasPublicPort(newContainer, newPort));\n+        assertTrue(hasRightPort,\n+                \"Expected port \" + newPort + \", but got: \"\n+                        + newContainers.stream().map(c -> Arrays.toString(c.getPorts())).collect(Collectors.joining(\", \")));\n+        boolean hasRightTestPort = newContainers.stream()\n+                .anyMatch(newContainer -> hasPublicPort(newContainer, testPort));\n+        assertTrue(hasRightTestPort,\n+                \"Expected port \" + testPort + \", but got: \"\n+                        + newContainers.stream().map(c -> Arrays.toString(c.getPorts())).collect(Collectors.joining(\", \")));\n+\n+    }\n+\n+    private static String prettyPrintContainerList(List<Container> newContainers) {\n+        return newContainers.stream()\n+                .map(c -> Arrays.toString(c.getPorts()) + \" -- \" + Arrays.toString(c.getNames()) + \" -- \" + c.getLabels())\n+                .collect(Collectors.joining(\", \\n\"));\n+    }\n+\n+    private static boolean hasPublicPort(Container newContainer, int newPort) {\n+        return Arrays.stream(newContainer.getPorts()).anyMatch(p -> p.getPublicPort() == newPort);\n+    }\n+\n+    void ping() {\n+        when().get(\"/kafka/partitions/test\").then()\n+                .statusCode(200)\n+                .body(is(\"2\"));\n+    }\n+\n+    @Test\n+    public void testContinuousTestingReusesInstanceWhenPropertiesAreNotChanged() {\n+\n+        ContinuousTestingTestUtils utils = new ContinuousTestingTestUtils();\n+        var result = utils.waitForNextCompletion();\n+        assertEquals(2, result.getTotalTestsPassed());\n+        assertEquals(0, result.getTotalTestsFailed());\n+        List<Container> kafkaContainers = getKafkaContainers();\n+\n+        // Make a change that shouldn't affect dev services\n+        test.modifyTestSourceFile(KafkaAdminTest.class, s -> s.replaceAll(\"test\\\\(\\\\)\", \"myTest()\"));\n+\n+        result = utils.waitForNextCompletion();\n+        assertEquals(2, result.getTestsPassed());\n+        assertEquals(0, result.getTestsFailed());\n+\n+        // Some containers could have disappeared, because ryuk cleaned them up, but no new containers should have appeared\n+        List<Container> newContainers = getKafkaContainersExcludingExisting(kafkaContainers);\n+        assertEquals(0, newContainers.size(),\n+                \"New containers: \" + newContainers + \"\\n Old containers: \" + kafkaContainers + \"\\n All containers: \"\n+                        + getAllContainers());\n+    }\n+\n+    @Disabled(\"Image change is not working, should be fixed by https://github.com/quarkusio/quarkus/issues/47627\")\n+    @Test\n+    public void testContinuousTestingCreatesANewInstanceWhenPropertiesAreChanged() {\n+\n+        ContinuousTestingTestUtils utils = new ContinuousTestingTestUtils();\n+        var result = utils.waitForNextCompletion();\n+        assertEquals(2, result.getTotalTestsPassed());\n+        assertEquals(0, result.getTotalTestsFailed());\n+        List<Container> existingContainers = new ArrayList<>();\n+        existingContainers.addAll(getKafkaContainers());\n+\n+        test.modifyResourceFile(\"application.properties\", s -> s.replaceAll(\"kafka-native\", \"Redpanda\"));\n+\n+        result = utils.waitForNextCompletion();\n+        assertEquals(2, result.getTestsPassed());\n+        assertEquals(0, result.getTestsFailed());\n+\n+        // A new container should have appeared\n+        {\n+            List<Container> newContainers = getKafkaContainersExcludingExisting(existingContainers);\n+            existingContainers.addAll(newContainers);\n+            assertEquals(1, newContainers.size(),\n+                    \"New containers: \" + newContainers + \"\\n Old containers: \" + existingContainers + \"\\n All containers: \"\n+                            + getAllContainers());\n+\n+            // The new container should be on the new port\n+            List<Integer> ports = Arrays.stream(newContainers.get(0).getPorts())\n+                    .map(ContainerPort::getPublicPort)\n+                    .toList();\n+\n+            // Oh good, it's one port, so it should be the expected one\n+            assertTrue(ports.contains(6377), \"Container ports: \" + ports);\n+        }\n+        test.modifyResourceFile(\"application.properties\", s -> UPDATED_FIXED_PORT_PROPERTIES);\n+\n+        result = utils.waitForNextCompletion();\n+        assertEquals(1, result.getTestsPassed());\n+        assertEquals(0, result.getTestsFailed());\n+\n+        // Another new container should have appeared\n+\n+        {\n+            List<Container> newContainers = getKafkaContainersExcludingExisting(existingContainers);\n+            assertEquals(1, newContainers.size(),\n+                    \"New containers: \" + newContainers + \"\\n Old containers: \" + existingContainers + \"\\n All containers: \"\n+                            + getAllContainers());\n+\n+            // The new container should be on the new port\n+            List<Integer> ports = Arrays.stream(newContainers.get(0).getPorts())\n+                    .map(ContainerPort::getPublicPort)\n+                    .toList();\n+            assertTrue(ports.contains(6342), \"Container ports: \" + ports);\n+\n+        }\n+    }\n+\n+    private static List<Container> getAllContainers() {\n+        return DockerClientFactory.lazyClient().listContainersCmd().exec().stream()\n+                .filter(container -> isKafkaContainer(container)).toList();\n+    }\n+\n+    private static void stopAllContainers() {\n+        DockerClient dockerClient = DockerClientFactory.lazyClient();\n+        dockerClient.listContainersCmd().exec().stream()\n+                .filter(DevServicesKafkaContinuousTestingTest::isKafkaContainer)\n+                .forEach(c -> dockerClient.stopContainerCmd(c.getId()).exec());\n+    }\n+\n+    private static List<Container> getKafkaContainers() {\n+        return getAllContainers();\n+    }\n+\n+    private static List<Container> getKafkaContainersExcludingExisting(Collection<Container> existingContainers) {\n+        return getKafkaContainers().stream().filter(\n+                container -> existingContainers.stream().noneMatch(existing -> existing.getId().equals(container.getId())))\n+                .toList();\n+    }\n+\n+    private static List<Container> getAllContainersExcludingExisting(Collection<Container> existingContainers) {\n+        return getAllContainers().stream().filter(\n+                container -> existingContainers.stream().noneMatch(existing -> existing.getId().equals(container.getId())))\n+                .toList();\n+    }\n+\n+    private static boolean isKafkaContainer(Container container) {\n+        // The output of getCommand() seems to vary by host OS (it's different on CI and mac), but the image name should be reliable\n+        return container.getImage().contains(\"kafka\");\n+    }\n+}\n\ndiff --git a/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/devservices/profiles/DevServiceKafka.java b/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/devservices/profiles/DevServiceKafka.java\nnew file mode 100644\nindex 0000000000000..1ae01762fa0df\n--- /dev/null\n+++ b/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/devservices/profiles/DevServiceKafka.java\n@@ -0,0 +1,14 @@\n+package io.quarkus.it.kafka.devservices.profiles;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import io.quarkus.test.junit.QuarkusTestProfile;\n+\n+public class DevServiceKafka implements QuarkusTestProfile {\n+\n+    @Override\n+    public Map<String, String> getConfigOverrides() {\n+        return Collections.singletonMap(\"quarkus.kafka.devservices.port\", \"6379\");\n+    }\n+}\n\ndiff --git a/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/devservices/profiles/DevServicesCustomPortProfile.java b/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/devservices/profiles/DevServicesCustomPortProfile.java\nnew file mode 100644\nindex 0000000000000..5ca71b20e97d4\n--- /dev/null\n+++ b/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/devservices/profiles/DevServicesCustomPortProfile.java\n@@ -0,0 +1,21 @@\n+package io.quarkus.it.kafka.devservices.profiles;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import io.quarkus.test.junit.QuarkusTestProfile;\n+\n+public class DevServicesCustomPortProfile implements QuarkusTestProfile {\n+\n+    public static final String PORT = \"5050\";\n+\n+    @Override\n+    public Map<String, String> getConfigOverrides() {\n+        return Collections.singletonMap(\"quarkus.kafka.devservices.port\", PORT);\n+    }\n+\n+    @Override\n+    public String getConfigProfile() {\n+        return \"test\";\n+    }\n+}\n\ndiff --git a/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/devservices/profiles/DevServicesCustomPortReusableServiceProfile.java b/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/devservices/profiles/DevServicesCustomPortReusableServiceProfile.java\nnew file mode 100644\nindex 0000000000000..7354d753fd676\n--- /dev/null\n+++ b/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/devservices/profiles/DevServicesCustomPortReusableServiceProfile.java\n@@ -0,0 +1,15 @@\n+package io.quarkus.it.kafka.devservices.profiles;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import io.quarkus.test.junit.QuarkusTestProfile;\n+\n+public class DevServicesCustomPortReusableServiceProfile implements QuarkusTestProfile {\n+\n+    @Override\n+    public Map<String, String> getConfigOverrides() {\n+        // This is a distinct profile, but its config should be identical to the custom port profile, so the dev service can be the same\n+        return Collections.singletonMap(\"quarkus.kafka.devservices.port\", DevServicesCustomPortProfile.PORT);\n+    }\n+}\n\ndiff --git a/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/devservices/profiles/DevServicesDisabledProfile.java b/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/devservices/profiles/DevServicesDisabledProfile.java\nnew file mode 100644\nindex 0000000000000..6ba44101f5003\n--- /dev/null\n+++ b/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/devservices/profiles/DevServicesDisabledProfile.java\n@@ -0,0 +1,19 @@\n+package io.quarkus.it.kafka.devservices.profiles;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import io.quarkus.test.junit.QuarkusTestProfile;\n+\n+public class DevServicesDisabledProfile implements QuarkusTestProfile {\n+\n+    @Override\n+    public Map<String, String> getConfigOverrides() {\n+        return Collections.singletonMap(\"quarkus.kafka.devservices.enabled\", \"false\");\n+    }\n+\n+    @Override\n+    public String getConfigProfile() {\n+        return \"test\";\n+    }\n+}\n\ndiff --git a/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/devservices/profiles/DevServicesNonUniquePortProfile.java b/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/devservices/profiles/DevServicesNonUniquePortProfile.java\nnew file mode 100644\nindex 0000000000000..c0614cafcaa11\n--- /dev/null\n+++ b/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/devservices/profiles/DevServicesNonUniquePortProfile.java\n@@ -0,0 +1,19 @@\n+package io.quarkus.it.kafka.devservices.profiles;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import io.quarkus.test.junit.QuarkusTestProfile;\n+\n+public class DevServicesNonUniquePortProfile implements QuarkusTestProfile {\n+\n+    @Override\n+    public Map<String, String> getConfigOverrides() {\n+        // Set an image, both for coverage, and so we know we're connecting to the right service\n+        Map<String, String> overrides = new HashMap<>();\n+        overrides.put(\"quarkus.kafka.devservices.port\", \"5050\");\n+        // Choose an image which is different what other tests use, so we can identify we're running on it\n+        overrides.put(\"quarkus.kafka.devservices.provider\", \"Redpanda\");\n+        return overrides;\n+    }\n+}\n\ndiff --git a/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/devservices/profiles/DevServicesRandomPortProfile.java b/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/devservices/profiles/DevServicesRandomPortProfile.java\nnew file mode 100644\nindex 0000000000000..a5f04733d36d4\n--- /dev/null\n+++ b/integration-tests/kafka-devservices/src/test/java/io/quarkus/it/kafka/devservices/profiles/DevServicesRandomPortProfile.java\n@@ -0,0 +1,15 @@\n+package io.quarkus.it.kafka.devservices.profiles;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import io.quarkus.test.junit.QuarkusTestProfile;\n+\n+public class DevServicesRandomPortProfile implements QuarkusTestProfile {\n+\n+    @Override\n+    public Map<String, String> getConfigOverrides() {\n+        // Don't set a port, to exercise the random port path\n+        return Collections.emptyMap();\n+    }\n+}\n\ndiff --git a/integration-tests/redis-devservices/src/test/java/io/quarkus/redis/devservices/it/DevServicesRedisCustomPortITest.java b/integration-tests/redis-devservices/src/test/java/io/quarkus/redis/devservices/it/DevServicesRedisCustomPortITest.java\nindex 004bc4430cfaf..151a98b477520 100644\n--- a/integration-tests/redis-devservices/src/test/java/io/quarkus/redis/devservices/it/DevServicesRedisCustomPortITest.java\n+++ b/integration-tests/redis-devservices/src/test/java/io/quarkus/redis/devservices/it/DevServicesRedisCustomPortITest.java\n@@ -5,9 +5,9 @@\n import org.junit.jupiter.api.Test;\n \n import io.quarkus.redis.devservices.it.profiles.DevServicesCustomPortProfile;\n-import io.quarkus.redis.devservices.it.utils.SocketKit;\n import io.quarkus.test.junit.QuarkusTest;\n import io.quarkus.test.junit.TestProfile;\n+import io.quarkus.test.ports.SocketKit;\n \n @QuarkusTest\n @TestProfile(DevServicesCustomPortProfile.class)\n\ndiff --git a/integration-tests/redis-devservices/src/test/java/io/quarkus/redis/devservices/it/DevServicesRedisCustomPortReusableServiceITest.java b/integration-tests/redis-devservices/src/test/java/io/quarkus/redis/devservices/it/DevServicesRedisCustomPortReusableServiceITest.java\nindex 9180b4fcb18ca..e1d7b74e8f98f 100644\n--- a/integration-tests/redis-devservices/src/test/java/io/quarkus/redis/devservices/it/DevServicesRedisCustomPortReusableServiceITest.java\n+++ b/integration-tests/redis-devservices/src/test/java/io/quarkus/redis/devservices/it/DevServicesRedisCustomPortReusableServiceITest.java\n@@ -5,9 +5,9 @@\n import org.junit.jupiter.api.Test;\n \n import io.quarkus.redis.devservices.it.profiles.DevServicesCustomPortReusableServiceProfile;\n-import io.quarkus.redis.devservices.it.utils.SocketKit;\n import io.quarkus.test.junit.QuarkusTest;\n import io.quarkus.test.junit.TestProfile;\n+import io.quarkus.test.ports.SocketKit;\n \n @QuarkusTest\n @TestProfile(DevServicesCustomPortReusableServiceProfile.class)\n\ndiff --git a/integration-tests/redis-devservices/src/test/java/io/quarkus/redis/devservices/it/DevServicesRedisITest.java b/integration-tests/redis-devservices/src/test/java/io/quarkus/redis/devservices/it/DevServicesRedisITest.java\nindex 3189dd1d733dc..7587841c2e56b 100644\n--- a/integration-tests/redis-devservices/src/test/java/io/quarkus/redis/devservices/it/DevServicesRedisITest.java\n+++ b/integration-tests/redis-devservices/src/test/java/io/quarkus/redis/devservices/it/DevServicesRedisITest.java\n@@ -11,9 +11,9 @@\n \n import io.quarkus.redis.client.RedisClient;\n import io.quarkus.redis.devservices.it.profiles.DevServiceRedis;\n-import io.quarkus.redis.devservices.it.utils.SocketKit;\n import io.quarkus.test.junit.QuarkusTest;\n import io.quarkus.test.junit.TestProfile;\n+import io.quarkus.test.ports.SocketKit;\n \n @QuarkusTest\n @TestProfile(DevServiceRedis.class)\n\ndiff --git a/integration-tests/redis-devservices/src/test/java/io/quarkus/redis/devservices/it/utils/SocketKit.java b/test-framework/junit5-internal/src/main/java/io/quarkus/test/ports/SocketKit.java\nsimilarity index 72%\nrename from integration-tests/redis-devservices/src/test/java/io/quarkus/redis/devservices/it/utils/SocketKit.java\nrename to test-framework/junit5-internal/src/main/java/io/quarkus/test/ports/SocketKit.java\nindex 58bb62a0de7b5..95e7d13ed4773 100644\n--- a/integration-tests/redis-devservices/src/test/java/io/quarkus/redis/devservices/it/utils/SocketKit.java\n+++ b/test-framework/junit5-internal/src/main/java/io/quarkus/test/ports/SocketKit.java\n@@ -1,11 +1,11 @@\n-package io.quarkus.redis.devservices.it.utils;\n+package io.quarkus.test.ports;\n \n import java.io.IOException;\n import java.net.Socket;\n \n public class SocketKit {\n \n-    public static boolean isPortAlreadyUsed(Integer port) {\n+    public static boolean isPortAlreadyUsed(int port) {\n         try (Socket ignored = new Socket(\"localhost\", port)) {\n             ignored.close();\n             return true;\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48552",
    "pr_id": 48552,
    "issue_id": 48299,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Allow custom image registry for Kubernetes dev service\n### Description\n\nIn more restrictive environments, local registry mirrors may need to be used, rather than direct access to docker.io. It would be useful to be able to specify a custom image registry to pull from, rather than have it automatically constructed from the flavour and version.\n\nThis would probably take the form of a new configuration value such as:\n`quarkus.kubernetes-client.devservices.image-name=my.registry.io/rancher/k3s:v1.33.1-k3s1`\n\n### Implementation ideas\n\n_No response_",
    "issue_word_count": 87,
    "test_files_count": 1,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "docs/src/main/asciidoc/kubernetes-dev-services.adoc",
      "extensions/kubernetes-client/deployment/src/main/java/io/quarkus/kubernetes/client/deployment/DevServicesKubernetesProcessor.java",
      "extensions/kubernetes-client/runtime-internal/src/main/java/io/quarkus/kubernetes/client/runtime/internal/KubernetesDevServicesBuildTimeConfig.java",
      "integration-tests/kubernetes-client-devservices/src/test/java/io/quarkus/kubernetes/client/devservices/it/profiles/DevServiceKubernetes.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/kubernetes-client-devservices/src/test/java/io/quarkus/kubernetes/client/devservices/it/profiles/DevServiceKubernetes.java"
    ],
    "base_commit": "663e799c25cfdaca7a49140d5f46a05122fa898e",
    "head_commit": "b209439c124e0e847391a5ae0cacf63ce131736e",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48552",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48552",
    "dockerfile": "",
    "pr_merged_at": "2025-06-25T13:05:42.000Z",
    "patch": "diff --git a/docs/src/main/asciidoc/kubernetes-dev-services.adoc b/docs/src/main/asciidoc/kubernetes-dev-services.adoc\nindex 7fef2a0fff2df..864da4d6e5135 100644\n--- a/docs/src/main/asciidoc/kubernetes-dev-services.adoc\n+++ b/docs/src/main/asciidoc/kubernetes-dev-services.adoc\n@@ -55,6 +55,15 @@ quarkus.kubernetes-client.devservices.flavor=api-only # k3s or kind\n quarkus.kubernetes-client.devservices.api-version=1.22\n ----\n \n+You can also configure a custom image compatible with standard images (kind, k3s & api-server) using the `quarkus.kubernetes-client.devservices.image-name` property. However, it must be consistent with the flavor and api-version properties:\n+\n+[source, properties]\n+----\n+quarkus.kubernetes-client.devservices.flavor=api-only # k3s or kind\n+quarkus.kubernetes-client.devservices.api-version=1.24.1\n+quarkus.kubernetes-client.devservices.image-name=quay.io/giantswarm/kube-apiserver:v1.24.1\n+----\n+\n `api-only` only starts a Kubernetes API Server (plus the required etcd). If you need a fully-featured Kubernetes cluster that can spin up Pods, you can use `k3s` or `kind`. `k3s` requires to start the container with `privileged mode`. The `kind` test container now also supports using podman's rootless mode.\n \n If `api-version` is not set, the latest version for the given flavor will be used. Otherwise, the version must match a https://github.com/dajudge/kindcontainer/blob/master/k8s-versions.json[version supported by the given flavor].\n\ndiff --git a/extensions/kubernetes-client/deployment/src/main/java/io/quarkus/kubernetes/client/deployment/DevServicesKubernetesProcessor.java b/extensions/kubernetes-client/deployment/src/main/java/io/quarkus/kubernetes/client/deployment/DevServicesKubernetesProcessor.java\nindex 3e0b9f0ba31f7..c1df02a137d80 100644\n--- a/extensions/kubernetes-client/deployment/src/main/java/io/quarkus/kubernetes/client/deployment/DevServicesKubernetesProcessor.java\n+++ b/extensions/kubernetes-client/deployment/src/main/java/io/quarkus/kubernetes/client/deployment/DevServicesKubernetesProcessor.java\n@@ -17,6 +17,7 @@\n import java.util.Map;\n import java.util.Objects;\n import java.util.Optional;\n+import java.util.function.Function;\n import java.util.function.Supplier;\n import java.util.stream.Collectors;\n \n@@ -30,6 +31,8 @@\n import com.dajudge.kindcontainer.K3sContainerVersion;\n import com.dajudge.kindcontainer.KindContainer;\n import com.dajudge.kindcontainer.KindContainerVersion;\n+import com.dajudge.kindcontainer.KubernetesContainer;\n+import com.dajudge.kindcontainer.KubernetesImageSpec;\n import com.dajudge.kindcontainer.KubernetesVersionEnum;\n import com.dajudge.kindcontainer.client.KubeConfigUtils;\n import com.dajudge.kindcontainer.client.config.Cluster;\n@@ -225,18 +228,12 @@ private RunningDevService startKubernetes(DockerStatusBuildItem dockerStatusBuil\n                     .orElse(api_only);\n \n             @SuppressWarnings(\"rawtypes\")\n-            final var container = switch (clusterType) {\n-                case api_only -> new ApiServerContainer(\n-                        config.apiVersion\n-                                .map(version -> findOrElseThrow(clusterType, version, ApiServerContainerVersion.class))\n-                                .orElseGet(() -> latest(ApiServerContainerVersion.class)));\n-                case k3s -> new K3sContainer(\n-                        config.apiVersion.map(version -> findOrElseThrow(clusterType, version, K3sContainerVersion.class))\n-                                .orElseGet(() -> latest(K3sContainerVersion.class)));\n-                case kind -> new KindContainer(\n-                        config.apiVersion\n-                                .map(version -> findOrElseThrow(clusterType, version, KindContainerVersion.class))\n-                                .orElseGet(() -> latest(KindContainerVersion.class)));\n+            KubernetesContainer container = switch (clusterType) {\n+                case api_only -> createContainer(ApiServerContainer::new, ApiServerContainerVersion.class, config, clusterType);\n+\n+                case k3s -> createContainer(K3sContainer::new, K3sContainerVersion.class, config, clusterType);\n+\n+                case kind -> createContainer(KindContainer::new, KindContainerVersion.class, config, clusterType);\n             };\n \n             if (useSharedNetwork) {\n@@ -270,7 +267,21 @@ private RunningDevService startKubernetes(DockerStatusBuildItem dockerStatusBuil\n                 .orElseGet(defaultKubernetesClusterSupplier);\n     }\n \n-    <T extends KubernetesVersionEnum<T>> T findOrElseThrow(final Flavor flavor, final String version,\n+    @SuppressWarnings(\"rawtypes\")\n+    private <T extends KubernetesVersionEnum<T>, C extends KubernetesContainer> C createContainer(\n+            Function<KubernetesImageSpec<T>, C> constructor,\n+            Class<T> versionClass,\n+            KubernetesDevServiceCfg config,\n+            Flavor flavor) {\n+        T version = config.apiVersion\n+                .map(v -> findOrElseThrow(flavor, v, versionClass))\n+                .orElseGet(() -> latest(versionClass));\n+\n+        KubernetesImageSpec<T> imageSpec = version.withImage(config.imageName);\n+        return constructor.apply(imageSpec);\n+    }\n+\n+    private <T extends KubernetesVersionEnum<T>> T findOrElseThrow(final Flavor flavor, final String version,\n             final Class<T> versions) {\n         final String versionWithPrefix = !version.startsWith(\"v\") ? \"v\" + version : version;\n         return KubernetesVersionEnum.ascending(versions)\n@@ -315,6 +326,7 @@ private KubernetesDevServiceCfg getConfiguration(KubernetesClientBuildConfig cfg\n     private static final class KubernetesDevServiceCfg {\n \n         public boolean devServicesEnabled;\n+        public String imageName;\n         public Optional<Flavor> flavor;\n         public Optional<String> apiVersion;\n         public boolean overrideKubeconfig;\n@@ -324,6 +336,8 @@ private static final class KubernetesDevServiceCfg {\n \n         public KubernetesDevServiceCfg(KubernetesDevServicesBuildTimeConfig config) {\n             this.devServicesEnabled = config.enabled();\n+            this.imageName = config.imageName()\n+                    .orElse(null);\n             this.serviceName = config.serviceName();\n             this.apiVersion = config.apiVersion();\n             this.overrideKubeconfig = config.overrideKubeconfig();\n@@ -334,7 +348,8 @@ public KubernetesDevServiceCfg(KubernetesDevServicesBuildTimeConfig config) {\n \n         @Override\n         public int hashCode() {\n-            return Objects.hash(devServicesEnabled, flavor, apiVersion, overrideKubeconfig, shared, serviceName, containerEnv);\n+            return Objects.hash(devServicesEnabled, imageName, flavor, apiVersion, overrideKubeconfig, shared, serviceName,\n+                    containerEnv);\n         }\n \n         @Override\n\ndiff --git a/extensions/kubernetes-client/runtime-internal/src/main/java/io/quarkus/kubernetes/client/runtime/internal/KubernetesDevServicesBuildTimeConfig.java b/extensions/kubernetes-client/runtime-internal/src/main/java/io/quarkus/kubernetes/client/runtime/internal/KubernetesDevServicesBuildTimeConfig.java\nindex a815e2d81e7a5..c82ed8f0888b8 100644\n--- a/extensions/kubernetes-client/runtime-internal/src/main/java/io/quarkus/kubernetes/client/runtime/internal/KubernetesDevServicesBuildTimeConfig.java\n+++ b/extensions/kubernetes-client/runtime-internal/src/main/java/io/quarkus/kubernetes/client/runtime/internal/KubernetesDevServicesBuildTimeConfig.java\n@@ -26,6 +26,15 @@ public interface KubernetesDevServicesBuildTimeConfig {\n      */\n     Optional<String> apiVersion();\n \n+    /**\n+     * The kubernetes image to use.\n+     * <p>\n+     * If not set, Dev Services for Kubernetes will use default image for the specified {@link #apiVersion()} for the given\n+     * {@link #flavor()}.\n+     */\n+\n+    Optional<String> imageName();\n+\n     /**\n      * The flavor to use (kind, k3s or api-only).\n      * <p>\n",
    "test_patch": "diff --git a/integration-tests/kubernetes-client-devservices/src/test/java/io/quarkus/kubernetes/client/devservices/it/profiles/DevServiceKubernetes.java b/integration-tests/kubernetes-client-devservices/src/test/java/io/quarkus/kubernetes/client/devservices/it/profiles/DevServiceKubernetes.java\nindex df99a5694fefa..ea748e4e395e5 100644\n--- a/integration-tests/kubernetes-client-devservices/src/test/java/io/quarkus/kubernetes/client/devservices/it/profiles/DevServiceKubernetes.java\n+++ b/integration-tests/kubernetes-client-devservices/src/test/java/io/quarkus/kubernetes/client/devservices/it/profiles/DevServiceKubernetes.java\n@@ -1,6 +1,5 @@\n package io.quarkus.kubernetes.client.devservices.it.profiles;\n \n-import java.util.Collections;\n import java.util.Map;\n \n import io.quarkus.test.junit.QuarkusTestProfile;\n@@ -12,6 +11,8 @@ public class DevServiceKubernetes implements QuarkusTestProfile {\n     @Override\n     public Map<String, String> getConfigOverrides() {\n \n-        return Collections.singletonMap(\"quarkus.kubernetes-client.devservices.api-version\", API_VERSION);\n+        return Map.of(\"quarkus.kubernetes-client.devservices.api-version\", API_VERSION,\n+                \"quarkus.kubernetes-client.devservices.image-name\",\n+                \"quay.io/giantswarm/kube-apiserver:v%s\".formatted(API_VERSION));\n     }\n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48529",
    "pr_id": 48529,
    "issue_id": 40358,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Support specifying multiple tenants in @TenantFeature\n### Description\r\n\r\nCurrently, only one tenant can be specified in `@TenantFeature`. It would be nice to be able to specify multiple tenants instead of only one.\r\n\r\nFor example, apply custom Jose4j validator on two tenants:\r\n\r\n```java\r\n@TenantFeature({\"tenant1\", \"tenant2\"})\r\n@ApplicationScoped\r\npublic class CustomValidator implements Validator {\r\n    @Override\r\n    public String validate(JwtContext jwtContext) throws MalformedClaimException {\r\n        return null; // TODO\r\n    }\r\n}\r\n```\r\n\r\n### Implementation ideas\r\n\r\nChange:\r\n\r\n```\r\nString value();\r\n```\r\n\r\nto\r\n\r\n```\r\nString[] value();\r\n```\r\n\r\nand it is backward compatible as `@TenantFeature(\"foo\")` works with both `String value()` and `String[] value()`.",
    "issue_word_count": 85,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "extensions/oidc/deployment/src/test/java/io/quarkus/oidc/test/TokenCustomizersTest.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/TenantFeature.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantFeatureFinder.java"
    ],
    "pr_changed_test_files": [
      "extensions/oidc/deployment/src/test/java/io/quarkus/oidc/test/TokenCustomizersTest.java"
    ],
    "base_commit": "12c75e033ed12c34e1abce3f3506a0e463352b31",
    "head_commit": "53ec88a5dd842815f72ea39bfa4728e897f8d0fb",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48529",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48529",
    "dockerfile": "",
    "pr_merged_at": "2025-06-23T09:12:00.000Z",
    "patch": "diff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/TenantFeature.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/TenantFeature.java\nindex 34126a84f21ad..e37f327bc7069 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/TenantFeature.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/TenantFeature.java\n@@ -10,11 +10,10 @@\n import java.lang.annotation.Retention;\n import java.lang.annotation.Target;\n \n-import jakarta.enterprise.util.AnnotationLiteral;\n import jakarta.inject.Qualifier;\n \n /**\n- * Qualifier used to specify which named tenant is associated with one or more OIDC feature.\n+ * Qualifier used to specify which named tenants are associated with one or more OIDC feature.\n  */\n @Target({ METHOD, FIELD, PARAMETER, TYPE })\n @Retention(RUNTIME)\n@@ -22,33 +21,8 @@\n @Qualifier\n public @interface TenantFeature {\n     /**\n-     * Identifies an OIDC tenant to which a given feature applies.\n+     * Identifies OIDC tenants to which a given feature applies.\n      */\n-    String value();\n+    String[] value();\n \n-    /**\n-     * Supports inline instantiation of the {@link TenantFeature} qualifier.\n-     */\n-    final class TenantFeatureLiteral extends AnnotationLiteral<TenantFeature> implements TenantFeature {\n-\n-        private final String value;\n-\n-        private TenantFeatureLiteral(String value) {\n-            this.value = value;\n-        }\n-\n-        @Override\n-        public String value() {\n-            return value;\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return \"TenantFeatureLiteral [value=\" + value + \"]\";\n-        }\n-\n-        public static TenantFeature of(String value) {\n-            return new TenantFeatureLiteral(value);\n-        }\n-    }\n }\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantFeatureFinder.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantFeatureFinder.java\nindex 53872cfa6d6e9..29945da804605 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantFeatureFinder.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantFeatureFinder.java\n@@ -1,9 +1,11 @@\n package io.quarkus.oidc.runtime;\n \n+import java.lang.annotation.Annotation;\n import java.util.ArrayList;\n import java.util.List;\n \n-import jakarta.enterprise.inject.Default;\n+import jakarta.inject.Named;\n+import jakarta.json.JsonObject;\n \n import io.quarkus.arc.Arc;\n import io.quarkus.arc.ArcContainer;\n@@ -11,7 +13,6 @@\n import io.quarkus.oidc.OIDCException;\n import io.quarkus.oidc.OidcTenantConfig;\n import io.quarkus.oidc.TenantFeature;\n-import io.quarkus.oidc.TenantFeature.TenantFeatureLiteral;\n import io.quarkus.oidc.TokenCustomizer;\n \n public class TenantFeatureFinder {\n@@ -35,25 +36,55 @@ public static TokenCustomizer find(OidcTenantConfig oidcConfig) {\n                     throw new OIDCException(\"Unable to find TokenCustomizer \" + customizerName);\n                 }\n             } else if (oidcConfig.tenantId().isPresent()) {\n-                return container\n-                        .instance(TokenCustomizer.class, TenantFeature.TenantFeatureLiteral.of(oidcConfig.tenantId().get()))\n-                        .get();\n+                List<TokenCustomizer> tokenCustomizers = find(oidcConfig, TokenCustomizer.class);\n+                if (tokenCustomizers.isEmpty()) {\n+                    return null;\n+                }\n+                if (tokenCustomizers.size() == 1) {\n+                    return tokenCustomizers.get(0);\n+                }\n+                return new TokenCustomizer() {\n+                    @Override\n+                    public JsonObject customizeHeaders(JsonObject headers) {\n+                        JsonObject result = headers;\n+                        for (TokenCustomizer tokenCustomizer : tokenCustomizers) {\n+                            var customizedHeaders = tokenCustomizer.customizeHeaders(result);\n+                            if (customizedHeaders != null) {\n+                                result = customizedHeaders;\n+                            }\n+                        }\n+                        return result == headers ? null : result;\n+                    }\n+                };\n             }\n         }\n         return null;\n     }\n \n     public static <T> List<T> find(OidcTenantConfig oidcTenantConfig, Class<T> tenantFeatureClass) {\n-        if (oidcTenantConfig != null && oidcTenantConfig.tenantId().isPresent()) {\n+        ArcContainer container = Arc.container();\n+        if (oidcTenantConfig != null && container != null) {\n             var tenantsValidators = new ArrayList<T>();\n-            for (var instance : Arc.container().listAll(tenantFeatureClass, Default.Literal.INSTANCE)) {\n-                if (instance.isAvailable()) {\n-                    tenantsValidators.add(instance.get());\n-                }\n-            }\n-            for (var instance : Arc.container().listAll(tenantFeatureClass,\n-                    TenantFeatureLiteral.of(oidcTenantConfig.tenantId().get()))) {\n+            allFeatureClasses: for (InstanceHandle<T> instance : container.listAll(tenantFeatureClass)) {\n                 if (instance.isAvailable()) {\n+                    qualifiers: for (Annotation qualifier : instance.getBean().getQualifiers()) {\n+                        if (qualifier instanceof TenantFeature tenantFeature) {\n+                            String thisTenantId = oidcTenantConfig.tenantId().get();\n+                            for (String thatTenantId : tenantFeature.value()) {\n+                                if (thisTenantId.equals(thatTenantId)) {\n+                                    // adds tenant validator\n+                                    break qualifiers;\n+                                }\n+                            }\n+                            // don't continue as this is a TenantFeature but not for our tenant\n+                            continue allFeatureClasses;\n+                        } else if (qualifier instanceof Named) {\n+                            // following is done so that we don't include some features that are not meant to be global\n+                            // but users want to include them using configuration properties\n+                            // like 'io.quarkus.oidc.runtime.providers.AzureAccessTokenCustomizer'\n+                            continue allFeatureClasses;\n+                        }\n+                    }\n                     tenantsValidators.add(instance.get());\n                 }\n             }\n",
    "test_patch": "diff --git a/extensions/oidc/deployment/src/test/java/io/quarkus/oidc/test/TokenCustomizersTest.java b/extensions/oidc/deployment/src/test/java/io/quarkus/oidc/test/TokenCustomizersTest.java\nnew file mode 100644\nindex 0000000000000..08aa376c10e39\n--- /dev/null\n+++ b/extensions/oidc/deployment/src/test/java/io/quarkus/oidc/test/TokenCustomizersTest.java\n@@ -0,0 +1,187 @@\n+package io.quarkus.oidc.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.List;\n+\n+import jakarta.enterprise.event.Observes;\n+import jakarta.inject.Inject;\n+import jakarta.inject.Singleton;\n+import jakarta.json.JsonObject;\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.arc.All;\n+import io.quarkus.arc.Unremovable;\n+import io.quarkus.oidc.Oidc;\n+import io.quarkus.oidc.OidcTenantConfig;\n+import io.quarkus.oidc.OidcTenantConfigBuilder;\n+import io.quarkus.oidc.TenantFeature;\n+import io.quarkus.oidc.TokenCustomizer;\n+import io.quarkus.oidc.runtime.OidcConfig;\n+import io.quarkus.security.Authenticated;\n+import io.quarkus.test.QuarkusDevModeTest;\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager;\n+import io.restassured.RestAssured;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@QuarkusTestResource(KeycloakTestResourceLifecycleManager.class)\n+public class TokenCustomizersTest {\n+\n+    @RegisterExtension\n+    static final QuarkusDevModeTest test = new QuarkusDevModeTest()\n+            .withApplicationRoot((jar) -> jar\n+                    .addClasses(AccessTokenResource.class, GlobalTokenCustomizer.class, AccessTokenResource.Customizers.class,\n+                            NamedOneAndTwoCustomizer.class, NamedOneAndTwoAndFourCustomizer.class));\n+\n+    @Test\n+    public void testTokenCustomizers() {\n+        RestAssured.given().auth().oauth2(getAccessToken()).get(\"/access-token\")\n+                .then().statusCode(200).body(Matchers.is(\"default\"));\n+        var customizers = RestAssured.get(\"/access-token/customizers\").then().statusCode(200).extract()\n+                .as(AccessTokenResource.Customizers.class);\n+        assertTrue(customizers.global);\n+        assertFalse(customizers.namedOneAndTwoCustomizer);\n+        assertFalse(customizers.namedOneAndTwoAndFourCustomizer);\n+        RestAssured.given().auth().oauth2(getAccessToken()).get(\"/access-token/named-1\")\n+                .then().statusCode(200).body(Matchers.is(\"named-1\"));\n+        customizers = RestAssured.get(\"/access-token/customizers\").then().statusCode(200).extract()\n+                .as(AccessTokenResource.Customizers.class);\n+        assertTrue(customizers.global);\n+        assertTrue(customizers.namedOneAndTwoCustomizer);\n+        assertTrue(customizers.namedOneAndTwoAndFourCustomizer);\n+        RestAssured.given().auth().oauth2(getAccessToken()).get(\"/access-token/named-2\")\n+                .then().statusCode(200).body(Matchers.is(\"named-2\"));\n+        customizers = RestAssured.get(\"/access-token/customizers\").then().statusCode(200).extract()\n+                .as(AccessTokenResource.Customizers.class);\n+        assertTrue(customizers.global);\n+        assertTrue(customizers.namedOneAndTwoCustomizer);\n+        assertTrue(customizers.namedOneAndTwoAndFourCustomizer);\n+        RestAssured.given().auth().oauth2(getAccessToken()).get(\"/access-token/named-3\")\n+                .then().statusCode(200).body(Matchers.is(\"named-3\"));\n+        customizers = RestAssured.get(\"/access-token/customizers\").then().statusCode(200).extract()\n+                .as(AccessTokenResource.Customizers.class);\n+        assertTrue(customizers.global);\n+        assertFalse(customizers.namedOneAndTwoCustomizer);\n+        assertFalse(customizers.namedOneAndTwoAndFourCustomizer);\n+        RestAssured.given().auth().oauth2(getAccessToken()).get(\"/access-token/named-4\")\n+                .then().statusCode(200).body(Matchers.is(\"named-4\"));\n+        customizers = RestAssured.get(\"/access-token/customizers\").then().statusCode(200).extract()\n+                .as(AccessTokenResource.Customizers.class);\n+        assertTrue(customizers.global);\n+        assertFalse(customizers.namedOneAndTwoCustomizer);\n+        assertTrue(customizers.namedOneAndTwoAndFourCustomizer);\n+    }\n+\n+    private static String getAccessToken() {\n+        return KeycloakTestResourceLifecycleManager.getAccessToken(\"alice\");\n+    }\n+\n+    @Unremovable\n+    @Singleton\n+    public static class GlobalTokenCustomizer implements TokenCustomizer {\n+\n+        volatile boolean called = false;\n+\n+        @Override\n+        public JsonObject customizeHeaders(JsonObject headers) {\n+            called = true;\n+            return null;\n+        }\n+    }\n+\n+    @Unremovable\n+    @Singleton\n+    @TenantFeature({ \"named-1\", \"named-2\" })\n+    public static class NamedOneAndTwoCustomizer implements TokenCustomizer {\n+\n+        volatile boolean called = false;\n+\n+        @Override\n+        public JsonObject customizeHeaders(JsonObject headers) {\n+            called = true;\n+            return null;\n+        }\n+    }\n+\n+    @Unremovable\n+    @Singleton\n+    @TenantFeature({ \"named-1\", \"named-2\", \"named-4\" })\n+    public static class NamedOneAndTwoAndFourCustomizer implements TokenCustomizer {\n+\n+        volatile boolean called = false;\n+\n+        @Override\n+        public JsonObject customizeHeaders(JsonObject headers) {\n+            called = true;\n+            return null;\n+        }\n+    }\n+\n+    @Path(\"/access-token\")\n+    public static class AccessTokenResource {\n+\n+        private GlobalTokenCustomizer globalTokenCustomizer;\n+        private NamedOneAndTwoCustomizer namedOneAndTwoCustomizer;\n+        private NamedOneAndTwoAndFourCustomizer namedOneAndTwoAndFourCustomizer;\n+\n+        @Inject\n+        RoutingContext context;\n+\n+        public AccessTokenResource(@All List<TokenCustomizer> tokenCustomizers) {\n+            for (TokenCustomizer tokenCustomizer : tokenCustomizers) {\n+                if (tokenCustomizer instanceof GlobalTokenCustomizer i) {\n+                    globalTokenCustomizer = i;\n+                } else if (tokenCustomizer instanceof NamedOneAndTwoCustomizer i) {\n+                    namedOneAndTwoCustomizer = i;\n+                } else if (tokenCustomizer instanceof NamedOneAndTwoAndFourCustomizer i) {\n+                    namedOneAndTwoAndFourCustomizer = i;\n+                }\n+            }\n+        }\n+\n+        @Authenticated\n+        @GET\n+        public String defaultTenantAccessTokenName() {\n+            return \"default\";\n+        }\n+\n+        @Authenticated\n+        @Path(\"/{tenant-id}\")\n+        @GET\n+        public String namedTenantAccessTokenName() {\n+            return context.<OidcTenantConfig> get(OidcTenantConfig.class.getName()).tenantId().get();\n+        }\n+\n+        record Customizers(boolean global, boolean namedOneAndTwoCustomizer, boolean namedOneAndTwoAndFourCustomizer) {\n+        }\n+\n+        @Path(\"/customizers\")\n+        @GET\n+        public Customizers customizers() {\n+            try {\n+                return new Customizers(globalTokenCustomizer.called, namedOneAndTwoCustomizer.called,\n+                        namedOneAndTwoAndFourCustomizer.called);\n+            } finally {\n+                globalTokenCustomizer.called = false;\n+                namedOneAndTwoCustomizer.called = false;\n+                namedOneAndTwoAndFourCustomizer.called = false;\n+            }\n+        }\n+\n+        void configureOidc(@Observes Oidc oidc, OidcConfig oidcConfig) {\n+            var defaultTenantConfigBuilder = new OidcTenantConfigBuilder(OidcConfig.getDefaultTenant(oidcConfig));\n+            oidc.create(defaultTenantConfigBuilder.tenantId(\"named-1\").build());\n+            oidc.create(defaultTenantConfigBuilder.tenantId(\"named-2\").build());\n+            oidc.create(defaultTenantConfigBuilder.tenantId(\"named-3\").build());\n+            oidc.create(defaultTenantConfigBuilder.tenantId(\"named-4\").build());\n+        }\n+    }\n+\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48521",
    "pr_id": 48521,
    "issue_id": 20210,
    "repo": "quarkusio/quarkus",
    "problem_statement": "The locale-related configuration (e.g. quarkus.default-locale, quarkus.locales) currently only works on hibernate-validator. Will resteasy implement LocaleResovler and LocaleContext in the future? \n### Description\n\nThe locale-related configuration (e.g. quarkus.default-locale, quarkus.locales) currently only works on hibernate-validator. Will resteasy implement LocaleResovler and LocaleContext in the future? \n\n### Implementation ideas\n\n_No response_",
    "issue_word_count": 57,
    "test_files_count": 1,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "devtools/gradle/gradle-application-plugin/src/main/java/io/quarkus/gradle/tasks/Deploy.java",
      "devtools/gradle/gradle-application-plugin/src/main/java/io/quarkus/gradle/tasks/QuarkusRun.java",
      "devtools/gradle/gradle-application-plugin/src/main/java/io/quarkus/gradle/tasks/QuarkusTask.java",
      "devtools/gradle/gradle-application-plugin/src/test/java/io/quarkus/gradle/QuarkusPluginTest.java",
      "devtools/gradle/gradle-model/src/main/java/io/quarkus/gradle/tooling/GradleApplicationModelBuilder.java"
    ],
    "pr_changed_test_files": [
      "devtools/gradle/gradle-application-plugin/src/test/java/io/quarkus/gradle/QuarkusPluginTest.java"
    ],
    "base_commit": "7353d124cccdb8ce8c499b974f417a317e6feb6b",
    "head_commit": "80463c669a8ae8f1f695f2af430ae29dc61ce75d",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48521",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48521",
    "dockerfile": "",
    "pr_merged_at": "2025-06-24T13:23:16.000Z",
    "patch": "diff --git a/devtools/gradle/gradle-application-plugin/src/main/java/io/quarkus/gradle/tasks/Deploy.java b/devtools/gradle/gradle-application-plugin/src/main/java/io/quarkus/gradle/tasks/Deploy.java\nindex da99d0a7386b3..309493acc014c 100644\n--- a/devtools/gradle/gradle-application-plugin/src/main/java/io/quarkus/gradle/tasks/Deploy.java\n+++ b/devtools/gradle/gradle-application-plugin/src/main/java/io/quarkus/gradle/tasks/Deploy.java\n@@ -95,7 +95,7 @@ public void checkRequiredExtensions() {\n         try (CuratedApplication curatedApplication = QuarkusBootstrap.builder()\n                 .setBaseClassLoader(getClass().getClassLoader())\n                 .setExistingModel(appModel)\n-                .setTargetDirectory(getProject().getBuildDir().toPath())\n+                .setTargetDirectory(getProject().getLayout().getBuildDirectory().getAsFile().get().toPath())\n                 .setBaseName(extension().finalName())\n                 .setBuildSystemProperties(sysProps)\n                 .setAppArtifact(appModel.getAppArtifact())\n\ndiff --git a/devtools/gradle/gradle-application-plugin/src/main/java/io/quarkus/gradle/tasks/QuarkusRun.java b/devtools/gradle/gradle-application-plugin/src/main/java/io/quarkus/gradle/tasks/QuarkusRun.java\nindex f944cbd1cd6ba..1fd9c672853af 100644\n--- a/devtools/gradle/gradle-application-plugin/src/main/java/io/quarkus/gradle/tasks/QuarkusRun.java\n+++ b/devtools/gradle/gradle-application-plugin/src/main/java/io/quarkus/gradle/tasks/QuarkusRun.java\n@@ -106,7 +106,7 @@ public void runQuarkus() {\n         try (CuratedApplication curatedApplication = QuarkusBootstrap.builder()\n                 .setBaseClassLoader(getClass().getClassLoader())\n                 .setExistingModel(appModel)\n-                .setTargetDirectory(getProject().getBuildDir().toPath())\n+                .setTargetDirectory(getProject().getLayout().getBuildDirectory().getAsFile().get().toPath())\n                 .setBaseName(extension().finalName())\n                 .setBuildSystemProperties(sysProps)\n                 .setAppArtifact(appModel.getAppArtifact())\n\ndiff --git a/devtools/gradle/gradle-application-plugin/src/main/java/io/quarkus/gradle/tasks/QuarkusTask.java b/devtools/gradle/gradle-application-plugin/src/main/java/io/quarkus/gradle/tasks/QuarkusTask.java\nindex 11060269f5e54..5e4367e4bddcf 100644\n--- a/devtools/gradle/gradle-application-plugin/src/main/java/io/quarkus/gradle/tasks/QuarkusTask.java\n+++ b/devtools/gradle/gradle-application-plugin/src/main/java/io/quarkus/gradle/tasks/QuarkusTask.java\n@@ -34,7 +34,7 @@ public abstract class QuarkusTask extends DefaultTask {\n         setGroup(\"quarkus\");\n         this.extension = getProject().getExtensions().findByType(QuarkusPluginExtension.class);\n         this.projectDir = getProject().getProjectDir();\n-        this.buildDir = getProject().getBuildDir();\n+        this.buildDir = getProject().getLayout().getBuildDirectory().getAsFile().get();\n \n         // Calling this method tells Gradle that it should not fail the build. Side effect is that the configuration\n         // cache will be at least degraded, but the build will not fail.\n\ndiff --git a/devtools/gradle/gradle-model/src/main/java/io/quarkus/gradle/tooling/GradleApplicationModelBuilder.java b/devtools/gradle/gradle-model/src/main/java/io/quarkus/gradle/tooling/GradleApplicationModelBuilder.java\nindex bfae543ed2fdd..03d79dae84c8e 100644\n--- a/devtools/gradle/gradle-model/src/main/java/io/quarkus/gradle/tooling/GradleApplicationModelBuilder.java\n+++ b/devtools/gradle/gradle-model/src/main/java/io/quarkus/gradle/tooling/GradleApplicationModelBuilder.java\n@@ -171,7 +171,7 @@ public static ResolvedDependencyBuilder getProjectArtifact(Project project, bool\n                 .setModuleId(\n                         WorkspaceModuleId.of(appArtifact.getGroupId(), appArtifact.getArtifactId(), appArtifact.getVersion()))\n                 .setModuleDir(project.getProjectDir().toPath())\n-                .setBuildDir(project.getBuildDir().toPath())\n+                .setBuildDir(project.getLayout().getBuildDirectory().getAsFile().get().toPath())\n                 .setBuildFile(project.getBuildFile().toPath());\n \n         initProjectModule(project, mainModule, sourceSets.getByName(SourceSet.MAIN_SOURCE_SET_NAME), ArtifactSources.MAIN);\n",
    "test_patch": "diff --git a/devtools/gradle/gradle-application-plugin/src/test/java/io/quarkus/gradle/QuarkusPluginTest.java b/devtools/gradle/gradle-application-plugin/src/test/java/io/quarkus/gradle/QuarkusPluginTest.java\nindex 1df5ad02357a7..703e9ac30ea6a 100644\n--- a/devtools/gradle/gradle-application-plugin/src/test/java/io/quarkus/gradle/QuarkusPluginTest.java\n+++ b/devtools/gradle/gradle-application-plugin/src/test/java/io/quarkus/gradle/QuarkusPluginTest.java\n@@ -97,10 +97,11 @@ public void shouldReturnMultipleOutputSourceDirectories() {\n \n         final Set<File> outputSourceDirs = extension.combinedOutputSourceDirs();\n         assertThat(outputSourceDirs).hasSize(4);\n-        assertThat(outputSourceDirs).contains(new File(project.getBuildDir(), \"classes/java/main\"),\n-                new File(project.getBuildDir(), \"classes/java/test\"),\n-                new File(project.getBuildDir(), \"classes/scala/main\"),\n-                new File(project.getBuildDir(), \"classes/scala/test\"));\n+        assertThat(outputSourceDirs).contains(\n+                new File(project.getLayout().getBuildDirectory().getAsFile().get(), \"classes/java/main\"),\n+                new File(project.getLayout().getBuildDirectory().getAsFile().get(), \"classes/java/test\"),\n+                new File(project.getLayout().getBuildDirectory().getAsFile().get(), \"classes/scala/main\"),\n+                new File(project.getLayout().getBuildDirectory().getAsFile().get(), \"classes/scala/test\"));\n     }\n \n     @Test\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48482",
    "pr_id": 48482,
    "issue_id": 16728,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Provide a fluent API to set up Quarkus Security\n## Description\r\n\r\nHantsy Bai has linked to the following Spring Security example:\r\n```\r\n@Configuration\r\npublic class SecurityConfig {\r\n\r\n    @Bean\r\n    SecurityFilterChain springWebFilterChain(HttpSecurity http) throws Exception {\r\n        return http\r\n                .httpBasic(AbstractHttpConfigurer::disable)\r\n                .csrf(AbstractHttpConfigurer::disable)\r\n                .sessionManagement(c -> c.sessionCreationPolicy(SessionCreationPolicy.STATELESS))\r\n                .authorizeRequests(c -> c\r\n                        .antMatchers(\"/\", \"/info\").permitAll()\r\n                        .antMatchers(HttpMethod.GET, \"/posts/**\").permitAll()//.hasAuthority(\"SCOPE_read:posts\")\r\n                        .antMatchers(HttpMethod.POST, \"/posts/**\").hasAuthority(\"SCOPE_write:posts\")\r\n                        .antMatchers(HttpMethod.PUT, \"/posts/**\").hasAuthority(\"SCOPE_write:posts\")\r\n                        .antMatchers(HttpMethod.DELETE, \"/posts/**\").hasAuthority(\"SCOPE_delete:posts\")\r\n                        .anyRequest().authenticated()\r\n                )\r\n                .oauth2ResourceServer(OAuth2ResourceServerConfigurer::jwt)\r\n                .cors().and().build();\r\n    }\r\n```\r\n\r\nWhile we can do it with combining HttpAuthenticationMechanism/IdentityProvider and [configuration](https://quarkus.io/guides/security-authorization), supporting something similar to the above in Quarkus can be of interest\r\n\r\nAlso CC @stuartwdouglas  ",
    "issue_word_count": 120,
    "test_files_count": 5,
    "non_test_files_count": 14,
    "pr_changed_files": [
      "docs/src/main/asciidoc/security-authorize-web-endpoints-reference.adoc",
      "extensions/oidc/deployment/src/test/java/io/quarkus/oidc/test/ImplicitBasicAuthAndBearerAuthCombinationTest.java",
      "extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/HttpSecurityProcessor.java",
      "extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/security/ConfigBasedPathMatchingHttpSecurityPolicyTest.java",
      "extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/security/FluentApiAuthenticationMechanismSelectionTest.java",
      "extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/security/FluentApiPathMatchingHttpSecurityPolicyTest.java",
      "extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/security/PathMatchingHttpSecurityPolicyTest.java",
      "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/AbstractPathMatchingHttpSecurityPolicy.java",
      "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/AuthenticatedHttpSecurityPolicy.java",
      "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/DenySecurityPolicy.java",
      "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/HttpAuthenticator.java",
      "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/HttpSecurityConfiguration.java",
      "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/HttpSecurityImpl.java",
      "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/HttpSecurityRecorder.java",
      "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/JaxRsPathMatchingHttpSecurityPolicy.java",
      "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/ManagementPathMatchingHttpSecurityPolicy.java",
      "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/PathMatchingHttpSecurityPolicy.java",
      "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/PermitSecurityPolicy.java",
      "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/security/HttpSecurity.java"
    ],
    "pr_changed_test_files": [
      "extensions/oidc/deployment/src/test/java/io/quarkus/oidc/test/ImplicitBasicAuthAndBearerAuthCombinationTest.java",
      "extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/security/ConfigBasedPathMatchingHttpSecurityPolicyTest.java",
      "extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/security/FluentApiAuthenticationMechanismSelectionTest.java",
      "extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/security/FluentApiPathMatchingHttpSecurityPolicyTest.java",
      "extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/security/PathMatchingHttpSecurityPolicyTest.java"
    ],
    "base_commit": "fe37c1f07faa8602228cf45b830ed1457fcaaac6",
    "head_commit": "89b01635522ec3bb8e94812647681d1820af5425",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48482",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48482",
    "dockerfile": "",
    "pr_merged_at": "2025-06-24T14:21:49.000Z",
    "patch": "diff --git a/docs/src/main/asciidoc/security-authorize-web-endpoints-reference.adoc b/docs/src/main/asciidoc/security-authorize-web-endpoints-reference.adoc\nindex dd33ede5af1b5..5a4084f919ada 100644\n--- a/docs/src/main/asciidoc/security-authorize-web-endpoints-reference.adoc\n+++ b/docs/src/main/asciidoc/security-authorize-web-endpoints-reference.adoc\n@@ -190,6 +190,7 @@ The context can be activated by users, for example with the `@ActivateRequestCon\n We recommend to let Quarkus activate and prepare CDI request context for you.\n For example, consider a situation where you want to inject a bean from the Jakarta REST context, such as the `jakarta.ws.rs.core.UriInfo` bean.\n In this case, you must apply the `HttpSecurityPolicy` to Jakarta REST endpoints. This can be achieved in one of the following ways:\n+\n * Use the `@AuthorizationPolicy` security annotation.\n * Set the `quarkus.http.auth.permission.custom1.applies-to=jaxrs` configuration property.\n \n@@ -445,6 +446,23 @@ quarkus.http.auth.roles-mapping.admin=Admin1 <1> <2>\n <1> Map the `admin` role to `Admin1` role. The `SecurityIdentity` will have both `admin` and `Admin1` roles.\n <2> The `/*` path is not secured. You must secure your endpoints with standard security annotations or define HTTP permissions in addition to this configuration property.\n \n+If you prefer a programmatic configuration, the same mapping can be added with the `io.quarkus.vertx.http.security.HttpSecurity` CDI event:\n+\n+[source,java]\n+----\n+package org.acme.http.security;\n+\n+import io.quarkus.vertx.http.security.HttpSecurity;\n+import jakarta.enterprise.event.Observes;\n+\n+public class HttpSecurityConfiguration {\n+\n+    void configure(@Observes HttpSecurity httpSecurity) {\n+        httpSecurity.rolesMapping(\"admin\", \"Admin1\");\n+    }\n+}\n+----\n+\n === Shared permission checks\n \n One important rule for unshared permission checks is that only one path match is applied, the most specific one.\n@@ -488,6 +506,92 @@ quarkus.http.auth.permission.roles3.policy=role-policy3\n <2> The `/secured/*` path can only be accessed by authenticated users. This way, you have secured the `/secured/all` path and so on.\n <3> Shared permissions are always applied before unshared ones, therefore a `SecurityIdentity` with the `root` role will have the `user` role as well.\n \n+=== Set up path-specific authorization programmatically\n+\n+You can also configure the authorization policies presented by this guide so far programmatically.\n+Consider the example mentioned earlier:\n+\n+[source,properties]\n+----\n+quarkus.http.auth.permission.permit1.paths=/public/*\n+quarkus.http.auth.permission.permit1.policy=permit\n+quarkus.http.auth.permission.permit1.methods=GET\n+\n+quarkus.http.auth.permission.deny1.paths=/forbidden\n+quarkus.http.auth.permission.deny1.policy=deny\n+\n+quarkus.http.auth.permission.roles1.paths=/roles-secured/*,/other/*,/api/*\n+quarkus.http.auth.permission.roles1.policy=role-policy1\n+quarkus.http.auth.policy.role-policy1.roles-allowed=user,admin\n+----\n+\n+The same authorization policies can be configured programmatically:\n+\n+[source,java]\n+----\n+package org.acme.http.security;\n+\n+import jakarta.enterprise.event.Observes;\n+\n+import io.quarkus.vertx.http.security.HttpSecurity;\n+\n+public class HttpSecurityConfiguration {\n+\n+    void configure(@Observes HttpSecurity httpSecurity) {\n+        httpSecurity\n+                .get(\"/public/*\").permit()\n+                .path(\"/roles-secured/*\", \"/other/*\", \"/api/*\").roles(\"admin\", \"user\")\n+                .path(\"/forbidden\").authorization().deny();\n+    }\n+\n+}\n+----\n+\n+Additionally, the `io.quarkus.vertx.http.security.HttpSecurity` CDI event can be used to configure specific authentication mechanisms and policies:\n+\n+[source,java]\n+----\n+package org.acme.http.security;\n+\n+import io.quarkus.vertx.http.security.HttpSecurity;\n+import jakarta.enterprise.event.Observes;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+public class HttpSecurityConfiguration {\n+\n+    void configure(@Observes HttpSecurity httpSecurity, CustomHttpSecurityPolicy customHttpSecurityPolicy,\n+                        @ConfigProperty(name = \"secured-path\") String securedPath) {\n+\n+        httpSecurity.path(\"/api/*\").authenticatedWith(new CustomAuthenticationMechanism());   <1>\n+\n+        httpSecurity.path(\"/other/*\").basic().policy(customHttpSecurityPolicy); <2>\n+\n+        httpSecurity.path(\"/roles-secured/*\").bearer().authorization()\n+                .policy(identity -> identity.hasRole(\"user\") || \"root\".equals(identity.getPrincipal().getName()));  <3>\n+\n+        httpSecurity.path(\"/other/administration\").authorizationCodeFlow()\n+                .authorization().policy((identity, routingContext) -> {\n+                    if (!identity.isAnonymous()) {\n+                        String customAuthorization = routingContext.request().getHeader(\"Custom Authorization\");\n+                        return yourCustomAuthorizationCheck(customAuthorization);\n+                    }\n+                    return false;\n+                });     <4>\n+\n+        httpSecurity.path(securedPath).form();  <5>\n+\n+        httpSecurity.path(\"/user-info\").bearer().authorization().permissions(\"openid\", \"email\", \"profile\"); <6>\n+    }\n+}\n+----\n+<1> Authenticate all the '/api/' sub-paths with your own `HttpAuthenticationMechanism` instance.\n+<2> Use the Basic authentication and authorize the requests with a custom `io.quarkus.vertx.http.runtime.security.HttpSecurityPolicy`.\n+<3> Use the Bearer token authentication and authorize the `SecurityIdentity` with your own policy.\n+<4> Use Authorization Code Flow mechanism and write your own policy based on incoming request headers.\n+<5> When Quarkus fires the `HttpSecurity` CDI event, the runtime configuration is ready.\n+<6> Require that all the requests to the `/user-info` path have string permissions `openid`, `email` and `profile`.\n+The same authorization can be required with the `@PermissionsAllowed(value = { \"openid\", \"email\", \"profile\" }, inclusive = true)` annotation instance placed on an endpoint.\n+\n [[standard-security-annotations]]\n == Authorization using annotations\n \n\ndiff --git a/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/HttpSecurityProcessor.java b/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/HttpSecurityProcessor.java\nindex 991e13dd7611e..0e012df1f6439 100644\n--- a/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/HttpSecurityProcessor.java\n+++ b/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/HttpSecurityProcessor.java\n@@ -50,11 +50,13 @@\n import io.quarkus.deployment.Capability;\n import io.quarkus.deployment.annotations.BuildProducer;\n import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.annotations.Consume;\n import io.quarkus.deployment.annotations.ExecutionTime;\n import io.quarkus.deployment.annotations.Produce;\n import io.quarkus.deployment.annotations.Record;\n import io.quarkus.deployment.builditem.ApplicationIndexBuildItem;\n import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.RuntimeConfigSetupCompleteBuildItem;\n import io.quarkus.deployment.builditem.SystemPropertyBuildItem;\n import io.quarkus.gizmo.ClassCreator;\n import io.quarkus.gizmo.DescriptorUtils;\n@@ -265,12 +267,14 @@ void createHttpAuthenticationHandler(HttpSecurityRecorder recorder, Capabilities\n         }\n     }\n \n+    @Consume(RuntimeConfigSetupCompleteBuildItem.class)\n     @Produce(PreRouterFinalizationBuildItem.class)\n     @Record(ExecutionTime.RUNTIME_INIT)\n     @BuildStep\n-    void initializeAuthenticationHandler(Optional<HttpAuthenticationHandlerBuildItem> authenticationHandler,\n+    void initializeHttpSecurity(Optional<HttpAuthenticationHandlerBuildItem> authenticationHandler,\n             HttpSecurityRecorder recorder, VertxHttpConfig httpConfig, BeanContainerBuildItem beanContainerBuildItem) {\n         if (authenticationHandler.isPresent()) {\n+            recorder.prepareHttpSecurityConfiguration(httpConfig);\n             recorder.initializeHttpAuthenticatorHandler(authenticationHandler.get().handler, httpConfig,\n                     beanContainerBuildItem.getValue());\n         }\n\ndiff --git a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/AbstractPathMatchingHttpSecurityPolicy.java b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/AbstractPathMatchingHttpSecurityPolicy.java\nindex 2d0e0903fa453..46e215c072d6a 100644\n--- a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/AbstractPathMatchingHttpSecurityPolicy.java\n+++ b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/AbstractPathMatchingHttpSecurityPolicy.java\n@@ -6,7 +6,6 @@\n import java.security.Permission;\n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n@@ -22,6 +21,7 @@\n import io.quarkus.security.identity.SecurityIdentity;\n import io.quarkus.vertx.http.runtime.PolicyConfig;\n import io.quarkus.vertx.http.runtime.PolicyMappingConfig;\n+import io.quarkus.vertx.http.runtime.security.HttpSecurityConfiguration.AuthenticationMechanism;\n import io.quarkus.vertx.http.runtime.security.HttpSecurityPolicy.AuthorizationRequestContext;\n import io.quarkus.vertx.http.runtime.security.HttpSecurityPolicy.CheckResult;\n import io.quarkus.vertx.http.runtime.security.ImmutablePathMatcher.PathMatch;\n@@ -41,7 +41,7 @@ public class AbstractPathMatchingHttpSecurityPolicy {\n     private final List<ImmutablePathMatcher<List<HttpMatcher>>> sharedPermissionsPathMatchers;\n     private final boolean hasNoPermissions;\n \n-    AbstractPathMatchingHttpSecurityPolicy(Map<String, PolicyMappingConfig> permissions,\n+    AbstractPathMatchingHttpSecurityPolicy(List<HttpSecurityConfiguration.HttpPermissionCarrier> httpPermissions,\n             Map<String, PolicyConfig> rolePolicy, String rootPath, Instance<HttpSecurityPolicy> installedPolicies,\n             PolicyMappingConfig.AppliesTo appliesTo) {\n         boolean hasNoPermissions = true;\n@@ -49,20 +49,20 @@ public class AbstractPathMatchingHttpSecurityPolicy {\n         List<ImmutablePathMatcher<List<HttpMatcher>>> sharedPermsMatchers = new ArrayList<>();\n         final var builder = ImmutablePathMatcher.<List<HttpMatcher>> builder().handlerAccumulator(List::addAll)\n                 .rootPath(rootPath);\n-        for (PolicyMappingConfig policyMappingConfig : permissions.values()) {\n-            if (appliesTo != policyMappingConfig.appliesTo()) {\n+        for (var httpPermission : httpPermissions) {\n+            if (appliesTo != httpPermission.getAppliesTo()) {\n                 continue;\n             }\n             if (hasNoPermissions) {\n                 hasNoPermissions = false;\n             }\n-            if (policyMappingConfig.shared()) {\n+            if (httpPermission.isShared()) {\n                 final var builder1 = ImmutablePathMatcher.<List<HttpMatcher>> builder().handlerAccumulator(List::addAll)\n                         .rootPath(rootPath);\n-                addPermissionToPathMatcher(namedHttpSecurityPolicies, policyMappingConfig, builder1);\n+                addPermissionToPathMatcher(namedHttpSecurityPolicies, httpPermission, builder1);\n                 sharedPermsMatchers.add(builder1.build());\n             } else {\n-                addPermissionToPathMatcher(namedHttpSecurityPolicies, policyMappingConfig, builder);\n+                addPermissionToPathMatcher(namedHttpSecurityPolicies, httpPermission, builder);\n             }\n         }\n         this.hasNoPermissions = hasNoPermissions;\n@@ -70,16 +70,29 @@ public class AbstractPathMatchingHttpSecurityPolicy {\n         this.pathMatcher = builder.build();\n     }\n \n-    public String getAuthMechanismName(RoutingContext routingContext) {\n+    AuthenticationMechanism getAuthMechanism(RoutingContext routingContext) {\n         if (sharedPermissionsPathMatchers != null) {\n             for (ImmutablePathMatcher<List<HttpMatcher>> matcher : sharedPermissionsPathMatchers) {\n-                String authMechanismName = getAuthMechanismName(routingContext, matcher);\n-                if (authMechanismName != null) {\n-                    return authMechanismName;\n+                AuthenticationMechanism authMechanism = getAuthMechanism(routingContext, matcher);\n+                if (authMechanism != null) {\n+                    return authMechanism;\n                 }\n             }\n         }\n-        return getAuthMechanismName(routingContext, pathMatcher);\n+        return getAuthMechanism(routingContext, pathMatcher);\n+    }\n+\n+    /**\n+     * @deprecated This method is internal by nature, if you have a good use case, please report it\n+     *             so that we can document the use case and test it.\n+     */\n+    @Deprecated(forRemoval = true, since = \"3.25\")\n+    public String getAuthMechanismName(RoutingContext routingContext) {\n+        AuthenticationMechanism authenticationMechanism = getAuthMechanism(routingContext);\n+        if (authenticationMechanism != null) {\n+            return authenticationMechanism.name();\n+        }\n+        return null;\n     }\n \n     public boolean hasNoPermissions() {\n@@ -160,13 +173,9 @@ public Uni<? extends CheckResult> apply(CheckResult checkResult) {\n                 });\n     }\n \n-    private static String getAuthMechanismName(RoutingContext routingContext,\n+    private static AuthenticationMechanism getAuthMechanism(RoutingContext routingContext,\n             ImmutablePathMatcher<List<HttpMatcher>> pathMatcher) {\n-        PathMatch<List<HttpMatcher>> toCheck = pathMatcher.match(routingContext.normalizedPath());\n-        if (toCheck.getValue() == null || toCheck.getValue().isEmpty()) {\n-            return null;\n-        }\n-        for (HttpMatcher i : toCheck.getValue()) {\n+        for (HttpMatcher i : findHttpMatchers(routingContext, pathMatcher)) {\n             if (i.authMechanism != null) {\n                 return i.authMechanism;\n             }\n@@ -175,50 +184,59 @@ private static String getAuthMechanismName(RoutingContext routingContext,\n     }\n \n     private static void addPermissionToPathMatcher(Map<String, HttpSecurityPolicy> permissionCheckers,\n-            PolicyMappingConfig policyMappingConfig,\n+            HttpSecurityConfiguration.HttpPermissionCarrier httpPermission,\n             ImmutablePathMatcher.ImmutablePathMatcherBuilder<List<HttpMatcher>> builder) {\n-        HttpSecurityPolicy checker = permissionCheckers.get(policyMappingConfig.policy());\n-        if (checker == null) {\n-            throw new RuntimeException(\"Unable to find HTTP security policy \" + policyMappingConfig.policy());\n+        final HttpSecurityPolicy policy;\n+        if (httpPermission.getPolicy().instance() != null) {\n+            policy = httpPermission.getPolicy().instance();\n+        } else {\n+            String policyName = httpPermission.getPolicy().name();\n+            policy = permissionCheckers.get(policyName);\n+            if (policy == null) {\n+                throw new RuntimeException(\"Unable to find HTTP security policy \" + policyName);\n+            }\n         }\n \n-        if (policyMappingConfig.enabled().orElse(Boolean.TRUE)) {\n-            for (String path : policyMappingConfig.paths().orElse(Collections.emptyList())) {\n-                HttpMatcher m = new HttpMatcher(policyMappingConfig.authMechanism().orElse(null),\n-                        new HashSet<>(policyMappingConfig.methods().orElse(Collections.emptyList())), checker);\n-                List<HttpMatcher> perms = new ArrayList<>();\n-                perms.add(m);\n-                builder.addPath(path, perms);\n-            }\n+        for (String path : httpPermission.getPaths()) {\n+            HttpMatcher m = new HttpMatcher(httpPermission.getAuthMechanism(), httpPermission.getMethods(), policy);\n+            List<HttpMatcher> perms = new ArrayList<>();\n+            perms.add(m);\n+            builder.addPath(path, perms);\n         }\n     }\n \n     private static List<HttpSecurityPolicy> findPermissionCheckers(RoutingContext context,\n             ImmutablePathMatcher<List<HttpMatcher>> pathMatcher) {\n-        var result = new ArrayList<HttpSecurityPolicy>();\n+        List<HttpSecurityPolicy> list = new ArrayList<>();\n+        for (HttpMatcher httpMatcher : findHttpMatchers(context, pathMatcher)) {\n+            list.add(httpMatcher.checker);\n+        }\n+        return list;\n+    }\n \n+    private static List<HttpMatcher> findHttpMatchers(RoutingContext context,\n+            ImmutablePathMatcher<List<HttpMatcher>> pathMatcher) {\n         PathMatch<List<HttpMatcher>> toCheck = pathMatcher.match(context.normalizedPath());\n         if (toCheck.getValue() == null || toCheck.getValue().isEmpty()) {\n-            return result;\n+            return List.of();\n         }\n-        List<HttpSecurityPolicy> methodMatch = new ArrayList<>();\n-        List<HttpSecurityPolicy> noMethod = new ArrayList<>();\n+        List<HttpMatcher> methodMatch = new ArrayList<>();\n+        List<HttpMatcher> noMethod = new ArrayList<>();\n         for (HttpMatcher i : toCheck.getValue()) {\n             if (i.methods == null || i.methods.isEmpty()) {\n-                noMethod.add(i.checker);\n+                noMethod.add(i);\n             } else if (i.methods.contains(context.request().method().toString())) {\n-                methodMatch.add(i.checker);\n+                methodMatch.add(i);\n             }\n         }\n         if (!methodMatch.isEmpty()) {\n-            result.addAll(methodMatch);\n+            return methodMatch;\n         } else if (!noMethod.isEmpty()) {\n-            result.addAll(noMethod);\n+            return noMethod;\n         } else {\n             //we deny if we did not match due to method filtering\n-            result.add(DenySecurityPolicy.INSTANCE);\n+            return List.of(HttpMatcher.DENY);\n         }\n-        return result;\n     }\n \n     static boolean policyApplied(RoutingContext routingContext) {\n@@ -283,15 +301,15 @@ private static Map<String, HttpSecurityPolicy> toNamedHttpSecPolicies(Map<String\n             }\n         }\n \n-        var previousPolicy = namedPolicies.put(\"deny\", DenySecurityPolicy.INSTANCE);\n+        var previousPolicy = namedPolicies.put(DenySecurityPolicy.NAME, DenySecurityPolicy.INSTANCE);\n         if (previousPolicy != null) {\n             throw duplicateNamedPoliciesNotAllowedEx(previousPolicy, DenySecurityPolicy.INSTANCE);\n         }\n-        previousPolicy = namedPolicies.put(\"permit\", new PermitSecurityPolicy());\n+        previousPolicy = namedPolicies.put(PermitSecurityPolicy.NAME, new PermitSecurityPolicy());\n         if (previousPolicy != null) {\n             throw duplicateNamedPoliciesNotAllowedEx(previousPolicy, new PermitSecurityPolicy());\n         }\n-        previousPolicy = namedPolicies.put(\"authenticated\", new AuthenticatedHttpSecurityPolicy());\n+        previousPolicy = namedPolicies.put(AuthenticatedHttpSecurityPolicy.NAME, new AuthenticatedHttpSecurityPolicy());\n         if (previousPolicy != null) {\n             throw duplicateNamedPoliciesNotAllowedEx(previousPolicy, new AuthenticatedHttpSecurityPolicy());\n         }\n@@ -411,7 +429,7 @@ static ConfigurationException duplicateNamedPoliciesNotAllowedEx(HttpSecurityPol\n                 + policy1.name() + \"' is allowed, but found: \" + policyClassName1 + \" and \" + policyClassName2);\n     }\n \n-    record HttpMatcher(String authMechanism, Set<String> methods, HttpSecurityPolicy checker) {\n-\n+    record HttpMatcher(AuthenticationMechanism authMechanism, Set<String> methods, HttpSecurityPolicy checker) {\n+        private static final HttpMatcher DENY = new HttpMatcher(null, Set.of(), DenySecurityPolicy.INSTANCE);\n     }\n }\n\ndiff --git a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/AuthenticatedHttpSecurityPolicy.java b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/AuthenticatedHttpSecurityPolicy.java\nindex e9a64ff00c929..62026ee2a4343 100644\n--- a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/AuthenticatedHttpSecurityPolicy.java\n+++ b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/AuthenticatedHttpSecurityPolicy.java\n@@ -11,6 +11,8 @@\n  */\n public class AuthenticatedHttpSecurityPolicy implements HttpSecurityPolicy {\n \n+    public static final String NAME = \"authenticated\";\n+\n     @Override\n     public Uni<CheckResult> checkPermission(RoutingContext request, Uni<SecurityIdentity> identity,\n             AuthorizationRequestContext requestContext) {\n\ndiff --git a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/DenySecurityPolicy.java b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/DenySecurityPolicy.java\nindex 172b970bab5dc..14b9a64ea44a2 100644\n--- a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/DenySecurityPolicy.java\n+++ b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/DenySecurityPolicy.java\n@@ -7,6 +7,7 @@\n public class DenySecurityPolicy implements HttpSecurityPolicy {\n \n     public static final DenySecurityPolicy INSTANCE = new DenySecurityPolicy();\n+    public static final String NAME = \"deny\";\n \n     @Override\n     public Uni<CheckResult> checkPermission(RoutingContext request, Uni<SecurityIdentity> identity,\n\ndiff --git a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/HttpAuthenticator.java b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/HttpAuthenticator.java\nindex 619c5e7c52678..a80ab5e6c23a2 100644\n--- a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/HttpAuthenticator.java\n+++ b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/HttpAuthenticator.java\n@@ -45,6 +45,7 @@\n import io.quarkus.vertx.http.runtime.AuthRuntimeConfig;\n import io.quarkus.vertx.http.runtime.VertxHttpBuildTimeConfig;\n import io.quarkus.vertx.http.runtime.VertxHttpConfig;\n+import io.quarkus.vertx.http.runtime.security.HttpSecurityConfiguration.AuthenticationMechanism;\n import io.quarkus.vertx.http.runtime.security.annotation.BasicAuthentication;\n import io.smallrye.config.SmallRyeConfig;\n import io.smallrye.mutiny.Uni;\n@@ -73,7 +74,7 @@ public final class HttpAuthenticator {\n      * Only set when detected and {@link HttpAuthenticator#TEST_IF_BASIC_AUTH_IMPLICITLY_REQUIRED} is true.\n      */\n     public static final String BASIC_AUTH_ANNOTATION_DETECTED = \"io.quarkus.security.http.basic-authentication-annotation-detected\";\n-    private static final Logger log = Logger.getLogger(HttpAuthenticator.class);\n+    private static final Logger LOG = Logger.getLogger(HttpAuthenticator.class);\n     /**\n      * Added to a {@link RoutingContext} as selected authentication mechanism.\n      */\n@@ -105,7 +106,7 @@ public final class HttpAuthenticator {\n         for (HttpAuthenticationMechanism mechanism : httpAuthenticationMechanism) {\n             if (mechanism.getCredentialTypes().isEmpty()) {\n                 // mechanism does not require any IdentityProvider\n-                log.debugf(\"HttpAuthenticationMechanism '%s' provided no required credential types, therefore it needs \"\n+                LOG.debugf(\"HttpAuthenticationMechanism '%s' provided no required credential types, therefore it needs \"\n                         + \"to be able to perform authentication without any IdentityProvider\", mechanism.getClass().getName());\n                 mechanisms.add(mechanism);\n                 continue;\n@@ -128,7 +129,7 @@ public final class HttpAuthenticator {\n                 mechanisms.add(mechanism);\n             } else if (BasicAuthenticationMechanism.class.equals(mechanism.getClass())\n                     && httpBuildTimeConfig.auth().basic().isEmpty()) {\n-                log.debug(\"\"\"\n+                LOG.debug(\"\"\"\n                         BasicAuthenticationMechanism has been enabled because no other authentication mechanism has been\n                         detected, but there is no IdentityProvider based on username and password. Please use\n                         one of supported extensions if you plan to use the mechanism.\n@@ -194,13 +195,13 @@ public Uni<SecurityIdentity> attemptAuthentication(RoutingContext routingContext\n         }\n \n         // determine whether user selected path specific mechanism via HTTP Security policy or annotation\n-        final String pathSpecificMechanism;\n+        final AuthenticationMechanism pathSpecificMechanism;\n         if (selectAuthMechanismWithAnnotation && isAuthMechanismSelected(routingContext)) {\n-            pathSpecificMechanism = routingContext.get(AUTH_MECHANISM);\n+            pathSpecificMechanism = getAuthMechanism(routingContext);\n         } else {\n             AbstractPathMatchingHttpSecurityPolicy pathMatchingPolicy = routingContext\n                     .get(AbstractPathMatchingHttpSecurityPolicy.class.getName());\n-            pathSpecificMechanism = pathMatchingPolicy != null ? pathMatchingPolicy.getAuthMechanismName(routingContext) : null;\n+            pathSpecificMechanism = pathMatchingPolicy != null ? pathMatchingPolicy.getAuthMechanism(routingContext) : null;\n         }\n \n         // authenticate\n@@ -208,7 +209,7 @@ public Uni<SecurityIdentity> attemptAuthentication(RoutingContext routingContext\n         if (pathSpecificMechanism == null) {\n             result = createSecurityIdentity(routingContext, 0);\n         } else {\n-            result = findBestCandidateMechanism(routingContext, pathSpecificMechanism, 0).onItem().ifNotNull()\n+            result = findBestCandidateMechanism(routingContext, pathSpecificMechanism).onItem().ifNotNull()\n                     .transformToUni(new Function<HttpAuthenticationMechanism, Uni<? extends SecurityIdentity>>() {\n                         @Override\n                         public Uni<SecurityIdentity> apply(HttpAuthenticationMechanism mech) {\n@@ -329,7 +330,7 @@ public Uni<? extends Boolean> apply(Boolean authDone) {\n             @Override\n             public Uni<? extends Boolean> apply(Boolean authDone) {\n                 if (!authDone) {\n-                    log.debug(\"Authentication has not been done, returning HTTP status 401\");\n+                    LOG.debug(\"Authentication has not been done, returning HTTP status 401\");\n                     routingContext.response().setStatusCode(401);\n                     if (routingContext.get(DEV_MODE_AUTHENTICATION_FAILURE_BODY) == null) {\n                         routingContext.response().end();\n@@ -375,7 +376,7 @@ private Uni<SecurityIdentity> authenticateWithAllMechanisms(SecurityIdentity ide\n                     @Override\n                     public Uni<SecurityIdentity> apply(HttpCredentialTransport httpCredentialTransport) {\n                         if (httpCredentialTransport == null || httpCredentialTransport.getAuthenticationScheme() == null) {\n-                            log.error(\"\"\"\n+                            LOG.error(\"\"\"\n                                     Illegal state - HttpAuthenticationMechanism '%s' authentication scheme is not available.\n                                     The authentication scheme is required when inclusive authentication is enabled.\n                                     \"\"\".formatted(ClientProxy.unwrap(mechanisms[i]).getClass().getName()));\n@@ -403,6 +404,15 @@ public Uni<SecurityIdentity> apply(HttpCredentialTransport httpCredentialTranspo\n                 });\n     }\n \n+    private Uni<HttpAuthenticationMechanism> findBestCandidateMechanism(RoutingContext routingContext,\n+            AuthenticationMechanism pathSpecificMechanism) {\n+        if (pathSpecificMechanism.instance() != null) {\n+            rememberAuthMechanism(routingContext, pathSpecificMechanism);\n+            return Uni.createFrom().item(pathSpecificMechanism.instance());\n+        }\n+        return findBestCandidateMechanism(routingContext, pathSpecificMechanism.name(), 0);\n+    }\n+\n     private Uni<HttpAuthenticationMechanism> findBestCandidateMechanism(RoutingContext routingContext,\n             String pathSpecificMechanism, int i) {\n         if (i == mechanisms.length) {\n@@ -431,7 +441,7 @@ private Uni<HttpAuthenticationMechanism> getPathSpecificMechanism(int index, Rou\n                     public HttpAuthenticationMechanism apply(HttpCredentialTransport t) {\n                         if (t != null && t.getAuthenticationScheme().equalsIgnoreCase(pathSpecificMechanism)) {\n                             routingContext.put(HttpAuthenticationMechanism.class.getName(), mechanisms[index]);\n-                            routingContext.put(AUTH_MECHANISM, t.getAuthenticationScheme());\n+                            rememberAuthMechanism(routingContext, t.getAuthenticationScheme());\n                             return mechanisms[index];\n                         }\n                         return null;\n@@ -445,6 +455,17 @@ static void selectAuthMechanismWithAnnotation() {\n \n     static void selectAuthMechanism(RoutingContext routingContext, String authMechanism) {\n         if (requestAlreadyAuthenticated(routingContext, authMechanism)) {\n+            AuthenticationMechanism authenticationMechanism = getAuthMechanism(routingContext);\n+            final String previousMechanism;\n+            if (authenticationMechanism != null) {\n+                if (authenticationMechanism.name() != null) {\n+                    previousMechanism = authenticationMechanism.name();\n+                } else {\n+                    previousMechanism = ClientProxy.unwrap(authenticationMechanism.instance()).getClass().getName();\n+                }\n+            } else {\n+                previousMechanism = null;\n+            }\n             throw new AuthenticationFailedException(\"\"\"\n                     The '%1$s' authentication mechanism is required to authenticate the request but it was already\n                     authenticated with the '%2$s' authentication mechanism. It can happen if the '%1$s' is selected with\n@@ -453,9 +474,9 @@ static void selectAuthMechanism(RoutingContext routingContext, String authMechan\n                     'quarkus.http.auth.permission.\"permissions\".applies-to=JAXRS' to all HTTP security policies\n                     which secure the same REST endpoints as the ones secured by the '%1$s' authentication mechanism\n                     selected with the annotation.\n-                    \"\"\".formatted(authMechanism, routingContext.get(AUTH_MECHANISM)));\n+                    \"\"\".formatted(authMechanism, previousMechanism));\n         }\n-        routingContext.put(AUTH_MECHANISM, authMechanism);\n+        rememberAuthMechanism(routingContext, authMechanism);\n     }\n \n     private static void rememberAuthAttempted(RoutingContext routingContext) {\n@@ -463,7 +484,7 @@ private static void rememberAuthAttempted(RoutingContext routingContext) {\n     }\n \n     private static boolean isAuthMechanismSelected(RoutingContext routingContext) {\n-        return routingContext.get(AUTH_MECHANISM) != null;\n+        return getAuthMechanism(routingContext) != null;\n     }\n \n     private static boolean requestAlreadyAuthenticated(RoutingContext event, String newAuthMechanism) {\n@@ -471,7 +492,7 @@ private static boolean requestAlreadyAuthenticated(RoutingContext event, String\n     }\n \n     private static boolean authenticatedWithDifferentAuthMechanism(String newAuthMechanism, RoutingContext event) {\n-        return !newAuthMechanism.equalsIgnoreCase(event.get(AUTH_MECHANISM));\n+        return !newAuthMechanism.equalsIgnoreCase(getAuthMechanismScheme(event));\n     }\n \n     /**\n@@ -485,12 +506,33 @@ private static Uni<HttpCredentialTransport> rememberAuthMechScheme(HttpAuthentic\n                     @Override\n                     public void accept(HttpCredentialTransport t) {\n                         if (t.getAuthenticationScheme() != null) {\n-                            event.put(AUTH_MECHANISM, t.getAuthenticationScheme());\n+                            rememberAuthMechanism(event, t.getAuthenticationScheme());\n                         }\n                     }\n                 });\n     }\n \n+    private static void rememberAuthMechanism(RoutingContext event, AuthenticationMechanism newAuthMechanism) {\n+        event.put(AUTH_MECHANISM, newAuthMechanism);\n+        event.put(HttpAuthenticationMechanism.class.getName(), newAuthMechanism.instance());\n+    }\n+\n+    private static void rememberAuthMechanism(RoutingContext event, String newAuthMechanism) {\n+        event.put(AUTH_MECHANISM, new AuthenticationMechanism(newAuthMechanism, null));\n+    }\n+\n+    private static AuthenticationMechanism getAuthMechanism(RoutingContext event) {\n+        return event.get(AUTH_MECHANISM);\n+    }\n+\n+    private static String getAuthMechanismScheme(RoutingContext event) {\n+        AuthenticationMechanism authenticationMechanism = getAuthMechanism(event);\n+        if (authenticationMechanism != null) {\n+            return authenticationMechanism.name();\n+        }\n+        return null;\n+    }\n+\n     private static void addBasicAuthMechanismIfImplicitlyRequired(\n             Instance<HttpAuthenticationMechanism> httpAuthenticationMechanism,\n             List<HttpAuthenticationMechanism> mechanisms, Instance<IdentityProvider<?>> providers) {\n@@ -506,7 +548,7 @@ private static void addBasicAuthMechanismIfImplicitlyRequired(\n                     return;\n                 }\n             }\n-            log.debug(\"\"\"\n+            LOG.debug(\"\"\"\n                     BasicAuthenticationMechanism has been enabled because no custom authentication mechanism has been detected\n                     and basic authentication is required either by the HTTP Security Policy or '@BasicAuthentication', but\n                     there is no IdentityProvider based on username and password. Please use one of supported extensions.\n@@ -521,8 +563,11 @@ private static boolean isBasicAuthNotRequired() {\n         }\n         VertxHttpConfig httpConfig = ConfigProvider.getConfig().unwrap(SmallRyeConfig.class)\n                 .getConfigMapping(VertxHttpConfig.class);\n-        for (var policy : httpConfig.auth().permissions().values()) {\n-            if (BasicAuthentication.AUTH_MECHANISM_SCHEME.equals(policy.authMechanism().orElse(null))) {\n+        List<HttpSecurityConfiguration.HttpPermissionCarrier> httpPermissions = HttpSecurityConfiguration\n+                .get(httpConfig).httpPermissions();\n+        for (var permission : httpPermissions) {\n+            if (permission.getAuthMechanism() != null\n+                    && BasicAuthentication.AUTH_MECHANISM_SCHEME.equals(permission.getAuthMechanism().name())) {\n                 return false;\n             }\n         }\n@@ -548,11 +593,6 @@ public Set<Class<? extends AuthenticationRequest>> getCredentialTypes() {\n             return Collections.singleton(AnonymousAuthenticationRequest.class);\n         }\n \n-        @Override\n-        public Uni<HttpCredentialTransport> getCredentialTransport(RoutingContext context) {\n-            return Uni.createFrom().nullItem();\n-        }\n-\n     }\n \n }\n\ndiff --git a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/HttpSecurityConfiguration.java b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/HttpSecurityConfiguration.java\nnew file mode 100644\nindex 0000000000000..860118f0660b7\n--- /dev/null\n+++ b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/HttpSecurityConfiguration.java\n@@ -0,0 +1,145 @@\n+package io.quarkus.vertx.http.runtime.security;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import jakarta.enterprise.event.Event;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.vertx.http.runtime.AuthRuntimeConfig;\n+import io.quarkus.vertx.http.runtime.PolicyMappingConfig;\n+import io.quarkus.vertx.http.runtime.VertxHttpConfig;\n+import io.quarkus.vertx.http.security.HttpSecurity;\n+\n+/**\n+ * This singleton carries final HTTP Security configuration and act as a single source of truth for it.\n+ */\n+record HttpSecurityConfiguration(RolesMapping rolesMapping, List<HttpPermissionCarrier> httpPermissions) {\n+\n+    private static volatile HttpSecurityConfiguration instance = null;\n+\n+    record Policy(String name, HttpSecurityPolicy instance) {\n+    }\n+\n+    record AuthenticationMechanism(String name, HttpAuthenticationMechanism instance) {\n+    }\n+\n+    interface HttpPermissionCarrier {\n+\n+        Set<String> getPaths();\n+\n+        boolean isShared();\n+\n+        boolean shouldApplyToJaxRs();\n+\n+        Set<String> getMethods();\n+\n+        AuthenticationMechanism getAuthMechanism();\n+\n+        Policy getPolicy();\n+\n+        default PolicyMappingConfig.AppliesTo getAppliesTo() {\n+            return shouldApplyToJaxRs() ? PolicyMappingConfig.AppliesTo.JAXRS : PolicyMappingConfig.AppliesTo.ALL;\n+        }\n+    }\n+\n+    // this instance is not in the CDI container to avoid \"potential\" (I am guessing) circular dependencies\n+    // during the bean instantiation as we can't be sure what users will inject when they observe the HTTP Security;\n+    // we could get 'VertxHttpConfig' from SR Config, but this way, we have \"guaranteed\" that the runtime config is ready\n+    static HttpSecurityConfiguration get(VertxHttpConfig vertxHttpConfig) {\n+        if (instance == null) {\n+            synchronized (HttpSecurityConfiguration.class) {\n+                if (instance == null) {\n+                    HttpSecurityImpl httpSecurity = prepareHttpSecurity(vertxHttpConfig.auth());\n+                    instance = new HttpSecurityConfiguration(httpSecurity.getRolesMapping(), httpSecurity.getHttpPermissions());\n+                }\n+            }\n+        }\n+        return instance;\n+    }\n+\n+    private static HttpSecurityImpl prepareHttpSecurity(AuthRuntimeConfig authConfig) {\n+        HttpSecurityImpl httpSecurity = new HttpSecurityImpl();\n+        addAuthRuntimeConfigToHttpSecurity(authConfig, httpSecurity);\n+        Event<HttpSecurity> httpSecurityEvent = Arc.container().beanManager().getEvent().select(HttpSecurity.class);\n+        httpSecurityEvent.fire(httpSecurity);\n+        return httpSecurity;\n+    }\n+\n+    private static void addAuthRuntimeConfigToHttpSecurity(AuthRuntimeConfig authConfig, HttpSecurityImpl httpSecurity) {\n+        if (!authConfig.rolesMapping().isEmpty()) {\n+            httpSecurity.rolesMapping(authConfig.rolesMapping());\n+        }\n+        List<HttpPermissionCarrier> httpPermissions = adaptToHttpPermissionCarriers(authConfig.permissions());\n+        httpSecurity.addHttpPermissions(httpPermissions);\n+    }\n+\n+    static List<HttpPermissionCarrier> adaptToHttpPermissionCarriers(Map<String, PolicyMappingConfig> mappings) {\n+        List<HttpPermissionCarrier> httpPermissions = new ArrayList<>();\n+        for (PolicyMappingConfig mappingConfig : mappings.values()) {\n+            HttpPermissionCarrier httpPermissionCarrier = adaptToHttpPermissionCarrier(mappingConfig);\n+            if (httpPermissionCarrier != null) {\n+                httpPermissions.add(httpPermissionCarrier);\n+            }\n+        }\n+        return httpPermissions;\n+    }\n+\n+    private static HttpPermissionCarrier adaptToHttpPermissionCarrier(PolicyMappingConfig mapping) {\n+        if (!mapping.enabled().orElse(true)) {\n+            // permission disabled\n+            return null;\n+        }\n+        if (mapping.paths().isEmpty() || mapping.paths().get().isEmpty()) {\n+            // no paths means no path-based HTTP permission\n+            return null;\n+        }\n+        return new HttpPermissionCarrier() {\n+            @Override\n+            public Set<String> getPaths() {\n+                return Set.copyOf(mapping.paths().get());\n+            }\n+\n+            @Override\n+            public boolean isShared() {\n+                return mapping.shared();\n+            }\n+\n+            @Override\n+            public boolean shouldApplyToJaxRs() {\n+                return mapping.appliesTo() == PolicyMappingConfig.AppliesTo.JAXRS;\n+            }\n+\n+            @Override\n+            public Set<String> getMethods() {\n+                if (mapping.methods().isEmpty()) {\n+                    return Set.of();\n+                }\n+                return Set.copyOf(mapping.methods().get());\n+            }\n+\n+            @Override\n+            public AuthenticationMechanism getAuthMechanism() {\n+                if (mapping.authMechanism().isPresent()) {\n+                    String authMech = mapping.authMechanism().get();\n+                    if (!authMech.isEmpty()) {\n+                        return new AuthenticationMechanism(authMech, null);\n+                    }\n+                }\n+                return null;\n+            }\n+\n+            @Override\n+            public Policy getPolicy() {\n+                return new Policy(mapping.policy(), null);\n+            }\n+\n+            @Override\n+            public PolicyMappingConfig.AppliesTo getAppliesTo() {\n+                return mapping.appliesTo();\n+            }\n+        };\n+    }\n+}\n\ndiff --git a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/HttpSecurityImpl.java b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/HttpSecurityImpl.java\nnew file mode 100644\nindex 0000000000000..8eb3f84114268\n--- /dev/null\n+++ b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/HttpSecurityImpl.java\n@@ -0,0 +1,499 @@\n+package io.quarkus.vertx.http.runtime.security;\n+\n+import java.security.Permission;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import java.util.function.BiPredicate;\n+import java.util.function.Predicate;\n+\n+import org.eclipse.microprofile.config.ConfigProvider;\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.security.StringPermission;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import io.quarkus.vertx.http.runtime.VertxHttpBuildTimeConfig;\n+import io.quarkus.vertx.http.runtime.security.HttpSecurityConfiguration.HttpPermissionCarrier;\n+import io.quarkus.vertx.http.runtime.security.HttpSecurityConfiguration.Policy;\n+import io.quarkus.vertx.http.runtime.security.annotation.BasicAuthentication;\n+import io.quarkus.vertx.http.runtime.security.annotation.FormAuthentication;\n+import io.quarkus.vertx.http.runtime.security.annotation.MTLSAuthentication;\n+import io.quarkus.vertx.http.security.HttpSecurity;\n+import io.smallrye.config.SmallRyeConfig;\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.core.http.ClientAuth;\n+import io.vertx.ext.web.RoutingContext;\n+\n+final class HttpSecurityImpl implements HttpSecurity {\n+\n+    private static final Logger LOG = Logger.getLogger(HttpSecurityImpl.class.getName());\n+\n+    private final List<HttpPermissionCarrier> httpPermissions;\n+    private RolesMapping rolesMapping;\n+\n+    HttpSecurityImpl() {\n+        this.rolesMapping = null;\n+        this.httpPermissions = new ArrayList<>();\n+    }\n+\n+    @Override\n+    public HttpPermission path(String... patterns) {\n+        if (patterns == null || patterns.length == 0) {\n+            throw new IllegalArgumentException(\"Paths must not be empty\");\n+        }\n+        var httpPermission = new HttpPermissionImpl(patterns);\n+        httpPermissions.add(httpPermission);\n+        return httpPermission;\n+    }\n+\n+    @Override\n+    public HttpPermission get(String... paths) {\n+        return path(paths).methods(\"GET\");\n+    }\n+\n+    @Override\n+    public HttpPermission put(String... paths) {\n+        return path(paths).methods(\"PUT\");\n+    }\n+\n+    @Override\n+    public HttpPermission post(String... paths) {\n+        return path(paths).methods(\"POST\");\n+    }\n+\n+    @Override\n+    public HttpPermission delete(String... paths) {\n+        return path(paths).methods(\"DELETE\");\n+    }\n+\n+    @Override\n+    public HttpSecurity rolesMapping(Map<String, List<String>> roleToRoles) {\n+        if (rolesMapping != null) {\n+            throw new IllegalStateException(\"Roles mapping is already configured\");\n+        }\n+        if (roleToRoles == null || roleToRoles.isEmpty()) {\n+            throw new IllegalArgumentException(\"Roles must not be empty\");\n+        }\n+        roleToRoles.forEach(new BiConsumer<String, List<String>>() {\n+            @Override\n+            public void accept(String sourceRole, List<String> targetRoles) {\n+                if (sourceRole.isEmpty()) {\n+                    throw new IllegalArgumentException(\"Source role must not be empty\");\n+                }\n+                if (targetRoles == null || targetRoles.isEmpty()) {\n+                    throw new IllegalArgumentException(\"Target roles for role '%s' must not be empty\".formatted(sourceRole));\n+                }\n+            }\n+        });\n+\n+        this.rolesMapping = RolesMapping.of(roleToRoles);\n+        return this;\n+    }\n+\n+    @Override\n+    public HttpSecurity rolesMapping(String sourceRole, List<String> targetRoles) {\n+        if (sourceRole == null) {\n+            throw new IllegalArgumentException(\"Source role must not be null\");\n+        }\n+        if (targetRoles == null) {\n+            throw new IllegalArgumentException(\"Target roles for role '%s' must not be null\".formatted(sourceRole));\n+        }\n+        return rolesMapping(Map.of(sourceRole, targetRoles));\n+    }\n+\n+    @Override\n+    public HttpSecurity rolesMapping(String sourceRole, String targetRole) {\n+        if (targetRole == null) {\n+            throw new IllegalArgumentException(\"Target role for role '%s' must not be null\".formatted(sourceRole));\n+        }\n+        return rolesMapping(sourceRole, List.of(targetRole));\n+    }\n+\n+    void addHttpPermissions(List<HttpPermissionCarrier> httpPermissions) {\n+        this.httpPermissions.addAll(httpPermissions);\n+    }\n+\n+    private final class AuthorizationPolicy implements Authorization {\n+\n+        private Policy policy = null;\n+\n+        @Override\n+        public HttpSecurity permit() {\n+            validatePolicyNotSetYet();\n+            this.policy = new Policy(PermitSecurityPolicy.NAME, null);\n+            return HttpSecurityImpl.this;\n+        }\n+\n+        @Override\n+        public HttpSecurity deny() {\n+            validatePolicyNotSetYet();\n+            this.policy = new Policy(DenySecurityPolicy.NAME, null);\n+            return HttpSecurityImpl.this;\n+        }\n+\n+        @Override\n+        public HttpSecurity roles(Map<String, List<String>> roleToRoles, String... roles) {\n+            validatePolicyNotSetYet();\n+            if (roles == null || roles.length == 0) {\n+                throw new IllegalArgumentException(\"Roles must not be empty\");\n+            }\n+            if (roleToRoles == null) {\n+                throw new IllegalArgumentException(\"Role to roles mapping must not be null\");\n+            }\n+            this.policy = new Policy(null, new RolesAllowedHttpSecurityPolicy(Arrays.asList(roles), null, roleToRoles));\n+            return HttpSecurityImpl.this;\n+        }\n+\n+        @Override\n+        public HttpSecurity roles(String... roles) {\n+            return roles(Map.of(), roles);\n+        }\n+\n+        @Override\n+        public HttpSecurity permissions(Permission... permissions) {\n+            validatePolicyNotSetYet();\n+            if (permissions == null || permissions.length == 0) {\n+                throw new IllegalArgumentException(\"Permissions must not be empty\");\n+            }\n+            policy = new Policy(null, new PermissionsHttpSecurityPolicy(permissions));\n+            return HttpSecurityImpl.this;\n+        }\n+\n+        @Override\n+        public HttpSecurity permissions(String... permissionNames) {\n+            Objects.requireNonNull(permissionNames);\n+            StringPermission[] stringPermissions = new StringPermission[permissionNames.length];\n+            for (int i = 0; i < permissionNames.length; i++) {\n+                stringPermissions[i] = new StringPermission(permissionNames[i]);\n+            }\n+            return permissions(stringPermissions);\n+        }\n+\n+        @Override\n+        public HttpSecurity policy(HttpSecurityPolicy httpSecurityPolicy) {\n+            validatePolicyNotSetYet();\n+            if (httpSecurityPolicy == null) {\n+                throw new IllegalArgumentException(\"HttpSecurityPolicy must not be null\");\n+            }\n+            this.policy = new Policy(null, httpSecurityPolicy);\n+            return HttpSecurityImpl.this;\n+        }\n+\n+        @Override\n+        public HttpSecurity policy(Predicate<SecurityIdentity> predicate) {\n+            return policy((identity, request) -> !identity.isAnonymous() && predicate.test(identity));\n+        }\n+\n+        @Override\n+        public HttpSecurity policy(BiPredicate<SecurityIdentity, RoutingContext> predicate) {\n+            return policy(new SimpleHttpSecurityPolicy(predicate));\n+        }\n+\n+        private HttpSecurity authenticated() {\n+            validatePolicyNotSetYet();\n+            this.policy = new Policy(AuthenticatedHttpSecurityPolicy.NAME, null);\n+            return HttpSecurityImpl.this;\n+        }\n+\n+        private void validatePolicyNotSetYet() {\n+            if (policy != null) {\n+                throw new IllegalArgumentException(\"Policy has already been set\");\n+            }\n+        }\n+    }\n+\n+    private final class HttpPermissionImpl implements HttpPermission, HttpPermissionCarrier {\n+\n+        private final String[] paths;\n+        private boolean shared;\n+        private boolean applyToJaxRs;\n+        private String[] methods;\n+        private HttpSecurityConfiguration.AuthenticationMechanism authMechanism;\n+        private AuthorizationPolicy authorizationPolicy;\n+\n+        private HttpPermissionImpl(String[] paths) {\n+            this.paths = Arrays.copyOf(paths, paths.length);\n+            this.authMechanism = null;\n+            this.authorizationPolicy = null;\n+            this.shared = false;\n+            this.methods = null;\n+            this.applyToJaxRs = false;\n+        }\n+\n+        private void requireAuthenticationByDefault() {\n+            // if someone selects authentication mechanism and doesn't configure\n+            // authorization policy, it is reasonable to expect they require authentication\n+            // similarly to what we do with @BasicAuthentication etc.\n+            if (authorizationPolicy == null) {\n+                authenticated();\n+            }\n+        }\n+\n+        private void validateAuthenticationNotSetYet() {\n+            if (authMechanism != null) {\n+                throw new IllegalArgumentException(\"Authentication has already been set\");\n+            }\n+        }\n+\n+        private void validateAuthorizationNotSetYet() {\n+            if (authMechanism == null && authorizationPolicy != null) {\n+                throw new IllegalArgumentException(\"Authorization has already been set\");\n+            }\n+        }\n+\n+        @Override\n+        public HttpPermission basic() {\n+            // TODO: we can enable it automatically during the runtime instead of this\n+            boolean isBasicAuthDisabled = !Arc.container().select(BasicAuthenticationMechanism.class).isResolvable();\n+            if (isBasicAuthDisabled) {\n+                LOG.debug(\"Basic authentication is not available, you can enable it by setting \" +\n+                        \"the 'quarkus.http.auth.basic' configuration property to 'true'. \" +\n+                        \"Please ignore this warning if you provided a custom basic authentication mechanism.\");\n+            }\n+            return authenticatedWith(BasicAuthentication.AUTH_MECHANISM_SCHEME);\n+        }\n+\n+        @Override\n+        public HttpPermission form() {\n+            // TODO: we can enable it automatically during the runtime instead of this\n+            boolean isFormAuthDisabled = !Arc.container().select(FormAuthenticationMechanism.class).isResolvable();\n+            if (isFormAuthDisabled) {\n+                LOG.debug(\"Form-based authentication is not available, you can enable it by setting \" +\n+                        \"the 'quarkus.http.auth.form.enabled' configuration property to 'true'. \" +\n+                        \"Please ignore this warning if you provided a custom form-based authentication mechanism.\");\n+            }\n+            return authenticatedWith(FormAuthentication.AUTH_MECHANISM_SCHEME);\n+        }\n+\n+        @Override\n+        public HttpPermission mTLS() {\n+            boolean mTlsDisabled = ClientAuth.NONE.equals(getHttpBuildTimeConfig().tlsClientAuth());\n+            if (mTlsDisabled) {\n+                throw new IllegalStateException(\n+                        \"TLS client authentication is not available, please set the 'quarkus.http.ssl.client-auth'\"\n+                                + \" configuration property to 'required' or 'request'\");\n+            }\n+            return authenticatedWith(MTLSAuthentication.AUTH_MECHANISM_SCHEME);\n+        }\n+\n+        @Override\n+        public HttpPermission bearer() {\n+            return authenticatedWith(\"Bearer\");\n+        }\n+\n+        @Override\n+        public HttpPermission webAuthn() {\n+            return authenticatedWith(\"webauthn\");\n+        }\n+\n+        @Override\n+        public HttpPermission authorizationCodeFlow() {\n+            return authenticatedWith(\"code\");\n+        }\n+\n+        @Override\n+        public HttpSecurity authenticated() {\n+            return authorization().authenticated();\n+        }\n+\n+        @Override\n+        public HttpPermission authenticatedWith(String mechanism) {\n+            validateAuthenticationNotSetYet();\n+            requireAuthenticationByDefault();\n+            if (mechanism == null || mechanism.isBlank()) {\n+                throw new IllegalArgumentException(\"Authentication mechanism must not be null or blank\");\n+            }\n+            this.authMechanism = new HttpSecurityConfiguration.AuthenticationMechanism(mechanism, null);\n+            return this;\n+        }\n+\n+        @Override\n+        public HttpPermission authenticatedWith(HttpAuthenticationMechanism mechanism) {\n+            validateAuthenticationNotSetYet();\n+            requireAuthenticationByDefault();\n+            if (mechanism == null) {\n+                throw new IllegalArgumentException(\"HttpAuthenticationMechanism must not be null\");\n+            }\n+            this.authMechanism = new HttpSecurityConfiguration.AuthenticationMechanism(null, mechanism);\n+            return this;\n+        }\n+\n+        @Override\n+        public HttpPermission shared() {\n+            this.shared = true;\n+            return this;\n+        }\n+\n+        @Override\n+        public HttpPermission applyToJaxRs() {\n+            this.applyToJaxRs = true;\n+            return this;\n+        }\n+\n+        @Override\n+        public HttpPermission methods(String... httpMethods) {\n+            if (httpMethods == null || httpMethods.length == 0) {\n+                throw new IllegalArgumentException(\"HTTP methods must not be null or empty\");\n+            }\n+            this.methods = Arrays.copyOf(httpMethods, httpMethods.length);\n+            return this;\n+        }\n+\n+        @Override\n+        public AuthorizationPolicy authorization() {\n+            validateAuthorizationNotSetYet();\n+            this.authorizationPolicy = new AuthorizationPolicy();\n+            return authorizationPolicy;\n+        }\n+\n+        @Override\n+        public HttpSecurity permit() {\n+            return authorization().permit();\n+        }\n+\n+        @Override\n+        public HttpSecurity roles(String... roles) {\n+            return authorization().roles(roles);\n+        }\n+\n+        @Override\n+        public HttpSecurity policy(HttpSecurityPolicy httpSecurityPolicy) {\n+            return authorization().policy(httpSecurityPolicy);\n+        }\n+\n+        @Override\n+        public Set<String> getPaths() {\n+            return Set.of(paths);\n+        }\n+\n+        @Override\n+        public boolean isShared() {\n+            return shared;\n+        }\n+\n+        @Override\n+        public boolean shouldApplyToJaxRs() {\n+            return applyToJaxRs;\n+        }\n+\n+        @Override\n+        public Set<String> getMethods() {\n+            return methods == null ? Set.of() : Set.of(methods);\n+        }\n+\n+        @Override\n+        public HttpSecurityConfiguration.AuthenticationMechanism getAuthMechanism() {\n+            return authMechanism;\n+        }\n+\n+        @Override\n+        public Policy getPolicy() {\n+            if (authorizationPolicy == null || authorizationPolicy.policy == null) {\n+                throw new IllegalStateException(\"Authorization Policy has not been set for paths: \" + getPaths());\n+            }\n+            return authorizationPolicy.policy;\n+        }\n+    }\n+\n+    private static final class PermissionsHttpSecurityPolicy implements HttpSecurityPolicy {\n+\n+        private final Permission[] permissions;\n+\n+        private PermissionsHttpSecurityPolicy(Permission[] permissions) {\n+            this.permissions = Arrays.copyOf(permissions, permissions.length);\n+        }\n+\n+        @Override\n+        public Uni<CheckResult> checkPermission(RoutingContext request, Uni<SecurityIdentity> identityUni,\n+                AuthorizationRequestContext requestContext) {\n+            return identityUni.onItemOrFailure()\n+                    .transformToUni(new BiFunction<SecurityIdentity, Throwable, Uni<? extends CheckResult>>() {\n+                        @Override\n+                        public Uni<? extends CheckResult> apply(SecurityIdentity securityIdentity, Throwable throwable) {\n+                            if (throwable != null || securityIdentity == null || securityIdentity.isAnonymous()) {\n+                                if (throwable != null) {\n+                                    LOG.debug(\"Authentication failed, denying access\", throwable);\n+                                }\n+                                return CheckResult.deny();\n+                            }\n+                            return logicalAndPermissionCheck(securityIdentity, 0);\n+                        }\n+                    });\n+        }\n+\n+        private Uni<CheckResult> logicalAndPermissionCheck(SecurityIdentity securityIdentity, int i) {\n+            if (permissions.length == i) {\n+                return CheckResult.permit();\n+            }\n+            return securityIdentity\n+                    .checkPermission(permissions[i])\n+                    .onItemOrFailure().transformToUni(new BiFunction<Boolean, Throwable, Uni<? extends CheckResult>>() {\n+                        @Override\n+                        public Uni<? extends CheckResult> apply(Boolean aBoolean, Throwable throwable) {\n+                            if (throwable == null && Boolean.TRUE.equals(aBoolean)) {\n+                                return logicalAndPermissionCheck(securityIdentity, i + 1);\n+                            }\n+                            if (throwable != null) {\n+                                LOG.debug(\"Failed to check permission, denying access\", throwable);\n+                            }\n+                            return CheckResult.deny();\n+                        }\n+                    });\n+        }\n+    }\n+\n+    private static final class SimpleHttpSecurityPolicy implements HttpSecurityPolicy {\n+\n+        private final BiPredicate<SecurityIdentity, RoutingContext> predicate;\n+\n+        private SimpleHttpSecurityPolicy(BiPredicate<SecurityIdentity, RoutingContext> predicate) {\n+            this.predicate = predicate;\n+        }\n+\n+        @Override\n+        public Uni<CheckResult> checkPermission(RoutingContext request, Uni<SecurityIdentity> identityUni,\n+                AuthorizationRequestContext requestContext) {\n+            return identityUni.onItemOrFailure()\n+                    .transform(new BiFunction<SecurityIdentity, Throwable, CheckResult>() {\n+                        @Override\n+                        public CheckResult apply(SecurityIdentity securityIdentity, Throwable throwable) {\n+                            if (securityIdentity == null) {\n+                                // shouldn't be possible happen...\n+                                return CheckResult.DENY;\n+                            }\n+                            if (throwable != null) {\n+                                LOG.debug(\"Failed to retrieve SecurityIdentity, denying access\", throwable);\n+                                return CheckResult.DENY;\n+                            }\n+                            boolean deny;\n+                            try {\n+                                deny = !predicate.test(securityIdentity, request);\n+                            } catch (Exception e) {\n+                                LOG.debug(\"Failed to check permission, denying access\", e);\n+                                deny = true;\n+                            }\n+                            return deny ? CheckResult.DENY : CheckResult.PERMIT;\n+                        }\n+                    });\n+        }\n+    }\n+\n+    List<HttpPermissionCarrier> getHttpPermissions() {\n+        return List.copyOf(httpPermissions);\n+    }\n+\n+    RolesMapping getRolesMapping() {\n+        return rolesMapping;\n+    }\n+\n+    private static VertxHttpBuildTimeConfig getHttpBuildTimeConfig() {\n+        return ConfigProvider.getConfig().unwrap(SmallRyeConfig.class)\n+                .getConfigMapping(VertxHttpBuildTimeConfig.class);\n+    }\n+}\n\ndiff --git a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/HttpSecurityRecorder.java b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/HttpSecurityRecorder.java\nindex 0414a44fce5a1..5327d70f3bd4e 100644\n--- a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/HttpSecurityRecorder.java\n+++ b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/HttpSecurityRecorder.java\n@@ -68,7 +68,7 @@ public Handler<RoutingContext> getHttpAuthenticatorHandler(RuntimeValue<Authenti\n     public void initializeHttpAuthenticatorHandler(RuntimeValue<AuthenticationHandler> handlerRuntimeValue,\n             VertxHttpConfig httpConfig, BeanContainer beanContainer) {\n         handlerRuntimeValue.getValue().init(beanContainer.beanInstance(PathMatchingHttpSecurityPolicy.class),\n-                RolesMapping.of(httpConfig.auth().rolesMapping()));\n+                HttpSecurityConfiguration.get(httpConfig).rolesMapping());\n     }\n \n     public Handler<RoutingContext> permissionCheckHandler() {\n@@ -163,6 +163,11 @@ public Map<String, Object> get() {\n         };\n     }\n \n+    public void prepareHttpSecurityConfiguration(VertxHttpConfig httpConfig) {\n+        // this is done so that we prepare and validate HTTP Security config before the first incoming request\n+        HttpSecurityConfiguration.get(httpConfig);\n+    }\n+\n     public static abstract class DefaultAuthFailureHandler implements BiConsumer<RoutingContext, Throwable> {\n \n         /**\n\ndiff --git a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/JaxRsPathMatchingHttpSecurityPolicy.java b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/JaxRsPathMatchingHttpSecurityPolicy.java\nindex 1382435b121b6..04fd7d399ffe5 100644\n--- a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/JaxRsPathMatchingHttpSecurityPolicy.java\n+++ b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/JaxRsPathMatchingHttpSecurityPolicy.java\n@@ -37,7 +37,8 @@ public class JaxRsPathMatchingHttpSecurityPolicy {\n             Instance<HttpSecurityPolicy> installedPolicies, VertxHttpConfig httpConfig,\n             VertxHttpBuildTimeConfig httpBuildTimeConfig, BlockingSecurityExecutor blockingSecurityExecutor) {\n         this.storage = storage;\n-        this.delegate = new AbstractPathMatchingHttpSecurityPolicy(httpConfig.auth().permissions(),\n+        this.delegate = new AbstractPathMatchingHttpSecurityPolicy(\n+                HttpSecurityConfiguration.get(httpConfig).httpPermissions(),\n                 httpConfig.auth().rolePolicy(), httpBuildTimeConfig.rootPath(), installedPolicies, JAXRS);\n         this.foundNoAnnotatedMethods = storage.getMethodToPolicyName().isEmpty();\n         this.requestContext = new DefaultAuthorizationRequestContext(blockingSecurityExecutor);\n\ndiff --git a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/ManagementPathMatchingHttpSecurityPolicy.java b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/ManagementPathMatchingHttpSecurityPolicy.java\nindex 5dc2637ffab17..582d28729b42d 100644\n--- a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/ManagementPathMatchingHttpSecurityPolicy.java\n+++ b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/ManagementPathMatchingHttpSecurityPolicy.java\n@@ -1,6 +1,7 @@\n package io.quarkus.vertx.http.runtime.security;\n \n import static io.quarkus.vertx.http.runtime.PolicyMappingConfig.AppliesTo.ALL;\n+import static io.quarkus.vertx.http.runtime.security.HttpSecurityConfiguration.adaptToHttpPermissionCarriers;\n \n import jakarta.enterprise.inject.Instance;\n import jakarta.inject.Singleton;\n@@ -18,7 +19,7 @@ public class ManagementPathMatchingHttpSecurityPolicy extends AbstractPathMatchi\n     ManagementPathMatchingHttpSecurityPolicy(\n             ManagementInterfaceBuildTimeConfig managementBuildTimeConfig,\n             ManagementConfig managementConfig, Instance<HttpSecurityPolicy> installedPolicies) {\n-        super(managementConfig.auth().permissions(), managementConfig.auth().rolePolicy(), managementBuildTimeConfig.rootPath(),\n-                installedPolicies, ALL);\n+        super(adaptToHttpPermissionCarriers(managementConfig.auth().permissions()),\n+                managementConfig.auth().rolePolicy(), managementBuildTimeConfig.rootPath(), installedPolicies, ALL);\n     }\n }\n\ndiff --git a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/PathMatchingHttpSecurityPolicy.java b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/PathMatchingHttpSecurityPolicy.java\nindex df8f711692ddf..2f1bbbd765ebf 100644\n--- a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/PathMatchingHttpSecurityPolicy.java\n+++ b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/PathMatchingHttpSecurityPolicy.java\n@@ -18,8 +18,8 @@ public class PathMatchingHttpSecurityPolicy extends AbstractPathMatchingHttpSecu\n     PathMatchingHttpSecurityPolicy(\n             VertxHttpConfig httpConfig, VertxHttpBuildTimeConfig httpBuildTimeConfig,\n             Instance<HttpSecurityPolicy> installedPolicies) {\n-        super(httpConfig.auth().permissions(), httpConfig.auth().rolePolicy(), httpBuildTimeConfig.rootPath(),\n-                installedPolicies,\n-                ALL);\n+        super(HttpSecurityConfiguration.get(httpConfig).httpPermissions(),\n+                httpConfig.auth().rolePolicy(), httpBuildTimeConfig.rootPath(),\n+                installedPolicies, ALL);\n     }\n }\n\ndiff --git a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/PermitSecurityPolicy.java b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/PermitSecurityPolicy.java\nindex 521f781404377..7df83c93054ee 100644\n--- a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/PermitSecurityPolicy.java\n+++ b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/PermitSecurityPolicy.java\n@@ -6,6 +6,8 @@\n \n public class PermitSecurityPolicy implements HttpSecurityPolicy {\n \n+    public static final String NAME = \"permit\";\n+\n     @Override\n     public Uni<CheckResult> checkPermission(RoutingContext request, Uni<SecurityIdentity> identity,\n             AuthorizationRequestContext requestContext) {\n\ndiff --git a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/security/HttpSecurity.java b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/security/HttpSecurity.java\nnew file mode 100644\nindex 0000000000000..0267b2bc21908\n--- /dev/null\n+++ b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/security/HttpSecurity.java\n@@ -0,0 +1,290 @@\n+package io.quarkus.vertx.http.security;\n+\n+import java.security.Permission;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiPredicate;\n+import java.util.function.Predicate;\n+\n+import io.quarkus.security.identity.SecurityIdentity;\n+import io.quarkus.vertx.http.runtime.security.HttpAuthenticationMechanism;\n+import io.quarkus.vertx.http.runtime.security.HttpCredentialTransport;\n+import io.quarkus.vertx.http.runtime.security.HttpSecurityPolicy;\n+import io.vertx.ext.web.RoutingContext;\n+\n+/**\n+ * A CDI event that facilitates programmatic path-specific authorization setup.\n+ * The event can be observed with synchronous observer method like in the example below:\n+ *\n+ * <pre>\n+ * {@code\n+ * import jakarta.enterprise.event.Observes;\n+ *\n+ * public class HttpSecurityConfiguration {\n+ *\n+ *     void observe(@Observes HttpSecurity httpSecurity) {\n+ *         httpSecurity\n+ *                 .path(\"/admin/*\").basic().roles(\"admin\")\n+ *                 .path(\"/user/*\").form().roles(\"user\")\n+ *                 .path(\"/public/*\").permit();\n+ *         // and:\n+ *         httpSecurity.path(\"/root*\").authorization()\n+ *                 .policy(identity -> \"root\".equals(identity.getPrincipal().getName()));\n+ *     }\n+ * }\n+ * }\n+ * </pre>\n+ *\n+ * If multiple path-patterns matches an incoming request path, the most specific pattern wins.\n+ * Expected behavior for the programmatic configuration is very much same as for the HTTP permissions\n+ * specified in the 'application.properties' file.\n+ * For example following configuration properties:\n+ *\n+ * <pre>\n+ * {@code\n+ * quarkus.http.auth.permission.deny1.paths=/forbidden\n+ * quarkus.http.auth.permission.deny1.policy=deny\n+ * }\n+ * </pre>\n+ *\n+ * can be also written as:\n+ *\n+ * <pre>\n+ * {@code\n+ * httpSecurity.path(\"/forbidden\").authorization().deny();\n+ * }\n+ * </pre>\n+ *\n+ * Programmatic setup for the management interface is currently not supported.\n+ * This CDI event is fired when the runtime configuration is ready,\n+ * therefore you can inject configuration properties like this:\n+ *\n+ * <pre>\n+ * {@code\n+ * import jakarta.enterprise.event.Observes;\n+ *\n+ * import io.quarkus.vertx.http.security.HttpSecurity;\n+ * import org.eclipse.microprofile.config.inject.ConfigProperty;\n+ *\n+ * public class HttpSecurityConfiguration {\n+ *\n+ *     void configure(@Observes HttpSecurity httpSecurity, @ConfigProperty(name = \"admin1-role\") String admin1) {\n+ *         httpSecurity.rolesMapping(\"admin\", admin1);\n+ *     }\n+ * }\n+ * }\n+ * </pre>\n+ */\n+public interface HttpSecurity {\n+\n+    /**\n+     * Creates {@link HttpPermission}.\n+     *\n+     * @param paths path patterns; this is programmatic analogy to the 'quarkus.http.auth.permission.\"permissions\".paths'\n+     *        configuration property, same rules apply\n+     * @return new {@link HttpPermission}\n+     */\n+    HttpPermission path(String... paths);\n+\n+    /**\n+     * This method is a shortcut for {@code path(path).methods(\"GET\")}.\n+     *\n+     * @see #path(String...)\n+     */\n+    HttpPermission get(String... paths);\n+\n+    /**\n+     * This method is a shortcut for {@code path(path).methods(\"PUT\")}.\n+     *\n+     * @see #path(String...)\n+     */\n+    HttpPermission put(String... paths);\n+\n+    /**\n+     * This method is a shortcut for {@code path(path).methods(\"POST\")}.\n+     *\n+     * @see #path(String...)\n+     */\n+    HttpPermission post(String... paths);\n+\n+    /**\n+     * This method is a shortcut for {@code path(path).methods(\"DELETE\")}.\n+     *\n+     * @see #path(String...)\n+     */\n+    HttpPermission delete(String... paths);\n+\n+    /**\n+     * Map the `SecurityIdentity` roles to deployment specific roles and add the matching roles to `SecurityIdentity`.\n+     * Programmatic analogy to the 'quarkus.http.auth.roles-mapping.\"role-name\"' configuration property.\n+     * If the configuration property is already set, invocation of this method fails as both methods are mutually exclusive.\n+     */\n+    HttpSecurity rolesMapping(Map<String, List<String>> roleToRoles);\n+\n+    /**\n+     * @see #rolesMapping(Map)\n+     */\n+    HttpSecurity rolesMapping(String sourceRole, List<String> targetRoles);\n+\n+    /**\n+     * @see #rolesMapping(Map)\n+     */\n+    HttpSecurity rolesMapping(String sourceRole, String targetRole);\n+\n+    /**\n+     * Represents authorization and authentication requirements for given path patterns.\n+     */\n+    interface HttpPermission {\n+\n+        /**\n+         * HTTP request must be authenticated using basic authentication.\n+         */\n+        HttpPermission basic();\n+\n+        /**\n+         * HTTP request must be authenticated using form-based authentication.\n+         */\n+        HttpPermission form();\n+\n+        /**\n+         * HTTP request must be authenticated using mutual-TLS authentication.\n+         */\n+        HttpPermission mTLS();\n+\n+        /**\n+         * HTTP request must be authenticated using Bearer token authentication.\n+         */\n+        HttpPermission bearer();\n+\n+        /**\n+         * HTTP request must be authenticated using WebAuthn mechanism.\n+         */\n+        HttpPermission webAuthn();\n+\n+        /**\n+         * HTTP request must be authenticated using Authorization Code Flow mechanism.\n+         */\n+        HttpPermission authorizationCodeFlow();\n+\n+        /**\n+         * HTTP requests will only be accessible if {@link io.quarkus.security.identity.SecurityIdentity}\n+         * is not anonymous.\n+         */\n+        HttpSecurity authenticated();\n+\n+        /**\n+         * HTTP request must be authenticated using a mechanism\n+         * with matching {@link HttpCredentialTransport#getAuthenticationScheme()}.\n+         * Please note that annotation-based mechanism selection has higher priority during the mechanism selection.\n+         */\n+        HttpPermission authenticatedWith(String scheme);\n+\n+        /**\n+         * HTTP request must be authenticated with this mechanism.\n+         * Please note that annotation-based mechanism selection has higher priority during the mechanism selection.\n+         */\n+        HttpPermission authenticatedWith(HttpAuthenticationMechanism mechanism);\n+\n+        /**\n+         * Indicates that this policy always applies to the matched paths in addition to the policy with a winning path.\n+         * Programmatic analogy to the 'quarkus.http.auth.permission.\"permissions\".shared' configuration property.\n+         */\n+        HttpPermission shared();\n+\n+        /**\n+         * Whether permission check should be applied on all matching paths, or paths specific for the Jakarta REST resources.\n+         * Programmatic analogy to the 'quarkus.http.auth.permission.\"permissions\".applies-to' configuration property.\n+         */\n+        HttpPermission applyToJaxRs();\n+\n+        /**\n+         * The methods that this permission set applies to. If this is not set then they apply to all methods.\n+         * Programmatic analogy to the 'quarkus.http.auth.permission.\"permissions\".methods' configuration property.\n+         */\n+        HttpPermission methods(String... httpMethods);\n+\n+        /**\n+         * Allows to configure HTTP request authorization requirement on the returned instance.\n+         */\n+        Authorization authorization();\n+\n+        /**\n+         * This method is a shortcut for {@link Authorization#permit()}.\n+         */\n+        HttpSecurity permit();\n+\n+        /**\n+         * This method is a shortcut for {@link Authorization#roles(String...)}.\n+         */\n+        HttpSecurity roles(String... roles);\n+\n+        /**\n+         * This method is a shortcut for {@link Authorization#policy(HttpSecurityPolicy)}.\n+         */\n+        HttpSecurity policy(HttpSecurityPolicy httpSecurityPolicy);\n+    }\n+\n+    /**\n+     * Represents HTTP request authorization.\n+     */\n+    interface Authorization {\n+\n+        /**\n+         * Access to HTTP requests will be permitted.\n+         */\n+        HttpSecurity permit();\n+\n+        /**\n+         * Access to HTTP requests will be denied.\n+         */\n+        HttpSecurity deny();\n+\n+        /**\n+         * HTTP requests will only be accessible if {@link io.quarkus.security.identity.SecurityIdentity}\n+         * has all the required roles. Roles must be literal, property expansion is not supported here.\n+         *\n+         * @param roleToRoles see the 'quarkus.http.auth.policy.\"role-policy\".roles.\"role-name\"' configuration property\n+         * @param rolesAllowed see the 'quarkus.http.auth.policy.\"role-policy\".roles-allowed' configuration property\n+         * @return HttpSecurity\n+         */\n+        HttpSecurity roles(Map<String, List<String>> roleToRoles, String... rolesAllowed);\n+\n+        /**\n+         * HTTP requests will only be accessible if {@link io.quarkus.security.identity.SecurityIdentity}\n+         * has all the required roles. Roles must be literal, property expansion is not supported here.\n+         */\n+        HttpSecurity roles(String... roles);\n+\n+        /**\n+         * HTTP requests will only be accessible if {@link io.quarkus.security.identity.SecurityIdentity}\n+         * has all the required permissions.\n+         */\n+        HttpSecurity permissions(Permission... requiredPermissions);\n+\n+        /**\n+         * HTTP requests will only be accessible if {@link io.quarkus.security.identity.SecurityIdentity}\n+         * has all the required {@link io.quarkus.security.StringPermission}s.\n+         *\n+         * @param permissionNames required {@link Permission#getName()}\n+         */\n+        HttpSecurity permissions(String... permissionNames);\n+\n+        /**\n+         * HTTP requests will only be accessible if the passed {@link HttpSecurityPolicy} grants access.\n+         */\n+        HttpSecurity policy(HttpSecurityPolicy policy);\n+\n+        /**\n+         * HTTP requests will only be accessible if the passed predicate returns {@code true}.\n+         * This is a shortcut method for {@link #policy(HttpSecurityPolicy)}.\n+         * The {@link SecurityIdentity} in this special case is never anonymous, anonymous requests will be denied.\n+         */\n+        HttpSecurity policy(Predicate<SecurityIdentity> predicate);\n+\n+        /**\n+         * HTTP requests will only be accessible if the passed predicate returns {@code true}.\n+         * This is a shortcut method for {@link #policy(HttpSecurityPolicy)}.\n+         */\n+        HttpSecurity policy(BiPredicate<SecurityIdentity, RoutingContext> predicate);\n+    }\n+}\n",
    "test_patch": "diff --git a/extensions/oidc/deployment/src/test/java/io/quarkus/oidc/test/ImplicitBasicAuthAndBearerAuthCombinationTest.java b/extensions/oidc/deployment/src/test/java/io/quarkus/oidc/test/ImplicitBasicAuthAndBearerAuthCombinationTest.java\nindex 857130a08ef65..9fea93fc4143a 100644\n--- a/extensions/oidc/deployment/src/test/java/io/quarkus/oidc/test/ImplicitBasicAuthAndBearerAuthCombinationTest.java\n+++ b/extensions/oidc/deployment/src/test/java/io/quarkus/oidc/test/ImplicitBasicAuthAndBearerAuthCombinationTest.java\n@@ -1,5 +1,6 @@\n package io.quarkus.oidc.test;\n \n+import jakarta.enterprise.event.Observes;\n import jakarta.inject.Inject;\n import jakarta.ws.rs.GET;\n import jakarta.ws.rs.Path;\n@@ -15,6 +16,7 @@\n import io.quarkus.test.common.QuarkusTestResource;\n import io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager;\n import io.quarkus.vertx.http.runtime.security.annotation.BasicAuthentication;\n+import io.quarkus.vertx.http.security.HttpSecurity;\n import io.restassured.RestAssured;\n \n @QuarkusTestResource(KeycloakTestResourceLifecycleManager.class)\n@@ -23,7 +25,7 @@ public class ImplicitBasicAuthAndBearerAuthCombinationTest {\n     @RegisterExtension\n     static final QuarkusDevModeTest test = new QuarkusDevModeTest()\n             .withApplicationRoot((jar) -> jar\n-                    .addClasses(BasicBearerResource.class)\n+                    .addClasses(BasicBearerResource.class, BearerPathBasedResource.class)\n                     .addAsResource(\n                             new StringAsset(\"\"\"\n                                     quarkus.security.users.embedded.enabled=true\n@@ -41,10 +43,14 @@ public void testBasicEnabledAsSelectedWithAnnotation() {\n         // endpoint is annotated with 'BasicAuthentication', so basic auth must be enabled\n         RestAssured.given().auth().oauth2(getAccessToken()).get(\"/basic-bearer/bearer\")\n                 .then().statusCode(200).body(Matchers.is(\"alice\"));\n+        RestAssured.given().auth().oauth2(getAccessToken()).get(\"/basic-bearer/bearer-path-based\")\n+                .then().statusCode(200).body(Matchers.is(\"alice\"));\n         RestAssured.given().auth().basic(\"alice\", \"alice\").get(\"/basic-bearer/basic\")\n                 .then().statusCode(204);\n         RestAssured.given().auth().basic(\"alice\", \"alice\").get(\"/basic-bearer/bearer\")\n                 .then().statusCode(401);\n+        RestAssured.given().auth().basic(\"alice\", \"alice\").get(\"/basic-bearer/bearer-path-based\")\n+                .then().statusCode(401);\n         RestAssured.given().auth().oauth2(getAccessToken()).get(\"/basic-bearer/basic\")\n                 .then().statusCode(401);\n     }\n@@ -72,6 +78,23 @@ public String basic() {\n         public String bearer() {\n             return accessToken.getName();\n         }\n+\n+    }\n+\n+    @Path(\"/basic-bearer/bearer-path-based\")\n+    public static class BearerPathBasedResource {\n+\n+        @Inject\n+        JsonWebToken accessToken;\n+\n+        @GET\n+        public String bearerPathBased() {\n+            return accessToken.getName();\n+        }\n+\n+        void selectBearerUsingPathRule(@Observes HttpSecurity httpSecurity) {\n+            httpSecurity.path(\"/basic-bearer/bearer-path-based\").bearer();\n+        }\n     }\n \n }\n\ndiff --git a/extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/security/ConfigBasedPathMatchingHttpSecurityPolicyTest.java b/extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/security/ConfigBasedPathMatchingHttpSecurityPolicyTest.java\nnew file mode 100644\nindex 0000000000000..0cb230744a6d7\n--- /dev/null\n+++ b/extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/security/ConfigBasedPathMatchingHttpSecurityPolicyTest.java\n@@ -0,0 +1,59 @@\n+package io.quarkus.vertx.http.security;\n+\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class ConfigBasedPathMatchingHttpSecurityPolicyTest extends PathMatchingHttpSecurityPolicyTest {\n+\n+    private static final String APP_PROPS = \"\"\"\n+            quarkus.http.auth.permission.authenticated.paths=/\n+            quarkus.http.auth.permission.authenticated.policy=authenticated\n+            quarkus.http.auth.permission.public.paths=/api*\n+            quarkus.http.auth.permission.public.policy=permit\n+            quarkus.http.auth.permission.foo.paths=/api/foo/bar\n+            quarkus.http.auth.permission.foo.policy=authenticated\n+            quarkus.http.auth.permission.unsecured.paths=/api/public\n+            quarkus.http.auth.permission.unsecured.policy=permit\n+            quarkus.http.auth.permission.inner-wildcard.paths=/api/*/bar\n+            quarkus.http.auth.permission.inner-wildcard.policy=authenticated\n+            quarkus.http.auth.permission.inner-wildcard2.paths=/api/next/*/prev\n+            quarkus.http.auth.permission.inner-wildcard2.policy=authenticated\n+            quarkus.http.auth.permission.inner-wildcard3.paths=/api/one/*/three/*\n+            quarkus.http.auth.permission.inner-wildcard3.policy=authenticated\n+            quarkus.http.auth.permission.inner-wildcard4.paths=/api/one/*/*/five\n+            quarkus.http.auth.permission.inner-wildcard4.policy=authenticated\n+            quarkus.http.auth.permission.inner-wildcard5.paths=/api/one/*/jamaica/*\n+            quarkus.http.auth.permission.inner-wildcard5.policy=permit\n+            quarkus.http.auth.permission.inner-wildcard6.paths=/api/*/sadly/*/dont-know\n+            quarkus.http.auth.permission.inner-wildcard6.policy=deny\n+            quarkus.http.auth.permission.baz.paths=/api/baz\n+            quarkus.http.auth.permission.baz.policy=authenticated\n+            quarkus.http.auth.permission.static-resource.paths=/static-file.html\n+            quarkus.http.auth.permission.static-resource.policy=authenticated\n+            quarkus.http.auth.permission.fubar.paths=/api/fubar/baz*\n+            quarkus.http.auth.permission.fubar.policy=authenticated\n+            quarkus.http.auth.permission.management.paths=/q/*\n+            quarkus.http.auth.permission.management.policy=authenticated\n+            quarkus.http.auth.policy.shared1.roles.root=admin,user\n+            quarkus.http.auth.permission.shared1.paths=/secured/*\n+            quarkus.http.auth.permission.shared1.policy=shared1\n+            quarkus.http.auth.permission.shared1.shared=true\n+            quarkus.http.auth.policy.unshared1.roles-allowed=user\n+            quarkus.http.auth.permission.unshared1.paths=/secured/user/*\n+            quarkus.http.auth.permission.unshared1.policy=unshared1\n+            quarkus.http.auth.policy.unshared2.roles-allowed=admin\n+            quarkus.http.auth.permission.unshared2.paths=/secured/admin/*\n+            quarkus.http.auth.permission.unshared2.policy=unshared2\n+            quarkus.http.auth.permission.shared2.paths=/*\n+            quarkus.http.auth.permission.shared2.shared=true\n+            quarkus.http.auth.permission.shared2.policy=custom\n+            quarkus.http.auth.roles-mapping.root1=admin,user\n+            quarkus.http.auth.roles-mapping.admin1=admin\n+            quarkus.http.auth.roles-mapping.public1=public2\n+            \"\"\";\n+\n+    @RegisterExtension\n+    static QuarkusUnitTest test = createQuarkusUnitTest(APP_PROPS);\n+\n+}\n\ndiff --git a/extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/security/FluentApiAuthenticationMechanismSelectionTest.java b/extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/security/FluentApiAuthenticationMechanismSelectionTest.java\nnew file mode 100644\nindex 0000000000000..d473f48962849\n--- /dev/null\n+++ b/extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/security/FluentApiAuthenticationMechanismSelectionTest.java\n@@ -0,0 +1,284 @@\n+package io.quarkus.vertx.http.security;\n+\n+import static io.restassured.matcher.RestAssuredMatchers.detailedCookie;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import java.io.File;\n+import java.net.URL;\n+import java.util.Set;\n+\n+import jakarta.enterprise.context.ApplicationScoped;\n+import jakarta.enterprise.event.Observes;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.security.StringPermission;\n+import io.quarkus.security.identity.IdentityProviderManager;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import io.quarkus.security.identity.request.AuthenticationRequest;\n+import io.quarkus.security.test.utils.TestIdentityController;\n+import io.quarkus.security.test.utils.TestIdentityProvider;\n+import io.quarkus.test.QuarkusUnitTest;\n+import io.quarkus.test.common.http.TestHTTPResource;\n+import io.quarkus.vertx.http.runtime.security.BasicAuthenticationMechanism;\n+import io.quarkus.vertx.http.runtime.security.ChallengeData;\n+import io.quarkus.vertx.http.runtime.security.HttpAuthenticationMechanism;\n+import io.quarkus.vertx.http.runtime.security.HttpCredentialTransport;\n+import io.quarkus.vertx.http.runtime.security.HttpSecurityPolicy;\n+import io.restassured.RestAssured;\n+import io.restassured.filter.cookie.CookieFilter;\n+import io.smallrye.certs.Format;\n+import io.smallrye.certs.junit5.Certificate;\n+import io.smallrye.certs.junit5.Certificates;\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@Certificates(baseDir = \"target/certs\", certificates = @Certificate(name = \"mtls-test\", password = \"secret\", formats = Format.PKCS12, client = true))\n+public class FluentApiAuthenticationMechanismSelectionTest {\n+\n+    @RegisterExtension\n+    static QuarkusUnitTest test = new QuarkusUnitTest().setArchiveProducer(() -> ShrinkWrap\n+            .create(JavaArchive.class)\n+            .addClasses(AuthMechanismConfig.class, TestIdentityController.class, TestIdentityProvider.class,\n+                    PathHandler.class, TestTrustedIdentityProvider.class, CustomHttpSecurityPolicy.class,\n+                    CustomSchemeAuthenticationMechanism.class, AbstractCustomAuthenticationMechanism.class)\n+            .addAsResource(new StringAsset(\"\"\"\n+                    quarkus.http.auth.form.enabled=true\n+                    quarkus.http.auth.basic=true\n+                    quarkus.http.ssl.client-auth=request\n+                    quarkus.http.ssl.certificate.key-store-file=server-keystore.p12\n+                    quarkus.http.ssl.certificate.key-store-password=secret\n+                    quarkus.http.ssl.certificate.trust-store-file=server-truststore.p12\n+                    quarkus.http.ssl.certificate.trust-store-password=secret\n+                    \"\"\"), \"application.properties\")\n+            .addAsResource(new File(\"target/certs/mtls-test-keystore.p12\"), \"server-keystore.p12\")\n+            .addAsResource(new File(\"target/certs/mtls-test-server-truststore.p12\"), \"server-truststore.p12\"));\n+\n+    @TestHTTPResource(value = \"/mtls\", tls = true)\n+    URL url;\n+\n+    @BeforeAll\n+    public static void setup() {\n+        TestIdentityController.resetRoles()\n+                .add(\"admin\", \"admin\", new StringPermission(\"openid\"), new StringPermission(\"email\"),\n+                        new StringPermission(\"profile\"))\n+                .add(\"user\", \"user\", new StringPermission(\"profile\"));\n+    }\n+\n+    @Test\n+    public void testForm() {\n+        CookieFilter adminCookies = new CookieFilter();\n+        loginUsingFormAuth(adminCookies, \"admin\");\n+\n+        // valid request\n+        RestAssured\n+                .given()\n+                .filter(adminCookies)\n+                .redirects().follow(false)\n+                .when()\n+                .get(\"/form/admin\")\n+                .then()\n+                .assertThat()\n+                .statusCode(200)\n+                .body(equalTo(\"admin:/form/admin\"));\n+\n+        // the same valid request but policy is applied because we added the header, so expect a failure\n+        CookieFilter userCookies = new CookieFilter();\n+        loginUsingFormAuth(userCookies, \"user\");\n+        RestAssured\n+                .given()\n+                .filter(userCookies)\n+                .redirects().follow(false)\n+                .header(\"fail\", \"ignored\")\n+                .when()\n+                .get(\"/form/admin\")\n+                .then()\n+                .assertThat()\n+                .statusCode(403);\n+\n+        // basic authentication -> authentication must fail\n+        RestAssured\n+                .given()\n+                .auth().preemptive().basic(\"admin\", \"admin\")\n+                .redirects().follow(false)\n+                .when()\n+                .get(\"/form/admin\")\n+                .then()\n+                .assertThat()\n+                .statusCode(302)\n+                .header(\"location\", containsString(\"/login.html\"));\n+\n+        // basic authentication & POST -> access is going to be denied as there are permissions with POST method\n+        RestAssured\n+                .given()\n+                .auth().preemptive().basic(\"admin\", \"admin\")\n+                .redirects().follow(false)\n+                .when()\n+                .post(\"/form/admin\")\n+                .then()\n+                .assertThat()\n+                .statusCode(403);\n+\n+        // basic authentication & PUT -> access is granted because this method is specifically configured for 'basic'\n+        RestAssured\n+                .given()\n+                .auth().preemptive().basic(\"admin\", \"admin\")\n+                .redirects().follow(false)\n+                .when()\n+                .put(\"/form/admin\")\n+                .then()\n+                .assertThat()\n+                .statusCode(200)\n+                .body(equalTo(\"admin:/form/admin\"));\n+    }\n+\n+    @Test\n+    public void testBasicAuth() {\n+        basicAuthTest(\"/basic/admin\", \"admin:/basic/admin\");\n+    }\n+\n+    @Test\n+    public void testCustomAuthenticationMechanismScheme() {\n+        basicAuthTest(\"/custom-scheme/admin\", \"admin:/custom-scheme/admin\");\n+    }\n+\n+    @Test\n+    public void testCustomAuthenticationMechanismInstance() {\n+        basicAuthTest(\"/custom-instance/admin\", \"admin:/custom-instance/admin\");\n+    }\n+\n+    @Test\n+    public void testMutualTlsMechanism() {\n+        RestAssured.given()\n+                .keyStore(\"target/certs/mtls-test-client-keystore.p12\", \"secret\")\n+                .trustStore(\"target/certs/mtls-test-client-truststore.p12\", \"secret\")\n+                .get(url).then().statusCode(200).body(is(\"CN=localhost:/mtls\"));\n+        RestAssured.given()\n+                .trustStore(\"target/certs/mtls-test-client-truststore.p12\", \"secret\")\n+                .get(url).then().statusCode(401);\n+        try {\n+            RestAssured\n+                    .given()\n+                    .auth().preemptive().basic(\"admin\", \"admin\")\n+                    .when()\n+                    .get(url)\n+                    .then()\n+                    .assertThat()\n+                    .statusCode(401);\n+            Assertions.fail(\"Request should had fail because mTLS must be required\");\n+        } catch (Exception exception) {\n+            Assertions.assertTrue(exception.getMessage().contains(\"PKIX path building failed\"));\n+        }\n+    }\n+\n+    private static void basicAuthTest(String s, String operand) {\n+        RestAssured\n+                .given()\n+                .auth().preemptive().basic(\"admin\", \"admin\")\n+                .when()\n+                .get(s)\n+                .then()\n+                .assertThat()\n+                .statusCode(200)\n+                .body(equalTo(operand));\n+        RestAssured\n+                .given()\n+                .auth().preemptive().basic(\"user\", \"user\")\n+                .when()\n+                .get(s)\n+                .then()\n+                .assertThat()\n+                .statusCode(403);\n+        RestAssured\n+                .given()\n+                .get(s)\n+                .then()\n+                .assertThat()\n+                .statusCode(401);\n+    }\n+\n+    private static void loginUsingFormAuth(CookieFilter adminCookies, String user) {\n+        RestAssured\n+                .given()\n+                .filter(adminCookies)\n+                .redirects().follow(false)\n+                .when()\n+                .formParam(\"j_username\", user)\n+                .formParam(\"j_password\", user)\n+                .post(\"/j_security_check\")\n+                .then()\n+                .assertThat()\n+                .statusCode(302)\n+                .header(\"location\", containsString(\"/index.html\"))\n+                .cookie(\"quarkus-credential\",\n+                        detailedCookie().value(notNullValue()).path(equalTo(\"/\")));\n+    }\n+\n+    public static class AuthMechanismConfig {\n+\n+        void configure(@Observes HttpSecurity httpSecurity) {\n+            httpSecurity\n+                    .get(\"/form/admin\").form().authorization()\n+                    .policy(identity -> \"admin\".equals(identity.getPrincipal().getName()))\n+                    .put(\"/form/admin\").basic().authorization()\n+                    .policy(identity -> \"admin\".equals(identity.getPrincipal().getName()))\n+                    .path(\"/basic/admin\").methods(\"GET\").basic().authorization().permissions(\"openid\", \"email\", \"profile\")\n+                    .path(\"/custom-scheme/admin\").authenticatedWith(\"custom-scheme\").policy(new CustomHttpSecurityPolicy())\n+                    .path(\"/custom-instance/admin\").authenticatedWith(new AbstractCustomAuthenticationMechanism() {\n+                    }).authorization().policy((identity, event) -> identity.hasRole(\"admin\")\n+                            && event.normalizedPath().endsWith(\"/custom-instance/admin\"))\n+                    .path(\"/mtls\").mTLS();\n+        }\n+\n+    }\n+\n+    public static final class CustomHttpSecurityPolicy implements HttpSecurityPolicy {\n+        @Override\n+        public Uni<CheckResult> checkPermission(RoutingContext request, Uni<SecurityIdentity> identityUni,\n+                AuthorizationRequestContext requestContext) {\n+            return identityUni.onItemOrFailure().transform((identity, throwable) -> {\n+                if (throwable == null && identity.hasRole(\"admin\")) {\n+                    return CheckResult.PERMIT;\n+                }\n+                return CheckResult.DENY;\n+            });\n+        }\n+    }\n+\n+    @ApplicationScoped\n+    public static class CustomSchemeAuthenticationMechanism extends AbstractCustomAuthenticationMechanism {\n+        @Override\n+        public Uni<HttpCredentialTransport> getCredentialTransport(RoutingContext context) {\n+            return Uni.createFrom()\n+                    .item(new HttpCredentialTransport(HttpCredentialTransport.Type.AUTHORIZATION, \"custom-scheme\"));\n+        }\n+    }\n+\n+    public static abstract class AbstractCustomAuthenticationMechanism implements HttpAuthenticationMechanism {\n+        private final HttpAuthenticationMechanism delegate = new BasicAuthenticationMechanism(null);\n+\n+        @Override\n+        public Uni<SecurityIdentity> authenticate(RoutingContext context, IdentityProviderManager identityProviderManager) {\n+            return delegate.authenticate(context, identityProviderManager);\n+        }\n+\n+        @Override\n+        public Uni<ChallengeData> getChallenge(RoutingContext context) {\n+            return delegate.getChallenge(context);\n+        }\n+\n+        @Override\n+        public Set<Class<? extends AuthenticationRequest>> getCredentialTypes() {\n+            return delegate.getCredentialTypes();\n+        }\n+    }\n+}\n\ndiff --git a/extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/security/FluentApiPathMatchingHttpSecurityPolicyTest.java b/extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/security/FluentApiPathMatchingHttpSecurityPolicyTest.java\nnew file mode 100644\nindex 0000000000000..cc4cca2b747e2\n--- /dev/null\n+++ b/extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/security/FluentApiPathMatchingHttpSecurityPolicyTest.java\n@@ -0,0 +1,48 @@\n+package io.quarkus.vertx.http.security;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import jakarta.enterprise.event.Observes;\n+\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class FluentApiPathMatchingHttpSecurityPolicyTest extends PathMatchingHttpSecurityPolicyTest {\n+\n+    @RegisterExtension\n+    static QuarkusUnitTest test = createQuarkusUnitTest(\"\", HttpPermissionsConfig.class);\n+\n+    public static class HttpPermissionsConfig {\n+\n+        void configure(@Observes HttpSecurity httpSecurity, CustomNamedPolicy customNamedPolicy) {\n+\n+            httpSecurity.path(\"/api/one/*/jamaica/*\", \"/api/public\", \"/api*\").permit();\n+\n+            httpSecurity.path(\"/api/*/sadly/*/dont-know\").authorization().deny();\n+\n+            httpSecurity.path(\"/static-file.html\", \"/api/baz\", \"/\", \"/api/foo/bar\", \"/api/one/*/*/five\", \"/api/one/*/three/*\",\n+                    \"/api/next/*/prev\", \"/api/*/bar\").authenticated();\n+\n+            httpSecurity.path(\"/api/fubar/baz*\").authenticated();\n+\n+            httpSecurity.path(\"/q/*\").authenticated();\n+\n+            httpSecurity.path(\"/secured/*\").shared().authorization()\n+                    .roles(Map.of(\"root\", List.of(\"admin\", \"user\")), \"**\");\n+\n+            httpSecurity.path(\"/secured/user/*\").roles(\"user\");\n+\n+            httpSecurity.path(\"/secured/admin/*\").authorization().roles(\"admin\");\n+\n+            httpSecurity.path(\"/*\").shared().policy(customNamedPolicy);\n+\n+            httpSecurity.rolesMapping(Map.of(\n+                    \"root1\", List.of(\"admin\", \"user\"),\n+                    \"admin1\", List.of(\"admin\"),\n+                    \"public1\", List.of(\"public2\")));\n+        }\n+\n+    }\n+}\n\ndiff --git a/extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/security/PathMatchingHttpSecurityPolicyTest.java b/extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/security/PathMatchingHttpSecurityPolicyTest.java\nindex 534868cf3189d..146164d8c2ee9 100644\n--- a/extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/security/PathMatchingHttpSecurityPolicyTest.java\n+++ b/extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/security/PathMatchingHttpSecurityPolicyTest.java\n@@ -18,7 +18,6 @@\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.RegisterExtension;\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.ValueSource;\n \n@@ -36,63 +35,24 @@\n import io.vertx.ext.web.RoutingContext;\n import io.vertx.ext.web.client.WebClient;\n \n-public class PathMatchingHttpSecurityPolicyTest {\n+public abstract class PathMatchingHttpSecurityPolicyTest {\n \n     private static final Duration REQUEST_TIMEOUT = Duration.ofSeconds(20);\n-    private static final String APP_PROPS = \"\"\"\n-            quarkus.http.auth.permission.authenticated.paths=/\n-            quarkus.http.auth.permission.authenticated.policy=authenticated\n-            quarkus.http.auth.permission.public.paths=/api*\n-            quarkus.http.auth.permission.public.policy=permit\n-            quarkus.http.auth.permission.foo.paths=/api/foo/bar\n-            quarkus.http.auth.permission.foo.policy=authenticated\n-            quarkus.http.auth.permission.unsecured.paths=/api/public\n-            quarkus.http.auth.permission.unsecured.policy=permit\n-            quarkus.http.auth.permission.inner-wildcard.paths=/api/*/bar\n-            quarkus.http.auth.permission.inner-wildcard.policy=authenticated\n-            quarkus.http.auth.permission.inner-wildcard2.paths=/api/next/*/prev\n-            quarkus.http.auth.permission.inner-wildcard2.policy=authenticated\n-            quarkus.http.auth.permission.inner-wildcard3.paths=/api/one/*/three/*\n-            quarkus.http.auth.permission.inner-wildcard3.policy=authenticated\n-            quarkus.http.auth.permission.inner-wildcard4.paths=/api/one/*/*/five\n-            quarkus.http.auth.permission.inner-wildcard4.policy=authenticated\n-            quarkus.http.auth.permission.inner-wildcard5.paths=/api/one/*/jamaica/*\n-            quarkus.http.auth.permission.inner-wildcard5.policy=permit\n-            quarkus.http.auth.permission.inner-wildcard6.paths=/api/*/sadly/*/dont-know\n-            quarkus.http.auth.permission.inner-wildcard6.policy=deny\n-            quarkus.http.auth.permission.baz.paths=/api/baz\n-            quarkus.http.auth.permission.baz.policy=authenticated\n-            quarkus.http.auth.permission.static-resource.paths=/static-file.html\n-            quarkus.http.auth.permission.static-resource.policy=authenticated\n-            quarkus.http.auth.permission.fubar.paths=/api/fubar/baz*\n-            quarkus.http.auth.permission.fubar.policy=authenticated\n-            quarkus.http.auth.permission.management.paths=/q/*\n-            quarkus.http.auth.permission.management.policy=authenticated\n-            quarkus.http.auth.policy.shared1.roles.root=admin,user\n-            quarkus.http.auth.permission.shared1.paths=/secured/*\n-            quarkus.http.auth.permission.shared1.policy=shared1\n-            quarkus.http.auth.permission.shared1.shared=true\n-            quarkus.http.auth.policy.unshared1.roles-allowed=user\n-            quarkus.http.auth.permission.unshared1.paths=/secured/user/*\n-            quarkus.http.auth.permission.unshared1.policy=unshared1\n-            quarkus.http.auth.policy.unshared2.roles-allowed=admin\n-            quarkus.http.auth.permission.unshared2.paths=/secured/admin/*\n-            quarkus.http.auth.permission.unshared2.policy=unshared2\n-            quarkus.http.auth.permission.shared2.paths=/*\n-            quarkus.http.auth.permission.shared2.shared=true\n-            quarkus.http.auth.permission.shared2.policy=custom\n-            quarkus.http.auth.roles-mapping.root1=admin,user\n-            quarkus.http.auth.roles-mapping.admin1=admin\n-            quarkus.http.auth.roles-mapping.public1=public2\n-            \"\"\";\n     private static WebClient client;\n \n-    @RegisterExtension\n-    static QuarkusUnitTest test = new QuarkusUnitTest().setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n-            .addClasses(TestIdentityController.class, TestIdentityProvider.class, PathHandler.class,\n-                    RouteHandler.class, CustomNamedPolicy.class)\n-            .addAsResource(\"static-file.html\", \"META-INF/resources/static-file.html\")\n-            .addAsResource(new StringAsset(APP_PROPS), \"application.properties\"));\n+    protected static QuarkusUnitTest createQuarkusUnitTest(String applicationProperties, Class<?>... additionalTestClasses) {\n+        return new QuarkusUnitTest().setArchiveProducer(() -> {\n+            var javaArchive = ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(TestIdentityController.class, TestIdentityProvider.class, PathHandler.class,\n+                            RouteHandler.class, CustomNamedPolicy.class)\n+                    .addAsResource(\"static-file.html\", \"META-INF/resources/static-file.html\")\n+                    .addAsResource(new StringAsset(applicationProperties), \"application.properties\");\n+            if (additionalTestClasses.length > 0) {\n+                javaArchive.addClasses(additionalTestClasses);\n+            }\n+            return javaArchive;\n+        });\n+    }\n \n     @BeforeAll\n     public static void setup() {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48479",
    "pr_id": 48479,
    "issue_id": 48036,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Default property values for syslog logging\n### Describe the bug\n\nThe default values for syslog logging cause log messages not to be accepted. This was tested when using Keycloak. The original [issue](https://github.com/keycloak/keycloak/issues/39893) was raised with Keycloak and redirected here. \n\nThe issue comes down the [quarkus.log.syslog.use-counting-framing](https://quarkus.io/guides/logging#quarkus-core_quarkus-log-syslog-use-counting-framing) flag. When the [quarkus.log.syslog.protocol](https://quarkus.io/guides/logging#quarkus-core_quarkus-log-syslog-protocol) parameter is set to `tcp` or `ssl-tcp`, RFC5424 states that byte counting framing should be used. For Quarkus, this means also manually setting the [quarkus.log.syslog.use-counting-framing](https://quarkus.io/guides/logging#quarkus-core_quarkus-log-syslog-use-counting-framing) flag (which Keycloak does not have a proxy option for).\n\nWhen sending logs to a receiver such as syslog-ng without the flag, these log messages are rejected with an 'invalid framing' error and the connection is dropped.\n\n### Expected behavior\n\nThe request here is to automatically set [quarkus.log.syslog.use-counting-framing](https://quarkus.io/guides/logging#quarkus-core_quarkus-log-syslog-use-counting-framing) to `true` if the [quarkus.log.syslog.protocol](https://quarkus.io/guides/logging#quarkus-core_quarkus-log-syslog-protocol) parameter is set to `tcp` or `ssl-tcp`. It should be possible to override this manually in case there are specific edge cases not following RFC5424.\n\n### Actual behavior\n\nPresently, when using syslog logging, the  [quarkus.log.syslog.use-counting-framing](https://quarkus.io/guides/logging#quarkus-core_quarkus-log-syslog-use-counting-framing) must be manually set. In Keycloak, this is performed by setting the quarkus.properties. This is something that is recommended against in the [documentation](https://www.keycloak.org/server/configuration#_format_for_raw_quarkus_properties)\n\n### How to Reproduce?\n\n1. Setup a syslog receiver (see example on the [Keycloak issue](https://github.com/keycloak/keycloak/issues/39893)). \n2. Set the approvriate log flags\n* [quarkus.log.syslog.enable](https://quarkus.io/guides/logging#quarkus-core_quarkus-log-syslog-enable)=true\n* [quarkus.log.syslog.endpoint](https://quarkus.io/guides/logging#quarkus-core_quarkus-log-syslog-endpoint)=localhost:514\n* [quarkus.log.syslog.app-name](https://quarkus.io/guides/logging#quarkus-core_quarkus-log-syslog-app-name)=example\n* [quarkus.log.syslog.facility](https://quarkus.io/guides/logging#quarkus-core_quarkus-log-syslog-facility)= local-use-0\n* [quarkus.log.syslog.syslog-type](https://quarkus.io/guides/logging#quarkus-core_quarkus-log-syslog-syslog-type)=rfc5424\n* [quarkus.log.syslog.protocol](https://quarkus.io/guides/logging#quarkus-core_quarkus-log-syslog-protocol)=tcp\n3. Create logging events\n\n### Output of `uname -a` or `ver`\n\nDarwin Kernel Version 24.4.0: Fri Apr 11 18:33:46 PDT 2025; root:xnu-11417.101.15~117/RELEASE_ARM64_T8112\n\n### Output of `java -version`\n\nopenjdk version \"21.0.7\" 2025-04-15 OpenJDK Runtime Environment Homebrew (build 21.0.7) OpenJDK 64-Bit Server VM Homebrew (build 21.0.7, mixed mode, sharing)\n\n### Quarkus version or git rev\n\nFrom Keycloak 26.2.4 (Quarkus 3.20.0)\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nN/A\n\n### Additional information\n\n_No response_",
    "issue_word_count": 512,
    "test_files_count": 2,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "core/runtime/src/main/java/io/quarkus/runtime/logging/LogRuntimeConfig.java",
      "core/runtime/src/main/java/io/quarkus/runtime/logging/LoggingSetupRecorder.java",
      "integration-tests/test-extension/extension/deployment/src/test/java/io/quarkus/logging/SyslogCountingFramingTest.java",
      "integration-tests/test-extension/extension/deployment/src/test/java/io/quarkus/logging/SyslogHandlerTest.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/test-extension/extension/deployment/src/test/java/io/quarkus/logging/SyslogCountingFramingTest.java",
      "integration-tests/test-extension/extension/deployment/src/test/java/io/quarkus/logging/SyslogHandlerTest.java"
    ],
    "base_commit": "4435c0d33396dd5b6c7c6ac170a6c44e584a74e3",
    "head_commit": "f2e530cc49620d7366603258dca64d6ad5fead9e",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48479",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48479",
    "dockerfile": "",
    "pr_merged_at": "2025-06-23T08:43:13.000Z",
    "patch": "diff --git a/core/runtime/src/main/java/io/quarkus/runtime/logging/LogRuntimeConfig.java b/core/runtime/src/main/java/io/quarkus/runtime/logging/LogRuntimeConfig.java\nindex 49932653cbdb5..8490f6b097bd0 100644\n--- a/core/runtime/src/main/java/io/quarkus/runtime/logging/LogRuntimeConfig.java\n+++ b/core/runtime/src/main/java/io/quarkus/runtime/logging/LogRuntimeConfig.java\n@@ -372,8 +372,8 @@ interface SyslogConfig {\n         /**\n          * If enabled, the message being sent is prefixed with the size of the message\n          */\n-        @WithDefault(\"false\")\n-        boolean useCountingFraming();\n+        @WithDefault(\"protocol-dependent\")\n+        CountingFraming useCountingFraming();\n \n         /**\n          * Set to {@code true} to truncate the message if it exceeds maximum length\n@@ -420,6 +420,20 @@ interface SyslogConfig {\n          * Syslog async logging config\n          */\n         AsyncConfig async();\n+\n+        /**\n+         * Syslog counting framing type used for smarter handling of counting framing value.\n+         * <p>\n+         * If {@link CountingFraming#PROTOCOL_DEPENDENT} is used, the counting framing will be {@code true}, when the\n+         * {@link Protocol#TCP} or {@link Protocol#SSL_TCP} is used. Otherwise {@code false}.\n+         * <p>\n+         * More information in <a href=\"http://tools.ietf.org/html/rfc6587#section-3.4.1\">http://tools.ietf.org/html/rfc6587</a>\n+         */\n+        enum CountingFraming {\n+            TRUE,\n+            FALSE,\n+            PROTOCOL_DEPENDENT\n+        }\n     }\n \n     interface SocketConfig {\n\ndiff --git a/core/runtime/src/main/java/io/quarkus/runtime/logging/LoggingSetupRecorder.java b/core/runtime/src/main/java/io/quarkus/runtime/logging/LoggingSetupRecorder.java\nindex 9f825efff2ee5..46e37b7b274eb 100644\n--- a/core/runtime/src/main/java/io/quarkus/runtime/logging/LoggingSetupRecorder.java\n+++ b/core/runtime/src/main/java/io/quarkus/runtime/logging/LoggingSetupRecorder.java\n@@ -745,7 +745,12 @@ private static Handler configureSyslogHandler(final LogRuntimeConfig.SyslogConfi\n             handler.setProtocol(config.protocol());\n             handler.setBlockOnReconnect(config.blockOnReconnect());\n             handler.setTruncate(config.truncate());\n-            handler.setUseCountingFraming(config.useCountingFraming());\n+            handler.setUseCountingFraming(switch (config.useCountingFraming()) {\n+                case PROTOCOL_DEPENDENT ->\n+                    config.protocol() == SyslogHandler.Protocol.TCP || config.protocol() == SyslogHandler.Protocol.SSL_TCP;\n+                case TRUE -> true;\n+                case FALSE -> false;\n+            });\n             handler.setLevel(config.level());\n             if (config.maxLength().isPresent()) {\n                 BigInteger maxLen = config.maxLength().get().asBigInteger();\n",
    "test_patch": "diff --git a/integration-tests/test-extension/extension/deployment/src/test/java/io/quarkus/logging/SyslogCountingFramingTest.java b/integration-tests/test-extension/extension/deployment/src/test/java/io/quarkus/logging/SyslogCountingFramingTest.java\nnew file mode 100644\nindex 0000000000000..2c825964703f6\n--- /dev/null\n+++ b/integration-tests/test-extension/extension/deployment/src/test/java/io/quarkus/logging/SyslogCountingFramingTest.java\n@@ -0,0 +1,28 @@\n+package io.quarkus.logging;\n+\n+import static io.quarkus.logging.LoggingTestsHelper.getHandler;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.jboss.logmanager.handlers.SyslogHandler;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class SyslogCountingFramingTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .withConfigurationResource(\"application-syslog-output.properties\")\n+            .overrideConfigKey(\"quarkus.log.syslog.protocol\", \"UDP\")\n+            .withApplicationRoot((jar) -> jar.addClass(LoggingTestsHelper.class));\n+\n+    @Test\n+    public void syslogOutputTest() {\n+        SyslogHandler syslogHandler = (SyslogHandler) getHandler(SyslogHandler.class);\n+\n+        assertThat(syslogHandler.getProtocol()).isEqualTo(SyslogHandler.Protocol.UDP);\n+        // counting framing is default 'protocol_dependent', and for UDP the counting framing is off\n+        assertThat(syslogHandler.isUseCountingFraming()).isEqualTo(false);\n+    }\n+}\n\ndiff --git a/integration-tests/test-extension/extension/deployment/src/test/java/io/quarkus/logging/SyslogHandlerTest.java b/integration-tests/test-extension/extension/deployment/src/test/java/io/quarkus/logging/SyslogHandlerTest.java\nindex e2e568b6d69be..b123ddc81e9a5 100644\n--- a/integration-tests/test-extension/extension/deployment/src/test/java/io/quarkus/logging/SyslogHandlerTest.java\n+++ b/integration-tests/test-extension/extension/deployment/src/test/java/io/quarkus/logging/SyslogHandlerTest.java\n@@ -42,7 +42,7 @@ public void syslogOutputTest() {\n         assertThat(syslogHandler.getFacility()).isEqualTo(SyslogHandler.Facility.USER_LEVEL);\n         assertThat(syslogHandler.getSyslogType()).isEqualTo(SyslogHandler.SyslogType.RFC5424);\n         assertThat(syslogHandler.getProtocol()).isEqualTo(SyslogHandler.Protocol.TCP);\n-        assertThat(syslogHandler.isUseCountingFraming()).isEqualTo(false);\n+        assertThat(syslogHandler.isUseCountingFraming()).isEqualTo(true);\n         assertThat(syslogHandler.isTruncate()).isEqualTo(true);\n         assertThat(syslogHandler.isBlockOnReconnect()).isEqualTo(false);\n     }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48477",
    "pr_id": 48477,
    "issue_id": 48469,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Hibernate Reactive ORM HQL Console keeps spinning\n### Describe the bug\n\nWhen using Hibernate Reactive, the HQL Console keeps spinning endlessly and can't be used.\n\nReproducer:\nhttps://github.com/myfear/ejq_substack_articles/tree/main/reactive-db-app\n\nChrome Version: Version 137.0.7151.104\n\n\n\n\n### Expected behavior\n\nI can use the HQL Console with Hibernate Reactive.\n\n### Actual behavior\n\nIt keeps displaying the \"Fetching Data\" element:\n \n<img width=\"1499\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/4463bc33-1d64-420d-96bd-3fe8abaf68b2\" />\n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\nDarwin meisele1-mac 24.5.0 Darwin Kernel Version 24.5.0: Tue Apr 22 19:53:27 PDT 2025; root:xnu-11417.121.6~2/RELEASE_ARM64_T6041 arm64\n\n### Output of `java -version`\n\nopenjdk 21.0.7 2025-04-15 LTS\n\n### Quarkus version or git rev\n\n3.23.3\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n3.9.9\n\n### Additional information\n\n/cc @lucamolteni ",
    "issue_word_count": 156,
    "test_files_count": 6,
    "non_test_files_count": 5,
    "pr_changed_files": [
      "extensions/hibernate-orm/deployment/src/main/resources/dev-ui/hibernate-orm-hql-console.js",
      "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/HibernateOrmRecorder.java",
      "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevController.java",
      "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevInfo.java",
      "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevIntegrator.java",
      "integration-tests/devmode/pom.xml",
      "integration-tests/devmode/src/test/java/io/quarkus/test/devui/AbstractDevUIHibernateOrmTest.java",
      "integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmActiveFalseAndNamedPuActiveTrueTest.java",
      "integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmActiveFalseTest.java",
      "integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmSmokeTest.java",
      "integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateReactiveSmokeTest.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/devmode/pom.xml",
      "integration-tests/devmode/src/test/java/io/quarkus/test/devui/AbstractDevUIHibernateOrmTest.java",
      "integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmActiveFalseAndNamedPuActiveTrueTest.java",
      "integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmActiveFalseTest.java",
      "integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmSmokeTest.java",
      "integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateReactiveSmokeTest.java"
    ],
    "base_commit": "4435c0d33396dd5b6c7c6ac170a6c44e584a74e3",
    "head_commit": "b0ffb5b979c4c5a1a036f36e7ecc26fc1a593988",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48477",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48477",
    "dockerfile": "",
    "pr_merged_at": "2025-06-19T15:21:12.000Z",
    "patch": "diff --git a/extensions/hibernate-orm/deployment/src/main/resources/dev-ui/hibernate-orm-hql-console.js b/extensions/hibernate-orm/deployment/src/main/resources/dev-ui/hibernate-orm-hql-console.js\nindex 66e2db219576e..69a77e475d562 100644\n--- a/extensions/hibernate-orm/deployment/src/main/resources/dev-ui/hibernate-orm-hql-console.js\n+++ b/extensions/hibernate-orm/deployment/src/main/resources/dev-ui/hibernate-orm-hql-console.js\n@@ -240,6 +240,9 @@ export class HibernateOrmHqlConsoleComponent extends QwcHotReloadElement {\n \n     _renderTables() {\n         if (this._selectedPersistenceUnit) {\n+            if (this._selectedPersistenceUnit.reactive) {\n+                return; // Reactive persistence units are not supported\n+            }\n             return html`\n                 <qui-card class=\"tablesCard\" header=\"Entities\">\n                     <div slot=\"content\">\n@@ -310,6 +313,10 @@ export class HibernateOrmHqlConsoleComponent extends QwcHotReloadElement {\n     // *** data table and HQL input ***\n \n     _renderDataAndInput() {\n+        if (this._selectedPersistenceUnit.reactive) {\n+            return html`\n+                <span style=\"padding-top:20px;padding-left:20px;\">Reactive persistence units are not supported in this console, please use a blocking one.</span>`;\n+        }\n         return html`\n             ${this._renderHqlInput()}\n             <div tab=\"data-tab\" style=\"height:100%;\">${this._renderTableData()}</div>`;\n\ndiff --git a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/HibernateOrmRecorder.java b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/HibernateOrmRecorder.java\nindex fb2f0f3e360c5..3082490562c0d 100644\n--- a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/HibernateOrmRecorder.java\n+++ b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/HibernateOrmRecorder.java\n@@ -28,6 +28,7 @@\n import io.quarkus.arc.runtime.BeanContainerListener;\n import io.quarkus.hibernate.orm.PersistenceUnit;\n import io.quarkus.hibernate.orm.runtime.boot.QuarkusPersistenceUnitDefinition;\n+import io.quarkus.hibernate.orm.runtime.dev.HibernateOrmDevIntegrator;\n import io.quarkus.hibernate.orm.runtime.integration.HibernateOrmIntegrationRuntimeDescriptor;\n import io.quarkus.hibernate.orm.runtime.migration.MultiTenancyStrategy;\n import io.quarkus.hibernate.orm.runtime.proxies.PreGeneratedProxies;\n@@ -71,10 +72,12 @@ public void setupPersistenceProvider(HibernateOrmRuntimeConfig hibernateOrmRunti\n     public BeanContainerListener initMetadata(List<QuarkusPersistenceUnitDefinition> parsedPersistenceXmlDescriptors,\n             Scanner scanner, Collection<Class<? extends Integrator>> additionalIntegrators) {\n         SchemaManagementIntegrator.clearDsMap();\n+        HibernateOrmDevIntegrator.clearPuMap();\n         for (QuarkusPersistenceUnitDefinition i : parsedPersistenceXmlDescriptors) {\n             if (i.getConfig().getDataSource().isPresent()) {\n                 SchemaManagementIntegrator.mapDatasource(i.getConfig().getDataSource().get(), i.getName());\n             }\n+            HibernateOrmDevIntegrator.mapPersistenceUnit(i.getName(), i.getPersistenceUnitDescriptor());\n         }\n         return new BeanContainerListener() {\n             @Override\n\ndiff --git a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevController.java b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevController.java\nindex c83436712a62a..39cff9ef377db 100644\n--- a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevController.java\n+++ b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevController.java\n@@ -31,6 +31,8 @@\n import org.hibernate.tool.schema.spi.SourceDescriptor;\n import org.hibernate.tool.schema.spi.TargetDescriptor;\n \n+import io.quarkus.hibernate.orm.runtime.boot.QuarkusPersistenceUnitDescriptor;\n+\n public class HibernateOrmDevController {\n \n     private static final HibernateOrmDevController INSTANCE = new HibernateOrmDevController();\n@@ -48,8 +50,8 @@ public HibernateOrmDevInfo getInfo() {\n         return info;\n     }\n \n-    void pushPersistenceUnit(SessionFactoryImplementor sessionFactoryImplementor, String persistenceUnitName,\n-            Metadata metadata, ServiceRegistry serviceRegistry, String importFile) {\n+    void pushPersistenceUnit(SessionFactoryImplementor sessionFactoryImplementor, QuarkusPersistenceUnitDescriptor descriptor,\n+            String persistenceUnitName, Metadata metadata, ServiceRegistry serviceRegistry, String importFile) {\n         List<HibernateOrmDevInfo.Entity> managedEntities = new ArrayList<>();\n         for (PersistentClass entityBinding : metadata.getEntityBindings()) {\n             managedEntities.add(new HibernateOrmDevInfo.Entity(entityBinding.getJpaEntityName(), entityBinding.getClassName(),\n@@ -83,7 +85,8 @@ void pushPersistenceUnit(SessionFactoryImplementor sessionFactoryImplementor, St\n         DDLSupplier updateDDLSupplier = new DDLSupplier(Action.UPDATE, metadata, serviceRegistry, importFile);\n \n         info.add(new HibernateOrmDevInfo.PersistenceUnit(sessionFactoryImplementor, persistenceUnitName, managedEntities,\n-                namedQueries, namedNativeQueries, createDDLSupplier, dropDDLSupplier, updateDDLSupplier));\n+                namedQueries, namedNativeQueries, createDDLSupplier, dropDDLSupplier, updateDDLSupplier,\n+                descriptor.isReactive()));\n     }\n \n     class DDLSupplier implements Supplier<String> {\n\ndiff --git a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevInfo.java b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevInfo.java\nindex d99185e86fe05..deeffc377f41b 100644\n--- a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevInfo.java\n+++ b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevInfo.java\n@@ -55,11 +55,18 @@ public static class PersistenceUnit {\n         private final Supplier<String> createDDLSupplier;\n         private final Supplier<String> dropDDLSupplier;\n         private final Supplier<String> updateDDLSupplier;\n+        private final boolean reactive;\n \n-        public PersistenceUnit(SessionFactoryImplementor sessionFactory, String name, List<Entity> managedEntities,\n+        public PersistenceUnit(\n+                SessionFactoryImplementor sessionFactory,\n+                String name,\n+                List<Entity> managedEntities,\n                 List<Query> namedQueries,\n-                List<Query> namedNativeQueries, Supplier<String> createDDL, Supplier<String> dropDDL,\n-                Supplier<String> updateDDLSupplier) {\n+                List<Query> namedNativeQueries,\n+                Supplier<String> createDDL,\n+                Supplier<String> dropDDL,\n+                Supplier<String> updateDDLSupplier,\n+                boolean reactive) {\n             this.sessionFactory = sessionFactory;\n             this.name = name;\n             this.managedEntities = managedEntities;\n@@ -68,6 +75,7 @@ public PersistenceUnit(SessionFactoryImplementor sessionFactory, String name, Li\n             this.createDDLSupplier = createDDL;\n             this.dropDDLSupplier = dropDDL;\n             this.updateDDLSupplier = updateDDLSupplier;\n+            this.reactive = reactive;\n         }\n \n         // Method name must not be `getSessionFactory` to exclude it from JSON serialization\n@@ -119,6 +127,9 @@ public synchronized String getUpdateDDL() {\n             return updateDDL;\n         }\n \n+        public boolean isReactive() {\n+            return reactive;\n+        }\n     }\n \n     public static class Entity {\n\ndiff --git a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevIntegrator.java b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevIntegrator.java\nindex e3c00c7fc67ab..acb22517b91fc 100644\n--- a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevIntegrator.java\n+++ b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevIntegrator.java\n@@ -2,22 +2,40 @@\n \n import static org.hibernate.cfg.AvailableSettings.HBM2DDL_IMPORT_FILES;\n \n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n import org.hibernate.boot.Metadata;\n import org.hibernate.boot.spi.BootstrapContext;\n+import org.hibernate.cfg.AvailableSettings;\n import org.hibernate.engine.spi.SessionFactoryImplementor;\n import org.hibernate.integrator.spi.Integrator;\n import org.hibernate.service.spi.SessionFactoryServiceRegistry;\n \n+import io.quarkus.hibernate.orm.runtime.boot.QuarkusPersistenceUnitDescriptor;\n+\n public class HibernateOrmDevIntegrator implements Integrator {\n+    private static final Map<String, QuarkusPersistenceUnitDescriptor> puDescriptorMap = new ConcurrentHashMap<>();\n+\n+    public static void clearPuMap() {\n+        puDescriptorMap.clear();\n+    }\n+\n+    public static void mapPersistenceUnit(String pu, QuarkusPersistenceUnitDescriptor descriptor) {\n+        puDescriptorMap.put(pu, descriptor);\n+    }\n \n     @Override\n     public void integrate(Metadata metadata, BootstrapContext bootstrapContext,\n             SessionFactoryImplementor sessionFactoryImplementor) {\n+        String name = (String) sessionFactoryImplementor.getProperties()\n+                .get(AvailableSettings.PERSISTENCE_UNIT_NAME);\n         HibernateOrmDevController.get().pushPersistenceUnit(\n                 sessionFactoryImplementor,\n-                (String) sessionFactoryImplementor.getProperties()\n-                        .get(org.hibernate.cfg.AvailableSettings.PERSISTENCE_UNIT_NAME),\n-                metadata, sessionFactoryImplementor.getServiceRegistry(),\n+                puDescriptorMap.get(name),\n+                name,\n+                metadata,\n+                sessionFactoryImplementor.getServiceRegistry(),\n                 (String) sessionFactoryImplementor.getProperties().get(HBM2DDL_IMPORT_FILES));\n     }\n \n",
    "test_patch": "diff --git a/integration-tests/devmode/pom.xml b/integration-tests/devmode/pom.xml\nindex 0b8e8f16bfc17..0061fe915de14 100644\n--- a/integration-tests/devmode/pom.xml\n+++ b/integration-tests/devmode/pom.xml\n@@ -74,6 +74,16 @@\n             <artifactId>quarkus-jdbc-h2-deployment</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-hibernate-reactive-deployment</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-reactive-pg-client-deployment</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n         <dependency>\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-junit5-internal</artifactId>\n\ndiff --git a/integration-tests/devmode/src/test/java/io/quarkus/test/devui/AbstractDevUIHibernateOrmTest.java b/integration-tests/devmode/src/test/java/io/quarkus/test/devui/AbstractDevUIHibernateOrmTest.java\nindex 45323f245ef72..729c9dd8e740d 100644\n--- a/integration-tests/devmode/src/test/java/io/quarkus/test/devui/AbstractDevUIHibernateOrmTest.java\n+++ b/integration-tests/devmode/src/test/java/io/quarkus/test/devui/AbstractDevUIHibernateOrmTest.java\n@@ -21,14 +21,16 @@ public abstract class AbstractDevUIHibernateOrmTest extends DevUIJsonRPCTest {\n     private final String expectedTableName;\n     private final String expectedClassName;\n     private final Integer expectedResults;\n+    private final boolean reactive;\n \n     public AbstractDevUIHibernateOrmTest(String expectedPersistenceUnitName, String expectedTableName,\n-            String expectedClassName, Integer expectedResults) {\n+            String expectedClassName, Integer expectedResults, boolean reactive) {\n         super(\"io.quarkus.quarkus-hibernate-orm\");\n         this.expectedPersistenceUnitName = expectedPersistenceUnitName;\n         this.expectedTableName = expectedTableName;\n         this.expectedClassName = expectedClassName;\n         this.expectedResults = expectedResults;\n+        this.reactive = reactive;\n     }\n \n     @Test\n@@ -69,6 +71,10 @@ public void testGetInfo() throws Exception {\n                 JsonNode namedQueries = persistenceUnit.get(\"namedQueries\");\n                 assertNotNull(namedQueries);\n                 assertTrue(namedQueries.isArray());\n+\n+                JsonNode reactive = persistenceUnit.get(\"reactive\");\n+                assertTrue(reactive.isBoolean());\n+                assertEquals(this.reactive, reactive.asBoolean());\n             }\n         }\n     }\n\ndiff --git a/integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmActiveFalseAndNamedPuActiveTrueTest.java b/integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmActiveFalseAndNamedPuActiveTrueTest.java\nindex 74ee97a56bc1e..fd37907610e90 100644\n--- a/integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmActiveFalseAndNamedPuActiveTrueTest.java\n+++ b/integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmActiveFalseAndNamedPuActiveTrueTest.java\n@@ -28,7 +28,7 @@ public class DevUIHibernateOrmActiveFalseAndNamedPuActiveTrueTest extends Abstra\n                     .addClasses(MyNamedPuEntity.class));\n \n     public DevUIHibernateOrmActiveFalseAndNamedPuActiveTrueTest() {\n-        super(\"namedpu\", \"MyNamedPuEntity\", \"io.quarkus.test.devui.namedpu.MyNamedPuEntity\", null);\n+        super(\"namedpu\", \"MyNamedPuEntity\", \"io.quarkus.test.devui.namedpu.MyNamedPuEntity\", null, false);\n     }\n \n }\n\ndiff --git a/integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmActiveFalseTest.java b/integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmActiveFalseTest.java\nindex c19a623cb063e..e7d024f6cdaf9 100644\n--- a/integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmActiveFalseTest.java\n+++ b/integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmActiveFalseTest.java\n@@ -18,7 +18,7 @@ public class DevUIHibernateOrmActiveFalseTest extends AbstractDevUIHibernateOrmT\n                     .addClasses(MyEntity.class));\n \n     public DevUIHibernateOrmActiveFalseTest() {\n-        super(null, null, null, null);\n+        super(null, null, null, null, false);\n     }\n \n }\n\ndiff --git a/integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmSmokeTest.java b/integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmSmokeTest.java\nindex 1b7a7c5bd3939..294262d52f901 100644\n--- a/integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmSmokeTest.java\n+++ b/integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmSmokeTest.java\n@@ -12,12 +12,13 @@ public class DevUIHibernateOrmSmokeTest extends AbstractDevUIHibernateOrmTest {\n             .withApplicationRoot((jar) -> jar.addAsResource(\n                     new StringAsset(\"quarkus.datasource.db-kind=h2\\n\"\n                             + \"quarkus.datasource.jdbc.url=jdbc:h2:mem:test\\n\"\n+                            + \"quarkus.datasource.reactive=false\\n\"\n                             + \"quarkus.hibernate-orm.schema-management.strategy=drop-and-create\\n\"),\n                     \"application.properties\")\n                     .addAsResource(new StringAsset(\"INSERT INTO MyEntity(id, field) VALUES(1, 'entity_1');\"), \"import.sql\")\n                     .addClasses(MyEntity.class));\n \n     public DevUIHibernateOrmSmokeTest() {\n-        super(\"<default>\", \"MyEntity\", \"io.quarkus.test.devui.MyEntity\", 1);\n+        super(\"<default>\", \"MyEntity\", \"io.quarkus.test.devui.MyEntity\", 1, false);\n     }\n }\n\ndiff --git a/integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateReactiveSmokeTest.java b/integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateReactiveSmokeTest.java\nnew file mode 100644\nindex 0000000000000..7edcd1ea5b074\n--- /dev/null\n+++ b/integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateReactiveSmokeTest.java\n@@ -0,0 +1,35 @@\n+package io.quarkus.test.devui;\n+\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusDevModeTest;\n+\n+public class DevUIHibernateReactiveSmokeTest extends AbstractDevUIHibernateOrmTest {\n+\n+    @RegisterExtension\n+    static final QuarkusDevModeTest test = new QuarkusDevModeTest()\n+            .withApplicationRoot((jar) -> jar\n+                    .addClasses(MyEntity.class)\n+                    .addAsResource(new StringAsset(\"INSERT INTO MyEntity(id, field) VALUES(1, 'entity_1');\"), \"import.sql\")\n+                    .addAsResource(new StringAsset(\"\"\"\n+                            quarkus.datasource.jdbc=false\n+                            quarkus.datasource.db-kind=postgresql\n+                            quarkus.datasource.username=hibernate_orm_test\n+                            quarkus.datasource.password=hibernate_orm_test\n+                            quarkus.datasource.reactive.url=vertx-reactive:postgresql://localhost:5431/hibernate_orm_test\n+                            quarkus.hibernate-orm.blocking=false\n+                            \"\"\"),\n+                            \"application.properties\"));\n+\n+    public DevUIHibernateReactiveSmokeTest() {\n+        super(\"default-reactive\", \"MyEntity\", \"io.quarkus.test.devui.MyEntity\", null, true);\n+    }\n+\n+    @Test\n+    @Override\n+    public void testExecuteHQL() {\n+        // HQL execution is not supported in reactive mode, so we skip this test\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48444",
    "pr_id": 48444,
    "issue_id": 48431,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Quarkus Rest Client: Passing a map of headers to the client interface methods\n### Description\n\nWith Quarkus Rest Client, it is possible to pass headers to  the \"proxy\" methods through `ClientHeaderParam` or `HeaderParam`, both of these options require having early knowledge of the headers names during development phase. It would be nice to be able to pass a map of headers similar to what is done for the query parameters via `RestQuery`. It provides more flexibility for cases where headers are known only during runtime and when it is easier to pass them as parameters instead of using factories or filters.\n\n### Implementation ideas\n\nA new annotation `@RestHeader` similar to `@RestQuery` .",
    "issue_word_count": 109,
    "test_files_count": 1,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java",
      "extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/headers/HeaderTest.java",
      "independent-projects/resteasy-reactive/client/processor/src/main/java/org/jboss/resteasy/reactive/client/processor/beanparam/BeanParamParser.java",
      "independent-projects/resteasy-reactive/client/processor/src/main/java/org/jboss/resteasy/reactive/client/processor/beanparam/HeaderParamItem.java"
    ],
    "pr_changed_test_files": [
      "extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/headers/HeaderTest.java"
    ],
    "base_commit": "5771e94ccfb148699ba03a12b00a3b2b69e9d7dc",
    "head_commit": "afcaa33f8e84764cc5372bae6799d45785bd85c2",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48444",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48444",
    "dockerfile": "",
    "pr_merged_at": "2025-06-18T08:19:47.000Z",
    "patch": "diff --git a/extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java b/extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java\nindex 7726857c376e4..92b90a81e228d 100644\n--- a/extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java\n+++ b/extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java\n@@ -1153,14 +1153,14 @@ A more full example of generated client (with sub-resource) can is at the bottom\n                             bodyParameterIdx = paramIdx;\n                         } else if (param.parameterType == ParameterType.HEADER) {\n                             Type paramType = jandexMethod.parameterType(paramIdx);\n-                            String effectiveParamTypeStr = paramType.name().toString();\n+                            Type effectiveParamType = paramType;\n                             boolean isOptional = isOptional(paramType, index);\n                             if (isOptional) {\n-                                effectiveParamTypeStr = DotNames.OBJECT.toString();\n+                                effectiveParamType = Type.create(Object.class);\n                                 if (paramType.kind() == PARAMETERIZED_TYPE) {\n                                     Type objectType = paramType.asParameterizedType().arguments().get(0);\n                                     if ((objectType.kind() == CLASS) || (objectType.kind() == PARAMETERIZED_TYPE)) {\n-                                        effectiveParamTypeStr = objectType.name().toString();\n+                                        effectiveParamType = objectType;\n                                     }\n                                 }\n                             }\n@@ -1177,14 +1177,14 @@ A more full example of generated client (with sub-resource) can is at the bottom\n                                     .createVariable(Invocation.Builder.class);\n                             handleHeaderMethod.assign(invocationBuilderRef, handleHeaderMethod.getMethodParam(0));\n                             ResultHandle headerValue = handleHeaderMethod.getMethodParam(1);\n-                            addHeaderParam(handleHeaderMethod, invocationBuilderRef, param.name,\n+                            addHeaderParam(jandexMethod, handleHeaderMethod, invocationBuilderRef, param.name,\n                                     isOptional\n                                             ? handleHeaderMethod.invokeVirtualMethod(\n                                                     MethodDescriptor.ofMethod(Optional.class, \"orElse\", Object.class,\n                                                             Object.class),\n                                                     headerValue, handleHeaderMethod.loadNull())\n                                             : headerValue,\n-                                    effectiveParamTypeStr,\n+                                    effectiveParamType, index,\n                                     handleHeaderMethod.getThis(),\n                                     getGenericTypeFromArray(handleHeaderMethod, methodGenericParametersField, paramIdx),\n                                     getAnnotationsFromArray(handleHeaderMethod, methodParamAnnotationsField, paramIdx));\n@@ -1804,14 +1804,14 @@ private void handleSubResourceMethod(List<JaxrsClientReactiveEnricherBuildItem>\n                             bodyParameterValue = paramValue;\n                         } else if (param.parameterType == ParameterType.HEADER) {\n                             Type paramType = jandexSubMethod.parameterType(subParamField.paramIndex);\n-                            String effectiveParamTypeStr = paramType.name().toString();\n+                            Type effectiveParamType = paramType;\n                             boolean isOptional = isOptional(paramType, index);\n                             if (isOptional) {\n-                                effectiveParamTypeStr = DotNames.OBJECT.toString();\n+                                effectiveParamType = Type.create(Object.class);\n                                 if (paramType.kind() == PARAMETERIZED_TYPE) {\n                                     Type objectType = paramType.asParameterizedType().arguments().get(0);\n                                     if ((objectType.kind() == CLASS) || (objectType.kind() == PARAMETERIZED_TYPE)) {\n-                                        effectiveParamTypeStr = objectType.name().toString();\n+                                        effectiveParamType = objectType;\n                                     }\n                                 }\n                             }\n@@ -1829,14 +1829,14 @@ private void handleSubResourceMethod(List<JaxrsClientReactiveEnricherBuildItem>\n                                     .createVariable(Invocation.Builder.class);\n                             handleHeaderMethod.assign(invocationBuilderRef, handleHeaderMethod.getMethodParam(0));\n                             ResultHandle headerValue = handleHeaderMethod.getMethodParam(1);\n-                            addHeaderParam(handleHeaderMethod, invocationBuilderRef, param.name,\n+                            addHeaderParam(jandexMethod, handleHeaderMethod, invocationBuilderRef, param.name,\n                                     isOptional\n                                             ? handleHeaderMethod.invokeVirtualMethod(\n                                                     MethodDescriptor.ofMethod(Optional.class, \"orElse\", Object.class,\n                                                             Object.class),\n                                                     headerValue, handleHeaderMethod.loadNull())\n                                             : headerValue,\n-                                    effectiveParamTypeStr,\n+                                    effectiveParamType, index,\n                                     handleHeaderMethod.readInstanceField(clientField, handleHeaderMethod.getThis()),\n                                     getGenericTypeFromArray(handleHeaderMethod, subParamField.genericsParametersField,\n                                             subParamField.paramIndex),\n@@ -1949,14 +1949,14 @@ private void handleSubResourceMethod(List<JaxrsClientReactiveEnricherBuildItem>\n                             bodyParameterValue = subMethodCreator.getMethodParam(paramIdx);\n                         } else if (param.parameterType == ParameterType.HEADER) {\n                             Type paramType = jandexSubMethod.parameterType(paramIdx);\n-                            String effectiveParamTypeStr = paramType.name().toString();\n+                            Type effectiveParamType = paramType;\n                             boolean isOptional = isOptional(paramType, index);\n                             if (isOptional) {\n-                                effectiveParamTypeStr = DotNames.OBJECT.toString();\n+                                effectiveParamType = Type.create(Object.class);\n                                 if (paramType.kind() == PARAMETERIZED_TYPE) {\n                                     Type objectType = paramType.asParameterizedType().arguments().get(0);\n                                     if ((objectType.kind() == CLASS) || (objectType.kind() == PARAMETERIZED_TYPE)) {\n-                                        effectiveParamTypeStr = objectType.name().toString();\n+                                        effectiveParamType = objectType;\n                                     }\n                                 }\n                             }\n@@ -1973,14 +1973,14 @@ private void handleSubResourceMethod(List<JaxrsClientReactiveEnricherBuildItem>\n                                     .createVariable(Invocation.Builder.class);\n                             ResultHandle headerValue = handleHeaderMethod.getMethodParam(1);\n                             handleHeaderMethod.assign(invocationBuilderRef, handleHeaderMethod.getMethodParam(0));\n-                            addHeaderParam(handleHeaderMethod, invocationBuilderRef, param.name,\n+                            addHeaderParam(jandexMethod, handleHeaderMethod, invocationBuilderRef, param.name,\n                                     isOptional\n                                             ? handleHeaderMethod.invokeVirtualMethod(\n                                                     MethodDescriptor.ofMethod(Optional.class, \"orElse\", Object.class,\n                                                             Object.class),\n                                                     headerValue, handleHeaderMethod.loadNull())\n                                             : headerValue,\n-                                    effectiveParamTypeStr,\n+                                    effectiveParamType, index,\n                                     handleHeaderMethod.readInstanceField(clientField, handleHeaderMethod.getThis()),\n                                     getGenericTypeFromArray(handleHeaderMethod, subMethodGenericParametersField, paramIdx),\n                                     getAnnotationsFromArray(handleHeaderMethod, subMethodParamAnnotationsField, paramIdx));\n@@ -2997,10 +2997,10 @@ private void addSubBeanParamData(MethodInfo jandexMethod, int paramIndex, Byteco\n                     break;\n                 case HEADER_PARAM:\n                     HeaderParamItem headerParam = (HeaderParamItem) item;\n-                    addHeaderParam(invoEnricher, invocationBuilder,\n+                    addHeaderParam(jandexMethod, invoEnricher, invocationBuilder,\n                             headerParam.getHeaderName(),\n                             headerParam.extract(invoEnricher, invoEnricher.getMethodParam(1)),\n-                            headerParam.getParamType(), invocationEnricherClient,\n+                            headerParam.getParamType(), index, invocationEnricherClient,\n                             getGenericTypeFromParameter(invoEnricher, beanParamDescriptorField, item.fieldName()),\n                             getAnnotationsFromParameter(invoEnricher, beanParamDescriptorField, item.fieldName()));\n                     break;\n@@ -3318,23 +3318,86 @@ private boolean isOptional(Type type, IndexView index) {\n         return isAssignableFrom(OPTIONAL, type.name(), index);\n     }\n \n-    private void addHeaderParam(BytecodeCreator invoBuilderEnricher, AssignableResultHandle invocationBuilder,\n-            String headerName, ResultHandle headerValueHandle, String paramType, ResultHandle client,\n+    private void addHeaderParam(MethodInfo jandexMethod, BytecodeCreator invoBuilderEnricher,\n+            AssignableResultHandle invocationBuilder,\n+            String headerName, ResultHandle headerValueHandle,\n+            Type paramType, IndexView index,\n+            ResultHandle client,\n             ResultHandle genericType, ResultHandle annotations) {\n \n         BytecodeCreator notNullValue = invoBuilderEnricher.ifNull(headerValueHandle).falseBranch();\n \n-        headerValueHandle = notNullValue.invokeVirtualMethod(\n-                MethodDescriptor.ofMethod(RestClientBase.class, \"convertParam\", Object.class,\n-                        Object.class, Class.class, java.lang.reflect.Type.class, Annotation[].class),\n-                client, headerValueHandle,\n-                notNullValue.loadClassFromTCCL(paramType), genericType, annotations);\n+        if (isMap(paramType, index)) {\n+            Map.Entry<Type, Type> resolvesTypes = resolveMapTypes(paramType, index, jandexMethod);\n+            Type keyType = resolvesTypes.getKey();\n+            if (!ResteasyReactiveDotNames.STRING.equals(keyType.name())) {\n+                throw new IllegalArgumentException(\n+                        \"Map parameter types must have String keys. Offending method is: \" + jandexMethod);\n+            }\n \n-        notNullValue.assign(invocationBuilder,\n-                notNullValue.invokeInterfaceMethod(\n-                        MethodDescriptor.ofMethod(Invocation.Builder.class, \"header\", Invocation.Builder.class,\n-                                String.class, Object.class),\n-                        invocationBuilder, notNullValue.load(headerName), headerValueHandle));\n+            // Loop through the keys\n+            ResultHandle keySet = notNullValue.invokeInterfaceMethod(ofMethod(Map.class, \"keySet\", Set.class),\n+                    headerValueHandle);\n+            ResultHandle keysSetIterator = notNullValue.invokeInterfaceMethod(\n+                    ofMethod(Set.class, \"iterator\", Iterator.class), keySet);\n+            BytecodeCreator keySetLoop = notNullValue.whileLoop(c -> iteratorHasNext(c, keysSetIterator)).block();\n+            ResultHandle mapKey = keySetLoop.invokeInterfaceMethod(\n+                    ofMethod(Iterator.class, \"next\", Object.class), keysSetIterator);\n+            // get the value and convert\n+            ResultHandle mapValue = keySetLoop.invokeInterfaceMethod(ofMethod(Map.class, \"get\", Object.class, Object.class),\n+                    headerValueHandle, mapKey);\n+            Type valueType = resolvesTypes.getValue();\n+            String effectiveValueTypeStr = valueType.name().toString();\n+            if (isCollection(valueType, index)) {\n+                if (valueType.kind() == PARAMETERIZED_TYPE) {\n+                    Type componentType = valueType.asParameterizedType().arguments().get(0);\n+                    if ((componentType.kind() == CLASS) || (componentType.kind() == PARAMETERIZED_TYPE)) {\n+                        effectiveValueTypeStr = componentType.name().toString();\n+                    }\n+                }\n+                if (effectiveValueTypeStr == null) {\n+                    effectiveValueTypeStr = DotNames.OBJECT.toString();\n+                }\n+                ForEachLoop mapValueForLoop = keySetLoop.forEach(mapValue);\n+                BytecodeCreator mapValueCreator = mapValueForLoop.block();\n+\n+                mapValue = mapValueCreator.invokeVirtualMethod(\n+                        MethodDescriptor.ofMethod(RestClientBase.class, \"convertParam\", Object.class,\n+                                Object.class, Class.class, java.lang.reflect.Type.class, Annotation[].class),\n+                        client, mapValueForLoop.element(),\n+                        mapValueCreator.loadClassFromTCCL(effectiveValueTypeStr), genericType, annotations);\n+\n+                mapValueCreator.assign(invocationBuilder,\n+                        mapValueCreator.invokeInterfaceMethod(\n+                                MethodDescriptor.ofMethod(Invocation.Builder.class, \"header\", Invocation.Builder.class,\n+                                        String.class, Object.class),\n+                                invocationBuilder, mapKey, mapValue));\n+            } else {\n+                mapValue = keySetLoop.invokeVirtualMethod(\n+                        MethodDescriptor.ofMethod(RestClientBase.class, \"convertParam\", Object.class,\n+                                Object.class, Class.class, java.lang.reflect.Type.class, Annotation[].class),\n+                        client, mapValue,\n+                        keySetLoop.loadClassFromTCCL(valueType.name().toString()), genericType, annotations);\n+\n+                keySetLoop.assign(invocationBuilder,\n+                        keySetLoop.invokeInterfaceMethod(\n+                                MethodDescriptor.ofMethod(Invocation.Builder.class, \"header\", Invocation.Builder.class,\n+                                        String.class, Object.class),\n+                                invocationBuilder, mapKey, mapValue));\n+            }\n+        } else {\n+            headerValueHandle = notNullValue.invokeVirtualMethod(\n+                    MethodDescriptor.ofMethod(RestClientBase.class, \"convertParam\", Object.class,\n+                            Object.class, Class.class, java.lang.reflect.Type.class, Annotation[].class),\n+                    client, headerValueHandle,\n+                    notNullValue.loadClassFromTCCL(paramType.name().toString()), genericType, annotations);\n+\n+            notNullValue.assign(invocationBuilder,\n+                    notNullValue.invokeInterfaceMethod(\n+                            MethodDescriptor.ofMethod(Invocation.Builder.class, \"header\", Invocation.Builder.class,\n+                                    String.class, Object.class),\n+                            invocationBuilder, notNullValue.load(headerName), headerValueHandle));\n+        }\n     }\n \n     private void addPathParam(BytecodeCreator methodCreator, AssignableResultHandle methodTarget,\n\ndiff --git a/independent-projects/resteasy-reactive/client/processor/src/main/java/org/jboss/resteasy/reactive/client/processor/beanparam/BeanParamParser.java b/independent-projects/resteasy-reactive/client/processor/src/main/java/org/jboss/resteasy/reactive/client/processor/beanparam/BeanParamParser.java\nindex d16c9d11eb1c4..cfd663471e6d5 100644\n--- a/independent-projects/resteasy-reactive/client/processor/src/main/java/org/jboss/resteasy/reactive/client/processor/beanparam/BeanParamParser.java\n+++ b/independent-projects/resteasy-reactive/client/processor/src/main/java/org/jboss/resteasy/reactive/client/processor/beanparam/BeanParamParser.java\n@@ -126,9 +126,9 @@ private static List<Item> parseInternal(ClassInfo beanParamClass, IndexView inde\n             resultList.addAll(paramItemsForFieldsAndMethods(beanParamClass, HEADER_PARAM,\n                     (annotationValue, fieldInfo) -> new HeaderParamItem(fieldInfo.name(), annotationValue,\n                             new FieldExtractor(null, fieldInfo.name(), fieldInfo.declaringClass().name().toString()),\n-                            fieldInfo.type().name().toString()),\n+                            fieldInfo.type()),\n                     (annotationValue, getterMethod) -> new HeaderParamItem(getterMethod.name(), annotationValue,\n-                            new GetterExtractor(getterMethod), getterMethod.returnType().name().toString())));\n+                            new GetterExtractor(getterMethod), getterMethod.returnType())));\n \n             // @RestHeader with no explicit value are hyphenated\n             resultList.addAll(paramItemsForFieldsAndMethods(beanParamClass, REST_HEADER_PARAM,\n@@ -136,11 +136,11 @@ private static List<Item> parseInternal(ClassInfo beanParamClass, IndexView inde\n                             annotationValue != null ? annotationValue\n                                     : StringUtil.hyphenateWithCapitalFirstLetter(fieldInfo.name()),\n                             new FieldExtractor(null, fieldInfo.name(), fieldInfo.declaringClass().name().toString()),\n-                            fieldInfo.type().name().toString()),\n+                            fieldInfo.type()),\n                     (annotationValue, getterMethod) -> new HeaderParamItem(getterMethod.name(),\n                             annotationValue != null ? annotationValue\n                                     : StringUtil.hyphenateWithCapitalFirstLetter(getterName(getterMethod)),\n-                            new GetterExtractor(getterMethod), getterMethod.returnType().name().toString())));\n+                            new GetterExtractor(getterMethod), getterMethod.returnType())));\n \n             resultList.addAll(paramItemsForFieldsAndMethods(beanParamClass, PATH_PARAM,\n                     (annotationValue, fieldInfo) -> new PathParamItem(fieldInfo.name(), annotationValue,\n\ndiff --git a/independent-projects/resteasy-reactive/client/processor/src/main/java/org/jboss/resteasy/reactive/client/processor/beanparam/HeaderParamItem.java b/independent-projects/resteasy-reactive/client/processor/src/main/java/org/jboss/resteasy/reactive/client/processor/beanparam/HeaderParamItem.java\nindex 79c6adaf83c18..6979af5c7176e 100644\n--- a/independent-projects/resteasy-reactive/client/processor/src/main/java/org/jboss/resteasy/reactive/client/processor/beanparam/HeaderParamItem.java\n+++ b/independent-projects/resteasy-reactive/client/processor/src/main/java/org/jboss/resteasy/reactive/client/processor/beanparam/HeaderParamItem.java\n@@ -1,10 +1,12 @@\n package org.jboss.resteasy.reactive.client.processor.beanparam;\n \n+import org.jboss.jandex.Type;\n+\n public class HeaderParamItem extends Item {\n     private final String headerName;\n-    private final String paramType;\n+    private final Type paramType;\n \n-    public HeaderParamItem(String fieldName, String headerName, ValueExtractor extractor, String paramType) {\n+    public HeaderParamItem(String fieldName, String headerName, ValueExtractor extractor, Type paramType) {\n         super(fieldName, ItemType.HEADER_PARAM, false, extractor);\n         this.headerName = headerName;\n         this.paramType = paramType;\n@@ -14,7 +16,7 @@ public String getHeaderName() {\n         return headerName;\n     }\n \n-    public String getParamType() {\n+    public Type getParamType() {\n         return paramType;\n     }\n }\n",
    "test_patch": "diff --git a/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/headers/HeaderTest.java b/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/headers/HeaderTest.java\nindex b13b8e5ca6dfb..9f2b323153b58 100644\n--- a/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/headers/HeaderTest.java\n+++ b/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/headers/HeaderTest.java\n@@ -6,6 +6,7 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n import java.util.SortedSet;\n import java.util.TreeSet;\n@@ -17,9 +18,11 @@\n import jakarta.ws.rs.Path;\n import jakarta.ws.rs.core.Context;\n import jakarta.ws.rs.core.HttpHeaders;\n+import jakarta.ws.rs.core.MultivaluedMap;\n \n import org.eclipse.microprofile.rest.client.RestClientBuilder;\n import org.jboss.resteasy.reactive.RestHeader;\n+import org.jboss.resteasy.reactive.common.util.MultivaluedTreeMap;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.RegisterExtension;\n \n@@ -56,6 +59,21 @@ void testHeadersWithCollections() {\n         assertThat(client.headersSet(new TreeSet(List.of(\"a\", \"b\")), new TreeSet(List.of(\"c\", \"d\")))).isEqualTo(expected);\n     }\n \n+    @Test\n+    void testHeadersMap() {\n+        Client client = RestClientBuilder.newBuilder().baseUri(baseUri).build(Client.class);\n+        assertThat(client.headersMap(Map.of(\"client-a\", \"A\", \"client-b\", \"B\"))).contains(\"client-a=A\").contains(\"client-b=B\");\n+    }\n+\n+    @Test\n+    void testHeadersMultiMap() {\n+        Client client = RestClientBuilder.newBuilder().baseUri(baseUri).build(Client.class);\n+        MultivaluedTreeMap<String, Integer> headers = new MultivaluedTreeMap<>();\n+        headers.addAll(\"client-a\", 1, 2, 3);\n+        headers.addAll(\"client-b\", 4, 5);\n+        assertThat(client.headersMultiMap(headers)).contains(\"client-a=1,2,3\").contains(\"client-b=4,5\");\n+    }\n+\n     @Path(\"/\")\n     @ApplicationScoped\n     public static class Resource {\n@@ -86,6 +104,23 @@ public String headersSortedSet(@HeaderParam(\"foo\") SortedSet foo, @RestHeader So\n             return joiningCollections(foo, header);\n         }\n \n+        @GET\n+        @Path(\"/headers-map\")\n+        public String headersMap(HttpHeaders headers) {\n+            StringBuilder sb = new StringBuilder();\n+            boolean isFirst = true;\n+            for (var entry : headers.getRequestHeaders().entrySet().stream().filter(e -> e.getKey().startsWith(\"client-\"))\n+                    .collect(Collectors.toSet())) {\n+                if (!isFirst) {\n+                    sb.append(\"/\");\n+                } else {\n+                    isFirst = false;\n+                }\n+                sb.append(entry.getKey()).append(\"=\").append(String.join(\",\", entry.getValue()));\n+            }\n+            return sb.toString();\n+        }\n+\n         private String joiningCollections(Collection... collections) {\n             List<String> allHeaders = new ArrayList<>();\n             for (Collection collection : collections) {\n@@ -111,6 +146,14 @@ public interface Client {\n         @GET\n         @Path(\"/headers-sorted-set\")\n         String headersSortedSet(@HeaderParam(\"foo\") SortedSet foo, @RestHeader SortedSet header);\n+\n+        @GET\n+        @Path(\"/headers-map\")\n+        String headersMap(@RestHeader Map<String, String> headers);\n+\n+        @GET\n+        @Path(\"/headers-map\")\n+        String headersMultiMap(@RestHeader MultivaluedMap<String, Integer> headers);\n     }\n \n     public interface SubClient {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48426",
    "pr_id": 48426,
    "issue_id": 48403,
    "repo": "quarkusio/quarkus",
    "problem_statement": "[NativeImageBuildStep] Unable to parse GraalVM for JDK 26\nWe see new native-image integration tests failing because Quarkus isn't able to parse the following JDK 26-based GraalVM version:\n\n```\n$ native-image --version\nnative-image 26 2026-03-17\nGraalVM Runtime Environment GraalVM CE 26-dev+1.1 (build 26+1-jvmci-b01)\nSubstrate VM GraalVM CE 26-dev+1.1 (build 26+1, serial gc)\n```\n\nThis results in the `picocli-native` integration test to fail with an error along the lines of this:\n\n```\n[INFO] --- quarkus:999-SNAPSHOT:track-config-changes (track-config-changes) @ quarkus-integration-test-picocli-native ---\n[INFO] \n[INFO] --- compiler:3.14.0:compile (default-compile) @ quarkus-integration-test-picocli-native ---\n[INFO] Recompiling the module because of changed source code.\n[INFO] Compiling 21 source files with javac [debug deprecation parameters release 17] to target/classes\n[INFO] \n[INFO] --- resources:3.3.1:testResources (default-testResources) @ quarkus-integration-test-picocli-native ---\n[INFO] skip non existing resourceDirectory /home/sgehwolf/Documents/openjdk/quarkus/quarkus-source/integration-tests/picocli-native/src/test/resources\n[INFO] \n[INFO] --- compiler:3.14.0:testCompile (default-testCompile) @ quarkus-integration-test-picocli-native ---\n[INFO] Recompiling the module because of changed dependency.\n[INFO] Compiling 4 source files with javac [debug deprecation parameters release 17] to target/test-classes\n[INFO] \n[INFO] --- surefire:3.5.3:test (default-test) @ quarkus-integration-test-picocli-native ---\n[INFO] Skipped\n[INFO] \n[INFO] --- quarkus:999-SNAPSHOT:build (default) @ quarkus-integration-test-picocli-native ---\n[INFO] [quarkus-build-caching-extension] Quarkus previous configuration not found\n[INFO] [quarkus-build-caching-extension] Quarkus build goal marked as not cacheable\n[INFO] [quarkus-build-caching-extension] Quarkus previous configuration not found\n[INFO] [quarkus-build-caching-extension] Quarkus build goal marked as not cacheable\n[INFO] [io.quarkus.deployment.pkg.steps.JarResultBuildStep] Building native image source jar: /home/sgehwolf/Documents/openjdk/quarkus/quarkus-source/integration-tests/picocli-native/target/quarkus-integration-test-picocli-native-999-SNAPSHOT-native-image-source-jar/quarkus-integration-test-picocli-native-999-SNAPSHOT-runner.jar\n[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildStep] Building native image from /home/sgehwolf/Documents/openjdk/quarkus/quarkus-source/integration-tests/picocli-native/target/quarkus-integration-test-picocli-native-999-SNAPSHOT-native-image-source-jar/quarkus-integration-test-picocli-native-999-SNAPSHOT-runner.jar\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  4.801 s\n[INFO] Finished at: 2025-06-16T12:09:32+02:00\n[INFO] ------------------------------------------------------------------------\n[INFO] Njord session closed\n[INFO] 14 goals, 14 executed\n[ERROR] Failed to execute goal io.quarkus:quarkus-maven-plugin:999-SNAPSHOT:build (default) on project quarkus-integration-test-picocli-native: Failed to build quarkus application: io.quarkus.builder.BuildException: Build failure: Build failed due to errors\n[ERROR] \t[error]: Build step io.quarkus.deployment.pkg.steps.NativeImageBuildStep#build threw an exception: java.lang.RuntimeException: Failed to get GraalVM version\n[ERROR] \tat io.quarkus.deployment.pkg.steps.NativeImageBuildRunner.getGraalVMVersion(NativeImageBuildRunner.java:41)\n[ERROR] \tat io.quarkus.deployment.pkg.steps.NativeImageBuildStep.build(NativeImageBuildStep.java:246)\n[ERROR] \tat java.base/java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:735)\n[ERROR] \tat io.quarkus.deployment.ExtensionLoader$3.execute(ExtensionLoader.java:856)\n[ERROR] \tat io.quarkus.builder.BuildContext.run(BuildContext.java:255)\n[ERROR] \tat org.jboss.threads.ContextHandler$1.runWith(ContextHandler.java:18)\n[ERROR] \tat org.jboss.threads.EnhancedQueueExecutor$Task.doRunWith(EnhancedQueueExecutor.java:2651)\n[ERROR] \tat org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2630)\n[ERROR] \tat org.jboss.threads.EnhancedQueueExecutor.runThreadBody(EnhancedQueueExecutor.java:1622)\n[ERROR] \tat org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1589)\n[ERROR] \tat java.base/java.lang.Thread.run(Thread.java:1474)\n[ERROR] \tat org.jboss.threads.JBossThread.run(JBossThread.java:501)\n[ERROR] Caused by: java.lang.NumberFormatException: For input string: \"null\"\n[ERROR] \tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n[ERROR] \tat java.base/java.lang.Integer.parseInt(Integer.java:565)\n[ERROR] \tat java.base/java.lang.Integer.parseInt(Integer.java:662)\n[ERROR] \tat java.base/java.util.stream.ReferencePipeline$4$1.accept(ReferencePipeline.java:231)\n[ERROR] \tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)\n[ERROR] \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)\n[ERROR] \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)\n[ERROR] \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:635)\n[ERROR] \tat java.base/java.util.stream.AbstractPipeline.evaluateToArrayNode(AbstractPipeline.java:291)\n[ERROR] \tat java.base/java.util.stream.IntPipeline.toArray(IntPipeline.java:564)\n[ERROR] \tat io.quarkus.runtime.graal.GraalVM$Version.breakdownVersion(GraalVM.java:127)\n[ERROR] \tat io.quarkus.runtime.graal.GraalVM$Version.<init>(GraalVM.java:116)\n[ERROR] \tat io.quarkus.deployment.pkg.steps.GraalVM$Version.<init>(GraalVM.java:229)\n[ERROR] \tat io.quarkus.deployment.pkg.steps.GraalVM$VersionParseHelper.parse(GraalVM.java:89)\n[ERROR] \tat io.quarkus.deployment.pkg.steps.GraalVM$Version.of(GraalVM.java:279)\n[ERROR] \tat io.quarkus.deployment.pkg.steps.NativeImageBuildRunner.getGraalVMVersion(NativeImageBuildRunner.java:38)\n[ERROR] \t... 11 more\n[ERROR] -> [Help 1]\n[ERROR] \n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR] \n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException\n```\n\nWe also see similar failures in our Mandrel CI here:\nhttps://github.com/graalvm/mandrel/actions/runs/15646482173/job/44085716121#step:12:455",
    "issue_word_count": 880,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/GraalVM.java",
      "core/deployment/src/test/java/io/quarkus/deployment/pkg/steps/GraalVMTest.java",
      "core/runtime/src/main/java/io/quarkus/runtime/graal/GraalVM.java"
    ],
    "pr_changed_test_files": [
      "core/deployment/src/test/java/io/quarkus/deployment/pkg/steps/GraalVMTest.java"
    ],
    "base_commit": "da9f88e64e5daddf5955203460ce606df7a62ee8",
    "head_commit": "3a4a310b27a1198f860f7d1888d2343c0fbb2d82",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48426",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48426",
    "dockerfile": "",
    "pr_merged_at": "2025-06-23T10:38:05.000Z",
    "patch": "diff --git a/core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/GraalVM.java b/core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/GraalVM.java\nindex 1da4ecacd7dd3..c9e03ef075403 100644\n--- a/core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/GraalVM.java\n+++ b/core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/GraalVM.java\n@@ -28,7 +28,6 @@ static final class VersionParseHelper {\n         private static final String OPT = \"(?:-(?<OPT>[-a-zA-Z0-9.]+))?\";\n         private static final String VSTR_FORMAT = VNUM + PRE + BUILD + OPT;\n \n-        private static final String VNUM_GROUP = \"VNUM\";\n         private static final String VENDOR_VERSION_GROUP = \"VENDOR\";\n         private static final String BUILD_INFO_GROUP = \"BUILDINFO\";\n \n@@ -67,7 +66,7 @@ static Version parse(List<String> lines) {\n \n                 String vendorVersion = secondMatcher.group(VENDOR_VERSION_GROUP);\n \n-                String graalVersion = graalVersion(javaVersion, v.feature());\n+                String graalVersion = graalVersion(javaVersion, v);\n                 if (vendorVersion.contains(\"-dev\")) {\n                     graalVersion = graalVersion + \"-dev\";\n                 }\n@@ -137,7 +136,7 @@ private static String matchVersion(String version) {\n             return null;\n         }\n \n-        private static String graalVersion(String buildInfo, int jdkFeature) {\n+        private static String graalVersion(String buildInfo, Runtime.Version v) {\n             if (buildInfo == null) {\n                 return null;\n             }\n@@ -152,7 +151,10 @@ private static String graalVersion(String buildInfo, int jdkFeature) {\n             if (versMatcher.find()) {\n                 return matchVersion(version);\n             } else {\n-                return Version.GRAAL_MAPPING.get(Integer.toString(jdkFeature));\n+                // Only versions from JDK 22 to JDK 25 had GraalVM version mappings.\n+                // Use the JDK version triplet for JDK N where N > 25.\n+                String fullJDKVersion = String.format(\"%d.%d.%d\", v.feature(), v.interim(), v.update());\n+                return Version.GRAAL_MAPPING.getOrDefault(Integer.toString(v.feature()), fullJDKVersion);\n             }\n         }\n \n\ndiff --git a/core/runtime/src/main/java/io/quarkus/runtime/graal/GraalVM.java b/core/runtime/src/main/java/io/quarkus/runtime/graal/GraalVM.java\nindex a5852e74a7b6a..ac4be038b13d5 100644\n--- a/core/runtime/src/main/java/io/quarkus/runtime/graal/GraalVM.java\n+++ b/core/runtime/src/main/java/io/quarkus/runtime/graal/GraalVM.java\n@@ -1,7 +1,10 @@\n package io.quarkus.runtime.graal;\n \n import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n import java.util.Map;\n+import java.util.Map.Entry;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n@@ -40,16 +43,23 @@ static final class VersionParseHelper {\n \n         private static final String VERSION_GROUP = \"VNUM\";\n \n-        private static final Version UNKNOWN_VERSION = null;\n-\n         static Version parse(String value) {\n             Matcher versionMatcher = VENDOR_VERS_PATTERN.matcher(value);\n             if (versionMatcher.find()) {\n                 String vendor = versionMatcher.group(VENDOR_PREFIX_GROUP);\n                 if (GRAALVM_CE_VERS_PREFIX.equals(vendor) || ORACLE_GRAALVM_VERS_PREFIX.equals(vendor)) {\n                     String version = versionMatcher.group(VERSION_GROUP);\n-                    String jdkFeature = version.split(\"\\\\.\", 2)[0];\n-                    return new Version(value, Version.GRAAL_MAPPING.get(jdkFeature), Distribution.GRAALVM);\n+                    String tokens[] = version.split(\"\\\\.\", 3);\n+                    String jdkFeature = tokens[0];\n+                    String jdkVers = jdkFeature;\n+                    if (tokens.length == 3) {\n+                        String interim = tokens[1];\n+                        String update = tokens[2].split(\"\\\\+\")[0];\n+                        jdkVers = String.format(\"%s.%s.%s\", jdkFeature, interim, update);\n+                    }\n+                    // For JDK 26+ there is no more version mapping use the JDK version\n+                    String versionMapping = Version.GRAAL_MAPPING.getOrDefault(jdkFeature, version);\n+                    return new Version(value, versionMapping, jdkVers, Distribution.GRAALVM);\n                 } else if (LIBERICA_NIK_VERS_PREFIX.equals(vendor)) {\n                     return new Version(value, versionMatcher.group(VERSION_GROUP), Distribution.LIBERICA);\n                 } else if (MANDREL_VERS_PREFIX.equals(vendor)) {\n@@ -78,8 +88,18 @@ public static class Version implements Comparable<Version> {\n                 \"21\", \"23.1\",\n                 \"22\", \"24.0\",\n                 \"23\", \"24.1\",\n-                \"24\", \"24.2\",\n-                \"25\", \"25.0\");\n+                \"24\", \"24.2\");\n+        // Mapping of community major.minor pair to the JDK major version based on\n+        // GRAAL_MAPPING\n+        private static final Map<String, String> MANDREL_JDK_REV_MAP;\n+\n+        static {\n+            Map<String, String> reverseMap = new HashMap<>(GRAAL_MAPPING.size());\n+            for (Entry<String, String> entry : GRAAL_MAPPING.entrySet()) {\n+                reverseMap.put(entry.getValue(), entry.getKey());\n+            }\n+            MANDREL_JDK_REV_MAP = Collections.unmodifiableMap(reverseMap);\n+        }\n \n         /**\n          * The minimum version of GraalVM supported by Quarkus.\n@@ -97,6 +117,7 @@ public static class Version implements Comparable<Version> {\n          */\n         public static final Version MINIMUM_SUPPORTED = CURRENT;\n \n+        private static final String DEFAULT_JDK_VERSION = \"21\";\n         protected final String fullVersion;\n         public final Runtime.Version javaVersion;\n         protected final Distribution distribution;\n@@ -104,7 +125,10 @@ public static class Version implements Comparable<Version> {\n         private String suffix;\n \n         Version(String fullVersion, String version, Distribution distro) {\n-            this(fullVersion, version, \"21\", distro);\n+            this(fullVersion, version,\n+                    distro == Distribution.MANDREL || distro == Distribution.LIBERICA ? communityJDKvers(version)\n+                            : DEFAULT_JDK_VERSION,\n+                    distro);\n         }\n \n         Version(String fullVersion, String version, String javaVersion, Distribution distro) {\n@@ -127,6 +151,33 @@ private void breakdownVersion(String version) {\n             this.versions = Arrays.stream(version.split(\"\\\\.\")).mapToInt(Integer::parseInt).toArray();\n         }\n \n+        /*\n+         * Reconstruct the JDK version from the given GraalVM community version (Mandrel or Liberica)\n+         */\n+        private static String communityJDKvers(String communityVersion) {\n+            try {\n+                String[] parts = communityVersion.split(\"\\\\.\", 4);\n+                int major = Integer.parseInt(parts[0]);\n+                int minor = Integer.parseInt(parts[1]);\n+                if ((major == 23 && minor > 0) ||\n+                        major > 23) {\n+                    String mandrelMajorMinor = String.format(\"%s.%s\", parts[0], parts[1]);\n+                    // If we don't find a reverse mapping we use a JDK version >= 25, thus\n+                    // the feature version is the first part of the quadruple.\n+                    String feature = MANDREL_JDK_REV_MAP.getOrDefault(mandrelMajorMinor, parts[0]);\n+                    // Heuristic: The update version of Mandrel and the JDK match.\n+                    // Interim is usually 0 for the JDK version.\n+                    return String.format(\"%s.%s.%s\", feature, \"0\", parts[2]);\n+                }\n+            } catch (Throwable e) {\n+                // fall-through do default\n+                Log.warnf(\"Failed to parse JDK version from GraalVM version: %s. Defaulting to currently supported version %s \",\n+                        communityVersion,\n+                        DEFAULT_JDK_VERSION);\n+            }\n+            return DEFAULT_JDK_VERSION;\n+        }\n+\n         @Override\n         public int compareTo(Version o) {\n             return compareTo(o.versions);\n",
    "test_patch": "diff --git a/core/deployment/src/test/java/io/quarkus/deployment/pkg/steps/GraalVMTest.java b/core/deployment/src/test/java/io/quarkus/deployment/pkg/steps/GraalVMTest.java\nindex e7e33dcda8597..37f80b5071403 100644\n--- a/core/deployment/src/test/java/io/quarkus/deployment/pkg/steps/GraalVMTest.java\n+++ b/core/deployment/src/test/java/io/quarkus/deployment/pkg/steps/GraalVMTest.java\n@@ -7,6 +7,7 @@\n \n import java.util.stream.Stream;\n \n+import org.junit.jupiter.api.AfterAll;\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.params.ParameterizedTest;\n@@ -18,8 +19,21 @@\n \n public class GraalVMTest {\n \n+    public static final String GRAALVM_VENDOR_VERSION_PROP = \"org.graalvm.vendorversion\";\n+\n+    @AfterAll\n+    public static void tearDownAfterAll() {\n+        System.clearProperty(GRAALVM_VENDOR_VERSION_PROP);\n+    }\n+\n     @Test\n     public void testGraalVMVersionDetected() {\n+        // Version detection after JDK 25 which no longer uses a GraalVM version mapping,\n+        // but uses the JDK version instead\n+        assertVersion(new Version(\"GraalVM 26.0.0\", \"26.0.0\", GRAALVM), GRAALVM,\n+                Version.of(Stream.of((\"native-image 26 2026-03-17\\n\"\n+                        + \"GraalVM Runtime Environment GraalVM CE 26-dev+1.1 (build 26+1-jvmci-b01)\\n\"\n+                        + \"Substrate VM GraalVM CE 26-dev+1.1 (build 26+1, serial gc)\").split(\"\\\\n\"))));\n         // Version detection after: https://github.com/oracle/graal/pull/6302 (3 lines of version output)\n         assertVersion(new Version(\"GraalVM 23.0.0\", \"23.0.0\", GRAALVM), MANDREL,\n                 Version.of(Stream.of((\"native-image 17.0.6 2023-01-17\\n\"\n@@ -168,6 +182,19 @@ public void testGraalVM23_1CommunityVersionParser() {\n         assertThat(version.javaVersion.update()).isEqualTo(5);\n     }\n \n+    @Test\n+    public void testGraalVM26CommunityVersionParser() {\n+        final Version version = Version.of(Stream.of((\"native-image 26 2026-03-17\\n\"\n+                + \"GraalVM Runtime Environment GraalVM CE 26-dev+1.1 (build 26+1-jvmci-b01)\\n\"\n+                + \"Substrate VM GraalVM CE 26-dev+1.1 (build 26+1, serial gc)\").split(\"\\\\n\")));\n+        assertThat(version.toString().contains(GRAALVM.name()));\n+        assertThat(version.getVersionAsString()).isEqualTo(\"26.0.0-dev\");\n+        assertThat(version.javaVersion.toString()).isEqualTo(\"26+1-jvmci-b01\");\n+        assertThat(version.javaVersion.feature()).isEqualTo(26);\n+        assertThat(version.javaVersion.interim()).isEqualTo(0);\n+        assertThat(version.javaVersion.update()).isEqualTo(0);\n+    }\n+\n     @Test\n     public void testGraalVMVersionsOlderThan() {\n         assertOlderThan(\"native-image 21 2023-09-19\\n\" +\n@@ -184,6 +211,40 @@ public void testGraalVMVersionsOlderThan() {\n                         \"Substrate VM GraalVM CE 21+35.1 (build 21+35, serial gc)\\n\");\n     }\n \n+    /*\n+     * Exercise the code path used at native-image build time where the org.graalvm.vendorversion\n+     * property is being fed to the GraalVM version parsing machinery.\n+     */\n+    @ParameterizedTest\n+    // @formatter:off\n+    @ValueSource(strings = {\n+    // GraalVM CE/Community\n+    \"GraalVM CE 26-dev+1.1 |26.0|26|0\",\n+    \"GraalVM CE 25-dev+26.1|25.0|25|0\",\n+    \"GraalVM CE 24.0.1+9.1 |24.2|24|1\",\n+    // Mandrel\n+    \"Mandrel-24.2.1.0-Final|24.2|24|1\",\n+    \"Mandrel-23.1.7.0-1b2  |23.1|21|7\",\n+    // Liberica-NIK\n+    \"Liberica-NIK-23.1.7-1 |23.1|21|7\",\n+    \"Liberica-NIK-24.2.1-1 |24.2|24|1\",\n+    })\n+    // @formatter:on\n+    public void testGraalVMRuntimeVersion(String param) {\n+        String tokens[] = param.split(\"\\\\|\", 4);\n+        Assertions.assertTrue(tokens.length == 4);\n+        String propertyVal = tokens[0].trim();\n+        String expectedMajorMinor = tokens[1].trim();\n+        int expectedJDKFeature = Integer.parseInt(tokens[2].trim());\n+        int expectedJDKUpdate = Integer.parseInt(tokens[3].trim());\n+\n+        System.setProperty(GRAALVM_VENDOR_VERSION_PROP, propertyVal);\n+        io.quarkus.runtime.graal.GraalVM.Version v = io.quarkus.runtime.graal.GraalVM.Version.getCurrent();\n+        Assertions.assertEquals(expectedMajorMinor, v.getMajorMinorAsString());\n+        Assertions.assertEquals(expectedJDKFeature, v.javaVersion.feature());\n+        Assertions.assertEquals(expectedJDKUpdate, v.javaVersion.update());\n+    }\n+\n     /**\n      * Asserts that one version is older than the other.\n      */\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48410",
    "pr_id": 48410,
    "issue_id": 48400,
    "repo": "quarkusio/quarkus",
    "problem_statement": "@InjectSpy causes smallrye unable to find config\n### Describe the bug\n\nI upgraded from `3.21.1` to `3.24.0.CR1` and I get the following config error when I run the `SpyTest` test from the [reproducer](https://github.com/gbourant/quarkus-test-profile-bug)\n\n```\n[ERROR] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.370 s <<< FAILURE! -- in gr.SpyTest\n[ERROR] gr.SpyTest.shouldRun -- Time elapsed: 0.005 s <<< ERROR!\norg.junit.jupiter.api.extension.TestInstantiationException: Failed to create test instance\n\tat io.quarkus.test.junit.QuarkusTestExtension.initTestState(QuarkusTestExtension.java:805)\n\tat io.quarkus.test.junit.QuarkusTestExtension.interceptTestClassConstructor(QuarkusTestExtension.java:777)\n\tat java.base/java.util.Optional.orElseGet(Optional.java:364)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\nCaused by: java.util.NoSuchElementException: SRCFG00027: Could not find a mapping for gr.ProjectConfig\n\tat io.smallrye.config.SmallRyeConfig.getConfigMapping(SmallRyeConfig.java:647)\n\tat io.smallrye.config.SmallRyeConfig.getConfigMapping(SmallRyeConfig.java:637)\n\tat gr.MockedConfig.projectConfig(MockedConfig.java:18)\n\tat gr.MockedConfig_ProducerMethod_projectConfig_hFrxuFod_XDzaANtRFQIlwOjqaA_Bean.doCreate(Unknown Source)\n\tat gr.MockedConfig_ProducerMethod_projectConfig_hFrxuFod_XDzaANtRFQIlwOjqaA_Bean.create(Unknown Source)\n\tat gr.MockedConfig_ProducerMethod_projectConfig_hFrxuFod_XDzaANtRFQIlwOjqaA_Bean.create(Unknown Source)\n\tat io.quarkus.arc.impl.AbstractSharedContext.createInstanceHandle(AbstractSharedContext.java:119)\n\tat io.quarkus.arc.impl.AbstractSharedContext$1.get(AbstractSharedContext.java:38)\n\tat io.quarkus.arc.impl.AbstractSharedContext$1.get(AbstractSharedContext.java:35)\n\tat io.quarkus.arc.generator.Default_jakarta_enterprise_context_ApplicationScoped_ContextInstances.c2(Unknown Source)\n\tat io.quarkus.arc.generator.Default_jakarta_enterprise_context_ApplicationScoped_ContextInstances.computeIfAbsent(Unknown Source)\n\tat io.quarkus.arc.impl.AbstractSharedContext.get(AbstractSharedContext.java:35)\n\tat io.quarkus.arc.impl.ClientProxies.getApplicationScopedDelegate(ClientProxies.java:23)\n\tat gr.MockedConfig_ProducerMethod_projectConfig_hFrxuFod_XDzaANtRFQIlwOjqaA_ClientProxy.arc$delegate(Unknown Source)\n\tat gr.MockedConfig_ProducerMethod_projectConfig_hFrxuFod_XDzaANtRFQIlwOjqaA_ClientProxy.arc_contextualInstance(Unknown Source)\n\tat io.quarkus.arc.ClientProxy.unwrap(ClientProxy.java:52)\n\tat io.quarkus.test.junit.mockito.internal.CreateMockitoSpiesCallback.createSpyAndSetTestField(CreateMockitoSpiesCallback.java:57)\n\tat io.quarkus.test.junit.mockito.internal.CreateMockitoSpiesCallback.afterConstruct(CreateMockitoSpiesCallback.java:41)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat io.quarkus.test.junit.AbstractTestWithCallbacksExtension.invokeCallbacks(AbstractTestWithCallbacksExtension.java:162)\n\tat io.quarkus.test.junit.AbstractTestWithCallbacksExtension.invokeAfterConstructCallbacks(AbstractTestWithCallbacksExtension.java:64)\n\tat io.quarkus.test.junit.QuarkusTestExtension.initTestState(QuarkusTestExtension.java:802)\n\t... 4 more\n```\n\n\n```java\n@QuarkusTest\npublic class SpyTest {\n\n    @InjectSpy\n    ProjectConfig projectConfig;\n\n    @Test\n    public void shouldRun() {\n    }\n}\n```\n\nIs also seems that if you add a simple test which does not use the `@InjectSpy` both tests will pass.\n\n```java\n@QuarkusTest\npublic class NoSpyTest {\n\n    @Inject // it does not use InjectSpy\n    ProjectConfig projectConfig;\n\n    @Test\n    public void shouldRun() {\n    }\n}\n``",
    "issue_word_count": 400,
    "test_files_count": 3,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "docs/src/main/asciidoc/config-mappings.adoc",
      "integration-tests/injectmock/src/main/java/io/quarkus/it/mockbean/DummyMapping.java",
      "integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/ConfigMappingTest.java",
      "integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/DummyMappingProducer.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/injectmock/src/main/java/io/quarkus/it/mockbean/DummyMapping.java",
      "integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/ConfigMappingTest.java",
      "integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/DummyMappingProducer.java"
    ],
    "base_commit": "993738090122cff70844f4f199e06f283fd81224",
    "head_commit": "f21fb5e85bb0d8a660d83af9ca3cc595f5b80e09",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48410",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48410",
    "dockerfile": "",
    "pr_merged_at": "2025-06-16T13:46:07.000Z",
    "patch": "diff --git a/docs/src/main/asciidoc/config-mappings.adoc b/docs/src/main/asciidoc/config-mappings.adoc\nindex 8974b5a4fe7fa..bd91bd4acc372 100644\n--- a/docs/src/main/asciidoc/config-mappings.adoc\n+++ b/docs/src/main/asciidoc/config-mappings.adoc\n@@ -537,6 +537,7 @@ requires a spy:\n [source,java]\n ----\n @ConfigMapping(prefix = \"app\")\n+@Unremovable\n public interface AppConfig {\n     @WithDefault(\"app\")\n     String name();\n",
    "test_patch": "diff --git a/integration-tests/injectmock/src/main/java/io/quarkus/it/mockbean/DummyMapping.java b/integration-tests/injectmock/src/main/java/io/quarkus/it/mockbean/DummyMapping.java\nnew file mode 100644\nindex 0000000000000..c3b5d688e98e2\n--- /dev/null\n+++ b/integration-tests/injectmock/src/main/java/io/quarkus/it/mockbean/DummyMapping.java\n@@ -0,0 +1,9 @@\n+package io.quarkus.it.mockbean;\n+\n+import io.quarkus.arc.Unremovable;\n+import io.smallrye.config.ConfigMapping;\n+\n+@ConfigMapping(prefix = \"dummy\")\n+@Unremovable\n+public interface DummyMapping {\n+}\n\ndiff --git a/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/ConfigMappingTest.java b/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/ConfigMappingTest.java\nnew file mode 100644\nindex 0000000000000..556ea7dfdd67c\n--- /dev/null\n+++ b/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/ConfigMappingTest.java\n@@ -0,0 +1,19 @@\n+package io.quarkus.it.mockbean;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.InjectMock;\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+@QuarkusTest\n+public class ConfigMappingTest {\n+\n+    @InjectMock\n+    DummyMapping dummyMapping;\n+\n+    @Test\n+    public void testGreet() {\n+        Assertions.assertNotNull(dummyMapping);\n+    }\n+}\n\ndiff --git a/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/DummyMappingProducer.java b/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/DummyMappingProducer.java\nnew file mode 100644\nindex 0000000000000..cb296e82038d7\n--- /dev/null\n+++ b/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/DummyMappingProducer.java\n@@ -0,0 +1,22 @@\n+package io.quarkus.it.mockbean;\n+\n+import jakarta.enterprise.context.ApplicationScoped;\n+import jakarta.enterprise.inject.Produces;\n+import jakarta.inject.Inject;\n+\n+import org.eclipse.microprofile.config.Config;\n+\n+import io.smallrye.config.SmallRyeConfig;\n+\n+public class DummyMappingProducer {\n+\n+    @Inject\n+    Config config;\n+\n+    @Produces\n+    @ApplicationScoped\n+    @io.quarkus.test.Mock\n+    DummyMapping server() {\n+        return config.unwrap(SmallRyeConfig.class).getConfigMapping(DummyMapping.class);\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48363",
    "pr_id": 48363,
    "issue_id": 43952,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Gradle: `:quarkusDependenciesBuild` uses this output of `:jandex` without declaring dependency\n### Describe the bug\n\nA new minimal Quarkus project using Gradle 8.10. as build system fails to build due to a missing dependency declaration to the `org.kordamp.gradle.jandex` plugin.\n\n### Expected behavior\n\nBuild should be successful.\n\nWhen removing the Jandex plugin from `build.gradle.kts`, the build succeeds:\n```\n❯ ./gradlew build\n\nBUILD SUCCESSFUL in 1s\n7 actionable tasks: 6 executed, 1 up-to-date\n```\n\n### Actual behavior\n\n```\n❯ ./gradlew build\n> Task :quarkusDependenciesBuild FAILED\n\nFAILURE: Build failed with an exception.\n\n* What went wrong:\nA problem was found with the configuration of task ':quarkusDependenciesBuild' (type 'QuarkusBuildDependencies').\n  - Gradle detected a problem with the following location: '/path/to/quarkus-jandex/build/resources/main'.\n    \n    Reason: Task ':quarkusDependenciesBuild' uses this output of task ':jandex' without declaring an explicit or implicit dependency. This can lead to incorrect results being produced, depending on what order the tasks are executed.\n    \n    Possible solutions:\n      1. Declare task ':jandex' as an input of ':quarkusDependenciesBuild'.\n      2. Declare an explicit dependency on ':jandex' from ':quarkusDependenciesBuild' using Task#dependsOn.\n      3. Declare an explicit dependency on ':jandex' from ':quarkusDependenciesBuild' using Task#mustRunAfter.\n    \n    For more information, please refer to https://docs.gradle.org/8.10.2/userguide/validation_problems.html#implicit_dependency in the Gradle documentation.\n\n* Try:\n> Run with --stacktrace option to get the stack trace.\n> Run with --info or --debug option to get more log output.\n> Run with --scan to get full insights.\n> Get more help at https://help.gradle.org.\n\nBUILD FAILED in 1s\n7 actionable tasks: 5 executed, 2 up-to-date\n```\n\n### How to Reproduce?\n\n`build.gradle.kts`:\n```kotlin\nplugins {\n\tjava\n\tid(\"org.kordamp.gradle.jandex\") version \"2.0.0\"\n\tid(\"io.quarkus\") version \"3.15.1\"\n}\n\nrepositories {\n\tmavenCentral()\n}\n\ndependencies {\n\timplementation(enforcedPlatform(\"io.quarkus.platform:quarkus-bom:3.15.1\"))\n}\n\ngroup = \"com.example\"\nversion = \"1.0.0-SNAPSHOT\"\n```\n\n`settings.gradle.kts`:\n```kotlin\npluginManagement {\n\trepositories {\n\t\tmavenCentral()\n\t\tgradlePluginPortal()\n\t}\n}\nrootProject.name = \"jandex-dependency\"\n```\n\nThere are no other source files in `src/` whatsoever.\n\n### Output of `uname -a` or `ver`\n\nDarwin macbook.local 23.6.0 Darwin Kernel Version 23.6.0: Wed Jul 31 20:48:04 PDT 2024; root:xnu-10063.141.1.700.5~1/RELEASE_ARM64_T6030 arm64\n\n### Output of `java -version`\n\nopenjdk 21.0.5 2024-10-15 LTS\n\n### Quarkus version or git rev\n\n3.15.1\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nGradle 8.10.2\n\n### Additional information\n\n_No response_",
    "issue_word_count": 395,
    "test_files_count": 5,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "devtools/gradle/gradle-application-plugin/src/main/java/io/quarkus/gradle/QuarkusPlugin.java",
      "integration-tests/gradle/src/main/resources/jandex-basic-multi-module-project-kordamp/application/build.gradle",
      "integration-tests/gradle/src/main/resources/jandex-basic-multi-module-project-kordamp/build.gradle",
      "integration-tests/gradle/src/main/resources/jandex-basic-multi-module-project-kordamp/common/build.gradle",
      "integration-tests/gradle/src/main/resources/jandex-basic-multi-module-project-kordamp/gradle.properties",
      "integration-tests/gradle/src/main/resources/jandex-basic-multi-module-project-kordamp/settings.gradle"
    ],
    "pr_changed_test_files": [
      "integration-tests/gradle/src/main/resources/jandex-basic-multi-module-project-kordamp/application/build.gradle",
      "integration-tests/gradle/src/main/resources/jandex-basic-multi-module-project-kordamp/build.gradle",
      "integration-tests/gradle/src/main/resources/jandex-basic-multi-module-project-kordamp/common/build.gradle",
      "integration-tests/gradle/src/main/resources/jandex-basic-multi-module-project-kordamp/gradle.properties",
      "integration-tests/gradle/src/main/resources/jandex-basic-multi-module-project-kordamp/settings.gradle"
    ],
    "base_commit": "4e66327bf46f5cb69b51094fd2e61c32dc7a69f2",
    "head_commit": "d918163c006100874eadeed140967200c79d0d77",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48363",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48363",
    "dockerfile": "",
    "pr_merged_at": "2025-06-17T11:37:38.000Z",
    "patch": "diff --git a/devtools/gradle/gradle-application-plugin/src/main/java/io/quarkus/gradle/QuarkusPlugin.java b/devtools/gradle/gradle-application-plugin/src/main/java/io/quarkus/gradle/QuarkusPlugin.java\nindex c39cec1249fb2..1fa867a990cd3 100644\n--- a/devtools/gradle/gradle-application-plugin/src/main/java/io/quarkus/gradle/QuarkusPlugin.java\n+++ b/devtools/gradle/gradle-application-plugin/src/main/java/io/quarkus/gradle/QuarkusPlugin.java\n@@ -249,9 +249,9 @@ private void registerTasks(Project project, QuarkusPluginExtension quarkusExt) {\n                 QuarkusBuildDependencies.class,\n                 task -> {\n                     configureQuarkusBuildTask(project, task, quarkusBuildAppModelTask, serviceProvider);\n-\n                     task.getOutputs().doNotCacheIf(\"Dependencies are never cached\", t -> true);\n                 });\n+        project.afterEvaluate(evaluated -> addDependencyOnJandexIfConfigured(evaluated, quarkusBuildDependencies));\n \n         Property<Boolean> cacheLargeArtifacts = quarkusExt.getCacheLargeArtifacts();\n \n@@ -646,7 +646,7 @@ private void visitProjectDep(Project project, Project dep, Set<String> visited)\n     }\n \n     private void setupQuarkusBuildTaskDeps(Project project, Project dep, Set<String> visited) {\n-        if (!visited.add(dep.getGroup() + \":\" + dep.getName())) {\n+        if (!visited.add(dep.getPath())) {\n             return;\n         }\n \n@@ -663,18 +663,24 @@ private void setupQuarkusBuildTaskDeps(Project project, Project dep, Set<String>\n                 });\n \n         getLazyTask(project, QUARKUS_DEV_TASK_NAME).ifPresent(quarkusDev -> {\n-            for (String taskName : new String[] { JavaPlugin.PROCESS_RESOURCES_TASK_NAME,\n-                    // This is the task of the 'org.kordamp.gradle.jandex' Gradle plugin\n-                    \"jandex\",\n-                    // This is the task of the 'com.github.vlsi.jandex' Gradle plugin\n-                    \"processJandexIndex\" }) {\n-                getLazyTask(dep, taskName).ifPresent(t -> quarkusDev.configure(qd -> qd.dependsOn(t)));\n-            }\n+            getLazyTask(project, JavaPlugin.PROCESS_RESOURCES_TASK_NAME)\n+                    .ifPresent(t -> quarkusDev.configure(qd -> qd.dependsOn(t)));\n+            addDependencyOnJandexIfConfigured(dep, quarkusDev);\n         });\n \n         visitProjectDependencies(project, dep, visited);\n     }\n \n+    private void addDependencyOnJandexIfConfigured(Project project, TaskProvider<? extends Task> quarkusTask) {\n+        for (String taskName : new String[] {\n+                // This is the task of the 'org.kordamp.gradle.jandex' Gradle plugin\n+                \"jandex\",\n+                // This is the task of the 'com.github.vlsi.jandex' Gradle plugin\n+                \"processJandexIndex\" }) {\n+            getLazyTask(project, taskName).ifPresent(t -> quarkusTask.configure(qd -> qd.mustRunAfter(t)));\n+        }\n+    }\n+\n     protected void visitProjectDependencies(Project project, Project dep, Set<String> visited) {\n         final Configuration compileConfig = dep.getConfigurations().findByName(JavaPlugin.COMPILE_CLASSPATH_CONFIGURATION_NAME);\n         if (compileConfig != null) {\n@@ -689,10 +695,10 @@ protected void visitProjectDependencies(Project project, Project dep, Set<String\n                     .forEach(d -> {\n                         Project depProject = null;\n \n-                        if (d instanceof ProjectDependency) {\n-                            depProject = dep.project(((ProjectDependency) d).getPath());\n-                        } else if (d instanceof ExternalModuleDependency) {\n-                            depProject = ToolingUtils.findIncludedProject(project, (ExternalModuleDependency) d);\n+                        if (d instanceof ProjectDependency projectDep) {\n+                            depProject = dep.project(projectDep.getPath());\n+                        } else if (d instanceof ExternalModuleDependency externalModuleDep) {\n+                            depProject = ToolingUtils.findIncludedProject(project, externalModuleDep);\n                         }\n \n                         if (depProject == null) {\n@@ -711,13 +717,9 @@ protected void visitProjectDependencies(Project project, Project dep, Set<String\n     private void visitLocalProject(Project project, Project localProject, Set<String> visited) {\n         // local dependency, so we collect also its dependencies\n         visitProjectDep(project, localProject, visited);\n-\n-        ExtensionDependency<?> extensionDependency = DependencyUtils\n-                .getExtensionInfoOrNull(project, localProject);\n-\n-        if (extensionDependency instanceof ProjectExtensionDependency) {\n-            visitProjectDep(project,\n-                    ((ProjectExtensionDependency) extensionDependency).getDeploymentModule(), visited);\n+        ExtensionDependency<?> extensionDependency = DependencyUtils.getExtensionInfoOrNull(project, localProject);\n+        if (extensionDependency instanceof ProjectExtensionDependency projectExtDep) {\n+            visitProjectDep(project, projectExtDep.getDeploymentModule(), visited);\n         }\n     }\n \n",
    "test_patch": "diff --git a/integration-tests/gradle/src/main/resources/jandex-basic-multi-module-project-kordamp/application/build.gradle b/integration-tests/gradle/src/main/resources/jandex-basic-multi-module-project-kordamp/application/build.gradle\nindex 9a9126404f827..af7ec2833ea4e 100644\n--- a/integration-tests/gradle/src/main/resources/jandex-basic-multi-module-project-kordamp/application/build.gradle\n+++ b/integration-tests/gradle/src/main/resources/jandex-basic-multi-module-project-kordamp/application/build.gradle\n@@ -1,5 +1,6 @@\n plugins {\n     id 'io.quarkus'\n+    id 'org.kordamp.gradle.jandex' // this plugin is applied to make the dependencies on the Jandex tasks are properly setup and the build doesn't fail\n }\n \n dependencies {\n\ndiff --git a/integration-tests/gradle/src/main/resources/jandex-basic-multi-module-project-kordamp/build.gradle b/integration-tests/gradle/src/main/resources/jandex-basic-multi-module-project-kordamp/build.gradle\nindex 09eb1e937d255..5c4e4e060e91d 100644\n--- a/integration-tests/gradle/src/main/resources/jandex-basic-multi-module-project-kordamp/build.gradle\n+++ b/integration-tests/gradle/src/main/resources/jandex-basic-multi-module-project-kordamp/build.gradle\n@@ -39,7 +39,7 @@ subprojects {\n     }\n \n     dependencies {\n-        implementation 'io.quarkus:quarkus-resteasy'\n+        implementation 'io.quarkus:quarkus-rest'\n \n         implementation enforcedPlatform(\"${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}\")\n     }\n\ndiff --git a/integration-tests/gradle/src/main/resources/jandex-basic-multi-module-project-kordamp/common/build.gradle b/integration-tests/gradle/src/main/resources/jandex-basic-multi-module-project-kordamp/common/build.gradle\nindex 83b756c28897c..56569bc6e0e49 100644\n--- a/integration-tests/gradle/src/main/resources/jandex-basic-multi-module-project-kordamp/common/build.gradle\n+++ b/integration-tests/gradle/src/main/resources/jandex-basic-multi-module-project-kordamp/common/build.gradle\n@@ -1,7 +1,7 @@\n plugins {\n     id 'io.quarkus'\n     id 'java-library'\n-    id \"org.kordamp.gradle.jandex\" version \"1.1.0\"\n+    id 'org.kordamp.gradle.jandex'\n }\n \n dependencies {\n\ndiff --git a/integration-tests/gradle/src/main/resources/jandex-basic-multi-module-project-kordamp/gradle.properties b/integration-tests/gradle/src/main/resources/jandex-basic-multi-module-project-kordamp/gradle.properties\nindex 8f063b7d88ba4..fa53fcbe2a0b1 100644\n--- a/integration-tests/gradle/src/main/resources/jandex-basic-multi-module-project-kordamp/gradle.properties\n+++ b/integration-tests/gradle/src/main/resources/jandex-basic-multi-module-project-kordamp/gradle.properties\n@@ -1,2 +1,3 @@\n quarkusPlatformArtifactId=quarkus-bom\n-quarkusPlatformGroupId=io.quarkus\n\\ No newline at end of file\n+quarkusPlatformGroupId=io.quarkus\n+kordampJandexVersion=2.1.0\n\\ No newline at end of file\n\ndiff --git a/integration-tests/gradle/src/main/resources/jandex-basic-multi-module-project-kordamp/settings.gradle b/integration-tests/gradle/src/main/resources/jandex-basic-multi-module-project-kordamp/settings.gradle\nindex 8445244737d34..0d51b370f0015 100644\n--- a/integration-tests/gradle/src/main/resources/jandex-basic-multi-module-project-kordamp/settings.gradle\n+++ b/integration-tests/gradle/src/main/resources/jandex-basic-multi-module-project-kordamp/settings.gradle\n@@ -12,6 +12,7 @@ pluginManagement {\n \n     plugins {\n         id 'io.quarkus' version \"${quarkusPluginVersion}\"\n+        id 'org.kordamp.gradle.jandex' version \"${kordampJandexVersion}\"\n     }\n }\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48360",
    "pr_id": 48360,
    "issue_id": 48358,
    "repo": "quarkusio/quarkus",
    "problem_statement": "@Blocking not working on grpc service methods if method contains reserved keyword or underscore\n### Describe the bug\n\nProto files with rpc definitions like `rpc A_B(Request) returns (Reply)` or `rpc Assert(Request) returns (Reply)` will compile into stubs with methods `aB` and `assert_` respectively. This is due to an effort of grpc-java to honor the Java Bean Spec.\n\nWhen annotating these methods with `io.smallrye.common.annotation.Blocking`, like:\n\n```java\n@Blocking\npublic void aB(Request request, StreamObserver<Reply> responseObserver)\n```\n\n... the BlockingServerInterceptor will not work for these converted method names, ultimately leading to failure at runtime if blocking behaviour is detected.\n\n### Expected behavior\n\nIt should work just as it does for \"normal\" rpc methods.\n\n### Actual behavior\n\nFails at runtime if i/o, etc is used.\n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### Quarkus version or git rev\n\n_No response_\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
    "issue_word_count": 167,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "extensions/grpc/runtime/src/main/java/io/quarkus/grpc/runtime/supports/blocking/BlockingServerInterceptor.java",
      "extensions/grpc/runtime/src/test/java/io/quarkus/grpc/runtime/supports/BlockingServerInterceptorTest.java"
    ],
    "pr_changed_test_files": [
      "extensions/grpc/runtime/src/test/java/io/quarkus/grpc/runtime/supports/BlockingServerInterceptorTest.java"
    ],
    "base_commit": "66aefab05c03483f981cbc38bc38f2a4da6b6ffe",
    "head_commit": "637bfb1f8881efc6c316fcf296132b2b466b50ad",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48360",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48360",
    "dockerfile": "",
    "pr_merged_at": "2025-06-18T06:46:25.000Z",
    "patch": "diff --git a/extensions/grpc/runtime/src/main/java/io/quarkus/grpc/runtime/supports/blocking/BlockingServerInterceptor.java b/extensions/grpc/runtime/src/main/java/io/quarkus/grpc/runtime/supports/blocking/BlockingServerInterceptor.java\nindex 3a467c4e320e1..60b8da0455bd7 100644\n--- a/extensions/grpc/runtime/src/main/java/io/quarkus/grpc/runtime/supports/blocking/BlockingServerInterceptor.java\n+++ b/extensions/grpc/runtime/src/main/java/io/quarkus/grpc/runtime/supports/blocking/BlockingServerInterceptor.java\n@@ -37,6 +37,62 @@\n public class BlockingServerInterceptor implements ServerInterceptor, Function<String, Boolean>, Prioritized {\n     private static final Logger log = Logger.getLogger(BlockingServerInterceptor.class);\n \n+    // Reserved keywords, based on the jls, see:\n+    // https://github.com/grpc/grpc-java/blob/master/compiler/src/java_plugin/cpp/java_generator.cpp#L90\n+    private static final Set<String> GRPC_JAVA_RESERVED_KEYWORDS = Set.of(\n+            \"abstract\",\n+            \"assert\",\n+            \"boolean\",\n+            \"break\",\n+            \"byte\",\n+            \"case\",\n+            \"catch\",\n+            \"char\",\n+            \"class\",\n+            \"const\",\n+            \"continue\",\n+            \"default\",\n+            \"do\",\n+            \"double\",\n+            \"else\",\n+            \"enum\",\n+            \"extends\",\n+            \"final\",\n+            \"finally\",\n+            \"float\",\n+            \"for\",\n+            \"goto\",\n+            \"if\",\n+            \"implements\",\n+            \"import\",\n+            \"instanceof\",\n+            \"int\",\n+            \"interface\",\n+            \"long\",\n+            \"native\",\n+            \"new\",\n+            \"package\",\n+            \"private\",\n+            \"protected\",\n+            \"public\",\n+            \"return\",\n+            \"short\",\n+            \"static\",\n+            \"strictfp\",\n+            \"super\",\n+            \"switch\",\n+            \"synchronized\",\n+            \"this\",\n+            \"throw\",\n+            \"throws\",\n+            \"transient\",\n+            \"try\",\n+            \"void\",\n+            \"volatile\",\n+            \"while\",\n+            \"true\",\n+            \"false\");\n+\n     private final Vertx vertx;\n     private final Set<String> blockingMethods;\n     private final Set<String> virtualMethods;\n@@ -68,12 +124,22 @@ public BlockingServerInterceptor(Vertx vertx, List<String> blockingMethods, List\n     @Override\n     public Boolean apply(String name) {\n         String methodName = name.substring(name.lastIndexOf(\"/\") + 1);\n-        return blockingMethods.contains(methodName.toLowerCase());\n+        return blockingMethods.contains(toLowerCaseBeanSpec(methodName));\n     }\n \n     public Boolean applyVirtual(String name) {\n         String methodName = name.substring(name.lastIndexOf(\"/\") + 1);\n-        return virtualMethods.contains(methodName.toLowerCase());\n+        return virtualMethods.contains(toLowerCaseBeanSpec(methodName));\n+    }\n+\n+    private String toLowerCaseBeanSpec(String name) {\n+\n+        // Methods cannot always be lowercased for comparison.\n+        // - gRPC allows using method names which normally would not work in java because of reserved keywords.\n+        // - Underscores are removed.\n+\n+        String lowerBeanSpec = name.toLowerCase().replace(\"_\", \"\");\n+        return GRPC_JAVA_RESERVED_KEYWORDS.contains(lowerBeanSpec) ? lowerBeanSpec + \"_\" : lowerBeanSpec;\n     }\n \n     @Override\n",
    "test_patch": "diff --git a/extensions/grpc/runtime/src/test/java/io/quarkus/grpc/runtime/supports/BlockingServerInterceptorTest.java b/extensions/grpc/runtime/src/test/java/io/quarkus/grpc/runtime/supports/BlockingServerInterceptorTest.java\nindex 5e773bc4029f6..f0f75de6489de 100644\n--- a/extensions/grpc/runtime/src/test/java/io/quarkus/grpc/runtime/supports/BlockingServerInterceptorTest.java\n+++ b/extensions/grpc/runtime/src/test/java/io/quarkus/grpc/runtime/supports/BlockingServerInterceptorTest.java\n@@ -5,6 +5,7 @@\n import static org.mockito.Mockito.when;\n \n import java.util.Collections;\n+import java.util.List;\n import java.util.concurrent.CountDownLatch;\n \n import org.junit.jupiter.api.BeforeEach;\n@@ -80,6 +81,85 @@ void testContextPropagation() throws Exception {\n         }\n     }\n \n+    @Test\n+    void testGrpcMethodMappingWithReservedKeywords() {\n+        List<String> reservedKeywords = List.of(\n+                \"abstract\",\n+                \"assert\",\n+                \"boolean\",\n+                \"break\",\n+                \"byte\",\n+                \"case\",\n+                \"catch\",\n+                \"char\",\n+                \"class\",\n+                \"const\",\n+                \"continue\",\n+                \"default\",\n+                \"do\",\n+                \"double\",\n+                \"else\",\n+                \"enum\",\n+                \"extends\",\n+                \"final\",\n+                \"finally\",\n+                \"float\",\n+                \"for\",\n+                \"goto\",\n+                \"if\",\n+                \"implements\",\n+                \"import\",\n+                \"instanceof\",\n+                \"int\",\n+                \"interface\",\n+                \"long\",\n+                \"native\",\n+                \"new\",\n+                \"package\",\n+                \"private\",\n+                \"protected\",\n+                \"public\",\n+                \"return\",\n+                \"short\",\n+                \"static\",\n+                \"strictfp\",\n+                \"super\",\n+                \"switch\",\n+                \"synchronized\",\n+                \"this\",\n+                \"throw\",\n+                \"throws\",\n+                \"transient\",\n+                \"try\",\n+                \"void\",\n+                \"volatile\",\n+                \"while\",\n+                \"true\",\n+                \"false\");\n+\n+        List<String> javaMethodNames = reservedKeywords.stream().map(r -> r + \"_\").toList();\n+        BlockingServerInterceptor interceptor = new BlockingServerInterceptor(vertx,\n+                javaMethodNames, javaMethodNames, null, false) {\n+        };\n+\n+        reservedKeywords\n+                .forEach(reservedKeyword -> assertThat(interceptor.apply(\"my-service/\" + reservedKeyword)).isTrue());\n+        reservedKeywords\n+                .forEach(reservedKeyword -> assertThat(interceptor.applyVirtual(\"my-service/\" + reservedKeyword)).isTrue());\n+    }\n+\n+    @Test\n+    void testGrpcMethodMappingWithUnderscores() {\n+\n+        String javaMethodName = \"javabeanspec\";\n+        BlockingServerInterceptor interceptor = new BlockingServerInterceptor(vertx,\n+                Collections.singletonList(javaMethodName), Collections.singletonList(javaMethodName), null, false) {\n+        };\n+\n+        assertThat(interceptor.apply(\"my-service/J_Ava_BeanSpec\")).isTrue();\n+        assertThat(interceptor.applyVirtual(\"my-service/J_Ava_BeanSpec\")).isTrue();\n+    }\n+\n     static class BlockingServerCallHandler implements ServerCallHandler {\n         String threadName;\n         String contextUserName;\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48334",
    "pr_id": 48334,
    "issue_id": 48308,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Do not import `io.quarkus:quarkus-bom` into `quarkus-bom-test`\n### Description\n\nI'd like to propose that `quarkus-bom-test` stops importing `io.quarkus:quarkus-bom` for the following reason: \n\nIf third party vendors of Quarkus extensions want to test their extensions against Platform BOMs, then they may end up with outdated Quarkus artiafcts depending on ordering of their BOM imports. \nNamely, if they import `quarkus-bom-test` before a possibly newer Platform BOM, then possibly outdated Quarkus artifacts managed via `quarkus-bom-test` may get a higher precedence than the ones managed in Platform BOMs.\n\nIn case the third party vendor aims at testing with downstream Quarkus artifacts, then `quarkus-bom-test` may break their assumptions by bringing community artifacts instead.\n\n### Implementation ideas\n\nThe change in `quarkus-bom-test` is trivial.",
    "issue_word_count": 133,
    "test_files_count": 1,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "bom/test/pom.xml"
    ],
    "pr_changed_test_files": [
      "bom/test/pom.xml"
    ],
    "base_commit": "a0659dba3ff3df590088262f42329efa0b4b30e9",
    "head_commit": "388ba98cba22ab60fec16a1d166c81ce1d3fed35",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48334",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48334",
    "dockerfile": "",
    "pr_merged_at": "2025-06-13T07:02:38.000Z",
    "patch": "",
    "test_patch": "diff --git a/bom/test/pom.xml b/bom/test/pom.xml\nindex eaba84ffd27da..369c08cb9167c 100644\n--- a/bom/test/pom.xml\n+++ b/bom/test/pom.xml\n@@ -28,14 +28,6 @@\n     <dependencyManagement>\n         <dependencies>\n \n-            <dependency>\n-                <groupId>io.quarkus</groupId>\n-                <artifactId>quarkus-bom</artifactId>\n-                <version>${project.version}</version>\n-                <type>pom</type>\n-                <scope>import</scope>\n-            </dependency>\n-\n             <dependency>\n                 <groupId>io.reactivex</groupId>\n                 <artifactId>rxjava</artifactId>\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48328",
    "pr_id": 48328,
    "issue_id": 46535,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Duplicated and 0 value opentelemetry metrics messages\n### Describe the bug\n\nI have a simple application using opentelemetry metrics with opentelemetry-exporter-logging (https://github.com/rsvoboda/code-with-quarkus-otel).\nWhen inspecting the logs for sent messages, I noticed some issues that should be discussed and possibly fixed.\n\nThere are 2 main categories:\n * sort of duplicated messages\n * messages with 0 value attribute\n\n**Duplicated messages**\n2 messages are sent at the \"same\" time, the only difference seems to be `InstrumentationScopeInfo` which is `io.opentelemetry.runtime-telemetry-java8` or `io.opentelemetry.runtime-telemetry-java17`\nAffected metrics:\n * jvm.cpu.recent_utilization\n * jvm.class.count\n * jvm.class.unloaded\n * jvm.class.loaded\n\nI think there should be just messages with one instrumentation scope sent. Motivation is to limit the used bandwidth and CPU cycles on both the sender and receiver sides.\n\n\n**Messages with 0 value attribute**\nMessages with `InstrumentationScopeInfo` set to `io.opentelemetry.runtime-telemetry-java17` have value attribute set to 0, the ones with `io.opentelemetry.runtime-telemetry-java8` provide data\nAffected metrics:\n * jvm.memory.used_after_last_gc\n * jvm.memory.limit\n * jvm.memory.committed\n * jvm.memory.used\n\n0 value is suspicious, probably something is not initiated well or just the messages with `InstrumentationScopeInfo` set to `io.opentelemetry.runtime-telemetry-java8` should be sent. Motivation is to avoid sending invalid data and possibly limit the used bandwidth.\n\n**Examples:**\nSent messages are captured in https://github.com/rsvoboda/code-with-quarkus-otel/blob/main/README.md or you can get them using the reproducer steps below.\n\nAdditional **jvm.thread.count** topic\nNote about the description difference in sent messages: `Number of executing threads` vs. `Number of executing platform threads.` for `io.opentelemetry.runtime-telemetry-java17` vs. `io.opentelemetry.runtime-telemetry-java8`\nAlso java8 one provides more details, java17 is a summary, but those details are complementary, so imho no adjustments needed on the details provided.\n\nCC @brunobat \n\n\n### How to Reproduce?\n\nGet https://github.com/rsvoboda/code-with-quarkus-otel\n\nRun\n```\nATTRIBUTES=(\njvm.memory.used\njvm.memory.committed\njvm.memory.limit\njvm.memory.used_after_last_gc\njvm.gc.duration\njvm.thread.count\njvm.class.loaded\njvm.class.unloaded\njvm.class.count\njvm.cpu.time\njvm.cpu.count\njvm.cpu.recent_utilization\n)\n\nmvn clean package -DskipTests\n\nfor ATTRIBUTE in ${ATTRIBUTES[*]}\ndo\n  echo \"===========  $ATTRIBUTE  ===========\"\n  java -jar target/quarkus-app/quarkus-run.jar | grep \"$ATTRIBUTE,\" &\n  for i in {1..500}; do curl -s http://localhost:8080/hello > /dev/null ; sleep 0.001; done\n  sleep 10\n  PID=`jps -l | grep target/quarkus-app/quarkus-run.jar | cut -d\" \" -f 1`\n  kill $PID\n  echo \"\"\ndone\n```\n\n### Output of `uname -a` or `ver`\n\nmacOS\n\n### Output of `java -version`\n\nJava 21\n\n### Quarkus version or git rev\n\nQuarkus main\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
    "issue_word_count": 453,
    "test_files_count": 7,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "docs/src/main/asciidoc/opentelemetry-metrics.adoc",
      "extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/metrics/BaseJvmMetricsTest.java",
      "extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/metrics/JvmMetricsTest.java",
      "extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/metrics/MpHttpServerMetricsTest.java",
      "extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/metrics/MpJvmMetricsTest.java",
      "extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/metrics/instrumentation/JvmMetricsService.java",
      "integration-tests/opentelemetry/pom.xml",
      "integration-tests/opentelemetry/src/test/java/io/quarkus/it/opentelemetry/MetricsIT.java",
      "integration-tests/opentelemetry/src/test/java/io/quarkus/it/opentelemetry/MetricsTest.java"
    ],
    "pr_changed_test_files": [
      "extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/metrics/BaseJvmMetricsTest.java",
      "extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/metrics/JvmMetricsTest.java",
      "extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/metrics/MpHttpServerMetricsTest.java",
      "extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/metrics/MpJvmMetricsTest.java",
      "integration-tests/opentelemetry/pom.xml",
      "integration-tests/opentelemetry/src/test/java/io/quarkus/it/opentelemetry/MetricsIT.java",
      "integration-tests/opentelemetry/src/test/java/io/quarkus/it/opentelemetry/MetricsTest.java"
    ],
    "base_commit": "709485f8bb204527a3d1a8cf52b1146f1addce03",
    "head_commit": "f6e64eda7db72674c25eceb2b72776f35de61cbc",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48328",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48328",
    "dockerfile": "",
    "pr_merged_at": "2025-06-16T13:29:32.000Z",
    "patch": "diff --git a/docs/src/main/asciidoc/opentelemetry-metrics.adoc b/docs/src/main/asciidoc/opentelemetry-metrics.adoc\nindex b189d782a8a63..b7fde3f9c5095 100644\n--- a/docs/src/main/asciidoc/opentelemetry-metrics.adoc\n+++ b/docs/src/main/asciidoc/opentelemetry-metrics.adoc\n@@ -536,6 +536,8 @@ See the main xref:opentelemetry.adoc#resource[OpenTelemetry Guide resources] sec\n \n == Automatic instrumentation\n \n+=== Microprofile 2.0\n+\n We provide automatic instrumentation for JVM metrics and HTTP server requests metrics according to the https://github.com/eclipse/microprofile-telemetry/blob/2.0/spec/src/main/asciidoc/metrics.adoc[Microprofile Metrics 2.0 specification].\n \n These metrics can be disabled by setting the following properties to `false`:\n@@ -546,12 +548,159 @@ quarkus.otel.instrument.jvm-metrics=false\n quarkus.otel.instrument.http-server-metrics=false\n ----\n \n+These are the metrics produced by the OpenTelemetry extension when metrics are enabled, as of June 12, 2025:\n+\n+|===\n+|Metric Name |Description |Type |Available on JVM? |Available on Native?|MP 2.0?\n+\n+|http.server.request.duration\n+|Duration of HTTP server requests\n+|HISTOGRAM\n+|Y\n+|Y\n+|Y\n+\n+|jvm.memory.committed\n+|Measure of memory committed\n+|LONG_SUM\n+|Y\n+|No data produced\n+|Y\n+\n+|jvm.memory.used\n+|Measure of memory used\n+|LONG_SUM\n+|Y\n+|No data produced\n+|Y\n+\n+|jvm.memory.limit\n+|Measure of max obtainable memory\n+|LONG_SUM\n+|Y\n+|Not present\n+|Y\n+\n+|jvm.memory.used_after_last_gc\n+|Measure of memory used, as measured after the most recent garbage collection event on this pool.\n+|LONG_SUM\n+|Y\n+|No data produced\n+|Y\n+\n+|jvm.gc.duration\n+|Duration of JVM garbage collection actions\n+|HISTOGRAM\n+|Y\n+|Not present\n+|Y\n+\n+|jvm.class.count\n+|Number of classes currently loaded.\n+|LONG_SUM\n+|Y\n+|No data produced\n+|Y\n+\n+|jvm.class.loaded\n+|Number of classes loaded since JVM start.\n+|LONG_SUM\n+|Y\n+|No data produced\n+|Y\n+\n+|jvm.class.unloaded\n+|Number of classes unloaded since JVM start.\n+|LONG_SUM\n+|Y\n+|No data produced\n+|Y\n+\n+|jvm.cpu.count\n+|Number of processors available to the Java virtual machine.\n+|LONG_SUM\n+|Y\n+|Y\n+|N\n+\n+|jvm.cpu.limit\n+|\n+|LONG_SUM\n+|Y\n+|No data produced\n+|N\n+\n+|jvm.cpu.time\n+|CPU time used by the process as reported by the JVM.\n+|DOUBLE_SUM\n+|Y\n+|Not present\n+|N\n+\n+|jvm.system.cpu.utilization\n+|CPU time used by the process as reported by the JVM.\n+|DOUBLE_SUM\n+|Not present\n+|No data produced\n+|N\n+\n+|jvm.cpu.recent_utilization\n+|Recent CPU utilization for the process as reported by the JVM.\n+|DOUBLE_GAUGE\n+|Y\n+|No data produced\n+|N\n+\n+|jvm.cpu.longlock\n+|Long lock times\n+|HISTOGRAM\n+|Y\n+|Y\n+|N\n+\n+|jvm.cpu.context_switch\n+|\n+|DOUBLE_SUM\n+|Y\n+|No data produced\n+|N\n+\n+// not on native\n+|jvm.network.io\n+|Network read/write bytes.\n+|HISTOGRAM\n+|Y\n+|Not present\n+|N\n+\n+|jvm.network.time\n+|Network read/write duration.\n+|HISTOGRAM\n+|Y\n+|Not present\n+|N\n+\n+|jvm.thread.count\n+|Number of executing platform threads.\n+|LONG_SUM\n+|Y\n+|Y\n+|Y\n+\n+|===\n+\n+\n+The native image assessment above was performed using GraalVM 23.0.2. Work will be done in the future to improve the metrics support on the native image builds.\n+\n [NOTE]\n ====\n-- It is recommended to disable these instrumentations if you are using the Micrometer extension as well.\n+- It is recommended to disable these instrumentations if you are using the `quarkus-micrometer` or the `quarkus-micrometer-opentelemetry` extensions as well.\n ====\n \n-We plan to bridge the existing Quarkus Micrometer extension metrics to OpenTelemetry in the future.\n+=== Micrometer to OpenTelemetry bridge\n+\n+The Micrometer to OpenTelemetry bridge unifies all telemetry in Quarkus. It generates Micrometer's metrics but sends\n+them along the OpenTelemetry telemetry output. For more details please visit the xref:telemetry-micrometer-to-opentelemetry.adoc[Micrometer and OpenTelemetry extension].\n \n == Exporters\n See the main xref:opentelemetry.adoc#exporters[OpenTelemetry Guide exporters] section.\n\ndiff --git a/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/metrics/instrumentation/JvmMetricsService.java b/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/metrics/instrumentation/JvmMetricsService.java\nindex 30750a4fe948b..78c053e1e71d6 100644\n--- a/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/metrics/instrumentation/JvmMetricsService.java\n+++ b/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/metrics/instrumentation/JvmMetricsService.java\n@@ -16,7 +16,9 @@\n \n import io.opentelemetry.api.OpenTelemetry;\n import io.opentelemetry.instrumentation.runtimemetrics.java17.RuntimeMetrics;\n+import io.opentelemetry.instrumentation.runtimemetrics.java17.RuntimeMetricsBuilder;\n import io.quarkus.opentelemetry.runtime.config.runtime.OTelRuntimeConfig;\n+import io.quarkus.runtime.ImageMode;\n import io.quarkus.runtime.Startup;\n \n @Startup\n@@ -32,19 +34,28 @@ public JvmMetricsService(final OpenTelemetry openTelemetry, final OTelRuntimeCon\n             return;\n         }\n \n-        // Will only produce mandatory metrics for MP Telemetry 2.0\n-        runtimeMetrics = RuntimeMetrics.builder(openTelemetry)\n-                .disableFeature(CONTEXT_SWITCH_METRICS)\n-                .disableFeature(CPU_COUNT_METRICS)\n-                .disableFeature(LOCK_METRICS)\n-                .disableFeature(MEMORY_ALLOCATION_METRICS)\n-                .disableFeature(NETWORK_IO_METRICS)\n-                .enableFeature(MEMORY_POOL_METRICS)\n-                .enableFeature(GC_DURATION_METRICS)\n-                .enableFeature(THREAD_METRICS)\n-                .enableFeature(CLASS_LOAD_METRICS)\n-                .enableFeature(CPU_UTILIZATION_METRICS)\n-                .build();\n+        RuntimeMetricsBuilder builder = RuntimeMetrics.builder(openTelemetry)\n+                .enableFeature(CONTEXT_SWITCH_METRICS)\n+                .enableFeature(CPU_COUNT_METRICS)\n+                .enableFeature(LOCK_METRICS)\n+                .enableFeature(NETWORK_IO_METRICS)\n+                .disableFeature(MEMORY_POOL_METRICS);\n+\n+        if (ImageMode.current().isNativeImage()) {\n+            builder.enableFeature(THREAD_METRICS);\n+            builder.enableFeature(CLASS_LOAD_METRICS);\n+            builder.enableFeature(GC_DURATION_METRICS);\n+            builder.enableFeature(CPU_UTILIZATION_METRICS);\n+            builder.enableFeature(MEMORY_ALLOCATION_METRICS);\n+        } else {\n+            builder.disableFeature(THREAD_METRICS);\n+            builder.disableFeature(CLASS_LOAD_METRICS);\n+            builder.disableFeature(GC_DURATION_METRICS);\n+            builder.disableFeature(CPU_UTILIZATION_METRICS);\n+            builder.disableFeature(MEMORY_ALLOCATION_METRICS);\n+        }\n+\n+        runtimeMetrics = builder.build();\n     }\n \n     @PreDestroy\n",
    "test_patch": "diff --git a/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/metrics/BaseJvmMetricsTest.java b/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/metrics/BaseJvmMetricsTest.java\nnew file mode 100644\nindex 0000000000000..5f245e33c1e17\n--- /dev/null\n+++ b/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/metrics/BaseJvmMetricsTest.java\n@@ -0,0 +1,93 @@\n+package io.quarkus.opentelemetry.deployment.metrics;\n+\n+import static io.opentelemetry.sdk.metrics.data.MetricDataType.*;\n+import static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import jakarta.inject.Inject;\n+\n+import io.opentelemetry.sdk.common.InstrumentationScopeInfo;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.data.MetricDataType;\n+import io.quarkus.opentelemetry.deployment.common.exporter.InMemoryMetricExporter;\n+\n+public abstract class BaseJvmMetricsTest {\n+\n+    @Inject\n+    protected InMemoryMetricExporter metricExporter;\n+\n+    void assertMetric(MetricToAssert metric) {\n+        assertMetric(metric.name(), metric.description(), metric.metricUnit(), metric.metricType());\n+    }\n+\n+    void assertMetric(final String metricName,\n+            final String metricDescription, final String metricUnit,\n+            final MetricDataType metricType) {\n+\n+        metricExporter.assertCountAtLeast(metricName, null, 1);\n+\n+        List<MetricData> finishedMetricItems = metricExporter.getFinishedMetricItems(metricName, null);\n+        Set<String> scopeNames = finishedMetricItems.stream()\n+                .map(MetricData::getInstrumentationScopeInfo)\n+                .map(InstrumentationScopeInfo::getName)\n+                .collect(Collectors.toSet());\n+\n+        MetricData foundMetric = finishedMetricItems.size() > 0 ? finishedMetricItems.get(finishedMetricItems.size() - 1)\n+                : null; //get last\n+\n+        assertThat(foundMetric).isNotNull();\n+        assertThat(foundMetric.getName()).isEqualTo(metricName);\n+        assertThat(foundMetric.getDescription())\n+                .withFailMessage(metricName + \" Expected: \" + metricDescription + \" found: \" + foundMetric.getDescription())\n+                .isEqualTo(metricDescription);\n+        assertThat(foundMetric.getType())\n+                .withFailMessage(metricName + \" Expected: \" + metricType + \" found: \" + foundMetric.getType())\n+                .isEqualTo(metricType);\n+        assertThat(foundMetric.getUnit())\n+                .withFailMessage(metricName + \" Expected: \" + metricUnit + \" found: \" + foundMetric.getUnit())\n+                .isEqualTo(metricUnit);\n+\n+        assertThat(scopeNames.size())\n+                .withFailMessage(metricName + \" found: \" + scopeNames)\n+                .isLessThanOrEqualTo(1);\n+\n+        if (foundMetric.getName().equals(\"jvm.cpu.limit\")) {\n+            return; // skip flaky metrics\n+        }\n+\n+        // only one of them will be present per test\n+        foundMetric.getDoubleSumData().getPoints().stream()\n+                .forEach(point -> {\n+                    assertThat(point.getValue())\n+                            .withFailMessage(metricName + \": Double\" + point.getValue() + \" was not an expected result\")\n+                            .isGreaterThan(0);\n+                });\n+\n+        foundMetric.getLongSumData().getPoints().stream()\n+                .forEach(point -> {\n+                    assertThat(point.getValue())\n+                            .withFailMessage(metricName + \": Long\" + point.getValue() + \" was not an expected result\")\n+                            .isGreaterThanOrEqualTo(0);\n+                });\n+\n+        foundMetric.getDoubleGaugeData().getPoints().stream()\n+                .forEach(point -> {\n+                    assertThat(point.getValue())\n+                            .withFailMessage(metricName + \": Double\" + point.getValue() + \" was not an expected result\")\n+                            .isGreaterThanOrEqualTo(0);\n+                });\n+\n+        foundMetric.getHistogramData().getPoints().stream()\n+                .forEach(point -> {\n+                    assertThat(point.hasMin()).isTrue();\n+                    assertThat(point.hasMax()).isTrue();\n+                    assertThat(point.getCounts().size()).isGreaterThan(0);\n+                });\n+    }\n+\n+    record MetricToAssert(String name, String description, String metricUnit, MetricDataType metricType) {\n+    }\n+}\n\ndiff --git a/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/metrics/JvmMetricsTest.java b/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/metrics/JvmMetricsTest.java\nnew file mode 100644\nindex 0000000000000..3f73892483f82\n--- /dev/null\n+++ b/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/metrics/JvmMetricsTest.java\n@@ -0,0 +1,124 @@\n+package io.quarkus.opentelemetry.deployment.metrics;\n+\n+import static io.opentelemetry.sdk.metrics.data.MetricDataType.*;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.core.Response;\n+\n+import org.awaitility.Awaitility;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.quarkus.opentelemetry.deployment.common.exporter.InMemoryMetricExporter;\n+import io.quarkus.opentelemetry.deployment.common.exporter.InMemoryMetricExporterProvider;\n+import io.quarkus.test.QuarkusUnitTest;\n+import io.restassured.RestAssured;\n+\n+/**\n+ * Validate all JVM metrics being produced.\n+ */\n+public class JvmMetricsTest extends BaseJvmMetricsTest {\n+    @RegisterExtension\n+    static final QuarkusUnitTest TEST = new QuarkusUnitTest()\n+            .setArchiveProducer(\n+                    () -> ShrinkWrap.create(JavaArchive.class)\n+                            .addClasses(InMemoryMetricExporter.class, InMemoryMetricExporterProvider.class)\n+                            .addAsResource(new StringAsset(InMemoryMetricExporterProvider.class.getCanonicalName()),\n+                                    \"META-INF/services/io.opentelemetry.sdk.autoconfigure.spi.metrics.ConfigurableMetricExporterProvider\")\n+                            .add(new StringAsset(\n+                                    \"quarkus.otel.metrics.enabled=true\\n\" +\n+                                            \"quarkus.otel.traces.exporter=none\\n\" +\n+                                            \"quarkus.otel.logs.exporter=none\\n\" +\n+                                            \"quarkus.otel.metrics.exporter=in-memory\\n\" +\n+                                            \"quarkus.otel.metric.export.interval=300ms\\n\"),\n+                                    \"application.properties\"));\n+\n+    @Test\n+    void allMetrics() throws InterruptedException {\n+        Set<MetricToAssert> allMetrics = Set.of(\n+                new JvmMetricsTest.MetricToAssert(\"http.server.request.duration\", \"Duration of HTTP server requests.\", \"s\",\n+                        HISTOGRAM), // just because we generate load with HTTP\n+                new JvmMetricsTest.MetricToAssert(\"jvm.memory.committed\", \"Measure of memory committed.\", \"By\", LONG_SUM),\n+                new JvmMetricsTest.MetricToAssert(\"jvm.memory.used\", \"Measure of memory used.\", \"By\", LONG_SUM),\n+                new JvmMetricsTest.MetricToAssert(\"jvm.memory.limit\", \"Measure of max obtainable memory.\", \"By\", LONG_SUM),\n+                new JvmMetricsTest.MetricToAssert(\"jvm.memory.used_after_last_gc\",\n+                        \"Measure of memory used, as measured after the most recent garbage collection event on this pool.\",\n+                        \"By\", LONG_SUM),\n+                new JvmMetricsTest.MetricToAssert(\"jvm.gc.duration\", \"Duration of JVM garbage collection actions.\", \"s\",\n+                        HISTOGRAM),\n+                new JvmMetricsTest.MetricToAssert(\"jvm.class.count\", \"Number of classes currently loaded.\", \"{class}\",\n+                        LONG_SUM),\n+                new JvmMetricsTest.MetricToAssert(\"jvm.class.loaded\", \"Number of classes loaded since JVM start.\", \"{class}\",\n+                        LONG_SUM),\n+                new JvmMetricsTest.MetricToAssert(\"jvm.class.unloaded\", \"Number of classes unloaded since JVM start.\",\n+                        \"{class}\", LONG_SUM),\n+                new JvmMetricsTest.MetricToAssert(\"jvm.cpu.count\",\n+                        \"Number of processors available to the Java virtual machine.\", \"{cpu}\", LONG_SUM),\n+                new JvmMetricsTest.MetricToAssert(\"jvm.cpu.limit\", \"\", \"1\", LONG_SUM),\n+                new JvmMetricsTest.MetricToAssert(\"jvm.cpu.time\", \"CPU time used by the process as reported by the JVM.\", \"s\",\n+                        DOUBLE_SUM),\n+                new JvmMetricsTest.MetricToAssert(\"jvm.cpu.recent_utilization\",\n+                        \"Recent CPU utilization for the process as reported by the JVM.\", \"1\", DOUBLE_GAUGE),\n+                new JvmMetricsTest.MetricToAssert(\"jvm.cpu.longlock\", \"Long lock times\", \"s\", HISTOGRAM),\n+                new JvmMetricsTest.MetricToAssert(\"jvm.cpu.context_switch\", \"\", \"Hz\", DOUBLE_SUM),\n+                new JvmMetricsTest.MetricToAssert(\"jvm.network.io\", \"Network read/write bytes.\", \"By\", HISTOGRAM), //\n+                new JvmMetricsTest.MetricToAssert(\"jvm.network.time\", \"Network read/write duration.\", \"s\", HISTOGRAM), //\n+                new JvmMetricsTest.MetricToAssert(\"jvm.thread.count\", \"Number of executing platform threads.\", \"{thread}\",\n+                        LONG_SUM));\n+\n+        // Force GC to run\n+        System.gc();\n+\n+        // only to get some load\n+        RestAssured.when()\n+                .get(\"/span\").then()\n+                .statusCode(200)\n+                .body(is(\"hello\"));\n+\n+        Awaitility.await().atMost(10, SECONDS)\n+                .untilAsserted(() -> assertEquals(allMetrics.size(),\n+                        metricExporter.getFinishedMetricItems().stream()\n+                                .map(MetricData::getName)\n+                                .collect(Collectors.toSet())\n+                                .size(),\n+                        \"Found: \" + metricExporter.getFinishedMetricItems().stream()\n+                                .map(MetricData::getName)\n+                                .collect(Collectors.toSet())));\n+\n+        List<MetricData> finishedMetricItems = metricExporter.getFinishedMetricItems();\n+\n+        Set<String> foundMetricNames = finishedMetricItems.stream()\n+                .map(MetricData::getName)\n+                .collect(Collectors.toSet());\n+\n+        assertThat(foundMetricNames).isEqualTo(allMetrics.stream()\n+                .map(MetricToAssert::name)\n+                .collect(Collectors.toSet()));\n+\n+        allMetrics.forEach(metric -> {\n+            assertMetric(metric);\n+        });\n+    }\n+\n+    @Path(\"/\")\n+    public static class SpanResource {\n+        @GET\n+        @Path(\"/span\")\n+        public Response span() {\n+            return Response.ok(\"hello\").build();\n+        }\n+    }\n+}\n\ndiff --git a/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/metrics/HttpServerMetricsTest.java b/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/metrics/MpHttpServerMetricsTest.java\nsimilarity index 99%\nrename from extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/metrics/HttpServerMetricsTest.java\nrename to extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/metrics/MpHttpServerMetricsTest.java\nindex dd2839e33024f..e23d277cfbed6 100644\n--- a/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/metrics/HttpServerMetricsTest.java\n+++ b/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/metrics/MpHttpServerMetricsTest.java\n@@ -30,7 +30,7 @@\n import io.quarkus.test.common.http.TestHTTPResource;\n import io.restassured.RestAssured;\n \n-public class HttpServerMetricsTest {\n+public class MpHttpServerMetricsTest {\n \n     @RegisterExtension\n     static final QuarkusUnitTest TEST = new QuarkusUnitTest()\n\ndiff --git a/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/metrics/JvmMetricsServiceTest.java b/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/metrics/MpJvmMetricsTest.java\nsimilarity index 67%\nrename from extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/metrics/JvmMetricsServiceTest.java\nrename to extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/metrics/MpJvmMetricsTest.java\nindex ff4429f62097c..7e4392e5dca7f 100644\n--- a/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/metrics/JvmMetricsServiceTest.java\n+++ b/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/metrics/MpJvmMetricsTest.java\n@@ -1,11 +1,7 @@\n package io.quarkus.opentelemetry.deployment.metrics;\n \n-import static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n-\n import java.io.IOException;\n \n-import jakarta.inject.Inject;\n-\n import org.jboss.shrinkwrap.api.ShrinkWrap;\n import org.jboss.shrinkwrap.api.asset.StringAsset;\n import org.jboss.shrinkwrap.api.spec.JavaArchive;\n@@ -13,13 +9,15 @@\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.RegisterExtension;\n \n-import io.opentelemetry.sdk.metrics.data.MetricData;\n import io.opentelemetry.sdk.metrics.data.MetricDataType;\n import io.quarkus.opentelemetry.deployment.common.exporter.InMemoryMetricExporter;\n import io.quarkus.opentelemetry.deployment.common.exporter.InMemoryMetricExporterProvider;\n import io.quarkus.test.QuarkusUnitTest;\n \n-public class JvmMetricsServiceTest {\n+/**\n+ * Mandatory Microprofile 2.0 JVM metrics\n+ */\n+public class MpJvmMetricsTest extends BaseJvmMetricsTest {\n     @RegisterExtension\n     static final QuarkusUnitTest TEST = new QuarkusUnitTest()\n             .setArchiveProducer(\n@@ -35,9 +33,6 @@ public class JvmMetricsServiceTest {\n                                             \"quarkus.otel.metric.export.interval=300ms\\n\"),\n                                     \"application.properties\"));\n \n-    @Inject\n-    protected InMemoryMetricExporter metricExporter;\n-\n     // No need to reset between tests. Data is test independent. Will also run faster.\n \n     @Test\n@@ -117,47 +112,4 @@ void testThreadCountMetric() throws IOException {\n         assertMetric(\"jvm.thread.count\", \"Number of executing platform threads.\", \"{thread}\",\n                 MetricDataType.LONG_SUM);\n     }\n-\n-    private void assertMetric(final String metricName,\n-            final String metricDescription, final String metricUnit,\n-            final MetricDataType metricType) {\n-\n-        metricExporter.assertCountAtLeast(metricName, null, 1);\n-        MetricData metric = metricExporter.getFinishedMetricItems(metricName, null).get(0);\n-\n-        assertThat(metric).isNotNull();\n-        assertThat(metric.getName()).isEqualTo(metricName);\n-        assertThat(metric.getDescription()).isEqualTo(metricDescription);\n-        assertThat(metric.getType()).isEqualTo(metricType);\n-        assertThat(metric.getUnit()).isEqualTo(metricUnit);\n-\n-        // only one of them will be present per test\n-        metric.getDoubleSumData().getPoints().stream()\n-                .forEach(point -> {\n-                    assertThat(point.getValue())\n-                            .withFailMessage(\"Double\" + point.getValue() + \" was not an expected result\")\n-                            .isGreaterThan(0);\n-                });\n-\n-        metric.getLongSumData().getPoints().stream()\n-                .forEach(point -> {\n-                    assertThat(point.getValue())\n-                            .withFailMessage(\"Long\" + point.getValue() + \" was not an expected result\")\n-                            .isGreaterThanOrEqualTo(0);\n-                });\n-\n-        metric.getDoubleGaugeData().getPoints().stream()\n-                .forEach(point -> {\n-                    assertThat(point.getValue())\n-                            .withFailMessage(\"Double\" + point.getValue() + \" was not an expected result\")\n-                            .isGreaterThanOrEqualTo(0);\n-                });\n-\n-        metric.getHistogramData().getPoints().stream()\n-                .forEach(point -> {\n-                    assertThat(point.hasMin()).isTrue();\n-                    assertThat(point.hasMax()).isTrue();\n-                    assertThat(point.getCounts().size()).isGreaterThan(0);\n-                });\n-    }\n }\n\ndiff --git a/integration-tests/opentelemetry/pom.xml b/integration-tests/opentelemetry/pom.xml\nindex d3ac1983b7125..b98f31d9c6cb7 100644\n--- a/integration-tests/opentelemetry/pom.xml\n+++ b/integration-tests/opentelemetry/pom.xml\n@@ -69,6 +69,11 @@\n             <artifactId>awaitility</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.assertj</groupId>\n+            <artifactId>assertj-core</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n \n         <!-- Minimal test dependencies to *-deployment artifacts for consistent build order -->\n         <dependency>\n\ndiff --git a/integration-tests/opentelemetry/src/test/java/io/quarkus/it/opentelemetry/MetricsIT.java b/integration-tests/opentelemetry/src/test/java/io/quarkus/it/opentelemetry/MetricsIT.java\nindex ab89e166dd7ef..51ddec71658c4 100644\n--- a/integration-tests/opentelemetry/src/test/java/io/quarkus/it/opentelemetry/MetricsIT.java\n+++ b/integration-tests/opentelemetry/src/test/java/io/quarkus/it/opentelemetry/MetricsIT.java\n@@ -1,7 +1,59 @@\n package io.quarkus.it.opentelemetry;\n \n+import static io.opentelemetry.sdk.metrics.data.MetricDataType.*;\n+import static io.opentelemetry.sdk.metrics.data.MetricDataType.LONG_SUM;\n+\n+import java.util.Set;\n+\n import io.quarkus.test.junit.QuarkusIntegrationTest;\n \n @QuarkusIntegrationTest\n public class MetricsIT extends MetricsTest {\n+\n+    @Override\n+    protected Set<MetricToAssert> getJvmMetricsToAssert() {\n+        return Set.of(\n+                // Leaving this commented out to help with future improvements.\n+\n+                // 0 on native\n+                //                new MetricToAssert(\"jvm.memory.committed\", \"Measure of memory committed.\", \"By\", LONG_SUM),\n+                // 0 on native\n+                //                new MetricToAssert(\"jvm.memory.used\", \"Measure of memory used.\", \"By\", LONG_SUM),\n+                // Not on native\n+                //new MetricToAssert(\"jvm.memory.limit\", \"Measure of max obtainable memory.\", \"By\", LONG_SUM),\n+                // 0 on native\n+                //                new MetricToAssert(\"jvm.memory.used_after_last_gc\",\n+                //                        \"Measure of memory used, as measured after the most recent garbage collection event on this pool.\",\n+                //                        \"By\", LONG_SUM),\n+                // not on native\n+                //                new MetricToAssert(\"jvm.gc.duration\", \"Duration of JVM garbage collection actions.\", \"s\",\n+                //                        HISTOGRAM),\n+                // 0 on native\n+                //                new MetricToAssert(\"jvm.class.count\", \"Number of classes currently loaded.\", \"{class}\",\n+                //                        LONG_SUM),\n+                // 0 on native\n+                //                new MetricToAssert(\"jvm.class.loaded\", \"Number of classes loaded since JVM start.\", \"{class}\",\n+                //                        LONG_SUM),\n+                // 0 on native\n+                //                new MetricToAssert(\"jvm.class.unloaded\", \"Number of classes unloaded since JVM start.\",\n+                //                        \"{class}\", LONG_SUM),\n+                new MetricToAssert(\"jvm.cpu.count\",\n+                        \"Number of processors available to the Java virtual machine.\", \"{cpu}\", LONG_SUM),\n+                // 0 on native\n+                //                new MetricToAssert(\"jvm.cpu.limit\", \"\", \"1\", LONG_SUM),\n+                //jvm.system.cpu.utilization instead of jvm.cpu.time\n+                new MetricToAssert(\"jvm.system.cpu.utilization\", \"CPU time used by the process as reported by the JVM.\", \"s\",\n+                        DOUBLE_SUM),\n+                // 0 on native\n+                //                new MetricToAssert(\"jvm.cpu.recent_utilization\",\n+                //                        \"Recent CPU utilization for the process as reported by the JVM.\", \"1\", DOUBLE_GAUGE),\n+                new MetricToAssert(\"jvm.cpu.longlock\", \"Long lock times\", \"s\", HISTOGRAM),\n+                // 0 on native\n+                //                new MetricToAssert(\"jvm.cpu.context_switch\", \"\", \"Hz\", DOUBLE_SUM),\n+                // not on native\n+                //                new MetricToAssert(\"jvm.network.io\", \"Network read/write bytes.\", \"By\", HISTOGRAM), //\n+                //                new MetricToAssert(\"jvm.network.time\", \"Network read/write duration.\", \"s\", HISTOGRAM), //\n+                new MetricToAssert(\"jvm.thread.count\", \"Number of executing platform threads.\", \"{thread}\",\n+                        LONG_SUM));\n+    }\n }\n\ndiff --git a/integration-tests/opentelemetry/src/test/java/io/quarkus/it/opentelemetry/MetricsTest.java b/integration-tests/opentelemetry/src/test/java/io/quarkus/it/opentelemetry/MetricsTest.java\nindex c5533bf193313..6fd367e6353ec 100644\n--- a/integration-tests/opentelemetry/src/test/java/io/quarkus/it/opentelemetry/MetricsTest.java\n+++ b/integration-tests/opentelemetry/src/test/java/io/quarkus/it/opentelemetry/MetricsTest.java\n@@ -1,22 +1,24 @@\n package io.quarkus.it.opentelemetry;\n \n+import static io.opentelemetry.sdk.metrics.data.MetricDataType.*;\n import static io.restassured.RestAssured.get;\n import static io.restassured.RestAssured.given;\n import static java.net.HttpURLConnection.HTTP_OK;\n import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n import static org.awaitility.Awaitility.await;\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.greaterThan;\n-import static org.hamcrest.Matchers.greaterThanOrEqualTo;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n+import io.opentelemetry.sdk.metrics.data.MetricDataType;\n import io.quarkus.test.junit.QuarkusTest;\n import io.restassured.common.mapper.TypeRef;\n \n@@ -81,19 +83,95 @@ public void directCounterTest() {\n     }\n \n     @Test\n-    void testJvmMetrics() {\n-        await().atMost(10, SECONDS).until(() -> getMetrics(\"jvm.thread.count\").size() > 2);\n+    void testAllJvmMetrics() {\n+        // Force GC to run\n+        System.gc();\n \n-        List<Map<String, Object>> metrics = getMetrics(\"jvm.thread.count\");\n+        // generate load\n+        given()\n+                .when()\n+                .get(\"/nopath\")\n+                .then()\n+                .statusCode(200);\n \n-        Integer value = (Integer) ((Map) ((List) ((Map) (getMetrics(\"jvm.thread.count\")\n-                .get(metrics.size() - 1)\n-                .get(\"longSumData\")))\n-                .get(\"points\"))\n-                .get(0))\n-                .get(\"value\");\n+        Set<MetricToAssert> allMetrics = getJvmMetricsToAssert();\n+\n+        await().atMost(10, SECONDS).untilAsserted(() -> {\n+            Set<String> allMetricNames = getAllMetricNames(\"jvm.\");\n+            assertThat(allMetricNames.size())\n+                    .withFailMessage(\"The jvm metrics are \" + allMetricNames)\n+                    .isGreaterThanOrEqualTo(allMetrics.size());\n+        });\n+\n+        //        System.out.println(getAllMetricNames(\"jvm.\"));\n+\n+        allMetrics.forEach(metricToAssert -> {\n+\n+            await().atMost(10, SECONDS)\n+                    .untilAsserted(() -> assertThat(getMetrics(metricToAssert.name()).size())\n+                            .withFailMessage(\"The metric \" + metricToAssert.name())\n+                            .isGreaterThan(0));\n+\n+            List<Map<String, Object>> metrics = getMetrics(metricToAssert.name());\n \n-        assertThat(value, greaterThan(0)); // at least one thread is running\n+            assertThat(metrics.size())\n+                    .withFailMessage(metricToAssert.name() + \" not found\")\n+                    .isGreaterThan(0);\n+\n+            Map<String, Object> lastMetric = metrics.size() > 0 ? metrics.get(metrics.size() - 1) : null;\n+\n+            Double value = ((Number) ((Map) ((List) ((Map) (lastMetric.get(\"data\")))\n+                    .get(\"points\"))\n+                    .get(0))\n+                    .get(metricToAssert.metricType().equals(HISTOGRAM) ? \"sum\" : \"value\"))\n+                    .doubleValue();\n+\n+            if (!metricToAssert.name().equals(\"jvm.memory.used_after_last_gc\") &&\n+                    !metricToAssert.name().equals(\"jvm.cpu.limit\") &&\n+                    !metricToAssert.name().equals(\"jvm.cpu.recent_utilization\") && // skip value assertions on flaky metrics\n+                    !metricToAssert.name().equals(\"jvm.system.cpu.utilization\")) {\n+                assertThat(value)\n+                        .withFailMessage(\"Metric should be greater than 0: \" + metricToAssert.name + \" value: \" + value)\n+                        .isGreaterThan(0d);\n+            }\n+        });\n+    }\n+\n+    protected Set<MetricToAssert> getJvmMetricsToAssert() {\n+        return Set.of(\n+                //                new MetricToAssert(\"http.server.request.duration\", \"Duration of HTTP server requests.\", \"s\",\n+                //                        HISTOGRAM), // just because we generate load with HTTP\n+                new MetricToAssert(\"jvm.memory.committed\", \"Measure of memory committed.\", \"By\", LONG_SUM),\n+                new MetricToAssert(\"jvm.memory.used\", \"Measure of memory used.\", \"By\", LONG_SUM),\n+                // Not on native\n+                new MetricToAssert(\"jvm.memory.limit\", \"Measure of max obtainable memory.\", \"By\", LONG_SUM),\n+                new MetricToAssert(\"jvm.memory.used_after_last_gc\",\n+                        \"Measure of memory used, as measured after the most recent garbage collection event on this pool.\",\n+                        \"By\", LONG_SUM),\n+                // not on native\n+                new MetricToAssert(\"jvm.gc.duration\", \"Duration of JVM garbage collection actions.\", \"s\",\n+                        HISTOGRAM),\n+                new MetricToAssert(\"jvm.class.count\", \"Number of classes currently loaded.\", \"{class}\",\n+                        LONG_SUM),\n+                new MetricToAssert(\"jvm.class.loaded\", \"Number of classes loaded since JVM start.\", \"{class}\",\n+                        LONG_SUM),\n+                new MetricToAssert(\"jvm.class.unloaded\", \"Number of classes unloaded since JVM start.\",\n+                        \"{class}\", LONG_SUM),\n+                new MetricToAssert(\"jvm.cpu.count\",\n+                        \"Number of processors available to the Java virtual machine.\", \"{cpu}\", LONG_SUM),\n+                new MetricToAssert(\"jvm.cpu.limit\", \"\", \"1\", LONG_SUM),\n+                //jvm.system.cpu.utilization instead, on native\n+                new MetricToAssert(\"jvm.cpu.time\", \"CPU time used by the process as reported by the JVM.\", \"s\",\n+                        DOUBLE_SUM),\n+                new MetricToAssert(\"jvm.cpu.recent_utilization\",\n+                        \"Recent CPU utilization for the process as reported by the JVM.\", \"1\", DOUBLE_GAUGE),\n+                new MetricToAssert(\"jvm.cpu.longlock\", \"Long lock times\", \"s\", HISTOGRAM),\n+                new MetricToAssert(\"jvm.cpu.context_switch\", \"\", \"Hz\", DOUBLE_SUM),\n+                // not on native\n+                new MetricToAssert(\"jvm.network.io\", \"Network read/write bytes.\", \"By\", HISTOGRAM),\n+                new MetricToAssert(\"jvm.network.time\", \"Network read/write duration.\", \"s\", HISTOGRAM),\n+                new MetricToAssert(\"jvm.thread.count\", \"Number of executing platform threads.\", \"{thread}\",\n+                        LONG_SUM));\n     }\n \n     @Test\n@@ -115,6 +193,22 @@ void testServerRequestDuration() {\n                 .get(0))\n                 .get(\"count\");\n \n-        assertThat(value, greaterThanOrEqualTo(1)); // at least one endpoint was called once\n+        assertThat(value).isGreaterThanOrEqualTo(1); // at least one endpoint was called once\n+    }\n+\n+    private static Set<String> getAllMetricNames(String prefix) {\n+        List<Map<String, Object>> foundMetrics = given()\n+                .when()\n+                .get(\"/export/metrics\")\n+                .body().as(new TypeRef<>() {\n+                });\n+\n+        return foundMetrics.stream()\n+                .filter(m -> ((String) m.get(\"name\")).startsWith(prefix))\n+                .map(m -> ((String) m.get(\"name\")))\n+                .collect(Collectors.toSet());\n+    }\n+\n+    record MetricToAssert(String name, String description, String metricUnit, MetricDataType metricType) {\n     }\n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48298",
    "pr_id": 48298,
    "issue_id": 48295,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Unable to run QuarkusIntegrationTests in Eclipse since Quarkus 3.22\nRelated to #47656 and #48014, but for `QuarkusIntegrationTest`. Sadly, the #47656 workarounds don't work, and something else is going on.",
    "issue_word_count": 31,
    "test_files_count": 1,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/CustomLauncherInterceptor.java"
    ],
    "pr_changed_test_files": [
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/CustomLauncherInterceptor.java"
    ],
    "base_commit": "12a9f02f72b4567eee57e017b42a6a8df6280743",
    "head_commit": "514a5f9866efc15236b2f95d639511d3ece5f886",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48298",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48298",
    "dockerfile": "",
    "pr_merged_at": "2025-06-11T10:12:18.000Z",
    "patch": "",
    "test_patch": "diff --git a/test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/CustomLauncherInterceptor.java b/test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/CustomLauncherInterceptor.java\nindex 92933239004e4..fd7c4249bf458 100644\n--- a/test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/CustomLauncherInterceptor.java\n+++ b/test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/CustomLauncherInterceptor.java\n@@ -12,6 +12,7 @@ public class CustomLauncherInterceptor implements LauncherDiscoveryListener, Lau\n     private static FacadeClassLoader facadeLoader = null;\n     // Also use a static variable to store a 'first' starting state that we can reset to\n     private static ClassLoader origCl = null;\n+    private static boolean discoveryStarted = false;\n \n     public CustomLauncherInterceptor() {\n     }\n@@ -25,10 +26,18 @@ private static boolean isProductionModeTests() {\n     public void launcherSessionOpened(LauncherSession session) {\n         /*\n          * For gradle, test class loading happens fairly shortly after this is called,\n-         * before the formal discovery phase. So we need to intercept the TCCL\n-         * Do not do any classloading dance for prod mode tests;\n+         * before the formal discovery phase. So we need to intercept the TCCL.\n+         *\n+         * However, the Eclipse runner calls this twice, and the second invocation happens after discovery,\n+         * which means there is no one to unset the TCCL. That breaks integration tests, so we\n+         * need to add an ugly guard to not adjust the TCCL the second time round in that scenario.\n+         * We do not do any classloading dance for prod mode tests.\n          */\n-        if (!isProductionModeTests()) {\n+        boolean isEclipse = System.getProperty(\"sun.java.command\") != null\n+                && System.getProperty(\"sun.java.command\").contains(\"JUnit5TestLoader\");\n+        boolean shouldSkipSettingTCCL = isEclipse && discoveryStarted;\n+\n+        if (!isProductionModeTests() && !shouldSkipSettingTCCL) {\n             actuallyIntercept();\n         }\n \n@@ -67,6 +76,7 @@ private void initializeFacadeClassLoader() {\n \n     @Override\n     public void launcherDiscoveryStarted(LauncherDiscoveryRequest request) {\n+        discoveryStarted = true;\n         // If anything comes through this method for which there are non-null classloaders on the selectors, that will bypass our classloading\n         // To check that case, the code would be something like this. We could detect and warn early, and possibly even filter that test out, but that's not necessarily a better UX than failing later\n         // request.getSelectorsByType(ClassSelector.class).stream().map(ClassSelector::getClassLoader) ... and then check for non-emptiness on that field\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48296",
    "pr_id": 48296,
    "issue_id": 46673,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Add optional refresh token timer to OIDC client\n### Description\n\nBased on #46644.\n\nRight now, when the token expires, OIDC client needs to refresh it, with the current request having to wait.\nIn general, I believe it is not a real performance concern because it can happen once every access token lifespan period of time which is usually quite long. But if it were possible for the OIDC client never pause, with the timer refreshing expired tokens asynchronously, then it could be useful in some performance critical applications. \n\nWe already have something similar with @michalvavrik adding a timed Kubernetes JWT bearer token check.\n\n### Implementation ideas\n\nAdd an optional property such as `quarkus.oidc-client.refresh-interval`, it is configured, a Vertx timer is started, may be in [AbstractTokensProducer](https://github.com/quarkusio/quarkus/blob/main/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/AbstractTokensProducer.java) and it will periodically call `getTokens` and subscribe to Uni. May be, rather than having a timer per client, `OidcClientsImpl` would have a single timer iterating over all registered clients.",
    "issue_word_count": 178,
    "test_files_count": 6,
    "non_test_files_count": 9,
    "pr_changed_files": [
      "docs/src/main/asciidoc/security-openid-connect-client-reference.adoc",
      "extensions/oidc-client/deployment/src/main/java/io/quarkus/oidc/client/deployment/OidcClientBuildStep.java",
      "extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/OidcClientConfig.java",
      "extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/OidcClientConfigBuilder.java",
      "extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/AbstractTokensProducer.java",
      "extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/OidcClientConfig.java",
      "extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/OidcClientImpl.java",
      "extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/OidcClientRecorder.java",
      "extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/OidcClientsImpl.java",
      "extensions/oidc-client/runtime/src/test/java/io/quarkus/oidc/client/OidcClientConfigImpl.java",
      "integration-tests/oidc-client-wiremock/src/main/java/io/quarkus/it/keycloak/FrontendResource.java",
      "integration-tests/oidc-client-wiremock/src/main/java/io/quarkus/it/keycloak/ProtectedResourceServiceRefreshIntervalTestClient.java",
      "integration-tests/oidc-client-wiremock/src/main/resources/application.properties",
      "integration-tests/oidc-client-wiremock/src/test/java/io/quarkus/it/keycloak/KeycloakRealmResourceManager.java",
      "integration-tests/oidc-client-wiremock/src/test/java/io/quarkus/it/keycloak/OidcClientTest.java"
    ],
    "pr_changed_test_files": [
      "extensions/oidc-client/runtime/src/test/java/io/quarkus/oidc/client/OidcClientConfigImpl.java",
      "integration-tests/oidc-client-wiremock/src/main/java/io/quarkus/it/keycloak/FrontendResource.java",
      "integration-tests/oidc-client-wiremock/src/main/java/io/quarkus/it/keycloak/ProtectedResourceServiceRefreshIntervalTestClient.java",
      "integration-tests/oidc-client-wiremock/src/main/resources/application.properties",
      "integration-tests/oidc-client-wiremock/src/test/java/io/quarkus/it/keycloak/KeycloakRealmResourceManager.java",
      "integration-tests/oidc-client-wiremock/src/test/java/io/quarkus/it/keycloak/OidcClientTest.java"
    ],
    "base_commit": "a0659dba3ff3df590088262f42329efa0b4b30e9",
    "head_commit": "5f873441d49c53c0c424b56bec7b930e48403960",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48296",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48296",
    "dockerfile": "",
    "pr_merged_at": "2025-06-11T21:21:45.000Z",
    "patch": "diff --git a/docs/src/main/asciidoc/security-openid-connect-client-reference.adoc b/docs/src/main/asciidoc/security-openid-connect-client-reference.adoc\nindex 5c89d02870989..c2acf93583e45 100644\n--- a/docs/src/main/asciidoc/security-openid-connect-client-reference.adoc\n+++ b/docs/src/main/asciidoc/security-openid-connect-client-reference.adoc\n@@ -713,6 +713,16 @@ You can also inject named `Tokens`, see <<named-oidc-clients,Inject named OidcCl\n `OidcClientRequestReactiveFilter`, `OidcClientRequestFilter` and `Tokens` producers will refresh the current expired access token if the refresh token is available.\n Additionally, the `quarkus.oidc-client.refresh-token-time-skew` property can be used for a preemptive access token refreshment to avoid sending nearly expired access tokens that might cause HTTP 401 errors. For example, if this property is set to `3S` and the access token will expire in less than 3 seconds, then this token will be auto-refreshed.\n \n+\n+By default, OIDC client refreshes the token during the current request, when it detects that it has expired, or nearly expired if the [refresh token time skew](https://quarkus.io/guides/security-openid-connect-client-reference#quarkus-oidc-client_quarkus-oidc-client-refresh-token-time-skew) is configured.\n+Performance critical applications may want to avoid having to wait for a possible token refresh during the incoming requests and configure an asynchronous token refresh instead, for example:\n+\n+[source,properties]\n+----\n+quarkus.oidc-client.refresh-interval=1m <1>\n+----\n+<1> Check every minute if the current access token is expired and must be refreshed.\n+\n If the access token needs to be refreshed, but no refresh token is available, then an attempt is made to acquire a new token by using a configured grant, such as `client_credentials`.\n \n Some OpenID Connect Providers will not return a refresh token in a `client_credentials` grant response. For example, starting from Keycloak 12, a refresh token will not be returned by default for `client_credentials`. The providers might also restrict the number of times a refresh token can be used.\n\ndiff --git a/extensions/oidc-client/deployment/src/main/java/io/quarkus/oidc/client/deployment/OidcClientBuildStep.java b/extensions/oidc-client/deployment/src/main/java/io/quarkus/oidc/client/deployment/OidcClientBuildStep.java\nindex c3aadf746b7c2..c37df50293995 100644\n--- a/extensions/oidc-client/deployment/src/main/java/io/quarkus/oidc/client/deployment/OidcClientBuildStep.java\n+++ b/extensions/oidc-client/deployment/src/main/java/io/quarkus/oidc/client/deployment/OidcClientBuildStep.java\n@@ -12,6 +12,7 @@\n import jakarta.enterprise.context.RequestScoped;\n import jakarta.inject.Singleton;\n \n+import org.jboss.jandex.ClassType;\n import org.jboss.jandex.DotName;\n \n import io.quarkus.arc.BeanDestroyer;\n@@ -46,12 +47,10 @@\n import io.quarkus.oidc.client.runtime.OidcClientBuildTimeConfig;\n import io.quarkus.oidc.client.runtime.OidcClientDefaultIdConfigBuilder;\n import io.quarkus.oidc.client.runtime.OidcClientRecorder;\n-import io.quarkus.oidc.client.runtime.OidcClientsConfig;\n+import io.quarkus.oidc.client.runtime.OidcClientsImpl;\n import io.quarkus.oidc.client.runtime.TokenProviderProducer;\n import io.quarkus.oidc.client.runtime.TokensHelper;\n import io.quarkus.oidc.client.runtime.TokensProducer;\n-import io.quarkus.tls.deployment.spi.TlsRegistryBuildItem;\n-import io.quarkus.vertx.core.deployment.CoreVertxBuildItem;\n \n @BuildSteps(onlyIf = OidcClientBuildStep.IsEnabled.class)\n public class OidcClientBuildStep {\n@@ -98,46 +97,25 @@ void initOidcClients(OidcClientRecorder recorder) {\n         recorder.initOidcClients();\n     }\n \n-    @Record(ExecutionTime.RUNTIME_INIT)\n     @BuildStep\n-    public void setup(\n-            OidcClientsConfig oidcConfig,\n-            OidcClientRecorder recorder,\n-            CoreVertxBuildItem vertxBuildItem,\n-            OidcClientNamesBuildItem oidcClientNames,\n-            TlsRegistryBuildItem tlsRegistry,\n-            BuildProducer<SyntheticBeanBuildItem> syntheticBean) {\n-\n-        syntheticBean.produce(SyntheticBeanBuildItem.configure(OidcClients.class).unremovable()\n-                .types(OidcClients.class)\n-                .supplier(recorder.createOidcClientsBean(oidcConfig, vertxBuildItem.getVertx(), tlsRegistry.registry()))\n-                .scope(Singleton.class)\n-                .setRuntimeInit()\n-                .destroyer(BeanDestroyer.CloseableDestroyer.class)\n-                .done());\n-\n-        syntheticBean.produce(SyntheticBeanBuildItem.configure(OidcClient.class).unremovable()\n-                .types(OidcClient.class)\n-                .supplier(recorder.createOidcClientBean())\n-                .scope(Singleton.class)\n-                .setRuntimeInit()\n-                .destroyer(BeanDestroyer.CloseableDestroyer.class)\n-                .done());\n-\n-        produceNamedOidcClientBeans(syntheticBean, oidcClientNames.oidcClientNames(), recorder);\n+    AdditionalBeanBuildItem createOidcClientsBean() {\n+        return AdditionalBeanBuildItem.unremovableOf(OidcClientsImpl.class);\n     }\n \n-    private void produceNamedOidcClientBeans(BuildProducer<SyntheticBeanBuildItem> syntheticBean,\n-            Set<String> injectedOidcClientNames, OidcClientRecorder recorder) {\n-        injectedOidcClientNames.stream()\n+    @Record(ExecutionTime.RUNTIME_INIT)\n+    @BuildStep\n+    void produceNamedOidcClientBeans(OidcClientRecorder recorder, OidcClientNamesBuildItem oidcClientNames,\n+            BuildProducer<SyntheticBeanBuildItem> syntheticBean) {\n+        oidcClientNames.oidcClientNames().stream()\n                 .map(clientName -> syntheticNamedOidcClientBeanFor(clientName, recorder))\n                 .forEach(syntheticBean::produce);\n     }\n \n-    private SyntheticBeanBuildItem syntheticNamedOidcClientBeanFor(String clientName, OidcClientRecorder recorder) {\n+    private static SyntheticBeanBuildItem syntheticNamedOidcClientBeanFor(String clientName, OidcClientRecorder recorder) {\n         return SyntheticBeanBuildItem.configure(OidcClient.class).unremovable()\n                 .types(OidcClient.class)\n-                .supplier(recorder.createOidcClientBean(clientName))\n+                .addInjectionPoint(ClassType.create(OidcClients.class))\n+                .createWith(recorder.createOidcClientBean(clientName))\n                 .scope(Singleton.class)\n                 .addQualifier().annotation(NamedOidcClient.class).addValue(\"value\", clientName).done()\n                 .setRuntimeInit()\n\ndiff --git a/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/OidcClientConfig.java b/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/OidcClientConfig.java\nindex 3fa14118631d6..d6055d4b7a82f 100644\n--- a/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/OidcClientConfig.java\n+++ b/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/OidcClientConfig.java\n@@ -16,7 +16,7 @@\n public class OidcClientConfig extends OidcClientCommonConfig implements io.quarkus.oidc.client.runtime.OidcClientConfig {\n \n     public OidcClientConfig() {\n-\n+        this.refreshInterval = Optional.empty();\n     }\n \n     public OidcClientConfig(io.quarkus.oidc.client.runtime.OidcClientConfig mapping) {\n@@ -32,6 +32,7 @@ public OidcClientConfig(io.quarkus.oidc.client.runtime.OidcClientConfig mapping)\n         grantOptions = mapping.grantOptions();\n         earlyTokensAcquisition = mapping.earlyTokensAcquisition();\n         headers = mapping.headers();\n+        refreshInterval = mapping.refreshInterval();\n     }\n \n     /**\n@@ -78,6 +79,8 @@ public OidcClientConfig(io.quarkus.oidc.client.runtime.OidcClientConfig mapping)\n \n     public Grant grant = new Grant();\n \n+    private final Optional<Duration> refreshInterval;\n+\n     @Override\n     public Optional<String> id() {\n         return id;\n@@ -133,6 +136,11 @@ public Map<String, String> headers() {\n         return headers;\n     }\n \n+    @Override\n+    public Optional<Duration> refreshInterval() {\n+        return refreshInterval;\n+    }\n+\n     public static class Grant implements io.quarkus.oidc.client.runtime.OidcClientConfig.Grant {\n \n         @Override\n\ndiff --git a/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/OidcClientConfigBuilder.java b/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/OidcClientConfigBuilder.java\nindex cfbf48ddba9b0..ed0269696bce2 100644\n--- a/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/OidcClientConfigBuilder.java\n+++ b/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/OidcClientConfigBuilder.java\n@@ -33,6 +33,7 @@ private static class OidcClientConfigImpl extends OidcClientCommonConfigImpl imp\n         private final Optional<List<String>> scopes;\n         private final boolean clientEnabled;\n         private final Optional<String> id;\n+        private final Optional<Duration> refreshInterval;;\n \n         private OidcClientConfigImpl(OidcClientConfigBuilder builder) {\n             super(builder);\n@@ -47,6 +48,7 @@ private OidcClientConfigImpl(OidcClientConfigBuilder builder) {\n             this.scopes = builder.scopes.isEmpty() ? Optional.empty() : Optional.of(List.copyOf(builder.scopes));\n             this.clientEnabled = builder.clientEnabled;\n             this.id = builder.id;\n+            this.refreshInterval = builder.refreshInterval;\n         }\n \n         @Override\n@@ -103,6 +105,11 @@ public boolean earlyTokensAcquisition() {\n         public Map<String, String> headers() {\n             return headers;\n         }\n+\n+        @Override\n+        public Optional<Duration> refreshInterval() {\n+            return refreshInterval;\n+        }\n     }\n \n     /**\n@@ -123,6 +130,7 @@ public Map<String, String> headers() {\n     private Optional<Duration> refreshTokenTimeSkew;\n     private boolean clientEnabled;\n     private Optional<String> id;\n+    private Optional<Duration> refreshInterval;\n \n     /**\n      * Creates {@link OidcClientConfigBuilder} builder populated with documented default values.\n@@ -146,6 +154,7 @@ public OidcClientConfigBuilder(OidcClientConfig config) {\n         this.refreshTokenTimeSkew = config.refreshTokenTimeSkew();\n         this.clientEnabled = config.clientEnabled();\n         this.id = config.id();\n+        this.refreshInterval = config.refreshInterval();\n         if (config.scopes().isPresent()) {\n             this.scopes.addAll(config.scopes().get());\n         }\n@@ -330,6 +339,11 @@ public GrantBuilder grant() {\n         return new GrantBuilder(this);\n     }\n \n+    public OidcClientConfigBuilder refreshInterval(Duration refreshInterval) {\n+        this.refreshInterval = Optional.ofNullable(refreshInterval);\n+        return this;\n+    }\n+\n     /**\n      * @return OidcClientConfig\n      */\n\ndiff --git a/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/AbstractTokensProducer.java b/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/AbstractTokensProducer.java\nindex 93c97f44cf823..5d8d3da14c592 100644\n--- a/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/AbstractTokensProducer.java\n+++ b/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/AbstractTokensProducer.java\n@@ -3,15 +3,15 @@\n import java.util.Map;\n import java.util.Objects;\n import java.util.Optional;\n+import java.util.function.Supplier;\n \n import jakarta.annotation.PostConstruct;\n+import jakarta.enterprise.inject.Instance;\n import jakarta.inject.Inject;\n \n import org.jboss.logging.Logger;\n \n-import io.quarkus.arc.Arc;\n import io.quarkus.oidc.client.OidcClient;\n-import io.quarkus.oidc.client.OidcClients;\n import io.quarkus.oidc.client.Tokens;\n import io.smallrye.mutiny.Uni;\n \n@@ -26,6 +26,8 @@ public abstract class AbstractTokensProducer {\n     public OidcClientsConfig oidcClientsConfig;\n     @Inject\n     public OidcClientBuildTimeConfig oidcClientBuildTimeConfig;\n+    @Inject\n+    public Instance<OidcClientsImpl> oidcClientsInstance;\n \n     final TokensHelper tokensHelper = new TokensHelper();\n \n@@ -36,10 +38,10 @@ public void init() {\n                     + \" skipping the token producer initialization\");\n             return;\n         }\n+        final OidcClientsImpl oidcClients = oidcClientsInstance.get();\n         Optional<OidcClient> initializedClient = client();\n         if (initializedClient.isEmpty()) {\n             Optional<String> clientId = Objects.requireNonNull(clientId(), \"clientId must not be null\");\n-            OidcClients oidcClients = Arc.container().instance(OidcClients.class).get();\n             if (clientId.isPresent()) {\n                 // static named OidcClient\n                 oidcClient = Objects.requireNonNull(oidcClients.getClient(clientId.get()), \"Unknown client\");\n@@ -54,6 +56,14 @@ public void init() {\n         }\n \n         initTokens();\n+        if (!isForceNewTokens()) {\n+            oidcClients.registerTokenRefresh(oidcClient, new Supplier<Uni<Tokens>>() {\n+                @Override\n+                public Uni<Tokens> get() {\n+                    return getTokens();\n+                }\n+            });\n+        }\n     }\n \n     protected boolean isClientFeatureDisabled() {\n\ndiff --git a/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/OidcClientConfig.java b/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/OidcClientConfig.java\nindex 2cfe03fd896cc..b1081caf634e5 100644\n--- a/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/OidcClientConfig.java\n+++ b/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/OidcClientConfig.java\n@@ -5,6 +5,7 @@\n import java.util.Map;\n import java.util.Optional;\n \n+import io.quarkus.oidc.client.OidcClient;\n import io.quarkus.oidc.client.OidcClientConfigBuilder;\n import io.quarkus.oidc.common.runtime.OidcConstants;\n import io.quarkus.oidc.common.runtime.config.OidcClientCommonConfig;\n@@ -172,6 +173,16 @@ public String getGrantType() {\n      */\n     Map<String, String> headers();\n \n+    /**\n+     * Token refresh interval.\n+     * By default, OIDC client refreshes the token during the current request, when it detects that it has expired,\n+     * or nearly expired if the {@link #refreshTokenTimeSkew()} is configured.\n+     * But, when this property is configured, OIDC client can refresh the token asynchronously in the configured interval.\n+     * This property is only effective with OIDC client filters and other {@link AbstractTokensProducer} extensions,\n+     * but not when you use the {@link OidcClient#getTokens()} API directly.\n+     */\n+    Optional<Duration> refreshInterval();\n+\n     /**\n      * Creates {@link OidcClientConfigBuilder} builder populated with documented default values.\n      *\n\ndiff --git a/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/OidcClientImpl.java b/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/OidcClientImpl.java\nindex 756cae3e66aad..08023d8a1f7ae 100644\n--- a/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/OidcClientImpl.java\n+++ b/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/OidcClientImpl.java\n@@ -366,4 +366,8 @@ private HttpRequest<Buffer> filterHttpRequest(\n         }\n         return request;\n     }\n+\n+    OidcClientConfig getConfig() {\n+        return oidcConfig;\n+    }\n }\n\ndiff --git a/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/OidcClientRecorder.java b/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/OidcClientRecorder.java\nindex 86603aeba0015..37b30f5c0c114 100644\n--- a/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/OidcClientRecorder.java\n+++ b/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/OidcClientRecorder.java\n@@ -7,7 +7,6 @@\n import java.util.Set;\n import java.util.function.BiFunction;\n import java.util.function.Function;\n-import java.util.function.Supplier;\n import java.util.stream.Collectors;\n \n import jakarta.enterprise.inject.CreationException;\n@@ -15,6 +14,7 @@\n import org.jboss.logging.Logger;\n \n import io.quarkus.arc.Arc;\n+import io.quarkus.arc.SyntheticCreationalContext;\n import io.quarkus.oidc.client.OidcClient;\n import io.quarkus.oidc.client.OidcClientException;\n import io.quarkus.oidc.client.OidcClients;\n@@ -29,7 +29,6 @@\n import io.quarkus.oidc.common.runtime.OidcTlsSupport;\n import io.quarkus.runtime.annotations.Recorder;\n import io.quarkus.runtime.configuration.ConfigurationException;\n-import io.quarkus.tls.TlsConfigurationRegistry;\n import io.smallrye.mutiny.Uni;\n import io.vertx.core.Vertx;\n import io.vertx.ext.web.client.WebClientOptions;\n@@ -43,13 +42,10 @@ public class OidcClientRecorder {\n     private static final String CLIENT_ID_ATTRIBUTE = \"client-id\";\n     static final String DEFAULT_OIDC_CLIENT_ID = \"Default\";\n \n-    private static OidcClients setup(OidcClientsConfig oidcClientsConfig, Supplier<Vertx> vertx,\n-            Supplier<TlsConfigurationRegistry> registrySupplier) {\n+    static Map<String, OidcClient> createStaticOidcClients(OidcClientsConfig oidcClientsConfig, Vertx vertx,\n+            OidcTlsSupport tlsSupport, OidcClientConfig defaultClientConfig) {\n \n-        var tlsSupport = OidcTlsSupport.of(registrySupplier);\n-        var defaultClientConfig = OidcClientsConfig.getDefaultClient(oidcClientsConfig);\n         String defaultClientId = defaultClientConfig.id().get();\n-        OidcClient defaultClient = createOidcClient(defaultClientConfig, defaultClientId, vertx, tlsSupport);\n \n         Map<String, OidcClient> staticOidcClients = new HashMap<>();\n \n@@ -62,54 +58,26 @@ private static OidcClients setup(OidcClientsConfig oidcClientsConfig, Supplier<V\n             }\n         }\n \n-        return new OidcClientsImpl(defaultClient, staticOidcClients,\n-                new Function<OidcClientConfig, Uni<OidcClient>>() {\n-                    @Override\n-                    public Uni<OidcClient> apply(OidcClientConfig config) {\n-                        return createOidcClientUni(config, config.id().get(), vertx, OidcTlsSupport.of(registrySupplier));\n-                    }\n-                });\n-    }\n-\n-    public Supplier<OidcClient> createOidcClientBean() {\n-        return new Supplier<OidcClient>() {\n-\n-            @Override\n-            public OidcClient get() {\n-                return Arc.container().instance(OidcClients.class).get().getClient();\n-            }\n-        };\n-    }\n-\n-    public Supplier<OidcClient> createOidcClientBean(String clientName) {\n-        return new Supplier<OidcClient>() {\n-\n-            @Override\n-            public OidcClient get() {\n-                return Arc.container().instance(OidcClients.class).get().getClient(clientName);\n-            }\n-        };\n+        return Map.copyOf(staticOidcClients);\n     }\n \n-    public Supplier<OidcClients> createOidcClientsBean(OidcClientsConfig oidcClientsConfig, Supplier<Vertx> vertx,\n-            Supplier<TlsConfigurationRegistry> registrySupplier) {\n-        return new Supplier<OidcClients>() {\n-\n+    public Function<SyntheticCreationalContext<OidcClient>, OidcClient> createOidcClientBean(String clientName) {\n+        return new Function<SyntheticCreationalContext<OidcClient>, OidcClient>() {\n             @Override\n-            public OidcClients get() {\n-                return setup(oidcClientsConfig, vertx, registrySupplier);\n+            public OidcClient apply(SyntheticCreationalContext<OidcClient> ctx) {\n+                return ctx.getInjectedReference(OidcClients.class).getClient(clientName);\n             }\n         };\n     }\n \n-    protected static OidcClient createOidcClient(OidcClientConfig oidcConfig, String oidcClientId, Supplier<Vertx> vertx,\n+    protected static OidcClient createOidcClient(OidcClientConfig oidcConfig, String oidcClientId, Vertx vertx,\n             OidcTlsSupport tlsSupport) {\n         return createOidcClientUni(oidcConfig, oidcClientId, vertx, tlsSupport).await()\n                 .atMost(oidcConfig.connectionTimeout());\n     }\n \n     protected static Uni<OidcClient> createOidcClientUni(OidcClientConfig oidcConfig, String oidcClientId,\n-            Supplier<Vertx> vertx, OidcTlsSupport tlsSupport) {\n+            Vertx vertx, OidcTlsSupport tlsSupport) {\n         if (!oidcConfig.clientEnabled()) {\n             String message = String.format(\"'%s' client configuration is disabled\", oidcClientId);\n             LOG.debug(message);\n@@ -139,7 +107,7 @@ protected static Uni<OidcClient> createOidcClientUni(OidcClientConfig oidcConfig\n         options.setFollowRedirects(oidcConfig.followRedirects());\n         OidcCommonUtils.setHttpClientOptions(oidcConfig, options, tlsSupport.forConfig(oidcConfig.tls()));\n \n-        var mutinyVertx = new io.vertx.mutiny.core.Vertx(vertx.get());\n+        var mutinyVertx = new io.vertx.mutiny.core.Vertx(vertx);\n         WebClient client = WebClient.create(mutinyVertx, options);\n \n         Map<OidcEndpoint.Type, List<OidcRequestFilter>> oidcRequestFilters = OidcCommonUtils.getOidcRequestFilters();\n@@ -219,7 +187,7 @@ public OidcClient apply(OidcConfigurationMetadata metadata, Throwable t) {\n \n                         return new OidcClientImpl(client, metadata.tokenRequestUri, metadata.tokenRevokeUri, grantType,\n                                 tokenGrantParams, commonRefreshGrantParams, oidcConfig, oidcRequestFilters,\n-                                oidcResponseFilters, vertx.get());\n+                                oidcResponseFilters, vertx);\n                     }\n \n                 });\n\ndiff --git a/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/OidcClientsImpl.java b/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/OidcClientsImpl.java\nindex 02c4da69d7d68..7715585ab784d 100644\n--- a/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/OidcClientsImpl.java\n+++ b/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/OidcClientsImpl.java\n@@ -1,28 +1,69 @@\n package io.quarkus.oidc.client.runtime;\n \n+import static io.quarkus.oidc.client.runtime.OidcClientRecorder.createOidcClient;\n+import static io.quarkus.oidc.client.runtime.OidcClientRecorder.createOidcClientUni;\n+import static io.quarkus.oidc.client.runtime.OidcClientRecorder.createStaticOidcClients;\n+\n import java.io.Closeable;\n import java.io.IOException;\n+import java.time.Duration;\n import java.util.Map;\n-import java.util.function.Function;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import jakarta.annotation.PreDestroy;\n+import jakarta.enterprise.inject.Produces;\n+import jakarta.inject.Inject;\n+import jakarta.inject.Singleton;\n+\n+import org.jboss.logging.Logger;\n \n+import io.quarkus.arc.ClientProxy;\n+import io.quarkus.arc.Unremovable;\n import io.quarkus.oidc.client.OidcClient;\n import io.quarkus.oidc.client.OidcClientException;\n import io.quarkus.oidc.client.OidcClients;\n+import io.quarkus.oidc.client.Tokens;\n+import io.quarkus.oidc.common.runtime.OidcTlsSupport;\n+import io.quarkus.runtime.Shutdown;\n+import io.quarkus.tls.TlsConfigurationRegistry;\n import io.smallrye.mutiny.Uni;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Vertx;\n \n-public class OidcClientsImpl implements OidcClients, Closeable {\n-    private OidcClient defaultClient;\n-    private Map<String, OidcClient> staticOidcClients;\n-    private Function<OidcClientConfig, Uni<OidcClient>> dynamicOidcClients;\n+@Singleton\n+public final class OidcClientsImpl implements OidcClients, Closeable {\n \n-    public OidcClientsImpl() {\n+    private static final Logger LOG = Logger.getLogger(OidcClientsImpl.class);\n+\n+    private final OidcClient defaultClient;\n+    private final Map<String, OidcClient> staticOidcClients;\n+    private final Vertx vertx;\n+    private final OidcTlsSupport tlsSupport;\n+    private volatile PeriodicTask tokenRefreshTask;\n+\n+    @Inject\n+    OidcClientsImpl(OidcClientsConfig oidcClientsConfig, Vertx vertx, TlsConfigurationRegistry registry) {\n+        this(oidcClientsConfig, vertx, OidcClientsConfig.getDefaultClient(oidcClientsConfig), OidcTlsSupport.of(registry));\n     }\n \n-    public OidcClientsImpl(OidcClient defaultClient, Map<String, OidcClient> staticOidcClients,\n-            Function<OidcClientConfig, Uni<OidcClient>> dynamicOidcClients) {\n+    private OidcClientsImpl(OidcClientsConfig oidcClientsConfig, Vertx vertx, OidcClientConfig defaultClientConfig,\n+            OidcTlsSupport tlsSupport) {\n+        this(createOidcClient(defaultClientConfig, defaultClientConfig.id().get(), vertx, tlsSupport),\n+                createStaticOidcClients(oidcClientsConfig, vertx, tlsSupport, defaultClientConfig),\n+                vertx, tlsSupport, createTokenRefreshPeriodicTask(oidcClientsConfig, vertx));\n+    }\n+\n+    private OidcClientsImpl(OidcClient defaultClient, Map<String, OidcClient> staticOidcClients,\n+            Vertx vertx, OidcTlsSupport tlsSupport, PeriodicTask tokenRefreshTask) {\n         this.defaultClient = defaultClient;\n         this.staticOidcClients = staticOidcClients;\n-        this.dynamicOidcClients = dynamicOidcClients;\n+        this.vertx = vertx;\n+        this.tlsSupport = tlsSupport;\n+        this.tokenRefreshTask = tokenRefreshTask;\n     }\n \n     @Override\n@@ -48,7 +89,131 @@ public Uni<OidcClient> newClient(OidcClientConfig clientConfig) {\n         if (clientConfig.id().isEmpty()) {\n             throw new OidcClientException(\"'id' property must be set\");\n         }\n-        return dynamicOidcClients.apply(clientConfig);\n+        return createOidcClientUni(clientConfig, clientConfig.id().get(), vertx, tlsSupport);\n+    }\n+\n+    @Singleton\n+    @Produces\n+    @Unremovable\n+    OidcClient createOidcClientBean() {\n+        return defaultClient;\n+    }\n+\n+    @PreDestroy\n+    void destroy() {\n+        try {\n+            close();\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Shutdown\n+    void shutdown() {\n+        if (tokenRefreshTask != null) {\n+            tokenRefreshTask.cancel();\n+        }\n+    }\n+\n+    void registerTokenRefresh(OidcClient oidcClient, Supplier<Uni<Tokens>> tokensSupplier) {\n+        if (ClientProxy.unwrap(oidcClient) instanceof OidcClientImpl oidcClientImpl\n+                && oidcClientImpl.getConfig().refreshInterval().isPresent()) {\n+            Duration refreshInterval = oidcClientImpl.getConfig().refreshInterval().get();\n+            CancellableTask refreshTask = new CancellableTask() {\n+\n+                private final AtomicInteger numOfErrorsInRow = new AtomicInteger();\n+\n+                @Override\n+                public void run() {\n+                    tokensSupplier.get().subscribe().with(new Consumer<Tokens>() {\n+                        @Override\n+                        public void accept(Tokens ignored) {\n+                            if (numOfErrorsInRow.get() != 0) {\n+                                numOfErrorsInRow.set(0);\n+                            }\n+                        }\n+                    }, new Consumer<Throwable>() {\n+                        @Override\n+                        public void accept(Throwable throwable) {\n+                            if (numOfErrorsInRow.incrementAndGet() >= 10) {\n+                                LOG.warnf(\n+                                        \"Cancelling periodic token refresh for OIDC client '%s' as %d previous attempts failed\",\n+                                        oidcClientImpl.getConfig().id().get(), numOfErrorsInRow.get());\n+                                cancel();\n+                            }\n+                        }\n+                    });\n+                }\n+            };\n+            if (tokenRefreshTask == null) {\n+                synchronized (this) {\n+                    if (tokenRefreshTask == null) {\n+                        tokenRefreshTask = new PeriodicTask(vertx);\n+                    }\n+                }\n+            }\n+            tokenRefreshTask.add(refreshTask, refreshInterval);\n+        }\n     }\n \n+    private static PeriodicTask createTokenRefreshPeriodicTask(OidcClientsConfig oidcClientsConfig, Vertx vertx) {\n+        for (OidcClientConfig config : oidcClientsConfig.namedClients().values()) {\n+            if (config.refreshInterval().isPresent()) {\n+                return new PeriodicTask(vertx);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private static final class PeriodicTask {\n+\n+        private final Vertx vertx;\n+        private final Set<Long> timerIds;\n+\n+        private PeriodicTask(Vertx vertx) {\n+            this.vertx = vertx;\n+            this.timerIds = new CopyOnWriteArraySet<>();\n+        }\n+\n+        private void add(CancellableTask task, Duration refreshInterval) {\n+            final long timerId = scheduleTask(task, refreshInterval);\n+            timerIds.add(timerId);\n+        }\n+\n+        private void cancel() {\n+            for (long timerId : timerIds) {\n+                vertx.cancelTimer(timerId);\n+            }\n+        }\n+\n+        private long scheduleTask(CancellableTask task, Duration refreshInterval) {\n+            final long timerId = vertx.setPeriodic(0L, refreshInterval.toMillis(), task);\n+            task.cancel = new Runnable() {\n+                @Override\n+                public void run() {\n+                    timerIds.remove(timerId);\n+                    vertx.cancelTimer(timerId);\n+                }\n+            };\n+            return timerId;\n+        }\n+    }\n+\n+    private static abstract class CancellableTask implements Handler<Long> {\n+\n+        private volatile Runnable cancel;\n+\n+        protected abstract void run();\n+\n+        protected final void cancel() {\n+            if (cancel != null) {\n+                cancel.run();\n+            }\n+        }\n+\n+        @Override\n+        public final void handle(Long ignored) {\n+            run();\n+        }\n+    }\n }\n",
    "test_patch": "diff --git a/extensions/oidc-client/runtime/src/test/java/io/quarkus/oidc/client/OidcClientConfigImpl.java b/extensions/oidc-client/runtime/src/test/java/io/quarkus/oidc/client/OidcClientConfigImpl.java\nindex 9878a5b93a995..d6cfea2d416d4 100644\n--- a/extensions/oidc-client/runtime/src/test/java/io/quarkus/oidc/client/OidcClientConfigImpl.java\n+++ b/extensions/oidc-client/runtime/src/test/java/io/quarkus/oidc/client/OidcClientConfigImpl.java\n@@ -91,7 +91,8 @@ enum ConfigMappingMethods {\n         CREDENTIALS_JWT_ASSERTION,\n         CREDENTIALS_JWT_AUDIENCE,\n         CREDENTIALS_JWT_TOKEN_ID,\n-        JWT_BEARER_TOKEN_PATH\n+        JWT_BEARER_TOKEN_PATH,\n+        REFRESH_INTERVAL\n     }\n \n     final Map<ConfigMappingMethods, Boolean> invocationsRecorder = new EnumMap<>(ConfigMappingMethods.class);\n@@ -405,6 +406,12 @@ public Map<String, String> headers() {\n         return Map.of();\n     }\n \n+    @Override\n+    public Optional<Duration> refreshInterval() {\n+        invocationsRecorder.put(ConfigMappingMethods.REFRESH_INTERVAL, true);\n+        return Optional.empty();\n+    }\n+\n     @Override\n     public Optional<String> authServerUrl() {\n         invocationsRecorder.put(ConfigMappingMethods.AUTH_SERVER_URL, true);\n\ndiff --git a/integration-tests/oidc-client-wiremock/src/main/java/io/quarkus/it/keycloak/FrontendResource.java b/integration-tests/oidc-client-wiremock/src/main/java/io/quarkus/it/keycloak/FrontendResource.java\nindex 04af1e24b3954..6a040db89c81e 100644\n--- a/integration-tests/oidc-client-wiremock/src/main/java/io/quarkus/it/keycloak/FrontendResource.java\n+++ b/integration-tests/oidc-client-wiremock/src/main/java/io/quarkus/it/keycloak/FrontendResource.java\n@@ -53,6 +53,10 @@ public class FrontendResource {\n     @NamedOidcClient(\"jwtbearer-grant\")\n     OidcClient jwtBearerGrantClient;\n \n+    @Inject\n+    @RestClient\n+    ProtectedResourceServiceRefreshIntervalTestClient tokenRefreshIntervalTestClient;\n+\n     @Inject\n     OidcClients clients;\n \n@@ -68,6 +72,12 @@ public String crashTest() {\n         return protectedResourceServiceCrashTestClient.echoToken();\n     }\n \n+    @GET\n+    @Path(\"tokenRefreshInterval\")\n+    public String tokenRefreshInterval() {\n+        return tokenRefreshIntervalTestClient.echoToken();\n+    }\n+\n     @GET\n     @Path(\"echoTokenJwtBearerGrant\")\n     public String echoTokenJwtBearerGrant() {\n\ndiff --git a/integration-tests/oidc-client-wiremock/src/main/java/io/quarkus/it/keycloak/ProtectedResourceServiceRefreshIntervalTestClient.java b/integration-tests/oidc-client-wiremock/src/main/java/io/quarkus/it/keycloak/ProtectedResourceServiceRefreshIntervalTestClient.java\nnew file mode 100644\nindex 0000000000000..269a82d29f766\n--- /dev/null\n+++ b/integration-tests/oidc-client-wiremock/src/main/java/io/quarkus/it/keycloak/ProtectedResourceServiceRefreshIntervalTestClient.java\n@@ -0,0 +1,17 @@\n+package io.quarkus.it.keycloak;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+\n+import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n+\n+import io.quarkus.oidc.client.filter.OidcClientFilter;\n+\n+@RegisterRestClient(configKey = \"token-refresh-interval\")\n+@OidcClientFilter(\"token-refresh-interval\")\n+@Path(\"/\")\n+public interface ProtectedResourceServiceRefreshIntervalTestClient {\n+\n+    @GET\n+    String echoToken();\n+}\n\ndiff --git a/integration-tests/oidc-client-wiremock/src/main/resources/application.properties b/integration-tests/oidc-client-wiremock/src/main/resources/application.properties\nindex c650f101e1fb6..e07c5ba1cbe1c 100644\n--- a/integration-tests/oidc-client-wiremock/src/main/resources/application.properties\n+++ b/integration-tests/oidc-client-wiremock/src/main/resources/application.properties\n@@ -103,3 +103,15 @@ quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientImpl\".min-level=T\n quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientImpl\".level=TRACE\n quarkus.log.file.enable=true\n quarkus.log.file.format=%C - %s%n\n+\n+quarkus.oidc-client.token-refresh-interval.auth-server-url=${keycloak.url}\n+quarkus.oidc-client.token-refresh-interval.discovery-enabled=false\n+quarkus.oidc-client.token-refresh-interval.token-path=/tokens-refresh-test\n+quarkus.oidc-client.token-refresh-interval.client-id=quarkus-app\n+quarkus.oidc-client.token-refresh-interval.credentials.secret=secret\n+quarkus.oidc-client.token-refresh-interval.grant.type=password\n+quarkus.oidc-client.token-refresh-interval.grant-options.password.username=alice\n+quarkus.oidc-client.token-refresh-interval.grant-options.password.password=alice\n+quarkus.oidc-client.token-refresh-interval.early-tokens-acquisition=false\n+quarkus.oidc-client.token-refresh-interval.refresh-interval=1s\n+quarkus.rest-client.token-refresh-interval.url=http://localhost:8081/protected\n\ndiff --git a/integration-tests/oidc-client-wiremock/src/test/java/io/quarkus/it/keycloak/KeycloakRealmResourceManager.java b/integration-tests/oidc-client-wiremock/src/test/java/io/quarkus/it/keycloak/KeycloakRealmResourceManager.java\nindex f2f7c2cbb50d9..1274f6e5b11be 100644\n--- a/integration-tests/oidc-client-wiremock/src/test/java/io/quarkus/it/keycloak/KeycloakRealmResourceManager.java\n+++ b/integration-tests/oidc-client-wiremock/src/test/java/io/quarkus/it/keycloak/KeycloakRealmResourceManager.java\n@@ -10,6 +10,7 @@\n import java.time.Duration;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.stream.IntStream;\n \n import jakarta.ws.rs.core.MediaType;\n \n@@ -187,6 +188,25 @@ public Map<String, String> start() {\n                                 \"{\\\"access_token\\\":\\\"access_token_2\\\", \\\"expires_in\\\":1, \\\"refresh_token\\\":\\\"refresh_token_2\\\", \\\"refresh_expires_in\\\":1}\")\n                         .withFixedDelay(50)));\n \n+        server.stubFor(WireMock.post(\"/tokens-refresh-test\")\n+                .withRequestBody(matching(\"grant_type=password&username=alice&password=alice\"))\n+                .willReturn(WireMock\n+                        .aResponse()\n+                        .withHeader(\"Content-Type\", MediaType.APPLICATION_JSON)\n+                        .withBody(\"{\\\"access_token\\\":\\\"access_token_1\\\", \\\"expires_in\\\":3, \" +\n+                                \"\\\"refresh_token\\\":\\\"refresh_token_1\\\", \\\"refresh_expires_in\\\": 100}\")));\n+        IntStream.range(0, 20).forEach(i -> {\n+            int nextIndex = i + 1;\n+            server.stubFor(WireMock.post(\"/tokens-refresh-test\")\n+                    .withRequestBody(matching(\"grant_type=refresh_token&refresh_token=refresh_token_\" + i))\n+                    .willReturn(WireMock\n+                            .aResponse()\n+                            .withHeader(\"Content-Type\", MediaType.APPLICATION_JSON)\n+                            .withBody(\"{\\\"access_token\\\":\\\"access_token_\" + nextIndex\n+                                    + \"\\\", \\\"expires_in\\\":3, \\\"refresh_token\\\":\\\"refresh_token_\"\n+                                    + nextIndex + \"\\\", \\\"refresh_expires_in\\\":100}\")));\n+        });\n+\n         LOG.infof(\"Keycloak started in mock mode: %s\", server.baseUrl());\n \n         Map<String, String> conf = new HashMap<>();\n\ndiff --git a/integration-tests/oidc-client-wiremock/src/test/java/io/quarkus/it/keycloak/OidcClientTest.java b/integration-tests/oidc-client-wiremock/src/test/java/io/quarkus/it/keycloak/OidcClientTest.java\nindex 9e776cdd2c53a..8a9998084f78f 100644\n--- a/integration-tests/oidc-client-wiremock/src/test/java/io/quarkus/it/keycloak/OidcClientTest.java\n+++ b/integration-tests/oidc-client-wiremock/src/test/java/io/quarkus/it/keycloak/OidcClientTest.java\n@@ -1,5 +1,6 @@\n package io.quarkus.it.keycloak;\n \n+import static com.github.tomakehurst.wiremock.client.WireMock.matching;\n import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n import static org.awaitility.Awaitility.await;\n import static org.awaitility.Awaitility.given;\n@@ -19,11 +20,15 @@\n import java.util.concurrent.TimeUnit;\n import java.util.stream.IntStream;\n \n+import org.awaitility.Awaitility;\n import org.awaitility.core.ThrowingRunnable;\n-import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n \n import com.github.tomakehurst.wiremock.WireMockServer;\n+import com.github.tomakehurst.wiremock.client.CountMatchingStrategy;\n import com.github.tomakehurst.wiremock.client.WireMock;\n \n import io.quarkus.test.common.QuarkusTestResource;\n@@ -31,6 +36,9 @@\n import io.restassured.RestAssured;\n import io.restassured.response.Response;\n \n+// use method order because we need to keep this test class extendable\n+// changing the order and adding extra waiting can lead to extra token refresh\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n @QuarkusTest\n @QuarkusTestResource(KeycloakRealmResourceManager.class)\n public class OidcClientTest {\n@@ -38,6 +46,7 @@ public class OidcClientTest {\n     @InjectWireMock\n     WireMockServer server;\n \n+    @Order(5)\n     @Test\n     public void testEchoTokensJwtBearerAuthenticationFromAdditionalAttrs() {\n         RestAssured.when().get(\"/frontend/echoTokenJwtBearerAuthentication\")\n@@ -46,6 +55,7 @@ public void testEchoTokensJwtBearerAuthenticationFromAdditionalAttrs() {\n                 .body(equalTo(\"access_token_jwt_bearer\"));\n     }\n \n+    @Order(8)\n     @Test\n     public void testEchoTokensJwtBearerAuthenticationFromFile() {\n         RestAssured.when().get(\"/frontend/echoTokenJwtBearerAuthenticationFromFile\")\n@@ -54,6 +64,7 @@ public void testEchoTokensJwtBearerAuthenticationFromFile() {\n                 .body(equalTo(\"access_token_jwt_bearer\"));\n     }\n \n+    @Order(7)\n     @Test\n     public void testGetAccessTokenWithConfiguredExpiresIn() {\n         Response r = RestAssured.when().get(\"/frontend/echoTokenConfiguredExpiresIn\");\n@@ -69,6 +80,7 @@ public void testGetAccessTokenWithConfiguredExpiresIn() {\n                 && accessTokenExpiresAt <= expectedExpiresAt + 4);\n     }\n \n+    @Order(9)\n     @Test\n     public void testEchoTokensJwtBearerGrant() {\n         RestAssured.when().get(\"/frontend/echoTokenJwtBearerGrant\")\n@@ -77,6 +89,7 @@ public void testEchoTokensJwtBearerGrant() {\n                 .body(equalTo(\"access_token_jwt_bearer_grant\"));\n     }\n \n+    @Order(11)\n     @Test\n     public void testEchoAndRefreshTokens() {\n         // access_token_1 and refresh_token_1 are acquired using a password grant request.\n@@ -128,6 +141,7 @@ public Boolean call() throws Exception {\n     /**\n      * same logic than {@link #testEchoAndRefreshTokens()}, but with concurrency\n      */\n+    @Order(10)\n     @Test\n     public void testEchoAndRefreshTokensWithConcurrency() {\n         server.resetRequests(); // reset request counters\n@@ -159,6 +173,7 @@ public void testEchoAndRefreshTokensWithConcurrency() {\n         server.verify(1, WireMock.postRequestedFor(urlEqualTo(\"/tokens-with-delay\")));\n     }\n \n+    @Order(2)\n     @Test\n     public void testEchoTokensPasswordGrantPublicClient() {\n         RestAssured.when().get(\"/frontend/password-grant-public-client\")\n@@ -171,6 +186,7 @@ public void testEchoTokensPasswordGrantPublicClient() {\n                 .body(equalTo(\"access_token_public_client\"));\n     }\n \n+    @Order(1)\n     @Test\n     public void testEchoTokensNonStandardResponse() {\n         RestAssured.when().get(\"/frontend/echoTokenNonStandardResponse\")\n@@ -179,6 +195,7 @@ public void testEchoTokensNonStandardResponse() {\n                 .body(equalTo(\"access_token_n refresh_token_n\"));\n     }\n \n+    @Order(4)\n     @Test\n     public void testEchoTokensNonStandardResponseWithoutHeader() {\n         RestAssured.when().get(\"/frontend/echoTokenNonStandardResponseWithoutHeader\")\n@@ -186,6 +203,7 @@ public void testEchoTokensNonStandardResponseWithoutHeader() {\n                 .statusCode(401);\n     }\n \n+    @Order(3)\n     @Test\n     public void testEchoTokensRefreshTokenOnly() {\n         RestAssured.given().queryParam(\"refreshToken\", \"shared_refresh_token\")\n@@ -195,6 +213,7 @@ public void testEchoTokensRefreshTokenOnly() {\n                 .body(equalTo(\"temp_access_token\"));\n     }\n \n+    @Order(6)\n     @Test\n     public void testCibaGrant() {\n         RestAssured.given().queryParam(\"authReqId\", \"16cdaa49-9591-4b63-b188-703fa3b25031\")\n@@ -229,6 +248,7 @@ public void testCibaGrant() {\n \n     }\n \n+    @Order(12)\n     @Test\n     public void testDeviceCodeGrant() {\n         RestAssured.given().queryParam(\"deviceCode\", \"987654321\")\n@@ -244,6 +264,41 @@ public void testDeviceCodeGrant() {\n \n     }\n \n+    @Order(13)\n+    @Test\n+    public void testEchoWithRefreshInterval() {\n+        try {\n+            // make a call so that we know current token index\n+            String accessToken = RestAssured.when().get(\"/frontend/tokenRefreshInterval\")\n+                    .then()\n+                    .statusCode(200)\n+                    .extract().asString();\n+            int tokenIndex = Integer.parseInt(accessToken.substring(accessToken.lastIndexOf('_') + 1));\n+            assertTrue(accessToken.startsWith(\"access_token_\"));\n+\n+            // wait until it is clear that token was refreshed again (wouldn't happen without configured refresh interval)\n+            waitUntillAccessTokenHasExpired(2000);\n+\n+            Awaitility.await().atMost(Duration.ofSeconds(10))\n+                    .untilAsserted(() -> server.verify(new CountMatchingStrategy(CountMatchingStrategy.GREATER_THAN, 0),\n+                            WireMock.postRequestedFor(urlEqualTo(\"/tokens-refresh-test\")).withRequestBody(\n+                                    matching(\".*refresh_token=refresh_token_\" + tokenIndex + \".*\"))));\n+\n+            // check that call is made with the refreshed token\n+            Awaitility.await().atMost(Duration.ofSeconds(3)).untilAsserted(() -> {\n+                String accessToken2 = RestAssured.when().get(\"/frontend/tokenRefreshInterval\")\n+                        .then()\n+                        .statusCode(200)\n+                        .extract().asString();\n+                assertTrue(accessToken2.startsWith(\"access_token_\"));\n+                int nextTokenIndex = Integer.parseInt(accessToken2.substring(accessToken2.lastIndexOf('_') + 1));\n+                assertTrue(tokenIndex < nextTokenIndex);\n+            });\n+        } finally {\n+            server.resetRequests();\n+        }\n+    }\n+\n     private void checkLog() {\n         final Path logDirectory = Paths.get(\".\", \"target\");\n         given().await().pollInterval(100, TimeUnit.MILLISECONDS)\n@@ -257,7 +312,7 @@ public void run() throws Throwable {\n                             accessLogFilePath = logDirectory.resolve(\"target/quarkus.log\");\n                             fileExists = Files.exists(accessLogFilePath);\n                         }\n-                        Assertions.assertTrue(Files.exists(accessLogFilePath),\n+                        assertTrue(Files.exists(accessLogFilePath),\n                                 \"quarkus log file \" + accessLogFilePath + \" is missing\");\n \n                         int tokenAcquisitionCount = 0;\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48291",
    "pr_id": 48291,
    "issue_id": 48286,
    "repo": "quarkusio/quarkus",
    "problem_statement": "MP fault tolerance and quarkus rest client issue\n### Describe the bug\n\nHello,\n\nI have tried out quarkus-rest and quarkus-rest-client with exception mappers and fault tolerance retries. When using resteasy-client the example works, when using quarkus-rest-client I get an \n\n`2025-06-08 20:12:01,243 DEBUG [org.jbo.res.rea.com.cor.AbstractResteasyReactiveContext] (executor-thread-1) Attempting to handle unrecoverable exception: io.quarkus.arc.ArcUndeclaredThrowableException: Error invoking subclass method\n`\n\n### Expected behavior\n\nquarkus-rest-client retries the request 2 times because it returns status code > 400. After that the ClientExceptionMapper maps the Response to a MyClientException.\n\n### Actual behavior\n\n_No response_\n\n### How to Reproduce?\n\nhttps://github.com/hamburml/exception-mapper\n\nrun it, open http://localhost:8080/hello and check terminal.\nGo into pom.xml, switch to resteasy <-> quarkus-rest. Run it again.\n\n### Output of `uname -a` or `ver`\n\nLinux michael-X670-AORUS-ELITE-AX 6.8.0-60-generic #63-Ubuntu SMP PREEMPT_DYNAMIC Tue Apr 15 19:04:15 UTC 2025 x86_64 x86_64 x86_64 GNU/Linux\n\n### Output of `java -version`\n\nopenjdk version \"21.0.5\" 2024-10-15 LTS\n\n### Quarkus version or git rev\n\n_No response_\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
    "issue_word_count": 206,
    "test_files_count": 3,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "extensions/resteasy-reactive/rest-client/deployment/src/main/java/io/quarkus/rest/client/reactive/deployment/RestClientReactiveProcessor.java",
      "integration-tests/rest-client-reactive/src/main/java/io/quarkus/it/rest/client/main/ClientWithExceptionMapperAndInterceptor.java",
      "integration-tests/rest-client-reactive/src/main/resources/application.properties",
      "integration-tests/rest-client-reactive/src/test/java/io/quarkus/it/rest/client/CheckedExceptionWithInterceptionTest.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/rest-client-reactive/src/main/java/io/quarkus/it/rest/client/main/ClientWithExceptionMapperAndInterceptor.java",
      "integration-tests/rest-client-reactive/src/main/resources/application.properties",
      "integration-tests/rest-client-reactive/src/test/java/io/quarkus/it/rest/client/CheckedExceptionWithInterceptionTest.java"
    ],
    "base_commit": "d80a848f103df4f1bb43012a2b46a7fbe30cec72",
    "head_commit": "9022b3a88409aa88de59b137f61b015501934ef4",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48291",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48291",
    "dockerfile": "",
    "pr_merged_at": "2025-06-09T10:22:24.000Z",
    "patch": "diff --git a/extensions/resteasy-reactive/rest-client/deployment/src/main/java/io/quarkus/rest/client/reactive/deployment/RestClientReactiveProcessor.java b/extensions/resteasy-reactive/rest-client/deployment/src/main/java/io/quarkus/rest/client/reactive/deployment/RestClientReactiveProcessor.java\nindex 76f0410f9c7c1..06c28bc0e2457 100644\n--- a/extensions/resteasy-reactive/rest-client/deployment/src/main/java/io/quarkus/rest/client/reactive/deployment/RestClientReactiveProcessor.java\n+++ b/extensions/resteasy-reactive/rest-client/deployment/src/main/java/io/quarkus/rest/client/reactive/deployment/RestClientReactiveProcessor.java\n@@ -594,6 +594,11 @@ void addRestClientBeans(Capabilities capabilities,\n                     //     return InterfaceClass.super.get();\n                     // }\n                     MethodCreator methodCreator = classCreator.getMethodCreator(MethodDescriptor.of(method));\n+                    for (Type exception : method.exceptions()) {\n+                        // declared exceptions are important in case the client is intercepted, because interception\n+                        // subclasses wrap undeclared checked exceptions into `ArcUndeclaredThrowableException`\n+                        methodCreator.addException(exception.name().toString());\n+                    }\n                     methodCreator.setSignature(method.genericSignatureIfRequired());\n \n                     // copy method annotations, there can be interceptors bound to them:\n",
    "test_patch": "diff --git a/integration-tests/rest-client-reactive/src/main/java/io/quarkus/it/rest/client/main/ClientWithExceptionMapperAndInterceptor.java b/integration-tests/rest-client-reactive/src/main/java/io/quarkus/it/rest/client/main/ClientWithExceptionMapperAndInterceptor.java\nnew file mode 100644\nindex 0000000000000..c2bdf5be5132b\n--- /dev/null\n+++ b/integration-tests/rest-client-reactive/src/main/java/io/quarkus/it/rest/client/main/ClientWithExceptionMapperAndInterceptor.java\n@@ -0,0 +1,19 @@\n+package io.quarkus.it.rest.client.main;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+\n+import org.eclipse.microprofile.faulttolerance.Retry;\n+import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n+import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n+\n+import io.quarkus.it.rest.client.main.MyResponseExceptionMapper.MyException;\n+\n+@Path(\"/unprocessable\")\n+@RegisterProvider(MyResponseExceptionMapper.class)\n+@RegisterRestClient(configKey = \"w-exception-mapper-and-interceptor\")\n+public interface ClientWithExceptionMapperAndInterceptor {\n+    @GET\n+    @Retry(maxRetries = 1, jitter = 0) // any interceptor would do here\n+    String get() throws MyException;\n+}\n\ndiff --git a/integration-tests/rest-client-reactive/src/main/resources/application.properties b/integration-tests/rest-client-reactive/src/main/resources/application.properties\nindex 898f549738388..3a0950f9f2773 100644\n--- a/integration-tests/rest-client-reactive/src/main/resources/application.properties\n+++ b/integration-tests/rest-client-reactive/src/main/resources/application.properties\n@@ -1,5 +1,6 @@\n w-client-logger/mp-rest/url=${test.url}\n w-exception-mapper/mp-rest/url=${test.url}\n+w-exception-mapper-and-interceptor/mp-rest/url=${test.url}\n w-fault-tolerance/mp-rest/url=${test.url}\n correlation/mp-rest/url=${test.url}\n io.quarkus.it.rest.client.main.ParamClient/mp-rest/url=${test.url}\n\ndiff --git a/integration-tests/rest-client-reactive/src/test/java/io/quarkus/it/rest/client/CheckedExceptionWithInterceptionTest.java b/integration-tests/rest-client-reactive/src/test/java/io/quarkus/it/rest/client/CheckedExceptionWithInterceptionTest.java\nnew file mode 100644\nindex 0000000000000..eb8a681d40225\n--- /dev/null\n+++ b/integration-tests/rest-client-reactive/src/test/java/io/quarkus/it/rest/client/CheckedExceptionWithInterceptionTest.java\n@@ -0,0 +1,26 @@\n+package io.quarkus.it.rest.client;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import jakarta.inject.Inject;\n+\n+import org.eclipse.microprofile.rest.client.inject.RestClient;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.it.rest.client.main.ClientWithExceptionMapperAndInterceptor;\n+import io.quarkus.it.rest.client.main.MyResponseExceptionMapper;\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+@QuarkusTest\n+public class CheckedExceptionWithInterceptionTest {\n+    @Inject\n+    @RestClient\n+    ClientWithExceptionMapperAndInterceptor client;\n+\n+    @Test\n+    public void test() {\n+        assertThrows(MyResponseExceptionMapper.MyException.class, () -> {\n+            client.get();\n+        });\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48278",
    "pr_id": 48278,
    "issue_id": 48216,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Changing OidcTenantConfig returned from TenantConfigResolver::resolve has no effect\n\n### Discussed in https://github.com/quarkusio/quarkus/discussions/48199\n\n<div type='discussions-op-text'>\n\n<sup>Originally posted by **maag03** June  3, 2025</sup>\nWe're using Quarkus 3.20.0 and a multi-tenant dynamic Oidc setup. As the title says, when returning OidcTenantConfig in TenantConfigResolver::resolve for a tenant with a changed property (e.g. clientId), the changed property seems to be ignored and the initial value is still being used by Quarkus.\r\n\r\nIs this the intented behavior or is it a bug?\r\nAny workaround available?\r\n\r\nBr\r\nMagnus\r\n</div>",
    "issue_word_count": 99,
    "test_files_count": 3,
    "non_test_files_count": 8,
    "pr_changed_files": [
      "docs/src/main/asciidoc/security-openid-connect-multitenancy.adoc",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/TenantConfigResolver.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/DefaultTenantConfigResolver.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/LazyTenantConfigContext.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantConfigBean.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantConfigContext.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantConfigContextImpl.java",
      "integration-tests/oidc-client-registration/src/main/java/io/quarkus/it/keycloak/CustomTenantConfigResolver.java",
      "integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/CustomTenantConfigResolver.java",
      "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/CodeFlowAuthorizationTest.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/oidc-client-registration/src/main/java/io/quarkus/it/keycloak/CustomTenantConfigResolver.java",
      "integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/CustomTenantConfigResolver.java",
      "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/CodeFlowAuthorizationTest.java"
    ],
    "base_commit": "12a9f02f72b4567eee57e017b42a6a8df6280743",
    "head_commit": "806633982f5b67eb7aff0a9c0c86f7c5e7836f0d",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48278",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48278",
    "dockerfile": "",
    "pr_merged_at": "2025-06-10T18:03:38.000Z",
    "patch": "diff --git a/docs/src/main/asciidoc/security-openid-connect-multitenancy.adoc b/docs/src/main/asciidoc/security-openid-connect-multitenancy.adoc\nindex 25cf97c745a5a..470bad3d95cfe 100644\n--- a/docs/src/main/asciidoc/security-openid-connect-multitenancy.adoc\n+++ b/docs/src/main/asciidoc/security-openid-connect-multitenancy.adoc\n@@ -735,6 +735,97 @@ You can populate it by using any settings supported by the `quarkus-oidc` extens\n \n If the dynamic tenant resolver returns `null`, a <<static-tenant-resolution>> is attempted next.\n \n+==== Update resolved dynamic tenant configuration\n+\n+It may be necessary to update the already resolved tenant configuration.\n+For example, a client secret may have to be updated following a client secret update in the registered OIDC application.\n+\n+To update the configuration, use `OidcTenantConfigBuilder` to create a new instance of `OidcTenantConfig` and modify it as required before returning it:\n+\n+[source,java]\n+----\n+package org.acme;\n+\n+import jakarta.enterprise.context.ApplicationScoped;\n+import jakarta.inject.Inject;\n+\n+import io.quarkus.oidc.OidcRequestContext;\n+import io.quarkus.oidc.OidcTenantConfig;\n+import io.quarkus.oidc.TenantConfigResolver;\n+import io.quarkus.oidc.runtime.TenantConfigBean;\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@ApplicationScoped\n+public class CustomTenantConfigResolver implements TenantConfigResolver {\n+\n+    @Inject\n+    TenantConfigBean tenantConfigBean;\n+\n+    @Override\n+    public Uni<OidcTenantConfig> resolve(RoutingContext context, OidcRequestContext<OidcTenantConfig> requestContext) {\n+\n+        // Check request path or request context `tenant-id` property to determine the tenant id.\n+\n+        var currentTenantConfig = tenantConfigBean.getDynamicTenant(\"some-dynamic-tenant-id\").getOidcTenantConfig(); <1>\n+        if (currentTenantConfig != null\n+            && \"name\".equals(currentTenantConfig.token().principalClaim().get())) { <2>\n+            // This is an original configuration, update it now:\n+            OidcTenantConfig updatedConfig = OidcTenantConfig.builder(currentTenantConfig) <3>\n+                                .token().principalClaim(\"email\").end()\n+                                .build();\n+\n+            return Uni.createFrom().item(updatedConfig);\n+        }\n+        // create an initial configuration for the tenant\n+        OidcTenantConfig config = OidcTenantConfig.builder() <4>\n+                                .token().principalClaim(\"name\").end()\n+                                // set other properties\n+                                .build();\n+        return Uni.createFrom().item(config);\n+    }\n+}\n+----\n+<1> Use `io.quarkus.oidc.runtime.TenantConfigBean` to get the already resolved tenant configuration. Alternatively, you can use the tenant `OidcTenantConfig` cached in your resolver.\n+<2> You may want to check if this configuration has already been updated, to avoid multiple redundant updates, for example, due to multliple redirects.\n+<3> Use the resolved configuration to create a builder and update it as required.\n+<4> Create an initial configuration if no configuration already exists.\n+\n+This is all you have to do update the already resolved dynamic tenantr configuration, without having to reconnect to the provider.\n+\n+If reconnecting is necessary, for example, the `UserInfo` endpoint address may have changed for the tenant to rediscover it,\n+then simply set a `RoutingContext` `replace-tenant-configuration-context` property to `true`:\n+\n+[source,java]\n+----\n+@Override\n+public Uni<OidcTenantConfig> resolve(RoutingContext context, OidcRequestContext<OidcTenantConfig> requestContext) {\n+    OidcTenantConfig updatedConfig = OidcTenantConfig.builder(currentTenantConfig)\n+                                    .token().principalClaim(\"email\").end()\n+                                    .build();\n+    context.put(\"replace-tenant-configuration-context\", \"true\"); <1>\n+\n+    return Uni.createFrom().item(updatedConfig);\n+}\n+----\n+<1> Replace the resolved tenant configuration and re-connect to the provider\n+\n+Finally, if you decide to update the resoved configuration while the existing OIDC session is still active, you may to have the session cookie removed and the user re-authenticated to align with the latest tenant configuration requirements. Set a `RoutingContext` `remove-session-cookie` property to `true` if it is necessary:\n+\n+[source,java]\n+----\n+@Override\n+public Uni<OidcTenantConfig> resolve(RoutingContext context, OidcRequestContext<OidcTenantConfig> requestContext) {\n+    OidcTenantConfig updatedConfig = OidcTenantConfig.builder(currentTenantConfig)\n+                                    .token().principalClaim(\"email\").end()\n+                                    .build();\n+    context.put(\"remove-session-cookie\", \"true\"); <1>\n+\n+    return Uni.createFrom().item(updatedConfig);\n+}\n+----\n+<1> Update the tenant configuration, remove the session cookie and triger the user re-authentication. If possible, prefer to get the user log-out first, instead of triggering the re-authentication at the tenant resolution time.\n+\n [[static-tenant-resolution]]\n === Static tenant configuration resolution\n \n@@ -812,9 +903,9 @@ quarkus.oidc.b.tenant-paths=/*/hello <3>\n TIP: Path-matching mechanism works exactly same as in the xref:security-authorize-web-endpoints-reference.adoc#authorization-using-configuration[Authorization using configuration].\n \n [[default-tenant-resolver]]\n-==== Use last request path segment as tenant id\n+==== Use request path segments to find tenant id\n \n-The default resolution for a tenant identifier is convention based, whereby the authentication request must include the tenant identifier in the last segment of the request path.\n+The default resolution for a tenant identifier is convention based, whereby the authentication request must include the tenant identifier in one of the path segments of the request path.\n \n The following `application.properties` example shows how you can configure two tenants named `google` and `github`:\n \n@@ -845,6 +936,7 @@ quarkus.http.auth.permission.login.policy=authenticated\n ----\n \n If the endpoint is running on `http://localhost:8080`, you can also provide UI options for users to log in to either `http://localhost:8080/google` or `http://localhost:8080/github`, without having to add specific `/google` or `/github` JAX-RS resource paths.\n+\n Tenant identifiers are also recorded in the session cookie names after the authentication is completed.\n Therefore, authenticated users can access the secured application area without requiring either the `google` or `github` path values to be included in the secured URL.\n \n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java\nindex ff0eef86499a8..60a7055f813f7 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java\n@@ -3035,11 +3035,9 @@ public static OidcTenantConfigBuilder builder() {\n     }\n \n     /**\n-     * Creates {@link OidcTenantConfigBuilder} builder populated with {@code staticTenantMapping} values.\n-     * You want to use this constructor when you have configured static tenant in the application.properties\n-     * and your dynamic tenant only differ in a couple of the configuration properties.\n+     * Creates {@link OidcTenantConfigBuilder} builder from the existing {@link io.quarkus.oidc.runtime.OidcTenantConfig}\n      *\n-     * @param mapping OidcTenantConfig created by the SmallRye Config; must not be null\n+     * @param mapping existing io.quarkus.oidc.runtime.OidcTenantConfig\n      */\n     public static OidcTenantConfigBuilder builder(io.quarkus.oidc.runtime.OidcTenantConfig mapping) {\n         return new OidcTenantConfigBuilder(mapping);\n@@ -3049,7 +3047,7 @@ public static OidcTenantConfigBuilder builder(io.quarkus.oidc.runtime.OidcTenant\n      * Creates {@link OidcTenantConfig} from the {@code mapping}. This method is more efficient than\n      * the {@link #builder()} method if you don't need to modify the {@code mapping}.\n      *\n-     * @param mapping tenant config as returned from the SmallRye Config; must not be null\n+     * @param mapping existing io.quarkus.oidc.runtime.OidcTenantConfig\n      * @return OidcTenantConfig\n      */\n     public static OidcTenantConfig of(io.quarkus.oidc.runtime.OidcTenantConfig mapping) {\n@@ -3057,7 +3055,7 @@ public static OidcTenantConfig of(io.quarkus.oidc.runtime.OidcTenantConfig mappi\n     }\n \n     /**\n-     * Creates {@link OidcTenantConfigBuilder} builder populated with documented default values.\n+     * Creates {@link OidcTenantConfigBuilder} builder populated with documented default values and the provided base URL.\n      *\n      * @param authServerUrl {@link #authServerUrl()}\n      * @return OidcTenantConfigBuilder builder\n@@ -3067,7 +3065,8 @@ public static OidcTenantConfigBuilder authServerUrl(String authServerUrl) {\n     }\n \n     /**\n-     * Creates {@link OidcTenantConfigBuilder} builder populated with documented default values.\n+     * Creates {@link OidcTenantConfigBuilder} builder populated with documented default values and the provided client\n+     * registration path.\n      *\n      * @param registrationPath {@link #registrationPath()}\n      * @return OidcTenantConfigBuilder builder\n@@ -3077,7 +3076,7 @@ public static OidcTenantConfigBuilder registrationPath(String registrationPath)\n     }\n \n     /**\n-     * Creates {@link OidcTenantConfigBuilder} builder populated with documented default values.\n+     * Creates {@link OidcTenantConfigBuilder} builder populated with documented default values and the provided token path.\n      *\n      * @param tokenPath {@link #tokenPath()}\n      * @return OidcTenantConfigBuilder builder\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/TenantConfigResolver.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/TenantConfigResolver.java\nindex cd5e0b9b668fc..21d555cbd81d0 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/TenantConfigResolver.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/TenantConfigResolver.java\n@@ -11,6 +11,10 @@\n  * Instead of implementing a {@link TenantResolver} that maps the tenant configuration based on an identifier and its\n  * corresponding entry in the application configuration file, beans implementing this interface can dynamically construct the\n  * tenant configuration without having to define each tenant in the application configuration file.\n+ * <p>\n+ * If the resolved tenant configuration must be updated, do not modify it in the resolver because it is not thread-safe.\n+ * Use {@link OidcTenantConfig#builder(io.quarkus.oidc.runtime.OidcTenantConfig)} to copy the resolved configuration,\n+ * modify it as required, and build a new configuration instance instead.\n  */\n public interface TenantConfigResolver {\n \n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/DefaultTenantConfigResolver.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/DefaultTenantConfigResolver.java\nindex 1abeaafadd9a5..5322a8b288842 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/DefaultTenantConfigResolver.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/DefaultTenantConfigResolver.java\n@@ -24,6 +24,7 @@\n import io.quarkus.oidc.TokenStateManager;\n import io.quarkus.oidc.UserInfo;\n import io.quarkus.oidc.UserInfoCache;\n+import io.quarkus.security.AuthenticationFailedException;\n import io.quarkus.security.identity.SecurityIdentity;\n import io.quarkus.security.spi.runtime.BlockingSecurityExecutor;\n import io.quarkus.security.spi.runtime.SecurityEventHelper;\n@@ -37,6 +38,8 @@ public class DefaultTenantConfigResolver {\n     private static final String CURRENT_STATIC_TENANT_ID = \"static.tenant.id\";\n     private static final String CURRENT_STATIC_TENANT_ID_NULL = \"static.tenant.id.null\";\n     private static final String CURRENT_DYNAMIC_TENANT_CONFIG = \"dynamic.tenant.config\";\n+    private static final String REPLACE_TENANT_CONFIG_CONTEXT = \"replace-tenant-configuration-context\";\n+    private static final String REMOVE_SESSION_COOKIE = \"remove-session-cookie\";\n     private final ConcurrentHashMap<String, BackChannelLogoutTokenCache> backChannelLogoutTokens = new ConcurrentHashMap<>();\n     private final BlockingTaskRunner<OidcTenantConfig> blockingRequestContext;\n     private final boolean securityEventObserved;\n@@ -259,13 +262,46 @@ private Uni<TenantConfigContext> getDynamicTenantContext(RoutingContext context)\n \n         return getDynamicTenantConfig(context).chain(new Function<OidcTenantConfig, Uni<? extends TenantConfigContext>>() {\n             @Override\n-            public Uni<? extends TenantConfigContext> apply(OidcTenantConfig tenantConfig) {\n+            public Uni<TenantConfigContext> apply(OidcTenantConfig tenantConfig) {\n                 if (tenantConfig != null) {\n                     var tenantId = tenantConfig.tenantId()\n                             .orElseThrow(() -> new OIDCException(\"Tenant configuration must have tenant id\"));\n                     var tenantContext = tenantConfigBean.getDynamicTenant(tenantId);\n                     if (tenantContext == null) {\n                         return tenantConfigBean.createDynamicTenantContext(tenantConfig);\n+                    } else if (tenantContext.getOidcTenantConfig() != tenantConfig) {\n+\n+                        Uni<TenantConfigContext> dynamicContextUni = null;\n+                        if (Boolean.valueOf(context.get(REPLACE_TENANT_CONFIG_CONTEXT))) {\n+                            // replace the context and reconnect\n+                            dynamicContextUni = tenantConfigBean.replaceDynamicTenantContext(tenantConfig);\n+                        } else {\n+                            // update the context without reconnect\n+                            dynamicContextUni = tenantConfigBean.updateDynamicTenantContext(tenantConfig);\n+                        }\n+                        final Uni<TenantConfigContext> contextUni = dynamicContextUni;\n+                        if (Boolean.valueOf(context.get(REMOVE_SESSION_COOKIE))) {\n+                            final String message = \"\"\"\n+                                    Requesting re-authentication for the tenant %s to align with the new dynamic tenant context requirements.\n+                                    \"\"\"\n+                                    .formatted(tenantId);\n+                            LOG.debug(message);\n+                            // Clear the session cookie using the current configuration\n+                            return Uni.createFrom().item(tenantContext.getOidcTenantConfig())\n+                                    .chain(new Function<OidcTenantConfig, Uni<? extends Void>>() {\n+                                        @Override\n+                                        public Uni<Void> apply(OidcTenantConfig oidcConfig) {\n+                                            OidcUtils.setClearSiteData(context, oidcConfig);\n+                                            return OidcUtils.removeSessionCookie(context, oidcConfig, tokenStateManager.get());\n+                                        }\n+                                    })\n+                                    // Deal with updating or replacing the dynamic context\n+                                    .chain(() -> contextUni)\n+                                    // Finally, request re-authentication\n+                                    .onItem().failWith(() -> new AuthenticationFailedException(message));\n+                        } else {\n+                            return dynamicContextUni;\n+                        }\n                     } else {\n                         return Uni.createFrom().item(tenantContext);\n                     }\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/LazyTenantConfigContext.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/LazyTenantConfigContext.java\nindex 00ccf3ae99319..038d8e68e93d5 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/LazyTenantConfigContext.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/LazyTenantConfigContext.java\n@@ -2,6 +2,7 @@\n \n import java.security.Key;\n import java.util.List;\n+import java.util.Map;\n import java.util.function.Supplier;\n \n import javax.crypto.SecretKey;\n@@ -90,4 +91,9 @@ public Key getTokenDecryptionKey() {\n     public List<OidcRedirectFilter> getOidcRedirectFilters(Redirect.Location loc) {\n         return delegate.getOidcRedirectFilters(loc);\n     }\n+\n+    @Override\n+    public Map<Redirect.Location, List<OidcRedirectFilter>> getLocationToRedirectFilters() {\n+        return delegate.getLocationToRedirectFilters();\n+    }\n }\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantConfigBean.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantConfigBean.java\nindex 18be087d303de..fc987545e680d 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantConfigBean.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantConfigBean.java\n@@ -6,6 +6,8 @@\n \n import jakarta.enterprise.context.spi.CreationalContext;\n \n+import org.jboss.logging.Logger;\n+\n import io.quarkus.arc.BeanDestroyer;\n import io.quarkus.oidc.OidcTenantConfig;\n import io.quarkus.tls.TlsConfigurationRegistry;\n@@ -14,6 +16,8 @@\n \n public final class TenantConfigBean {\n \n+    private static final Logger LOG = Logger.getLogger(TenantConfigBean.class);\n+\n     private final Map<String, TenantConfigContext> staticTenantsConfig;\n     private final Map<String, TenantConfigContext> dynamicTenantsConfig;\n     private final TenantConfigContext defaultTenant;\n@@ -30,7 +34,7 @@ public final class TenantConfigBean {\n                 oidc.getDefaultTenantConfig());\n     }\n \n-    public Uni<TenantConfigContext> createDynamicTenantContext(OidcTenantConfig oidcConfig) {\n+    Uni<TenantConfigContext> createDynamicTenantContext(OidcTenantConfig oidcConfig) {\n         var tenantId = oidcConfig.tenantId().orElseThrow();\n \n         var tenant = dynamicTenantsConfig.get(tenantId);\n@@ -48,6 +52,26 @@ public TenantConfigContext apply(TenantConfigContext t) {\n                 });\n     }\n \n+    Uni<TenantConfigContext> updateDynamicTenantContext(OidcTenantConfig oidcConfig) {\n+        var tenantId = oidcConfig.tenantId().orElseThrow();\n+        var tenant = dynamicTenantsConfig.get(tenantId);\n+        if (tenant != null) {\n+            LOG.debugf(\"Updating the resolved tenant %s configuration with a new configuration\", tenantId);\n+            var newTenant = new TenantConfigContextImpl(tenant, oidcConfig);\n+            dynamicTenantsConfig.put(tenantId, newTenant);\n+            return Uni.createFrom().item(newTenant);\n+        } else {\n+            return createDynamicTenantContext(oidcConfig);\n+        }\n+    }\n+\n+    Uni<TenantConfigContext> replaceDynamicTenantContext(OidcTenantConfig oidcConfig) {\n+        var tenantId = oidcConfig.tenantId().orElseThrow();\n+        LOG.debugf(\"Replacing the resolved tenant %s configuration with a new configuration\", tenantId);\n+        dynamicTenantsConfig.remove(tenantId);\n+        return createDynamicTenantContext(oidcConfig);\n+    }\n+\n     public Map<String, TenantConfigContext> getStaticTenantsConfig() {\n         return staticTenantsConfig;\n     }\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantConfigContext.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantConfigContext.java\nindex f2c581573d3d8..9e610a3cb09ca 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantConfigContext.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantConfigContext.java\n@@ -2,6 +2,7 @@\n \n import java.security.Key;\n import java.util.List;\n+import java.util.Map;\n import java.util.function.Supplier;\n \n import javax.crypto.SecretKey;\n@@ -42,6 +43,8 @@ public sealed interface TenantConfigContext permits TenantConfigContextImpl, Laz\n \n     List<OidcRedirectFilter> getOidcRedirectFilters(Redirect.Location loc);\n \n+    Map<Redirect.Location, List<OidcRedirectFilter>> getLocationToRedirectFilters();\n+\n     /**\n      * Only static tenants that are not {@link #ready()} can and need to be initialized.\n      *\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantConfigContextImpl.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantConfigContextImpl.java\nindex b1aa6e816c038..3fe760e63c05a 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantConfigContextImpl.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantConfigContextImpl.java\n@@ -81,6 +81,22 @@ final class TenantConfigContextImpl implements TenantConfigContext {\n         tokenDecryptionKey = providerIsNoNull(provider) ? createTokenDecryptionKey(provider) : null;\n     }\n \n+    TenantConfigContextImpl(TenantConfigContext tenantConfigContext, OidcTenantConfig oidcConfig) {\n+        this.oidcConfig = oidcConfig;\n+        this.ready = tenantConfigContext.ready();\n+        this.provider = tenantConfigContext.provider();\n+        this.sessionCookieEncryptionKey = tenantConfigContext.getSessionCookieEncryptionKey();\n+        this.stateCookieEncryptionKey = tenantConfigContext.getStateCookieEncryptionKey();\n+        this.internalIdTokenSigningKey = tenantConfigContext.getInternalIdTokenSigningKey();\n+        this.redirectFilters = tenantConfigContext.getLocationToRedirectFilters();\n+        this.tokenDecryptionKey = tenantConfigContext.getTokenDecryptionKey();\n+    }\n+\n+    @Override\n+    public Map<Redirect.Location, List<OidcRedirectFilter>> getLocationToRedirectFilters() {\n+        return redirectFilters;\n+    }\n+\n     private static boolean providerIsNoNull(OidcProvider provider) {\n         return provider != null && provider.client != null;\n     }\n",
    "test_patch": "diff --git a/integration-tests/oidc-client-registration/src/main/java/io/quarkus/it/keycloak/CustomTenantConfigResolver.java b/integration-tests/oidc-client-registration/src/main/java/io/quarkus/it/keycloak/CustomTenantConfigResolver.java\nindex 1e281f0057658..81a3dd0bbb631 100644\n--- a/integration-tests/oidc-client-registration/src/main/java/io/quarkus/it/keycloak/CustomTenantConfigResolver.java\n+++ b/integration-tests/oidc-client-registration/src/main/java/io/quarkus/it/keycloak/CustomTenantConfigResolver.java\n@@ -103,25 +103,36 @@ public Uni<OidcTenantConfig> resolve(RoutingContext routingContext,\n         } else if (routingContext.request().path().endsWith(\"/protected/tenant\")) {\n             return Uni.createFrom().item(createTenantConfig(\"registered-client-tenant\", tenantRegClientOnStartup.metadata()));\n         } else if (routingContext.request().path().endsWith(\"/protected/dynamic\")) {\n-            // New client registration done dynamically at the request time,\n-            // using the same registration endpoint used to register a default client at startup\n-            OidcClientRegistrationConfig clientRegConfig = OidcClientRegistrationConfig.builder()\n-                    .registrationPath(authServerUrl + \"/clients-registrations/openid-connect\")\n-                    .metadata(\"Dynamic Client\", \"http://localhost:8081/protected/dynamic\")\n-                    .build();\n-\n-            return clientRegs.newClientRegistration(clientRegConfig)\n-                    .onItem().transformToUni(cfg -> cfg.registeredClient())\n-                    .onItem().transform(r -> registeredClientDynamically(r));\n+            if (regClientDynamically == null) {\n+                // New client registration done dynamically at the request time,\n+                // using the same registration endpoint used to register a default client at startup\n+                OidcClientRegistrationConfig clientRegConfig = OidcClientRegistrationConfig.builder()\n+                        .registrationPath(authServerUrl + \"/clients-registrations/openid-connect\")\n+                        .metadata(\"Dynamic Client\", \"http://localhost:8081/protected/dynamic\")\n+                        .build();\n+\n+                return clientRegs.newClientRegistration(clientRegConfig)\n+                        .onItem().transformToUni(cfg -> cfg.registeredClient())\n+                        .onItem().transform(r -> registeredClientDynamically(r));\n+            } else {\n+                return Uni.createFrom()\n+                        .item(createTenantConfig(\"registered-client-dynamically\", regClientDynamically.metadata()));\n+            }\n         } else if (routingContext.request().path().endsWith(\"/protected/dynamic-tenant\")) {\n-            // New client registration done dynamically at the request time, using a new configured\n-            // an OIDC tenant specific registration endpoint\n-            OidcClientRegistration tenantClientReg = clientRegs.getClientRegistration(\"dynamic-tenant\");\n-            ClientMetadata metadata = createMetadata(\"http://localhost:8081/protected/dynamic-tenant\",\n-                    \"Dynamic Tenant Client\");\n-\n-            return tenantClientReg.registerClient(metadata)\n-                    .onItem().transform(r -> registeredClientDynamicTenant(r));\n+            if (regClientDynamicTenant == null) {\n+                // New client registration done dynamically at the request time, using a new configured\n+                // an OIDC tenant specific registration endpoint\n+\n+                OidcClientRegistration tenantClientReg = clientRegs.getClientRegistration(\"dynamic-tenant\");\n+                ClientMetadata metadata = createMetadata(\"http://localhost:8081/protected/dynamic-tenant\",\n+                        \"Dynamic Tenant Client\");\n+\n+                return tenantClientReg.registerClient(metadata)\n+                        .onItem().transform(r -> registeredClientDynamicTenant(r));\n+            } else {\n+                return Uni.createFrom()\n+                        .item(createTenantConfig(\"registered-client-dynamic-tenant\", regClientDynamicTenant.metadata()));\n+            }\n         } else if (routingContext.request().path().endsWith(\"/protected/multi1\")) {\n             return Uni.createFrom().item(createTenantConfig(\"registered-client-multi1\",\n                     regClientsMulti.get(\"/protected/multi1\").metadata()));\n\ndiff --git a/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/CustomTenantConfigResolver.java b/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/CustomTenantConfigResolver.java\nindex 9171e9071ba6d..4b74133eca049 100644\n--- a/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/CustomTenantConfigResolver.java\n+++ b/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/CustomTenantConfigResolver.java\n@@ -2,6 +2,7 @@\n \n import java.nio.file.Path;\n import java.time.Duration;\n+import java.util.List;\n import java.util.Map;\n \n import jakarta.enterprise.context.ApplicationScoped;\n@@ -14,6 +15,7 @@\n import io.quarkus.oidc.OidcTenantConfig.Provider;\n import io.quarkus.oidc.TenantConfigResolver;\n import io.quarkus.oidc.runtime.OidcUtils;\n+import io.quarkus.oidc.runtime.TenantConfigBean;\n import io.smallrye.mutiny.Uni;\n import io.vertx.ext.web.RoutingContext;\n \n@@ -24,6 +26,9 @@ public class CustomTenantConfigResolver implements TenantConfigResolver {\n     @ConfigProperty(name = \"keycloak.url\")\n     String keycloakUrl;\n \n+    @Inject\n+    TenantConfigBean tenantConfigBean;\n+\n     @Override\n     public Uni<OidcTenantConfig> resolve(RoutingContext context,\n             OidcRequestContext<OidcTenantConfig> requestContext) {\n@@ -47,11 +52,46 @@ public Uni<OidcTenantConfig> resolve(RoutingContext context,\n             // Expect an already resolved tenant context be used\n             if (path.endsWith(\"code-flow-user-info-dynamic-github\")) {\n                 context.put(\"tenant-config-resolver\", \"true\");\n+\n+                List<String> update = context.queryParam(\"update\");\n+                if (update != null && !update.isEmpty() && \"true\".equals(update.get(0))) {\n+                    var currentTenantConfig = tenantConfigBean.getDynamicTenant(\"code-flow-user-info-dynamic-github\")\n+                            .getOidcTenantConfig();\n+                    if (\"name\".equals(currentTenantConfig.token().principalClaim().get())) {\n+                        // This is the original config\n+                        OidcTenantConfig updatedConfig = OidcTenantConfig.builder(currentTenantConfig)\n+                                .token().principalClaim(\"email\").end()\n+                                .build();\n+                        return Uni.createFrom().item(updatedConfig);\n+                    }\n+                }\n+\n+                List<String> reconnect = context.queryParam(\"reconnect\");\n+                if (reconnect != null && !reconnect.isEmpty() && \"true\".equals(reconnect.get(0))) {\n+\n+                    var currentTenantConfig = tenantConfigBean.getDynamicTenant(\"code-flow-user-info-dynamic-github\")\n+                            .getOidcTenantConfig();\n+                    if (\"email\".equals(currentTenantConfig.token().principalClaim().get())) {\n+                        // This is the config created at the update step\n+                        OidcTenantConfig updatedConfig = OidcTenantConfig.builder(currentTenantConfig)\n+                                .authServerUrl(keycloakUrl + \"/realms/github/\")\n+                                .provider(null)\n+                                .discoveryEnabled(true)\n+                                .authorizationPath(null)\n+                                .userInfoPath(null)\n+                                .tokenPath(null)\n+                                .token().principalClaim(\"personal-email\").end()\n+                                .build();\n+\n+                        context.put(\"replace-tenant-configuration-context\", \"true\");\n+                        context.put(\"remove-session-cookie\", \"true\");\n+                        return Uni.createFrom().item(updatedConfig);\n+                    }\n+                }\n             }\n             return null;\n         }\n         if (path.endsWith(\"code-flow-user-info-dynamic-github\")) {\n-\n             OidcTenantConfig config = new OidcTenantConfig();\n             config.setTenantId(\"code-flow-user-info-dynamic-github\");\n \n\ndiff --git a/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/CodeFlowAuthorizationTest.java b/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/CodeFlowAuthorizationTest.java\nindex 0176d8a10eb18..c8062f9b02ccd 100644\n--- a/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/CodeFlowAuthorizationTest.java\n+++ b/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/CodeFlowAuthorizationTest.java\n@@ -620,6 +620,36 @@ private void doTestCodeFlowUserInfo(String tenantId, long internalIdTokenLifetim\n         }\n     }\n \n+    private void doTestCodeFlowUserInfoDynamicGithubUpdate() throws Exception {\n+        try (final WebClient webClient = createWebClient()) {\n+            HtmlPage htmlPage = webClient.getPage(\"http://localhost:8081/code-flow-user-info-dynamic-github\");\n+\n+            HtmlForm htmlForm = htmlPage.getFormByName(\"form\");\n+            htmlForm.getInputByName(\"username\").type(\"alice\");\n+            htmlForm.getInputByName(\"password\").type(\"alice\");\n+\n+            TextPage textPage = htmlForm.getInputByValue(\"login\").click();\n+            assertEquals(\"alice:alice:alice, cache size: 0, TenantConfigResolver: true\", textPage.getContent());\n+\n+            textPage = webClient.getPage(\"http://localhost:8081/code-flow-user-info-dynamic-github\");\n+            assertEquals(\"alice:alice:alice, cache size: 0, TenantConfigResolver: true\", textPage.getContent());\n+\n+            textPage = webClient.getPage(\"http://localhost:8081/code-flow-user-info-dynamic-github?update=true\");\n+            assertEquals(\"alice@somecompany.com:alice:alice, cache size: 0, TenantConfigResolver: true\", textPage.getContent());\n+\n+            htmlPage = webClient.getPage(\"http://localhost:8081/code-flow-user-info-dynamic-github?reconnect=true\");\n+            htmlForm = htmlPage.getFormByName(\"form\");\n+            htmlForm.getInputByName(\"username\").type(\"alice\");\n+            htmlForm.getInputByName(\"password\").type(\"alice\");\n+\n+            textPage = htmlForm.getInputByValue(\"login\").click();\n+            assertEquals(\"alice@anothercompany.com:alice:alice, cache size: 0, TenantConfigResolver: true\",\n+                    textPage.getContent());\n+\n+            webClient.getCookieManager().clearCookies();\n+        }\n+    }\n+\n     private JsonObject decryptIdToken(WebClient webClient, String tenantId) throws Exception {\n         Cookie sessionCookie = getSessionCookie(webClient, tenantId);\n         assertNotNull(sessionCookie);\n@@ -708,6 +738,30 @@ private void defineCodeFlowAuthorizationOauth2TokenStub() {\n                                         + OidcWiremockTestResource.getAccessToken(\"bob\", Set.of()) + \"\\\"\"\n                                         + \"}\")));\n \n+        wireMockServer.stubFor(\n+                get(urlEqualTo(\"/auth/realms/github/.well-known/openid-configuration\"))\n+                        .willReturn(aResponse()\n+                                .withHeader(\"Content-Type\", \"application/json\")\n+                                .withBody(\"{\\n\" +\n+                                        \"    \\\"authorization_endpoint\\\": \\\"\" + wireMockServer.baseUrl()\n+                                        + \"/auth/realms/quarkus\\\",\" +\n+                                        \"    \\\"jwks_uri\\\": \\\"\" + wireMockServer.baseUrl()\n+                                        + \"/auth/realms/quarkus/protocol/openid-connect/certs\\\",\\n\" +\n+                                        \"    \\\"token_endpoint\\\": \\\"\" + wireMockServer.baseUrl()\n+                                        + \"/auth/realms/quarkus/token\\\",\" +\n+                                        \"    \\\"userinfo_endpoint\\\": \\\"\" + wireMockServer.baseUrl()\n+                                        + \"/auth/realms/github/protocol/openid-connect/userinfo\\\"\"\n+                                        + \"}\")));\n+        wireMockServer.stubFor(\n+                get(urlEqualTo(\"/auth/realms/github/protocol/openid-connect/userinfo\"))\n+                        .withHeader(\"Authorization\", containing(\"Bearer ey\"))\n+                        .willReturn(aResponse()\n+                                .withHeader(\"Content-Type\", \"application/json\")\n+                                .withBody(\"{\\n\"\n+                                        + \"\\\"preferred_username\\\": \\\"alice\\\",\"\n+                                        + \"\\\"personal-email\\\": \\\"alice@anothercompany.com\\\"\"\n+                                        + \"}\")));\n+\n     }\n \n     private void defineCodeFlowUserInfoCachedInIdTokenStub(String expiredRefreshToken) {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48277",
    "pr_id": 48277,
    "issue_id": 48014,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Non-viable test classloader when running a group of tests (Class or Package) in VSCode\n### Describe the bug\n\nIn VSCode, when running a group of tests (all tests in a class or all tests in a package), the tests fail with: \n\n```\norg.junit.jupiter.engine.execution.ConditionEvaluationException: Failed to evaluate condition [io.quarkus.test.junit.QuarkusTestExtension]: Non-viable test classloader, io.quarkus.test.junit.classloading.FacadeClassLoader@1bc715b8. Is this a re-run of a failing test?\n        at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n        at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)\n        at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n        at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)\n        at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n        at java.base/java.util.ArrayList$ArrayListSpliterator.tryAdvance(ArrayList.java:1602)\n        at java.base/java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:129)\n        at java.base/java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:527)\n        at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:513)\n        at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n        at java.base/java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:150)\n        at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n        at java.base/java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:647)\n        at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\nCaused by: java.lang.IllegalStateException: Non-viable test classloader, io.quarkus.test.junit.classloading.FacadeClassLoader@1bc715b8. Is this a re-run of a failing test?\n        at io.quarkus.test.junit.AbstractJvmQuarkusTestExtension.evaluateExecutionCondition(AbstractJvmQuarkusTestExtension.java:169)\n```\n\nIf I run a single test, it passes.\n\nOpening this at the request of @holly-cummins, I'm running into this while working on https://github.com/commonhaus/automation. \n\n- Quarkus 3.22.3\n- Language Support for Java(TM) by Red Hat (1.42.0)\n- Test Runner for Java (0.43.1)\n\n\n### Expected behavior\n\n_No response_\n\n### Actual behavior\n\n_No response_\n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### Quarkus version or git rev\n\n_No response_\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
    "issue_word_count": 376,
    "test_files_count": 1,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/AbstractJvmQuarkusTestExtension.java"
    ],
    "pr_changed_test_files": [
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/AbstractJvmQuarkusTestExtension.java"
    ],
    "base_commit": "0200b142d88094c779b5af6020755fc47bf9572d",
    "head_commit": "ad59a7e6809d100c74588c2533242c0bb7f482aa",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48277",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48277",
    "dockerfile": "",
    "pr_merged_at": "2025-06-09T12:15:58.000Z",
    "patch": "",
    "test_patch": "diff --git a/test-framework/junit5/src/main/java/io/quarkus/test/junit/AbstractJvmQuarkusTestExtension.java b/test-framework/junit5/src/main/java/io/quarkus/test/junit/AbstractJvmQuarkusTestExtension.java\nindex 12dbee5c23db4..32ccb1b8bbdc4 100644\n--- a/test-framework/junit5/src/main/java/io/quarkus/test/junit/AbstractJvmQuarkusTestExtension.java\n+++ b/test-framework/junit5/src/main/java/io/quarkus/test/junit/AbstractJvmQuarkusTestExtension.java\n@@ -160,16 +160,22 @@ public ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext con\n                     .unwrap(SmallRyeConfig.class)\n                     .getConfigMapping(TestConfig.class);\n         } catch (Exception | ServiceConfigurationError e) {\n-            boolean isEclipse = System.getProperty(\"sun.java.command\") != null\n-                    && System.getProperty(\"sun.java.command\").contains(\"JUnit5TestLoader\");\n+            String javaCommand = System.getProperty(\"sun.java.command\");\n+            boolean isEclipse = javaCommand != null\n+                    && javaCommand.contains(\"JUnit5TestLoader\");\n \n             // VS Code has the exact same java command and runner as Eclipse, but needs its own message\n-            boolean isVSCode = isEclipse && System.getProperty(\"java.class.path\").contains(\"vscode\");\n+            boolean isVSCode = isEclipse && (System.getProperty(\"java.class.path\").contains(\"vscode\"));\n+            boolean isMaybeVSCode = isEclipse && (javaCommand.contains(\"testNames\") && javaCommand.contains(\"testNameFile\"));\n \n             if (isVSCode) {\n                 // Will need https://github.com/eclipse-jdt/eclipse.jdt.ui/issues/2257 and a reconsume by VSCode\n                 Log.error(\n                         \"Could not read configuration while evaluating whether to run a test. This is a known issue when running tests in the VS Code IDE. To work around the problem, run individual test methods.\");\n+            } else if (isMaybeVSCode) {\n+                // Will need https://github.com/eclipse-jdt/eclipse.jdt.ui/issues/2257 and a reconsume by VSCode\n+                Log.error(\n+                        \"Could not read configuration while evaluating whether to run a test. It looks like you're probably running tests with VS Code. This is a known issue when running tests in the VS Code IDE. To work around the problem, run individual test methods.\");\n             } else if (isEclipse) {\n                 // Tracked by https://github.com/eclipse-jdt/eclipse.jdt.ui/issues/2257; fixed in Eclipse 4.37\n                 Log.error(\n@@ -185,7 +191,7 @@ public ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext con\n             Log.debug(\"Underlying exception: \" + e);\n             Log.debug(\"Thread Context Classloader: \" + Thread.currentThread().getContextClassLoader());\n             Log.debug(\"The class of the class we use for mapping is \" + TestConfig.class.getClassLoader());\n-            String message = isVSCode\n+            String message = isVSCode || isMaybeVSCode\n                     ? \"Could not execute test class because it was loaded with the wrong classloader by the VS Code test runner. Try running test methods individually instead.\"\n                     : isEclipse\n                             ? \"Could not execute test class because it was loaded with the wrong classloader by the Eclipse test runner. Try running test methods individually, or edit the run configuration and add `-uniqueId [engine:junit-jupiter]/[class:\"\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48275",
    "pr_id": 48275,
    "issue_id": 48244,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Quarkus 3.23.2 tests fail with `java.lang.RuntimeException: Failed to locate <class> among the application dependencies`\n### Describe the bug\n\nWe're not sure what happened, but as of 3.23.2 (3.23.0 still worked perfectly fine), our tests started failing with the following:\n```\njava.lang.RuntimeException: Failed to locate nl/rug/digitallab/themis/assignments/AssignmentsResourceTest.class among the application dependencies\njava.lang.RuntimeException: java.lang.RuntimeException: Failed to locate nl/rug/digitallab/themis/assignments/AssignmentsResourceTest.class among the application dependencies\n\tat io.quarkus.test.junit.QuarkusTestExtension.throwBootFailureException(QuarkusTestExtension.java:667)\n\tat io.quarkus.test.junit.QuarkusTestExtension.interceptTestClassConstructor(QuarkusTestExtension.java:762)\n\tat java.base/java.util.Optional.orElseGet(Optional.java:364)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\nCaused by: java.lang.RuntimeException: Failed to locate nl/rug/digitallab/themis/assignments/AssignmentsResourceTest.class among the application dependencies\n\tat io.quarkus.test.common.PathTestHelper.getTestClassesLocation(PathTestHelper.java:188)\n\tat io.quarkus.test.common.PathTestHelper.getTestClassesLocation(PathTestHelper.java:229)\n\tat io.quarkus.test.junit.QuarkusTestExtension.doJavaStart(QuarkusTestExtension.java:204)\n\tat io.quarkus.test.junit.QuarkusTestExtension.ensureStarted(QuarkusTestExtension.java:641)\n\tat io.quarkus.test.junit.QuarkusTestExtension.beforeAll(QuarkusTestExtension.java:686)\n\t... 1 more\n```\n\n### Expected behavior\n\nOur tests should all pass without any failures\n\n### Actual behavior\n\nWe get a class location exception as of 3.23.2\n\n### How to Reproduce?\n\n1. Clone https://gitlab.com/rug-digitallab/products/themis/themis-core.git\n2. Switch branch to `renovate/digitallabgradlepluginversion` (which includes the Quarkus upgrade)\n3. Try to run `./gradlew test`\n4. Observe the exception\n\n### Output of `uname -a` or `ver`\n\nUbuntu 25.04 Linux 6.14.0-15-generic\n\n### Output of `java -version`\n\nopenjdk version \"21.0.7\" 2025-04-15\n\n### Quarkus version or git rev\n\n3.23.2\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nGradle 8.14.1\n\n### Additional information\n\n_No response_",
    "issue_word_count": 317,
    "test_files_count": 8,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "devtools/gradle/gradle-model/src/main/java/io/quarkus/gradle/tooling/GradleApplicationModelBuilder.java",
      "devtools/gradle/gradle-model/src/main/java/io/quarkus/gradle/tooling/ProjectDescriptorBuilder.java",
      "integration-tests/gradle/pom.xml",
      "integration-tests/gradle/src/main/resources/kotlin-jacoco/build.gradle.kts",
      "integration-tests/gradle/src/main/resources/kotlin-jacoco/gradle.properties",
      "integration-tests/gradle/src/main/resources/kotlin-jacoco/settings.gradle.kts",
      "integration-tests/gradle/src/main/resources/kotlin-jacoco/src/main/kotlin/org/acme/GreetingResource.kt",
      "integration-tests/gradle/src/main/resources/kotlin-jacoco/src/test/kotlin/org/acme/GreetingResourceTest.kt",
      "integration-tests/gradle/src/test/java/io/quarkus/gradle/KotlinJacocoTest.java",
      "integration-tests/gradle/src/test/java/io/quarkus/gradle/builder/QuarkusModelBuilderTest.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/gradle/pom.xml",
      "integration-tests/gradle/src/main/resources/kotlin-jacoco/build.gradle.kts",
      "integration-tests/gradle/src/main/resources/kotlin-jacoco/gradle.properties",
      "integration-tests/gradle/src/main/resources/kotlin-jacoco/settings.gradle.kts",
      "integration-tests/gradle/src/main/resources/kotlin-jacoco/src/main/kotlin/org/acme/GreetingResource.kt",
      "integration-tests/gradle/src/main/resources/kotlin-jacoco/src/test/kotlin/org/acme/GreetingResourceTest.kt",
      "integration-tests/gradle/src/test/java/io/quarkus/gradle/KotlinJacocoTest.java",
      "integration-tests/gradle/src/test/java/io/quarkus/gradle/builder/QuarkusModelBuilderTest.java"
    ],
    "base_commit": "cc4b1f630d5072babb3d998a98f2bc4b177dadf7",
    "head_commit": "0997839f0bdf2b26312f0f95c4be719ca6392136",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48275",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48275",
    "dockerfile": "",
    "pr_merged_at": "2025-06-07T06:26:06.000Z",
    "patch": "diff --git a/devtools/gradle/gradle-model/src/main/java/io/quarkus/gradle/tooling/GradleApplicationModelBuilder.java b/devtools/gradle/gradle-model/src/main/java/io/quarkus/gradle/tooling/GradleApplicationModelBuilder.java\nindex af4ebb32d863e..bfae543ed2fdd 100644\n--- a/devtools/gradle/gradle-model/src/main/java/io/quarkus/gradle/tooling/GradleApplicationModelBuilder.java\n+++ b/devtools/gradle/gradle-model/src/main/java/io/quarkus/gradle/tooling/GradleApplicationModelBuilder.java\n@@ -62,7 +62,6 @@\n import io.quarkus.maven.dependency.DependencyFlags;\n import io.quarkus.maven.dependency.GACT;\n import io.quarkus.maven.dependency.GACTV;\n-import io.quarkus.maven.dependency.GAV;\n import io.quarkus.maven.dependency.ResolvedDependencyBuilder;\n import io.quarkus.paths.PathCollection;\n import io.quarkus.paths.PathList;\n@@ -169,7 +168,8 @@ public static ResolvedDependencyBuilder getProjectArtifact(Project project, bool\n \n         final SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n         final WorkspaceModule.Mutable mainModule = WorkspaceModule.builder()\n-                .setModuleId(new GAV(appArtifact.getGroupId(), appArtifact.getArtifactId(), appArtifact.getVersion()))\n+                .setModuleId(\n+                        WorkspaceModuleId.of(appArtifact.getGroupId(), appArtifact.getArtifactId(), appArtifact.getVersion()))\n                 .setModuleDir(project.getProjectDir().toPath())\n                 .setBuildDir(project.getBuildDir().toPath())\n                 .setBuildFile(project.getBuildFile().toPath());\n@@ -701,6 +701,6 @@ private static ArtifactCoords toArtifactCoords(ResolvedArtifact a) {\n     }\n \n     private static ArtifactKey toAppDependenciesKey(String groupId, String artifactId, String classifier) {\n-        return new GACT(groupId, artifactId, classifier, ArtifactCoords.TYPE_JAR);\n+        return ArtifactKey.of(groupId, artifactId, classifier, ArtifactCoords.TYPE_JAR);\n     }\n }\n\ndiff --git a/devtools/gradle/gradle-model/src/main/java/io/quarkus/gradle/tooling/ProjectDescriptorBuilder.java b/devtools/gradle/gradle-model/src/main/java/io/quarkus/gradle/tooling/ProjectDescriptorBuilder.java\nindex 7deb1d684d97e..7402429f38a42 100644\n--- a/devtools/gradle/gradle-model/src/main/java/io/quarkus/gradle/tooling/ProjectDescriptorBuilder.java\n+++ b/devtools/gradle/gradle-model/src/main/java/io/quarkus/gradle/tooling/ProjectDescriptorBuilder.java\n@@ -1,7 +1,9 @@\n package io.quarkus.gradle.tooling;\n \n import java.io.File;\n+import java.nio.file.Path;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n \n import org.gradle.api.Project;\n@@ -11,7 +13,9 @@\n import org.gradle.api.tasks.SourceSetContainer;\n import org.gradle.api.tasks.SourceSetOutput;\n import org.gradle.api.tasks.bundling.Jar;\n+import org.gradle.api.tasks.testing.Test;\n \n+import io.quarkus.bootstrap.workspace.ArtifactSources;\n import io.quarkus.bootstrap.workspace.DefaultArtifactSources;\n import io.quarkus.bootstrap.workspace.LazySourceDir;\n import io.quarkus.bootstrap.workspace.SourceDir;\n@@ -28,8 +32,8 @@ public static Provider<DefaultProjectDescriptor> buildForApp(Project project) {\n \n     public static void initSourceDirs(Project project, WorkspaceModule.Mutable result) {\n         final SourceSetContainer srcSets = project.getExtensions().getByType(SourceSetContainer.class);\n-        // Here we are checking JARs will be produced, which directories they will use as the source of content\n-        // and figure out which source directories are processed to produce the content of the JARs.\n+        // Here we are iterating through the JARs that will be produced, collecting directories that will be used as sources\n+        // of their content. Then we are figuring out which source directories would be processed to produce the content of the JARs.\n         // It has to be configureEach instead of forEach, apparently to avoid concurrent collection modification in some cases.\n         project.getTasks().withType(Jar.class).configureEach(jarTask -> {\n             final String classifier = jarTask.getArchiveClassifier().get();\n@@ -38,7 +42,7 @@ public static void initSourceDirs(Project project, WorkspaceModule.Mutable resul\n             final List<File> resourcesOutputDirs = new ArrayList<>(2);\n             collectSourceSetOutput(((DefaultCopySpec) jarTask.getRootSpec()), classesDirs, resourcesOutputDirs);\n \n-            final List<SourceDir> sourceDirs = new ArrayList<>(2);\n+            final List<SourceDir> sourceDirs = new ArrayList<>();\n             final List<SourceDir> resourceDirs = new ArrayList<>(2);\n             for (SourceSet srcSet : srcSets) {\n                 for (var classesDir : srcSet.getOutput().getClassesDirs().getFiles()) {\n@@ -49,10 +53,10 @@ public static void initSourceDirs(Project project, WorkspaceModule.Mutable resul\n                     }\n                 }\n \n-                final File resourcesOutputDir = srcSet.getOutput().getResourcesDir();\n-                if (resourcesOutputDirs.contains(resourcesOutputDir)) {\n+                if (resourcesOutputDirs.contains(srcSet.getOutput().getResourcesDir())) {\n+                    var resourcesTarget = srcSet.getOutput().getResourcesDir().toPath();\n                     for (var dir : srcSet.getResources().getSrcDirs()) {\n-                        resourceDirs.add(new LazySourceDir(dir.toPath(), resourcesOutputDir.toPath()));\n+                        resourceDirs.add(new LazySourceDir(dir.toPath(), resourcesTarget));\n                     }\n                 }\n             }\n@@ -61,6 +65,60 @@ public static void initSourceDirs(Project project, WorkspaceModule.Mutable resul\n                 result.addArtifactSources(new DefaultArtifactSources(classifier, sourceDirs, resourceDirs));\n             }\n         });\n+\n+        // This is for the test sources and resources since, by default, they won't be put in JARs\n+        project.getTasks().withType(Test.class).configureEach(testTask -> {\n+            for (SourceSet srcSet : srcSets) {\n+                String classifier = null;\n+                List<SourceDir> testSourcesDirs = Collections.emptyList();\n+                List<SourceDir> testResourcesDirs = Collections.emptyList();\n+                for (var classesDir : srcSet.getOutput().getClassesDirs().getFiles()) {\n+                    if (testTask.getTestClassesDirs().contains(classesDir)) {\n+                        if (classifier == null) {\n+                            classifier = sourceSetNameToClassifier(srcSet.getName());\n+                            if (result.hasSources(classifier)) {\n+                                // this source set should already be present in the module\n+                                break;\n+                            }\n+                        }\n+                        for (var srcDir : srcSet.getAllJava().getSrcDirs()) {\n+                            if (testSourcesDirs.isEmpty()) {\n+                                testSourcesDirs = new ArrayList<>(6);\n+                            }\n+                            testSourcesDirs.add(new LazySourceDir(srcDir.toPath(), classesDir.toPath())); // TODO findGeneratedSourceDir(destDir, sourceSet));\n+                        }\n+                    }\n+                }\n+                if (classifier != null && !testSourcesDirs.isEmpty()) {\n+                    if (srcSet.getOutput().getResourcesDir() != null) {\n+                        final Path resourcesOutputDir = srcSet.getOutput().getResourcesDir().toPath();\n+                        for (var dir : srcSet.getResources().getSrcDirs()) {\n+                            if (testResourcesDirs.isEmpty()) {\n+                                testResourcesDirs = new ArrayList<>(2);\n+                            }\n+                            testResourcesDirs.add(new LazySourceDir(dir.toPath(), resourcesOutputDir));\n+                        }\n+                    }\n+                    result.addArtifactSources(new DefaultArtifactSources(classifier, testSourcesDirs, testResourcesDirs));\n+                }\n+            }\n+        });\n+    }\n+\n+    private static String sourceSetNameToClassifier(String sourceSetName) {\n+        if (SourceSet.TEST_SOURCE_SET_NAME.equals(sourceSetName)) {\n+            return ArtifactSources.TEST;\n+        }\n+        var sb = new StringBuilder(sourceSetName.length() + 2);\n+        for (int i = 0; i < sourceSetName.length(); ++i) {\n+            char original = sourceSetName.charAt(i);\n+            char lowerCase = Character.toLowerCase(original);\n+            if (original != lowerCase) {\n+                sb.append('-');\n+            }\n+            sb.append(lowerCase);\n+        }\n+        return sb.toString();\n     }\n \n     private static void collectSourceSetOutput(DefaultCopySpec spec, List<File> classesDir, List<File> resourcesDir) {\n",
    "test_patch": "diff --git a/integration-tests/gradle/pom.xml b/integration-tests/gradle/pom.xml\nindex 881874ae4991d..8e8f03ef82e5b 100644\n--- a/integration-tests/gradle/pom.xml\n+++ b/integration-tests/gradle/pom.xml\n@@ -124,6 +124,10 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-hibernate-validator</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-jacoco</artifactId>\n+        </dependency>\n         <dependency>\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-jdbc-h2</artifactId>\n@@ -305,6 +309,19 @@\n                 </exclusion>\n             </exclusions>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-jacoco-deployment</artifactId>\n+            <version>${project.version}</version>\n+            <type>pom</type>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>*</groupId>\n+                    <artifactId>*</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n         <dependency>\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-jdbc-h2-deployment</artifactId>\n\ndiff --git a/integration-tests/gradle/src/main/resources/kotlin-jacoco/build.gradle.kts b/integration-tests/gradle/src/main/resources/kotlin-jacoco/build.gradle.kts\nnew file mode 100644\nindex 0000000000000..92cb3b37106ab\n--- /dev/null\n+++ b/integration-tests/gradle/src/main/resources/kotlin-jacoco/build.gradle.kts\n@@ -0,0 +1,44 @@\n+plugins {\n+    kotlin(\"jvm\")\n+    kotlin(\"plugin.allopen\")\n+    id(\"io.quarkus\")\n+}\n+\n+repositories {\n+    mavenCentral()\n+    mavenLocal()\n+}\n+\n+val quarkusPlatformGroupId: String by project\n+val quarkusPlatformArtifactId: String by project\n+val quarkusPlatformVersion: String by project\n+\n+dependencies {\n+    implementation(enforcedPlatform(\"${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}\"))\n+    implementation(\"io.quarkus:quarkus-kotlin\")\n+    implementation(\"org.jetbrains.kotlin:kotlin-stdlib-jdk8\")\n+    implementation(\"io.quarkus:quarkus-arc\")\n+    implementation(\"io.quarkus:quarkus-rest\")\n+    testImplementation(\"io.quarkus:quarkus-jacoco\")\n+    testImplementation(\"io.quarkus:quarkus-junit5\")\n+    testImplementation(\"io.rest-assured:rest-assured\")\n+}\n+\n+group = \"org.acme\"\n+version = \"1.0.0-SNAPSHOT\"\n+\n+tasks.withType<Test> {\n+    systemProperty(\"java.util.logging.manager\", \"org.jboss.logmanager.LogManager\")\n+}\n+allOpen {\n+    annotation(\"jakarta.ws.rs.Path\")\n+    annotation(\"jakarta.enterprise.context.ApplicationScoped\")\n+    annotation(\"jakarta.persistence.Entity\")\n+    annotation(\"io.quarkus.test.junit.QuarkusTest\")\n+}\n+\n+kotlin {\n+    compilerOptions {\n+        javaParameters = true\n+    }\n+}\n\ndiff --git a/integration-tests/gradle/src/main/resources/kotlin-jacoco/gradle.properties b/integration-tests/gradle/src/main/resources/kotlin-jacoco/gradle.properties\nnew file mode 100644\nindex 0000000000000..ac72124304222\n--- /dev/null\n+++ b/integration-tests/gradle/src/main/resources/kotlin-jacoco/gradle.properties\n@@ -0,0 +1,4 @@\n+quarkusPluginId=io.quarkus\n+quarkusPlatformGroupId=io.quarkus\n+quarkusPlatformArtifactId=quarkus-bom\n+kotlinVersion=${kotlin.version}\n\\ No newline at end of file\n\ndiff --git a/integration-tests/gradle/src/main/resources/kotlin-jacoco/settings.gradle.kts b/integration-tests/gradle/src/main/resources/kotlin-jacoco/settings.gradle.kts\nnew file mode 100644\nindex 0000000000000..67a9df3d65a82\n--- /dev/null\n+++ b/integration-tests/gradle/src/main/resources/kotlin-jacoco/settings.gradle.kts\n@@ -0,0 +1,22 @@\n+pluginManagement {\n+    val quarkusPluginVersion: String by settings\n+    val quarkusPluginId: String by settings\n+    val kotlinVersion: String by settings\n+    repositories {\n+        mavenLocal {\n+            content {\n+                includeGroupByRegex(\"io.quarkus.*\")\n+                includeGroup(\"org.hibernate.orm\")\n+            }\n+        }\n+        mavenCentral()\n+        gradlePluginPortal()\n+    }\n+    plugins {\n+        id(quarkusPluginId) version quarkusPluginVersion\n+        kotlin(\"jvm\") version kotlinVersion\n+        kotlin(\"multiplatform\") version kotlinVersion apply false\n+        kotlin(\"plugin.allopen\") version kotlinVersion\n+    }\n+}\n+rootProject.name=\"code-with-quarkus\"\n\ndiff --git a/integration-tests/gradle/src/main/resources/kotlin-jacoco/src/main/kotlin/org/acme/GreetingResource.kt b/integration-tests/gradle/src/main/resources/kotlin-jacoco/src/main/kotlin/org/acme/GreetingResource.kt\nnew file mode 100644\nindex 0000000000000..ed0a0fb8196fe\n--- /dev/null\n+++ b/integration-tests/gradle/src/main/resources/kotlin-jacoco/src/main/kotlin/org/acme/GreetingResource.kt\n@@ -0,0 +1,14 @@\n+package org.acme\n+\n+import jakarta.ws.rs.GET\n+import jakarta.ws.rs.Path\n+import jakarta.ws.rs.Produces\n+import jakarta.ws.rs.core.MediaType\n+\n+@Path(\"/hello\")\n+class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    fun hello() = \"Hello from Quarkus REST\"\n+}\n\\ No newline at end of file\n\ndiff --git a/integration-tests/gradle/src/main/resources/kotlin-jacoco/src/test/kotlin/org/acme/GreetingResourceTest.kt b/integration-tests/gradle/src/main/resources/kotlin-jacoco/src/test/kotlin/org/acme/GreetingResourceTest.kt\nnew file mode 100644\nindex 0000000000000..1c49603bedf51\n--- /dev/null\n+++ b/integration-tests/gradle/src/main/resources/kotlin-jacoco/src/test/kotlin/org/acme/GreetingResourceTest.kt\n@@ -0,0 +1,20 @@\n+package org.acme\n+\n+import io.quarkus.test.junit.QuarkusTest\n+import io.restassured.RestAssured.given\n+import org.hamcrest.CoreMatchers.`is`\n+import org.junit.jupiter.api.Test\n+\n+@QuarkusTest\n+class GreetingResourceTest {\n+\n+    @Test\n+    fun testHelloEndpoint() {\n+        given()\n+          .`when`().get(\"/hello\")\n+          .then()\n+             .statusCode(200)\n+             .body(`is`(\"Hello from Quarkus REST\"))\n+    }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/integration-tests/gradle/src/test/java/io/quarkus/gradle/KotlinJacocoTest.java b/integration-tests/gradle/src/test/java/io/quarkus/gradle/KotlinJacocoTest.java\nnew file mode 100644\nindex 0000000000000..3f8dc3e56b544\n--- /dev/null\n+++ b/integration-tests/gradle/src/test/java/io/quarkus/gradle/KotlinJacocoTest.java\n@@ -0,0 +1,18 @@\n+package io.quarkus.gradle;\n+\n+import java.io.File;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class KotlinJacocoTest extends QuarkusGradleWrapperTestBase {\n+\n+    /**\n+     * This test should probably do more than simply verify a successful command execution.\n+     * It was originally added to make sure the process doesn't fail (which it used to).\n+     */\n+    @Test\n+    public void testFastJarFormatWorks() throws Exception {\n+        final File projectDir = getProjectDir(\"kotlin-jacoco\");\n+        runGradleWrapper(projectDir, \"clean\", \"test\");\n+    }\n+}\n\ndiff --git a/integration-tests/gradle/src/test/java/io/quarkus/gradle/builder/QuarkusModelBuilderTest.java b/integration-tests/gradle/src/test/java/io/quarkus/gradle/builder/QuarkusModelBuilderTest.java\nindex 18eb8e05f88bb..f662b1fc51561 100644\n--- a/integration-tests/gradle/src/test/java/io/quarkus/gradle/builder/QuarkusModelBuilderTest.java\n+++ b/integration-tests/gradle/src/test/java/io/quarkus/gradle/builder/QuarkusModelBuilderTest.java\n@@ -181,7 +181,7 @@ private void assertProjectModule(WorkspaceModule projectModule, File projectDir,\n             assertThat(sourceTree.getRoots()).hasSize(1);\n             assertThat(sourceTree.getRoots().iterator().next()).isEqualTo(projectDir.toPath().resolve(\"src/test/resources\"));\n         } else {\n-            assertThat(projectModule.getTestSources()).isNull();\n+            assertThat(projectModule.getTestSources().isOutputAvailable()).isFalse();\n         }\n     }\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48274",
    "pr_id": 48274,
    "issue_id": 48257,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Quarkus 3.20 LTS does not handle `pom.xml` `quarkus.application.version` the same way as 3.15 LTS\n### Describe the bug\n\nWhen setting `quarkus.application.version` as a property in `pom.xml`, Quarkus versions prior to 3.18 allowed interpolation of other (even dynamically generated) property values. Since 3.18 this no longer works and config property resolution fails.\n\n### Expected behavior\n\nThe configuration property should be resolved the same way that it was previously.\n\n### Actual behavior\n\n```\n2025-06-05 15:41:24,088 INFO  [io.qua.dep.dev.IsolatedDevModeMain] (main) Attempting to start live reload endpoint to recover from previous Quarkus startup failure\nFailed to load config value of type class java.lang.String for: quarkus.application.version\n\n2025-06-05 15:41:25,830 ERROR [io.qua.dep.dev.IsolatedDevModeMain] (vert.x-worker-thread-2) Failed to start quarkus: io.quarkus.dev.appstate.ApplicationStartException: java.lang.RuntimeException: Failed to start quarkus\n\tat io.quarkus.dev.appstate.ApplicationStateNotification.waitForApplicationStart(ApplicationStateNotification.java:63)\n\tat io.quarkus.runner.bootstrap.StartupActionImpl.runMainClass(StartupActionImpl.java:142)\n\tat io.quarkus.deployment.dev.IsolatedDevModeMain.restartApp(IsolatedDevModeMain.java:202)\n\tat io.quarkus.deployment.dev.IsolatedDevModeMain.restartCallback(IsolatedDevModeMain.java:183)\n\tat io.quarkus.deployment.dev.RuntimeUpdatesProcessor.doScan(RuntimeUpdatesProcessor.java:555)\n\tat io.quarkus.deployment.dev.RuntimeUpdatesProcessor.doScan(RuntimeUpdatesProcessor.java:455)\n\tat io.quarkus.vertx.http.runtime.devmode.VertxHttpHotReplacementSetup$6.call(VertxHttpHotReplacementSetup.java:163)\n\tat io.quarkus.vertx.http.runtime.devmode.VertxHttpHotReplacementSetup$6.call(VertxHttpHotReplacementSetup.java:150)\n\tat io.vertx.core.impl.ContextImpl.lambda$executeBlocking$4(ContextImpl.java:192)\n\tat io.vertx.core.impl.ContextInternal.dispatch(ContextInternal.java:270)\n\tat io.vertx.core.impl.ContextImpl$1.execute(ContextImpl.java:221)\n\tat io.vertx.core.impl.WorkerTask.run(WorkerTask.java:56)\n\tat org.jboss.threads.ContextHandler$1.runWith(ContextHandler.java:18)\n\tat org.jboss.threads.EnhancedQueueExecutor$Task.doRunWith(EnhancedQueueExecutor.java:2675)\n\tat org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2654)\n\tat org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1591)\n\tat org.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:11)\n\tat org.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:11)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\nCaused by: java.lang.RuntimeException: Failed to start quarkus\n\tat io.quarkus.runner.ApplicationImpl.doStart(Unknown Source)\n\tat io.quarkus.runtime.Application.start(Application.java:101)\n\tat io.quarkus.runtime.ApplicationLifecycleManager.run(ApplicationLifecycleManager.java:121)\n\tat io.quarkus.runtime.Quarkus.run(Quarkus.java:77)\n\tat io.quarkus.runtime.Quarkus.run(Quarkus.java:48)\n\tat io.quarkus.runtime.Quarkus.run(Quarkus.java:137)\n\tat io.quarkus.runner.GeneratedMain.main(Unknown Source)\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat io.quarkus.runner.bootstrap.StartupActionImpl$1.run(StartupActionImpl.java:116)\n\t... 1 more\nCaused by: jakarta.enterprise.inject.spi.DeploymentException: io.quarkus.runtime.configuration.ConfigurationException: Failed to load config value of type class java.lang.String for: quarkus.application.version\n\n\tat io.quarkus.arc.runtime.ConfigRecorder.validateConfigProperties(ConfigRecorder.java:70)\n\tat io.quarkus.runner.recorded.ConfigBuildStep$validateRuntimeConfigProperty1282080724.deploy_0(Unknown Source)\n\tat io.quarkus.runner.recorded.ConfigBuildStep$validateRuntimeConfigProperty1282080724.deploy(Unknown Source)\n\t... 11 more\n\tSuppressed: java.util.NoSuchElementException: SRCFG00011: Could not expand value app.imageVersionLower in property quarkus.application.version\n\t\tat io.smallrye.config.ExpressionConfigSourceInterceptor$1.accept(ExpressionConfigSourceInterceptor.java:94)\n\t\tat io.smallrye.config.ExpressionConfigSourceInterceptor$1.accept(ExpressionConfigSourceInterceptor.java:71)\n\t\tat io.smallrye.common.expression.ExpressionNode.emit(ExpressionNode.java:22)\n\t\tat io.smallrye.common.expression.Expression.evaluateException(Expression.java:56)\n\t\tat io.smallrye.common.expression.Expression.evaluate(Expression.java:70)\n\t\tat io.smallrye.config.ExpressionConfigSourceInterceptor.getValue(ExpressionConfigSourceInterceptor.java:71)\n\t\tat io.smallrye.config.ExpressionConfigSourceInterceptor.getValue(ExpressionConfigSourceInterceptor.java:45)\n\t\tat io.smallrye.config.SmallRyeConfig$SmallRyeConfigSourceInterceptorContext.proceed(SmallRyeConfig.java:1223)\n\t\tat io.smallrye.config.FallbackConfigSourceInterceptor.getValue(FallbackConfigSourceInterceptor.java:24)\n\t\tat io.smallrye.config.SmallRyeConfig$SmallRyeConfigSourceInterceptorContext.proceed(SmallRyeConfig.java:1223)\n\t\tat io.smallrye.config.SmallRyeConfig.getConfigValue(SmallRyeConfig.java:520)\n\t\tat io.smallrye.config.inject.ConfigProducerUtil.lambda$getConfigValue$2(ConfigProducerUtil.java:170)\n\t\tat io.smallrye.config.SecretKeys.doUnlocked(SecretKeys.java:28)\n\t\tat io.smallrye.config.inject.ConfigProducerUtil.getConfigValue(ConfigProducerUtil.java:170)\n\t\tat io.smallrye.config.inject.ConfigProducerUtil.getValue(ConfigProducerUtil.java:91)\n\t\tat io.quarkus.arc.runtime.ConfigRecorder.validateConfigProperties(ConfigRecorder.java:60)\n\t\t... 13 more\nCaused by: io.quarkus.runtime.configuration.ConfigurationException: Failed to load config value of type class java.lang.String for: quarkus.application.version\n\n\t... 14 more\n```\n\n### How to Reproduce?\n\nSee https://github.com/andrewazores/quarkus-3.20-sysprop-substitution\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### Quarkus version or git rev\n\n_No response_\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\nThe actual use case where I encountered this is in https://github.com/cryostat/cryostat . We use a similar `cryostat.imageVersionLower` trick in the `pom.xml` using the same `build-helper-maven-plugin`. The reason to do that is that we also have this in the `application.properties`:\n\n```\nquarkus.application.name=cryostat\nquarkus.container-image.build=true\nquarkus.container-image.push=false\nquarkus.container-image.registry=quay.io\nquarkus.container-image.group=cryostat\nquarkus.container-image.name=cryostat\nquarkus.container-image.tag=${quarkus.application.version}\nquarkus.container-image.additional-tags=dev,latest\n```\n\nie we want to use a lowercased form of the `pom.xml` `<version>` as a container image tag, ex. `4.1.0-snapshot`. This has been working in Cryostat for a long time, but now that I am upgrading from Quarkus 3.15 to 3.20 I am hitting this issue.",
    "issue_word_count": 914,
    "test_files_count": 2,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "core/deployment/src/main/java/io/quarkus/deployment/configuration/BuildTimeConfigurationReader.java",
      "integration-tests/test-extension/extension/runtime/src/main/java/io/quarkus/extest/runtime/config/TestMappingBuildTimeRunTime.java",
      "integration-tests/test-extension/extension/runtime/src/main/java/io/quarkus/extest/runtime/config/TestMappingRunTime.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/test-extension/extension/runtime/src/main/java/io/quarkus/extest/runtime/config/TestMappingBuildTimeRunTime.java",
      "integration-tests/test-extension/extension/runtime/src/main/java/io/quarkus/extest/runtime/config/TestMappingRunTime.java"
    ],
    "base_commit": "e19d60edcb3c6befd01f3b6da1f498cbddbd7d3a",
    "head_commit": "41f25b122aa4b1dceacb1ad935f40167bd35296d",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48274",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48274",
    "dockerfile": "",
    "pr_merged_at": "2025-06-10T08:21:55.000Z",
    "patch": "diff --git a/core/deployment/src/main/java/io/quarkus/deployment/configuration/BuildTimeConfigurationReader.java b/core/deployment/src/main/java/io/quarkus/deployment/configuration/BuildTimeConfigurationReader.java\nindex 7bdf3cd57e528..fb1531899be62 100644\n--- a/core/deployment/src/main/java/io/quarkus/deployment/configuration/BuildTimeConfigurationReader.java\n+++ b/core/deployment/src/main/java/io/quarkus/deployment/configuration/BuildTimeConfigurationReader.java\n@@ -683,16 +683,16 @@ public void accept(final ConfigSource buildSystem) {\n                 if (buildTimeNames.contains(name)) {\n                     unknownBuildProperties.remove(property);\n                     ConfigValue value = config.getConfigValue(property);\n-                    if (value.getRawValue() != null) {\n-                        allBuildTimeValues.put(value.getNameProfiled(), value.noProblems().withValue(value.getRawValue()));\n+                    if (value.getValue() != null) {\n+                        allBuildTimeValues.put(value.getNameProfiled(), value);\n                     }\n                 }\n                 if (buildTimeRunTimeNames.contains(name)) {\n                     unknownBuildProperties.remove(property);\n                     ConfigValue value = config.getConfigValue(property);\n-                    if (value.getRawValue() != null) {\n-                        allBuildTimeValues.put(value.getNameProfiled(), value.noProblems().withValue(value.getRawValue()));\n-                        buildTimeRunTimeValues.put(value.getNameProfiled(), value.noProblems().withValue(value.getRawValue()));\n+                    if (value.getValue() != null) {\n+                        allBuildTimeValues.put(value.getNameProfiled(), value);\n+                        buildTimeRunTimeValues.put(value.getNameProfiled(), value);\n                     }\n                 }\n                 if (runTimeNames.contains(name)) {\n",
    "test_patch": "diff --git a/integration-tests/test-extension/extension/runtime/src/main/java/io/quarkus/extest/runtime/config/TestMappingBuildTimeRunTime.java b/integration-tests/test-extension/extension/runtime/src/main/java/io/quarkus/extest/runtime/config/TestMappingBuildTimeRunTime.java\nindex 02ba6d32dad96..781a017516036 100644\n--- a/integration-tests/test-extension/extension/runtime/src/main/java/io/quarkus/extest/runtime/config/TestMappingBuildTimeRunTime.java\n+++ b/integration-tests/test-extension/extension/runtime/src/main/java/io/quarkus/extest/runtime/config/TestMappingBuildTimeRunTime.java\n@@ -1,11 +1,8 @@\n package io.quarkus.extest.runtime.config;\n \n-import java.util.Optional;\n-\n import io.quarkus.runtime.annotations.ConfigPhase;\n import io.quarkus.runtime.annotations.ConfigRoot;\n import io.smallrye.config.ConfigMapping;\n-import io.smallrye.config.WithDefault;\n \n @ConfigMapping(prefix = \"quarkus.mapping.btrt\")\n @ConfigRoot(phase = ConfigPhase.BUILD_AND_RUN_TIME_FIXED)\n@@ -15,12 +12,6 @@ public interface TestMappingBuildTimeRunTime {\n      */\n     String value();\n \n-    /**\n-     * A expression value\n-     */\n-    @WithDefault(\"${quarkus.mapping.btrt.expression.value}\")\n-    Optional<String> expression();\n-\n     /**\n      * A nested Group.\n      */\n\ndiff --git a/integration-tests/test-extension/extension/runtime/src/main/java/io/quarkus/extest/runtime/config/TestMappingRunTime.java b/integration-tests/test-extension/extension/runtime/src/main/java/io/quarkus/extest/runtime/config/TestMappingRunTime.java\nindex 432c5c99b8465..04c04fcd68a27 100644\n--- a/integration-tests/test-extension/extension/runtime/src/main/java/io/quarkus/extest/runtime/config/TestMappingRunTime.java\n+++ b/integration-tests/test-extension/extension/runtime/src/main/java/io/quarkus/extest/runtime/config/TestMappingRunTime.java\n@@ -34,6 +34,12 @@ public interface TestMappingRunTime {\n \n     String recordSecret();\n \n+    /**\n+     * A expression value\n+     */\n+    @WithDefault(\"${quarkus.mapping.rt.expression.value}\")\n+    Optional<String> expression();\n+\n     interface Group {\n         /**\n          * A Group value.\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48269",
    "pr_id": 48269,
    "issue_id": 48014,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Non-viable test classloader when running a group of tests (Class or Package) in VSCode\n### Describe the bug\n\nIn VSCode, when running a group of tests (all tests in a class or all tests in a package), the tests fail with: \n\n```\norg.junit.jupiter.engine.execution.ConditionEvaluationException: Failed to evaluate condition [io.quarkus.test.junit.QuarkusTestExtension]: Non-viable test classloader, io.quarkus.test.junit.classloading.FacadeClassLoader@1bc715b8. Is this a re-run of a failing test?\n        at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n        at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)\n        at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n        at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)\n        at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n        at java.base/java.util.ArrayList$ArrayListSpliterator.tryAdvance(ArrayList.java:1602)\n        at java.base/java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:129)\n        at java.base/java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:527)\n        at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:513)\n        at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n        at java.base/java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:150)\n        at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n        at java.base/java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:647)\n        at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\nCaused by: java.lang.IllegalStateException: Non-viable test classloader, io.quarkus.test.junit.classloading.FacadeClassLoader@1bc715b8. Is this a re-run of a failing test?\n        at io.quarkus.test.junit.AbstractJvmQuarkusTestExtension.evaluateExecutionCondition(AbstractJvmQuarkusTestExtension.java:169)\n```\n\nIf I run a single test, it passes.\n\nOpening this at the request of @holly-cummins, I'm running into this while working on https://github.com/commonhaus/automation. \n\n- Quarkus 3.22.3\n- Language Support for Java(TM) by Red Hat (1.42.0)\n- Test Runner for Java (0.43.1)\n\n\n### Expected behavior\n\n_No response_\n\n### Actual behavior\n\n_No response_\n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### Quarkus version or git rev\n\n_No response_\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
    "issue_word_count": 376,
    "test_files_count": 2,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/AbstractJvmQuarkusTestExtension.java",
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/CustomLauncherInterceptor.java"
    ],
    "pr_changed_test_files": [
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/AbstractJvmQuarkusTestExtension.java",
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/CustomLauncherInterceptor.java"
    ],
    "base_commit": "e19d60edcb3c6befd01f3b6da1f498cbddbd7d3a",
    "head_commit": "1e694c6456c2b1fdb3dc3ffe52fc5907a9edb940",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48269",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48269",
    "dockerfile": "",
    "pr_merged_at": "2025-06-06T15:06:10.000Z",
    "patch": "",
    "test_patch": "diff --git a/test-framework/junit5/src/main/java/io/quarkus/test/junit/AbstractJvmQuarkusTestExtension.java b/test-framework/junit5/src/main/java/io/quarkus/test/junit/AbstractJvmQuarkusTestExtension.java\nindex ab4ef8dd9f1fe..12dbee5c23db4 100644\n--- a/test-framework/junit5/src/main/java/io/quarkus/test/junit/AbstractJvmQuarkusTestExtension.java\n+++ b/test-framework/junit5/src/main/java/io/quarkus/test/junit/AbstractJvmQuarkusTestExtension.java\n@@ -162,8 +162,16 @@ public ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext con\n         } catch (Exception | ServiceConfigurationError e) {\n             boolean isEclipse = System.getProperty(\"sun.java.command\") != null\n                     && System.getProperty(\"sun.java.command\").contains(\"JUnit5TestLoader\");\n-            if (isEclipse) {\n-                // Tracked by https://github.com/eclipse-jdt/eclipse.jdt.ui/issues/2257\n+\n+            // VS Code has the exact same java command and runner as Eclipse, but needs its own message\n+            boolean isVSCode = isEclipse && System.getProperty(\"java.class.path\").contains(\"vscode\");\n+\n+            if (isVSCode) {\n+                // Will need https://github.com/eclipse-jdt/eclipse.jdt.ui/issues/2257 and a reconsume by VSCode\n+                Log.error(\n+                        \"Could not read configuration while evaluating whether to run a test. This is a known issue when running tests in the VS Code IDE. To work around the problem, run individual test methods.\");\n+            } else if (isEclipse) {\n+                // Tracked by https://github.com/eclipse-jdt/eclipse.jdt.ui/issues/2257; fixed in Eclipse 4.37\n                 Log.error(\n                         \"Could not read configuration while evaluating whether to run a test. This is a known issue when running tests in the Eclipse IDE. To work around the problem, edit the run configuration and add `-uniqueId [engine:junit-jupiter]/[class:\"\n                                 + context.getRequiredTestClass().getName()\n@@ -177,8 +185,14 @@ public ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext con\n             Log.debug(\"Underlying exception: \" + e);\n             Log.debug(\"Thread Context Classloader: \" + Thread.currentThread().getContextClassLoader());\n             Log.debug(\"The class of the class we use for mapping is \" + TestConfig.class.getClassLoader());\n-            throw new IllegalStateException(\"Non-viable test classloader, \" + Thread.currentThread().getContextClassLoader()\n-                    + \". Is this a re-run of a failing test?\");\n+            String message = isVSCode\n+                    ? \"Could not execute test class because it was loaded with the wrong classloader by the VS Code test runner. Try running test methods individually instead.\"\n+                    : isEclipse\n+                            ? \"Could not execute test class because it was loaded with the wrong classloader by the Eclipse test runner. Try running test methods individually, or edit the run configuration and add `-uniqueId [engine:junit-jupiter]/[class:\"\n+                                    + context.getRequiredTestClass().getName()\n+                                    + \"]` in the program arguments. \"\n+                            : \"Internal error: Test class was loaded with an unexpected classloader or the thread context classloader was incorrect.\";\n+            throw new IllegalStateException(message, e);\n         } finally {\n             if (!isFlatClasspath) {\n                 Thread.currentThread().setContextClassLoader(original);\n\ndiff --git a/test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/CustomLauncherInterceptor.java b/test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/CustomLauncherInterceptor.java\nindex 61de19104e6d3..92933239004e4 100644\n--- a/test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/CustomLauncherInterceptor.java\n+++ b/test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/CustomLauncherInterceptor.java\n@@ -67,6 +67,10 @@ private void initializeFacadeClassLoader() {\n \n     @Override\n     public void launcherDiscoveryStarted(LauncherDiscoveryRequest request) {\n+        // If anything comes through this method for which there are non-null classloaders on the selectors, that will bypass our classloading\n+        // To check that case, the code would be something like this. We could detect and warn early, and possibly even filter that test out, but that's not necessarily a better UX than failing later\n+        // request.getSelectorsByType(ClassSelector.class).stream().map(ClassSelector::getClassLoader) ... and then check for non-emptiness on that field\n+\n         // Do not do any classloading dance for prod mode tests;\n         if (!isProductionModeTests()) {\n             initializeFacadeClassLoader();\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48266",
    "pr_id": 48266,
    "issue_id": 31974,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Address technical debt following integration of Hibernate Reactive 2.0.0.Alpha2\n### Description\n\nFor sake of iterarive development and re-enabling CI monitoring on the Hibernate Reactive modules, we're merging pr #31454 with some pending tasks still open:\r\n\r\n-  Need to investigate test which was disabled in f6584a19443d22b1289d686b29c7dd205323d4c9 ( See comments in `extensions/panache/hibernate-reactive-rest-data-panache/deployment/src/test/java/io/quarkus/hibernate/reactive/rest/data/panache/deployment/openapi/OpenApiIntegrationTest.java`)\r\n- @yrodiere applied some improvements on the Hibernate ORM (blocking) extension to enhanced the Dialect selection, in particular configured versions. We might want to follow up and align the HR extension to this.\r\n- Ideally not ship with an Alpha release? Or flag the extension appropriately as early preview.\r\n- Migration guide work?\n\n### Implementation ideas\n\n_No response_",
    "issue_word_count": 127,
    "test_files_count": 1,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "extensions/panache/hibernate-reactive-rest-data-panache/deployment/src/test/java/io/quarkus/hibernate/reactive/rest/data/panache/deployment/openapi/OpenApiIntegrationTest.java"
    ],
    "pr_changed_test_files": [
      "extensions/panache/hibernate-reactive-rest-data-panache/deployment/src/test/java/io/quarkus/hibernate/reactive/rest/data/panache/deployment/openapi/OpenApiIntegrationTest.java"
    ],
    "base_commit": "2d3e089d706c4482e79c9d891e8d87009899f7fb",
    "head_commit": "431611f329c085276af6d562cada70eb672afcfd",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48266",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48266",
    "dockerfile": "",
    "pr_merged_at": "2025-06-06T10:28:07.000Z",
    "patch": "",
    "test_patch": "diff --git a/extensions/panache/hibernate-reactive-rest-data-panache/deployment/src/test/java/io/quarkus/hibernate/reactive/rest/data/panache/deployment/openapi/OpenApiIntegrationTest.java b/extensions/panache/hibernate-reactive-rest-data-panache/deployment/src/test/java/io/quarkus/hibernate/reactive/rest/data/panache/deployment/openapi/OpenApiIntegrationTest.java\nindex e229014ebc348..4c6a8fb82b2e4 100644\n--- a/extensions/panache/hibernate-reactive-rest-data-panache/deployment/src/test/java/io/quarkus/hibernate/reactive/rest/data/panache/deployment/openapi/OpenApiIntegrationTest.java\n+++ b/extensions/panache/hibernate-reactive-rest-data-panache/deployment/src/test/java/io/quarkus/hibernate/reactive/rest/data/panache/deployment/openapi/OpenApiIntegrationTest.java\n@@ -63,24 +63,20 @@ public void testOpenApiForGeneratedResources() {\n                         is(COLLECTIONS_SCHEMA_REF))\n                 .body(\"paths.'/collections'.post.responses.'201'.content.'application/json'.schema.$ref\",\n                         is(COLLECTIONS_SCHEMA_REF))\n-                // Disabled as it's currently failing - needs investigation\n-                //                .body(\"paths.'/collections'.post.security[0].SecurityScheme\", Matchers.hasItem(\"user\"))\n+                .body(\"paths.'/collections'.post.security[0].SecurityScheme\", Matchers.hasItem(\"user\"))\n                 .body(\"paths.'/collections/{id}'\", Matchers.hasKey(\"get\"))\n                 .body(\"paths.'/collections/{id}'.get.responses.'200'.content.'application/json'.schema.$ref\",\n                         is(COLLECTIONS_SCHEMA_REF))\n-                // Disabled as it's currently failing - needs investigation\n-                //                .body(\"paths.'/collections/{id}'.get.security[0].SecurityScheme\", Matchers.hasItem(\"user\"))\n+                .body(\"paths.'/collections/{id}'.get.security[0].SecurityScheme\", Matchers.hasItem(\"user\"))\n                 .body(\"paths.'/collections/{id}'\", Matchers.hasKey(\"put\"))\n                 .body(\"paths.'/collections/{id}'.put.requestBody.content.'application/json'.schema.$ref\",\n                         is(COLLECTIONS_SCHEMA_REF))\n                 .body(\"paths.'/collections/{id}'.put.responses.'201'.content.'application/json'.schema.$ref\",\n                         is(COLLECTIONS_SCHEMA_REF))\n-                // Disabled as it's currently failing - needs investigation\n-                //                .body(\"paths.'/collections/{id}'.put.security[0].SecurityScheme\", Matchers.hasItem(\"user\"))\n+                .body(\"paths.'/collections/{id}'.put.security[0].SecurityScheme\", Matchers.hasItem(\"user\"))\n                 .body(\"paths.'/collections/{id}'\", Matchers.hasKey(\"delete\"))\n                 .body(\"paths.'/collections/{id}'.delete.responses\", Matchers.hasKey(\"204\"))\n-                // Disabled as it's currently failing - needs investigation\n-                //                .body(\"paths.'/collections/{id}'.delete.security[0].SecurityScheme\", Matchers.hasItem(\"admin\"))\n+                .body(\"paths.'/collections/{id}'.delete.security[0].SecurityScheme\", Matchers.hasItem(\"admin\"))\n                 .body(\"paths.'/empty-list-items'\", Matchers.hasKey(\"get\"))\n                 .body(\"paths.'/empty-list-items'.get.tags\", Matchers.hasItem(\"EmptyListItemsResource\"))\n                 .body(\"paths.'/empty-list-items'\", Matchers.hasKey(\"post\"))\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48258",
    "pr_id": 48258,
    "issue_id": 47656,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Unable to run QuarkusTests in Eclipse since Quarkus 3.22\n### Describe the bug\n\nIn Eclipse IDE, Right click on a file Run As-> Junit fails with the followiing;\n\n```\njava.lang.RuntimeException: Internal error. The test class class org.acme.GreetingResourceTest should have been loaded with a QuarkusClassLoader, but instead it was loaded with jdk.internal.loader.ClassLoaders$AppClassLoader@63c12fb0. This is caused by the FacadeClassLoader not correctly identifying this class as a QuarkusTest.\n\tat io.quarkus.test.junit.QuarkusTestExtension.getClassLoaderFromTestClass(QuarkusTestExtension.java:337)\n\tat io.quarkus.test.junit.QuarkusTestExtension.ensureStarted(QuarkusTestExtension.java:631)\n\tat io.quarkus.test.junit.QuarkusTestExtension.beforeAll(QuarkusTestExtension.java:712)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n```\n\nRunnin a single test from a `@QuarkuTest` works\n\n\n\n### Expected behavior\n\nRunning a full file works\n\n### Actual behavior\n\nExceptions happens\n\n### How to Reproduce?\n\nreproduder: code.quarkus.io and download the default project\n\nSteps to reproduce\n1 - Import the maven project into eclipse\n2- right click on the test class in the package explorer, or on the class name within the editor\n3- Run As-> Junit Test\n\n\n### Output of `uname -a` or `ver`\n\nDarwin Kernel Version 24.4.0\n\n### Output of `java -version`\n\nTemurin-21.0.7+6\n\n### Quarkus version or git rev\n\n22.0.1\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nmvn 3.9.9\n\n### Additional information\n\nRunning a single test seem to work ok.",
    "issue_word_count": 231,
    "test_files_count": 1,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/AbstractJvmQuarkusTestExtension.java"
    ],
    "pr_changed_test_files": [
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/AbstractJvmQuarkusTestExtension.java"
    ],
    "base_commit": "820127faf08a54c1a4fa6eb8261258cf48358869",
    "head_commit": "39b563d21f7d2bb9fd35737ef911869a097ec2f1",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48258",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48258",
    "dockerfile": "",
    "pr_merged_at": "2025-06-06T08:15:26.000Z",
    "patch": "",
    "test_patch": "diff --git a/test-framework/junit5/src/main/java/io/quarkus/test/junit/AbstractJvmQuarkusTestExtension.java b/test-framework/junit5/src/main/java/io/quarkus/test/junit/AbstractJvmQuarkusTestExtension.java\nindex 510b54fe9ba7a..ab4ef8dd9f1fe 100644\n--- a/test-framework/junit5/src/main/java/io/quarkus/test/junit/AbstractJvmQuarkusTestExtension.java\n+++ b/test-framework/junit5/src/main/java/io/quarkus/test/junit/AbstractJvmQuarkusTestExtension.java\n@@ -160,9 +160,20 @@ public ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext con\n                     .unwrap(SmallRyeConfig.class)\n                     .getConfigMapping(TestConfig.class);\n         } catch (Exception | ServiceConfigurationError e) {\n-            // Tracked by https://github.com/quarkusio/quarkus/issues/46048\n-            Log.error(\"Could not read configuration while evaluating whether to run \" + context.getRequiredTestClass()\n-                    + \". This usually happens when re-running a test that has already failed, for example if surefire.rerunFailingTestsCount is set. To work around this limitation, either adjust the test so that it passes, or isolate the test into a project whose tests all use the same combination of @TestProfile and resources.\");\n+            boolean isEclipse = System.getProperty(\"sun.java.command\") != null\n+                    && System.getProperty(\"sun.java.command\").contains(\"JUnit5TestLoader\");\n+            if (isEclipse) {\n+                // Tracked by https://github.com/eclipse-jdt/eclipse.jdt.ui/issues/2257\n+                Log.error(\n+                        \"Could not read configuration while evaluating whether to run a test. This is a known issue when running tests in the Eclipse IDE. To work around the problem, edit the run configuration and add `-uniqueId [engine:junit-jupiter]/[class:\"\n+                                + context.getRequiredTestClass().getName()\n+                                + \"]` in the program arguments. Running the whole package, or running individual test methods, will also work without any extra configuration.\");\n+            } else {\n+                Log.error(\"Internal error: Could not read configuration while evaluating whether to run \"\n+                        + context.getRequiredTestClass()\n+                        + \". Please let the Quarkus team know what you were doing when this error happened.\");\n+\n+            }\n             Log.debug(\"Underlying exception: \" + e);\n             Log.debug(\"Thread Context Classloader: \" + Thread.currentThread().getContextClassLoader());\n             Log.debug(\"The class of the class we use for mapping is \" + TestConfig.class.getClassLoader());\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48246",
    "pr_id": 48246,
    "issue_id": 48218,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Quarkus OIDC Default tenant unable to decrypt state cookie from Google IdP\n### Describe the bug\n\nI am trying to use a Google Account authorization flow to authenticate and identify users using my Quarkus web application (and API). So I have a web app in META-INF/resources and a protected API that serves this web application. This is a corporate setting and I am trying to allow users to sign-in using their corporate Google Account.\n\nI am running into an issue where I end up with a 401 error:\n```\nhttps://<host>/<quarkus.http.root>/auth/callback?state=&code=&scope=email profile https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email openid&authuser=0&hd=<masked>&prompt=consent sent back an error.\n```\n\nI feel like I have literally tried everything I can possibly do based on the documentation, and our Google-side configuration looks correct (at least according to the administrators).\n\nMy application/service configuration looks like the following:\n```\n\n## OIDC Configuration for Admin Tool\nquarkus.oidc.application-type=web-app\nquarkus.oidc.authentication.redirect-path=/myservice/auth/callback\nquarkus.oidc.authentication.restore-path-after-redirect=true\nquarkus.oidc.authentication.cookie-path=/myservice\n#quarkus.oidc.authentication.session-age-extension=P1D\n#quarkus.oidc.authentication.cookie-same-site=lax\n#quarkus.oidc.authentication.cookie-force-secure=true\nquarkus.oidc.authentication.pkce-required=true\nquarkus.oidc.authentication.force-redirect-https-scheme=true\n\n# Add a suffix to avoid tenant resolution conflicts\nquarkus.oidc.authentication.cookie-suffix=admin\n\n# Prevent multiple code flows which can cause state cookie issues\nquarkus.oidc.authentication.allow-multiple-code-flows=false\n\n# Logout configuration - Disabled in favor of custom logout endpoint\n# quarkus.oidc.logout.path=/myservice/logout\n# quarkus.oidc.logout.post-logout-path=/myservice\n\n# Error handler for authentication failures\nquarkus.oidc.authentication.error-path=/myservice/error\n\n# Path-based security configuration\n## Public endpoints (no authentication required)\n# Auth status check endpoint\nquarkus.http.auth.permission.auth-status.paths=/myservice/admin/auth/status\nquarkus.http.auth.permission.auth-status.policy=permit\n\n# OAuth callback endpoint\nquarkus.http.auth.permission.auth-callback.paths=/myservice/auth/callback\nquarkus.http.auth.permission.auth-callback.policy=permit\n\n# Error handler\nquarkus.http.auth.permission.error-handler.paths=/myservice/error\nquarkus.http.auth.permission.error-handler.policy=permit\n\n## Protected endpoints (authentication required)\n# Admin API endpoints - must come AFTER specific public paths above\nquarkus.http.auth.permission.admin-api.paths=/myservice/admin/auth/*,/myservice/admin/teams/*,/myservice/admin/audit/*\nquarkus.http.auth.permission.admin-api.policy=authenticated\n\n## Static resources (public)\n# Admin static files (HTML, CSS, JS) - must come AFTER admin API paths\nquarkus.http.auth.permission.admin-static.paths=/myservice/admin/*\nquarkus.http.auth.permission.admin-static.policy=permit\n```\n\nand also, for the profile I am targeting\n\n```\n# Google OIDC Configuration using SSM for client secret\nquarkus.log.category.\"io.quarkus.oidc\".level=DEBUG\nquarkus.oidc.provider=google\n# Remove explicit auth-server-url to let provider=google auto-configure\n# quarkus.oidc.auth-server-url=https://accounts.google.com\nquarkus.oidc.client-id=<clientid>\nquarkus.oidc.credentials.secret.provider.name=my-ssm-credentials-provider\nquarkus.oidc.credentials.secret.provider.key=/my/dev/admin/google_client_secret\n\n# Google doesn't support standard RP-Initiated Logout (no end_session_endpoint)\n# Using custom logout endpoint instead\n# quarkus.oidc.end-session-path=\n\n# If using Google Groups for roles, configure role mapping\n# quarkus.oidc.roles.source=idtoken\n# quarkus.oidc.roles.role-claim-path=groups\n\n# Set cookie domain to ensure cookies work across the domain\n#quarkus.oidc.authentication.cookie-domain=.dev.mydomain.com\n\n# State cookie encryption with a shared secret for multi-pod environments\n# This ensures all pods can decrypt state cookies created by other pods\nquarkus.oidc.token-state-manager.encryption-secret=dev-secret-key-must-be-32-chars!\n\n# Explicitly set token state manager properties\nquarkus.oidc.token-state-manager.split-tokens=false\nquarkus.oidc.token-state-manager.encryption-required=true\nquarkus.oidc.token-state-manager.encryption-algorithm=dir\n\n# Enable proxy forwarding for AWS ALB\n# This tells Quarkus to trust X-Forwarded-* headers from the load balancer\nquarkus.http.proxy.proxy-address-forwarding=true\nquarkus.http.proxy.allow-forwarded=true\nquarkus.http.proxy.enable-forwarded-host=true\nquarkus.http.proxy.enable-forwarded-prefix=true\n```\n\nAs you can see I've tried various things. But I just cannot get past this ERROR in the service logs:\n```\nERROR\nState cookie value can not be decrypted for the Default tenant\nteams-server\nJun 4, 2025 @ 11:18:59.428\nDEBUG\nState cookie is present, processing an expected redirect from the OIDC provider\nteams-server\nJun 4, 2025 @ 11:18:59.428\nDEBUG\nAuthorization code is present, completing the code flow\nteams-server\nJun 4, 2025 @ 11:18:59.425\nDEBUG\nq_auth_Default_admin cookie set a 'Default' tenant id on the /myservice/auth/callback request path\nteams-server\nJun 4, 2025 @ 11:18:56.667\nERROR\nInvalid Beacon token [CONTEXT ratelimit_period=\"1 MINUTES\" skipped=15 ]\nteams-server\nJun 4, 2025 @ 11:18:54.604\nDEBUG\nCode flow redirect to: https://accounts.google.com/o/oauth2/v2/auth?response_type=code&client_id=&scope=openid+openid+email+profile&redirect_uri=<redacted>&code_challenge=<redacted>&code_challenge_method=S256\nteams-server\nJun 4, 2025 @ 11:18:54.602\nDEBUG\nq_auth_Default_admin cookie 'max-age' parameter is set to 300\nteams-server\nJun 4, 2025 @ 11:18:54.589\nDEBUG\nAuthentication request redirect_uri parameter: https://<myhost>/<myservice>/auth/callback\nteams-server\nJun 4, 2025 @ 11:18:54.587\nDEBUG\nStarting an authentication challenge for tenant Default.\n```\n\nSo whatever I try, I end up with:\nState cookie value can not be decrypted for the Default tenant\n\nIs this some bug in 3.20.1 or am I doing something subtly wrong?\n\n### Expected behavior\n\nThe authorization flow is successful after signing into a Google Account where the Client is set up correctly and the user is redirected back to the Quarkus web application\n\n### Actual behavior\n\n```\nhttps://<host>/<quarkus.http.root>/auth/callback?state=&code=&scope=email profile https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email openid&authuser=0&hd=<masked>&prompt=consent sent back an error.\n```\n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\nAWS EKS\n\n### Output of `java -version`\n\nopenjdk version \"21.0.7\" 2025-04-15 LTS\n\n### Quarkus version or git rev\n\n3.20.1\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
    "issue_word_count": 1045,
    "test_files_count": 2,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java",
      "integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/SecretProvider.java",
      "integration-tests/oidc-wiremock/src/main/resources/application.properties"
    ],
    "pr_changed_test_files": [
      "integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/SecretProvider.java",
      "integration-tests/oidc-wiremock/src/main/resources/application.properties"
    ],
    "base_commit": "8f76625dcd72fc4dd19c30a3b34d081bc2805d04",
    "head_commit": "be8060f89a5b6cc5d138a180932cb261658c8c2c",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48246",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48246",
    "dockerfile": "",
    "pr_merged_at": "2025-06-05T13:03:55.000Z",
    "patch": "diff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\nindex 6ee7ba9062c36..1bfb3a17fa110 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\n@@ -992,8 +992,8 @@ private CodeAuthenticationStateBean getCodeAuthenticationBean(String[] parsedSta\n             try {\n                 json = OidcUtils.decryptJson(parsedStateCookieValue[1], configContext.getStateCookieEncryptionKey());\n             } catch (Exception ex) {\n-                LOG.errorf(\"State cookie value can not be decrypted for the %s tenant\",\n-                        configContext.oidcConfig().tenantId().get());\n+                LOG.errorf(\"State cookie value for the %s tenant can not be decrypted: %s\",\n+                        configContext.oidcConfig().tenantId().get(), ex.getMessage());\n                 throw new AuthenticationCompletionException(ex);\n             }\n             bean.setRestorePath(json.getString(OidcUtils.STATE_COOKIE_RESTORE_PATH));\n@@ -1234,7 +1234,8 @@ private String encodeExtraStateValue(CodeAuthenticationStateBean extraStateValue\n             try {\n                 return OidcUtils.encryptJson(json, configContext.getStateCookieEncryptionKey());\n             } catch (Exception ex) {\n-                LOG.errorf(\"State containing the code verifier can not be encrypted: %s\", ex.getMessage());\n+                LOG.errorf(\"State cookie value for the %s tenant can not be encrypted: %s\",\n+                        configContext.oidcConfig().tenantId().get(), ex.getMessage());\n                 throw new AuthenticationCompletionException(ex);\n             }\n         } else {\n",
    "test_patch": "diff --git a/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/SecretProvider.java b/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/SecretProvider.java\nnew file mode 100644\nindex 0000000000000..9ce0f0138ef97\n--- /dev/null\n+++ b/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/SecretProvider.java\n@@ -0,0 +1,21 @@\n+package io.quarkus.it.keycloak;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import jakarta.enterprise.context.ApplicationScoped;\n+import jakarta.inject.Named;\n+\n+import io.quarkus.credentials.CredentialsProvider;\n+\n+@ApplicationScoped\n+@Named(\"vault-secret-provider\")\n+public class SecretProvider implements CredentialsProvider {\n+\n+    @Override\n+    public Map<String, String> getCredentials(String credentialsProviderName) {\n+        return Collections.singletonMap(\"secret-from-vault\",\n+                \"AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\");\n+    }\n+\n+}\n\ndiff --git a/integration-tests/oidc-wiremock/src/main/resources/application.properties b/integration-tests/oidc-wiremock/src/main/resources/application.properties\nindex ead49974f78dd..6b14e09437f03 100644\n--- a/integration-tests/oidc-wiremock/src/main/resources/application.properties\n+++ b/integration-tests/oidc-wiremock/src/main/resources/application.properties\n@@ -126,7 +126,8 @@ quarkus.oidc.code-flow-user-info-github-cache-disabled.user-info-path=protocol/o\n quarkus.oidc.code-flow-user-info-github-cache-disabled.code-grant.extra-params.extra-param=extra-param-value\n quarkus.oidc.code-flow-user-info-github-cache-disabled.code-grant.headers.X-Custom=XCustomHeaderValue\n quarkus.oidc.code-flow-user-info-github-cache-disabled.client-id=quarkus-web-app\n-quarkus.oidc.code-flow-user-info-github-cache-disabled.credentials.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n+quarkus.oidc.code-flow-user-info-github-cache-disabled.credentials.client-secret.provider.name=vault-secret-provider\n+quarkus.oidc.code-flow-user-info-github-cache-disabled.credentials.client-secret.provider.key=secret-from-vault\n quarkus.oidc.code-flow-user-info-github-cache-disabled.cache-user-info-in-idtoken=false\n quarkus.oidc.code-flow-user-info-github-cache-disabled.allow-user-info-cache=false\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48221",
    "pr_id": 48221,
    "issue_id": 48220,
    "repo": "quarkusio/quarkus",
    "problem_statement": "`ClosedFileSystemException` or `NullPointerException` thrown when `SharedArchivePathTree` is opened and closed concurrently\nThis was originally reported as https://github.com/quarkiverse/quarkus-cxf/issues/1803\n\nWhen a `SharedArchivePathTree` is opened and closed concurrently then in some cases some the following exceptions is thrown:\n\n```\nCaused by: java.lang.NullPointerException: Cannot invoke \"io.quarkus.paths.SharedArchivePathTree$SharedOpenArchivePathTree.writeLock()\" because \"this.delegate\" is null\n        at io.quarkus.paths.SharedArchivePathTree$CallerOpenPathTree.close(SharedArchivePathTree.java:217)\n        at io.quarkus.paths.SharedArchivePathTreeTest.lambda$stress$2(SharedArchivePathTreeTest.java:48)\n        at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)\n        at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)\n        at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)\n        at java.base/java.lang.Thread.run(Thread.java:1583)\n```\n\n```\nCaused by: java.nio.file.ClosedFileSystemException\n        at jdk.zipfs/jdk.nio.zipfs.ZipFileSystem.ensureOpen(ZipFileSystem.java:1635)\n        at jdk.zipfs/jdk.nio.zipfs.ZipFileSystem.newByteChannel(ZipFileSystem.java:971)\n        at jdk.zipfs/jdk.nio.zipfs.ZipPath.newByteChannel(ZipPath.java:870)\n        at jdk.zipfs/jdk.nio.zipfs.ZipFileSystemProvider.newByteChannel(ZipFileSystemProvider.java:247)\n        at java.base/java.nio.file.Files.newByteChannel(Files.java:380)\n        at java.base/java.nio.file.Files.newByteChannel(Files.java:432)\n        at java.base/java.nio.file.Files.readAllBytes(Files.java:3281)\n        at io.quarkus.paths.SharedArchivePathTreeTest.lambda$stress$2(SharedArchivePathTreeTest.java:47)\n```\n\nA PR with a reproducer follows.\n",
    "issue_word_count": 225,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "independent-projects/bootstrap/app-model/src/main/java/io/quarkus/paths/SharedArchivePathTree.java",
      "independent-projects/bootstrap/app-model/src/test/java/io/quarkus/paths/SharedArchivePathTreeTest.java"
    ],
    "pr_changed_test_files": [
      "independent-projects/bootstrap/app-model/src/test/java/io/quarkus/paths/SharedArchivePathTreeTest.java"
    ],
    "base_commit": "6fc85442437b18594a1c91d1cfdc87c7616b313b",
    "head_commit": "7c4df1cf42f4667c17d48ccc9c40f7990af0397b",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48221",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48221",
    "dockerfile": "",
    "pr_merged_at": "2025-06-11T08:37:03.000Z",
    "patch": "diff --git a/independent-projects/bootstrap/app-model/src/main/java/io/quarkus/paths/SharedArchivePathTree.java b/independent-projects/bootstrap/app-model/src/main/java/io/quarkus/paths/SharedArchivePathTree.java\nindex 34e3f21e2a7db..b3d7c02285d7c 100644\n--- a/independent-projects/bootstrap/app-model/src/main/java/io/quarkus/paths/SharedArchivePathTree.java\n+++ b/independent-projects/bootstrap/app-model/src/main/java/io/quarkus/paths/SharedArchivePathTree.java\n@@ -60,11 +60,11 @@ public OpenPathTree open() {\n             }\n         }\n         try {\n-            this.lastOpen = new SharedOpenArchivePathTree(openFs());\n+            lastOpen = this.lastOpen = new SharedOpenArchivePathTree(openFs());\n         } catch (IOException e) {\n             throw new UncheckedIOException(e);\n         }\n-        return new CallerOpenPathTree(this.lastOpen);\n+        return new CallerOpenPathTree(lastOpen);\n     }\n \n     private class SharedOpenArchivePathTree extends OpenArchivePathTree {\n",
    "test_patch": "diff --git a/independent-projects/bootstrap/app-model/src/test/java/io/quarkus/paths/SharedArchivePathTreeTest.java b/independent-projects/bootstrap/app-model/src/test/java/io/quarkus/paths/SharedArchivePathTreeTest.java\nnew file mode 100644\nindex 0000000000000..ee6085febf4d8\n--- /dev/null\n+++ b/independent-projects/bootstrap/app-model/src/test/java/io/quarkus/paths/SharedArchivePathTreeTest.java\n@@ -0,0 +1,85 @@\n+package io.quarkus.paths;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.stream.Stream;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+public class SharedArchivePathTreeTest {\n+    private static final int WORKERS_COUNT = 128;\n+\n+    @Test\n+    void nullPointerException() throws IOException, InterruptedException, ExecutionException {\n+        /* Reproduce https://github.com/quarkusio/quarkus/issues/48220 */\n+        stress((OpenPathTree opened) -> {\n+        });\n+    }\n+\n+    @Test\n+    void closedFileSystemException() throws IOException, InterruptedException, ExecutionException {\n+        /* Reproduce https://github.com/quarkusio/quarkus/issues/48220 */\n+        stress((OpenPathTree opened) -> {\n+            try {\n+                Path p = opened.getPath(\"org/assertj/core/api/Assertions.class\");\n+                Files.readAllBytes(p);\n+            } catch (IOException e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n+    }\n+\n+    static void stress(Consumer<OpenPathTree> consumer) throws IOException {\n+        /* Find assertj-core jar in the class path */\n+        final String rawCp = System.getProperty(\"java.class.path\");\n+        final String assertjCoreJarPath = Stream.of(rawCp.split(System.getProperty(\"path.separator\")))\n+                .filter(p -> p.contains(\"assertj-core\"))\n+                .findFirst()\n+                .orElseThrow(() -> new AssertionError(\"Could not find assertj-core  in \" + rawCp));\n+\n+        /* Create a copy of assertj-core jar in target directory */\n+        final Path assertjCoreJarPathCopy = Path.of(\"target/assertj-core-\" + UUID.randomUUID() + \".jar\");\n+        if (!Files.exists(assertjCoreJarPathCopy.getParent())) {\n+            Files.createDirectories(assertjCoreJarPathCopy.getParent());\n+        }\n+        Files.copy(Path.of(assertjCoreJarPath), assertjCoreJarPathCopy);\n+\n+        /* Now do some concurrent opening and closing of the SharedArchivePathTree instance */\n+        final ArchivePathTree archivePathTree = SharedArchivePathTree.forPath(assertjCoreJarPathCopy);\n+        final ExecutorService executor = Executors.newFixedThreadPool(WORKERS_COUNT);\n+        final List<Future<Void>> futures = new ArrayList<>(WORKERS_COUNT);\n+        try {\n+            for (int i = 0; i < WORKERS_COUNT; i++) {\n+                final Future<Void> f = executor.submit(() -> {\n+                    try (OpenPathTree opened = archivePathTree.open()) {\n+                        consumer.accept(opened);\n+                    }\n+                    return null;\n+                });\n+                futures.add(f);\n+            }\n+\n+            // Ensure all tasks are completed\n+            int i = 0;\n+            for (Future<Void> future : futures) {\n+                Assertions.assertThat(future)\n+                        .describedAs(\"Expected success at iteration %d\", i++)\n+                        .succeedsWithin(30, TimeUnit.SECONDS);\n+            }\n+        } finally {\n+            executor.shutdown();\n+        }\n+    }\n+\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48200",
    "pr_id": 48200,
    "issue_id": 48196,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Infinispan cache does not propagate request context\n### Describe the bug\n\nUsing \n\n```java\n@Path(\"/expensive-resource\")\npublic class ExpensiveResource {\n\n    public static final String EXPENSIVE_RESOURCE_CACHE_NAME = \"expensiveResourceCache\";\n\n    private int invocations;\n\n    @Inject\n    ClientRequestService clientRequestService;\n\n @GET\n    @Path(\"/{keyElement1}/{keyElement2}/{keyElement3}\")\n    @CacheResult(cacheName = EXPENSIVE_RESOURCE_CACHE_NAME, lockTimeout = 5000)\n    public ExpensiveResponse getExpensiveResponse(@PathParam(\"keyElement1\") @CacheKey String keyElement1,\n            @PathParam(\"keyElement2\") @CacheKey String keyElement2, @PathParam(\"keyElement3\") @CacheKey String keyElement3,\n            @QueryParam(\"foo\") String foo) {\n        invocations++;\n        clientRequestService.setData(\"request data\");\n        ExpensiveResponse response = new ExpensiveResponse();\n        response.setResult(keyElement1 + \" \" + keyElement2 + \" \" + keyElement3 + \" too!\");\n        return response;\n    }\n```\n\nwhere \n\n```java\n@RequestScoped\npublic class ClientRequestService {\n    String data;\n\n    public String data() {\n        return data;\n    }\n\n    public ClientRequestService setData(String data) {\n        this.data = data;\n        return this;\n    }\n}\n```\n\n```java\n\n@Provider\npublic class ClientRequestFilter implements jakarta.ws.rs.client.ClientRequestFilter {\n\n    ClientRequestService requestService;\n\n    @Inject\n    public ClientRequestFilter(ClientRequestService requestService) {\n        this.requestService = requestService;\n    }\n\n    @Override\n    public void filter(ClientRequestContext requestContext) {\n        if (requestService != null) {\n            requestContext.getHeaders().add(\"extra\", requestService.data());\n        }\n    }\n}\n```\n\nLeads to a context propagation exception\n\n### Expected behavior\n\n_No response_\n\n### Actual behavior\n\n_No response_\n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### Quarkus version or git rev\n\n_No response_\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
    "issue_word_count": 194,
    "test_files_count": 6,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "extensions/infinispan-cache/runtime/src/main/java/io/quarkus/cache/infinispan/runtime/InfinispanCacheImpl.java",
      "integration-tests/infinispan-cache/src/main/java/io/quarkus/it/cache/infinispan/ClientRequestFilter.java",
      "integration-tests/infinispan-cache/src/main/java/io/quarkus/it/cache/infinispan/ClientRequestService.java",
      "integration-tests/infinispan-cache/src/main/java/io/quarkus/it/cache/infinispan/ExpensiveResource.java",
      "integration-tests/infinispan-cache/src/main/java/io/quarkus/it/cache/infinispan/SunriseRestServerResource.java",
      "integration-tests/infinispan-cache/src/test/java/io/quarkus/it/cache/infinispan/CacheTest.java",
      "integration-tests/infinispan-cache/src/test/java/io/quarkus/it/cache/infinispan/InfinispanCacheClientTestCase.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/infinispan-cache/src/main/java/io/quarkus/it/cache/infinispan/ClientRequestFilter.java",
      "integration-tests/infinispan-cache/src/main/java/io/quarkus/it/cache/infinispan/ClientRequestService.java",
      "integration-tests/infinispan-cache/src/main/java/io/quarkus/it/cache/infinispan/ExpensiveResource.java",
      "integration-tests/infinispan-cache/src/main/java/io/quarkus/it/cache/infinispan/SunriseRestServerResource.java",
      "integration-tests/infinispan-cache/src/test/java/io/quarkus/it/cache/infinispan/CacheTest.java",
      "integration-tests/infinispan-cache/src/test/java/io/quarkus/it/cache/infinispan/InfinispanCacheClientTestCase.java"
    ],
    "base_commit": "4e66327bf46f5cb69b51094fd2e61c32dc7a69f2",
    "head_commit": "9936f541ea698d51ddea1783e6a54db0d0e83280",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48200",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48200",
    "dockerfile": "",
    "pr_merged_at": "2025-06-15T08:06:38.000Z",
    "patch": "diff --git a/extensions/infinispan-cache/runtime/src/main/java/io/quarkus/cache/infinispan/runtime/InfinispanCacheImpl.java b/extensions/infinispan-cache/runtime/src/main/java/io/quarkus/cache/infinispan/runtime/InfinispanCacheImpl.java\nindex cc0ea14720eb6..3fd02b74ff309 100644\n--- a/extensions/infinispan-cache/runtime/src/main/java/io/quarkus/cache/infinispan/runtime/InfinispanCacheImpl.java\n+++ b/extensions/infinispan-cache/runtime/src/main/java/io/quarkus/cache/infinispan/runtime/InfinispanCacheImpl.java\n@@ -3,18 +3,21 @@\n import java.util.Map;\n import java.util.Objects;\n import java.util.Optional;\n+import java.util.concurrent.Callable;\n import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.Executor;\n import java.util.concurrent.Flow;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.BiConsumer;\n import java.util.function.Function;\n import java.util.function.Predicate;\n+import java.util.function.Supplier;\n \n import org.infinispan.client.hotrod.RemoteCache;\n import org.infinispan.client.hotrod.impl.protocol.Codec27;\n import org.infinispan.commons.util.NullValue;\n-import org.infinispan.commons.util.concurrent.CompletionStages;\n import org.reactivestreams.FlowAdapters;\n \n import io.quarkus.arc.Arc;\n@@ -81,78 +84,65 @@ private <T> T decodeNull(Object value) {\n \n     @Override\n     public <K, V> Uni<V> get(K key, Function<K, V> valueLoader) {\n-        return Uni.createFrom()\n-                .completionStage(() -> CompletionStages.handleAndCompose(remoteCache.getAsync(key), (v1, ex1) -> {\n-                    if (ex1 != null) {\n-                        return CompletableFuture.failedFuture(ex1);\n-                    }\n+        Context context = Vertx.currentContext();\n+        Executor executor = duplicateContextExecutor(context);\n \n+        return Uni.createFrom().completionStage(new Supplier<CompletionStage<V>>() {\n+            @Override\n+            public CompletionStage<V> get() {\n+                return remoteCache.getAsync(key);\n+            }\n+        })\n+                .emitOn(executor)\n+                .flatMap(v1 -> {\n                     if (v1 != null) {\n-                        return CompletableFuture.completedFuture(decodeNull(v1));\n+                        return Uni.createFrom()\n+                                .completionStage(new Supplier<CompletionStage<V>>() {\n+                                    @Override\n+                                    public CompletionStage<V> get() {\n+                                        return CompletableFuture.completedFuture(InfinispanCacheImpl.this.decodeNull(v1));\n+                                    }\n+                                })\n+                                .emitOn(executor);\n                     }\n \n                     CompletableFuture<V> resultAsync = new CompletableFuture<>();\n                     CompletableFuture<V> computedValue = computationResults.putIfAbsent(key, resultAsync);\n+\n                     if (computedValue != null) {\n-                        return computedValue;\n+                        return Uni.createFrom().completionStage(computedValue).emitOn(executor);\n+                    }\n+\n+                    if (context != null) {\n+                        return Uni.createFrom().completionStage(new Supplier<CompletionStage<? extends V>>() {\n+                            @Override\n+                            public CompletionStage<? extends V> get() {\n+                                return context.executeBlocking(new Callable<V>() {\n+                                    @Override\n+                                    public V call() throws Exception {\n+                                        return valueLoader.apply(key);\n+                                    }\n+                                }).toCompletionStage()\n+                                        .thenComposeAsync(newValue -> {\n+                                            InfinispanCacheImpl.this.putIfAbsentInInfinispan(key, newValue, resultAsync,\n+                                                    executor);\n+                                            return resultAsync;\n+                                        }, executor);\n+                            }\n+                        });\n                     }\n+\n                     V newValue = valueLoader.apply(key);\n-                    remoteCache\n-                            .putIfAbsentAsync(key, encodeNull(newValue), lifespan, TimeUnit.MILLISECONDS, maxIdle,\n-                                    TimeUnit.MILLISECONDS)\n-                            .whenComplete((existing, ex2) -> {\n-                                if (ex2 != null) {\n-                                    resultAsync.completeExceptionally((Throwable) ex2);\n-                                } else if (existing == null) {\n-                                    resultAsync.complete(newValue);\n-                                } else {\n-                                    resultAsync.complete(decodeNull(existing));\n-                                }\n-                                computationResults.remove(key);\n-                            });\n-                    return resultAsync;\n-                }));\n+                    putIfAbsentInInfinispan(key, newValue, resultAsync, executor);\n+                    return Uni.createFrom().completionStage(resultAsync).emitOn(executor);\n+                });\n     }\n \n     @Override\n     public <K, V> Uni<V> getAsync(K key, Function<K, Uni<V>> valueLoader) {\n         Context context = Vertx.currentContext();\n-\n-        return Uni.createFrom().completionStage(CompletionStages.handleAndCompose(remoteCache.getAsync(key), (v1, ex1) -> {\n-            if (ex1 != null) {\n-                return CompletableFuture.failedFuture(ex1);\n-            }\n-\n-            if (v1 != null) {\n-                return CompletableFuture.completedFuture(decodeNull(v1));\n-            }\n-\n-            CompletableFuture<V> resultAsync = new CompletableFuture<>();\n-            CompletableFuture<V> computedValue = computationResults.putIfAbsent(key, resultAsync);\n-            if (computedValue != null) {\n-                return computedValue;\n-            }\n-            valueLoader.apply(key).convert().toCompletionStage()\n-                    .whenComplete((newValue, ex2) -> {\n-                        if (ex2 != null) {\n-                            resultAsync.completeExceptionally(ex2);\n-                            computationResults.remove(key);\n-                        } else {\n-                            remoteCache.putIfAbsentAsync(key, encodeNull(newValue), lifespan, TimeUnit.MILLISECONDS, maxIdle,\n-                                    TimeUnit.MILLISECONDS).whenComplete((existing, ex3) -> {\n-                                        if (ex3 != null) {\n-                                            resultAsync.completeExceptionally((Throwable) ex3);\n-                                        } else if (existing == null) {\n-                                            resultAsync.complete(newValue);\n-                                        } else {\n-                                            resultAsync.complete(decodeNull(existing));\n-                                        }\n-                                        computationResults.remove(key);\n-                                    });\n-                        }\n-                    });\n-            return resultAsync;\n-        })).emitOn(new Executor() {\n+        Executor executor = duplicateContextExecutor(context);\n+        return Uni.createFrom().completionStage(getFromInfinispanAsync(key, valueLoader, executor)).emitOn(new Executor() {\n             // We need make sure we go back to the original context when the cache value is computed.\n             // Otherwise, we would always emit on the context having computed the value, which could\n             // break the duplicated context isolation.\n@@ -194,17 +184,105 @@ public void handle(Void ignored) {\n                     }\n                 }\n             }\n-        });\n+        }).emitOn(executor);\n+    }\n+\n+    private static Executor duplicateContextExecutor(Context context) {\n+        Executor executor = new Executor() {\n+            @Override\n+            public void execute(Runnable r) {\n+                if (context == null)\n+                    r.run();\n+                else\n+                    context.runOnContext(x -> r.run());\n+            }\n+        };\n+        return executor;\n+    }\n+\n+    private <K, V> CompletionStage<V> getFromInfinispanAsync(K key, Function<K, Uni<V>> valueLoader, Executor executor) {\n+        return remoteCache.getAsync(key)\n+                .exceptionallyAsync(ex -> ex, executor)\n+                .thenApplyAsync(new Function() {\n+                    @Override\n+                    public Object apply(Object v1) {\n+                        if (v1 != null) {\n+                            return CompletableFuture.completedFuture(InfinispanCacheImpl.this.decodeNull(v1));\n+                        }\n+\n+                        CompletableFuture<V> resultAsync = new CompletableFuture<>();\n+                        CompletableFuture<V> computedValue = computationResults.putIfAbsent(key, resultAsync);\n+\n+                        if (computedValue != null) {\n+                            return computedValue;\n+                        }\n+\n+                        valueLoader.apply(key)\n+                                .convert().toCompletionStage()\n+                                .whenCompleteAsync(new BiConsumer<V, Throwable>() {\n+                                    @Override\n+                                    public void accept(V newValue, Throwable ex2) {\n+                                        if (ex2 != null) {\n+                                            resultAsync.completeExceptionally(ex2);\n+                                            computationResults.remove(key);\n+                                        } else {\n+                                            InfinispanCacheImpl.this.putIfAbsentInInfinispan(key, newValue, resultAsync,\n+                                                    executor);\n+                                        }\n+                                    }\n+                                }, executor);\n+                        return resultAsync;\n+                    }\n+                }, executor).thenComposeAsync(new Function() {\n+                    @Override\n+                    public Object apply(Object c) {\n+                        return c;\n+                    }\n+                }, executor);\n+\n+    }\n+\n+    private <K, V> void putIfAbsentInInfinispan(K key, V newValue, CompletableFuture<V> resultAsync, Executor executor) {\n+        remoteCache.putIfAbsentAsync(\n+                key,\n+                encodeNull(newValue),\n+                lifespan, TimeUnit.MILLISECONDS,\n+                maxIdle, TimeUnit.MILLISECONDS).whenCompleteAsync(new BiConsumer<Object, Throwable>() {\n+                    @Override\n+                    public void accept(Object existing, Throwable ex) {\n+                        try {\n+                            if (ex != null) {\n+                                resultAsync.completeExceptionally(ex);\n+                            } else if (existing == null) {\n+                                resultAsync.complete(newValue);\n+                            } else {\n+                                resultAsync.complete(InfinispanCacheImpl.this.decodeNull(existing));\n+                            }\n+                        } finally {\n+                            computationResults.remove(key);\n+                        }\n+                    }\n+                }, executor);\n     }\n \n     @Override\n     public Uni<Void> invalidate(Object key) {\n-        return Uni.createFrom().completionStage(() -> remoteCache.removeAsync(key));\n+        return Uni.createFrom().completionStage(new Supplier<CompletionStage<Void>>() {\n+            @Override\n+            public CompletionStage<Void> get() {\n+                return remoteCache.removeAsync(key);\n+            }\n+        });\n     }\n \n     @Override\n     public Uni<Void> invalidateAll() {\n-        return Uni.createFrom().completionStage(() -> remoteCache.clearAsync());\n+        return Uni.createFrom().completionStage(new Supplier<CompletionStage<Void>>() {\n+            @Override\n+            public CompletionStage<Void> get() {\n+                return remoteCache.clearAsync();\n+            }\n+        });\n     }\n \n     @Override\n",
    "test_patch": "diff --git a/integration-tests/infinispan-cache/src/main/java/io/quarkus/it/cache/infinispan/ClientRequestFilter.java b/integration-tests/infinispan-cache/src/main/java/io/quarkus/it/cache/infinispan/ClientRequestFilter.java\nnew file mode 100644\nindex 0000000000000..6f5cf69912a53\n--- /dev/null\n+++ b/integration-tests/infinispan-cache/src/main/java/io/quarkus/it/cache/infinispan/ClientRequestFilter.java\n@@ -0,0 +1,23 @@\n+package io.quarkus.it.cache.infinispan;\n+\n+import jakarta.inject.Inject;\n+import jakarta.ws.rs.client.ClientRequestContext;\n+import jakarta.ws.rs.ext.Provider;\n+\n+@Provider\n+public class ClientRequestFilter implements jakarta.ws.rs.client.ClientRequestFilter {\n+\n+    ClientRequestService requestService;\n+\n+    @Inject\n+    public ClientRequestFilter(ClientRequestService requestService) {\n+        this.requestService = requestService;\n+    }\n+\n+    @Override\n+    public void filter(ClientRequestContext requestContext) {\n+        if (requestService != null && requestService.data() != null) {\n+            requestContext.getHeaders().add(\"extra\", requestService.data());\n+        }\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/integration-tests/infinispan-cache/src/main/java/io/quarkus/it/cache/infinispan/ClientRequestService.java b/integration-tests/infinispan-cache/src/main/java/io/quarkus/it/cache/infinispan/ClientRequestService.java\nnew file mode 100644\nindex 0000000000000..1ff22753b5b64\n--- /dev/null\n+++ b/integration-tests/infinispan-cache/src/main/java/io/quarkus/it/cache/infinispan/ClientRequestService.java\n@@ -0,0 +1,17 @@\n+package io.quarkus.it.cache.infinispan;\n+\n+import jakarta.enterprise.context.RequestScoped;\n+\n+@RequestScoped\n+public class ClientRequestService {\n+    String data;\n+\n+    public String data() {\n+        return data;\n+    }\n+\n+    public ClientRequestService setData(String data) {\n+        this.data = data;\n+        return this;\n+    }\n+}\n\ndiff --git a/integration-tests/infinispan-cache/src/main/java/io/quarkus/it/cache/infinispan/ExpensiveResource.java b/integration-tests/infinispan-cache/src/main/java/io/quarkus/it/cache/infinispan/ExpensiveResource.java\nindex 326c01a3c7b45..135585c694aa6 100644\n--- a/integration-tests/infinispan-cache/src/main/java/io/quarkus/it/cache/infinispan/ExpensiveResource.java\n+++ b/integration-tests/infinispan-cache/src/main/java/io/quarkus/it/cache/infinispan/ExpensiveResource.java\n@@ -2,39 +2,71 @@\n \n import java.util.concurrent.atomic.AtomicInteger;\n \n+import jakarta.inject.Inject;\n+import jakarta.ws.rs.DELETE;\n import jakarta.ws.rs.GET;\n-import jakarta.ws.rs.POST;\n import jakarta.ws.rs.Path;\n import jakarta.ws.rs.PathParam;\n import jakarta.ws.rs.QueryParam;\n+import jakarta.ws.rs.core.Response;\n \n import org.infinispan.protostream.GeneratedSchema;\n import org.infinispan.protostream.annotations.Proto;\n import org.infinispan.protostream.annotations.ProtoSchema;\n \n+import io.quarkus.cache.CacheInvalidate;\n import io.quarkus.cache.CacheInvalidateAll;\n import io.quarkus.cache.CacheKey;\n import io.quarkus.cache.CacheResult;\n+import io.smallrye.mutiny.Uni;\n \n @Path(\"/expensive-resource\")\n public class ExpensiveResource {\n \n     private final AtomicInteger invocations = new AtomicInteger(0);\n \n+    @Inject\n+    ClientRequestService requestService;\n+\n     @GET\n     @Path(\"/{keyElement1}/{keyElement2}/{keyElement3}\")\n     @CacheResult(cacheName = \"expensiveResourceCache\")\n     public ExpensiveResponse getExpensiveResponse(@PathParam(\"keyElement1\") @CacheKey String keyElement1,\n-            @PathParam(\"keyElement2\") @CacheKey String keyElement2, @PathParam(\"keyElement3\") @CacheKey String keyElement3,\n+            @PathParam(\"keyElement2\") @CacheKey String keyElement2,\n+            @PathParam(\"keyElement3\") @CacheKey String keyElement3,\n             @QueryParam(\"foo\") String foo) {\n         invocations.incrementAndGet();\n+        requestService.setData(\"getExpensiveResponse \" + foo);\n         return new ExpensiveResponse(keyElement1 + \" \" + keyElement2 + \" \" + keyElement3 + \" too!\");\n     }\n \n-    @POST\n+    @GET\n+    @Path(\"/async/{keyElement1}/{keyElement2}/{keyElement3}\")\n+    @CacheResult(cacheName = \"expensiveResourceCache\")\n+    public Uni<ExpensiveResponse> getExpensiveResponseAsync(@PathParam(\"keyElement1\") @CacheKey String keyElement1,\n+            @PathParam(\"keyElement2\") @CacheKey String keyElement2,\n+            @PathParam(\"keyElement3\") @CacheKey String keyElement3,\n+            @QueryParam(\"foo\") String foo) {\n+        invocations.incrementAndGet();\n+        requestService.setData(\"getExpensiveResponseAsync \" + foo);\n+        return Uni.createFrom()\n+                .item(new ExpensiveResponse(keyElement1 + \" \" + keyElement2 + \" \" + keyElement3 + \" async too!\"));\n+    }\n+\n+    @DELETE\n+    @Path(\"/{keyElement1}/{keyElement2}/{keyElement3}\")\n+    @CacheInvalidate(cacheName = \"expensiveResourceCache\")\n+    public Response resetExpensiveResponse(@PathParam(\"keyElement1\") @CacheKey String keyElement1,\n+            @PathParam(\"keyElement2\") @CacheKey String keyElement2, @PathParam(\"keyElement3\") @CacheKey String keyElement3,\n+            @QueryParam(\"foo\") String foo) {\n+        requestService.setData(\"invalidate\");\n+        return Response.ok().build();\n+    }\n+\n+    @DELETE\n     @CacheInvalidateAll(cacheName = \"expensiveResourceCache\")\n     public void invalidateAll() {\n-\n+        requestService.setData(\"invalidateAll\");\n     }\n \n     @GET\n\ndiff --git a/integration-tests/infinispan-cache/src/main/java/io/quarkus/it/cache/infinispan/SunriseRestServerResource.java b/integration-tests/infinispan-cache/src/main/java/io/quarkus/it/cache/infinispan/SunriseRestServerResource.java\nindex fb21d7c9e7e91..8c48426cbf9e1 100644\n--- a/integration-tests/infinispan-cache/src/main/java/io/quarkus/it/cache/infinispan/SunriseRestServerResource.java\n+++ b/integration-tests/infinispan-cache/src/main/java/io/quarkus/it/cache/infinispan/SunriseRestServerResource.java\n@@ -1,6 +1,9 @@\n package io.quarkus.it.cache.infinispan;\n \n+import java.util.concurrent.atomic.AtomicInteger;\n+\n import jakarta.enterprise.context.ApplicationScoped;\n+import jakarta.inject.Inject;\n import jakarta.ws.rs.DELETE;\n import jakarta.ws.rs.GET;\n import jakarta.ws.rs.Path;\n@@ -12,30 +15,37 @@\n @Path(\"sunrise\")\n public class SunriseRestServerResource {\n \n-    private int sunriseTimeInvocations;\n+    private final AtomicInteger invocations = new AtomicInteger(0);\n+\n+    @Inject\n+    ClientRequestService requestService;\n \n     @GET\n     @Path(\"time/{city}\")\n     public String getSunriseTime(@RestPath String city, @RestQuery String date) {\n-        sunriseTimeInvocations++;\n+        invocations.incrementAndGet();\n+        requestService.setData(city);\n         return \"2020-12-20T10:15:30\";\n     }\n \n     @GET\n     @Path(\"invocations\")\n     public Integer getSunriseTimeInvocations() {\n-        return sunriseTimeInvocations;\n+        requestService.setData(\"invocations\");\n+        return invocations.get();\n     }\n \n     @DELETE\n     @Path(\"invalidate/{city}\")\n     public void invalidate(@RestPath String city, @RestQuery String notPartOfTheCacheKey, @RestQuery String date) {\n         // Do nothing. We only need to test the caching annotation on the client side.\n+        requestService.setData(\"invalidate \" + city);\n     }\n \n     @DELETE\n     @Path(\"invalidate\")\n     public void invalidateAll() {\n         // Do nothing. We only need to test the caching annotation on the client side.\n+        requestService.setData(\"invalidate all\");\n     }\n }\n\ndiff --git a/integration-tests/infinispan-cache/src/test/java/io/quarkus/it/cache/infinispan/CacheTest.java b/integration-tests/infinispan-cache/src/test/java/io/quarkus/it/cache/infinispan/CacheTest.java\nindex b5a73d4558a6f..af822e8c1785e 100644\n--- a/integration-tests/infinispan-cache/src/test/java/io/quarkus/it/cache/infinispan/CacheTest.java\n+++ b/integration-tests/infinispan-cache/src/test/java/io/quarkus/it/cache/infinispan/CacheTest.java\n@@ -12,22 +12,46 @@ public class CacheTest {\n \n     @Test\n     public void testCache() {\n-        runExpensiveRequest();\n-        runExpensiveRequest();\n-        runExpensiveRequest();\n+        when().get(\"/expensive-resource/invocations\").then().statusCode(200).body(is(\"0\"));\n+        runGetExpensiveRequest();\n+        runGetExpensiveRequest();\n+        runGetExpensiveRequest();\n         when().get(\"/expensive-resource/invocations\").then().statusCode(200).body(is(\"1\"));\n \n+        runDeleteExpensiveRequest();\n+\n+        runGetExpensiveRequestAsync();\n+        runGetExpensiveRequestAsync();\n+        runGetExpensiveRequestAsync();\n+\n+        when().get(\"/expensive-resource/invocations\").then().statusCode(200).body(is(\"2\"));\n+\n         when()\n-                .post(\"/expensive-resource\")\n+                .delete(\"/expensive-resource\")\n                 .then()\n                 .statusCode(204);\n     }\n \n-    private void runExpensiveRequest() {\n+    private void runGetExpensiveRequest() {\n         when()\n                 .get(\"/expensive-resource/I/love/Quarkus?foo=bar\")\n                 .then()\n                 .statusCode(200)\n                 .body(\"result\", is(\"I love Quarkus too!\"));\n     }\n+\n+    private void runGetExpensiveRequestAsync() {\n+        when()\n+                .get(\"/expensive-resource/async/I/love/Quarkus?foo=bar\")\n+                .then()\n+                .statusCode(200)\n+                .body(\"result\", is(\"I love Quarkus async too!\"));\n+    }\n+\n+    private void runDeleteExpensiveRequest() {\n+        when()\n+                .delete(\"/expensive-resource/I/love/Quarkus?foo=bar\")\n+                .then()\n+                .statusCode(200);\n+    }\n }\n\ndiff --git a/integration-tests/infinispan-cache/src/test/java/io/quarkus/it/cache/infinispan/InfinspanCacheClientTestCase.java b/integration-tests/infinispan-cache/src/test/java/io/quarkus/it/cache/infinispan/InfinispanCacheClientTestCase.java\nsimilarity index 98%\nrename from integration-tests/infinispan-cache/src/test/java/io/quarkus/it/cache/infinispan/InfinspanCacheClientTestCase.java\nrename to integration-tests/infinispan-cache/src/test/java/io/quarkus/it/cache/infinispan/InfinispanCacheClientTestCase.java\nindex ccfa3c8dd5fc8..7b99d19ba2a38 100644\n--- a/integration-tests/infinispan-cache/src/test/java/io/quarkus/it/cache/infinispan/InfinspanCacheClientTestCase.java\n+++ b/integration-tests/infinispan-cache/src/test/java/io/quarkus/it/cache/infinispan/InfinispanCacheClientTestCase.java\n@@ -13,7 +13,7 @@\n \n @QuarkusTest\n @DisplayName(\"Tests the integration between the infinispan cache and the rest-client extensions\")\n-public class InfinspanCacheClientTestCase {\n+public class InfinispanCacheClientTestCase {\n \n     private static final String CITY = \"Toulouse\";\n     private static final String TODAY = \"2020-12-20\";\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48177",
    "pr_id": 48177,
    "issue_id": 47588,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Unnecessary eager creation of Json and XML mappers in hibernate-orm extension\n### Description\n\nIn order to implement [this feature](https://quarkus.io/guides/hibernate-orm#json_xml_serialization_deserialization), the `hibernate-orm` extension eagerly triggers the creation of Json and XML mappers [here](https://github.com/quarkusio/quarkus/blob/4258e6052f5d8d40388922936ca015923576a767/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/boot/FastBootMetadataBuilder.java#L400). \n\nThis eager initialization is also the cause of the issue reported [here](https://github.com/quarkusio/quarkus/issues/47571). As discussed with @lucamolteni, I can probably fix that problem in a different and more robust way (and I'm going to try to implement his suggestion right now), but in all cases it would be better I believe that it would be better (also to improve the startup time) to avoid those eager initializations if possible.",
    "issue_word_count": 139,
    "test_files_count": 3,
    "non_test_files_count": 11,
    "pr_changed_files": [
      "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmConfig.java",
      "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java",
      "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/util/HibernateProcessorUtil.java",
      "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/FastBootHibernatePersistenceProvider.java",
      "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/JPAConfig.java",
      "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/boot/FastBootEntityManagerFactoryBuilder.java",
      "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/customized/BuiltinFormatMapperBehaviour.java",
      "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/recording/RecordedConfig.java",
      "extensions/hibernate-reactive/deployment/src/main/java/io/quarkus/hibernate/reactive/deployment/HibernateReactiveProcessor.java",
      "extensions/hibernate-reactive/runtime/src/main/java/io/quarkus/hibernate/reactive/runtime/FastBootHibernateReactivePersistenceProvider.java",
      "extensions/hibernate-reactive/runtime/src/main/java/io/quarkus/hibernate/reactive/runtime/boot/FastBootReactiveEntityManagerFactoryBuilder.java",
      "integration-tests/jpa-postgresql/src/main/java/io/quarkus/it/jpa/postgresql/JPAFunctionalityTestEndpoint.java",
      "integration-tests/jpa-postgresql/src/main/java/io/quarkus/it/jpa/postgresql/defaultpu/EntityWithJson.java",
      "integration-tests/jpa-postgresql/src/main/java/io/quarkus/it/jpa/postgresql/defaultpu/SomeEmbeddable.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/jpa-postgresql/src/main/java/io/quarkus/it/jpa/postgresql/JPAFunctionalityTestEndpoint.java",
      "integration-tests/jpa-postgresql/src/main/java/io/quarkus/it/jpa/postgresql/defaultpu/EntityWithJson.java",
      "integration-tests/jpa-postgresql/src/main/java/io/quarkus/it/jpa/postgresql/defaultpu/SomeEmbeddable.java"
    ],
    "base_commit": "3e365d679dbd8986721da23d2c070b43ea63e7fb",
    "head_commit": "2f7b1849056e0db5f1b8101654d9bdd97eadd2ef",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48177",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48177",
    "dockerfile": "",
    "pr_merged_at": "2025-06-16T11:12:12.000Z",
    "patch": "diff --git a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmConfig.java b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmConfig.java\nindex 1973e9b26e21d..742013420ee8f 100644\n--- a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmConfig.java\n+++ b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmConfig.java\n@@ -6,6 +6,7 @@\n \n import io.quarkus.hibernate.orm.runtime.PersistenceUnitUtil;\n import io.quarkus.hibernate.orm.runtime.config.DatabaseOrmCompatibilityVersion;\n+import io.quarkus.hibernate.orm.runtime.customized.BuiltinFormatMapperBehaviour;\n import io.quarkus.runtime.annotations.ConfigDocMapKey;\n import io.quarkus.runtime.annotations.ConfigDocSection;\n import io.quarkus.runtime.annotations.ConfigGroup;\n@@ -53,6 +54,12 @@ public interface HibernateOrmConfig {\n     @ConfigDocSection\n     HibernateOrmConfigDatabase database();\n \n+    /**\n+     * JSON/XML mapping related configuration.\n+     */\n+    @ConfigDocSection\n+    HibernateOrmConfigMapping mapping();\n+\n     /**\n      * Configuration for persistence units.\n      */\n@@ -210,4 +217,25 @@ interface HibernateOrmConfigDevUI {\n         @WithDefault(\"false\")\n         boolean allowHql();\n     }\n+\n+    @ConfigGroup\n+    interface HibernateOrmConfigMapping {\n+\n+        /**\n+         * Mapping format.\n+         */\n+        HibernateOrmConfigMappingFormat format();\n+\n+        @ConfigGroup\n+        interface HibernateOrmConfigMappingFormat {\n+            /**\n+             * How the default JSON/XML format mappers are configured.\n+             *\n+             * Only available to mitigate migration from the current Quarkus-preconfigured format mappers (that will be removed\n+             * in the future version).\n+             */\n+            @WithDefault(\"warn\")\n+            BuiltinFormatMapperBehaviour global();\n+        }\n+    }\n }\n\ndiff --git a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java\nindex fa6e9757787d6..907765deafae1 100644\n--- a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java\n+++ b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java\n@@ -324,8 +324,9 @@ public void configurationDescriptorBuilding(\n                     .filter(i -> i.isDefault())\n                     .findFirst();\n             collectDialectConfigForPersistenceXml(puName, xmlDescriptor);\n-            Optional<FormatMapperKind> jsonMapper = jsonMapperKind(capabilities);\n-            Optional<FormatMapperKind> xmlMapper = xmlMapperKind(capabilities);\n+            Optional<FormatMapperKind> jsonMapper = jsonMapperKind(capabilities,\n+                    hibernateOrmConfig.mapping().format().global());\n+            Optional<FormatMapperKind> xmlMapper = xmlMapperKind(capabilities, hibernateOrmConfig.mapping().format().global());\n             jsonMapper.flatMap(FormatMapperKind::requiredBeanType)\n                     .ifPresent(type -> unremovableBeans.produce(UnremovableBeanBuildItem.beanClassNames(type)));\n             xmlMapper.flatMap(FormatMapperKind::requiredBeanType)\n@@ -341,7 +342,8 @@ public void configurationDescriptorBuilding(\n                                     getMultiTenancyStrategy(\n                                             Optional.ofNullable(persistenceXmlDescriptorBuildItem.getDescriptor()\n                                                     .getProperties().getProperty(\"hibernate.multiTenancy\"))), //FIXME this property is meaningless in Hibernate ORM 6\n-                                    hibernateOrmConfig.database().ormCompatibilityVersion(), Collections.emptyMap()),\n+                                    hibernateOrmConfig.database().ormCompatibilityVersion(),\n+                                    hibernateOrmConfig.mapping().format().global(), Collections.emptyMap()),\n                             null,\n                             jpaModel.getXmlMappings(persistenceXmlDescriptorBuildItem.getDescriptor().getName()),\n                             true, isHibernateValidatorPresent(capabilities), jsonMapper, xmlMapper));\n@@ -948,8 +950,8 @@ private static void producePersistenceUnitDescriptorFromConfig(\n         configureSqlLoadScript(persistenceUnitName, persistenceUnitConfig, applicationArchivesBuildItem, launchMode,\n                 nativeImageResources, hotDeploymentWatchedFiles, descriptor);\n \n-        Optional<FormatMapperKind> jsonMapper = jsonMapperKind(capabilities);\n-        Optional<FormatMapperKind> xmlMapper = xmlMapperKind(capabilities);\n+        Optional<FormatMapperKind> jsonMapper = jsonMapperKind(capabilities, hibernateOrmConfig.mapping().format().global());\n+        Optional<FormatMapperKind> xmlMapper = xmlMapperKind(capabilities, hibernateOrmConfig.mapping().format().global());\n         jsonMapper.flatMap(FormatMapperKind::requiredBeanType)\n                 .ifPresent(type -> unremovableBeans.produce(UnremovableBeanBuildItem.beanClassNames(type)));\n         xmlMapper.flatMap(FormatMapperKind::requiredBeanType)\n@@ -963,6 +965,7 @@ private static void producePersistenceUnitDescriptorFromConfig(\n                                 persistenceUnitConfig.dialect().dialect(),\n                                 multiTenancyStrategy,\n                                 hibernateOrmConfig.database().ormCompatibilityVersion(),\n+                                hibernateOrmConfig.mapping().format().global(),\n                                 persistenceUnitConfig.unsupportedProperties()),\n                         persistenceUnitConfig.multitenantSchemaDatasource().orElse(null),\n                         xmlMappings,\n\ndiff --git a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/util/HibernateProcessorUtil.java b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/util/HibernateProcessorUtil.java\nindex b6b7050d2cc86..f36ccad35fe13 100644\n--- a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/util/HibernateProcessorUtil.java\n+++ b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/util/HibernateProcessorUtil.java\n@@ -39,6 +39,7 @@\n import io.quarkus.hibernate.orm.deployment.spi.DatabaseKindDialectBuildItem;\n import io.quarkus.hibernate.orm.runtime.HibernateOrmRuntimeConfig;\n import io.quarkus.hibernate.orm.runtime.boot.QuarkusPersistenceUnitDescriptor;\n+import io.quarkus.hibernate.orm.runtime.customized.BuiltinFormatMapperBehaviour;\n import io.quarkus.hibernate.orm.runtime.customized.FormatMapperKind;\n import io.quarkus.runtime.LaunchMode;\n import io.quarkus.runtime.configuration.ConfigurationException;\n@@ -58,7 +59,10 @@ public static boolean hasEntities(JpaModelBuildItem jpaModel) {\n         return !jpaModel.getEntityClassNames().isEmpty();\n     }\n \n-    public static Optional<FormatMapperKind> jsonMapperKind(Capabilities capabilities) {\n+    public static Optional<FormatMapperKind> jsonMapperKind(Capabilities capabilities, BuiltinFormatMapperBehaviour behaviour) {\n+        if (BuiltinFormatMapperBehaviour.IGNORE.equals(behaviour)) {\n+            return Optional.empty();\n+        }\n         if (capabilities.isPresent(Capability.JACKSON)) {\n             return Optional.of(FormatMapperKind.JACKSON);\n         } else if (capabilities.isPresent(Capability.JSONB)) {\n@@ -68,7 +72,10 @@ public static Optional<FormatMapperKind> jsonMapperKind(Capabilities capabilitie\n         }\n     }\n \n-    public static Optional<FormatMapperKind> xmlMapperKind(Capabilities capabilities) {\n+    public static Optional<FormatMapperKind> xmlMapperKind(Capabilities capabilities, BuiltinFormatMapperBehaviour behaviour) {\n+        if (BuiltinFormatMapperBehaviour.IGNORE.equals(behaviour)) {\n+            return Optional.empty();\n+        }\n         return capabilities.isPresent(Capability.JAXB)\n                 ? Optional.of(FormatMapperKind.JAXB)\n                 : Optional.empty();\n\ndiff --git a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/FastBootHibernatePersistenceProvider.java b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/FastBootHibernatePersistenceProvider.java\nindex d734278539a08..1e0c884eafe64 100644\n--- a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/FastBootHibernatePersistenceProvider.java\n+++ b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/FastBootHibernatePersistenceProvider.java\n@@ -205,7 +205,8 @@ private EntityManagerFactoryBuilder getEntityManagerFactoryBuilderOrNull(String\n                     standardServiceRegistry /* Mostly ignored! (yet needs to match) */,\n                     runtimeSettings,\n                     validatorFactory, cdiBeanManager, recordedState.getMultiTenancyStrategy(),\n-                    true);\n+                    true,\n+                    recordedState.getBuildTimeSettings().getSource().getBuiltinFormatMapperBehaviour());\n         }\n \n         log.debug(\"Found no matching persistence units\");\n\ndiff --git a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/JPAConfig.java b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/JPAConfig.java\nindex dec877dab0338..22c53a9294cd7 100644\n--- a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/JPAConfig.java\n+++ b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/JPAConfig.java\n@@ -46,7 +46,7 @@ public JPAConfig(HibernateOrmRuntimeConfig hibernateOrmRuntimeConfig) {\n \n     void startAll() {\n         List<CompletableFuture<?>> start = new ArrayList<>();\n-        //by using a dedicated thread for starting up the PR,\n+        //by using a dedicated thread for starting up the PU,\n         //we work around https://github.com/quarkusio/quarkus/issues/17304 to some extent\n         //as the main thread is now no longer polluted with ThreadLocals by default\n         //this is not a complete fix, but will help as long as the test methods\n\ndiff --git a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/boot/FastBootEntityManagerFactoryBuilder.java b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/boot/FastBootEntityManagerFactoryBuilder.java\nindex c944f53544c94..d33ed3387aa2d 100644\n--- a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/boot/FastBootEntityManagerFactoryBuilder.java\n+++ b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/boot/FastBootEntityManagerFactoryBuilder.java\n@@ -35,6 +35,7 @@\n import io.quarkus.hibernate.orm.XmlFormat;\n import io.quarkus.hibernate.orm.runtime.PersistenceUnitUtil;\n import io.quarkus.hibernate.orm.runtime.RuntimeSettings;\n+import io.quarkus.hibernate.orm.runtime.customized.BuiltinFormatMapperBehaviour;\n import io.quarkus.hibernate.orm.runtime.migration.MultiTenancyStrategy;\n import io.quarkus.hibernate.orm.runtime.observers.QuarkusSessionFactoryObserverForDbVersionCheck;\n import io.quarkus.hibernate.orm.runtime.observers.SessionFactoryObserverForNamedQueryValidation;\n@@ -50,6 +51,7 @@ public class FastBootEntityManagerFactoryBuilder implements EntityManagerFactory\n     private final RuntimeSettings runtimeSettings;\n     private final Object validatorFactory;\n     private final Object cdiBeanManager;\n+    private final BuiltinFormatMapperBehaviour builtinFormatMapperBehaviour;\n \n     protected final MultiTenancyStrategy multiTenancyStrategy;\n     protected final boolean shouldApplySchemaMigration;\n@@ -58,7 +60,8 @@ public FastBootEntityManagerFactoryBuilder(\n             QuarkusPersistenceUnitDescriptor puDescriptor,\n             PrevalidatedQuarkusMetadata metadata,\n             StandardServiceRegistry standardServiceRegistry, RuntimeSettings runtimeSettings, Object validatorFactory,\n-            Object cdiBeanManager, MultiTenancyStrategy multiTenancyStrategy, boolean shouldApplySchemaMigration) {\n+            Object cdiBeanManager, MultiTenancyStrategy multiTenancyStrategy, boolean shouldApplySchemaMigration,\n+            BuiltinFormatMapperBehaviour builtinFormatMapperBehaviour) {\n         this.puDescriptor = puDescriptor;\n         this.metadata = metadata;\n         this.standardServiceRegistry = standardServiceRegistry;\n@@ -67,6 +70,7 @@ public FastBootEntityManagerFactoryBuilder(\n         this.cdiBeanManager = cdiBeanManager;\n         this.multiTenancyStrategy = multiTenancyStrategy;\n         this.shouldApplySchemaMigration = shouldApplySchemaMigration;\n+        this.builtinFormatMapperBehaviour = builtinFormatMapperBehaviour;\n     }\n \n     @Override\n@@ -211,11 +215,15 @@ protected void populate(String persistenceUnitName, SessionFactoryOptionsBuilder\n                 FormatMapper.class, persistenceUnitName, JsonFormat.Literal.INSTANCE);\n         if (!jsonFormatMapper.isUnsatisfied()) {\n             options.applyJsonFormatMapper(jsonFormatMapper.get());\n+        } else {\n+            builtinFormatMapperBehaviour.jsonApply(metadata(), persistenceUnitName);\n         }\n         InjectableInstance<FormatMapper> xmlFormatMapper = PersistenceUnitUtil.singleExtensionInstanceForPersistenceUnit(\n                 FormatMapper.class, persistenceUnitName, XmlFormat.Literal.INSTANCE);\n         if (!xmlFormatMapper.isUnsatisfied()) {\n             options.applyXmlFormatMapper(xmlFormatMapper.get());\n+        } else {\n+            builtinFormatMapperBehaviour.xmlApply(metadata(), persistenceUnitName);\n         }\n     }\n \n\ndiff --git a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/customized/BuiltinFormatMapperBehaviour.java b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/customized/BuiltinFormatMapperBehaviour.java\nnew file mode 100644\nindex 0000000000000..cb54d97d46faa\n--- /dev/null\n+++ b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/customized/BuiltinFormatMapperBehaviour.java\n@@ -0,0 +1,108 @@\n+package io.quarkus.hibernate.orm.runtime.customized;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Set;\n+\n+import org.hibernate.boot.spi.MetadataImplementor;\n+import org.hibernate.mapping.Collection;\n+import org.hibernate.mapping.Column;\n+import org.hibernate.mapping.PersistentClass;\n+import org.hibernate.mapping.Property;\n+import org.hibernate.type.SqlTypes;\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.hibernate.orm.runtime.PersistenceUnitUtil;\n+\n+public enum BuiltinFormatMapperBehaviour {\n+    /**\n+     * The Quarkus preconfigured mappers are ignored and if there is no user provided one,\n+     * Hibernate ORM will create a mapper according to its own rules.\n+     */\n+    IGNORE {\n+        @Override\n+        protected void action(String puName, String type) {\n+        }\n+    },\n+    /**\n+     * Currently the default one, uses a Quarkus preconfigured format mappers. If a format mapper operation is invoked a\n+     * warning is logged.\n+     */\n+    WARN {\n+        @Override\n+        protected void action(String puName, String type) {\n+            LOGGER.warn(message(puName, type));\n+        }\n+    },\n+    /**\n+     * If there is no user provided format mapper, a Quarkus preconfigured one will fail at runtime.\n+     * Will become the default in the future versions of Quarkus.\n+     */\n+    FAIL {\n+        @Override\n+        protected void action(String puName, String type) {\n+            throw new IllegalStateException(message(puName, type));\n+        }\n+    };\n+\n+    private static final Logger LOGGER = Logger.getLogger(BuiltinFormatMapperBehaviour.class);\n+    private static final String TYPE_JSON = \"JSON\";\n+    private static final String TYPE_XML = \"XML\";\n+\n+    private static String message(String puName, String type) {\n+        return String.format(Locale.ROOT,\n+                \"Persistence unit [%1$s] uses Quarkus' main formatting facilities for %2$s columns in the database. \"\n+                        + \"\\nAs these facilities are primarily meant for REST endpoints, and they might have been customized for such use, \"\n+                        + \"this may lead to undesired behavior, up to and including data loss. \"\n+                        + \"\\nTo address this:\"\n+                        + \"\\n\\t- If the application does not customize the %2$s serialization/deserialization, set \\\"quarkus.hibernate-orm.mapping.format.global=ignore\\\". This will be the default in future versions of Quarkus. \"\n+                        + \"\\n\\t- Otherwise, define a custom `FormatMapper` bean annotated with \"\n+                        + (TYPE_JSON.equals(type) ? \"@JsonFormat\" : \"@XmlFormat\")\n+                        + \" and @PersistenceUnitExtension\"\n+                        + (PersistenceUnitUtil.isDefaultPersistenceUnit(puName) ? \"\" : \"(\\\"%1$s\\\")\")\n+                        + \"to address your database serialization/deserialization needs.\"\n+                        + \"\\nSee the migration guide for more details and how to proceed.\",\n+                puName, type);\n+    }\n+\n+    public static boolean hasJsonProperties(MetadataImplementor metadata) {\n+        return hasXxxProperties(metadata, Set.of(SqlTypes.JSON, SqlTypes.JSON_ARRAY));\n+    }\n+\n+    public static boolean hasXmlProperties(MetadataImplementor metadata) {\n+        return hasXxxProperties(metadata, Set.of(SqlTypes.SQLXML, SqlTypes.XML_ARRAY));\n+    }\n+\n+    private static boolean hasXxxProperties(MetadataImplementor metadata, Set<Integer> sqlTypeCodes) {\n+        for (PersistentClass persistentClass : metadata.getEntityBindings()) {\n+            for (Property property : persistentClass.getProperties()) {\n+                List<Column> columns = property.getColumns();\n+                if (columns.isEmpty()) {\n+                    if (property.getValue() instanceof Collection c) {\n+                        columns = c.getElement().getColumns();\n+                    }\n+                }\n+                for (Column column : columns) {\n+                    if (sqlTypeCodes.contains(column.getSqlTypeCode(metadata))) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public void jsonApply(MetadataImplementor metadata, String puName) {\n+        if (hasJsonProperties(metadata)) {\n+            action(puName, TYPE_JSON);\n+        }\n+    }\n+\n+    public void xmlApply(MetadataImplementor metadata, String puName) {\n+        if (hasXmlProperties(metadata)) {\n+            action(puName, TYPE_XML);\n+        }\n+    }\n+\n+    protected abstract void action(String puName, String type);\n+}\n\ndiff --git a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/recording/RecordedConfig.java b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/recording/RecordedConfig.java\nindex 2556e3bf16198..5b19f12250662 100644\n--- a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/recording/RecordedConfig.java\n+++ b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/recording/RecordedConfig.java\n@@ -5,6 +5,7 @@\n import java.util.Optional;\n \n import io.quarkus.hibernate.orm.runtime.config.DatabaseOrmCompatibilityVersion;\n+import io.quarkus.hibernate.orm.runtime.customized.BuiltinFormatMapperBehaviour;\n import io.quarkus.hibernate.orm.runtime.migration.MultiTenancyStrategy;\n import io.quarkus.runtime.annotations.RecordableConstructor;\n \n@@ -19,12 +20,14 @@ public class RecordedConfig {\n     private final MultiTenancyStrategy multiTenancyStrategy;\n     private final Map<String, String> quarkusConfigUnsupportedProperties;\n     private final DatabaseOrmCompatibilityVersion databaseOrmCompatibilityVersion;\n+    private final BuiltinFormatMapperBehaviour builtinFormatMapperBehaviour;\n \n     @RecordableConstructor\n     public RecordedConfig(Optional<String> dataSource, Optional<String> dbKind,\n             Optional<String> dbVersion, Optional<String> explicitDialect,\n             MultiTenancyStrategy multiTenancyStrategy,\n             DatabaseOrmCompatibilityVersion databaseOrmCompatibilityVersion,\n+            BuiltinFormatMapperBehaviour builtinFormatMapperBehaviour,\n             Map<String, String> quarkusConfigUnsupportedProperties) {\n         Objects.requireNonNull(dataSource);\n         Objects.requireNonNull(dbKind);\n@@ -35,8 +38,9 @@ public RecordedConfig(Optional<String> dataSource, Optional<String> dbKind,\n         this.dbVersion = dbVersion;\n         this.explicitDialect = explicitDialect;\n         this.multiTenancyStrategy = multiTenancyStrategy;\n-        this.quarkusConfigUnsupportedProperties = quarkusConfigUnsupportedProperties;\n         this.databaseOrmCompatibilityVersion = databaseOrmCompatibilityVersion;\n+        this.builtinFormatMapperBehaviour = builtinFormatMapperBehaviour;\n+        this.quarkusConfigUnsupportedProperties = quarkusConfigUnsupportedProperties;\n     }\n \n     public Optional<String> getDataSource() {\n@@ -59,11 +63,15 @@ public MultiTenancyStrategy getMultiTenancyStrategy() {\n         return multiTenancyStrategy;\n     }\n \n-    public Map<String, String> getQuarkusConfigUnsupportedProperties() {\n-        return quarkusConfigUnsupportedProperties;\n-    }\n-\n     public DatabaseOrmCompatibilityVersion getDatabaseOrmCompatibilityVersion() {\n         return databaseOrmCompatibilityVersion;\n     }\n+\n+    public BuiltinFormatMapperBehaviour getBuiltinFormatMapperBehaviour() {\n+        return builtinFormatMapperBehaviour;\n+    }\n+\n+    public Map<String, String> getQuarkusConfigUnsupportedProperties() {\n+        return quarkusConfigUnsupportedProperties;\n+    }\n }\n\ndiff --git a/extensions/hibernate-reactive/deployment/src/main/java/io/quarkus/hibernate/reactive/deployment/HibernateReactiveProcessor.java b/extensions/hibernate-reactive/deployment/src/main/java/io/quarkus/hibernate/reactive/deployment/HibernateReactiveProcessor.java\nindex dfd6098ee89de..b755cecc1eb00 100644\n--- a/extensions/hibernate-reactive/deployment/src/main/java/io/quarkus/hibernate/reactive/deployment/HibernateReactiveProcessor.java\n+++ b/extensions/hibernate-reactive/deployment/src/main/java/io/quarkus/hibernate/reactive/deployment/HibernateReactiveProcessor.java\n@@ -183,8 +183,8 @@ public void buildReactivePersistenceUnit(\n                 launchMode.getLaunchMode(),\n                 systemProperties, nativeImageResources, hotDeploymentWatchedFiles, dbKindDialectBuildItems);\n \n-        Optional<FormatMapperKind> jsonMapper = jsonMapperKind(capabilities);\n-        Optional<FormatMapperKind> xmlMapper = xmlMapperKind(capabilities);\n+        Optional<FormatMapperKind> jsonMapper = jsonMapperKind(capabilities, hibernateOrmConfig.mapping().format().global());\n+        Optional<FormatMapperKind> xmlMapper = xmlMapperKind(capabilities, hibernateOrmConfig.mapping().format().global());\n         jsonMapper.flatMap(FormatMapperKind::requiredBeanType)\n                 .ifPresent(type -> unremovableBeans.produce(UnremovableBeanBuildItem.beanClassNames(type)));\n         xmlMapper.flatMap(FormatMapperKind::requiredBeanType)\n@@ -202,6 +202,7 @@ public void buildReactivePersistenceUnit(\n                         persistenceUnitConfig.dialect().dialect(),\n                         io.quarkus.hibernate.orm.runtime.migration.MultiTenancyStrategy.NONE,\n                         hibernateOrmConfig.database().ormCompatibilityVersion(),\n+                        hibernateOrmConfig.mapping().format().global(),\n                         persistenceUnitConfig.unsupportedProperties()),\n                 null,\n                 jpaModel.getXmlMappings(reactivePU.getName()),\n\ndiff --git a/extensions/hibernate-reactive/runtime/src/main/java/io/quarkus/hibernate/reactive/runtime/FastBootHibernateReactivePersistenceProvider.java b/extensions/hibernate-reactive/runtime/src/main/java/io/quarkus/hibernate/reactive/runtime/FastBootHibernateReactivePersistenceProvider.java\nindex 57842ac03b2b5..5a0633e7e9bb6 100644\n--- a/extensions/hibernate-reactive/runtime/src/main/java/io/quarkus/hibernate/reactive/runtime/FastBootHibernateReactivePersistenceProvider.java\n+++ b/extensions/hibernate-reactive/runtime/src/main/java/io/quarkus/hibernate/reactive/runtime/FastBootHibernateReactivePersistenceProvider.java\n@@ -231,7 +231,8 @@ private EntityManagerFactoryBuilder getEntityManagerFactoryBuilderOrNull(String\n                     standardServiceRegistry /* Mostly ignored! (yet needs to match) */,\n                     runtimeSettings,\n                     validatorFactory, cdiBeanManager, recordedState.getMultiTenancyStrategy(),\n-                    PersistenceUnitsHolder.getPersistenceUnitDescriptors().size() == 1);\n+                    PersistenceUnitsHolder.getPersistenceUnitDescriptors().size() == 1,\n+                    recordedState.getBuildTimeSettings().getSource().getBuiltinFormatMapperBehaviour());\n         }\n \n         log.debug(\"Found no matching persistence units\");\n\ndiff --git a/extensions/hibernate-reactive/runtime/src/main/java/io/quarkus/hibernate/reactive/runtime/boot/FastBootReactiveEntityManagerFactoryBuilder.java b/extensions/hibernate-reactive/runtime/src/main/java/io/quarkus/hibernate/reactive/runtime/boot/FastBootReactiveEntityManagerFactoryBuilder.java\nindex 456cc65f6c877..a15450198e447 100644\n--- a/extensions/hibernate-reactive/runtime/src/main/java/io/quarkus/hibernate/reactive/runtime/boot/FastBootReactiveEntityManagerFactoryBuilder.java\n+++ b/extensions/hibernate-reactive/runtime/src/main/java/io/quarkus/hibernate/reactive/runtime/boot/FastBootReactiveEntityManagerFactoryBuilder.java\n@@ -11,6 +11,7 @@\n import io.quarkus.hibernate.orm.runtime.RuntimeSettings;\n import io.quarkus.hibernate.orm.runtime.boot.FastBootEntityManagerFactoryBuilder;\n import io.quarkus.hibernate.orm.runtime.boot.QuarkusPersistenceUnitDescriptor;\n+import io.quarkus.hibernate.orm.runtime.customized.BuiltinFormatMapperBehaviour;\n import io.quarkus.hibernate.orm.runtime.migration.MultiTenancyStrategy;\n import io.quarkus.hibernate.orm.runtime.recording.PrevalidatedQuarkusMetadata;\n \n@@ -20,9 +21,10 @@ public FastBootReactiveEntityManagerFactoryBuilder(QuarkusPersistenceUnitDescrip\n             PrevalidatedQuarkusMetadata metadata,\n             StandardServiceRegistry standardServiceRegistry, RuntimeSettings runtimeSettings, Object validatorFactory,\n             Object cdiBeanManager, MultiTenancyStrategy strategy,\n-            boolean shouldApplySchemaMigration) {\n+            boolean shouldApplySchemaMigration,\n+            BuiltinFormatMapperBehaviour builtinFormatMapperBehaviour) {\n         super(puDescriptor, metadata, standardServiceRegistry, runtimeSettings, validatorFactory,\n-                cdiBeanManager, strategy, shouldApplySchemaMigration);\n+                cdiBeanManager, strategy, shouldApplySchemaMigration, builtinFormatMapperBehaviour);\n     }\n \n     @Override\n",
    "test_patch": "diff --git a/integration-tests/jpa-postgresql/src/main/java/io/quarkus/it/jpa/postgresql/JPAFunctionalityTestEndpoint.java b/integration-tests/jpa-postgresql/src/main/java/io/quarkus/it/jpa/postgresql/JPAFunctionalityTestEndpoint.java\nindex 822a2947a26c8..1c5a85d22705f 100644\n--- a/integration-tests/jpa-postgresql/src/main/java/io/quarkus/it/jpa/postgresql/JPAFunctionalityTestEndpoint.java\n+++ b/integration-tests/jpa-postgresql/src/main/java/io/quarkus/it/jpa/postgresql/JPAFunctionalityTestEndpoint.java\n@@ -20,6 +20,7 @@\n import io.quarkus.it.jpa.postgresql.defaultpu.MyUUIDEntity;\n import io.quarkus.it.jpa.postgresql.defaultpu.Person;\n import io.quarkus.it.jpa.postgresql.defaultpu.SequencedAddress;\n+import io.quarkus.it.jpa.postgresql.defaultpu.SomeEmbeddable;\n import io.quarkus.it.jpa.postgresql.otherpu.EntityWithJsonOtherPU;\n import io.quarkus.narayana.jta.QuarkusTransaction;\n \n@@ -133,7 +134,8 @@ public String uuid() {\n     public String json() {\n         QuarkusTransaction.requiringNew().run(() -> {\n             EntityWithJson entity = new EntityWithJson(\n-                    new EntityWithJson.ToBeSerializedWithDateTime(LocalDate.of(2023, 7, 28)));\n+                    new EntityWithJson.ToBeSerializedWithDateTime(LocalDate.of(2023, 7, 28)),\n+                    new SomeEmbeddable(100, LocalDate.of(2023, 7, 29)));\n             em.persist(entity);\n         });\n \n\ndiff --git a/integration-tests/jpa-postgresql/src/main/java/io/quarkus/it/jpa/postgresql/defaultpu/EntityWithJson.java b/integration-tests/jpa-postgresql/src/main/java/io/quarkus/it/jpa/postgresql/defaultpu/EntityWithJson.java\nindex f82b79df3564c..58d3856de6957 100644\n--- a/integration-tests/jpa-postgresql/src/main/java/io/quarkus/it/jpa/postgresql/defaultpu/EntityWithJson.java\n+++ b/integration-tests/jpa-postgresql/src/main/java/io/quarkus/it/jpa/postgresql/defaultpu/EntityWithJson.java\n@@ -1,7 +1,10 @@\n package io.quarkus.it.jpa.postgresql.defaultpu;\n \n import java.time.LocalDate;\n+import java.util.Set;\n \n+import jakarta.persistence.ElementCollection;\n+import jakarta.persistence.Embedded;\n import jakarta.persistence.Entity;\n import jakarta.persistence.GeneratedValue;\n import jakarta.persistence.Id;\n@@ -22,11 +25,20 @@ public class EntityWithJson {\n     @JdbcTypeCode(SqlTypes.JSON)\n     ToBeSerializedWithDateTime json;\n \n+    @Embedded\n+    SomeEmbeddable someEmbeddable;\n+\n+    @ElementCollection\n+    Set<SomeEmbeddable> collection;\n+\n     public EntityWithJson() {\n     }\n \n-    public EntityWithJson(ToBeSerializedWithDateTime data) {\n+    public EntityWithJson(ToBeSerializedWithDateTime data,\n+            SomeEmbeddable someEmbeddable) {\n         this.json = data;\n+        this.someEmbeddable = someEmbeddable;\n+        this.collection = Set.of(someEmbeddable);\n     }\n \n     @Override\n\ndiff --git a/integration-tests/jpa-postgresql/src/main/java/io/quarkus/it/jpa/postgresql/defaultpu/SomeEmbeddable.java b/integration-tests/jpa-postgresql/src/main/java/io/quarkus/it/jpa/postgresql/defaultpu/SomeEmbeddable.java\nnew file mode 100644\nindex 0000000000000..096400cfe064b\n--- /dev/null\n+++ b/integration-tests/jpa-postgresql/src/main/java/io/quarkus/it/jpa/postgresql/defaultpu/SomeEmbeddable.java\n@@ -0,0 +1,53 @@\n+package io.quarkus.it.jpa.postgresql.defaultpu;\n+\n+import java.time.LocalDate;\n+\n+import jakarta.persistence.Embeddable;\n+\n+import org.hibernate.annotations.JdbcTypeCode;\n+import org.hibernate.type.SqlTypes;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import io.quarkus.runtime.annotations.RegisterForReflection;\n+\n+@Embeddable\n+public class SomeEmbeddable {\n+\n+    public int someNumber;\n+\n+    @JdbcTypeCode(SqlTypes.JSON)\n+    public ToBeSerializedWithDateTime someOtherJson;\n+\n+    public SomeEmbeddable() {\n+    }\n+\n+    public SomeEmbeddable(int someNumber, LocalDate date) {\n+        this.someNumber = someNumber;\n+        this.someOtherJson = new ToBeSerializedWithDateTime(date);\n+    }\n+\n+    @RegisterForReflection\n+    public static class ToBeSerializedWithDateTime {\n+        @JsonProperty\n+        LocalDate date;\n+\n+        @JsonProperty\n+        int year;\n+\n+        public ToBeSerializedWithDateTime() {\n+        }\n+\n+        public ToBeSerializedWithDateTime(LocalDate date) {\n+            this.date = date;\n+            this.year = date.getYear();\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"ToBeSerializedWithDateTime{\" +\n+                    \"date=\" + date +\n+                    '}';\n+        }\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48153",
    "pr_id": 48153,
    "issue_id": 48152,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Retain access token scope from the authorization code flow response\n### Description\n\nCurrently, the access token scope returned in the authorization code flow response is not recorded anywhere, primarily because the access token is forwarded to the downstream service by default, and because the access token in the JWT format has a `scope` claim, or if it is a binary token, then it can be found in the introspection response.\n\nHowever for providers like GiitHub, the scope property in the authorization code flow response is the only way to get to the access token scope. GitHub tokens are meant to be used for accessing GitHub API where the token scopes will be verified, but in Quarkus OIDC, once can configure that the access token can act as a source of roles (and permissions) to access the current endpoint.\n\nThis is also supported by Vert.x OIDC, which is  when I noticed we don't record this scope property.\nI'd have marked this issue as a bug if it were not the case that GitHub tokens are indeed meant to access GitHub API. \nEither way, retaining the access token scope from the authorization code flow response should be supported, for users be able to analyze at some point what is the actual access token scope, compared to the requested scope, especially when the access token is binary\n\n### Implementation ideas\n\n_No response_",
    "issue_word_count": 230,
    "test_files_count": 11,
    "non_test_files_count": 8,
    "pr_changed_files": [
      "extensions/oidc-db-token-state-manager/deployment/src/main/java/io/quarkus/oidc/db/token/state/manager/OidcDbTokenStateManagerProcessor.java",
      "extensions/oidc-db-token-state-manager/deployment/src/test/java/io/quarkus/oidc/db/token/state/manager/AbstractDbTokenStateManagerTest.java",
      "extensions/oidc-db-token-state-manager/deployment/src/test/java/io/quarkus/oidc/db/token/state/manager/OidcDbTokenStateManagerEntity.java",
      "extensions/oidc-db-token-state-manager/deployment/src/test/java/io/quarkus/oidc/db/token/state/manager/ProtectedResource.java",
      "extensions/oidc-db-token-state-manager/runtime/src/main/java/io/quarkus/oidc/db/token/state/manager/runtime/OidcDbTokenStateManager.java",
      "extensions/oidc-redis-token-state-manager/deployment/src/test/java/io/quarkus/oidc/redis/token/state/manager/deployment/AbstractRedisTokenStateManagerTest.java",
      "extensions/oidc-redis-token-state-manager/deployment/src/test/java/io/quarkus/oidc/redis/token/state/manager/deployment/ProtectedResource.java",
      "extensions/oidc-redis-token-state-manager/runtime/src/main/java/io/quarkus/oidc/redis/token/state/manager/runtime/OidcRedisTokenStateManager.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/AuthorizationCodeTokens.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/DefaultTokenStateManager.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcProviderClientImpl.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcUtils.java",
      "integration-tests/oidc-code-flow/src/main/resources/application.properties",
      "integration-tests/oidc-code-flow/src/test/java/io/quarkus/it/keycloak/CodeFlowTest.java",
      "integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/CodeFlowOpaqueAccessTokenResource.java",
      "integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/CodeFlowTokenIntrospectionResource.java",
      "integration-tests/oidc-wiremock/src/main/resources/application.properties",
      "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/CodeFlowAuthorizationTest.java"
    ],
    "pr_changed_test_files": [
      "extensions/oidc-db-token-state-manager/deployment/src/test/java/io/quarkus/oidc/db/token/state/manager/AbstractDbTokenStateManagerTest.java",
      "extensions/oidc-db-token-state-manager/deployment/src/test/java/io/quarkus/oidc/db/token/state/manager/OidcDbTokenStateManagerEntity.java",
      "extensions/oidc-db-token-state-manager/deployment/src/test/java/io/quarkus/oidc/db/token/state/manager/ProtectedResource.java",
      "extensions/oidc-redis-token-state-manager/deployment/src/test/java/io/quarkus/oidc/redis/token/state/manager/deployment/AbstractRedisTokenStateManagerTest.java",
      "extensions/oidc-redis-token-state-manager/deployment/src/test/java/io/quarkus/oidc/redis/token/state/manager/deployment/ProtectedResource.java",
      "integration-tests/oidc-code-flow/src/main/resources/application.properties",
      "integration-tests/oidc-code-flow/src/test/java/io/quarkus/it/keycloak/CodeFlowTest.java",
      "integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/CodeFlowOpaqueAccessTokenResource.java",
      "integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/CodeFlowTokenIntrospectionResource.java",
      "integration-tests/oidc-wiremock/src/main/resources/application.properties",
      "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/CodeFlowAuthorizationTest.java"
    ],
    "base_commit": "641829f332e177670ceb2c503e609a0a4b85fc1b",
    "head_commit": "dbcbe87557f1d70c2a0e4fea1ddfc6fd58e5bd3a",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48153",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48153",
    "dockerfile": "",
    "pr_merged_at": "2025-06-03T06:42:29.000Z",
    "patch": "diff --git a/extensions/oidc-db-token-state-manager/deployment/src/main/java/io/quarkus/oidc/db/token/state/manager/OidcDbTokenStateManagerProcessor.java b/extensions/oidc-db-token-state-manager/deployment/src/main/java/io/quarkus/oidc/db/token/state/manager/OidcDbTokenStateManagerProcessor.java\nindex a7e539e8491b5..2ca640cbf768e 100644\n--- a/extensions/oidc-db-token-state-manager/deployment/src/main/java/io/quarkus/oidc/db/token/state/manager/OidcDbTokenStateManagerProcessor.java\n+++ b/extensions/oidc-db-token-state-manager/deployment/src/main/java/io/quarkus/oidc/db/token/state/manager/OidcDbTokenStateManagerProcessor.java\n@@ -44,29 +44,31 @@ SyntheticBeanBuildItem produceDbTokenStateManagerBean(OidcDbTokenStateManagerRec\n         final String[] queryParamPlaceholders;\n         switch (sqlClientBuildItem.reactiveClient) {\n             case REACTIVE_PG_CLIENT:\n-                queryParamPlaceholders = new String[] { \"$1\", \"$2\", \"$3\", \"$4\", \"$5\", \"$6\" };\n+                queryParamPlaceholders = new String[] { \"$1\", \"$2\", \"$3\", \"$4\", \"$5\", \"$6\", \"$7\" };\n                 break;\n             case REACTIVE_MSSQL_CLIENT:\n-                queryParamPlaceholders = new String[] { \"@p1\", \"@p2\", \"@p3\", \"@p4\", \"@p5\", \"@p6\" };\n+                queryParamPlaceholders = new String[] { \"@p1\", \"@p2\", \"@p3\", \"@p4\", \"@p5\", \"@p6\", \"@p7\" };\n                 break;\n             case REACTIVE_MYSQL_CLIENT:\n             case REACTIVE_DB2_CLIENT:\n             case REACTIVE_ORACLE_CLIENT:\n-                queryParamPlaceholders = new String[] { \"?\", \"?\", \"?\", \"?\", \"?\", \"?\" };\n+                queryParamPlaceholders = new String[] { \"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\" };\n                 break;\n             default:\n                 throw new RuntimeException(\"Unknown Reactive Sql Client \" + sqlClientBuildItem.reactiveClient);\n         }\n         String deleteStatement = format(\"DELETE FROM oidc_db_token_state_manager WHERE id = %s\", queryParamPlaceholders[0]);\n         String getQuery = format(\n-                \"SELECT id_token, access_token, refresh_token, access_token_expires_in FROM oidc_db_token_state_manager WHERE \"\n+                \"SELECT id_token, access_token, refresh_token, access_token_expires_in, access_token_scope FROM oidc_db_token_state_manager WHERE \"\n                         +\n                         \"id = %s\",\n                 queryParamPlaceholders[0]);\n         String insertStatement = format(\"INSERT INTO oidc_db_token_state_manager (id_token, access_token, refresh_token,\" +\n-                \" access_token_expires_in, expires_in, id) VALUES (%s, %s, %s, %s, %s, %s)\", queryParamPlaceholders[0],\n+                \" access_token_expires_in, access_token_scope, expires_in, id) VALUES (%s, %s, %s, %s, %s, %s, %s)\",\n+                queryParamPlaceholders[0],\n                 queryParamPlaceholders[1],\n-                queryParamPlaceholders[2], queryParamPlaceholders[3], queryParamPlaceholders[4], queryParamPlaceholders[5]);\n+                queryParamPlaceholders[2], queryParamPlaceholders[3], queryParamPlaceholders[4], queryParamPlaceholders[5],\n+                queryParamPlaceholders[6]);\n         return SyntheticBeanBuildItem\n                 .configure(OidcDbTokenStateManager.class)\n                 .alternative(true)\n@@ -119,6 +121,7 @@ SyntheticBeanBuildItem createDbTokenStateInitializerProps(ReactiveSqlClientBuild\n                         \"access_token VARCHAR, \" +\n                         \"refresh_token VARCHAR, \" +\n                         \"access_token_expires_in BIGINT, \" +\n+                        \"access_token_scope VARCHAR, \" +\n                         \"expires_in BIGINT NOT NULL)\";\n                 supportsIfTableNotExists = true;\n                 break;\n@@ -129,6 +132,7 @@ SyntheticBeanBuildItem createDbTokenStateInitializerProps(ReactiveSqlClientBuild\n                         + \"access_token VARCHAR(5000) NULL, \"\n                         + \"refresh_token VARCHAR(5000) NULL, \"\n                         + \"access_token_expires_in BIGINT NULL, \"\n+                        + \"access_token_scope VARCHAR(100) NULL, \"\n                         + \"expires_in BIGINT NOT NULL, \"\n                         + \"PRIMARY KEY (id))\";\n                 supportsIfTableNotExists = true;\n@@ -140,6 +144,7 @@ SyntheticBeanBuildItem createDbTokenStateInitializerProps(ReactiveSqlClientBuild\n                         + \"access_token NVARCHAR(MAX), \"\n                         + \"refresh_token NVARCHAR(MAX), \"\n                         + \"access_token_expires_in BIGINT, \"\n+                        + \"access_token_scope NVARCHAR(100), \"\n                         + \"expires_in BIGINT NOT NULL)\";\n                 supportsIfTableNotExists = false;\n                 break;\n@@ -150,6 +155,7 @@ SyntheticBeanBuildItem createDbTokenStateInitializerProps(ReactiveSqlClientBuild\n                         + \"access_token VARCHAR(4000), \"\n                         + \"refresh_token VARCHAR(4000), \"\n                         + \"access_token_expires_in BIGINT, \"\n+                        + \"access_token_scope VARCHAR(100), \"\n                         + \"expires_in BIGINT NOT NULL)\";\n                 supportsIfTableNotExists = false;\n                 break;\n@@ -160,6 +166,7 @@ SyntheticBeanBuildItem createDbTokenStateInitializerProps(ReactiveSqlClientBuild\n                         + \"access_token VARCHAR2(4000), \"\n                         + \"refresh_token VARCHAR2(4000), \"\n                         + \"access_token_expires_in NUMBER, \"\n+                        + \"access_token_scope VARCHAR2(100), \"\n                         + \"expires_in NUMBER NOT NULL, \"\n                         + \"PRIMARY KEY (id))\";\n                 supportsIfTableNotExists = true;\n\ndiff --git a/extensions/oidc-db-token-state-manager/runtime/src/main/java/io/quarkus/oidc/db/token/state/manager/runtime/OidcDbTokenStateManager.java b/extensions/oidc-db-token-state-manager/runtime/src/main/java/io/quarkus/oidc/db/token/state/manager/runtime/OidcDbTokenStateManager.java\nindex 70a2e441e3da6..d0f2263c782fe 100644\n--- a/extensions/oidc-db-token-state-manager/runtime/src/main/java/io/quarkus/oidc/db/token/state/manager/runtime/OidcDbTokenStateManager.java\n+++ b/extensions/oidc-db-token-state-manager/runtime/src/main/java/io/quarkus/oidc/db/token/state/manager/runtime/OidcDbTokenStateManager.java\n@@ -31,6 +31,7 @@ public class OidcDbTokenStateManager implements TokenStateManager {\n     private static final String ID_TOKEN_COLUMN = \"id_token\";\n     private static final String ACCESS_TOKEN_COLUMN = \"access_token\";\n     private static final String ACCESS_TOKEN_EXPIRES_IN_COLUMN = \"access_token_expires_in\";\n+    private static final String ACCESS_TOKEN_SCOPE_COLUMN = \"access_token_scope\";\n     private static final String REFRESH_TOKEN_COLUMN = \"refresh_token\";\n \n     private final String insertStatement;\n@@ -61,6 +62,7 @@ public Uni<String> createTokenState(RoutingContext event, OidcTenantConfig oidcC\n                                         .execute(\n                                                 Tuple.of(tokens.getIdToken(), tokens.getAccessToken(),\n                                                         tokens.getRefreshToken(), tokens.getAccessTokenExpiresIn(),\n+                                                        tokens.getAccessTokenScope(),\n                                                         expiresIn(event), id)))\n                                 .toCompletionStage())\n                 .onFailure().transform(new Function<Throwable, Throwable>() {\n@@ -110,7 +112,8 @@ public Uni<? extends AuthorizationCodeTokens> apply(RowSet<Row> rows) {\n                                                 firstRow.getString(ID_TOKEN_COLUMN),\n                                                 firstRow.getString(ACCESS_TOKEN_COLUMN),\n                                                 firstRow.getString(REFRESH_TOKEN_COLUMN),\n-                                                firstRow.getLong(ACCESS_TOKEN_EXPIRES_IN_COLUMN)));\n+                                                firstRow.getLong(ACCESS_TOKEN_EXPIRES_IN_COLUMN),\n+                                                firstRow.getString(ACCESS_TOKEN_SCOPE_COLUMN)));\n                             }\n                         }\n                         return Uni.createFrom().failure(new AuthenticationCompletionException(FAILED_TO_ACQUIRE_TOKEN));\n\ndiff --git a/extensions/oidc-redis-token-state-manager/runtime/src/main/java/io/quarkus/oidc/redis/token/state/manager/runtime/OidcRedisTokenStateManager.java b/extensions/oidc-redis-token-state-manager/runtime/src/main/java/io/quarkus/oidc/redis/token/state/manager/runtime/OidcRedisTokenStateManager.java\nindex f53b1a45e6d7f..d2116fa17b26a 100644\n--- a/extensions/oidc-redis-token-state-manager/runtime/src/main/java/io/quarkus/oidc/redis/token/state/manager/runtime/OidcRedisTokenStateManager.java\n+++ b/extensions/oidc-redis-token-state-manager/runtime/src/main/java/io/quarkus/oidc/redis/token/state/manager/runtime/OidcRedisTokenStateManager.java\n@@ -81,15 +81,16 @@ private static Instant expiresAt(RoutingContext event) {\n         return Instant.now().plusSeconds(event.<Long> get(SESSION_MAX_AGE_PARAM));\n     }\n \n-    record AuthorizationCodeTokensRecord(String idToken, String accessToken, String refreshToken, Long accessTokenExpiresIn) {\n+    record AuthorizationCodeTokensRecord(String idToken, String accessToken, String refreshToken, Long accessTokenExpiresIn,\n+            String accessTokenScope) {\n \n         private static AuthorizationCodeTokensRecord of(AuthorizationCodeTokens tokens) {\n             return new AuthorizationCodeTokensRecord(tokens.getIdToken(), tokens.getAccessToken(), tokens.getRefreshToken(),\n-                    tokens.getAccessTokenExpiresIn());\n+                    tokens.getAccessTokenExpiresIn(), tokens.getAccessTokenScope());\n         }\n \n         private AuthorizationCodeTokens toTokens() {\n-            return new AuthorizationCodeTokens(idToken, accessToken, refreshToken, accessTokenExpiresIn);\n+            return new AuthorizationCodeTokens(idToken, accessToken, refreshToken, accessTokenExpiresIn, accessTokenScope);\n         }\n     }\n }\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/AuthorizationCodeTokens.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/AuthorizationCodeTokens.java\nindex 54c98962fae7d..5dc37c0be729b 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/AuthorizationCodeTokens.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/AuthorizationCodeTokens.java\n@@ -9,6 +9,7 @@ public class AuthorizationCodeTokens {\n     private String accessToken;\n     private String refreshToken;\n     private Long accessTokenExpiresIn;\n+    private String accessTokenScope;\n \n     public AuthorizationCodeTokens() {\n     }\n@@ -18,10 +19,16 @@ public AuthorizationCodeTokens(String idToken, String accessToken, String refres\n     }\n \n     public AuthorizationCodeTokens(String idToken, String accessToken, String refreshToken, Long accessTokenExpiresIn) {\n+        this(idToken, accessToken, refreshToken, accessTokenExpiresIn, null);\n+    }\n+\n+    public AuthorizationCodeTokens(String idToken, String accessToken, String refreshToken, Long accessTokenExpiresIn,\n+            String accessTokenScope) {\n         this.idToken = idToken;\n         this.accessToken = accessToken;\n         this.refreshToken = refreshToken;\n         this.accessTokenExpiresIn = accessTokenExpiresIn;\n+        this.accessTokenScope = accessTokenScope;\n     }\n \n     /**\n@@ -97,4 +104,22 @@ public Long getAccessTokenExpiresIn() {\n     public void setAccessTokenExpiresIn(Long accessTokenExpiresIn) {\n         this.accessTokenExpiresIn = accessTokenExpiresIn;\n     }\n+\n+    /**\n+     * Get the access token scope.\n+     *\n+     * @return access token scope.\n+     */\n+    public String getAccessTokenScope() {\n+        return accessTokenScope;\n+    }\n+\n+    /**\n+     * Set the access token scope.\n+     *\n+     * @param accessTokenScope access token scope.\n+     */\n+    public void setAccessTokenScope(String accessTokenScope) {\n+        this.accessTokenScope = accessTokenScope;\n+    }\n }\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/DefaultTokenStateManager.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/DefaultTokenStateManager.java\nindex c33c64daeae8d..ff1810f8a04b2 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/DefaultTokenStateManager.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/DefaultTokenStateManager.java\n@@ -1,5 +1,7 @@\n package io.quarkus.oidc.runtime;\n \n+import java.nio.charset.StandardCharsets;\n+\n import jakarta.enterprise.context.ApplicationScoped;\n \n import org.jboss.logging.Logger;\n@@ -8,6 +10,7 @@\n import io.quarkus.oidc.OidcRequestContext;\n import io.quarkus.oidc.OidcTenantConfig;\n import io.quarkus.oidc.TokenStateManager;\n+import io.quarkus.oidc.common.runtime.OidcCommonUtils;\n import io.quarkus.oidc.runtime.OidcTenantConfig.TokenStateManager.Strategy;\n import io.quarkus.security.AuthenticationFailedException;\n import io.smallrye.jwt.algorithm.KeyEncryptionAlgorithm;\n@@ -41,16 +44,21 @@ public Uni<String> createTokenState(RoutingContext routingContext, OidcTenantCon\n                         .append(CodeAuthenticationMechanism.COOKIE_DELIM)\n                         .append(tokens.getAccessTokenExpiresIn() != null ? tokens.getAccessTokenExpiresIn() : \"\")\n                         .append(CodeAuthenticationMechanism.COOKIE_DELIM)\n+                        .append(tokens.getAccessTokenScope() != null ? encodeScopes(oidcConfig, tokens.getAccessTokenScope())\n+                                : \"\")\n+                        .append(CodeAuthenticationMechanism.COOKIE_DELIM)\n                         .append(tokens.getRefreshToken());\n             } else if (oidcConfig.tokenStateManager().strategy() == Strategy.ID_REFRESH_TOKENS) {\n                 // But sometimes the access token is not required.\n                 // For example, when the Quarkus endpoint does not need to use it to access another service.\n-                // Skip access token and access token expiry, add refresh token\n+                // Skip access token, access token expiry, access token scope, add refresh token\n                 sb.append(CodeAuthenticationMechanism.COOKIE_DELIM)\n                         .append(\"\")\n                         .append(CodeAuthenticationMechanism.COOKIE_DELIM)\n                         .append(\"\")\n                         .append(CodeAuthenticationMechanism.COOKIE_DELIM)\n+                        .append(\"\")\n+                        .append(CodeAuthenticationMechanism.COOKIE_DELIM)\n                         .append(tokens.getRefreshToken());\n             }\n \n@@ -71,7 +79,9 @@ public Uni<String> createTokenState(RoutingContext routingContext, OidcTenantCon\n                 // Add access token and its expires_in property\n                 sb.append(tokens.getAccessToken())\n                         .append(CodeAuthenticationMechanism.COOKIE_DELIM)\n-                        .append(tokens.getAccessTokenExpiresIn() != null ? tokens.getAccessTokenExpiresIn() : \"\");\n+                        .append(tokens.getAccessTokenExpiresIn() != null ? tokens.getAccessTokenExpiresIn() : \"\")\n+                        .append(CodeAuthenticationMechanism.COOKIE_DELIM)\n+                        .append(tokens.getAccessTokenScope() != null ? tokens.getAccessTokenScope() : \"\");\n \n                 // Encrypt access token and create a `q_session_at` cookie.\n                 CodeAuthenticationMechanism.createCookie(routingContext,\n@@ -111,6 +121,7 @@ public Uni<AuthorizationCodeTokens> getTokens(RoutingContext routingContext, Oid\n         String idToken = null;\n         String accessToken = null;\n         Long accessTokenExpiresIn = null;\n+        String accessTokenScope = null;\n         String refreshToken = null;\n \n         if (!oidcConfig.tokenStateManager().splitTokens()) {\n@@ -122,15 +133,14 @@ public Uni<AuthorizationCodeTokens> getTokens(RoutingContext routingContext, Oid\n \n             try {\n                 idToken = tokens[0];\n-                accessToken = null;\n-                refreshToken = null;\n \n                 if (oidcConfig.tokenStateManager().strategy() == Strategy.KEEP_ALL_TOKENS) {\n                     accessToken = tokens[1];\n                     accessTokenExpiresIn = tokens[2].isEmpty() ? null : parseAccessTokenExpiresIn(tokens[2]);\n-                    refreshToken = tokens[3];\n+                    accessTokenScope = tokens[3].isEmpty() ? null : tokens[3];\n+                    refreshToken = tokens[4];\n                 } else if (oidcConfig.tokenStateManager().strategy() == Strategy.ID_REFRESH_TOKENS) {\n-                    refreshToken = tokens[3];\n+                    refreshToken = tokens[4];\n                 }\n             } catch (ArrayIndexOutOfBoundsException ex) {\n                 final String error = \"Session cookie is malformed\";\n@@ -142,8 +152,6 @@ public Uni<AuthorizationCodeTokens> getTokens(RoutingContext routingContext, Oid\n         } else {\n             // Decrypt ID token from the q_session cookie\n             idToken = decryptToken(tokenState, routingContext, oidcConfig);\n-            accessToken = null;\n-            refreshToken = null;\n \n             if (oidcConfig.tokenStateManager().strategy() == Strategy.KEEP_ALL_TOKENS) {\n                 Cookie atCookie = getAccessTokenCookie(routingContext, oidcConfig);\n@@ -155,6 +163,10 @@ public Uni<AuthorizationCodeTokens> getTokens(RoutingContext routingContext, Oid\n                     try {\n                         accessTokenExpiresIn = accessTokenData[1].isEmpty() ? null\n                                 : parseAccessTokenExpiresIn(accessTokenData[1]);\n+                        if (accessTokenData.length == 3) {\n+                            accessTokenScope = accessTokenData[2].isEmpty() ? null\n+                                    : decodeScopes(oidcConfig, accessTokenData[2]);\n+                        }\n                     } catch (ArrayIndexOutOfBoundsException ex) {\n                         final String error = \"Session cookie is malformed\";\n                         LOG.debug(ex);\n@@ -176,7 +188,8 @@ public Uni<AuthorizationCodeTokens> getTokens(RoutingContext routingContext, Oid\n                 }\n             }\n         }\n-        return Uni.createFrom().item(new AuthorizationCodeTokens(idToken, accessToken, refreshToken, accessTokenExpiresIn));\n+        return Uni.createFrom()\n+                .item(new AuthorizationCodeTokens(idToken, accessToken, refreshToken, accessTokenExpiresIn, accessTokenScope));\n     }\n \n     @Override\n@@ -222,7 +235,7 @@ private static String getRefreshTokenCookieName(OidcTenantConfig oidcConfig) {\n         return OidcUtils.SESSION_RT_COOKIE_NAME + cookieSuffix;\n     }\n \n-    private String encryptToken(String token, RoutingContext context, OidcTenantConfig oidcConfig) {\n+    private static String encryptToken(String token, RoutingContext context, OidcTenantConfig oidcConfig) {\n         if (oidcConfig.tokenStateManager().encryptionRequired()) {\n             TenantConfigContext configContext = context.get(TenantConfigContext.class.getName());\n             try {\n@@ -236,7 +249,7 @@ private String encryptToken(String token, RoutingContext context, OidcTenantConf\n         return token;\n     }\n \n-    private String decryptToken(String token, RoutingContext context, OidcTenantConfig oidcConfig) {\n+    private static String decryptToken(String token, RoutingContext context, OidcTenantConfig oidcConfig) {\n         if (oidcConfig.tokenStateManager().encryptionRequired()) {\n             TenantConfigContext configContext = context.get(TenantConfigContext.class.getName());\n             try {\n@@ -249,4 +262,18 @@ private String decryptToken(String token, RoutingContext context, OidcTenantConf\n         }\n         return token;\n     }\n+\n+    private static String encodeScopes(OidcTenantConfig oidcConfig, String accessTokenScope) {\n+        if (oidcConfig.tokenStateManager().encryptionRequired()) {\n+            return accessTokenScope;\n+        }\n+        return OidcCommonUtils.base64UrlEncode(accessTokenScope.getBytes(StandardCharsets.UTF_8));\n+    }\n+\n+    private static String decodeScopes(OidcTenantConfig oidcConfig, String accessTokenScope) {\n+        if (oidcConfig.tokenStateManager().encryptionRequired()) {\n+            return accessTokenScope;\n+        }\n+        return OidcCommonUtils.base64UrlDecode(accessTokenScope);\n+    }\n }\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java\nindex cffb625c11d09..6e952dc613b5d 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java\n@@ -6,7 +6,6 @@\n import java.security.NoSuchAlgorithmException;\n import java.security.Principal;\n import java.util.Map;\n-import java.util.Set;\n import java.util.function.BiFunction;\n import java.util.function.Function;\n import java.util.function.Supplier;\n@@ -516,12 +515,7 @@ && tokenAutoRefreshPrepared(result, requestData, resolvedContext.oidcConfig(), f\n                     principalName = result.introspectionResult.getSubject();\n                 }\n                 userName = principalName != null ? principalName : \"\";\n-\n-                Set<String> scopes = result.introspectionResult.getScopes();\n-                if (scopes != null) {\n-                    builder.addRoles(scopes);\n-                    OidcUtils.addTokenScopesAsPermissions(builder, scopes);\n-                }\n+                OidcUtils.setIntrospectionScopes(builder, result.introspectionResult);\n             }\n             builder.setPrincipal(new Principal() {\n                 @Override\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcProviderClientImpl.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcProviderClientImpl.java\nindex e4c01c2112f73..46b81dc9aa322 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcProviderClientImpl.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcProviderClientImpl.java\n@@ -364,8 +364,9 @@ private AuthorizationCodeTokens getAuthorizationCodeTokens(OidcRequestContextPro\n             tokenExpiresIn = tokenExpiresInObj instanceof Number ? ((Number) tokenExpiresInObj).longValue()\n                     : Long.parseLong(tokenExpiresInObj.toString());\n         }\n+        final String accessTokenScope = json.getString(OidcConstants.TOKEN_SCOPE);\n \n-        return new AuthorizationCodeTokens(idToken, accessToken, refreshToken, tokenExpiresIn);\n+        return new AuthorizationCodeTokens(idToken, accessToken, refreshToken, tokenExpiresIn, accessTokenScope);\n     }\n \n     private UserInfoResponse getUserInfo(OidcRequestContextProperties requestProps, HttpResponse<Buffer> resp) {\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcUtils.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcUtils.java\nindex 23f437239add0..668b92d6b99a6 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcUtils.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcUtils.java\n@@ -350,9 +350,11 @@ static QuarkusSecurityIdentity validateAndCreateIdentity(Map<String, Object> req\n         builder.setPrincipal(jwtPrincipal);\n         var vertxContext = getRoutingContextAttribute(request);\n         setRoutingContextAttribute(builder, vertxContext);\n-        OidcUtils.setOidcProviderClientAttribute(builder, resolvedContext.getOidcProviderClient());\n-        setSecurityIdentityRoles(builder, config, rolesJson);\n-        setSecurityIdentityPermissions(builder, config, rolesJson);\n+        setOidcProviderClientAttribute(builder, resolvedContext.getOidcProviderClient());\n+        if (rolesJson != null) {\n+            setSecurityIdentityRoles(builder, config, rolesJson);\n+            setSecurityIdentityPermissions(builder, config, rolesJson);\n+        }\n         setSecurityIdentityUserInfo(builder, userInfo);\n         setSecurityIdentityIntrospection(builder, introspectionResult);\n         setSecurityIdentityConfigMetadata(builder, resolvedContext);\n@@ -361,17 +363,33 @@ static QuarkusSecurityIdentity validateAndCreateIdentity(Map<String, Object> req\n         TokenVerificationResult codeFlowAccessTokenResult = (TokenVerificationResult) requestData.get(CODE_ACCESS_TOKEN_RESULT);\n         if (codeFlowAccessTokenResult != null) {\n             builder.addAttribute(CODE_ACCESS_TOKEN_RESULT, codeFlowAccessTokenResult);\n+            if (Roles.Source.accesstoken == config.roles().source().orElse(null)) {\n+                setIntrospectionScopes(builder, codeFlowAccessTokenResult.introspectionResult);\n+                if (codeTokens != null && codeTokens.getAccessTokenScope() != null) {\n+                    builder.addPermissionsAsString(new HashSet<>(Arrays.asList(codeTokens.getAccessTokenScope().split(\" \"))));\n+                }\n+            }\n         }\n         return builder.build();\n     }\n \n+    static void setIntrospectionScopes(QuarkusSecurityIdentity.Builder builder, TokenIntrospection introspectionResult) {\n+        if (introspectionResult != null) {\n+            Set<String> scopes = introspectionResult.getScopes();\n+            if (scopes != null) {\n+                builder.addRoles(scopes);\n+                addTokenScopesAsPermissions(builder, scopes);\n+            }\n+        }\n+    }\n+\n     static void setSecurityIdentityPermissions(QuarkusSecurityIdentity.Builder builder, OidcTenantConfig config,\n             JsonObject permissionsJson) {\n         addTokenScopesAsPermissions(builder, findClaimWithRoles(config.roles(), TOKEN_SCOPE, permissionsJson));\n     }\n \n     static void addTokenScopesAsPermissions(Builder builder, Collection<String> scopes) {\n-        if (!scopes.isEmpty()) {\n+        if (scopes != null && !scopes.isEmpty()) {\n             builder.addPermissionsAsString(new HashSet<>(scopes));\n         }\n     }\n",
    "test_patch": "diff --git a/extensions/oidc-db-token-state-manager/deployment/src/test/java/io/quarkus/oidc/db/token/state/manager/AbstractDbTokenStateManagerTest.java b/extensions/oidc-db-token-state-manager/deployment/src/test/java/io/quarkus/oidc/db/token/state/manager/AbstractDbTokenStateManagerTest.java\nindex 9132a9f175e36..95d9b31fbfb44 100644\n--- a/extensions/oidc-db-token-state-manager/deployment/src/test/java/io/quarkus/oidc/db/token/state/manager/AbstractDbTokenStateManagerTest.java\n+++ b/extensions/oidc-db-token-state-manager/deployment/src/test/java/io/quarkus/oidc/db/token/state/manager/AbstractDbTokenStateManagerTest.java\n@@ -70,7 +70,8 @@ public void testCodeFlow() throws IOException {\n \n             textPage = loginForm.getButtonByName(\"login\").click();\n \n-            assertEquals(\"alice, access token: true, access_token_expires_in: true, refresh_token: true\",\n+            assertEquals(\n+                    \"alice, access token: true, access_token_expires_in: true, access_token_scope: true, refresh_token: true\",\n                     textPage.getContent());\n \n             assertTokenStateCount(1);\n\ndiff --git a/extensions/oidc-db-token-state-manager/deployment/src/test/java/io/quarkus/oidc/db/token/state/manager/OidcDbTokenStateManagerEntity.java b/extensions/oidc-db-token-state-manager/deployment/src/test/java/io/quarkus/oidc/db/token/state/manager/OidcDbTokenStateManagerEntity.java\nindex 80b06136a4747..0741b8c674bec 100644\n--- a/extensions/oidc-db-token-state-manager/deployment/src/test/java/io/quarkus/oidc/db/token/state/manager/OidcDbTokenStateManagerEntity.java\n+++ b/extensions/oidc-db-token-state-manager/deployment/src/test/java/io/quarkus/oidc/db/token/state/manager/OidcDbTokenStateManagerEntity.java\n@@ -24,6 +24,9 @@ public class OidcDbTokenStateManagerEntity {\n     @Column(name = \"access_token_expires_in\")\n     Long accessTokenExpiresIn;\n \n+    @Column(name = \"access_token_scope\", length = 100)\n+    String accessTokenScope;\n+\n     @Column(name = \"expires_in\")\n     Long expiresIn;\n }\n\ndiff --git a/extensions/oidc-db-token-state-manager/deployment/src/test/java/io/quarkus/oidc/db/token/state/manager/ProtectedResource.java b/extensions/oidc-db-token-state-manager/deployment/src/test/java/io/quarkus/oidc/db/token/state/manager/ProtectedResource.java\nindex f1b0659f327b7..bf33b7d1f3f01 100644\n--- a/extensions/oidc-db-token-state-manager/deployment/src/test/java/io/quarkus/oidc/db/token/state/manager/ProtectedResource.java\n+++ b/extensions/oidc-db-token-state-manager/deployment/src/test/java/io/quarkus/oidc/db/token/state/manager/ProtectedResource.java\n@@ -28,6 +28,7 @@ public String getName() {\n         return idToken.getName()\n                 + \", access token: \" + (tokens.getAccessToken() != null)\n                 + \", access_token_expires_in: \" + (tokens.getAccessTokenExpiresIn() != null)\n+                + \", access_token_scope: \" + (tokens.getAccessTokenScope() != null)\n                 + \", refresh_token: \" + (tokens.getRefreshToken() != null);\n \n     }\n\ndiff --git a/extensions/oidc-redis-token-state-manager/deployment/src/test/java/io/quarkus/oidc/redis/token/state/manager/deployment/AbstractRedisTokenStateManagerTest.java b/extensions/oidc-redis-token-state-manager/deployment/src/test/java/io/quarkus/oidc/redis/token/state/manager/deployment/AbstractRedisTokenStateManagerTest.java\nindex bd36ff00492e6..2c725ca0e5c2b 100644\n--- a/extensions/oidc-redis-token-state-manager/deployment/src/test/java/io/quarkus/oidc/redis/token/state/manager/deployment/AbstractRedisTokenStateManagerTest.java\n+++ b/extensions/oidc-redis-token-state-manager/deployment/src/test/java/io/quarkus/oidc/redis/token/state/manager/deployment/AbstractRedisTokenStateManagerTest.java\n@@ -59,7 +59,8 @@ public void testCodeFlow() throws IOException {\n \n             textPage = loginForm.getButtonByName(\"login\").click();\n \n-            assertEquals(\"alice, access token: true, access_token_expires_in: true, refresh_token: true\",\n+            assertEquals(\n+                    \"alice, access token: true, access_token_expires_in: true, access_token_scope: true, refresh_token: true\",\n                     textPage.getContent());\n \n             assertTokenStateCount(1);\n\ndiff --git a/extensions/oidc-redis-token-state-manager/deployment/src/test/java/io/quarkus/oidc/redis/token/state/manager/deployment/ProtectedResource.java b/extensions/oidc-redis-token-state-manager/deployment/src/test/java/io/quarkus/oidc/redis/token/state/manager/deployment/ProtectedResource.java\nindex 2176da9d87c99..47737f931aa66 100644\n--- a/extensions/oidc-redis-token-state-manager/deployment/src/test/java/io/quarkus/oidc/redis/token/state/manager/deployment/ProtectedResource.java\n+++ b/extensions/oidc-redis-token-state-manager/deployment/src/test/java/io/quarkus/oidc/redis/token/state/manager/deployment/ProtectedResource.java\n@@ -28,6 +28,7 @@ public String getName() {\n         return idToken.getName()\n                 + \", access token: \" + (tokens.getAccessToken() != null)\n                 + \", access_token_expires_in: \" + (tokens.getAccessTokenExpiresIn() != null)\n+                + \", access_token_scope: \" + (tokens.getAccessTokenScope() != null)\n                 + \", refresh_token: \" + (tokens.getRefreshToken() != null);\n     }\n \n\ndiff --git a/integration-tests/oidc-code-flow/src/main/resources/application.properties b/integration-tests/oidc-code-flow/src/main/resources/application.properties\nindex 4b4f4cb767080..82ddca8db6cc9 100644\n--- a/integration-tests/oidc-code-flow/src/main/resources/application.properties\n+++ b/integration-tests/oidc-code-flow/src/main/resources/application.properties\n@@ -180,6 +180,7 @@ quarkus.oidc.tenant-split-tokens.token-state-manager.split-tokens=true\n quarkus.oidc.tenant-split-tokens.token-state-manager.encryption-secret=eUk1p7UB3nFiXZGUXi0uph1Y9p34YhBU\n quarkus.oidc.tenant-split-tokens.application-type=web-app\n quarkus.oidc.tenant-split-tokens.authentication.cookie-same-site=strict\n+quarkus.oidc.tenant-split-tokens.authentication.scopes=phone\n \n quarkus.http.auth.permission.roles1.paths=/index.html,/index.html;/checktterer\n quarkus.http.auth.permission.roles1.policy=authenticated\n\ndiff --git a/integration-tests/oidc-code-flow/src/test/java/io/quarkus/it/keycloak/CodeFlowTest.java b/integration-tests/oidc-code-flow/src/test/java/io/quarkus/it/keycloak/CodeFlowTest.java\nindex 6aa324b6b6c61..78fc56d35c983 100644\n--- a/integration-tests/oidc-code-flow/src/test/java/io/quarkus/it/keycloak/CodeFlowTest.java\n+++ b/integration-tests/oidc-code-flow/src/test/java/io/quarkus/it/keycloak/CodeFlowTest.java\n@@ -15,6 +15,7 @@\n import java.time.Duration;\n import java.time.Instant;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Base64;\n import java.util.List;\n import java.util.UUID;\n@@ -123,7 +124,7 @@ public void testCodeFlowNoConsent() throws IOException {\n                     .issuedAt(Instant.now().minusSeconds(100))\n                     .expiresAt(Instant.now().minusSeconds(50))\n                     .jws().keyId(UUID.randomUUID().toString()).sign(secretKey);\n-            String sessionCookie2 = expiredTokenWithRandomKid + \"|\" + expiredTokenWithRandomKid + \"||\"\n+            String sessionCookie2 = expiredTokenWithRandomKid + \"|\" + expiredTokenWithRandomKid + \"|||\"\n                     + expiredTokenWithRandomKid;\n             // Redirect to re-authenticate is expected\n             RestAssured.given().redirects().follow(false).header(\"Cookie\", \"q_session_Default_test=\" + sessionCookie2)\n@@ -135,7 +136,7 @@ public void testCodeFlowNoConsent() throws IOException {\n             String tokenWithRandomKid = Jwt.claims()\n                     .issuedAt(Instant.now())\n                     .jws().keyId(UUID.randomUUID().toString()).sign(secretKey);\n-            String sessionCookie3 = tokenWithRandomKid + \"|\" + tokenWithRandomKid + \"||\" + tokenWithRandomKid;\n+            String sessionCookie3 = tokenWithRandomKid + \"|\" + tokenWithRandomKid + \"|||\" + tokenWithRandomKid;\n             // 401 is expected\n             RestAssured.given().redirects().follow(false).header(\"Cookie\", \"q_session_Default_test=\" + sessionCookie3)\n                     .when()\n@@ -407,11 +408,11 @@ public void testCodeFlowForceHttpsRedirectUriWithQueryAndPkce() throws Exception\n                     \"AES\");\n             String decryptedSessionCookieValue = OidcUtils.decryptString(sessionCookie.getValue(), key);\n \n-            String decrypedSessionCookieValues[] = decryptedSessionCookieValue.split(\"\\\\|\");\n-            assertEquals(4, decrypedSessionCookieValues.length);\n+            String decryptedSessionCookieValues[] = decryptedSessionCookieValue.split(\"\\\\|\");\n+            assertEquals(5, decryptedSessionCookieValues.length);\n \n             // ID token\n-            String encodedIdToken = decrypedSessionCookieValues[0];\n+            String encodedIdToken = decryptedSessionCookieValues[0];\n \n             JsonObject idToken = OidcCommonUtils.decodeJwtContent(encodedIdToken);\n             assertEquals(\"ID\", idToken.getString(\"typ\"));\n@@ -425,11 +426,13 @@ public void testCodeFlowForceHttpsRedirectUriWithQueryAndPkce() throws Exception\n             assertTrue(duration > 1 && duration < 5);\n \n             // Access token and its expires_in\n-            assertEquals(\"Bearer\", OidcCommonUtils.decodeJwtContent(decrypedSessionCookieValues[1]).getString(\"typ\"));\n-            long atExpiresIn = Long.valueOf(decrypedSessionCookieValues[2]);\n+            assertEquals(\"Bearer\", OidcCommonUtils.decodeJwtContent(decryptedSessionCookieValues[1]).getString(\"typ\"));\n+            long atExpiresIn = Long.valueOf(decryptedSessionCookieValues[2]);\n             assertTrue(atExpiresIn >= 2 && atExpiresIn <= 4);\n+            // Access token scope\n+            checkAccessTokenScope(decryptedSessionCookieValues[3]);\n             // Refresh token\n-            assertEquals(\"Refresh\", OidcCommonUtils.decodeJwtContent(decrypedSessionCookieValues[3]).getString(\"typ\"));\n+            assertEquals(\"Refresh\", OidcCommonUtils.decodeJwtContent(decryptedSessionCookieValues[4]).getString(\"typ\"));\n \n             assertNull(getSessionCookie(webClient, \"tenant-https\"));\n \n@@ -437,6 +440,16 @@ public void testCodeFlowForceHttpsRedirectUriWithQueryAndPkce() throws Exception\n         }\n     }\n \n+    private void checkAccessTokenScope(String scopeString) {\n+        assertNotNull(scopeString);\n+        List<String> scopes = Arrays.asList(scopeString.split(\" \"));\n+        assertEquals(4, scopes.size());\n+        assertTrue(scopes.contains(\"openid\"));\n+        assertTrue(scopes.contains(\"phone\"));\n+        assertTrue(scopes.contains(\"profile\"));\n+        assertTrue(scopes.contains(\"email\"));\n+    }\n+\n     @Test\n     public void testCodeFlowNonce() throws Exception {\n         doTestCodeFlowNonce(false);\n@@ -516,7 +529,7 @@ private void doTestCodeFlowNonce(boolean wrongRedirect) throws Exception {\n                     .issuedAt(Instant.now().minusSeconds(100))\n                     .expiresAt(Instant.now().minusSeconds(50))\n                     .jws().keyId(UUID.randomUUID().toString()).sign(secretKey);\n-            String sessionCookie2 = expiredTokenWithRandomKid + \"|\" + expiredTokenWithRandomKid + \"||\"\n+            String sessionCookie2 = expiredTokenWithRandomKid + \"|\" + expiredTokenWithRandomKid + \"|||\"\n                     + expiredTokenWithRandomKid;\n             // 401 is expected because the redirect to re-authenticate is not allowed by default when the key id can not be resolved\n             RestAssured.given().redirects().follow(false).header(\"Cookie\", \"q_session_tenant-nonce=\" + sessionCookie2)\n@@ -1303,13 +1316,15 @@ public void testDefaultSessionManagerIdRefreshTokens() throws Exception {\n             String sessionCookieValue = OidcUtils.decryptString(sessionCookie.getValue(), key);\n \n             String[] parts = sessionCookieValue.split(\"\\\\|\");\n-            assertEquals(4, parts.length);\n+            assertEquals(5, parts.length);\n             assertEquals(\"ID\", OidcCommonUtils.decodeJwtContent(parts[0]).getString(\"typ\"));\n             // No access token\n             assertEquals(\"\", parts[1]);\n             // No access token expires_in\n             assertEquals(\"\", parts[2]);\n-            assertEquals(\"Refresh\", OidcCommonUtils.decodeJwtContent(parts[3]).getString(\"typ\"));\n+            // No access token scope\n+            assertEquals(\"\", parts[2]);\n+            assertEquals(\"Refresh\", OidcCommonUtils.decodeJwtContent(parts[4]).getString(\"typ\"));\n \n             assertNull(getSessionAtCookie(webClient, \"tenant-id-refresh-token\"));\n             assertNull(getSessionRtCookie(webClient, \"tenant-id-refresh-token\"));\n@@ -1448,10 +1463,11 @@ private void checkSingleTokenCookie(Cookie tokenCookie, String type, String decr\n \n                 // If it is an access token then an expiry date should follow the actual token\n                 if (\"Bearer\".equals(type)) {\n-                    assertEquals(2, decryptedStringParts.length);\n+                    assertEquals(3, decryptedStringParts.length);\n                     // Test access token has 3 seconds lifetime\n                     long atExpiresIn = Long.valueOf(decryptedStringParts[1]);\n                     assertTrue(atExpiresIn >= 2 && atExpiresIn <= 4);\n+                    checkAccessTokenScope(decryptedStringParts[2]);\n                 } else {\n                     // For ID and referh tokens it is only a token\n                     assertEquals(1, decryptedStringParts.length);\n\ndiff --git a/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/CodeFlowOpaqueAccessTokenResource.java b/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/CodeFlowOpaqueAccessTokenResource.java\nindex 6a3001ec099fa..f96a93b8c0024 100644\n--- a/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/CodeFlowOpaqueAccessTokenResource.java\n+++ b/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/CodeFlowOpaqueAccessTokenResource.java\n@@ -8,9 +8,9 @@\n \n import io.quarkus.oidc.AccessTokenCredential;\n import io.quarkus.security.Authenticated;\n+import io.quarkus.security.PermissionsAllowed;\n \n @Path(\"/code-flow-opaque-access-token\")\n-@Authenticated\n public class CodeFlowOpaqueAccessTokenResource {\n \n     @Inject\n@@ -20,12 +20,14 @@ public class CodeFlowOpaqueAccessTokenResource {\n     AccessTokenCredential accessTokenCredential;\n \n     @GET\n+    @PermissionsAllowed(\"phone\")\n     public String getAccessTokenCredential() {\n         return accessTokenCredential.getToken();\n     }\n \n     @GET\n     @Path(\"/jwt-access-token\")\n+    @Authenticated\n     public String getJwtAccessToken() {\n         return jwtAccessToken.getRawToken();\n     }\n\ndiff --git a/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/CodeFlowTokenIntrospectionResource.java b/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/CodeFlowTokenIntrospectionResource.java\nindex 3044536588a9e..986bdc607e598 100644\n--- a/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/CodeFlowTokenIntrospectionResource.java\n+++ b/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/CodeFlowTokenIntrospectionResource.java\n@@ -7,11 +7,11 @@\n import org.eclipse.microprofile.jwt.JsonWebToken;\n \n import io.quarkus.oidc.TokenIntrospection;\n-import io.quarkus.security.Authenticated;\n+import io.quarkus.security.PermissionsAllowed;\n import io.quarkus.security.identity.SecurityIdentity;\n \n @Path(\"/code-flow-token-introspection\")\n-@Authenticated\n+@PermissionsAllowed(\"email\")\n public class CodeFlowTokenIntrospectionResource {\n \n     @Inject\n\ndiff --git a/integration-tests/oidc-wiremock/src/main/resources/application.properties b/integration-tests/oidc-wiremock/src/main/resources/application.properties\nindex 3e1abb782d2ad..ead49974f78dd 100644\n--- a/integration-tests/oidc-wiremock/src/main/resources/application.properties\n+++ b/integration-tests/oidc-wiremock/src/main/resources/application.properties\n@@ -45,6 +45,7 @@ quarkus.oidc.code-flow-opaque-access-token.user-info-path=protocol/openid-connec\n quarkus.oidc.code-flow-opaque-access-token.client-id=quarkus-web-app\n quarkus.oidc.code-flow-opaque-access-token.credentials.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n quarkus.oidc.code-flow-opaque-access-token.tenant-paths=/code-flow-opaque-access-token/*\n+quarkus.oidc.code-flow-opaque-access-token.roles.source=accesstoken\n \n quarkus.oidc.code-flow-encrypted-id-token-jwk.auth-server-url=${keycloak.url:replaced-by-test-resource}/realms/quarkus/\n quarkus.oidc.code-flow-encrypted-id-token-jwk.client-id=quarkus-web-app\n@@ -166,7 +167,7 @@ quarkus.oidc.code-flow-token-introspection.authorization-path=/\n quarkus.oidc.code-flow-token-introspection.user-info-path=protocol/openid-connect/userinfo\n quarkus.oidc.code-flow-token-introspection.introspection-path=protocol/openid-connect/token/introspect\n quarkus.oidc.code-flow-token-introspection.token.refresh-token-time-skew=298\n-quarkus.oidc.code-flow-token-introspection.authentication.verify-access-token=true\n+quarkus.oidc.code-flow-token-introspection.roles.source=accesstoken\n quarkus.oidc.code-flow-token-introspection.client-id=quarkus-web-app\n quarkus.oidc.code-flow-token-introspection.credentials.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n quarkus.oidc.code-flow-token-introspection.code-grant.headers.X-Custom=XTokenIntrospection\n\ndiff --git a/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/CodeFlowAuthorizationTest.java b/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/CodeFlowAuthorizationTest.java\nindex f69282bb61628..0176d8a10eb18 100644\n--- a/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/CodeFlowAuthorizationTest.java\n+++ b/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/CodeFlowAuthorizationTest.java\n@@ -528,6 +528,9 @@ public void testCodeFlowTokenIntrospectionActiveRefresh() throws Exception {\n \n             assertEquals(\"alice:alice\", textPage.getContent());\n \n+            textPage = webClient.getPage(\"http://localhost:8081/code-flow-token-introspection\");\n+            assertEquals(\"alice:alice\", textPage.getContent());\n+\n             // Refresh\n             // The internal ID token lifespan is 5 mins\n             // Configured refresh token skew is 298 secs = 5 mins - 2 secs\n@@ -770,6 +773,7 @@ private void defineCodeFlowOpaqueAccessTokenStub() {\n                                 .withHeader(\"Content-Type\", \"application/json\")\n                                 .withBody(\"{\\n\" +\n                                         \"  \\\"access_token\\\": \\\"alice\\\",\"\n+                                        + \"  \\\"scope\\\": \\\"laptop phone\\\",\"\n                                         + \"\\\"expires_in\\\": 299}\")));\n     }\n \n@@ -786,6 +790,7 @@ private void defineCodeFlowTokenIntrospectionStub() {\n                                 .withHeader(\"Content-Type\", \"application/json\")\n                                 .withBody(\"{\\n\" +\n                                         \"  \\\"access_token\\\": \\\"alice\\\",\"\n+                                        + \"  \\\"scope\\\": \\\"email\\\",\"\n                                         + \"  \\\"refresh_token\\\": \\\"refresh5678\\\"\"\n                                         + \"}\")));\n \n@@ -795,7 +800,8 @@ private void defineCodeFlowTokenIntrospectionStub() {\n                         .willReturn(WireMock.aResponse()\n                                 .withHeader(\"Content-Type\", \"application/json\")\n                                 .withBody(\"{\\n\" +\n-                                        \"  \\\"access_token\\\": \\\"admin\\\"\"\n+                                        \"  \\\"access_token\\\": \\\"admin\\\",\"\n+                                        + \"  \\\"scope\\\": \\\"email\\\"\"\n                                         + \"}\")));\n     }\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48091",
    "pr_id": 48091,
    "issue_id": 48085,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Quarkus does not enforce DPoP proof with DPoP scheme\n### Describe the bug\n\nUsing DPoP authentication mechanism from https://github.com/quarkusio/quarkus/pull/45891. I have app configured with `quarkus.oidc.token.authorization-scheme=dpop`. In this case it should enforce that each HTTP request has DPoP proof in it.\n\nBut when I create a HTTP request, with correct access token like:\n```\n RestAssured.given()\n       .header(\"Authorization\", \"DPoP \" + accessToken)\n       .get(appUrl)\n```\nIt gives me access, return HTTP code 200 and gives me the protected resource. \n\nBut it should deny the access. It should not work without DPoP header.\n\n\n### Expected behavior\n\n_No response_\n\n### Actual behavior\n\n_No response_\n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### Quarkus version or git rev\n\n999-SNAPSHOT\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
    "issue_word_count": 147,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcUtils.java",
      "extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcUtilsTest.java"
    ],
    "pr_changed_test_files": [
      "extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcUtilsTest.java"
    ],
    "base_commit": "be5e13cc1c49c2dd5082ff41e4b1bad2412f7ad1",
    "head_commit": "d1456b15a2ff54a7e78969bf7283042dc973113a",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48091",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48091",
    "dockerfile": "",
    "pr_merged_at": "2025-05-27T15:28:16.000Z",
    "patch": "diff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java\nindex 1bc17f683f889..a1ca6554e57b0 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java\n@@ -60,7 +60,7 @@ private static void setCertificateThumbprint(RoutingContext context, OidcTenantC\n     }\n \n     private static void setDPopProof(RoutingContext context, OidcTenantConfig oidcTenantConfig, String token) {\n-        if (OidcConstants.DPOP_SCHEME.equals(oidcTenantConfig.token().authorizationScheme())) {\n+        if (OidcUtils.isDPoPScheme(oidcTenantConfig.token().authorizationScheme())) {\n \n             List<String> proofs = context.request().headers().getAll(OidcConstants.DPOP_SCHEME);\n             if (proofs == null || proofs.isEmpty()) {\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcUtils.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcUtils.java\nindex ec33ecb741ae3..23f437239add0 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcUtils.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcUtils.java\n@@ -916,4 +916,8 @@ public static String decryptToken(TenantConfigContext resolvedContext, String to\n         }\n         return token;\n     }\n+\n+    public static boolean isDPoPScheme(String authorizationScheme) {\n+        return OidcConstants.DPOP_SCHEME.equalsIgnoreCase(authorizationScheme);\n+    }\n }\n",
    "test_patch": "diff --git a/extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcUtilsTest.java b/extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcUtilsTest.java\nindex 7928c7099e205..07e738a992a4e 100644\n--- a/extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcUtilsTest.java\n+++ b/extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcUtilsTest.java\n@@ -33,6 +33,15 @@\n \n public class OidcUtilsTest {\n \n+    @Test\n+    public void testDpopScheme() throws Exception {\n+\n+        assertTrue(OidcUtils.isDPoPScheme(\"DPoP\"));\n+        assertTrue(OidcUtils.isDPoPScheme(\"dpop\"));\n+        assertFalse(OidcUtils.isDPoPScheme(\"pop\"));\n+\n+    }\n+\n     @Test\n     public void testGetSingleSessionCookie() throws Exception {\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48083",
    "pr_id": 48083,
    "issue_id": 46363,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Undertow - Session context lifecycle events should be observable from session scoped beans\n`@Initialized` and `@BeforeDestroyed` events for session context should be observable by `@SessionScoped` beans.\nAttempting this at the moment leads to a stack overflow because:\n* During observer notification our proxies check if given session context `isActive()`\n* In current context impl, this *always* triggers creation of a new session\n* This in turn notifies `HttpSessionListener#sessionCreated` where we fire new `@Initialized` event and again try to notify observers\n\nIssue can be reproducer by changing `SessionContextTestCase` and adding given observer bean.",
    "issue_word_count": 89,
    "test_files_count": 2,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "bom/application/pom.xml",
      "extensions/undertow/deployment/src/test/java/io/quarkus/undertow/test/sessioncontext/SessionContextTestCase.java",
      "extensions/undertow/deployment/src/test/java/io/quarkus/undertow/test/sessioncontext/SessionScopedObserver.java"
    ],
    "pr_changed_test_files": [
      "extensions/undertow/deployment/src/test/java/io/quarkus/undertow/test/sessioncontext/SessionContextTestCase.java",
      "extensions/undertow/deployment/src/test/java/io/quarkus/undertow/test/sessioncontext/SessionScopedObserver.java"
    ],
    "base_commit": "b4fc932b2f231a3668dbb6f1568c5dec0139a29c",
    "head_commit": "d188f5cd5d9d30df3c3133a0424d299fba70e0e7",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48083",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48083",
    "dockerfile": "",
    "pr_merged_at": "2025-05-27T14:51:00.000Z",
    "patch": "diff --git a/bom/application/pom.xml b/bom/application/pom.xml\nindex f3b6532853fc7..ded2eec233190 100644\n--- a/bom/application/pom.xml\n+++ b/bom/application/pom.xml\n@@ -31,7 +31,7 @@\n         <resteasy.version>6.2.12.Final</resteasy.version>\n         <opentelemetry-instrumentation.version>2.10.0-alpha</opentelemetry-instrumentation.version>\n         <opentelemetry-semconv.version>1.29.0-alpha</opentelemetry-semconv.version>\n-        <quarkus-http.version>5.3.4</quarkus-http.version>\n+        <quarkus-http.version>5.3.5</quarkus-http.version>\n         <micrometer.version>1.14.7</micrometer.version><!-- keep in sync with hdrhistogram: https://central.sonatype.com/artifact/io.micrometer/micrometer-core -->\n         <hdrhistogram.version>2.2.2</hdrhistogram.version><!-- keep in sync with micrometer -->\n         <google-auth.version>0.22.0</google-auth.version>\n",
    "test_patch": "diff --git a/extensions/undertow/deployment/src/test/java/io/quarkus/undertow/test/sessioncontext/SessionContextTestCase.java b/extensions/undertow/deployment/src/test/java/io/quarkus/undertow/test/sessioncontext/SessionContextTestCase.java\nindex acc52ce3e5494..2f07f2767d383 100644\n--- a/extensions/undertow/deployment/src/test/java/io/quarkus/undertow/test/sessioncontext/SessionContextTestCase.java\n+++ b/extensions/undertow/deployment/src/test/java/io/quarkus/undertow/test/sessioncontext/SessionContextTestCase.java\n@@ -17,7 +17,8 @@ public class SessionContextTestCase {\n \n     @RegisterExtension\n     static QuarkusUnitTest runner = new QuarkusUnitTest()\n-            .withApplicationRoot((jar) -> jar.addClasses(TestServlet.class, Foo.class, ObservingBean.class));\n+            .withApplicationRoot(\n+                    (jar) -> jar.addClasses(TestServlet.class, Foo.class, ObservingBean.class, SessionScopedObserver.class));\n \n     @Test\n     public void testServlet() {\n@@ -38,12 +39,17 @@ public void testContextEvents() {\n \n         // make sure we start with zero events to keep this test method independent\n         observingBean.resetState();\n+        SessionScopedObserver.resetState();\n \n         // following request creates a session and also destroys it by enforcing invalidation\n         when().get(\"/foo?destroy=true\").then().statusCode(200);\n         Assertions.assertEquals(1, observingBean.getTimesInitObserved());\n         Assertions.assertEquals(1, observingBean.getTimesBeforeDestroyedObserved());\n         Assertions.assertEquals(1, observingBean.getTimesDestroyedObserved());\n+\n+        // assert that @SessionScoped bean can observe init and before destroyed events as well\n+        Assertions.assertEquals(1, SessionScopedObserver.timesInitObserved);\n+        Assertions.assertEquals(1, SessionScopedObserver.timesBeforeDestroyedObserved);\n     }\n \n }\n\ndiff --git a/extensions/undertow/deployment/src/test/java/io/quarkus/undertow/test/sessioncontext/SessionScopedObserver.java b/extensions/undertow/deployment/src/test/java/io/quarkus/undertow/test/sessioncontext/SessionScopedObserver.java\nnew file mode 100644\nindex 0000000000000..ce17e6a551a92\n--- /dev/null\n+++ b/extensions/undertow/deployment/src/test/java/io/quarkus/undertow/test/sessioncontext/SessionScopedObserver.java\n@@ -0,0 +1,26 @@\n+package io.quarkus.undertow.test.sessioncontext;\n+\n+import jakarta.enterprise.context.BeforeDestroyed;\n+import jakarta.enterprise.context.Initialized;\n+import jakarta.enterprise.context.SessionScoped;\n+import jakarta.enterprise.event.Observes;\n+\n+@SessionScoped\n+public class SessionScopedObserver {\n+\n+    static int timesInitObserved = 0;\n+    static int timesBeforeDestroyedObserved = 0;\n+\n+    public void observeInit(@Observes @Initialized(SessionScoped.class) Object event) {\n+        timesInitObserved++;\n+    }\n+\n+    public void observeBeforeDestroyed(@Observes @BeforeDestroyed(SessionScoped.class) Object event) {\n+        timesBeforeDestroyedObserved++;\n+    }\n+\n+    public static void resetState() {\n+        timesInitObserved = 0;\n+        timesBeforeDestroyedObserved = 0;\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48071",
    "pr_id": 48071,
    "issue_id": 48053,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Integration tests using InnoDB failing on `main`\n### Describe the bug\n\nIt looks like the CI has been failing for the past 3 days. The first bad merge/commit seems to be https://github.com/quarkusio/quarkus/pull/48022 (based on the GitHub Action runs in https://github.com/quarkusio/quarkus/actions/workflows/ci-actions-incremental.yml?query=branch%3Amain)\n\n### Expected behavior\n\nTests in the CI should pass\n\n### Actual behavior\n\nTests `integration-tests/jpa-mariadb`, `integration-tests/hibernate-orm-tenancy/datasource`, `integration-tests/hibernate-orm-tenancy/connection-resolver, `integration-tests/hibernate-orm-tenancy/connection-resolver`, `integration-tests/hibernate-orm-tenancy/connection-resolver-legacy-qualifiers/` and `integration-tests/reactive-mysql-client/` fail with:\n\n```\nError: 1.697 MariaDB:2025-05-23  6:28:01 0 [ERROR] InnoDB: innodb_page_size=16384 requires innodb_buffer_pool_size >= 6 MiB current 5 MiB\nError: 1.697 MariaDB:2025-05-23  6:28:01 0 [ERROR] Plugin 'InnoDB' registration as a STORAGE ENGINE failed.\nError: 1.697 MariaDB:2025-05-23  6:28:01 0 [ERROR] Unknown/unsupported storage engine: InnoDB\nError: 1.697 MariaDB:2025-05-23  6:28:01 0 [ERROR] Aborting\n```\n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### Quarkus version or git rev\n\nb0ea2d016d07a757140dbe478110b4038db99e40\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
    "issue_word_count": 224,
    "test_files_count": 5,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "integration-tests/hibernate-orm-tenancy/connection-resolver-legacy-qualifiers/custom-mariadbconfig/custom.cnf",
      "integration-tests/hibernate-orm-tenancy/connection-resolver/custom-mariadbconfig/custom.cnf",
      "integration-tests/hibernate-orm-tenancy/datasource/custom-mariadbconfig/custom.cnf",
      "integration-tests/jpa-mariadb/custom-mariadbconfig/custom.cnf",
      "integration-tests/reactive-mysql-client/custom-mariadbconfig/custom.cnf"
    ],
    "pr_changed_test_files": [
      "integration-tests/hibernate-orm-tenancy/connection-resolver-legacy-qualifiers/custom-mariadbconfig/custom.cnf",
      "integration-tests/hibernate-orm-tenancy/connection-resolver/custom-mariadbconfig/custom.cnf",
      "integration-tests/hibernate-orm-tenancy/datasource/custom-mariadbconfig/custom.cnf",
      "integration-tests/jpa-mariadb/custom-mariadbconfig/custom.cnf",
      "integration-tests/reactive-mysql-client/custom-mariadbconfig/custom.cnf"
    ],
    "base_commit": "bb012e1bcdd1c40b290e50c7c918e6e86234fd6d",
    "head_commit": "43f31a43cb66005258d78f94ebba6d837fb1ad94",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48071",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48071",
    "dockerfile": "",
    "pr_merged_at": "2025-05-27T08:10:52.000Z",
    "patch": "",
    "test_patch": "diff --git a/integration-tests/hibernate-orm-tenancy/connection-resolver-legacy-qualifiers/custom-mariadbconfig/custom.cnf b/integration-tests/hibernate-orm-tenancy/connection-resolver-legacy-qualifiers/custom-mariadbconfig/custom.cnf\nindex 6310c25f4c4be..1eb8924b82a7b 100644\n--- a/integration-tests/hibernate-orm-tenancy/connection-resolver-legacy-qualifiers/custom-mariadbconfig/custom.cnf\n+++ b/integration-tests/hibernate-orm-tenancy/connection-resolver-legacy-qualifiers/custom-mariadbconfig/custom.cnf\n@@ -20,7 +20,7 @@ innodb_use_native_aio = 1\n innodb_flush_method = O_DSYNC\n innodb_log_file_size = 2M\n innodb_log_buffer_size = 2M\n-innodb_buffer_pool_size = 5242880\n+innodb_buffer_pool_size = 8242880\n innodb_file_per_table = 0\n innodb_flush_log_at_trx_commit = 0\n sync_binlog = 0\n\ndiff --git a/integration-tests/hibernate-orm-tenancy/connection-resolver/custom-mariadbconfig/custom.cnf b/integration-tests/hibernate-orm-tenancy/connection-resolver/custom-mariadbconfig/custom.cnf\nindex 6310c25f4c4be..1eb8924b82a7b 100644\n--- a/integration-tests/hibernate-orm-tenancy/connection-resolver/custom-mariadbconfig/custom.cnf\n+++ b/integration-tests/hibernate-orm-tenancy/connection-resolver/custom-mariadbconfig/custom.cnf\n@@ -20,7 +20,7 @@ innodb_use_native_aio = 1\n innodb_flush_method = O_DSYNC\n innodb_log_file_size = 2M\n innodb_log_buffer_size = 2M\n-innodb_buffer_pool_size = 5242880\n+innodb_buffer_pool_size = 8242880\n innodb_file_per_table = 0\n innodb_flush_log_at_trx_commit = 0\n sync_binlog = 0\n\ndiff --git a/integration-tests/hibernate-orm-tenancy/datasource/custom-mariadbconfig/custom.cnf b/integration-tests/hibernate-orm-tenancy/datasource/custom-mariadbconfig/custom.cnf\nindex 6310c25f4c4be..1eb8924b82a7b 100644\n--- a/integration-tests/hibernate-orm-tenancy/datasource/custom-mariadbconfig/custom.cnf\n+++ b/integration-tests/hibernate-orm-tenancy/datasource/custom-mariadbconfig/custom.cnf\n@@ -20,7 +20,7 @@ innodb_use_native_aio = 1\n innodb_flush_method = O_DSYNC\n innodb_log_file_size = 2M\n innodb_log_buffer_size = 2M\n-innodb_buffer_pool_size = 5242880\n+innodb_buffer_pool_size = 8242880\n innodb_file_per_table = 0\n innodb_flush_log_at_trx_commit = 0\n sync_binlog = 0\n\ndiff --git a/integration-tests/jpa-mariadb/custom-mariadbconfig/custom.cnf b/integration-tests/jpa-mariadb/custom-mariadbconfig/custom.cnf\nindex 6310c25f4c4be..1eb8924b82a7b 100644\n--- a/integration-tests/jpa-mariadb/custom-mariadbconfig/custom.cnf\n+++ b/integration-tests/jpa-mariadb/custom-mariadbconfig/custom.cnf\n@@ -20,7 +20,7 @@ innodb_use_native_aio = 1\n innodb_flush_method = O_DSYNC\n innodb_log_file_size = 2M\n innodb_log_buffer_size = 2M\n-innodb_buffer_pool_size = 5242880\n+innodb_buffer_pool_size = 8242880\n innodb_file_per_table = 0\n innodb_flush_log_at_trx_commit = 0\n sync_binlog = 0\n\ndiff --git a/integration-tests/reactive-mysql-client/custom-mariadbconfig/custom.cnf b/integration-tests/reactive-mysql-client/custom-mariadbconfig/custom.cnf\nindex 6310c25f4c4be..1eb8924b82a7b 100644\n--- a/integration-tests/reactive-mysql-client/custom-mariadbconfig/custom.cnf\n+++ b/integration-tests/reactive-mysql-client/custom-mariadbconfig/custom.cnf\n@@ -20,7 +20,7 @@ innodb_use_native_aio = 1\n innodb_flush_method = O_DSYNC\n innodb_log_file_size = 2M\n innodb_log_buffer_size = 2M\n-innodb_buffer_pool_size = 5242880\n+innodb_buffer_pool_size = 8242880\n innodb_file_per_table = 0\n innodb_flush_log_at_trx_commit = 0\n sync_binlog = 0\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48061",
    "pr_id": 48061,
    "issue_id": 48019,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Proxied synthetic bean seems to proxy to two different super classes\n### Describe the bug\n\nI have an extension that produces a synthetic bean (in the actual project I have some handling with qualifiers and so on).\nThis synthetic bean has to be proxied to apply e.g. `@Retry` which otherwise, would be ignored.\nThere is a weird behavior which I found as that bean extends another class.\n\nIt seems that when I call my been over the method which is annotated with `@Retry` I do access another super class than when I access the superclass over a non-annotated method.,leading to a unexpected behaviour/return value.\n\nMy build step method\n```\n    @BuildStep\n    @Record(RUNTIME_INIT)\n    public void registerClients(BuildProducer<SyntheticBeanBuildItem> syntheticBeans, ClientRecorder recorder) {\n\n        log.info(\"Registering Azure FileShare Client\");\n        syntheticBeans.produce(SyntheticBeanBuildItem.configure(AdvancedClient.class)\n                .scope(ApplicationScoped.class)\n                .setRuntimeInit()\n                .injectInterceptionProxy()\n                .createWith(recorder.createAdvancedClientWith(\"test\"))\n                .done());\n    }\n}\n\n```\n\nmy creator method\n\n```\n   public Function<SyntheticCreationalContext<AdvancedClient>, AdvancedClient> createAdvancedClientWith(String name) {\n        return context -> {\n            log.info(\"Creating advanced client for {}\", name);\n            return (AdvancedClient) context.getInterceptionProxy().create(new AdvancedClient(name));\n        };\n    }\n```\n\nMy bean\n```\n@Slf4j\npublic class AdvancedClient extends BaseClient {\n\n    AdvancedClient() {\n        super(null);\n        log.info(\"Initializing AdvancedClient with noArgs constructor\");\n    }\n\n    public AdvancedClient(String name) {\n        super(name);\n        log.info(\"Initializing AdvancedClient with name {}\", name);\n    }\n\n    @Retry\n    public String getProxiedName() {\n        return getName();\n    }\n}\n```\n\nMy superclass\n```\n@Getter\n@RequiredArgsConstructor\npublic class BaseClient {\n    private final String name;\n}\n```\n\n\n\n### Expected behavior\n\nWhen calling `getName()` or `getProxiedName()` I expected both times the name given on the creator method.✅\n\n### Actual behavior\n\nWhen calling `getProxiedName()`  I do get the name given within the creator method.✅\n\nWhen calling `getName()` I get `null` ❌\n\n\n\nIs this intended behaviour and I did just understand something wrong?\n\n### How to Reproduce?\n\n- Clone `https://github.com/HerrDerb/quarkus-extension-playground.git` \n- Checkout branch `syntetic-bean-issue`\n- Run tests in deployment module\n\n###\nQuarkus 3.21.4",
    "issue_word_count": 296,
    "test_files_count": 10,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "extensions/arc/deployment/src/test/java/io/quarkus/arc/test/interceptor/producer/ProducerWithFinalInterceptedClassTest.java",
      "extensions/arc/deployment/src/test/java/io/quarkus/arc/test/interceptor/producer/ProducerWithFinalInterceptedMethodTest.java",
      "extensions/arc/deployment/src/test/java/io/quarkus/arc/test/interceptor/producer/ProducerWithoutZeroParamCtorAndInterceptionTest.java",
      "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanProcessor.java",
      "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/InterceptionProxyGenerator.java",
      "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/Methods.java",
      "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/producer/ProducerWithClassAndMethodLevelInterceptorsTest.java",
      "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/producer/ProducerWithClassLevelInterceptorsTest.java",
      "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/producer/ProducerWithInterfaceInterceptionTest.java",
      "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/producer/ProducerWithMethodLevelInterceptorsTest.java",
      "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/producer/ProducerWithParameterizedInterceptedMethodsTest.java",
      "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/synthbean/SynthBeanWithParameterizedConstructorsAndInterceptionTest.java",
      "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/synthbean/SynthBeanWithParameterizedInterceptedMethodsTest.java"
    ],
    "pr_changed_test_files": [
      "extensions/arc/deployment/src/test/java/io/quarkus/arc/test/interceptor/producer/ProducerWithFinalInterceptedClassTest.java",
      "extensions/arc/deployment/src/test/java/io/quarkus/arc/test/interceptor/producer/ProducerWithFinalInterceptedMethodTest.java",
      "extensions/arc/deployment/src/test/java/io/quarkus/arc/test/interceptor/producer/ProducerWithoutZeroParamCtorAndInterceptionTest.java",
      "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/producer/ProducerWithClassAndMethodLevelInterceptorsTest.java",
      "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/producer/ProducerWithClassLevelInterceptorsTest.java",
      "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/producer/ProducerWithInterfaceInterceptionTest.java",
      "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/producer/ProducerWithMethodLevelInterceptorsTest.java",
      "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/producer/ProducerWithParameterizedInterceptedMethodsTest.java",
      "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/synthbean/SynthBeanWithParameterizedConstructorsAndInterceptionTest.java",
      "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/synthbean/SynthBeanWithParameterizedInterceptedMethodsTest.java"
    ],
    "base_commit": "994a646be9fd150d612ea43412b9ceede227e1db",
    "head_commit": "f48156a0bab8b63a8f41c130d7bf5b8d8f61b63c",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48061",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48061",
    "dockerfile": "",
    "pr_merged_at": "2025-05-30T13:25:35.000Z",
    "patch": "diff --git a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanProcessor.java b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanProcessor.java\nindex 001dd37f7a7e7..a378d80d1febd 100644\n--- a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanProcessor.java\n+++ b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanProcessor.java\n@@ -274,7 +274,7 @@ public List<Resource> generateResources(ReflectionRegistration reflectionRegistr\n         // for interception of producer methods and synthetic beans and only supports\n         // limited form of interception (and no decoration)\n         InterceptionProxyGenerator interceptionGenerator = new InterceptionProxyGenerator(generateSources,\n-                applicationClassPredicate, annotationLiterals, reflectionRegistration);\n+                applicationClassPredicate, beanDeployment, annotationLiterals, reflectionRegistration);\n \n         List<Resource> resources = new ArrayList<>();\n \n@@ -373,7 +373,8 @@ public Collection<Resource> call() throws Exception {\n                                     secondaryTasks.add(executor.submit(new Callable<Collection<Resource>>() {\n                                         @Override\n                                         public Collection<Resource> call() throws Exception {\n-                                            Collection<Resource> interceptionResources = interceptionGenerator.generate(bean);\n+                                            Collection<Resource> interceptionResources = interceptionGenerator.generate(bean,\n+                                                    bytecodeTransformerConsumer, transformUnproxyableClasses);\n                                             for (Resource r : interceptionResources) {\n                                                 if (r.getSpecialType() == SpecialType.SUBCLASS) {\n                                                     refReg.registerSubclass(bean.getInterceptionProxy().getTargetClass(),\n@@ -487,7 +488,8 @@ public Collection<Resource> call() throws Exception {\n                             resources.addAll(subclassResources);\n                         }\n                         if (bean.getInterceptionProxy() != null) {\n-                            Collection<Resource> interceptionResources = interceptionGenerator.generate(bean);\n+                            Collection<Resource> interceptionResources = interceptionGenerator.generate(bean,\n+                                    bytecodeTransformerConsumer, transformUnproxyableClasses);\n                             for (Resource r : interceptionResources) {\n                                 if (r.getSpecialType() == SpecialType.SUBCLASS) {\n                                     refReg.registerSubclass(bean.getInterceptionProxy().getTargetClass(),\n\ndiff --git a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/InterceptionProxyGenerator.java b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/InterceptionProxyGenerator.java\nindex 9ff06914aca7a..671de9f630c05 100644\n--- a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/InterceptionProxyGenerator.java\n+++ b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/InterceptionProxyGenerator.java\n@@ -8,6 +8,7 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.function.BiFunction;\n+import java.util.function.Consumer;\n import java.util.function.Function;\n import java.util.function.Predicate;\n import java.util.function.Supplier;\n@@ -18,6 +19,7 @@\n import org.jboss.jandex.AnnotationInstanceEquivalenceProxy;\n import org.jboss.jandex.ClassInfo;\n import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n import org.jboss.jandex.MethodInfo;\n import org.jboss.jandex.Type;\n import org.objectweb.asm.Opcodes;\n@@ -42,18 +44,22 @@ public class InterceptionProxyGenerator extends AbstractGenerator {\n     private static final String INTERCEPTION_SUBCLASS = \"_InterceptionSubclass\";\n \n     private final Predicate<DotName> applicationClassPredicate;\n+    private final IndexView beanArchiveIndex;\n     private final AnnotationLiteralProcessor annotationLiterals;\n     private final ReflectionRegistration reflectionRegistration;\n \n     InterceptionProxyGenerator(boolean generateSources, Predicate<DotName> applicationClassPredicate,\n-            AnnotationLiteralProcessor annotationLiterals, ReflectionRegistration reflectionRegistration) {\n+            BeanDeployment deployment, AnnotationLiteralProcessor annotationLiterals,\n+            ReflectionRegistration reflectionRegistration) {\n         super(generateSources);\n         this.applicationClassPredicate = applicationClassPredicate;\n+        this.beanArchiveIndex = deployment.getBeanArchiveIndex();\n         this.annotationLiterals = annotationLiterals;\n         this.reflectionRegistration = reflectionRegistration;\n     }\n \n-    Collection<Resource> generate(BeanInfo bean) {\n+    Collection<Resource> generate(BeanInfo bean, Consumer<BytecodeTransformer> bytecodeTransformerConsumer,\n+            boolean transformUnproxyableClasses) {\n         if (bean.getInterceptionProxy() == null) {\n             return Collections.emptyList();\n         }\n@@ -69,7 +75,8 @@ Collection<Resource> generate(BeanInfo bean) {\n \n         createInterceptionProxyProvider(classOutput, bean);\n         createInterceptionProxy(classOutput, bean);\n-        createInterceptionSubclass(classOutput, bean.getInterceptionProxy());\n+        createInterceptionSubclass(classOutput, bean.getInterceptionProxy(),\n+                bytecodeTransformerConsumer, transformUnproxyableClasses);\n \n         return classOutput.getResources();\n     }\n@@ -148,7 +155,8 @@ private void createInterceptionProxy(ClassOutput classOutput, BeanInfo bean) {\n         }\n     }\n \n-    private void createInterceptionSubclass(ClassOutput classOutput, InterceptionProxyInfo interceptionProxy) {\n+    private void createInterceptionSubclass(ClassOutput classOutput, InterceptionProxyInfo interceptionProxy,\n+            Consumer<BytecodeTransformer> bytecodeTransformerConsumer, boolean transformUnproxyableClasses) {\n         BeanInfo pseudoBean = interceptionProxy.getPseudoBean();\n         ClassInfo pseudoBeanClass = pseudoBean.getImplClazz();\n         String pseudoBeanClassName = pseudoBeanClass.name().toString();\n@@ -355,6 +363,49 @@ private void createInterceptionSubclass(ClassOutput classOutput, InterceptionPro\n \n             MethodCreator getDelegate = clazz.getMethodCreator(\"arc_delegate\", Object.class);\n             getDelegate.returnValue(getDelegate.readInstanceField(delegate.getFieldDescriptor(), getDelegate.getThis()));\n+\n+            // forward non-intercepted methods to the delegate unconditionally\n+            Collection<MethodInfo> methodsToForward = collectMethodsToForward(pseudoBean,\n+                    bytecodeTransformerConsumer, transformUnproxyableClasses);\n+            for (MethodInfo method : methodsToForward) {\n+                MethodCreator mc = clazz.getMethodCreator(MethodDescriptor.of(method));\n+                ResultHandle dlgt = mc.readInstanceField(delegate.getFieldDescriptor(), mc.getThis());\n+                ResultHandle[] args = new ResultHandle[method.parametersCount()];\n+                for (int i = 0; i < method.parametersCount(); i++) {\n+                    args[i] = mc.getMethodParam(i);\n+                }\n+                ResultHandle result = method.declaringClass().isInterface()\n+                        ? mc.invokeInterfaceMethod(method, dlgt, args)\n+                        : mc.invokeVirtualMethod(method, dlgt, args);\n+                mc.returnValue(result);\n+            }\n+        }\n+    }\n+\n+    // uses the same algorithm as `ClientProxyGenerator`\n+    private Collection<MethodInfo> collectMethodsToForward(BeanInfo pseudoBean,\n+            Consumer<BytecodeTransformer> bytecodeTransformerConsumer, boolean transformUnproxyableClasses) {\n+        ClassInfo pseudoBeanClass = pseudoBean.getImplClazz();\n+\n+        Map<Methods.MethodKey, MethodInfo> methods = new HashMap<>();\n+        Map<String, Set<Methods.MethodKey>> methodsFromWhichToRemoveFinal = new HashMap<>();\n+\n+        Methods.addDelegatingMethods(beanArchiveIndex, pseudoBeanClass, methods, methodsFromWhichToRemoveFinal,\n+                transformUnproxyableClasses);\n+\n+        if (!methodsFromWhichToRemoveFinal.isEmpty()) {\n+            for (Map.Entry<String, Set<Methods.MethodKey>> entry : methodsFromWhichToRemoveFinal.entrySet()) {\n+                String className = entry.getKey();\n+                bytecodeTransformerConsumer.accept(new BytecodeTransformer(className,\n+                        new Methods.RemoveFinalFromMethod(entry.getValue())));\n+            }\n         }\n+\n+        for (MethodInfo interceptedMethod : pseudoBean.getInterceptedMethods().keySet()) {\n+            // these methods are intercepted, so they don't need to (and in fact _must not_) forward directly\n+            methods.remove(new Methods.MethodKey(interceptedMethod));\n+        }\n+\n+        return methods.values();\n     }\n }\n\ndiff --git a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/Methods.java b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/Methods.java\nindex 07375e98f895d..d18a4bfb664eb 100644\n--- a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/Methods.java\n+++ b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/Methods.java\n@@ -116,7 +116,7 @@ private static boolean skipForClientProxy(MethodInfo method, boolean transformUn\n         if (Modifier.isFinal(method.flags())) {\n             String className = method.declaringClass().name().toString();\n             if (!className.startsWith(\"java.\")) {\n-                if (transformUnproxyableClasses && (methodsFromWhichToRemoveFinal != null)) {\n+                if (transformUnproxyableClasses && methodsFromWhichToRemoveFinal != null) {\n                     methodsFromWhichToRemoveFinal.computeIfAbsent(className, (k) -> new HashSet<>())\n                             .add(new MethodKey(method));\n                     return false;\n",
    "test_patch": "diff --git a/extensions/arc/deployment/src/test/java/io/quarkus/arc/test/interceptor/producer/ProducerWithFinalInterceptedClassTest.java b/extensions/arc/deployment/src/test/java/io/quarkus/arc/test/interceptor/producer/ProducerWithFinalInterceptedClassTest.java\nindex d4ebef0dafb03..dff9bc78ba9ae 100644\n--- a/extensions/arc/deployment/src/test/java/io/quarkus/arc/test/interceptor/producer/ProducerWithFinalInterceptedClassTest.java\n+++ b/extensions/arc/deployment/src/test/java/io/quarkus/arc/test/interceptor/producer/ProducerWithFinalInterceptedClassTest.java\n@@ -32,8 +32,8 @@ public class ProducerWithFinalInterceptedClassTest {\n     @Test\n     public void test() {\n         MyNonbean nonbean = Arc.container().instance(MyNonbean.class).get();\n-        assertEquals(\"intercepted: hello1\", nonbean.hello1());\n-        assertEquals(\"hello2\", nonbean.hello2());\n+        assertEquals(\"intercepted: hello1_foobar\", nonbean.hello1());\n+        assertEquals(\"hello2_foobar\", nonbean.hello2());\n     }\n \n     @Retention(RetentionPolicy.RUNTIME)\n@@ -53,13 +53,23 @@ Object intercept(InvocationContext ctx) throws Exception {\n     }\n \n     static final class MyNonbean {\n+        private final String value;\n+\n+        MyNonbean() {\n+            this(null);\n+        }\n+\n+        MyNonbean(String value) {\n+            this.value = value;\n+        }\n+\n         @MyBinding\n         String hello1() {\n-            return \"hello1\";\n+            return \"hello1_\" + value;\n         }\n \n         String hello2() {\n-            return \"hello2\";\n+            return \"hello2_\" + value;\n         }\n     }\n \n@@ -68,7 +78,7 @@ static class MyProducer {\n         @Produces\n         @Unremovable\n         MyNonbean produce(InterceptionProxy<MyNonbean> proxy) {\n-            return proxy.create(new MyNonbean());\n+            return proxy.create(new MyNonbean(\"foobar\"));\n         }\n     }\n }\n\ndiff --git a/extensions/arc/deployment/src/test/java/io/quarkus/arc/test/interceptor/producer/ProducerWithFinalInterceptedMethodTest.java b/extensions/arc/deployment/src/test/java/io/quarkus/arc/test/interceptor/producer/ProducerWithFinalInterceptedMethodTest.java\nindex ca25329c0c71c..6a1fd68bbcaef 100644\n--- a/extensions/arc/deployment/src/test/java/io/quarkus/arc/test/interceptor/producer/ProducerWithFinalInterceptedMethodTest.java\n+++ b/extensions/arc/deployment/src/test/java/io/quarkus/arc/test/interceptor/producer/ProducerWithFinalInterceptedMethodTest.java\n@@ -32,8 +32,8 @@ public class ProducerWithFinalInterceptedMethodTest {\n     @Test\n     public void test() {\n         MyNonbean nonbean = Arc.container().instance(MyNonbean.class).get();\n-        assertEquals(\"intercepted: hello1\", nonbean.hello1());\n-        assertEquals(\"hello2\", nonbean.hello2());\n+        assertEquals(\"intercepted: hello1_foobar\", nonbean.hello1());\n+        assertEquals(\"hello2_foobar\", nonbean.hello2());\n     }\n \n     @Retention(RetentionPolicy.RUNTIME)\n@@ -53,13 +53,23 @@ Object intercept(InvocationContext ctx) throws Exception {\n     }\n \n     static class MyNonbean {\n+        private final String value;\n+\n+        MyNonbean() {\n+            this(null);\n+        }\n+\n+        MyNonbean(String value) {\n+            this.value = value;\n+        }\n+\n         @MyBinding\n         final String hello1() {\n-            return \"hello1\";\n+            return \"hello1_\" + value;\n         }\n \n         final String hello2() {\n-            return \"hello2\";\n+            return \"hello2_\" + value;\n         }\n     }\n \n@@ -68,7 +78,7 @@ static class MyProducer {\n         @Produces\n         @Unremovable\n         MyNonbean produce(InterceptionProxy<MyNonbean> proxy) {\n-            return proxy.create(new MyNonbean());\n+            return proxy.create(new MyNonbean(\"foobar\"));\n         }\n     }\n }\n\ndiff --git a/extensions/arc/deployment/src/test/java/io/quarkus/arc/test/interceptor/producer/ProducerWithoutZeroParamCtorAndInterceptionTest.java b/extensions/arc/deployment/src/test/java/io/quarkus/arc/test/interceptor/producer/ProducerWithoutZeroParamCtorAndInterceptionTest.java\nindex a9433aecbbc7d..ce9eeb9001b33 100644\n--- a/extensions/arc/deployment/src/test/java/io/quarkus/arc/test/interceptor/producer/ProducerWithoutZeroParamCtorAndInterceptionTest.java\n+++ b/extensions/arc/deployment/src/test/java/io/quarkus/arc/test/interceptor/producer/ProducerWithoutZeroParamCtorAndInterceptionTest.java\n@@ -32,7 +32,8 @@ public class ProducerWithoutZeroParamCtorAndInterceptionTest {\n     @Test\n     public void test() {\n         MyNonbean nonbean = Arc.container().instance(MyNonbean.class).get();\n-        assertEquals(\"intercepted: hello\", nonbean.hello());\n+        assertEquals(\"intercepted: hello1_foobar\", nonbean.hello1());\n+        assertEquals(\"hello2_foobar\", nonbean.hello2());\n     }\n \n     @Retention(RetentionPolicy.RUNTIME)\n@@ -52,12 +53,19 @@ Object intercept(InvocationContext ctx) throws Exception {\n     }\n \n     static class MyNonbean {\n-        MyNonbean(int ignored) {\n+        private final String value;\n+\n+        private MyNonbean(String value) {\n+            this.value = value;\n         }\n \n         @MyBinding\n-        String hello() {\n-            return \"hello\";\n+        String hello1() {\n+            return \"hello1_\" + value;\n+        }\n+\n+        String hello2() {\n+            return \"hello2_\" + value;\n         }\n     }\n \n@@ -66,7 +74,7 @@ static class MyProducer {\n         @Produces\n         @Unremovable\n         MyNonbean produce(InterceptionProxy<MyNonbean> proxy) {\n-            return proxy.create(new MyNonbean(0));\n+            return proxy.create(new MyNonbean(\"foobar\"));\n         }\n     }\n }\n\ndiff --git a/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/producer/ProducerWithClassAndMethodLevelInterceptorsTest.java b/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/producer/ProducerWithClassAndMethodLevelInterceptorsTest.java\nindex 6610d28524221..c1a7a59459a88 100644\n--- a/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/producer/ProducerWithClassAndMethodLevelInterceptorsTest.java\n+++ b/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/producer/ProducerWithClassAndMethodLevelInterceptorsTest.java\n@@ -31,10 +31,10 @@ public class ProducerWithClassAndMethodLevelInterceptorsTest {\n     @Test\n     public void test() {\n         MyNonbean nonbean = Arc.container().instance(MyNonbean.class).get();\n-        assertEquals(\"intercepted1: intercepted2: hello1\", nonbean.hello1());\n-        assertEquals(\"intercepted1: hello2\", nonbean.hello2());\n-        assertEquals(\"hello3\", nonbean.hello3());\n-        assertEquals(\"intercepted2: hello4\", nonbean.hello4());\n+        assertEquals(\"intercepted1: intercepted2: hello1_foobar\", nonbean.hello1());\n+        assertEquals(\"intercepted1: hello2_foobar\", nonbean.hello2());\n+        assertEquals(\"intercepted2: hello3_foobar\", nonbean.hello3());\n+        assertEquals(\"hello4_foobar\", nonbean.hello4());\n     }\n \n     @Retention(RetentionPolicy.RUNTIME)\n@@ -71,24 +71,34 @@ Object intercept(InvocationContext ctx) throws Exception {\n \n     @MyBinding1\n     static class MyNonbean {\n+        private final String value;\n+\n+        MyNonbean() {\n+            this(null);\n+        }\n+\n+        MyNonbean(String value) {\n+            this.value = value;\n+        }\n+\n         @MyBinding2\n         String hello1() {\n-            return \"hello1\";\n+            return \"hello1_\" + value;\n         }\n \n         String hello2() {\n-            return \"hello2\";\n+            return \"hello2_\" + value;\n         }\n \n         @NoClassInterceptors\n+        @MyBinding2\n         String hello3() {\n-            return \"hello3\";\n+            return \"hello3_\" + value;\n         }\n \n         @NoClassInterceptors\n-        @MyBinding2\n         String hello4() {\n-            return \"hello4\";\n+            return \"hello4_\" + value;\n         }\n     }\n \n@@ -96,7 +106,7 @@ String hello4() {\n     static class MyProducer {\n         @Produces\n         MyNonbean produce(InterceptionProxy<MyNonbean> proxy) {\n-            return proxy.create(new MyNonbean());\n+            return proxy.create(new MyNonbean(\"foobar\"));\n         }\n     }\n }\n\ndiff --git a/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/producer/ProducerWithClassLevelInterceptorsTest.java b/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/producer/ProducerWithClassLevelInterceptorsTest.java\nindex 67f28a11ef1d7..38dee37b4f770 100644\n--- a/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/producer/ProducerWithClassLevelInterceptorsTest.java\n+++ b/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/producer/ProducerWithClassLevelInterceptorsTest.java\n@@ -31,8 +31,8 @@ public class ProducerWithClassLevelInterceptorsTest {\n     @Test\n     public void test() {\n         MyNonbean nonbean = Arc.container().instance(MyNonbean.class).get();\n-        assertEquals(\"intercepted1: intercepted2: hello1\", nonbean.hello1());\n-        assertEquals(\"hello2\", nonbean.hello2());\n+        assertEquals(\"intercepted1: intercepted2: hello1_foobar\", nonbean.hello1());\n+        assertEquals(\"hello2_foobar\", nonbean.hello2());\n     }\n \n     @Retention(RetentionPolicy.RUNTIME)\n@@ -70,13 +70,23 @@ Object intercept(InvocationContext ctx) throws Exception {\n     @MyBinding1\n     @MyBinding2\n     static class MyNonbean {\n+        private final String value;\n+\n+        MyNonbean() {\n+            this(null);\n+        }\n+\n+        MyNonbean(String value) {\n+            this.value = value;\n+        }\n+\n         String hello1() {\n-            return \"hello1\";\n+            return \"hello1_\" + value;\n         }\n \n         @NoClassInterceptors\n         String hello2() {\n-            return \"hello2\";\n+            return \"hello2_\" + value;\n         }\n     }\n \n@@ -84,7 +94,7 @@ String hello2() {\n     static class MyProducer {\n         @Produces\n         MyNonbean produce(InterceptionProxy<MyNonbean> proxy) {\n-            return proxy.create(new MyNonbean());\n+            return proxy.create(new MyNonbean(\"foobar\"));\n         }\n     }\n }\n\ndiff --git a/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/producer/ProducerWithInterfaceInterceptionTest.java b/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/producer/ProducerWithInterfaceInterceptionTest.java\nindex 28c96f8b9e0c1..0d5e65fa86c1d 100644\n--- a/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/producer/ProducerWithInterfaceInterceptionTest.java\n+++ b/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/producer/ProducerWithInterfaceInterceptionTest.java\n@@ -31,9 +31,11 @@ public class ProducerWithInterfaceInterceptionTest {\n     @Test\n     public void test() {\n         MyNonbean nonbean = Arc.container().instance(MyNonbean.class).get();\n-        assertEquals(\"intercepted1: hello1\", nonbean.hello1());\n-        assertEquals(\"intercepted1: intercepted2: hello2\", nonbean.hello2());\n+        assertEquals(\"intercepted1: hello1_foobar\", nonbean.hello1());\n+        assertEquals(\"intercepted1: intercepted2: hello2_foobar\", nonbean.hello2());\n         assertEquals(\"intercepted2: hello3\", nonbean.hello3());\n+        assertEquals(\"hello4_foobar\", nonbean.hello4());\n+        assertEquals(\"hello5\", nonbean.hello5());\n     }\n \n     @Retention(RetentionPolicy.RUNTIME)\n@@ -80,17 +82,36 @@ interface MyNonbean {\n         default String hello3() {\n             return \"hello3\";\n         }\n+\n+        @NoClassInterceptors\n+        String hello4();\n+\n+        @NoClassInterceptors\n+        default String hello5() {\n+            return \"hello5\";\n+        };\n     }\n \n     static class MyNonbeanImpl implements MyNonbean {\n+        private final String value;\n+\n+        MyNonbeanImpl(String value) {\n+            this.value = value;\n+        }\n+\n         @Override\n         public String hello1() {\n-            return \"hello1\";\n+            return \"hello1_\" + value;\n         }\n \n         @Override\n         public String hello2() {\n-            return \"hello2\";\n+            return \"hello2_\" + value;\n+        }\n+\n+        @Override\n+        public String hello4() {\n+            return \"hello4_\" + value;\n         }\n     }\n \n@@ -98,7 +119,7 @@ public String hello2() {\n     static class MyProducer {\n         @Produces\n         MyNonbean produce(InterceptionProxy<MyNonbean> proxy) {\n-            return proxy.create(new MyNonbeanImpl());\n+            return proxy.create(new MyNonbeanImpl(\"foobar\"));\n         }\n     }\n }\n\ndiff --git a/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/producer/ProducerWithMethodLevelInterceptorsTest.java b/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/producer/ProducerWithMethodLevelInterceptorsTest.java\nindex 2682dead22556..e9b5262df2f6d 100644\n--- a/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/producer/ProducerWithMethodLevelInterceptorsTest.java\n+++ b/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/producer/ProducerWithMethodLevelInterceptorsTest.java\n@@ -30,10 +30,10 @@ public class ProducerWithMethodLevelInterceptorsTest {\n     @Test\n     public void test() {\n         MyNonbean nonbean = Arc.container().instance(MyNonbean.class).get();\n-        assertEquals(\"intercepted1: hello1\", nonbean.hello1());\n-        assertEquals(\"intercepted2: hello2\", nonbean.hello2());\n-        assertEquals(\"intercepted1: intercepted2: hello3\", nonbean.hello3());\n-        assertEquals(\"hello4\", nonbean.hello4());\n+        assertEquals(\"intercepted1: hello1_foobar\", nonbean.hello1());\n+        assertEquals(\"intercepted2: hello2_foobar\", nonbean.hello2());\n+        assertEquals(\"intercepted1: intercepted2: hello3_foobar\", nonbean.hello3());\n+        assertEquals(\"hello4_foobar\", nonbean.hello4());\n     }\n \n     @Retention(RetentionPolicy.RUNTIME)\n@@ -69,24 +69,34 @@ Object intercept(InvocationContext ctx) throws Exception {\n     }\n \n     static class MyNonbean {\n+        private final String value;\n+\n+        MyNonbean() {\n+            this(null);\n+        }\n+\n+        MyNonbean(String value) {\n+            this.value = value;\n+        }\n+\n         @MyBinding1\n         String hello1() {\n-            return \"hello1\";\n+            return \"hello1_\" + value;\n         }\n \n         @MyBinding2\n         String hello2() {\n-            return \"hello2\";\n+            return \"hello2_\" + value;\n         }\n \n         @MyBinding1\n         @MyBinding2\n         String hello3() {\n-            return \"hello3\";\n+            return \"hello3_\" + value;\n         }\n \n         String hello4() {\n-            return \"hello4\";\n+            return \"hello4_\" + value;\n         }\n     }\n \n@@ -94,7 +104,7 @@ String hello4() {\n     static class MyProducer {\n         @Produces\n         MyNonbean produce(InterceptionProxy<MyNonbean> proxy) {\n-            return proxy.create(new MyNonbean());\n+            return proxy.create(new MyNonbean(\"foobar\"));\n         }\n     }\n }\n\ndiff --git a/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/producer/ProducerWithParameterizedInterceptedMethodsTest.java b/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/producer/ProducerWithParameterizedInterceptedMethodsTest.java\nindex 980d9910e6733..fc90c151b6eed 100644\n--- a/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/producer/ProducerWithParameterizedInterceptedMethodsTest.java\n+++ b/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/producer/ProducerWithParameterizedInterceptedMethodsTest.java\n@@ -31,10 +31,10 @@ public class ProducerWithParameterizedInterceptedMethodsTest {\n     @Test\n     public void test() {\n         MyNonbean nonbean = Arc.container().instance(MyNonbean.class).get();\n-        assertEquals(\"intercepted1: intercepted2: hello1_1\", nonbean.hello1(1));\n-        assertEquals(\"intercepted1: hello2_2_3\", nonbean.hello2(2, 3));\n-        assertEquals(\"intercepted2: hello3_4_5_6\", nonbean.hello3(4, 5, 6));\n-        assertEquals(\"hello4_7\", nonbean.hello4(7));\n+        assertEquals(\"intercepted1: intercepted2: hello1_1_foobar\", nonbean.hello1(1));\n+        assertEquals(\"intercepted1: hello2_2_3_foobar\", nonbean.hello2(2, 3));\n+        assertEquals(\"intercepted2: hello3_4_5_6_foobar\", nonbean.hello3(4, 5, 6));\n+        assertEquals(\"hello4_7_foobar\", nonbean.hello4(7));\n     }\n \n     @Retention(RetentionPolicy.RUNTIME)\n@@ -71,24 +71,34 @@ Object intercept(InvocationContext ctx) throws Exception {\n \n     @MyBinding1\n     static class MyNonbean {\n+        private final String value;\n+\n+        MyNonbean() {\n+            this(null);\n+        }\n+\n+        MyNonbean(String value) {\n+            this.value = value;\n+        }\n+\n         @MyBinding2\n         String hello1(int i) {\n-            return \"hello1_\" + i;\n+            return \"hello1_\" + i + \"_\" + value;\n         }\n \n         String hello2(int i, int j) {\n-            return \"hello2_\" + i + \"_\" + j;\n+            return \"hello2_\" + i + \"_\" + j + \"_\" + value;\n         }\n \n         @NoClassInterceptors\n         @MyBinding2\n         String hello3(int i, int j, int k) {\n-            return \"hello3_\" + i + \"_\" + j + \"_\" + k;\n+            return \"hello3_\" + i + \"_\" + j + \"_\" + k + \"_\" + value;\n         }\n \n         @NoClassInterceptors\n         String hello4(int i) {\n-            return \"hello4_\" + i;\n+            return \"hello4_\" + i + \"_\" + value;\n         }\n     }\n \n@@ -96,7 +106,7 @@ String hello4(int i) {\n     static class MyProducer {\n         @Produces\n         MyNonbean produce(InterceptionProxy<MyNonbean> proxy) {\n-            return proxy.create(new MyNonbean());\n+            return proxy.create(new MyNonbean(\"foobar\"));\n         }\n     }\n }\n\ndiff --git a/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/synthbean/SynthBeanWithParameterizedConstructorsAndInterceptionTest.java b/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/synthbean/SynthBeanWithParameterizedConstructorsAndInterceptionTest.java\nindex d320bd5c4a972..1f6919a614a2c 100644\n--- a/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/synthbean/SynthBeanWithParameterizedConstructorsAndInterceptionTest.java\n+++ b/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/synthbean/SynthBeanWithParameterizedConstructorsAndInterceptionTest.java\n@@ -67,6 +67,7 @@ public void constructorWithNoParams() {\n         MyNonbean nonbean = Arc.container().instance(MyNonbean.class).get();\n         assertEquals(\"intercepted1: intercepted2: hello1_0_0\", nonbean.hello1());\n         assertEquals(\"intercepted2: hello2_0_0_6\", nonbean.hello2(6));\n+        assertEquals(\"hello3_0_0\", nonbean.hello3());\n     }\n \n     @Test\n@@ -76,6 +77,7 @@ public void constructorWithIntParam() {\n         MyNonbean nonbean = Arc.container().instance(MyNonbean.class).get();\n         assertEquals(\"intercepted1: intercepted2: hello1_1_0\", nonbean.hello1());\n         assertEquals(\"intercepted2: hello2_1_0_7\", nonbean.hello2(7));\n+        assertEquals(\"hello3_1_0\", nonbean.hello3());\n     }\n \n     @Test\n@@ -85,6 +87,7 @@ public void constructorWithIntIntParams() {\n         MyNonbean nonbean = Arc.container().instance(MyNonbean.class).get();\n         assertEquals(\"intercepted1: intercepted2: hello1_2_3\", nonbean.hello1());\n         assertEquals(\"intercepted2: hello2_2_3_8\", nonbean.hello2(8));\n+        assertEquals(\"hello3_2_3\", nonbean.hello3());\n     }\n \n     @Test\n@@ -94,6 +97,7 @@ public void constructorWithByteShortParams() {\n         MyNonbean nonbean = Arc.container().instance(MyNonbean.class).get();\n         assertEquals(\"intercepted1: intercepted2: hello1_4_5\", nonbean.hello1());\n         assertEquals(\"intercepted2: hello2_4_5_9\", nonbean.hello2(9));\n+        assertEquals(\"hello3_4_5\", nonbean.hello3());\n     }\n \n     @Retention(RetentionPolicy.RUNTIME)\n@@ -163,5 +167,10 @@ String hello1() {\n         String hello2(int k) {\n             return \"hello2_\" + i + \"_\" + j + \"_\" + k;\n         }\n+\n+        @NoClassInterceptors\n+        String hello3() {\n+            return \"hello3_\" + i + \"_\" + j;\n+        }\n     }\n }\n\ndiff --git a/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/synthbean/SynthBeanWithParameterizedInterceptedMethodsTest.java b/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/synthbean/SynthBeanWithParameterizedInterceptedMethodsTest.java\nindex b048d216f6682..820e579020317 100644\n--- a/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/synthbean/SynthBeanWithParameterizedInterceptedMethodsTest.java\n+++ b/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/synthbean/SynthBeanWithParameterizedInterceptedMethodsTest.java\n@@ -44,17 +44,17 @@ static class MyNonbeanCreator implements BeanCreator<MyNonbean> {\n         @Override\n         public MyNonbean create(SyntheticCreationalContext<MyNonbean> context) {\n             InterceptionProxy<MyNonbean> proxy = context.getInterceptionProxy();\n-            return proxy.create(new MyNonbean());\n+            return proxy.create(new MyNonbean(\"foobar\"));\n         }\n     }\n \n     @Test\n     public void test() {\n         MyNonbean nonbean = Arc.container().instance(MyNonbean.class).get();\n-        assertEquals(\"intercepted1: intercepted2: hello1_1\", nonbean.hello1(1));\n-        assertEquals(\"intercepted1: hello2_2_3\", nonbean.hello2(2, 3));\n-        assertEquals(\"intercepted2: hello3_4_5_6\", nonbean.hello3(4, 5, 6));\n-        assertEquals(\"hello4_7\", nonbean.hello4(7));\n+        assertEquals(\"intercepted1: intercepted2: hello1_1_foobar\", nonbean.hello1(1));\n+        assertEquals(\"intercepted1: hello2_2_3_foobar\", nonbean.hello2(2, 3));\n+        assertEquals(\"intercepted2: hello3_4_5_6_foobar\", nonbean.hello3(4, 5, 6));\n+        assertEquals(\"hello4_7_foobar\", nonbean.hello4(7));\n     }\n \n     @Retention(RetentionPolicy.RUNTIME)\n@@ -91,24 +91,34 @@ Object intercept(InvocationContext ctx) throws Exception {\n \n     @MyBinding1\n     static class MyNonbean {\n+        private final String value;\n+\n+        MyNonbean() {\n+            this(null);\n+        }\n+\n+        MyNonbean(String value) {\n+            this.value = value;\n+        }\n+\n         @MyBinding2\n         String hello1(int i) {\n-            return \"hello1_\" + i;\n+            return \"hello1_\" + i + \"_\" + value;\n         }\n \n         String hello2(int i, int j) {\n-            return \"hello2_\" + i + \"_\" + j;\n+            return \"hello2_\" + i + \"_\" + j + \"_\" + value;\n         }\n \n         @NoClassInterceptors\n         @MyBinding2\n         String hello3(int i, int j, int k) {\n-            return \"hello3_\" + i + \"_\" + j + \"_\" + k;\n+            return \"hello3_\" + i + \"_\" + j + \"_\" + k + \"_\" + value;\n         }\n \n         @NoClassInterceptors\n         String hello4(int i) {\n-            return \"hello4_\" + i;\n+            return \"hello4_\" + i + \"_\" + value;\n         }\n     }\n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-48008",
    "pr_id": 48008,
    "issue_id": 48004,
    "repo": "quarkusio/quarkus",
    "problem_statement": "`maven` integration test constantly failing in native mode\n### Describe the bug\n\n$title\n\nWe see this in our nightly Mandrel CI runs: https://github.com/graalvm/mandrel/issues/812#issuecomment-2899696180\n\nbut I can reproduce the failure locally with Mandrel for JDK 21, although it appears to be passing in the quarkus CI.\n\n### Expected behavior\n\nTest should be passing\n\n### Actual behavior\n\nTest fails with:\n\n```\n__  ____  __  _____   ___  __ ____  ______ \n --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/ \n -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\   \n--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/   \n2025-05-22 01:46:33,582 INFO  [io.quarkus] (Quarkus Main Thread) quarkus-test-test-profile 1.0-SNAPSHOT on JVM (powered by Quarkus 999-SNAPSHOT) started in 2.891s. Listening on: http://localhost:8080\n2025-05-22 01:46:33,584 INFO  [io.quarkus] (Quarkus Main Thread) Profile dev activated. Live Coding activated.\n2025-05-22 01:46:33,584 INFO  [io.quarkus] (Quarkus Main Thread) Installed features: [cdi, resteasy, smallrye-context-propagation, vertx]\nStarting test run, 5 tests to run.\nRunning 1/5. Running: #JUnit Jupiter\nRunning 1/5. Running: org.acme.HelloResourceTest#HelloResourceTest\nRunning 1/5. Running: org.acme.VanillaTest#VanillaTest\nRunning 2/5. Running: org.acme.VanillaTest#test()\nPress [e] to edit command line args (currently ''), [r] to re-run, [h] for more options>\nPress [e] to edit command line args (currently ''), [r] to re-run, [o] Toggle test output, [h] for more options>\n2025-05-22 01:46:34,423 ERROR [io.qua.test] (Test runner thread) ==================== TEST REPORT #1 ====================\n2025-05-22 01:46:34,424 ERROR [io.qua.test] (Test runner thread) Test HelloResourceTest failed \n: java.lang.IllegalStateException: Internal error: ClassLoader QuarkusClassLoader:Deployment Class Loader: TEST for quarkus-test-test-profile-1.0-SNAPSHOT@6bcdd863 does not have a linked curated application.\n\tat io.quarkus.test.junit.QuarkusTestExtension.ensureStarted(QuarkusTestExtension.java:619)\n\tat io.quarkus.test.junit.QuarkusTestExtension.beforeAll(QuarkusTestExtension.java:687)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\n2025-05-22 01:46:34,424 ERROR [io.qua.test] (Test runner thread) Test NestedInnerClass failed \n: java.lang.IllegalStateException: Internal error: ClassLoader QuarkusClassLoader:Deployment Class Loader: TEST for quarkus-test-test-profile-1.0-SNAPSHOT@6bcdd863 does not have a linked curated application.\n\tat io.quarkus.test.junit.QuarkusTestExtension.ensureStarted(QuarkusTestExtension.java:619)\n\tat io.quarkus.test.junit.QuarkusTestExtension.beforeAll(QuarkusTestExtension.java:687)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\n2025-05-22 01:46:34,424 ERROR [io.qua.test] (Test runner thread) >>>>>>>>>>>>>>>>>>>> Summary: <<<<<<<<<<<<<<<<<<<<\nHelloResourceTest Internal error: ClassLoader QuarkusClassLoader:Deployment Class Loader: TEST for quarkus-test-test-profile-1.0-SNAPSHOT@6bcdd863 does not have a linked curated application.\nNestedInnerClass Internal error: ClassLoader QuarkusClassLoader:Deployment Class Loader: TEST for quarkus-test-test-profile-1.0-SNAPSHOT@6bcdd863 does not have a linked curated application.\n2025-05-22 01:46:34,426 ERROR [io.qua.test] (Test runner thread) >>>>>>>>>>>>>>>>>>>> 0 TESTS FAILED <<<<<<<<<<<<<<<<<<<<\n0 tests failed (1 passing, 1 skipped), 1 test was run in 1582ms. Tests completed at 01:46:34.\nError:  Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 15.82 s <<< FAILURE! -- in io.quarkus.maven.it.QuarkusTestIT\nError:  io.quarkus.maven.it.QuarkusTestIT.testNestedQuarkusTestMixedWithNormalTestsContinuousTesting -- Time elapsed: 15.82 s <<< FAILURE!\norg.opentest4j.AssertionFailedError: expected: <4> but was: <1>\n\tat org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)\n\tat org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)\n\tat org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)\n\tat org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:166)\n\tat org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:161)\n\tat org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:632)\n\tat io.quarkus.maven.it.QuarkusTestIT.testNestedQuarkusTestMixedWithNormalTestsContinuousTesting(QuarkusTestIT.java:93)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:569)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\n```\n\n### How to Reproduce?\n\n```\n./mvnw -e --settings .github/mvn-settings.xml --fail-at-end \\\n  -Dformat.skip -Denforcer.skip -DskipDocs -Dforbiddenapis.skip \\\n  -DskipExtensionValidation -DskipCodestartValidation -Dtest-containers \\\n  -Dstart-containers -Dquarkus.native.native-image-xmx=6g \\\n  -Dnative -Dnative.surefire.skip -Dno-descriptor-tests \\\n  clean verify -Dquarkus.native.container-build=true \\\n  -pl integration-tests/maven/\n```\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### Mandrel or GraalVM version (if different from Java)\n\n_No response_\n\n### Quarkus version or git rev\n\n_No response_\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\nThe issue seems to be triggered by:\n\n```\n2025-05-22 01:46:34,424 ERROR [io.qua.test] (Test runner thread) Test NestedInnerClass failed \n: java.lang.IllegalStateException: Internal error: ClassLoader QuarkusClassLoader:Deployment Class Loader: TEST for quarkus-test-test-profile-1.0-SNAPSHOT@6bcdd863 does not have a linked curated application.\n\tat io.quarkus.test.junit.QuarkusTestExtension.ensureStarted(QuarkusTestExtension.java:619)\n\tat io.quarkus.test.junit.QuarkusTestExtension.beforeAll(QuarkusTestExtension.java:687)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n```",
    "issue_word_count": 827,
    "test_files_count": 1,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "integration-tests/maven/src/test/java/io/quarkus/maven/it/QuarkusTestIT.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/maven/src/test/java/io/quarkus/maven/it/QuarkusTestIT.java"
    ],
    "base_commit": "60a4e04c480fc484b6d8cabaf8232de66b019148",
    "head_commit": "8b05e8286d145a4cdd0e875a1d646bce588d82a4",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/48008",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48008",
    "dockerfile": "",
    "pr_merged_at": "2025-05-22T15:44:04.000Z",
    "patch": "",
    "test_patch": "diff --git a/integration-tests/maven/src/test/java/io/quarkus/maven/it/QuarkusTestIT.java b/integration-tests/maven/src/test/java/io/quarkus/maven/it/QuarkusTestIT.java\nindex e1bb907641f34..194ef20aadbe2 100644\n--- a/integration-tests/maven/src/test/java/io/quarkus/maven/it/QuarkusTestIT.java\n+++ b/integration-tests/maven/src/test/java/io/quarkus/maven/it/QuarkusTestIT.java\n@@ -76,6 +76,7 @@ public void testNestedQuarkusTestMixedWithNormalTests()\n     }\n \n     @DisabledOnOs(OS.WINDOWS) // Tracked by https://github.com/quarkusio/quarkus/issues/47913\n+    @Disabled(\"See https://github.com/quarkusio/quarkus/issues/48004\")\n     @Test\n     public void testNestedQuarkusTestMixedWithNormalTestsContinuousTesting()\n             throws MavenInvocationException, FileNotFoundException {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47978",
    "pr_id": 47978,
    "issue_id": 47151,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Support io.micrometer.prometheusmetrics.PrometheusMeterRegistry\n### Description\n\nSince Micrometer version 1.13.0 - Quarkus is in version 1.14.5 - `io.micrometer.prometheus.PrometheusMeterRegistry` is deprecated in favor of `io.micrometer.prometheusmetrics.PrometheusMeterRegistry` that lives in the `micrometer-registry-prometheus` dependency.\n\nSince Infinispan 15.1, for example, we are using the new registry. However Quarkus does not still support the new registry in native mode. Infinispan 16.0 (next LTS) will be ready at the end of 2025\n\n### Tasks\n\n- [ ] Move current `quarkus-micrometer-registry-prometheus`, the one using the legacy client, to Quarkiverse\n- [ ] Update current extension to use the new prometheus v1.x client\n- [ ] Documents changes and impacts",
    "issue_word_count": 107,
    "test_files_count": 41,
    "non_test_files_count": 17,
    "pr_changed_files": [
      ".github/native-tests.json",
      "bom/application/pom.xml",
      "docs/src/main/asciidoc/telemetry-micrometer-to-opentelemetry.adoc",
      "docs/src/main/asciidoc/telemetry-micrometer-tutorial.adoc",
      "docs/src/main/asciidoc/telemetry-micrometer.adoc",
      "extensions/micrometer-registry-prometheus/deployment/pom.xml",
      "extensions/micrometer-registry-prometheus/runtime/pom.xml",
      "extensions/micrometer/deployment/pom.xml",
      "extensions/micrometer/deployment/src/main/java/io/quarkus/micrometer/deployment/export/PrometheusRegistryProcessor.java",
      "extensions/micrometer/deployment/src/test/java/io/quarkus/micrometer/deployment/export/JsonAndPrometheusRegistryEnabledTest.java",
      "extensions/micrometer/deployment/src/test/java/io/quarkus/micrometer/deployment/export/NoDefaultPrometheusTest.java",
      "extensions/micrometer/deployment/src/test/java/io/quarkus/micrometer/deployment/export/PrometheusEnabledTest.java",
      "extensions/micrometer/deployment/src/test/java/io/quarkus/micrometer/deployment/export/SecondPrometheusProvider.java",
      "extensions/micrometer/runtime/pom.xml",
      "extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/binder/vertx/VertxHttpServerMetrics.java",
      "extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/export/PrometheusMeterRegistryProducer.java",
      "extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/export/PrometheusMeterRegistryProvider.java",
      "extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/export/PrometheusRecorder.java",
      "extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/export/exemplars/EmptyExemplarSamplerProvider.java",
      "extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/export/exemplars/OpentelemetryExemplarSamplerProvider.java",
      "extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/export/handlers/PrometheusHandler.java",
      "extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/graal/Substitutions.java",
      "extensions/observability-devservices/testlibs/devresource-lgtm/src/main/java/io/quarkus/observability/devresource/lgtm/LgtmResource.java",
      "integration-tests/micrometer-prometheus-opentelemetry/pom.xml",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/ContextLocalTag.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/ExporterResource.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/HeaderTag.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/ResponseHeaderTag.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/doc/micrometer/ExampleResource.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/AnnotatedResource.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/AnswerToEverythingExpressionResolver.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/CustomConfiguration.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/Fruit.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/FruitResource.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/MessageResource.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/MessageResourceApi.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/MessageResourceNestedApi.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/PathTemplateResource.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/PingPongResource.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/PrefixingValueResolver.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/PrimeNumberResource.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/RootResource.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/SecuredResource.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/SubResource.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/resources/application.properties",
      "integration-tests/micrometer-prometheus-opentelemetry/src/test/java/io/quarkus/it/micrometer/prometheus/ExemplarOffTest.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/test/java/io/quarkus/it/micrometer/prometheus/ExemplarTest.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/test/java/io/quarkus/it/micrometer/prometheus/OtelOffProfile.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/test/java/io/quarkus/it/micrometer/prometheus/OtelOnProfile.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/test/java/io/quarkus/it/micrometer/prometheus/PrometheusMetricsRegistryIT.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/test/java/io/quarkus/it/micrometer/prometheus/PrometheusMetricsRegistryTest.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/test/java/io/quarkus/it/micrometer/prometheus/TestResources.java",
      "integration-tests/micrometer-prometheus/pom.xml",
      "integration-tests/micrometer-prometheus/src/main/java/io/quarkus/ResponseHeaderTag.java",
      "integration-tests/micrometer-prometheus/src/main/java/io/quarkus/it/micrometer/prometheus/CustomConfiguration.java",
      "integration-tests/micrometer-prometheus/src/test/java/io/quarkus/it/micrometer/prometheus/ExampleResourcesTest.java",
      "integration-tests/micrometer-prometheus/src/test/java/io/quarkus/it/micrometer/prometheus/PrometheusMetricsRegistryTest.java",
      "integration-tests/pom.xml"
    ],
    "pr_changed_test_files": [
      ".github/native-tests.json",
      "extensions/micrometer/deployment/src/test/java/io/quarkus/micrometer/deployment/export/JsonAndPrometheusRegistryEnabledTest.java",
      "extensions/micrometer/deployment/src/test/java/io/quarkus/micrometer/deployment/export/NoDefaultPrometheusTest.java",
      "extensions/micrometer/deployment/src/test/java/io/quarkus/micrometer/deployment/export/PrometheusEnabledTest.java",
      "extensions/micrometer/deployment/src/test/java/io/quarkus/micrometer/deployment/export/SecondPrometheusProvider.java",
      "extensions/observability-devservices/testlibs/devresource-lgtm/src/main/java/io/quarkus/observability/devresource/lgtm/LgtmResource.java",
      "integration-tests/micrometer-prometheus-opentelemetry/pom.xml",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/ContextLocalTag.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/ExporterResource.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/HeaderTag.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/ResponseHeaderTag.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/doc/micrometer/ExampleResource.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/AnnotatedResource.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/AnswerToEverythingExpressionResolver.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/CustomConfiguration.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/Fruit.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/FruitResource.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/MessageResource.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/MessageResourceApi.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/MessageResourceNestedApi.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/PathTemplateResource.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/PingPongResource.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/PrefixingValueResolver.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/PrimeNumberResource.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/RootResource.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/SecuredResource.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/SubResource.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/main/resources/application.properties",
      "integration-tests/micrometer-prometheus-opentelemetry/src/test/java/io/quarkus/it/micrometer/prometheus/ExemplarOffTest.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/test/java/io/quarkus/it/micrometer/prometheus/ExemplarTest.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/test/java/io/quarkus/it/micrometer/prometheus/OtelOffProfile.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/test/java/io/quarkus/it/micrometer/prometheus/OtelOnProfile.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/test/java/io/quarkus/it/micrometer/prometheus/PrometheusMetricsRegistryIT.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/test/java/io/quarkus/it/micrometer/prometheus/PrometheusMetricsRegistryTest.java",
      "integration-tests/micrometer-prometheus-opentelemetry/src/test/java/io/quarkus/it/micrometer/prometheus/TestResources.java",
      "integration-tests/micrometer-prometheus/pom.xml",
      "integration-tests/micrometer-prometheus/src/main/java/io/quarkus/ResponseHeaderTag.java",
      "integration-tests/micrometer-prometheus/src/main/java/io/quarkus/it/micrometer/prometheus/CustomConfiguration.java",
      "integration-tests/micrometer-prometheus/src/test/java/io/quarkus/it/micrometer/prometheus/ExampleResourcesTest.java",
      "integration-tests/micrometer-prometheus/src/test/java/io/quarkus/it/micrometer/prometheus/PrometheusMetricsRegistryTest.java",
      "integration-tests/pom.xml"
    ],
    "base_commit": "12a9f02f72b4567eee57e017b42a6a8df6280743",
    "head_commit": "f47516b5b3853aaef20a5771d64ce4586c4070c0",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47978",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47978",
    "dockerfile": "",
    "pr_merged_at": "2025-06-18T16:22:49.000Z",
    "patch": "diff --git a/bom/application/pom.xml b/bom/application/pom.xml\nindex 83ffecb747466..4bef7de658540 100644\n--- a/bom/application/pom.xml\n+++ b/bom/application/pom.xml\n@@ -32,7 +32,7 @@\n         <opentelemetry-instrumentation.version>2.10.0-alpha</opentelemetry-instrumentation.version>\n         <opentelemetry-semconv.version>1.29.0-alpha</opentelemetry-semconv.version>\n         <quarkus-http.version>5.3.5</quarkus-http.version>\n-        <micrometer.version>1.14.7</micrometer.version><!-- keep in sync with hdrhistogram: https://central.sonatype.com/artifact/io.micrometer/micrometer-core -->\n+        <micrometer.version>1.15.0</micrometer.version><!-- keep in sync with prometheus-client and hdrhistogram: https://central.sonatype.com/artifact/io.micrometer/micrometer-core -->\n         <hdrhistogram.version>2.2.2</hdrhistogram.version><!-- keep in sync with micrometer -->\n         <google-auth.version>0.22.0</google-auth.version>\n         <graphql-java.version>22.2</graphql-java.version> <!-- keep in sync with smallrye-graphql -->\n@@ -215,8 +215,6 @@\n         <mutiny-zero.version>1.1.1</mutiny-zero.version>\n         <pulsar-client.version>3.3.0</pulsar-client.version>\n         <async-http-client.version>2.12.4</async-http-client.version>\n-        <!-- keep in-sync, if possible, with Micrometer registry Prometheus -->\n-        <prometheus.version>0.16.0</prometheus.version>\n         <!-- Dev UI -->\n         <importmap.version>1.0.11</importmap.version>\n         <webauthn4j.version>0.28.0.RELEASE</webauthn4j.version>\n@@ -537,18 +535,6 @@\n                 <scope>import</scope>\n             </dependency>\n \n-            <!-- Prometheus -->\n-            <dependency>\n-                <groupId>io.prometheus</groupId>\n-                <artifactId>simpleclient</artifactId>\n-                <version>${prometheus.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>io.prometheus</groupId>\n-                <artifactId>simpleclient_common</artifactId>\n-                <version>${prometheus.version}</version>\n-            </dependency>\n-\n             <!-- Quarkus core -->\n \n             <dependency>\n\ndiff --git a/docs/src/main/asciidoc/telemetry-micrometer-to-opentelemetry.adoc b/docs/src/main/asciidoc/telemetry-micrometer-to-opentelemetry.adoc\nindex 0938fc751e665..09ca45941c3a1 100644\n--- a/docs/src/main/asciidoc/telemetry-micrometer-to-opentelemetry.adoc\n+++ b/docs/src/main/asciidoc/telemetry-micrometer-to-opentelemetry.adoc\n@@ -137,7 +137,7 @@ The JVM and HTTP server metrics are collected by Micrometer.\n Next, are examples of the metrics collected by Micrometer and a comparison of what would be the `quarkus-micrometer-registry-prometheus` output vs the one on this bridge. A link to the equivalent OpenTelemetry Semantic Convention is also provided for reference and is not currently used in the bridge.\n \n |===\n-|Micrometer Meter |Quarkus Micrometer Prometheus output | This bridge OpenTelemetry output name | Related OpenTelemetry Semantic Convention (not applied)\n+|Micrometer Meter |Quarkus Micrometer Prometheus client v0.x output | This bridge OpenTelemetry output name | Related OpenTelemetry Semantic Convention (not applied)\n \n |Using the @Timed interceptor.\n |\n\ndiff --git a/docs/src/main/asciidoc/telemetry-micrometer-tutorial.adoc b/docs/src/main/asciidoc/telemetry-micrometer-tutorial.adoc\nindex 21302a18c9954..1acc358b496fb 100644\n--- a/docs/src/main/asciidoc/telemetry-micrometer-tutorial.adoc\n+++ b/docs/src/main/asciidoc/telemetry-micrometer-tutorial.adoc\n@@ -88,7 +88,7 @@ You should find something like this:\n ----\n # HELP http_server_requests_seconds\n # TYPE http_server_requests_seconds summary\n-http_server_requests_seconds_count{method=\"GET\",outcome=\"SUCCESS\",status=\"200\",uri=\"/example/prime/{number}\"} 2.0\n+http_server_requests_seconds_count{method=\"GET\",outcome=\"SUCCESS\",status=\"200\",uri=\"/example/prime/{number}\"} 2\n http_server_requests_seconds_sum{method=\"GET\",outcome=\"SUCCESS\",status=\"200\",uri=\"/example/prime/{number}\"} 0.017385896\n # HELP http_server_requests_seconds_max\n # TYPE http_server_requests_seconds_max gauge\n\ndiff --git a/docs/src/main/asciidoc/telemetry-micrometer.adoc b/docs/src/main/asciidoc/telemetry-micrometer.adoc\nindex 30a890b1c7a47..323905d00243e 100644\n--- a/docs/src/main/asciidoc/telemetry-micrometer.adoc\n+++ b/docs/src/main/asciidoc/telemetry-micrometer.adoc\n@@ -24,6 +24,8 @@ IMPORTANT: Micrometer is the recommended approach to metrics for Quarkus.\n NOTE: By default, the metrics are exposed on the main HTTP server.\n If you would like to surface metrics from a separate management port, see the <<management-interface,Managed interface>> section.\n \n+NOTE: `quarkus-micrometer` now uses the Prometheus client v1.x. For help migrating from the old client, please check the https://github.com/micrometer-metrics/micrometer/wiki/1.13-Migration-Guide[Prometheus Java client 0.x to 1.x upgrade]  from Micrometer.\n+\n == Micrometer and monitoring system extensions\n \n Quarkus Micrometer extensions are structured in the same way as the Micrometer project.\n@@ -33,7 +35,7 @@ Other Quarkus and Quarkiverse extensions use the Quarkus Micrometer extension to\n Quarkus extensions:\n \n - micrometer\n-- micrometer-registry-prometheus\n+- micrometer-registry-prometheus (Prometheus client v1.x)\n \n link:https://github.com/quarkiverse/quarkus-micrometer-registry[Quarkiverse extensions] (may be incomplete):\n \n@@ -172,7 +174,7 @@ Micrometer applies naming conventions to convert registered meter names to match\n \n Given the following declaration of a timer: `registry.timer(\"http.server.requests\")`, applied naming conventions will emit the following metrics for different monitoring systems:\n \n-- Prometheus: `http_server_requests_duration_seconds`\n+- Prometheus: `http_server_requests_seconds`\n - Atlas: `httpServerRequests`\n - Graphite: `http.server.requests`\n - InfluxDB: `http_server_requests`\n@@ -569,7 +571,6 @@ public class CustomConfiguration {\n                 if(id.getName().startsWith(\"myservice\")) {\n                     return DistributionStatisticConfig.builder()\n                         .percentiles(0.5, 0.95)     // median and 95th percentile, not aggregable\n-                        .percentilesHistogram(true) // histogram buckets (e.g. prometheus histogram_quantile)\n                         .build()\n                         .merge(config);\n                 }\n\ndiff --git a/extensions/micrometer-registry-prometheus/deployment/pom.xml b/extensions/micrometer-registry-prometheus/deployment/pom.xml\nindex 7838ddfabb0de..e1b665a45f8c0 100644\n--- a/extensions/micrometer-registry-prometheus/deployment/pom.xml\n+++ b/extensions/micrometer-registry-prometheus/deployment/pom.xml\n@@ -27,7 +27,7 @@\n \n         <dependency>\n             <groupId>io.micrometer</groupId>\n-            <artifactId>micrometer-registry-prometheus-simpleclient</artifactId>\n+            <artifactId>micrometer-registry-prometheus</artifactId>\n         </dependency>\n \n     </dependencies>\n\ndiff --git a/extensions/micrometer-registry-prometheus/runtime/pom.xml b/extensions/micrometer-registry-prometheus/runtime/pom.xml\nindex 53329e453e628..1027bba2f1548 100644\n--- a/extensions/micrometer-registry-prometheus/runtime/pom.xml\n+++ b/extensions/micrometer-registry-prometheus/runtime/pom.xml\n@@ -32,7 +32,7 @@\n \n         <dependency>\n             <groupId>io.micrometer</groupId>\n-            <artifactId>micrometer-registry-prometheus-simpleclient</artifactId>\n+            <artifactId>micrometer-registry-prometheus</artifactId>\n         </dependency>\n \n     </dependencies>\n\ndiff --git a/extensions/micrometer/deployment/pom.xml b/extensions/micrometer/deployment/pom.xml\nindex cf381f90c8470..90923d803e179 100644\n--- a/extensions/micrometer/deployment/pom.xml\n+++ b/extensions/micrometer/deployment/pom.xml\n@@ -63,7 +63,7 @@\n \n         <dependency>\n             <groupId>io.micrometer</groupId>\n-            <artifactId>micrometer-registry-prometheus-simpleclient</artifactId>\n+            <artifactId>micrometer-registry-prometheus</artifactId>\n             <scope>test</scope>\n         </dependency>\n \n\ndiff --git a/extensions/micrometer/deployment/src/main/java/io/quarkus/micrometer/deployment/export/PrometheusRegistryProcessor.java b/extensions/micrometer/deployment/src/main/java/io/quarkus/micrometer/deployment/export/PrometheusRegistryProcessor.java\nindex cd15eccefee01..2b0c5af54ae99 100644\n--- a/extensions/micrometer/deployment/src/main/java/io/quarkus/micrometer/deployment/export/PrometheusRegistryProcessor.java\n+++ b/extensions/micrometer/deployment/src/main/java/io/quarkus/micrometer/deployment/export/PrometheusRegistryProcessor.java\n@@ -34,7 +34,7 @@\n public class PrometheusRegistryProcessor {\n     private static final Logger log = Logger.getLogger(PrometheusRegistryProcessor.class);\n \n-    static final String REGISTRY_CLASS_NAME = \"io.micrometer.prometheus.PrometheusMeterRegistry\";\n+    static final String REGISTRY_CLASS_NAME = \"io.micrometer.prometheusmetrics.PrometheusMeterRegistry\";\n     static final Class<?> REGISTRY_CLASS = MicrometerRecorder.getClassForName(REGISTRY_CLASS_NAME);\n \n     public static class PrometheusEnabled implements BooleanSupplier {\n\ndiff --git a/extensions/micrometer/runtime/pom.xml b/extensions/micrometer/runtime/pom.xml\nindex 3a11dfd82aaf7..6dd593c8d0a70 100644\n--- a/extensions/micrometer/runtime/pom.xml\n+++ b/extensions/micrometer/runtime/pom.xml\n@@ -49,7 +49,7 @@\n \n         <dependency>\n             <groupId>io.micrometer</groupId>\n-            <artifactId>micrometer-registry-prometheus-simpleclient</artifactId>\n+            <artifactId>micrometer-registry-prometheus</artifactId>\n             <optional>true</optional>\n         </dependency>\n \n@@ -131,6 +131,12 @@\n             <optional>true</optional>\n         </dependency>\n \n+        <dependency>\n+            <groupId>org.graalvm.sdk</groupId>\n+            <artifactId>nativeimage</artifactId>\n+            <scope>provided</scope>\n+        </dependency>\n+\n         <!-- Test -->\n \n         <dependency>\n\ndiff --git a/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/binder/vertx/VertxHttpServerMetrics.java b/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/binder/vertx/VertxHttpServerMetrics.java\nindex ae5e62b648669..290152ef86f02 100644\n--- a/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/binder/vertx/VertxHttpServerMetrics.java\n+++ b/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/binder/vertx/VertxHttpServerMetrics.java\n@@ -180,13 +180,17 @@ public void requestReset(HttpRequestMetric requestMetric) {\n         if (path != null) {\n             Timer.Sample sample = requestMetric.getSample();\n \n+            Tags allTags = Tags.of(\n+                    VertxMetricsTags.method(requestMetric.request().method()),\n+                    HttpCommonTags.uri(path, requestMetric.initialPath, 0, false),\n+                    Outcome.CLIENT_ERROR.asTag(),\n+                    HttpCommonTags.STATUS_RESET);\n+\n+            allTags = additionalMetrics(requestMetric, null, allTags);\n+\n             openTelemetryContextUnwrapper.executeInContext(\n                     sample::stop,\n-                    requestsTimer.withTags(Tags.of(\n-                            VertxMetricsTags.method(requestMetric.request().method()),\n-                            HttpCommonTags.uri(path, requestMetric.initialPath, 0, false),\n-                            Outcome.CLIENT_ERROR.asTag(),\n-                            HttpCommonTags.STATUS_RESET)),\n+                    requestsTimer.withTags(allTags),\n                     requestMetric.request().context());\n         }\n         requestMetric.requestEnded();\n@@ -214,17 +218,7 @@ public void responseEnd(HttpRequestMetric requestMetric, HttpResponse response,\n                             config.isServerSuppress4xxErrors()),\n                     VertxMetricsTags.outcome(response),\n                     HttpCommonTags.status(response.statusCode()));\n-            if (!httpServerMetricsTagsContributors.isEmpty()) {\n-                HttpServerMetricsTagsContributor.Context context = new DefaultContext(requestMetric.request(), response);\n-                for (int i = 0; i < httpServerMetricsTagsContributors.size(); i++) {\n-                    try {\n-                        Tags additionalTags = httpServerMetricsTagsContributors.get(i).contribute(context);\n-                        allTags = allTags.and(additionalTags);\n-                    } catch (Exception e) {\n-                        log.debug(\"Unable to obtain additional tags\", e);\n-                    }\n-                }\n-            }\n+            allTags = additionalMetrics(requestMetric, response, allTags);\n \n             openTelemetryContextUnwrapper.executeInContext(\n                     sample::stop,\n@@ -234,6 +228,24 @@ public void responseEnd(HttpRequestMetric requestMetric, HttpResponse response,\n         requestMetric.requestEnded();\n     }\n \n+    /**\n+     * Make sure same tags are present for the same \"http.server.requests\" metric because it's defined in 2 places\n+     */\n+    private Tags additionalMetrics(HttpRequestMetric requestMetric, HttpResponse response, Tags allTags) {\n+        if (!httpServerMetricsTagsContributors.isEmpty()) {\n+            HttpServerMetricsTagsContributor.Context context = new DefaultContext(requestMetric.request(), response);\n+            for (int i = 0; i < httpServerMetricsTagsContributors.size(); i++) {\n+                try {\n+                    Tags additionalTags = httpServerMetricsTagsContributors.get(i).contribute(context);\n+                    allTags = allTags.and(additionalTags);\n+                } catch (Exception e) {\n+                    log.debug(\"Unable to obtain additional tags\", e);\n+                }\n+            }\n+        }\n+        return allTags;\n+    }\n+\n     /**\n      * Called when a server web socket connects.\n      *\n\ndiff --git a/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/export/PrometheusMeterRegistryProducer.java b/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/export/PrometheusMeterRegistryProducer.java\nindex 53487aca98da4..b7ee742ab708a 100644\n--- a/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/export/PrometheusMeterRegistryProducer.java\n+++ b/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/export/PrometheusMeterRegistryProducer.java\n@@ -9,10 +9,10 @@\n import jakarta.interceptor.Interceptor;\n \n import io.micrometer.core.instrument.Clock;\n-import io.micrometer.prometheus.PrometheusConfig;\n-import io.micrometer.prometheus.PrometheusMeterRegistry;\n-import io.prometheus.client.CollectorRegistry;\n-import io.prometheus.client.exemplars.ExemplarSampler;\n+import io.micrometer.prometheusmetrics.PrometheusConfig;\n+import io.micrometer.prometheusmetrics.PrometheusMeterRegistry;\n+import io.prometheus.metrics.model.registry.PrometheusRegistry;\n+import io.prometheus.metrics.tracer.common.SpanContext;\n \n /**\n  * This producer is only registered if the {@code quarkus.micrometer.export.prometheus.default-registry} is set to {@code true}.\n@@ -23,8 +23,8 @@ public class PrometheusMeterRegistryProducer {\n     @Singleton\n     @Alternative\n     @Priority(Interceptor.Priority.APPLICATION + 100)\n-    public PrometheusMeterRegistry registry(PrometheusConfig config, CollectorRegistry collectorRegistry,\n-            Optional<ExemplarSampler> exemplarSampler, Clock clock) {\n+    public PrometheusMeterRegistry registry(PrometheusConfig config, PrometheusRegistry collectorRegistry,\n+            Optional<SpanContext> exemplarSampler, Clock clock) {\n         return new PrometheusMeterRegistry(config, collectorRegistry, clock, exemplarSampler.orElse(null));\n     }\n \n\ndiff --git a/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/export/PrometheusMeterRegistryProvider.java b/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/export/PrometheusMeterRegistryProvider.java\nindex 641932a08463d..9642ce2909fba 100644\n--- a/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/export/PrometheusMeterRegistryProvider.java\n+++ b/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/export/PrometheusMeterRegistryProvider.java\n@@ -5,10 +5,10 @@\n import jakarta.enterprise.inject.Produces;\n import jakarta.inject.Singleton;\n \n-import io.micrometer.prometheus.PrometheusConfig;\n-import io.micrometer.prometheus.PrometheusDurationNamingConvention;\n-import io.micrometer.prometheus.PrometheusNamingConvention;\n-import io.prometheus.client.CollectorRegistry;\n+import io.micrometer.prometheusmetrics.PrometheusConfig;\n+import io.micrometer.prometheusmetrics.PrometheusDurationNamingConvention;\n+import io.micrometer.prometheusmetrics.PrometheusNamingConvention;\n+import io.prometheus.metrics.model.registry.PrometheusRegistry;\n import io.quarkus.arc.DefaultBean;\n import io.quarkus.micrometer.runtime.config.runtime.PrometheusRuntimeConfig;\n \n@@ -39,8 +39,8 @@ public PrometheusDurationNamingConvention durationNamingConvention() {\n \n     @Produces\n     @DefaultBean\n-    public CollectorRegistry collectorRegistry() {\n-        return new CollectorRegistry(true);\n+    public PrometheusRegistry collectorRegistry() {\n+        return new PrometheusRegistry();\n     }\n \n }\n\ndiff --git a/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/export/PrometheusRecorder.java b/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/export/PrometheusRecorder.java\nindex f6efecf5d9b3b..79064fc6e542b 100644\n--- a/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/export/PrometheusRecorder.java\n+++ b/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/export/PrometheusRecorder.java\n@@ -2,7 +2,6 @@\n \n import java.util.function.Consumer;\n \n-import io.prometheus.client.exporter.common.TextFormat;\n import io.quarkus.micrometer.runtime.export.handlers.PrometheusHandler;\n import io.quarkus.runtime.annotations.Recorder;\n import io.vertx.core.Handler;\n@@ -12,6 +11,7 @@\n \n @Recorder\n public class PrometheusRecorder {\n+\n     PrometheusHandler handler;\n \n     public PrometheusHandler getHandler() {\n@@ -27,7 +27,7 @@ public Consumer<Route> route() {\n             @Override\n             public void accept(Route route) {\n                 route.order(1).produces(\"text/plain\");\n-                route.order(2).produces(TextFormat.CONTENT_TYPE_OPENMETRICS_100);\n+                route.order(2).produces(\"application/openmetrics-text; version=1.0.0; charset=utf-8\");\n             }\n         };\n     }\n\ndiff --git a/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/export/exemplars/EmptyExemplarSamplerProvider.java b/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/export/exemplars/EmptyExemplarSamplerProvider.java\nindex 876f2cb7ffce9..430f2eccaa607 100644\n--- a/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/export/exemplars/EmptyExemplarSamplerProvider.java\n+++ b/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/export/exemplars/EmptyExemplarSamplerProvider.java\n@@ -4,12 +4,12 @@\n \n import jakarta.enterprise.inject.Produces;\n \n-import io.prometheus.client.exemplars.ExemplarSampler;\n+import io.prometheus.metrics.tracer.common.SpanContext;\n \n public class EmptyExemplarSamplerProvider {\n \n     @Produces\n-    public Optional<ExemplarSampler> exemplarSampler() {\n+    public Optional<SpanContext> exemplarSampler() {\n         return Optional.empty();\n     }\n }\n\ndiff --git a/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/export/exemplars/OpentelemetryExemplarSamplerProvider.java b/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/export/exemplars/OpentelemetryExemplarSamplerProvider.java\nindex 4a6e87a29d9f7..afe8d65e5809f 100644\n--- a/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/export/exemplars/OpentelemetryExemplarSamplerProvider.java\n+++ b/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/export/exemplars/OpentelemetryExemplarSamplerProvider.java\n@@ -6,38 +6,39 @@\n import jakarta.enterprise.inject.Produces;\n \n import io.opentelemetry.api.trace.Span;\n-import io.opentelemetry.api.trace.SpanContext;\n-import io.prometheus.client.exemplars.DefaultExemplarSampler;\n-import io.prometheus.client.exemplars.ExemplarSampler;\n-import io.prometheus.client.exemplars.tracer.common.SpanContextSupplier;\n import io.quarkus.opentelemetry.runtime.QuarkusContextStorage;\n \n public class OpentelemetryExemplarSamplerProvider {\n \n     @Produces\n-    public Optional<ExemplarSampler> exemplarSampler() {\n-        return Optional.of(new DefaultExemplarSampler(new SpanContextSupplier() {\n+    public Optional<io.prometheus.metrics.tracer.common.SpanContext> exemplarSampler() {\n+\n+        return Optional.of(new io.prometheus.metrics.tracer.common.SpanContext() {\n+            @Override\n+            public String getCurrentTraceId() {\n+                return get(io.opentelemetry.api.trace.SpanContext::getTraceId);\n+            }\n+\n             @Override\n-            public String getTraceId() {\n-                return get(SpanContext::getTraceId);\n+            public String getCurrentSpanId() {\n+                return get(io.opentelemetry.api.trace.SpanContext::getSpanId);\n             }\n \n             @Override\n-            public String getSpanId() {\n-                return get(SpanContext::getSpanId);\n+            public boolean isCurrentSpanSampled() {\n+                return Boolean.TRUE.equals(get(io.opentelemetry.api.trace.SpanContext::isSampled));\n             }\n \n             @Override\n-            public boolean isSampled() {\n-                return Boolean.TRUE.equals(get(SpanContext::isSampled));\n+            public void markCurrentSpanAsExemplar() {\n             }\n \n-            private <T> T get(Function<SpanContext, T> valueExtractor) {\n+            private <T> T get(Function<io.opentelemetry.api.trace.SpanContext, T> valueExtractor) {\n                 return Optional.ofNullable(Span.fromContextOrNull(QuarkusContextStorage.INSTANCE.current()))\n                         .map(Span::getSpanContext)\n                         .map(valueExtractor)\n                         .orElse(null);\n             }\n-        }));\n+        });\n     }\n }\n\ndiff --git a/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/export/handlers/PrometheusHandler.java b/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/export/handlers/PrometheusHandler.java\nindex 9fac4989b2a0d..e3d05e75094ce 100644\n--- a/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/export/handlers/PrometheusHandler.java\n+++ b/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/export/handlers/PrometheusHandler.java\n@@ -6,8 +6,7 @@\n \n import org.jboss.logging.Logger;\n \n-import io.micrometer.prometheus.PrometheusMeterRegistry;\n-import io.prometheus.client.exporter.common.TextFormat;\n+import io.micrometer.prometheusmetrics.PrometheusMeterRegistry;\n import io.quarkus.arc.Arc;\n import io.quarkus.arc.ManagedContext;\n import io.vertx.core.Handler;\n@@ -16,6 +15,10 @@\n import io.vertx.ext.web.RoutingContext;\n \n public class PrometheusHandler implements Handler<RoutingContext> {\n+    // see io.micrometer.prometheusmetrics.PrometheusMeterRegistry.Format\n+    public final static String CONTENT_TYPE_004 = \"text/plain; version=0.0.4; charset=utf-8\";\n+    public final static String CONTENT_TYPE_OPENMETRICS_100 = \"application/openmetrics-text; version=1.0.0; charset=utf-8\";\n+\n     private static final Logger log = Logger.getLogger(PrometheusHandler.class);\n \n     private PrometheusMeterRegistry registry;\n@@ -50,12 +53,12 @@ public void handle(RoutingContext routingContext) {\n \n     private String chooseContentType(String acceptHeader) {\n         if (acceptHeader == null) {\n-            return TextFormat.CONTENT_TYPE_OPENMETRICS_100;\n+            return CONTENT_TYPE_OPENMETRICS_100;\n         }\n         if (acceptHeader.contains(\"text/plain\") || acceptHeader.contains(\"text/html\")) {\n-            return TextFormat.CONTENT_TYPE_004;\n+            return CONTENT_TYPE_004;\n         }\n-        return TextFormat.CONTENT_TYPE_OPENMETRICS_100;\n+        return CONTENT_TYPE_OPENMETRICS_100;\n     }\n \n     private void doHandle(HttpServerResponse response, String acceptHeader) {\n\ndiff --git a/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/graal/Substitutions.java b/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/graal/Substitutions.java\nnew file mode 100644\nindex 0000000000000..c8c7961816195\n--- /dev/null\n+++ b/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/graal/Substitutions.java\n@@ -0,0 +1,54 @@\n+package io.quarkus.micrometer.runtime.graal;\n+\n+import java.util.function.BooleanSupplier;\n+\n+import com.oracle.svm.core.annotate.Alias;\n+import com.oracle.svm.core.annotate.Substitute;\n+import com.oracle.svm.core.annotate.TargetClass;\n+\n+import io.prometheus.metrics.model.snapshots.Exemplar;\n+import io.prometheus.metrics.model.snapshots.Labels;\n+import io.prometheus.metrics.tracer.common.SpanContext;\n+\n+public class Substitutions {\n+\n+    public static final class OpentelemetryExemplarSamplerProviderIsPresent implements BooleanSupplier {\n+        @Override\n+        public boolean getAsBoolean() {\n+            try {\n+                Thread.currentThread().getContextClassLoader()\n+                        .loadClass(\"io.micrometer.prometheusmetrics.PrometheusMeterRegistry\");\n+                return true;\n+            } catch (Throwable var3) {\n+                return false;\n+            }\n+        }\n+    }\n+\n+    @TargetClass(className = \"io.prometheus.metrics.core.exemplars.ExemplarSampler\", onlyWith = OpentelemetryExemplarSamplerProviderIsPresent.class)\n+    public static final class Target_ExemplarSampler {\n+\n+        @Alias\n+        private SpanContext spanContext;\n+\n+        @Substitute\n+        private Labels doSampleExemplar() {\n+            // No SpanContextSupplier needed because Quarkus has its own.\n+            try {\n+                if (spanContext != null) {\n+                    if (spanContext.isCurrentSpanSampled()) {\n+                        String spanId = spanContext.getCurrentSpanId();\n+                        String traceId = spanContext.getCurrentTraceId();\n+                        if (spanId != null && traceId != null) {\n+                            spanContext.markCurrentSpanAsExemplar();\n+                            return Labels.of(Exemplar.TRACE_ID, traceId, Exemplar.SPAN_ID, spanId);\n+                        }\n+                    }\n+                }\n+            } catch (NoClassDefFoundError ignored) {\n+                // ignore\n+            }\n+            return Labels.EMPTY;\n+        }\n+    }\n+}\n",
    "test_patch": "diff --git a/.github/native-tests.json b/.github/native-tests.json\nindex 2e877cdfba4c0..a0dd12d7a328a 100644\n--- a/.github/native-tests.json\n+++ b/.github/native-tests.json\n@@ -123,7 +123,7 @@\n         {\n             \"category\": \"Observability\",\n             \"timeout\": 130,\n-            \"test-modules\": \"smallrye-metrics, micrometer-mp-metrics, micrometer-prometheus, logging-json, observability-lgtm, opentelemetry, opentelemetry-jdbc-instrumentation, opentelemetry-mongodb-client-instrumentation, opentelemetry-redis-instrumentation, micrometer-opentelemetry\",\n+            \"test-modules\": \"smallrye-metrics, micrometer-mp-metrics, micrometer-prometheus, micrometer-prometheus-opentelemetry, logging-json, observability-lgtm, opentelemetry, opentelemetry-jdbc-instrumentation, opentelemetry-mongodb-client-instrumentation, opentelemetry-redis-instrumentation, micrometer-opentelemetry\",\n             \"os-name\": \"ubuntu-latest\"\n         },\n         {\n\ndiff --git a/extensions/micrometer/deployment/src/test/java/io/quarkus/micrometer/deployment/export/JsonAndPrometheusRegistryEnabledTest.java b/extensions/micrometer/deployment/src/test/java/io/quarkus/micrometer/deployment/export/JsonAndPrometheusRegistryEnabledTest.java\nindex c9dd08d4e2cf9..873e19df1676e 100644\n--- a/extensions/micrometer/deployment/src/test/java/io/quarkus/micrometer/deployment/export/JsonAndPrometheusRegistryEnabledTest.java\n+++ b/extensions/micrometer/deployment/src/test/java/io/quarkus/micrometer/deployment/export/JsonAndPrometheusRegistryEnabledTest.java\n@@ -53,6 +53,6 @@ public void metricsEndpoint() {\n                 .get(\"/relative/metrics\")\n                 .then()\n                 .statusCode(200)\n-                .body(containsString(\"jvm_info_total{runtime=\\\"\"));\n+                .body(containsString(\"jvm_total{runtime=\\\"\"));\n     }\n }\n\ndiff --git a/extensions/micrometer/deployment/src/test/java/io/quarkus/micrometer/deployment/export/NoDefaultPrometheusTest.java b/extensions/micrometer/deployment/src/test/java/io/quarkus/micrometer/deployment/export/NoDefaultPrometheusTest.java\nindex 1c8043f661a78..d8bf5781b70a7 100644\n--- a/extensions/micrometer/deployment/src/test/java/io/quarkus/micrometer/deployment/export/NoDefaultPrometheusTest.java\n+++ b/extensions/micrometer/deployment/src/test/java/io/quarkus/micrometer/deployment/export/NoDefaultPrometheusTest.java\n@@ -10,7 +10,7 @@\n \n import io.micrometer.core.instrument.MeterRegistry;\n import io.micrometer.core.instrument.composite.CompositeMeterRegistry;\n-import io.micrometer.prometheus.PrometheusMeterRegistry;\n+import io.micrometer.prometheusmetrics.PrometheusMeterRegistry;\n import io.quarkus.micrometer.test.Util;\n import io.quarkus.test.QuarkusUnitTest;\n \n\ndiff --git a/extensions/micrometer/deployment/src/test/java/io/quarkus/micrometer/deployment/export/PrometheusEnabledTest.java b/extensions/micrometer/deployment/src/test/java/io/quarkus/micrometer/deployment/export/PrometheusEnabledTest.java\nindex dfb70c42e81cd..b8e3e0de4a966 100644\n--- a/extensions/micrometer/deployment/src/test/java/io/quarkus/micrometer/deployment/export/PrometheusEnabledTest.java\n+++ b/extensions/micrometer/deployment/src/test/java/io/quarkus/micrometer/deployment/export/PrometheusEnabledTest.java\n@@ -10,7 +10,7 @@\n \n import io.micrometer.core.instrument.MeterRegistry;\n import io.micrometer.core.instrument.composite.CompositeMeterRegistry;\n-import io.micrometer.prometheus.PrometheusMeterRegistry;\n+import io.micrometer.prometheusmetrics.PrometheusMeterRegistry;\n import io.quarkus.test.QuarkusUnitTest;\n import io.restassured.RestAssured;\n \n\ndiff --git a/extensions/micrometer/deployment/src/test/java/io/quarkus/micrometer/deployment/export/SecondPrometheusProvider.java b/extensions/micrometer/deployment/src/test/java/io/quarkus/micrometer/deployment/export/SecondPrometheusProvider.java\nindex be680a909710a..db2d8343bf40d 100644\n--- a/extensions/micrometer/deployment/src/test/java/io/quarkus/micrometer/deployment/export/SecondPrometheusProvider.java\n+++ b/extensions/micrometer/deployment/src/test/java/io/quarkus/micrometer/deployment/export/SecondPrometheusProvider.java\n@@ -4,15 +4,15 @@\n import jakarta.inject.Singleton;\n \n import io.micrometer.core.instrument.Clock;\n-import io.micrometer.prometheus.PrometheusConfig;\n-import io.micrometer.prometheus.PrometheusMeterRegistry;\n-import io.prometheus.client.CollectorRegistry;\n+import io.micrometer.prometheusmetrics.PrometheusConfig;\n+import io.micrometer.prometheusmetrics.PrometheusMeterRegistry;\n+import io.prometheus.metrics.model.registry.PrometheusRegistry;\n \n @Singleton\n public class SecondPrometheusProvider {\n     @Produces\n     @Singleton\n-    public PrometheusMeterRegistry registry(CollectorRegistry collectorRegistry, Clock clock) {\n+    public PrometheusMeterRegistry registry(PrometheusRegistry collectorRegistry, Clock clock) {\n         PrometheusMeterRegistry customRegistry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT, collectorRegistry,\n                 clock);\n         customRegistry.config().commonTags(\"customKey\", \"customValue\");\n\ndiff --git a/extensions/observability-devservices/testlibs/devresource-lgtm/src/main/java/io/quarkus/observability/devresource/lgtm/LgtmResource.java b/extensions/observability-devservices/testlibs/devresource-lgtm/src/main/java/io/quarkus/observability/devresource/lgtm/LgtmResource.java\nindex b41947d4791a5..8b54d43408a6c 100644\n--- a/extensions/observability-devservices/testlibs/devresource-lgtm/src/main/java/io/quarkus/observability/devresource/lgtm/LgtmResource.java\n+++ b/extensions/observability-devservices/testlibs/devresource-lgtm/src/main/java/io/quarkus/observability/devresource/lgtm/LgtmResource.java\n@@ -21,7 +21,7 @@ public class LgtmResource extends ContainerResource<LgtmContainer, LgtmConfig> {\n     private static final Logger log = Logger.getLogger(LgtmResource.class.getName());\n \n     protected static final Set<String> SCRAPING_REGISTRIES = Set.of(\n-            \"io.micrometer.prometheus.PrometheusMeterRegistry\");\n+            \"io.micrometer.prometheusmetrics.PrometheusMeterRegistry\");\n \n     protected static final Function<String, Boolean> TCCL_FN = s -> {\n         ClassLoader cl = Thread.currentThread().getContextClassLoader();\n\ndiff --git a/integration-tests/micrometer-prometheus-opentelemetry/pom.xml b/integration-tests/micrometer-prometheus-opentelemetry/pom.xml\nnew file mode 100644\nindex 0000000000000..6c5d01e1fda63\n--- /dev/null\n+++ b/integration-tests/micrometer-prometheus-opentelemetry/pom.xml\n@@ -0,0 +1,208 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-integration-tests-parent</artifactId>\n+        <version>999-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>quarkus-integration-test-micrometer-prometheus-opentelemetry</artifactId>\n+    <name>Quarkus - Integration Tests - Micrometer Prometheus with OpenTelemetry present</name>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-micrometer-registry-prometheus</artifactId>\n+        </dependency>\n+\n+        <!-- Hibernate -->\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-hibernate-orm-panache</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-jdbc-h2</artifactId>\n+        </dependency>\n+\n+        <!-- JAX-RS -->\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-rest-jackson</artifactId>\n+        </dependency>\n+\n+        <!-- Verify that the client can co-exist with the server -->\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-rest-client-jackson</artifactId>\n+        </dependency>\n+\n+        <!-- Verify extensions co-exist -->\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-kubernetes</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-opentelemetry</artifactId>\n+        </dependency>\n+\n+        <!-- Security -->\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-elytron-security-properties-file</artifactId>\n+        </dependency>\n+\n+        <!-- Test Dependencies -->\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-junit5</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.rest-assured</groupId>\n+            <artifactId>rest-assured</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.jboss.logging</groupId>\n+            <artifactId>commons-logging-jboss-logging</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-test-h2</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-hibernate-orm-panache-deployment</artifactId>\n+            <version>${project.version}</version>\n+            <type>pom</type>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>*</groupId>\n+                    <artifactId>*</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-jdbc-h2-deployment</artifactId>\n+            <version>${project.version}</version>\n+            <type>pom</type>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>*</groupId>\n+                    <artifactId>*</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-micrometer-registry-prometheus-deployment</artifactId>\n+            <version>${project.version}</version>\n+            <type>pom</type>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>*</groupId>\n+                    <artifactId>*</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-rest-jackson-deployment</artifactId>\n+            <version>${project.version}</version>\n+            <type>pom</type>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>*</groupId>\n+                    <artifactId>*</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-rest-client-jackson-deployment</artifactId>\n+            <version>${project.version}</version>\n+            <type>pom</type>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>*</groupId>\n+                    <artifactId>*</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-kubernetes-deployment</artifactId>\n+            <version>${project.version}</version>\n+            <type>pom</type>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>*</groupId>\n+                    <artifactId>*</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-opentelemetry-deployment</artifactId>\n+            <version>${project.version}</version>\n+            <type>pom</type>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>*</groupId>\n+                    <artifactId>*</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-elytron-security-properties-file-deployment</artifactId>\n+            <version>${project.version}</version>\n+            <type>pom</type>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>*</groupId>\n+                    <artifactId>*</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.awaitility</groupId>\n+            <artifactId>awaitility</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>io.quarkus</groupId>\n+                <artifactId>quarkus-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>build</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+</project>\n\ndiff --git a/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/ContextLocalTag.java b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/ContextLocalTag.java\nnew file mode 100644\nindex 0000000000000..035c2dec59af9\n--- /dev/null\n+++ b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/ContextLocalTag.java\n@@ -0,0 +1,16 @@\n+package io.quarkus;\n+\n+import jakarta.inject.Singleton;\n+\n+import io.micrometer.core.instrument.Tags;\n+import io.quarkus.micrometer.runtime.HttpServerMetricsTagsContributor;\n+\n+@Singleton\n+public class ContextLocalTag implements HttpServerMetricsTagsContributor {\n+\n+    @Override\n+    public Tags contribute(Context context) {\n+        String contextLocalData = context.requestContextLocalData(\"context-local\");\n+        return Tags.of(\"dummy\", contextLocalData != null ? contextLocalData : \"value\");\n+    }\n+}\n\ndiff --git a/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/ExporterResource.java b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/ExporterResource.java\nnew file mode 100644\nindex 0000000000000..ee124ec5e8d05\n--- /dev/null\n+++ b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/ExporterResource.java\n@@ -0,0 +1,43 @@\n+package io.quarkus;\n+\n+import jakarta.enterprise.context.ApplicationScoped;\n+import jakarta.inject.Inject;\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.Produces;\n+import jakarta.ws.rs.QueryParam;\n+import jakarta.ws.rs.core.MediaType;\n+\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.search.Search;\n+\n+@Path(\"/server-requests\")\n+@ApplicationScoped\n+public class ExporterResource {\n+    @Inject\n+    MeterRegistry registry;\n+\n+    @Path(\"/count\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @GET\n+    public Integer countServerRequests(@QueryParam(\"method\") String method,\n+            @QueryParam(\"outcome\") String outcome,\n+            @QueryParam(\"status\") String status,\n+            @QueryParam(\"uri\") String uri) {\n+        final Search search = registry\n+                .find(\"http.server.requests\");\n+        if (method != null) {\n+            search.tag(\"method\", method);\n+        }\n+        if (outcome != null) {\n+            search.tag(\"outcome\", outcome);\n+        }\n+        if (status != null) {\n+            search.tag(\"status\", status);\n+        }\n+        if (uri != null) {\n+            search.tag(\"uri\", uri);\n+        }\n+        return search.timers().size();\n+    }\n+}\n\ndiff --git a/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/HeaderTag.java b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/HeaderTag.java\nnew file mode 100644\nindex 0000000000000..0fc38443ec465\n--- /dev/null\n+++ b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/HeaderTag.java\n@@ -0,0 +1,20 @@\n+package io.quarkus;\n+\n+import jakarta.inject.Singleton;\n+\n+import io.micrometer.core.instrument.Tags;\n+import io.quarkus.micrometer.runtime.HttpServerMetricsTagsContributor;\n+\n+@Singleton\n+public class HeaderTag implements HttpServerMetricsTagsContributor {\n+\n+    @Override\n+    public Tags contribute(Context context) {\n+        String headerValue = context.request().getHeader(\"Foo\");\n+        String value = \"UNSET\";\n+        if ((headerValue != null) && !headerValue.isEmpty()) {\n+            value = headerValue;\n+        }\n+        return Tags.of(\"foo\", value);\n+    }\n+}\n\ndiff --git a/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/ResponseHeaderTag.java b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/ResponseHeaderTag.java\nnew file mode 100644\nindex 0000000000000..7bff6e0dd9e38\n--- /dev/null\n+++ b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/ResponseHeaderTag.java\n@@ -0,0 +1,25 @@\n+package io.quarkus;\n+\n+import jakarta.inject.Singleton;\n+\n+import io.micrometer.core.instrument.Tags;\n+import io.quarkus.micrometer.runtime.HttpServerMetricsTagsContributor;\n+import io.vertx.core.spi.observability.HttpResponse;\n+\n+@Singleton\n+public class ResponseHeaderTag implements HttpServerMetricsTagsContributor {\n+\n+    @Override\n+    public Tags contribute(Context context) {\n+        String value = \"UNSET\";\n+        HttpResponse response = context.response();\n+        // reset frames will not contain response\n+        if (response != null) {\n+            var headerValue = response.headers().get(\"foo-response\");\n+            if ((headerValue != null) && !headerValue.isEmpty()) {\n+                value = headerValue;\n+            }\n+        }\n+        return Tags.of(\"foo-response\", value);\n+    }\n+}\n\ndiff --git a/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/doc/micrometer/ExampleResource.java b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/doc/micrometer/ExampleResource.java\nnew file mode 100644\nindex 0000000000000..a67b2d08be773\n--- /dev/null\n+++ b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/doc/micrometer/ExampleResource.java\n@@ -0,0 +1,133 @@\n+/*-\n+// tag::example[]\n+\n+package org.acme.micrometer;\n+\n+// tag::ignore[]\n+*/\n+// Source: integration-tests/micrometer-prometheus/src/main/java/io/quarkus/doc/micrometer/ExampleResource.java\n+package io.quarkus.doc.micrometer;\n+\n+// end::ignore[]\n+import java.util.LinkedList;\n+import java.util.NoSuchElementException;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.PathParam;\n+import jakarta.ws.rs.Produces;\n+\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Tags;\n+import io.micrometer.core.instrument.Timer;\n+\n+@Path(\"/example\")\n+@Produces(\"text/plain\")\n+public class ExampleResource {\n+    // tag::gauge[]\n+    private final LinkedList<Long> list = new LinkedList<>(); // <1>\n+\n+    // end::gauge[]\n+    // tag::registry[]\n+    private final MeterRegistry registry;\n+\n+    // tag::ctor[]\n+    ExampleResource(MeterRegistry registry) {\n+        this.registry = registry;\n+        // tag::gauge[]\n+        registry.gaugeCollectionSize(\"example.list.size\", Tags.empty(), list); // <2>\n+        // end::gauge[]\n+    }\n+    // end::ctor[]\n+    // end::registry[]\n+    // tag::gauge[]\n+\n+    @GET\n+    @Path(\"gauge/{number}\")\n+    public Long checkListSize(@PathParam(\"number\") long number) { // <3>\n+        if (number == 2 || number % 2 == 0) {\n+            // add even numbers to the list\n+            list.add(number);\n+        } else {\n+            // remove items from the list for odd numbers\n+            try {\n+                number = list.removeFirst();\n+            } catch (NoSuchElementException nse) {\n+                number = 0;\n+            }\n+        }\n+        return number;\n+    }\n+    // end::gauge[]\n+\n+    // tag::primeMethod[]\n+    @GET\n+    @Path(\"prime/{number}\")\n+    public String checkIfPrime(@PathParam(\"number\") long number) {\n+        if (number < 1) {\n+            // tag::counted[]\n+            registry.counter(\"example.prime.number\", \"type\", \"not-natural\") // <1>\n+                    .increment(); // <2>\n+            // end::counted[]\n+            return \"Only natural numbers can be prime numbers.\";\n+        }\n+        if (number == 1) {\n+            // tag::counted[]\n+            registry.counter(\"example.prime.number\", \"type\", \"one\") // <1>\n+                    .increment(); // <2>\n+            // end::counted[]\n+            return number + \" is not prime.\";\n+        }\n+        if (number == 2 || number % 2 == 0) {\n+            // tag::counted[]\n+            registry.counter(\"example.prime.number\", \"type\", \"even\") // <1>\n+                    .increment(); // <2>\n+            // end::counted[]\n+            return number + \" is not prime.\";\n+        }\n+        // tag::timed[]\n+        if (timedTestPrimeNumber(number)) { // <3>\n+            // end::timed[]\n+            // tag::ignore[]\n+            registry.counter(\"example.prime.number\", \"type\", \"prime\") // <1>\n+                    .increment();\n+            return number + \" is prime.\";\n+        } else\n+        // end::ignore[]\n+        // tag::default[]\n+        if (testPrimeNumber(number)) {\n+            // end::default[]\n+            // tag::counted[]\n+            registry.counter(\"example.prime.number\", \"type\", \"prime\") // <1>\n+                    .increment(); // <2>\n+            // end::counted[]\n+            return number + \" is prime.\";\n+        } else {\n+            // tag::counted[]\n+            registry.counter(\"example.prime.number\", \"type\", \"not-prime\") // <1>\n+                    .increment(); // <2>\n+            // end::counted[]\n+            return number + \" is not prime.\";\n+        }\n+    }\n+    // end::primeMethod[]\n+    // tag::timed[]\n+\n+    protected boolean timedTestPrimeNumber(long number) {\n+        Timer.Sample sample = Timer.start(registry); // <4>\n+        boolean result = testPrimeNumber(number); // <5>\n+        sample.stop(registry.timer(\"example.prime.number.test\", \"prime\", result + \"\")); // <6>\n+        return result;\n+    }\n+    // end::timed[]\n+\n+    protected boolean testPrimeNumber(long number) {\n+        for (int i = 3; i < Math.floor(Math.sqrt(number)) + 1; i = i + 2) {\n+            if (number % i == 0) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+}\n+// end::example[]\n\ndiff --git a/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/AnnotatedResource.java b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/AnnotatedResource.java\nnew file mode 100644\nindex 0000000000000..35badea2479c5\n--- /dev/null\n+++ b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/AnnotatedResource.java\n@@ -0,0 +1,142 @@\n+package io.quarkus.it.micrometer.prometheus;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.micrometer.core.annotation.Counted;\n+import io.micrometer.core.annotation.Timed;\n+import io.micrometer.core.aop.MeterTag;\n+\n+@Path(\"/all-the-things\")\n+public class AnnotatedResource {\n+    private static final Logger log = Logger.getLogger(AnnotatedResource.class);\n+\n+    @GET\n+    public String allTheThings() {\n+        // Counted\n+        onlyCountFailures();\n+        countAllInvocations(false);\n+        emptyMetricName(false);\n+        wrap(x -> countAllInvocations(true));\n+        wrap(x -> emptyMetricName(true));\n+\n+        join(x -> onlyCountAsyncFailures());\n+        join(x -> countAllAsyncInvocations(false));\n+        join(x -> emptyAsyncMetricName(false));\n+        join(x -> countAllAsyncInvocations(true));\n+        join(x -> emptyAsyncMetricName(true));\n+\n+        //Timed\n+        call(false);\n+        longCall(false);\n+        wrap(x -> call(true));\n+        wrap(x -> longCall(true));\n+\n+        join(x -> asyncCall(false));\n+        join(x -> longAsyncCall(false));\n+        join(x -> asyncCall(true));\n+        join(x -> longAsyncCall(true));\n+\n+        return \"OK\";\n+    }\n+\n+    void wrap(Function<Boolean, Object> function) {\n+        try {\n+            function.apply(true);\n+        } catch (NullPointerException e) {\n+            if (!e.getMessage().equals(\"Failed on purpose\")) {\n+                log.error(\"Unexpected exception in test\", e);\n+                throw e;\n+            }\n+        }\n+    }\n+\n+    void join(Function<Boolean, CompletableFuture<?>> function) {\n+        try {\n+            function.apply(true).join();\n+        } catch (CompletionException e) {\n+            if (!e.getCause().getMessage().equals(\"Failed on purpose\")) {\n+                log.error(\"unexpected exception in test\", e);\n+                throw e;\n+            }\n+        }\n+    }\n+\n+    @Counted(value = \"metric.none\", recordFailuresOnly = true)\n+    public Object onlyCountFailures() {\n+        return new Response(false).get();\n+    }\n+\n+    @Counted(value = \"metric.all\", extraTags = { \"extra\", \"tag\" })\n+    public Object countAllInvocations(@MeterTag boolean fail) {\n+        return new Response(fail).get();\n+    }\n+\n+    @Counted(description = \"nice description\")\n+    public Object emptyMetricName(@MeterTag(resolver = PrefixingValueResolver.class) boolean fail) {\n+        return new Response(fail).get();\n+    }\n+\n+    @Counted(value = \"async.none\", recordFailuresOnly = true)\n+    public CompletableFuture<?> onlyCountAsyncFailures() {\n+        return CompletableFuture.supplyAsync(new Response(false));\n+    }\n+\n+    @Counted(value = \"async.all\", extraTags = { \"extra\", \"tag\" })\n+    public CompletableFuture<?> countAllAsyncInvocations(@MeterTag(key = \"do_fail_call\") boolean fail) {\n+        return CompletableFuture.supplyAsync(new Response(fail));\n+    }\n+\n+    @Counted\n+    public CompletableFuture<?> emptyAsyncMetricName(@MeterTag(expression = \"expression\") boolean fail) {\n+        return CompletableFuture.supplyAsync(new Response(fail));\n+    }\n+\n+    @Timed(value = \"call\", extraTags = { \"extra\", \"tag\" })\n+    public Object call(boolean fail) {\n+        return new Response(fail).get();\n+    }\n+\n+    @Timed(value = \"longCall\", extraTags = { \"extra\", \"tag\" }, longTask = true)\n+    public Object longCall(boolean fail) {\n+        return new Response(fail).get();\n+    }\n+\n+    @Timed(value = \"async.call\", extraTags = { \"extra\", \"tag\" })\n+    public CompletableFuture<?> asyncCall(boolean fail) {\n+        return CompletableFuture.supplyAsync(new Response(fail));\n+    }\n+\n+    @Timed(value = \"async.longCall\", extraTags = { \"extra\", \"tag\" }, longTask = true)\n+    public CompletableFuture<?> longAsyncCall(boolean fail) {\n+        return CompletableFuture.supplyAsync(new Response(fail));\n+    }\n+\n+    static class Response implements Supplier<Object> {\n+        boolean fail;\n+\n+        Response(boolean fail) {\n+            this.fail = fail;\n+        }\n+\n+        @Override\n+        public Object get() {\n+            try {\n+                Thread.sleep(3);\n+            } catch (InterruptedException e) {\n+                // intentionally empty\n+            }\n+            if (fail) {\n+                throw new NullPointerException(\"Failed on purpose\");\n+            }\n+            return new Object();\n+        }\n+    }\n+}\n\ndiff --git a/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/AnswerToEverythingExpressionResolver.java b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/AnswerToEverythingExpressionResolver.java\nnew file mode 100644\nindex 0000000000000..18643d7bd22a2\n--- /dev/null\n+++ b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/AnswerToEverythingExpressionResolver.java\n@@ -0,0 +1,14 @@\n+package io.quarkus.it.micrometer.prometheus;\n+\n+import jakarta.inject.Singleton;\n+\n+import io.micrometer.common.annotation.ValueExpressionResolver;\n+\n+@Singleton\n+public class AnswerToEverythingExpressionResolver implements ValueExpressionResolver {\n+    @Override\n+    public String resolve(String expression, Object parameter) {\n+        // Answer to the Ultimate Question of Life, the Universe, and Everything.\n+        return \"42\";\n+    }\n+}\n\ndiff --git a/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/CustomConfiguration.java b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/CustomConfiguration.java\nnew file mode 100644\nindex 0000000000000..a72dde3fef3e6\n--- /dev/null\n+++ b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/CustomConfiguration.java\n@@ -0,0 +1,126 @@\n+package io.quarkus.it.micrometer.prometheus;\n+\n+import java.util.Arrays;\n+\n+import jakarta.annotation.Priority;\n+import jakarta.enterprise.inject.Produces;\n+import jakarta.inject.Singleton;\n+import jakarta.interceptor.Interceptor;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+import io.micrometer.core.instrument.Clock;\n+import io.micrometer.core.instrument.Meter;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Tag;\n+import io.micrometer.core.instrument.config.MeterFilter;\n+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;\n+import io.micrometer.prometheusmetrics.PrometheusConfig;\n+import io.micrometer.prometheusmetrics.PrometheusMeterRegistry;\n+import io.prometheus.metrics.model.registry.PrometheusRegistry;\n+import io.quarkus.micrometer.runtime.MeterFilterConstraint;\n+import io.quarkus.micrometer.runtime.MeterRegistryCustomizer;\n+import io.quarkus.micrometer.runtime.MeterRegistryCustomizerConstraint;\n+\n+@Singleton\n+@Priority(Interceptor.Priority.APPLICATION - 100)\n+public class CustomConfiguration {\n+\n+    @ConfigProperty(name = \"deployment.env\")\n+    String deploymentEnv;\n+\n+    @Produces\n+    @Singleton\n+    @MeterFilterConstraint(applyTo = PrometheusMeterRegistry.class)\n+    public MeterFilter configurePrometheusRegistries() {\n+        return MeterFilter.commonTags(Arrays.asList(\n+                Tag.of(\"registry\", \"prometheus\")));\n+    }\n+\n+    @Produces\n+    @Singleton\n+    @MeterFilterConstraint(applyTo = PrometheusMeterRegistry.class)\n+    public MeterFilter configurePrometheusRegistries2() {\n+        return MeterFilter.commonTags(Arrays.asList(\n+                Tag.of(\"registry2\", \"prometheus\")));\n+    }\n+\n+    @Produces\n+    @Singleton\n+    @MeterFilterConstraint(applyTo = CustomConfiguration.class)\n+    public MeterFilter configureNonexistantRegistries() {\n+        return MeterFilter.commonTags(Arrays.asList(\n+                Tag.of(\"tag\", \"class-should-not-match\")));\n+    }\n+\n+    @Produces\n+    @Singleton\n+    public MeterFilter configureAllRegistries() {\n+        return MeterFilter.commonTags(Arrays.asList(\n+                Tag.of(\"env\", deploymentEnv)));\n+    }\n+\n+    @Produces\n+    @Singleton\n+    @MeterRegistryCustomizerConstraint(applyTo = PrometheusMeterRegistry.class)\n+    public MeterRegistryCustomizer customizePrometheusRegistries() {\n+        return new MeterRegistryCustomizer() {\n+            @Override\n+            public void customize(MeterRegistry registry) {\n+                registry.config().meterFilter(MeterFilter.ignoreTags(\"registry2\"));\n+            }\n+        };\n+    }\n+\n+    @Produces\n+    @Singleton\n+    @MeterRegistryCustomizerConstraint(applyTo = CustomConfiguration.class)\n+    public MeterRegistryCustomizer customizeNonexistantRegistries() {\n+        return new MeterRegistryCustomizer() {\n+            @Override\n+            public void customize(MeterRegistry registry) {\n+                registry.config().meterFilter(MeterFilter.ignoreTags(\"env\"));\n+            }\n+        };\n+    }\n+\n+    @Produces\n+    @Singleton\n+    public MeterRegistryCustomizer customizeAllRegistries() {\n+        return new MeterRegistryCustomizer() {\n+            @Override\n+            public void customize(MeterRegistry registry) {\n+                registry.config().meterFilter(MeterFilter.commonTags(Arrays.asList(\n+                        Tag.of(\"env2\", deploymentEnv))));\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Produce a custom prometheus configuration that is isolated/separate from\n+     * the application (and won't be connected to the Quarkus configured application\n+     * endpoint).\n+     */\n+    @Produces\n+    @Singleton\n+    public PrometheusMeterRegistry registry(PrometheusRegistry collectorRegistry, Clock clock) {\n+        return new PrometheusMeterRegistry(PrometheusConfig.DEFAULT, collectorRegistry, clock);\n+    }\n+\n+    /** Enable histogram buckets for a specific timer */\n+    @Produces\n+    @Singleton\n+    public MeterFilter enableHistogram() {\n+        return new MeterFilter() {\n+            public DistributionStatisticConfig configure(Meter.Id id, DistributionStatisticConfig config) {\n+                if (id.getName().equals(\"prime.number.test\")) {\n+                    return DistributionStatisticConfig.builder()\n+                            .percentiles(0.5, 0.95)\n+                            .build()\n+                            .merge(config);\n+                }\n+                return config;\n+            }\n+        };\n+    }\n+}\n\ndiff --git a/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/Fruit.java b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/Fruit.java\nnew file mode 100644\nindex 0000000000000..04a4c251cebc0\n--- /dev/null\n+++ b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/Fruit.java\n@@ -0,0 +1,17 @@\n+package io.quarkus.it.micrometer.prometheus;\n+\n+import jakarta.persistence.Entity;\n+\n+import io.quarkus.hibernate.orm.panache.PanacheEntity;\n+\n+@Entity\n+public class Fruit extends PanacheEntity {\n+    public String name;\n+\n+    public Fruit(String name) {\n+        this.name = name;\n+    }\n+\n+    public Fruit() {\n+    }\n+}\n\ndiff --git a/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/FruitResource.java b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/FruitResource.java\nnew file mode 100644\nindex 0000000000000..34c9fa5416b59\n--- /dev/null\n+++ b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/FruitResource.java\n@@ -0,0 +1,40 @@\n+package io.quarkus.it.micrometer.prometheus;\n+\n+import java.util.List;\n+\n+import jakarta.transaction.Transactional;\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+\n+import org.jboss.resteasy.reactive.RestResponse;\n+\n+import io.quarkus.hibernate.orm.panache.PanacheQuery;\n+import io.smallrye.common.annotation.Blocking;\n+\n+@Path(\"/fruit\")\n+@Blocking\n+public class FruitResource {\n+\n+    @GET\n+    @Path(\"create\")\n+    @Transactional\n+    public void trigger() {\n+        Fruit apple = new Fruit(\"apple\");\n+        Fruit pear = new Fruit(\"pear\");\n+        Fruit banana = new Fruit(\"banana\");\n+\n+        Fruit.persist(apple, pear, banana);\n+    }\n+\n+    @GET\n+    @Path(\"all\")\n+    public RestResponse<Object> retrieveAll() {\n+        PanacheQuery<Fruit> query = Fruit.find(\n+                \"select name from Fruit\");\n+        List<Fruit> all = query.list();\n+\n+        return RestResponse.ResponseBuilder.noContent()\n+                .header(\"foo-response\", \"value\")\n+                .build();\n+    }\n+}\n\ndiff --git a/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/MessageResource.java b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/MessageResource.java\nnew file mode 100644\nindex 0000000000000..5c3cc60995242\n--- /dev/null\n+++ b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/MessageResource.java\n@@ -0,0 +1,44 @@\n+package io.quarkus.it.micrometer.prometheus;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.PathParam;\n+\n+import io.micrometer.core.instrument.MeterRegistry;\n+\n+@Path(\"/message\")\n+public class MessageResource implements MessageResourceApi {\n+\n+    private final MeterRegistry registry;\n+\n+    public MessageResource(MeterRegistry registry) {\n+        this.registry = registry;\n+    }\n+\n+    @GET\n+    public String message() {\n+        return registry.getClass().getName();\n+    }\n+\n+    @GET\n+    @Path(\"fail\")\n+    public String fail() {\n+        throw new NullPointerException(\"Failed on purpose\");\n+    }\n+\n+    @GET\n+    @Path(\"item/{id}\")\n+    public String item(@PathParam(\"id\") String id) {\n+        return \"return message with id \" + id;\n+    }\n+\n+    @Override\n+    public String match(String id, String sub) {\n+        return \"return message with id \" + id + \", and sub \" + sub;\n+    }\n+\n+    @Override\n+    public String optional(String text) {\n+        return \"return message with text \" + text;\n+    }\n+}\n\ndiff --git a/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/MessageResourceApi.java b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/MessageResourceApi.java\nnew file mode 100644\nindex 0000000000000..96deb83a93487\n--- /dev/null\n+++ b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/MessageResourceApi.java\n@@ -0,0 +1,14 @@\n+package io.quarkus.it.micrometer.prometheus;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.PathParam;\n+\n+// Splitting JAX-RS annotations to interfaces tests the behaviour of\n+// io.quarkus.resteasy.deployment.RestPathAnnotationProcessor\n+public interface MessageResourceApi extends MessageResourceNestedApi {\n+\n+    @GET\n+    @Path(\"match/{id}/{sub}\")\n+    String match(@PathParam(\"id\") String id, @PathParam(\"sub\") String sub);\n+}\n\ndiff --git a/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/MessageResourceNestedApi.java b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/MessageResourceNestedApi.java\nnew file mode 100644\nindex 0000000000000..9bd3b3525ca6e\n--- /dev/null\n+++ b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/MessageResourceNestedApi.java\n@@ -0,0 +1,13 @@\n+package io.quarkus.it.micrometer.prometheus;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.PathParam;\n+\n+// Testing deep lookup of Path-annotation\n+public interface MessageResourceNestedApi {\n+\n+    @GET\n+    @Path(\"match/{text}\")\n+    String optional(@PathParam(\"text\") String text);\n+}\n\\ No newline at end of file\n\ndiff --git a/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/PathTemplateResource.java b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/PathTemplateResource.java\nnew file mode 100644\nindex 0000000000000..506bbaf057ee5\n--- /dev/null\n+++ b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/PathTemplateResource.java\n@@ -0,0 +1,16 @@\n+package io.quarkus.it.micrometer.prometheus;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.PathParam;\n+\n+import io.smallrye.common.vertx.ContextLocals;\n+\n+@Path(\"template/path/{value}\")\n+public class PathTemplateResource {\n+    @GET\n+    public String get(@PathParam(\"value\") String value) {\n+        ContextLocals.put(\"context-local\", \"val-\" + value);\n+        return \"Received: \" + value;\n+    }\n+}\n\ndiff --git a/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/PingPongResource.java b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/PingPongResource.java\nnew file mode 100644\nindex 0000000000000..1ac18944d00aa\n--- /dev/null\n+++ b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/PingPongResource.java\n@@ -0,0 +1,102 @@\n+package io.quarkus.it.micrometer.prometheus;\n+\n+import jakarta.inject.Inject;\n+import jakarta.inject.Singleton;\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.PathParam;\n+import jakarta.ws.rs.core.Response;\n+\n+import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n+import org.eclipse.microprofile.rest.client.inject.RestClient;\n+import org.jboss.resteasy.reactive.RestPath;\n+\n+import io.smallrye.common.annotation.Blocking;\n+import io.smallrye.mutiny.Uni;\n+\n+@Singleton\n+@Path(\"/client\")\n+public class PingPongResource {\n+    @RegisterRestClient(configKey = \"pingpong\")\n+    public interface PingPongRestClient {\n+\n+        @Path(\"/client/pong/{message}\")\n+        @GET\n+        String pingpong(@PathParam(\"message\") String message);\n+\n+        @GET\n+        @Path(\"/client/pong/{message}\")\n+        Uni<String> asyncPingpong(@PathParam(\"message\") String message);\n+\n+        @GET\n+        @Path(\"/client/status/{statusCode}\")\n+        public void call(@RestPath int statusCode);\n+\n+        @GET\n+        @Path(\"/client/status/{statusCode}/{sleep}\")\n+        public void call(@RestPath int statusCode, @RestPath int sleep);\n+    }\n+\n+    @Inject\n+    @RestClient\n+    PingPongRestClient pingRestClient;\n+\n+    @GET\n+    @Path(\"pong/{message}\")\n+    public String pong(@PathParam(\"message\") String message) {\n+        return message;\n+    }\n+\n+    @GET\n+    @Blocking\n+    @Path(\"ping/{message}\")\n+    public String ping(@PathParam(\"message\") String message) {\n+        return pingRestClient.pingpong(message);\n+    }\n+\n+    @GET\n+    @Path(\"async-ping/{message}\")\n+    public Uni<String> asyncPing(@PathParam(\"message\") String message) {\n+        return pingRestClient.asyncPingpong(message);\n+    }\n+\n+    @GET\n+    @Path(\"status\")\n+    public String clientStatus() {\n+        String result = \"\";\n+        pingRestClient.call(200);\n+        result += \"ok\";\n+        try {\n+            pingRestClient.call(400);\n+        } catch (Exception ignored) {\n+            result += \"400\";\n+        }\n+        try {\n+            pingRestClient.call(500);\n+        } catch (Exception ignored) {\n+            result += \"500\";\n+        }\n+        try {\n+            pingRestClient.call(200, 5000);\n+        } catch (Exception ignored) {\n+            result += \"timeout\";\n+        }\n+        return result;\n+    }\n+\n+    @GET\n+    @Path(\"status/{statusCode}\")\n+    public Response testStatus(@RestPath int statusCode) {\n+        return Response.status(statusCode).build();\n+    }\n+\n+    @GET\n+    @Path(\"status/{statusCode}/{sleep}\")\n+    public Response testStatusSleep(@RestPath int statusCode, @RestPath int sleep) {\n+        try {\n+            Thread.sleep(sleep);\n+        } catch (InterruptedException ignored) {\n+        }\n+        return Response.status(statusCode).build();\n+    }\n+}\n\ndiff --git a/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/PrefixingValueResolver.java b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/PrefixingValueResolver.java\nnew file mode 100644\nindex 0000000000000..5f257408909c5\n--- /dev/null\n+++ b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/PrefixingValueResolver.java\n@@ -0,0 +1,13 @@\n+package io.quarkus.it.micrometer.prometheus;\n+\n+import jakarta.inject.Singleton;\n+\n+import io.micrometer.common.annotation.ValueResolver;\n+\n+@Singleton\n+public class PrefixingValueResolver implements ValueResolver {\n+    @Override\n+    public String resolve(Object parameter) {\n+        return \"prefix \" + parameter;\n+    }\n+}\n\ndiff --git a/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/PrimeNumberResource.java b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/PrimeNumberResource.java\nnew file mode 100644\nindex 0000000000000..30ba97119b581\n--- /dev/null\n+++ b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/PrimeNumberResource.java\n@@ -0,0 +1,66 @@\n+package io.quarkus.it.micrometer.prometheus;\n+\n+import java.util.concurrent.atomic.LongAccumulator;\n+import java.util.function.Supplier;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.PathParam;\n+import jakarta.ws.rs.Produces;\n+\n+import io.micrometer.core.instrument.MeterRegistry;\n+\n+@Path(\"/prime\")\n+public class PrimeNumberResource {\n+\n+    private final LongAccumulator highestPrime = new LongAccumulator(Long::max, 0);\n+    private final MeterRegistry registry;\n+\n+    PrimeNumberResource(MeterRegistry registry) {\n+        this.registry = registry;\n+\n+        // Create a gauge that uses the highestPrimeNumberSoFar method\n+        // to obtain the highest observed prime number\n+        registry.gauge(\"prime.number.max\", this,\n+                PrimeNumberResource::highestObservedPrimeNumber);\n+    }\n+\n+    @GET\n+    @Path(\"/{number}\")\n+    @Produces(\"text/plain\")\n+    public String checkIfPrime(@PathParam(\"number\") long number) {\n+        if (number < 1) {\n+            return \"Only natural numbers can be prime numbers.\";\n+        }\n+        if (number == 1) {\n+            return \"1 is not prime.\";\n+        }\n+        if (number == 2) {\n+            return \"2 is prime.\";\n+        }\n+        if (number % 2 == 0) {\n+            return number + \" is not prime, it is divisible by 2.\";\n+        }\n+\n+        Supplier<String> supplier = () -> {\n+            for (int i = 3; i < Math.floor(Math.sqrt(number)) + 1; i = i + 2) {\n+                if (number % i == 0) {\n+                    return number + \" is not prime, is divisible by \" + i + \".\";\n+                }\n+            }\n+            highestPrime.accumulate(number);\n+            return number + \" is prime.\";\n+        };\n+\n+        return registry.timer(\"prime.number.test\").wrap(supplier).get();\n+    }\n+\n+    /**\n+     * This method is called by the registered {@code highest.prime.number} gauge.\n+     *\n+     * @return the highest observed prime value\n+     */\n+    long highestObservedPrimeNumber() {\n+        return highestPrime.get();\n+    }\n+}\n\ndiff --git a/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/RootResource.java b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/RootResource.java\nnew file mode 100644\nindex 0000000000000..bc62e4cae6164\n--- /dev/null\n+++ b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/RootResource.java\n@@ -0,0 +1,13 @@\n+package io.quarkus.it.micrometer.prometheus;\n+\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.PathParam;\n+\n+@Path(\"/root\")\n+public class RootResource {\n+\n+    @Path(\"{rootParam}/sub\")\n+    public SubResource subResource(@PathParam(\"rootParam\") String value) {\n+        return new SubResource(value);\n+    }\n+}\n\ndiff --git a/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/SecuredResource.java b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/SecuredResource.java\nnew file mode 100644\nindex 0000000000000..6702678e20d88\n--- /dev/null\n+++ b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/SecuredResource.java\n@@ -0,0 +1,15 @@\n+package io.quarkus.it.micrometer.prometheus;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.PathParam;\n+\n+@Path(\"/secured\")\n+public class SecuredResource {\n+\n+    @GET\n+    @Path(\"item/{id}\")\n+    public String item(@PathParam(\"id\") String id) {\n+        return \"return message with id \" + id;\n+    }\n+}\n\ndiff --git a/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/SubResource.java b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/SubResource.java\nnew file mode 100644\nindex 0000000000000..ba5d61a5766b3\n--- /dev/null\n+++ b/integration-tests/micrometer-prometheus-opentelemetry/src/main/java/io/quarkus/it/micrometer/prometheus/SubResource.java\n@@ -0,0 +1,20 @@\n+package io.quarkus.it.micrometer.prometheus;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.PathParam;\n+\n+public class SubResource {\n+\n+    private final String value;\n+\n+    public SubResource(String value) {\n+        this.value = value;\n+    }\n+\n+    @GET\n+    @Path(\"/{subParam}\")\n+    public String get(@PathParam(\"subParam\") String subParam) {\n+        return value + \":\" + subParam;\n+    }\n+}\n\ndiff --git a/integration-tests/micrometer-prometheus-opentelemetry/src/main/resources/application.properties b/integration-tests/micrometer-prometheus-opentelemetry/src/main/resources/application.properties\nnew file mode 100644\nindex 0000000000000..8fe42ae42bc0f\n--- /dev/null\n+++ b/integration-tests/micrometer-prometheus-opentelemetry/src/main/resources/application.properties\n@@ -0,0 +1,41 @@\n+#quarkus.log.min-level=DEBUG\n+#quarkus.log.category.\"io.quarkus.micrometer\".level=DEBUG\n+quarkus.log.category.\"io.quarkus.bootstrap\".level=INFO\n+quarkus.log.category.\"io.quarkus.netty\".level=INFO\n+quarkus.log.category.\"io.quarkus.resteasy.runtime\".level=INFO\n+\n+quarkus.log.category.\"io.netty\".level=INFO\n+quarkus.log.category.\"org.apache\".level=INFO\n+\n+quarkus.hibernate-orm.schema-management.strategy=drop-and-create\n+quarkus.hibernate-orm.statistics=true\n+quarkus.hibernate-orm.metrics.enabled=true\n+\n+quarkus.datasource.db-kind=h2\n+quarkus.datasource.devservices.enabled=true\n+\n+# This is the old property, should still be usable\n+quarkus.micrometer.binder.vertx.ignore-patterns=/fruit/create\n+\n+# Verify match pattern behavior\n+quarkus.micrometer.binder.http-server.match-patterns=/message/match/\\\\\\\\d+/[0-9]+=/message/match/{id}/{sub},\\\n+/message/match/.*=/message/match/{other}\n+\n+quarkus.rest-client.pingpong.url=${test.url}\n+quarkus.rest-client.read-timeout=1000\n+\n+deployment.env=test\n+\n+# Disable Kubernetes dev services as not supported on Windows\n+quarkus.kubernetes-client.devservices.enabled=false\n+\n+\n+quarkus.security.users.embedded.enabled=true\n+quarkus.security.users.embedded.plain-text=true\n+quarkus.security.users.embedded.users.scott=reader\n+quarkus.security.users.embedded.users.stuart=writer\n+quarkus.security.users.embedded.roles.scott=READER\n+quarkus.security.users.embedded.roles.stuart=READER,WRITER\n+quarkus.http.auth.permission.secured.policy=authenticated\n+quarkus.http.auth.permission.secured.paths=/secured/*\n+\n\ndiff --git a/integration-tests/micrometer-prometheus/src/test/java/io/quarkus/it/micrometer/prometheus/ExemplarOffTest.java b/integration-tests/micrometer-prometheus-opentelemetry/src/test/java/io/quarkus/it/micrometer/prometheus/ExemplarOffTest.java\nsimilarity index 96%\nrename from integration-tests/micrometer-prometheus/src/test/java/io/quarkus/it/micrometer/prometheus/ExemplarOffTest.java\nrename to integration-tests/micrometer-prometheus-opentelemetry/src/test/java/io/quarkus/it/micrometer/prometheus/ExemplarOffTest.java\nindex d46a50539b618..586ab8af1fc55 100644\n--- a/integration-tests/micrometer-prometheus/src/test/java/io/quarkus/it/micrometer/prometheus/ExemplarOffTest.java\n+++ b/integration-tests/micrometer-prometheus-opentelemetry/src/test/java/io/quarkus/it/micrometer/prometheus/ExemplarOffTest.java\n@@ -25,7 +25,7 @@ void testExemplar() {\n \n         String metricMatch = \"http_server_requests_seconds_count{dummy=\\\"value\\\",env=\\\"test\\\",\" +\n                 \"env2=\\\"test\\\",foo=\\\"UNSET\\\",method=\\\"GET\\\",outcome=\\\"SUCCESS\\\",\" +\n-                \"registry=\\\"prometheus\\\",status=\\\"200\\\",uri=\\\"/example/prime/{number}\\\"} 2.0 # {span_id=\\\"\";\n+                \"registry=\\\"prometheus\\\",status=\\\"200\\\",uri=\\\"/example/prime/{number}\\\"} 2 # {span_id=\\\"\";\n \n         await().atMost(5, SECONDS).untilAsserted(() -> {\n             assertFalse(get(\"/q/metrics\").then().extract().asString().contains(metricMatch));\n\ndiff --git a/integration-tests/micrometer-prometheus/src/test/java/io/quarkus/it/micrometer/prometheus/ExemplarTest.java b/integration-tests/micrometer-prometheus-opentelemetry/src/test/java/io/quarkus/it/micrometer/prometheus/ExemplarTest.java\nsimilarity index 96%\nrename from integration-tests/micrometer-prometheus/src/test/java/io/quarkus/it/micrometer/prometheus/ExemplarTest.java\nrename to integration-tests/micrometer-prometheus-opentelemetry/src/test/java/io/quarkus/it/micrometer/prometheus/ExemplarTest.java\nindex 4bd040ac8725a..a6c83e8eaa41f 100644\n--- a/integration-tests/micrometer-prometheus/src/test/java/io/quarkus/it/micrometer/prometheus/ExemplarTest.java\n+++ b/integration-tests/micrometer-prometheus-opentelemetry/src/test/java/io/quarkus/it/micrometer/prometheus/ExemplarTest.java\n@@ -25,7 +25,7 @@ void testExemplar() {\n \n         String metricMatch = \"http_server_requests_seconds_count{dummy=\\\"value\\\",env=\\\"test\\\",\" +\n                 \"env2=\\\"test\\\",foo=\\\"UNSET\\\",foo_response=\\\"UNSET\\\",method=\\\"GET\\\",outcome=\\\"SUCCESS\\\",\" +\n-                \"registry=\\\"prometheus\\\",status=\\\"200\\\",uri=\\\"/example/prime/{number}\\\"} 2.0 # {span_id=\\\"\";\n+                \"registry=\\\"prometheus\\\",status=\\\"200\\\",uri=\\\"/example/prime/{number}\\\"} 2 # {span_id=\\\"\";\n \n         await().atMost(5, SECONDS).untilAsserted(() -> {\n             String body = get(\"/q/metrics\").then().extract().asString();\n\ndiff --git a/integration-tests/micrometer-prometheus/src/test/java/io/quarkus/it/micrometer/prometheus/OtelOffProfile.java b/integration-tests/micrometer-prometheus-opentelemetry/src/test/java/io/quarkus/it/micrometer/prometheus/OtelOffProfile.java\nsimilarity index 100%\nrename from integration-tests/micrometer-prometheus/src/test/java/io/quarkus/it/micrometer/prometheus/OtelOffProfile.java\nrename to integration-tests/micrometer-prometheus-opentelemetry/src/test/java/io/quarkus/it/micrometer/prometheus/OtelOffProfile.java\n\ndiff --git a/integration-tests/micrometer-prometheus/src/test/java/io/quarkus/it/micrometer/prometheus/OtelOnProfile.java b/integration-tests/micrometer-prometheus-opentelemetry/src/test/java/io/quarkus/it/micrometer/prometheus/OtelOnProfile.java\nsimilarity index 100%\nrename from integration-tests/micrometer-prometheus/src/test/java/io/quarkus/it/micrometer/prometheus/OtelOnProfile.java\nrename to integration-tests/micrometer-prometheus-opentelemetry/src/test/java/io/quarkus/it/micrometer/prometheus/OtelOnProfile.java\n\ndiff --git a/integration-tests/micrometer-prometheus-opentelemetry/src/test/java/io/quarkus/it/micrometer/prometheus/PrometheusMetricsRegistryIT.java b/integration-tests/micrometer-prometheus-opentelemetry/src/test/java/io/quarkus/it/micrometer/prometheus/PrometheusMetricsRegistryIT.java\nnew file mode 100644\nindex 0000000000000..bdf741b8ec496\n--- /dev/null\n+++ b/integration-tests/micrometer-prometheus-opentelemetry/src/test/java/io/quarkus/it/micrometer/prometheus/PrometheusMetricsRegistryIT.java\n@@ -0,0 +1,7 @@\n+package io.quarkus.it.micrometer.prometheus;\n+\n+import io.quarkus.test.junit.QuarkusIntegrationTest;\n+\n+@QuarkusIntegrationTest\n+class PrometheusMetricsRegistryIT extends PrometheusMetricsRegistryTest {\n+}\n\ndiff --git a/integration-tests/micrometer-prometheus-opentelemetry/src/test/java/io/quarkus/it/micrometer/prometheus/PrometheusMetricsRegistryTest.java b/integration-tests/micrometer-prometheus-opentelemetry/src/test/java/io/quarkus/it/micrometer/prometheus/PrometheusMetricsRegistryTest.java\nnew file mode 100644\nindex 0000000000000..b562221908137\n--- /dev/null\n+++ b/integration-tests/micrometer-prometheus-opentelemetry/src/test/java/io/quarkus/it/micrometer/prometheus/PrometheusMetricsRegistryTest.java\n@@ -0,0 +1,295 @@\n+package io.quarkus.it.micrometer.prometheus;\n+\n+import static io.quarkus.micrometer.runtime.export.handlers.PrometheusHandler.CONTENT_TYPE_004;\n+import static io.restassured.RestAssured.given;\n+import static io.restassured.RestAssured.when;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.not;\n+\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+\n+/**\n+ * Test functioning prometheus endpoint.\n+ * Use test execution order to ensure one http server request measurement\n+ * is present when the endpoint is scraped.\n+ */\n+@QuarkusTest\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+class PrometheusMetricsRegistryTest {\n+\n+    @Test\n+    @Order(1)\n+    void testRegistryInjection() {\n+        when().get(\"/message\").then().statusCode(200)\n+                .body(containsString(\"io.micrometer.core.instrument.composite.CompositeMeterRegistry\"));\n+    }\n+\n+    @Test\n+    @Order(2)\n+    void testUnknownUrl() {\n+        when().get(\"/message/notfound\").then().statusCode(404);\n+    }\n+\n+    @Test\n+    @Order(3)\n+    void testServerError() {\n+        when().get(\"/message/fail\").then().statusCode(500);\n+    }\n+\n+    @Test\n+    @Order(4)\n+    void testPathParameter() {\n+        given().header(\"foo\", \"bar\").when().get(\"/message/item/123\").then().statusCode(200);\n+    }\n+\n+    @Test\n+    @Order(5)\n+    void testMultipleParameters() {\n+        when().get(\"/message/match/123/1\").then().statusCode(200);\n+\n+        when().get(\"/message/match/1/123\").then().statusCode(200);\n+\n+        when().get(\"/message/match/baloney\").then().statusCode(200);\n+    }\n+\n+    @Test\n+    @Order(6)\n+    void testPanacheCalls() {\n+        when().get(\"/fruit/create\").then().statusCode(204);\n+\n+        when().get(\"/fruit/all\").then().statusCode(204);\n+    }\n+\n+    @Test\n+    @Order(7)\n+    void testPrimeEndpointCalls() {\n+        when().get(\"/prime/7\").then().statusCode(200)\n+                .body(containsString(\"is prime\"));\n+    }\n+\n+    @Test\n+    @Order(8)\n+    void testAllTheThings() {\n+        when().get(\"/all-the-things\").then().statusCode(200)\n+                .body(containsString(\"OK\"));\n+    }\n+\n+    @Test\n+    @Order(9)\n+    void testTemplatedPathOnClass() {\n+        when().get(\"/template/path/anything\").then().statusCode(200)\n+                .body(containsString(\"Received: anything\"));\n+    }\n+\n+    @Test\n+    @Order(10)\n+    void testSecuredEndpoint() {\n+        when().get(\"/secured/item/123\").then().statusCode(401);\n+        given().auth().preemptive().basic(\"foo\", \"bar\").when().get(\"/secured/item/321\").then().statusCode(401);\n+        given().auth().preemptive().basic(\"scott\", \"reader\").when().get(\"/secured/item/123\").then().statusCode(200);\n+        given().auth().preemptive().basic(\"stuart\", \"writer\").when().get(\"/secured/item/321\").then().statusCode(200);\n+    }\n+\n+    @Test\n+    @Order(11)\n+    void testTemplatedPathOnSubResource() {\n+        when().get(\"/root/r1/sub/s2\").then().statusCode(200)\n+                .body(containsString(\"r1:s2\"));\n+    }\n+\n+    @Test\n+    @Order(20)\n+    void testPrometheusScrapeEndpointTextPlain() {\n+        RestAssured.given().header(\"Accept\", CONTENT_TYPE_004)\n+                .when().get(\"/q/metrics\")\n+                .then().statusCode(200)\n+\n+                // Prometheus body has ALL THE THINGS in no particular order\n+\n+                .body(containsString(\"registry=\\\"prometheus\\\"\"))\n+                .body(containsString(\"env=\\\"test\\\"\"))\n+                .body(containsString(\"http_server_requests\"))\n+\n+                .body(containsString(\"status=\\\"404\\\"\"))\n+                .body(containsString(\"uri=\\\"NOT_FOUND\\\"\"))\n+                .body(containsString(\"outcome=\\\"CLIENT_ERROR\\\"\"))\n+\n+                .body(containsString(\"status=\\\"500\\\"\"))\n+                .body(containsString(\"uri=\\\"/message/fail\\\"\"))\n+                .body(containsString(\"outcome=\\\"SERVER_ERROR\\\"\"))\n+\n+                .body(containsString(\"status=\\\"200\\\"\"))\n+                .body(containsString(\"uri=\\\"/message\\\"\"))\n+                .body(containsString(\"uri=\\\"/message/item/{id}\\\"\"))\n+                .body(containsString(\"status=\\\"200\\\",uri=\\\"/message/item/{id}\\\"\"))\n+                .body(containsString(\"uri=\\\"/secured/item/{id}\\\"\"))\n+                .body(containsString(\"status=\\\"200\\\",uri=\\\"/secured/item/{id}\\\"\"))\n+                .body(containsString(\"status=\\\"401\\\",uri=\\\"/secured/item/{id}\\\"\"))\n+                .body(containsString(\"outcome=\\\"SUCCESS\\\"\"))\n+                .body(containsString(\"dummy=\"))\n+                .body(containsString(\"foo=\\\"bar\\\"\"))\n+                .body(containsString(\"foo_response=\\\"value\\\"\"))\n+                .body(containsString(\"uri=\\\"/message/match/{id}/{sub}\\\"\"))\n+                .body(containsString(\"uri=\\\"/message/match/{other}\\\"\"))\n+\n+                .body(containsString(\n+                        \"http_server_requests_seconds_count{dummy=\\\"val-anything\\\",env=\\\"test\\\",env2=\\\"test\\\",foo=\\\"UNSET\\\",foo_response=\\\"UNSET\\\",method=\\\"GET\\\",outcome=\\\"SUCCESS\\\",registry=\\\"prometheus\\\",status=\\\"200\\\",uri=\\\"/template/path/{value}\\\"\"))\n+\n+                .body(containsString(\n+                        \"http_server_requests_seconds_count{dummy=\\\"value\\\",env=\\\"test\\\",env2=\\\"test\\\",foo=\\\"UNSET\\\",foo_response=\\\"UNSET\\\",method=\\\"GET\\\",outcome=\\\"SUCCESS\\\",registry=\\\"prometheus\\\",status=\\\"200\\\",uri=\\\"/root/{rootParam}/sub/{subParam}\\\"\"))\n+\n+                // Verify Hibernate Metrics\n+                .body(containsString(\n+                        \"hibernate_sessions_open_total{entityManagerFactory=\\\"<default>\\\",env=\\\"test\\\",env2=\\\"test\\\",registry=\\\"prometheus\\\"} 2.0\"))\n+                .body(containsString(\n+                        \"hibernate_sessions_closed_total{entityManagerFactory=\\\"<default>\\\",env=\\\"test\\\",env2=\\\"test\\\",registry=\\\"prometheus\\\"} 2.0\"))\n+                .body(containsString(\n+                        \"hibernate_connections_obtained_total{entityManagerFactory=\\\"<default>\\\",env=\\\"test\\\",env2=\\\"test\\\",registry=\\\"prometheus\\\"}\"))\n+                .body(containsString(\n+                        \"hibernate_entities_inserts_total{entityManagerFactory=\\\"<default>\\\",env=\\\"test\\\",env2=\\\"test\\\",registry=\\\"prometheus\\\"} 3.0\"))\n+                .body(containsString(\n+                        \"hibernate_flushes_total{entityManagerFactory=\\\"<default>\\\",env=\\\"test\\\",env2=\\\"test\\\",registry=\\\"prometheus\\\"} 1.0\"))\n+\n+                // Annotated counters\n+                .body(not(containsString(\"metric_none\")))\n+                .body(containsString(\n+                        \"metric_all_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"none\\\",extra=\\\"tag\\\",fail=\\\"false\\\",method=\\\"countAllInvocations\\\",registry=\\\"prometheus\\\",result=\\\"success\\\"} 1.0\"))\n+                .body(containsString(\n+                        \"metric_all_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"NullPointerException\\\",extra=\\\"tag\\\",fail=\\\"true\\\",method=\\\"countAllInvocations\\\",registry=\\\"prometheus\\\",result=\\\"failure\\\"} 1.0\"))\n+                .body(containsString(\n+                        \"method_counted_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"NullPointerException\\\",fail=\\\"prefix true\\\",method=\\\"emptyMetricName\\\",registry=\\\"prometheus\\\",result=\\\"failure\\\"} 1.0\"))\n+                .body(containsString(\n+                        \"method_counted_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"none\\\",fail=\\\"prefix false\\\",method=\\\"emptyMetricName\\\",registry=\\\"prometheus\\\",result=\\\"success\\\"} 1.0\"))\n+                .body(not(containsString(\"async_none\")))\n+                .body(containsString(\n+                        \"async_all_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",do_fail_call=\\\"true\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"NullPointerException\\\",extra=\\\"tag\\\",method=\\\"countAllAsyncInvocations\\\",registry=\\\"prometheus\\\",result=\\\"failure\\\"} 1.0\"))\n+                .body(containsString(\n+                        \"async_all_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",do_fail_call=\\\"false\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"none\\\",extra=\\\"tag\\\",method=\\\"countAllAsyncInvocations\\\",registry=\\\"prometheus\\\",result=\\\"success\\\"} 1.0\"))\n+                .body(containsString(\n+                        \"method_counted_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"NullPointerException\\\",fail=\\\"42\\\",method=\\\"emptyAsyncMetricName\\\",registry=\\\"prometheus\\\",result=\\\"failure\\\"} 1.0\"))\n+                .body(containsString(\n+                        \"method_counted_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"none\\\",fail=\\\"42\\\",method=\\\"emptyAsyncMetricName\\\",registry=\\\"prometheus\\\",result=\\\"success\\\"} 1.0\"))\n+\n+                // Annotated Timers\n+                .body(containsString(\n+                        \"call_seconds_count{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"NullPointerException\\\",extra=\\\"tag\\\",method=\\\"call\\\",registry=\\\"prometheus\\\"} 1\"))\n+                .body(containsString(\n+                        \"call_seconds_count{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"none\\\",extra=\\\"tag\\\",method=\\\"call\\\",registry=\\\"prometheus\\\"}\"))\n+                .body(containsString(\n+                        \"async_call_seconds_count{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"NullPointerException\\\",extra=\\\"tag\\\",method=\\\"asyncCall\\\",registry=\\\"prometheus\\\"} 1\"))\n+                .body(containsString(\n+                        \"async_call_seconds_count{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"none\\\",extra=\\\"tag\\\",method=\\\"asyncCall\\\",registry=\\\"prometheus\\\"} 1\"))\n+                .body(containsString(\n+                        \"longCall_seconds_count{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",extra=\\\"tag\\\",method=\\\"longCall\\\",registry=\\\"prometheus\\\"}\"))\n+                .body(containsString(\n+                        \"async_longCall_seconds_sum{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",extra=\\\"tag\\\",method=\\\"longAsyncCall\\\",registry=\\\"prometheus\\\"} 0.0\"))\n+\n+                // Configured median, 95th percentile and histogram buckets\n+                .body(containsString(\n+                        \"prime_number_test_seconds{env=\\\"test\\\",env2=\\\"test\\\",registry=\\\"prometheus\\\",quantile=\\\"0.5\\\"}\"))\n+                .body(containsString(\n+                        \"prime_number_test_seconds{env=\\\"test\\\",env2=\\\"test\\\",registry=\\\"prometheus\\\",quantile=\\\"0.95\\\"}\"))\n+\n+                // this was defined by a tag to a non-matching registry, and should not be found\n+                .body(not(containsString(\"class-should-not-match\")))\n+\n+                // should not find this ignored uri\n+                .body(not(containsString(\"uri=\\\"/fruit/create\\\"\")));\n+    }\n+\n+    @Test\n+    @Order(20)\n+    void testPrometheusScrapeEndpointOpenMetricsCompatibility() {\n+        RestAssured.given().header(\"Accept\", \"application/openmetrics-text; version=1.0.0; charset=utf-8\")\n+                .when().get(\"/q/metrics\")\n+                .then().statusCode(200)\n+\n+                // Prometheus body has ALL THE THINGS in no particular order\n+\n+                .body(containsString(\"registry=\\\"prometheus\\\"\"))\n+                .body(containsString(\"env=\\\"test\\\"\"))\n+                .body(containsString(\"http_server_requests\"))\n+\n+                .body(containsString(\"status=\\\"404\\\"\"))\n+                .body(containsString(\"uri=\\\"NOT_FOUND\\\"\"))\n+                .body(containsString(\"outcome=\\\"CLIENT_ERROR\\\"\"))\n+\n+                .body(containsString(\"status=\\\"500\\\"\"))\n+                .body(containsString(\"uri=\\\"/message/fail\\\"\"))\n+                .body(containsString(\"outcome=\\\"SERVER_ERROR\\\"\"))\n+\n+                .body(containsString(\"status=\\\"200\\\"\"))\n+                .body(containsString(\"uri=\\\"/message\\\"\"))\n+                .body(containsString(\"uri=\\\"/message/item/{id}\\\"\"))\n+                .body(containsString(\"outcome=\\\"SUCCESS\\\"\"))\n+                .body(containsString(\"uri=\\\"/message/match/{id}/{sub}\\\"\"))\n+                .body(containsString(\"uri=\\\"/message/match/{other}\\\"\"))\n+\n+                .body(containsString(\n+                        \"http_server_requests_seconds_count{dummy=\\\"val-anything\\\",env=\\\"test\\\",env2=\\\"test\\\",foo=\\\"UNSET\\\",foo_response=\\\"UNSET\\\",method=\\\"GET\\\",outcome=\\\"SUCCESS\\\",registry=\\\"prometheus\\\",status=\\\"200\\\",uri=\\\"/template/path/{value}\\\"\"))\n+\n+                // Verify Hibernate Metrics\n+                .body(containsString(\n+                        \"hibernate_sessions_open_total{entityManagerFactory=\\\"<default>\\\",env=\\\"test\\\",env2=\\\"test\\\",registry=\\\"prometheus\\\"} 2.0\"))\n+                .body(containsString(\n+                        \"hibernate_sessions_closed_total{entityManagerFactory=\\\"<default>\\\",env=\\\"test\\\",env2=\\\"test\\\",registry=\\\"prometheus\\\"} 2.0\"))\n+                .body(containsString(\n+                        \"hibernate_connections_obtained_total{entityManagerFactory=\\\"<default>\\\",env=\\\"test\\\",env2=\\\"test\\\",registry=\\\"prometheus\\\"}\"))\n+                .body(containsString(\n+                        \"hibernate_entities_inserts_total{entityManagerFactory=\\\"<default>\\\",env=\\\"test\\\",env2=\\\"test\\\",registry=\\\"prometheus\\\"} 3.0\"))\n+                .body(containsString(\n+                        \"hibernate_flushes_total{entityManagerFactory=\\\"<default>\\\",env=\\\"test\\\",env2=\\\"test\\\",registry=\\\"prometheus\\\"} 1.0\"))\n+\n+                // Annotated counters\n+                .body(not(containsString(\"metric_none\")))\n+                .body(containsString(\n+                        \"metric_all_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"none\\\",extra=\\\"tag\\\",fail=\\\"false\\\",method=\\\"countAllInvocations\\\",registry=\\\"prometheus\\\",result=\\\"success\\\"} 1.0 # {span_id=\"))\n+                .body(containsString(\n+                        \"metric_all_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"NullPointerException\\\",extra=\\\"tag\\\",fail=\\\"true\\\",method=\\\"countAllInvocations\\\",registry=\\\"prometheus\\\",result=\\\"failure\\\"} 1.0\"))\n+                .body(containsString(\n+                        \"method_counted_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"NullPointerException\\\",fail=\\\"prefix true\\\",method=\\\"emptyMetricName\\\",registry=\\\"prometheus\\\",result=\\\"failure\\\"} 1.0 # {span_id=\"))\n+                .body(containsString(\n+                        \"method_counted_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"none\\\",fail=\\\"prefix false\\\",method=\\\"emptyMetricName\\\",registry=\\\"prometheus\\\",result=\\\"success\\\"} 1.0\"))\n+                .body(not(containsString(\"async_none\")))\n+                .body(containsString(\n+                        \"async_all_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",do_fail_call=\\\"true\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"NullPointerException\\\",extra=\\\"tag\\\",method=\\\"countAllAsyncInvocations\\\",registry=\\\"prometheus\\\",result=\\\"failure\\\"} 1.0\"))\n+                .body(containsString(\n+                        \"async_all_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",do_fail_call=\\\"false\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"none\\\",extra=\\\"tag\\\",method=\\\"countAllAsyncInvocations\\\",registry=\\\"prometheus\\\",result=\\\"success\\\"} 1.0\"))\n+                .body(containsString(\n+                        \"method_counted_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"NullPointerException\\\",fail=\\\"42\\\",method=\\\"emptyAsyncMetricName\\\",registry=\\\"prometheus\\\",result=\\\"failure\\\"} 1.0\"))\n+                .body(containsString(\n+                        \"method_counted_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"none\\\",fail=\\\"42\\\",method=\\\"emptyAsyncMetricName\\\",registry=\\\"prometheus\\\",result=\\\"success\\\"} 1.0\"))\n+\n+                // Annotated Timers\n+                .body(containsString(\n+                        \"call_seconds_count{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"NullPointerException\\\",extra=\\\"tag\\\",method=\\\"call\\\",registry=\\\"prometheus\\\"} 1\"))\n+                .body(containsString(\n+                        \"call_seconds_count{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"none\\\",extra=\\\"tag\\\",method=\\\"call\\\",registry=\\\"prometheus\\\"}\"))\n+                .body(containsString(\n+                        \"async_call_seconds_count{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"NullPointerException\\\",extra=\\\"tag\\\",method=\\\"asyncCall\\\",registry=\\\"prometheus\\\"} 1\"))\n+                .body(containsString(\n+                        \"async_call_seconds_count{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"none\\\",extra=\\\"tag\\\",method=\\\"asyncCall\\\",registry=\\\"prometheus\\\"} 1\"))\n+                .body(containsString(\n+                        \"longCall_seconds_count{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",extra=\\\"tag\\\",method=\\\"longCall\\\",registry=\\\"prometheus\\\"}\"))\n+                .body(containsString(\n+                        \"async_longCall_seconds_sum{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",extra=\\\"tag\\\",method=\\\"longAsyncCall\\\",registry=\\\"prometheus\\\"} 0.0\"))\n+\n+                // Configured median, 95th percentile and histogram buckets\n+                .body(containsString(\n+                        \"prime_number_test_seconds{env=\\\"test\\\",env2=\\\"test\\\",registry=\\\"prometheus\\\",quantile=\\\"0.5\\\"}\"))\n+                .body(containsString(\n+                        \"prime_number_test_seconds{env=\\\"test\\\",env2=\\\"test\\\",registry=\\\"prometheus\\\",quantile=\\\"0.95\\\"}\"))\n+\n+                // this was defined by a tag to a non-matching registry, and should not be found\n+                .body(not(containsString(\"class-should-not-match\")))\n+\n+                // should not find this ignored uri\n+                .body(not(containsString(\"uri=\\\"/fruit/create\\\"\")));\n+    }\n+}\n\ndiff --git a/integration-tests/micrometer-prometheus-opentelemetry/src/test/java/io/quarkus/it/micrometer/prometheus/TestResources.java b/integration-tests/micrometer-prometheus-opentelemetry/src/test/java/io/quarkus/it/micrometer/prometheus/TestResources.java\nnew file mode 100644\nindex 0000000000000..49a22905af3e5\n--- /dev/null\n+++ b/integration-tests/micrometer-prometheus-opentelemetry/src/test/java/io/quarkus/it/micrometer/prometheus/TestResources.java\n@@ -0,0 +1,8 @@\n+package io.quarkus.it.micrometer.prometheus;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.h2.H2DatabaseTestResource;\n+\n+@QuarkusTestResource(H2DatabaseTestResource.class)\n+public class TestResources {\n+}\n\ndiff --git a/integration-tests/micrometer-prometheus/pom.xml b/integration-tests/micrometer-prometheus/pom.xml\nindex 2ab7282b1847e..2264479e710c1 100644\n--- a/integration-tests/micrometer-prometheus/pom.xml\n+++ b/integration-tests/micrometer-prometheus/pom.xml\n@@ -11,7 +11,7 @@\n     </parent>\n \n     <artifactId>quarkus-integration-test-micrometer-prometheus</artifactId>\n-    <name>Quarkus - Integration Tests - Micrometer Prometheus</name>\n+    <name>Quarkus - Integration Tests - Micrometer Prometheus without OpenTelemetry present</name>\n \n     <dependencies>\n         <dependency>\n@@ -46,10 +46,6 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-kubernetes</artifactId>\n         </dependency>\n-        <dependency>\n-            <groupId>io.quarkus</groupId>\n-            <artifactId>quarkus-opentelemetry</artifactId>\n-        </dependency>\n \n         <!-- Security -->\n         <dependency>\n@@ -156,19 +152,6 @@\n                 </exclusion>\n             </exclusions>\n         </dependency>\n-        <dependency>\n-            <groupId>io.quarkus</groupId>\n-            <artifactId>quarkus-opentelemetry-deployment</artifactId>\n-            <version>${project.version}</version>\n-            <type>pom</type>\n-            <scope>test</scope>\n-            <exclusions>\n-                <exclusion>\n-                    <groupId>*</groupId>\n-                    <artifactId>*</artifactId>\n-                </exclusion>\n-            </exclusions>\n-        </dependency>\n         <dependency>\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-elytron-security-properties-file-deployment</artifactId>\n\ndiff --git a/integration-tests/micrometer-prometheus/src/main/java/io/quarkus/ResponseHeaderTag.java b/integration-tests/micrometer-prometheus/src/main/java/io/quarkus/ResponseHeaderTag.java\nindex 2339df1a30809..7bff6e0dd9e38 100644\n--- a/integration-tests/micrometer-prometheus/src/main/java/io/quarkus/ResponseHeaderTag.java\n+++ b/integration-tests/micrometer-prometheus/src/main/java/io/quarkus/ResponseHeaderTag.java\n@@ -4,16 +4,21 @@\n \n import io.micrometer.core.instrument.Tags;\n import io.quarkus.micrometer.runtime.HttpServerMetricsTagsContributor;\n+import io.vertx.core.spi.observability.HttpResponse;\n \n @Singleton\n public class ResponseHeaderTag implements HttpServerMetricsTagsContributor {\n \n     @Override\n     public Tags contribute(Context context) {\n-        var headerValue = context.response().headers().get(\"foo-response\");\n         String value = \"UNSET\";\n-        if ((headerValue != null) && !headerValue.isEmpty()) {\n-            value = headerValue;\n+        HttpResponse response = context.response();\n+        // reset frames will not contain response\n+        if (response != null) {\n+            var headerValue = response.headers().get(\"foo-response\");\n+            if ((headerValue != null) && !headerValue.isEmpty()) {\n+                value = headerValue;\n+            }\n         }\n         return Tags.of(\"foo-response\", value);\n     }\n\ndiff --git a/integration-tests/micrometer-prometheus/src/main/java/io/quarkus/it/micrometer/prometheus/CustomConfiguration.java b/integration-tests/micrometer-prometheus/src/main/java/io/quarkus/it/micrometer/prometheus/CustomConfiguration.java\nindex 2a68c5ac446d5..a72dde3fef3e6 100644\n--- a/integration-tests/micrometer-prometheus/src/main/java/io/quarkus/it/micrometer/prometheus/CustomConfiguration.java\n+++ b/integration-tests/micrometer-prometheus/src/main/java/io/quarkus/it/micrometer/prometheus/CustomConfiguration.java\n@@ -15,9 +15,9 @@\n import io.micrometer.core.instrument.Tag;\n import io.micrometer.core.instrument.config.MeterFilter;\n import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;\n-import io.micrometer.prometheus.PrometheusConfig;\n-import io.micrometer.prometheus.PrometheusMeterRegistry;\n-import io.prometheus.client.CollectorRegistry;\n+import io.micrometer.prometheusmetrics.PrometheusConfig;\n+import io.micrometer.prometheusmetrics.PrometheusMeterRegistry;\n+import io.prometheus.metrics.model.registry.PrometheusRegistry;\n import io.quarkus.micrometer.runtime.MeterFilterConstraint;\n import io.quarkus.micrometer.runtime.MeterRegistryCustomizer;\n import io.quarkus.micrometer.runtime.MeterRegistryCustomizerConstraint;\n@@ -103,7 +103,7 @@ public void customize(MeterRegistry registry) {\n      */\n     @Produces\n     @Singleton\n-    public PrometheusMeterRegistry registry(CollectorRegistry collectorRegistry, Clock clock) {\n+    public PrometheusMeterRegistry registry(PrometheusRegistry collectorRegistry, Clock clock) {\n         return new PrometheusMeterRegistry(PrometheusConfig.DEFAULT, collectorRegistry, clock);\n     }\n \n@@ -115,8 +115,7 @@ public MeterFilter enableHistogram() {\n             public DistributionStatisticConfig configure(Meter.Id id, DistributionStatisticConfig config) {\n                 if (id.getName().equals(\"prime.number.test\")) {\n                     return DistributionStatisticConfig.builder()\n-                            .percentiles(0.5, 0.95) // median and 95th percentile\n-                            .percentilesHistogram(true) // histogram buckets (for use with prometheus histogram_quantile)\n+                            .percentiles(0.5, 0.95)\n                             .build()\n                             .merge(config);\n                 }\n\ndiff --git a/integration-tests/micrometer-prometheus/src/test/java/io/quarkus/it/micrometer/prometheus/ExampleResourcesTest.java b/integration-tests/micrometer-prometheus/src/test/java/io/quarkus/it/micrometer/prometheus/ExampleResourcesTest.java\nindex 7d55a55568d5f..11aaad57bc450 100644\n--- a/integration-tests/micrometer-prometheus/src/test/java/io/quarkus/it/micrometer/prometheus/ExampleResourcesTest.java\n+++ b/integration-tests/micrometer-prometheus/src/test/java/io/quarkus/it/micrometer/prometheus/ExampleResourcesTest.java\n@@ -58,10 +58,10 @@ void testTimerExample() {\n                 .body(containsString(\n                         \"example_prime_number_test_seconds_max{env=\\\"test\\\",env2=\\\"test\\\",prime=\\\"true\\\",registry=\\\"prometheus\\\"}\"))\n                 .body(containsString(\n-                        \"example_prime_number_test_seconds_count{env=\\\"test\\\",env2=\\\"test\\\",prime=\\\"true\\\",registry=\\\"prometheus\\\"} 1.0\"));\n+                        \"example_prime_number_test_seconds_count{env=\\\"test\\\",env2=\\\"test\\\",prime=\\\"true\\\",registry=\\\"prometheus\\\"} 1\"));\n         when().get(\"/example/prime/7919\").then().statusCode(200);\n         when().get(\"/q/metrics\").then().statusCode(200)\n                 .body(containsString(\n-                        \"example_prime_number_test_seconds_count{env=\\\"test\\\",env2=\\\"test\\\",prime=\\\"true\\\",registry=\\\"prometheus\\\"} 2.0\"));\n+                        \"example_prime_number_test_seconds_count{env=\\\"test\\\",env2=\\\"test\\\",prime=\\\"true\\\",registry=\\\"prometheus\\\"} 2\"));\n     }\n }\n\ndiff --git a/integration-tests/micrometer-prometheus/src/test/java/io/quarkus/it/micrometer/prometheus/PrometheusMetricsRegistryTest.java b/integration-tests/micrometer-prometheus/src/test/java/io/quarkus/it/micrometer/prometheus/PrometheusMetricsRegistryTest.java\nindex 021b90ad84dbd..909ac8d5fb4e0 100644\n--- a/integration-tests/micrometer-prometheus/src/test/java/io/quarkus/it/micrometer/prometheus/PrometheusMetricsRegistryTest.java\n+++ b/integration-tests/micrometer-prometheus/src/test/java/io/quarkus/it/micrometer/prometheus/PrometheusMetricsRegistryTest.java\n@@ -1,5 +1,6 @@\n package io.quarkus.it.micrometer.prometheus;\n \n+import static io.quarkus.micrometer.runtime.export.handlers.PrometheusHandler.CONTENT_TYPE_004;\n import static io.restassured.RestAssured.given;\n import static io.restassured.RestAssured.when;\n import static org.hamcrest.CoreMatchers.containsString;\n@@ -10,7 +11,6 @@\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.TestMethodOrder;\n \n-import io.prometheus.client.exporter.common.TextFormat;\n import io.quarkus.test.junit.QuarkusTest;\n import io.restassured.RestAssured;\n \n@@ -106,7 +106,7 @@ void testTemplatedPathOnSubResource() {\n     @Test\n     @Order(20)\n     void testPrometheusScrapeEndpointTextPlain() {\n-        RestAssured.given().header(\"Accept\", TextFormat.CONTENT_TYPE_004)\n+        RestAssured.given().header(\"Accept\", CONTENT_TYPE_004)\n                 .when().get(\"/q/metrics\")\n                 .then().statusCode(200)\n \n@@ -146,57 +146,55 @@ void testPrometheusScrapeEndpointTextPlain() {\n \n                 // Verify Hibernate Metrics\n                 .body(containsString(\n-                        \"hibernate_sessions_open_total{entityManagerFactory=\\\"<default>\\\",env=\\\"test\\\",env2=\\\"test\\\",registry=\\\"prometheus\\\",} 2.0\"))\n+                        \"hibernate_sessions_open_total{entityManagerFactory=\\\"<default>\\\",env=\\\"test\\\",env2=\\\"test\\\",registry=\\\"prometheus\\\"} 2.0\"))\n                 .body(containsString(\n-                        \"hibernate_sessions_closed_total{entityManagerFactory=\\\"<default>\\\",env=\\\"test\\\",env2=\\\"test\\\",registry=\\\"prometheus\\\",} 2.0\"))\n+                        \"hibernate_sessions_closed_total{entityManagerFactory=\\\"<default>\\\",env=\\\"test\\\",env2=\\\"test\\\",registry=\\\"prometheus\\\"} 2.0\"))\n                 .body(containsString(\n-                        \"hibernate_connections_obtained_total{entityManagerFactory=\\\"<default>\\\",env=\\\"test\\\",env2=\\\"test\\\",registry=\\\"prometheus\\\",}\"))\n+                        \"hibernate_connections_obtained_total{entityManagerFactory=\\\"<default>\\\",env=\\\"test\\\",env2=\\\"test\\\",registry=\\\"prometheus\\\"}\"))\n                 .body(containsString(\n-                        \"hibernate_entities_inserts_total{entityManagerFactory=\\\"<default>\\\",env=\\\"test\\\",env2=\\\"test\\\",registry=\\\"prometheus\\\",} 3.0\"))\n+                        \"hibernate_entities_inserts_total{entityManagerFactory=\\\"<default>\\\",env=\\\"test\\\",env2=\\\"test\\\",registry=\\\"prometheus\\\"} 3.0\"))\n                 .body(containsString(\n-                        \"hibernate_flushes_total{entityManagerFactory=\\\"<default>\\\",env=\\\"test\\\",env2=\\\"test\\\",registry=\\\"prometheus\\\",} 1.0\"))\n+                        \"hibernate_flushes_total{entityManagerFactory=\\\"<default>\\\",env=\\\"test\\\",env2=\\\"test\\\",registry=\\\"prometheus\\\"} 1.0\"))\n \n                 // Annotated counters\n                 .body(not(containsString(\"metric_none\")))\n                 .body(containsString(\n-                        \"metric_all_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"none\\\",extra=\\\"tag\\\",fail=\\\"false\\\",method=\\\"countAllInvocations\\\",registry=\\\"prometheus\\\",result=\\\"success\\\",} 1.0\"))\n+                        \"metric_all_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"none\\\",extra=\\\"tag\\\",fail=\\\"false\\\",method=\\\"countAllInvocations\\\",registry=\\\"prometheus\\\",result=\\\"success\\\"} 1.0\"))\n                 .body(containsString(\n-                        \"metric_all_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"NullPointerException\\\",extra=\\\"tag\\\",fail=\\\"true\\\",method=\\\"countAllInvocations\\\",registry=\\\"prometheus\\\",result=\\\"failure\\\",} 1.0\"))\n+                        \"metric_all_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"NullPointerException\\\",extra=\\\"tag\\\",fail=\\\"true\\\",method=\\\"countAllInvocations\\\",registry=\\\"prometheus\\\",result=\\\"failure\\\"} 1.0\"))\n                 .body(containsString(\n-                        \"method_counted_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"NullPointerException\\\",fail=\\\"prefix true\\\",method=\\\"emptyMetricName\\\",registry=\\\"prometheus\\\",result=\\\"failure\\\",} 1.0\"))\n+                        \"method_counted_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"NullPointerException\\\",fail=\\\"prefix true\\\",method=\\\"emptyMetricName\\\",registry=\\\"prometheus\\\",result=\\\"failure\\\"} 1.0\"))\n                 .body(containsString(\n-                        \"method_counted_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"none\\\",fail=\\\"prefix false\\\",method=\\\"emptyMetricName\\\",registry=\\\"prometheus\\\",result=\\\"success\\\",} 1.0\"))\n+                        \"method_counted_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"none\\\",fail=\\\"prefix false\\\",method=\\\"emptyMetricName\\\",registry=\\\"prometheus\\\",result=\\\"success\\\"} 1.0\"))\n                 .body(not(containsString(\"async_none\")))\n                 .body(containsString(\n-                        \"async_all_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",do_fail_call=\\\"true\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"NullPointerException\\\",extra=\\\"tag\\\",method=\\\"countAllAsyncInvocations\\\",registry=\\\"prometheus\\\",result=\\\"failure\\\",} 1.0\"))\n+                        \"async_all_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",do_fail_call=\\\"true\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"NullPointerException\\\",extra=\\\"tag\\\",method=\\\"countAllAsyncInvocations\\\",registry=\\\"prometheus\\\",result=\\\"failure\\\"} 1.0\"))\n                 .body(containsString(\n-                        \"async_all_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",do_fail_call=\\\"false\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"none\\\",extra=\\\"tag\\\",method=\\\"countAllAsyncInvocations\\\",registry=\\\"prometheus\\\",result=\\\"success\\\",} 1.0\"))\n+                        \"async_all_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",do_fail_call=\\\"false\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"none\\\",extra=\\\"tag\\\",method=\\\"countAllAsyncInvocations\\\",registry=\\\"prometheus\\\",result=\\\"success\\\"} 1.0\"))\n                 .body(containsString(\n-                        \"method_counted_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"NullPointerException\\\",fail=\\\"42\\\",method=\\\"emptyAsyncMetricName\\\",registry=\\\"prometheus\\\",result=\\\"failure\\\",} 1.0\"))\n+                        \"method_counted_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"NullPointerException\\\",fail=\\\"42\\\",method=\\\"emptyAsyncMetricName\\\",registry=\\\"prometheus\\\",result=\\\"failure\\\"} 1.0\"))\n                 .body(containsString(\n-                        \"method_counted_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"none\\\",fail=\\\"42\\\",method=\\\"emptyAsyncMetricName\\\",registry=\\\"prometheus\\\",result=\\\"success\\\",} 1.0\"))\n+                        \"method_counted_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"none\\\",fail=\\\"42\\\",method=\\\"emptyAsyncMetricName\\\",registry=\\\"prometheus\\\",result=\\\"success\\\"} 1.0\"))\n \n                 // Annotated Timers\n                 .body(containsString(\n-                        \"call_seconds_count{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"NullPointerException\\\",extra=\\\"tag\\\",method=\\\"call\\\",registry=\\\"prometheus\\\",} 1.0\"))\n+                        \"call_seconds_count{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"NullPointerException\\\",extra=\\\"tag\\\",method=\\\"call\\\",registry=\\\"prometheus\\\"} 1\"))\n                 .body(containsString(\n-                        \"call_seconds_count{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"none\\\",extra=\\\"tag\\\",method=\\\"call\\\",registry=\\\"prometheus\\\",}\"))\n+                        \"call_seconds_count{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"none\\\",extra=\\\"tag\\\",method=\\\"call\\\",registry=\\\"prometheus\\\"}\"))\n                 .body(containsString(\n-                        \"async_call_seconds_count{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"NullPointerException\\\",extra=\\\"tag\\\",method=\\\"asyncCall\\\",registry=\\\"prometheus\\\",} 1.0\"))\n+                        \"async_call_seconds_count{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"NullPointerException\\\",extra=\\\"tag\\\",method=\\\"asyncCall\\\",registry=\\\"prometheus\\\"} 1\"))\n                 .body(containsString(\n-                        \"async_call_seconds_count{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"none\\\",extra=\\\"tag\\\",method=\\\"asyncCall\\\",registry=\\\"prometheus\\\",} 1.0\"))\n+                        \"async_call_seconds_count{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"none\\\",extra=\\\"tag\\\",method=\\\"asyncCall\\\",registry=\\\"prometheus\\\"} 1\"))\n                 .body(containsString(\n-                        \"longCall_seconds_active_count{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",extra=\\\"tag\\\",method=\\\"longCall\\\",registry=\\\"prometheus\\\",}\"))\n+                        \"longCall_seconds_count{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",extra=\\\"tag\\\",method=\\\"longCall\\\",registry=\\\"prometheus\\\"}\"))\n                 .body(containsString(\n-                        \"async_longCall_seconds_duration_sum{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",extra=\\\"tag\\\",method=\\\"longAsyncCall\\\",registry=\\\"prometheus\\\",} 0.0\"))\n+                        \"async_longCall_seconds_sum{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",extra=\\\"tag\\\",method=\\\"longAsyncCall\\\",registry=\\\"prometheus\\\"} 0.0\"))\n \n                 // Configured median, 95th percentile and histogram buckets\n                 .body(containsString(\n-                        \"prime_number_test_seconds{env=\\\"test\\\",env2=\\\"test\\\",registry=\\\"prometheus\\\",quantile=\\\"0.5\\\",}\"))\n-                .body(containsString(\n-                        \"prime_number_test_seconds{env=\\\"test\\\",env2=\\\"test\\\",registry=\\\"prometheus\\\",quantile=\\\"0.95\\\",}\"))\n+                        \"prime_number_test_seconds{env=\\\"test\\\",env2=\\\"test\\\",registry=\\\"prometheus\\\",quantile=\\\"0.5\\\"}\"))\n                 .body(containsString(\n-                        \"prime_number_test_seconds_bucket{env=\\\"test\\\",env2=\\\"test\\\",registry=\\\"prometheus\\\",le=\\\"0.001\\\",}\"))\n+                        \"prime_number_test_seconds{env=\\\"test\\\",env2=\\\"test\\\",registry=\\\"prometheus\\\",quantile=\\\"0.95\\\"}\"))\n \n                 // this was defined by a tag to a non-matching registry, and should not be found\n                 .body(not(containsString(\"class-should-not-match\")))\n@@ -207,8 +205,8 @@ void testPrometheusScrapeEndpointTextPlain() {\n \n     @Test\n     @Order(20)\n-    void testPrometheusScrapeEndpointOpenMetrics() {\n-        RestAssured.given().header(\"Accept\", TextFormat.CONTENT_TYPE_OPENMETRICS_100)\n+    void testPrometheusScrapeEndpointOpenMetricsCompatibility() {\n+        RestAssured.given().header(\"Accept\", \"application/openmetrics-text; version=1.0.0; charset=utf-8\")\n                 .when().get(\"/q/metrics\")\n                 .then().statusCode(200)\n \n@@ -250,12 +248,11 @@ void testPrometheusScrapeEndpointOpenMetrics() {\n \n                 // Annotated counters\n                 .body(not(containsString(\"metric_none\")))\n-                .body(containsString(\n-                        \"metric_all_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"none\\\",extra=\\\"tag\\\",fail=\\\"false\\\",method=\\\"countAllInvocations\\\",registry=\\\"prometheus\\\",result=\\\"success\\\"} 1.0 # {span_id=\"))\n+                // No OTel, no span\n+                .body(not(containsString(\n+                        \"metric_all_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"none\\\",extra=\\\"tag\\\",fail=\\\"false\\\",method=\\\"countAllInvocations\\\",registry=\\\"prometheus\\\",result=\\\"success\\\"} 1.0 # {span_id=\")))\n                 .body(containsString(\n                         \"metric_all_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"NullPointerException\\\",extra=\\\"tag\\\",fail=\\\"true\\\",method=\\\"countAllInvocations\\\",registry=\\\"prometheus\\\",result=\\\"failure\\\"} 1.0\"))\n-                .body(containsString(\n-                        \"method_counted_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"NullPointerException\\\",fail=\\\"prefix true\\\",method=\\\"emptyMetricName\\\",registry=\\\"prometheus\\\",result=\\\"failure\\\"} 1.0 # {span_id=\"))\n                 .body(containsString(\n                         \"method_counted_total{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"none\\\",fail=\\\"prefix false\\\",method=\\\"emptyMetricName\\\",registry=\\\"prometheus\\\",result=\\\"success\\\"} 1.0\"))\n                 .body(not(containsString(\"async_none\")))\n@@ -270,25 +267,23 @@ void testPrometheusScrapeEndpointOpenMetrics() {\n \n                 // Annotated Timers\n                 .body(containsString(\n-                        \"call_seconds_count{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"NullPointerException\\\",extra=\\\"tag\\\",method=\\\"call\\\",registry=\\\"prometheus\\\"} 1.0\"))\n+                        \"call_seconds_count{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"NullPointerException\\\",extra=\\\"tag\\\",method=\\\"call\\\",registry=\\\"prometheus\\\"} 1\"))\n                 .body(containsString(\n                         \"call_seconds_count{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"none\\\",extra=\\\"tag\\\",method=\\\"call\\\",registry=\\\"prometheus\\\"}\"))\n                 .body(containsString(\n-                        \"async_call_seconds_count{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"NullPointerException\\\",extra=\\\"tag\\\",method=\\\"asyncCall\\\",registry=\\\"prometheus\\\"} 1.0\"))\n+                        \"async_call_seconds_count{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"NullPointerException\\\",extra=\\\"tag\\\",method=\\\"asyncCall\\\",registry=\\\"prometheus\\\"} 1\"))\n                 .body(containsString(\n-                        \"async_call_seconds_count{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"none\\\",extra=\\\"tag\\\",method=\\\"asyncCall\\\",registry=\\\"prometheus\\\"} 1.0\"))\n+                        \"async_call_seconds_count{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",exception=\\\"none\\\",extra=\\\"tag\\\",method=\\\"asyncCall\\\",registry=\\\"prometheus\\\"} 1\"))\n                 .body(containsString(\n-                        \"longCall_seconds_active_count{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",extra=\\\"tag\\\",method=\\\"longCall\\\",registry=\\\"prometheus\\\"}\"))\n+                        \"longCall_seconds_count{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",extra=\\\"tag\\\",method=\\\"longCall\\\",registry=\\\"prometheus\\\"}\"))\n                 .body(containsString(\n-                        \"async_longCall_seconds_duration_sum{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",extra=\\\"tag\\\",method=\\\"longAsyncCall\\\",registry=\\\"prometheus\\\"} 0.0\"))\n+                        \"async_longCall_seconds_sum{class=\\\"io.quarkus.it.micrometer.prometheus.AnnotatedResource\\\",env=\\\"test\\\",env2=\\\"test\\\",extra=\\\"tag\\\",method=\\\"longAsyncCall\\\",registry=\\\"prometheus\\\"} 0.0\"))\n \n                 // Configured median, 95th percentile and histogram buckets\n                 .body(containsString(\n                         \"prime_number_test_seconds{env=\\\"test\\\",env2=\\\"test\\\",registry=\\\"prometheus\\\",quantile=\\\"0.5\\\"}\"))\n                 .body(containsString(\n                         \"prime_number_test_seconds{env=\\\"test\\\",env2=\\\"test\\\",registry=\\\"prometheus\\\",quantile=\\\"0.95\\\"}\"))\n-                .body(containsString(\n-                        \"prime_number_test_seconds_bucket{env=\\\"test\\\",env2=\\\"test\\\",registry=\\\"prometheus\\\",le=\\\"0.001\\\"}\"))\n \n                 // this was defined by a tag to a non-matching registry, and should not be found\n                 .body(not(containsString(\"class-should-not-match\")))\n\ndiff --git a/integration-tests/pom.xml b/integration-tests/pom.xml\nindex bcd41ab980fe2..2e9177170acff 100644\n--- a/integration-tests/pom.xml\n+++ b/integration-tests/pom.xml\n@@ -360,6 +360,7 @@\n                 <module>elasticsearch-java-client</module>\n                 <module>micrometer-mp-metrics</module>\n                 <module>micrometer-prometheus</module>\n+                <module>micrometer-prometheus-opentelemetry</module>\n                 <module>micrometer-security</module>\n                 <module>micrometer-opentelemetry</module>\n                 <module>opentelemetry</module>\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47976",
    "pr_id": 47976,
    "issue_id": 22556,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Inconsistent datasource metrics configuration between MP Metrics and Micrometer\n### Describe the bug\n\nThe [datasource documentation](https://quarkus.io/guides/datasource#datasource-metrics) says\r\n> By default, this metric collection mechanism gets turned on for all data sources if a metrics extension is present and metrics for the Agroal extension are enabled.\r\n\r\nand the [all config options documentation](https://quarkus.io/guides/all-config) indicate that\r\n> `quarkus.datasource.jdbc.enable-metrics` - If unspecified, collecting metrics will be enabled by default if a metrics extension is active.\r\n\r\nHowever, when using the Micrometer extension `quarkus-micrometer` it is necessary to explicitly set `quarkus.datasource.jdbc.enable-metrics` to `true`, in addition to `quarkus.datasource.metrics.enabled=true`.\r\n\r\nThe reason seems to be that `quarkus-micrometer` does **not** declare to have the `io.quarkus.metrics` capability, the same way that the SmallRye metrics extension `quarkus-smallrye-metrics` [does](https://repo1.maven.org/maven2/io/quarkus/quarkus-smallrye-metrics/2.6.1.Final/quarkus-smallrye-metrics-2.6.1.Final.pom).\n\n### Expected behavior\n\nUsing the Micrometer extension `quarkus-micrometer`, Agroal datasource metrics should be collected after setting `quarkus.datasource.metrics.enabled=true`, with `quarkus.datasource.jdbc.enable-metrics` left unset.\n\n### Actual behavior\n\n`quarkus.datasource.jdbc.enable-metrics` needs to be explicitly set to `true`.\n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### GraalVM version (if different from Java)\n\n_No response_\n\n### Quarkus version or git rev\n\n_No response_\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
    "issue_word_count": 258,
    "test_files_count": 1,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "docs/src/main/asciidoc/opentelemetry-tracing.adoc",
      "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceJdbcBuildTimeConfig.java",
      "extensions/opentelemetry/deployment/pom.xml",
      "extensions/opentelemetry/runtime/pom.xml",
      "integration-tests/opentelemetry-jdbc-instrumentation/pom.xml"
    ],
    "pr_changed_test_files": [
      "integration-tests/opentelemetry-jdbc-instrumentation/pom.xml"
    ],
    "base_commit": "8fd5b73d8100b37db9bcd495a3e5f798bc770bba",
    "head_commit": "a9ddc59b88a4bbc508a7d258df58a2daa9a34fff",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47976",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47976",
    "dockerfile": "",
    "pr_merged_at": "2025-05-27T15:38:17.000Z",
    "patch": "diff --git a/docs/src/main/asciidoc/opentelemetry-tracing.adoc b/docs/src/main/asciidoc/opentelemetry-tracing.adoc\nindex d849276af36ef..fcd0681ac435b 100644\n--- a/docs/src/main/asciidoc/opentelemetry-tracing.adoc\n+++ b/docs/src/main/asciidoc/opentelemetry-tracing.adoc\n@@ -194,24 +194,9 @@ Hit `CTRL+C` or type `q` to stop the application.\n \n === JDBC\n \n-The https://github.com/open-telemetry/opentelemetry-java-instrumentation/tree/main/instrumentation/jdbc/library[JDBC instrumentation] will add a span for each JDBC queries done by your application, to enable it, add the following dependency to your build file:\n+The https://github.com/open-telemetry/opentelemetry-java-instrumentation/tree/main/instrumentation/jdbc/library[JDBC instrumentation] bundled with this extension will add a span for each JDBC queries done by your application.\n \n-[source,xml,role=\"primary asciidoc-tabs-target-sync-cli asciidoc-tabs-target-sync-maven\"]\n-.pom.xml\n-----\n-<dependency>\n-    <groupId>io.opentelemetry.instrumentation</groupId>\n-    <artifactId>opentelemetry-jdbc</artifactId>\n-</dependency>\n-----\n-\n-[source,gradle,role=\"secondary asciidoc-tabs-target-sync-gradle\"]\n-.build.gradle\n-----\n-implementation(\"io.opentelemetry.instrumentation:opentelemetry-jdbc\")\n-----\n-\n-As it uses a dedicated JDBC datasource wrapper, you must enable telemetry for your datasource:\n+As it uses a dedicated JDBC datasource wrapper, you must enable telemetry for your datasource with the `quarkus.datasource.jdbc.telemetry` property, as in the following example:\n \n [source, properties]\n ----\n\ndiff --git a/extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceJdbcBuildTimeConfig.java b/extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceJdbcBuildTimeConfig.java\nindex a087640ed152a..4b2afe8fe427f 100644\n--- a/extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceJdbcBuildTimeConfig.java\n+++ b/extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceJdbcBuildTimeConfig.java\n@@ -34,7 +34,12 @@ public interface DataSourceJdbcBuildTimeConfig {\n     /**\n      * Enable datasource metrics collection. If unspecified, collecting metrics will be enabled by default if\n      * a metrics extension is active.\n+     * <p>\n+     * Deprecated. This was used by the now deprecated quarkus-smallrye-metrics and will be removed soon.\n+     * <p>\n+     * Please use quarkus-micrometer and the quarkus.datasource.metrics.enabled property\n      */\n+    @Deprecated(forRemoval = true)\n     Optional<Boolean> enableMetrics();\n \n     /**\n\ndiff --git a/extensions/opentelemetry/deployment/pom.xml b/extensions/opentelemetry/deployment/pom.xml\nindex 4da9a8a32bb4a..e27b9fb8bb5b1 100644\n--- a/extensions/opentelemetry/deployment/pom.xml\n+++ b/extensions/opentelemetry/deployment/pom.xml\n@@ -130,11 +130,6 @@\n             <artifactId>quarkus-agroal-deployment</artifactId>\n             <scope>test</scope>\n         </dependency>\n-        <dependency>\n-            <groupId>io.opentelemetry.instrumentation</groupId>\n-            <artifactId>opentelemetry-jdbc</artifactId>\n-            <scope>test</scope>\n-        </dependency>\n         <dependency>\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-jdbc-h2-deployment</artifactId>\n\ndiff --git a/extensions/opentelemetry/runtime/pom.xml b/extensions/opentelemetry/runtime/pom.xml\nindex bcda8e7ab514b..781c11c807124 100644\n--- a/extensions/opentelemetry/runtime/pom.xml\n+++ b/extensions/opentelemetry/runtime/pom.xml\n@@ -198,6 +198,10 @@\n                 </exclusion>\n             </exclusions>\n         </dependency>\n+        <dependency>\n+            <groupId>io.opentelemetry.instrumentation</groupId>\n+            <artifactId>opentelemetry-jdbc</artifactId>\n+        </dependency>\n \n         <!-- Test Dependencies -->\n         <dependency>\n",
    "test_patch": "diff --git a/integration-tests/opentelemetry-jdbc-instrumentation/pom.xml b/integration-tests/opentelemetry-jdbc-instrumentation/pom.xml\nindex 1e43a0fcc8a6c..af9ae784f3624 100644\n--- a/integration-tests/opentelemetry-jdbc-instrumentation/pom.xml\n+++ b/integration-tests/opentelemetry-jdbc-instrumentation/pom.xml\n@@ -32,10 +32,6 @@\n         </dependency>\n \n         <!-- JDBC instrumentation -->\n-        <dependency>\n-            <groupId>io.opentelemetry.instrumentation</groupId>\n-            <artifactId>opentelemetry-jdbc</artifactId>\n-        </dependency>\n         <dependency>\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-jdbc-oracle</artifactId>\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47933",
    "pr_id": 47933,
    "issue_id": 47915,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Security: `quarkus.security.auth.enabled-in-dev-mode=false` breaks SwaggerUI\n### Describe the bug\n\nAccording to this guide: https://quarkus.io/guides/security-customization#disabling-authorization\n\nIf you use `quarkus.security.auth.enabled-in-dev-mode=false` which disables security it breaks SwaggerUI can you can't hit anything.\n\nIf I hit my REST Service directly it works without Authentication the 404 is the proper Not found for this query so it is not a 401 or 403 which is correct.\n\n![Image](https://github.com/user-attachments/assets/0e0f5d6a-d787-4454-9f9b-470cc3c7a38c)\n\nBut if you do it through Swagger you get an error in JavaScript and it just spins on the Execute\n\n![Image](https://github.com/user-attachments/assets/4c55a09e-18c6-4e25-95c7-eef5f946f9cb)\n\n### Expected behavior\n\nSetting `quarkus.security.auth.enabled-in-dev-mode=false` should allow SwaggerUI to work.\n\n### Actual behavior\n\nIt does not\n\n### How to Reproduce?\n\nSimply set `quarkus.security.auth.enabled-in-dev-mode=false` on any Secure SwaggerUI that is using `@RolesAllowed` and you will see the same behavior.\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\nOpenJDK Runtime Environment Temurin-21.0.4+7 (build 21.0.4+7-LTS)\n\n### Quarkus version or git rev\n\n3.22.3\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nApache Maven 3.9.9 (8e8579a9e76f7d015ee5ec7bfcdc97d260186937)\n\n### Additional information\n\ncc @MikeEdgar ",
    "issue_word_count": 228,
    "test_files_count": 2,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "extensions/smallrye-openapi/deployment/src/main/java/io/quarkus/smallrye/openapi/deployment/SmallRyeOpenApiProcessor.java",
      "extensions/smallrye-openapi/deployment/src/test/java/io/quarkus/smallrye/openapi/test/jaxrs/AutoSecurityDisabledTestCase.java",
      "extensions/smallrye-openapi/deployment/src/test/java/io/quarkus/smallrye/openapi/test/jaxrs/OpenApiWithSecurity.java"
    ],
    "pr_changed_test_files": [
      "extensions/smallrye-openapi/deployment/src/test/java/io/quarkus/smallrye/openapi/test/jaxrs/AutoSecurityDisabledTestCase.java",
      "extensions/smallrye-openapi/deployment/src/test/java/io/quarkus/smallrye/openapi/test/jaxrs/OpenApiWithSecurity.java"
    ],
    "base_commit": "5d9e5a65c77959093e90ead443f657771a24f060",
    "head_commit": "59bf81c86a9090c61804b7a0b35151e5473a175d",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47933",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47933",
    "dockerfile": "",
    "pr_merged_at": "2025-05-20T09:12:46.000Z",
    "patch": "diff --git a/extensions/smallrye-openapi/deployment/src/main/java/io/quarkus/smallrye/openapi/deployment/SmallRyeOpenApiProcessor.java b/extensions/smallrye-openapi/deployment/src/main/java/io/quarkus/smallrye/openapi/deployment/SmallRyeOpenApiProcessor.java\nindex 5bf6523e865ad..6d8caad2bed05 100644\n--- a/extensions/smallrye-openapi/deployment/src/main/java/io/quarkus/smallrye/openapi/deployment/SmallRyeOpenApiProcessor.java\n+++ b/extensions/smallrye-openapi/deployment/src/main/java/io/quarkus/smallrye/openapi/deployment/SmallRyeOpenApiProcessor.java\n@@ -206,13 +206,14 @@ void registerAutoSecurityFilter(BuildProducer<SyntheticBeanBuildItem> syntheticB\n             SmallRyeOpenApiConfig openApiConfig,\n             OpenApiFilteredIndexViewBuildItem apiFilteredIndexViewBuildItem,\n             List<SecurityInformationBuildItem> securityInformationBuildItems,\n-            OpenApiRecorder recorder) {\n+            OpenApiRecorder recorder,\n+            LaunchModeBuildItem launchMode) {\n         AutoSecurityFilter autoSecurityFilter = null;\n \n-        if (openApiConfig.autoAddSecurity()) {\n+        if (securityConfig(launchMode, openApiConfig::autoAddSecurity)) {\n             autoSecurityFilter = getAutoSecurityFilter(securityInformationBuildItems, openApiConfig)\n                     .filter(securityFilter -> autoSecurityRuntimeEnabled(securityFilter,\n-                            () -> hasAutoEndpointSecurity(apiFilteredIndexViewBuildItem, openApiConfig)))\n+                            () -> hasAutoEndpointSecurity(apiFilteredIndexViewBuildItem, launchMode, openApiConfig)))\n                     .orElse(null);\n         }\n \n@@ -339,6 +340,21 @@ void handler(LaunchModeBuildItem launch,\n         }\n     }\n \n+    private boolean securityConfig(\n+            LaunchModeBuildItem launchMode,\n+            Supplier<Boolean> securitySetting) {\n+\n+        if (launchMode.getLaunchMode().equals(LaunchMode.DEVELOPMENT)) {\n+            Config config = ConfigProvider.getConfig();\n+            boolean authEnabled = config.getValue(\"quarkus.security.auth.enabled-in-dev-mode\", Boolean.class);\n+            if (authEnabled)\n+                return securitySetting.get();\n+            return false;\n+        } else {\n+            return securitySetting.get();\n+        }\n+    }\n+\n     private String getManagementRoot(LaunchModeBuildItem launch,\n             NonApplicationRootPathBuildItem nonApplicationRootPathBuildItem,\n             SmallRyeOpenApiConfig openApiConfig,\n@@ -399,14 +415,14 @@ void addAutoFilters(BuildProducer<AddToOpenAPIDefinitionBuildItem> addToOpenAPID\n             addToOpenAPIDefinitionProducer\n                     .produce(new AddToOpenAPIDefinitionBuildItem(\n                             new SecurityConfigFilter(config)));\n-        } else if (config.autoAddSecurity()) {\n+        } else if (securityConfig(launchModeBuildItem, config::autoAddSecurity)) {\n             getAutoSecurityFilter(securityInformationBuildItems, config)\n                     .map(AddToOpenAPIDefinitionBuildItem::new)\n                     .ifPresent(addToOpenAPIDefinitionProducer::produce);\n         }\n \n         // Add operation filter to add tags/descriptions/security requirements\n-        OASFilter operationFilter = getOperationFilter(apiFilteredIndexViewBuildItem, config);\n+        OASFilter operationFilter = getOperationFilter(apiFilteredIndexViewBuildItem, launchModeBuildItem, config);\n \n         if (operationFilter != null) {\n             addToOpenAPIDefinitionProducer.produce(new AddToOpenAPIDefinitionBuildItem(operationFilter));\n@@ -517,9 +533,10 @@ private Optional<AutoSecurityFilter> getAutoSecurityFilter(List<SecurityInformat\n \n     private boolean hasAutoEndpointSecurity(\n             OpenApiFilteredIndexViewBuildItem indexViewBuildItem,\n+            LaunchModeBuildItem launchMode,\n             SmallRyeOpenApiConfig config) {\n \n-        if (config.autoAddSecurityRequirement()) {\n+        if (securityConfig(launchMode, config::autoAddSecurityRequirement)) {\n             Map<String, List<String>> rolesAllowedMethods = Collections.emptyMap();\n             List<String> authenticatedMethods = Collections.emptyList();\n \n@@ -538,6 +555,7 @@ private boolean hasAutoEndpointSecurity(\n     }\n \n     private OASFilter getOperationFilter(OpenApiFilteredIndexViewBuildItem indexViewBuildItem,\n+            LaunchModeBuildItem launchMode,\n             SmallRyeOpenApiConfig config) {\n \n         Map<String, ClassAndMethod> classNamesMethods = Collections.emptyMap();\n@@ -548,7 +566,7 @@ private OASFilter getOperationFilter(OpenApiFilteredIndexViewBuildItem indexView\n             classNamesMethods = getClassNamesMethodReferences(indexViewBuildItem);\n         }\n \n-        if (config.autoAddSecurityRequirement()) {\n+        if (securityConfig(launchMode, config::autoAddSecurityRequirement)) {\n             rolesAllowedMethods = getRolesAllowedMethodReferences(indexViewBuildItem);\n \n             for (String methodRef : getPermissionsAllowedMethodReferences(indexViewBuildItem)) {\n",
    "test_patch": "diff --git a/extensions/smallrye-openapi/deployment/src/test/java/io/quarkus/smallrye/openapi/test/jaxrs/AutoSecurityDisabledTestCase.java b/extensions/smallrye-openapi/deployment/src/test/java/io/quarkus/smallrye/openapi/test/jaxrs/AutoSecurityDisabledTestCase.java\nnew file mode 100644\nindex 0000000000000..1d99b0af6037e\n--- /dev/null\n+++ b/extensions/smallrye-openapi/deployment/src/test/java/io/quarkus/smallrye/openapi/test/jaxrs/AutoSecurityDisabledTestCase.java\n@@ -0,0 +1,53 @@\n+package io.quarkus.smallrye.openapi.test.jaxrs;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.nullValue;\n+\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusDevModeTest;\n+import io.restassured.RestAssured;\n+\n+public class AutoSecurityDisabledTestCase {\n+\n+    @RegisterExtension\n+    final static QuarkusDevModeTest TEST = new QuarkusDevModeTest()\n+            .withApplicationRoot((jar) -> jar\n+                    .addClasses(OpenApiWithSecurity.class)\n+                    .addAsResource(\n+                            new StringAsset(\"quarkus.security.auth.enabled-in-dev-mode=false\"),\n+                            \"application.properties\"));\n+\n+    @Test\n+    void testAutoSecurityRequirement() {\n+\n+        RestAssured.given()\n+                .header(\"Accept\", \"application/json\")\n+                .when()\n+                .get(\"/q/openapi\")\n+                .then()\n+                .log().body()\n+                .and()\n+                // Make sure `security` is NOT present\n+                .body(\"paths.'/openApiWithSecurity/test-security/annotated'.get.security\", nullValue())\n+                .body(\"paths.'/openApiWithSecurity/test-security/annotated2'.get.security\", nullValue())\n+                .body(\"paths.'/openApiWithSecurity/test-security/naked'.get.security\", nullValue())\n+                // Make sure only 200 response is present\n+                .body(\"paths.'/openApiWithSecurity/test-security/annotated'.get.responses.size()\", equalTo(1))\n+                .body(\"paths.'/openApiWithSecurity/test-security/annotated'.get.responses['200']\", notNullValue())\n+                .body(\"paths.'/openApiWithSecurity/test-security/annotated'.get.responses['401']\", nullValue())\n+                .body(\"paths.'/openApiWithSecurity/test-security/annotated'.get.responses['403']\", nullValue())\n+                .body(\"paths.'/openApiWithSecurity/test-security/annotated2'.get.responses.size()\", equalTo(1))\n+                .body(\"paths.'/openApiWithSecurity/test-security/annotated2'.get.responses['200']\", notNullValue())\n+                .body(\"paths.'/openApiWithSecurity/test-security/annotated2'.get.responses['401']\", nullValue())\n+                .body(\"paths.'/openApiWithSecurity/test-security/annotated2'.get.responses['403']\", nullValue())\n+                .body(\"paths.'/openApiWithSecurity/test-security/naked'.get.responses.size()\", equalTo(1))\n+                .body(\"paths.'/openApiWithSecurity/test-security/naked'.get.responses['200']\", notNullValue())\n+                .body(\"paths.'/openApiWithSecurity/test-security/naked'.get.responses['401']\", nullValue())\n+                .body(\"paths.'/openApiWithSecurity/test-security/naked'.get.responses['403']\", nullValue());\n+    }\n+\n+}\n\ndiff --git a/extensions/smallrye-openapi/deployment/src/test/java/io/quarkus/smallrye/openapi/test/jaxrs/OpenApiWithSecurity.java b/extensions/smallrye-openapi/deployment/src/test/java/io/quarkus/smallrye/openapi/test/jaxrs/OpenApiWithSecurity.java\nnew file mode 100644\nindex 0000000000000..ef59c1cdb8af8\n--- /dev/null\n+++ b/extensions/smallrye-openapi/deployment/src/test/java/io/quarkus/smallrye/openapi/test/jaxrs/OpenApiWithSecurity.java\n@@ -0,0 +1,39 @@\n+package io.quarkus.smallrye.openapi.test.jaxrs;\n+\n+import jakarta.annotation.security.RolesAllowed;\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+\n+import io.quarkus.security.Authenticated;\n+\n+@Path(\"/openApiWithSecurity\")\n+public class OpenApiWithSecurity {\n+\n+    @GET\n+    @Path(\"/test-security/naked\")\n+    @Authenticated\n+    public String secureEndpointWithoutSecurityAnnotation() {\n+        return \"secret\";\n+    }\n+\n+    @GET\n+    @Path(\"/test-security/annotated\")\n+    @RolesAllowed(\"admin\")\n+    public String secureEndpointWithRolesAllowedAnnotation() {\n+        return \"secret\";\n+    }\n+\n+    @GET\n+    @Path(\"/test-security/annotated2\")\n+    @RolesAllowed(\"user\")\n+    public String secureEndpointWithRolesAllowed2Annotation() {\n+        return \"secret\";\n+    }\n+\n+    @GET\n+    @Path(\"/test-security/public\")\n+    public String publicEndpoint() {\n+        return \"boo\";\n+    }\n+\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47910",
    "pr_id": 47910,
    "issue_id": 47353,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Swapping Parent with Hibernate entity fails\n### Describe the bug\n\nI have a `Parent` and a child `Entity`. The Parent has the following relationship:\n```\n@OneToMany(orphanRemoval = true, cascade = CascadeType.ALL)\nprivate List<Child> children;\n```\nNow I create two Parents: Parent A and Parent B where Parent A has one child.\nThen i swap the Child from Parent A to B in one Transaction. This works fine.\nBut when i want to swap the Child back to Parent A I get a duplicate key error like:\n```\n2025-04-14 17:51:38,683 ERROR [org.hib.eng.jdb.spi.SqlExceptionHelper] (main) (conn=12) Duplicate entry '1' for key 'UKqflmxmtp7l47kj96gtnijqty4'\n```\nI don't know what the core issue is but i also tested it with spring boot and there it works fine. Maybe it has something to do with the bytecode enhancement, but i have no idea.\n\n### Expected behavior\n\nSwapping back to the original Parent should work.\n\n### Actual behavior\n\n_No response_\n\n### How to Reproduce?\n\n[QuarkusJpaTestParentSwap.zip](https://github.com/user-attachments/files/19738935/QuarkusJpaTestParentSwap.zip)\nFor the database to retain the values during the tests you need to activate `testcontainers.reuse.enable=true`.\nIn `ParentDtoResourcesTest` i have written som tests.\n\n1. Start `initialiseDb`\n2. Start `swapParentAToParentB`\n3. Start `swapParentBToParentA`\nNow you should get the following error:\n```\n2025-04-14 17:51:38,683 ERROR [org.hib.eng.jdb.spi.SqlExceptionHelper] (main) (conn=12) Duplicate entry '1' for key 'UKqflmxmtp7l47kj96gtnijqty4'\n```\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### Quarkus version or git rev\n\n3.21.2\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
    "issue_word_count": 274,
    "test_files_count": 3,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/config/unsupportedproperties/UnsupportedPropertiesTest.java",
      "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/FastBootHibernatePersistenceProvider.java",
      "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/boot/FastBootMetadataBuilder.java",
      "extensions/hibernate-reactive/deployment/src/test/java/io/quarkus/hibernate/reactive/config/unsupportedproperties/UnsupportedPropertiesTest.java",
      "extensions/hibernate-reactive/deployment/src/test/resources/application.properties",
      "extensions/hibernate-reactive/runtime/src/main/java/io/quarkus/hibernate/reactive/runtime/FastBootHibernateReactivePersistenceProvider.java"
    ],
    "pr_changed_test_files": [
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/config/unsupportedproperties/UnsupportedPropertiesTest.java",
      "extensions/hibernate-reactive/deployment/src/test/java/io/quarkus/hibernate/reactive/config/unsupportedproperties/UnsupportedPropertiesTest.java",
      "extensions/hibernate-reactive/deployment/src/test/resources/application.properties"
    ],
    "base_commit": "4ecfbf90b2021ea5c507b4fada6a05851c0839da",
    "head_commit": "9541608625c92e2e124e1767705e36a6f77c295c",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47910",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47910",
    "dockerfile": "",
    "pr_merged_at": "2025-05-20T08:40:13.000Z",
    "patch": "diff --git a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/FastBootHibernatePersistenceProvider.java b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/FastBootHibernatePersistenceProvider.java\nindex 71e9dcecca82c..6ac5c7549e57e 100644\n--- a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/FastBootHibernatePersistenceProvider.java\n+++ b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/FastBootHibernatePersistenceProvider.java\n@@ -242,18 +242,23 @@ private RuntimeSettings buildRuntimeSettings(String persistenceUnitName, Recorde\n                     persistenceUnitName,\n                     persistenceUnitConfig.unsupportedProperties().keySet());\n         }\n+        Set<String> overriddenProperties = new HashSet<>();\n         for (Map.Entry<String, String> entry : persistenceUnitConfig.unsupportedProperties().entrySet()) {\n             var key = entry.getKey();\n-            if (runtimeSettingsBuilder.get(key) != null) {\n-                log.warnf(\"Persistence-unit [%s] sets property '%s' to a custom value through '%s',\"\n-                        + \" but Quarkus already set that property independently.\"\n-                        + \" The custom value will be ignored.\",\n-                        persistenceUnitName, key,\n-                        HibernateOrmRuntimeConfig.puPropertyKey(persistenceUnitName, \"unsupported-properties.\\\"\" + key + \"\\\"\"));\n-                continue;\n+            var value = runtimeSettingsBuilder.get(key);\n+            if (value != null && !(value instanceof String stringValue && stringValue.isBlank())) {\n+                overriddenProperties.add(key);\n             }\n             runtimeSettingsBuilder.put(entry.getKey(), entry.getValue());\n         }\n+        if (!overriddenProperties.isEmpty()) {\n+            log.warnf(\"Persistence-unit [%s] sets unsupported properties that override Quarkus' own settings.\"\n+                    + \" These properties may break assumptions in Quarkus code and cause malfunctions.\"\n+                    + \" If this override is absolutely necessary, make sure to file a feature request or bug report so that a solution can be implemented in Quarkus.\"\n+                    + \" Unsupported properties that override Quarkus' own settings: %s\",\n+                    persistenceUnitName,\n+                    overriddenProperties);\n+        }\n \n         var databaseOrmCompatibilityVersion = buildTimeSettings.getSource().getDatabaseOrmCompatibilityVersion();\n         var databaseOrmCompatibilitySettings = buildTimeSettings.getDatabaseOrmCompatibilitySettings();\n\ndiff --git a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/boot/FastBootMetadataBuilder.java b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/boot/FastBootMetadataBuilder.java\nindex 003c9c8053f4b..38fb9920b26fc 100644\n--- a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/boot/FastBootMetadataBuilder.java\n+++ b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/boot/FastBootMetadataBuilder.java\n@@ -205,10 +205,9 @@ private BuildTimeSettings createBuildTimeSettings(QuarkusPersistenceUnitDefiniti\n                 .getQuarkusConfigUnsupportedProperties();\n         Map<String, Object> allSettings = new HashMap<>(quarkusConfigSettings);\n \n-        // Ignore properties that were already set by Quarkus;\n-        // we'll log a warning about those on startup.\n+        // We'll log warnings about unsupported properties and overrides on startup.\n         // (see io.quarkus.hibernate.orm.runtime.FastBootHibernatePersistenceProvider.buildRuntimeSettings)\n-        quarkusConfigUnsupportedProperties.forEach(allSettings::putIfAbsent);\n+        allSettings.putAll(quarkusConfigUnsupportedProperties);\n \n         var databaseOrmCompatibilityVersion = puDefinition.getConfig().getDatabaseOrmCompatibilityVersion();\n         Map<String, String> appliedDatabaseOrmCompatibilitySettings = new HashMap<>();\n\ndiff --git a/extensions/hibernate-reactive/runtime/src/main/java/io/quarkus/hibernate/reactive/runtime/FastBootHibernateReactivePersistenceProvider.java b/extensions/hibernate-reactive/runtime/src/main/java/io/quarkus/hibernate/reactive/runtime/FastBootHibernateReactivePersistenceProvider.java\nindex 38d4819695ba8..548d02eaa59c0 100644\n--- a/extensions/hibernate-reactive/runtime/src/main/java/io/quarkus/hibernate/reactive/runtime/FastBootHibernateReactivePersistenceProvider.java\n+++ b/extensions/hibernate-reactive/runtime/src/main/java/io/quarkus/hibernate/reactive/runtime/FastBootHibernateReactivePersistenceProvider.java\n@@ -189,19 +189,23 @@ private EntityManagerFactoryBuilder getEntityManagerFactoryBuilderOrNull(String\n                         persistenceUnitName,\n                         puConfig.unsupportedProperties().keySet());\n             }\n+            Set<String> overriddenProperties = new HashSet<>();\n             for (Map.Entry<String, String> entry : puConfig.unsupportedProperties().entrySet()) {\n                 var key = entry.getKey();\n-                if (runtimeSettingsBuilder.get(key) != null) {\n-                    log.warnf(\"Persistence-unit [%s] sets property '%s' to a custom value through '%s',\"\n-                            + \" but Quarkus already set that property independently.\"\n-                            + \" The custom value will be ignored.\",\n-                            persistenceUnitName, key,\n-                            HibernateOrmRuntimeConfig.puPropertyKey(persistenceUnit.getConfigurationName(),\n-                                    \"unsupported-properties.\\\"\" + key + \"\\\"\"));\n-                    continue;\n+                var value = runtimeSettingsBuilder.get(key);\n+                if (value != null && !(value instanceof String stringValue && stringValue.isBlank())) {\n+                    overriddenProperties.add(key);\n                 }\n                 runtimeSettingsBuilder.put(entry.getKey(), entry.getValue());\n             }\n+            if (!overriddenProperties.isEmpty()) {\n+                log.warnf(\"Persistence-unit [%s] sets unsupported properties that override Quarkus' own settings.\"\n+                        + \" These properties may break assumptions in Quarkus code and cause malfunctions.\"\n+                        + \" If this override is absolutely necessary, make sure to file a feature request or bug report so that a solution can be implemented in Quarkus.\"\n+                        + \" Unsupported properties that override Quarkus' own settings: %s\",\n+                        persistenceUnitName,\n+                        overriddenProperties);\n+            }\n \n             RuntimeSettings runtimeSettings = runtimeSettingsBuilder.build();\n \n",
    "test_patch": "diff --git a/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/config/unsupportedproperties/UnsupportedPropertiesTest.java b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/config/unsupportedproperties/UnsupportedPropertiesTest.java\nindex d5539e8e9a192..d97036d736a0b 100644\n--- a/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/config/unsupportedproperties/UnsupportedPropertiesTest.java\n+++ b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/config/unsupportedproperties/UnsupportedPropertiesTest.java\n@@ -51,16 +51,21 @@ public class UnsupportedPropertiesTest {\n             // This is just to test a property set at build time\n             .overrideConfigKey(\"quarkus.hibernate-orm.unsupported-properties.\\\"hibernate.some.unknown.key.static-and-runtime\\\"\",\n                     \"some-value-1\")\n-            // This is just to test a property set at runtime, which which would not be available during the build\n+            // This is just to test a property set at runtime, which would not be available during the build\n             // (or even during static init with native applications).\n             .overrideRuntimeConfigKey(\n                     \"quarkus.hibernate-orm.unsupported-properties.\\\"hibernate.some.unknown.key.runtime-only\\\"\",\n                     \"some-value-2\")\n-            // This should be ignored with a warning\n+            // This overrides a property set by Quarkus, and thus should trigger an additional warning\n             .overrideConfigKey(\n                     \"quarkus.hibernate-orm.unsupported-properties.\\\"\" + AvailableSettings.JAKARTA_HBM2DDL_DATABASE_ACTION\n                             + \"\\\"\",\n-                    \"drop-and-create\")\n+                    // Deliberately using the Hibernate-native name instead of the JPA one that Quarkus uses\n+                    // This allows us to check the override did happen\n+                    \"create-drop\")\n+            .overrideConfigKey(\n+                    \"quarkus.hibernate-orm.unsupported-properties.\\\"\" + AvailableSettings.ORDER_UPDATES + \"\\\"\",\n+                    \"false\")\n             // Expect warnings on startup\n             .setLogRecordPredicate(record -> FastBootHibernatePersistenceProvider.class.getName().equals(record.getLoggerName())\n                     && record.getLevel().intValue() >= Level.WARNING.intValue())\n@@ -75,17 +80,18 @@ public class UnsupportedPropertiesTest {\n                                 \"Consider using a supported configuration property\",\n                                 \"make sure to file a feature request so that a supported configuration property can be added to Quarkus\")\n                         .contains(AvailableSettings.ORDER_INSERTS, AvailableSettings.JAKARTA_HBM2DDL_DATABASE_ACTION,\n+                                AvailableSettings.ORDER_UPDATES,\n                                 \"hibernate.some.unknown.key.static-and-runtime\", \"hibernate.some.unknown.key.runtime-only\")\n                         // We should not log property values, that could be a security breach for some properties.\n                         .doesNotContain(\"some-value\"));\n                 assertion.element(1).satisfies(record -> assertThat(LOG_FORMATTER.formatMessage(record))\n                         .contains(\n-                                \"Persistence-unit [<default>] sets property '\"\n-                                        + AvailableSettings.JAKARTA_HBM2DDL_DATABASE_ACTION\n-                                        + \"' to a custom value through 'quarkus.hibernate-orm.unsupported-properties.\\\"\"\n-                                        + AvailableSettings.JAKARTA_HBM2DDL_DATABASE_ACTION + \"\\\"'\",\n-                                \"Quarkus already set that property independently\",\n-                                \"The custom value will be ignored\"));\n+                                \"Persistence-unit [<default>] sets unsupported properties that override Quarkus' own settings\",\n+                                \"These properties may break assumptions in Quarkus code and cause malfunctions\",\n+                                \"make sure to file a feature request or bug report so that a solution can be implemented in Quarkus\")\n+                        .contains(AvailableSettings.JAKARTA_HBM2DDL_DATABASE_ACTION, AvailableSettings.ORDER_UPDATES)\n+                        .doesNotContain(AvailableSettings.ORDER_INSERTS, \"hibernate.some.unknown.key.static-and-runtime\",\n+                                \"hibernate.some.unknown.key.runtime-only\"));\n             });\n \n     @Inject\n@@ -106,7 +112,9 @@ public void testPropertiesPropagatedToStaticInit() {\n     @Test\n     public void testPropertiesPropagatedToRuntimeInit() {\n         assertThat(emf.getProperties())\n-                .contains(entry(\"hibernate.order_inserts\", \"true\"),\n+                .contains(entry(AvailableSettings.ORDER_INSERTS, \"true\"),\n+                        entry(AvailableSettings.JAKARTA_HBM2DDL_DATABASE_ACTION, \"create-drop\"),\n+                        entry(AvailableSettings.ORDER_UPDATES, \"false\"),\n                         // Also test a property that Quarkus cannot possibly know about\n                         entry(\"hibernate.some.unknown.key.static-and-runtime\", \"some-value-1\"),\n                         entry(\"hibernate.some.unknown.key.runtime-only\", \"some-value-2\"));\n\ndiff --git a/extensions/hibernate-reactive/deployment/src/test/java/io/quarkus/hibernate/reactive/config/unsupportedproperties/UnsupportedPropertiesTest.java b/extensions/hibernate-reactive/deployment/src/test/java/io/quarkus/hibernate/reactive/config/unsupportedproperties/UnsupportedPropertiesTest.java\nindex 91c526481f9d2..27e7fec4bbcb3 100644\n--- a/extensions/hibernate-reactive/deployment/src/test/java/io/quarkus/hibernate/reactive/config/unsupportedproperties/UnsupportedPropertiesTest.java\n+++ b/extensions/hibernate-reactive/deployment/src/test/java/io/quarkus/hibernate/reactive/config/unsupportedproperties/UnsupportedPropertiesTest.java\n@@ -49,11 +49,16 @@ public class UnsupportedPropertiesTest {\n             .overrideRuntimeConfigKey(\n                     \"quarkus.hibernate-orm.unsupported-properties.\\\"hibernate.some.unknown.key.runtime-only\\\"\",\n                     \"some-value-2\")\n-            // This should be ignored with a warning\n+            // This overrides a property set by Quarkus, and thus should trigger an additional warning\n             .overrideConfigKey(\n                     \"quarkus.hibernate-orm.unsupported-properties.\\\"\" + AvailableSettings.JAKARTA_HBM2DDL_DATABASE_ACTION\n                             + \"\\\"\",\n-                    \"drop-and-create\")\n+                    // Deliberately using the Hibernate-native name instead of the JPA one that Quarkus uses\n+                    // This allows us to check the override did happen\n+                    \"create-drop\")\n+            .overrideConfigKey(\n+                    \"quarkus.hibernate-orm.unsupported-properties.\\\"\" + AvailableSettings.ORDER_UPDATES + \"\\\"\",\n+                    \"false\")\n             // Expect warnings on startup\n             .setLogRecordPredicate(\n                     record -> FastBootHibernateReactivePersistenceProvider.class.getName().equals(record.getLoggerName())\n@@ -74,12 +79,12 @@ record -> FastBootHibernateReactivePersistenceProvider.class.getName().equals(re\n                         .doesNotContain(\"some-value\"));\n                 assertion.element(1).satisfies(record -> assertThat(LOG_FORMATTER.formatMessage(record))\n                         .contains(\n-                                \"Persistence-unit [default-reactive] sets property '\"\n-                                        + AvailableSettings.JAKARTA_HBM2DDL_DATABASE_ACTION\n-                                        + \"' to a custom value through 'quarkus.hibernate-orm.unsupported-properties.\\\"\"\n-                                        + AvailableSettings.JAKARTA_HBM2DDL_DATABASE_ACTION + \"\\\"'\",\n-                                \"Quarkus already set that property independently\",\n-                                \"The custom value will be ignored\"));\n+                                \"Persistence-unit [default-reactive] sets unsupported properties that override Quarkus' own settings\",\n+                                \"These properties may break assumptions in Quarkus code and cause malfunctions\",\n+                                \"make sure to file a feature request or bug report so that a solution can be implemented in Quarkus\")\n+                        .contains(AvailableSettings.JAKARTA_HBM2DDL_DATABASE_ACTION)\n+                        .doesNotContain(AvailableSettings.ORDER_INSERTS, \"hibernate.some.unknown.key.static-and-runtime\",\n+                                \"hibernate.some.unknown.key.runtime-only\"));\n             });\n \n     @Inject\n@@ -104,7 +109,9 @@ public void testPropertiesPropagatedToRuntimeInit() throws IllegalAccessExceptio\n         // All good, you can look now.\n \n         assertThat(ormSessionFactory.getProperties())\n-                .contains(entry(\"hibernate.order_inserts\", \"true\"),\n+                .contains(entry(AvailableSettings.ORDER_INSERTS, \"true\"),\n+                        entry(AvailableSettings.JAKARTA_HBM2DDL_DATABASE_ACTION, \"create-drop\"),\n+                        entry(AvailableSettings.ORDER_UPDATES, \"false\"),\n                         // Also test a property that Quarkus cannot possibly know about\n                         entry(\"hibernate.some.unknown.key.static-and-runtime\", \"some-value-1\"),\n                         entry(\"hibernate.some.unknown.key.runtime-only\", \"some-value-2\"));\n\ndiff --git a/extensions/hibernate-reactive/deployment/src/test/resources/application.properties b/extensions/hibernate-reactive/deployment/src/test/resources/application.properties\nindex c4782c2a1e74c..b748519f1a461 100644\n--- a/extensions/hibernate-reactive/deployment/src/test/resources/application.properties\n+++ b/extensions/hibernate-reactive/deployment/src/test/resources/application.properties\n@@ -3,7 +3,6 @@ quarkus.datasource.username=hibernate_orm_test\n quarkus.datasource.password=hibernate_orm_test\n quarkus.datasource.reactive=true\n quarkus.datasource.reactive.url=${postgres.reactive.url}\n-quarkus.postgres_blvertx-reactive:postgresql://localhost:5431/hibernate_orm_test\"\n \n # Hibernate config\n #quarkus.hibernate-orm.log.sql=true\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47909",
    "pr_id": 47909,
    "issue_id": 47821,
    "repo": "quarkusio/quarkus",
    "problem_statement": "REST Client fails for sub-resources with BeanParam\n### Describe the bug\n\nSince Quarkus 3.21.3, REST client interfaces fails to initialize if they have any methods with a `@BeanParam` annotated parameter that returns a sub-resource interface. The following exception is thrown:\n```\njava.lang.RuntimeException: Error injecting org.acme.subresourcebean.TestClient org.acme.subresourcebean.TestResource.client\n        at org.acme.subresourcebean.TestResource_Bean.doCreate(Unknown Source)\n        at org.acme.subresourcebean.TestResource_Bean.create(Unknown Source)\n        at org.acme.subresourcebean.TestResource_Bean.create(Unknown Source)\n        at io.quarkus.arc.impl.AbstractSharedContext.createInstanceHandle(AbstractSharedContext.java:119)\n        at io.quarkus.arc.impl.AbstractSharedContext$1.get(AbstractSharedContext.java:38)\n        at io.quarkus.arc.impl.AbstractSharedContext$1.get(AbstractSharedContext.java:35)\n        at io.quarkus.arc.impl.LazyValue.get(LazyValue.java:32)\n        at io.quarkus.arc.impl.ComputingCache.computeIfAbsent(ComputingCache.java:69)\n        at io.quarkus.arc.impl.ComputingCacheContextInstances.computeIfAbsent(ComputingCacheContextInstances.java:19)\n        at io.quarkus.arc.impl.AbstractSharedContext.get(AbstractSharedContext.java:35)\n        at org.acme.subresourcebean.TestResource_Bean.get(Unknown Source)\n        at org.acme.subresourcebean.TestResource_Bean.get(Unknown Source)\n        at io.quarkus.arc.impl.ArcContainerImpl.beanInstanceHandle(ArcContainerImpl.java:570)\n        at io.quarkus.arc.impl.ArcContainerImpl.beanInstanceHandle(ArcContainerImpl.java:550)\n        at io.quarkus.arc.impl.ArcContainerImpl.beanInstanceHandle(ArcContainerImpl.java:583)\n        at io.quarkus.arc.impl.ArcContainerImpl$3.get(ArcContainerImpl.java:337)\n        at io.quarkus.arc.impl.ArcContainerImpl$3.get(ArcContainerImpl.java:334)\n        at io.quarkus.arc.runtime.BeanContainerImpl$1.create(BeanContainerImpl.java:62)\n        at io.quarkus.resteasy.reactive.common.runtime.ArcBeanFactory.createInstance(ArcBeanFactory.java:27)\n        at org.jboss.resteasy.reactive.server.handlers.InstanceHandler.handle(InstanceHandler.java:26)\n        at io.quarkus.resteasy.reactive.server.runtime.QuarkusResteasyReactiveRequestContext.invokeHandler(QuarkusResteasyReactiveRequestContext.java:139)\n        at org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext.run(AbstractResteasyReactiveContext.java:147)\n        at io.quarkus.vertx.core.runtime.VertxCoreRecorder$15.runWith(VertxCoreRecorder.java:638)\n        at org.jboss.threads.EnhancedQueueExecutor$Task.doRunWith(EnhancedQueueExecutor.java:2675)\n        at org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2654)\n        at org.jboss.threads.EnhancedQueueExecutor.runThreadBody(EnhancedQueueExecutor.java:1627)\n        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1594)\n        at org.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:11)\n        at org.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:11)\n        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n        at java.base/java.lang.Thread.run(Thread.java:840)\nCaused by: org.eclipse.microprofile.rest.client.RestClientDefinitionException: org.jboss.resteasy.reactive.client.api.InvalidRestClientDefinitionException: Failed to generate client for class interface org.acme.subresourcebean.TestClient : Must be a Class or String, got null\n        at io.quarkus.rest.client.reactive.runtime.RestClientBuilderImpl.build(RestClientBuilderImpl.java:595)\n        at io.quarkus.rest.client.reactive.runtime.QuarkusRestClientBuilderImpl.build(QuarkusRestClientBuilderImpl.java:279)\n        at io.quarkus.rest.client.reactive.runtime.RestClientCDIDelegateBuilder.build(RestClientCDIDelegateBuilder.java:74)\n        at io.quarkus.rest.client.reactive.runtime.RestClientCDIDelegateBuilder.createDelegate(RestClientCDIDelegateBuilder.java:54)\n        at io.quarkus.rest.client.reactive.runtime.RestClientReactiveCDIWrapperBase.delegate(RestClientReactiveCDIWrapperBase.java:76)\n        at io.quarkus.rest.client.reactive.runtime.RestClientReactiveCDIWrapperBase.<init>(RestClientReactiveCDIWrapperBase.java:30)\n        at org.acme.subresourcebean.TestClient$$CDIWrapper.<init>(Unknown Source)\n        at org.acme.subresourcebean.TestClient$$CDIWrapper_ClientProxy.<init>(Unknown Source)\n        at org.acme.subresourcebean.TestClient$$CDIWrapper_Bean.proxy(Unknown Source)\n        ... 31 more\nCaused by: org.jboss.resteasy.reactive.client.api.InvalidRestClientDefinitionException: Failed to generate client for class interface org.acme.subresourcebean.TestClient : Must be a Class or String, got null\n        at org.jboss.resteasy.reactive.client.impl.ClientProxies.get(ClientProxies.java:31)\n        at org.jboss.resteasy.reactive.client.impl.WebTargetImpl.proxy(WebTargetImpl.java:465)\n        at io.quarkus.rest.client.reactive.runtime.RestClientBuilderImpl.build(RestClientBuilderImpl.java:593)\n        ... 41 more\n```\n\nThe cause of this exception happens at build time, but does not cause a build failure:\n```\n2025-05-12 09:14:21,323 DEBUG [io.qua.jax.cli.rea.dep.JaxrsClientReactiveProcessor] (build-10) Failed to create client proxy for org.acme.subresourcebean.TestClient this can usually be safely ignored: java.lang.IllegalArgumentException: Must be a Class or String, got null\n        at io.quarkus.gizmo.DescriptorUtils.objectToDescriptor(DescriptorUtils.java:133)\n        at io.quarkus.gizmo.FieldDescriptor.of(FieldDescriptor.java:44)\n        at io.quarkus.gizmo.ClassCreator.getFieldCreator(ClassCreator.java:126)\n        at io.quarkus.jaxrs.client.reactive.deployment.JaxrsClientReactiveProcessor.handleSubResourceMethod(JaxrsClientReactiveProcessor.java:1551)\n        at io.quarkus.jaxrs.client.reactive.deployment.JaxrsClientReactiveProcessor.generateClientInvoker(JaxrsClientReactiveProcessor.java:932)\n        at io.quarkus.jaxrs.client.reactive.deployment.JaxrsClientReactiveProcessor.setupClientProxies(JaxrsClientReactiveProcessor.java:423)\n        at java.base/java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:732)\n        at io.quarkus.deployment.ExtensionLoader$3.execute(ExtensionLoader.java:856)\n        at io.quarkus.builder.BuildContext.run(BuildContext.java:255)\n        at org.jboss.threads.ContextHandler$1.runWith(ContextHandler.java:18)\n        at org.jboss.threads.EnhancedQueueExecutor$Task.doRunWith(EnhancedQueueExecutor.java:2675)\n        at org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2654)\n        at org.jboss.threads.EnhancedQueueExecutor.runThreadBody(EnhancedQueueExecutor.java:1627)\n        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1594)\n        at java.base/java.lang.Thread.run(Thread.java:840)\n        at org.jboss.threads.JBossThread.run(JBossThread.java:499)\n```\n\nThis used to work, but has failed since Quarkus version 3.21.3.\n\nThe most likely cause Is the changes introduced in https://github.com/quarkusio/quarkus/pull/47368, specifically changing `param.type` to `param.declaredType` in the `JaxrsClientReactiveProcessor#handleSubResourceMethod` method.\n\nLooking at this with a debugger, I can see that the `declaredType` field on the `FieldDescriptor` object is `null`, whereas the `type` field contains the correct class name.\n\n### Expected behavior\n\n_No response_\n\n### Actual behavior\n\n_No response_\n\n### How to Reproduce?\n\nI've created a GitHub repository that reproduces this problem: https://github.com/jburkal/quarkus-beanparam-test\n\nSpecifically:\n - Client: https://github.com/jburkal/quarkus-beanparam-test/blob/main/src/main/java/org/acme/subresourcebean/TestClient.java\n - Sub-resource: https://github.com/jburkal/quarkus-beanparam-test/blob/main/src/main/java/org/acme/subresourcebean/SubClient.java\n - Bean parameter: https://github.com/jburkal/quarkus-beanparam-test/blob/main/src/main/java/org/acme/TestBean.java\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### Quarkus version or git rev\n\n3.21.3\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
    "issue_word_count": 982,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/subresource/SubResourceAndBeanParamTest.java",
      "independent-projects/resteasy-reactive/client/processor/src/main/java/org/jboss/resteasy/reactive/client/processor/scanning/ClientEndpointIndexer.java"
    ],
    "pr_changed_test_files": [
      "extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/subresource/SubResourceAndBeanParamTest.java"
    ],
    "base_commit": "4ecfbf90b2021ea5c507b4fada6a05851c0839da",
    "head_commit": "410520b689075fea89d5412234eee1807c9a603b",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47909",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47909",
    "dockerfile": "",
    "pr_merged_at": "2025-05-20T08:36:22.000Z",
    "patch": "diff --git a/independent-projects/resteasy-reactive/client/processor/src/main/java/org/jboss/resteasy/reactive/client/processor/scanning/ClientEndpointIndexer.java b/independent-projects/resteasy-reactive/client/processor/src/main/java/org/jboss/resteasy/reactive/client/processor/scanning/ClientEndpointIndexer.java\nindex 676a50c8b08aa..9e80e8d9d7aea 100644\n--- a/independent-projects/resteasy-reactive/client/processor/src/main/java/org/jboss/resteasy/reactive/client/processor/scanning/ClientEndpointIndexer.java\n+++ b/independent-projects/resteasy-reactive/client/processor/src/main/java/org/jboss/resteasy/reactive/client/processor/scanning/ClientEndpointIndexer.java\n@@ -128,7 +128,16 @@ protected ResourceMethod createResourceMethod(MethodInfo info, ClassInfo actualE\n     protected boolean handleBeanParam(ClassInfo actualEndpointInfo, Type paramType, MethodParameter[] methodParameters, int i,\n             Set<String> fileFormNames) {\n         ClassInfo beanParamClassInfo = index.getClassByName(paramType.name());\n-        methodParameters[i] = parseClientBeanParam(beanParamClassInfo, index);\n+        if (methodParameters[i] != null) {\n+            // TODO: we might want to make this smarter\n+            List<Item> items = BeanParamParser.parse(beanParamClassInfo, index);\n+            ClientBeanParamInfo clientBeanParamInfo = new ClientBeanParamInfo(items, beanParamClassInfo.name().toString());\n+            clientBeanParamInfo.setDeclaredType(methodParameters[i].getDeclaredType());\n+            methodParameters[i] = clientBeanParamInfo;\n+\n+        } else {\n+            methodParameters[i] = parseClientBeanParam(beanParamClassInfo, index);\n+        }\n \n         return false;\n     }\n",
    "test_patch": "diff --git a/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/subresource/SubResourceAndBeanParamTest.java b/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/subresource/SubResourceAndBeanParamTest.java\nnew file mode 100644\nindex 0000000000000..7c54ae687586f\n--- /dev/null\n+++ b/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/subresource/SubResourceAndBeanParamTest.java\n@@ -0,0 +1,67 @@\n+package io.quarkus.rest.client.reactive.subresource;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.net.URI;\n+\n+import jakarta.ws.rs.BeanParam;\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.QueryParam;\n+\n+import org.jboss.resteasy.reactive.RestQuery;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.rest.client.reactive.QuarkusRestClientBuilder;\n+import io.quarkus.test.QuarkusUnitTest;\n+import io.quarkus.test.common.http.TestHTTPResource;\n+\n+public class SubResourceAndBeanParamTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest TEST = new QuarkusUnitTest()\n+            .withApplicationRoot((jar) -> jar\n+                    .addClasses(TestClient.class, SubClient.class, TestBean.class, Exception.class, Resource.class));\n+\n+    @TestHTTPResource\n+    URI baseUri;\n+\n+    @Test\n+    public void test() {\n+        TestClient testClient = QuarkusRestClientBuilder.newBuilder().baseUri(baseUri).build(TestClient.class);\n+        assertThat(testClient.subResource(new TestBean(\"io.quarkus:quarkus-rest\")).getExtensionById()).isEqualTo(\"foo\");\n+    }\n+\n+    @Path(\"/api/extensions\")\n+    public static class Resource {\n+\n+        @GET\n+        public String getExtensions(@RestQuery String id) {\n+            return \"foo\";\n+        }\n+    }\n+\n+    public interface TestClient {\n+\n+        @Path(\"/api/extensions\")\n+        SubClient subResource(@BeanParam TestBean bean);\n+    }\n+\n+    public interface SubClient {\n+\n+        @GET\n+        String getExtensionById();\n+    }\n+\n+    public static class TestBean {\n+\n+        @QueryParam(\"id\")\n+        public final String extensionName;\n+\n+        public TestBean(String extensionName) {\n+            this.extensionName = extensionName;\n+        }\n+    }\n+\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47887",
    "pr_id": 47887,
    "issue_id": 47886,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Allow access to context locals from `HttpServerMetricsTagsContributor`\n### Description\n\nRight now when `HttpServerMetricsTagsContributor.contribute()` is invoked the request context is not active anymore. This limits the ability to pass any request-specific information to the contributor.\n\n### Implementation ideas\n\n_No response_",
    "issue_word_count": 39,
    "test_files_count": 3,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/HttpServerMetricsTagsContributor.java",
      "extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/binder/vertx/VertxHttpServerMetrics.java",
      "integration-tests/micrometer-prometheus/src/main/java/io/quarkus/ContextLocalTag.java",
      "integration-tests/micrometer-prometheus/src/main/java/io/quarkus/it/micrometer/prometheus/PathTemplateResource.java",
      "integration-tests/micrometer-prometheus/src/test/java/io/quarkus/it/micrometer/prometheus/PrometheusMetricsRegistryTest.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/micrometer-prometheus/src/main/java/io/quarkus/ContextLocalTag.java",
      "integration-tests/micrometer-prometheus/src/main/java/io/quarkus/it/micrometer/prometheus/PathTemplateResource.java",
      "integration-tests/micrometer-prometheus/src/test/java/io/quarkus/it/micrometer/prometheus/PrometheusMetricsRegistryTest.java"
    ],
    "base_commit": "09d452a5abde4a55a38ed18018ecfa63353269e9",
    "head_commit": "c9509a5ffe7143966c6df86dd1c987fa551b232c",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47887",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47887",
    "dockerfile": "",
    "pr_merged_at": "2025-05-15T16:19:08.000Z",
    "patch": "diff --git a/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/HttpServerMetricsTagsContributor.java b/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/HttpServerMetricsTagsContributor.java\nindex 0dec6727f65f9..cdeeaeb62691a 100644\n--- a/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/HttpServerMetricsTagsContributor.java\n+++ b/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/HttpServerMetricsTagsContributor.java\n@@ -23,5 +23,14 @@ interface Context {\n         HttpServerRequest request();\n \n         HttpResponse response();\n+\n+        /**\n+         * Gives access to the contextual data that was added while the HTTP request was active.\n+         * This can be found of doing something like {@link io.smallrye.common.vertx.ContextLocals#get(String)},\n+         * however this method is needed because {@link io.smallrye.common.vertx.ContextLocals#get(String)} won't\n+         * work when {@link HttpServerMetricsTagsContributor#contribute(Context)} is called as the HTTP request has\n+         * already gone away.\n+         */\n+        <T> T requestContextLocalData(Object key);\n     }\n }\n\ndiff --git a/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/binder/vertx/VertxHttpServerMetrics.java b/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/binder/vertx/VertxHttpServerMetrics.java\nindex 15b805583bbd1..ae5e62b648669 100644\n--- a/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/binder/vertx/VertxHttpServerMetrics.java\n+++ b/extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/binder/vertx/VertxHttpServerMetrics.java\n@@ -25,6 +25,7 @@\n import io.vertx.core.http.HttpServerOptions;\n import io.vertx.core.http.HttpServerRequest;\n import io.vertx.core.http.ServerWebSocket;\n+import io.vertx.core.http.impl.HttpServerRequestInternal;\n import io.vertx.core.spi.metrics.HttpServerMetrics;\n import io.vertx.core.spi.observability.HttpRequest;\n import io.vertx.core.spi.observability.HttpResponse;\n@@ -269,5 +270,9 @@ public void disconnected(LongTaskTimer.Sample websocketMetric) {\n \n     private record DefaultContext(HttpServerRequest request,\n             HttpResponse response) implements HttpServerMetricsTagsContributor.Context {\n+        @Override\n+        public <T> T requestContextLocalData(Object key) {\n+            return ((HttpServerRequestInternal) request).context().getLocal(key);\n+        }\n     }\n }\n",
    "test_patch": "diff --git a/integration-tests/micrometer-prometheus/src/main/java/io/quarkus/DummyTag.java b/integration-tests/micrometer-prometheus/src/main/java/io/quarkus/ContextLocalTag.java\nsimilarity index 50%\nrename from integration-tests/micrometer-prometheus/src/main/java/io/quarkus/DummyTag.java\nrename to integration-tests/micrometer-prometheus/src/main/java/io/quarkus/ContextLocalTag.java\nindex 572b68448b25a..035c2dec59af9 100644\n--- a/integration-tests/micrometer-prometheus/src/main/java/io/quarkus/DummyTag.java\n+++ b/integration-tests/micrometer-prometheus/src/main/java/io/quarkus/ContextLocalTag.java\n@@ -6,10 +6,11 @@\n import io.quarkus.micrometer.runtime.HttpServerMetricsTagsContributor;\n \n @Singleton\n-public class DummyTag implements HttpServerMetricsTagsContributor {\n+public class ContextLocalTag implements HttpServerMetricsTagsContributor {\n \n     @Override\n     public Tags contribute(Context context) {\n-        return Tags.of(\"dummy\", \"value\");\n+        String contextLocalData = context.requestContextLocalData(\"context-local\");\n+        return Tags.of(\"dummy\", contextLocalData != null ? contextLocalData : \"value\");\n     }\n }\n\ndiff --git a/integration-tests/micrometer-prometheus/src/main/java/io/quarkus/it/micrometer/prometheus/PathTemplateResource.java b/integration-tests/micrometer-prometheus/src/main/java/io/quarkus/it/micrometer/prometheus/PathTemplateResource.java\nindex f3a7e530884a5..506bbaf057ee5 100644\n--- a/integration-tests/micrometer-prometheus/src/main/java/io/quarkus/it/micrometer/prometheus/PathTemplateResource.java\n+++ b/integration-tests/micrometer-prometheus/src/main/java/io/quarkus/it/micrometer/prometheus/PathTemplateResource.java\n@@ -4,10 +4,13 @@\n import jakarta.ws.rs.Path;\n import jakarta.ws.rs.PathParam;\n \n+import io.smallrye.common.vertx.ContextLocals;\n+\n @Path(\"template/path/{value}\")\n public class PathTemplateResource {\n     @GET\n     public String get(@PathParam(\"value\") String value) {\n+        ContextLocals.put(\"context-local\", \"val-\" + value);\n         return \"Received: \" + value;\n     }\n }\n\ndiff --git a/integration-tests/micrometer-prometheus/src/test/java/io/quarkus/it/micrometer/prometheus/PrometheusMetricsRegistryTest.java b/integration-tests/micrometer-prometheus/src/test/java/io/quarkus/it/micrometer/prometheus/PrometheusMetricsRegistryTest.java\nindex 5ee1d84b3927d..021b90ad84dbd 100644\n--- a/integration-tests/micrometer-prometheus/src/test/java/io/quarkus/it/micrometer/prometheus/PrometheusMetricsRegistryTest.java\n+++ b/integration-tests/micrometer-prometheus/src/test/java/io/quarkus/it/micrometer/prometheus/PrometheusMetricsRegistryTest.java\n@@ -132,14 +132,14 @@ void testPrometheusScrapeEndpointTextPlain() {\n                 .body(containsString(\"status=\\\"200\\\",uri=\\\"/secured/item/{id}\\\"\"))\n                 .body(containsString(\"status=\\\"401\\\",uri=\\\"/secured/item/{id}\\\"\"))\n                 .body(containsString(\"outcome=\\\"SUCCESS\\\"\"))\n-                .body(containsString(\"dummy=\\\"value\\\"\"))\n+                .body(containsString(\"dummy=\"))\n                 .body(containsString(\"foo=\\\"bar\\\"\"))\n                 .body(containsString(\"foo_response=\\\"value\\\"\"))\n                 .body(containsString(\"uri=\\\"/message/match/{id}/{sub}\\\"\"))\n                 .body(containsString(\"uri=\\\"/message/match/{other}\\\"\"))\n \n                 .body(containsString(\n-                        \"http_server_requests_seconds_count{dummy=\\\"value\\\",env=\\\"test\\\",env2=\\\"test\\\",foo=\\\"UNSET\\\",foo_response=\\\"UNSET\\\",method=\\\"GET\\\",outcome=\\\"SUCCESS\\\",registry=\\\"prometheus\\\",status=\\\"200\\\",uri=\\\"/template/path/{value}\\\"\"))\n+                        \"http_server_requests_seconds_count{dummy=\\\"val-anything\\\",env=\\\"test\\\",env2=\\\"test\\\",foo=\\\"UNSET\\\",foo_response=\\\"UNSET\\\",method=\\\"GET\\\",outcome=\\\"SUCCESS\\\",registry=\\\"prometheus\\\",status=\\\"200\\\",uri=\\\"/template/path/{value}\\\"\"))\n \n                 .body(containsString(\n                         \"http_server_requests_seconds_count{dummy=\\\"value\\\",env=\\\"test\\\",env2=\\\"test\\\",foo=\\\"UNSET\\\",foo_response=\\\"UNSET\\\",method=\\\"GET\\\",outcome=\\\"SUCCESS\\\",registry=\\\"prometheus\\\",status=\\\"200\\\",uri=\\\"/root/{rootParam}/sub/{subParam}\\\"\"))\n@@ -234,7 +234,7 @@ void testPrometheusScrapeEndpointOpenMetrics() {\n                 .body(containsString(\"uri=\\\"/message/match/{other}\\\"\"))\n \n                 .body(containsString(\n-                        \"http_server_requests_seconds_count{dummy=\\\"value\\\",env=\\\"test\\\",env2=\\\"test\\\",foo=\\\"UNSET\\\",foo_response=\\\"UNSET\\\",method=\\\"GET\\\",outcome=\\\"SUCCESS\\\",registry=\\\"prometheus\\\",status=\\\"200\\\",uri=\\\"/template/path/{value}\\\"\"))\n+                        \"http_server_requests_seconds_count{dummy=\\\"val-anything\\\",env=\\\"test\\\",env2=\\\"test\\\",foo=\\\"UNSET\\\",foo_response=\\\"UNSET\\\",method=\\\"GET\\\",outcome=\\\"SUCCESS\\\",registry=\\\"prometheus\\\",status=\\\"200\\\",uri=\\\"/template/path/{value}\\\"\"))\n \n                 // Verify Hibernate Metrics\n                 .body(containsString(\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47883",
    "pr_id": 47883,
    "issue_id": 47762,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Allow \"appending\" `quarkus.native.additional-build-args`\n### Description\n\n`quarkus.native.additional-build-args` allows us to pass more arguments to GraalVM/Mandrel and customize the build. This enables us to try new features without altering Quarkus core, e.g. we can pass `--exact-reachability-metadata`. \n\nThe problem is that if `quarkus.native.additional-build-args` is defined in the `application.properties` file, defining it in the command line overrides the value. As a result if an application of test needs some specific build arguments that it defines in its `application.properties` file, e.g.: \n\nhttps://github.com/quarkusio/quarkus/blob/65f9ac4d406152cc757f1fd461440988392af60a/integration-tests/bouncycastle/src/main/resources/application.properties#L2\n\nthere is no way to pass some additional argument without either:\n\n* copying the arguments from the properties file to the command line, or\n* adding the arguments to the properties file.\n\nFor ease of testing and experimentation I would like to be able to append (or prepend) arguments to the ones defined in the properties files.\n\nSuch a feature would also allow us to work around issues like https://github.com/quarkusio/quarkus/issues/47566 till a proper fix gets merged.\n\n### Implementation ideas\n\nAFAIK there is no way to append the value of a property in maven (not sure about gradle, but even if possible we need something compatible with maven as well).\n\nMy proposal is to create a new property `quarkus.native.additional-build-args-append` that will be meant for CLI use and will act like the `JAVA_OPTS_APPEND` environment variable.",
    "issue_word_count": 251,
    "test_files_count": 1,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "core/deployment/src/main/java/io/quarkus/deployment/pkg/NativeConfig.java",
      "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeImageBuildStep.java",
      "core/deployment/src/test/java/io/quarkus/deployment/pkg/TestNativeConfig.java",
      "docs/src/main/asciidoc/building-native-image.adoc"
    ],
    "pr_changed_test_files": [
      "core/deployment/src/test/java/io/quarkus/deployment/pkg/TestNativeConfig.java"
    ],
    "base_commit": "09d452a5abde4a55a38ed18018ecfa63353269e9",
    "head_commit": "54cbe3a533e461ac2340fc9bfc11e0452e2d3b29",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47883",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47883",
    "dockerfile": "",
    "pr_merged_at": "2025-05-15T16:46:35.000Z",
    "patch": "diff --git a/core/deployment/src/main/java/io/quarkus/deployment/pkg/NativeConfig.java b/core/deployment/src/main/java/io/quarkus/deployment/pkg/NativeConfig.java\nindex 445994bb86122..0794a8e9a5b62 100644\n--- a/core/deployment/src/main/java/io/quarkus/deployment/pkg/NativeConfig.java\n+++ b/core/deployment/src/main/java/io/quarkus/deployment/pkg/NativeConfig.java\n@@ -42,6 +42,16 @@ public interface NativeConfig {\n      */\n     Optional<List<String>> additionalBuildArgs();\n \n+    /**\n+     * Comma-separated, additional arguments to pass to the build process.\n+     * The arguments are appended to those provided through {@link #additionalBuildArgs()}, as a result they may override those\n+     * passed through {@link #additionalBuildArgs()}.\n+     * By convention, this is meant to be set on the command-line, while {@link #additionalBuildArgs()} should be preferred for\n+     * use in properties files.\n+     * If an argument includes the {@code ,} symbol, it needs to be escaped, e.g. {@code \\\\,}\n+     */\n+    Optional<List<String>> additionalBuildArgsAppend();\n+\n     /**\n      * If the HTTP url handler should be enabled, allowing you to do URL.openConnection() for HTTP URLs\n      */\n\ndiff --git a/core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeImageBuildStep.java b/core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeImageBuildStep.java\nindex 6d81fc7fa0abf..4d360ef6a6b17 100644\n--- a/core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeImageBuildStep.java\n+++ b/core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeImageBuildStep.java\n@@ -800,7 +800,8 @@ public NativeImageInvokerInfo build() {\n                      * Instruct GraalVM / Mandrel to keep more accurate information about source locations when generating\n                      * debug info for debugging and monitoring tools. This parameter may break compatibility with Truffle.\n                      * Affected users should explicitly pass {@code -H:-TrackNodeSourcePosition} through\n-                     * {@code quarkus.native.additional-build-args} to override it.\n+                     * {@code quarkus.native.additional-build-args} or {@code quarkus.native.additional-build-args-append}\n+                     * to override it.\n                      *\n                      * See https://github.com/quarkusio/quarkus/issues/30772 for more details.\n                      */\n@@ -849,8 +850,9 @@ public NativeImageInvokerInfo build() {\n \n                 /*\n                  * Any parameters following this call are forced over the user provided parameters in\n-                 * quarkus.native.additional-build-args. So if you need a parameter to be overridable through\n-                 * quarkus.native.additional-build-args please make sure to add it before this call.\n+                 * quarkus.native.additional-build-args or quarkus.native.additional-build-args-append. So if you need\n+                 * a parameter to be overridable through quarkus.native.additional-build-args or\n+                 * quarkus.native.additional-build-args-append please make sure to add it before this call.\n                  */\n                 handleAdditionalProperties(nativeImageArgs);\n \n@@ -1061,8 +1063,13 @@ public NativeImageInvokerInfo build() {\n             }\n \n             private void handleAdditionalProperties(List<String> command) {\n-                if (nativeConfig.additionalBuildArgs().isPresent()) {\n-                    List<String> strings = nativeConfig.additionalBuildArgs().get();\n+                Optional<List<String>>[] additionalBuildArgs = new Optional[] { nativeConfig.additionalBuildArgs(),\n+                        nativeConfig.additionalBuildArgsAppend() };\n+                for (Optional<List<String>> args : additionalBuildArgs) {\n+                    if (args.isEmpty()) {\n+                        continue;\n+                    }\n+                    List<String> strings = args.get();\n                     for (String buildArg : strings) {\n                         String trimmedBuildArg = buildArg.trim();\n                         if (trimmedBuildArg.contains(TRUST_STORE_SYSTEM_PROPERTY_MARKER) && containerBuild) {\n\ndiff --git a/docs/src/main/asciidoc/building-native-image.adoc b/docs/src/main/asciidoc/building-native-image.adoc\nindex 9e80ae7496498..baf80c179114c 100644\n--- a/docs/src/main/asciidoc/building-native-image.adoc\n+++ b/docs/src/main/asciidoc/building-native-image.adoc\n@@ -192,10 +192,10 @@ If you have generated the application from the previous tutorial, you can find i\n \n [TIP]\n ====\n-You can provide custom options for the `native-image` command using the `<quarkus.native.additional-build-args>` property.\n+You can provide custom options for the `native-image` command using the `quarkus.native.additional-build-args` and `quarkus.native.additional-build-args-append` properties.\n Multiple options may be separated by a comma.\n \n-Another possibility is to include the `quarkus.native.additional-build-args` configuration property in your `application.properties`.\n+By convention `quarkus.native.additional-build-args-append` is meant to be defined at the command line (e.g. `-Dquarkus.native.additional-build-args-append=--verbose`), while `quarkus.native.additional-build-args` may be defined either at the command line or in your `application.properties`. Note that, any arguments included in `quarkus.native.additional-build-args-append` may override those included in `quarkus.native.additional-build-args`.\n \n You can find more information about how to configure the native image building process in the <<configuration-reference>> section below.\n ====\n",
    "test_patch": "diff --git a/core/deployment/src/test/java/io/quarkus/deployment/pkg/TestNativeConfig.java b/core/deployment/src/test/java/io/quarkus/deployment/pkg/TestNativeConfig.java\nindex 3550674b52e3e..13fb96f4cb8fc 100644\n--- a/core/deployment/src/test/java/io/quarkus/deployment/pkg/TestNativeConfig.java\n+++ b/core/deployment/src/test/java/io/quarkus/deployment/pkg/TestNativeConfig.java\n@@ -35,6 +35,11 @@ public Optional<List<String>> additionalBuildArgs() {\n         return Optional.empty();\n     }\n \n+    @Override\n+    public Optional<List<String>> additionalBuildArgsAppend() {\n+        return Optional.empty();\n+    }\n+\n     @Override\n     public boolean enableHttpUrlHandler() {\n         return false;\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47879",
    "pr_id": 47879,
    "issue_id": 27349,
    "repo": "quarkusio/quarkus",
    "problem_statement": "MockSupport may fail in junit5 concurrent execution mode\n### Describe the bug\n\nWhen using junit5 `ExecutionMode.CONCURRENT` with `@QuarkusTest`, there appears to be a race condition on the [`MockSupport.context`](https://github.com/quarkusio/quarkus/blob/2.11.2.Final/test-framework/junit5/src/main/java/io/quarkus/test/junit/MockSupport.java#L14) `ArrayDeque`.\r\n\r\nChanging it to `java.util.concurrent.ConcurrentLinkedDeque` works in my case, but I'm not using any mocks. It may need `ThreadLocal` otherwise the interactions with the `contexts` will be random across threads.\r\n\r\n```java\r\n@QuarkusTest\r\n@Execution(ExecutionMode.CONCURRENT)\r\npublic class MyTest  {\r\n  static final int count = 10000;\r\n\r\n  @RepeatedTest(count)\r\n  public void test1() {\r\n    ...\r\n  }\r\n\r\n  @RepeatedTest(count)\r\n  public void test2() {\r\n    ...\r\n  }\r\n}\r\n```\r\n\r\n\n\n### Expected behavior\n\nAn exception is not throw when using `@QuarkusTest` and `@Execution(ExecutionMode.CONCURRENT)` in test clases.\n\n### Actual behavior\n\n```\r\njava.lang.RuntimeException: java.lang.reflect.InvocationTargetException\r\n\r\n\tat io.quarkus.test.junit.QuarkusTestExtension.popMockContext(QuarkusTestExtension.java:739)\r\n\tat io.quarkus.test.junit.QuarkusTestExtension.afterEach(QuarkusTestExtension.java:574)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeAfterEachCallbacks$12(TestMethodTestDescriptor.java:260)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeAllAfterMethodsOrCallbacks$13(TestMethodTestDescriptor.java:276)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeAllAfterMethodsOrCallbacks$14(TestMethodTestDescriptor.java:276)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeAllAfterMethodsOrCallbacks(TestMethodTestDescriptor.java:275)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeAfterEachCallbacks(TestMethodTestDescriptor.java:259)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:144)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\r\n\tat org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService$ExclusiveTask.compute(ForkJoinPoolHierarchicalTestExecutorService.java:185)\r\n\tat java.base/java.util.concurrent.RecursiveAction.exec(RecursiveAction.java:189)\r\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:290)\r\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.tryRemoveAndExec(ForkJoinPool.java:1062)\r\n\tat java.base/java.util.concurrent.ForkJoinPool.awaitJoin(ForkJoinPool.java:1688)\r\n\tat java.base/java.util.concurrent.ForkJoinTask.doJoin(ForkJoinTask.java:397)\r\n\tat java.base/java.util.concurrent.ForkJoinTask.get(ForkJoinTask.java:1004)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.awaitFinished(NodeTestTask.java:236)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:158)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\r\n\tat org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService$ExclusiveTask.compute(ForkJoinPoolHierarchicalTestExecutorService.java:185)\r\n\tat java.base/java.util.concurrent.RecursiveAction.exec(RecursiveAction.java:189)\r\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:290)\r\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1020)\r\n\tat java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1656)\r\n\tat java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1594)\r\n\tat java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)\r\nCaused by: java.lang.reflect.InvocationTargetException\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat io.quarkus.test.junit.QuarkusTestExtension.popMockContext(QuarkusTestExtension.java:737)\r\n\t... 42 more\r\nCaused by: java.util.NoSuchElementException\r\n\tat java.base/java.util.ArrayDeque.removeFirst(ArrayDeque.java:363)\r\n\tat java.base/java.util.ArrayDeque.pop(ArrayDeque.java:594)\r\n\tat io.quarkus.test.junit.MockSupport.popContext(MockSupport.java:24)\r\n\t... 46 more\r\n\r\n```\n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\nopenjdk version \"11.0.15\" 2022-04-19 OpenJDK Runtime Environment Temurin-11.0.15+10 (build 11.0.15+10) OpenJDK 64-Bit Server VM Temurin-11.0.15+10 (build 11.0.15+10, mixed mode)\n\n### GraalVM version (if different from Java)\n\n_No response_\n\n### Quarkus version or git rev\n\n2.11.2.Final\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
    "issue_word_count": 822,
    "test_files_count": 1,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/MockSupport.java"
    ],
    "pr_changed_test_files": [
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/MockSupport.java"
    ],
    "base_commit": "d17c7e828948050eb20605d5ad9281e19ba8a091",
    "head_commit": "e8f4f950b5bfa0761247445f049cea84cfaa8521",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47879",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47879",
    "dockerfile": "",
    "pr_merged_at": "2025-05-15T12:05:44.000Z",
    "patch": "",
    "test_patch": "diff --git a/test-framework/junit5/src/main/java/io/quarkus/test/junit/MockSupport.java b/test-framework/junit5/src/main/java/io/quarkus/test/junit/MockSupport.java\nindex 4aef9804fb807..ce2638a2eab38 100644\n--- a/test-framework/junit5/src/main/java/io/quarkus/test/junit/MockSupport.java\n+++ b/test-framework/junit5/src/main/java/io/quarkus/test/junit/MockSupport.java\n@@ -13,11 +13,11 @@ class MockSupport {\n \n     private static final Deque<List<Object>> contexts = new ArrayDeque<>();\n \n-    static void pushContext() {\n+    static synchronized void pushContext() {\n         contexts.push(new ArrayList<>());\n     }\n \n-    static void popContext() {\n+    static synchronized void popContext() {\n         if (contexts.isEmpty()) {\n             return; // can happen on error in QuarkusTestResourceLifecycleManagers etc.\n         }\n@@ -38,7 +38,7 @@ static void popContext() {\n         }\n     }\n \n-    static <T> void installMock(T instance, T mock) {\n+    static synchronized <T> void installMock(T instance, T mock) {\n         //due to class loading issues we can't access the interface directly\n         List<Object> inst = contexts.peek();\n         if (inst == null) {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47876",
    "pr_id": 47876,
    "issue_id": 24340,
    "repo": "quarkusio/quarkus",
    "problem_statement": "CDI injection does not work on entity listeners if the listener method is private\n### Describe the bug\r\n\r\nThis is a follow-up of https://github.com/quarkusio/quarkus/issues/6948#issuecomment-1068482581\r\n\r\nWhen making the methods of an entity listener private (which by itself works, but maybe it shouldn't), it has the side effect that CDI beans are no longer injected.\r\n\r\n### Expected behavior\r\n\r\nNot sure what would be the best expectation, but maybe one of the following:\r\n\r\n- private entity listener methods are illegal, or cause an error/warning one way or another\r\n- CDI injection still working for these private methode\r\n\r\n### How to Reproduce?\r\n\r\nHave an entity listener that looks something like this:\r\n```\r\n@ApplicationScoped\r\npublic class MyEntityListener {\r\n    @Inject SomeCdiBean someCdiBean;\r\n\r\n    @PrePersist\r\n    private void prePersist(MyEntity entity) { // works for package-private, protected and public\r\n        if (someCdiBean == null) throw new AssertionError(\"should not be null\");\r\n    }\r\n}\r\n```\r\n\r\nAnd register it on some entity:\r\n```\r\n@Entity\r\n@EntityListeners(MyEntityListener.class)\r\npublic class MyEntity {\r\n    // ...\r\n}\r\n```\r\n\r\nThen trigger it, e.g. in a test:\r\n```\r\n@QuarkusTest\r\n@Transactional\r\nclass MyEntityTest {\r\n    @Inject EntityManager entityManager;\r\n\r\n    @Test\r\n    void testEntityListener() {\r\n        entityManager.persist(new MyEntity());\r\n    }\r\n}\r\n```\r\n\r\nHere's a full reproducer project with Quarkus 2.7.4: [entitylistener-inject-entitymanager.zip](https://github.com/quarkusio/quarkus/files/8260629/entitylistener-inject-entitymanager.zip)\r\n",
    "issue_word_count": 204,
    "test_files_count": 2,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmCdiProcessor.java",
      "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/JpaJandexScavenger.java",
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/JpaListenerOnPrivateMethodOfApplicationScopedCdiBeanTest.java",
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/JpaListenerOnPrivateMethodOfSingletonCdiBeanTest.java"
    ],
    "pr_changed_test_files": [
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/JpaListenerOnPrivateMethodOfApplicationScopedCdiBeanTest.java",
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/JpaListenerOnPrivateMethodOfSingletonCdiBeanTest.java"
    ],
    "base_commit": "b102c54ba53c41dde055dc4857b784e7faf0c574",
    "head_commit": "3da3ff8b0d1ab09b30f4fead41b3b1ae4d720584",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47876",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47876",
    "dockerfile": "",
    "pr_merged_at": "2025-05-15T09:05:10.000Z",
    "patch": "diff --git a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmCdiProcessor.java b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmCdiProcessor.java\nindex ce63ed939281a..5012f964bdc96 100644\n--- a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmCdiProcessor.java\n+++ b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmCdiProcessor.java\n@@ -2,11 +2,13 @@\n \n import static org.apache.commons.lang3.BooleanUtils.isFalse;\n \n+import java.lang.reflect.Modifier;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n import java.util.Locale;\n import java.util.Set;\n+import java.util.function.BiFunction;\n import java.util.function.Function;\n import java.util.stream.Collectors;\n \n@@ -24,26 +26,35 @@\n import org.hibernate.query.criteria.HibernateCriteriaBuilder;\n import org.hibernate.relational.SchemaManager;\n import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n import org.jboss.jandex.AnnotationTarget.Kind;\n import org.jboss.jandex.AnnotationTransformation;\n import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.ClassInfo;\n import org.jboss.jandex.ClassType;\n+import org.jboss.jandex.CompositeIndex;\n import org.jboss.jandex.DotName;\n import org.jboss.jandex.FieldInfo;\n+import org.jboss.jandex.MethodInfo;\n import org.jboss.jandex.ParameterizedType;\n import org.jboss.jandex.Type;\n+import org.objectweb.asm.ClassVisitor;\n \n import io.agroal.api.AgroalDataSource;\n import io.quarkus.agroal.spi.JdbcDataSourceBuildItem;\n import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n import io.quarkus.arc.deployment.AnnotationsTransformerBuildItem;\n import io.quarkus.arc.deployment.BeanDefiningAnnotationBuildItem;\n+import io.quarkus.arc.deployment.BeanDiscoveryFinishedBuildItem;\n import io.quarkus.arc.deployment.SyntheticBeanBuildItem;\n import io.quarkus.arc.deployment.SyntheticBeanBuildItem.ExtendedBeanConfigurator;\n import io.quarkus.arc.deployment.UnremovableBeanBuildItem;\n import io.quarkus.arc.deployment.ValidationPhaseBuildItem;\n import io.quarkus.arc.processor.AnnotationsTransformer;\n+import io.quarkus.arc.processor.BeanInfo;\n+import io.quarkus.arc.processor.BuiltinScope;\n import io.quarkus.arc.processor.DotNames;\n+import io.quarkus.arc.processor.ScopeInfo;\n import io.quarkus.arc.processor.Transformation;\n import io.quarkus.deployment.Capabilities;\n import io.quarkus.deployment.Capability;\n@@ -52,7 +63,10 @@\n import io.quarkus.deployment.annotations.BuildSteps;\n import io.quarkus.deployment.annotations.ExecutionTime;\n import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.builditem.BytecodeTransformerBuildItem;\n import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.gizmo.ClassTransformer;\n+import io.quarkus.gizmo.MethodDescriptor;\n import io.quarkus.hibernate.orm.PersistenceUnit;\n import io.quarkus.hibernate.orm.runtime.HibernateOrmRecorder;\n import io.quarkus.hibernate.orm.runtime.HibernateOrmRuntimeConfig;\n@@ -276,6 +290,62 @@ void registerBeans(HibernateOrmConfig hibernateOrmConfig,\n         unremovableBeans.produce(UnremovableBeanBuildItem.beanTypes(jpaModel.getPotentialCdiBeanClassNames()));\n     }\n \n+    @BuildStep\n+    void transformBeans(JpaModelBuildItem jpaModel, JpaModelIndexBuildItem indexBuildItem,\n+            BeanDiscoveryFinishedBuildItem beans,\n+            BuildProducer<BytecodeTransformerBuildItem> producer) {\n+        if (!HibernateOrmProcessor.hasEntities(jpaModel)) {\n+            return;\n+        }\n+\n+        // the idea here is to remove the 'private' modifier from all methods that are annotated with JPA Listener methods\n+        // and don't belong to entities\n+        CompositeIndex index = indexBuildItem.getIndex();\n+        for (DotName dotName : jpaModel.getPotentialCdiBeanClassNames()) {\n+            if (jpaModel.getManagedClassNames().contains(dotName.toString())) {\n+                continue;\n+            }\n+            ClassInfo classInfo = index.getClassByName(dotName);\n+            List<BeanInfo> matchingBeans = beans.getBeans().stream().filter(bi -> bi.getBeanClass().equals(dotName)).toList();\n+            if (matchingBeans.size() == 1) {\n+                ScopeInfo beanScope = matchingBeans.get(0).getScope();\n+                for (DotName jpaListenerDotName : ClassNames.JPA_LISTENER_ANNOTATIONS) {\n+                    for (AnnotationInstance annotationInstance : classInfo.annotations(jpaListenerDotName)) {\n+                        AnnotationTarget target = annotationInstance.target();\n+                        if (target.kind() != AnnotationTarget.Kind.METHOD) {\n+                            continue;\n+                        }\n+                        MethodInfo method = target.asMethod();\n+                        if (Modifier.isPrivate(method.flags())) {\n+                            if (beanScope.getDotName().equals(BuiltinScope.SINGLETON.getName())) {\n+                                // we can safely transform in this case\n+                                producer.produce(new BytecodeTransformerBuildItem(method.declaringClass().name().toString(),\n+                                        new BiFunction<>() {\n+                                            @Override\n+                                            public ClassVisitor apply(String cls, ClassVisitor clsVisitor) {\n+                                                var classTransformer = new ClassTransformer(cls);\n+                                                classTransformer.modifyMethod(MethodDescriptor.of(method))\n+                                                        .removeModifiers(Modifier.PRIVATE);\n+                                                return classTransformer.applyTo(clsVisitor);\n+                                            }\n+                                        }));\n+                            } else {\n+                                // we can't transform because the client proxy does not know about the transformation and\n+                                // will therefore simply copy the private method which will then likely fail because it does\n+                                // not contain the injected fields\n+                                throw new IllegalArgumentException(\n+                                        \"Methods that are annotated with JPA Listener annotations should not be private. Offending method is '\"\n+                                                + method.declaringClass().name() + \"#\" + method.name() + \"'\");\n+                            }\n+                        }\n+                    }\n+                }\n+            } else {\n+                // we don't really know what to do here, just bail and CDI will figure it out\n+            }\n+        }\n+    }\n+\n     @BuildStep\n     void registerAnnotations(BuildProducer<AdditionalBeanBuildItem> additionalBeans,\n             BuildProducer<BeanDefiningAnnotationBuildItem> beanDefiningAnnotations) {\n\ndiff --git a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/JpaJandexScavenger.java b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/JpaJandexScavenger.java\nindex 39acdb297682d..76268a0582f84 100644\n--- a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/JpaJandexScavenger.java\n+++ b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/JpaJandexScavenger.java\n@@ -429,24 +429,13 @@ private void enlistPotentialCdiBeanClasses(Collector collector, DotName dotName)\n \n         for (AnnotationInstance annotation : jpaAnnotations) {\n             AnnotationTarget target = annotation.target();\n-            ClassInfo beanType;\n-            switch (target.kind()) {\n-                case CLASS:\n-                    beanType = target.asClass();\n-                    break;\n-                case FIELD:\n-                    beanType = target.asField().declaringClass();\n-                    break;\n-                case METHOD:\n-                    beanType = target.asMethod().declaringClass();\n-                    break;\n-                case METHOD_PARAMETER:\n-                case TYPE:\n-                case RECORD_COMPONENT:\n-                default:\n-                    throw new IllegalArgumentException(\n-                            \"Annotation \" + dotName + \" was not expected on a target of kind \" + target.kind());\n-            }\n+            ClassInfo beanType = switch (target.kind()) {\n+                case CLASS -> target.asClass();\n+                case FIELD -> target.asField().declaringClass();\n+                case METHOD -> target.asMethod().declaringClass();\n+                default -> throw new IllegalArgumentException(\n+                        \"Annotation \" + dotName + \" was not expected on a target of kind \" + target.kind());\n+            };\n             DotName beanTypeDotName = beanType.name();\n             collector.potentialCdiBeanTypes.add(beanTypeDotName);\n         }\n",
    "test_patch": "diff --git a/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/JpaListenerOnPrivateMethodOfApplicationScopedCdiBeanTest.java b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/JpaListenerOnPrivateMethodOfApplicationScopedCdiBeanTest.java\nnew file mode 100644\nindex 0000000000000..7695ece2223c2\n--- /dev/null\n+++ b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/JpaListenerOnPrivateMethodOfApplicationScopedCdiBeanTest.java\n@@ -0,0 +1,82 @@\n+package io.quarkus.hibernate.orm;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+\n+import jakarta.enterprise.context.ApplicationScoped;\n+import jakarta.persistence.Entity;\n+import jakarta.persistence.EntityListeners;\n+import jakarta.persistence.GeneratedValue;\n+import jakarta.persistence.GenerationType;\n+import jakarta.persistence.Id;\n+import jakarta.persistence.PostPersist;\n+import jakarta.transaction.Transactional;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class JpaListenerOnPrivateMethodOfApplicationScopedCdiBeanTest {\n+\n+    @RegisterExtension\n+    static QuarkusUnitTest runner = new QuarkusUnitTest()\n+            .withApplicationRoot((jar) -> jar\n+                    .addAsResource(\"application.properties\"))\n+            .assertException(e -> {\n+                assertThat(e).isInstanceOf(IllegalArgumentException.class)\n+                        .hasMessageContaining(\"SomeEntityListener#postPersist\");\n+            });\n+\n+    @Test\n+    @Transactional\n+    public void test() {\n+        fail(\"should never be called\");\n+    }\n+\n+    @Entity\n+    @EntityListeners(SomeEntityListener.class)\n+    public static class SomeEntity {\n+        private long id;\n+        private String name;\n+\n+        public SomeEntity() {\n+        }\n+\n+        public SomeEntity(String name) {\n+            this.name = name;\n+        }\n+\n+        @Id\n+        @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"myEntitySeq\")\n+        public long getId() {\n+            return id;\n+        }\n+\n+        public void setId(long id) {\n+            this.id = id;\n+        }\n+\n+        public String getName() {\n+            return name;\n+        }\n+\n+        public void setName(String name) {\n+            this.name = name;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"SomeEntity:\" + name;\n+        }\n+    }\n+\n+    @ApplicationScoped\n+    public static class SomeEntityListener {\n+\n+        @PostPersist\n+        private void postPersist(SomeEntity someEntity) {\n+            fail(\"should not reach here\");\n+        }\n+    }\n+}\n\ndiff --git a/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/JpaListenerOnPrivateMethodOfSingletonCdiBeanTest.java b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/JpaListenerOnPrivateMethodOfSingletonCdiBeanTest.java\nnew file mode 100644\nindex 0000000000000..f970dfc9d9cc0\n--- /dev/null\n+++ b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/JpaListenerOnPrivateMethodOfSingletonCdiBeanTest.java\n@@ -0,0 +1,124 @@\n+package io.quarkus.hibernate.orm;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import jakarta.enterprise.context.ApplicationScoped;\n+import jakarta.inject.Inject;\n+import jakarta.inject.Singleton;\n+import jakarta.persistence.Entity;\n+import jakarta.persistence.EntityListeners;\n+import jakarta.persistence.EntityManager;\n+import jakarta.persistence.GeneratedValue;\n+import jakarta.persistence.GenerationType;\n+import jakarta.persistence.Id;\n+import jakarta.persistence.PostPersist;\n+import jakarta.persistence.PrePersist;\n+import jakarta.transaction.Transactional;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class JpaListenerOnPrivateMethodOfSingletonCdiBeanTest {\n+\n+    @RegisterExtension\n+    static QuarkusUnitTest runner = new QuarkusUnitTest()\n+            .withApplicationRoot((jar) -> jar\n+                    .addAsResource(\"application.properties\"));\n+\n+    @Inject\n+    EventStore eventStore;\n+\n+    @Inject\n+    EntityManager em;\n+\n+    @Test\n+    @Transactional\n+    public void test() {\n+        Arc.container().requestContext().activate();\n+        try {\n+            SomeEntity entity = new SomeEntity(\"test\");\n+            em.persist(entity);\n+            em.flush();\n+        } finally {\n+            Arc.container().requestContext().terminate();\n+        }\n+\n+        assertThat(eventStore.getEvents()).containsExactly(\"prePersist\", \"postPersist\");\n+    }\n+\n+    @Entity\n+    @EntityListeners(SomeEntityListener.class)\n+    public static class SomeEntity {\n+        private long id;\n+        private String name;\n+\n+        public SomeEntity() {\n+        }\n+\n+        public SomeEntity(String name) {\n+            this.name = name;\n+        }\n+\n+        @Id\n+        @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"myEntitySeq\")\n+        public long getId() {\n+            return id;\n+        }\n+\n+        public void setId(long id) {\n+            this.id = id;\n+        }\n+\n+        public String getName() {\n+            return name;\n+        }\n+\n+        public void setName(String name) {\n+            this.name = name;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"SomeEntity:\" + name;\n+        }\n+    }\n+\n+    @Singleton\n+    public static class SomeEntityListener {\n+\n+        private final EventStore eventStore;\n+\n+        public SomeEntityListener(EventStore eventStore) {\n+            this.eventStore = eventStore;\n+        }\n+\n+        @PrePersist\n+        void prePersist(SomeEntity someEntity) {\n+            eventStore.addEvent(\"prePersist\");\n+        }\n+\n+        @PostPersist\n+        private void postPersist(SomeEntity someEntity) {\n+            eventStore.addEvent(\"postPersist\");\n+        }\n+    }\n+\n+    @ApplicationScoped\n+    public static class EventStore {\n+        private final List<String> events = new CopyOnWriteArrayList<>();\n+\n+        public void addEvent(String event) {\n+            events.add(event);\n+        }\n+\n+        public List<String> getEvents() {\n+            return events;\n+        }\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47864",
    "pr_id": 47864,
    "issue_id": 47785,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Issues with `;` in query params causes URIs without a scheme for Quarkus REST\n### Describe the bug\n\nWith a `;` included in the params, the matrix param logic in ResteasyReactiveRequestContext.initPathSegments will set the path, but not the scheme and and authority. If you then directly or indirectly call ResteasyReactiveRequestContext.getAbsoluteURI the constructed absoluteUri will lack a scheme and authority.\n\nSee https://github.com/keycloak/keycloak/issues/39608 - our assumption that the scheme will be present is causing an NPE.\n\n### Expected behavior\n\nResteasyReactiveRequestContext.getAbsoluteURI will be complete.\n\n### Actual behavior\n\nResteasyReactiveRequestContext.getAbsoluteURI is missing information.\n\n### How to Reproduce?\n\nCan provide a unit test in the coming days if needed.\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### Quarkus version or git rev\n\n3.20\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
    "issue_word_count": 143,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java",
      "independent-projects/resteasy-reactive/server/runtime/src/test/java/org/jboss/resteasy/reactive/server/ResteasyReactiveRequestContextTest.java"
    ],
    "pr_changed_test_files": [
      "independent-projects/resteasy-reactive/server/runtime/src/test/java/org/jboss/resteasy/reactive/server/ResteasyReactiveRequestContextTest.java"
    ],
    "base_commit": "8b505d681a9c35dc3fdde9ea23f047e5266083c8",
    "head_commit": "cdddc5d6c9f9b75eabd7fb439351a35790fe4e2b",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47864",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47864",
    "dockerfile": "",
    "pr_merged_at": "2025-05-15T08:06:17.000Z",
    "patch": "diff --git a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java\nindex 289625c40fdcf..4479085d74a65 100644\n--- a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java\n+++ b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java\n@@ -462,12 +462,13 @@ public String getPath() {\n \n     public String getAbsoluteURI() {\n         // if we never changed the path we can use the vert.x URI\n-        if (path == null)\n+        if (path == null) {\n             return serverRequest().getRequestAbsoluteUri();\n+        }\n         // Note: we could store our cache as normalised, but I'm not sure if the vertx one is normalised\n         if (absoluteUri == null) {\n             try {\n-                absoluteUri = new URI(scheme, authority, path, null, null).toASCIIString();\n+                absoluteUri = new URI(getScheme(), getAuthority(), path, null, null).toASCIIString();\n             } catch (URISyntaxException e) {\n                 throw new RuntimeException(e);\n             }\n@@ -476,14 +477,16 @@ public String getAbsoluteURI() {\n     }\n \n     public String getScheme() {\n-        if (scheme == null)\n+        if (scheme == null) {\n             return serverRequest().getRequestScheme();\n+        }\n         return scheme;\n     }\n \n     public String getAuthority() {\n-        if (authority == null)\n+        if (authority == null) {\n             return serverRequest().getRequestHost();\n+        }\n         return authority;\n     }\n \n@@ -1012,7 +1015,7 @@ public void onComplete(Throwable throwable) {\n                         select.destroy(instance);\n                     }\n                 });\n-                return (T) instance;\n+                return instance;\n             }\n         }\n         throw new IllegalStateException(\"Unsupported bean param type: \" + type);\n",
    "test_patch": "diff --git a/independent-projects/resteasy-reactive/server/runtime/src/test/java/org/jboss/resteasy/reactive/server/ResteasyReactiveRequestContextTest.java b/independent-projects/resteasy-reactive/server/runtime/src/test/java/org/jboss/resteasy/reactive/server/ResteasyReactiveRequestContextTest.java\nnew file mode 100644\nindex 0000000000000..3ec01df22a5a7\n--- /dev/null\n+++ b/independent-projects/resteasy-reactive/server/runtime/src/test/java/org/jboss/resteasy/reactive/server/ResteasyReactiveRequestContextTest.java\n@@ -0,0 +1,62 @@\n+package org.jboss.resteasy.reactive.server;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.net.URI;\n+import java.util.concurrent.Executor;\n+\n+import org.jboss.resteasy.reactive.server.core.ResteasyReactiveRequestContext;\n+import org.jboss.resteasy.reactive.server.spi.ServerHttpRequest;\n+import org.jboss.resteasy.reactive.server.spi.ServerHttpResponse;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+public class ResteasyReactiveRequestContextTest {\n+\n+    @Test\n+    void testAbsoluteUriWithOverrides() {\n+        var request = Mockito.mock(ServerHttpRequest.class);\n+        var context = new ResteasyReactiveRequestContext(null, null, null, null) {\n+\n+            @Override\n+            public ServerHttpResponse serverResponse() {\n+                return null;\n+            }\n+\n+            @Override\n+            public ServerHttpRequest serverRequest() {\n+                return request;\n+            }\n+\n+            @Override\n+            public boolean resumeExternalProcessing() {\n+                return false;\n+            }\n+\n+            @Override\n+            public Runnable registerTimer(long millis, Runnable task) {\n+                return null;\n+            }\n+\n+            @Override\n+            protected Executor getEventLoop() {\n+                return null;\n+            }\n+\n+            @Override\n+            protected void setQueryParamsFrom(String uri) {\n+\n+            }\n+        };\n+        Mockito.when(request.getRequestNormalisedPath()).thenReturn(\"/path;a\");\n+        Mockito.when(request.getRequestScheme()).thenReturn(\"http\");\n+        Mockito.when(request.getRequestHost()).thenReturn(\"host:port\");\n+\n+        context.initPathSegments();\n+        assertEquals(\"http://host:port/path\", context.getAbsoluteURI());\n+\n+        context.setRequestUri(URI.create(\"https://host1:port1/path1\"));\n+        assertEquals(\"https://host1:port1/path1\", context.getAbsoluteURI());\n+    }\n+\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47862",
    "pr_id": 47862,
    "issue_id": 9174,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Hibernate Validator error messages not showing on console\n**Describe the bug**\r\nWhen using @Valid annotation, the error messages are not showing on quarkus console. Only on the client side. If the @Valid is not used, the error shows up on the console\r\n\r\n**Expected behavior**\r\nAny error that occurs to be printed on quarkus console\r\n\r\n**To Reproduce**\r\n```java\r\n@POST\r\n    @Transactional\r\n    @Produces(MediaType.APPLICATION_JSON)\r\n    @Consumes(MediaType.APPLICATION_JSON)\r\n    @Operation(summary = \"POST a product\", description = \"Add a new product to the inventory\")\r\n    @APIResponse(responseCode = \"200\", description = \"Product registration successful\")\r\n    @APIResponse(responseCode = \"400\", description = \"Invalid Product\")\r\n    @APIResponse(responseCode = \"500\", description = \"Server unavailable\")\r\n    @APIResponse(description = \"Product\", content = @Content(mediaType = \"application/json\", schema = @Schema(implementation = Product.class)))\r\n    public Response add(Product product) {\r\n        try {\r\n            product.addUUID();\r\n            productService.validateProduct(product);\r\n            productRepository.persist(product);\r\n            return Response.status(Status.CREATED).entity(product).build();\r\n        } catch (ConstraintViolationException e) {\r\n            e.printStackTrace();\r\n            return Response.status(Status.BAD_REQUEST).entity(e.getConstraintViolations()).build();\r\n        }\r\n    }\r\n```\r\n\r\n```java\r\npackage com.github.kgoedert.crm.product;\r\n\r\nimport java.time.LocalDateTime;\r\n\r\nimport javax.persistence.Access;\r\nimport javax.persistence.AccessType;\r\nimport javax.persistence.Column;\r\nimport javax.persistence.Entity;\r\nimport javax.persistence.EnumType;\r\nimport javax.persistence.Enumerated;\r\nimport javax.persistence.GeneratedValue;\r\nimport javax.persistence.GenerationType;\r\nimport javax.persistence.Id;\r\nimport javax.persistence.Lob;\r\nimport javax.persistence.SequenceGenerator;\r\nimport javax.persistence.Table;\r\nimport javax.persistence.Transient;\r\nimport javax.validation.constraints.DecimalMin;\r\nimport javax.validation.constraints.FutureOrPresent;\r\nimport javax.validation.constraints.Min;\r\nimport javax.validation.constraints.NotBlank;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonFormat;\r\nimport com.fasterxml.jackson.annotation.JsonIgnore;\r\nimport com.github.kgoedert.crm.StringEnumeration;\r\nimport com.github.kgoedert.crm.UUID;\r\n\r\nimport org.eclipse.microprofile.openapi.annotations.media.Schema;\r\n\r\nimport io.quarkus.hibernate.orm.panache.PanacheEntityBase;\r\n\r\n@Entity\r\n@Table(name = \"products\")\r\n@Access(AccessType.FIELD)\r\n@Schema(name = \"Product\", description = \"Represents a product in the inventory\")\r\npublic class Product extends PanacheEntityBase {\r\n    @Id\r\n    @GeneratedValue(generator = \"productSeq\", strategy = GenerationType.SEQUENCE)\r\n    @SequenceGenerator(name = \"productSeq\", sequenceName = \"product_id_seq\", allocationSize = 1)\r\n    @JsonIgnore\r\n    private Long id;\r\n\r\n    @Column(name = \"name\")\r\n    @NotBlank(message = \"Name may not be blank\")\r\n    @Schema(required = true, example = \"Rice\")\r\n    private String name;\r\n\r\n    @Column(name = \"price\")\r\n    @DecimalMin(value = \"0.1\", message = \"The price has to be at least 0.1\")\r\n    @Schema(required = true, example = \"10.50\")\r\n    private double price;\r\n\r\n    @Column(name = \"category\")\r\n    @Enumerated(EnumType.STRING)\r\n    @StringEnumeration(enumClass = Category.class)\r\n    @Schema(required = true, example = \"GRAIN\")\r\n    private Category category;\r\n\r\n    @Column(name = \"description\")\r\n    @Schema(required = false, example = \"Imported rice from China\")\r\n    private String description;\r\n\r\n    @Column(name = \"amount\")\r\n    @Min(value = 1, message = \"The product needs to have at least 1 item in stock\")\r\n    @Schema(required = true, example = \"100\")\r\n    private int stockAmount;\r\n\r\n    @Column(name = \"date_created\")\r\n    @Transient\r\n    @FutureOrPresent\r\n    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\")\r\n    @Schema(required = false, readOnly = true, example = \"Date and time product was registered in the server\")\r\n    private LocalDateTime createdAt;\r\n\r\n    @Lob\r\n    @Schema(required = false, example = \"Base64 of an image\")\r\n    private String image;\r\n\r\n    @UUID\r\n    @Schema(required = true, readOnly = true, example = \"123e4567-e89b-12d3-a456-4266141740000\")\r\n    private String uuid;\r\n\r\n    public Product() {\r\n        // for jpa\r\n    }\r\n\r\n    public Product(String uuid, String name, double price, String category, String description, int stockAmount,\r\n            String image) {\r\n        this.uuid = uuid;\r\n        this.name = name;\r\n        this.description = description;\r\n        this.price = price;\r\n        this.category = Category.valueOf(category);\r\n        this.description = description;\r\n        this.stockAmount = stockAmount;\r\n    }\r\n\r\n    public void addUUID() {\r\n        this.uuid = java.util.UUID.randomUUID().toString();\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public double getPrice() {\r\n        return price;\r\n    }\r\n\r\n    public Category getCategory() {\r\n        return category;\r\n    }\r\n\r\n    public int getStockAmount() {\r\n        return stockAmount;\r\n    }\r\n\r\n    public LocalDateTime getCreatedAt() {\r\n        return createdAt;\r\n    }\r\n\r\n    public String getUuid() {\r\n        return uuid;\r\n    }\r\n\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n}\r\n```\r\n\r\n\r\n```java\r\n@ApplicationScoped\r\npublic class ProductService {\r\n    public void validateProduct(@Valid Product product) {\r\n\r\n    }\r\n}\r\n```\r\n\r\nThe full code I am using is also available at [https://github.com/kgoedert/hello-quarkus](https://github.com/kgoedert/hello-quarkus) on the branch practice-3.\r\n\r\n\r\n**Environment (please complete the following information):**\r\n - Output of `uname -a` or `ver`: Darwin MacBook-Pro.local 19.4.0 Darwin Kernel Version 19.4.0: Wed Mar  4 22:28:40 PST 2020; root:xnu-6153.101.6~15/RELEASE_X86_64 x86_64\r\n - Output of `java -version`: openjdk version \"11.0.2\" 2019-01-15\r\nOpenJDK Runtime Environment 18.9 (build 11.0.2+9)\r\nOpenJDK 64-Bit Server VM 18.9 (build 11.0.2+9, mixed mode)\r\n - GraalVM version (if different from Java): \r\n - Quarkus version or git rev: 1.4.2\r\n - Build tool (ie. output of `mvnw --version` or `gradlew --version`): Apache Maven 3.6.3 (cecedd343002696d0abb50b32b541b8a6ba2883f)\r\nMaven home: /Users/kelly/.m2/wrapper/dists/apache-maven-3.6.3-bin/1iopthnavndlasol9gbrbg6bf2/apache-maven-3.6.3\r\nJava version: 11.0.2, vendor: Oracle Corporation, runtime: /Library/Java/JavaVirtualMachines/openjdk-11.0.2.jdk/Contents/Home\r\nDefault locale: en_BR, platform encoding: UTF-8\r\nOS name: \"mac os x\", version: \"10.15.4\", arch: \"x86_64\", family: \"mac\"\r\n\r\n",
    "issue_word_count": 759,
    "test_files_count": 1,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "test-framework/common/src/main/java/io/quarkus/test/common/RestAssuredURLManager.java"
    ],
    "pr_changed_test_files": [
      "test-framework/common/src/main/java/io/quarkus/test/common/RestAssuredURLManager.java"
    ],
    "base_commit": "2b9b96ee16c10148b94af3693e976def374bd8d9",
    "head_commit": "e006a5acc775e00e6ca5502c4be07764e0d8619a",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47862",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47862",
    "dockerfile": "",
    "pr_merged_at": "2025-05-15T09:09:28.000Z",
    "patch": "",
    "test_patch": "diff --git a/test-framework/common/src/main/java/io/quarkus/test/common/RestAssuredURLManager.java b/test-framework/common/src/main/java/io/quarkus/test/common/RestAssuredURLManager.java\nindex 45ac979b47767..0f96d44d2a5ed 100644\n--- a/test-framework/common/src/main/java/io/quarkus/test/common/RestAssuredURLManager.java\n+++ b/test-framework/common/src/main/java/io/quarkus/test/common/RestAssuredURLManager.java\n@@ -8,6 +8,7 @@\n import io.restassured.RestAssured;\n import io.restassured.config.HttpClientConfig;\n import io.restassured.config.RestAssuredConfig;\n+import io.restassured.specification.RequestSpecification;\n \n /**\n  * Utility class that sets the rest assured port to the default test port and meaningful timeouts.\n@@ -26,6 +27,7 @@ public class RestAssuredURLManager {\n     private static String oldBaseURI;\n     private static String oldBasePath;\n     private static Object oldRestAssuredConfig; // we can't declare the type here as that would prevent this class for being loaded if RestAssured is not present\n+    private static Object oldRequestSpecification;\n \n     private static final boolean REST_ASSURED_PRESENT;\n \n@@ -113,14 +115,17 @@ public static void setURL(boolean useSecureConnection, Integer port, String addi\n             RestAssured.basePath = bp.toString();\n         }\n \n+        oldRestAssuredConfig = RestAssured.config();\n+\n         Duration timeout = ConfigProvider.getConfig()\n                 .getOptionalValue(\"quarkus.http.test-timeout\", Duration.class).orElse(Duration.ofSeconds(30));\n         configureTimeouts(timeout);\n+\n+        oldRequestSpecification = RestAssured.requestSpecification;\n+        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();\n     }\n \n     private static void configureTimeouts(Duration d) {\n-        oldRestAssuredConfig = RestAssured.config();\n-\n         RestAssured.config = RestAssured.config().httpClient(new HttpClientConfig()\n                 .setParam(\"http.conn-manager.timeout\", d.toMillis()) // this needs to be long\n                 .setParam(\"http.connection.timeout\", (int) d.toMillis()) // this needs to be int\n@@ -136,5 +141,6 @@ public static void clearURL() {\n         RestAssured.baseURI = oldBaseURI;\n         RestAssured.basePath = oldBasePath;\n         RestAssured.config = (RestAssuredConfig) oldRestAssuredConfig;\n+        RestAssured.requestSpecification = (RequestSpecification) oldRequestSpecification;\n     }\n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47829",
    "pr_id": 47829,
    "issue_id": 47794,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Quarkus 3.22 - Gradle Unit Tests do not run in multi module setup when not all modules have a test\n### Describe the bug\n\n1. Run `./gradlew quarkusDev` \n2. Toggle test output \n3. run tests\n\n### Expected behavior\n\nTests run\n\n### Actual behavior\n\n```\njava.lang.RuntimeException: java.util.NoSuchElementException: No value present\n        at io.quarkus.deployment.dev.testing.JunitTestRunner.prepare(JunitTestRunner.java:447)\n        at io.quarkus.deployment.dev.testing.ModuleTestRunner.prepare(ModuleTestRunner.java:83)\n        at io.quarkus.deployment.dev.testing.TestSupport.runInternal(TestSupport.java:430)\n        at io.quarkus.deployment.dev.testing.TestSupport$3.run(TestSupport.java:389)\n        at java.base/java.lang.Thread.run(Thread.java:1583)\nCaused by: java.util.NoSuchElementException: No value present\n        at java.base/java.util.Optional.get(Optional.java:143)\n        at io.quarkus.deployment.dev.testing.JunitTestRunner.discoverTestClasses(JunitTestRunner.java:716)\n        at io.quarkus.deployment.dev.testing.JunitTestRunner.prepare(JunitTestRunner.java:166)\n        ... 4 more\n```\n\n### How to Reproduce?\n\nhttps://github.com/kesslerd/quarkus-gradle-unit-test-bug\n\nI have a gradle project with multiple modules. \nNot all modules contain a test folder\nThe setup works with 3.21.4\n\n\n\n### Output of `uname -a` or `ver`\n\n24.3.0 Darwin Kernel Version 24.3.0: Thu Jan  2 20:24:16 PST 2025; root:xnu-11215.81.4~3/RELEASE_ARM64_T6000 arm6\n\n### Output of `java -version`\n\nOpenJDK Runtime Environment Zulu21.40+17-CA (build 21.0.6+7-LTS)\n\n### Quarkus version or git rev\n\n3.22.1\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nGradle 8.14\n\n### Additional information\n\n_No response_",
    "issue_word_count": 253,
    "test_files_count": 1,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "core/deployment/src/main/java/io/quarkus/deployment/dev/testing/JunitTestRunner.java"
    ],
    "pr_changed_test_files": [
      "core/deployment/src/main/java/io/quarkus/deployment/dev/testing/JunitTestRunner.java"
    ],
    "base_commit": "af0144111a80a5c5215d4e7eaded136615ea0f11",
    "head_commit": "0243281d9c3cb44cf2d103fd9f46999ebf050313",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47829",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47829",
    "dockerfile": "",
    "pr_merged_at": "2025-05-13T21:33:07.000Z",
    "patch": "",
    "test_patch": "diff --git a/core/deployment/src/main/java/io/quarkus/deployment/dev/testing/JunitTestRunner.java b/core/deployment/src/main/java/io/quarkus/deployment/dev/testing/JunitTestRunner.java\nindex 05f848e36eb92..92fcdce011a6b 100644\n--- a/core/deployment/src/main/java/io/quarkus/deployment/dev/testing/JunitTestRunner.java\n+++ b/core/deployment/src/main/java/io/quarkus/deployment/dev/testing/JunitTestRunner.java\n@@ -569,21 +569,23 @@ private DiscoveryResult discoverTestClasses() {\n         //for now this is out of scope, we are just going to do annotation based discovery\n         //we will need to fix this sooner rather than later though\n \n+        if (moduleInfo.getTest().isEmpty()) {\n+            return DiscoveryResult.EMPTY;\n+        }\n+\n         //we also only run tests from the current module, which we can also revisit later\n         Indexer indexer = new Indexer();\n-        moduleInfo.getTest().ifPresent(test -> {\n-            try (Stream<Path> files = Files.walk(Paths.get(test.getClassesPath()))) {\n-                files.filter(s -> s.getFileName().toString().endsWith(\".class\")).forEach(s -> {\n-                    try (InputStream in = Files.newInputStream(s)) {\n-                        indexer.index(in);\n-                    } catch (IOException e) {\n-                        throw new RuntimeException(e);\n-                    }\n-                });\n-            } catch (IOException e) {\n-                throw new RuntimeException(e);\n-            }\n-        });\n+        try (Stream<Path> files = Files.walk(Paths.get(moduleInfo.getTest().get().getClassesPath()))) {\n+            files.filter(s -> s.getFileName().toString().endsWith(\".class\")).forEach(s -> {\n+                try (InputStream in = Files.newInputStream(s)) {\n+                    indexer.index(in);\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            });\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n \n         Index index = indexer.complete();\n         //we now have all the classes by name\n@@ -699,6 +701,20 @@ private DiscoveryResult discoverTestClasses() {\n             unitTestClasses.add(name);\n         }\n \n+        // if we didn't find any test classes, let's return early\n+        // Make sure you also update the logic for the non-empty case above if you adjust this part\n+        if (testType == TestType.ALL) {\n+            if (unitTestClasses.isEmpty() && quarkusTestClasses.isEmpty()) {\n+                return DiscoveryResult.EMPTY;\n+            }\n+        } else if (testType == TestType.UNIT) {\n+            if (unitTestClasses.isEmpty()) {\n+                return DiscoveryResult.EMPTY;\n+            }\n+        } else if (quarkusTestClasses.isEmpty()) {\n+            return DiscoveryResult.EMPTY;\n+        }\n+\n         List<Class<?>> itClasses = new ArrayList<>();\n         List<Class<?>> utClasses = new ArrayList<>();\n \n@@ -809,6 +825,7 @@ public String apply(Class<?> aClass) {\n             }\n         }\n \n+        // Make sure you also update the logic for the empty case above if you adjust this part\n         if (testType == TestType.ALL) {\n             //run unit style tests first\n             //before the quarkus tests have started\n@@ -1271,6 +1288,8 @@ public FilterResult apply(TestDescriptor testDescriptor) {\n \n     static class DiscoveryResult implements AutoCloseable {\n \n+        private final static DiscoveryResult EMPTY = new DiscoveryResult(null, List.of());\n+\n         final QuarkusClassLoader classLoader;\n         final List<Class<?>> testClasses;\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47825",
    "pr_id": 47825,
    "issue_id": 47797,
    "repo": "quarkusio/quarkus",
    "problem_statement": "quarkus-maven-plugin throws error when using an additional custom resource directory\n### Describe the bug\n\nWe are using an additional resource directory in our project. In the attached example it looks like this:\n\n```\n<resources>\n     <resource>\n            <directory>src/main/resources</directory>\n            <filtering>true</filtering>\n     </resource>\n     <resource>\n            <directory>src/main/my-custom-files</directory>\n            <targetPath>/${project.build.directory}/my-custom-files</targetPath>\n            <filtering>true</filtering>\n     </resource>\n</resources>\n```\n\nStarting with the version 3.21.4 of the quarkus-maven-plugin, the build fails when starting QuarkusTest or starting in dev mode. The following exeption is thrown:\n\n```\njava.lang.RuntimeException: io.quarkus.builder.BuildException: Build failure: Build failed due to errors\n\t[error]: Build step io.quarkus.deployment.steps.CompiledJavaVersionBuildStep#compiledJavaVersion threw an exception: java.io.UncheckedIOException: Failed to walk directory /${project.build.directory}/my-custom-files\n\tat io.quarkus.paths.PathTreeVisit.walk(PathTreeVisit.java:31)\n\tat io.quarkus.paths.OpenContainerPathTree.walk(OpenContainerPathTree.java:105)\n\tat io.quarkus.paths.MultiRootPathTree.walk(MultiRootPathTree.java:65)\n\tat io.quarkus.deployment.steps.CompiledJavaVersionBuildStep.getMajorJavaVersion(CompiledJavaVersionBuildStep.java:48)\n\tat io.quarkus.deployment.steps.CompiledJavaVersionBuildStep.compiledJavaVersion(CompiledJavaVersionBuildStep.java:28)\n\tat java.base/java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:733)\n\tat io.quarkus.deployment.ExtensionLoader$3.execute(ExtensionLoader.java:856)\n\tat io.quarkus.builder.BuildContext.run(BuildContext.java:255)\n```\nWhen skipping the tests, the build works as expected.\n\nI have linked a example, where you can reproduce it easily. Because I never was working on a maven plugin, I thought it's more efficient to create a bug instead of trying to fix it by myself.\n\n\n### Expected behavior\n\nWhen starting a QuarkusTest or in Dev-Mode, the directory in the project build directory should be created with the expected content of the additional resource directory.\n\n### Actual behavior\n\nIt throws the exception:\n\n```\njava.lang.RuntimeException: io.quarkus.builder.BuildException: Build failure: Build failed due to errors\n\t[error]: Build step io.quarkus.deployment.steps.CompiledJavaVersionBuildStep#compiledJavaVersion threw an exception: java.io.UncheckedIOException: Failed to walk directory /${project.build.directory}/my-custom-files\n\tat io.quarkus.paths.PathTreeVisit.walk(PathTreeVisit.java:31)\n\tat io.quarkus.paths.OpenContainerPathTree.walk(OpenContainerPathTree.java:105)\n\tat io.quarkus.paths.MultiRootPathTree.walk(MultiRootPathTree.java:65)\n\tat io.quarkus.deployment.steps.CompiledJavaVersionBuildStep.getMajorJavaVersion(CompiledJavaVersionBuildStep.java:48)\n\tat io.quarkus.deployment.steps.CompiledJavaVersionBuildStep.compiledJavaVersion(CompiledJavaVersionBuildStep.java:28)\n\tat java.base/java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:733)\n\tat io.quarkus.deployment.ExtensionLoader$3.execute(ExtensionLoader.java:856)\n\tat io.quarkus.builder.BuildContext.run(BuildContext.java:255)\n```\n\n### How to Reproduce?\n\n\n1. checkout https://github.com/markushager-itsv/maven-resource-error\n2. run 'mvn clean package'\n\nIf you replace the current version of the plugin with the version 3.21.3, the tests and the dev mode will work.\n\n### Output of `uname -a` or `ver`\n\nLinux XXXX 5.15.167.4-microsoft-standard-WSL2 #1 SMP Tue Nov 5 00:21:55 UTC 2024 x86_64 GNU/Linux\n\n### Output of `java -version`\n\nopenjdk version \"17.0.12\" 2024-07-16 OpenJDK Runtime Environment Temurin-17.0.12+7 (build 17.0.12+7) OpenJDK 64-Bit Server VM Temurin-17.0.12+7 (build 17.0.12+7, mixed mode, sharing)\n\n### Quarkus version or git rev\n\n3.22.2\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nApache Maven 3.9.9 (8e8579a9e76f7d015ee5ec7bfcdc97d260186937) Maven home: /home/mhager/.sdkman/candidates/maven/current Java version: 17.0.12, vendor: Eclipse Adoptium, runtime: /home/mhager/.sdkman/candidates/java/17.0.12-tem Default locale: en_US, platform encoding: UTF-8 OS name: \"linux\", version: \"5.15.167.4-microsoft-standard-wsl2\", arch: \"amd64\", family: \"unix\"\n\n### Additional information\n\n_No response_",
    "issue_word_count": 595,
    "test_files_count": 8,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/LocalProject.java",
      "independent-projects/bootstrap/maven-resolver/src/test/java/io/quarkus/bootstrap/workspace/test/LocalWorkspaceDiscoveryTest.java",
      "independent-projects/bootstrap/maven-resolver/src/test/resources/custom-resource-dirs/pom.xml",
      "integration-tests/maven/src/test/java/io/quarkus/maven/it/BuildIT.java",
      "integration-tests/maven/src/test/resources-filtered/projects/custom-resources-dir/pom.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/custom-resources-dir/src/main/java/org/acme/GreetingResource.java",
      "integration-tests/maven/src/test/resources-filtered/projects/custom-resources-dir/src/main/my-custom-files/my-custom-text-file.txt",
      "integration-tests/maven/src/test/resources-filtered/projects/custom-resources-dir/src/test/java/org/acme/GreetingResourceTest.java",
      "integration-tests/maven/src/test/resources-filtered/projects/custom-resources-dir/src/test/my-custom-test-text-files/my-custom-test-text-file.txt"
    ],
    "pr_changed_test_files": [
      "independent-projects/bootstrap/maven-resolver/src/test/java/io/quarkus/bootstrap/workspace/test/LocalWorkspaceDiscoveryTest.java",
      "independent-projects/bootstrap/maven-resolver/src/test/resources/custom-resource-dirs/pom.xml",
      "integration-tests/maven/src/test/java/io/quarkus/maven/it/BuildIT.java",
      "integration-tests/maven/src/test/resources-filtered/projects/custom-resources-dir/pom.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/custom-resources-dir/src/main/java/org/acme/GreetingResource.java",
      "integration-tests/maven/src/test/resources-filtered/projects/custom-resources-dir/src/main/my-custom-files/my-custom-text-file.txt",
      "integration-tests/maven/src/test/resources-filtered/projects/custom-resources-dir/src/test/java/org/acme/GreetingResourceTest.java",
      "integration-tests/maven/src/test/resources-filtered/projects/custom-resources-dir/src/test/my-custom-test-text-files/my-custom-test-text-file.txt"
    ],
    "base_commit": "eb5e42b58c1db0eb355825b1248b1af1f4c8e75f",
    "head_commit": "99d2dd6a5a990449c9aa5d950927063e5d9aa0e2",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47825",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47825",
    "dockerfile": "",
    "pr_merged_at": "2025-05-13T17:00:50.000Z",
    "patch": "diff --git a/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/LocalProject.java b/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/LocalProject.java\nindex 93599ae307f41..c8ff9e1eb849a 100644\n--- a/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/LocalProject.java\n+++ b/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/LocalProject.java\n@@ -347,16 +347,62 @@ public Path resolveRelativeToBaseDir(String path) {\n         return resolveRelativeToBaseDir(path, null);\n     }\n \n-    Path resolveRelativeToBaseDir(String path, String defaultPath) {\n-        return dir.resolve(path == null ? defaultPath : stripProjectBasedirPrefix(path, PROJECT_BASEDIR));\n+    Path resolveRelativeToBaseDir(String pathStr, String defaultPath) {\n+        if (pathStr == null) {\n+            return dir.resolve(defaultPath);\n+        }\n+        var path = resolveProjectPropertyPathOrNull(pathStr);\n+        return path == null ? dir.resolve(pathStr) : path;\n+    }\n+\n+    private Path resolveRelativeToBuildDir(String pathStr, String defaultPath) {\n+        if (pathStr == null) {\n+            return getOutputDir().resolve(defaultPath);\n+        }\n+        var path = resolveProjectPropertyPathOrNull(pathStr);\n+        return path == null ? getOutputDir().resolve(pathStr) : path;\n+    }\n+\n+    private Path resolveRelativeToDir(Path baseDir, String pathStr) {\n+        if (pathStr == null) {\n+            return baseDir;\n+        }\n+        var path = resolveProjectPropertyPathOrNull(pathStr);\n+        return path == null ? baseDir.resolve(pathStr) : path;\n+    }\n+\n+    Path resolveProjectPropertyPathOrNull(String pathStr) {\n+        final int propertyStart = getProjectPropertySuffixIndex(pathStr);\n+        if (propertyStart >= 0) {\n+            String relativePath = getRelativePath(pathStr, propertyStart, \"basedir}\");\n+            if (relativePath != null) {\n+                return relativePath.isEmpty() ? dir : dir.resolve(relativePath);\n+            }\n+            relativePath = getRelativePath(pathStr, propertyStart, \"build.directory}\");\n+            if (relativePath != null) {\n+                return relativePath.isEmpty() ? getOutputDir() : getOutputDir().resolve(relativePath);\n+            }\n+            relativePath = getRelativePath(pathStr, propertyStart, \"build.outputDirectory}\");\n+            if (relativePath != null) {\n+                return relativePath.isEmpty() ? getClassesDir() : getClassesDir().resolve(relativePath);\n+            }\n+        }\n+        return null;\n     }\n \n-    private Path resolveRelativeToBuildDir(String path, String defaultPath) {\n-        return getOutputDir().resolve(path == null ? defaultPath : stripProjectBasedirPrefix(path, PROJECT_BUILD_DIR));\n+    private static String getRelativePath(String pathStr, int elementStart, String pathElement) {\n+        if (!pathStr.regionMatches(elementStart, pathElement, 0, pathElement.length())) {\n+            return null;\n+        }\n+        return pathStr.length() == elementStart + pathElement.length() ? \"\"\n+                : pathStr.substring(elementStart + pathElement.length() + 1);\n     }\n \n-    static String stripProjectBasedirPrefix(String path, String expr) {\n-        return path.startsWith(expr) ? path.substring(expr.length() + 1) : path;\n+    private static int getProjectPropertySuffixIndex(String pathStr) {\n+        final String projectProdPrefix = \"${project.\";\n+        // we are not using startWith here because, apparently, there could be preceding '/' characters, although it doesn't seem to make sense\n+        final int propertyStart = pathStr.indexOf(projectProdPrefix);\n+        return propertyStart < 0 ? propertyStart : propertyStart + projectProdPrefix.length();\n     }\n \n     private static String configuredBuildDir(LocalProject project, Function<Build, String> f) {\n@@ -368,11 +414,6 @@ private static String configuredBuildDir(LocalProject project, Function<Build, S\n             }\n             if (project.rawModel.getBuild() != null) {\n                 dir = f.apply(project.rawModel.getBuild());\n-                // in case the \"raw\" model is passed in from the reactor by the QuarkusBootstrapProvider,\n-                // the Build will contain an effective config, so we need to take the relative path\n-                if (dir != null) {\n-                    // TODO\n-                }\n             }\n         }\n         return dir;\n@@ -483,7 +524,7 @@ private boolean addSourceSetsFromPlugins(List<Plugin> plugins, WorkspaceModule.M\n                         final List<String> list = new ArrayList<>(elements.length);\n                         for (Xpp3Dom element : elements) {\n                             for (String s : element.getValue().split(\",\")) {\n-                                list.add(stripProjectBasedirPrefix(s, PROJECT_BASEDIR));\n+                                list.add(resolveRelativeToBaseDir(s).toString());\n                             }\n                         }\n                         moduleBuilder.setAdditionalTestClasspathElements(list);\n@@ -573,8 +614,9 @@ private static String getClassifier(Xpp3Dom dom, boolean test) {\n     }\n \n     private Collection<SourceDir> collectMainResources(PathFilter filter) {\n-        final List<Resource> resources = rawModel.getBuild() == null ? List.of()\n-                : rawModel.getBuild().getResources();\n+        final Model model = effectiveModel == null ? rawModel : effectiveModel;\n+        final List<Resource> resources = model.getBuild() == null ? List.of()\n+                : model.getBuild().getResources();\n         final Path classesDir = getClassesDir();\n         final Path generatedSourcesDir = getGeneratedSourcesDir();\n         if (resources.isEmpty()) {\n@@ -590,11 +632,10 @@ private Collection<SourceDir> collectMainResources(PathFilter filter) {\n                     new DefaultSourceDir(\n                             new DirectoryPathTree(resolveRelativeToBaseDir(r.getDirectory(), SRC_MAIN_RESOURCES)),\n                             new DirectoryPathTree((r.getTargetPath() == null ? classesDir\n-                                    : classesDir.resolve(stripProjectBasedirPrefix(r.getTargetPath(), PROJECT_OUTPUT_DIR))),\n+                                    : resolveRelativeToDir(classesDir, r.getTargetPath())),\n                                     filter),\n                             new DirectoryPathTree((r.getTargetPath() == null ? generatedSourcesDir\n-                                    : generatedSourcesDir.resolve(\n-                                            stripProjectBasedirPrefix(r.getTargetPath(), PROJECT_GENERATED_SOURCES_DIR))),\n+                                    : resolveRelativeToDir(generatedSourcesDir, r.getTargetPath())),\n                                     filter),\n                             Map.of()));\n         }\n@@ -602,10 +643,10 @@ private Collection<SourceDir> collectMainResources(PathFilter filter) {\n     }\n \n     private Collection<SourceDir> collectTestResources(PathFilter filter) {\n-        final List<Resource> resources = rawModel.getBuild() == null ? List.of()\n-                : rawModel.getBuild().getTestResources();\n+        final Model model = effectiveModel == null ? rawModel : effectiveModel;\n+        final List<Resource> resources = model.getBuild() == null ? List.of()\n+                : model.getBuild().getTestResources();\n         final Path testClassesDir = getTestClassesDir();\n-        final Path generatedSourcesDir = getGeneratedSourcesDir();\n         if (resources.isEmpty()) {\n             return List.of(new DefaultSourceDir(\n                     new DirectoryPathTree(resolveRelativeToBaseDir(null, SRC_TEST_RESOURCES)),\n@@ -620,7 +661,7 @@ private Collection<SourceDir> collectTestResources(PathFilter filter) {\n                     new DefaultSourceDir(\n                             new DirectoryPathTree(resolveRelativeToBaseDir(r.getDirectory(), SRC_TEST_RESOURCES)),\n                             new DirectoryPathTree((r.getTargetPath() == null ? testClassesDir\n-                                    : testClassesDir.resolve(stripProjectBasedirPrefix(r.getTargetPath(), PROJECT_OUTPUT_DIR))),\n+                                    : resolveRelativeToDir(testClassesDir, r.getTargetPath())),\n                                     filter),\n                             // FIXME: do tests have generated sources?\n                             null,\n",
    "test_patch": "diff --git a/independent-projects/bootstrap/maven-resolver/src/test/java/io/quarkus/bootstrap/workspace/test/LocalWorkspaceDiscoveryTest.java b/independent-projects/bootstrap/maven-resolver/src/test/java/io/quarkus/bootstrap/workspace/test/LocalWorkspaceDiscoveryTest.java\nindex d45af6239d000..af1f322e9a8e9 100644\n--- a/independent-projects/bootstrap/maven-resolver/src/test/java/io/quarkus/bootstrap/workspace/test/LocalWorkspaceDiscoveryTest.java\n+++ b/independent-projects/bootstrap/maven-resolver/src/test/java/io/quarkus/bootstrap/workspace/test/LocalWorkspaceDiscoveryTest.java\n@@ -11,11 +11,12 @@\n import static org.junit.jupiter.api.Assertions.fail;\n \n import java.io.File;\n+import java.net.URISyntaxException;\n import java.net.URL;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.nio.file.Paths;\n import java.util.Collection;\n+import java.util.Iterator;\n import java.util.Map;\n import java.util.Properties;\n \n@@ -124,6 +125,44 @@ public static void cleanup() {\n         IoUtils.recursiveDelete(workDir);\n     }\n \n+    private static Path getModuleDir(String name) {\n+        final URL moduleUrl = Thread.currentThread().getContextClassLoader().getResource(name);\n+        assertNotNull(moduleUrl);\n+        try {\n+            return Path.of(moduleUrl.toURI());\n+        } catch (URISyntaxException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Test\n+    public void customResourceDirectories() throws Exception {\n+        var project = LocalProject.loadWorkspace(getModuleDir(\"custom-resource-dirs\"));\n+        assertThat(project).isNotNull();\n+\n+        var module = project.toWorkspaceModule();\n+        assertThat(module).isNotNull();\n+        var mainSources = module.getMainSources();\n+        var resourceDirs = mainSources.getResourceDirs().iterator();\n+\n+        assertThat(resourceDirs).hasNext();\n+        SourceDir resourceDir = resourceDirs.next();\n+        assertThat(resourceDir.getDir()).isEqualTo(project.getDir().resolve(\"relative-base-dir\"));\n+        assertThat(resourceDir.getOutputDir()).isEqualTo(project.getDir().resolve(\"target/classes/META-INF/resources\"));\n+\n+        assertThat(resourceDirs).hasNext();\n+        resourceDir = resourceDirs.next();\n+        assertThat(resourceDir.getDir()).isEqualTo(project.getDir().resolve(\"src/main/custom\"));\n+        assertThat(resourceDir.getOutputDir()).isEqualTo(project.getDir().resolve(\"target/processed-custom\"));\n+\n+        assertThat(resourceDirs).hasNext();\n+        resourceDir = resourceDirs.next();\n+        assertThat(resourceDir.getDir()).isEqualTo(project.getDir().resolve(\"src/main/other\"));\n+        assertThat(resourceDir.getOutputDir()).isEqualTo(project.getDir().resolve(\"target/classes\"));\n+\n+        assertThat(resourceDirs).isExhausted();\n+    }\n+\n     /**\n      * This test is making sure the current module isn't overridden by another module\n      * from the workspace that happens to have the same group and artifact IDs\n@@ -132,11 +171,7 @@ public static void cleanup() {\n      */\n     @Test\n     public void workspaceWithDuplicateModuleGroupIdAndArtifactId() throws Exception {\n-        final URL moduleUrl = Thread.currentThread().getContextClassLoader()\n-                .getResource(\"duplicate-ga/test/case\");\n-        assertNotNull(moduleUrl);\n-        final Path moduleDir = Path.of(moduleUrl.toURI());\n-        assertNotNull(moduleUrl);\n+        final Path moduleDir = getModuleDir(\"duplicate-ga/test/case\");\n \n         final LocalWorkspace ws = LocalProject.loadWorkspace(moduleDir).getWorkspace();\n \n@@ -150,11 +185,7 @@ public void workspaceWithDuplicateModuleGroupIdAndArtifactId() throws Exception\n \n     @Test\n     public void moduleWithDifferentParentPomRawModel() throws Exception {\n-        final URL moduleUrl = Thread.currentThread().getContextClassLoader()\n-                .getResource(\"workspace-module-with-different-parent\");\n-        assertNotNull(moduleUrl);\n-        final Path moduleDir = Path.of(moduleUrl.toURI());\n-        assertNotNull(moduleUrl);\n+        final Path moduleDir = getModuleDir(\"workspace-module-with-different-parent\");\n \n         final LocalWorkspace ws = LocalProject.loadWorkspace(moduleDir).getWorkspace();\n \n@@ -168,11 +199,7 @@ public void moduleWithDifferentParentPomRawModel() throws Exception {\n \n     @Test\n     public void moduleWithDifferentParentPomEffectiveModel() throws Exception {\n-        final URL moduleUrl = Thread.currentThread().getContextClassLoader()\n-                .getResource(\"workspace-module-with-different-parent\");\n-        assertNotNull(moduleUrl);\n-        final Path moduleDir = Path.of(moduleUrl.toURI());\n-        assertNotNull(moduleUrl);\n+        final Path moduleDir = getModuleDir(\"workspace-module-with-different-parent\");\n \n         final LocalWorkspace ws = new BootstrapMavenContext(BootstrapMavenContext.config()\n                 .setEffectiveModelBuilder(true)\n@@ -189,15 +216,8 @@ public void moduleWithDifferentParentPomEffectiveModel() throws Exception {\n \n     @Test\n     public void nonParentAggregator() throws Exception {\n-        final URL moduleUrl = Thread.currentThread().getContextClassLoader()\n-                .getResource(\"non-parent-aggregator/service-extension/deployment\");\n-        assertNotNull(moduleUrl);\n-        final Path moduleDir = Paths.get(moduleUrl.toURI());\n-\n-        final URL aggregatorUrl = Thread.currentThread().getContextClassLoader()\n-                .getResource(\"non-parent-aggregator/aggregator\");\n-        assertNotNull(aggregatorUrl);\n-        final Path aggregatorDir = Paths.get(aggregatorUrl.toURI());\n+        final Path moduleDir = getModuleDir(\"non-parent-aggregator/service-extension/deployment\");\n+        final Path aggregatorDir = getModuleDir(\"non-parent-aggregator/aggregator\");\n \n         final String topLevelBaseDirProp = \"maven.top-level-basedir\";\n         final String originalBaseDir = System.getProperty(topLevelBaseDirProp);\n@@ -229,10 +249,7 @@ public void nonParentAggregator() throws Exception {\n \n     @Test\n     public void loadEffectiveModelBuilderModulesInProfiles() throws Exception {\n-        final URL moduleUrl = Thread.currentThread().getContextClassLoader()\n-                .getResource(\"modules-in-profiles/integration-tests/rest-tests\");\n-        assertNotNull(moduleUrl);\n-        final Path moduleDir = Path.of(moduleUrl.toURI());\n+        final Path moduleDir = getModuleDir(\"modules-in-profiles/integration-tests/rest-tests\");\n \n         final LocalProject module1 = new BootstrapMavenContext(BootstrapMavenContext.config()\n                 .setEffectiveModelBuilder(true)\n@@ -252,10 +269,7 @@ public void loadEffectiveModelBuilderModulesInProfiles() throws Exception {\n \n     @Test\n     public void loadModulesInProfiles() throws Exception {\n-        final URL moduleUrl = Thread.currentThread().getContextClassLoader()\n-                .getResource(\"modules-in-profiles/integration-tests/rest-tests\");\n-        assertNotNull(moduleUrl);\n-        final Path moduleDir = Path.of(moduleUrl.toURI());\n+        final Path moduleDir = getModuleDir(\"modules-in-profiles/integration-tests/rest-tests\");\n \n         final LocalProject module1 = new BootstrapMavenContext(BootstrapMavenContext.config()\n                 .setCurrentProject(moduleDir.toString()))\n@@ -274,10 +288,7 @@ public void loadModulesInProfiles() throws Exception {\n \n     @Test\n     public void loadOverlappingWorkspaceLayout() throws Exception {\n-        final URL moduleUrl = Thread.currentThread().getContextClassLoader()\n-                .getResource(\"overlapping-workspace-layout/root/root/module1\");\n-        assertNotNull(moduleUrl);\n-        final Path moduleDir = Paths.get(moduleUrl.toURI());\n+        final Path moduleDir = getModuleDir(\"overlapping-workspace-layout/root/root/module1\");\n \n         final LocalProject module1 = new BootstrapMavenContext(BootstrapMavenContext.config()\n                 .setCurrentProject(moduleDir.toString()))\n@@ -294,9 +305,7 @@ public void loadOverlappingWorkspaceLayout() throws Exception {\n \n     @Test\n     public void loadWorkspaceWithDirBreaks() throws Exception {\n-        final URL projectUrl = Thread.currentThread().getContextClassLoader().getResource(\"workspace-with-dir-breaks/root\");\n-        assertNotNull(projectUrl);\n-        final Path rootProjectDir = Paths.get(projectUrl.toURI());\n+        final Path rootProjectDir = getModuleDir(\"workspace-with-dir-breaks/root\");\n         assertTrue(Files.exists(rootProjectDir));\n         final Path nestedProjectDir = rootProjectDir.resolve(\"module1/break/nested-project/module1\");\n         assertTrue(Files.exists(nestedProjectDir));\n@@ -315,9 +324,7 @@ public void loadWorkspaceWithDirBreaks() throws Exception {\n \n     @Test\n     public void loadWorkspaceWithMissingModule() throws Exception {\n-        final URL projectUrl = Thread.currentThread().getContextClassLoader().getResource(\"workspace-missing-module/root\");\n-        assertNotNull(projectUrl);\n-        final Path rootProjectDir = Paths.get(projectUrl.toURI());\n+        final Path rootProjectDir = getModuleDir(\"workspace-missing-module/root\");\n         assertTrue(Files.exists(rootProjectDir));\n         final Path nestedProjectDir = rootProjectDir.resolve(\"module1\");\n         assertTrue(Files.exists(nestedProjectDir));\n@@ -333,9 +340,7 @@ public void loadWorkspaceWithMissingModule() throws Exception {\n \n     @Test\n     public void loadWorkspaceRootWithNoModules() throws Exception {\n-        final URL projectUrl = Thread.currentThread().getContextClassLoader().getResource(\"workspace-root-no-module/root\");\n-        assertNotNull(projectUrl);\n-        final Path rootProjectDir = Paths.get(projectUrl.toURI());\n+        final Path rootProjectDir = getModuleDir(\"workspace-root-no-module/root\");\n         assertTrue(Files.exists(rootProjectDir));\n         final Path nestedProjectDir = rootProjectDir.resolve(\"module1/module2\");\n         assertTrue(Files.exists(nestedProjectDir));\n@@ -353,9 +358,7 @@ public void loadWorkspaceRootWithNoModules() throws Exception {\n \n     @Test\n     public void loadWorkspaceFromRootDirWithParentInChildDir() throws Exception {\n-        final URL projectUrl = Thread.currentThread().getContextClassLoader().getResource(\"workspace-parent-is-not-root-dir\");\n-        assertNotNull(projectUrl);\n-        final Path projectDir = Paths.get(projectUrl.toURI());\n+        final Path projectDir = getModuleDir(\"workspace-parent-is-not-root-dir\");\n         assertTrue(Files.exists(projectDir));\n         final LocalProject project = LocalProject.loadWorkspace(projectDir);\n \n@@ -366,9 +369,7 @@ public void loadWorkspaceFromRootDirWithParentInChildDir() throws Exception {\n \n     @Test\n     public void loadWorkspaceFromRootDirWithParentInChildDirEffectiveModel() throws Exception {\n-        final URL projectUrl = Thread.currentThread().getContextClassLoader().getResource(\"workspace-parent-is-not-root-dir\");\n-        assertNotNull(projectUrl);\n-        final Path projectDir = Paths.get(projectUrl.toURI());\n+        final Path projectDir = getModuleDir(\"workspace-parent-is-not-root-dir\");\n         assertTrue(Files.exists(projectDir));\n \n         final LocalProject module1 = new BootstrapMavenContext(BootstrapMavenContext.config()\n@@ -386,10 +387,7 @@ public void loadWorkspaceFromRootDirWithParentInChildDirEffectiveModel() throws\n \n     @Test\n     public void loadWorkspaceFromModuleDirWithParentInChildDir() throws Exception {\n-        final URL projectUrl = Thread.currentThread().getContextClassLoader()\n-                .getResource(\"workspace-parent-is-not-root-dir/acme-application\");\n-        assertNotNull(projectUrl);\n-        final Path projectDir = Paths.get(projectUrl.toURI());\n+        final Path projectDir = getModuleDir(\"workspace-parent-is-not-root-dir/acme-application\");\n         assertTrue(Files.exists(projectDir));\n         final LocalProject project = LocalProject.loadWorkspace(projectDir);\n \n@@ -401,10 +399,7 @@ public void loadWorkspaceFromModuleDirWithParentInChildDir() throws Exception {\n \n     @Test\n     public void loadWorkspaceFromModuleDirWithParentInSiblingDir() throws Exception {\n-        final URL projectUrl = Thread.currentThread().getContextClassLoader()\n-                .getResource(\"workspace-parent-is-not-root-dir/acme-backend/acme-backend-lib\");\n-        assertNotNull(projectUrl);\n-        final Path projectDir = Paths.get(projectUrl.toURI());\n+        final Path projectDir = getModuleDir(\"workspace-parent-is-not-root-dir/acme-backend/acme-backend-lib\");\n         assertTrue(Files.exists(projectDir));\n         final LocalProject project = LocalProject.loadWorkspace(projectDir);\n \n@@ -429,10 +424,7 @@ private void assertWorkspaceWithParentInChildDir(final LocalProject project) {\n \n     @Test\n     public void loadWorkspaceWithAlternatePomDefaultPom() throws Exception {\n-        final URL projectUrl = Thread.currentThread().getContextClassLoader()\n-                .getResource(\"workspace-alternate-pom/root/module1\");\n-        assertNotNull(projectUrl);\n-        final Path projectDir = Paths.get(projectUrl.toURI());\n+        final Path projectDir = getModuleDir(\"workspace-alternate-pom/root/module1\");\n         assertTrue(Files.exists(projectDir));\n         final LocalProject project = LocalProject.loadWorkspace(projectDir);\n         assertParents(project, \"root\");\n@@ -460,10 +452,7 @@ public void loadWorkspaceWithAlternatePomDefaultPom() throws Exception {\n \n     @Test\n     public void loadWorkspaceWithAlternatePom() throws Exception {\n-        final URL projectUrl = Thread.currentThread().getContextClassLoader()\n-                .getResource(\"workspace-alternate-pom/root/module1/pom2.xml\");\n-        assertNotNull(projectUrl);\n-        final Path projectDir = Paths.get(projectUrl.toURI());\n+        final Path projectDir = getModuleDir(\"workspace-alternate-pom/root/module1/pom2.xml\");\n         assertTrue(Files.exists(projectDir));\n         final LocalProject project = LocalProject.loadWorkspace(projectDir);\n         assertParents(project, \"root\");\n@@ -617,9 +606,7 @@ public void loadWorkspaceForModuleWithEmptyRelativePathParent() throws Exception\n \n     @Test\n     public void testVersionRevisionPropertyEffectiveModel() throws Exception {\n-        final URL projectUrl = Thread.currentThread().getContextClassLoader().getResource(\"workspace-revision/root/module1\");\n-        assertNotNull(projectUrl);\n-        final Path projectDir = Paths.get(projectUrl.toURI());\n+        final Path projectDir = getModuleDir(\"workspace-revision/root/module1\");\n         assertTrue(Files.exists(projectDir));\n \n         final LocalProject module1 = new BootstrapMavenContext(BootstrapMavenContext.config()\n@@ -692,10 +679,7 @@ public void testVersionMultiplePropertiesOverridenWithSystemProperty() throws Ex\n \n     @Test\n     public void testBuildDirs() throws Exception {\n-        final URL projectUrl = Thread.currentThread().getContextClassLoader()\n-                .getResource(\"build-directories/multimodule/runner\");\n-        assertNotNull(projectUrl);\n-        final Path runnerDir = Paths.get(projectUrl.toURI());\n+        final Path runnerDir = getModuleDir(\"build-directories/multimodule/runner\");\n         assertTrue(Files.exists(runnerDir));\n         final LocalProject project = LocalProject.loadWorkspace(runnerDir);\n         assertNotNull(project);\n@@ -714,11 +698,7 @@ public void testBuildDirs() throws Exception {\n \n     @Test\n     public void warnOnFailingWorkspaceModules() throws Exception {\n-        final URL moduleUrl = Thread.currentThread().getContextClassLoader()\n-                .getResource(\"invalid-module\");\n-        assertNotNull(moduleUrl);\n-        final Path moduleDir = Path.of(moduleUrl.toURI());\n-        assertNotNull(moduleUrl);\n+        final Path moduleDir = getModuleDir(\"invalid-module\");\n \n         final LocalWorkspace ws = new BootstrapMavenContext(BootstrapMavenContext.config()\n                 .setOffline(true)\n@@ -734,10 +714,7 @@ public void warnOnFailingWorkspaceModules() throws Exception {\n \n     private void testMavenCiFriendlyVersion(String placeholder, String testResourceDirName, String expectedResolvedVersion,\n             boolean resolvesFromWorkspace) throws Exception {\n-        final URL module1Url = Thread.currentThread().getContextClassLoader()\n-                .getResource(testResourceDirName + \"/root/module1\");\n-        assertNotNull(module1Url);\n-        final Path module1Dir = Paths.get(module1Url.toURI());\n+        final Path module1Dir = getModuleDir(testResourceDirName + \"/root/module1\");\n         assertTrue(Files.exists(module1Dir));\n \n         final LocalProject module1 = LocalProject.load(module1Dir);\n@@ -763,7 +740,10 @@ private void testMavenCiFriendlyVersion(String placeholder, String testResourceD\n         final WorkspaceModule wsModule = module1.toWorkspaceModule();\n         assertThat(wsModule.getModuleDir()).isEqualTo(module1Dir.toFile());\n         assertThat(wsModule.getBuildDir()).isEqualTo(module1Dir.resolve(\"target\").toFile());\n-        SourceDir src = wsModule.getMainSources().getResourceDirs().iterator().next();\n+\n+        final Iterator<SourceDir> resourcesIterator = wsModule.getMainSources().getResourceDirs().iterator();\n+        assertThat(resourcesIterator).hasNext();\n+        SourceDir src = resourcesIterator.next();\n         PathTree sourceTree = src.getSourceTree();\n         assertThat(sourceTree).isNotNull();\n         Collection<Path> roots = sourceTree.getRoots();\n\ndiff --git a/independent-projects/bootstrap/maven-resolver/src/test/resources/custom-resource-dirs/pom.xml b/independent-projects/bootstrap/maven-resolver/src/test/resources/custom-resource-dirs/pom.xml\nnew file mode 100644\nindex 0000000000000..d351a18f97347\n--- /dev/null\n+++ b/independent-projects/bootstrap/maven-resolver/src/test/resources/custom-resource-dirs/pom.xml\n@@ -0,0 +1,30 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.acme</groupId>\n+        <artifactId>acme-lib</artifactId>\n+        <version>1.0</version>\n+    </parent>\n+\n+    <artifactId>root-module1</artifactId>\n+\n+    <build>\n+        <resources>\n+            <resource>\n+                <targetPath>META-INF/resources</targetPath>\n+                <directory>relative-base-dir</directory>\n+            </resource>\n+            <resource>\n+                <directory>src/main/custom</directory>\n+                <targetPath>${project.build.directory}/processed-custom</targetPath>\n+            </resource>\n+            <resource>\n+                <directory>src/main/other</directory>\n+                <targetPath>${project.build.outputDirectory}</targetPath>\n+            </resource>\n+        </resources>\n+    </build>\n+\n+</project>\n\ndiff --git a/integration-tests/maven/src/test/java/io/quarkus/maven/it/BuildIT.java b/integration-tests/maven/src/test/java/io/quarkus/maven/it/BuildIT.java\nindex 27e6787310a7a..958521b58590d 100644\n--- a/integration-tests/maven/src/test/java/io/quarkus/maven/it/BuildIT.java\n+++ b/integration-tests/maven/src/test/java/io/quarkus/maven/it/BuildIT.java\n@@ -55,6 +55,33 @@ void testCustomTestSourceSets()\n         assertThat(result.getProcess().waitFor()).isZero();\n     }\n \n+    /**\n+     * Unlike {@link #testCustomTestSourceSets()} above, this test tests something that shouldn't work.\n+     * The test project in {@link #testCustomTestSourceSets()} configures the compiler plugin and the test\n+     * plugins with the custom classes locations in addition to adding custom resource directories.\n+     *\n+     * This test was added to fix a regression of custom resource location resolution in the\n+     * {@link io.quarkus.bootstrap.resolver.maven.workspace.LocalProject},\n+     * which should further be properly refactored to let only the {@link #testCustomTestSourceSets()} work,\n+     * while this test should be changed to not locate custom resources on the classpath.\n+     */\n+    @Test\n+    void testCustomResourceDir()\n+            throws MavenInvocationException, InterruptedException {\n+        testDir = initProject(\"projects/custom-resources-dir\");\n+        running = new RunningInvoker(testDir, false);\n+        MavenProcessInvocationResult result = running.execute(List.of(\"clean\", \"test\",\n+                \"-Dquarkus.analytics.disabled=true\"),\n+                Map.of());\n+        assertThat(result.getProcess().waitFor()).isZero();\n+\n+        // with the source generation disabled (this will use a new resolver initialized before bootstrapping the test)\n+        result = running.execute(List.of(\"clean\", \"test\",\n+                \"-Dquarkus.analytics.disabled=true\", \"-Dquarkus.generate-code.skip=true\"),\n+                Map.of());\n+        assertThat(result.getProcess().waitFor()).isZero();\n+    }\n+\n     @Test\n     void testQuarkusMainTest()\n             throws MavenInvocationException, InterruptedException, IOException {\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/custom-resources-dir/pom.xml b/integration-tests/maven/src/test/resources-filtered/projects/custom-resources-dir/pom.xml\nnew file mode 100644\nindex 0000000000000..c13d93412b993\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/custom-resources-dir/pom.xml\n@@ -0,0 +1,144 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <groupId>org.acme</groupId>\n+    <artifactId>maven-resource-error</artifactId>\n+    <version>1.0.0-SNAPSHOT</version>\n+\n+    <properties>\n+        <quarkus.platform.group-id>io.quarkus</quarkus.platform.group-id>\n+        <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>\n+        <quarkus.platform.version>@project.version@</quarkus.platform.version>\n+        <compiler-plugin.version>${compiler-plugin.version}</compiler-plugin.version>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <maven.compiler.source>${maven.compiler.source}</maven.compiler.source>\n+        <maven.compiler.target>${maven.compiler.target}</maven.compiler.target>\n+        <skipITs>true</skipITs>\n+        <surefire-plugin.version>${version.surefire.plugin}</surefire-plugin.version>\n+    </properties>\n+\n+    <dependencyManagement>\n+        <dependencies>\n+            <dependency>\n+                <groupId>\\${quarkus.platform.group-id}</groupId>\n+                <artifactId>\\${quarkus.platform.artifact-id}</artifactId>\n+                <version>\\${quarkus.platform.version}</version>\n+                <type>pom</type>\n+                <scope>import</scope>\n+            </dependency>\n+        </dependencies>\n+    </dependencyManagement>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-arc</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-rest</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-junit5</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.rest-assured</groupId>\n+            <artifactId>rest-assured</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <resources>\n+            <resource>\n+                <directory>src/main/resources</directory>\n+                <filtering>false</filtering>\n+            </resource>\n+            <resource>\n+                <directory>src/main/my-custom-files</directory>\n+                <targetPath>\\${project.build.directory}/my-custom-files</targetPath>\n+                <filtering>false</filtering>\n+            </resource>\n+        </resources>\n+        <testResources>\n+            <testResource>\n+                <directory>src/test/resources</directory>\n+                <filtering>false</filtering>\n+            </testResource>\n+            <testResource>\n+                <directory>src/test/my-custom-test-text-files</directory>\n+                <targetPath>\\${project.build.directory}/my-custom-test-files</targetPath>\n+            </testResource>\n+        </testResources>\n+        <plugins>\n+            <plugin>\n+                <groupId>\\${quarkus.platform.group-id}</groupId>\n+                <artifactId>quarkus-maven-plugin</artifactId>\n+                <version>\\${quarkus.platform.version}</version>\n+                <extensions>true</extensions>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>build</goal>\n+                            <goal>generate-code</goal>\n+                            <goal>generate-code-tests</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <version>\\${compiler-plugin.version}</version>\n+                <configuration>\n+                    <parameters>true</parameters>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <version>\\${surefire-plugin.version}</version>\n+                <configuration>\n+                    <systemPropertyVariables>\n+                        <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n+                        <maven.home>\\${maven.home}</maven.home>\n+                    </systemPropertyVariables>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-failsafe-plugin</artifactId>\n+                <version>\\${surefire-plugin.version}</version>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>integration-test</goal>\n+                            <goal>verify</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+                <configuration>\n+                    <systemPropertyVariables>\n+                        <native.image.path>\\${project.build.directory}/${project.build.finalName}-runner</native.image.path>\n+                        <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n+                        <maven.home>\\${maven.home}</maven.home>\n+                    </systemPropertyVariables>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <profiles>\n+        <profile>\n+            <id>native</id>\n+            <activation>\n+                <property>\n+                    <name>native</name>\n+                </property>\n+            </activation>\n+            <properties>\n+                <skipITs>false</skipITs>\n+                <quarkus.native.enabled>true</quarkus.native.enabled>\n+            </properties>\n+        </profile>\n+    </profiles>\n+</project>\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/custom-resources-dir/src/main/java/org/acme/GreetingResource.java b/integration-tests/maven/src/test/resources-filtered/projects/custom-resources-dir/src/main/java/org/acme/GreetingResource.java\nnew file mode 100644\nindex 0000000000000..62fb7bfa947bf\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/custom-resources-dir/src/main/java/org/acme/GreetingResource.java\n@@ -0,0 +1,17 @@\n+package org.acme;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.Produces;\n+import jakarta.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"my-custom-text-file.txt is on the classpath: \"\n+            + (Thread.currentThread().getContextClassLoader().getResource(\"my-custom-text-file.txt\") != null);\n+    }\n+}\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/custom-resources-dir/src/main/my-custom-files/my-custom-text-file.txt b/integration-tests/maven/src/test/resources-filtered/projects/custom-resources-dir/src/main/my-custom-files/my-custom-text-file.txt\nnew file mode 100644\nindex 0000000000000..e69de29bb2d1d\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/custom-resources-dir/src/test/java/org/acme/GreetingResourceTest.java b/integration-tests/maven/src/test/resources-filtered/projects/custom-resources-dir/src/test/java/org/acme/GreetingResourceTest.java\nnew file mode 100644\nindex 0000000000000..c9102a10bdf2b\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/custom-resources-dir/src/test/java/org/acme/GreetingResourceTest.java\n@@ -0,0 +1,19 @@\n+package org.acme;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.is;\n+\n+@QuarkusTest\n+class GreetingResourceTest {\n+    @Test\n+    void testHelloEndpoint() {\n+        given()\n+          .when().get(\"/hello\")\n+          .then()\n+             .statusCode(200)\n+             .body(is(\"my-custom-text-file.txt is on the classpath: true\"));\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/custom-resources-dir/src/test/my-custom-test-text-files/my-custom-test-text-file.txt b/integration-tests/maven/src/test/resources-filtered/projects/custom-resources-dir/src/test/my-custom-test-text-files/my-custom-test-text-file.txt\nnew file mode 100644\nindex 0000000000000..e69de29bb2d1d\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47823",
    "pr_id": 47823,
    "issue_id": 37765,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Resteasy Reactive: Add support for sending multipart List<File> in client API (supported in Server API)\n### Describe the bug\n\nWhen using `quarkus-resteasy-reactive` and `quarkus-rest-client-reactive` (or their `-jackson` versions), receiving multiple files with the same part name is supported on the server side, such as: \r\n```\r\n@RestForm(\"resources\")\r\n@PartType(APPLICATION_OCTET_STREAM)\r\nList<FileUpload> resources;\r\n```\r\n\r\nHowever, this is not possible when using the client API with the following: \r\n```\r\n@RestForm(\"resources\")\r\n@PartType(APPLICATION_OCTET_STREAM)\r\nList<File> resources;\r\n```\r\n\r\nThe multiple files are not written to the request. With just one file it works fine: \r\n```\r\n@RestForm(\"resources\")\r\n@PartType(APPLICATION_OCTET_STREAM)\r\nFile resources;\r\n```\r\n\r\nTo reproduce it with easy instructions see the demo: https://github.com/fire2/resteasy-multipart-multiple-files\r\n\r\nIt would be great if this could be implemented in the client library so it works the same way. I have not found any way in the docs to send multiple files with the same part name using the client. \r\n\r\nIf I am mistaken and this should be implemented a different way, please let me know. \n\n### Expected behavior\n\nA list of files can be uploaded using the reactive client, the same way they can be received on a server endpoint. \n\n### Actual behavior\n\nList of files cannot be uploaded, but it can be received on the server side. \n\n### How to Reproduce?\n\n1. Clone https://github.com/fire2/resteasy-multipart-multiple-files\r\n2. Follow instructions in the Readme.\n\n### Output of `uname -a` or `ver`\n\nDarwin LMUCM902989 23.2.0 Darwin Kernel Version 23.2.0: Wed Nov 15 21:54:10 PST 2023; root:xnu-10002.61.3~2/RELEASE_X86_64 x86_64 i386 Darwin\n\n### Output of `java -version`\n\nopenjdk version \"17.0.7\" 2023-04-18 LTS OpenJDK Runtime Environment Zulu17.42+19-CA (build 17.0.7+7-LTS) OpenJDK 64-Bit Server VM Zulu17.42+19-CA (build 17.0.7+7-LTS, mixed mode, sharing)\n\n### Quarkus version or git rev\n\n3.6.3\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nmvn\n\n### Additional information\n\n_No response_",
    "issue_word_count": 333,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java",
      "extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/multipart/MultipartFilenameTest.java"
    ],
    "pr_changed_test_files": [
      "extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/multipart/MultipartFilenameTest.java"
    ],
    "base_commit": "51fef1fa115a590a3a941770b5dcdc76df5c986b",
    "head_commit": "fd6c4f9de760b9c9c9d34bfcbaecdf5551fc5ed6",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47823",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47823",
    "dockerfile": "",
    "pr_merged_at": "2025-05-13T10:36:30.000Z",
    "patch": "diff --git a/extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java b/extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java\nindex c35c49b5d6a22..7726857c376e4 100644\n--- a/extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java\n+++ b/extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java\n@@ -165,6 +165,7 @@\n import io.quarkus.gizmo.CatchBlockCreator;\n import io.quarkus.gizmo.ClassCreator;\n import io.quarkus.gizmo.FieldDescriptor;\n+import io.quarkus.gizmo.ForEachLoop;\n import io.quarkus.gizmo.MethodCreator;\n import io.quarkus.gizmo.MethodDescriptor;\n import io.quarkus.gizmo.ResultHandle;\n@@ -2220,8 +2221,8 @@ private AssignableResultHandle createRestClientField(String name, ClassCreator c\n         return client;\n     }\n \n-    private void handleMultipartField(String formParamName, String partType, String partFilename,\n-            String type, String parameterSignature,\n+    private void handleMultipartField(IndexView index, String formParamName, String mimeType, String partFilename,\n+            Type type, String parameterSignature,\n             ResultHandle fieldValue, AssignableResultHandle multipartForm,\n             BytecodeCreator methodCreator,\n             ResultHandle client, String restClientInterfaceClassName, ResultHandle parameterAnnotations,\n@@ -2229,49 +2230,81 @@ private void handleMultipartField(String formParamName, String partType, String\n \n         BytecodeCreator ifValueNotNull = methodCreator.ifNotNull(fieldValue).trueBranch();\n \n+        if (isCollection(type, index)) {\n+            Type componentType = null;\n+            if (type.kind() == PARAMETERIZED_TYPE) {\n+                Type paramType = type.asParameterizedType().arguments().get(0);\n+                if ((paramType.kind() == CLASS) || (paramType.kind() == PARAMETERIZED_TYPE)) {\n+                    componentType = paramType;\n+                }\n+            }\n+            if (componentType == null) {\n+                componentType = Type.create(Object.class);\n+            }\n+            ForEachLoop loop = ifValueNotNull.forEach(fieldValue);\n+            BytecodeCreator block = loop.block();\n+            doHandleMultipartField(formParamName, mimeType, partFilename, componentType, null, loop.element(),\n+                    multipartForm,\n+                    methodCreator,\n+                    client, restClientInterfaceClassName, parameterAnnotations, genericType, errorLocation, block);\n+        } else {\n+            doHandleMultipartField(formParamName, mimeType, partFilename, type, parameterSignature, fieldValue, multipartForm,\n+                    methodCreator,\n+                    client, restClientInterfaceClassName, parameterAnnotations, genericType, errorLocation, ifValueNotNull);\n+        }\n+    }\n+\n+    private void doHandleMultipartField(String formParamName, String mimeType, String partFilename, Type type,\n+            String parameterSignature, ResultHandle fieldValue, AssignableResultHandle multipartForm,\n+            BytecodeCreator methodCreator, ResultHandle client, String restClientInterfaceClassName,\n+            ResultHandle parameterAnnotations, ResultHandle genericType, String errorLocation,\n+            BytecodeCreator bytecodeCreator) {\n         // we support string, and send it as an attribute unconverted\n-        if (type.equals(String.class.getName())) {\n-            addString(ifValueNotNull, multipartForm, formParamName, partType, partFilename, fieldValue);\n-        } else if (type.equals(File.class.getName())) {\n+        String typeStr = type.name().toString();\n+        if (typeStr.equals(String.class.getName())) {\n+            addString(bytecodeCreator, multipartForm, formParamName, mimeType, partFilename, fieldValue);\n+        } else if (typeStr.equals(File.class.getName())) {\n             // file is sent as file :)\n-            ResultHandle filePath = ifValueNotNull.invokeVirtualMethod(\n+            ResultHandle filePath = bytecodeCreator.invokeVirtualMethod(\n                     MethodDescriptor.ofMethod(File.class, \"toPath\", Path.class), fieldValue);\n-            addFile(ifValueNotNull, multipartForm, formParamName, partType, partFilename, filePath);\n-        } else if (type.equals(Path.class.getName())) {\n+            addFile(bytecodeCreator, multipartForm, formParamName, mimeType, partFilename, filePath);\n+        } else if (typeStr.equals(Path.class.getName())) {\n             // and so is path\n-            addFile(ifValueNotNull, multipartForm, formParamName, partType, partFilename, fieldValue);\n-        } else if (type.equals(FileUpload.class.getName())) {\n+            addFile(bytecodeCreator, multipartForm, formParamName, mimeType, partFilename, fieldValue);\n+        } else if (typeStr.equals(FileUpload.class.getName())) {\n             addFileUpload(fieldValue, multipartForm, methodCreator);\n-        } else if (type.equals(InputStream.class.getName())) {\n+        } else if (typeStr.equals(InputStream.class.getName())) {\n             // and so is path\n-            addInputStream(ifValueNotNull, multipartForm, formParamName, partType, partFilename, fieldValue, type);\n-        } else if (type.equals(Buffer.class.getName())) {\n+            addInputStream(bytecodeCreator, multipartForm, formParamName, mimeType, partFilename, fieldValue, typeStr);\n+        } else if (typeStr.equals(Buffer.class.getName())) {\n             // and buffer\n-            addBuffer(ifValueNotNull, multipartForm, formParamName, partType, partFilename, fieldValue, errorLocation);\n-        } else if (type.startsWith(\"[\")) {\n+            addBuffer(bytecodeCreator, multipartForm, formParamName, mimeType, partFilename, fieldValue, errorLocation);\n+        } else if (typeStr.startsWith(\"[\")) {\n             // byte[] can be sent as file too\n-            if (!type.equals(\"[B\")) {\n-                throw new IllegalArgumentException(\"Array of unsupported type: \" + type\n+            if (!typeStr.equals(\"[B\")) {\n+                throw new IllegalArgumentException(\"Array of unsupported type: \" + typeStr\n                         + \" on \" + errorLocation);\n             }\n-            ResultHandle buffer = ifValueNotNull.invokeStaticInterfaceMethod(\n+            ResultHandle buffer = bytecodeCreator.invokeStaticInterfaceMethod(\n                     MethodDescriptor.ofMethod(Buffer.class, \"buffer\", Buffer.class, byte[].class),\n                     fieldValue);\n-            addBuffer(ifValueNotNull, multipartForm, formParamName, partType, partFilename, buffer, errorLocation);\n-        } else if (parameterSignature.equals(MULTI_BYTE_SIGNATURE)) {\n-            addMultiAsFile(ifValueNotNull, multipartForm, formParamName, partType, partFilename, fieldValue, errorLocation);\n-        } else if (partType != null) {\n+            addBuffer(bytecodeCreator, multipartForm, formParamName, mimeType, partFilename, buffer, errorLocation);\n+        } else if (MULTI_BYTE_SIGNATURE.equals(parameterSignature)) {\n+            addMultiAsFile(bytecodeCreator, multipartForm, formParamName, mimeType, partFilename, fieldValue,\n+                    errorLocation);\n+        } else if (mimeType != null) {\n             if (partFilename != null) {\n                 log.warnf(\"Using the @PartFilename annotation is unsupported on the type '%s'. Problematic field is: '%s'\",\n-                        partType, formParamName);\n+                        mimeType, formParamName);\n             }\n             // assume POJO:\n-            addPojo(ifValueNotNull, multipartForm, formParamName, partType, fieldValue, type);\n+            addPojo(bytecodeCreator, multipartForm, formParamName, mimeType, fieldValue, typeStr);\n         } else {\n             // go via converter\n-            ResultHandle convertedFormParam = convertParamToString(ifValueNotNull, client, fieldValue, type, genericType,\n+            ResultHandle convertedFormParam = convertParamToString(bytecodeCreator, client, fieldValue, typeStr,\n+                    genericType,\n                     parameterAnnotations);\n-            BytecodeCreator parameterIsStringBranch = checkStringParam(ifValueNotNull, convertedFormParam,\n+            BytecodeCreator parameterIsStringBranch = checkStringParam(bytecodeCreator, convertedFormParam,\n                     restClientInterfaceClassName, errorLocation);\n             addString(parameterIsStringBranch, multipartForm, formParamName, null, partFilename, convertedFormParam);\n         }\n@@ -3327,9 +3360,9 @@ private void addFormParam(MethodInfo jandexMethod, BytecodeCreator methodCreator\n             String restClientInterfaceClassName, ResultHandle client, AssignableResultHandle formParams,\n             ResultHandle genericType,\n             ResultHandle parameterAnnotations, boolean multipart,\n-            String partType, String partFilename, String errorLocation) {\n+            String mimeType, String partFilename, String errorLocation) {\n         if (multipart) {\n-            handleMultipartField(paramName, partType, partFilename, parameterType.name().toString(), parameterSignature,\n+            handleMultipartField(index, paramName, mimeType, partFilename, parameterType, parameterSignature,\n                     formParamHandle,\n                     formParams, methodCreator,\n                     client, restClientInterfaceClassName, parameterAnnotations, genericType,\n",
    "test_patch": "diff --git a/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/multipart/MultipartFilenameTest.java b/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/multipart/MultipartFilenameTest.java\nindex f345586162509..1523f10cd2c53 100644\n--- a/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/multipart/MultipartFilenameTest.java\n+++ b/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/multipart/MultipartFilenameTest.java\n@@ -13,6 +13,9 @@\n import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n import java.util.stream.Collectors;\n \n import jakarta.enterprise.context.ApplicationScoped;\n@@ -27,10 +30,15 @@\n import org.jboss.resteasy.reactive.PartFilename;\n import org.jboss.resteasy.reactive.PartType;\n import org.jboss.resteasy.reactive.RestForm;\n+import org.jboss.resteasy.reactive.client.impl.multipart.PausableHttpPostRequestEncoder;\n import org.jboss.resteasy.reactive.multipart.FileUpload;\n+import org.jboss.resteasy.reactive.server.multipart.FormValue;\n+import org.jboss.resteasy.reactive.server.multipart.MultipartFormDataInput;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.RegisterExtension;\n \n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n import io.quarkus.test.QuarkusUnitTest;\n import io.quarkus.test.common.http.TestHTTPResource;\n import io.smallrye.mutiny.Multi;\n@@ -39,6 +47,7 @@ public class MultipartFilenameTest {\n \n     public static final String FILE_NAME = \"clientFile\";\n     public static final String FILE_CONTENT = \"file content\";\n+    public static final String FILE_CONTENT2 = \"file content2\";\n     public static final String EXPECTED_OUTPUT = FILE_NAME + \":\" + FILE_CONTENT;\n \n     @TestHTTPResource\n@@ -192,6 +201,52 @@ void shouldCopyFileContentToString() throws IOException {\n         assertThat(client.postMultipartWithFileContent(form)).isEqualTo(FILE_CONTENT);\n     }\n \n+    @Test\n+    void shouldWorkWithListOfFiles() throws IOException {\n+        Client client = RestClientBuilder.newBuilder()\n+                .baseUri(baseUri)\n+                // we use this encoder mode on the client in order to make it possible for the server to read items with the same name\n+                .property(\"io.quarkus.rest.client.multipart-post-encoder-mode\",\n+                        PausableHttpPostRequestEncoder.EncoderMode.HTML5)\n+                .build(Client.class);\n+\n+        File file = File.createTempFile(\"MultipartTest\", \".txt\");\n+        Files.writeString(file.toPath(), FILE_CONTENT);\n+        file.deleteOnExit();\n+        ClientListForm form = new ClientListForm();\n+        form.files = List.of(file);\n+\n+        String responseStr = client.postMultipartWithFileContentAsMultipartFormDataInput(form);\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        Result result = mapper.readValue(responseStr, Result.class);\n+        assertThat(result).satisfies(r -> {\n+            assertThat(r.count).isEqualTo(1);\n+            assertThat(r.items).singleElement().satisfies(i -> {\n+                assertThat(i.name).isEqualTo(\"myFile\");\n+                assertThat(i.size).isEqualTo(FILE_CONTENT.length());\n+                assertThat(i.isFileItem).isEqualTo(true);\n+            });\n+        });\n+\n+        File file2 = File.createTempFile(\"MultipartTest2\", \".txt\");\n+        Files.writeString(file2.toPath(), FILE_CONTENT2);\n+        file2.deleteOnExit();\n+        form = new ClientListForm();\n+        form.files = List.of(file, file2);\n+\n+        responseStr = client.postMultipartWithFileContentAsMultipartFormDataInput(form);\n+\n+        result = mapper.readValue(responseStr, Result.class);\n+        assertThat(result).satisfies(r -> {\n+            assertThat(r.count).isEqualTo(2);\n+            assertThat(r.items).hasSize(2).extracting(Item::name).containsOnly(\"myFile\");\n+            assertThat(r.items).hasSize(2).extracting(Item::size).containsOnly((long) FILE_CONTENT.length(),\n+                    (long) FILE_CONTENT2.length());\n+        });\n+    }\n+\n     @Test\n     void shouldCopyFileContentToBytes() throws IOException {\n         Client client = RestClientBuilder.newBuilder().baseUri(baseUri).build(Client.class);\n@@ -256,6 +311,25 @@ public String uploadWithFileContentAsInputStream(@MultipartForm FormDataWithInpu\n                     .lines()\n                     .collect(Collectors.joining(System.lineSeparator()));\n         }\n+\n+        @POST\n+        @Path(\"/file-content-as-multipart-form-data-input\")\n+        @Consumes(MediaType.MULTIPART_FORM_DATA)\n+        public String uploadMultipartFormDataInput(MultipartFormDataInput input) throws IOException {\n+            Map<String, Collection<FormValue>> map = input.getValues();\n+            List<Item> items = new ArrayList<>();\n+            for (var entry : map.entrySet()) {\n+                for (FormValue value : entry.getValue()) {\n+                    items.add(new Item(\n+                            entry.getKey(),\n+                            value.isFileItem() ? value.getFileItem().getFileSize() : value.getValue().length(),\n+                            value.getCharset(),\n+                            value.isFileItem()));\n+                }\n+\n+            }\n+            return new ObjectMapper().writeValueAsString(new Result(items, items.size()));\n+        }\n     }\n \n     public static class FormData {\n@@ -363,6 +437,11 @@ String postMultipartWithPartFilenameUsingMultiByte(\n         @Path(\"/file-content-as-inputstream\")\n         @Consumes(MediaType.MULTIPART_FORM_DATA)\n         String postMultipartWithFileContentAsInputStream(@MultipartForm ClientForm clientForm);\n+\n+        @POST\n+        @Path(\"/file-content-as-multipart-form-data-input\")\n+        @Consumes(MediaType.MULTIPART_FORM_DATA)\n+        String postMultipartWithFileContentAsMultipartFormDataInput(@MultipartForm ClientListForm clientForm);\n     }\n \n     public static class ClientForm {\n@@ -371,6 +450,12 @@ public static class ClientForm {\n         public File file;\n     }\n \n+    public static class ClientListForm {\n+        @FormParam(\"myFile\")\n+        @PartType(APPLICATION_OCTET_STREAM)\n+        public List<File> files;\n+    }\n+\n     public static class ClientFormUsingFileUpload {\n         @RestForm\n         public FileUpload file;\n@@ -417,4 +502,20 @@ public static class ClientFormUsingMultiByte {\n         @PartFilename(FILE_NAME)\n         public Multi<Byte> file;\n     }\n+\n+    public record Item(String name, long size, String charset, boolean isFileItem) {\n+    }\n+\n+    public static class Result {\n+        public List<Item> items;\n+        public int count;\n+\n+        public Result() {\n+        }\n+\n+        public Result(List<Item> items, int count) {\n+            this.items = items;\n+            this.count = count;\n+        }\n+    }\n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47812",
    "pr_id": 47812,
    "issue_id": 47671,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Test classes with `@Nested` classes fail in dev-mode\n### Describe the bug\n\nWhen I use JUnit `@Nested` classes, running the tests in dev mode fails, while running them in the build or in the IDE works just fine.\n\nThis is a spin-off from #47657 \n\n### Expected behavior\n\nNesting test classes should work as robust as flat test classes.\n\n### Actual behavior\n\nI get: `Failed to evaluate condition [io.quarkus.test.junit.QuarkusTestExtension]: Non-viable test classloader, jdk.internal.loader.ClassLoaders$AppClassLoader@18b4aac2. Is this a re-run of a failing test?`\n\nI've also seen `Cannot invoke \"io.quarkus.bootstrap.app.CuratedApplication.setEligibleForReuse(boolean)\" because the return value of \"io.quarkus.bootstrap.classloading.QuarkusClassLoader.getCuratedApplication()\" is null`, but this is harder to reproduce: I looks like it happens only when hot reloading changed test code.\n\nWhen the top-level class doesn't have tests itself, I get: `ERROR [io.qua.tes.jun.AbstractJvmQuarkusTestExtension] (Test runner thread) Could not read configuration while evaluating whether to run class test.NestedDemoTest. This usually happens when re-running a test that has already failed, for example if surefire.rerunFailingTestsCount is set. To work around this limitation, either adjust the test so that it passes, or isolate the test into a project whose tests all use the same combination of @TestProfile and resources.`.\n\nAdditional observations:\n* It reports more actual errors than the number of `tests failed`\n* If I try to execute only that test class by going into the dev mode command line (hit `:`) and enter `test pattern include <my-test-class>`, it only executes the container class, not the nested classes.\n\n### How to Reproduce?\n\n```java\n@QuarkusTest\nclass NestedDemoTest {\n    @Nested class NestedA {\n        @Test void test1() {System.out.println(\"A.1\");}\n    }\n}\n```\n\n### Output of `uname -a` or `ver`\n\nDarwin ... 24.4.0 Darwin Kernel Version 24.4.0 ... RELEASE_ARM64_T6000 arm64\n\n### Output of `java -version`\n\nopenjdk 21.0.6 2025-01-21 LTS OpenJDK Runtime Environment Temurin-21.0.6+7 (build 21.0.6+7-LTS) OpenJDK 64-Bit Server VM Temurin-21.0.6+7 (build 21.0.6+7-LTS, mixed mode, sharing)\n\n### Quarkus version or git rev\n\n3.22.1\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nJava version: 21.0.6, vendor: Eclipse Adoptium, runtime: /Users/rdohna/.sdkman/candidates/java/21.0.6-tem Default locale: en_US, platform encoding: UTF-8 OS name: \"mac os x\", version: \"15.4.1\", arch: \"aarch64\", family: \"mac\"\n\n### Additional information\n\n_No response_",
    "issue_word_count": 407,
    "test_files_count": 4,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "core/deployment/src/main/java/io/quarkus/deployment/dev/testing/JunitTestRunner.java",
      "integration-tests/maven/src/test/java/io/quarkus/maven/it/QuarkusTestIT.java",
      "integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/test/java/org/acme/VanillaTest.java",
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusTestExtension.java"
    ],
    "pr_changed_test_files": [
      "core/deployment/src/main/java/io/quarkus/deployment/dev/testing/JunitTestRunner.java",
      "integration-tests/maven/src/test/java/io/quarkus/maven/it/QuarkusTestIT.java",
      "integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/test/java/org/acme/VanillaTest.java",
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusTestExtension.java"
    ],
    "base_commit": "51310678ee8966409e524ca36f7c5a5c7e308d6f",
    "head_commit": "5facad1780610330b9cd822112dab3fdf08cc4cd",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47812",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47812",
    "dockerfile": "",
    "pr_merged_at": "2025-05-13T09:14:11.000Z",
    "patch": "",
    "test_patch": "diff --git a/core/deployment/src/main/java/io/quarkus/deployment/dev/testing/JunitTestRunner.java b/core/deployment/src/main/java/io/quarkus/deployment/dev/testing/JunitTestRunner.java\nindex 6cc7487c9e79a..05f848e36eb92 100644\n--- a/core/deployment/src/main/java/io/quarkus/deployment/dev/testing/JunitTestRunner.java\n+++ b/core/deployment/src/main/java/io/quarkus/deployment/dev/testing/JunitTestRunner.java\n@@ -158,7 +158,6 @@ public Runnable prepare() {\n             LogCapturingOutputFilter logHandler = new LogCapturingOutputFilter(testApplication, true, true,\n                     TestSupport.instance()\n                             .get()::isDisplayTestOutput);\n-            // TODO do we want to do this setting of the TCCL? I think it just makes problems?\n             Thread.currentThread().setContextClassLoader(tcl);\n \n             Set<UniqueId> allDiscoveredIds = new HashSet<>();\n@@ -617,18 +616,16 @@ private DiscoveryResult discoverTestClasses() {\n         // Most logic in the JUnitRunner counts main tests as quarkus tests, so do a (mildly irritating) special pass to get the ones which are strictly @QuarkusTest\n \n         Set<String> quarkusTestClassesForFacadeClassLoader = new HashSet<>();\n-        for (var a : Arrays.asList(QUARKUS_TEST)) {\n-            for (AnnotationInstance i : index.getAnnotations(a)) {\n-                DotName name = i.target()\n-                        .asClass()\n-                        .name();\n-                quarkusTestClassesForFacadeClassLoader.add(name.toString());\n-                for (ClassInfo clazz : index.getAllKnownSubclasses(name)) {\n-                    if (!integrationTestClasses.contains(clazz.name()\n-                            .toString())) {\n-                        quarkusTestClassesForFacadeClassLoader.add(clazz.name()\n-                                .toString());\n-                    }\n+        for (AnnotationInstance i : index.getAnnotations(QUARKUS_TEST)) {\n+            DotName name = i.target()\n+                    .asClass()\n+                    .name();\n+            quarkusTestClassesForFacadeClassLoader.add(name.toString());\n+            for (ClassInfo clazz : index.getAllKnownSubclasses(name)) {\n+                if (!integrationTestClasses.contains(clazz.name()\n+                        .toString())) {\n+                    quarkusTestClassesForFacadeClassLoader.add(clazz.name()\n+                            .toString());\n                 }\n             }\n         }\n@@ -681,10 +678,16 @@ private DiscoveryResult discoverTestClasses() {\n             }\n             var enclosing = enclosingClasses.get(testClass);\n             if (enclosing != null) {\n-                if (integrationTestClasses.contains(enclosing.toString())) {\n+                String enclosingString = enclosing.toString();\n+                if (quarkusTestClassesForFacadeClassLoader.contains(enclosingString)) {\n+                    quarkusTestClassesForFacadeClassLoader.add(name);\n+                }\n+\n+                // No else here, this is an 'also do'\n+                if (integrationTestClasses.contains(enclosingString)) {\n                     integrationTestClasses.add(name);\n                     continue;\n-                } else if (quarkusTestClasses.contains(enclosing.toString())) {\n+                } else if (quarkusTestClasses.contains(enclosingString)) {\n                     quarkusTestClasses.add(name);\n                     continue;\n                 }\n@@ -745,8 +748,6 @@ private DiscoveryResult discoverTestClasses() {\n                 log.warnf(\n                         \"Failed to load test class %s (possibly as it was added after the test run started), it will not be executed this run.\",\n                         i);\n-            } finally {\n-                // TODO should we do this?  Thread.currentThread().setContextClassLoader(old);\n             }\n         }\n         itClasses.sort(Comparator.comparing(new Function<Class<?>, String>() {\n\ndiff --git a/integration-tests/maven/src/test/java/io/quarkus/maven/it/QuarkusTestIT.java b/integration-tests/maven/src/test/java/io/quarkus/maven/it/QuarkusTestIT.java\nindex c18e6fec9137d..c0edb12e12712 100644\n--- a/integration-tests/maven/src/test/java/io/quarkus/maven/it/QuarkusTestIT.java\n+++ b/integration-tests/maven/src/test/java/io/quarkus/maven/it/QuarkusTestIT.java\n@@ -73,7 +73,6 @@ public void testNestedQuarkusTestMixedWithNormalTests()\n \n     }\n \n-    @Disabled(\"See https://github.com/quarkusio/quarkus/issues/47671\")\n     @Test\n     public void testNestedQuarkusTestMixedWithNormalTestsContinuousTesting()\n             throws MavenInvocationException, FileNotFoundException {\n@@ -88,7 +87,8 @@ public void testNestedQuarkusTestMixedWithNormalTestsContinuousTesting()\n         // This is a bit brittle when we add tests, but failures are often so catastrophic they're not even reported as failures,\n         // so we need to check the pass count explicitly\n         Assertions.assertEquals(0, results.getTestsFailed());\n-        Assertions.assertEquals(3, results.getTestsPassed());\n+        Assertions.assertEquals(2, results.getTestsPassed());\n+        Assertions.assertEquals(1, results.getTestsSkipped());\n     }\n \n     /**\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/test/java/org/acme/VanillaTest.java b/integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/test/java/org/acme/VanillaTest.java\nindex c0123bd8d8dd8..9ef259075fd27 100644\n--- a/integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/test/java/org/acme/VanillaTest.java\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/test/java/org/acme/VanillaTest.java\n@@ -3,6 +3,9 @@\n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+\n+import io.quarkus.runtime.LaunchMode;\n \n public class VanillaTest {\n \n@@ -11,9 +14,15 @@ public void test() {\n         assertEquals(new HelloResource().hello(), \"Hello from Quarkus REST via config\");\n     }\n \n+    @DisabledIf(\"isContinuousTesting\")\n     @Test\n     public void testTCCL() {\n         // This test is looking at internals, not externals, but I think it's a fair enough expectation\n+        // In continuous testing mode the normal tests get loaded with the deployment classloader, so we should not make assertions\n         assertEquals(ClassLoader.getSystemClassLoader(), Thread.currentThread().getContextClassLoader());\n     }\n+\n+    public boolean isContinuousTesting() {\n+        return LaunchMode.current().isDevOrTest();\n+    }\n }\n\ndiff --git a/test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusTestExtension.java b/test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusTestExtension.java\nindex 0236ad9dc20f1..a45db590278a5 100644\n--- a/test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusTestExtension.java\n+++ b/test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusTestExtension.java\n@@ -613,6 +613,11 @@ private QuarkusTestExtensionState ensureStarted(ExtensionContext extensionContex\n                         .getCuratedApplication()\n                 : null;\n         boolean isSameCuratedApplication = cl.getCuratedApplication() == curatedApplication;\n+\n+        if (cl.getCuratedApplication() == null) {\n+            throw new IllegalStateException(\n+                    \"Internal error: ClassLoader \" + cl + \" does not have a linked curated application.\");\n+        }\n         cl.getCuratedApplication().setEligibleForReuse(isSameCuratedApplication);\n \n         // TODO if classes are misordered, say because someone overrode the ordering, and there are profiles or resources,\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47810",
    "pr_id": 47810,
    "issue_id": 47657,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Using nested JUnit test classes with QuarkusTest breaks non-Quarkus tests\n### Describe the bug\n\nI have a test annotated with `@QuarkusTest` which includes some `@Nested` classes. This is fine on its own but it breaks non-Quarkus tests in some weird and wonderful ways.\n\nFor example:\n\n```\n✗ ./gradlew test       \n\n> Task :test FAILED\n\nGreetingResourceTest > testHelloEndpoint() FAILED\n    java.util.ServiceConfigurationError: io.smallrye.config.SmallRyeConfigFactory: io.quarkus.runtime.configuration.QuarkusConfigFactory not a subtype\n        at java.base/java.util.ServiceLoader.fail(ServiceLoader.java:593)\n        at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.hasNextService(ServiceLoader.java:1244)\n        at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.hasNext(ServiceLoader.java:1273)\n        at java.base/java.util.ServiceLoader$2.hasNext(ServiceLoader.java:1309)\n        at java.base/java.util.ServiceLoader$3.hasNext(ServiceLoader.java:1393)\n        at io.smallrye.config.SmallRyeConfigProviderResolver.getFactoryFor(SmallRyeConfigProviderResolver.java:102)\n        at io.smallrye.config.SmallRyeConfigProviderResolver.getConfig(SmallRyeConfigProviderResolver.java:78)\n        at io.smallrye.config.SmallRyeConfigProviderResolver.getConfig(SmallRyeConfigProviderResolver.java:66)\n        at io.quarkus.test.config.TestConfigProviderResolver.getConfig(TestConfigProviderResolver.java:36)\n        at org.eclipse.microprofile.config.ConfigProvider.getConfig(ConfigProvider.java:85)\n        at org.acme.GreetingResource.<init>(GreetingResource.kt:12)\n        at org.acme.GreetingResourceTest.testHelloEndpoint(GreetingResourceTest.kt:8)\n\n2 tests completed, 1 failed\n```\n\nThis is in Quarkus 3.22.0; earlier versions are not affected.\n\n### Expected behavior\n\nHaving nested test classes in a Quarkus test should not affect other tests.\n\n### Actual behavior\n\nHaving nested test classes in a Quarkus test breaks non-Quarkus tests.\n\n### How to Reproduce?\n\nReproducer: [quarkus-reproducer.zip](https://github.com/user-attachments/files/20008450/quarkus-reproducer.zip)\n\n** Steps to reproduce **\n\n1. Run `./gradlew test`\n\n** Expected result **\n\nThe build succeeds.\n\n** Actual result **\n\nThe build fails due to failing tests.\n\nNote that ` ./gradlew test --tests GreetingResourceTest` and `./gradlew test --tests GreetingResourceQuarkusTest` both succeed.\n\n### Output of `uname -a` or `ver`\n\nDarwin Rods-MacBook-Pro.local 24.4.0 Darwin Kernel Version 24.4.0: Fri Apr 11 18:33:40 PDT 2025; root:xnu-11417.101.15~117/RELEASE_ARM64_T6031 arm64\n\n### Output of `java -version`\n\nopenjdk version \"21.0.6\" 2025-01-21 OpenJDK Runtime Environment Homebrew (build 21.0.6) OpenJDK 64-Bit Server VM Homebrew (build 21.0.6, mixed mode, sharing)\n\n### Quarkus version or git rev\n\n3.22.0\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nGradle 8.14\n\n### Additional information\n\n_No response_",
    "issue_word_count": 377,
    "test_files_count": 1,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/ExecutionListener.java"
    ],
    "pr_changed_test_files": [
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/ExecutionListener.java"
    ],
    "base_commit": "119f8ebbeda9bbce01d813439f57b9bea1192805",
    "head_commit": "92acbdcace2bbb3b01e221406b4f148545dd4e98",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47810",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47810",
    "dockerfile": "",
    "pr_merged_at": "2025-05-13T09:13:19.000Z",
    "patch": "",
    "test_patch": "diff --git a/test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/ExecutionListener.java b/test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/ExecutionListener.java\nindex ce4140f1a4021..c50323f640d52 100644\n--- a/test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/ExecutionListener.java\n+++ b/test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/ExecutionListener.java\n@@ -19,7 +19,7 @@\n  */\n public class ExecutionListener implements TestExecutionListener {\n \n-    private Deque<ClassLoader> origCl = new ArrayDeque<>();\n+    private final Deque<ClassLoader> origCl = new ArrayDeque<>();\n \n     @Override\n     public void executionStarted(TestIdentifier testIdentifier) {\n@@ -34,8 +34,6 @@ public void executionStarted(TestIdentifier testIdentifier) {\n                 if (isQuarkusTest(classLoader)) {\n                     origCl.push(Thread.currentThread().getContextClassLoader());\n                     Thread.currentThread().setContextClassLoader(classLoader);\n-                } else {\n-                    origCl = null;\n                 }\n             }\n         }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47807",
    "pr_id": 47807,
    "issue_id": 47755,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Quarkus profile is ignored in non-Quarkus tests\n### Describe the bug\n\nIn normal tests (i.e., not annotated with `@QuarkusTest` or `@QuarkusIntergrationTest`) the configuration profile is set to `test`. There doesn’t seem to be a way to specify which profile to use. In particular, `quarkus.profile` is not used (and neither is `quarkus.test.profile`, although I wouldn’t expect it to according to its documentation).\n\n### Expected behavior\n\n`quarkus.profile` is used to determine the profile used in non-Quarkus tests.\n\n### Actual behavior\n\nThe `test` profile is always used.\n\n### How to Reproduce?\n\nReproducer: [quarkus-reproducer.zip](https://github.com/user-attachments/files/20095327/quarkus-reproducer.zip)\n\n**Steps to reproduce**\n\n1. Run `./gradlew build`.\n\n**Expected result**\n\nThe tests pass.\n\n**Actual result**\n\nThe non-Quarkus test fails.\n\nI also tried `QUARKUS_PROFILE=dev ./gradlew build` in case it just wasn’t picking it up from `application.properties` for some reason.\n\n### Output of `uname -a` or `ver`\n\nDarwin Rods-MacBook-Pro.local 24.4.0 Darwin Kernel Version 24.4.0: Fri Apr 11 18:33:40 PDT 2025; root:xnu-11417.101.15~117/RELEASE_ARM64_T6031 arm64\n\n### Output of `java -version`\n\nopenjdk version \"21.0.6\" 2025-01-21 OpenJDK Runtime Environment Homebrew (build 21.0.6) OpenJDK 64-Bit Server VM Homebrew (build 21.0.6, mixed mode, sharing)\n\n### Quarkus version or git rev\n\n3.22.2\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nGradle 8.9\n\n### Additional information\n\n_No response_",
    "issue_word_count": 242,
    "test_files_count": 4,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "extensions/vertx-http/dev-ui-tests/pom.xml",
      "extensions/vertx-http/dev-ui-tests/src/main/java/io/quarkus/devui/tests/DevUIBuildTimeDataTest.java",
      "extensions/vertx-http/dev-ui-tests/src/main/java/io/quarkus/devui/tests/DevUIJsonRPCTest.java",
      "test-framework/junit5-config/src/main/java/io/quarkus/test/config/TestConfigProviderResolver.java"
    ],
    "pr_changed_test_files": [
      "extensions/vertx-http/dev-ui-tests/pom.xml",
      "extensions/vertx-http/dev-ui-tests/src/main/java/io/quarkus/devui/tests/DevUIBuildTimeDataTest.java",
      "extensions/vertx-http/dev-ui-tests/src/main/java/io/quarkus/devui/tests/DevUIJsonRPCTest.java",
      "test-framework/junit5-config/src/main/java/io/quarkus/test/config/TestConfigProviderResolver.java"
    ],
    "base_commit": "af0144111a80a5c5215d4e7eaded136615ea0f11",
    "head_commit": "71e7d40bcbd1328f921945bdbe05232ad8f3a947",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47807",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47807",
    "dockerfile": "",
    "pr_merged_at": "2025-05-14T01:09:57.000Z",
    "patch": "",
    "test_patch": "diff --git a/extensions/vertx-http/dev-ui-tests/pom.xml b/extensions/vertx-http/dev-ui-tests/pom.xml\nindex 2e4d76670e19d..b0266ce374bd0 100644\n--- a/extensions/vertx-http/dev-ui-tests/pom.xml\n+++ b/extensions/vertx-http/dev-ui-tests/pom.xml\n@@ -12,6 +12,10 @@\n     <name>Quarkus - Vert.x - HTTP - Dev UI Tests</name>\n     \n     <dependencies>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-junit5-config</artifactId>\n+        </dependency>\n         <dependency>\n             <groupId>io.vertx</groupId>\n             <artifactId>vertx-core</artifactId>\n\ndiff --git a/extensions/vertx-http/dev-ui-tests/src/main/java/io/quarkus/devui/tests/DevUIBuildTimeDataTest.java b/extensions/vertx-http/dev-ui-tests/src/main/java/io/quarkus/devui/tests/DevUIBuildTimeDataTest.java\nindex 0a2cd383b4879..9a478c59d41e8 100644\n--- a/extensions/vertx-http/dev-ui-tests/src/main/java/io/quarkus/devui/tests/DevUIBuildTimeDataTest.java\n+++ b/extensions/vertx-http/dev-ui-tests/src/main/java/io/quarkus/devui/tests/DevUIBuildTimeDataTest.java\n@@ -1,5 +1,7 @@\n package io.quarkus.devui.tests;\n \n+import static io.quarkus.runtime.LaunchMode.DEVELOPMENT;\n+\n import java.io.IOException;\n import java.net.MalformedURLException;\n import java.net.URI;\n@@ -8,7 +10,8 @@\n import java.util.List;\n import java.util.Scanner;\n \n-import org.eclipse.microprofile.config.ConfigProvider;\n+import org.eclipse.microprofile.config.Config;\n+import org.eclipse.microprofile.config.spi.ConfigProviderResolver;\n import org.jboss.logging.Logger;\n \n import com.fasterxml.jackson.core.JsonFactory;\n@@ -16,6 +19,8 @@\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n \n+import io.quarkus.test.config.TestConfigProviderResolver;\n+\n public abstract class DevUIBuildTimeDataTest {\n \n     protected static final Logger log = Logger.getLogger(DevUIBuildTimeDataTest.class);\n@@ -26,9 +31,9 @@ public abstract class DevUIBuildTimeDataTest {\n     private final JsonFactory factory = mapper.getFactory();\n \n     public DevUIBuildTimeDataTest(String namespace) {\n-        String testUrl = ConfigProvider.getConfig().getValue(\"test.url\", String.class);\n-        String nonApplicationRoot = ConfigProvider.getConfig()\n-                .getOptionalValue(\"quarkus.http.non-application-root-path\", String.class).orElse(\"q\");\n+        Config config = ((TestConfigProviderResolver) ConfigProviderResolver.instance()).getConfig(DEVELOPMENT);\n+        String testUrl = config.getValue(\"test.url\", String.class);\n+        String nonApplicationRoot = config.getOptionalValue(\"quarkus.http.non-application-root-path\", String.class).orElse(\"q\");\n         if (!nonApplicationRoot.startsWith(\"/\")) {\n             nonApplicationRoot = \"/\" + nonApplicationRoot;\n         }\n\ndiff --git a/extensions/vertx-http/dev-ui-tests/src/main/java/io/quarkus/devui/tests/DevUIJsonRPCTest.java b/extensions/vertx-http/dev-ui-tests/src/main/java/io/quarkus/devui/tests/DevUIJsonRPCTest.java\nindex 2c6e51397d64d..f3ca88632c0a8 100644\n--- a/extensions/vertx-http/dev-ui-tests/src/main/java/io/quarkus/devui/tests/DevUIJsonRPCTest.java\n+++ b/extensions/vertx-http/dev-ui-tests/src/main/java/io/quarkus/devui/tests/DevUIJsonRPCTest.java\n@@ -1,5 +1,7 @@\n package io.quarkus.devui.tests;\n \n+import static io.quarkus.runtime.LaunchMode.DEVELOPMENT;\n+\n import java.io.IOException;\n import java.net.URI;\n import java.util.Map;\n@@ -7,7 +9,7 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.TimeUnit;\n \n-import org.eclipse.microprofile.config.ConfigProvider;\n+import org.eclipse.microprofile.config.spi.ConfigProviderResolver;\n import org.jboss.logging.Logger;\n \n import com.fasterxml.jackson.core.JsonFactory;\n@@ -19,6 +21,7 @@\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n \n+import io.quarkus.test.config.TestConfigProviderResolver;\n import io.vertx.core.Vertx;\n import io.vertx.core.buffer.Buffer;\n import io.vertx.core.http.HttpClient;\n@@ -40,13 +43,14 @@ public class DevUIJsonRPCTest {\n     private final String testUrl;\n \n     public DevUIJsonRPCTest(String namespace) {\n-        this(namespace, ConfigProvider.getConfig().getValue(\"test.url\", String.class));\n+        this(namespace, ((TestConfigProviderResolver) ConfigProviderResolver.instance()).getConfig(DEVELOPMENT)\n+                .getValue(\"test.url\", String.class));\n     }\n \n     public DevUIJsonRPCTest(String namespace, String testUrl) {\n         this.namespace = namespace;\n         this.testUrl = testUrl;\n-        String nonApplicationRoot = ConfigProvider.getConfig()\n+        String nonApplicationRoot = ((TestConfigProviderResolver) ConfigProviderResolver.instance()).getConfig(DEVELOPMENT)\n                 .getOptionalValue(\"quarkus.http.non-application-root-path\", String.class).orElse(\"q\");\n         if (!nonApplicationRoot.startsWith(\"/\")) {\n             nonApplicationRoot = \"/\" + nonApplicationRoot;\n\ndiff --git a/test-framework/junit5-config/src/main/java/io/quarkus/test/config/TestConfigProviderResolver.java b/test-framework/junit5-config/src/main/java/io/quarkus/test/config/TestConfigProviderResolver.java\nindex ab7fbb0e84f72..47e030849e347 100644\n--- a/test-framework/junit5-config/src/main/java/io/quarkus/test/config/TestConfigProviderResolver.java\n+++ b/test-framework/junit5-config/src/main/java/io/quarkus/test/config/TestConfigProviderResolver.java\n@@ -12,6 +12,7 @@\n import io.quarkus.runtime.configuration.ConfigUtils;\n import io.smallrye.config.SmallRyeConfig;\n import io.smallrye.config.SmallRyeConfigBuilder;\n+import io.smallrye.config.SmallRyeConfigBuilderCustomizer;\n import io.smallrye.config.SmallRyeConfigProviderResolver;\n \n /**\n@@ -50,15 +51,28 @@ public Config getConfig() {\n     public Config getConfig(final LaunchMode mode) {\n         if (classLoader.equals(Thread.currentThread().getContextClassLoader())) {\n             resolver.releaseConfig(classLoader);\n+            LaunchMode current = LaunchMode.current();\n+            LaunchMode.set(mode);\n             SmallRyeConfig config = configs.computeIfAbsent(mode, new Function<LaunchMode, SmallRyeConfig>() {\n                 @Override\n                 public SmallRyeConfig apply(final LaunchMode launchMode) {\n                     return ConfigUtils.configBuilder(false, true, mode)\n-                            .withProfile(mode.getDefaultProfile())\n+                            .withCustomizers(new SmallRyeConfigBuilderCustomizer() {\n+                                @Override\n+                                public void configBuilder(final SmallRyeConfigBuilder builder) {\n+                                    builder.withDefaultValue(\"quarkus.profile\", launchMode.getDefaultProfile());\n+                                }\n+\n+                                @Override\n+                                public int priority() {\n+                                    return Integer.MAX_VALUE;\n+                                }\n+                            })\n                             .withMapping(TestConfig.class, \"quarkus.test\")\n                             .build();\n                 }\n             });\n+            LaunchMode.set(current);\n             resolver.registerConfig(config, classLoader);\n             return config;\n         }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47802",
    "pr_id": 47802,
    "issue_id": 35605,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Virtual Thread Support in GraphQL\n### Description\n\nI saw help documents about gRPC and reactive messaging on the official website, but there is no help document about graphql?\n\n### Implementation ideas\n\n_No response_",
    "issue_word_count": 31,
    "test_files_count": 7,
    "non_test_files_count": 6,
    "pr_changed_files": [
      "bom/application/pom.xml",
      "docs/src/main/asciidoc/smallrye-graphql.adoc",
      "extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/spi/datafetcher/BlockingHelper.java",
      "extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/spi/datafetcher/QuarkusCompletionStageDataFetcher.java",
      "extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/spi/datafetcher/QuarkusDefaultDataFetcher.java",
      "extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/spi/datafetcher/QuarkusUniDataFetcher.java",
      "integration-tests/virtual-threads/graphql-virtual-threads/pom.xml",
      "integration-tests/virtual-threads/graphql-virtual-threads/src/main/resources/application.properties",
      "integration-tests/virtual-threads/graphql-virtual-threads/src/test/java/io/quarkus/virtual/graphql/AbstractGraphQLTest.java",
      "integration-tests/virtual-threads/graphql-virtual-threads/src/test/java/io/quarkus/virtual/graphql/GraphQLThreadTest.java",
      "integration-tests/virtual-threads/graphql-virtual-threads/src/test/java/io/quarkus/virtual/graphql/RunOnVirtualThreadIT.java",
      "integration-tests/virtual-threads/graphql-virtual-threads/src/test/java/io/quarkus/virtual/graphql/RunOnVirtualThreadTest.java",
      "integration-tests/virtual-threads/pom.xml"
    ],
    "pr_changed_test_files": [
      "integration-tests/virtual-threads/graphql-virtual-threads/pom.xml",
      "integration-tests/virtual-threads/graphql-virtual-threads/src/main/resources/application.properties",
      "integration-tests/virtual-threads/graphql-virtual-threads/src/test/java/io/quarkus/virtual/graphql/AbstractGraphQLTest.java",
      "integration-tests/virtual-threads/graphql-virtual-threads/src/test/java/io/quarkus/virtual/graphql/GraphQLThreadTest.java",
      "integration-tests/virtual-threads/graphql-virtual-threads/src/test/java/io/quarkus/virtual/graphql/RunOnVirtualThreadIT.java",
      "integration-tests/virtual-threads/graphql-virtual-threads/src/test/java/io/quarkus/virtual/graphql/RunOnVirtualThreadTest.java",
      "integration-tests/virtual-threads/pom.xml"
    ],
    "base_commit": "ae96d4cc24e83e8e34808766dd1bef5d3bf7a07a",
    "head_commit": "3280ec40ea8a63752ca3bd0e9dacc75c556d18d7",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47802",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47802",
    "dockerfile": "",
    "pr_merged_at": "2025-06-19T11:40:04.000Z",
    "patch": "diff --git a/bom/application/pom.xml b/bom/application/pom.xml\nindex 0edd3d375d6e5..0a4cf58991481 100644\n--- a/bom/application/pom.xml\n+++ b/bom/application/pom.xml\n@@ -51,7 +51,7 @@\n         <smallrye-health.version>4.2.0</smallrye-health.version>\n         <smallrye-metrics.version>4.0.0</smallrye-metrics.version>\n         <smallrye-open-api.version>4.0.11</smallrye-open-api.version>\n-        <smallrye-graphql.version>2.13.0</smallrye-graphql.version>\n+        <smallrye-graphql.version>2.14.0</smallrye-graphql.version>\n         <smallrye-fault-tolerance.version>6.9.1</smallrye-fault-tolerance.version>\n         <smallrye-jwt.version>4.6.2</smallrye-jwt.version>\n         <smallrye-context-propagation.version>2.2.1</smallrye-context-propagation.version>\n\ndiff --git a/docs/src/main/asciidoc/smallrye-graphql.adoc b/docs/src/main/asciidoc/smallrye-graphql.adoc\nindex 9537d30858049..f5a803891c246 100644\n--- a/docs/src/main/asciidoc/smallrye-graphql.adoc\n+++ b/docs/src/main/asciidoc/smallrye-graphql.adoc\n@@ -503,6 +503,22 @@ You can mix Blocking and Non-blocking in one request,\n \n Above will fetch the film on the event-loop threads, but switch to the worker thread to fetch the heroes.\n \n+=== RunOnVirtualThread\n+\n+Queries can be run on a virtual thread by adding `@RunOnVirtualThread` to the method:\n+\n+[source,java]\n+----\n+    @Query\n+    @Description(\"Get a Films from a galaxy far far away\")\n+    @RunOnVirtualThread\n+    public Film getFilm(int filmId) {\n+        // ...\n+    }\n+----\n+\n+Please note the general guidelines for using xref:./virtual-threads.adoc[virtual threads]\n+\n == Abstract Types\n \n The current schema is simple with only two concrete types, `Hero` and `Film`.\n\ndiff --git a/extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/spi/datafetcher/BlockingHelper.java b/extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/spi/datafetcher/BlockingHelper.java\nindex 440a2fbd1c9d0..313185523ce95 100644\n--- a/extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/spi/datafetcher/BlockingHelper.java\n+++ b/extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/spi/datafetcher/BlockingHelper.java\n@@ -1,7 +1,9 @@\n package io.quarkus.smallrye.graphql.runtime.spi.datafetcher;\n \n import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n \n+import io.quarkus.virtual.threads.VirtualThreadsRecorder;\n import io.smallrye.graphql.schema.model.Execute;\n import io.smallrye.graphql.schema.model.Operation;\n import io.vertx.core.Context;\n@@ -22,9 +24,27 @@ public static boolean nonBlockingShouldExecuteBlocking(Operation operation, Cont\n         return operation.getExecute().equals(Execute.BLOCKING) && vc.isEventLoopContext();\n     }\n \n+    public static boolean shouldUseVirtualThread(Operation operation, Context vc) {\n+        // Use virtual threads if the operation is marked as run on virtual thread\n+        return operation.getExecute().equals(Execute.RUN_ON_VIRTUAL_THREAD);\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n-    public static void runBlocking(Context vc, Callable<Object> contextualCallable, Promise result) {\n-        // Here call blocking with context\n-        vc.executeBlocking(contextualCallable).onComplete(result);\n+    public static void runBlocking(Context vc, Callable<Object> contextualCallable, Promise result, Operation operation) {\n+        // Check if we should use virtual threads\n+        if (shouldUseVirtualThread(operation, vc)) {\n+            ExecutorService virtualThreadsExecutor = VirtualThreadsRecorder.getCurrent();\n+            virtualThreadsExecutor.submit(() -> {\n+                try {\n+                    Object value = contextualCallable.call();\n+                    result.complete(value);\n+                } catch (Throwable t) {\n+                    result.fail(t);\n+                }\n+            });\n+        } else {\n+            // use regular blocking execution\n+            vc.executeBlocking(contextualCallable).onComplete(result);\n+        }\n     }\n }\n\ndiff --git a/extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/spi/datafetcher/QuarkusCompletionStageDataFetcher.java b/extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/spi/datafetcher/QuarkusCompletionStageDataFetcher.java\nindex 01870a6a6fb74..bb28317733d15 100644\n--- a/extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/spi/datafetcher/QuarkusCompletionStageDataFetcher.java\n+++ b/extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/spi/datafetcher/QuarkusCompletionStageDataFetcher.java\n@@ -61,7 +61,7 @@ private Uni<?> handleUserMethodCallBlocking(Object[] transformedArguments, Conte\n         });\n \n         // Here call blocking with context\n-        BlockingHelper.runBlocking(vc, contextualCallable, result);\n+        BlockingHelper.runBlocking(vc, contextualCallable, result, operation);\n         return Uni.createFrom().completionStage(result.future().toCompletionStage());\n     }\n \n@@ -86,7 +86,7 @@ private Uni<List<T>> handleUserBatchLoadBlocking(Object[] arguments, Context vc)\n         });\n \n         // Here call blocking with context\n-        BlockingHelper.runBlocking(vc, contextualCallable, result);\n+        BlockingHelper.runBlocking(vc, contextualCallable, result, operation);\n         return Uni.createFrom().completionStage(result.future().toCompletionStage());\n     }\n \n\ndiff --git a/extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/spi/datafetcher/QuarkusDefaultDataFetcher.java b/extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/spi/datafetcher/QuarkusDefaultDataFetcher.java\nindex 2b1bfc5581549..152912e71903d 100644\n--- a/extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/spi/datafetcher/QuarkusDefaultDataFetcher.java\n+++ b/extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/spi/datafetcher/QuarkusDefaultDataFetcher.java\n@@ -103,7 +103,7 @@ private <T> T invokeAndTransformBlocking(final io.smallrye.graphql.api.Context c\n             }\n         });\n         // Here call blocking with context\n-        BlockingHelper.runBlocking(vc, contextualCallable, result);\n+        BlockingHelper.runBlocking(vc, contextualCallable, result, operation);\n \n         return (T) Uni.createFrom().completionStage(result.future().toCompletionStage()).onItemOrFailure()\n                 .invoke((item, error) -> {\n@@ -134,7 +134,7 @@ private CompletionStage<List<T>> invokeBatchBlocking(DataFetchingEnvironment dfe\n         });\n \n         // Here call blocking with context\n-        BlockingHelper.runBlocking(vc, contextualCallable, result);\n+        BlockingHelper.runBlocking(vc, contextualCallable, result, operation);\n         return result.future().toCompletionStage()\n                 .whenComplete((resultList, error) -> {\n                     if (error != null) {\n\ndiff --git a/extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/spi/datafetcher/QuarkusUniDataFetcher.java b/extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/spi/datafetcher/QuarkusUniDataFetcher.java\nindex a824a7e906633..b090d278fda70 100644\n--- a/extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/spi/datafetcher/QuarkusUniDataFetcher.java\n+++ b/extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/spi/datafetcher/QuarkusUniDataFetcher.java\n@@ -58,7 +58,7 @@ private Uni<?> handleUserMethodCallBlocking(Object[] transformedArguments, Conte\n         });\n \n         // Here call blocking with context\n-        BlockingHelper.runBlocking(vc, contextualCallable, result);\n+        BlockingHelper.runBlocking(vc, contextualCallable, result, operation);\n         return Uni.createFrom().completionStage(result.future().toCompletionStage());\n     }\n \n@@ -83,7 +83,7 @@ private Uni<List<T>> handleUserBatchLoadBlocking(Object[] arguments, Context vc)\n         });\n \n         // Here call blocking with context\n-        BlockingHelper.runBlocking(vc, contextualCallable, result);\n+        BlockingHelper.runBlocking(vc, contextualCallable, result, operation);\n         return Uni.createFrom().completionStage(result.future().toCompletionStage());\n     }\n \n",
    "test_patch": "diff --git a/integration-tests/virtual-threads/graphql-virtual-threads/pom.xml b/integration-tests/virtual-threads/graphql-virtual-threads/pom.xml\nnew file mode 100644\nindex 0000000000000..34e32d864c07b\n--- /dev/null\n+++ b/integration-tests/virtual-threads/graphql-virtual-threads/pom.xml\n@@ -0,0 +1,79 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <artifactId>quarkus-virtual-threads-integration-tests-parent</artifactId>\n+        <groupId>io.quarkus</groupId>\n+        <version>999-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>quarkus-integration-test-virtual-threads-graphql</artifactId>\n+    <name>Quarkus - Integration Tests - Virtual Threads - Graphql</name>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-smallrye-graphql</artifactId>\n+        </dependency>\n+        <!-- Use the \"compile\" scope because we need to include the VirtualThreadsAssertions in the app -->\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-test-vertx</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-junit5</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus.junit5</groupId>\n+            <artifactId>junit5-virtual-threads</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.rest-assured</groupId>\n+            <artifactId>rest-assured</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.awaitility</groupId>\n+            <artifactId>awaitility</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.assertj</groupId>\n+            <artifactId>assertj-core</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-smallrye-graphql-deployment</artifactId>\n+            <version>${project.version}</version>\n+            <type>pom</type>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>*</groupId>\n+                    <artifactId>*</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>io.quarkus</groupId>\n+                <artifactId>quarkus-maven-plugin</artifactId>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+</project>\n\ndiff --git a/integration-tests/virtual-threads/graphql-virtual-threads/src/main/resources/application.properties b/integration-tests/virtual-threads/graphql-virtual-threads/src/main/resources/application.properties\nnew file mode 100644\nindex 0000000000000..e69de29bb2d1d\n\ndiff --git a/integration-tests/virtual-threads/graphql-virtual-threads/src/test/java/io/quarkus/virtual/graphql/AbstractGraphQLTest.java b/integration-tests/virtual-threads/graphql-virtual-threads/src/test/java/io/quarkus/virtual/graphql/AbstractGraphQLTest.java\nnew file mode 100644\nindex 0000000000000..d6f5aaa7a451a\n--- /dev/null\n+++ b/integration-tests/virtual-threads/graphql-virtual-threads/src/test/java/io/quarkus/virtual/graphql/AbstractGraphQLTest.java\n@@ -0,0 +1,183 @@\n+package io.quarkus.virtual.graphql;\n+\n+import static io.quarkus.jsonp.JsonProviderHolder.jsonProvider;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import jakarta.json.JsonObject;\n+import jakarta.json.JsonObjectBuilder;\n+import jakarta.json.JsonReader;\n+\n+import org.hamcrest.CoreMatchers;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.parsing.Parser;\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+\n+/**\n+ * Some shared methods\n+ */\n+public abstract class AbstractGraphQLTest {\n+\n+    static {\n+        RestAssured.registerParser(\"application/graphql+json\", Parser.JSON);\n+    }\n+\n+    protected void pingTest() {\n+        pingPongTest(\"ping\", \"pong\");\n+    }\n+\n+    protected void pongTest() {\n+        pingPongTest(\"pong\", \"ping\");\n+    }\n+\n+    private void pingPongTest(String operationName, String message) {\n+        String pingRequest = getPayload(\"{\\n\" +\n+                \"  \" + operationName + \" {\\n\" +\n+                \"    message\\n\" +\n+                \"  }\\n\" +\n+                \"}\");\n+\n+        RestAssured.given().when()\n+                .accept(MEDIATYPE_JSON)\n+                .contentType(MEDIATYPE_JSON)\n+                .body(pingRequest)\n+                .post(\"/graphql\")\n+                .then()\n+                .assertThat()\n+                .statusCode(200)\n+                .and()\n+                .body(CoreMatchers.containsString(\"{\\\"data\\\":{\\\"\" + operationName + \"\\\":{\\\"message\\\":\\\"\" + message + \"\\\"}}}\"));\n+    }\n+\n+    protected String getPayload(String query) {\n+        return getPayload(query, null);\n+    }\n+\n+    protected String getPayload(String query, String variables) {\n+        JsonObject jsonObject = createRequestBody(query, variables);\n+        return jsonObject.toString();\n+    }\n+\n+    protected JsonObject createRequestBody(String graphQL, String variables) {\n+        // Create the request\n+        JsonObject vjo = jsonProvider().createObjectBuilder().build();\n+        if (variables != null && !variables.isEmpty()) {\n+            try (JsonReader jsonReader = jsonProvider().createReader(new StringReader(variables))) {\n+                vjo = jsonReader.readObject();\n+            }\n+        }\n+\n+        JsonObjectBuilder job = jsonProvider().createObjectBuilder();\n+        if (graphQL != null && !graphQL.isEmpty()) {\n+            job.add(QUERY, graphQL);\n+        }\n+\n+        return job.add(VARIABLES, vjo).build();\n+    }\n+\n+    protected static String getPropertyAsString() {\n+        return getPropertyAsString(null);\n+    }\n+\n+    protected static String getPropertyAsString(Map<String, String> otherProperties) {\n+        try {\n+            Properties p = new Properties();\n+            p.putAll(PROPERTIES);\n+            StringWriter writer = new StringWriter();\n+            if (otherProperties != null) {\n+                p.putAll(otherProperties);\n+            }\n+            p.store(writer, \"Test Properties\");\n+            return writer.toString();\n+        } catch (IOException ex) {\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+\n+    protected static final String MEDIATYPE_JSON = \"application/json\";\n+    protected static final String MEDIATYPE_TEXT = \"text/plain\";\n+    protected static final String QUERY = \"query\";\n+    protected static final String VARIABLES = \"variables\";\n+\n+    protected static final Properties PROPERTIES = new Properties();\n+    static {\n+        PROPERTIES.put(\"smallrye.graphql.allowGet\", \"true\");\n+        PROPERTIES.put(\"smallrye.graphql.printDataFetcherException\", \"true\");\n+        PROPERTIES.put(\"smallrye.graphql.events.enabled\", \"true\");\n+    }\n+\n+    /**\n+     * Hold info about a thread\n+     */\n+    public static class TestThread {\n+\n+        private long id;\n+        private String name;\n+        private int priority;\n+        private String state;\n+        private String group;\n+\n+        public TestThread() {\n+            super();\n+        }\n+\n+        public TestThread(long id, String name, int priority, String state, String group) {\n+            this.id = id;\n+            this.name = name;\n+            this.priority = priority;\n+            this.state = state;\n+            this.group = group;\n+        }\n+\n+        public long getId() {\n+            return id;\n+        }\n+\n+        public void setId(long id) {\n+            this.id = id;\n+        }\n+\n+        public String getName() {\n+            return name;\n+        }\n+\n+        public void setName(String name) {\n+            this.name = name;\n+        }\n+\n+        public int getPriority() {\n+            return priority;\n+        }\n+\n+        public void setPriority(int priority) {\n+            this.priority = priority;\n+        }\n+\n+        public String getState() {\n+            return state;\n+        }\n+\n+        public void setState(String state) {\n+            this.state = state;\n+        }\n+\n+        public String getGroup() {\n+            return group;\n+        }\n+\n+        public void setGroup(String group) {\n+            this.group = group;\n+        }\n+\n+        public String getVertxContextClassName() {\n+            Context vc = Vertx.currentContext();\n+            return vc.getClass().getName();\n+        }\n+    }\n+}\n\ndiff --git a/integration-tests/virtual-threads/graphql-virtual-threads/src/test/java/io/quarkus/virtual/graphql/GraphQLThreadTest.java b/integration-tests/virtual-threads/graphql-virtual-threads/src/test/java/io/quarkus/virtual/graphql/GraphQLThreadTest.java\nnew file mode 100644\nindex 0000000000000..873dbbcd9fec6\n--- /dev/null\n+++ b/integration-tests/virtual-threads/graphql-virtual-threads/src/test/java/io/quarkus/virtual/graphql/GraphQLThreadTest.java\n@@ -0,0 +1,403 @@\n+package io.quarkus.virtual.graphql;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import jakarta.inject.Inject;\n+\n+import org.eclipse.microprofile.graphql.GraphQLApi;\n+import org.eclipse.microprofile.graphql.Query;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.smallrye.common.annotation.Blocking;\n+import io.smallrye.common.annotation.NonBlocking;\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.core.Vertx;\n+\n+/**\n+ * Testing the thread used.\n+ * Copied from graphql extension to make sure threading without @RunOnVirtualThread runs the same.\n+ */\n+@QuarkusTest\n+public class GraphQLThreadTest extends AbstractGraphQLTest {\n+\n+    @Test\n+    public void testOnlyObject() {\n+\n+        String fooRequest = getPayload(\"{\\n\" +\n+                \"  onlyObject {\\n\" +\n+                \"    name\\n\" +\n+                \"    priority\\n\" +\n+                \"    state\\n\" +\n+                \"    group\\n\" +\n+                \"    vertxContextClassName\\n\" +\n+                \"  }\\n\" +\n+                \"}\");\n+\n+        RestAssured.given().when()\n+                .accept(MEDIATYPE_JSON)\n+                .contentType(MEDIATYPE_JSON)\n+                .body(fooRequest)\n+                .post(\"/graphql\")\n+                .then()\n+                .assertThat()\n+                .statusCode(200)\n+                .and()\n+                .log().body().and()\n+                .body(\"data.onlyObject.name\", Matchers.startsWith(\"executor-thread\"))\n+                .and()\n+                .body(\"data.onlyObject.vertxContextClassName\", Matchers.equalTo(\"io.vertx.core.impl.DuplicatedContext\"));\n+    }\n+\n+    @Test\n+    public void testAnnotatedNonBlockingObject() {\n+\n+        String fooRequest = getPayload(\"{\\n\" +\n+                \"  annotatedNonBlockingObject {\\n\" +\n+                \"    name\\n\" +\n+                \"    priority\\n\" +\n+                \"    state\\n\" +\n+                \"    group\\n\" +\n+                \"    vertxContextClassName\\n\" +\n+                \"  }\\n\" +\n+                \"}\");\n+\n+        RestAssured.given().when()\n+                .accept(MEDIATYPE_JSON)\n+                .contentType(MEDIATYPE_JSON)\n+                .body(fooRequest)\n+                .post(\"/graphql\")\n+                .then()\n+                .assertThat()\n+                .statusCode(200)\n+                .and()\n+                .log().body().and()\n+                .body(\"data.annotatedNonBlockingObject.name\", Matchers.startsWith(\"vert.x-eventloop-thread\"))\n+                .and()\n+                .body(\"data.annotatedNonBlockingObject.vertxContextClassName\",\n+                        Matchers.equalTo(\"io.vertx.core.impl.DuplicatedContext\"));\n+    }\n+\n+    @Test\n+    public void testAnnotatedBlockingObject() {\n+\n+        String fooRequest = getPayload(\"{\\n\" +\n+                \"  annotatedBlockingObject {\\n\" +\n+                \"    name\\n\" +\n+                \"    priority\\n\" +\n+                \"    state\\n\" +\n+                \"    group\\n\" +\n+                \"    vertxContextClassName\\n\" +\n+                \"  }\\n\" +\n+                \"}\");\n+\n+        RestAssured.given().when()\n+                .accept(MEDIATYPE_JSON)\n+                .contentType(MEDIATYPE_JSON)\n+                .body(fooRequest)\n+                .post(\"/graphql\")\n+                .then()\n+                .assertThat()\n+                .statusCode(200)\n+                .and()\n+                .log().body().and()\n+                .body(\"data.annotatedBlockingObject.name\", Matchers.startsWith(\"executor-thread\"))\n+                .and()\n+                .body(\"data.annotatedBlockingObject.vertxContextClassName\",\n+                        Matchers.equalTo(\"io.vertx.core.impl.DuplicatedContext\"));\n+    }\n+\n+    @Test\n+    public void testOnlyReactiveUni() {\n+\n+        String fooRequest = getPayload(\"{\\n\" +\n+                \"  onlyReactiveUni {\\n\" +\n+                \"    name\\n\" +\n+                \"    priority\\n\" +\n+                \"    state\\n\" +\n+                \"    group\\n\" +\n+                \"    vertxContextClassName\\n\" +\n+                \"  }\\n\" +\n+                \"}\");\n+\n+        RestAssured.given().when()\n+                .accept(MEDIATYPE_JSON)\n+                .contentType(MEDIATYPE_JSON)\n+                .body(fooRequest)\n+                .post(\"/graphql\")\n+                .then()\n+                .assertThat()\n+                .statusCode(200)\n+                .and()\n+                .log().body().and()\n+                .body(\"data.onlyReactiveUni.name\", Matchers.startsWith(\"vert.x-eventloop-thread\"))\n+                .and()\n+                .body(\"data.onlyReactiveUni.vertxContextClassName\", Matchers.equalTo(\"io.vertx.core.impl.DuplicatedContext\"));\n+    }\n+\n+    @Test\n+    public void testOnlyReactiveUniWithDelay() {\n+\n+        String fooRequest = getPayload(\"{\\n\" +\n+                \"  onlyReactiveUniWithDelay {\\n\" +\n+                \"    name\\n\" +\n+                \"    priority\\n\" +\n+                \"    state\\n\" +\n+                \"    group\\n\" +\n+                \"    vertxContextClassName\\n\" +\n+                \"  }\\n\" +\n+                \"}\");\n+\n+        RestAssured.given().when()\n+                .accept(MEDIATYPE_JSON)\n+                .contentType(MEDIATYPE_JSON)\n+                .body(fooRequest)\n+                .post(\"/graphql\")\n+                .then()\n+                .assertThat()\n+                .statusCode(200)\n+                .and()\n+                .log().body().and()\n+                .body(\"data.onlyReactiveUniWithDelay.name\", Matchers.startsWith(\"vert.x-eventloop-thread\"))\n+                .and()\n+                .body(\"data.onlyReactiveUniWithDelay.vertxContextClassName\",\n+                        Matchers.equalTo(\"io.vertx.core.impl.DuplicatedContext\"));\n+    }\n+\n+    @Test\n+    public void testAnnotatedBlockingReactiveUni() {\n+\n+        String fooRequest = getPayload(\"{\\n\" +\n+                \"  annotatedBlockingReactiveUni {\\n\" +\n+                \"    name\\n\" +\n+                \"    priority\\n\" +\n+                \"    state\\n\" +\n+                \"    group\\n\" +\n+                \"    vertxContextClassName\\n\" +\n+                \"  }\\n\" +\n+                \"}\");\n+\n+        RestAssured.given().when()\n+                .accept(MEDIATYPE_JSON)\n+                .contentType(MEDIATYPE_JSON)\n+                .body(fooRequest)\n+                .post(\"/graphql\")\n+                .then()\n+                .assertThat()\n+                .statusCode(200)\n+                .and()\n+                .log().body().and()\n+                .body(\"data.annotatedBlockingReactiveUni.name\", Matchers.startsWith(\"executor-thread\"))\n+                .and()\n+                .body(\"data.annotatedBlockingReactiveUni.vertxContextClassName\",\n+                        Matchers.equalTo(\"io.vertx.core.impl.DuplicatedContext\"));\n+\n+    }\n+\n+    @Test\n+    public void testAnnotatedNonBlockingReactiveUni() {\n+\n+        String fooRequest = getPayload(\"{\\n\" +\n+                \"  annotatedNonBlockingReactiveUni {\\n\" +\n+                \"    name\\n\" +\n+                \"    priority\\n\" +\n+                \"    state\\n\" +\n+                \"    group\\n\" +\n+                \"    vertxContextClassName\\n\" +\n+                \"  }\\n\" +\n+                \"}\");\n+\n+        RestAssured.given().when()\n+                .accept(MEDIATYPE_JSON)\n+                .contentType(MEDIATYPE_JSON)\n+                .body(fooRequest)\n+                .post(\"/graphql\")\n+                .then()\n+                .assertThat()\n+                .statusCode(200)\n+                .and()\n+                .log().body().and()\n+                .body(\"data.annotatedNonBlockingReactiveUni.name\", Matchers.startsWith(\"vert.x-eventloop-thread\"))\n+                .and()\n+                .body(\"data.annotatedNonBlockingReactiveUni.vertxContextClassName\",\n+                        Matchers.equalTo(\"io.vertx.core.impl.DuplicatedContext\"));\n+\n+    }\n+\n+    @Test\n+    public void testOnlyCompletionStage() {\n+\n+        String fooRequest = getPayload(\"{\\n\" +\n+                \"  onlyCompletionStage {\\n\" +\n+                \"    name\\n\" +\n+                \"    priority\\n\" +\n+                \"    state\\n\" +\n+                \"    group\\n\" +\n+                \"    vertxContextClassName\\n\" +\n+                \"  }\\n\" +\n+                \"}\");\n+\n+        RestAssured.given().when()\n+                .accept(MEDIATYPE_JSON)\n+                .contentType(MEDIATYPE_JSON)\n+                .body(fooRequest)\n+                .post(\"/graphql\")\n+                .then()\n+                .assertThat()\n+                .statusCode(200)\n+                .and()\n+                .log().body().and()\n+                .body(\"data.onlyCompletionStage.name\", Matchers.startsWith(\"vert.x-eventloop-thread\"))\n+                .and()\n+                .body(\"data.onlyCompletionStage.vertxContextClassName\",\n+                        Matchers.equalTo(\"io.vertx.core.impl.DuplicatedContext\"));\n+\n+    }\n+\n+    @Test\n+    public void testAnnotatedBlockingCompletionStage() {\n+\n+        String fooRequest = getPayload(\"{\\n\" +\n+                \"  annotatedBlockingCompletionStage {\\n\" +\n+                \"    name\\n\" +\n+                \"    priority\\n\" +\n+                \"    state\\n\" +\n+                \"    group\\n\" +\n+                \"    vertxContextClassName\\n\" +\n+                \"  }\\n\" +\n+                \"}\");\n+\n+        RestAssured.given().when()\n+                .accept(MEDIATYPE_JSON)\n+                .contentType(MEDIATYPE_JSON)\n+                .body(fooRequest)\n+                .post(\"/graphql\")\n+                .then()\n+                .assertThat()\n+                .statusCode(200)\n+                .and()\n+                .log().body().and()\n+                .body(\"data.annotatedBlockingCompletionStage.name\", Matchers.startsWith(\"executor-thread\"))\n+                .and()\n+                .body(\"data.annotatedBlockingCompletionStage.vertxContextClassName\",\n+                        Matchers.equalTo(\"io.vertx.core.impl.DuplicatedContext\"));\n+\n+    }\n+\n+    @Test\n+    public void testAnnotatedNonBlockingCompletionStage() {\n+\n+        String fooRequest = getPayload(\"{\\n\" +\n+                \"  annotatedNonBlockingCompletionStage {\\n\" +\n+                \"    name\\n\" +\n+                \"    priority\\n\" +\n+                \"    state\\n\" +\n+                \"    group\\n\" +\n+                \"    vertxContextClassName\\n\" +\n+                \"  }\\n\" +\n+                \"}\");\n+\n+        RestAssured.given().when()\n+                .accept(MEDIATYPE_JSON)\n+                .contentType(MEDIATYPE_JSON)\n+                .body(fooRequest)\n+                .post(\"/graphql\")\n+                .then()\n+                .assertThat()\n+                .statusCode(200)\n+                .and()\n+                .log().body().and()\n+                .body(\"data.annotatedNonBlockingCompletionStage.name\", Matchers.startsWith(\"vert.x-eventloop-thread\"))\n+                .and()\n+                .body(\"data.annotatedNonBlockingCompletionStage.vertxContextClassName\",\n+                        Matchers.equalTo(\"io.vertx.core.impl.DuplicatedContext\"));\n+\n+    }\n+\n+    @GraphQLApi\n+    public static class TestThreadResource {\n+\n+        @Inject\n+        Vertx vertx;\n+\n+        // Return type Object\n+        @Query\n+        public TestThread onlyObject() {\n+            return getTestThread();\n+        }\n+\n+        // Return type Object, Annotated with @NonBlocking\n+        @Query\n+        @NonBlocking\n+        public TestThread annotatedNonBlockingObject() {\n+            return getTestThread();\n+        }\n+\n+        // Return type Object with @Blocking (default)\n+        @Query\n+        @Blocking\n+        public TestThread annotatedBlockingObject() {\n+            return getTestThread();\n+        }\n+\n+        // Return type Uni\n+        @Query\n+        public Uni<TestThread> onlyReactiveUni() {\n+            return Uni.createFrom().item(() -> getTestThread());\n+        }\n+\n+        // Return type Uni With Delay\n+        @Query\n+        public Uni<TestThread> onlyReactiveUniWithDelay() {\n+            return Uni.createFrom().emitter(\n+                    emitter -> {\n+                        vertx.setTimer(1000, x -> emitter.complete(getTestThread()));\n+                    });\n+        }\n+\n+        // Return type Reactive with @Blocking\n+        @Query\n+        @Blocking\n+        public Uni<TestThread> annotatedBlockingReactiveUni() {\n+            return Uni.createFrom().item(() -> getTestThread());\n+        }\n+\n+        // Return type Reactive with @NonBlocking (default)\n+        @Query\n+        @NonBlocking\n+        public Uni<TestThread> annotatedNonBlockingReactiveUni() {\n+            return Uni.createFrom().item(() -> getTestThread());\n+        }\n+\n+        @Query\n+        public CompletionStage<TestThread> onlyCompletionStage() {\n+            return Uni.createFrom().item(() -> getTestThread()).subscribeAsCompletionStage();\n+        }\n+\n+        // Return type CompletionStage with @Blocking\n+        @Query\n+        @Blocking\n+        public CompletionStage<TestThread> annotatedBlockingCompletionStage() {\n+            return Uni.createFrom().item(() -> getTestThread()).subscribeAsCompletionStage();\n+        }\n+\n+        // Return type CompletionStage with @NonBlocking (default)\n+        @Query\n+        @NonBlocking\n+        public CompletionStage<TestThread> annotatedNonBlockingCompletionStage() {\n+            return Uni.createFrom().item(() -> getTestThread()).subscribeAsCompletionStage();\n+        }\n+\n+        private TestThread getTestThread() {\n+            Thread t = Thread.currentThread();\n+            long id = t.getId();\n+            String name = t.getName();\n+            int priority = t.getPriority();\n+            String state = t.getState().name();\n+            String group = t.getThreadGroup().getName();\n+            return new TestThread(id, name, priority, state, group);\n+        }\n+    }\n+}\n\ndiff --git a/integration-tests/virtual-threads/graphql-virtual-threads/src/test/java/io/quarkus/virtual/graphql/RunOnVirtualThreadIT.java b/integration-tests/virtual-threads/graphql-virtual-threads/src/test/java/io/quarkus/virtual/graphql/RunOnVirtualThreadIT.java\nnew file mode 100644\nindex 0000000000000..a19a9c96db1d0\n--- /dev/null\n+++ b/integration-tests/virtual-threads/graphql-virtual-threads/src/test/java/io/quarkus/virtual/graphql/RunOnVirtualThreadIT.java\n@@ -0,0 +1,8 @@\n+package io.quarkus.virtual.graphql;\n+\n+import io.quarkus.test.junit.QuarkusIntegrationTest;\n+\n+@QuarkusIntegrationTest\n+class RunOnVirtualThreadIT extends RunOnVirtualThreadTest {\n+\n+}\n\ndiff --git a/integration-tests/virtual-threads/graphql-virtual-threads/src/test/java/io/quarkus/virtual/graphql/RunOnVirtualThreadTest.java b/integration-tests/virtual-threads/graphql-virtual-threads/src/test/java/io/quarkus/virtual/graphql/RunOnVirtualThreadTest.java\nnew file mode 100644\nindex 0000000000000..f124b528caee0\n--- /dev/null\n+++ b/integration-tests/virtual-threads/graphql-virtual-threads/src/test/java/io/quarkus/virtual/graphql/RunOnVirtualThreadTest.java\n@@ -0,0 +1,155 @@\n+package io.quarkus.virtual.graphql;\n+\n+import org.eclipse.microprofile.graphql.GraphQLApi;\n+import org.eclipse.microprofile.graphql.Mutation;\n+import org.eclipse.microprofile.graphql.Query;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit5.virtual.ShouldNotPin;\n+import io.quarkus.test.junit5.virtual.VirtualThreadUnit;\n+import io.restassured.RestAssured;\n+import io.smallrye.common.annotation.RunOnVirtualThread;\n+\n+@QuarkusTest\n+@VirtualThreadUnit\n+@ShouldNotPin\n+class RunOnVirtualThreadTest extends AbstractGraphQLTest {\n+\n+    @Test\n+    public void testAnnotatedBlockingObject() {\n+\n+        String fooRequest = getPayload(\"{\\n\" +\n+                \"  annotatedRunOnVirtualThreadObject {\\n\" +\n+                \"    name\\n\" +\n+                \"    priority\\n\" +\n+                \"    state\\n\" +\n+                \"    group\\n\" +\n+                \"    vertxContextClassName\\n\" +\n+                \"  }\\n\" +\n+                \"}\");\n+\n+        RestAssured.given().when()\n+                .accept(MEDIATYPE_JSON)\n+                .contentType(MEDIATYPE_JSON)\n+                .body(fooRequest)\n+                .post(\"/graphql\")\n+                .then()\n+                .assertThat()\n+                .statusCode(200)\n+                .and()\n+                .body(\"data.annotatedRunOnVirtualThreadObject.name\", Matchers.startsWith(\"quarkus-virtual-thread\"))\n+                .and()\n+                .body(\"data.annotatedRunOnVirtualThreadObject.vertxContextClassName\",\n+                        Matchers.equalTo(\"io.vertx.core.impl.DuplicatedContext\"));\n+    }\n+\n+    @Test\n+    public void testAnnotatedBlockingMutationObject() {\n+\n+        String fooRequest = getPayload(\"mutation{\\n\" +\n+                \"  annotatedRunOnVirtualThreadMutationObject(test:\\\"test\\\") {\\n\" +\n+                \"    name\\n\" +\n+                \"    priority\\n\" +\n+                \"    state\\n\" +\n+                \"    group\\n\" +\n+                \"    vertxContextClassName\\n\" +\n+                \"  }\\n\" +\n+                \"}\");\n+\n+        RestAssured.given().when()\n+                .accept(MEDIATYPE_JSON)\n+                .contentType(MEDIATYPE_JSON)\n+                .body(fooRequest)\n+                .post(\"/graphql\")\n+                .then()\n+                .assertThat()\n+                .statusCode(200)\n+                .and()\n+                .body(\"data.annotatedRunOnVirtualThreadMutationObject.name\", Matchers.startsWith(\"quarkus-virtual-thread\"))\n+                .and()\n+                .body(\"data.annotatedRunOnVirtualThreadMutationObject.vertxContextClassName\",\n+                        Matchers.equalTo(\"io.vertx.core.impl.DuplicatedContext\"));\n+    }\n+\n+    @Test\n+    @Disabled\n+    public void testPiningThread() {\n+\n+        String fooRequest = getPayload(\"{\\n\" +\n+                \"  pinThread {\\n\" +\n+                \"    name\\n\" +\n+                \"    priority\\n\" +\n+                \"    state\\n\" +\n+                \"    group\\n\" +\n+                \"    vertxContextClassName\\n\" +\n+                \"  }\\n\" +\n+                \"}\");\n+\n+        RestAssured.given().when()\n+                .accept(MEDIATYPE_JSON)\n+                .contentType(MEDIATYPE_JSON)\n+                .body(fooRequest)\n+                .post(\"/graphql\")\n+                .then()\n+                .assertThat()\n+                .statusCode(200)\n+                .and()\n+                .body(\"data.pinThread.name\", Matchers.startsWith(\"quarkus-virtual-thread\"))\n+                .and()\n+                .body(\"data.pinThread.vertxContextClassName\",\n+                        Matchers.equalTo(\"io.vertx.core.impl.DuplicatedContext\"));\n+    }\n+\n+    @GraphQLApi\n+    public static class RunOnVirtualThreadObjectTestThreadResource {\n+\n+        // Return type Object with @RunOnVirtualThread\n+        @Query\n+        @RunOnVirtualThread\n+        public TestThread annotatedRunOnVirtualThreadObject() {\n+            sleep();\n+            return getTestThread();\n+        }\n+\n+        // Return type Object with @RunOnVirtualThread\n+        @Mutation\n+        @RunOnVirtualThread\n+        public TestThread annotatedRunOnVirtualThreadMutationObject(String test) {\n+            sleep();\n+            return getTestThread();\n+        }\n+\n+        @Query\n+        @RunOnVirtualThread\n+        public TestThread pinThread() {\n+            // Synchronize on an object to cause thread pinning\n+            Object lock = new Object();\n+            synchronized (lock) {\n+                sleep();\n+            }\n+            return getTestThread();\n+        }\n+\n+        private void sleep() {\n+            try {\n+                Thread.sleep(100);\n+            } catch (InterruptedException e) {\n+                Thread.currentThread().interrupt();\n+                throw new RuntimeException(e);\n+            }\n+        }\n+\n+        private TestThread getTestThread() {\n+            Thread t = Thread.currentThread();\n+            long id = t.getId();\n+            String name = t.getName();\n+            int priority = t.getPriority();\n+            String state = t.getState().name();\n+            String group = t.getThreadGroup().getName();\n+            return new TestThread(id, name, priority, state, group);\n+        }\n+    }\n+}\n\ndiff --git a/integration-tests/virtual-threads/pom.xml b/integration-tests/virtual-threads/pom.xml\nindex 5dd0ca4f757d3..48de20affcc5f 100644\n--- a/integration-tests/virtual-threads/pom.xml\n+++ b/integration-tests/virtual-threads/pom.xml\n@@ -38,6 +38,7 @@\n         <module>reactive-routes-virtual-threads</module>\n         <module>security-webauthn-virtual-threads</module>\n         <module>metrics-virtual-threads</module>\n+        <module>graphql-virtual-threads</module>\n     </modules>\n \n     <build>\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47795",
    "pr_id": 47795,
    "issue_id": 47783,
    "repo": "quarkusio/quarkus",
    "problem_statement": "`quarkus-maven-plugin:create` fails with missing codestart even for minimal project (no extensions)\n### Describe the bug\n\nUsing the `quarkus-maven-plugin` version **3.22.1**, the `create` goal fails when generating a **minimal Quarkus project** with **no extensions explicitly requested**. The error is caused by a missing codestart artifact:\n\n```\ncom.github.mcollovati:quarkus-hilla:jar:codestarts:24.8-SNAPSHOT\n```\n\nThis happens even in a clean environment, and the extension in question is not part of the platform or requested by the user.\n\n**Key Points**:\n\n* No extensions are specified.\n* The failure references a `SNAPSHOT` codestart from an external project (`quarkus-hilla`) that is not part of the platform BOM.\n* The user has no control over this dependency being pulled.\n\n### Expected behavior\n\n* The CLI should never include codestarts for non-platform extensions unless explicitly requested.\n* If codestarts are unavailable or broken, the plugin should **fail gracefully**, optionally with a warning or suggestion to use `-DnoCodestarts`.\n* Project scaffolding should **succeed by default**, even if external codestarts are unavailable.\n\n### Actual behavior\n\n```\n[ERROR] Failed to generate Quarkus project: Failed to resolve codestart artifact\ncom.github.mcollovati:quarkus-hilla:jar:codestarts:24.8-SNAPSHOT\n(absent): Could not find artifact ...\n```\n\n### How to Reproduce?\n\n```bash\nmvn io.quarkus.platform:quarkus-maven-plugin:3.22.1:create \\\n  -DprojectGroupId=org.example \\\n  -DprojectArtifactId=my-app\n```\n\n### Output of `uname -a` or `ver`\n\nDarwin ricferna-mac 24.4.0 Darwin Kernel Version 24.4.0: Fri Apr 11 18:33:47 PDT 2025; root:xnu-11417.101.15~117/RELEASE_ARM64_T6030 arm64\n\n### Output of `java -version`\n\nopenjdk version \"17.0.9\" 2023-10-17 OpenJDK Runtime Environment GraalVM CE 17.0.9+9.1 (build 17.0.9+9-jvmci-23.0-b22) OpenJDK 64-Bit Server VM GraalVM CE 17.0.9+9.1 (build 17.0.9+9-jvmci-23.0-b22, mixed mode, sharing)\n\n### Quarkus version or git rev\n\n3.22\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nMaven home: /opt/homebrew/Cellar/maven/3.9.9/libexec Java version: 17.0.9, vendor: GraalVM Community, runtime: /Users/ricferna/.sdkman/candidates/java/17.0.9-graalce Default locale: en_CA, platform encoding: UTF-8 OS name: \"mac os x\", version: \"15.4.1\", arch: \"aarch64\", family: \"mac\"\n\n### Additional information\n\n**Related Zulip Discussions**:\n\n* [[Users thread](https://quarkusio.zulipchat.com/#narrow/stream/187030-users/topic/.60quarkus.20create.20cli.60.20is.20possibly.20broken.3F/near/517184095)](https://quarkusio.zulipchat.com/#narrow/stream/187030-users/topic/.60quarkus.20create.20cli.60.20is.20possibly.20broken.3F/near/517184095)\n* [[Dev thread](https://quarkusio.zulipchat.com/#narrow/stream/187038-dev/topic/Problem.20creating.20a.20new.20project.20with.20Quarkus.20Plugin/near/517185495)](https://quarkusio.zulipchat.com/#narrow/stream/187038-dev/topic/Problem.20creating.20a.20new.20project.20with.20Quarkus.20Plugin/near/517185495)",
    "issue_word_count": 454,
    "test_files_count": 6,
    "non_test_files_count": 10,
    "pr_changed_files": [
      "devtools/maven/src/main/java/io/quarkus/maven/CreateJBangMojo.java",
      "devtools/maven/src/main/java/io/quarkus/maven/CreateProjectMojo.java",
      "devtools/maven/src/main/java/io/quarkus/maven/QuarkusProjectMojoBase.java",
      "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/codestarts/extension/QuarkusExtensionCodestartCatalog.java",
      "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/codestarts/jbang/QuarkusJBangCodestartCatalog.java",
      "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/codestarts/quarkus/QuarkusCodestartCatalog.java",
      "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/commands/handlers/CreateExtensionCommandHandler.java",
      "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/CodestartResourceLoadersBuilder.java",
      "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/QuarkusProjectHelper.java",
      "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/buildfile/MavenProjectBuildFile.java",
      "independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/FakeExtensionCatalog.java",
      "independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/PlatformAwareTestBase.java",
      "independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/codestarts/QuarkusCodestartTest.java",
      "independent-projects/tools/devtools-testing/src/test/java/io/quarkus/devtools/codestarts/extension/QuarkusExtensionCodestartGenerationTest.java",
      "independent-projects/tools/devtools-testing/src/test/java/io/quarkus/devtools/codestarts/jbang/QuarkusJBangCodestartGenerationTest.java",
      "integration-tests/devtools/src/test/java/io/quarkus/platform/catalog/CatalogCompatibilityTest.java"
    ],
    "pr_changed_test_files": [
      "independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/FakeExtensionCatalog.java",
      "independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/PlatformAwareTestBase.java",
      "independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/codestarts/QuarkusCodestartTest.java",
      "independent-projects/tools/devtools-testing/src/test/java/io/quarkus/devtools/codestarts/extension/QuarkusExtensionCodestartGenerationTest.java",
      "independent-projects/tools/devtools-testing/src/test/java/io/quarkus/devtools/codestarts/jbang/QuarkusJBangCodestartGenerationTest.java",
      "integration-tests/devtools/src/test/java/io/quarkus/platform/catalog/CatalogCompatibilityTest.java"
    ],
    "base_commit": "96640d81e35c37201bf30263d67e2854e37b0068",
    "head_commit": "3ee44a41abd8020a3ff3a5eb60391922342665f1",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47795",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47795",
    "dockerfile": "",
    "pr_merged_at": "2025-05-12T13:32:21.000Z",
    "patch": "diff --git a/devtools/maven/src/main/java/io/quarkus/maven/CreateJBangMojo.java b/devtools/maven/src/main/java/io/quarkus/maven/CreateJBangMojo.java\nindex 2a8e407bdd1f5..5e50c19bf598c 100644\n--- a/devtools/maven/src/main/java/io/quarkus/maven/CreateJBangMojo.java\n+++ b/devtools/maven/src/main/java/io/quarkus/maven/CreateJBangMojo.java\n@@ -113,7 +113,7 @@ public void execute() throws MojoExecutionException {\n             throw new MojoExecutionException(\"Failed to resolve Quarkus extension catalog\", e);\n         }\n \n-        final List<ResourceLoader> codestartsResourceLoader = codestartLoadersBuilder()\n+        final List<ResourceLoader> codestartsResourceLoader = codestartLoadersBuilder(log)\n                 .catalog(catalog)\n                 .artifactResolver(mvn)\n                 .build();\n\ndiff --git a/devtools/maven/src/main/java/io/quarkus/maven/CreateProjectMojo.java b/devtools/maven/src/main/java/io/quarkus/maven/CreateProjectMojo.java\nindex c39bff63a8052..e5d0c86e77f9b 100644\n--- a/devtools/maven/src/main/java/io/quarkus/maven/CreateProjectMojo.java\n+++ b/devtools/maven/src/main/java/io/quarkus/maven/CreateProjectMojo.java\n@@ -296,7 +296,7 @@ public void execute() throws MojoExecutionException {\n             catalog = CreateProjectHelper.completeCatalog(catalog, extensions, mvn);\n             sanitizeOptions();\n \n-            final List<ResourceLoader> codestartsResourceLoader = codestartLoadersBuilder()\n+            final List<ResourceLoader> codestartsResourceLoader = codestartLoadersBuilder(log)\n                     .catalog(catalog)\n                     .artifactResolver(mvn)\n                     .build();\n\ndiff --git a/devtools/maven/src/main/java/io/quarkus/maven/QuarkusProjectMojoBase.java b/devtools/maven/src/main/java/io/quarkus/maven/QuarkusProjectMojoBase.java\nindex 122ffd5be3a1c..7ba51f458ac2a 100644\n--- a/devtools/maven/src/main/java/io/quarkus/maven/QuarkusProjectMojoBase.java\n+++ b/devtools/maven/src/main/java/io/quarkus/maven/QuarkusProjectMojoBase.java\n@@ -103,7 +103,7 @@ public void execute() throws MojoExecutionException {\n         } else {\n             final ExtensionCatalog extensionCatalog = resolveExtensionCatalog();\n             final List<ResourceLoader> codestartsResourceLoader = CodestartResourceLoadersBuilder\n-                    .codestartLoadersBuilder()\n+                    .codestartLoadersBuilder(log)\n                     .artifactResolver(artifactResolver())\n                     .catalog(extensionCatalog)\n                     .build();\n\ndiff --git a/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/codestarts/extension/QuarkusExtensionCodestartCatalog.java b/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/codestarts/extension/QuarkusExtensionCodestartCatalog.java\nindex 3ff7119e2ce10..11f05ec724a55 100644\n--- a/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/codestarts/extension/QuarkusExtensionCodestartCatalog.java\n+++ b/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/codestarts/extension/QuarkusExtensionCodestartCatalog.java\n@@ -12,6 +12,7 @@\n import io.quarkus.devtools.codestarts.Codestart;\n import io.quarkus.devtools.codestarts.DataKey;\n import io.quarkus.devtools.codestarts.core.GenericCodestartCatalog;\n+import io.quarkus.devtools.messagewriter.MessageWriter;\n \n public final class QuarkusExtensionCodestartCatalog extends GenericCodestartCatalog<QuarkusExtensionCodestartProjectInput> {\n \n@@ -78,9 +79,9 @@ public enum Tooling implements DataKey {\n         GIT\n     }\n \n-    public static QuarkusExtensionCodestartCatalog fromBaseCodestartsResources()\n+    public static QuarkusExtensionCodestartCatalog fromBaseCodestartsResources(MessageWriter log)\n             throws IOException {\n-        final Map<String, Codestart> codestarts = loadCodestartsFromResources(getCodestartResourceLoaders(),\n+        final Map<String, Codestart> codestarts = loadCodestartsFromResources(getCodestartResourceLoaders(log),\n                 QUARKUS_EXTENSION_CODESTARTS_DIR);\n         return new QuarkusExtensionCodestartCatalog(codestarts.values());\n     }\n\ndiff --git a/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/codestarts/jbang/QuarkusJBangCodestartCatalog.java b/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/codestarts/jbang/QuarkusJBangCodestartCatalog.java\nindex ad195eb11669b..441517bbc2c83 100644\n--- a/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/codestarts/jbang/QuarkusJBangCodestartCatalog.java\n+++ b/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/codestarts/jbang/QuarkusJBangCodestartCatalog.java\n@@ -12,6 +12,7 @@\n import io.quarkus.devtools.codestarts.Codestart;\n import io.quarkus.devtools.codestarts.DataKey;\n import io.quarkus.devtools.codestarts.core.GenericCodestartCatalog;\n+import io.quarkus.devtools.messagewriter.MessageWriter;\n import io.quarkus.platform.descriptor.loader.json.ResourceLoader;\n \n public final class QuarkusJBangCodestartCatalog extends GenericCodestartCatalog<QuarkusJBangCodestartProjectInput> {\n@@ -48,9 +49,9 @@ private QuarkusJBangCodestartCatalog(Collection<Codestart> codestarts) {\n         super(codestarts);\n     }\n \n-    public static QuarkusJBangCodestartCatalog fromBaseCodestartsResources()\n+    public static QuarkusJBangCodestartCatalog fromBaseCodestartsResources(MessageWriter log)\n             throws IOException {\n-        final Map<String, Codestart> codestarts = loadCodestartsFromResources(getCodestartResourceLoaders(),\n+        final Map<String, Codestart> codestarts = loadCodestartsFromResources(getCodestartResourceLoaders(log),\n                 QUARKUS_JBANG_CODESTARTS_DIR);\n         return new QuarkusJBangCodestartCatalog(codestarts.values());\n     }\n\ndiff --git a/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/codestarts/quarkus/QuarkusCodestartCatalog.java b/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/codestarts/quarkus/QuarkusCodestartCatalog.java\nindex 7dc99d904ac26..d8297719cb069 100644\n--- a/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/codestarts/quarkus/QuarkusCodestartCatalog.java\n+++ b/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/codestarts/quarkus/QuarkusCodestartCatalog.java\n@@ -10,7 +10,6 @@\n import java.nio.file.Path;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -28,6 +27,7 @@\n import io.quarkus.devtools.codestarts.CodestartType;\n import io.quarkus.devtools.codestarts.DataKey;\n import io.quarkus.devtools.codestarts.core.GenericCodestartCatalog;\n+import io.quarkus.devtools.messagewriter.MessageWriter;\n import io.quarkus.devtools.project.extensions.Extensions;\n import io.quarkus.maven.dependency.ArtifactCoords;\n import io.quarkus.platform.catalog.processor.ExtensionProcessor;\n@@ -86,22 +86,23 @@ private QuarkusCodestartCatalog(Collection<Codestart> codestarts,\n         this.extensionsMapping = extensionsMapping;\n     }\n \n-    public static QuarkusCodestartCatalog fromBaseCodestartsResources(Map<String, Extension> extensionsMapping)\n+    public static QuarkusCodestartCatalog fromBaseCodestartsResources(MessageWriter log,\n+            Map<String, Extension> extensionsMapping)\n             throws IOException {\n-        final Map<String, Codestart> codestarts = loadCodestartsFromResources(getCodestartResourceLoaders(),\n+        final Map<String, Codestart> codestarts = loadCodestartsFromResources(getCodestartResourceLoaders(log),\n                 QUARKUS_CODESTARTS_DIR);\n         return new QuarkusCodestartCatalog(codestarts.values(), extensionsMapping);\n     }\n \n-    public static QuarkusCodestartCatalog fromBaseCodestartsResources()\n+    public static QuarkusCodestartCatalog fromBaseCodestartsResources(MessageWriter log)\n             throws IOException {\n-        return fromBaseCodestartsResources(Collections.emptyMap());\n+        return fromBaseCodestartsResources(log, Map.of());\n     }\n \n     public static QuarkusCodestartCatalog fromExtensionsCatalogAndDirectories(\n-            ExtensionCatalog catalog, Collection<Path> directories)\n+            MessageWriter log, ExtensionCatalog catalog, Collection<Path> directories)\n             throws IOException {\n-        final List<ResourceLoader> loaders = getCodestartResourceLoaders(catalog);\n+        final List<ResourceLoader> loaders = getCodestartResourceLoaders(log, catalog);\n         final Map<String, Codestart> codestarts = loadCodestartsFromResources(loaders,\n                 QUARKUS_CODESTARTS_DIR);\n         for (Path directory : directories) {\n\ndiff --git a/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/commands/handlers/CreateExtensionCommandHandler.java b/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/commands/handlers/CreateExtensionCommandHandler.java\nindex bcdbebad8ca67..262cd206db49d 100644\n--- a/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/commands/handlers/CreateExtensionCommandHandler.java\n+++ b/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/commands/handlers/CreateExtensionCommandHandler.java\n@@ -63,7 +63,7 @@ public QuarkusCommandOutcome execute(MessageWriter log)\n             throws QuarkusCommandException {\n         try {\n             final QuarkusExtensionCodestartCatalog catalog = QuarkusExtensionCodestartCatalog\n-                    .fromBaseCodestartsResources();\n+                    .fromBaseCodestartsResources(log);\n             catalog.createProject(input).generate(newExtensionDir);\n \n             final String extensionDirName = newExtensionDir.getFileName().toString();\n\ndiff --git a/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/CodestartResourceLoadersBuilder.java b/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/CodestartResourceLoadersBuilder.java\nindex b4b9c95f6fd91..fb15bae77de1a 100644\n--- a/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/CodestartResourceLoadersBuilder.java\n+++ b/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/CodestartResourceLoadersBuilder.java\n@@ -19,6 +19,7 @@\n \n import io.quarkus.bootstrap.resolver.maven.MavenArtifactResolver;\n import io.quarkus.bootstrap.util.DependencyUtils;\n+import io.quarkus.devtools.messagewriter.MessageWriter;\n import io.quarkus.platform.descriptor.loader.json.ResourceLoader;\n import io.quarkus.registry.catalog.Extension;\n import io.quarkus.registry.catalog.ExtensionCatalog;\n@@ -33,6 +34,7 @@ public final class CodestartResourceLoadersBuilder {\n     private MavenArtifactResolver artifactResolver;\n     private String baseCodestartsArtifactCoords = BASE_CODESTARTS_ARTIFACT_COORDS;\n     private Collection<String> extraCodestartsArtifactCoords = new ArrayList<>();\n+    private MessageWriter log;\n \n     private static String retrieveBaseCodestartsArtifactCoords() {\n         final String artifact = PropertiesUtil.getProperty(BASE_CODESTARTS_ARTIFACT_PROPERTY);\n@@ -52,19 +54,20 @@ private static String retrieveBaseCodestartsArtifactCoords() {\n         }\n     }\n \n-    private CodestartResourceLoadersBuilder() {\n+    private CodestartResourceLoadersBuilder(MessageWriter log) {\n+        this.log = log;\n     }\n \n-    public static CodestartResourceLoadersBuilder codestartLoadersBuilder() {\n-        return new CodestartResourceLoadersBuilder();\n+    public static CodestartResourceLoadersBuilder codestartLoadersBuilder(MessageWriter log) {\n+        return new CodestartResourceLoadersBuilder(log);\n     }\n \n-    public static List<ResourceLoader> getCodestartResourceLoaders() {\n-        return codestartLoadersBuilder().build();\n+    public static List<ResourceLoader> getCodestartResourceLoaders(MessageWriter log) {\n+        return codestartLoadersBuilder(log).build();\n     }\n \n-    public static List<ResourceLoader> getCodestartResourceLoaders(ExtensionCatalog catalog) {\n-        return codestartLoadersBuilder().catalog(catalog).build();\n+    public static List<ResourceLoader> getCodestartResourceLoaders(MessageWriter log, ExtensionCatalog catalog) {\n+        return codestartLoadersBuilder(log).catalog(catalog).build();\n     }\n \n     public CodestartResourceLoadersBuilder catalog(ExtensionCatalog catalog) {\n@@ -94,13 +97,14 @@ public CodestartResourceLoadersBuilder addExtraCodestartsArtifactCoords(Collecti\n \n     public List<ResourceLoader> build() {\n         return getCodestartResourceLoaders(baseCodestartsArtifactCoords, extraCodestartsArtifactCoords, catalog,\n-                artifactResolver == null ? QuarkusProjectHelper.artifactResolver() : artifactResolver);\n+                artifactResolver == null ? QuarkusProjectHelper.artifactResolver() : artifactResolver, log);\n     }\n \n     private static List<ResourceLoader> getCodestartResourceLoaders(String baseCodestartsArtifactCoords,\n             Collection<String> extraCodestartsArtifactCoords,\n             ExtensionCatalog catalog,\n-            MavenArtifactResolver mvn) {\n+            MavenArtifactResolver mavenArtifactResolver,\n+            MessageWriter log) {\n \n         final Map<String, Artifact> codestartsArtifacts = new LinkedHashMap<>();\n \n@@ -146,10 +150,11 @@ private static List<ResourceLoader> getCodestartResourceLoaders(String baseCodes\n         final List<ResourceLoader> codestartResourceLoaders = new ArrayList<>(codestartsArtifacts.size());\n         for (Artifact a : codestartsArtifacts.values()) {\n             try {\n-                final File artifactFile = mvn.resolve(a).getArtifact().getFile();\n+                final File artifactFile = mavenArtifactResolver.resolve(a).getArtifact().getFile();\n                 codestartResourceLoaders.add(resolveFileResourceLoader(artifactFile));\n             } catch (Exception e) {\n-                throw new RuntimeException(\"Failed to resolve codestart artifact \" + a, e);\n+                log.warn(\"Unable to resolve codestart artifact for %s: %s\", a, e.getMessage());\n+                continue;\n             }\n         }\n         return codestartResourceLoaders;\n\ndiff --git a/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/QuarkusProjectHelper.java b/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/QuarkusProjectHelper.java\nindex 379cf8460636a..7471c7b1c19a9 100644\n--- a/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/QuarkusProjectHelper.java\n+++ b/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/QuarkusProjectHelper.java\n@@ -146,7 +146,7 @@ public static QuarkusProject getProject(Path projectDir, ExtensionCatalog catalo\n     public static QuarkusProject getProject(Path projectDir, ExtensionCatalog catalog, BuildTool buildTool,\n             JavaVersion javaVersion,\n             MessageWriter log) {\n-        return QuarkusProject.of(projectDir, catalog, getCodestartResourceLoaders(catalog),\n+        return QuarkusProject.of(projectDir, catalog, getCodestartResourceLoaders(log, catalog),\n                 log, buildTool, javaVersion);\n     }\n \n@@ -161,7 +161,7 @@ public static ExtensionCatalog resolveExtensionCatalog() throws RegistryResoluti\n     public static QuarkusProject getProject(Path projectDir, ExtensionCatalog catalog, ExtensionManager extManager,\n             JavaVersion javaVersion,\n             MessageWriter log) {\n-        return QuarkusProject.of(projectDir, catalog, getCodestartResourceLoaders(catalog),\n+        return QuarkusProject.of(projectDir, catalog, getCodestartResourceLoaders(log, catalog),\n                 log, extManager, javaVersion);\n     }\n \n\ndiff --git a/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/buildfile/MavenProjectBuildFile.java b/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/buildfile/MavenProjectBuildFile.java\nindex 7a9f65bf28b34..94023e37fbae5 100644\n--- a/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/buildfile/MavenProjectBuildFile.java\n+++ b/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/buildfile/MavenProjectBuildFile.java\n@@ -121,7 +121,7 @@ public static QuarkusProject getProject(Artifact projectPom, Model projectModel,\n         }\n         final MavenProjectBuildFile extensionManager = new MavenProjectBuildFile(projectDir, extensionCatalog,\n                 projectModel, deps, managedDeps, projectProps, projectPom == null ? null : artifactResolver);\n-        final List<ResourceLoader> codestartResourceLoaders = codestartLoadersBuilder().catalog(extensionCatalog)\n+        final List<ResourceLoader> codestartResourceLoaders = codestartLoadersBuilder(log).catalog(extensionCatalog)\n                 .artifactResolver(artifactResolver).build();\n         final JavaVersion javaVersion = resolveJavaVersion(projectProps);\n         return QuarkusProject.of(projectDir, extensionCatalog,\n",
    "test_patch": "diff --git a/independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/FakeExtensionCatalog.java b/independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/FakeExtensionCatalog.java\nindex 0bf3fa0ff5750..63695255472f3 100644\n--- a/independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/FakeExtensionCatalog.java\n+++ b/independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/FakeExtensionCatalog.java\n@@ -6,6 +6,7 @@\n import java.util.Map;\n \n import io.quarkus.devtools.codestarts.quarkus.QuarkusCodestartCatalog;\n+import io.quarkus.devtools.messagewriter.MessageWriter;\n import io.quarkus.registry.catalog.ExtensionCatalog;\n \n public final class FakeExtensionCatalog {\n@@ -20,6 +21,7 @@ private FakeExtensionCatalog() {\n     private static QuarkusCodestartCatalog getQuarkusCodestartCatalog() {\n         try {\n             return QuarkusCodestartCatalog.fromBaseCodestartsResources(\n+                    MessageWriter.info(),\n                     QuarkusCodestartCatalog.buildExtensionsMapping(FAKE_EXTENSION_CATALOG.getExtensions()));\n         } catch (IOException e) {\n             throw new UncheckedIOException(e);\n\ndiff --git a/independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/PlatformAwareTestBase.java b/independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/PlatformAwareTestBase.java\nindex 0df745c109208..50a44c012075a 100644\n--- a/independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/PlatformAwareTestBase.java\n+++ b/independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/PlatformAwareTestBase.java\n@@ -7,6 +7,7 @@\n \n import org.junit.jupiter.api.extension.RegisterExtension;\n \n+import io.quarkus.devtools.messagewriter.MessageWriter;\n import io.quarkus.devtools.project.QuarkusProjectHelper;\n import io.quarkus.platform.descriptor.loader.json.ResourceLoader;\n import io.quarkus.platform.tools.ToolsUtils;\n@@ -21,7 +22,7 @@ public class PlatformAwareTestBase {\n     private Properties quarkusProps;\n \n     protected List<ResourceLoader> getCodestartsResourceLoaders() {\n-        return getCodestartResourceLoaders(getExtensionsCatalog());\n+        return getCodestartResourceLoaders(MessageWriter.info(), getExtensionsCatalog());\n     }\n \n     protected ExtensionCatalog getExtensionsCatalog() {\n\ndiff --git a/independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/codestarts/QuarkusCodestartTest.java b/independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/codestarts/QuarkusCodestartTest.java\nindex dc74497729923..ddf6a15882f5f 100644\n--- a/independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/codestarts/QuarkusCodestartTest.java\n+++ b/independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/codestarts/QuarkusCodestartTest.java\n@@ -39,6 +39,7 @@\n import io.quarkus.devtools.codestarts.quarkus.QuarkusCodestartCatalog;\n import io.quarkus.devtools.codestarts.quarkus.QuarkusCodestartCatalog.Language;\n import io.quarkus.devtools.codestarts.quarkus.QuarkusCodestartProjectInput;\n+import io.quarkus.devtools.messagewriter.MessageWriter;\n import io.quarkus.devtools.project.BuildTool;\n import io.quarkus.devtools.project.QuarkusProjectHelper;\n import io.quarkus.devtools.testing.SnapshotTesting;\n@@ -354,7 +355,7 @@ public void afterAll(ExtensionContext extensionContext) throws Exception {\n     }\n \n     protected List<ResourceLoader> getCodestartsResourceLoaders() {\n-        return codestartLoadersBuilder()\n+        return codestartLoadersBuilder(MessageWriter.info())\n                 .catalog(getExtensionsCatalog())\n                 .addExtraCodestartsArtifactCoords(artifacts)\n                 .build();\n\ndiff --git a/independent-projects/tools/devtools-testing/src/test/java/io/quarkus/devtools/codestarts/extension/QuarkusExtensionCodestartGenerationTest.java b/independent-projects/tools/devtools-testing/src/test/java/io/quarkus/devtools/codestarts/extension/QuarkusExtensionCodestartGenerationTest.java\nindex fae3f7d36961d..8d99e22185129 100644\n--- a/independent-projects/tools/devtools-testing/src/test/java/io/quarkus/devtools/codestarts/extension/QuarkusExtensionCodestartGenerationTest.java\n+++ b/independent-projects/tools/devtools-testing/src/test/java/io/quarkus/devtools/codestarts/extension/QuarkusExtensionCodestartGenerationTest.java\n@@ -11,6 +11,7 @@\n import org.junit.jupiter.api.TestInfo;\n \n import io.quarkus.devtools.codestarts.extension.QuarkusExtensionCodestartCatalog.QuarkusExtensionData;\n+import io.quarkus.devtools.messagewriter.MessageWriter;\n import io.quarkus.devtools.testing.SnapshotTesting;\n \n class QuarkusExtensionCodestartGenerationTest {\n@@ -57,7 +58,7 @@ void generateProjectWithoutTests(TestInfo testInfo) throws Throwable {\n     }\n \n     private QuarkusExtensionCodestartCatalog getCatalog() throws IOException {\n-        return QuarkusExtensionCodestartCatalog.fromBaseCodestartsResources();\n+        return QuarkusExtensionCodestartCatalog.fromBaseCodestartsResources(MessageWriter.info());\n     }\n \n }\n\ndiff --git a/independent-projects/tools/devtools-testing/src/test/java/io/quarkus/devtools/codestarts/jbang/QuarkusJBangCodestartGenerationTest.java b/independent-projects/tools/devtools-testing/src/test/java/io/quarkus/devtools/codestarts/jbang/QuarkusJBangCodestartGenerationTest.java\nindex 89630945bdbce..b971023d64c36 100644\n--- a/independent-projects/tools/devtools-testing/src/test/java/io/quarkus/devtools/codestarts/jbang/QuarkusJBangCodestartGenerationTest.java\n+++ b/independent-projects/tools/devtools-testing/src/test/java/io/quarkus/devtools/codestarts/jbang/QuarkusJBangCodestartGenerationTest.java\n@@ -16,6 +16,7 @@\n import org.junit.jupiter.api.TestInfo;\n \n import io.quarkus.devtools.codestarts.utils.NestedMaps;\n+import io.quarkus.devtools.messagewriter.MessageWriter;\n import io.quarkus.devtools.testing.SnapshotTesting;\n \n class QuarkusJBangCodestartGenerationTest {\n@@ -61,7 +62,7 @@ void generatePicocliProject(TestInfo testInfo) throws Throwable {\n     }\n \n     private QuarkusJBangCodestartCatalog getCatalog() throws IOException {\n-        return QuarkusJBangCodestartCatalog.fromBaseCodestartsResources();\n+        return QuarkusJBangCodestartCatalog.fromBaseCodestartsResources(MessageWriter.info());\n     }\n \n }\n\ndiff --git a/integration-tests/devtools/src/test/java/io/quarkus/platform/catalog/CatalogCompatibilityTest.java b/integration-tests/devtools/src/test/java/io/quarkus/platform/catalog/CatalogCompatibilityTest.java\nindex 84149c7f2d24e..bc953ea8d6706 100644\n--- a/integration-tests/devtools/src/test/java/io/quarkus/platform/catalog/CatalogCompatibilityTest.java\n+++ b/integration-tests/devtools/src/test/java/io/quarkus/platform/catalog/CatalogCompatibilityTest.java\n@@ -8,6 +8,7 @@\n import org.junit.jupiter.api.Test;\n \n import io.quarkus.devtools.codestarts.quarkus.QuarkusCodestartCatalog;\n+import io.quarkus.devtools.messagewriter.MessageWriter;\n import io.quarkus.devtools.project.CodestartResourceLoadersBuilder;\n import io.quarkus.devtools.project.QuarkusProjectHelper;\n import io.quarkus.devtools.testing.PlatformAwareTestBase;\n@@ -65,7 +66,7 @@ private static void checkPlatformRelease(ExtensionCatalogResolver catalogResolve\n \n     private static void checkCodestarts(ExtensionCatalog extensionCatalog, CatalogProcessor processed) throws IOException {\n         final List<ResourceLoader> codestartResourceLoaders = CodestartResourceLoadersBuilder\n-                .getCodestartResourceLoaders(extensionCatalog);\n+                .getCodestartResourceLoaders(MessageWriter.info(), extensionCatalog);\n         final QuarkusCodestartCatalog quarkusCodestartCatalog = QuarkusCodestartCatalog\n                 .fromExtensionsCatalog(extensionCatalog, codestartResourceLoaders);\n         assertThat(quarkusCodestartCatalog.getCodestarts()).isNotNull();\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47792",
    "pr_id": 47792,
    "issue_id": 46843,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Expose more JPA/Hibernate components through CDI\n### Description\n\nSee https://jakarta.ee/specifications/webprofile/11/jakarta-webprofile-spec-11.0-m5#a441\n\nThere are quite a few components that could reasonably be made injectable through CDI: `CriteriaBuilder`, `SchemaManager`, `Metamodel`, ...\n\nSee also #42780, which can be worked on independently, but will need to address these new beans as well.\n\ncc @gavinking @lucamolteni \n\n### Implementation ideas\n\n_No response_",
    "issue_word_count": 65,
    "test_files_count": 10,
    "non_test_files_count": 5,
    "pr_changed_files": [
      ".gitignore",
      "docs/src/main/asciidoc/hibernate-orm.adoc",
      "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/ClassNames.java",
      "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmCdiProcessor.java",
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsCdiCriteriaBuilderTest.java",
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsCdiMetamodelTest.java",
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsCdiPersistenceUnitUtilTest.java",
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsSchemaManagerTest.java",
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/singlepersistenceunit/DefaultEntity.java",
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/singlepersistenceunit/SinglePersistenceUnitCdiCacheTest.java",
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/singlepersistenceunit/SinglePersistenceUnitCdiCriteriaBuilderTest.java",
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/singlepersistenceunit/SinglePersistenceUnitCdiMetamodelTest.java",
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/singlepersistenceunit/SinglePersistenceUnitCdiPersistenceUnitUtilTest.java",
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/singlepersistenceunit/SinglePersistenceUnitSchemaManagerTest.java",
      "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/HibernateOrmRecorder.java"
    ],
    "pr_changed_test_files": [
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsCdiCriteriaBuilderTest.java",
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsCdiMetamodelTest.java",
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsCdiPersistenceUnitUtilTest.java",
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsSchemaManagerTest.java",
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/singlepersistenceunit/DefaultEntity.java",
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/singlepersistenceunit/SinglePersistenceUnitCdiCacheTest.java",
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/singlepersistenceunit/SinglePersistenceUnitCdiCriteriaBuilderTest.java",
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/singlepersistenceunit/SinglePersistenceUnitCdiMetamodelTest.java",
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/singlepersistenceunit/SinglePersistenceUnitCdiPersistenceUnitUtilTest.java",
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/singlepersistenceunit/SinglePersistenceUnitSchemaManagerTest.java"
    ],
    "base_commit": "af0144111a80a5c5215d4e7eaded136615ea0f11",
    "head_commit": "94de78046d71561b1fb5b39938a6f156e6e206af",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47792",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47792",
    "dockerfile": "",
    "pr_merged_at": "2025-05-14T06:29:35.000Z",
    "patch": "diff --git a/.gitignore b/.gitignore\nindex 84f84c6e88e8a..d4e254583397b 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -14,12 +14,9 @@ lib\n bin\n !devtools/cli/distribution/java-binary/bin\n dependency-reduced-pom.xml\n-derby.log\n-hotspot.log\n .directory\n .java-version\n .graal-install\n-hs_err_pid*.log\n dumps\n *.orig\n *.rej\n@@ -31,9 +28,8 @@ ObjectStore\n .gradle\n docker/distroless/bazel-*\n /.apt_generated_tests/\n-quarkus.log\n-quarkus.log*\n-replay_*.logß\n+*.log\n+*.log*\n nbactions.xml\n nb-configuration.xml\n .cache\n\ndiff --git a/docs/src/main/asciidoc/hibernate-orm.adoc b/docs/src/main/asciidoc/hibernate-orm.adoc\nindex 74f9d8898133d..3c0c8231bd250 100644\n--- a/docs/src/main/asciidoc/hibernate-orm.adoc\n+++ b/docs/src/main/asciidoc/hibernate-orm.adoc\n@@ -498,6 +498,47 @@ You can inject the `EntityManagerFactory` of a named persistence unit using the\n EntityManagerFactory entityManagerFactory;\n ----\n \n+In addition to `EntityManager` and `EntityManagerFactory`, Quarkus also supports injecting the following JPA/Hibernate components:\n+\n+[source,java]\n+----\n+@Inject\n+CriteriaBuilder criteriaBuilder;\n+\n+@Inject\n+HibernateCriteriaBuilder hibernateCriteriaBuilder;\n+\n+@Inject\n+Metamodel metamodel;\n+\n+@Inject\n+org.hibernate.Metamodel metamodel;\n+\n+@Inject\n+JpaMetamodel jpaMetamodel;\n+\n+@Inject\n+Cache cache;\n+\n+@Inject\n+org.hibernate.Cache cache;\n+\n+@Inject\n+jakarta.persistence.PersistenceUnitUtil persistenceUnitUtil;\n+\n+@Inject\n+org.hibernate.relational.SchemaManager schemaManager;\n+----\n+\n+These components can also be injected with a specific persistence unit qualifier:\n+\n+[source,java]\n+----\n+@Inject\n+@PersistenceUnit(\"users\")\n+CriteriaBuilder criteriaBuilder;\n+----\n+\n [[persistence-unit-active]]\n === Activate/deactivate persistence units\n \n\ndiff --git a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/ClassNames.java b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/ClassNames.java\nindex c01f2914e7464..e63a760a2cc3a 100644\n--- a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/ClassNames.java\n+++ b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/ClassNames.java\n@@ -53,6 +53,16 @@ private static DotName createConstant(String fqcn) {\n     public static final DotName ENTITY_MANAGER = createConstant(\"jakarta.persistence.EntityManager\");\n     public static final DotName SESSION = createConstant(\"org.hibernate.Session\");\n     public static final DotName STATELESS_SESSION = createConstant(\"org.hibernate.StatelessSession\");\n+    public static final DotName CRITERIA_BUILDER = createConstant(\"jakarta.persistence.criteria.CriteriaBuilder\");\n+    public static final DotName HIBERNATE_CRITERIA_BUILDER = createConstant(\n+            \"org.hibernate.query.criteria.HibernateCriteriaBuilder\");\n+    public static final DotName METAMODEL = createConstant(\"jakarta.persistence.metamodel.Metamodel\");\n+    public static final DotName HIBERNATE_METAMODEL = createConstant(\"org.hibernate.Metamodel\");\n+    public static final DotName JPA_METAMODEL = createConstant(\"org.hibernate.metamodel.model.domain.JpaMetamodel\");\n+    public static final DotName SCHEMA_MANAGER = createConstant(\"org.hibernate.relational.SchemaManager\");\n+    public static final DotName CACHE = createConstant(\"jakarta.persistence.Cache\");\n+    public static final DotName HIBERNATE_CACHE = createConstant(\"org.hibernate.Cache\");\n+    public static final DotName PERSISTENCE_UNIT_UTIL = createConstant(\"jakarta.persistence.PersistenceUnitUtil\");\n \n     public static final DotName INTERCEPTOR = createConstant(\"org.hibernate.Interceptor\");\n     public static final DotName STATEMENT_INSPECTOR = createConstant(\"org.hibernate.resource.jdbc.spi.StatementInspector\");\n\ndiff --git a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmCdiProcessor.java b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmCdiProcessor.java\nindex 48130d3b71c8f..ce63ed939281a 100644\n--- a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmCdiProcessor.java\n+++ b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmCdiProcessor.java\n@@ -1,10 +1,13 @@\n package io.quarkus.hibernate.orm.deployment;\n \n+import static org.apache.commons.lang3.BooleanUtils.isFalse;\n+\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n import java.util.Locale;\n import java.util.Set;\n+import java.util.function.Function;\n import java.util.stream.Collectors;\n \n import jakarta.enterprise.context.ApplicationScoped;\n@@ -18,8 +21,11 @@\n import org.hibernate.Session;\n import org.hibernate.SessionFactory;\n import org.hibernate.StatelessSession;\n+import org.hibernate.query.criteria.HibernateCriteriaBuilder;\n+import org.hibernate.relational.SchemaManager;\n import org.jboss.jandex.AnnotationInstance;\n import org.jboss.jandex.AnnotationTarget.Kind;\n+import org.jboss.jandex.AnnotationTransformation;\n import org.jboss.jandex.AnnotationValue;\n import org.jboss.jandex.ClassType;\n import org.jboss.jandex.DotName;\n@@ -64,6 +70,13 @@ public class HibernateOrmCdiProcessor {\n             ClassNames.SESSION_FACTORY);\n     private static final List<DotName> SESSION_EXPOSED_TYPES = Arrays.asList(ClassNames.ENTITY_MANAGER, ClassNames.SESSION);\n     private static final List<DotName> STATELESS_SESSION_EXPOSED_TYPES = List.of(ClassNames.STATELESS_SESSION);\n+    private static final List<DotName> CRITERIA_BUILDER_EXPOSED_TYPES = List.of(ClassNames.CRITERIA_BUILDER,\n+            ClassNames.HIBERNATE_CRITERIA_BUILDER);\n+    private static final List<DotName> METAMODEL_EXPOSED_TYPES = List.of(ClassNames.METAMODEL, ClassNames.JPA_METAMODEL,\n+            ClassNames.HIBERNATE_METAMODEL);\n+    private static final List<DotName> SCHEMA_MANAGER_EXPOSED_TYPES = List.of(ClassNames.SCHEMA_MANAGER);\n+    private static final List<DotName> CACHE_EXPOSED_TYPES = List.of(ClassNames.CACHE, ClassNames.HIBERNATE_CACHE);\n+    private static final List<DotName> PERSISTENCE_UNIT_UTIL_EXPOSED_TYPES = List.of(ClassNames.PERSISTENCE_UNIT_UTIL);\n \n     private static final Set<DotName> PERSISTENCE_UNIT_EXTENSION_VALID_TYPES = Set.of(\n             ClassNames.TENANT_RESOLVER,\n@@ -76,7 +89,7 @@ public class HibernateOrmCdiProcessor {\n     AnnotationsTransformerBuildItem convertJpaResourceAnnotationsToQualifier(\n             List<PersistenceUnitDescriptorBuildItem> persistenceUnitDescriptors,\n             ImpliedBlockingPersistenceUnitTypeBuildItem impliedBlockingPersistenceUnitType) {\n-        AnnotationsTransformer transformer = new AnnotationsTransformer() {\n+        AnnotationTransformation transformer = new AnnotationsTransformer() {\n \n             @Override\n             public boolean appliesTo(Kind kind) {\n@@ -178,34 +191,22 @@ void generateDataSourceBeans(HibernateOrmRecorder recorder,\n             return;\n         }\n \n+        Function<String, AnnotationInstance> createPersistenceUnitQualifier = (puName) -> AnnotationInstance\n+                .builder(PersistenceUnit.class).add(\"value\", puName).build();\n+        AnnotationInstance defaultQualifierInstance = AnnotationInstance.builder(Default.class).build();\n+\n         // we have only one persistence unit defined in a persistence.xml: we make it the default even if it has a name\n         // NOTE: In this case we know we're not using Hibernate Reactive, because it doesn't support persistence.xml.\n         if (persistenceUnitDescriptors.size() == 1 && persistenceUnitDescriptors.get(0).isFromPersistenceXml()) {\n             String persistenceUnitName = persistenceUnitDescriptors.get(0).getPersistenceUnitName();\n \n-            syntheticBeanBuildItemBuildProducer\n-                    .produce(createSyntheticBean(persistenceUnitName,\n-                            true, true,\n-                            SessionFactory.class, SESSION_FACTORY_EXPOSED_TYPES, true)\n-                            .createWith(recorder.sessionFactorySupplier(persistenceUnitName))\n-                            .addInjectionPoint(ClassType.create(DotName.createSimple(JPAConfig.class)))\n-                            .done());\n-\n-            syntheticBeanBuildItemBuildProducer\n-                    .produce(createSyntheticBean(persistenceUnitName,\n-                            true, true,\n-                            Session.class, SESSION_EXPOSED_TYPES, false)\n-                            .createWith(recorder.sessionSupplier(persistenceUnitName))\n-                            .addInjectionPoint(ClassType.create(DotName.createSimple(TransactionSessions.class)))\n-                            .done());\n-\n-            syntheticBeanBuildItemBuildProducer\n-                    .produce(createSyntheticBean(persistenceUnitName,\n-                            true, true,\n-                            StatelessSession.class, STATELESS_SESSION_EXPOSED_TYPES, false)\n-                            .createWith(recorder.statelessSessionSupplier(persistenceUnitName))\n-                            .addInjectionPoint(ClassType.create(DotName.createSimple(TransactionSessions.class)))\n-                            .done());\n+            produceSessionFactoryBean(syntheticBeanBuildItemBuildProducer, recorder, persistenceUnitName, true, true);\n+\n+            produceSessionBeans(syntheticBeanBuildItemBuildProducer, recorder, persistenceUnitName, true, true);\n+\n+            produceFactoryDependentBeans(syntheticBeanBuildItemBuildProducer, recorder, persistenceUnitName,\n+                    true, true, defaultQualifierInstance);\n+\n             return;\n         }\n \n@@ -223,34 +224,22 @@ void generateDataSourceBeans(HibernateOrmRecorder recorder,\n             // We will need to fix this at some point, see https://github.com/quarkusio/quarkus/issues/21110\n             String persistenceUnitConfigName = persistenceUnitDescriptor.getConfigurationName();\n             boolean isDefaultPU = PersistenceUnitUtil.isDefaultPersistenceUnit(persistenceUnitConfigName);\n-            boolean isNamedPU = !isDefaultPU;\n-\n-            syntheticBeanBuildItemBuildProducer\n-                    .produce(createSyntheticBean(persistenceUnitName,\n-                            isDefaultPU,\n-                            isNamedPU,\n-                            SessionFactory.class,\n-                            SESSION_FACTORY_EXPOSED_TYPES,\n-                            true)\n-                            .createWith(recorder.sessionFactorySupplier(persistenceUnitName))\n-                            .addInjectionPoint(ClassType.create(DotName.createSimple(JPAConfig.class)))\n-                            .done());\n-\n-            syntheticBeanBuildItemBuildProducer\n-                    .produce(createSyntheticBean(persistenceUnitName,\n-                            isDefaultPU, isNamedPU,\n-                            Session.class, SESSION_EXPOSED_TYPES, false)\n-                            .createWith(recorder.sessionSupplier(persistenceUnitName))\n-                            .addInjectionPoint(ClassType.create(DotName.createSimple(TransactionSessions.class)))\n-                            .done());\n-\n-            syntheticBeanBuildItemBuildProducer\n-                    .produce(createSyntheticBean(persistenceUnitName,\n-                            isDefaultPU, isNamedPU,\n-                            StatelessSession.class, STATELESS_SESSION_EXPOSED_TYPES, false)\n-                            .createWith(recorder.statelessSessionSupplier(persistenceUnitName))\n-                            .addInjectionPoint(ClassType.create(DotName.createSimple(TransactionSessions.class)))\n-                            .done());\n+            boolean isNamedPU = isFalse(isDefaultPU);\n+            AnnotationInstance sessionFactoryQualifier;\n+            if (isDefaultPU) {\n+                sessionFactoryQualifier = defaultQualifierInstance;\n+            } else {\n+                sessionFactoryQualifier = createPersistenceUnitQualifier.apply(persistenceUnitName);\n+            }\n+\n+            produceSessionFactoryBean(syntheticBeanBuildItemBuildProducer, recorder, persistenceUnitName, isDefaultPU,\n+                    isNamedPU);\n+\n+            produceSessionBeans(syntheticBeanBuildItemBuildProducer, recorder, persistenceUnitName, isDefaultPU, isNamedPU);\n+\n+            produceFactoryDependentBeans(syntheticBeanBuildItemBuildProducer, recorder, persistenceUnitName,\n+                    isDefaultPU, isNamedPU, sessionFactoryQualifier);\n+\n         }\n     }\n \n@@ -352,4 +341,98 @@ private static <T> ExtendedBeanConfigurator createSyntheticBean(String persisten\n \n         return configurator;\n     }\n+\n+    private void produceSessionBeans(\n+            BuildProducer<SyntheticBeanBuildItem> producer,\n+            HibernateOrmRecorder recorder,\n+            String persistenceUnitName,\n+            boolean isDefaultPU,\n+            boolean isNamedPU) {\n+\n+        // Create Session bean\n+        producer.produce(createSyntheticBean(persistenceUnitName,\n+                isDefaultPU, isNamedPU,\n+                Session.class, SESSION_EXPOSED_TYPES, false)\n+                .createWith(recorder.sessionSupplier(persistenceUnitName))\n+                .addInjectionPoint(ClassType.create(DotName.createSimple(TransactionSessions.class)))\n+                .done());\n+\n+        // Create StatelessSession bean\n+        producer.produce(createSyntheticBean(persistenceUnitName,\n+                isDefaultPU, isNamedPU,\n+                StatelessSession.class, STATELESS_SESSION_EXPOSED_TYPES, false)\n+                .createWith(recorder.statelessSessionSupplier(persistenceUnitName))\n+                .addInjectionPoint(ClassType.create(DotName.createSimple(TransactionSessions.class)))\n+                .done());\n+    }\n+\n+    private void produceSessionFactoryBean(\n+            BuildProducer<SyntheticBeanBuildItem> producer,\n+            HibernateOrmRecorder recorder,\n+            String persistenceUnitName,\n+            boolean isDefaultPU,\n+            boolean isNamedPU) {\n+\n+        producer.produce(createSyntheticBean(persistenceUnitName,\n+                isDefaultPU, isNamedPU,\n+                SessionFactory.class, SESSION_FACTORY_EXPOSED_TYPES, true)\n+                .createWith(recorder.sessionFactorySupplier(persistenceUnitName))\n+                .addInjectionPoint(ClassType.create(DotName.createSimple(JPAConfig.class)))\n+                .done());\n+    }\n+\n+    private void produceFactoryDependentBeans(\n+            BuildProducer<SyntheticBeanBuildItem> producer,\n+            HibernateOrmRecorder recorder,\n+            String persistenceUnitName,\n+            boolean isDefaultPU,\n+            boolean isNamedPU,\n+            AnnotationInstance sessionFactoryQualifier) {\n+\n+        // Create CriteriaBuilder bean\n+        producer.produce(createSyntheticBean(persistenceUnitName,\n+                isDefaultPU, isNamedPU,\n+                HibernateCriteriaBuilder.class, CRITERIA_BUILDER_EXPOSED_TYPES, false)\n+                .createWith(recorder.criteriaBuilderSupplier(persistenceUnitName))\n+                .addInjectionPoint(ClassType.create(DotName.createSimple(SessionFactory.class)),\n+                        sessionFactoryQualifier)\n+                .done());\n+\n+        // Create Metamodel bean\n+        producer.produce(createSyntheticBean(persistenceUnitName,\n+                isDefaultPU, isNamedPU,\n+                org.hibernate.Metamodel.class, METAMODEL_EXPOSED_TYPES, false)\n+                .createWith(recorder.metamodelSupplier(persistenceUnitName))\n+                .addInjectionPoint(ClassType.create(DotName.createSimple(SessionFactory.class)),\n+                        sessionFactoryQualifier)\n+                .done());\n+\n+        // Create SchemaManager bean\n+        producer.produce(createSyntheticBean(persistenceUnitName,\n+                isDefaultPU, isNamedPU,\n+                SchemaManager.class, SCHEMA_MANAGER_EXPOSED_TYPES, false)\n+                .createWith(recorder.schemaManagerSupplier(persistenceUnitName))\n+                .addInjectionPoint(ClassType.create(DotName.createSimple(SessionFactory.class)),\n+                        sessionFactoryQualifier)\n+                .done());\n+\n+        // Create Cache bean\n+        producer.produce(createSyntheticBean(persistenceUnitName,\n+                isDefaultPU, isNamedPU,\n+                org.hibernate.Cache.class, CACHE_EXPOSED_TYPES, false)\n+                .createWith(recorder.cacheSupplier(persistenceUnitName))\n+                .addInjectionPoint(ClassType.create(DotName.createSimple(SessionFactory.class)),\n+                        sessionFactoryQualifier)\n+                .done());\n+\n+        // Create PersistenceUnitUtil bean\n+        producer.produce(createSyntheticBean(persistenceUnitName,\n+                isDefaultPU, isNamedPU,\n+                jakarta.persistence.PersistenceUnitUtil.class, PERSISTENCE_UNIT_UTIL_EXPOSED_TYPES, false)\n+                .createWith(recorder.persistenceUnitUtilSupplier(persistenceUnitName))\n+                .addInjectionPoint(ClassType.create(DotName.createSimple(SessionFactory.class)),\n+                        sessionFactoryQualifier)\n+                .done());\n+    }\n+\n }\n\ndiff --git a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/HibernateOrmRecorder.java b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/HibernateOrmRecorder.java\nindex fe71879bdcdef..fb2f0f3e360c5 100644\n--- a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/HibernateOrmRecorder.java\n+++ b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/HibernateOrmRecorder.java\n@@ -10,6 +10,9 @@\n import java.util.function.Supplier;\n \n import jakarta.inject.Inject;\n+import jakarta.persistence.Cache;\n+import jakarta.persistence.criteria.CriteriaBuilder;\n+import jakarta.persistence.metamodel.Metamodel;\n \n import org.hibernate.Session;\n import org.hibernate.SessionFactory;\n@@ -17,11 +20,13 @@\n import org.hibernate.boot.archive.scan.spi.Scanner;\n import org.hibernate.engine.spi.SessionLazyDelegator;\n import org.hibernate.integrator.spi.Integrator;\n+import org.hibernate.relational.SchemaManager;\n import org.jboss.logging.Logger;\n \n import io.quarkus.arc.SyntheticCreationalContext;\n import io.quarkus.arc.runtime.BeanContainer;\n import io.quarkus.arc.runtime.BeanContainerListener;\n+import io.quarkus.hibernate.orm.PersistenceUnit;\n import io.quarkus.hibernate.orm.runtime.boot.QuarkusPersistenceUnitDefinition;\n import io.quarkus.hibernate.orm.runtime.integration.HibernateOrmIntegrationRuntimeDescriptor;\n import io.quarkus.hibernate.orm.runtime.migration.MultiTenancyStrategy;\n@@ -146,6 +151,88 @@ public StatelessSession get() {\n         };\n     }\n \n+    public Function<SyntheticCreationalContext<CriteriaBuilder>, CriteriaBuilder> criteriaBuilderSupplier(\n+            String persistenceUnitName) {\n+\n+        return sessionFactoryFunctionSupplier(persistenceUnitName,\n+                new Function<SessionFactory, CriteriaBuilder>() {\n+                    @Override\n+                    public CriteriaBuilder apply(SessionFactory sessionFactory) {\n+                        return sessionFactory.getCriteriaBuilder();\n+                    }\n+                });\n+    }\n+\n+    public Function<SyntheticCreationalContext<Metamodel>, Metamodel> metamodelSupplier(\n+            String persistenceUnitName) {\n+\n+        return sessionFactoryFunctionSupplier(persistenceUnitName,\n+                new Function<SessionFactory, Metamodel>() {\n+                    @Override\n+                    public Metamodel apply(SessionFactory sessionFactory) {\n+                        return sessionFactory.getMetamodel();\n+                    }\n+                });\n+    }\n+\n+    public Function<SyntheticCreationalContext<Cache>, Cache> cacheSupplier(\n+            String persistenceUnitName) {\n+\n+        return sessionFactoryFunctionSupplier(persistenceUnitName,\n+                new Function<SessionFactory, Cache>() {\n+                    @Override\n+                    public Cache apply(SessionFactory sessionFactory) {\n+                        return sessionFactory.getCache();\n+                    }\n+                });\n+    }\n+\n+    public Function<SyntheticCreationalContext<jakarta.persistence.PersistenceUnitUtil>, jakarta.persistence.PersistenceUnitUtil> persistenceUnitUtilSupplier(\n+            String persistenceUnitName) {\n+\n+        return sessionFactoryFunctionSupplier(persistenceUnitName,\n+                new Function<SessionFactory, jakarta.persistence.PersistenceUnitUtil>() {\n+                    @Override\n+                    public jakarta.persistence.PersistenceUnitUtil apply(SessionFactory sessionFactory) {\n+                        return sessionFactory.getPersistenceUnitUtil();\n+                    }\n+                });\n+    }\n+\n+    public Function<SyntheticCreationalContext<SchemaManager>, SchemaManager> schemaManagerSupplier(\n+            String persistenceUnitName) {\n+\n+        return sessionFactoryFunctionSupplier(persistenceUnitName,\n+                new Function<SessionFactory, SchemaManager>() {\n+                    @Override\n+                    public SchemaManager apply(SessionFactory sessionFactory) {\n+                        return sessionFactory.getSchemaManager();\n+                    }\n+                });\n+    }\n+\n+    private <T> Function<SyntheticCreationalContext<T>, T> sessionFactoryFunctionSupplier(\n+            final String persistenceUnitName,\n+            final Function<SessionFactory, T> sessionFactoryMapper) {\n+        return new Function<SyntheticCreationalContext<T>, T>() {\n+            @Override\n+            public T apply(SyntheticCreationalContext<T> context) {\n+                SessionFactory sessionFactory = getSessionFactoryFromContext(context, persistenceUnitName);\n+                return sessionFactoryMapper.apply(sessionFactory);\n+            }\n+        };\n+    }\n+\n+    private SessionFactory getSessionFactoryFromContext(SyntheticCreationalContext<?> context, String persistenceUnitName) {\n+        Class<SessionFactory> sfBeanType = SessionFactory.class;\n+        if (PersistenceUnitUtil.isDefaultPersistenceUnit(persistenceUnitName)) {\n+            return context.getInjectedReference(sfBeanType);\n+        } else {\n+            PersistenceUnit.PersistenceUnitLiteral qualifier = new PersistenceUnit.PersistenceUnitLiteral(persistenceUnitName);\n+            return context.getInjectedReference(sfBeanType, qualifier);\n+        }\n+    }\n+\n     public void doValidation(HibernateOrmRuntimeConfig hibernateOrmRuntimeConfig, String puName) {\n         HibernateOrmRuntimeConfigPersistenceUnit hibernateOrmRuntimeConfigPersistenceUnit = hibernateOrmRuntimeConfig\n                 .persistenceUnits().get(puName);\n",
    "test_patch": "diff --git a/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsCdiCriteriaBuilderTest.java b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsCdiCriteriaBuilderTest.java\nnew file mode 100644\nindex 0000000000000..a31ad2b695efb\n--- /dev/null\n+++ b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsCdiCriteriaBuilderTest.java\n@@ -0,0 +1,103 @@\n+package io.quarkus.hibernate.orm.multiplepersistenceunits;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import jakarta.inject.Inject;\n+import jakarta.persistence.criteria.CriteriaBuilder;\n+import jakarta.persistence.criteria.CriteriaQuery;\n+import jakarta.persistence.criteria.Root;\n+\n+import org.hibernate.query.criteria.HibernateCriteriaBuilder;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.hibernate.orm.PersistenceUnit;\n+import io.quarkus.hibernate.orm.multiplepersistenceunits.model.config.DefaultEntity;\n+import io.quarkus.hibernate.orm.multiplepersistenceunits.model.config.inventory.Plane;\n+import io.quarkus.hibernate.orm.multiplepersistenceunits.model.config.user.User;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class MultiplePersistenceUnitsCdiCriteriaBuilderTest {\n+\n+    @RegisterExtension\n+    static QuarkusUnitTest runner = new QuarkusUnitTest()\n+            .withApplicationRoot((jar) -> jar\n+                    .addClass(DefaultEntity.class)\n+                    .addClass(User.class)\n+                    .addClass(Plane.class)\n+                    .addAsResource(\"application-multiple-persistence-units.properties\", \"application.properties\"));\n+\n+    @Inject\n+    CriteriaBuilder defaultCriteriaBuilder;\n+\n+    @Inject\n+    @PersistenceUnit(\"users\")\n+    HibernateCriteriaBuilder usersHibernateCriteriaBuilder;\n+\n+    @Inject\n+    @PersistenceUnit(\"users\")\n+    CriteriaBuilder usersCriteriaBuilder;\n+\n+    @Inject\n+    @PersistenceUnit(\"inventory\")\n+    CriteriaBuilder inventoryCriteriaBuilder;\n+\n+    @Test\n+    public void defaultCriteriaBuilder() {\n+        assertNotNull(defaultCriteriaBuilder);\n+\n+        CriteriaQuery<DefaultEntity> query = defaultCriteriaBuilder.createQuery(DefaultEntity.class);\n+        Root<DefaultEntity> root = query.from(DefaultEntity.class);\n+        query.select(root);\n+\n+        assertNotNull(defaultCriteriaBuilder.count(root));\n+        assertNotNull(defaultCriteriaBuilder.equal(root.get(\"name\"), \"test\"));\n+    }\n+\n+    @Test\n+    public void usersCriteriaBuilder() {\n+        assertNotNull(usersCriteriaBuilder);\n+\n+        CriteriaQuery<User> query = usersCriteriaBuilder.createQuery(User.class);\n+        Root<User> root = query.from(User.class);\n+        query.select(root);\n+\n+        assertNotNull(usersCriteriaBuilder.count(root));\n+        assertNotNull(usersCriteriaBuilder.equal(root.get(\"name\"), \"test\"));\n+    }\n+\n+    @Test\n+    public void usersHibernateCriteriaBuilder() {\n+        assertNotNull(usersHibernateCriteriaBuilder);\n+\n+        CriteriaQuery<User> query = usersHibernateCriteriaBuilder.createQuery(User.class);\n+        Root<User> root = query.from(User.class);\n+        query.select(root);\n+\n+        assertNotNull(usersHibernateCriteriaBuilder.count(root));\n+        assertNotNull(usersHibernateCriteriaBuilder.equal(root.get(\"name\"), \"test\"));\n+    }\n+\n+    @Test\n+    public void inventoryCriteriaBuilder() {\n+        assertNotNull(inventoryCriteriaBuilder);\n+\n+        CriteriaQuery<Plane> query = inventoryCriteriaBuilder.createQuery(Plane.class);\n+        Root<Plane> root = query.from(Plane.class);\n+        query.select(root);\n+\n+        assertNotNull(inventoryCriteriaBuilder.count(root));\n+        assertNotNull(inventoryCriteriaBuilder.equal(root.get(\"name\"), \"test\"));\n+    }\n+\n+    @Test\n+    public void testUserInInventoryCriteriaBuilder() {\n+        assertThatThrownBy(() -> {\n+            CriteriaQuery<User> query = inventoryCriteriaBuilder.createQuery(User.class);\n+            query.from(User.class);\n+        }).isInstanceOf(IllegalArgumentException.class)\n+                .hasMessageContaining(\"Not an entity\");\n+    }\n+\n+}\n\ndiff --git a/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsCdiMetamodelTest.java b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsCdiMetamodelTest.java\nnew file mode 100644\nindex 0000000000000..855ea62a9bc31\n--- /dev/null\n+++ b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsCdiMetamodelTest.java\n@@ -0,0 +1,116 @@\n+package io.quarkus.hibernate.orm.multiplepersistenceunits;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import jakarta.inject.Inject;\n+import jakarta.persistence.metamodel.EntityType;\n+import jakarta.persistence.metamodel.Metamodel;\n+\n+import org.hibernate.metamodel.model.domain.JpaMetamodel;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.hibernate.orm.PersistenceUnit;\n+import io.quarkus.hibernate.orm.multiplepersistenceunits.model.config.DefaultEntity;\n+import io.quarkus.hibernate.orm.multiplepersistenceunits.model.config.inventory.Plane;\n+import io.quarkus.hibernate.orm.multiplepersistenceunits.model.config.user.User;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class MultiplePersistenceUnitsCdiMetamodelTest {\n+\n+    @RegisterExtension\n+    static QuarkusUnitTest runner = new QuarkusUnitTest()\n+            .withApplicationRoot((jar) -> jar\n+                    .addClass(DefaultEntity.class)\n+                    .addClass(User.class)\n+                    .addClass(Plane.class)\n+                    .addAsResource(\"application-multiple-persistence-units.properties\", \"application.properties\"));\n+\n+    @Inject\n+    Metamodel defaultMetamodel;\n+\n+    @Inject\n+    @PersistenceUnit(\"users\")\n+    Metamodel usersMetamodel;\n+\n+    @Inject\n+    @PersistenceUnit(\"users\")\n+    JpaMetamodel usersJpaMetamodel;\n+\n+    @Inject\n+    @PersistenceUnit(\"inventory\")\n+    Metamodel inventoryMetamodel;\n+\n+    @Inject\n+    @PersistenceUnit(\"inventory\")\n+    org.hibernate.Metamodel hibernateInventoryMetamodel;\n+\n+    @Test\n+    public void defaultMetamodel() {\n+        assertNotNull(defaultMetamodel);\n+\n+        EntityType<DefaultEntity> entityType = defaultMetamodel.entity(DefaultEntity.class);\n+        assertNotNull(entityType);\n+\n+        assertNotNull(entityType.getName());\n+        assertEquals(DefaultEntity.class.getSimpleName(), entityType.getName());\n+    }\n+\n+    @Test\n+    public void usersMetamodel() {\n+        assertNotNull(usersMetamodel);\n+\n+        EntityType<User> entityType = usersMetamodel.entity(User.class);\n+        assertNotNull(entityType);\n+\n+        assertEquals(User.class.getSimpleName(), entityType.getName());\n+    }\n+\n+    @Test\n+    public void usersJpaMetamodel() {\n+        assertNotNull(usersJpaMetamodel);\n+\n+        EntityType<User> entityType = usersJpaMetamodel.entity(User.class);\n+        assertNotNull(entityType);\n+\n+        assertEquals(User.class.getSimpleName(), entityType.getName());\n+    }\n+\n+    @Test\n+    public void inventoryMetamodel() {\n+        assertNotNull(inventoryMetamodel);\n+\n+        EntityType<Plane> entityType = inventoryMetamodel.entity(Plane.class);\n+        assertNotNull(entityType);\n+\n+        assertEquals(Plane.class.getSimpleName(), entityType.getName());\n+    }\n+\n+    @Test\n+    public void hibernateInventoryMetamodel() {\n+        assertNotNull(hibernateInventoryMetamodel);\n+\n+        EntityType<Plane> entityType = hibernateInventoryMetamodel.entity(Plane.class);\n+        assertNotNull(entityType);\n+\n+        assertEquals(Plane.class.getSimpleName(), entityType.getName());\n+    }\n+\n+    @Test\n+    public void testUserInInventoryMetamodel() {\n+        assertThatThrownBy(() -> {\n+            inventoryMetamodel.entity(User.class);\n+        }).isInstanceOf(IllegalArgumentException.class)\n+                .hasMessageContaining(\"Not an entity\");\n+    }\n+\n+    @Test\n+    public void testUserInHibernateInventoryMetamodel() {\n+        assertThatThrownBy(() -> {\n+            hibernateInventoryMetamodel.entity(User.class);\n+        }).isInstanceOf(IllegalArgumentException.class)\n+                .hasMessageContaining(\"Not an entity\");\n+    }\n+}\n\ndiff --git a/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsCdiPersistenceUnitUtilTest.java b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsCdiPersistenceUnitUtilTest.java\nnew file mode 100644\nindex 0000000000000..0463eb0cb82df\n--- /dev/null\n+++ b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsCdiPersistenceUnitUtilTest.java\n@@ -0,0 +1,84 @@\n+package io.quarkus.hibernate.orm.multiplepersistenceunits;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import jakarta.inject.Inject;\n+import jakarta.persistence.EntityManager;\n+import jakarta.persistence.PersistenceUnitUtil;\n+import jakarta.transaction.Transactional;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.hibernate.orm.PersistenceUnit;\n+import io.quarkus.hibernate.orm.multiplepersistenceunits.model.config.DefaultEntity;\n+import io.quarkus.hibernate.orm.multiplepersistenceunits.model.config.inventory.Plane;\n+import io.quarkus.hibernate.orm.multiplepersistenceunits.model.config.user.User;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class MultiplePersistenceUnitsCdiPersistenceUnitUtilTest {\n+\n+    @RegisterExtension\n+    static QuarkusUnitTest runner = new QuarkusUnitTest()\n+            .withApplicationRoot((jar) -> jar\n+                    .addClass(DefaultEntity.class)\n+                    .addClass(User.class)\n+                    .addClass(Plane.class)\n+                    .addAsResource(\"application-multiple-persistence-units.properties\", \"application.properties\"));\n+\n+    @Inject\n+    PersistenceUnitUtil defaultPersistenceUnitUtil;\n+\n+    @Inject\n+    EntityManager defaultEntityManager;\n+\n+    @Inject\n+    @PersistenceUnit(\"users\")\n+    PersistenceUnitUtil usersPersistenceUnitUtil;\n+\n+    @Inject\n+    @PersistenceUnit(\"users\")\n+    EntityManager usersEntityManager;\n+\n+    @Inject\n+    @PersistenceUnit(\"inventory\")\n+    PersistenceUnitUtil inventoryPersistenceUnitUtil;\n+\n+    @Inject\n+    @PersistenceUnit(\"inventory\")\n+    EntityManager inventoryEntityManager;\n+\n+    @Test\n+    @Transactional\n+    public void testDefaultPersistenceUnitUtil() {\n+        assertNotNull(defaultPersistenceUnitUtil);\n+\n+        DefaultEntity entity = new DefaultEntity(\"test\");\n+        defaultEntityManager.persist(entity);\n+\n+        assertTrue(defaultPersistenceUnitUtil.isLoaded(entity, \"name\"));\n+    }\n+\n+    @Test\n+    @Transactional\n+    public void testUsersPersistenceUnitUtil() {\n+        assertNotNull(usersPersistenceUnitUtil);\n+\n+        User entity = new User(\"test\");\n+        usersEntityManager.persist(entity);\n+\n+        assertTrue(usersPersistenceUnitUtil.isLoaded(entity, \"name\"));\n+    }\n+\n+    @Test\n+    @Transactional\n+    public void testInventoryPersistenceUnitUtil() {\n+        assertNotNull(inventoryPersistenceUnitUtil);\n+\n+        Plane entity = new Plane(\"test\");\n+        inventoryEntityManager.persist(entity);\n+\n+        assertTrue(inventoryPersistenceUnitUtil.isLoaded(entity, \"name\"));\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsSchemaManagerTest.java b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsSchemaManagerTest.java\nnew file mode 100644\nindex 0000000000000..587ce850d841b\n--- /dev/null\n+++ b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsSchemaManagerTest.java\n@@ -0,0 +1,52 @@\n+package io.quarkus.hibernate.orm.multiplepersistenceunits;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import jakarta.inject.Inject;\n+\n+import org.hibernate.relational.SchemaManager;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.hibernate.orm.PersistenceUnit;\n+import io.quarkus.hibernate.orm.multiplepersistenceunits.model.config.DefaultEntity;\n+import io.quarkus.hibernate.orm.multiplepersistenceunits.model.config.inventory.Plane;\n+import io.quarkus.hibernate.orm.multiplepersistenceunits.model.config.user.User;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class MultiplePersistenceUnitsSchemaManagerTest {\n+\n+    @RegisterExtension\n+    static QuarkusUnitTest runner = new QuarkusUnitTest()\n+            .withApplicationRoot((jar) -> jar\n+                    .addClass(DefaultEntity.class)\n+                    .addClass(User.class)\n+                    .addClass(Plane.class)\n+                    .addAsResource(\"application-multiple-persistence-units.properties\", \"application.properties\"));\n+\n+    @Inject\n+    SchemaManager defaultSchemaManager;\n+\n+    @Inject\n+    @PersistenceUnit(\"users\")\n+    SchemaManager usersSchemaManager;\n+\n+    @Inject\n+    @PersistenceUnit(\"inventory\")\n+    SchemaManager inventorySchemaManager;\n+\n+    @Test\n+    public void testDefaultSchemaManager() {\n+        assertNotNull(defaultSchemaManager);\n+    }\n+\n+    @Test\n+    public void testUsersSchemaManager() {\n+        assertNotNull(usersSchemaManager);\n+    }\n+\n+    @Test\n+    public void testInventorySchemaManager() {\n+        assertNotNull(inventorySchemaManager);\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/singlepersistenceunit/DefaultEntity.java b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/singlepersistenceunit/DefaultEntity.java\nindex 945b845eab2ee..91a8de714e9c1 100644\n--- a/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/singlepersistenceunit/DefaultEntity.java\n+++ b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/singlepersistenceunit/DefaultEntity.java\n@@ -1,11 +1,13 @@\n package io.quarkus.hibernate.orm.singlepersistenceunit;\n \n+import jakarta.persistence.Cacheable;\n import jakarta.persistence.Entity;\n import jakarta.persistence.GeneratedValue;\n import jakarta.persistence.GenerationType;\n import jakarta.persistence.Id;\n \n @Entity\n+@Cacheable\n public class DefaultEntity {\n \n     private long id;\n\ndiff --git a/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/singlepersistenceunit/SinglePersistenceUnitCdiCacheTest.java b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/singlepersistenceunit/SinglePersistenceUnitCdiCacheTest.java\nnew file mode 100644\nindex 0000000000000..88378c5f45b90\n--- /dev/null\n+++ b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/singlepersistenceunit/SinglePersistenceUnitCdiCacheTest.java\n@@ -0,0 +1,100 @@\n+package io.quarkus.hibernate.orm.singlepersistenceunit;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import jakarta.inject.Inject;\n+import jakarta.persistence.Cache;\n+import jakarta.persistence.EntityManager;\n+import jakarta.transaction.UserTransaction;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.hibernate.orm.TransactionTestUtils;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class SinglePersistenceUnitCdiCacheTest {\n+\n+    @RegisterExtension\n+    static QuarkusUnitTest runner = new QuarkusUnitTest()\n+            .withApplicationRoot((jar) -> jar\n+                    .addClass(DefaultEntity.class)\n+                    .addClass(TransactionTestUtils.class)\n+                    .addAsResource(\"application.properties\"))\n+            .overrideRuntimeConfigKey(\"quarkus.hibernate-orm.second-level-caching-enabled\", \"true\");\n+\n+    @Inject\n+    Cache jakartaCache;\n+\n+    @Inject\n+    org.hibernate.Cache hibernateCache;\n+    @Inject\n+    EntityManager em;\n+\n+    @Inject\n+    UserTransaction tx;\n+\n+    @Test\n+    public void testJakartaCacheOperations() {\n+        DefaultEntity entity = new DefaultEntity(\"test\");\n+        TransactionTestUtils.inTransaction(tx, () -> {\n+            em.persist(entity);\n+            em.flush();\n+        });\n+\n+        TransactionTestUtils.inTransaction(tx, () -> {\n+            DefaultEntity loaded = em.find(DefaultEntity.class, entity.getId());\n+            assertNotNull(loaded, \"Entity should be loaded\");\n+\n+            // Verify entity is in cache\n+            assertTrue(jakartaCache.contains(DefaultEntity.class, entity.getId()),\n+                    \"Entity should be in cache after load\");\n+\n+            // Test cache operations\n+            DefaultEntity fromCache = em.find(DefaultEntity.class, entity.getId());\n+            assertNotNull(fromCache, \"Entity should be retrieved from cache\");\n+            assertEquals(\"test\", fromCache.getName(), \"Entity data should match\");\n+\n+            jakartaCache.evict(DefaultEntity.class, entity.getId());\n+            assertFalse(jakartaCache.contains(DefaultEntity.class, entity.getId()),\n+                    \"Entity should not be in cache after eviction\");\n+\n+            DefaultEntity fromDatabase = em.find(DefaultEntity.class, entity.getId());\n+            assertNotNull(fromDatabase, \"Entity should be retrievable from database after cache eviction\");\n+        });\n+    }\n+\n+    @Test\n+    public void testHibernateCacheOperations() {\n+        DefaultEntity entity = new DefaultEntity(\"test\");\n+        TransactionTestUtils.inTransaction(tx, () -> {\n+            em.persist(entity);\n+            em.flush();\n+        });\n+\n+        TransactionTestUtils.inTransaction(tx, () -> {\n+            DefaultEntity loaded = em.find(DefaultEntity.class, entity.getId());\n+            assertNotNull(loaded, \"Entity should be loaded\");\n+\n+            // Verify entity is in cache\n+            assertTrue(hibernateCache.contains(DefaultEntity.class, entity.getId()),\n+                    \"Entity should be in cache after load\");\n+\n+            // Test cache operations\n+            DefaultEntity fromCache = em.find(DefaultEntity.class, entity.getId());\n+            assertNotNull(fromCache, \"Entity should be retrieved from cache\");\n+            assertEquals(\"test\", fromCache.getName(), \"Entity data should match\");\n+\n+            hibernateCache.evict(DefaultEntity.class, entity.getId());\n+            assertFalse(hibernateCache.contains(DefaultEntity.class, entity.getId()),\n+                    \"Entity should not be in cache after eviction\");\n+\n+            DefaultEntity fromDatabase = em.find(DefaultEntity.class, entity.getId());\n+            assertNotNull(fromDatabase, \"Entity should be retrievable from database after cache eviction\");\n+        });\n+    }\n+\n+}\n\ndiff --git a/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/singlepersistenceunit/SinglePersistenceUnitCdiCriteriaBuilderTest.java b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/singlepersistenceunit/SinglePersistenceUnitCdiCriteriaBuilderTest.java\nnew file mode 100644\nindex 0000000000000..8afba6d646c51\n--- /dev/null\n+++ b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/singlepersistenceunit/SinglePersistenceUnitCdiCriteriaBuilderTest.java\n@@ -0,0 +1,51 @@\n+package io.quarkus.hibernate.orm.singlepersistenceunit;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import jakarta.inject.Inject;\n+import jakarta.persistence.criteria.CriteriaBuilder;\n+import jakarta.persistence.criteria.CriteriaQuery;\n+import jakarta.persistence.criteria.Root;\n+\n+import org.hibernate.query.criteria.HibernateCriteriaBuilder;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class SinglePersistenceUnitCdiCriteriaBuilderTest {\n+\n+    @RegisterExtension\n+    static QuarkusUnitTest runner = new QuarkusUnitTest()\n+            .withApplicationRoot((jar) -> jar\n+                    .addClass(DefaultEntity.class)\n+                    .addAsResource(\"application.properties\"));\n+\n+    @Inject\n+    CriteriaBuilder criteriaBuilder;\n+    @Inject\n+    HibernateCriteriaBuilder hibernateCriteriaBuilder;\n+\n+    @Test\n+    public void testCriteriaBuilder() {\n+        assertNotNull(criteriaBuilder);\n+\n+        CriteriaQuery<DefaultEntity> equalQuery = criteriaBuilder.createQuery(DefaultEntity.class);\n+        Root<DefaultEntity> root = equalQuery.from(DefaultEntity.class);\n+        equalQuery.select(root)\n+                .where(criteriaBuilder.equal(root.get(\"name\"), \"test\"));\n+        assertNotNull(equalQuery);\n+    }\n+\n+    @Test\n+    public void testHibernateCriteriaBuilder() {\n+        assertNotNull(hibernateCriteriaBuilder);\n+\n+        CriteriaQuery<DefaultEntity> equalQuery = hibernateCriteriaBuilder.createQuery(DefaultEntity.class);\n+        Root<DefaultEntity> root = equalQuery.from(DefaultEntity.class);\n+        equalQuery.select(root)\n+                .where(hibernateCriteriaBuilder.equal(root.get(\"name\"), \"test\"));\n+        assertNotNull(equalQuery);\n+    }\n+\n+}\n\ndiff --git a/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/singlepersistenceunit/SinglePersistenceUnitCdiMetamodelTest.java b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/singlepersistenceunit/SinglePersistenceUnitCdiMetamodelTest.java\nnew file mode 100644\nindex 0000000000000..43852c0488492\n--- /dev/null\n+++ b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/singlepersistenceunit/SinglePersistenceUnitCdiMetamodelTest.java\n@@ -0,0 +1,67 @@\n+package io.quarkus.hibernate.orm.singlepersistenceunit;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import jakarta.inject.Inject;\n+import jakarta.persistence.metamodel.EntityType;\n+import jakarta.persistence.metamodel.Metamodel;\n+\n+import org.hibernate.metamodel.model.domain.JpaMetamodel;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class SinglePersistenceUnitCdiMetamodelTest {\n+\n+    @RegisterExtension\n+    static QuarkusUnitTest runner = new QuarkusUnitTest()\n+            .withApplicationRoot((jar) -> jar\n+                    .addClass(DefaultEntity.class)\n+                    .addAsResource(\"application.properties\"));\n+\n+    @Inject\n+    Metamodel metamodel;\n+    @Inject\n+    org.hibernate.Metamodel hibernateMetamodel;\n+    @Inject\n+    JpaMetamodel jpaMetamodel;\n+\n+    @Test\n+    public void testMetamodel() {\n+        assertNotNull(metamodel);\n+        EntityType<DefaultEntity> entityType = metamodel.entity(DefaultEntity.class);\n+        assertNotNull(entityType);\n+        assertTrue(\n+                metamodel.getEntities().stream()\n+                        .anyMatch(et -> et.getJavaType().equals(DefaultEntity.class)),\n+                \"Metamodel should contain DefaultEntity\");\n+        assertEquals(DefaultEntity.class.getSimpleName(), entityType.getName());\n+    }\n+\n+    @Test\n+    public void testHibernateMetamodel() {\n+        assertNotNull(hibernateMetamodel);\n+        EntityType<DefaultEntity> entityType = hibernateMetamodel.entity(DefaultEntity.class);\n+        assertNotNull(entityType);\n+        assertTrue(\n+                hibernateMetamodel.getEntities().stream()\n+                        .anyMatch(et -> et.getJavaType().equals(DefaultEntity.class)),\n+                \"Hibernate Metamodel should contain DefaultEntity\");\n+        assertEquals(DefaultEntity.class.getSimpleName(), entityType.getName());\n+    }\n+\n+    @Test\n+    public void testJpaMetamodel() {\n+        assertNotNull(jpaMetamodel);\n+        EntityType<DefaultEntity> entityType = jpaMetamodel.entity(DefaultEntity.class);\n+        assertNotNull(entityType);\n+        assertTrue(\n+                jpaMetamodel.getEntities().stream()\n+                        .anyMatch(et -> et.getJavaType().equals(DefaultEntity.class)),\n+                \"Hibernate Metamodel should contain DefaultEntity\");\n+        assertEquals(DefaultEntity.class.getSimpleName(), entityType.getName());\n+    }\n+}\n\ndiff --git a/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/singlepersistenceunit/SinglePersistenceUnitCdiPersistenceUnitUtilTest.java b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/singlepersistenceunit/SinglePersistenceUnitCdiPersistenceUnitUtilTest.java\nnew file mode 100644\nindex 0000000000000..58f2462332ba2\n--- /dev/null\n+++ b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/singlepersistenceunit/SinglePersistenceUnitCdiPersistenceUnitUtilTest.java\n@@ -0,0 +1,39 @@\n+package io.quarkus.hibernate.orm.singlepersistenceunit;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import jakarta.inject.Inject;\n+import jakarta.persistence.EntityManager;\n+import jakarta.persistence.PersistenceUnitUtil;\n+import jakarta.transaction.Transactional;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class SinglePersistenceUnitCdiPersistenceUnitUtilTest {\n+\n+    @RegisterExtension\n+    static QuarkusUnitTest runner = new QuarkusUnitTest()\n+            .withApplicationRoot((jar) -> jar\n+                    .addClass(DefaultEntity.class)\n+                    .addAsResource(\"application.properties\"));\n+\n+    @Inject\n+    PersistenceUnitUtil persistenceUnitUtil;\n+\n+    @Inject\n+    EntityManager entityManager;\n+\n+    @Test\n+    @Transactional\n+    public void testPersistenceUtil() {\n+        assertNotNull(persistenceUnitUtil);\n+        DefaultEntity entity = new DefaultEntity(\"test\");\n+        entityManager.persist(entity);\n+        assertTrue(persistenceUnitUtil.isLoaded(entity, \"name\"));\n+    }\n+\n+}\n\ndiff --git a/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/singlepersistenceunit/SinglePersistenceUnitSchemaManagerTest.java b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/singlepersistenceunit/SinglePersistenceUnitSchemaManagerTest.java\nnew file mode 100644\nindex 0000000000000..8352379dba2fa\n--- /dev/null\n+++ b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/singlepersistenceunit/SinglePersistenceUnitSchemaManagerTest.java\n@@ -0,0 +1,57 @@\n+package io.quarkus.hibernate.orm.singlepersistenceunit;\n+\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.Locale;\n+\n+import jakarta.inject.Inject;\n+import jakarta.persistence.EntityManager;\n+import jakarta.transaction.Transactional;\n+\n+import org.hibernate.relational.SchemaManager;\n+import org.hibernate.tool.schema.spi.SchemaManagementException;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class SinglePersistenceUnitSchemaManagerTest {\n+\n+    @RegisterExtension\n+    static QuarkusUnitTest runner = new QuarkusUnitTest()\n+            .withApplicationRoot((jar) -> jar\n+                    .addClass(DefaultEntity.class)\n+                    .addAsResource(\"application.properties\"))\n+            .overrideConfigKey(\"quarkus.hibernate-orm.database.generation\", \"none\");\n+    @Inject\n+    SchemaManager schemaManager;\n+\n+    @Inject\n+    EntityManager entityManager;\n+\n+    @Test\n+    @Transactional\n+    public void testSchemaManager() {\n+        assertNotNull(schemaManager);\n+        assertThrows(SchemaManagementException.class,\n+                () -> schemaManager.validateMappedObjects(),\n+                \"Validation should fail if table is missing.\");\n+\n+        schemaManager.exportMappedObjects(true);\n+\n+        assertDoesNotThrow(() -> schemaManager.validateMappedObjects(),\n+                \"Validation should pass after exporting objects.\");\n+\n+        entityManager.createNativeQuery(\"DROP TABLE IF EXISTS DefaultEntity\").executeUpdate();\n+\n+        SchemaManagementException ex = assertThrows(SchemaManagementException.class,\n+                () -> schemaManager.validateMappedObjects(),\n+                \"Validation should fail if table is missing.\");\n+        assertTrue(ex.getMessage().toLowerCase(Locale.ROOT).contains(\"missing table\"),\n+                \"Exception message should indicate missing table.\");\n+\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47780",
    "pr_id": 47780,
    "issue_id": 47657,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Using nested JUnit test classes with QuarkusTest breaks non-Quarkus tests\n### Describe the bug\n\nI have a test annotated with `@QuarkusTest` which includes some `@Nested` classes. This is fine on its own but it breaks non-Quarkus tests in some weird and wonderful ways.\n\nFor example:\n\n```\n✗ ./gradlew test       \n\n> Task :test FAILED\n\nGreetingResourceTest > testHelloEndpoint() FAILED\n    java.util.ServiceConfigurationError: io.smallrye.config.SmallRyeConfigFactory: io.quarkus.runtime.configuration.QuarkusConfigFactory not a subtype\n        at java.base/java.util.ServiceLoader.fail(ServiceLoader.java:593)\n        at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.hasNextService(ServiceLoader.java:1244)\n        at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.hasNext(ServiceLoader.java:1273)\n        at java.base/java.util.ServiceLoader$2.hasNext(ServiceLoader.java:1309)\n        at java.base/java.util.ServiceLoader$3.hasNext(ServiceLoader.java:1393)\n        at io.smallrye.config.SmallRyeConfigProviderResolver.getFactoryFor(SmallRyeConfigProviderResolver.java:102)\n        at io.smallrye.config.SmallRyeConfigProviderResolver.getConfig(SmallRyeConfigProviderResolver.java:78)\n        at io.smallrye.config.SmallRyeConfigProviderResolver.getConfig(SmallRyeConfigProviderResolver.java:66)\n        at io.quarkus.test.config.TestConfigProviderResolver.getConfig(TestConfigProviderResolver.java:36)\n        at org.eclipse.microprofile.config.ConfigProvider.getConfig(ConfigProvider.java:85)\n        at org.acme.GreetingResource.<init>(GreetingResource.kt:12)\n        at org.acme.GreetingResourceTest.testHelloEndpoint(GreetingResourceTest.kt:8)\n\n2 tests completed, 1 failed\n```\n\nThis is in Quarkus 3.22.0; earlier versions are not affected.\n\n### Expected behavior\n\nHaving nested test classes in a Quarkus test should not affect other tests.\n\n### Actual behavior\n\nHaving nested test classes in a Quarkus test breaks non-Quarkus tests.\n\n### How to Reproduce?\n\nReproducer: [quarkus-reproducer.zip](https://github.com/user-attachments/files/20008450/quarkus-reproducer.zip)\n\n** Steps to reproduce **\n\n1. Run `./gradlew test`\n\n** Expected result **\n\nThe build succeeds.\n\n** Actual result **\n\nThe build fails due to failing tests.\n\nNote that ` ./gradlew test --tests GreetingResourceTest` and `./gradlew test --tests GreetingResourceQuarkusTest` both succeed.\n\n### Output of `uname -a` or `ver`\n\nDarwin Rods-MacBook-Pro.local 24.4.0 Darwin Kernel Version 24.4.0: Fri Apr 11 18:33:40 PDT 2025; root:xnu-11417.101.15~117/RELEASE_ARM64_T6031 arm64\n\n### Output of `java -version`\n\nopenjdk version \"21.0.6\" 2025-01-21 OpenJDK Runtime Environment Homebrew (build 21.0.6) OpenJDK 64-Bit Server VM Homebrew (build 21.0.6, mixed mode, sharing)\n\n### Quarkus version or git rev\n\n3.22.0\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nGradle 8.14\n\n### Additional information\n\n_No response_",
    "issue_word_count": 377,
    "test_files_count": 13,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "integration-tests/maven/src/test/java/io/quarkus/maven/it/QuarkusTestIT.java",
      "integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/pom.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/main/java/org/acme/HelloResource.java",
      "integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/main/java/org/acme/Main.java",
      "integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/main/java/org/acme/MyApplication.java",
      "integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/main/resources/META-INF/resources/index.html",
      "integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/main/resources/application.properties",
      "integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/test/java/org/acme/HelloResourceTest.java",
      "integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/test/java/org/acme/VanillaTest.java",
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/AbstractJvmQuarkusTestExtension.java",
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusMainTestExtension.java",
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusTestExtension.java",
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/ExecutionListener.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/maven/src/test/java/io/quarkus/maven/it/QuarkusTestIT.java",
      "integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/pom.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/main/java/org/acme/HelloResource.java",
      "integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/main/java/org/acme/Main.java",
      "integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/main/java/org/acme/MyApplication.java",
      "integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/main/resources/META-INF/resources/index.html",
      "integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/main/resources/application.properties",
      "integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/test/java/org/acme/HelloResourceTest.java",
      "integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/test/java/org/acme/VanillaTest.java",
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/AbstractJvmQuarkusTestExtension.java",
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusMainTestExtension.java",
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusTestExtension.java",
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/ExecutionListener.java"
    ],
    "base_commit": "96640d81e35c37201bf30263d67e2854e37b0068",
    "head_commit": "741719ea9a0de574bda02d1d7acb5656a40ce7e4",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47780",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47780",
    "dockerfile": "",
    "pr_merged_at": "2025-05-12T14:19:07.000Z",
    "patch": "",
    "test_patch": "diff --git a/integration-tests/maven/src/test/java/io/quarkus/maven/it/QuarkusTestIT.java b/integration-tests/maven/src/test/java/io/quarkus/maven/it/QuarkusTestIT.java\nindex c2de9668834b7..c18e6fec9137d 100644\n--- a/integration-tests/maven/src/test/java/io/quarkus/maven/it/QuarkusTestIT.java\n+++ b/integration-tests/maven/src/test/java/io/quarkus/maven/it/QuarkusTestIT.java\n@@ -57,6 +57,40 @@ public void testQuarkusTestWithThirdPartyExtension()\n \n     }\n \n+    @Test\n+    public void testNestedQuarkusTestMixedWithNormalTests()\n+            throws MavenInvocationException, InterruptedException {\n+        String sourceDir = \"projects/test-nested-tests-mixed-with-normal-tests\";\n+        testDir = initProject(sourceDir, sourceDir + \"-processed\");\n+        RunningInvoker invoker = new RunningInvoker(testDir, false);\n+\n+        MavenProcessInvocationResult installInvocation = invoker.execute(\n+                List.of(\"clean\", \"verify\", \"-Dquarkus.analytics.disabled=true\"),\n+                Collections.emptyMap());\n+        assertThat(installInvocation.getProcess().waitFor(2, TimeUnit.MINUTES)).isTrue();\n+        assertThat(installInvocation.getExecutionException()).isNull();\n+        assertThat(installInvocation.getExitCode()).isEqualTo(0);\n+\n+    }\n+\n+    @Disabled(\"See https://github.com/quarkusio/quarkus/issues/47671\")\n+    @Test\n+    public void testNestedQuarkusTestMixedWithNormalTestsContinuousTesting()\n+            throws MavenInvocationException, FileNotFoundException {\n+        // This test will fail if the test extension does not reset the TCCL properly\n+        String sourceDir = \"projects/test-nested-tests-mixed-with-normal-tests\";\n+        testDir = initProject(sourceDir, sourceDir + \"-processed-devmode\");\n+\n+        runAndCheck();\n+\n+        ContinuousTestingMavenTestUtils testingTestUtils = new ContinuousTestingMavenTestUtils(getPort());\n+        ContinuousTestingMavenTestUtils.TestStatus results = testingTestUtils.waitForNextCompletion();\n+        // This is a bit brittle when we add tests, but failures are often so catastrophic they're not even reported as failures,\n+        // so we need to check the pass count explicitly\n+        Assertions.assertEquals(0, results.getTestsFailed());\n+        Assertions.assertEquals(3, results.getTestsPassed());\n+    }\n+\n     /**\n      * Tests that if @QuarkusTest is added as a JUnitExtension through META-INF/services, things still work.\n      * JBeret does this, for example.\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/pom.xml b/integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/pom.xml\nnew file mode 100644\nindex 0000000000000..ec0eac90aab8e\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/pom.xml\n@@ -0,0 +1,121 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <groupId>org.acme</groupId>\n+    <artifactId>quarkus-test-test-profile</artifactId>\n+    <version>1.0-SNAPSHOT</version>\n+\n+    <properties>\n+        <quarkus.platform.group-id>io.quarkus</quarkus.platform.group-id>\n+        <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>\n+        <quarkus.platform.version>@project.version@</quarkus.platform.version>\n+        <quarkus-plugin.version>@project.version@</quarkus-plugin.version>\n+        <compiler-plugin.version>${compiler-plugin.version}</compiler-plugin.version>\n+        <surefire-plugin.version>${version.surefire.plugin}</surefire-plugin.version>\n+        <maven.compiler.source>${maven.compiler.source}</maven.compiler.source>\n+        <maven.compiler.target>${maven.compiler.target}</maven.compiler.target>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    </properties>\n+\n+    <dependencyManagement>\n+        <dependencies>\n+            <dependency>\n+                <groupId>\\${quarkus.platform.group-id}</groupId>\n+                <artifactId>\\${quarkus.platform.artifact-id}</artifactId>\n+                <version>\\${quarkus.platform.version}</version>\n+                <type>pom</type>\n+                <scope>import</scope>\n+            </dependency>\n+        </dependencies>\n+    </dependencyManagement>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-resteasy</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-junit5</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.rest-assured</groupId>\n+            <artifactId>rest-assured</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <version>\\${surefire-plugin.version}</version>\n+                <configuration>\n+                    <systemPropertyVariables>\n+                        <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n+                        <maven.home>\\${maven.home}</maven.home>\n+                    </systemPropertyVariables>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>io.quarkus</groupId>\n+                <artifactId>quarkus-maven-plugin</artifactId>\n+                <version>\\${quarkus-plugin.version}</version>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>build</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+\n+    <profiles>\n+        <profile>\n+            <id>native</id>\n+            <activation>\n+                <property>\n+                    <name>native</name>\n+                </property>\n+            </activation>\n+            <properties>\n+                <quarkus.native.enabled>true</quarkus.native.enabled>\n+            </properties>\n+            <build>\n+                <plugins>\n+                    <plugin>\n+                        <groupId>org.apache.maven.plugins</groupId>\n+                        <artifactId>maven-surefire-plugin</artifactId>\n+                        <configuration>\n+                            <skipTests>\\${native.surefire.skip}</skipTests>\n+                        </configuration>\n+                    </plugin>\n+                    <plugin>\n+                        <artifactId>maven-failsafe-plugin</artifactId>\n+                        <version>\\${surefire-plugin.version}</version>\n+                        <executions>\n+                            <execution>\n+                                <goals>\n+                                    <goal>integration-test</goal>\n+                                    <goal>verify</goal>\n+                                </goals>\n+                                <configuration>\n+                                    <systemPropertyVariables>\n+                                        <native.image.path>\\${project.build.directory}/\\${project.build.finalName}-runner</native.image.path>\n+                                        <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n+                                        <maven.home>\\${maven.home}</maven.home>\n+                                    </systemPropertyVariables>\n+                                </configuration>\n+                            </execution>\n+                        </executions>\n+                    </plugin>\n+                </plugins>\n+            </build>\n+        </profile>\n+    </profiles>\n+</project>\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/main/java/org/acme/HelloResource.java b/integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/main/java/org/acme/HelloResource.java\nnew file mode 100644\nindex 0000000000000..964fca6e759ad\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/main/java/org/acme/HelloResource.java\n@@ -0,0 +1,22 @@\n+package org.acme;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.Produces;\n+import jakarta.ws.rs.core.MediaType;\n+\n+import org.eclipse.microprofile.config.ConfigProvider;\n+\n+@Path(\"/hello\")\n+public class HelloResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        // This config access only works if the TCCL is set properly\n+        String message = ConfigProvider.getConfig().getValue(\"greeting.message\", String.class);\n+        return message;\n+\n+    }\n+\n+}\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/main/java/org/acme/Main.java b/integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/main/java/org/acme/Main.java\nnew file mode 100644\nindex 0000000000000..56c82b37dff82\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/main/java/org/acme/Main.java\n@@ -0,0 +1,18 @@\n+package org.acme;\n+\n+import io.quarkus.runtime.Quarkus;\n+import io.quarkus.runtime.QuarkusApplication;\n+import io.quarkus.runtime.annotations.QuarkusMain;\n+\n+@QuarkusMain\n+public class Main implements QuarkusApplication {\n+\n+    public static volatile String[] PARAMS;\n+\n+    @Override\n+    public int run(String... args) throws Exception {\n+        PARAMS = args;\n+        Quarkus.waitForExit();\n+        return 0;\n+    }\n+}\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/main/java/org/acme/MyApplication.java b/integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/main/java/org/acme/MyApplication.java\nnew file mode 100644\nindex 0000000000000..a6d66f8b9eda2\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/main/java/org/acme/MyApplication.java\n@@ -0,0 +1,9 @@\n+package org.acme;\n+\n+import jakarta.ws.rs.ApplicationPath;\n+import jakarta.ws.rs.core.Application;\n+\n+@ApplicationPath(\"/app\")\n+public class MyApplication extends Application {\n+\n+}\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/main/resources/META-INF/resources/index.html b/integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/main/resources/META-INF/resources/index.html\nnew file mode 100644\nindex 0000000000000..36789577840ad\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/main/resources/META-INF/resources/index.html\n@@ -0,0 +1,156 @@\n+<!DOCTYPE html>\n+<html lang=\"en\">\n+<head>\n+    <meta charset=\"UTF-8\">\n+    <title>acme - 1.0-SNAPSHOT</title>\n+    <style>\n+        h1, h2, h3, h4, h5, h6 {\n+            margin-bottom: 0.5rem;\n+            font-weight: 400;\n+            line-height: 1.5;\n+        }\n+\n+        h1 {\n+            font-size: 2.5rem;\n+        }\n+\n+        h2 {\n+            font-size: 2rem\n+        }\n+\n+        h3 {\n+            font-size: 1.75rem\n+        }\n+\n+        h4 {\n+            font-size: 1.5rem\n+        }\n+\n+        h5 {\n+            font-size: 1.25rem\n+        }\n+\n+        h6 {\n+            font-size: 1rem\n+        }\n+\n+        .lead {\n+            font-weight: 300;\n+            font-size: 2rem;\n+        }\n+\n+        .banner {\n+            font-size: 2.7rem;\n+            margin: 0;\n+            padding: 2rem 1rem;\n+            background-color: #00A1E2;\n+            color: white;\n+        }\n+\n+        body {\n+            margin: 0;\n+            font-family: -apple-system, system-ui, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n+        }\n+\n+        code {\n+            font-family: SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n+            font-size: 87.5%;\n+            color: #e83e8c;\n+            word-break: break-word;\n+        }\n+\n+        .left-column {\n+            padding: .75rem;\n+            max-width: 75%;\n+            min-width: 55%;\n+        }\n+\n+        .right-column {\n+            padding: .75rem;\n+            max-width: 25%;\n+        }\n+\n+        .container {\n+            display: flex;\n+            width: 100%;\n+        }\n+\n+        li {\n+            margin: 0.75rem;\n+        }\n+\n+        .right-section {\n+            margin-left: 1rem;\n+            padding-left: 0.5rem;\n+        }\n+\n+        .right-section h3 {\n+            padding-top: 0;\n+            font-weight: 200;\n+        }\n+\n+        .right-section ul {\n+            border-left: 0.3rem solid #00A1E2;\n+            list-style-type: none;\n+            padding-left: 0;\n+        }\n+\n+    </style>\n+</head>\n+<body>\n+\n+<div class=\"banner lead\">\n+    Your new Cloud-Native application is ready!\n+</div>\n+\n+<div class=\"container\">\n+    <div class=\"left-column\">\n+        <p class=\"lead\"> Congratulations, you have created a new Quarkus application.</p>\n+\n+        <h2>Why do you see this?</h2>\n+\n+        <p>This page is served by Quarkus. The source is in\n+            <code>src/main/resources/META-INF/resources/index.html</code>.</p>\n+\n+        <h2>What can I do from here?</h2>\n+\n+        <p>If not already done, run the application in <em>dev mode</em> using: <code>mvn quarkus:dev</code>.\n+        </p>\n+        <ul>\n+            <li>Add REST resources, Servlets, functions and other services in <code>src/main/java</code>.</li>\n+            <li>Your static assets are located in <code>src/main/resources/META-INF/resources</code>.</li>\n+            <li>Configure your application in <code>src/main/resources/application.properties</code>.\n+            </li>\n+        </ul>\n+\n+        <h2>Do you like Quarkus?</h2>\n+        <p>Go give it a star on <a href=\"https://github.com/quarkusio/quarkus\">GitHub</a>.</p>\n+\n+        <h2>How do I get rid of this page?</h2>\n+        <p>Just delete the <code>src/main/resources/META-INF/resources/index.html</code> file.</p>\n+    </div>\n+    <div class=\"right-column\">\n+        <div class=\"right-section\">\n+            <h3>Application</h3>\n+            <ul>\n+                <li>GroupId: org.acme</li>\n+                <li>ArtifactId: acme</li>\n+                <li>Version: 1.0-SNAPSHOT</li>\n+                <li>Quarkus Version: 999-SNAPSHOT</li>\n+            </ul>\n+        </div>\n+        <div class=\"right-section\">\n+            <h3>Next steps</h3>\n+            <ul>\n+                <!-- the url have been erased on purpose -->\n+                <li><a href=\"#\">Setup your IDE</a></li>\n+                <li><a href=\"#\">Getting started</a></li>\n+                <li><a href=\"#\">Documentation</a></li>\n+            </ul>\n+        </div>\n+    </div>\n+</div>\n+\n+\n+</body>\n+</html>\n\\ No newline at end of file\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/main/resources/application.properties b/integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/main/resources/application.properties\nnew file mode 100644\nindex 0000000000000..74aea65cc4789\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/main/resources/application.properties\n@@ -0,0 +1,2 @@\n+quarkus.test.continuous-testing=enabled\n+greeting.message=Hello from Quarkus REST via config\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/test/java/org/acme/HelloResourceTest.java b/integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/test/java/org/acme/HelloResourceTest.java\nnew file mode 100644\nindex 0000000000000..6bf2316d036a5\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/test/java/org/acme/HelloResourceTest.java\n@@ -0,0 +1,26 @@\n+package org.acme;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.is;\n+\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+@QuarkusTest\n+public class HelloResourceTest {\n+\n+    @Nested\n+    class NestedInnerClass {\n+        @Test\n+        public void testHelloEndpoint() {\n+            given()\n+                    .when()\n+                    .get(\"/app/hello\")\n+                    .then()\n+                    .statusCode(200)\n+                    .body(is(\"Hello from Quarkus REST via config\"));\n+        }\n+    }\n+}\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/test/java/org/acme/VanillaTest.java b/integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/test/java/org/acme/VanillaTest.java\nnew file mode 100644\nindex 0000000000000..c0123bd8d8dd8\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/test-nested-tests-mixed-with-normal-tests/src/test/java/org/acme/VanillaTest.java\n@@ -0,0 +1,19 @@\n+package org.acme;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class VanillaTest {\n+\n+    @Test\n+    public void test() {\n+        assertEquals(new HelloResource().hello(), \"Hello from Quarkus REST via config\");\n+    }\n+\n+    @Test\n+    public void testTCCL() {\n+        // This test is looking at internals, not externals, but I think it's a fair enough expectation\n+        assertEquals(ClassLoader.getSystemClassLoader(), Thread.currentThread().getContextClassLoader());\n+    }\n+}\n\ndiff --git a/test-framework/junit5/src/main/java/io/quarkus/test/junit/AbstractJvmQuarkusTestExtension.java b/test-framework/junit5/src/main/java/io/quarkus/test/junit/AbstractJvmQuarkusTestExtension.java\nindex e91a9d5c4f593..510b54fe9ba7a 100644\n--- a/test-framework/junit5/src/main/java/io/quarkus/test/junit/AbstractJvmQuarkusTestExtension.java\n+++ b/test-framework/junit5/src/main/java/io/quarkus/test/junit/AbstractJvmQuarkusTestExtension.java\n@@ -26,8 +26,6 @@ public class AbstractJvmQuarkusTestExtension extends AbstractQuarkusTestWithCont\n     protected static final String TEST_CLASS = \"test-class\";\n     protected static final String TEST_PROFILE = \"test-profile\";\n \n-    protected ClassLoader originalCl;\n-\n     // Used to preserve state from the previous run, so we know if we should restart an application\n     protected static RunningQuarkusApplication runningQuarkusApplication;\n \n\ndiff --git a/test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusMainTestExtension.java b/test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusMainTestExtension.java\nindex 2a4dce059c9ca..7e10ff04e48bf 100644\n--- a/test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusMainTestExtension.java\n+++ b/test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusMainTestExtension.java\n@@ -55,6 +55,7 @@ public class QuarkusMainTestExtension extends AbstractJvmQuarkusTestExtension\n \n     PrepareResult prepareResult;\n     LinkedBlockingDeque<Runnable> shutdownTasks;\n+    protected ClassLoader originalCl;\n \n     /**\n      * The result from an {@link Launch} test\n\ndiff --git a/test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusTestExtension.java b/test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusTestExtension.java\nindex 576bd07329551..0236ad9dc20f1 100644\n--- a/test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusTestExtension.java\n+++ b/test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusTestExtension.java\n@@ -175,6 +175,7 @@ public Thread newThread(Runnable r) {\n         String time = \"10m\";\n         //config is not established yet\n         //we can only read from system properties\n+        // TODO probably it is available because of the new model\n         String sysPropString = System.getProperty(QUARKUS_TEST_HANG_DETECTION_TIMEOUT);\n         if (sysPropString != null) {\n             time = sysPropString;\n@@ -198,9 +199,6 @@ public Thread newThread(Runnable r) {\n             }\n             StartupAction startupAction = getClassLoaderFromTestClass(requiredTestClass).getStartupAction();\n \n-            // TODO this might be a good idea, but if so, we'd need to undo it\n-            Thread.currentThread().setContextClassLoader(startupAction.getClassLoader());\n-\n             CuratedApplication curatedApplication = startupAction.getClassLoader()\n                     .getCuratedApplication();\n             Path testClassLocation = getTestClassesLocation(requiredTestClass, curatedApplication);\n@@ -303,10 +301,6 @@ public void close() {\n             }\n \n             throw effectiveException;\n-        } finally {\n-            if (originalCl != null) {\n-                Thread.currentThread().setContextClassLoader(originalCl);\n-            }\n         }\n \n     }\n@@ -385,13 +379,8 @@ public void beforeTestExecution(ExtensionContext context) throws Exception {\n         }\n \n         if (!failedBoot) {\n-            ClassLoader original = setCCL(runningQuarkusApplication.getClassLoader());\n-            try {\n-                Map.Entry<Class<?>, ?> tuple = createQuarkusTestMethodContextTuple(context);\n-                invokeBeforeTestExecutionCallbacks(tuple.getKey(), tuple.getValue());\n-            } finally {\n-                setCCL(original);\n-            }\n+            Map.Entry<Class<?>, ?> tuple = createQuarkusTestMethodContextTuple(context);\n+            invokeBeforeTestExecutionCallbacks(tuple.getKey(), tuple.getValue());\n         } else {\n             throwBootFailureException();\n         }\n@@ -404,28 +393,23 @@ public void beforeEach(ExtensionContext context) throws Exception {\n         }\n         resetHangTimeout();\n         if (!failedBoot) {\n-            ClassLoader original = setCCL(runningQuarkusApplication.getClassLoader());\n-            try {\n-                pushMockContext();\n-                Map.Entry<Class<?>, ?> tuple = createQuarkusTestMethodContextTuple(context);\n-                invokeBeforeEachCallbacks(tuple.getKey(), tuple.getValue());\n-                String endpointPath = getEndpointPath(context, testHttpEndpointProviders);\n-                if (runningQuarkusApplication != null) {\n-                    boolean secure = false;\n-                    Optional<String> insecureAllowed = runningQuarkusApplication\n-                            .getConfigValue(\"quarkus.http.insecure-requests\", String.class);\n-                    if (insecureAllowed.isPresent()) {\n-                        secure = !insecureAllowed.get().toLowerCase(Locale.ENGLISH).equals(\"enabled\");\n-                    }\n-                    runningQuarkusApplication.getClassLoader().loadClass(RestAssuredURLManager.class.getName())\n-                            .getDeclaredMethod(\"setURL\", boolean.class, String.class).invoke(null, secure, endpointPath);\n-                    runningQuarkusApplication.getClassLoader().loadClass(TestScopeManager.class.getName())\n-                            .getDeclaredMethod(\"setup\", boolean.class).invoke(null, false);\n+            pushMockContext();\n+            Map.Entry<Class<?>, ?> tuple = createQuarkusTestMethodContextTuple(context);\n+            invokeBeforeEachCallbacks(tuple.getKey(), tuple.getValue());\n+            String endpointPath = getEndpointPath(context, testHttpEndpointProviders);\n+            if (runningQuarkusApplication != null) {\n+                boolean secure = false;\n+                Optional<String> insecureAllowed = runningQuarkusApplication\n+                        .getConfigValue(\"quarkus.http.insecure-requests\", String.class);\n+                if (insecureAllowed.isPresent()) {\n+                    secure = !insecureAllowed.get().toLowerCase(Locale.ENGLISH).equals(\"enabled\");\n                 }\n-            } finally {\n-                setCCL(original);\n-                // TODO pretty pointless setting and unsetting, since we wrap the whole execution in this test's CL\n+                runningQuarkusApplication.getClassLoader().loadClass(RestAssuredURLManager.class.getName())\n+                        .getDeclaredMethod(\"setURL\", boolean.class, String.class).invoke(null, secure, endpointPath);\n+                runningQuarkusApplication.getClassLoader().loadClass(TestScopeManager.class.getName())\n+                        .getDeclaredMethod(\"setup\", boolean.class).invoke(null, false);\n             }\n+\n         } else {\n             throwBootFailureException();\n         }\n@@ -523,13 +507,9 @@ public void afterTestExecution(ExtensionContext context) throws Exception {\n             return;\n         }\n         if (!failedBoot) {\n-            ClassLoader original = setCCL(runningQuarkusApplication.getClassLoader());\n-            try {\n-                Map.Entry<Class<?>, ?> tuple = createQuarkusTestMethodContextTuple(context);\n-                invokeAfterTestExecutionCallbacks(tuple.getKey(), tuple.getValue());\n-            } finally {\n-                setCCL(original);\n-            }\n+            Map.Entry<Class<?>, ?> tuple = createQuarkusTestMethodContextTuple(context);\n+            invokeAfterTestExecutionCallbacks(tuple.getKey(), tuple.getValue());\n+\n         }\n \n     }\n@@ -542,17 +522,13 @@ public void afterEach(ExtensionContext context) throws Exception {\n         resetHangTimeout();\n         if (!failedBoot) {\n             popMockContext();\n-            ClassLoader original = setCCL(runningQuarkusApplication.getClassLoader());\n-            try {\n-                Map.Entry<Class<?>, ?> tuple = createQuarkusTestMethodContextTuple(context);\n-                invokeAfterEachCallbacks(tuple.getKey(), tuple.getValue());\n-                runningQuarkusApplication.getClassLoader().loadClass(RestAssuredURLManager.class.getName())\n-                        .getDeclaredMethod(\"clearURL\").invoke(null);\n-                runningQuarkusApplication.getClassLoader().loadClass(TestScopeManager.class.getName())\n-                        .getDeclaredMethod(\"tearDown\", boolean.class).invoke(null, false);\n-            } finally {\n-                setCCL(original);\n-            }\n+            Map.Entry<Class<?>, ?> tuple = createQuarkusTestMethodContextTuple(context);\n+            invokeAfterEachCallbacks(tuple.getKey(), tuple.getValue());\n+            runningQuarkusApplication.getClassLoader().loadClass(RestAssuredURLManager.class.getName())\n+                    .getDeclaredMethod(\"clearURL\").invoke(null);\n+            runningQuarkusApplication.getClassLoader().loadClass(TestScopeManager.class.getName())\n+                    .getDeclaredMethod(\"tearDown\", boolean.class).invoke(null, false);\n+\n         }\n     }\n \n@@ -657,8 +633,6 @@ private QuarkusTestExtensionState ensureStarted(ExtensionContext extensionContex\n             }\n             PropertyTestUtil.setLogFileProperty();\n             try {\n-                //TODO remove the later TCCL setting\n-                Thread.currentThread().setContextClassLoader(extensionContext.getRequiredTestClass().getClassLoader());\n                 state = doJavaStart(extensionContext, selectedProfile);\n                 setState(extensionContext, state);\n \n@@ -681,13 +655,6 @@ private boolean isNested(Class<?> outerClass, Class<?> innerClass) {\n         return Objects.equals(outerClass, enclosingTestClass) || isNested(outerClass, enclosingTestClass);\n     }\n \n-    private static ClassLoader setCCL(ClassLoader cl) {\n-        final Thread thread = Thread.currentThread();\n-        final ClassLoader original = thread.getContextClassLoader();\n-        thread.setContextClassLoader(cl);\n-        return original;\n-    }\n-\n     private void throwBootFailureException() {\n         if (firstException != null) {\n             Throwable throwable = firstException;\n@@ -700,8 +667,8 @@ private void throwBootFailureException() {\n \n     @Override\n     public void beforeAll(ExtensionContext context) throws Exception {\n-        // TODO this originalCl logic is half in here and half in the parent class\n-        originalCl = Thread.currentThread().getContextClassLoader();\n+        // Be aware that this is *not* the first thing that happens in the lifecycle.\n+        // The ExecutionListener runs first, and sets and unsets the TCCL.\n         Class<?> requiredTestClass = context.getRequiredTestClass();\n         GroovyClassValue.disable();\n         currentTestClassStack.push(requiredTestClass);\n@@ -715,10 +682,6 @@ public void beforeAll(ExtensionContext context) throws Exception {\n         if (runningQuarkusApplication != null) {\n             pushMockContext();\n \n-            // Set the TCCL to be the test class's classloader, for the duration of the execution\n-            // TODO almost all the other TCCL-ing will now be redundnant, go through and delete it.\n-\n-            Thread.currentThread().setContextClassLoader(runningQuarkusApplication.getClassLoader());\n             // TODO this is now redundant, we can just get the class from requiredTestClass\n             invokeBeforeClassCallbacks(Class.class,\n                     runningQuarkusApplication.getClassLoader().loadClass(requiredTestClass.getName()));\n@@ -770,6 +733,7 @@ public void interceptBeforeAllMethod(Invocation<Void> invocation, ReflectiveInvo\n         invocation.skip();\n     }\n \n+    // TODO why is this an interceptor and not a TestInstanceFactory?\n     @Override\n     public <T> T interceptTestClassConstructor(Invocation<T> invocation,\n             ReflectiveInvocationContext<Constructor<T>> invocationContext, ExtensionContext extensionContext) throws Throwable {\n@@ -794,35 +758,17 @@ public <T> T interceptTestClassConstructor(Invocation<T> invocation,\n             return null;\n         }\n         T result;\n-        ClassLoader old = Thread.currentThread().getContextClassLoader();\n \n         try {\n-            Thread.currentThread().setContextClassLoader(requiredTestClass.getClassLoader());\n             result = invocation.proceed();\n         } catch (NullPointerException e) {\n             throw new RuntimeException(\n                     \"When using constructor injection in a test, the only legal operation is to assign the constructor values to fields. Offending class is \"\n                             + requiredTestClass,\n                     e);\n-        } finally {\n-            Thread.currentThread().setContextClassLoader(old);\n-        }\n-\n-        // We do this here as well, because when @TestInstance(Lifecycle.PER_CLASS) is used on a class,\n-        // interceptTestClassConstructor is called before beforeAll, meaning that the TCCL will not be set correctly\n-        // (for any test other than the first) unless this is done\n-        old = null;\n-        if (runningQuarkusApplication != null) {\n-            old = setCCL(runningQuarkusApplication.getClassLoader());\n         }\n \n-        try {\n-            initTestState(extensionContext, state);\n-        } finally {\n-            if (old != null) {\n-                setCCL(old);\n-            }\n-        }\n+        initTestState(extensionContext, state);\n         return result;\n     }\n \n@@ -983,7 +929,6 @@ private Object runExtensionMethod(ReflectiveInvocationContext<Method> invocation\n             throws Throwable {\n         resetHangTimeout();\n \n-        ClassLoader old = setCCL(runningQuarkusApplication.getClassLoader());\n         try {\n             Class<?> testClassFromTCCL = extensionContext.getRequiredTestClass();\n             Map<Class<?>, Object> allTestsClasses = new HashMap<>();\n@@ -1053,8 +998,6 @@ private Object runExtensionMethod(ReflectiveInvocationContext<Method> invocation\n             throw e.getCause();\n         } catch (IllegalAccessException | ClassNotFoundException e) {\n             throw new RuntimeException(e);\n-        } finally {\n-            setCCL(old);\n         }\n     }\n \n@@ -1113,9 +1056,7 @@ public void afterAll(ExtensionContext context) throws Exception {\n             if (!isNativeOrIntegrationTest(context.getRequiredTestClass()) && (runningQuarkusApplication != null)) {\n                 popMockContext();\n             }\n-            if (originalCl != null) {\n-                setCCL(originalCl);\n-            }\n+\n         } finally {\n             currentTestClassStack.pop();\n             if (!outerInstances.isEmpty()) {\n@@ -1138,12 +1079,7 @@ private void runAfterAllCallbacks(ExtensionContext context) throws Exception {\n         Object quarkusTestContextInstance = quarkusTestContextClass.getConstructor(Object.class, List.class, Throwable.class)\n                 .newInstance(actualTestInstance, new ArrayList<>(outerInstances), state.getTestErrorCause());\n \n-        ClassLoader original = setCCL(runningQuarkusApplication.getClassLoader());\n-        try {\n-            invokeAfterAllCallbacks(quarkusTestContextClass, quarkusTestContextInstance);\n-        } finally {\n-            setCCL(original);\n-        }\n+        invokeAfterAllCallbacks(quarkusTestContextClass, quarkusTestContextInstance);\n     }\n \n     @Override\n\ndiff --git a/test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/ExecutionListener.java b/test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/ExecutionListener.java\nindex 7a2ef02d9db7e..ce4140f1a4021 100644\n--- a/test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/ExecutionListener.java\n+++ b/test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/ExecutionListener.java\n@@ -1,5 +1,7 @@\n package io.quarkus.test.junit.launcher;\n \n+import java.util.ArrayDeque;\n+import java.util.Deque;\n import java.util.Optional;\n \n import org.junit.platform.engine.TestExecutionResult;\n@@ -17,7 +19,7 @@\n  */\n public class ExecutionListener implements TestExecutionListener {\n \n-    private ClassLoader origCl = null;\n+    private Deque<ClassLoader> origCl = new ArrayDeque<>();\n \n     @Override\n     public void executionStarted(TestIdentifier testIdentifier) {\n@@ -29,8 +31,8 @@ public void executionStarted(TestIdentifier testIdentifier) {\n                 ClassLoader classLoader = cs.getJavaClass().getClassLoader();\n                 // Only adjust the TCCL in cases where we know the QuarkusTestExtension would be about to do it anyway\n                 // We could check annotations, but that would be slow, and the assumption that only Quarkus Tests are loaded with the quarkus classloader should be a fair one\n-                if (classLoader instanceof QuarkusClassLoader) {\n-                    origCl = Thread.currentThread().getContextClassLoader();\n+                if (isQuarkusTest(classLoader)) {\n+                    origCl.push(Thread.currentThread().getContextClassLoader());\n                     Thread.currentThread().setContextClassLoader(classLoader);\n                 } else {\n                     origCl = null;\n@@ -44,12 +46,21 @@ public void executionFinished(TestIdentifier testIdentifier, TestExecutionResult\n         Optional<TestSource> oSource = testIdentifier.getSource();\n         if (oSource.isPresent()) {\n             TestSource source = oSource.get();\n-            if (source instanceof ClassSource) {\n-                if (origCl != null) {\n-                    // If execution is parallel this could produce odd results, but if execution is parallel any kind of TCCL manipulation will be ill-fated\n-                    Thread.currentThread().setContextClassLoader(origCl);\n+            if (source instanceof ClassSource cs) {\n+                ClassLoader classLoader = cs.getJavaClass().getClassLoader();\n+                // Only pop if we meet the conditions under which we pushed\n+                if (isQuarkusTest(classLoader)) {\n+                    ClassLoader cl = origCl.pop();\n+                    if (cl != null) {\n+                        // If execution is parallel this could produce odd results, but if execution is parallel any kind of TCCL manipulation will be ill-fated\n+                        Thread.currentThread().setContextClassLoader(cl);\n+                    }\n                 }\n             }\n         }\n     }\n+\n+    private static boolean isQuarkusTest(ClassLoader classLoader) {\n+        return classLoader instanceof QuarkusClassLoader;\n+    }\n }\n\\ No newline at end of file\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47776",
    "pr_id": 47776,
    "issue_id": 47772,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Unsupported openshift options\n### Describe the bug\n\nOpenshift support doesn't use _using-prefix_ options.\n\n### Expected behavior\n\nIt should behave as kubernetes as is stated in the documentation.\n\n### Actual behavior\n\napplication.properties\n```text\nquarkus.kubernetes.deployment-target=openshift,kubernetes\n\nquarkus.openshift.env.configmaps=prefix-demo-config\nquarkus.openshift.env.using-prefix.\"config,test\".for-configmap=prefix-demo-config\nquarkus.openshift.env.secrets=prefix-demo-secret\nquarkus.openshift.env.using-prefix.secret.for-secret=prefix-demo-secret\nquarkus.openshift.env.using-prefix.\"BAR\".for-secret=prefix-demo-secret\n\nquarkus.kubernetes.env.configmaps=prefix-demo-config\nquarkus.kubernetes.env.using-prefix.\"config,test\".for-configmap=prefix-demo-config\nquarkus.kubernetes.env.secrets=prefix-demo-secret\nquarkus.kubernetes.env.using-prefix.secret.for-secret=prefix-demo-secret\nquarkus.kubernetes.env.using-prefix.\"BAR\".for-secret=prefix-demo-secret\n```\n\nResults:\nkubernetes.yml\n```text\n          envFrom:\n            - configMapRef:\n                name: prefix-demo-config\n              prefix: \"config,test\"\n            - prefix: BAR\n              secretRef:\n                name: prefix-demo-secret\n```\n\nopenshift.yml\n```text\n          envFrom:\n            - configMapRef:\n                name: prefix-demo-config\n            - secretRef:\n                name: prefix-demo-secret\n```\n\n### How to Reproduce?\n\nUse options shown in actual behavior.\n\n### Output of `uname -a` or `ver`\n\nLinux XXX 5.14.0-503.34.1.el9_5.x86_64 #1 SMP PREEMPT_DYNAMIC Mon Mar 17 21:49:47 EDT 2025 x86_64 x86_64 x86_64 GNU/Linux\n\n### Output of `java -version`\n\nOpenJDK Runtime Environment (Red_Hat-21.0.6.0.7-1) (build 21.0.6+7-LTS)\n\n### Quarkus version or git rev\n\n3.21.3\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nGradle 8.13\n\n### Additional information\n\n_No response_",
    "issue_word_count": 254,
    "test_files_count": 2,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/OpenshiftProcessor.java",
      "integration-tests/kubernetes/quarkus-standard-way/src/test/java/io/quarkus/it/kubernetes/OpenshiftWithEnvFromConfigMapWithPrefixTest.java",
      "integration-tests/kubernetes/quarkus-standard-way/src/test/resources/openshift-with-env-from-configmap-with-prefix.properties"
    ],
    "pr_changed_test_files": [
      "integration-tests/kubernetes/quarkus-standard-way/src/test/java/io/quarkus/it/kubernetes/OpenshiftWithEnvFromConfigMapWithPrefixTest.java",
      "integration-tests/kubernetes/quarkus-standard-way/src/test/resources/openshift-with-env-from-configmap-with-prefix.properties"
    ],
    "base_commit": "1e0830bf33029f8094e19ad569f27cee8a74c4be",
    "head_commit": "8dfcac53770e8c343fdb7799e0943bec842968dc",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47776",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47776",
    "dockerfile": "",
    "pr_merged_at": "2025-05-13T05:30:50.000Z",
    "patch": "diff --git a/extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/OpenshiftProcessor.java b/extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/OpenshiftProcessor.java\nindex b0af39ae116e7..300ad176fbc1c 100644\n--- a/extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/OpenshiftProcessor.java\n+++ b/extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/OpenshiftProcessor.java\n@@ -311,6 +311,7 @@ public List<DecoratorBuildItem> createDecorators(ApplicationInfoBuildItem applic\n                         new AddEnvVarDecorator(ApplicationContainerDecorator.ANY, name,\n                                 new EnvBuilder().withName(EnvConverter.convertName(e.getName())).withValue(e.getValue())\n                                         .withSecret(e.getSecret()).withConfigmap(e.getConfigMap()).withField(e.getField())\n+                                        .withPrefix(e.getPrefix())\n                                         .build()))));\n \n         // Enalbe local lookup policy for all image streams\n",
    "test_patch": "diff --git a/integration-tests/kubernetes/quarkus-standard-way/src/test/java/io/quarkus/it/kubernetes/OpenshiftWithEnvFromConfigMapWithPrefixTest.java b/integration-tests/kubernetes/quarkus-standard-way/src/test/java/io/quarkus/it/kubernetes/OpenshiftWithEnvFromConfigMapWithPrefixTest.java\nnew file mode 100644\nindex 0000000000000..01a96dd30d7d1\n--- /dev/null\n+++ b/integration-tests/kubernetes/quarkus-standard-way/src/test/java/io/quarkus/it/kubernetes/OpenshiftWithEnvFromConfigMapWithPrefixTest.java\n@@ -0,0 +1,65 @@\n+package io.quarkus.it.kubernetes;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.fabric8.kubernetes.api.model.HasMetadata;\n+import io.fabric8.kubernetes.api.model.apps.Deployment;\n+import io.quarkus.builder.Version;\n+import io.quarkus.maven.dependency.Dependency;\n+import io.quarkus.test.ProdBuildResults;\n+import io.quarkus.test.ProdModeTestResults;\n+import io.quarkus.test.QuarkusProdModeTest;\n+\n+public class OpenshiftWithEnvFromConfigMapWithPrefixTest {\n+\n+    @RegisterExtension\n+    static final QuarkusProdModeTest config = new QuarkusProdModeTest()\n+            .withApplicationRoot((jar) -> jar.addClasses(GreetingResource.class))\n+            .setApplicationName(\"env-from-config-map-with-prefix\")\n+            .setApplicationVersion(\"0.1-SNAPSHOT\")\n+            .withConfigurationResource(\"openshift-with-env-from-configmap-with-prefix.properties\")\n+            .overrideConfigKey(\"quarkus.openshift.deployment-kind\", \"Deployment\")\n+            .setForcedDependencies(List.of(Dependency.of(\"io.quarkus\", \"quarkus-openshift\", Version.getVersion())));\n+\n+    @ProdBuildResults\n+    private ProdModeTestResults prodModeTestResults;\n+\n+    @Test\n+    public void assertGeneratedResources() throws IOException {\n+        Path kubernetesDir = prodModeTestResults.getBuildDir().resolve(\"kubernetes\");\n+        assertThat(kubernetesDir)\n+                .isDirectoryContaining(p -> p.getFileName().endsWith(\"openshift.json\"))\n+                .isDirectoryContaining(p -> p.getFileName().endsWith(\"openshift.yml\"));\n+        List<HasMetadata> kubernetesList = DeserializationUtil\n+                .deserializeAsList(kubernetesDir.resolve(\"openshift.yml\"));\n+        assertThat(kubernetesList).filteredOn(i -> i instanceof Deployment).singleElement()\n+                .isInstanceOfSatisfying(Deployment.class, d -> {\n+                    assertThat(d.getMetadata()).satisfies(m -> {\n+                        assertThat(m.getName()).isEqualTo(\"env-from-config-map-with-prefix\");\n+                    });\n+\n+                    assertThat(d.getSpec()).satisfies(deploymentSpec -> {\n+                        assertThat(deploymentSpec.getTemplate()).satisfies(t -> {\n+                            assertThat(t.getSpec()).satisfies(podSpec -> {\n+                                assertThat(podSpec.getContainers()).singleElement().satisfies(container -> {\n+\n+                                    assertThat(container.getEnvFrom()).satisfies(env -> {\n+\n+                                        assertThat(env).anyMatch(item -> item.getPrefix().equals(\"QUARKUS\") &&\n+                                                item.getConfigMapRef().getName().equals(\"my-config-map\"));\n+\n+                                    });\n+                                });\n+                            });\n+                        });\n+                    });\n+                });\n+    }\n+}\n\ndiff --git a/integration-tests/kubernetes/quarkus-standard-way/src/test/resources/openshift-with-env-from-configmap-with-prefix.properties b/integration-tests/kubernetes/quarkus-standard-way/src/test/resources/openshift-with-env-from-configmap-with-prefix.properties\nnew file mode 100644\nindex 0000000000000..130d490266175\n--- /dev/null\n+++ b/integration-tests/kubernetes/quarkus-standard-way/src/test/resources/openshift-with-env-from-configmap-with-prefix.properties\n@@ -0,0 +1,3 @@\n+quarkus.openshift.env.configmaps=my-config-map,another-config-map\n+quarkus.openshift.env.using-prefix.\"QUARKUS\".for-configmap=my-config-map\n+quarkus.openshift.env.using-prefix.\"QUARKIVERSE\".for-configmap=another-config-map\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47759",
    "pr_id": 47759,
    "issue_id": 47400,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Failed to pass quarkus.profile to more than one integration test case when testing native executable\n### Describe the bug\n\nIf there are two integration test cases and run the following command:\n`mvn test-compile failsafe:integration-test -Dnative -Dquarkus.profile=test` \n\nonly the first test case takes the test profile for the test and the second test case takes the prod profile for the test\n\n### Expected behavior\n\nall test cases should take the option passed by the command line for the test\n\n### Actual behavior\n\nonly the first test case takes the test profile for the test\n\n### How to Reproduce?\n\nSteps to reproduce:\n1. create two different profiles in application.properties and two integration test cases\n2. build native executable: `mvn package -Dnative -Dquarkus.native.container-build=true -DskipTests -Dskip.surefire.tests=true -Dquarkus.profile=test`\n3. run integration tests: `mvn test-compile failsafe:integration-test -Dnative -Dquarkus.profile=test`\n4. check console outputs and quarkus.log and you can find that the seconad test cases is using the prod profile, for example console outputs:  \n\nfor the first test case it looks like: \n> [io.qua.tes.com.DefaultDockerContainerLauncher] (main) Executing \"podman run --name quarkus-integration-test-WVVsG -i --rm -p 8081:8081 -p 8444:8444 --net=it-network --env QUARKUS_LOG_CATEGORY__IO_QUARKUS__LEVEL=INFO --env QUARKUS_HTTP_PORT=8081 --env QUARKUS_HTTP_SSL_PORT=8444 --env TEST_URL=http://localhost:8081/ --env QUARKUS_PROFILE=prod --env QUARKUS_MONGODB_CONNECTION_STRING=mongodb://10.89.0.3:27017 --env KAFKA_BOOTSTRAP_SERVERS=10.89.0.4:9091 --env QUARKUS_PROFILE=test --env QUARKUS_NATIVE_CONTAINER_BUILD=true ...\"\n\n\nfor the second test case:\n> [io.qua.tes.com.DefaultDockerContainerLauncher] (main) Executing \"podman run --name quarkus-integration-test-HXrED -i --rm -p 8081:8081 -p 8444:8444 --net=it-network --env QUARKUS_LOG_CATEGORY__IO_QUARKUS__LEVEL=INFO --env QUARKUS_HTTP_PORT=8081 --env QUARKUS_HTTP_SSL_PORT=8444 --env TEST_URL=http://localhost:8081/ --env QUARKUS_PROFILE=prod --env QUARKUS_MONGODB_CONNECTION_STRING=mongodb://10.89.0.6:27017 --env KAFKA_BOOTSTRAP_SERVERS=10.89.0.7:9091 --env QUARKUS_NATIVE_CONTAINER_BUILD=true ...\"\n\n\n\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\nGraalVM 22+36.1\n\n### Mandrel or GraalVM version (if different from Java)\n\nquay.io/quarkus/ubi9-quarkus-mandrel-builder-image:jdk-21\n\n### Quarkus version or git rev\n\nQuarkus 3.20\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\ngraalvm-jdk-22, maven 3.9.1\n\n### Additional information\n\n_No response_",
    "issue_word_count": 373,
    "test_files_count": 5,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "core/deployment/src/main/java/io/quarkus/deployment/dev/testing/TestConfig.java",
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusIntegrationTestExtension.java",
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusMainIntegrationTestExtension.java",
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/DockerContainerLauncherProvider.java",
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/NativeImageLauncherProvider.java"
    ],
    "pr_changed_test_files": [
      "core/deployment/src/main/java/io/quarkus/deployment/dev/testing/TestConfig.java",
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusIntegrationTestExtension.java",
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusMainIntegrationTestExtension.java",
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/DockerContainerLauncherProvider.java",
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/NativeImageLauncherProvider.java"
    ],
    "base_commit": "17ea8c016aa7ed5ee0fe674c3deb9d2ed8ce44bf",
    "head_commit": "555f72cc8991e2604b4d36ae80d1744b94c98cd4",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47759",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47759",
    "dockerfile": "",
    "pr_merged_at": "2025-05-13T17:00:21.000Z",
    "patch": "",
    "test_patch": "diff --git a/core/deployment/src/main/java/io/quarkus/deployment/dev/testing/TestConfig.java b/core/deployment/src/main/java/io/quarkus/deployment/dev/testing/TestConfig.java\nindex 38fd1b3e4249f..a91077cdae6a2 100644\n--- a/core/deployment/src/main/java/io/quarkus/deployment/dev/testing/TestConfig.java\n+++ b/core/deployment/src/main/java/io/quarkus/deployment/dev/testing/TestConfig.java\n@@ -157,16 +157,10 @@ public interface TestConfig {\n     @WithDefault(\"false\")\n     boolean flatClassPath();\n \n-    /**\n-     * The profile to use when testing the native image\n-     */\n-    @WithDefault(\"prod\")\n-    String nativeImageProfile();\n-\n     /**\n      * The profile to use when testing using {@code @QuarkusIntegrationTest}\n      */\n-    @WithDefault(\"prod\")\n+    @WithDefault(\"${quarkus.profile:prod}\")\n     String integrationTestProfile();\n \n     /**\n\ndiff --git a/test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusIntegrationTestExtension.java b/test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusIntegrationTestExtension.java\nindex c61067576d9c5..8f6f99c747568 100644\n--- a/test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusIntegrationTestExtension.java\n+++ b/test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusIntegrationTestExtension.java\n@@ -232,7 +232,10 @@ private QuarkusTestExtensionState doProcessStart(Properties quarkusArtifactPrope\n             // propagate Quarkus properties set from the build tool\n             Properties existingSysProps = System.getProperties();\n             for (String name : existingSysProps.stringPropertyNames()) {\n-                if (name.startsWith(\"quarkus.\")) {\n+                if (name.startsWith(\"quarkus.\")\n+                        // don't include 'quarkus.profile' as that has already been taken into account when determining the launch profile\n+                        // so we don't want this to end up in multiple launch arguments\n+                        && !name.equals(\"quarkus.profile\")) {\n                     additionalProperties.put(name, existingSysProps.getProperty(name));\n                 }\n             }\n\ndiff --git a/test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusMainIntegrationTestExtension.java b/test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusMainIntegrationTestExtension.java\nindex 68f3b7ad12a29..628cebec83a6d 100644\n--- a/test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusMainIntegrationTestExtension.java\n+++ b/test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusMainIntegrationTestExtension.java\n@@ -144,7 +144,10 @@ private ArtifactLauncher.LaunchResult doProcessStart(ExtensionContext context, S\n                 // propagate Quarkus properties set from the build tool\n                 Properties existingSysProps = System.getProperties();\n                 for (String name : existingSysProps.stringPropertyNames()) {\n-                    if (name.startsWith(\"quarkus.\")) {\n+                    if (name.startsWith(\"quarkus.\")\n+                            // don't include 'quarkus.profile' as that has already been taken into account when determining the launch profile\n+                            // so we don't want this to end up in multiple launch arguments\n+                            && !name.equals(\"quarkus.profile\")) {\n                         additionalProperties.put(name, existingSysProps.getProperty(name));\n                     }\n                 }\n\ndiff --git a/test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/DockerContainerLauncherProvider.java b/test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/DockerContainerLauncherProvider.java\nindex 3cca3a9f1be0b..31c36d18e01ee 100644\n--- a/test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/DockerContainerLauncherProvider.java\n+++ b/test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/DockerContainerLauncherProvider.java\n@@ -155,8 +155,8 @@ static class DefaultDockerInitContext extends DefaultInitContextBase\n         private final Map<Integer, Integer> additionalExposedPorts;\n         private final Optional<String> entryPoint;\n         private final List<String> programArgs;\n-        private Map<String, String> labels;\n-        private Map<String, String> volumeMounts;\n+        private final Map<String, String> labels;\n+        private final Map<String, String> volumeMounts;\n \n         public DefaultDockerInitContext(int httpPort, int httpsPort, Duration waitTime, String testProfile,\n                 List<String> argLine, Map<String, String> env,\n\ndiff --git a/test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/NativeImageLauncherProvider.java b/test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/NativeImageLauncherProvider.java\nindex 06d93f46f422b..4aadadb3523fa 100644\n--- a/test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/NativeImageLauncherProvider.java\n+++ b/test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/NativeImageLauncherProvider.java\n@@ -45,7 +45,7 @@ public NativeImageLauncher create(CreateContext context) {\n                     config.getValue(\"quarkus.http.test-port\", OptionalInt.class).orElse(DEFAULT_PORT),\n                     config.getValue(\"quarkus.http.test-ssl-port\", OptionalInt.class).orElse(DEFAULT_HTTPS_PORT),\n                     testConfig.waitTime(),\n-                    testConfig.nativeImageProfile(),\n+                    testConfig.integrationTestProfile(),\n                     TestConfigUtil.argLineValues(testConfig.argLine().orElse(\"\")),\n                     testConfig.env(),\n                     context.devServicesLaunchResult(),\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47757",
    "pr_id": 47757,
    "issue_id": 47498,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Native executable cannot be built with signed Jars containing beans\n### Describe the bug\n\nConsider a Maven dependency which contains bean classes (e.g. `@ApplicationScoped`) and which is signed. Then use this dependency and one of its beans in a Quarkus project. Quarkus will create proxy classes for this bean at compile time and put them into `target/quarkus-app/quarkus/generated-bytecode.jar`. The package of these generated classes is the same as the package of the signed bean.\nNow if you want to create a native executable this fails because the classloader during native compilation sees classes from the same package which are both signed (the original bean) and unsigned (the generated proxy classes). This result in a `SecurityException` and hence compilation fails.\n\n### Expected behavior\n\nThe native executable can be compiled.\n\n### Actual behavior\n\nAn error during native compilation such as\n```\nError: Class initialization of io.quarkus.runner.ApplicationImpl failed. Use the option \n\n    '--initialize-at-run-time=io.quarkus.runner.ApplicationImpl'\n\n to explicitly request initialization of this class at run time.\ncom.oracle.svm.core.util.UserError$UserException: Class initialization of io.quarkus.runner.ApplicationImpl failed. Use the option \n\n    '--initialize-at-run-time=io.quarkus.runner.ApplicationImpl'\n\n to explicitly request initialization of this class at run time.\n        at org.graalvm.nativeimage.builder/com.oracle.svm.core.util.UserError.abort(UserError.java:85)\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.classinitialization.ClassInitializationSupport.ensureClassInitialized(ClassInitializationSupport.java:195)\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.classinitialization.AllowAllHostedUsagesClassInitializationSupport.computeInitKindAndMaybeInitializeClass(AllowAllHostedUsagesClassInitializationSupport.java:191)\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.classinitialization.AllowAllHostedUsagesClassInitializationSupport.computeInitKindAndMaybeInitializeClass(AllowAllHostedUsagesClassInitializationSupport.java:129)\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.classinitialization.ClassInitializationSupport.maybeInitializeAtBuildTime(ClassInitializationSupport.java:161)\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.classinitialization.ClassInitializationSupport.maybeInitializeAtBuildTime(ClassInitializationSupport.java:150)\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.SVMHost.onTypeReachable(SVMHost.java:310)\n        at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.meta.AnalysisUniverse.onTypeReachable(AnalysisUniverse.java:699)\n        at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.meta.AnalysisType.lambda$new$0(AnalysisType.java:310)\n        at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)\n        at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)\n        at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.util.AnalysisFuture.ensureDone(AnalysisFuture.java:63)\n        at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.meta.AnalysisType.ensureOnTypeReachableTaskDone(AnalysisType.java:696)\n        at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.meta.AnalysisType.onReachable(AnalysisType.java:590)\n        at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.util.AtomicUtils.atomicSetAndRun(AtomicUtils.java:49)\n        at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.meta.AnalysisType.lambda$registerAsReachable$8(AnalysisType.java:562)\n        at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.meta.AnalysisType.forAllSuperTypes(AnalysisType.java:676)\n        at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.meta.AnalysisType.forAllSuperTypes(AnalysisType.java:659)\n        at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.meta.AnalysisType.forAllSuperTypes(AnalysisType.java:655)\n        at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.meta.AnalysisType.registerAsReachable(AnalysisType.java:562)\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.reflect.ReflectionDataBuilder.registerClass(ReflectionDataBuilder.java:204)\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.reflect.ReflectionDataBuilder.lambda$register$2(ReflectionDataBuilder.java:173)\n        at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.util.CompletionExecutor.executeCommand(CompletionExecutor.java:187)\n        at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.util.CompletionExecutor.lambda$executeService$0(CompletionExecutor.java:171)\n        at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)\n        at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)\n        at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)\n        at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)\n        at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)\n        at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)\nCaused by: java.lang.ExceptionInInitializerError\n        at java.base/jdk.internal.misc.Unsafe.ensureClassInitialized0(Native Method)\n        at java.base/jdk.internal.misc.Unsafe.ensureClassInitialized(Unsafe.java:1160)\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.classinitialization.ClassInitializationSupport.ensureClassInitialized(ClassInitializationSupport.java:177)\n        ... 28 more\nCaused by: java.lang.RuntimeException: Failed to start quarkus\n        at io.quarkus.runner.ApplicationImpl.<clinit>(Unknown Source)\n        ... 31 more\nCaused by: java.lang.SecurityException: class \"org.foo.SomeBean_Bean\"'s signer information does not match signer information of other classes in the same package\n        at java.base/java.lang.ClassLoader.checkCerts(ClassLoader.java:1173)\n        at java.base/java.lang.ClassLoader.preDefineClass(ClassLoader.java:917)\n        at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:1025)\n        at java.base/java.security.SecureClassLoader.defineClass(SecureClassLoader.java:150)\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageClassLoader.defineClass(NativeImageClassLoader.java:490)\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageClassLoader.findClassViaClassPath(NativeImageClassLoader.java:442)\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageClassLoader.loadClass(NativeImageClassLoader.java:629)\n        at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)\n        at io.quarkus.arc.setup.Default_ComponentsProvider.addBeans1(Unknown Source)\n        at io.quarkus.arc.setup.Default_ComponentsProvider.getComponents(Unknown Source)\n        at io.quarkus.arc.impl.ArcContainerImpl.<init>(ArcContainerImpl.java:128)\n        at io.quarkus.arc.Arc.initialize(Arc.java:38)\n        at io.quarkus.arc.runtime.ArcRecorder.initContainer(ArcRecorder.java:49)\n        at io.quarkus.deployment.steps.ArcProcessor$initializeContainer1770303700.deploy_0(Unknown Source)\n        at io.quarkus.deployment.steps.ArcProcessor$initializeContainer1770303700.deploy(Unknown Source)\n        ... 32 more\n```\n\n### How to Reproduce?\n\nSee https://github.com/sithmein/signature-issue-native-build and the instructions in the README.\n\n### Output of `uname -a` or `ver`\n\nLinux crest 6.13.11-200.fc41.x86_64 #1 SMP PREEMPT_DYNAMIC Thu Apr 10 19:02:09 UTC 2025 x86_64 GNU/Linux\n\n### Output of `java -version`\n\nopenjdk version \"21.0.6\" 2025-01-21\n\n### Mandrel or GraalVM version (if different from Java)\n\nMandrel-23.1.6.0-Final\n\n### Quarkus version or git rev\n\n3.15.4\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nMaven 3.9.8\n\n### Additional information\n\nOne way to solve this could be signing the generated Jars before passing them to the native build. However this only works if the library is \"yours\" i.e. the signing key is the same. It doesn't work for 3rd party libraries with beans. In such cases the signature information from all libs could be removed prior to starting the native build.",
    "issue_word_count": 1041,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "core/deployment/src/main/java/io/quarkus/deployment/pkg/JarUnsigner.java",
      "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/JarResultBuildStep.java",
      "core/deployment/src/test/java/io/quarkus/deployment/pkg/JarUnsignerTest.java"
    ],
    "pr_changed_test_files": [
      "core/deployment/src/test/java/io/quarkus/deployment/pkg/JarUnsignerTest.java"
    ],
    "base_commit": "a04cf8e95dd6a58731737f2428db090374af3596",
    "head_commit": "fdf08f05a31d20019033dd87b919a52039402712",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47757",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47757",
    "dockerfile": "",
    "pr_merged_at": "2025-05-08T16:23:35.000Z",
    "patch": "diff --git a/core/deployment/src/main/java/io/quarkus/deployment/pkg/JarUnsigner.java b/core/deployment/src/main/java/io/quarkus/deployment/pkg/JarUnsigner.java\nnew file mode 100644\nindex 0000000000000..5c7a1b82b0555\n--- /dev/null\n+++ b/core/deployment/src/main/java/io/quarkus/deployment/pkg/JarUnsigner.java\n@@ -0,0 +1,164 @@\n+package io.quarkus.deployment.pkg;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Enumeration;\n+import java.util.Map;\n+import java.util.function.Predicate;\n+import java.util.jar.Attributes;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+import java.util.jar.JarOutputStream;\n+import java.util.jar.Manifest;\n+\n+import org.jboss.logging.Logger;\n+\n+/**\n+ * JarUnsigner is used to remove the signature from a jar file.\n+ */\n+public final class JarUnsigner {\n+\n+    private static final Logger log = Logger.getLogger(JarUnsigner.class);\n+\n+    private JarUnsigner() {\n+        // utility class\n+    }\n+\n+    /**\n+     * Unsigns a jar file by removing the signature entries.\n+     * If the JAR is not signed, it will simply copy the original JAR to the target path.\n+     *\n+     * @param jarPath the path to the jar file to unsign\n+     * @param targetPath the path to the target jar file\n+     * @throws IOException if an I/O error occurs\n+     */\n+    public static void unsignJar(Path jarPath, Path targetPath) throws IOException {\n+        try (JarFile in = new JarFile(jarPath.toFile(), false)) {\n+            Manifest manifest = in.getManifest();\n+            boolean signed;\n+            if (manifest != null) {\n+                Map<String, Attributes> entries = manifest.getEntries();\n+                signed = !entries.isEmpty();\n+                // Remove signature entries\n+                entries.clear();\n+            } else {\n+                signed = false;\n+                manifest = new Manifest();\n+            }\n+            if (!signed) {\n+                in.close();\n+                log.debugf(\"JAR %s is not signed, skipping unsigning\", jarPath);\n+                Files.copy(jarPath, targetPath, java.nio.file.StandardCopyOption.REPLACE_EXISTING);\n+            } else {\n+                log.debugf(\"JAR %s is signed, removing signature\", jarPath);\n+                // Reusing buffer for performance reasons\n+                byte[] buffer = new byte[10000];\n+                try (JarOutputStream out = new JarOutputStream(Files.newOutputStream(targetPath))) {\n+                    JarEntry manifestEntry = new JarEntry(JarFile.MANIFEST_NAME);\n+                    // Set manifest time to epoch to always make the same jar\n+                    manifestEntry.setTime(0);\n+                    out.putNextEntry(manifestEntry);\n+                    manifest.write(out);\n+                    out.closeEntry();\n+                    Enumeration<JarEntry> entries = in.entries();\n+                    while (entries.hasMoreElements()) {\n+                        JarEntry entry = entries.nextElement();\n+                        String entryName = entry.getName();\n+                        if (!entryName.equals(JarFile.MANIFEST_NAME)\n+                                && !entryName.equals(\"META-INF/INDEX.LIST\")\n+                                && !isSignatureFile(entryName)) {\n+                            entry.setCompressedSize(-1);\n+                            out.putNextEntry(entry);\n+                            try (InputStream inStream = in.getInputStream(entry)) {\n+                                int r;\n+                                while ((r = inStream.read(buffer)) > 0) {\n+                                    out.write(buffer, 0, r);\n+                                }\n+                            } finally {\n+                                out.closeEntry();\n+                            }\n+                        } else {\n+                            log.debugf(\"Removed %s from %s\", entryName, jarPath);\n+                        }\n+                    }\n+                }\n+            }\n+            // let's make sure we keep the original timestamp\n+            Files.setLastModifiedTime(targetPath, Files.getLastModifiedTime(jarPath));\n+        }\n+    }\n+\n+    /**\n+     * Unsigns a jar file by removing the signature entries.\n+     *\n+     * @param jarPath the path to the jar file to unsign\n+     * @param targetPath the path to the target jar file\n+     * @param includePredicate a predicate to determine which entries to include in the target jar\n+     * @throws IOException if an I/O error occurs\n+     */\n+    public static void unsignJar(Path jarPath, Path targetPath, Predicate<String> includePredicate) throws IOException {\n+        // Reusing buffer for performance reasons\n+        byte[] buffer = new byte[10000];\n+        try (JarFile in = new JarFile(jarPath.toFile(), false)) {\n+            Manifest manifest = in.getManifest();\n+            boolean signed;\n+            if (manifest != null) {\n+                Map<String, Attributes> entries = manifest.getEntries();\n+                signed = !entries.isEmpty();\n+                // Remove signature entries\n+                entries.clear();\n+            } else {\n+                signed = false;\n+                manifest = new Manifest();\n+            }\n+            if (signed) {\n+                log.debugf(\"JAR %s is signed, removing signature\", jarPath);\n+            }\n+            try (JarOutputStream out = new JarOutputStream(Files.newOutputStream(targetPath))) {\n+                JarEntry manifestEntry = new JarEntry(JarFile.MANIFEST_NAME);\n+                // Set manifest time to epoch to always make the same jar\n+                manifestEntry.setTime(0);\n+                out.putNextEntry(manifestEntry);\n+                manifest.write(out);\n+                out.closeEntry();\n+                Enumeration<JarEntry> entries = in.entries();\n+                while (entries.hasMoreElements()) {\n+                    JarEntry entry = entries.nextElement();\n+                    String entryName = entry.getName();\n+                    if (includePredicate.test(entryName)\n+                            && !entryName.equals(JarFile.MANIFEST_NAME)\n+                            && !entryName.equals(\"META-INF/INDEX.LIST\")\n+                            && !isSignatureFile(entryName)) {\n+                        entry.setCompressedSize(-1);\n+                        out.putNextEntry(entry);\n+                        try (InputStream inStream = in.getInputStream(entry)) {\n+                            int r;\n+                            while ((r = inStream.read(buffer)) > 0) {\n+                                out.write(buffer, 0, r);\n+                            }\n+                        } finally {\n+                            out.closeEntry();\n+                        }\n+                    } else {\n+                        log.debugf(\"Removed %s from %s\", entryName, jarPath);\n+                    }\n+                }\n+            }\n+            // let's make sure we keep the original timestamp\n+            Files.setLastModifiedTime(targetPath, Files.getLastModifiedTime(jarPath));\n+        }\n+    }\n+\n+    private static boolean isSignatureFile(String entry) {\n+        entry = entry.toUpperCase();\n+        if (entry.startsWith(\"META-INF/\") && entry.indexOf('/', \"META-INF/\".length()) == -1) {\n+            return entry.endsWith(\".SF\")\n+                    || entry.endsWith(\".DSA\")\n+                    || entry.endsWith(\".RSA\")\n+                    || entry.endsWith(\".EC\");\n+        }\n+        return false;\n+    }\n+}\n\ndiff --git a/core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/JarResultBuildStep.java b/core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/JarResultBuildStep.java\nindex ab1e95a5155d5..387bd782e0a95 100644\n--- a/core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/JarResultBuildStep.java\n+++ b/core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/JarResultBuildStep.java\n@@ -43,9 +43,6 @@\n import java.util.function.Consumer;\n import java.util.function.Predicate;\n import java.util.jar.Attributes;\n-import java.util.jar.JarEntry;\n-import java.util.jar.JarFile;\n-import java.util.jar.JarOutputStream;\n import java.util.jar.Manifest;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n@@ -68,6 +65,7 @@\n import io.quarkus.deployment.builditem.QuarkusBuildCloseablesBuildItem;\n import io.quarkus.deployment.builditem.TransformedClassesBuildItem;\n import io.quarkus.deployment.configuration.ClassLoadingConfig;\n+import io.quarkus.deployment.pkg.JarUnsigner;\n import io.quarkus.deployment.pkg.PackageConfig;\n import io.quarkus.deployment.pkg.builditem.ArtifactResultBuildItem;\n import io.quarkus.deployment.pkg.builditem.BuildSystemTargetBuildItem;\n@@ -959,7 +957,7 @@ private void copyDependency(Set<ArtifactKey> parentFirstArtifacts, OutputTargetB\n                 } else {\n                     // we copy jars for which we remove entries to the same directory\n                     // which seems a bit odd to me\n-                    filterJarFile(resolvedDep, targetPath, removedFromThisArchive);\n+                    JarUnsigner.unsignJar(resolvedDep, targetPath, Predicate.not(removedFromThisArchive::contains));\n \n                     var list = new ArrayList<>(removedFromThisArchive);\n                     Collections.sort(list);\n@@ -1135,7 +1133,6 @@ private void copyLibraryJars(FileSystem runnerZipFs, OutputTargetBuildItem outpu\n             TransformedClassesBuildItem transformedClasses, Path libDir,\n             StringBuilder classPath, Collection<ResolvedDependency> appDeps, Map<String, List<byte[]>> services,\n             Predicate<String> ignoredEntriesPredicate, Set<ArtifactKey> removedDependencies) throws IOException {\n-\n         for (ResolvedDependency appDep : appDeps) {\n \n             // Exclude files that are not jars (typically, we can have XML files here, see https://github.com/quarkusio/quarkus/issues/2852)\n@@ -1150,7 +1147,8 @@ private void copyLibraryJars(FileSystem runnerZipFs, OutputTargetBuildItem outpu\n                     if (transformedFromThisArchive == null || transformedFromThisArchive.isEmpty()) {\n                         final String fileName = appDep.getGroupId() + \".\" + resolvedDep.getFileName();\n                         final Path targetPath = libDir.resolve(fileName);\n-                        Files.copy(resolvedDep, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+                        // Unsign the jar before copying it\n+                        JarUnsigner.unsignJar(resolvedDep, targetPath);\n                         classPath.append(\" lib/\").append(fileName);\n                     } else {\n                         //we have transformed classes, we need to handle them correctly\n@@ -1158,7 +1156,7 @@ private void copyLibraryJars(FileSystem runnerZipFs, OutputTargetBuildItem outpu\n                                 + resolvedDep.getFileName();\n                         final Path targetPath = libDir.resolve(fileName);\n                         classPath.append(\" lib/\").append(fileName);\n-                        filterJarFile(resolvedDep, targetPath, transformedFromThisArchive);\n+                        JarUnsigner.unsignJar(resolvedDep, targetPath, Predicate.not(transformedFromThisArchive::contains));\n                     }\n                 } else {\n                     // This case can happen when we are building a jar from inside the Quarkus repository\n@@ -1272,66 +1270,6 @@ private void handleParent(FileSystem runnerZipFs, String fileName, Map<String, S\n         }\n     }\n \n-    static void filterJarFile(Path resolvedDep, Path targetPath, Set<String> transformedFromThisArchive) {\n-        try {\n-            byte[] buffer = new byte[10000];\n-            try (JarFile in = new JarFile(resolvedDep.toFile(), false)) {\n-                Manifest manifest = in.getManifest();\n-                if (manifest != null) {\n-                    // Remove signature entries\n-                    manifest.getEntries().clear();\n-                } else {\n-                    manifest = new Manifest();\n-                }\n-                try (JarOutputStream out = new JarOutputStream(Files.newOutputStream(targetPath))) {\n-                    JarEntry manifestEntry = new JarEntry(JarFile.MANIFEST_NAME);\n-                    // Set manifest time to epoch to always make the same jar\n-                    manifestEntry.setTime(0);\n-                    out.putNextEntry(manifestEntry);\n-                    manifest.write(out);\n-                    out.closeEntry();\n-                    Enumeration<JarEntry> entries = in.entries();\n-                    while (entries.hasMoreElements()) {\n-                        JarEntry entry = entries.nextElement();\n-                        String entryName = entry.getName();\n-                        if (!transformedFromThisArchive.contains(entryName)\n-                                && !entryName.equals(JarFile.MANIFEST_NAME)\n-                                && !entryName.equals(\"META-INF/INDEX.LIST\")\n-                                && !isSignatureFile(entryName)) {\n-                            entry.setCompressedSize(-1);\n-                            out.putNextEntry(entry);\n-                            try (InputStream inStream = in.getInputStream(entry)) {\n-                                int r = 0;\n-                                while ((r = inStream.read(buffer)) > 0) {\n-                                    out.write(buffer, 0, r);\n-                                }\n-                            } finally {\n-                                out.closeEntry();\n-                            }\n-                        } else {\n-                            log.debugf(\"Removed %s from %s\", entryName, resolvedDep);\n-                        }\n-                    }\n-                }\n-                // let's make sure we keep the original timestamp\n-                Files.setLastModifiedTime(targetPath, Files.getLastModifiedTime(resolvedDep));\n-            }\n-        } catch (IOException e) {\n-            throw new UncheckedIOException(e);\n-        }\n-    }\n-\n-    private static boolean isSignatureFile(String entry) {\n-        entry = entry.toUpperCase();\n-        if (entry.startsWith(\"META-INF/\") && entry.indexOf('/', \"META-INF/\".length()) == -1) {\n-            return entry.endsWith(\".SF\")\n-                    || entry.endsWith(\".DSA\")\n-                    || entry.endsWith(\".RSA\")\n-                    || entry.endsWith(\".EC\");\n-        }\n-        return false;\n-    }\n-\n     /**\n      * Manifest generation is quite simple : we just have to push some attributes in manifest.\n      * However, it gets a little more complex if the manifest preexists.\n",
    "test_patch": "diff --git a/core/deployment/src/test/java/io/quarkus/deployment/pkg/steps/JarResultBuildStepTest.java b/core/deployment/src/test/java/io/quarkus/deployment/pkg/JarUnsignerTest.java\nsimilarity index 93%\nrename from core/deployment/src/test/java/io/quarkus/deployment/pkg/steps/JarResultBuildStepTest.java\nrename to core/deployment/src/test/java/io/quarkus/deployment/pkg/JarUnsignerTest.java\nindex fc5180b34e9a7..b90ab60a038d5 100644\n--- a/core/deployment/src/test/java/io/quarkus/deployment/pkg/steps/JarResultBuildStepTest.java\n+++ b/core/deployment/src/test/java/io/quarkus/deployment/pkg/JarUnsignerTest.java\n@@ -1,4 +1,4 @@\n-package io.quarkus.deployment.pkg.steps;\n+package io.quarkus.deployment.pkg;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n@@ -16,7 +16,6 @@\n import java.security.cert.CertificateException;\n import java.util.Calendar;\n import java.util.Date;\n-import java.util.Set;\n import java.util.jar.JarEntry;\n import java.util.jar.JarFile;\n import java.util.jar.Manifest;\n@@ -41,9 +40,9 @@\n import jdk.security.jarsigner.JarSigner;\n \n /**\n- * Test for {@link JarResultBuildStep}\n+ * Test for {@link JarUnsigner}\n  */\n-class JarResultBuildStepTest {\n+class JarUnsignerTest {\n \n     @Test\n     void should_unsign_jar_when_filtered(@TempDir Path tempDir) throws Exception {\n@@ -58,7 +57,7 @@ void should_unsign_jar_when_filtered(@TempDir Path tempDir) throws Exception {\n                 FileOutputStream out = new FileOutputStream(signedJarPath.toFile())) {\n             signer.sign(in, out);\n         }\n-        JarResultBuildStep.filterJarFile(signedJarPath, unsignedJarToTestPath, Set.of(\"java/lang/Integer.class\"));\n+        JarUnsigner.unsignJar(signedJarPath, unsignedJarToTestPath, p -> !p.equals(\"java/lang/Integer.class\"));\n         try (JarFile jarFile = new JarFile(unsignedJarToTestPath.toFile())) {\n             assertThat(jarFile.stream().map(JarEntry::getName)).doesNotContain(\"META-INF/ECLIPSE_.RSA\", \"META-INF/ECLIPSE_.SF\");\n             // Check that the manifest is still present\n@@ -76,7 +75,7 @@ void manifestTimeShouldAlwaysBeSetToEpoch(@TempDir Path tempDir) throws Exceptio\n         Path initialJar = tempDir.resolve(\"initial.jar\");\n         Path filteredJar = tempDir.resolve(\"filtered.jar\");\n         archive.as(ZipExporter.class).exportTo(new File(initialJar.toUri()), true);\n-        JarResultBuildStep.filterJarFile(initialJar, filteredJar, Set.of(\"java/lang/Integer.class\"));\n+        JarUnsigner.unsignJar(initialJar, filteredJar, p -> !p.equals(\"java/lang/Integer.class\"));\n         try (JarFile jarFile = new JarFile(filteredJar.toFile())) {\n             assertThat(jarFile.stream())\n                     .filteredOn(jarEntry -> jarEntry.getName().equals(JarFile.MANIFEST_NAME))\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47748",
    "pr_id": 47748,
    "issue_id": 47738,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Multiple scheduled methods overrides they configuration\n### Describe the bug\n\nIf you define multiple methods annotated as `@Scheduled` they override configurations. \n\nFirst:\n```java\n@ApplicationScoped\nclass StaticScheduler {\n\n\t@Scheduled(cron = \"0 1 * * * ?\")\n\tpublic static void scheduledStatic(){\n\t\tSystem.out.println(\"scheduledStatic\");\n\t}\n\n}\n```\nsecond:\n```java\n@ApplicationScoped\nclass ScheduledNonStatic {\n\n\t@Scheduled(cron = \"1 * * * * ?\")\n\tpublic void scheduledNonStatic(){\n\t\tSystem.out.println(\"scheduledNonStatic\");\n\t}\n\n}\n```\n\neffective configuration visible in dev-ui:\n\n![Image](https://github.com/user-attachments/assets/85d6fa8c-e355-4237-952a-7b70c894d93d)\n\nAnd `scheduledStatic` is called with the same trigger as `scheduledNonStatic`. Original configuration is ignored.\n\n### Expected behavior\n\nConfigurations should not be overridden. Methods should work with they own triggers.\n\n\n\n### Actual behavior\n\nThe last loaded method definition overrides all other definitions. \n\n### How to Reproduce?\n\nExample application could be found here:\n\nhttps://github.com/Koziolek/quarkus-scheduler-fail\n\n### Output of `uname -a` or `ver`\n\nLinux koziolek-desktop3 5.8.0-43-generic #49~20.04.1-Ubuntu SMP Fri Feb 5 09:57:56 UTC 2021 x86_64 x86_64 x86_64 GNU/Lin\n\n### Output of `java -version`\n\nopenjdk version \"21\" 2023-09-19 OpenJDK Runtime Environment (build 21+35-2513) OpenJDK 64-Bit Server VM (build 21+35-2513, mixed mode, sharing)\n\n### Quarkus version or git rev\n\n3.22.1\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nApache Maven 3.9.9 (8e8579a9e76f7d015ee5ec7bfcdc97d260186937) Maven home: /home/koziolek/.sdkman/candidates/maven/current Java version: 21, vendor: Oracle Corporation, runtime: /home/koziolek/.sdkman/candidates/java/21-open Default locale: pl_PL, platform encoding: UTF-8 OS name: \"linux\", version: \"5.8.0-43-generic\", arch: \"amd64\", family: \"unix\"\n\n### Additional information\n\nTested on 3.22.1 and 3.21.1 on java 21 and java 24",
    "issue_word_count": 270,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "extensions/scheduler/deployment/src/main/java/io/quarkus/scheduler/deployment/SchedulerProcessor.java",
      "extensions/scheduler/deployment/src/test/java/io/quarkus/scheduler/test/staticmethod/ScheduledStaticMethodTest.java"
    ],
    "pr_changed_test_files": [
      "extensions/scheduler/deployment/src/test/java/io/quarkus/scheduler/test/staticmethod/ScheduledStaticMethodTest.java"
    ],
    "base_commit": "74336d03b5fe6c394aeb619193f6f86735f4c729",
    "head_commit": "f30d9e042d38269f048a0affe398576aec99038f",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47748",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47748",
    "dockerfile": "",
    "pr_merged_at": "2025-05-07T17:37:50.000Z",
    "patch": "diff --git a/extensions/scheduler/deployment/src/main/java/io/quarkus/scheduler/deployment/SchedulerProcessor.java b/extensions/scheduler/deployment/src/main/java/io/quarkus/scheduler/deployment/SchedulerProcessor.java\nindex 277a453e3a30b..2a7454a527150 100644\n--- a/extensions/scheduler/deployment/src/main/java/io/quarkus/scheduler/deployment/SchedulerProcessor.java\n+++ b/extensions/scheduler/deployment/src/main/java/io/quarkus/scheduler/deployment/SchedulerProcessor.java\n@@ -15,6 +15,7 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;\n import java.util.Optional;\n import java.util.Set;\n import java.util.concurrent.CompletableFuture;\n@@ -176,6 +177,7 @@ void collectScheduledMethods(BeanArchiveIndexBuildItem beanArchives, BeanDiscove\n             BuildProducer<ScheduledBusinessMethodItem> scheduledBusinessMethods) {\n \n         // First collect static scheduled methods\n+        Map<MethodInfo, List<AnnotationInstance>> staticScheduledMethods = new HashMap<>();\n         List<AnnotationInstance> schedules = new ArrayList<>(\n                 beanArchives.getIndex().getAnnotations(SchedulerDotNames.SCHEDULED_NAME));\n         for (AnnotationInstance annotationInstance : beanArchives.getIndex().getAnnotations(SchedulerDotNames.SCHEDULES_NAME)) {\n@@ -198,13 +200,23 @@ void collectScheduledMethods(BeanArchiveIndexBuildItem beanArchives, BeanDiscove\n                         method.name(), declaringClass.name()));\n             }\n             if (Modifier.isStatic(method.flags()) && !KotlinUtil.isSuspendMethod(method)) {\n-                scheduledBusinessMethods.produce(new ScheduledBusinessMethodItem(null, method, schedules,\n-                        transformedAnnotations.hasAnnotation(method, SchedulerDotNames.NON_BLOCKING),\n-                        transformedAnnotations.hasAnnotation(method, SchedulerDotNames.RUN_ON_VIRTUAL_THREAD)));\n-                LOGGER.debugf(\"Found scheduled static method %s declared on %s\", method, declaringClass.name());\n+                List<AnnotationInstance> methodSchedules = staticScheduledMethods.get(method);\n+                if (methodSchedules == null) {\n+                    methodSchedules = new ArrayList<>();\n+                    staticScheduledMethods.put(method, methodSchedules);\n+                }\n+                methodSchedules.add(annotationInstance);\n             }\n         }\n \n+        for (Entry<MethodInfo, List<AnnotationInstance>> e : staticScheduledMethods.entrySet()) {\n+            MethodInfo method = e.getKey();\n+            scheduledBusinessMethods.produce(new ScheduledBusinessMethodItem(null, method, e.getValue(),\n+                    transformedAnnotations.hasAnnotation(method, SchedulerDotNames.NON_BLOCKING),\n+                    transformedAnnotations.hasAnnotation(method, SchedulerDotNames.RUN_ON_VIRTUAL_THREAD)));\n+            LOGGER.debugf(\"Found scheduled static method %s declared on %s\", method, method.declaringClass().name());\n+        }\n+\n         // Then collect all business methods annotated with @Scheduled\n         for (BeanInfo bean : beanDiscovery.beanStream().classBeans()) {\n             collectScheduledMethods(beanArchives.getIndex(), transformedAnnotations, bean,\n",
    "test_patch": "diff --git a/extensions/scheduler/deployment/src/test/java/io/quarkus/scheduler/test/staticmethod/ScheduledStaticMethodTest.java b/extensions/scheduler/deployment/src/test/java/io/quarkus/scheduler/test/staticmethod/ScheduledStaticMethodTest.java\nindex 90355cd15979d..8fecb1afa8c25 100644\n--- a/extensions/scheduler/deployment/src/test/java/io/quarkus/scheduler/test/staticmethod/ScheduledStaticMethodTest.java\n+++ b/extensions/scheduler/deployment/src/test/java/io/quarkus/scheduler/test/staticmethod/ScheduledStaticMethodTest.java\n@@ -1,14 +1,18 @@\n package io.quarkus.scheduler.test.staticmethod;\n \n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n \n+import jakarta.inject.Inject;\n+\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.RegisterExtension;\n \n import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.scheduler.Scheduler;\n import io.quarkus.test.QuarkusUnitTest;\n \n public class ScheduledStaticMethodTest {\n@@ -18,8 +22,12 @@ public class ScheduledStaticMethodTest {\n             .withApplicationRoot((jar) -> jar\n                     .addClasses(Jobs.class, AbstractJobs.class, InterfaceJobs.class));\n \n+    @Inject\n+    Scheduler scheduler;\n+\n     @Test\n     public void testSimpleScheduledJobs() throws InterruptedException {\n+        assertEquals(3, scheduler.getScheduledJobs().size());\n         assertTrue(Jobs.LATCH.await(5, TimeUnit.SECONDS));\n         assertTrue(AbstractJobs.LATCH.await(5, TimeUnit.SECONDS));\n         assertTrue(InterfaceJobs.LATCH.await(5, TimeUnit.SECONDS));\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47741",
    "pr_id": 47741,
    "issue_id": 47739,
    "repo": "quarkusio/quarkus",
    "problem_statement": "`@InjectMock JsonWebToken` fails with ContextNotActiveException\n### Describe the bug\n\nsince `3.21.4` `@InjectMock JsonWebToken jwt` fails with ContextNotActiveException, it was running in `3.21.3`\n\n```\norg.junit.jupiter.api.extension.TestInstantiationException: Failed to create test instance\n        at io.quarkus.test.junit.QuarkusTestExtension.initTestState(QuarkusTestExtension.java:767)\n        at io.quarkus.test.junit.QuarkusTestExtension.interceptTestClassConstructor(QuarkusTestExtension.java:733)\n        at java.base/java.util.Optional.orElseGet(Optional.java:364)\n        at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n        at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\nCaused by: jakarta.enterprise.context.ContextNotActiveException: RequestScoped context was not active when trying to obtain a bean instance for a client proxy of PRODUCER_METHOD bean [class=io.quarkus.smallrye.jwt.runtime.auth.JwtPrincipalProducer, id=BxDM8UQSQwnNG8ZE6VKFZ8wrsgg]\n        - you can activate the request context for a specific method using the @ActivateRequestContext interceptor binding\n```\n\n### Expected behavior\n\nshould work imho as `@InjectMock` should somehow replace the real implementation bound to `@RequestScope`\n\n### Actual behavior\n\nfails with exception above\n\n### How to Reproduce?\n\nhttps://github.com/flyinfish/quarkus--inject-mock-jwt\n\n### Workaround\n\nthere is a workaround [JwtBeanInjectMockWorkaroundTest](src/test/java/org/acme/JwtBeanInjectMockWorkaroundTest.java) still running which installs the mock dynamically with `QuarkusMock.installMockForType()`\n\n```\n    //@InjectMock\n    JsonWebToken jwt;\n\n    @BeforeEach\n    void workaround() {\n        jwt = mock(JsonWebToken.class);\n        QuarkusMock.installMockForType(jwt, JsonWebToken.class);\n    }\n```\n\n### Output of `uname -a` or `ver`\n\nLinux C70C7391 5.15.167.4-microsoft-standard-WSL2 #1 SMP Tue Nov 5 00:21:55 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux\n\n### Output of `java -version`\n\nopenjdk 21.0.7 2025-04-15 LTS OpenJDK Runtime Environment Zulu21.42+20-SA (build 21.0.7+6-LTS) OpenJDK 64-Bit Server VM Zulu21.42+20-SA (build 21.0.7+6-LTS, mixed mode, sharing)\n\n### Quarkus version or git rev\n\n3.21.4\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nApache Maven 3.9.9 (8e8579a9e76f7d015ee5ec7bfcdc97d260186937) Maven home: /opt/apache-maven-3.9.9 Java version: 21.0.7, vendor: Azul Systems, Inc., runtime: /usr/lib/jvm/mobi-azuljdk21 Default locale: en, platform encoding: UTF-8 OS name: \"linux\", version: \"5.15.167.4-microsoft-standard-wsl2\", arch: \"amd64\", family: \"unix\"\n\n### Additional information\n\n_No response_",
    "issue_word_count": 353,
    "test_files_count": 5,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "integration-tests/injectmock/src/main/java/io/quarkus/it/mockbean/RequestScopedFooFromProducer.java",
      "integration-tests/injectmock/src/main/java/io/quarkus/it/mockbean/RequestScopedProducer.java",
      "integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/RequestScopedFooMockTest.java",
      "test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/MockitoMocksTracker.java",
      "test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/SetMockitoMockAsBeanMockCallback.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/injectmock/src/main/java/io/quarkus/it/mockbean/RequestScopedFooFromProducer.java",
      "integration-tests/injectmock/src/main/java/io/quarkus/it/mockbean/RequestScopedProducer.java",
      "integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/RequestScopedFooMockTest.java",
      "test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/MockitoMocksTracker.java",
      "test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/SetMockitoMockAsBeanMockCallback.java"
    ],
    "base_commit": "6f219056dabb1977ce316980f301dc437d77cdb1",
    "head_commit": "8f2efdb9e88c76a55ea35fe8f723e218243a0d2d",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47741",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47741",
    "dockerfile": "",
    "pr_merged_at": "2025-05-07T13:24:48.000Z",
    "patch": "",
    "test_patch": "diff --git a/integration-tests/injectmock/src/main/java/io/quarkus/it/mockbean/RequestScopedFooFromProducer.java b/integration-tests/injectmock/src/main/java/io/quarkus/it/mockbean/RequestScopedFooFromProducer.java\nnew file mode 100644\nindex 0000000000000..df3b888a18761\n--- /dev/null\n+++ b/integration-tests/injectmock/src/main/java/io/quarkus/it/mockbean/RequestScopedFooFromProducer.java\n@@ -0,0 +1,20 @@\n+package io.quarkus.it.mockbean;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import jakarta.annotation.PostConstruct;\n+\n+public class RequestScopedFooFromProducer {\n+\n+    static final AtomicBoolean CONSTRUCTED = new AtomicBoolean();\n+\n+    public String ping() {\n+        return \"bar\";\n+    }\n+\n+    @PostConstruct\n+    void init() {\n+        CONSTRUCTED.set(true);\n+    }\n+\n+}\n\ndiff --git a/integration-tests/injectmock/src/main/java/io/quarkus/it/mockbean/RequestScopedProducer.java b/integration-tests/injectmock/src/main/java/io/quarkus/it/mockbean/RequestScopedProducer.java\nnew file mode 100644\nindex 0000000000000..4b95b2e02a330\n--- /dev/null\n+++ b/integration-tests/injectmock/src/main/java/io/quarkus/it/mockbean/RequestScopedProducer.java\n@@ -0,0 +1,17 @@\n+package io.quarkus.it.mockbean;\n+\n+import jakarta.enterprise.context.RequestScoped;\n+import jakarta.enterprise.inject.Produces;\n+\n+import io.quarkus.arc.Unremovable;\n+\n+public class RequestScopedProducer {\n+\n+    @Produces\n+    @RequestScoped\n+    @Unremovable\n+    public RequestScopedFooFromProducer produce() {\n+        return new RequestScopedFooFromProducer();\n+    }\n+\n+}\n\ndiff --git a/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/RequestScopedFooMockTest.java b/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/RequestScopedFooMockTest.java\nindex c36b0f54fe566..617733275ffd5 100644\n--- a/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/RequestScopedFooMockTest.java\n+++ b/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/RequestScopedFooMockTest.java\n@@ -15,11 +15,17 @@ class RequestScopedFooMockTest {\n     @InjectMock\n     RequestScopedFoo foo;\n \n+    @InjectMock\n+    RequestScopedFooFromProducer foo2;\n+\n     @Test\n     void testMock() {\n         when(foo.ping()).thenReturn(\"pong\");\n+        when(foo2.ping()).thenReturn(\"pong2\");\n         assertEquals(\"pong\", foo.ping());\n+        assertEquals(\"pong2\", foo2.ping());\n         assertFalse(RequestScopedFoo.CONSTRUCTED.get());\n+        assertFalse(RequestScopedFooFromProducer.CONSTRUCTED.get());\n     }\n \n }\n\ndiff --git a/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/MockitoMocksTracker.java b/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/MockitoMocksTracker.java\nindex 9127b1afa3ee1..a35cb90984e18 100644\n--- a/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/MockitoMocksTracker.java\n+++ b/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/MockitoMocksTracker.java\n@@ -48,6 +48,17 @@ static Optional<Object> currentMock(Object testInstance, Object beanInstance) {\n         return Optional.empty();\n     }\n \n-    record Mocked(Object mock, Object beanInstance) {\n+    // don't use a Record because we don't want the auto-generated methods which delegate to the components\n+    // see https://github.com/quarkusio/quarkus/issues/47739\n+    @SuppressWarnings(\"ClassCanBeRecord\")\n+    final static class Mocked {\n+\n+        final Object mock;\n+        final Object beanInstance;\n+\n+        Mocked(Object mock, Object beanInstance) {\n+            this.mock = mock;\n+            this.beanInstance = beanInstance;\n+        }\n     }\n }\n\ndiff --git a/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/SetMockitoMockAsBeanMockCallback.java b/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/SetMockitoMockAsBeanMockCallback.java\nindex 9840a46ac9ff0..3475fbdf1480d 100644\n--- a/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/SetMockitoMockAsBeanMockCallback.java\n+++ b/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/SetMockitoMockAsBeanMockCallback.java\n@@ -18,9 +18,9 @@ public void beforeEach(QuarkusTestMethodContext context) {\n \n     private void installMock(MockitoMocksTracker.Mocked mocked) {\n         try {\n-            QuarkusMock.installMockForInstance(mocked.mock(), mocked.beanInstance());\n+            QuarkusMock.installMockForInstance(mocked.mock, mocked.beanInstance);\n         } catch (Exception e) {\n-            throw new RuntimeException(mocked.beanInstance()\n+            throw new RuntimeException(mocked.beanInstance\n                     + \" is not a normal scoped CDI bean, make sure the bean is a normal scope like @ApplicationScoped or @RequestScoped.\"\n                     + \" Alternatively you can use '@MockitoConfig(convertScopes = true)' in addition to '@InjectMock' if you would like\"\n                     + \" Quarkus to automatically make that conversion (you should only use this if you understand the implications).\");\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47730",
    "pr_id": 47730,
    "issue_id": 47430,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Quarkus fails to start up with composite Gradle build when using Kotlin (Java works correctly)\n### Describe the bug\n\nWhen both the root gradle project and the gradle subproject in a composite gradle build use Quarkus with Kotlin, the project throws a runtime exception and fails to start up.\n\n### Expected behavior\n\nThe project starts up successfully.\n\n### Actual behavior\n\nThe following exception is thrown at runtime and the project fails to start up:\n\n```\n2025-04-17 14:01:57,148 ERROR [io.qua.dep.dev.IsolatedDevModeMain] (main) Failed to start quarkus: java.lang.RuntimeException: io.quarkus.builder.BuildException: Build failure: Build failed due to errors\n        [error]: Build step io.quarkus.arc.deployment.ArcProcessor#validate threw an exception: jakarta.enterprise.inject.spi.DeploymentException: jakarta.enterprise.inject.UnsatisfiedResolutionException: Unsatisfied dependency for type org.example.SomeBean and qualifiers [@Default]\n        - injection target: parameter 'someBean' of org.example.ExampleResource constructor\n        - declared on CLASS bean [types=[org.example.ExampleResource, java.lang.Object], qualifiers=[@Default, @Any], target=org.example.ExampleResource]\n        at io.quarkus.arc.processor.BeanDeployment.processErrors(BeanDeployment.java:1581)\n        at io.quarkus.arc.processor.BeanDeployment.init(BeanDeployment.java:338)\n        at io.quarkus.arc.processor.BeanProcessor.initialize(BeanProcessor.java:178)\n        at io.quarkus.arc.deployment.ArcProcessor.validate(ArcProcessor.java:489)\n        at java.base/java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:733)\n        at io.quarkus.deployment.ExtensionLoader$3.execute(ExtensionLoader.java:856)\n        at io.quarkus.builder.BuildContext.run(BuildContext.java:255)\n        at org.jboss.threads.ContextHandler$1.runWith(ContextHandler.java:18)\n        at org.jboss.threads.EnhancedQueueExecutor$Task.doRunWith(EnhancedQueueExecutor.java:2675)\n        at org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2654)\n        at org.jboss.threads.EnhancedQueueExecutor.runThreadBody(EnhancedQueueExecutor.java:1627)\n        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1594)\n        at java.base/java.lang.Thread.run(Thread.java:1583)\n        at org.jboss.threads.JBossThread.run(JBossThread.java:499)\nCaused by: jakarta.enterprise.inject.UnsatisfiedResolutionException: Unsatisfied dependency for type org.example.SomeBean and qualifiers [@Default]\n        - injection target: parameter 'someBean' of org.example.ExampleResource constructor\n        - declared on CLASS bean [types=[org.example.ExampleResource, java.lang.Object], qualifiers=[@Default, @Any], target=org.example.ExampleResource]\n        at io.quarkus.arc.processor.Beans.resolveInjectionPoint(Beans.java:547)\n        at io.quarkus.arc.processor.BeanInfo.init(BeanInfo.java:689)\n        at io.quarkus.arc.processor.BeanDeployment.init(BeanDeployment.java:323)\n        ... 12 more\n```\n\n\nIf the root project doesn't inject any beans from the dependency and instead only accesses a plain Kotlin class from the dependency, then this exception is thrown instead and the project still fails to start up:\n\n```\n2025-04-17 14:12:09,066 WARN  [io.qua.dep.ste.ReflectiveHierarchyStep] (build-4) Unable to properly register the hierarchy of the following classes for reflection as they are not in the Jandex index:\n     - org.example.SomeDataClass (source: ResteasyReactiveProcessor > org.example.ExampleResource[org.example.SomeDataClass hello()] > org.example.SomeDataClass > org.example.SomeDataClass)\nConsider adding them to the index either by creating a Jandex index for your dependency via the Maven plugin, an empty META-INF/beans.xml or quarkus.index-dependency properties.\n2025-04-17 14:12:09,126 ERROR [io.qua.run.Quarkus] (Quarkus Main Thread) Error running Quarkus: java.lang.ExceptionInInitializerError\n        at java.base/jdk.internal.misc.Unsafe.allocateInstance(Native Method)\n        at java.base/java.lang.invoke.DirectMethodHandle.allocateInstance(DirectMethodHandle.java:501)\n        at io.quarkus.runtime.Quarkus.run(Quarkus.java:79)\n        at io.quarkus.runtime.Quarkus.run(Quarkus.java:51)\n        at io.quarkus.runtime.Quarkus.run(Quarkus.java:144)\n        at io.quarkus.runner.GeneratedMain.main(Unknown Source)\n        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n        at java.base/java.lang.reflect.Method.invoke(Method.java:580)\n        at io.quarkus.runner.bootstrap.StartupActionImpl$1.run(StartupActionImpl.java:116)\n        at java.base/java.lang.Thread.run(Thread.java:1583)\nCaused by: java.lang.RuntimeException: Failed to start quarkus\n        at io.quarkus.runner.ApplicationImpl.<clinit>(Unknown Source)\n        ... 10 more\nCaused by: java.lang.RuntimeException: java.lang.ClassNotFoundException: org.example.SomeDataClass\n        at org.jboss.resteasy.reactive.common.util.types.TypeSignatureParser.loadClass(TypeSignatureParser.java:165)\n        at org.jboss.resteasy.reactive.common.util.types.TypeSignatureParser.parseReference(TypeSignatureParser.java:146)\n        at org.jboss.resteasy.reactive.common.util.types.TypeSignatureParser.parseType(TypeSignatureParser.java:54)\n        at org.jboss.resteasy.reactive.common.util.types.TypeSignatureParser.parse(TypeSignatureParser.java:170)\n        at org.jboss.resteasy.reactive.server.core.startup.RuntimeResourceDeployment.buildResourceMethod(RuntimeResourceDeployment.java:389)\n        at org.jboss.resteasy.reactive.server.core.startup.RuntimeDeploymentManager.deploy(RuntimeDeploymentManager.java:137)\n        at io.quarkus.resteasy.reactive.server.runtime.ResteasyReactiveRecorder.createDeployment(ResteasyReactiveRecorder.java:161)\n        at io.quarkus.runner.recorded.ResteasyReactiveProcessor$setupDeployment944680882.deploy_0(Unknown Source)\n        at io.quarkus.runner.recorded.ResteasyReactiveProcessor$setupDeployment944680882.deploy(Unknown Source)\n        ... 11 more\nCaused by: java.lang.ClassNotFoundException: org.example.SomeDataClass\n        at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n        at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n        at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)\n        at io.quarkus.bootstrap.classloading.QuarkusClassLoader.loadClass(QuarkusClassLoader.java:569)\n        at io.quarkus.bootstrap.classloading.QuarkusClassLoader.loadClass(QuarkusClassLoader.java:517)\n        at io.quarkus.bootstrap.classloading.QuarkusClassLoader.loadClass(QuarkusClassLoader.java:569)\n        at io.quarkus.bootstrap.classloading.QuarkusClassLoader.loadClass(QuarkusClassLoader.java:517)\n        at java.base/java.lang.Class.forName0(Native Method)\n        at java.base/java.lang.Class.forName(Class.java:534)\n        at java.base/java.lang.Class.forName(Class.java:513)\n        at org.jboss.resteasy.reactive.common.util.types.TypeSignatureParser.loadClass(TypeSignatureParser.java:163)\n        ... 19 more\n```\n\n### How to Reproduce?\n\nReproducer: https://github.com/lspahija/quarkus-complex-build-bug-reproducer\n\nThere are two branches: `not-working-kotlin` (default branch) and `works-java`\n\nSteps to reproduce the behavior:\n1. git clone https://github.com/lspahija/quarkus-complex-build-bug-reproducer\n2. cd quarkus-complex-build-bug-reproducer\n3. ./gradlew quarkusDev\n4. see exception in the console and note that the project has failed to start up\n\nIf you wish to see the equivalent java project working successfully:\n1. git checkout works-java\n2. ./gradlew quarkusDev\n3. note that everything works fine\n\n### Output of `uname -a` or `ver`\n\nDarwin MacBookPro 24.3.0 Darwin Kernel Version 24.3.0: Thu Jan  2 20:24:16 PST 2025; root:xnu-11215.81.4~3/RELEASE_ARM64_T6000 arm64\n\n### Output of `java -version`\n\nopenjdk version \"21.0.6\" 2025-01-21 LTS OpenJDK Runtime Environment Zulu21.40+17-CA (build 21.0.6+7-LTS) OpenJDK 64-Bit Server VM Zulu21.40+17-CA (build 21.0.6+7-LTS, mixed mode, sharing)\n\n### Quarkus version or git rev\n\n3.21.3\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nGradle 8.12\n\n### Additional information\n\n_No response_",
    "issue_word_count": 1076,
    "test_files_count": 14,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "devtools/gradle/gradle-model/src/main/java/io/quarkus/gradle/tooling/GradleApplicationModelBuilder.java",
      "integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/acme-nested/build.gradle.kts",
      "integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/acme-nested/gradle.properties",
      "integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/acme-nested/settings.gradle.kts",
      "integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/acme-nested/src/main/kotlin/org/example/SomeBean.kt",
      "integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/acme-nested/src/main/kotlin/org/example/SomeDataClass.kt",
      "integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/acme-nested/src/main/resources/META-INF/beans.xml",
      "integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/build.gradle.kts",
      "integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/gradle.properties",
      "integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/settings.gradle.kts",
      "integration-tests/gradle/src/main/resources/included-kotlin-build/build.gradle.kts",
      "integration-tests/gradle/src/main/resources/included-kotlin-build/gradle.properties",
      "integration-tests/gradle/src/main/resources/included-kotlin-build/settings.gradle.kts",
      "integration-tests/gradle/src/main/resources/included-kotlin-build/src/main/kotlin/org/example/ExampleResource.kt",
      "integration-tests/gradle/src/test/java/io/quarkus/gradle/devmode/IncludedKotlinBuildDevModeTest.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/acme-nested/build.gradle.kts",
      "integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/acme-nested/gradle.properties",
      "integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/acme-nested/settings.gradle.kts",
      "integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/acme-nested/src/main/kotlin/org/example/SomeBean.kt",
      "integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/acme-nested/src/main/kotlin/org/example/SomeDataClass.kt",
      "integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/acme-nested/src/main/resources/META-INF/beans.xml",
      "integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/build.gradle.kts",
      "integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/gradle.properties",
      "integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/settings.gradle.kts",
      "integration-tests/gradle/src/main/resources/included-kotlin-build/build.gradle.kts",
      "integration-tests/gradle/src/main/resources/included-kotlin-build/gradle.properties",
      "integration-tests/gradle/src/main/resources/included-kotlin-build/settings.gradle.kts",
      "integration-tests/gradle/src/main/resources/included-kotlin-build/src/main/kotlin/org/example/ExampleResource.kt",
      "integration-tests/gradle/src/test/java/io/quarkus/gradle/devmode/IncludedKotlinBuildDevModeTest.java"
    ],
    "base_commit": "a721231f466d8601a1d3bf316a26e15f65b423ce",
    "head_commit": "3d1029d5801181b6c54c042b5e0b6594f0e5fd74",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47730",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47730",
    "dockerfile": "",
    "pr_merged_at": "2025-05-07T19:26:06.000Z",
    "patch": "diff --git a/devtools/gradle/gradle-model/src/main/java/io/quarkus/gradle/tooling/GradleApplicationModelBuilder.java b/devtools/gradle/gradle-model/src/main/java/io/quarkus/gradle/tooling/GradleApplicationModelBuilder.java\nindex da2b33824d86f..523030ef12f82 100644\n--- a/devtools/gradle/gradle-model/src/main/java/io/quarkus/gradle/tooling/GradleApplicationModelBuilder.java\n+++ b/devtools/gradle/gradle-model/src/main/java/io/quarkus/gradle/tooling/GradleApplicationModelBuilder.java\n@@ -17,6 +17,7 @@\n import java.util.Objects;\n import java.util.Properties;\n import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n \n import org.gradle.api.Project;\n import org.gradle.api.Task;\n@@ -36,7 +37,7 @@\n import org.gradle.internal.composite.IncludedBuildInternal;\n import org.gradle.language.jvm.tasks.ProcessResources;\n import org.gradle.tooling.provider.model.ParameterizedToolingModelBuilder;\n-import org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile;\n+import org.jetbrains.kotlin.gradle.tasks.KotlinCompileTool;\n \n import io.quarkus.bootstrap.BootstrapConstants;\n import io.quarkus.bootstrap.model.ApplicationModel;\n@@ -60,7 +61,6 @@\n import io.quarkus.maven.dependency.GACT;\n import io.quarkus.maven.dependency.GACTV;\n import io.quarkus.maven.dependency.GAV;\n-import io.quarkus.maven.dependency.ResolvedDependency;\n import io.quarkus.maven.dependency.ResolvedDependencyBuilder;\n import io.quarkus.paths.PathCollection;\n import io.quarkus.paths.PathList;\n@@ -352,23 +352,20 @@ private void collectDependencies(org.gradle.api.artifacts.ResolvedDependency res\n             }\n \n             PathCollection paths = null;\n-            if (workspaceDiscovery && a.getId().getComponentIdentifier() instanceof ProjectComponentIdentifier) {\n-\n-                Project projectDep = project.getRootProject().findProject(\n-                        ((ProjectComponentIdentifier) a.getId().getComponentIdentifier()).getProjectPath());\n+            if (workspaceDiscovery && a.getId().getComponentIdentifier() instanceof ProjectComponentIdentifier compId) {\n+                Project projectDep = project.getRootProject().findProject(compId.getProjectPath());\n                 SourceSetContainer sourceSets = projectDep == null ? null\n                         : projectDep.getExtensions().findByType(SourceSetContainer.class);\n \n                 final String classifier = a.getClassifier();\n                 if (classifier == null || classifier.isEmpty()) {\n                     final IncludedBuild includedBuild = ToolingUtils.includedBuild(project.getRootProject(),\n-                            ((ProjectComponentIdentifier) a.getId().getComponentIdentifier()).getBuild().getName());\n+                            compId.getBuild().getName());\n                     if (includedBuild != null) {\n                         final PathList.Builder pathBuilder = PathList.builder();\n \n-                        if (includedBuild instanceof IncludedBuildInternal) {\n-                            projectDep = ToolingUtils.includedBuildProject((IncludedBuildInternal) includedBuild,\n-                                    ((ProjectComponentIdentifier) a.getId().getComponentIdentifier()).getProjectPath());\n+                        if (includedBuild instanceof IncludedBuildInternal ib) {\n+                            projectDep = ToolingUtils.includedBuildProject(ib, compId.getProjectPath());\n                         }\n                         if (projectDep != null) {\n                             projectModule = initProjectModuleAndBuildPaths(projectDep, a, modelBuilder, depBuilder,\n@@ -517,7 +514,6 @@ private static Properties readDescriptor(final Path path) {\n \n     private static void initProjectModule(Project project, WorkspaceModule.Mutable module, SourceSet sourceSet,\n             String classifier) {\n-\n         if (sourceSet == null) {\n             return;\n         }\n@@ -570,12 +566,30 @@ private static void initProjectModule(Project project, WorkspaceModule.Mutable m\n \n     private static void maybeConfigureKotlinJvmCompile(Project project, FileCollection allClassesDirs,\n             List<SourceDir> sourceDirs, SourceSet sourceSet) {\n-        // This \"try/catch\" is needed because of the way the \"quarkus-cli\" Gradle tests work. Without it, the tests fail.\n-        try {\n-            Class.forName(\"org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile\");\n-            doConfigureKotlinJvmCompile(project, allClassesDirs, sourceDirs, sourceSet);\n-        } catch (ClassNotFoundException e) {\n-            // ignore\n+        for (var task : project.getTasks()) {\n+            if (task.getName().contains(\"compileKotlin\") && task.getEnabled()) {\n+                int originalSourceDirsSize = sourceDirs.size();\n+\n+                // This \"try/catch\" is needed because of the way the \"quarkus-cli\" Gradle tests work. Without it, the tests fail.\n+                try {\n+                    Class.forName(\"org.jetbrains.kotlin.gradle.tasks.KotlinCompileTool\");\n+                    doConfigureKotlinJvmCompile(project, allClassesDirs, sourceDirs, sourceSet);\n+                } catch (ClassNotFoundException e) {\n+                    // ignore\n+                }\n+                // if the above failed, there could still be a KotlinCompile task that's not easily discoverable\n+                if (originalSourceDirsSize == sourceDirs.size()) {\n+                    final Path outputDir = getClassesOutputDir(task);\n+                    if (outputDir != null && task.getInputs().getHasInputs()) {\n+                        task.getInputs().getSourceFiles().getAsFileTree().visit(visitor -> {\n+                            if (visitor.getRelativePath().getSegments().length == 1) {\n+                                sourceDirs.add(SourceDir.of(visitor.getFile().getParentFile().toPath(), outputDir));\n+                            }\n+                        });\n+                    }\n+                    break;\n+                }\n+            }\n         }\n     }\n \n@@ -583,32 +597,26 @@ private static void doConfigureKotlinJvmCompile(Project project, FileCollection\n             List<SourceDir> sourceDirs, SourceSet sourceSet) {\n         // Use KotlinJvmCompile.class in a separate method to prevent that maybeConfigureKotlinJvmCompile() runs into\n         // a ClassNotFoundException due to actually using KotlinJvmCompile.class.\n-        project.getTasks().withType(KotlinJvmCompile.class, t -> configureCompileTask(t.getSources().getAsFileTree(),\n+        project.getTasks().withType(KotlinCompileTool.class, t -> configureCompileTask(t.getSources().getAsFileTree(),\n                 t.getDestinationDirectory(), allClassesDirs, sourceDirs, t, sourceSet));\n     }\n \n     private static void configureCompileTask(FileTree sources, DirectoryProperty destinationDirectory,\n             FileCollection allClassesDirs, List<SourceDir> sourceDirs, Task task, SourceSet sourceSet) {\n-        if (!task.getEnabled()) {\n-            return;\n-        }\n-        if (sources.isEmpty()) {\n+        if (!task.getEnabled() || sources.isEmpty()) {\n             return;\n         }\n-\n         final File destDir = destinationDirectory.getAsFile().get();\n         if (!allClassesDirs.contains(destDir)) {\n             return;\n         }\n-        sources.visit(a -> {\n+        sources.visit(visitor -> {\n             // we are looking for the root dirs containing sources\n-            if (a.getRelativePath().getSegments().length == 1) {\n-                final File srcDir = a.getFile().getParentFile();\n-\n-                sourceDirs\n-                        .add(new DefaultSourceDir(srcDir.toPath(), destDir.toPath(),\n-                                findGeneratedSourceDir(destDir, sourceSet),\n-                                Map.of(\"compiler\", task.getName())));\n+            if (visitor.getRelativePath().getSegments().length == 1) {\n+                final File srcDir = visitor.getFile().getParentFile();\n+                sourceDirs.add(new DefaultSourceDir(srcDir.toPath(), destDir.toPath(),\n+                        findGeneratedSourceDir(destDir, sourceSet),\n+                        Map.of(\"compiler\", task.getName())));\n             }\n         });\n     }\n@@ -620,9 +628,6 @@ private static Path findGeneratedSourceDir(File destDir, SourceSet sourceSet) {\n         }\n         String language = destDir.getParentFile().getName(); // java\n         String sourceSetName = destDir.getName(); // main\n-        if (language == null) {\n-            return null;\n-        }\n         // find the corresponding generated sources, same pattern, but under build/generated/sources/annotationProcessor/java/main\n         for (File generatedDir : sourceSet.getOutput().getGeneratedSourcesDirs().getFiles()) {\n             if (generatedDir.getParentFile() == null) {\n@@ -636,6 +641,37 @@ private static Path findGeneratedSourceDir(File destDir, SourceSet sourceSet) {\n         return null;\n     }\n \n+    /**\n+     * This method is meant to figure out the output directory containing class files for a compile task\n+     * which is not available in the plugin classpath. An example would be KotlinCompile.\n+     *\n+     * @param compileTask a compile task\n+     */\n+    private static Path getClassesOutputDir(Task compileTask) {\n+        if (compileTask.getOutputs().getHasOutput()) {\n+            final AtomicReference<Path> result = new AtomicReference<>();\n+            compileTask.getOutputs().getFiles().getAsFileTree().visit(visitor -> {\n+                // We are looking for the first class file, since a compile task would typically\n+                // have a single output location for classes.\n+                // There in fact could be a few output locations, the rest though would typically be some internal caching bits\n+                if (visitor.getName().endsWith(\".class\")) {\n+                    visitor.stopVisiting();\n+                    var file = visitor.getFile();\n+                    int relativeSegments = visitor.getRelativePath().getSegments().length;\n+                    while (file != null && relativeSegments > 0) {\n+                        relativeSegments--;\n+                        file = file.getParentFile();\n+                    }\n+                    if (file != null) {\n+                        result.set(file.toPath());\n+                    }\n+                }\n+            });\n+            return result.get();\n+        }\n+        return null;\n+    }\n+\n     private void addSubstitutedProject(PathList.Builder paths, File projectFile) {\n         File mainResourceDirectory = new File(projectFile, MAIN_RESOURCES_OUTPUT);\n         if (mainResourceDirectory.exists()) {\n",
    "test_patch": "diff --git a/integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/acme-nested/build.gradle.kts b/integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/acme-nested/build.gradle.kts\nnew file mode 100644\nindex 0000000000000..ef631aefd8953\n--- /dev/null\n+++ b/integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/acme-nested/build.gradle.kts\n@@ -0,0 +1,48 @@\n+plugins {\n+    kotlin(\"jvm\")\n+    kotlin(\"plugin.allopen\")\n+    id(\"io.quarkus\")\n+}\n+\n+repositories {\n+    mavenLocal {\n+        content {\n+            includeGroupByRegex(\"io.quarkus.*\")\n+            includeGroup(\"org.hibernate.orm\")\n+        }\n+    }\n+    mavenCentral()\n+}\n+\n+val quarkusPlatformGroupId: String by project\n+val quarkusPlatformArtifactId: String by project\n+val quarkusPlatformVersion: String by project\n+\n+dependencies {\n+    implementation(enforcedPlatform(\"${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}\"))\n+    implementation(\"io.quarkus:quarkus-kotlin\")\n+    implementation(\"org.jetbrains.kotlin:kotlin-stdlib-jdk8\")\n+    implementation(\"io.quarkus:quarkus-arc\")\n+    implementation(\"io.quarkus:quarkus-rest\")\n+    testImplementation(\"io.quarkus:quarkus-junit5\")\n+    testImplementation(\"io.rest-assured:rest-assured\")\n+}\n+\n+group = \"org.acme\"\n+version = \"1.0-SNAPSHOT\"\n+\n+tasks.withType<Test> {\n+    systemProperty(\"java.util.logging.manager\", \"org.jboss.logmanager.LogManager\")\n+}\n+allOpen {\n+    annotation(\"jakarta.ws.rs.Path\")\n+    annotation(\"jakarta.enterprise.context.ApplicationScoped\")\n+    annotation(\"jakarta.persistence.Entity\")\n+    annotation(\"io.quarkus.test.junit.QuarkusTest\")\n+}\n+\n+kotlin {\n+    compilerOptions {\n+        javaParameters = true\n+    }\n+}\n\ndiff --git a/integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/acme-nested/gradle.properties b/integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/acme-nested/gradle.properties\nnew file mode 100644\nindex 0000000000000..4331e225c27d7\n--- /dev/null\n+++ b/integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/acme-nested/gradle.properties\n@@ -0,0 +1,8 @@\n+#Quarkus Gradle TS\n+#Tue May 06 21:17:59 CEST 2025\n+kotlinVersion=${kotlin.version}\n+quarkusPluginVersion=${project.version}\n+quarkusPlatformArtifactId=quarkus-bom\n+quarkusPluginId=io.quarkus\n+quarkusPlatformGroupId=io.quarkus\n+quarkusPlatformVersion=${project.version}\n\ndiff --git a/integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/acme-nested/settings.gradle.kts b/integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/acme-nested/settings.gradle.kts\nnew file mode 100644\nindex 0000000000000..49f2e028d78f6\n--- /dev/null\n+++ b/integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/acme-nested/settings.gradle.kts\n@@ -0,0 +1,20 @@\n+pluginManagement {\n+    val quarkusPluginVersion: String by settings\n+    val quarkusPluginId: String by settings\n+    val kotlinVersion: String by settings\n+    repositories {\n+        mavenLocal {\n+            content {\n+                includeGroupByRegex(\"io.quarkus.*\")\n+                includeGroup(\"org.hibernate.orm\")\n+            }\n+        }\n+        mavenCentral()\n+        gradlePluginPortal()\n+    }\n+    plugins {\n+        id(quarkusPluginId) version quarkusPluginVersion\n+        kotlin(\"jvm\") version kotlinVersion\n+        kotlin(\"plugin.allopen\") version kotlinVersion\n+    }\n+}\n\ndiff --git a/integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/acme-nested/src/main/kotlin/org/example/SomeBean.kt b/integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/acme-nested/src/main/kotlin/org/example/SomeBean.kt\nnew file mode 100644\nindex 0000000000000..649785f538d6a\n--- /dev/null\n+++ b/integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/acme-nested/src/main/kotlin/org/example/SomeBean.kt\n@@ -0,0 +1,9 @@\n+package org.example\n+\n+import jakarta.enterprise.context.ApplicationScoped\n+\n+@ApplicationScoped\n+class SomeBean {\n+\n+    fun someMethod() = \"Hello from SomeBean!\"\n+}\n\\ No newline at end of file\n\ndiff --git a/integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/acme-nested/src/main/kotlin/org/example/SomeDataClass.kt b/integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/acme-nested/src/main/kotlin/org/example/SomeDataClass.kt\nnew file mode 100644\nindex 0000000000000..15adbe253ca84\n--- /dev/null\n+++ b/integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/acme-nested/src/main/kotlin/org/example/SomeDataClass.kt\n@@ -0,0 +1,3 @@\n+package org.example\n+\n+data class SomeDataClass(val someField: String)\n\ndiff --git a/integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/acme-nested/src/main/resources/META-INF/beans.xml b/integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/acme-nested/src/main/resources/META-INF/beans.xml\nnew file mode 100644\nindex 0000000000000..9781a5a6b9122\n--- /dev/null\n+++ b/integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/acme-nested/src/main/resources/META-INF/beans.xml\n@@ -0,0 +1,6 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_2_0.xsd\"\n+       bean-discovery-mode=\"annotated\">\n+</beans>\n\\ No newline at end of file\n\ndiff --git a/integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/build.gradle.kts b/integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/build.gradle.kts\nnew file mode 100644\nindex 0000000000000..05c07362a75ae\n--- /dev/null\n+++ b/integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/build.gradle.kts\n@@ -0,0 +1,22 @@\n+plugins {\n+    kotlin(\"jvm\")\n+}\n+\n+repositories {\n+    mavenLocal {\n+        content {\n+            includeGroupByRegex(\"io.quarkus.*\")\n+            includeGroup(\"org.hibernate.orm\")\n+        }\n+    }\n+    mavenCentral()\n+}\n+\n+group = \"org.acme\"\n+version = \"1.0-SNAPSHOT\"\n+\n+kotlin {\n+    compilerOptions {\n+        javaParameters = true\n+    }\n+}\n\ndiff --git a/integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/gradle.properties b/integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/gradle.properties\nnew file mode 100644\nindex 0000000000000..be609b76c9c45\n--- /dev/null\n+++ b/integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/gradle.properties\n@@ -0,0 +1,8 @@\n+#Quarkus Gradle TS\n+#Tue May 06 21:43:16 CEST 2025\n+kotlinVersion=${kotlin.version}\n+quarkusPluginVersion=${project.version}\n+quarkusPlatformArtifactId=quarkus-bom\n+quarkusPluginId=io.quarkus\n+quarkusPlatformGroupId=io.quarkus\n+quarkusPlatformVersion=${project.version}\n\ndiff --git a/integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/settings.gradle.kts b/integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/settings.gradle.kts\nnew file mode 100644\nindex 0000000000000..54cabd36d4820\n--- /dev/null\n+++ b/integration-tests/gradle/src/main/resources/included-kotlin-build/acme-subproject-nested/settings.gradle.kts\n@@ -0,0 +1,24 @@\n+pluginManagement {\n+    val quarkusPluginVersion: String by settings\n+    val quarkusPluginId: String by settings\n+    val kotlinVersion: String by settings\n+    repositories {\n+        mavenLocal {\n+            content {\n+                includeGroupByRegex(\"io.quarkus.*\")\n+                includeGroup(\"org.hibernate.orm\")\n+            }\n+        }\n+        mavenCentral()\n+        gradlePluginPortal()\n+    }\n+    plugins {\n+        id(quarkusPluginId) version quarkusPluginVersion\n+        kotlin(\"jvm\") version kotlinVersion\n+        kotlin(\"plugin.allopen\") version kotlinVersion\n+    }\n+}\n+\n+rootProject.name = \"acme-subproject-nested\"\n+\n+include(\"acme-nested\")\n\\ No newline at end of file\n\ndiff --git a/integration-tests/gradle/src/main/resources/included-kotlin-build/build.gradle.kts b/integration-tests/gradle/src/main/resources/included-kotlin-build/build.gradle.kts\nnew file mode 100644\nindex 0000000000000..09e73af5633a3\n--- /dev/null\n+++ b/integration-tests/gradle/src/main/resources/included-kotlin-build/build.gradle.kts\n@@ -0,0 +1,51 @@\n+plugins {\n+    kotlin(\"jvm\")\n+    kotlin(\"plugin.allopen\")\n+    id(\"io.quarkus\")\n+}\n+\n+repositories {\n+    mavenLocal {\n+        content {\n+            includeGroupByRegex(\"io.quarkus.*\")\n+            includeGroup(\"org.hibernate.orm\")\n+        }\n+    }\n+    mavenCentral()\n+}\n+\n+val quarkusPlatformGroupId: String by project\n+val quarkusPlatformArtifactId: String by project\n+val quarkusPlatformVersion: String by project\n+\n+dependencies {\n+    implementation(\"org.acme:acme-nested\")\n+\n+\n+    implementation(enforcedPlatform(\"${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}\"))\n+    implementation(\"io.quarkus:quarkus-kotlin\")\n+    implementation(\"org.jetbrains.kotlin:kotlin-stdlib-jdk8\")\n+    implementation(\"io.quarkus:quarkus-arc\")\n+    implementation(\"io.quarkus:quarkus-rest\")\n+    testImplementation(\"io.quarkus:quarkus-junit5\")\n+    testImplementation(\"io.rest-assured:rest-assured\")\n+}\n+\n+group = \"org.acme\"\n+version = \"1.0-SNAPSHOT\"\n+\n+tasks.withType<Test> {\n+    systemProperty(\"java.util.logging.manager\", \"org.jboss.logmanager.LogManager\")\n+}\n+allOpen {\n+    annotation(\"jakarta.ws.rs.Path\")\n+    annotation(\"jakarta.enterprise.context.ApplicationScoped\")\n+    annotation(\"jakarta.persistence.Entity\")\n+    annotation(\"io.quarkus.test.junit.QuarkusTest\")\n+}\n+\n+kotlin {\n+    compilerOptions {\n+        javaParameters = true\n+    }\n+}\n\ndiff --git a/integration-tests/gradle/src/main/resources/included-kotlin-build/gradle.properties b/integration-tests/gradle/src/main/resources/included-kotlin-build/gradle.properties\nnew file mode 100644\nindex 0000000000000..909cb5245ea65\n--- /dev/null\n+++ b/integration-tests/gradle/src/main/resources/included-kotlin-build/gradle.properties\n@@ -0,0 +1,5 @@\n+# Gradle properties\n+quarkusPluginId=io.quarkus\n+quarkusPlatformGroupId=io.quarkus\n+quarkusPlatformArtifactId=quarkus-bom\n+kotlinVersion=${kotlin.version}\n\\ No newline at end of file\n\ndiff --git a/integration-tests/gradle/src/main/resources/included-kotlin-build/settings.gradle.kts b/integration-tests/gradle/src/main/resources/included-kotlin-build/settings.gradle.kts\nnew file mode 100644\nindex 0000000000000..f41dfc0917ddc\n--- /dev/null\n+++ b/integration-tests/gradle/src/main/resources/included-kotlin-build/settings.gradle.kts\n@@ -0,0 +1,23 @@\n+pluginManagement {\n+    val quarkusPluginVersion: String by settings\n+    val quarkusPluginId: String by settings\n+    val kotlinVersion: String by settings\n+    repositories {\n+        mavenLocal {\n+            content {\n+                includeGroupByRegex(\"io.quarkus.*\")\n+                includeGroup(\"org.hibernate.orm\")\n+            }\n+        }\n+        mavenCentral()\n+        gradlePluginPortal()\n+    }\n+    plugins {\n+        id(quarkusPluginId) version quarkusPluginVersion\n+        kotlin(\"jvm\") version kotlinVersion\n+        kotlin(\"plugin.allopen\") version kotlinVersion\n+    }\n+}\n+rootProject.name = \"acme-root-kotlin\"\n+\n+includeBuild(\"acme-subproject-nested\")\n\ndiff --git a/integration-tests/gradle/src/main/resources/included-kotlin-build/src/main/kotlin/org/example/ExampleResource.kt b/integration-tests/gradle/src/main/resources/included-kotlin-build/src/main/kotlin/org/example/ExampleResource.kt\nnew file mode 100644\nindex 0000000000000..4ab25a3e01f91\n--- /dev/null\n+++ b/integration-tests/gradle/src/main/resources/included-kotlin-build/src/main/kotlin/org/example/ExampleResource.kt\n@@ -0,0 +1,14 @@\n+package org.example\n+\n+import jakarta.ws.rs.GET\n+import jakarta.ws.rs.Path\n+import jakarta.ws.rs.Produces\n+import jakarta.ws.rs.core.MediaType\n+\n+@Path(\"/hello\")\n+class ExampleResource(val someBean: SomeBean) {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    fun hello() = someBean.someMethod()\n+}\n\\ No newline at end of file\n\ndiff --git a/integration-tests/gradle/src/test/java/io/quarkus/gradle/devmode/IncludedKotlinBuildDevModeTest.java b/integration-tests/gradle/src/test/java/io/quarkus/gradle/devmode/IncludedKotlinBuildDevModeTest.java\nnew file mode 100644\nindex 0000000000000..8ccc7a3da2dc1\n--- /dev/null\n+++ b/integration-tests/gradle/src/test/java/io/quarkus/gradle/devmode/IncludedKotlinBuildDevModeTest.java\n@@ -0,0 +1,23 @@\n+package io.quarkus.gradle.devmode;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Map;\n+\n+public class IncludedKotlinBuildDevModeTest extends QuarkusDevGradleTestBase {\n+\n+    @Override\n+    protected String projectDirectoryName() {\n+        return \"included-kotlin-build\";\n+    }\n+\n+    @Override\n+    protected void testDevMode() throws Exception {\n+        assertThat(getHttpResponse(\"/hello\")).contains(\"Hello from SomeBean!\");\n+\n+        replace(\"acme-subproject-nested/acme-nested/src/main/kotlin/org/example/SomeBean.kt\",\n+                Map.of(\"Hello from SomeBean!\", \"Bye!\"));\n+\n+        assertUpdatedResponseContains(\"/hello\", \"Bye!\");\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47719",
    "pr_id": 47719,
    "issue_id": 47689,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Reflection-free serializer is generated also for pojos annotated with `@JsonValue`\n### Describe the bug\n\nA reflection-free serializer is generated for classes annotated with `@JsonValue` but the usage of this annotation is like using a custom serializer so for that classes the reflection-free serialized should be avoided.\n\n### Expected behavior\n\nThe standard [`JsonValueSerializer`](https://fasterxml.github.io/jackson-databind/javadoc/2.8/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.html) should be used instead of a reflection-free one.\n\n### Actual behavior\n\nA reflection-free serializer is created instead of using the standard Jackson serializer.\n\n### How to Reproduce?\n\nhttps://github.com/luca-bassoricci/reflection-free-serializer-issue\nJust run tests\n\n### Output of `uname -a` or `ver`\n\nwindows 11\n\n### Output of `java -version`\n\njdk21\n\n### Quarkus version or git rev\n\n3.22.1\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\nTo avoid reflection a reflection-free serializer tha calls `@JsonValue` annotated method should be created:\n```\npublic class ItemId$quarkusjacksonserializer extends StdSerializer {\n  public ItemId$quarkusjacksonserializer() {\n    super(ItemId.class);\n  }\n  public void serialize(Object var1, JsonGenerator var2, SerializerProvider var3) throws IOException {\n    var2.writeXXX(((ItemId) var1).callJsonValueAnnotatedMethod());\n  }\n```\n",
    "issue_word_count": 187,
    "test_files_count": 5,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonSerializerFactory.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractSimpleJsonTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/ItemId.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonResource.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonWithReflectionFreeSerializersTest.java"
    ],
    "pr_changed_test_files": [
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractSimpleJsonTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/ItemId.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonResource.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonWithReflectionFreeSerializersTest.java"
    ],
    "base_commit": "43be34207bd46a4ee7946dbb1b8d558edcbcd0dd",
    "head_commit": "a60e2734819088cdb7c1cd8afe363d8864631c75",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47719",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47719",
    "dockerfile": "",
    "pr_merged_at": "2025-05-06T17:01:03.000Z",
    "patch": "diff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonSerializerFactory.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonSerializerFactory.java\nindex 8d73e03c5a83a..2fe49a658ee2d 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonSerializerFactory.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonSerializerFactory.java\n@@ -10,13 +10,16 @@\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n \n import org.jboss.jandex.ClassInfo;\n import org.jboss.jandex.FieldInfo;\n import org.jboss.jandex.IndexView;\n import org.jboss.jandex.MethodInfo;\n+import org.jboss.jandex.VoidType;\n \n+import com.fasterxml.jackson.annotation.JsonValue;\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.core.SerializableString;\n import com.fasterxml.jackson.core.io.SerializedString;\n@@ -183,6 +186,7 @@ protected boolean createSerializationMethod(ClassInfo classInfo, ClassCreator cl\n                 \"com.fasterxml.jackson.databind.SerializerProvider\")\n                 .setModifiers(ACC_PUBLIC)\n                 .addException(IOException.class);\n+\n         boolean valid = serializeObject(classInfo, classCreator, beanClassName, serialize);\n         serialize.returnVoid();\n         return valid;\n@@ -190,8 +194,19 @@ protected boolean createSerializationMethod(ClassInfo classInfo, ClassCreator cl\n \n     private boolean serializeObject(ClassInfo classInfo, ClassCreator classCreator, String beanClassName,\n             MethodCreator serialize) {\n+\n+        var jsonValueFieldSpecs = jsonValueFieldSpecs(classInfo);\n+        if (jsonValueFieldSpecs == null) {\n+            return false;\n+        }\n+\n         SerializationContext ctx = new SerializationContext(serialize, beanClassName);\n \n+        if (jsonValueFieldSpecs.isPresent()) {\n+            serializeJsonValue(ctx, serialize, jsonValueFieldSpecs.get());\n+            return true;\n+        }\n+\n         // jsonGenerator.writeStartObject();\n         MethodDescriptor writeStartObject = MethodDescriptor.ofMethod(JSON_GEN_CLASS_NAME, \"writeStartObject\", \"void\");\n         serialize.invokeVirtualMethod(writeStartObject, ctx.jsonGenerator);\n@@ -212,6 +227,26 @@ private boolean serializeObject(ClassInfo classInfo, ClassCreator classCreator,\n         return valid;\n     }\n \n+    private Optional<FieldSpecs> jsonValueFieldSpecs(ClassInfo classInfo) {\n+        var jsonValueMethodFieldSpecs = classInfo.methods().stream()\n+                .filter(mi -> mi.annotation(JsonValue.class) != null)\n+                .filter(this::isJsonValueMethod).findFirst().map(FieldSpecs::new);\n+        var jsonValueFieldFieldSpecs = classInfo.fields().stream()\n+                .filter(f -> f.annotation(JsonValue.class) != null)\n+                .findFirst().map(FieldSpecs::new);\n+\n+        if (jsonValueFieldFieldSpecs.isPresent()) {\n+            return jsonValueMethodFieldSpecs.isPresent() ? null : jsonValueFieldFieldSpecs;\n+        }\n+        return jsonValueMethodFieldSpecs;\n+    }\n+\n+    private void serializeJsonValue(SerializationContext ctx, MethodCreator bytecode, FieldSpecs jsonValueFieldSpecs) {\n+        String typeName = jsonValueFieldSpecs.fieldType.toString();\n+        ResultHandle arg = jsonValueFieldSpecs.toValueReaderHandle(bytecode, ctx.valueHandle);\n+        writeFieldValue(jsonValueFieldSpecs, bytecode, ctx, typeName, arg, null);\n+    }\n+\n     private boolean serializeObjectData(ClassInfo classInfo, ClassCreator classCreator, MethodCreator serialize,\n             SerializationContext ctx, Set<String> serializedFields) {\n         return serializeFields(classInfo, classCreator, serialize, ctx, serializedFields) &&\n@@ -258,6 +293,12 @@ private FieldSpecs fieldSpecsFromMethod(MethodInfo methodInfo) {\n         return !Modifier.isStatic(methodInfo.flags()) && isGetterMethod(methodInfo) ? new FieldSpecs(methodInfo) : null;\n     }\n \n+    private boolean isJsonValueMethod(MethodInfo methodInfo) {\n+        return Modifier.isPublic(methodInfo.flags()) && !Modifier.isStatic(methodInfo.flags())\n+                && methodInfo.parametersCount() == 0\n+                && !methodInfo.returnType().equals(VoidType.VOID);\n+    }\n+\n     private boolean isGetterMethod(MethodInfo methodInfo) {\n         String methodName = methodInfo.name();\n         return Modifier.isPublic(methodInfo.flags()) && !Modifier.isStatic(methodInfo.flags())\n@@ -273,25 +314,36 @@ private void writeField(ClassInfo classInfo, FieldSpecs fieldSpecs, BytecodeCrea\n         bytecode = checkInclude(bytecode, ctx, arg);\n \n         String typeName = fieldSpecs.fieldType.name().toString();\n+        writeFieldValue(fieldSpecs, bytecode, ctx, typeName, arg, pkgName);\n+    }\n+\n+    private void writeFieldValue(FieldSpecs fieldSpecs, BytecodeCreator bytecode, SerializationContext ctx, String typeName,\n+            ResultHandle arg, String pkgName) {\n         String primitiveMethodName = writeMethodForPrimitiveFields(typeName);\n \n         if (primitiveMethodName != null) {\n             BytecodeCreator primitiveBytecode = JacksonSerializationUtils.isBoxedPrimitive(typeName)\n                     ? bytecode.ifNotNull(arg).trueBranch()\n                     : bytecode;\n-            writeFieldName(fieldSpecs, primitiveBytecode, ctx.jsonGenerator, pkgName);\n+\n+            if (pkgName != null) {\n+                writeFieldName(fieldSpecs, primitiveBytecode, ctx.jsonGenerator, pkgName);\n+            }\n+\n             MethodDescriptor primitiveWriter = MethodDescriptor.ofMethod(JSON_GEN_CLASS_NAME, primitiveMethodName, \"void\",\n                     fieldSpecs.writtenType());\n             primitiveBytecode.invokeVirtualMethod(primitiveWriter, ctx.jsonGenerator, arg);\n-            return;\n-        }\n \n-        registerTypeToBeGenerated(fieldSpecs.fieldType, typeName);\n+        } else {\n+            if (pkgName != null) {\n+                registerTypeToBeGenerated(fieldSpecs.fieldType, typeName);\n+                writeFieldName(fieldSpecs, bytecode, ctx.jsonGenerator, pkgName);\n+            }\n \n-        writeFieldName(fieldSpecs, bytecode, ctx.jsonGenerator, pkgName);\n-        MethodDescriptor writeMethod = MethodDescriptor.ofMethod(JSON_GEN_CLASS_NAME, \"writePOJO\",\n-                void.class, Object.class);\n-        bytecode.invokeVirtualMethod(writeMethod, ctx.jsonGenerator, arg);\n+            MethodDescriptor writeMethod = MethodDescriptor.ofMethod(JSON_GEN_CLASS_NAME, \"writePOJO\",\n+                    void.class, Object.class);\n+            bytecode.invokeVirtualMethod(writeMethod, ctx.jsonGenerator, arg);\n+        }\n     }\n \n     private static BytecodeCreator checkInclude(BytecodeCreator bytecode, SerializationContext ctx, ResultHandle arg) {\n",
    "test_patch": "diff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractSimpleJsonTest.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractSimpleJsonTest.java\nindex 8065baddafb44..f497621d7ac46 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractSimpleJsonTest.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractSimpleJsonTest.java\n@@ -796,6 +796,16 @@ public void testItemExtended() {\n                 .body(\"emailExtended\", Matchers.is(emptyOrNullString()));\n     }\n \n+    @Test\n+    void testJsonValue() {\n+        RestAssured.given()\n+                .queryParam(\"value\", 240)\n+                .post(\"/simple/json-value\")\n+                .then()\n+                .statusCode(200)\n+                .body(Matchers.equalTo('\\\"' + new ItemId(240).format() + '\\\"'));\n+    }\n+\n     @Test\n     public void testPojoWithJsonCreator() {\n         RestAssured\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/ItemId.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/ItemId.java\nnew file mode 100644\nindex 0000000000000..97240cdd935db\n--- /dev/null\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/ItemId.java\n@@ -0,0 +1,22 @@\n+package io.quarkus.resteasy.reactive.jackson.deployment.test;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonValue;\n+\n+public class ItemId {\n+    final int value;\n+\n+    @JsonCreator\n+    public ItemId(int value) {\n+        this.value = value;\n+    }\n+\n+    public int getValue() {\n+        return this.value;\n+    }\n+\n+    @JsonValue\n+    public String format() {\n+        return \"ItemId:\" + value;\n+    }\n+}\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonResource.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonResource.java\nindex 76f32ab776d67..d725299ba8744 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonResource.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonResource.java\n@@ -20,6 +20,7 @@\n import jakarta.ws.rs.core.MediaType;\n import jakarta.ws.rs.core.Response;\n \n+import org.jboss.resteasy.reactive.RestQuery;\n import org.jboss.resteasy.reactive.RestResponse;\n import org.jboss.resteasy.reactive.server.ServerExceptionMapper;\n \n@@ -508,6 +509,13 @@ public ItemExtended getItemExtended() {\n         return item;\n     }\n \n+    @POST\n+    @Path(\"/json-value\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public ItemId generate(@RestQuery int value) {\n+        return new ItemId(value);\n+    }\n+\n     @POST\n     @Path(\"/primitive-types-bean\")\n     public PrimitiveTypesBean echoPrimitiveTypesBean(PrimitiveTypesBean bean) {\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonTest.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonTest.java\nindex 9f4c3427e53ef..62e3e27e70697 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonTest.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonTest.java\n@@ -27,7 +27,7 @@ public JavaArchive get() {\n                                     Pond.class, FrogBodyParts.class, FrogBodyParts.BodyPart.class, ContainerDTO.class,\n                                     NestedInterface.class, StateRecord.class, MapWrapper.class, GenericWrapper.class,\n                                     Fruit.class, Price.class, DogRecord.class, ItemExtended.class, Book.class, LombokBook.class,\n-                                    PrimitiveTypesBean.class, PrimitiveTypesRecord.class, TokenResponse.class)\n+                                    PrimitiveTypesBean.class, PrimitiveTypesRecord.class, TokenResponse.class, ItemId.class)\n                             .addAsResource(new StringAsset(\"admin-expression=admin\\n\" +\n                                     \"user-expression=user\\n\" +\n                                     \"birth-date-roles=alice,bob\\n\"), \"application.properties\");\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonWithReflectionFreeSerializersTest.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonWithReflectionFreeSerializersTest.java\nindex b3eb48853c123..b210d8c6babc8 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonWithReflectionFreeSerializersTest.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonWithReflectionFreeSerializersTest.java\n@@ -29,7 +29,7 @@ public JavaArchive get() {\n                                     Pond.class, FrogBodyParts.class, FrogBodyParts.BodyPart.class, ContainerDTO.class,\n                                     NestedInterface.class, StateRecord.class, MapWrapper.class, GenericWrapper.class,\n                                     Fruit.class, Price.class, DogRecord.class, ItemExtended.class, Book.class, LombokBook.class,\n-                                    PrimitiveTypesBean.class, PrimitiveTypesRecord.class, TokenResponse.class)\n+                                    PrimitiveTypesBean.class, PrimitiveTypesRecord.class, TokenResponse.class, ItemId.class)\n                             .addAsResource(new StringAsset(\"admin-expression=admin\\n\" +\n                                     \"user-expression=user\\n\" +\n                                     \"birth-date-roles=alice,bob\\n\" +\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47713",
    "pr_id": 47713,
    "issue_id": 47701,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Unexpected java.util.regex.PatternSyntaxException: Illegal/unsupported escape sequence when use jwt keys\n### Describe the bug\n\nAfter setup jwt token with rsa keys and follow the guide of it (smallrye jwt build).\n[Guide](https://quarkus.io/guides/security-jwt#add-public-key)\nThe instruction of set\n```properties\nmp.jwt.verify.publickey.location=publicKey.pem\n```\nfail, review the error, and add \n```dotenv\nJWT_PUBLIC_LOCATION=classpath:public.pem\nJWT_PRIVATE_LOCATION=classpath:private.pem\n```\nwith `classpath:` prefix. All test and dev run perfect, but when i tried build fail in build native step.\n\n### Expected behavior\n\nBuild successfully. \n\n### Actual behavior\n\n```bash\nThe build process encountered an unexpected error:\n\ncom.oracle.svm.core.util.VMError$HostedError: InternalFeature defined by com.oracle.svm.hosted.ResourcesFeature unexpectedly failed with a(n) java.util.regex.PatternSyntaxException\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.core.util.VMError.shouldNotReachHere(VMError.java:86)\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.FeatureHandler.handleFeatureError(FeatureHandler.java:291)\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.FeatureHandler.forEachFeature(FeatureHandler.java:92)\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.lambda$runPointsToAnalysis$11(NativeImageGenerator.java:786)\n\tat org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.AbstractAnalysisEngine.runAnalysis(AbstractAnalysisEngine.java:181)\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.runPointsToAnalysis(NativeImageGenerator.java:783)\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.doRun(NativeImageGenerator.java:592)\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.run(NativeImageGenerator.java:550)\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.buildImage(NativeImageGeneratorRunner.java:539)\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.build(NativeImageGeneratorRunner.java:721)\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.start(NativeImageGeneratorRunner.java:143)\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.main(NativeImageGeneratorRunner.java:98)\nCaused by: java.util.regex.PatternSyntaxException: Illegal/unsupported escape sequence near index 12\nprivate.pem\\E\n            ^\n\tat java.base/java.util.regex.Pattern.error(Pattern.java:2204)\n\tat java.base/java.util.regex.Pattern.escape(Pattern.java:2785)\n\tat java.base/java.util.regex.Pattern.atom(Pattern.java:2462)\n\tat java.base/java.util.regex.Pattern.sequence(Pattern.java:2386)\n\tat java.base/java.util.regex.Pattern.expr(Pattern.java:2245)\n\tat java.base/java.util.regex.Pattern.compile(Pattern.java:1945)\n\tat java.base/java.util.regex.Pattern.<init>(Pattern.java:1576)\n\tat java.base/java.util.regex.Pattern.compile(Pattern.java:1101)\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.ResourcesFeature.makeResourcePattern(ResourcesFeature.java:371)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)\n\tat java.base/java.util.concurrent.ConcurrentHashMap$KeySpliterator.forEachRemaining(ConcurrentHashMap.java:3573)\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:575)\n\tat java.base/java.util.stream.AbstractPipeline.evaluateToArrayNode(AbstractPipeline.java:260)\n\tat java.base/java.util.stream.ReferencePipeline.toArray(ReferencePipeline.java:616)\n\tat java.base/java.util.stream.ReferencePipeline.toArray(ReferencePipeline.java:622)\n\tat java.base/java.util.stream.ReferencePipeline.toList(ReferencePipeline.java:627)\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.ResourcesFeature.compilePatterns(ResourcesFeature.java:361)\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.ResourcesFeature.duringAnalysis(ResourcesFeature.java:339)\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.lambda$runPointsToAnalysis$10(NativeImageGenerator.java:786)\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.FeatureHandler.forEachFeature(FeatureHandler.java:90)\n\t... 9 more\n\n\n> Task :quarkusBuild FAILED\n```\n\n### How to Reproduce?\n\nRun with gradle in windows and docker desktop.\n```bash\n./gradlew build -Dquarkus.native.enabled=false -Dquarkus.package.jar.enabled=true -Dquarkus.native.container-build=true -Dquarkus.package.jar.type=uber-jar'…\n```\n\nlibs\n```toml\nquarkus-smallrye-jwt = { group = \"io.quarkus\", name = \"quarkus-smallrye-jwt\" }\nquarkus-smallrye-jwt-build = { group = \"io.quarkus\", name = \"quarkus-smallrye-jwt-build\" }\n```\n\napplication.properties\n```properties\nquarkus.native.additional-build-args=--initialize-at-run-time=com.itextpdf.kernel.font.FontUtil\\\\,com.itextpdf.kernel.crypto.OutputStreamAesGcmEncryption\n\n# JWT\n# for .env as long string\n#security.jwt.private=${JWT_PRIVATE} # Quarkus fail to load long strings\n#security.jwt.public=${JWT_PUBLIC} # Quarkus fail to load long strings\n# for docker secrets\n#security.jwt.private.key=${JWT_PRIVATE_KEY}\n#security.jwt.public.key=${JWT_PUBLIC_KEY}\nsecurity.jwt.issuer=${JWT_ISSUER:API_VACUNAS_PANAMA}\n# en segundos...\nsecurity.jwt.expiration-time=${JWT_EXPIRATION_TIME:3600}\nsecurity.jwt.refresh-time=${JWT_REFRESH_TIME:86400}\n\n# jwt\n# References: https://quarkus.io/guides/security-jwt#additional-smallrye-jwt-configuration\nquarkus.smallrye-jwt.enabled=true\n## Para VERIFICAR\n#mp.jwt.verify.publickey=${security.jwt.public} # Quarkus fail to load long strings\nmp.jwt.verify.publickey.location=${JWT_PUBLIC_LOCATION}\nmp.jwt.verify.issuer=${security.jwt.issuer}\n## Para FIRMAR\n#smallrye.jwt.verify.secretkey=${security.jwt.private} # Quarkus fail to load long strings\n# Caused by: java.util.regex.PatternSyntaxException: Illegal/unsupported escape sequence near index 12 private.pem\\R\nsmallrye.jwt.sign.key.location=${JWT_PRIVATE_LOCATION}\nsmallrye.jwt.new-token.issuer=${security.jwt.issuer}\n\nquarkus.native.resources.includes=*.pem\n```\n\n### Output of `uname -a` or `ver`\n\nMicrosoft Windows [Versión 10.0.26100.3775]\n\n### Output of `java -version`\n\nopenjdk 21.0.2 2024-01-16 OpenJDK Runtime Environment GraalVM CE 21.0.2+13.1 (build 21.0.2+13-jvmci-23.1-b30) OpenJDK 64-Bit Server VM GraalVM CE 21.0.2+13.1 (build 21.0.2+13-jvmci-23.1-b30, mixed mode, sharing)\n\n### Mandrel or GraalVM version (if different from Java)\n\n_No response_\n\n### Quarkus version or git rev\n\nquarkus = \"3.21.4\"\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nGradle 8.13 Build time:    2025-02-25 09:22:14 UTC Revision:      073314332697ba45c16c0a0ce1891fa6794179ff  Kotlin:        2.0.21 Groovy:        3.0.22 Ant:           Apache Ant(TM) version 1.10.15 compiled on August 25 2024 Launcher JVM:  21.0.2 (GraalVM Community 21.0.2+13-jvmci-23.1-b30) Daemon JVM:    Compatible with Java 21, GraalVM Community (from gradle/gradle-daemon-jvm.properties) OS:            Windows 11 10.0 amd64\n\n### Additional information\n\nCan I disable native build step?\nPd. Please add support of Liquibase with hibernate reactive or indicate in the Liquibase or Hibernate Reactive guides that they do not work together. Sorry if this is not an issue and it's my problem. \n\n![Image](https://github.com/user-attachments/assets/80f99930-338d-4273-9682-d29dd228aa28)",
    "issue_word_count": 1048,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "extensions/smallrye-jwt-build/deployment/src/main/java/io/quarkus/smallrye/jwt/build/deployment/SmallRyeJwtBuildProcessor.java",
      "extensions/smallrye-jwt/deployment/src/main/java/io/quarkus/smallrye/jwt/deployment/SmallRyeJwtProcessor.java",
      "integration-tests/smallrye-jwt-token-propagation/src/main/resources/application.properties"
    ],
    "pr_changed_test_files": [
      "integration-tests/smallrye-jwt-token-propagation/src/main/resources/application.properties"
    ],
    "base_commit": "cd488f9959209c27695d08a2a43da6feb8485646",
    "head_commit": "c57e5b4b7b581a5402f68a6016b721ff547cc2c6",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47713",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47713",
    "dockerfile": "",
    "pr_merged_at": "2025-05-06T15:07:37.000Z",
    "patch": "diff --git a/extensions/smallrye-jwt-build/deployment/src/main/java/io/quarkus/smallrye/jwt/build/deployment/SmallRyeJwtBuildProcessor.java b/extensions/smallrye-jwt-build/deployment/src/main/java/io/quarkus/smallrye/jwt/build/deployment/SmallRyeJwtBuildProcessor.java\nindex 5c9c2b2d82a31..08f0baa70a4ea 100644\n--- a/extensions/smallrye-jwt-build/deployment/src/main/java/io/quarkus/smallrye/jwt/build/deployment/SmallRyeJwtBuildProcessor.java\n+++ b/extensions/smallrye-jwt-build/deployment/src/main/java/io/quarkus/smallrye/jwt/build/deployment/SmallRyeJwtBuildProcessor.java\n@@ -19,6 +19,7 @@\n class SmallRyeJwtBuildProcessor {\n \n     private static final Logger log = Logger.getLogger(SmallRyeJwtBuildProcessor.class.getName());\n+    private static final String CLASSPATH_SCHEME = \"classpath:\";\n \n     @BuildStep\n     void addClassesForReflection(BuildProducer<ReflectiveClassBuildItem> reflectiveClasses) {\n@@ -45,9 +46,20 @@ private void registerKeyLocationResource(Config config, String propertyName,\n             BuildProducer<NativeImageResourceBuildItem> nativeImageResource) {\n         Optional<String> keyLocation = config.getOptionalValue(propertyName, String.class);\n         if (keyLocation.isPresent() && keyLocation.get().length() > 1\n-                && (keyLocation.get().indexOf(':') < 0 || keyLocation.get().startsWith(\"classpath:\"))) {\n+                && (keyLocation.get().indexOf(':') < 0 || (keyLocation.get().startsWith(CLASSPATH_SCHEME)\n+                        && keyLocation.get().length() > CLASSPATH_SCHEME.length()))) {\n             log.infof(\"Adding %s to native image\", keyLocation.get());\n-            String location = keyLocation.get().startsWith(\"/\") ? keyLocation.get().substring(1) : keyLocation.get();\n+\n+            String location = keyLocation.get();\n+\n+            // It can only be `classpath:` at this point\n+            if (location.startsWith(CLASSPATH_SCHEME)) {\n+                location = location.substring(CLASSPATH_SCHEME.length());\n+            }\n+            if (location.startsWith(\"/\")) {\n+                location = location.substring(1);\n+            }\n+\n             nativeImageResource.produce(new NativeImageResourceBuildItem(location));\n         }\n     }\n\ndiff --git a/extensions/smallrye-jwt/deployment/src/main/java/io/quarkus/smallrye/jwt/deployment/SmallRyeJwtProcessor.java b/extensions/smallrye-jwt/deployment/src/main/java/io/quarkus/smallrye/jwt/deployment/SmallRyeJwtProcessor.java\nindex 609cf9eeee62a..36c60097bc79b 100644\n--- a/extensions/smallrye-jwt/deployment/src/main/java/io/quarkus/smallrye/jwt/deployment/SmallRyeJwtProcessor.java\n+++ b/extensions/smallrye-jwt/deployment/src/main/java/io/quarkus/smallrye/jwt/deployment/SmallRyeJwtProcessor.java\n@@ -64,6 +64,8 @@ class SmallRyeJwtProcessor {\n \n     private static final Logger log = Logger.getLogger(SmallRyeJwtProcessor.class.getName());\n \n+    private static final String CLASSPATH_SCHEME = \"classpath:\";\n+\n     static final String MP_JWT_VERIFY_KEY_LOCATION = \"mp.jwt.verify.publickey.location\";\n     private static final String MP_JWT_DECRYPT_KEY_LOCATION = \"mp.jwt.decrypt.key.location\";\n \n@@ -146,9 +148,20 @@ private void registerKeyLocationResource(Config config, String propertyName,\n             BuildProducer<NativeImageResourceBuildItem> nativeImageResource) {\n         Optional<String> keyLocation = config.getOptionalValue(propertyName, String.class);\n         if (keyLocation.isPresent() && keyLocation.get().length() > 1\n-                && (keyLocation.get().indexOf(':') < 0 || keyLocation.get().startsWith(\"classpath:\"))) {\n+                && (keyLocation.get().indexOf(':') < 0 || (keyLocation.get().startsWith(CLASSPATH_SCHEME)\n+                        && keyLocation.get().length() > CLASSPATH_SCHEME.length()))) {\n             log.infof(\"Adding %s to native image\", keyLocation.get());\n-            String location = keyLocation.get().startsWith(\"/\") ? keyLocation.get().substring(1) : keyLocation.get();\n+\n+            String location = keyLocation.get();\n+\n+            // It can only be `classpath:` at this point\n+            if (location.startsWith(CLASSPATH_SCHEME)) {\n+                location = location.substring(CLASSPATH_SCHEME.length());\n+            }\n+            if (location.startsWith(\"/\")) {\n+                location = location.substring(1);\n+            }\n+\n             nativeImageResource.produce(new NativeImageResourceBuildItem(location));\n         }\n     }\n",
    "test_patch": "diff --git a/integration-tests/smallrye-jwt-token-propagation/src/main/resources/application.properties b/integration-tests/smallrye-jwt-token-propagation/src/main/resources/application.properties\nindex f843b520dc74e..a6a06bef9e929 100644\n--- a/integration-tests/smallrye-jwt-token-propagation/src/main/resources/application.properties\n+++ b/integration-tests/smallrye-jwt-token-propagation/src/main/resources/application.properties\n@@ -7,7 +7,7 @@ io.quarkus.it.keycloak.JwtTokenPropagationService/mp-rest/uri=http://localhost:8\n io.quarkus.it.keycloak.AccessTokenPropagationService/mp-rest/uri=http://localhost:8081/protected\n \n quarkus.resteasy-client-oidc-token-propagation.secure-json-web-token=true\n-smallrye.jwt.sign.key.location=/privateKey.pem\n+smallrye.jwt.sign.key.location=classpath:/privateKey.pem\n smallrye.jwt.new-token.issuer=http://frontend-resource\n smallrye.jwt.new-token.audience=http://jwt-resigned-protected-resource\n smallrye.jwt.new-token.override-matching-claims=true\n@@ -22,4 +22,4 @@ quarkus.resteasy-client-oidc-token-propagation.enabled-during-authentication=tru\n \n quarkus.grpc.clients.hello.host=localhost\n quarkus.grpc.clients.hello.port=8081\n-quarkus.grpc.server.use-separate-server=false\n\\ No newline at end of file\n+quarkus.grpc.server.use-separate-server=false\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47668",
    "pr_id": 47668,
    "issue_id": 47630,
    "repo": "quarkusio/quarkus",
    "problem_statement": "OIDC JWT bearer token with empty file crashes the app\n### Describe the bug\n\nFeature from PR https://github.com/quarkusio/quarkus/pull/45131. When I set up token in my app like:\n```\nquarkus.oidc.client-id=quarkus-app\nquarkus.oidc.credentials.jwt.source=bearer\nquarkus.oidc.credentials.jwt.token-path=/tmp/bearer_token\n```\nIf the file `/tmp/bearer_token` is missing, contains valid or invalid token it is OK - it either works or complains for missing/invalid token. But if the file `/tmp/bearer_token` is empty, the app crashes from start with below exception.\n\nThis is really annoying since if I create the file and start the app before the file is populated the app crashes straight away (token does not need to be used).\n```\nFailed to start application: java.lang.RuntimeException: Failed to start quarkus\n\tat io.quarkus.runner.ApplicationImpl.doStart(Unknown Source)\n\tat io.quarkus.runtime.Application.start(Application.java:101)\n\tat io.quarkus.runtime.ApplicationLifecycleManager.run(ApplicationLifecycleManager.java:119)\n\tat io.quarkus.runtime.Quarkus.run(Quarkus.java:80)\n\tat io.quarkus.runtime.Quarkus.run(Quarkus.java:51)\n\tat io.quarkus.runtime.Quarkus.run(Quarkus.java:144)\n\tat io.quarkus.runner.GeneratedMain.main(Unknown Source)\n\tat io.quarkus.bootstrap.runner.QuarkusEntryPoint.doRun(QuarkusEntryPoint.java:68)\n\tat io.quarkus.bootstrap.runner.QuarkusEntryPoint.main(QuarkusEntryPoint.java:36)\nCaused by: io.smallrye.mutiny.CompositeException: Multiple exceptions caught:\n\t[Exception 0] java.util.NoSuchElementException\n\t[Exception 1] io.quarkus.oidc.OIDCException\n\tat io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor.performInnerSubscription(UniOnFailureFlatMap.java:94)\n\tat io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor.dispatch(UniOnFailureFlatMap.java:83)\n\tat io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor.onFailure(UniOnFailureFlatMap.java:60)\n\tat io.smallrye.mutiny.operators.uni.UniOperatorProcessor.onFailure(UniOperatorProcessor.java:55)\n\tat io.smallrye.mutiny.operators.uni.UniOperatorProcessor.onFailure(UniOperatorProcessor.java:55)\n\tat io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor.performInnerSubscription(UniOnItemOrFailureFlatMap.java:91)\n\tat io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor.onItem(UniOnItemOrFailureFlatMap.java:54)\n\tat io.smallrye.mutiny.operators.uni.UniOnItemTransform$UniOnItemTransformProcessor.onItem(UniOnItemTransform.java:43)\n\tat io.smallrye.mutiny.operators.uni.UniOperatorProcessor.onItem(UniOperatorProcessor.java:47)\n\tat io.smallrye.mutiny.operators.uni.UniOperatorProcessor.onItem(UniOperatorProcessor.java:47)\n\tat io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber.onNext(UniCreateFromPublisher.java:70)\n\tat io.smallrye.mutiny.subscription.MultiSubscriberAdapter.onItem(MultiSubscriberAdapter.java:27)\n\tat io.smallrye.mutiny.subscription.MultiSubscriber.onNext(MultiSubscriber.java:61)\n\tat io.smallrye.mutiny.subscription.SerializedSubscriber.onItem(SerializedSubscriber.java:74)\n\tat io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator.onItem(MultiRetryWhenOp.java:111)\n\tat io.smallrye.mutiny.subscription.MultiSubscriber.onNext(MultiSubscriber.java:61)\n\tat io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription.onItem(UniToMultiPublisher.java:94)\n\tat io.smallrye.mutiny.operators.uni.UniOnItemTransform$UniOnItemTransformProcessor.onItem(UniOnItemTransform.java:43)\n\tat io.smallrye.mutiny.vertx.AsyncResultUni.lambda$subscribe$1(AsyncResultUni.java:35)\n\tat io.smallrye.mutiny.vertx.DelegatingHandler.handle(DelegatingHandler.java:25)\n\tat io.vertx.ext.web.client.impl.HttpContext.handleDispatchResponse(HttpContext.java:403)\n\tat io.vertx.ext.web.client.impl.HttpContext.execute(HttpContext.java:385)\n\tat io.vertx.ext.web.client.impl.HttpContext.next(HttpContext.java:363)\n\tat io.vertx.ext.web.client.impl.HttpContext.fire(HttpContext.java:330)\n\tat io.vertx.ext.web.client.impl.HttpContext.dispatchResponse(HttpContext.java:292)\n\tat io.vertx.ext.web.client.impl.HttpContext.lambda$null$6(HttpContext.java:510)\n\tat io.vertx.core.impl.ContextInternal.dispatch(ContextInternal.java:270)\n\tat io.vertx.core.impl.ContextInternal.dispatch(ContextInternal.java:252)\n\tat io.vertx.core.impl.ContextInternal.lambda$runOnContext$0(ContextInternal.java:50)\n\tat io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)\n\tat io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:566)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:840)\n\tSuppressed: io.quarkus.oidc.OIDCException\n\t\tat io.quarkus.oidc.runtime.TenantContextFactory$2.apply(TenantContextFactory.java:135)\n\t\tat io.quarkus.oidc.runtime.TenantContextFactory$2.apply(TenantContextFactory.java:116)\n\t\tat io.smallrye.context.impl.wrappers.SlowContextualFunction.apply(SlowContextualFunction.java:21)\n\t\tat io.smallrye.mutiny.groups.UniOnFailure.lambda$recoverWithItem$8(UniOnFailure.java:190)\n\t\tat io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor.performInnerSubscription(UniOnFailureFlatMap.java:92)\n\t\t... 36 more\n\tCaused by: java.util.NoSuchElementException\n\t\tat java.base/java.util.StringTokenizer.nextToken(StringTokenizer.java:347)\n\t\tat io.quarkus.oidc.common.runtime.OidcCommonUtils.getJwtContentPart(OidcCommonUtils.java:768)\n\t\tat io.quarkus.oidc.common.runtime.OidcCommonUtils.decodeJwtContent(OidcCommonUtils.java:758)\n\t\tat io.quarkus.oidc.common.runtime.ClientAssertionProvider.getExpiresAtFromExpClaim(ClientAssertionProvider.java:98)\n\t\tat io.quarkus.oidc.common.runtime.ClientAssertionProvider.loadFromFileSystem(ClientAssertionProvider.java:78)\n\t\tat io.quarkus.oidc.common.runtime.ClientAssertionProvider.<init>(ClientAssertionProvider.java:32)\n\t\tat io.quarkus.oidc.runtime.OidcProviderClientImpl.createClientAssertionProvider(OidcProviderClientImpl.java:91)\n\t\tat io.quarkus.oidc.runtime.OidcProviderClientImpl.<init>(OidcProviderClientImpl.java:81)\n\t\tat io.quarkus.oidc.runtime.TenantContextFactory$9.apply(TenantContextFactory.java:559)\n\t\tat io.quarkus.oidc.runtime.TenantContextFactory$9.apply(TenantContextFactory.java:526)\n\t\tat io.smallrye.context.impl.wrappers.SlowContextualBiFunction.apply(SlowContextualBiFunction.java:21)\n\t\tat io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor.performInnerSubscription(UniOnItemOrFailureFlatMap.java:86)\n\t\t... 31 more\nCaused by: [CIRCULAR REFERENCE: java.util.NoSuchElementException]\n```\n\n\n### Expected behavior\n\n_No response_\n\n### Actual behavior\n\n_No response_\n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### Quarkus version or git rev\n\n_No response_\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
    "issue_word_count": 908,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "extensions/oidc-common/runtime/src/main/java/io/quarkus/oidc/common/runtime/ClientAssertionProvider.java",
      "extensions/oidc-common/runtime/src/test/java/io/quarkus/oidc/common/runtime/ClientAssertionProviderTest.java"
    ],
    "pr_changed_test_files": [
      "extensions/oidc-common/runtime/src/test/java/io/quarkus/oidc/common/runtime/ClientAssertionProviderTest.java"
    ],
    "base_commit": "08252b64146348df062b7d1532fd1d27a81952a0",
    "head_commit": "6b7dbeade322a93bad2249095ca1a7ce0884201e",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47668",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47668",
    "dockerfile": "",
    "pr_merged_at": "2025-05-05T13:47:26.000Z",
    "patch": "diff --git a/extensions/oidc-common/runtime/src/main/java/io/quarkus/oidc/common/runtime/ClientAssertionProvider.java b/extensions/oidc-common/runtime/src/main/java/io/quarkus/oidc/common/runtime/ClientAssertionProvider.java\nindex f5b8cd0a29d63..916f9e396aa0a 100644\n--- a/extensions/oidc-common/runtime/src/main/java/io/quarkus/oidc/common/runtime/ClientAssertionProvider.java\n+++ b/extensions/oidc-common/runtime/src/main/java/io/quarkus/oidc/common/runtime/ClientAssertionProvider.java\n@@ -75,6 +75,11 @@ private ClientAssertion loadFromFileSystem() {\n         if (Files.exists(bearerTokenPath)) {\n             try {\n                 String bearerToken = Files.readString(bearerTokenPath).trim();\n+                if (bearerToken.isEmpty()) {\n+                    LOG.error(String.format(\"Bearer token file at path %s is empty or contains only whitespace\",\n+                            bearerTokenPath));\n+                    return null;\n+                }\n                 Long expiresAt = getExpiresAtFromExpClaim(bearerToken);\n                 if (expiresAt != null) {\n                     return new ClientAssertion(bearerToken, expiresAt, scheduleRefresh(expiresAt));\n",
    "test_patch": "diff --git a/extensions/oidc-common/runtime/src/test/java/io/quarkus/oidc/common/runtime/ClientAssertionProviderTest.java b/extensions/oidc-common/runtime/src/test/java/io/quarkus/oidc/common/runtime/ClientAssertionProviderTest.java\nindex 6c340226da6e0..e4cbd8c379427 100644\n--- a/extensions/oidc-common/runtime/src/test/java/io/quarkus/oidc/common/runtime/ClientAssertionProviderTest.java\n+++ b/extensions/oidc-common/runtime/src/test/java/io/quarkus/oidc/common/runtime/ClientAssertionProviderTest.java\n@@ -4,6 +4,7 @@\n import static java.nio.file.StandardOpenOption.TRUNCATE_EXISTING;\n import static java.nio.file.StandardOpenOption.WRITE;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n \n import java.io.IOException;\n import java.nio.file.Files;\n@@ -40,6 +41,25 @@ public void testJwtBearerTokenRefresh() {\n         }\n     }\n \n+    @Test\n+    public void EmptyBearerTokenFileShouldReturnNullClientAssertion() {\n+        Vertx vertx = Vertx.vertx();\n+        Path emptyTokenPath = Path.of(\"target\").resolve(\"empty-jwt-bearer-token.json\");\n+\n+        storeNewJwtBearerToken(emptyTokenPath, \"\");\n+        try (var clientAssertionProvider = new ClientAssertionProvider(vertx, emptyTokenPath)) {\n+            assertNull(clientAssertionProvider.getClientAssertion());\n+\n+            String validToken = createJwtBearerToken();\n+            storeNewJwtBearerToken(emptyTokenPath, validToken);\n+\n+            Awaitility.await().atMost(Duration.ofSeconds(10))\n+                    .untilAsserted(() -> assertEquals(validToken, clientAssertionProvider.getClientAssertion()));\n+        } finally {\n+            vertx.close().toCompletionStage().toCompletableFuture().join();\n+        }\n+    }\n+\n     private static void storeNewJwtBearerToken(Path jwtBearerTokenPath, String jwtBearerToken) {\n         try {\n             Files.writeString(jwtBearerTokenPath, jwtBearerToken, TRUNCATE_EXISTING, CREATE, WRITE);\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47662",
    "pr_id": 47662,
    "issue_id": 47652,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Error generating serializers for reflection-free-serializers\n### Describe the bug\n\nClass:\n```\ndata class TokenResponse(\n    @JsonProperty(\"access_token\") val accessToken: String?,\n    @JsonProperty(\"expires_in\") val expiresIn: Int?,\n    @JsonProperty(\"refresh_token\") val refreshToken: String?,\n    @JsonProperty(\"refresh_expires_in\") val refreshExpiresIn: Int?,\n    @JsonProperty(\"token_type\") val tokenType: String?,\n)\n```\n@JsonProperty is not used\n\n### Expected behavior\n\n```\n{\n    \"access_token\": \"eyJ...,\n    \"expires_in\": 2400,\n    \"refresh_token\": \"eyJ...\",\n    \"refresh_expires_in\": 3600,\n    \"token_type\": \"Bearer\"\n}\n```\n\n### Actual behavior\n\n```\n{\n    \"accessToken\": \"eyJh...\",\n    \"expiresIn\": 2400,\n    \"refreshExpiresIn\": 3600,\n    \"refreshToken\": \"eyJ...\",\n    \"tokenType\": \"Bearer\"\n}\n```\n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\njava 24\n\n### Quarkus version or git rev\n\n3.22.1\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\ngralde 8.13\n\n### Additional information\n\n_No response_",
    "issue_word_count": 111,
    "test_files_count": 5,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonCodeGenerator.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonDeserializerFactory.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonSerializerFactory.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractSimpleJsonTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonResource.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonWithReflectionFreeSerializersTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/TokenResponse.java"
    ],
    "pr_changed_test_files": [
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractSimpleJsonTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonResource.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonWithReflectionFreeSerializersTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/TokenResponse.java"
    ],
    "base_commit": "4c0d835539f2c2d7514727e9a2fbb26aadce3637",
    "head_commit": "836c57862f57e4ecb81bbfb6aa66230bff073c2d",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47662",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47662",
    "dockerfile": "",
    "pr_merged_at": "2025-05-02T12:53:22.000Z",
    "patch": "diff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonCodeGenerator.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonCodeGenerator.java\nindex 53b1c494efde6..019b547d25688 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonCodeGenerator.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonCodeGenerator.java\n@@ -230,13 +230,30 @@ private MethodInfo getterMethodInfo(ClassInfo classInfo, FieldInfo fieldInfo) {\n         return findMethod(classInfo, methodName);\n     }\n \n-    protected FieldSpecs fieldSpecsFromField(ClassInfo classInfo, FieldInfo fieldInfo) {\n+    protected Optional<MethodInfo> findConstructor(ClassInfo classInfo) {\n+        Optional<MethodInfo> ctorOpt = classInfo.constructors().stream()\n+                .filter(ctor -> Modifier.isPublic(ctor.flags()) && ctor.hasAnnotation(JsonCreator.class))\n+                .findFirst();\n+\n+        if (ctorOpt.isEmpty()) {\n+            if (classInfo.hasNoArgsConstructor() && !classInfo.isRecord()) {\n+                return classInfo.constructors().stream()\n+                        .filter(ctor -> ctor.parametersCount() == 0)\n+                        .findFirst();\n+            }\n+            ctorOpt = classInfo.isRecord() ? Optional.of(classInfo.canonicalRecordConstructor())\n+                    : classInfo.constructors().stream().filter(ctor -> Modifier.isPublic(ctor.flags())).findFirst();\n+        }\n+        return ctorOpt;\n+    }\n+\n+    protected FieldSpecs fieldSpecsFromField(ClassInfo classInfo, MethodInfo constructor, FieldInfo fieldInfo) {\n         if (Modifier.isStatic(fieldInfo.flags())) {\n             return null;\n         }\n         MethodInfo getterMethodInfo = getterMethodInfo(classInfo, fieldInfo);\n         if (getterMethodInfo != null) {\n-            return new FieldSpecs(fieldInfo, getterMethodInfo);\n+            return new FieldSpecs(constructor, fieldInfo, getterMethodInfo);\n         }\n         if (Modifier.isPublic(fieldInfo.flags())) {\n             return new FieldSpecs(fieldInfo);\n@@ -260,14 +277,14 @@ protected static class FieldSpecs {\n         FieldInfo fieldInfo;\n \n         FieldSpecs(FieldInfo fieldInfo) {\n-            this(fieldInfo, null);\n+            this(null, fieldInfo, null);\n         }\n \n         FieldSpecs(MethodInfo methodInfo) {\n-            this(null, methodInfo);\n+            this(null, null, methodInfo);\n         }\n \n-        FieldSpecs(FieldInfo fieldInfo, MethodInfo methodInfo) {\n+        FieldSpecs(MethodInfo constructor, FieldInfo fieldInfo, MethodInfo methodInfo) {\n             if (fieldInfo != null) {\n                 this.fieldInfo = fieldInfo;\n                 readAnnotations(fieldInfo);\n@@ -278,14 +295,14 @@ protected static class FieldSpecs {\n             }\n             this.fieldType = fieldType();\n             this.fieldName = fieldName();\n-            this.jsonName = jsonName();\n+            this.jsonName = jsonName(constructor);\n         }\n \n         FieldSpecs(MethodParameterInfo paramInfo) {\n             readAnnotations(paramInfo);\n             this.fieldType = paramInfo.type();\n             this.fieldName = paramInfo.name();\n-            this.jsonName = jsonName();\n+            this.jsonName = jsonName(null);\n         }\n \n         private void readAnnotations(AnnotationTarget target) {\n@@ -306,8 +323,15 @@ private Type fieldType() {\n             return methodInfo.returnType();\n         }\n \n-        private String jsonName() {\n+        private String jsonName(MethodInfo constructor) {\n             AnnotationInstance jsonProperty = annotations.get(JsonProperty.class.getName());\n+            if (jsonProperty == null && constructor != null) {\n+                jsonProperty = constructor.parameters().stream()\n+                        .filter(parameter -> parameter.name().equals(fieldName)).findFirst()\n+                        .map(parameter -> parameter.annotation(JsonProperty.class.getName()))\n+                        .orElse(null);\n+            }\n+\n             if (jsonProperty != null) {\n                 AnnotationValue value = jsonProperty.value();\n                 if (value != null && !value.asString().isEmpty()) {\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonDeserializerFactory.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonDeserializerFactory.java\nindex b893bebedbcc7..8b94c0c4b8e7b 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonDeserializerFactory.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonDeserializerFactory.java\n@@ -25,7 +25,6 @@\n import org.jboss.jandex.TypeVariable;\n import org.jboss.jandex.VoidType;\n \n-import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.core.JacksonException;\n import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.core.ObjectCodec;\n@@ -219,9 +218,19 @@ protected boolean createSerializationMethod(ClassInfo classInfo, ClassCreator cl\n                 .addException(IOException.class)\n                 .addException(JacksonException.class);\n \n-        DeserializationData deserData = new DeserializationData(classInfo, classCreator, deserialize,\n+        Optional<MethodInfo> ctorOpt = findConstructor(classInfo);\n+        if (ctorOpt.isEmpty()) {\n+            return false;\n+        }\n+\n+        MethodInfo ctor = ctorOpt.get();\n+        DeserializationData deserData = new DeserializationData(classInfo, ctor, classCreator, deserialize,\n                 getJsonNode(deserialize), parseTypeParameters(classInfo, classCreator), new HashSet<>());\n-        ResultHandle deserializedHandle = createDeserializedObject(deserData);\n+\n+        ResultHandle deserializedHandle = ctor.parametersCount() == 0\n+                ? deserData.methodCreator.newInstance(MethodDescriptor.ofConstructor(deserData.classInfo.name().toString()))\n+                : createDeserializedObject(deserData);\n+\n         if (deserializedHandle == null) {\n             return false;\n         }\n@@ -242,26 +251,9 @@ private static ResultHandle getJsonNode(MethodCreator deserialize) {\n     }\n \n     private ResultHandle createDeserializedObject(DeserializationData deserData) {\n-        var ctorOpt = deserData.classInfo.constructors().stream()\n-                .filter(ctor -> Modifier.isPublic(ctor.flags()) && ctor.hasAnnotation(JsonCreator.class))\n-                .findFirst();\n-\n-        if (ctorOpt.isEmpty()) {\n-            if (deserData.classInfo.hasNoArgsConstructor() && !deserData.classInfo.isRecord()) {\n-                return deserData.methodCreator\n-                        .newInstance(MethodDescriptor.ofConstructor(deserData.classInfo.name().toString()));\n-            }\n-            ctorOpt = deserData.classInfo.isRecord() ? Optional.of(deserData.classInfo.canonicalRecordConstructor())\n-                    : deserData.classInfo.constructors().stream().filter(ctor -> Modifier.isPublic(ctor.flags())).findFirst();\n-            if (ctorOpt.isEmpty()) {\n-                return null;\n-            }\n-        }\n-\n-        MethodInfo ctor = ctorOpt.get();\n-        ResultHandle[] params = new ResultHandle[ctor.parameters().size()];\n+        ResultHandle[] params = new ResultHandle[deserData.constructor.parameters().size()];\n         int i = 0;\n-        for (MethodParameterInfo paramInfo : ctor.parameters()) {\n+        for (MethodParameterInfo paramInfo : deserData.constructor.parameters()) {\n             FieldSpecs fieldSpecs = fieldSpecsFromFieldParam(paramInfo);\n             deserData.constructorFields.add(fieldSpecs.jsonName);\n             ResultHandle fieldValue = deserData.methodCreator.invokeVirtualMethod(\n@@ -271,7 +263,7 @@ private ResultHandle createDeserializedObject(DeserializationData deserData) {\n             params[i++] = readValueFromJson(deserData.classCreator, deserData.methodCreator,\n                     deserData.methodCreator.getMethodParam(1), fieldSpecs, deserData.typeParametersIndex, fieldValue);\n         }\n-        return deserData.methodCreator.newInstance(ctor, params);\n+        return deserData.methodCreator.newInstance(deserData.constructor, params);\n     }\n \n     private boolean deserializeObjectFields(DeserializationData deserData, ResultHandle objHandle) {\n@@ -344,7 +336,8 @@ private boolean deserializeFields(DeserializationData deserData, ResultHandle de\n \n         for (FieldInfo fieldInfo : classFields(deserData.classInfo)) {\n             if (!deserializeFieldSpecs(deserData, deserializationContext, objHandle, fieldValue,\n-                    deserializedFields, strSwitch, fieldSpecsFromField(deserData.classInfo, fieldInfo), valid))\n+                    deserializedFields, strSwitch, fieldSpecsFromField(deserData.classInfo, deserData.constructor, fieldInfo),\n+                    valid))\n                 return false;\n         }\n \n@@ -529,7 +522,8 @@ protected boolean shouldGenerateCodeFor(ClassInfo classInfo) {\n         return super.shouldGenerateCodeFor(classInfo) && classInfo.hasNoArgsConstructor();\n     }\n \n-    private record DeserializationData(ClassInfo classInfo, ClassCreator classCreator, MethodCreator methodCreator,\n+    private record DeserializationData(ClassInfo classInfo, MethodInfo constructor, ClassCreator classCreator,\n+            MethodCreator methodCreator,\n             ResultHandle jsonNode, Map<String, Integer> typeParametersIndex, Set<String> constructorFields) {\n     }\n }\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonSerializerFactory.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonSerializerFactory.java\nindex 9453c51f45375..8d73e03c5a83a 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonSerializerFactory.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonSerializerFactory.java\n@@ -220,8 +220,10 @@ private boolean serializeObjectData(ClassInfo classInfo, ClassCreator classCreat\n \n     private boolean serializeFields(ClassInfo classInfo, ClassCreator classCreator, MethodCreator serialize,\n             SerializationContext ctx, Set<String> serializedFields) {\n+        MethodInfo constructor = findConstructor(classInfo).orElse(null);\n+\n         for (FieldInfo fieldInfo : classFields(classInfo)) {\n-            FieldSpecs fieldSpecs = fieldSpecsFromField(classInfo, fieldInfo);\n+            FieldSpecs fieldSpecs = fieldSpecsFromField(classInfo, constructor, fieldInfo);\n             if (fieldSpecs != null && serializedFields.add(fieldSpecs.jsonName)) {\n                 if (fieldSpecs.isIgnoredField()) {\n                     continue;\n",
    "test_patch": "diff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractSimpleJsonTest.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractSimpleJsonTest.java\nindex 12fdbd9636588..8065baddafb44 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractSimpleJsonTest.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractSimpleJsonTest.java\n@@ -742,6 +742,22 @@ public void testRecordWithEmptyConstructorEcho() {\n                 .body(\"age\", Matchers.is(5));\n     }\n \n+    @Test\n+    public void testKotlinDataEcho() {\n+        RestAssured\n+                .with()\n+                .body(\"{\\\"access_token\\\":\\\"ABC\\\",\\\"expires_in\\\":3600}\")\n+                .contentType(\"application/json; charset=utf-8\")\n+                .post(\"/simple/kotlin-data-echo\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .body(\"access_token\", Matchers.is(\"ABC\"))\n+                .body(\"expires_in\", Matchers.is(3600))\n+                .extract()\n+                .asString();\n+    }\n+\n     @Test\n     public void testNullMapEcho() {\n         RestAssured\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonResource.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonResource.java\nindex 5d1d9553ba5a4..76f32ab776d67 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonResource.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonResource.java\n@@ -137,6 +137,13 @@ public DogRecord emptyCtorEchoRecord(DogRecord dogRecord) {\n         return dogRecord;\n     }\n \n+    @POST\n+    @Path(\"/kotlin-data-echo\")\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    public TokenResponse echoKotlinData(TokenResponse tokenResponse) {\n+        return tokenResponse;\n+    }\n+\n     @POST\n     @Path(\"/null-map-echo\")\n     @Consumes(MediaType.APPLICATION_JSON)\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonTest.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonTest.java\nindex 9eae5fadc780f..9f4c3427e53ef 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonTest.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonTest.java\n@@ -27,7 +27,7 @@ public JavaArchive get() {\n                                     Pond.class, FrogBodyParts.class, FrogBodyParts.BodyPart.class, ContainerDTO.class,\n                                     NestedInterface.class, StateRecord.class, MapWrapper.class, GenericWrapper.class,\n                                     Fruit.class, Price.class, DogRecord.class, ItemExtended.class, Book.class, LombokBook.class,\n-                                    PrimitiveTypesBean.class, PrimitiveTypesRecord.class)\n+                                    PrimitiveTypesBean.class, PrimitiveTypesRecord.class, TokenResponse.class)\n                             .addAsResource(new StringAsset(\"admin-expression=admin\\n\" +\n                                     \"user-expression=user\\n\" +\n                                     \"birth-date-roles=alice,bob\\n\"), \"application.properties\");\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonWithReflectionFreeSerializersTest.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonWithReflectionFreeSerializersTest.java\nindex 34ec11f8700f6..b3eb48853c123 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonWithReflectionFreeSerializersTest.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonWithReflectionFreeSerializersTest.java\n@@ -29,7 +29,7 @@ public JavaArchive get() {\n                                     Pond.class, FrogBodyParts.class, FrogBodyParts.BodyPart.class, ContainerDTO.class,\n                                     NestedInterface.class, StateRecord.class, MapWrapper.class, GenericWrapper.class,\n                                     Fruit.class, Price.class, DogRecord.class, ItemExtended.class, Book.class, LombokBook.class,\n-                                    PrimitiveTypesBean.class, PrimitiveTypesRecord.class)\n+                                    PrimitiveTypesBean.class, PrimitiveTypesRecord.class, TokenResponse.class)\n                             .addAsResource(new StringAsset(\"admin-expression=admin\\n\" +\n                                     \"user-expression=user\\n\" +\n                                     \"birth-date-roles=alice,bob\\n\" +\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/TokenResponse.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/TokenResponse.java\nnew file mode 100644\nindex 0000000000000..79c01455d8436\n--- /dev/null\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/TokenResponse.java\n@@ -0,0 +1,22 @@\n+package io.quarkus.resteasy.reactive.jackson.deployment.test;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+public class TokenResponse {\n+\n+    private final String accessToken;\n+    private final Integer expiresIn;\n+\n+    public TokenResponse(@JsonProperty(\"access_token\") String accessToken, @JsonProperty(\"expires_in\") Integer expiresIn) {\n+        this.accessToken = accessToken;\n+        this.expiresIn = expiresIn;\n+    }\n+\n+    public String getAccessToken() {\n+        return accessToken;\n+    }\n+\n+    public Integer getExpiresIn() {\n+        return expiresIn;\n+    }\n+}\n\\ No newline at end of file\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47620",
    "pr_id": 47620,
    "issue_id": 47312,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Issue with large json objects returned as RestMediaType.APPLICATION_NDJSON\n### Describe the bug\n\nI'm trying to use REST APIs that return a `Multi<Message>`  that produces `RestMediaType.APPLICATION_NDJSON`.\n\n\n```java\n@GET\n@Path(\"/pojo\")\n@Produces(RestMediaType.APPLICATION_NDJSON)\n@RestStreamElementType(MediaType.APPLICATION_JSON)\npublic Multi<Message> readPojo() {\n   //\n}\n```\nQuarkus works as intended if the Message is smaller than approximately 1000 bytes. However, if it is larger, `org.jboss.resteasy.reactive.client.impl.MultiInvoker` feeds incomplete chunks into Jackson for deserialization, which of course fails.\n\n\n[MultiInvoker](https://github.com/quarkusio/quarkus/blob/main/independent-projects/resteasy-reactive/client/runtime/src/main/java/org/jboss/resteasy/reactive/client/impl/MultiInvoker.java#L319) does not actually check for a newline delimiter in the provided chunk. If there is no newline, it defaults to using the size of the chunk.\n\n### Expected behavior\n\nQuarkus should buffer read data until the delimiter is read, then parse the buffered content as a json object.\n\n### Actual behavior\n\nJackson fails to deserialize because the json content is not complete.\n`Caused by: jakarta.ws.rs.ProcessingException: com.fasterxml.jackson.databind.JsonMappingException: Unexpected end-of-input in VALUE_STRING`\n\n### How to Reproduce?\n\nTest based on [MultiNdjsonTest](https://github.com/quarkusio/quarkus/blob/main/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/MultiNdjsonTest.java)  : \n\n```java\npublic class LargeNDJsonTest {\n    @RegisterExtension\n    static final QuarkusUnitTest TEST = new QuarkusUnitTest();\n\n    @TestHTTPResource\n    URI uri;\n   \n    @Test\n    void readLargePojo() throws InterruptedException {\n        var client = createClient(uri);\n        var collected = new CopyOnWriteArrayList<Message>();\n        var completionLatch = new CountDownLatch(1);\n        client.readPojo(1000).onCompletion().invoke(completionLatch::countDown)\n                .subscribe().with(collected::add);\n\n        if (!completionLatch.await(5, TimeUnit.SECONDS)) {\n            fail(\"Streaming did not complete in time\");\n        }\n        assertThat(collected.size(), org.hamcrest.Matchers.is(4));\n\n    }\n\n\n    private Client createClient(URI uri) {\n        return QuarkusRestClientBuilder.newBuilder().baseUri(uri).build(Client.class);\n    }\n\n\n    @Path(\"/stream\")\n    public interface Client {\n        @GET\n        @Path(\"/pojo/{size}\")\n        @Produces(RestMediaType.APPLICATION_NDJSON)\n        @RestStreamElementType(MediaType.APPLICATION_JSON)\n        Multi<Message> readPojo(int size);\n\n    }\n\n\n    @Path(\"/stream\")\n    public static class StreamingResource {\n        @Inject\n        Vertx vertx;\n\n\n        @GET\n        @Path(\"/pojo/{size}\")\n        @Produces(RestMediaType.APPLICATION_NDJSON)\n        @RestStreamElementType(MediaType.APPLICATION_JSON)\n        public Multi<Message> readPojo(int size) {\n            return Multi.createFrom().emitter(\n                    em -> {\n                        Random random = new Random();\n                        byte[] bytes = new byte[size];\n                        random.nextBytes(bytes);\n\n                        em.emit(Message.of(\"one\", java.util.Base64.getEncoder().encodeToString(bytes)));\n                        em.emit(Message.of(\"two\", java.util.Base64.getEncoder().encodeToString(bytes)));\n                        em.emit(Message.of(\"three\", java.util.Base64.getEncoder().encodeToString(bytes)));\n\n                        vertx.setTimer(100, id -> {\n                            em.emit(Message.of(\"four\", java.util.Base64.getEncoder().encodeToString(bytes)));\n                            em.complete();\n                        });\n                    });\n        }\n\n    }\n\n    public record Message(String name, String value) {\n        public static Message of(String name, String value) {\n            return new Message(name, value);\n        }\n    }\n\n}\n\n```\n\nIf `client.readPojo(1000)` is changed to `client.readPojo(25)` then the test passes.\n\n### Output of `uname -a` or `ver`\n\nLinux magnusg-laptop 6.11.0-21-generic #21-Ubuntu SMP PREEMPT_DYNAMIC Wed Feb 19 16:50:40 UTC 2025 x86_64 x86_64 x86_64 GNU/Linux\n\n### Output of `java -version`\n\nopenjdk 23.0.2 2025-01-21\n\n### Quarkus version or git rev\n\n3.21.1\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nGradle 8.12.1\n\n### Additional information\n\n_No response_",
    "issue_word_count": 503,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/MultiNdjsonTest.java",
      "independent-projects/resteasy-reactive/client/runtime/src/main/java/org/jboss/resteasy/reactive/client/impl/MultiInvoker.java"
    ],
    "pr_changed_test_files": [
      "extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/MultiNdjsonTest.java"
    ],
    "base_commit": "908a0d562565b3ff888ee393b2404c4ba8548ea4",
    "head_commit": "1943cd74360bf0e2fd69ee09a7b990002bcf13ed",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47620",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47620",
    "dockerfile": "",
    "pr_merged_at": "2025-04-30T08:35:41.000Z",
    "patch": "diff --git a/independent-projects/resteasy-reactive/client/runtime/src/main/java/org/jboss/resteasy/reactive/client/impl/MultiInvoker.java b/independent-projects/resteasy-reactive/client/runtime/src/main/java/org/jboss/resteasy/reactive/client/impl/MultiInvoker.java\nindex 235a3937d0605..2f6547f24941a 100644\n--- a/independent-projects/resteasy-reactive/client/runtime/src/main/java/org/jboss/resteasy/reactive/client/impl/MultiInvoker.java\n+++ b/independent-projects/resteasy-reactive/client/runtime/src/main/java/org/jboss/resteasy/reactive/client/impl/MultiInvoker.java\n@@ -136,9 +136,10 @@ public <R> Multi<R> method(String name, Entity<?> entity, GenericType<R> respons\n                                             .get(RestClientRequestContext.DEFAULT_CONTENT_TYPE_PROP),\n                                     restClientRequestContext.getInvokedMethod());\n                         } else if (response.getStatus() == 200\n-                                && RestMediaType.APPLICATION_STREAM_JSON_TYPE.isCompatible(response.getMediaType())) {\n+                                && isNewlineDelimited(response)) {\n                             registerForJsonStream(multiRequest, restClientRequestContext, responseType, response,\n                                     vertxResponse);\n+\n                         } else {\n                             // read stuff in chunks\n                             registerForChunks(multiRequest, restClientRequestContext, responseType, response, vertxResponse);\n@@ -272,7 +273,6 @@ private <R> void registerForChunks(MultiRequest<? super R> multiRequest,\n             GenericType<R> responseType,\n             ResponseImpl response,\n             HttpClientResponse vertxClientResponse) {\n-        boolean isNewlineDelimited = isNewlineDelimited(response);\n         // make sure we get exceptions on the response, like close events, otherwise they\n         // will be logged as errors by vertx\n         vertxClientResponse.exceptionHandler(t -> {\n@@ -291,53 +291,15 @@ public void handle(Buffer buffer) {\n                 try {\n                     byte[] bytes = buffer.getBytes();\n                     MediaType mediaType = response.getMediaType();\n+                    ByteArrayInputStream in = new ByteArrayInputStream(bytes);\n+                    R item = restClientRequestContext.readEntity(\n+                            in,\n+                            responseType,\n+                            mediaType,\n+                            restClientRequestContext.getMethodDeclaredAnnotationsSafe(),\n+                            response.getMetadata());\n+                    multiRequest.emitter.emit(item);\n \n-                    if (isNewlineDelimited) {\n-                        String charset = mediaType.getParameters().get(MediaType.CHARSET_PARAMETER);\n-                        charset = charset == null ? \"UTF-8\" : charset;\n-                        byte[] separator = \"\\n\".getBytes(charset);\n-                        int start = 0;\n-                        while (start < bytes.length) {\n-                            int end = bytes.length;\n-                            for (int i = start; i < end; i++) {\n-                                if (bytes[i] == separator[0]) {\n-                                    int j;\n-                                    boolean matches = true;\n-                                    for (j = 1; j < separator.length; j++) {\n-                                        if (bytes[i + j] != separator[j]) {\n-                                            matches = false;\n-                                            break;\n-                                        }\n-                                    }\n-                                    if (matches) {\n-                                        end = i;\n-                                        break;\n-                                    }\n-                                }\n-                            }\n-\n-                            if (start < end) {\n-                                ByteArrayInputStream in = new ByteArrayInputStream(bytes, start, end);\n-                                R item = restClientRequestContext.readEntity(\n-                                        in,\n-                                        responseType,\n-                                        mediaType,\n-                                        restClientRequestContext.getMethodDeclaredAnnotationsSafe(),\n-                                        response.getMetadata());\n-                                multiRequest.emitter.emit(item);\n-                            }\n-                            start = end + separator.length;\n-                        }\n-                    } else {\n-                        ByteArrayInputStream in = new ByteArrayInputStream(bytes);\n-                        R item = restClientRequestContext.readEntity(\n-                                in,\n-                                responseType,\n-                                mediaType,\n-                                restClientRequestContext.getMethodDeclaredAnnotationsSafe(),\n-                                response.getMetadata());\n-                        multiRequest.emitter.emit(item);\n-                    }\n                 } catch (Throwable t) {\n                     // FIXME: probably close the client too? watch out that it doesn't call our close handler\n                     // which calls emitter.complete()\n",
    "test_patch": "diff --git a/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/MultiNdjsonTest.java b/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/MultiNdjsonTest.java\nindex 10f85b0505755..f638d4e8303be 100644\n--- a/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/MultiNdjsonTest.java\n+++ b/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/MultiNdjsonTest.java\n@@ -7,6 +7,7 @@\n import java.util.Arrays;\n import java.util.List;\n import java.util.Objects;\n+import java.util.Random;\n import java.util.concurrent.CopyOnWriteArrayList;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n@@ -33,6 +34,7 @@\n import io.smallrye.mutiny.Multi;\n import io.vertx.core.Vertx;\n import io.vertx.ext.web.RoutingContext;\n+import wiremock.org.apache.hc.client5.http.utils.Base64;\n \n public class MultiNdjsonTest {\n     @RegisterExtension\n@@ -108,6 +110,21 @@ void shouldReadNdjsonFromSingleMessage() throws InterruptedException {\n         assertThat(collected).hasSize(4).containsAll(expected);\n     }\n \n+    @Test\n+    void shouldReadLargeNdjsonPojoAsMulti() throws InterruptedException {\n+        var client = createClient(uri);\n+        var collected = new CopyOnWriteArrayList<Message>();\n+        var completionLatch = new CountDownLatch(1);\n+        client.readLargePojo().onCompletion().invoke(completionLatch::countDown)\n+                .subscribe().with(collected::add);\n+\n+        if (!completionLatch.await(5, TimeUnit.SECONDS)) {\n+            fail(\"Streaming did not complete in time\");\n+        }\n+\n+        assertThat(collected).hasSize(4);\n+    }\n+\n     private Client createClient(URI uri) {\n         return QuarkusRestClientBuilder.newBuilder().baseUri(uri).register(new TestJacksonBasicMessageBodyReader())\n                 .build(Client.class);\n@@ -134,6 +151,12 @@ public interface Client {\n         @RestStreamElementType(MediaType.APPLICATION_JSON)\n         Multi<Message> readPojoSingle();\n \n+        @GET\n+        @Path(\"/large-pojo\")\n+        @Produces(RestMediaType.APPLICATION_NDJSON)\n+        @RestStreamElementType(MediaType.APPLICATION_JSON)\n+        Multi<Message> readLargePojo();\n+\n     }\n \n     public static class ReactiveRoutesResource {\n@@ -201,6 +224,27 @@ public String getPojosAsString() throws JsonProcessingException {\n             }\n             return result.toString();\n         }\n+\n+        @GET\n+        @Path(\"/large-pojo\")\n+        @Produces(RestMediaType.APPLICATION_NDJSON)\n+        @RestStreamElementType(MediaType.APPLICATION_JSON)\n+        public Multi<Message> readLargePojo() {\n+            return Multi.createFrom().emitter(\n+                    em -> {\n+                        byte[] bytes = new byte[4 * 1024];\n+                        Random random = new Random();\n+                        random.nextBytes(bytes);\n+                        String value = Base64.encodeBase64String(bytes);\n+                        em.emit(Message.of(\"one\", value));\n+                        em.emit(Message.of(\"two\", value));\n+                        em.emit(Message.of(\"three\", value));\n+                        vertx.setTimer(100, id -> {\n+                            em.emit(Message.of(\"four\", value));\n+                            em.complete();\n+                        });\n+                    });\n+        }\n     }\n \n     public static class Message {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47619",
    "pr_id": 47619,
    "issue_id": 47582,
    "repo": "quarkusio/quarkus",
    "problem_statement": "quarkus.http.test-ssl-enabled to true does not have an effect in integration test\n**Describe the bug**\n[(Describe the problem clearly and concisely.)](https://quarkus.io/guides/getting-started-testing#executing-against-a-running-application) \n\n` quarkus.http.test-ssl-enabled to true` does not have an effect for me with Quarkus 3.21.4. Consider the test class (excerpt) executed with `./mvnw  test -DskipITs=false -Dtest='elexisweb.*IT' -Dsurefire.failIfNoSpecifiedTests=false -Dquarkus.http.test-ssl-enabled=true -Dquarkus.http.test-host=somehost.info -Dquarkus.http.test-port=443` it still resolves to `http:`\n\n```\n@QuarkusIntegrationTest\npublic class AppointmentRelatedEndpointsIT {\n\n    FhirR4Util fhirR4Util = new FhirR4Util();\n\n    @TestHTTPResource(\"/fhir/r4\")\n    String url;\n\n    @Test\n    public void schedule1_fetch_all_defined_areas() {\n        System.out.println(url);\n        Appointment appointment = fhirR4Util.getGenericClient(url).read().resource(Appointment.class)\n                .withId(\"D3eeb6d9398e45029093231\").execute();\n        assertNotNull(appointment);\n    }\n```\n\nIf I set `@TestHTTPResource(value = \"/fhir/r4\", tls = true)` it is however resolved against `https`!\n\n**Which pages**\n(add links or names for the affected pages)\n",
    "issue_word_count": 154,
    "test_files_count": 3,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "docs/src/main/asciidoc/getting-started-testing.adoc",
      "test-framework/common/src/main/java/io/quarkus/test/common/http/TestHTTPResource.java",
      "test-framework/common/src/main/java/io/quarkus/test/common/http/TestHTTPResourceManager.java"
    ],
    "pr_changed_test_files": [
      "docs/src/main/asciidoc/getting-started-testing.adoc",
      "test-framework/common/src/main/java/io/quarkus/test/common/http/TestHTTPResource.java",
      "test-framework/common/src/main/java/io/quarkus/test/common/http/TestHTTPResourceManager.java"
    ],
    "base_commit": "5b9552c949b947e9b56af2b3d14b81173fe0db25",
    "head_commit": "9d6c9ee3887ddd0d3e0fcd31be9340211c9b08c7",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47619",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47619",
    "dockerfile": "",
    "pr_merged_at": "2025-04-30T08:49:12.000Z",
    "patch": "",
    "test_patch": "diff --git a/docs/src/main/asciidoc/getting-started-testing.adoc b/docs/src/main/asciidoc/getting-started-testing.adoc\nindex 0add6a4f5d678..2e542333f9049 100644\n--- a/docs/src/main/asciidoc/getting-started-testing.adoc\n+++ b/docs/src/main/asciidoc/getting-started-testing.adoc\n@@ -1431,7 +1431,7 @@ An example use of this could be the following Maven command, that forces `@Quark\n ./mvnw verify -Dquarkus.http.test-host=1.2.3.4 -Dquarkus.http.test-port=4321\n ----\n \n-To test against a running instance that only accepts SSL/TLS connection (example: `https://1.2.3.4:4321`) set the system property `quarkus.http.test-ssl-enabled` to `true`.\n+To test against a running instance that only accepts SSL/TLS connection (example: `https://1.2.3.4:4321`) set the system property `quarkus.http.test-ssl-enabled` to `true` and `quarkus.http.test-ssl-port` to the target HTTPS port.\n \n == Mixing `@QuarkusTest` with other type of tests\n \n\ndiff --git a/test-framework/common/src/main/java/io/quarkus/test/common/http/TestHTTPResource.java b/test-framework/common/src/main/java/io/quarkus/test/common/http/TestHTTPResource.java\nindex 03026bfd6e0a2..c551c362e5651 100644\n--- a/test-framework/common/src/main/java/io/quarkus/test/common/http/TestHTTPResource.java\n+++ b/test-framework/common/src/main/java/io/quarkus/test/common/http/TestHTTPResource.java\n@@ -26,7 +26,7 @@\n      * @return If the URL should use the HTTPS protocol and SSL port\n      * @deprecated use #tls instead\n      */\n-    @Deprecated\n+    @Deprecated(since = \"3.10\", forRemoval = true)\n     boolean ssl() default false;\n \n     /**\n\ndiff --git a/test-framework/common/src/main/java/io/quarkus/test/common/http/TestHTTPResourceManager.java b/test-framework/common/src/main/java/io/quarkus/test/common/http/TestHTTPResourceManager.java\nindex adfb1b71840a2..06e963a902d57 100644\n--- a/test-framework/common/src/main/java/io/quarkus/test/common/http/TestHTTPResourceManager.java\n+++ b/test-framework/common/src/main/java/io/quarkus/test/common/http/TestHTTPResourceManager.java\n@@ -90,7 +90,8 @@ public static void inject(Object testCase, List<Function<Class<?>, String>> endp\n                         path = endpointPath;\n                     }\n                     String val;\n-                    if (resource.ssl() || resource.tls()) {\n+                    if (resource.ssl() || resource.tls() || ConfigProvider.getConfig()\n+                            .getOptionalValue(\"quarkus.http.test-ssl-enabled\", Boolean.class).orElse(false)) {\n                         if (management) {\n                             if (path.startsWith(\"/\")) {\n                                 val = getManagementSslUri() + path;\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47570",
    "pr_id": 47570,
    "issue_id": 47562,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Improve default OIDC tenant resolver\n### Description\n\nThe default OIDC resolver is used after all other supported tenant resolution strategies have been tried but OIDC tenant is still not resolved. It uses a convention where the last URL path segment is a possible tenant id.\n\nFor example, given `/service/google`, OIDC `google` tenant is selected.\nThis is good enough for simple cases, but it does not work when some other path follows, for example, given an OIDC tenant `google` declaration in the config, and a request like `/service/google/mail`, the OIDC tenant `google` wil not be resolved.\n\n### Implementation ideas\n\nDo a minor update to check if all of URL path contains a tenant id, as opposed to checking the last path segment only",
    "issue_word_count": 123,
    "test_files_count": 3,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/StaticTenantResolver.java",
      "integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/UsersResource.java",
      "integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/model/User.java",
      "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/UsersResource.java",
      "integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/model/User.java",
      "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java"
    ],
    "base_commit": "d62270bedc9e46119435229bd8400e519682218a",
    "head_commit": "c209bad5c1df9cca1d2e66a62a3153fa28903f61",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47570",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47570",
    "dockerfile": "",
    "pr_merged_at": "2025-04-29T15:44:58.000Z",
    "patch": "diff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/StaticTenantResolver.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/StaticTenantResolver.java\nindex 78f674235474e..4db2009a7b253 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/StaticTenantResolver.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/StaticTenantResolver.java\n@@ -84,7 +84,7 @@ Uni<String> resolve(RoutingContext context) {\n     }\n \n     private static final class DefaultStaticTenantResolver implements TenantResolver {\n-\n+        private static final String PATH_SEPARATOR = \"/\";\n         private final TenantConfigBean tenantConfigBean;\n \n         private DefaultStaticTenantResolver(TenantConfigBean tenantConfigBean) {\n@@ -93,13 +93,12 @@ private DefaultStaticTenantResolver(TenantConfigBean tenantConfigBean) {\n \n         @Override\n         public String resolve(RoutingContext context) {\n-            String[] pathSegments = context.request().path().split(\"/\");\n-            if (pathSegments.length > 0) {\n-                String lastPathSegment = pathSegments[pathSegments.length - 1];\n-                if (tenantConfigBean.getStaticTenant(lastPathSegment) != null) {\n+            String[] pathSegments = context.request().path().split(PATH_SEPARATOR);\n+            for (String segment : pathSegments) {\n+                if (tenantConfigBean.getStaticTenant(segment) != null) {\n                     LOG.debugf(\n-                            \"Tenant id '%s' is selected on the '%s' request path\", lastPathSegment, context.normalizedPath());\n-                    return lastPathSegment;\n+                            \"Tenant id '%s' is selected on the '%s' request path\", segment, context.normalizedPath());\n+                    return segment;\n                 }\n             }\n             return null;\n",
    "test_patch": "diff --git a/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/UsersResource.java b/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/UsersResource.java\nindex 37f4565cbca0b..aa42567046c71 100644\n--- a/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/UsersResource.java\n+++ b/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/UsersResource.java\n@@ -1,16 +1,20 @@\n package io.quarkus.it.keycloak;\n \n+import static io.quarkus.oidc.runtime.OidcUtils.TENANT_ID_ATTRIBUTE;\n+\n import jakarta.annotation.security.RolesAllowed;\n import jakarta.inject.Inject;\n import jakarta.ws.rs.GET;\n import jakarta.ws.rs.Path;\n import jakarta.ws.rs.Produces;\n+import jakarta.ws.rs.QueryParam;\n import jakarta.ws.rs.core.MediaType;\n \n import org.eclipse.microprofile.jwt.JsonWebToken;\n \n import io.quarkus.it.keycloak.model.User;\n import io.quarkus.security.identity.SecurityIdentity;\n+import io.vertx.ext.web.RoutingContext;\n \n /**\n  * @author <a href=\"mailto:psilva@redhat.com\">Pedro Igor</a>\n@@ -20,6 +24,8 @@ public class UsersResource {\n \n     @Inject\n     SecurityIdentity identity;\n+    @Inject\n+    private RoutingContext context;\n \n     @GET\n     @Path(\"/me/bearer\")\n@@ -41,8 +47,23 @@ public User principalNameId() {\n     @Path(\"/preferredUserName/bearer\")\n     @RolesAllowed(\"user\")\n     @Produces(MediaType.APPLICATION_JSON)\n-    public User preferredUserName() {\n-        return new User(((JsonWebToken) identity.getPrincipal()).getClaim(\"preferred_username\"));\n+    public User preferredUserName(@QueryParam(\"includeTenantId\") boolean includeTenantId) {\n+        String preferredUsername = ((JsonWebToken) identity.getPrincipal()).getClaim(\"preferred_username\");\n+        if (includeTenantId) {\n+            String tenantId = context.get(TENANT_ID_ATTRIBUTE);\n+            return new User(preferredUsername, tenantId);\n+        }\n+        return new User(preferredUsername);\n+    }\n+\n+    @GET\n+    @Path(\"/preferredUserName/bearer/token\")\n+    @RolesAllowed(\"user\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public User preferredUserNameWithExtendedPath() {\n+        String preferredUsername = ((JsonWebToken) identity.getPrincipal()).getClaim(\"preferred_username\");\n+        String tenantId = context.get(TENANT_ID_ATTRIBUTE);\n+        return new User(preferredUsername, tenantId);\n     }\n \n     @GET\n\ndiff --git a/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/model/User.java b/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/model/User.java\nindex 0e052e2c56daf..6a1922fc79777 100644\n--- a/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/model/User.java\n+++ b/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/model/User.java\n@@ -3,12 +3,23 @@\n public class User {\n \n     private final String userName;\n+    private final String tenantId;\n \n     public User(String name) {\n         this.userName = name;\n+        this.tenantId = null;\n+    }\n+\n+    public User(String userName, String tenantId) {\n+        this.userName = userName;\n+        this.tenantId = tenantId;\n     }\n \n     public String getUserName() {\n         return userName;\n     }\n+\n+    public String getTenantId() {\n+        return tenantId;\n+    }\n }\n\\ No newline at end of file\n\ndiff --git a/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java b/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java\nindex 136dc8522640c..a13b630019ebf 100644\n--- a/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java\n+++ b/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java\n@@ -58,6 +58,28 @@ public void testSecureAccessSuccessPreferredUsername() {\n         }\n     }\n \n+    @Test\n+    public void testTenantIdFromRoutingContextDefaultTenantResolver() {\n+        String username = \"alice\";\n+        String tenantId = \"bearer\";\n+        String accessToken = getAccessToken(username, Set.of(\"user\"));\n+\n+        RestAssured.given().auth().oauth2(accessToken)\n+                .queryParam(\"includeTenantId\", Boolean.TRUE)\n+                .when().get(\"/api/users/preferredUserName/bearer\")\n+                .then()\n+                .statusCode(200)\n+                .body(\"userName\", equalTo(username))\n+                .body(\"tenantId\", equalTo(tenantId));\n+\n+        RestAssured.given().auth().oauth2(getAccessToken(username, Set.of(\"user\", \"admin\")))\n+                .when().get(\"/api/users/preferredUserName/bearer/token\")\n+                .then()\n+                .statusCode(200)\n+                .body(\"userName\", equalTo(username))\n+                .body(\"tenantId\", equalTo(tenantId));\n+    }\n+\n     @Test\n     public void testAccessResourceAzure() throws Exception {\n         String azureToken = readFile(\"token.txt\");\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47553",
    "pr_id": 47553,
    "issue_id": 47478,
    "repo": "quarkusio/quarkus",
    "problem_statement": "VerifyError when using Float in Model deserialized by Jackson\n### Describe the bug\n\nIf I want to deserialize a model that contains a float, a `VerifyError` occurs during deserialization because the deserializer which is generated during the build uses a `Double` instead of a `Float`. \n\nThe error only occurs if reflection free serializers are enabled.\n\n```\n2025-04-22 12:14:59,534 ERROR [io.qua.ver.htt.run.QuarkusErrorHandler] (executor-thread-1) HTTP Request to /v1/products failed, error id: 94f8448d-b4e0-4258-9bac-f7dd12ef09c4-1: java.lang.VerifyError: Bad type on operand stack\nException Details:\n  Location:\n    io/i15s/quarkus/Product$quarkusjacksondeserializer.deserialize(Lcom/fasterxml/jackson/core/JsonParser;Lcom/fasterxml/jackson/databind/DeserializationContext;)Ljava/lang/Object; @243: invokevirtual\n  Reason:\n    Type 'java/lang/Double' (current frame, stack[1]) is not assignable to 'java/lang/Float'\n  Current Frame:\n    bci: @243\n    flags: { }\n    locals: { 'io/i15s/quarkus/Product$quarkusjacksondeserializer', 'com/fasterxml/jackson/core/JsonParser', 'com/fasterxml/jackson/databind/DeserializationContext', 'com/fasterxml/jackson/databind/JsonNode', 'java/util/Iterator', 'java/util/Map$Entry', 'java/lang/Object', integer, 'com/fasterxml/jackson/databind/JsonNode', 'io/i15s/quarkus/Product', top, double, double_2nd }\n    stack: { 'io/i15s/quarkus/Product', 'java/lang/Double' }\n  Bytecode:\n    0000000: 2bb6 0017 2bb6 001d c000 1f4e bb00 0859\n    0000010: b700 213a 092d b600 253a 0419 04b9 002b\n    0000020: 0100 9a00 09a7 0108 0000 bf19 04b9 002f\n    0000030: 0100 c000 313a 0519 05b9 0034 0100 c000\n    0000040: 1f3a 0819 08b6 0037 9a00 e219 05b9 003a\n    0000050: 0100 3a06 1906 b600 4036 0715 07ab 0000\n    0000060: 0000 00ca 0000 0004 c42b cf84 0000 0051\n    0000070: 0033 7a8b 0000 002b 0035 f4d4 0000 0064\n    0000080: 065f b149 0000 003e 1242 1906 b600 469a\n    0000090: 0006 a700 06a7 003f a700 8f12 4819 06b6\n    00000a0: 0046 9a00 06a7 0006 a700 3da7 007c 124a\n    00000b0: 1906 b600 469a 0006 a700 06a7 003e a700\n    00000c0: 6912 4c19 06b6 0046 9a00 06a7 0006 a700\n    00000d0: 42a7 0056 1908 b600 503a 0a19 0919 0ab6\n    00000e0: 0054 a700 4519 08b6 0058 390b 1909 180b\n    00000f0: b800 5eb6 0062 a700 312c 1908 1264 b600\n    0000100: 6a3a 0d19 0919 0dc0 0064 b600 6ea7 001a\n    0000110: 2c19 0812 64b6 006a 3a0e 1909 190e c000\n    0000120: 64b6 0071 a700 03a7 0003 a7fe f119 09b0\n    0000130:                                        \n  Stackmap Table:\n    full_frame(@27,{Object[#2],Object[#19],Object[#102],Object[#31],Object[#39],Top,Top,Top,Top,Object[#8]},{})\n    full_frame(@40,{},{Object[#115]})\n    full_frame(@43,{Object[#2],Object[#19],Object[#102],Object[#31],Object[#39],Top,Top,Top,Top,Object[#8]},{})\n    full_frame(@136,{Object[#2],Object[#19],Object[#102],Object[#31],Object[#39],Object[#49],Object[#60],Integer,Object[#31],Object[#8]},{})\n    same_frame(@149)\n    same_frame(@152)\n    same_frame(@155)\n    same_frame(@168)\n    same_frame(@171)\n    same_frame(@174)\n    same_frame(@187)\n    same_frame(@190)\n    same_frame(@193)\n    same_frame(@206)\n    same_frame(@209)\n    same_frame(@212)\n    same_frame(@229)\n    same_frame(@249)\n    same_frame(@272)\n    same_frame(@295)\n    full_frame(@298,{Object[#2],Object[#19],Object[#102],Object[#31],Object[#39],Object[#49],Top,Top,Object[#31],Object[#8]},{})\n    full_frame(@301,{Object[#2],Object[#19],Object[#102],Object[#31],Object[#39],Top,Top,Top,Top,Object[#8]},{})\n\n\tat java.base/java.lang.Class.getDeclaredConstructors0(Native Method)\n\tat java.base/java.lang.Class.privateGetDeclaredConstructors(Class.java:3549)\n\tat java.base/java.lang.Class.getConstructor0(Class.java:3754)\n\tat java.base/java.lang.Class.getConstructor(Class.java:2442)\n\tat io.quarkus.resteasy.reactive.jackson.runtime.serialisers.GeneratedSerializersRegister$MappingModuleHolder.createMappingModule(GeneratedSerializersRegister.java:55)\n\tat io.quarkus.resteasy.reactive.jackson.runtime.serialisers.GeneratedSerializersRegister$MappingModuleHolder.<clinit>(GeneratedSerializersRegister.java:32)\n\tat io.quarkus.resteasy.reactive.jackson.runtime.serialisers.GeneratedSerializersRegister.customize(GeneratedSerializersRegister.java:28)\n\tat io.quarkus.jackson.runtime.ObjectMapperProducer.objectMapper(ObjectMapperProducer.java:26)\n\tat io.quarkus.jackson.runtime.ObjectMapperProducer_ProducerMethod_objectMapper_KgqnG0Hv0d6QYgKd-v-HRXlW39Y_Bean.doCreate(Unknown Source)\n\tat io.quarkus.jackson.runtime.ObjectMapperProducer_ProducerMethod_objectMapper_KgqnG0Hv0d6QYgKd-v-HRXlW39Y_Bean.create(Unknown Source)\n\tat io.quarkus.jackson.runtime.ObjectMapperProducer_ProducerMethod_objectMapper_KgqnG0Hv0d6QYgKd-v-HRXlW39Y_Bean.create(Unknown Source)\n\tat io.quarkus.arc.impl.AbstractSharedContext.createInstanceHandle(AbstractSharedContext.java:119)\n\tat io.quarkus.arc.impl.AbstractSharedContext$1.get(AbstractSharedContext.java:38)\n\tat io.quarkus.arc.impl.AbstractSharedContext$1.get(AbstractSharedContext.java:35)\n\tat io.quarkus.arc.impl.LazyValue.get(LazyValue.java:32)\n\tat io.quarkus.arc.impl.ComputingCache.computeIfAbsent(ComputingCache.java:69)\n\tat io.quarkus.arc.impl.ComputingCacheContextInstances.computeIfAbsent(ComputingCacheContextInstances.java:19)\n\tat io.quarkus.arc.impl.AbstractSharedContext.get(AbstractSharedContext.java:35)\n\tat io.quarkus.jackson.runtime.ObjectMapperProducer_ProducerMethod_objectMapper_KgqnG0Hv0d6QYgKd-v-HRXlW39Y_Bean.get(Unknown Source)\n\tat io.quarkus.jackson.runtime.ObjectMapperProducer_ProducerMethod_objectMapper_KgqnG0Hv0d6QYgKd-v-HRXlW39Y_Bean.get(Unknown Source)\n\tat io.quarkus.arc.impl.InstanceImpl.getBeanInstance(InstanceImpl.java:325)\n\tat io.quarkus.arc.impl.InstanceImpl.getInternal(InstanceImpl.java:309)\n\tat io.quarkus.arc.impl.InstanceImpl.get(InstanceImpl.java:190)\n\tat io.quarkus.resteasy.reactive.jackson.runtime.serialisers.AbstractServerJacksonMessageBodyReader$1.get(AbstractServerJacksonMessageBodyReader.java:35)\n\tat io.quarkus.resteasy.reactive.jackson.runtime.serialisers.AbstractServerJacksonMessageBodyReader$1.get(AbstractServerJacksonMessageBodyReader.java:32)\n\tat io.quarkus.arc.impl.LazyValue.get(LazyValue.java:32)\n\tat io.quarkus.resteasy.reactive.jackson.runtime.serialisers.AbstractServerJacksonMessageBodyReader.getEffectiveReader(AbstractServerJacksonMessageBodyReader.java:48)\n\tat io.quarkus.resteasy.reactive.jackson.runtime.serialisers.ServerJacksonMessageBodyReader.doReadFrom(ServerJacksonMessageBodyReader.java:91)\n\tat io.quarkus.resteasy.reactive.jackson.runtime.serialisers.ServerJacksonMessageBodyReader.readFrom(ServerJacksonMessageBodyReader.java:44)\n\tat io.quarkus.resteasy.reactive.jackson.runtime.serialisers.ServerJacksonMessageBodyReader.readFrom(ServerJacksonMessageBodyReader.java:83)\n\tat io.quarkus.resteasy.reactive.jackson.runtime.serialisers.ServerJacksonMessageBodyReader_ClientProxy.readFrom(Unknown Source)\n\tat org.jboss.resteasy.reactive.server.handlers.RequestDeserializeHandler.readFrom(RequestDeserializeHandler.java:126)\n\tat org.jboss.resteasy.reactive.server.handlers.RequestDeserializeHandler.handle(RequestDeserializeHandler.java:84)\n\tat io.quarkus.resteasy.reactive.server.runtime.QuarkusResteasyReactiveRequestContext.invokeHandler(QuarkusResteasyReactiveRequestContext.java:135)\n\tat org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext.run(AbstractResteasyReactiveContext.java:147)\n\tat io.quarkus.vertx.core.runtime.VertxCoreRecorder$15.runWith(VertxCoreRecorder.java:638)\n\tat org.jboss.threads.EnhancedQueueExecutor$Task.doRunWith(EnhancedQueueExecutor.java:2675)\n\tat org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2654)\n\tat org.jboss.threads.EnhancedQueueExecutor.runThreadBody(EnhancedQueueExecutor.java:1627)\n\tat org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1594)\n\tat org.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:11)\n\tat org.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:11)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n```\n\n### How to Reproduce?\n\nI've created a small reproducer project.  https://github.com/andlinger/quarkus-reproducer/tree/quarkus-47478\nIn principle, however, a normal Java POJO with a Float member is sufficient and the reflection free serializers must be activated.\n\n```properties file=application.properties\nquarkus.rest.jackson.optimization.enable-reflection-free-serializers=true\n```\n\n```java\npublic class Product {\n\n    @NotBlank(message = \"Name must not be blank\")\n    private String name;\n    private Float price;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Float getPrice() {\n        return price;\n    }\n\n    public void setPrice(Float price) {\n        this.price = price;\n    }\n}\n```\n\n### Quarkus version or git rev\n\n3.21.3",
    "issue_word_count": 1086,
    "test_files_count": 6,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonDeserializerFactory.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonSerializationUtils.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonSerializerFactory.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractSimpleJsonTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/PrimitiveTypesBean.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/PrimitiveTypesRecord.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonResource.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonWithReflectionFreeSerializersTest.java"
    ],
    "pr_changed_test_files": [
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractSimpleJsonTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/PrimitiveTypesBean.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/PrimitiveTypesRecord.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonResource.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonWithReflectionFreeSerializersTest.java"
    ],
    "base_commit": "31ba82eb12177c79ae4da0fdd8b43b825c8706ed",
    "head_commit": "ab8d361908bad6c200d4449a8b5fb520854be023",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47553",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47553",
    "dockerfile": "",
    "pr_merged_at": "2025-04-28T09:38:13.000Z",
    "patch": "diff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonDeserializerFactory.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonDeserializerFactory.java\nindex e0af8a4803903..b893bebedbcc7 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonDeserializerFactory.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonDeserializerFactory.java\n@@ -15,7 +15,15 @@\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n-import org.jboss.jandex.*;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.FieldInfo;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.MethodInfo;\n+import org.jboss.jandex.MethodParameterInfo;\n+import org.jboss.jandex.ParameterizedType;\n+import org.jboss.jandex.Type;\n+import org.jboss.jandex.TypeVariable;\n+import org.jboss.jandex.VoidType;\n \n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.core.JacksonException;\n@@ -35,9 +43,11 @@\n \n import io.quarkus.deployment.annotations.BuildProducer;\n import io.quarkus.deployment.builditem.GeneratedClassBuildItem;\n+import io.quarkus.gizmo.AssignableResultHandle;\n import io.quarkus.gizmo.BranchResult;\n import io.quarkus.gizmo.BytecodeCreator;\n import io.quarkus.gizmo.ClassCreator;\n+import io.quarkus.gizmo.DescriptorUtils;\n import io.quarkus.gizmo.FieldDescriptor;\n import io.quarkus.gizmo.MethodCreator;\n import io.quarkus.gizmo.MethodDescriptor;\n@@ -257,6 +267,7 @@ private ResultHandle createDeserializedObject(DeserializationData deserData) {\n             ResultHandle fieldValue = deserData.methodCreator.invokeVirtualMethod(\n                     ofMethod(JsonNode.class, \"get\", JsonNode.class, String.class), deserData.jsonNode,\n                     deserData.methodCreator.load(fieldSpecs.jsonName));\n+\n             params[i++] = readValueFromJson(deserData.classCreator, deserData.methodCreator,\n                     deserData.methodCreator.getMethodParam(1), fieldSpecs, deserData.typeParametersIndex, fieldValue);\n         }\n@@ -391,9 +402,8 @@ private ResultHandle readValueFromJson(ClassCreator classCreator, BytecodeCreato\n             ResultHandle valueNode) {\n         Type fieldType = fieldSpecs.fieldType;\n         String fieldTypeName = fieldType.name().toString();\n-        MethodDescriptor readMethod = readMethodForPrimitiveFields(fieldTypeName);\n-        if (readMethod != null) {\n-            return bytecode.invokeVirtualMethod(readMethod, valueNode);\n+        if (JacksonSerializationUtils.isBasicJsonType(fieldType)) {\n+            return readValueForPrimitiveFields(bytecode, fieldType, valueNode);\n         }\n \n         FieldKind fieldKind = registerTypeToBeGenerated(fieldType, fieldTypeName);\n@@ -467,17 +477,51 @@ private MethodInfo setterMethodInfo(ClassInfo classInfo, FieldSpecs fieldSpecs)\n         return setter;\n     }\n \n-    private MethodDescriptor readMethodForPrimitiveFields(String typeName) {\n-        return switch (typeName) {\n-            case \"java.lang.String\", \"char\", \"java.lang.Character\" -> ofMethod(JsonNode.class, \"asText\", String.class);\n-            case \"short\", \"java.lang.Short\", \"int\", \"java.lang.Integer\" ->\n-                ofMethod(JsonNode.class, \"asInt\", int.class);\n-            case \"long\", \"java.lang.Long\" -> ofMethod(JsonNode.class, \"asLong\", long.class);\n-            case \"float\", \"java.lang.Float\", \"double\", \"java.lang.Double\" ->\n-                ofMethod(JsonNode.class, \"asDouble\", double.class);\n-            case \"boolean\", \"java.lang.Boolean\" -> ofMethod(JsonNode.class, \"asBoolean\", boolean.class);\n-            default -> null;\n+    private static ResultHandle readValueForPrimitiveFields(BytecodeCreator bytecode, Type fieldType,\n+            ResultHandle valueNode) {\n+        AssignableResultHandle result = bytecode.createVariable(DescriptorUtils.typeToString(fieldType));\n+\n+        BranchResult isValueNull = bytecode.ifNull(valueNode);\n+        BytecodeCreator isValueNullTrue = isValueNull.trueBranch();\n+        isValueNullTrue.assign(result, JacksonSerializationUtils.getDefaultValue(isValueNullTrue, fieldType));\n+\n+        BytecodeCreator isValueNullFalse = isValueNull.falseBranch();\n+\n+        ResultHandle convertedValue = switch (fieldType.name().toString()) {\n+            case \"java.lang.String\" -> isValueNullFalse.invokeVirtualMethod(ofMethod(JsonNode.class, \"asText\", String.class),\n+                    valueNode);\n+            case \"char\", \"java.lang.Character\" -> isValueNullFalse.invokeVirtualMethod(\n+                    ofMethod(String.class, \"charAt\", char.class, int.class),\n+                    isValueNullFalse.invokeVirtualMethod(ofMethod(JsonNode.class, \"asText\", String.class), valueNode),\n+                    isValueNullFalse.load(0));\n+            case \"short\", \"java.lang.Short\" -> isValueNullFalse\n+                    .convertPrimitive(\n+                            isValueNullFalse.invokeVirtualMethod(ofMethod(JsonNode.class, \"asInt\", int.class), valueNode),\n+                            short.class);\n+            case \"int\" ->\n+                isValueNullFalse.invokeVirtualMethod(ofMethod(JsonNode.class, \"asInt\", int.class),\n+                        valueNode);\n+            case \"java.lang.Integer\" ->\n+                isValueNullFalse.invokeStaticMethod(ofMethod(Integer.class, \"valueOf\", Integer.class, int.class),\n+                        isValueNullFalse.invokeVirtualMethod(ofMethod(JsonNode.class, \"asInt\", int.class),\n+                                valueNode));\n+            case \"long\", \"java.lang.Long\" ->\n+                isValueNullFalse.invokeVirtualMethod(ofMethod(JsonNode.class, \"asLong\", long.class),\n+                        valueNode);\n+            case \"float\", \"java.lang.Float\" -> isValueNullFalse\n+                    .convertPrimitive(\n+                            isValueNullFalse.invokeVirtualMethod(ofMethod(JsonNode.class, \"asDouble\", double.class), valueNode),\n+                            float.class);\n+            case \"double\", \"java.lang.Double\" -> isValueNullFalse\n+                    .invokeVirtualMethod(ofMethod(JsonNode.class, \"asDouble\", double.class), valueNode);\n+            case \"boolean\", \"java.lang.Boolean\" -> isValueNullFalse\n+                    .invokeVirtualMethod(ofMethod(JsonNode.class, \"asBoolean\", boolean.class), valueNode);\n+            default -> throw new IllegalStateException(\"Type \" + fieldType + \" should be handled by the switch\");\n         };\n+\n+        isValueNullFalse.assign(result, convertedValue);\n+\n+        return result;\n     }\n \n     @Override\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonSerializationUtils.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonSerializationUtils.java\nnew file mode 100644\nindex 0000000000000..5779a7c162e05\n--- /dev/null\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonSerializationUtils.java\n@@ -0,0 +1,65 @@\n+package io.quarkus.resteasy.reactive.jackson.deployment.processor;\n+\n+import org.jboss.jandex.Type;\n+import org.jboss.jandex.Type.Kind;\n+\n+import io.quarkus.gizmo.BytecodeCreator;\n+import io.quarkus.gizmo.ResultHandle;\n+\n+final class JacksonSerializationUtils {\n+\n+    private static boolean DEFAULT_BOOLEAN;\n+    private static byte DEFAULT_BYTE;\n+    private static char DEFAULT_CHAR;\n+    private static double DEFAULT_DOUBLE;\n+    private static float DEFAULT_FLOAT;\n+    private static int DEFAULT_INT;\n+    private static long DEFAULT_LONG;\n+    private static short DEFAULT_SHORT;\n+\n+    private JacksonSerializationUtils() {\n+    }\n+\n+    static boolean isBoxedPrimitive(Type type) {\n+        return isBoxedPrimitive(type.name().toString());\n+    }\n+\n+    static boolean isBoxedPrimitive(String typeName) {\n+        return \"java.lang.Character\".equals(typeName) || \"java.lang.Short\".equals(typeName)\n+                || \"java.lang.Integer\".equals(typeName) || \"java.lang.Long\".equals(typeName)\n+                || \"java.lang.Float\".equals(typeName) || \"java.lang.Double\".equals(typeName)\n+                || \"java.lang.Boolean\".equals(typeName);\n+    }\n+\n+    static boolean isBasicJsonType(Type type) {\n+        if (type.kind() == Kind.PRIMITIVE) {\n+            return true;\n+        }\n+        if (isBoxedPrimitive(type)) {\n+            return true;\n+        }\n+        if (\"java.lang.String\".equals(type.name().toString())) {\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    static ResultHandle getDefaultValue(BytecodeCreator bytecodeCreator, Type type) {\n+        if (type.kind() != Kind.PRIMITIVE) {\n+            return bytecodeCreator.loadNull();\n+        }\n+\n+        return switch (type.name().toString()) {\n+            case \"byte\" -> bytecodeCreator.load(DEFAULT_BYTE);\n+            case \"boolean\" -> bytecodeCreator.load(DEFAULT_BOOLEAN);\n+            case \"char\" -> bytecodeCreator.load(DEFAULT_CHAR);\n+            case \"double\" -> bytecodeCreator.load(DEFAULT_DOUBLE);\n+            case \"float\" -> bytecodeCreator.load(DEFAULT_FLOAT);\n+            case \"int\" -> bytecodeCreator.load(DEFAULT_INT);\n+            case \"long\" -> bytecodeCreator.load(DEFAULT_LONG);\n+            case \"short\" -> bytecodeCreator.load(DEFAULT_SHORT);\n+            default -> throw new IllegalStateException(\"Type \" + type + \" should be handled by the switch\");\n+        };\n+    }\n+}\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonSerializerFactory.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonSerializerFactory.java\nindex b5a829d15db9b..9453c51f45375 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonSerializerFactory.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonSerializerFactory.java\n@@ -274,7 +274,9 @@ private void writeField(ClassInfo classInfo, FieldSpecs fieldSpecs, BytecodeCrea\n         String primitiveMethodName = writeMethodForPrimitiveFields(typeName);\n \n         if (primitiveMethodName != null) {\n-            BytecodeCreator primitiveBytecode = isBoxedPrimitive(typeName) ? bytecode.ifNotNull(arg).trueBranch() : bytecode;\n+            BytecodeCreator primitiveBytecode = JacksonSerializationUtils.isBoxedPrimitive(typeName)\n+                    ? bytecode.ifNotNull(arg).trueBranch()\n+                    : bytecode;\n             writeFieldName(fieldSpecs, primitiveBytecode, ctx.jsonGenerator, pkgName);\n             MethodDescriptor primitiveWriter = MethodDescriptor.ofMethod(JSON_GEN_CLASS_NAME, primitiveMethodName, \"void\",\n                     fieldSpecs.writtenType());\n@@ -319,13 +321,6 @@ private String writeMethodForPrimitiveFields(String typeName) {\n         };\n     }\n \n-    private boolean isBoxedPrimitive(String typeName) {\n-        return \"java.lang.Character\".equals(typeName) || \"java.lang.Short\".equals(typeName)\n-                || \"java.lang.Integer\".equals(typeName) || \"java.lang.Long\".equals(typeName)\n-                || \"java.lang.Float\".equals(typeName) || \"java.lang.Double\".equals(typeName)\n-                || \"java.lang.Boolean\".equals(typeName);\n-    }\n-\n     private BytecodeCreator writeFieldBranch(ClassCreator classCreator, MethodCreator serialize, FieldSpecs fieldSpecs) {\n         String[] rolesAllowed = fieldSpecs.rolesAllowed();\n         if (rolesAllowed != null) {\n",
    "test_patch": "diff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractSimpleJsonTest.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractSimpleJsonTest.java\nindex ef93d7509a1c4..12fdbd9636588 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractSimpleJsonTest.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractSimpleJsonTest.java\n@@ -807,4 +807,146 @@ public void testPojoWithFluentSetters() {\n                 .body(\"author\", Matchers.is(\"Mario Fusco\"))\n                 .body(\"title\", Matchers.is(\"Lombok must die\"));\n     }\n+\n+    @Test\n+    public void testPrimitiveTypesBean() {\n+        RestAssured\n+                .with()\n+                .body(\"\"\"\n+                        {\n+                        \"charPrimitive\":\"b\",\n+                        \"characterPrimitive\":\"c\",\n+                        \"shortPrimitive\":4,\n+                        \"shortInstance\":5,\n+                        \"intPrimitive\":6,\n+                        \"integerInstance\":7,\n+                        \"longPrimitive\":8,\n+                        \"longInstance\":9,\n+                        \"floatPrimitive\":10.3,\n+                        \"floatInstance\":11.4,\n+                        \"doublePrimitive\":12.5,\n+                        \"doubleInstance\":13.6,\n+                        \"booleanPrimitive\":true,\n+                        \"booleanInstance\":false\n+                        }\n+                        \"\"\")\n+                .contentType(\"application/json; charset=utf-8\")\n+                .post(\"/simple/primitive-types-bean\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .body(\"charPrimitive\", Matchers.is(\"b\"))\n+                .body(\"characterPrimitive\", Matchers.is(\"c\"))\n+                .body(\"shortPrimitive\", Matchers.equalTo(4))\n+                .body(\"shortInstance\", Matchers.equalTo(5))\n+                .body(\"intPrimitive\", Matchers.equalTo(6))\n+                .body(\"integerInstance\", Matchers.equalTo(7))\n+                .body(\"longPrimitive\", Matchers.equalTo(8))\n+                .body(\"longInstance\", Matchers.equalTo(9))\n+                .body(\"floatPrimitive\", Matchers.equalTo(10.3F))\n+                .body(\"floatInstance\", Matchers.equalTo(11.4F))\n+                .body(\"doublePrimitive\", Matchers.equalTo(12.5F))\n+                .body(\"doubleInstance\", Matchers.equalTo(13.6F))\n+                .body(\"booleanPrimitive\", Matchers.equalTo(true))\n+                .body(\"booleanInstance\", Matchers.equalTo(false));\n+\n+        // Note: characters are handled weirdly on the Jackson side, we cannot fully test them.\n+        RestAssured\n+                .with()\n+                .body(\"\"\"\n+                        {\n+                        \"characterPrimitive\":\"c\"\n+                        }\n+                        \"\"\")\n+                .contentType(\"application/json; charset=utf-8\")\n+                .post(\"/simple/primitive-types-bean\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                //.body(\"charPrimitive\", Matchers.is(\"\"))\n+                .body(\"characterPrimitive\", Matchers.is(\"c\"))\n+                .body(\"shortPrimitive\", Matchers.equalTo(0))\n+                .body(\"shortInstance\", Matchers.nullValue())\n+                .body(\"intPrimitive\", Matchers.equalTo(0))\n+                .body(\"integerInstance\", nullValue())\n+                .body(\"longPrimitive\", Matchers.equalTo(0))\n+                .body(\"longInstance\", nullValue())\n+                .body(\"floatPrimitive\", Matchers.equalTo(0F))\n+                .body(\"floatInstance\", nullValue())\n+                .body(\"doublePrimitive\", Matchers.equalTo(0F))\n+                .body(\"doubleInstance\", Matchers.nullValue())\n+                .body(\"booleanPrimitive\", Matchers.equalTo(false))\n+                .body(\"booleanInstance\", Matchers.nullValue());\n+    }\n+\n+    @Test\n+    public void testPrimitiveTypesRecord() {\n+        RestAssured\n+                .with()\n+                .body(\"\"\"\n+                        {\n+                        \"charPrimitive\":\"b\",\n+                        \"characterPrimitive\":\"c\",\n+                        \"shortPrimitive\":4,\n+                        \"shortInstance\":5,\n+                        \"intPrimitive\":6,\n+                        \"integerInstance\":7,\n+                        \"longPrimitive\":8,\n+                        \"longInstance\":9,\n+                        \"floatPrimitive\":10.3,\n+                        \"floatInstance\":11.4,\n+                        \"doublePrimitive\":12.5,\n+                        \"doubleInstance\":13.6,\n+                        \"booleanPrimitive\":true,\n+                        \"booleanInstance\":false\n+                        }\n+                        \"\"\")\n+                .contentType(\"application/json; charset=utf-8\")\n+                .post(\"/simple/primitive-types-record\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .body(\"charPrimitive\", Matchers.is(\"b\"))\n+                .body(\"characterPrimitive\", Matchers.is(\"c\"))\n+                .body(\"shortPrimitive\", Matchers.equalTo(4))\n+                .body(\"shortInstance\", Matchers.equalTo(5))\n+                .body(\"intPrimitive\", Matchers.equalTo(6))\n+                .body(\"integerInstance\", Matchers.equalTo(7))\n+                .body(\"longPrimitive\", Matchers.equalTo(8))\n+                .body(\"longInstance\", Matchers.equalTo(9))\n+                .body(\"floatPrimitive\", Matchers.equalTo(10.3F))\n+                .body(\"floatInstance\", Matchers.equalTo(11.4F))\n+                .body(\"doublePrimitive\", Matchers.equalTo(12.5F))\n+                .body(\"doubleInstance\", Matchers.equalTo(13.6F))\n+                .body(\"booleanPrimitive\", Matchers.equalTo(true))\n+                .body(\"booleanInstance\", Matchers.equalTo(false));\n+\n+        // Note: characters are handled weirdly on the Jackson side, we cannot fully test them.\n+        RestAssured\n+                .with()\n+                .body(\"\"\"\n+                        {\n+                        \"characterPrimitive\":\"c\"\n+                        }\n+                        \"\"\")\n+                .contentType(\"application/json; charset=utf-8\")\n+                .post(\"/simple/primitive-types-record\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                //.body(\"charPrimitive\", Matchers.is(\"\"))\n+                .body(\"characterPrimitive\", Matchers.is(\"c\"))\n+                .body(\"shortPrimitive\", Matchers.equalTo(0))\n+                .body(\"shortInstance\", Matchers.nullValue())\n+                .body(\"intPrimitive\", Matchers.equalTo(0))\n+                .body(\"integerInstance\", nullValue())\n+                .body(\"longPrimitive\", Matchers.equalTo(0))\n+                .body(\"longInstance\", nullValue())\n+                .body(\"floatPrimitive\", Matchers.equalTo(0F))\n+                .body(\"floatInstance\", nullValue())\n+                .body(\"doublePrimitive\", Matchers.equalTo(0F))\n+                .body(\"doubleInstance\", Matchers.nullValue())\n+                .body(\"booleanPrimitive\", Matchers.equalTo(false))\n+                .body(\"booleanInstance\", Matchers.nullValue());\n+    }\n }\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/PrimitiveTypesBean.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/PrimitiveTypesBean.java\nnew file mode 100644\nindex 0000000000000..3469b83fdd118\n--- /dev/null\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/PrimitiveTypesBean.java\n@@ -0,0 +1,157 @@\n+package io.quarkus.resteasy.reactive.jackson.deployment.test;\n+\n+public class PrimitiveTypesBean {\n+\n+    private char charPrimitive;\n+    private Character characterPrimitive;\n+\n+    private short shortPrimitive;\n+    private Short shortInstance;\n+\n+    private int intPrimitive;\n+    private Integer integerInstance;\n+\n+    private long longPrimitive;\n+    private Long longInstance;\n+\n+    private float floatPrimitive;\n+    private Float floatInstance;\n+\n+    private double doublePrimitive;\n+    private Double doubleInstance;\n+\n+    private boolean booleanPrimitive;\n+    private Boolean booleanInstance;\n+\n+    public PrimitiveTypesBean(char charPrimitive, Character characterPrimitive, short shortPrimitive, Short shortInstance,\n+            int intPrimitive, Integer integerInstance, long longPrimitive, Long longInstance, float floatPrimitive,\n+            Float floatInstance, double doublePrimitive, Double doubleInstance, boolean booleanPrimitive,\n+            Boolean booleanInstance) {\n+        this.charPrimitive = charPrimitive;\n+        this.characterPrimitive = characterPrimitive;\n+        this.shortPrimitive = shortPrimitive;\n+        this.shortInstance = shortInstance;\n+        this.intPrimitive = intPrimitive;\n+        this.integerInstance = integerInstance;\n+        this.longPrimitive = longPrimitive;\n+        this.longInstance = longInstance;\n+        this.floatPrimitive = floatPrimitive;\n+        this.floatInstance = floatInstance;\n+        this.doublePrimitive = doublePrimitive;\n+        this.doubleInstance = doubleInstance;\n+        this.booleanPrimitive = booleanPrimitive;\n+        this.booleanInstance = booleanInstance;\n+    }\n+\n+    public char getCharPrimitive() {\n+        return charPrimitive;\n+    }\n+\n+    public void setCharPrimitive(char charPrimitive) {\n+        this.charPrimitive = charPrimitive;\n+    }\n+\n+    public Character getCharacterPrimitive() {\n+        return characterPrimitive;\n+    }\n+\n+    public void setCharPrimitive(Character characterPrimitive) {\n+        this.characterPrimitive = characterPrimitive;\n+    }\n+\n+    public short getShortPrimitive() {\n+        return shortPrimitive;\n+    }\n+\n+    public void setShortPrimitive(short shortPrimitive) {\n+        this.shortPrimitive = shortPrimitive;\n+    }\n+\n+    public Short getShortInstance() {\n+        return shortInstance;\n+    }\n+\n+    public void setShortInstance(Short shortInstance) {\n+        this.shortInstance = shortInstance;\n+    }\n+\n+    public int getIntPrimitive() {\n+        return intPrimitive;\n+    }\n+\n+    public void setIntPrimitive(int intPrimitive) {\n+        this.intPrimitive = intPrimitive;\n+    }\n+\n+    public Integer getIntegerInstance() {\n+        return integerInstance;\n+    }\n+\n+    public void setIntegerInstance(Integer integerInstance) {\n+        this.integerInstance = integerInstance;\n+    }\n+\n+    public long getLongPrimitive() {\n+        return longPrimitive;\n+    }\n+\n+    public void setLongPrimitive(long longPrimitive) {\n+        this.longPrimitive = longPrimitive;\n+    }\n+\n+    public Long getLongInstance() {\n+        return longInstance;\n+    }\n+\n+    public void setLongInstance(Long longInstance) {\n+        this.longInstance = longInstance;\n+    }\n+\n+    public float getFloatPrimitive() {\n+        return floatPrimitive;\n+    }\n+\n+    public void setFloatPrimitive(float floatPrimitive) {\n+        this.floatPrimitive = floatPrimitive;\n+    }\n+\n+    public Float getFloatInstance() {\n+        return floatInstance;\n+    }\n+\n+    public void setFloatInstance(Float floatInstance) {\n+        this.floatInstance = floatInstance;\n+    }\n+\n+    public double getDoublePrimitive() {\n+        return doublePrimitive;\n+    }\n+\n+    public void setDoublePrimitive(double doublePrimitive) {\n+        this.doublePrimitive = doublePrimitive;\n+    }\n+\n+    public Double getDoubleInstance() {\n+        return doubleInstance;\n+    }\n+\n+    public void setDoubleInstance(Double doubleInstance) {\n+        this.doubleInstance = doubleInstance;\n+    }\n+\n+    public boolean isBooleanPrimitive() {\n+        return booleanPrimitive;\n+    }\n+\n+    public void setBooleanPrimitive(boolean booleanPrimitive) {\n+        this.booleanPrimitive = booleanPrimitive;\n+    }\n+\n+    public Boolean getBooleanInstance() {\n+        return booleanInstance;\n+    }\n+\n+    public void setBooleanInstance(Boolean booleanInstance) {\n+        this.booleanInstance = booleanInstance;\n+    }\n+}\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/PrimitiveTypesRecord.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/PrimitiveTypesRecord.java\nnew file mode 100644\nindex 0000000000000..8bd2a86c79c43\n--- /dev/null\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/PrimitiveTypesRecord.java\n@@ -0,0 +1,6 @@\n+package io.quarkus.resteasy.reactive.jackson.deployment.test;\n+\n+public record PrimitiveTypesRecord(char charPrimitive, Character characterPrimitive, short shortPrimitive, Short shortInstance,\n+        int intPrimitive, Integer integerInstance, long longPrimitive, Long longInstance, float floatPrimitive,\n+        Float floatInstance, double doublePrimitive, Double doubleInstance, boolean booleanPrimitive, Boolean booleanInstance) {\n+}\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonResource.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonResource.java\nindex fe6b7bbd0d55c..5d1d9553ba5a4 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonResource.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonResource.java\n@@ -501,6 +501,18 @@ public ItemExtended getItemExtended() {\n         return item;\n     }\n \n+    @POST\n+    @Path(\"/primitive-types-bean\")\n+    public PrimitiveTypesBean echoPrimitiveTypesBean(PrimitiveTypesBean bean) {\n+        return bean;\n+    }\n+\n+    @POST\n+    @Path(\"/primitive-types-record\")\n+    public PrimitiveTypesRecord echoPrimitiveTypesRecord(PrimitiveTypesRecord record) {\n+        return record;\n+    }\n+\n     public static class UnquotedFieldsPersonSerialization implements BiFunction<ObjectMapper, Type, ObjectWriter> {\n \n         public static final AtomicInteger count = new AtomicInteger();\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonTest.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonTest.java\nindex 1bd5b96f311dc..9eae5fadc780f 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonTest.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonTest.java\n@@ -26,7 +26,8 @@ public JavaArchive get() {\n                                     AbstractUnsecuredPet.class, UnsecuredPet.class, SecuredPersonInterface.class, Frog.class,\n                                     Pond.class, FrogBodyParts.class, FrogBodyParts.BodyPart.class, ContainerDTO.class,\n                                     NestedInterface.class, StateRecord.class, MapWrapper.class, GenericWrapper.class,\n-                                    Fruit.class, Price.class, DogRecord.class, ItemExtended.class, Book.class, LombokBook.class)\n+                                    Fruit.class, Price.class, DogRecord.class, ItemExtended.class, Book.class, LombokBook.class,\n+                                    PrimitiveTypesBean.class, PrimitiveTypesRecord.class)\n                             .addAsResource(new StringAsset(\"admin-expression=admin\\n\" +\n                                     \"user-expression=user\\n\" +\n                                     \"birth-date-roles=alice,bob\\n\"), \"application.properties\");\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonWithReflectionFreeSerializersTest.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonWithReflectionFreeSerializersTest.java\nindex c5ddf344a4214..34ec11f8700f6 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonWithReflectionFreeSerializersTest.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonWithReflectionFreeSerializersTest.java\n@@ -28,7 +28,8 @@ public JavaArchive get() {\n                                     AbstractUnsecuredPet.class, UnsecuredPet.class, SecuredPersonInterface.class, Frog.class,\n                                     Pond.class, FrogBodyParts.class, FrogBodyParts.BodyPart.class, ContainerDTO.class,\n                                     NestedInterface.class, StateRecord.class, MapWrapper.class, GenericWrapper.class,\n-                                    Fruit.class, Price.class, DogRecord.class, ItemExtended.class, Book.class, LombokBook.class)\n+                                    Fruit.class, Price.class, DogRecord.class, ItemExtended.class, Book.class, LombokBook.class,\n+                                    PrimitiveTypesBean.class, PrimitiveTypesRecord.class)\n                             .addAsResource(new StringAsset(\"admin-expression=admin\\n\" +\n                                     \"user-expression=user\\n\" +\n                                     \"birth-date-roles=alice,bob\\n\" +\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47526",
    "pr_id": 47526,
    "issue_id": 34315,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Support ternary operator in expression\n### Description\r\n\r\nWould be nice if Qute would support the ternary and elvis operator in an expression like this:\r\n\r\n``` \r\n{#let test=\"hallo\"}\r\n        {test == \"hallo\" ? 'yes' : 'no'}\r\n{/}\r\n```\r\n\r\nCurrently it just works if a method is available on the object, like:\r\n\r\n``` \r\n{#let test=\"hallo\"}\r\n        {test.equals(\"hallo\") ? 'yes' : 'no'}\r\n{/}\r\n```\r\n\r\n### Implementation ideas\r\n\r\n_No response_",
    "issue_word_count": 55,
    "test_files_count": 2,
    "non_test_files_count": 6,
    "pr_changed_files": [
      "docs/src/main/asciidoc/qute-reference.adoc",
      "extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/QuteProcessor.java",
      "extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/extensions/ObjectsTemplateExtensionsTest.java",
      "extensions/qute/runtime/src/main/java/io/quarkus/qute/runtime/extensions/ObjectsTemplateExtensions.java",
      "independent-projects/qute/core/src/main/java/io/quarkus/qute/EngineBuilder.java",
      "independent-projects/qute/core/src/main/java/io/quarkus/qute/TemplateExtension.java",
      "independent-projects/qute/core/src/main/java/io/quarkus/qute/ValueResolvers.java",
      "independent-projects/qute/core/src/test/java/io/quarkus/qute/EqualsResolverTest.java"
    ],
    "pr_changed_test_files": [
      "extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/extensions/ObjectsTemplateExtensionsTest.java",
      "independent-projects/qute/core/src/test/java/io/quarkus/qute/EqualsResolverTest.java"
    ],
    "base_commit": "ecfd5855bd563a5e68dcc5668404f78150ad9eea",
    "head_commit": "c0fe20d36b9e0fb1089b5d00c815650effc7ef6b",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47526",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47526",
    "dockerfile": "",
    "pr_merged_at": "2025-04-30T13:22:18.000Z",
    "patch": "diff --git a/docs/src/main/asciidoc/qute-reference.adoc b/docs/src/main/asciidoc/qute-reference.adoc\nindex 5cc37d5057a05..e52fd4df420e4 100644\n--- a/docs/src/main/asciidoc/qute-reference.adoc\n+++ b/docs/src/main/asciidoc/qute-reference.adoc\n@@ -399,28 +399,32 @@ NOTE: The current context can be accessed via the implicit binding `this`.\n |===\n |Name |Description\t|Examples\n \n-|Elvis Operator\n+|Elvis Operator: `?:`\n |Outputs the default value if the previous part cannot be resolved or resolves to `null`.\n |`{person.name ?: 'John'}`, `{person.name or 'John'}`, `{person.name.or('John')}`\n \n-|orEmpty\n+|`orEmpty`\n |Outputs an empty list if the previous part cannot be resolved or resolves to `null`.\n |`{pets.orEmpty.size}` outputs `0` if `pets` is not resolvable or `null`\n \n-|Ternary Operator\n+|Ternary Operator: `condition ? ifTrue : ifFalse`\n |Shorthand for if-then-else statement. Unlike in <<if_section>> nested operators are not supported.\n |`{item.isActive ? item.name : 'Inactive item'}` outputs the value of `item.name` if `item.isActive` resolves to `true`.\n \n-|Logical AND Operator\n+|Logical AND Operator: `&&`\n |Outputs `true` if both parts are not `falsy` as described in the <<if_section>>.\n The parameter is only evaluated if needed.\n |`{person.isActive && person.hasStyle}`\n \n-|Logical OR Operator\n+|Logical OR Operator: `\\|\\|`\n |Outputs `true` if any of the parts is not `falsy` as described in the <<if_section>>.\n The parameter is only evaluated if needed.\n |`{person.isActive \\|\\| person.hasStyle}`\n \n+|Equals Operator: `==`/`eq`/`is`\n+|Outputs `true` if the base object is equal to the argument.\n+|`{obj1 is obj2 ? 'Equal' : 'Inequal'}`, `{obj1 == obj2 ? 'Equal' : 'Inequal'}`, `{obj1.eq(obj2) ? 'Equal' : 'Inequal'}`\n+\n |===\n \n TIP: The condition in a ternary operator evaluates to `true` if the value is not considered `falsy` as described in <<if_section>>.\n@@ -2263,9 +2267,9 @@ NOTE: Superfluous matching conditions are ignored. The conditions sorted by prio\n \n An extension method may declare parameters.\n If no namespace is specified then the first parameter that is not annotated with `@TemplateAttribute` is used to pass the base object, i.e. `org.acme.Item` in the first example.\n-If matching any name or using a regular expression, then a string method parameter needs to be used to pass the property name.\n+If matching any name or using a regular expression, then a string method parameter (not not annotated with `@TemplateAttribute`) needs to be used to pass the property name.\n Parameters annotated with `@TemplateAttribute` are obtained via `TemplateInstance#getAttribute()`.\n-All other parameters are resolved when rendering the template and passed to the extension method.\n+All other parameters are treated as virtual method parameters and resolved when rendering the template and passed to the extension method.\n \n .Multiple Parameters Example\n [source,java]\n@@ -2273,12 +2277,13 @@ All other parameters are resolved when rendering the template and passed to the\n @TemplateExtension\n class BigDecimalExtensions {\n \n-    static BigDecimal scale(BigDecimal val, int scale, RoundingMode mode) { <1>\n+    @TemplateExtension(matchNames = {\"scale\", \"setScale\"})\n+    static BigDecimal scale(BigDecimal val, String ignoredName, int scale, RoundingMode mode) { <1>\n         return val.setScale(scale, mode);\n     }\n }\n ----\n-<1> This method matches an expression with base object of the type `BigDecimal.class`, with the `scale` virtual method name and two virtual method parameters.\n+<1> This method matches an expression with base object of the type `BigDecimal.class`, with the `scale()`/`setScale()` virtual method name and two virtual method parameters - `scale` and `mode`.\n \n [source,html]\n ----\n\ndiff --git a/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/QuteProcessor.java b/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/QuteProcessor.java\nindex 5626e7b972f07..618087a0bec2f 100644\n--- a/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/QuteProcessor.java\n+++ b/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/QuteProcessor.java\n@@ -154,6 +154,7 @@\n import io.quarkus.qute.runtime.extensions.ConfigTemplateExtensions;\n import io.quarkus.qute.runtime.extensions.MapTemplateExtensions;\n import io.quarkus.qute.runtime.extensions.NumberTemplateExtensions;\n+import io.quarkus.qute.runtime.extensions.ObjectsTemplateExtensions;\n import io.quarkus.qute.runtime.extensions.OrOperatorTemplateExtensions;\n import io.quarkus.qute.runtime.extensions.StringTemplateExtensions;\n import io.quarkus.qute.runtime.extensions.TimeTemplateExtensions;\n@@ -284,7 +285,8 @@ AdditionalBeanBuildItem additionalBeans() {\n                 .addBeanClasses(EngineProducer.class, TemplateProducer.class, ContentTypes.class, Template.class,\n                         TemplateInstance.class, CollectionTemplateExtensions.class,\n                         MapTemplateExtensions.class, NumberTemplateExtensions.class, ConfigTemplateExtensions.class,\n-                        TimeTemplateExtensions.class, StringTemplateExtensions.class, OrOperatorTemplateExtensions.class)\n+                        TimeTemplateExtensions.class, StringTemplateExtensions.class, OrOperatorTemplateExtensions.class,\n+                        ObjectsTemplateExtensions.class)\n                 .build();\n     }\n \n@@ -422,7 +424,7 @@ && isNotLocatedByCustomTemplateLocator(locatorPatternsBuildItem.getLocationPatte\n                 }\n                 reservedNames.add(method.name());\n             }\n-            for (ClassInfo recordClass : index.getIndex().getAllKnownImplementors(recordInterfaceName)) {\n+            for (ClassInfo recordClass : index.getIndex().getAllKnownImplementations(recordInterfaceName)) {\n                 if (!recordClass.isRecord()) {\n                     continue;\n                 }\n\ndiff --git a/extensions/qute/runtime/src/main/java/io/quarkus/qute/runtime/extensions/ObjectsTemplateExtensions.java b/extensions/qute/runtime/src/main/java/io/quarkus/qute/runtime/extensions/ObjectsTemplateExtensions.java\nnew file mode 100644\nindex 0000000000000..bbd0b75cbf5a3\n--- /dev/null\n+++ b/extensions/qute/runtime/src/main/java/io/quarkus/qute/runtime/extensions/ObjectsTemplateExtensions.java\n@@ -0,0 +1,16 @@\n+package io.quarkus.qute.runtime.extensions;\n+\n+import java.util.Objects;\n+\n+import jakarta.enterprise.inject.Vetoed;\n+\n+import io.quarkus.qute.TemplateExtension;\n+\n+@Vetoed // Make sure no bean is created from this class\n+public class ObjectsTemplateExtensions {\n+\n+    @TemplateExtension(matchNames = { \"eq\", \"==\", \"is\" })\n+    static boolean eq(Object value, String ignoredName, Object other) {\n+        return Objects.equals(value, other);\n+    }\n+}\n\ndiff --git a/independent-projects/qute/core/src/main/java/io/quarkus/qute/EngineBuilder.java b/independent-projects/qute/core/src/main/java/io/quarkus/qute/EngineBuilder.java\nindex a036ab1d29d60..c1ca0524e6c89 100644\n--- a/independent-projects/qute/core/src/main/java/io/quarkus/qute/EngineBuilder.java\n+++ b/independent-projects/qute/core/src/main/java/io/quarkus/qute/EngineBuilder.java\n@@ -156,7 +156,7 @@ public EngineBuilder addDefaultValueResolvers() {\n                 ValueResolvers.thisResolver(), ValueResolvers.orResolver(), ValueResolvers.trueResolver(),\n                 ValueResolvers.logicalAndResolver(), ValueResolvers.logicalOrResolver(), ValueResolvers.orEmpty(),\n                 ValueResolvers.arrayResolver(), ValueResolvers.plusResolver(), ValueResolvers.minusResolver(),\n-                ValueResolvers.modResolver(), ValueResolvers.numberValueResolver());\n+                ValueResolvers.modResolver(), ValueResolvers.numberValueResolver(), ValueResolvers.equalsResolver());\n     }\n \n     /**\n\ndiff --git a/independent-projects/qute/core/src/main/java/io/quarkus/qute/TemplateExtension.java b/independent-projects/qute/core/src/main/java/io/quarkus/qute/TemplateExtension.java\nindex 5e79e687e7ad6..b058079917529 100644\n--- a/independent-projects/qute/core/src/main/java/io/quarkus/qute/TemplateExtension.java\n+++ b/independent-projects/qute/core/src/main/java/io/quarkus/qute/TemplateExtension.java\n@@ -40,8 +40,7 @@\n  * <h2>Matching by name</h2>\n  *\n  * By default, the method name is used to match the expression property/method name. However, it is possible to specify the\n- * matching name with\n- * {@link #matchName()}.\n+ * matching name with {@link #matchName()}.\n  *\n  * <pre>\n  * {@literal @}TemplateExtension(matchName = \"discounted\")\n@@ -107,18 +106,21 @@\n     int DEFAULT_PRIORITY = 5;\n \n     /**\n+     * If {@link #ANY} is used then an additional string method parameter must be used to pass the actual property name.\n      *\n      * @return the name is used to match the property name\n      */\n     String matchName() default METHOD_NAME;\n \n     /**\n+     * Note that an additional string method parameter must be used to pass the actual property name.\n      *\n      * @return the list of names used to match the property name\n      */\n     String[] matchNames() default {};\n \n     /**\n+     * Note that an additional string method parameter must be used to pass the actual property name.\n      *\n      * @return the regex is used to match the property name\n      */\n\ndiff --git a/independent-projects/qute/core/src/main/java/io/quarkus/qute/ValueResolvers.java b/independent-projects/qute/core/src/main/java/io/quarkus/qute/ValueResolvers.java\nindex d912a9228e7ea..20cfbd8e5d043 100644\n--- a/independent-projects/qute/core/src/main/java/io/quarkus/qute/ValueResolvers.java\n+++ b/independent-projects/qute/core/src/main/java/io/quarkus/qute/ValueResolvers.java\n@@ -9,6 +9,7 @@\n import java.util.Map;\n import java.util.Map.Entry;\n import java.util.NoSuchElementException;\n+import java.util.Objects;\n import java.util.Optional;\n import java.util.concurrent.CompletionStage;\n import java.util.function.Function;\n@@ -525,6 +526,34 @@ protected Object compute(Integer op1, Integer op2) {\n \n     }\n \n+    public static ValueResolver equalsResolver() {\n+        return new EqualsResolver();\n+    }\n+\n+    public static final class EqualsResolver implements ValueResolver {\n+\n+        public boolean appliesTo(EvalContext context) {\n+            if (context.getParams().size() != 1) {\n+                return false;\n+            }\n+            String name = context.getName();\n+            return name.equals(\"==\") || name.equals(\"eq\") || name.equals(\"is\");\n+        }\n+\n+        @Override\n+        public CompletionStage<Object> resolve(EvalContext context) {\n+            Object base = context.getBase();\n+            Expression otherExpr = context.getParams().get(0);\n+            if (otherExpr.isLiteral()) {\n+                Object literalValue = otherExpr.getLiteral();\n+                return CompletedStage.of(Objects.equals(base, literalValue));\n+            } else {\n+                return context.evaluate(otherExpr).thenApply(other -> Objects.equals(base, other));\n+            }\n+        }\n+\n+    }\n+\n     static abstract class IntArithmeticResolver implements ValueResolver {\n \n         public boolean appliesTo(EvalContext context) {\n",
    "test_patch": "diff --git a/extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/extensions/ObjectsTemplateExtensionsTest.java b/extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/extensions/ObjectsTemplateExtensionsTest.java\nnew file mode 100644\nindex 0000000000000..94c78a41a732d\n--- /dev/null\n+++ b/extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/extensions/ObjectsTemplateExtensionsTest.java\n@@ -0,0 +1,43 @@\n+package io.quarkus.qute.deployment.extensions;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.util.function.IntFunction;\n+\n+import jakarta.inject.Inject;\n+\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.qute.Template;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class ObjectsTemplateExtensionsTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .withApplicationRoot(root -> root\n+                    .addAsResource(new StringAsset(\n+                            \"{name == 'hallo' ? 'yes' : 'no'}::{name eq 'hello' ? 'yes' : 'no'}::{name is 'hi' ? 'yes' : 'no'}::{#if name eq 'hallo'}ok{/if}\"\n+                                    + \"::{fun.apply(name eq 'hello' ? 0 : 7)}\"),\n+                            \"templates/foo.html\"));\n+\n+    @Inject\n+    Template foo;\n+\n+    @Test\n+    public void testEquals() {\n+        assertEquals(\"yes::no::no::ok::ok\", foo\n+                .data(\"name\", \"hallo\")\n+                .data(\"fun\", new IntFunction<String>() {\n+\n+                    @Override\n+                    public String apply(int value) {\n+                        return value > 5 ? \"ok\" : \"nok\";\n+                    }\n+                })\n+                .render());\n+    }\n+\n+}\n\ndiff --git a/independent-projects/qute/core/src/test/java/io/quarkus/qute/EqualsResolverTest.java b/independent-projects/qute/core/src/test/java/io/quarkus/qute/EqualsResolverTest.java\nnew file mode 100644\nindex 0000000000000..a76ded531676f\n--- /dev/null\n+++ b/independent-projects/qute/core/src/test/java/io/quarkus/qute/EqualsResolverTest.java\n@@ -0,0 +1,33 @@\n+package io.quarkus.qute;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.util.function.Function;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class EqualsResolverTest {\n+\n+    @Test\n+    public void tesEqualsResolver() {\n+        Engine engine = Engine.builder().addDefaults().addValueResolver(new ReflectionValueResolver()).build();\n+        assertEquals(\"false\",\n+                engine.parse(\"{name eq 'Andy'}\").data(\"name\", \"Martin\").render());\n+        assertEquals(\"true\",\n+                engine.parse(\"{name is 'Andy'}\").data(\"name\", \"Andy\").render());\n+        assertEquals(\"true\",\n+                engine.parse(\"{name == 'Andy'}\").data(\"name\", \"Andy\").render());\n+        assertEquals(\"true\",\n+                engine.parse(\"{negate.apply(name is 'Andy')}\").data(\"name\", \"David\").data(\"negate\", new NegateFun()).render());\n+    }\n+\n+    public static class NegateFun implements Function<Boolean, Boolean> {\n+\n+        @Override\n+        public Boolean apply(Boolean value) {\n+            return !value;\n+        }\n+\n+    }\n+\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47520",
    "pr_id": 47520,
    "issue_id": 47509,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Native application execution failure with @Retry on the class and private methods\n### Describe the bug\n\nHi,\n\na native application fails to start with the following logs:\n```\n2025-04-23 17:43:09,812 ERROR [io.qua.run.Application] (main) Failed to start application: java.lang.RuntimeException: Failed to start quarkus\n        at io.quarkus.runner.ApplicationImpl.doStart(Unknown Source)\n        at io.quarkus.runtime.Application.start(Application.java:101)\n        at io.quarkus.runtime.ApplicationLifecycleManager.run(ApplicationLifecycleManager.java:119)\n        at io.quarkus.runtime.Quarkus.run(Quarkus.java:80)\n        at io.quarkus.runtime.Quarkus.run(Quarkus.java:51)\n        at io.quarkus.runtime.Quarkus.run(Quarkus.java:144)\n        at io.quarkus.runner.GeneratedMain.main(Unknown Source)\nCaused by: jakarta.enterprise.inject.spi.DeploymentException: java.lang.NoSuchMethodException: TestRestryService.myPrivateMethod()\n        at io.quarkus.smallrye.faulttolerance.runtime.SmallRyeFaultToleranceRecorder.createFaultToleranceOperation(SmallRyeFaultToleranceRecorder.java:44)\n        at io.quarkus.runner.recorded.SmallRyeFaultToleranceProcessor$processFaultToleranceAnnotations1222864980.deploy_0(Unknown Source)\n        at io.quarkus.runner.recorded.SmallRyeFaultToleranceProcessor$processFaultToleranceAnnotations1222864980.deploy(Unknown Source)\n        ... 7 more\nCaused by: java.lang.NoSuchMethodException: TestRestryService.myPrivateMethod()\n        at java.base@21.0.6/java.lang.Class.checkMethod(DynamicHub.java:1078)\n        at java.base@21.0.6/java.lang.Class.getDeclaredMethod(DynamicHub.java:1168)\n        at io.smallrye.faulttolerance.autoconfig.MethodDescriptor.reflect(MethodDescriptor.java:28)\n        at io.quarkus.smallrye.faulttolerance.runtime.SmallRyeFaultToleranceRecorder.createFaultToleranceOperation(SmallRyeFaultToleranceRecorder.java:31)\n        ... 9 more\n```\n\nThis is caused by the use of @Retry at class level in a class with a private method.\n\nThanks for the help.\n\n### Expected behavior\n\nThe native application start properly.\n\n### Actual behavior\n\nThe native application fails.\n\n### How to Reproduce?\n\n[code-with-quarkus-native-retry.zip](https://github.com/user-attachments/files/19871880/code-with-quarkus-native-retry.zip)\n\n- build a native executable (with Docker `mvn install -Dnative -DskipTests -Dquarkus.native.container-build=true`)\n- run the native app: ./target/code-with-quarkus-1.0.0-SNAPSHOT-runner\n\n### Output of `uname -a` or `ver`\n\nUbuntu 24.04.2 LTS\n\n### Output of `java -version`\n\nopenjdk version \"21.0.6\" 2025-01-21\n\n### Mandrel or GraalVM version (if different from Java)\n\n_No response_\n\n### Quarkus version or git rev\n\n3.21.3\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nApache Maven 3.8.7\n\n### Additional information\n\n_No response_",
    "issue_word_count": 357,
    "test_files_count": 3,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "extensions/smallrye-fault-tolerance/deployment/src/main/java/io/quarkus/smallrye/faulttolerance/deployment/FaultToleranceScanner.java",
      "integration-tests/main/src/main/java/io/quarkus/it/faulttolerance/FaultToleranceTestResource.java",
      "integration-tests/main/src/main/java/io/quarkus/it/faulttolerance/SecondService.java",
      "integration-tests/main/src/test/java/io/quarkus/it/main/FaultToleranceTestCase.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/main/src/main/java/io/quarkus/it/faulttolerance/FaultToleranceTestResource.java",
      "integration-tests/main/src/main/java/io/quarkus/it/faulttolerance/SecondService.java",
      "integration-tests/main/src/test/java/io/quarkus/it/main/FaultToleranceTestCase.java"
    ],
    "base_commit": "869f9784a22463bfc71f904a87fd5ea0396c7291",
    "head_commit": "bb513628bd50b51a880c8834060fce2ff8204789",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47520",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47520",
    "dockerfile": "",
    "pr_merged_at": "2025-04-24T13:16:10.000Z",
    "patch": "diff --git a/extensions/smallrye-fault-tolerance/deployment/src/main/java/io/quarkus/smallrye/faulttolerance/deployment/FaultToleranceScanner.java b/extensions/smallrye-fault-tolerance/deployment/src/main/java/io/quarkus/smallrye/faulttolerance/deployment/FaultToleranceScanner.java\nindex 473faec9161c3..40b8e62843f27 100644\n--- a/extensions/smallrye-fault-tolerance/deployment/src/main/java/io/quarkus/smallrye/faulttolerance/deployment/FaultToleranceScanner.java\n+++ b/extensions/smallrye-fault-tolerance/deployment/src/main/java/io/quarkus/smallrye/faulttolerance/deployment/FaultToleranceScanner.java\n@@ -1,6 +1,7 @@\n package io.quarkus.smallrye.faulttolerance.deployment;\n \n import java.lang.annotation.Annotation;\n+import java.lang.reflect.Modifier;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashSet;\n@@ -102,6 +103,10 @@ void forEachMethod(ClassInfo clazz, Consumer<MethodInfo> action) {\n                 // synthetic methods can't be intercepted\n                 continue;\n             }\n+            if (Modifier.isPrivate(method.flags())) {\n+                // private methods can't be intercepted\n+                continue;\n+            }\n             if (annotationStore.hasAnnotation(method, io.quarkus.arc.processor.DotNames.NO_CLASS_INTERCEPTORS)\n                     && !annotationStore.hasAnyAnnotation(method, DotNames.FT_ANNOTATIONS)) {\n                 // methods annotated @NoClassInterceptors and not annotated with an interceptor binding are not intercepted\n",
    "test_patch": "diff --git a/integration-tests/main/src/main/java/io/quarkus/it/faulttolerance/FaultToleranceTestResource.java b/integration-tests/main/src/main/java/io/quarkus/it/faulttolerance/FaultToleranceTestResource.java\nindex 02cd7864c7429..fc9d1d9d880bc 100644\n--- a/integration-tests/main/src/main/java/io/quarkus/it/faulttolerance/FaultToleranceTestResource.java\n+++ b/integration-tests/main/src/main/java/io/quarkus/it/faulttolerance/FaultToleranceTestResource.java\n@@ -12,6 +12,9 @@ public class FaultToleranceTestResource {\n     @Inject\n     Service service;\n \n+    @Inject\n+    SecondService secondService;\n+\n     @GET\n     public String getName() {\n         AtomicInteger counter = new AtomicInteger();\n@@ -34,4 +37,10 @@ public String fallback() {\n         String name = service.fallbackMethod(counter);\n         return counter + \":\" + name;\n     }\n+\n+    @GET\n+    @Path(\"/hello\")\n+    public String hello() {\n+        return secondService.publicHello();\n+    }\n }\n\ndiff --git a/integration-tests/main/src/main/java/io/quarkus/it/faulttolerance/SecondService.java b/integration-tests/main/src/main/java/io/quarkus/it/faulttolerance/SecondService.java\nnew file mode 100644\nindex 0000000000000..231b2e5910a20\n--- /dev/null\n+++ b/integration-tests/main/src/main/java/io/quarkus/it/faulttolerance/SecondService.java\n@@ -0,0 +1,17 @@\n+package io.quarkus.it.faulttolerance;\n+\n+import jakarta.enterprise.context.ApplicationScoped;\n+\n+import org.eclipse.microprofile.faulttolerance.Retry;\n+\n+@ApplicationScoped\n+@Retry\n+public class SecondService {\n+    public String publicHello() {\n+        return \"hello\";\n+    }\n+\n+    private String privateHello() {\n+        return \"hello\";\n+    }\n+}\n\ndiff --git a/integration-tests/main/src/test/java/io/quarkus/it/main/FaultToleranceTestCase.java b/integration-tests/main/src/test/java/io/quarkus/it/main/FaultToleranceTestCase.java\nindex 355d2ae1bc917..5c5c10fed48e9 100644\n--- a/integration-tests/main/src/test/java/io/quarkus/it/main/FaultToleranceTestCase.java\n+++ b/integration-tests/main/src/test/java/io/quarkus/it/main/FaultToleranceTestCase.java\n@@ -35,5 +35,10 @@ public void test() throws Exception {\n                 .given().baseUri(uri.toString() + \"/fallback\")\n                 .when().get()\n                 .then().body(is(\"1:fallback\"));\n+\n+        RestAssured\n+                .given().baseUri(uri.toString() + \"/hello\")\n+                .when().get()\n+                .then().body(is(\"hello\"));\n     }\n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47519",
    "pr_id": 47519,
    "issue_id": 43906,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Qute: allow user project (or build-items) to override other templates with same id\n### Description\n\nCurrently having templates with same id result in an exception.\n\nIt would be nice to allow overriding templates provided by extensions or libraries in the Quarkus application.\n\n### Implementation ideas\n\n_No response_",
    "issue_word_count": 46,
    "test_files_count": 4,
    "non_test_files_count": 7,
    "pr_changed_files": [
      "extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/EffectiveTemplatePathsBuildItem.java",
      "extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/QuteDevModeProcessor.java",
      "extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/QuteProcessor.java",
      "extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/TemplatePathBuildItem.java",
      "extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/devui/QuteDevUIProcessor.java",
      "extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/builditemtemplate/AdditionalTemplatePathDuplicatesResolvedTest.java",
      "extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/builditemtemplate/AdditionalTemplatePathDuplicatesTest.java",
      "extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/scanning/DuplicateTemplatesResolvedTest.java",
      "extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/scanning/MultipleTemplatesDirectoryDuplicateFoundTest.java",
      "extensions/qute/runtime/src/main/java/io/quarkus/qute/runtime/EngineProducer.java",
      "extensions/qute/runtime/src/main/java/io/quarkus/qute/runtime/QuteConfig.java"
    ],
    "pr_changed_test_files": [
      "extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/builditemtemplate/AdditionalTemplatePathDuplicatesResolvedTest.java",
      "extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/builditemtemplate/AdditionalTemplatePathDuplicatesTest.java",
      "extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/scanning/DuplicateTemplatesResolvedTest.java",
      "extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/scanning/MultipleTemplatesDirectoryDuplicateFoundTest.java"
    ],
    "base_commit": "0a319864875100db0ca5900c948da8f5032c20dc",
    "head_commit": "cf1f8bb802a54f8bf3486aa267db5742b30d06fc",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47519",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47519",
    "dockerfile": "",
    "pr_merged_at": "2025-04-29T08:20:28.000Z",
    "patch": "diff --git a/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/EffectiveTemplatePathsBuildItem.java b/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/EffectiveTemplatePathsBuildItem.java\nnew file mode 100644\nindex 0000000000000..7e194539e1f4e\n--- /dev/null\n+++ b/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/EffectiveTemplatePathsBuildItem.java\n@@ -0,0 +1,26 @@\n+package io.quarkus.qute.deployment;\n+\n+import java.util.List;\n+\n+import io.quarkus.builder.item.SimpleBuildItem;\n+import io.quarkus.qute.runtime.QuteConfig;\n+\n+/**\n+ * This build item represents all template paths of an application.\n+ * <p>\n+ * If {@link QuteConfig.DuplicitTemplatesStrategy#PRIORITIZE} is used then duplicit template paths with lower priority are not\n+ * included.\n+ */\n+public final class EffectiveTemplatePathsBuildItem extends SimpleBuildItem {\n+\n+    private final List<TemplatePathBuildItem> templatePaths;\n+\n+    EffectiveTemplatePathsBuildItem(List<TemplatePathBuildItem> templatePaths) {\n+        this.templatePaths = templatePaths;\n+    }\n+\n+    public List<TemplatePathBuildItem> getTemplatePaths() {\n+        return templatePaths;\n+    }\n+\n+}\n\ndiff --git a/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/QuteDevModeProcessor.java b/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/QuteDevModeProcessor.java\nindex 40cce54b35177..8653d5695d51a 100644\n--- a/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/QuteDevModeProcessor.java\n+++ b/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/QuteDevModeProcessor.java\n@@ -2,7 +2,6 @@\n \n import java.lang.reflect.Modifier;\n import java.util.HashMap;\n-import java.util.List;\n import java.util.Map;\n import java.util.function.Predicate;\n \n@@ -27,10 +26,10 @@\n public class QuteDevModeProcessor {\n \n     @BuildStep\n-    void collectGeneratedContents(List<TemplatePathBuildItem> templatePaths,\n+    void collectGeneratedContents(EffectiveTemplatePathsBuildItem effectiveTemplatePaths,\n             BuildProducer<ValidationErrorBuildItem> errors) {\n         Map<String, String> contents = new HashMap<>();\n-        for (TemplatePathBuildItem template : templatePaths) {\n+        for (TemplatePathBuildItem template : effectiveTemplatePaths.getTemplatePaths()) {\n             if (!template.isFileBased()) {\n                 contents.put(template.getPath(), template.getContent());\n             }\n\ndiff --git a/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/QuteProcessor.java b/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/QuteProcessor.java\nindex 5626e7b972f07..cbaea274d9b38 100644\n--- a/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/QuteProcessor.java\n+++ b/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/QuteProcessor.java\n@@ -98,6 +98,7 @@\n import io.quarkus.deployment.pkg.builditem.CurateOutcomeBuildItem;\n import io.quarkus.gizmo.ClassOutput;\n import io.quarkus.gizmo.MethodDescriptor;\n+import io.quarkus.logging.Log;\n import io.quarkus.maven.dependency.ArtifactKey;\n import io.quarkus.maven.dependency.DependencyFlags;\n import io.quarkus.maven.dependency.ResolvedDependency;\n@@ -291,7 +292,6 @@ AdditionalBeanBuildItem additionalBeans() {\n     @BuildStep\n     List<CheckedTemplateBuildItem> collectCheckedTemplates(BeanArchiveIndexBuildItem index,\n             BuildProducer<BytecodeTransformerBuildItem> transformers,\n-            List<TemplatePathBuildItem> templatePaths,\n             List<CheckedTemplateAdapterBuildItem> templateAdaptorBuildItems,\n             TemplateFilePathsBuildItem filePaths,\n             CustomTemplateLocatorPatternsBuildItem locatorPatternsBuildItem) {\n@@ -605,7 +605,18 @@ private boolean isNotLocatedByCustomTemplateLocator(\n     }\n \n     @BuildStep\n-    TemplatesAnalysisBuildItem analyzeTemplates(List<TemplatePathBuildItem> templatePaths,\n+    EffectiveTemplatePathsBuildItem collectEffectiveTemplatePaths(QuteConfig config,\n+            List<TemplatePathBuildItem> templatePaths) {\n+        List<TemplatePathBuildItem> effectiveTemplatePaths = switch (config.duplicitTemplatesStrategy()) {\n+            case FAIL -> failOnDuplicatePaths(templatePaths);\n+            case PRIORITIZE -> prioritizeOnDuplicatePaths(templatePaths);\n+            default -> templatePaths;\n+        };\n+        return new EffectiveTemplatePathsBuildItem(List.copyOf(effectiveTemplatePaths));\n+    }\n+\n+    @BuildStep\n+    void analyzeTemplates(EffectiveTemplatePathsBuildItem effectiveTemplatePaths,\n             TemplateFilePathsBuildItem filePaths,\n             List<CheckedTemplateBuildItem> checkedTemplates,\n             List<MessageBundleMethodBuildItem> messageBundleMethods,\n@@ -613,11 +624,10 @@ TemplatesAnalysisBuildItem analyzeTemplates(List<TemplatePathBuildItem> template\n             List<ValidationParserHookBuildItem> validationParserHooks,\n             Optional<EngineConfigurationsBuildItem> engineConfigurations,\n             BeanArchiveIndexBuildItem beanArchiveIndex,\n-            BuildProducer<CheckedFragmentValidationBuildItem> checkedFragmentValidations) {\n+            BuildProducer<CheckedFragmentValidationBuildItem> checkedFragmentValidations,\n+            BuildProducer<TemplatesAnalysisBuildItem> templateAnalysis) {\n         long start = System.nanoTime();\n \n-        checkDuplicatePaths(templatePaths);\n-\n         List<TemplateAnalysis> analysis = new ArrayList<>();\n \n         // A dummy engine instance is used to parse and validate all templates during the build\n@@ -625,7 +635,7 @@ TemplatesAnalysisBuildItem analyzeTemplates(List<TemplatePathBuildItem> template\n         EngineBuilder builder = Engine.builder().addDefaultSectionHelpers();\n \n         // Register user tags\n-        for (TemplatePathBuildItem path : templatePaths) {\n+        for (TemplatePathBuildItem path : effectiveTemplatePaths.getTemplatePaths()) {\n             if (path.isTag()) {\n                 String tagPath = path.getPath();\n                 String tagName = tagPath.substring(TemplatePathBuildItem.TAGS.length(), tagPath.length());\n@@ -685,7 +695,9 @@ public CompletionStage<ResultNode> resolve(SectionResolutionContext context) {\n \n             @Override\n             public Optional<TemplateLocation> locate(String id) {\n-                TemplatePathBuildItem found = templatePaths.stream().filter(p -> p.getPath().equals(id)).findAny().orElse(null);\n+                TemplatePathBuildItem found = effectiveTemplatePaths.getTemplatePaths().stream()\n+                        .filter(p -> p.getPath().equals(id)).findAny()\n+                        .orElse(null);\n                 if (found != null) {\n                     return Optional.of(new TemplateLocation() {\n                         @Override\n@@ -767,7 +779,7 @@ public void beforeParsing(ParserHelper parserHelper) {\n         List<CheckedTemplateBuildItem> checkedFragments = checkedTemplates.stream().filter(CheckedTemplateBuildItem::isFragment)\n                 .collect(Collectors.toList());\n \n-        for (TemplatePathBuildItem path : templatePaths) {\n+        for (TemplatePathBuildItem path : effectiveTemplatePaths.getTemplatePaths()) {\n             Template template = dummyEngine.getTemplate(path.getPath());\n             if (template != null) {\n                 String templateIdWithoutSuffix = templatePathWithoutSuffix(template.getId(), config);\n@@ -802,7 +814,8 @@ public void beforeParsing(ParserHelper parserHelper) {\n \n         LOGGER.debugf(\"Finished analysis of %s templates in %s ms\", analysis.size(),\n                 TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start));\n-        return new TemplatesAnalysisBuildItem(analysis);\n+\n+        templateAnalysis.produce(new TemplatesAnalysisBuildItem(analysis));\n     }\n \n     private String templatePathWithoutSuffix(String path, QuteConfig config) {\n@@ -1915,7 +1928,6 @@ static String findTemplatePath(TemplatesAnalysisBuildItem analysis, String id) {\n     void generateValueResolvers(QuteConfig config, BuildProducer<GeneratedClassBuildItem> generatedClasses,\n             BeanArchiveIndexBuildItem beanArchiveIndex,\n             ApplicationArchivesBuildItem applicationArchivesBuildItem,\n-            List<TemplatePathBuildItem> templatePaths,\n             List<TemplateExtensionMethodBuildItem> templateExtensionMethods,\n             List<ImplicitValueResolverBuildItem> implicitClasses,\n             TemplatesAnalysisBuildItem templatesAnalysis,\n@@ -2224,21 +2236,25 @@ public boolean test(String path) {\n             // Skip extension archives that are also application archives\n             if (!appArtifactKeys.contains(artifact.getKey())) {\n                 scanPathTree(artifact.getContentTree(), templateRoots, watchedPaths, templatePaths, nativeImageResources,\n-                        config, excludePatterns);\n+                        config, excludePatterns, TemplatePathBuildItem.APP_ARCHIVE_PRIORITY);\n             }\n         }\n-        for (ApplicationArchive archive : allApplicationArchives) {\n+        for (ApplicationArchive archive : applicationArchives.getApplicationArchives()) {\n             archive.accept(\n                     tree -> scanPathTree(tree, templateRoots, watchedPaths, templatePaths, nativeImageResources, config,\n-                            excludePatterns));\n+                            excludePatterns, TemplatePathBuildItem.APP_ARCHIVE_PRIORITY));\n         }\n+        applicationArchives.getRootArchive().accept(\n+                tree -> scanPathTree(tree, templateRoots, watchedPaths, templatePaths, nativeImageResources, config,\n+                        excludePatterns, TemplatePathBuildItem.ROOT_ARCHIVE_PRIORITY));\n     }\n \n     private void scanPathTree(PathTree pathTree, TemplateRootsBuildItem templateRoots,\n             BuildProducer<HotDeploymentWatchedFileBuildItem> watchedPaths,\n             BuildProducer<TemplatePathBuildItem> templatePaths,\n             BuildProducer<NativeImageResourceBuildItem> nativeImageResources,\n-            QuteConfig config, List<Pattern> excludePatterns) {\n+            QuteConfig config, List<Pattern> excludePatterns,\n+            int templatePriority) {\n         for (String templateRoot : templateRoots) {\n             if (PathTreeUtils.containsCaseSensitivePath(pathTree, templateRoot)) {\n                 pathTree.walkIfContains(templateRoot, visit -> {\n@@ -2258,7 +2274,7 @@ private void scanPathTree(PathTree pathTree, TemplateRootsBuildItem templateRoot\n                             }\n                         }\n                         produceTemplateBuildItems(templatePaths, watchedPaths, nativeImageResources,\n-                                relativePath, templatePath, visit.getPath(), config);\n+                                relativePath, templatePath, visit.getPath(), config, templatePriority);\n                     }\n                 });\n             }\n@@ -2266,9 +2282,10 @@ private void scanPathTree(PathTree pathTree, TemplateRootsBuildItem templateRoot\n     }\n \n     @BuildStep\n-    TemplateFilePathsBuildItem collectTemplateFilePaths(QuteConfig config, List<TemplatePathBuildItem> templatePaths) {\n+    TemplateFilePathsBuildItem collectTemplateFilePaths(QuteConfig config,\n+            EffectiveTemplatePathsBuildItem effectiveTemplatePaths) {\n         Set<String> filePaths = new HashSet<String>();\n-        for (TemplatePathBuildItem templatePath : templatePaths) {\n+        for (TemplatePathBuildItem templatePath : effectiveTemplatePaths.getTemplatePaths()) {\n             String path = templatePath.getPath();\n             filePaths.add(path);\n             // Also add version without suffix from the path\n@@ -2283,7 +2300,8 @@ TemplateFilePathsBuildItem collectTemplateFilePaths(QuteConfig config, List<Temp\n     }\n \n     @BuildStep\n-    void validateTemplateInjectionPoints(TemplateFilePathsBuildItem filePaths, List<TemplatePathBuildItem> templatePaths,\n+    void validateTemplateInjectionPoints(TemplateFilePathsBuildItem filePaths,\n+            EffectiveTemplatePathsBuildItem effectiveTemplatePaths,\n             ValidationPhaseBuildItem validationPhase, BuildProducer<ValidationErrorBuildItem> validationErrors,\n             CustomTemplateLocatorPatternsBuildItem locatorPatternsBuildItem) {\n \n@@ -2309,8 +2327,10 @@ && isNotLocatedByCustomTemplateLocator(locatorPatternsBuildItem.getLocationPatte\n                                 new TemplateException(\n                                         String.format(\n                                                 \"No template found for path [%s] defined at %s\\n\\t- available templates: %s\",\n-                                                name, injectionPoint.getTargetInfo(), templatePaths.stream()\n-                                                        .map(TemplatePathBuildItem::getPath).collect(Collectors.toList())))));\n+                                                name, injectionPoint.getTargetInfo(),\n+                                                effectiveTemplatePaths.getTemplatePaths().stream()\n+                                                        .map(TemplatePathBuildItem::getPath)\n+                                                        .collect(Collectors.toList())))));\n                     }\n                 }\n             }\n@@ -2439,9 +2459,10 @@ private void reportFoundInvalidTarget(BuildProducer<ValidationErrorBuildItem> va\n     }\n \n     @BuildStep\n-    TemplateVariantsBuildItem collectTemplateVariants(List<TemplatePathBuildItem> templatePaths, QuteConfig config)\n+    TemplateVariantsBuildItem collectTemplateVariants(EffectiveTemplatePathsBuildItem effectiveTemplatePaths, QuteConfig config)\n             throws IOException {\n-        Set<String> allPaths = templatePaths.stream().map(TemplatePathBuildItem::getPath).collect(Collectors.toSet());\n+        Set<String> allPaths = effectiveTemplatePaths.getTemplatePaths().stream().map(TemplatePathBuildItem::getPath)\n+                .collect(Collectors.toSet());\n         // Variants are usually used when injecting a template, e.g. @Inject Template foo\n         // In this case, the suffix may not specified but the correct template may be selected based on a matching variant\n         // For example, the HTTP Accept header may be used to find a matching variant\n@@ -2579,13 +2600,13 @@ void collecTemplateContents(BeanArchiveIndexBuildItem index, List<CheckedTemplat\n     @BuildStep\n     @Record(value = STATIC_INIT)\n     void initialize(BuildProducer<SyntheticBeanBuildItem> syntheticBeans, QuteRecorder recorder,\n-            List<TemplatePathBuildItem> templatePaths, Optional<TemplateVariantsBuildItem> templateVariants,\n+            EffectiveTemplatePathsBuildItem effectiveTemplatePaths, Optional<TemplateVariantsBuildItem> templateVariants,\n             TemplateRootsBuildItem templateRoots, List<TemplatePathExcludeBuildItem> templatePathExcludes) {\n \n         List<String> templates = new ArrayList<>();\n         List<String> tags = new ArrayList<>();\n         Map<String, String> templateContents = new HashMap<>();\n-        for (TemplatePathBuildItem templatePath : templatePaths) {\n+        for (TemplatePathBuildItem templatePath : effectiveTemplatePaths.getTemplatePaths()) {\n             if (templatePath.isTag()) {\n                 // tags/myTag.html -> myTag.html\n                 String tagPath = templatePath.getPath();\n@@ -3596,7 +3617,7 @@ public static String getName(InjectionPointInfo injectionPoint) {\n     private static void produceTemplateBuildItems(BuildProducer<TemplatePathBuildItem> templatePaths,\n             BuildProducer<HotDeploymentWatchedFileBuildItem> watchedPaths,\n             BuildProducer<NativeImageResourceBuildItem> nativeImageResources, String resourcePath,\n-            String templatePath, Path originalPath, QuteConfig config) {\n+            String templatePath, Path originalPath, QuteConfig config, int templatePriority) {\n         if (templatePath.isEmpty()) {\n             return;\n         }\n@@ -3613,7 +3634,9 @@ private static void produceTemplateBuildItems(BuildProducer<TemplatePathBuildIte\n         templatePaths.produce(TemplatePathBuildItem.builder()\n                 .path(templatePath)\n                 .fullPath(originalPath)\n-                .content(readTemplateContent(originalPath, config.defaultCharset())).build());\n+                .priority(templatePriority)\n+                .content(readTemplateContent(originalPath, config.defaultCharset()))\n+                .build());\n     }\n \n     private static boolean isExcluded(TypeCheck check, Iterable<Predicate<TypeCheck>> excludes) {\n@@ -3625,7 +3648,7 @@ private static boolean isExcluded(TypeCheck check, Iterable<Predicate<TypeCheck>\n         return false;\n     }\n \n-    private void checkDuplicatePaths(List<TemplatePathBuildItem> templatePaths) {\n+    private List<TemplatePathBuildItem> failOnDuplicatePaths(List<TemplatePathBuildItem> templatePaths) {\n         Map<String, List<TemplatePathBuildItem>> duplicates = templatePaths.stream()\n                 .collect(Collectors.groupingBy(TemplatePathBuildItem::getPath));\n         for (Iterator<List<TemplatePathBuildItem>> it = duplicates.values().iterator(); it.hasNext();) {\n@@ -3635,15 +3658,63 @@ private void checkDuplicatePaths(List<TemplatePathBuildItem> templatePaths) {\n             }\n         }\n         if (!duplicates.isEmpty()) {\n-            StringBuilder builder = new StringBuilder(\"Duplicate templates found:\");\n-            for (Entry<String, List<TemplatePathBuildItem>> e : duplicates.entrySet()) {\n-                builder.append(\"\\n\\t- \")\n-                        .append(e.getKey())\n-                        .append(\": \")\n-                        .append(e.getValue().stream().map(TemplatePathBuildItem::getSourceInfo).collect(Collectors.toList()));\n+            throw newDuplicateError(duplicates);\n+        }\n+        return templatePaths;\n+    }\n+\n+    private List<TemplatePathBuildItem> prioritizeOnDuplicatePaths(List<TemplatePathBuildItem> templatePaths) {\n+        Map<String, List<TemplatePathBuildItem>> groupedByPath = templatePaths.stream()\n+                .collect(Collectors.groupingBy(TemplatePathBuildItem::getPath));\n+        List<TemplatePathBuildItem> toRemove = new ArrayList<>();\n+        for (Iterator<List<TemplatePathBuildItem>> it = groupedByPath.values().iterator(); it.hasNext();) {\n+            List<TemplatePathBuildItem> paths = it.next();\n+            if (paths.isEmpty() || paths.size() == 1) {\n+                it.remove();\n+            } else {\n+                // Try to resolve the ambiguity...\n+                // First sort the templates, higher priority goes first\n+                List<TemplatePathBuildItem> sorted = new ArrayList<>(paths);\n+                sorted.sort(Comparator.comparingInt(TemplatePathBuildItem::getPriority).reversed());\n+                if (sorted.get(0).getPriority() > sorted.get(1).getPriority()) {\n+                    // Ambiguity resolved - templates with lower priority must be removed\n+                    List<TemplatePathBuildItem> ignored = sorted.subList(1, sorted.size());\n+                    Log.debugf(\"Duplicity resolved: %s is used, templates ignored:\\n\\t- %s\", sorted.get(0).getSourceInfo(),\n+                            ignored.stream().map(TemplatePathBuildItem::getSourceInfo).collect(Collectors.joining(\"\\n\\t- \")));\n+                    it.remove();\n+                    ignored.forEach(toRemove::add);\n+                }\n+            }\n+        }\n+        if (!groupedByPath.isEmpty()) {\n+            // Unresolvable duplicates found\n+            throw newDuplicateError(groupedByPath);\n+        }\n+        if (!toRemove.isEmpty()) {\n+            // Some ambiguities were resolved\n+            List<TemplatePathBuildItem> effective = new ArrayList<>(templatePaths);\n+            for (Iterator<TemplatePathBuildItem> it = effective.iterator(); it.hasNext();) {\n+                TemplatePathBuildItem template = it.next();\n+                for (TemplatePathBuildItem remove : toRemove) {\n+                    if (template == remove) {\n+                        it.remove();\n+                    }\n+                }\n             }\n-            throw new IllegalStateException(builder.toString());\n+            return effective;\n+        }\n+        return templatePaths;\n+    }\n+\n+    private IllegalStateException newDuplicateError(Map<String, List<TemplatePathBuildItem>> groupedByPath) {\n+        StringBuilder builder = new StringBuilder(\"Duplicate templates found:\");\n+        for (Entry<String, List<TemplatePathBuildItem>> e : groupedByPath.entrySet()) {\n+            builder.append(\"\\n\\t- \")\n+                    .append(e.getKey())\n+                    .append(\": \")\n+                    .append(e.getValue().stream().map(TemplatePathBuildItem::getSourceInfo).collect(Collectors.toList()));\n         }\n+        return new IllegalStateException(builder.toString());\n     }\n \n     static String readTemplateContent(Path path, Charset defaultCharset) {\n\ndiff --git a/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/TemplatePathBuildItem.java b/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/TemplatePathBuildItem.java\nindex eaa113941153e..7704a19aac7f3 100644\n--- a/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/TemplatePathBuildItem.java\n+++ b/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/TemplatePathBuildItem.java\n@@ -4,6 +4,7 @@\n import java.util.Objects;\n \n import io.quarkus.builder.item.MultiBuildItem;\n+import io.quarkus.qute.runtime.QuteConfig;\n \n /**\n  * Discovered template.\n@@ -11,10 +12,30 @@\n  * Templates backed by files located in a template root are discovered automatically. Furthermore, extensions can produce this\n  * build item in order to provide a template that is not backed by a file.\n  *\n+ * <h2>Warning</h2>\n+ *\n+ * Extensions should never <i>consume</i> this build item directly. However, they may consume the\n+ * {@link EffectiveTemplatePathsBuildItem} instead.\n+ *\n  * @see TemplateRootBuildItem\n  */\n public final class TemplatePathBuildItem extends MultiBuildItem {\n \n+    /**\n+     * The priority used for templates from the root application archive.\n+     */\n+    public static final int ROOT_ARCHIVE_PRIORITY = 30;\n+\n+    /**\n+     * The default priority used for templates that are not backed by a file.\n+     */\n+    public static final int BUILD_ITEM_PRIORITY = 20;\n+\n+    /**\n+     * The priority used for templates from non-root application archives.\n+     */\n+    public static final int APP_ARCHIVE_PRIORITY = 10;\n+\n     /**\n      *\n      * @return a new builder instance\n@@ -30,6 +51,8 @@ public static Builder builder() {\n     private final Path fullPath;\n     private final String extensionInfo;\n \n+    private final int priority;\n+\n     /**\n      *\n      * @param path\n@@ -37,16 +60,18 @@ public static Builder builder() {\n      * @param content\n      * @deprecated Use the {@link #builder()} instead\n      */\n-    @Deprecated\n+    @Deprecated(forRemoval = true, since = \"3.13\")\n     public TemplatePathBuildItem(String path, Path fullPath, String content) {\n-        this(Objects.requireNonNull(path), Objects.requireNonNull(content), Objects.requireNonNull(fullPath), null);\n+        this(Objects.requireNonNull(path), Objects.requireNonNull(content), Objects.requireNonNull(fullPath), null,\n+                BUILD_ITEM_PRIORITY);\n     }\n \n-    private TemplatePathBuildItem(String path, String content, Path fullPath, String extensionInfo) {\n+    private TemplatePathBuildItem(String path, String content, Path fullPath, String extensionInfo, int priority) {\n         this.path = path;\n         this.content = content;\n         this.fullPath = fullPath;\n         this.extensionInfo = extensionInfo;\n+        this.priority = priority;\n     }\n \n     /**\n@@ -86,6 +111,15 @@ public String getExtensionInfo() {\n         return extensionInfo;\n     }\n \n+    /**\n+     * Templates with higher priority take precedence when duplicates are found.\n+     *\n+     * @return the priority\n+     */\n+    public int getPriority() {\n+        return priority;\n+    }\n+\n     /**\n      *\n      * @return {@code true} if it represents a user tag, {@code false} otherwise\n@@ -111,7 +145,7 @@ public boolean isFileBased() {\n     }\n \n     public String getSourceInfo() {\n-        return isFileBased() ? getFullPath().toString() : extensionInfo;\n+        return (isFileBased() ? getFullPath().toString() : extensionInfo) + \" [\" + getPriority() + \"]\";\n     }\n \n     public static class Builder {\n@@ -120,6 +154,7 @@ public static class Builder {\n         private String content;\n         private Path fullPath;\n         private String extensionInfo;\n+        private int priority = BUILD_ITEM_PRIORITY;\n \n         /**\n          * Set the path relative to the template root. The {@code /} is used as a path separator.\n@@ -168,11 +203,23 @@ public Builder extensionInfo(String info) {\n             return this;\n         }\n \n+        /**\n+         * Set the priority of the template.\n+         *\n+         * @param priority\n+         * @return self\n+         * @see QuteConfig#duplicitTemplatesStrategy()\n+         */\n+        public Builder priority(int priority) {\n+            this.priority = priority;\n+            return this;\n+        }\n+\n         public TemplatePathBuildItem build() {\n             if (fullPath == null && extensionInfo == null) {\n                 throw new IllegalStateException(\"Templates that are not backed by a file must provide extension info\");\n             }\n-            return new TemplatePathBuildItem(path, content, fullPath, extensionInfo);\n+            return new TemplatePathBuildItem(path, content, fullPath, extensionInfo, priority);\n         }\n \n     }\n\ndiff --git a/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/devui/QuteDevUIProcessor.java b/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/devui/QuteDevUIProcessor.java\nindex 0ab61fe44795e..6c01d8efafb0c 100644\n--- a/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/devui/QuteDevUIProcessor.java\n+++ b/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/devui/QuteDevUIProcessor.java\n@@ -20,6 +20,7 @@\n import io.quarkus.devui.spi.page.Page;\n import io.quarkus.qute.ParameterDeclaration;\n import io.quarkus.qute.deployment.CheckedTemplateBuildItem;\n+import io.quarkus.qute.deployment.EffectiveTemplatePathsBuildItem;\n import io.quarkus.qute.deployment.ImplicitValueResolverBuildItem;\n import io.quarkus.qute.deployment.TemplateDataBuildItem;\n import io.quarkus.qute.deployment.TemplateExtensionMethodBuildItem;\n@@ -33,7 +34,7 @@ public class QuteDevUIProcessor {\n \n     @BuildStep(onlyIf = IsDevelopment.class)\n     public void pages(\n-            List<TemplatePathBuildItem> templatePaths,\n+            EffectiveTemplatePathsBuildItem effectiveTemplatePaths,\n             List<CheckedTemplateBuildItem> checkedTemplates,\n             TemplateVariantsBuildItem variants,\n             TemplatesAnalysisBuildItem templatesAnalysis,\n@@ -45,7 +46,7 @@ public void pages(\n \n         CardPageBuildItem pageBuildItem = new CardPageBuildItem();\n \n-        List<TemplatePathBuildItem> sortedTemplatePaths = templatePaths.stream()\n+        List<TemplatePathBuildItem> sortedTemplatePaths = effectiveTemplatePaths.getTemplatePaths().stream()\n                 .sorted(Comparator.comparing(tp -> tp.getPath().toLowerCase())).collect(Collectors.toList());\n         pageBuildItem.addBuildTimeData(\"templates\",\n                 createTemplatesJson(sortedTemplatePaths, checkedTemplates, templatesAnalysis, variants));\n\ndiff --git a/extensions/qute/runtime/src/main/java/io/quarkus/qute/runtime/EngineProducer.java b/extensions/qute/runtime/src/main/java/io/quarkus/qute/runtime/EngineProducer.java\nindex a09d9e85d1585..c730bf2ec19be 100644\n--- a/extensions/qute/runtime/src/main/java/io/quarkus/qute/runtime/EngineProducer.java\n+++ b/extensions/qute/runtime/src/main/java/io/quarkus/qute/runtime/EngineProducer.java\n@@ -82,7 +82,6 @@ public class EngineProducer {\n \n     private final Engine engine;\n     private final ContentTypes contentTypes;\n-    private final List<String> tags;\n     private final List<String> suffixes;\n     private final Set<String> templateRoots;\n     private final Map<String, String> templateContents;\n@@ -100,7 +99,6 @@ public EngineProducer(QuteContext context, QuteConfig config, QuteRuntimeConfig\n         this.suffixes = config.suffixes();\n         this.templateRoots = context.getTemplateRoots();\n         this.templateContents = Map.copyOf(context.getTemplateContents());\n-        this.tags = context.getTags();\n         this.defaultLocale = locales.defaultLocale().orElse(Locale.getDefault());\n         this.defaultCharset = config.defaultCharset();\n         this.container = Arc.container();\n@@ -112,7 +110,8 @@ public EngineProducer(QuteContext context, QuteConfig config, QuteRuntimeConfig\n         }\n         this.templatePathExcludes = excludesBuilder.build();\n \n-        LOGGER.debugf(\"Initializing Qute [templates: %s, tags: %s, resolvers: %s\", context.getTemplatePaths(), tags,\n+        LOGGER.debugf(\"Initializing Qute [templates: %s, tags: %s, resolvers: %s\", context.getTemplatePaths(),\n+                context.getTags(),\n                 context.getResolverClasses());\n \n         EngineBuilder builder = Engine.builder();\n@@ -219,7 +218,7 @@ public EngineProducer(QuteContext context, QuteConfig config, QuteRuntimeConfig\n             LOGGER.debugf(\"Added generated value resolver: %s\", resolverClass);\n         }\n         // Add tags\n-        for (String tag : tags) {\n+        for (String tag : context.getTags()) {\n             // Strip suffix, item.html -> item\n             String tagName = tag.contains(\".\") ? tag.substring(0, tag.indexOf('.')) : tag;\n             String tagTemplateId = TAGS + tagName;\n@@ -375,7 +374,27 @@ private Optional<TemplateLocation> locate(String path) {\n         if (isExcluded(path)) {\n             return Optional.empty();\n         }\n-        // First try to locate file-based templates\n+        // First try the template contents, i.e. templates not backed by files\n+        LOGGER.debugf(\"Locate template contents for %s\", path);\n+        String content = templateContents.get(path);\n+        if (content == null) {\n+            // Try path with suffixes\n+            for (String suffix : suffixes) {\n+                String pathWithSuffix = path + \".\" + suffix;\n+                if (isExcluded(pathWithSuffix)) {\n+                    continue;\n+                }\n+                content = templateContents.get(pathWithSuffix);\n+                if (content != null) {\n+                    break;\n+                }\n+            }\n+        }\n+        if (content != null) {\n+            return Optional.of(new ContentTemplateLocation(content, createVariant(path)));\n+        }\n+\n+        // Then try to locate file-based templates\n         for (String templateRoot : templateRoots) {\n             URL resource = null;\n             String templatePath = templateRoot + path;\n@@ -399,25 +418,7 @@ private Optional<TemplateLocation> locate(String path) {\n                 return Optional.of(new ResourceTemplateLocation(resource, createVariant(templatePath)));\n             }\n         }\n-        // Then try the template contents\n-        LOGGER.debugf(\"Locate template contents for %s\", path);\n-        String content = templateContents.get(path);\n-        if (content == null) {\n-            // Try path with suffixes\n-            for (String suffix : suffixes) {\n-                String pathWithSuffix = path + \".\" + suffix;\n-                if (isExcluded(pathWithSuffix)) {\n-                    continue;\n-                }\n-                content = templateContents.get(pathWithSuffix);\n-                if (content != null) {\n-                    break;\n-                }\n-            }\n-        }\n-        if (content != null) {\n-            return Optional.of(new ContentTemplateLocation(content, createVariant(path)));\n-        }\n+\n         return Optional.empty();\n     }\n \n\ndiff --git a/extensions/qute/runtime/src/main/java/io/quarkus/qute/runtime/QuteConfig.java b/extensions/qute/runtime/src/main/java/io/quarkus/qute/runtime/QuteConfig.java\nindex 63049f991e827..c37d7476df939 100644\n--- a/extensions/qute/runtime/src/main/java/io/quarkus/qute/runtime/QuteConfig.java\n+++ b/extensions/qute/runtime/src/main/java/io/quarkus/qute/runtime/QuteConfig.java\n@@ -89,6 +89,12 @@ public interface QuteConfig {\n     @WithDefault(\"UTF-8\")\n     Charset defaultCharset();\n \n+    /**\n+     * The strategy used when multiple templates with the same path are found in the application.\n+     */\n+    @WithDefault(\"PRIORITIZE\")\n+    DuplicitTemplatesStrategy duplicitTemplatesStrategy();\n+\n     /**\n      * Development mode configuration.\n      */\n@@ -99,4 +105,23 @@ public interface QuteConfig {\n      */\n     QuteTestModeConfig testMode();\n \n+    public enum DuplicitTemplatesStrategy {\n+\n+        /**\n+         * If multiple templates with the same path are found then determine the highest priority value and eliminate all\n+         * templates with lowest priority. If there is exactly one template remaining then use this template. Otherwise, fail\n+         * the build.\n+         * <p>\n+         * Templates from the root application archive have the priority {@code 30}. Templates from other application archives\n+         * have the priority {@code 10}. Templates from build items can define any priority.\n+         */\n+        PRIORITIZE,\n+\n+        /**\n+         * Fail the build if multiple templates with the same path are found.\n+         */\n+        FAIL,\n+\n+    }\n+\n }\n",
    "test_patch": "diff --git a/extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/builditemtemplate/AdditionalTemplatePathDuplicatesResolvedTest.java b/extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/builditemtemplate/AdditionalTemplatePathDuplicatesResolvedTest.java\nnew file mode 100644\nindex 0000000000000..763e29ec72213\n--- /dev/null\n+++ b/extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/builditemtemplate/AdditionalTemplatePathDuplicatesResolvedTest.java\n@@ -0,0 +1,58 @@\n+package io.quarkus.qute.deployment.builditemtemplate;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.util.function.Consumer;\n+\n+import jakarta.inject.Inject;\n+\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.builder.BuildChainBuilder;\n+import io.quarkus.builder.BuildContext;\n+import io.quarkus.builder.BuildStep;\n+import io.quarkus.qute.Template;\n+import io.quarkus.qute.deployment.TemplatePathBuildItem;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class AdditionalTemplatePathDuplicatesResolvedTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .withApplicationRoot(root -> root\n+                    .addAsResource(new StringAsset(\"Hi {name}!\"), \"templates/hi.txt\"))\n+            .addBuildChainCustomizer(buildCustomizer());\n+\n+    static Consumer<BuildChainBuilder> buildCustomizer() {\n+        return new Consumer<BuildChainBuilder>() {\n+            @Override\n+            public void accept(BuildChainBuilder builder) {\n+                builder.addBuildStep(new BuildStep() {\n+                    @Override\n+                    public void execute(BuildContext context) {\n+                        context.produce(TemplatePathBuildItem.builder()\n+                                .path(\"hi.txt\")\n+                                .extensionInfo(\"test-ext\")\n+                                .content(\"Hello {name}!\")\n+                                .priority(100)\n+                                .build());\n+                    }\n+                }).produces(TemplatePathBuildItem.class)\n+                        .build();\n+\n+            }\n+        };\n+    }\n+\n+    @Inject\n+    Template hi;\n+\n+    @Test\n+    public void testHi() {\n+        // Build item with higher priority takes precedence\n+        assertEquals(\"Hello Lu!\", hi.data(\"name\", \"Lu\").render());\n+    }\n+\n+}\n\ndiff --git a/extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/builditemtemplate/AdditionalTemplatePathDuplicatesTest.java b/extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/builditemtemplate/AdditionalTemplatePathDuplicatesTest.java\nindex 4f2ac577bfa09..0a8781bda57ae 100644\n--- a/extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/builditemtemplate/AdditionalTemplatePathDuplicatesTest.java\n+++ b/extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/builditemtemplate/AdditionalTemplatePathDuplicatesTest.java\n@@ -20,6 +20,7 @@ public class AdditionalTemplatePathDuplicatesTest {\n     static final QuarkusUnitTest config = new QuarkusUnitTest()\n             .withApplicationRoot(root -> root\n                     .addAsResource(new StringAsset(\"Hi {name}!\"), \"templates/hi.txt\"))\n+            .overrideConfigKey(\"quarkus.qute.duplicit-templates-strategy\", \"fail\")\n             .addBuildChainCustomizer(buildCustomizer())\n             .setExpectedException(IllegalStateException.class, true);\n \n\ndiff --git a/extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/scanning/DuplicateTemplatesResolvedTest.java b/extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/scanning/DuplicateTemplatesResolvedTest.java\nnew file mode 100644\nindex 0000000000000..b276934547b9a\n--- /dev/null\n+++ b/extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/scanning/DuplicateTemplatesResolvedTest.java\n@@ -0,0 +1,31 @@\n+package io.quarkus.qute.deployment.scanning;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import jakarta.inject.Inject;\n+\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.qute.Template;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DuplicateTemplatesResolvedTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .withApplicationRoot(root -> root.addAsResource(new StringAsset(\"Hello!\"), \"templates/hello.html\"))\n+            .withAdditionalDependency(\n+                    d -> d.addAsResource(new StringAsset(\"Hi!\"), \"templates/hello.html\"));\n+\n+    @Inject\n+    Template hello;\n+\n+    @Test\n+    public void testHello() {\n+        // Root archive takes precedence\n+        assertEquals(\"Hello!\", hello.render());\n+    }\n+\n+}\n\ndiff --git a/extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/scanning/MultipleTemplatesDirectoryDuplicateFoundTest.java b/extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/scanning/MultipleTemplatesDirectoryDuplicateFoundTest.java\nindex 9e1c13a1128a9..f269cddc596c5 100644\n--- a/extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/scanning/MultipleTemplatesDirectoryDuplicateFoundTest.java\n+++ b/extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/scanning/MultipleTemplatesDirectoryDuplicateFoundTest.java\n@@ -17,6 +17,7 @@ public class MultipleTemplatesDirectoryDuplicateFoundTest {\n             .withApplicationRoot(root -> root.addAsResource(new StringAsset(\"Hello!\"), \"templates/hello.html\"))\n             .withAdditionalDependency(\n                     d -> d.addAsResource(new StringAsset(\"Hi!\"), \"templates/hello.html\"))\n+            .overrideConfigKey(\"quarkus.qute.duplicit-templates-strategy\", \"fail\")\n             .assertException(t -> {\n                 Throwable e = t;\n                 IllegalStateException ise = null;\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47513",
    "pr_id": 47513,
    "issue_id": 38562,
    "repo": "quarkusio/quarkus",
    "problem_statement": "improve rest client exception for method lacking annotations\n### Description\n\n\r\nI have this:\r\n```\r\n@GET\r\n    @Path(\"/streams/{id}\")\r\n    public StreamResponse getStream(Integer id); \r\n\r\n    @GET\r\n    @Path(\"/messages\")\r\n    public MessageResponse getMessagesForTopic(int anchor, int num_before, int num_after, List<Narrow> narrows, boolean apply_markdown);\r\n```\r\n\r\n...and I get this noninformative error leaving user guessing what its missing... (in this case that no parameters has @RestQuery or similar annotation afaics)\r\n\r\n```\r\nava.lang.RuntimeException: Error injecting io.quarkus.bot.zulip.ZulipRestClient io.quarkus.bot.zulip.ZulipClient.zulipRestClient\r\n        at io.quarkus.bot.zulip.ZulipClient_Bean.doCreate(Unknown Source)\r\n        at io.quarkus.bot.zulip.ZulipClient_Bean.create(Unknown Source)\r\n        at io.quarkus.bot.zulip.ZulipClient_Bean.create(Unknown Source)\r\n        at io.quarkus.arc.impl.AbstractSharedContext.createInstanceHandle(AbstractSharedContext.java:119)\r\n        at io.quarkus.arc.impl.AbstractSharedContext$1.get(AbstractSharedContext.java:38)\r\n        at io.quarkus.arc.impl.AbstractSharedContext$1.get(AbstractSharedContext.java:35)\r\n        at io.quarkus.arc.generator.Default_jakarta_enterprise_context_ApplicationScoped_ContextInstances.c16(Unknown Source)\r\n        at io.quarkus.arc.generator.Default_jakarta_enterprise_context_ApplicationScoped_ContextInstances.computeIfAbsent(Unknown Source)\r\n        at io.quarkus.arc.impl.AbstractSharedContext.get(AbstractSharedContext.java:35)\r\n        at io.quarkus.arc.impl.ClientProxies.getApplicationScopedDelegate(ClientProxies.java:21)\r\n        at io.quarkus.bot.zulip.ZulipClient_ClientProxy.arc$delegate(Unknown Source)\r\n        at io.quarkus.bot.zulip.ZulipClient_ClientProxy.addEmojiReaction(Unknown Source)\r\n        at io.quarkus.bot.zulip.ZulipBot.onWebhook(ZulipBot.java:45)\r\n        at io.quarkus.bot.zulip.ZulipBot$quarkusrestinvoker$onWebhook_b967d6a1fba85cea472816cc34067be46cc78eff.invoke(Unknown Source)\r\n        at org.jboss.resteasy.reactive.server.handlers.InvocationHandler.handle(InvocationHandler.java:29)\r\n        at io.quarkus.resteasy.reactive.server.runtime.QuarkusResteasyReactiveRequestContext.invokeHandler(QuarkusResteasyReactiveRequestContext.java:141)\r\n        at org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext.run(AbstractResteasyReactiveContext.java:147)\r\n        at io.quarkus.vertx.core.runtime.VertxCoreRecorder$14.runWith(VertxCoreRecorder.java:582)\r\n        at org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2513)\r\n        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1538)\r\n        at org.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:29)\r\n        at org.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:29)\r\n        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n        at java.base/java.lang.Thread.run(Thread.java:833)\r\nCaused by: org.eclipse.microprofile.rest.client.RestClientDefinitionException: org.jboss.resteasy.reactive.client.api.InvalidRestClientDefinitionException: Failed to generate client for class interface io.quarkus.bot.zulip.ZulipRestClient : Failed to process method 'io.quarkus.bot.zulip.ZulipRestClient#getMessagesForTopic'\r\n        at io.quarkus.rest.client.reactive.runtime.RestClientBuilderImpl.build(RestClientBuilderImpl.java:417)\r\n        at io.quarkus.rest.client.reactive.runtime.QuarkusRestClientBuilderImpl.build(QuarkusRestClientBuilderImpl.java:242)\r\n        at io.quarkus.rest.client.reactive.runtime.RestClientCDIDelegateBuilder.build(RestClientCDIDelegateBuilder.java:62)\r\n        at io.quarkus.rest.client.reactive.runtime.RestClientCDIDelegateBuilder.createDelegate(RestClientCDIDelegateBuilder.java:44)\r\n        at io.quarkus.rest.client.reactive.runtime.RestClientReactiveCDIWrapperBase.delegate(RestClientReactiveCDIWrapperBase.java:76)\r\n        at io.quarkus.rest.client.reactive.runtime.RestClientReactiveCDIWrapperBase.<init>(RestClientReactiveCDIWrapperBase.java:30)\r\n        at io.quarkus.bot.zulip.ZulipRestClient$$CDIWrapper.<init>(Unknown Source)\r\n        at io.quarkus.bot.zulip.ZulipRestClient$$CDIWrapper_ClientProxy.<init>(Unknown Source)\r\n        at io.quarkus.bot.zulip.ZulipRestClient$$CDIWrapper_Bean.proxy(Unknown Source)\r\n        at io.quarkus.bot.zulip.ZulipRestClient$$CDIWrapper_Bean.get(Unknown Source)\r\n        at io.quarkus.bot.zulip.ZulipRestClient$$CDIWrapper_Bean.get(Unknown Source)\r\n        ... 24 more\r\nCaused by: org.jboss.resteasy.reactive.client.api.InvalidRestClientDefinitionException: Failed to generate client for class interface io.quarkus.bot.zulip.ZulipRestClient : Failed to process method 'io.quarkus.bot.zulip.ZulipRestClient#getMessagesForTopic'\r\n        at org.jboss.resteasy.reactive.client.impl.ClientProxies.get(ClientProxies.java:29)\r\n        at org.jboss.resteasy.reactive.client.impl.WebTargetImpl.proxy(WebTargetImpl.java:449)\r\n        at io.quarkus.rest.client.reactive.runtime.RestClientBuilderImpl.build(RestClientBuilderImpl.java:415)\r\n        ... 34 more\r\n\r\n```\n\n### Implementation ideas\n\n_No response_",
    "issue_word_count": 555,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/ClientMultipleBodyParamLogMessageTest.java",
      "independent-projects/resteasy-reactive/client/processor/src/main/java/org/jboss/resteasy/reactive/client/processor/scanning/ClientEndpointIndexer.java",
      "independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/EndpointIndexer.java"
    ],
    "pr_changed_test_files": [
      "extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/ClientMultipleBodyParamLogMessageTest.java"
    ],
    "base_commit": "cc8f7e6b7a9fee4bdcc90154a0071e5f4c92494f",
    "head_commit": "62e684d125c44aa8aa4c66c0b7d4f8d5e2cba083",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47513",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47513",
    "dockerfile": "",
    "pr_merged_at": "2025-04-26T14:14:52.000Z",
    "patch": "diff --git a/independent-projects/resteasy-reactive/client/processor/src/main/java/org/jboss/resteasy/reactive/client/processor/scanning/ClientEndpointIndexer.java b/independent-projects/resteasy-reactive/client/processor/src/main/java/org/jboss/resteasy/reactive/client/processor/scanning/ClientEndpointIndexer.java\nindex b97922ad22dc7..676a50c8b08aa 100644\n--- a/independent-projects/resteasy-reactive/client/processor/src/main/java/org/jboss/resteasy/reactive/client/processor/scanning/ClientEndpointIndexer.java\n+++ b/independent-projects/resteasy-reactive/client/processor/src/main/java/org/jboss/resteasy/reactive/client/processor/scanning/ClientEndpointIndexer.java\n@@ -142,7 +142,7 @@ private MethodParameter parseClientBeanParam(ClassInfo beanParamClassInfo, Index\n     protected InjectableBean scanInjectableBean(ClassInfo currentClassInfo, ClassInfo actualEndpointInfo,\n             Map<String, String> existingConverters, AdditionalReaders additionalReaders,\n             Map<String, InjectableBean> injectableBeans, boolean hasRuntimeConverters) {\n-        throw new RuntimeException(\"Injectable beans not supported in client\");\n+        throw new RuntimeException(\"Injectable beans are not supported in client\");\n     }\n \n     @Override\n\ndiff --git a/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/EndpointIndexer.java b/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/EndpointIndexer.java\nindex 5bbcf87f4c545..256779c333032 100644\n--- a/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/EndpointIndexer.java\n+++ b/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/EndpointIndexer.java\n@@ -641,11 +641,12 @@ private ResourceMethod createResourceMethod(ClassInfo currentClassInfo, ClassInf\n                 String defaultValue = parameterResult.getDefaultValue();\n                 ParameterType type = parameterResult.getType();\n                 if (type == ParameterType.BODY) {\n-                    if (bodyParamType != null)\n-                        throw new RuntimeException(String.format(\n-                                \"Resource method '%s#%s' can only have a single body parameter: '%s'\",\n+                    if (bodyParamType != null) {\n+                        throw new DeploymentException(String.format(\n+                                \"Resource method '%s#%s' can only have a single body parameter, but has at least 2. A body parameter is a method parameter without any annotations. Last discovered body parameter is '%s'.\",\n                                 currentMethodInfo.declaringClass().name(), currentMethodInfo,\n                                 currentMethodInfo.parameterName(i)));\n+                    }\n                     bodyParamType = paramType;\n                     if (GET.equals(httpMethod) || HEAD.equals(httpMethod) || OPTIONS.equals(httpMethod)) {\n                         warnAboutMissUsedBodyParameter(httpMethod, currentMethodInfo);\n@@ -673,7 +674,7 @@ private ResourceMethod createResourceMethod(ClassInfo currentClassInfo, ClassInf\n                 if (bodyParamType != null\n                         && !bodyParamType.name().equals(ResteasyReactiveDotNames.MULTI_VALUED_MAP)\n                         && !bodyParamType.name().equals(ResteasyReactiveDotNames.STRING)) {\n-                    throw new RuntimeException(String.format(\n+                    throw new DeploymentException(String.format(\n                             \"'@FormParam' and '@RestForm' cannot be used in a resource method that contains a body parameter. Offending method is \"\n                                     + \"'%s#%s'\",\n                             currentMethodInfo.declaringClass().name(), currentMethodInfo));\n@@ -689,7 +690,7 @@ private ResourceMethod createResourceMethod(ClassInfo currentClassInfo, ClassInf\n                     }\n                     // TODO: does it make sense to default to MediaType.MULTIPART_FORM_DATA when no consumes is set?\n                     if (!validConsumes) {\n-                        throw new RuntimeException(String.format(\n+                        throw new DeploymentException(String.format(\n                                 \"'@FormParam' and '@RestForm' can only be used on methods annotated with '@Consumes(MediaType.MULTIPART_FORM_DATA)' '@Consumes(MediaType.APPLICATION_FORM_URLENCODED)'. Offending method is \"\n                                         + \"'%s#%s'\",\n                                 currentMethodInfo.declaringClass().name(), currentMethodInfo));\n@@ -811,9 +812,11 @@ private ResourceMethod createResourceMethod(ClassInfo currentClassInfo, ClassInf\n                                 method));\n             }\n             return method;\n-        } catch (Exception e) {\n-            throw new RuntimeException(String.format(\"Failed to process method '%s#%s'\",\n-                    currentMethodInfo.declaringClass().name(), currentMethodInfo), e);\n+        } catch (DeploymentException e) {\n+            throw e;\n+        } catch (RuntimeException e) {\n+            throw new RuntimeException(String.format(\"Failed to process method '%s#%s'. Reason: %s\",\n+                    currentMethodInfo.declaringClass().name(), currentMethodInfo, e.getMessage()), e);\n         }\n     }\n \n@@ -1288,9 +1291,9 @@ public PARAM extractParameterInfo(ClassInfo currentClassInfo, ClassInfo actualEn\n             return builder;\n         } else if (moreThanOne(pathParam, queryParam, headerParam, formParam, cookieParam, contextParam, beanParam,\n                 restPathParam, restQueryParam, restHeaderParam, restFormParam, restCookieParam)) {\n-            throw new RuntimeException(\n+            throw new DeploymentException(\n                     \"Cannot have more than one of @PathParam, @QueryParam, @HeaderParam, @FormParam, @CookieParam, @BeanParam, @Context on \"\n-                            + errorLocation);\n+                            + builder.getErrorLocation());\n         } else if (pathParam != null) {\n             builder.setName(pathParam.value().asString());\n             builder.setType(ParameterType.PATH);\n@@ -1513,10 +1516,12 @@ && isParameterContainerType(paramType.asClassType())) {\n             }\n         }\n         if (suspendedAnnotation != null && !elementType.equals(AsyncResponse.class.getName())) {\n-            throw new RuntimeException(\"Can only inject AsyncResponse on methods marked @Suspended\");\n+            throw new DeploymentException(\n+                    \"Can only inject AsyncResponse on methods marked @Suspended on \" + builder.getErrorLocation());\n         }\n         if (builder.isSingle() && builder.getSeparator() != null) {\n-            throw new DeploymentException(\"Single parameters should not be marked with @Separator\");\n+            throw new DeploymentException(\n+                    \"Single parameters should not be marked with @Separator on \" + builder.getErrorLocation());\n         }\n         builder.setElementType(elementType);\n         return builder;\n",
    "test_patch": "diff --git a/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/ClientMultipleBodyParamLogMessageTest.java b/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/ClientMultipleBodyParamLogMessageTest.java\nnew file mode 100644\nindex 0000000000000..1fdee3f05d276\n--- /dev/null\n+++ b/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/ClientMultipleBodyParamLogMessageTest.java\n@@ -0,0 +1,40 @@\n+package io.quarkus.rest.client.reactive;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.net.URI;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+class ClientMultipleBodyParamLogMessageTest {\n+    @RegisterExtension\n+    static final QuarkusUnitTest TEST = new QuarkusUnitTest()\n+            .withApplicationRoot((jar) -> jar\n+                    .addClass(Client.class));\n+\n+    @Test\n+    void basicTest() {\n+        try {\n+            QuarkusRestClientBuilder.newBuilder().baseUri(URI.create(\"http://localhost:8081\"))\n+                    .build(Client.class);\n+        } catch (Exception e) {\n+            assertThat(e.getMessage()).endsWith(\n+                    \"Failed to generate client for class interface io.quarkus.rest.client.reactive.ClientMultipleBodyParamLogMessageTest$Client : Resource method 'io.quarkus.rest.client.reactive.ClientMultipleBodyParamLogMessageTest$Client#java.lang.String getMessagesForTopic(int param1, int param2)' can only have a single body parameter, but has at least 2. A body parameter is a method parameter without any annotations. Last discovered body parameter is 'param2'.\");\n+            return;\n+        }\n+        Assertions.fail(\"Should have thrown an exception\");\n+    }\n+\n+    public interface Client {\n+        @GET\n+        @Path(\"/messages\")\n+        String getMessagesForTopic(int param1, int param2);\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47496",
    "pr_id": 47496,
    "issue_id": 47422,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Smallrye fault tolerance  retry policy goes in StackOverflowError\n### Describe the bug\n\nHi, \n\nI noticed an unexpected behavior after updating Smallrye fault tolerance\n\nfrom\n\n```\n io.quarkus:quarkus-smallrye-fault-tolerance:3.15.3\n io.smallrye:smallrye-fault-tolerance:6.4.0\n```\n\nto\n\n```\nio.quarkus:quarkus-smallrye-fault-tolerance:3.20.0\nio.smallrye:smallrye-fault-tolerance:6.9.0\n```\nOut of nowhere, I started getting a StackOverflowError, something that never happened in the previous version.\n\n<pre> <code> \njava.util.concurrent.CompletionException: java.lang.StackOverflowError at\njava.base/java.util.concurrent.CompletableFuture.encodeThrowable(Unknown Source) at\njava.base/java.util.concurrent.CompletableFuture.completeThrowable(Unknown Source) at\njava.base/java.util.concurrent.CompletableFuture.uniWhenComplete(Unknown Source) at\njava.base/java.util.concurrent.CompletableFuture.uniWhenCompleteStage(Unknown Source) at\njava.base/java.util.concurrent.CompletableFuture.whenComplete(Unknown Source) \tat\njava.base/java.util.concurrent.CompletableFuture$MinimalStage.whenComplete(Unknown Source) at\nio.quarkus.scheduler.common.runtime.DefaultInvoker.invoke(DefaultInvoker.java:25) at\nio.quarkus.scheduler.common.runtime.DelegateInvoker.invokeDelegate(DelegateInvoker.java:29) at\nio.quarkus.scheduler.common.runtime.StatusEmitterInvoker.invoke(StatusEmitterInvoker.java:35) at\nio.quarkus.scheduler.common.runtime.DelegateInvoker.invokeDelegate(DelegateInvoker.java:29) at\nio.quarkus.scheduler.common.runtime.DelegateInvoker.invokeComplete(DelegateInvoker.java:36) at\nio.quarkus.scheduler.common.runtime.OffloadingInvoker$2.call(OffloadingInvoker.java:54) at\nio.quarkus.scheduler.common.runtime.OffloadingInvoker$2.call(OffloadingInvoker.java:51) at\nio.vertx.core.impl.ContextImpl.lambda$executeBlocking$4(ContextImpl.java:192) at\nio.vertx.core.impl.ContextInternal.dispatch(ContextInternal.java:270) at\nio.vertx.core.impl.ContextImpl$1.execute(ContextImpl.java:221) at\nio.vertx.core.impl.WorkerTask.run(WorkerTask.java:56) at\nio.quarkus.vertx.core.runtime.VertxCoreRecorder$15.runWith(VertxCoreRecorder.java:643) at\norg.jboss.threads.EnhancedQueueExecutor$Task.doRunWith(EnhancedQueueExecutor.java:2675) at\norg.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2654) at\norg.jboss.threads.EnhancedQueueExecutor.runThreadBody(EnhancedQueueExecutor.java:1627) at\norg.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1594) at\norg.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:11) at\norg.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:11) at\nio.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) at\njava.base/java.lang.Thread.run(Unknown Source)\n </code> </pre>\n\nbelow the programmatically `TypedGuard ` used for the retries.\n\nI followed the official update guide to rewrite the retry policy, even though the actual code change was minimal.\n\nref : https://smallrye.io/docs/smallrye-fault-tolerance/6.9.0/reference/programmatic-api.html\n\n```\nTypedGuard.create(Response.class)\n                .withDescription(\"retry policy\")\n                .withRetry()\n                .maxDuration(30, ChronoUnit.SECONDS)\n                .maxRetries(-1)\n                .abortOn(DomainException.class)\n                .retryOn(List.of(DomainRetryableException.class))\n                .done()\n                .withTimeout()\n                .duration(10, ChronoUnit.SECONDS)\n                .done()\n                .build();\n```\n\nmaybe there is a new config , I'm missing.\n\nany clue of the stackOverFlow? \n\n### Expected behavior\n\nhave the same behavior as in the previous version\n\n### Actual behavior\n\nOut of nowhere, I started getting a StackOverflowError, something that never happened in the previous version.\n\n### How to Reproduce?\n\nbelow the TypedGuard used for the retry\n\n```\nTypedGuard.create(Response.class)\n                .withDescription(\"retry policy\")\n                .withRetry()\n                .maxDuration(30, ChronoUnit.SECONDS)\n                .maxRetries(-1)\n                .abortOn(DomainException.class)\n                .retryOn(List.of(DomainRetryableException.class))\n                .done()\n                .withTimeout()\n                .duration(10, ChronoUnit.SECONDS)\n                .done()\n                .build();\n```\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n21\n\n### Quarkus version or git rev\n\n3.20.0\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
    "issue_word_count": 548,
    "test_files_count": 2,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "bom/application/pom.xml",
      "docs/src/main/asciidoc/smallrye-fault-tolerance.adoc",
      "extensions/smallrye-fault-tolerance/deployment/src/test/java/io/quarkus/smallrye/faulttolerance/test/retry/stackoverflow/RetryStackOverflowService.java",
      "extensions/smallrye-fault-tolerance/deployment/src/test/java/io/quarkus/smallrye/faulttolerance/test/retry/stackoverflow/RetryStackOverflowTest.java"
    ],
    "pr_changed_test_files": [
      "extensions/smallrye-fault-tolerance/deployment/src/test/java/io/quarkus/smallrye/faulttolerance/test/retry/stackoverflow/RetryStackOverflowService.java",
      "extensions/smallrye-fault-tolerance/deployment/src/test/java/io/quarkus/smallrye/faulttolerance/test/retry/stackoverflow/RetryStackOverflowTest.java"
    ],
    "base_commit": "14d9b57d25165150c0eb9d99e568402034b125ed",
    "head_commit": "3fc755cafd7b70bb1d66f13bb9225c9705aee7a2",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47496",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47496",
    "dockerfile": "",
    "pr_merged_at": "2025-04-23T11:41:00.000Z",
    "patch": "diff --git a/bom/application/pom.xml b/bom/application/pom.xml\nindex 0acd5ed2bec07..3db16c824b40c 100644\n--- a/bom/application/pom.xml\n+++ b/bom/application/pom.xml\n@@ -52,7 +52,7 @@\n         <smallrye-metrics.version>4.0.0</smallrye-metrics.version>\n         <smallrye-open-api.version>4.0.10</smallrye-open-api.version>\n         <smallrye-graphql.version>2.13.0</smallrye-graphql.version>\n-        <smallrye-fault-tolerance.version>6.9.0</smallrye-fault-tolerance.version>\n+        <smallrye-fault-tolerance.version>6.9.1</smallrye-fault-tolerance.version>\n         <smallrye-jwt.version>4.6.1</smallrye-jwt.version>\n         <smallrye-context-propagation.version>2.2.1</smallrye-context-propagation.version>\n         <smallrye-reactive-streams-operators.version>1.0.13</smallrye-reactive-streams-operators.version>\n\ndiff --git a/docs/src/main/asciidoc/smallrye-fault-tolerance.adoc b/docs/src/main/asciidoc/smallrye-fault-tolerance.adoc\nindex 842651a315d09..bb070783bbaad 100644\n--- a/docs/src/main/asciidoc/smallrye-fault-tolerance.adoc\n+++ b/docs/src/main/asciidoc/smallrye-fault-tolerance.adoc\n@@ -576,7 +576,7 @@ implementation(\"io.quarkus:quarkus-smallrye-fault-tolerance\")\n == Additional resources\n \n SmallRye Fault Tolerance has more features than shown here.\n-Please check the link:https://smallrye.io/docs/smallrye-fault-tolerance/6.9.0/index.html[SmallRye Fault Tolerance documentation] to learn about them.\n+Please check the link:https://smallrye.io/docs/smallrye-fault-tolerance/6.9.1/index.html[SmallRye Fault Tolerance documentation] to learn about them.\n \n In Quarkus, you can use the SmallRye Fault Tolerance optional features out of the box.\n \n@@ -608,7 +608,7 @@ quarkus.fault-tolerance.mp-compatibility=true\n ----\n ====\n \n-The link:https://smallrye.io/docs/smallrye-fault-tolerance/6.9.0/reference/programmatic-api.html[programmatic API] is present and integrated with the declarative, annotation-based API.\n+The link:https://smallrye.io/docs/smallrye-fault-tolerance/6.9.1/reference/programmatic-api.html[programmatic API] is present and integrated with the declarative, annotation-based API.\n You can use the `Guard`, `TypedGuard` and `@ApplyGuard` APIs out of the box.\n \n Support for Kotlin is present (assuming you use the Quarkus extension for Kotlin), so you can guard your `suspend` functions with fault tolerance annotations.\n",
    "test_patch": "diff --git a/extensions/smallrye-fault-tolerance/deployment/src/test/java/io/quarkus/smallrye/faulttolerance/test/retry/stackoverflow/RetryStackOverflowService.java b/extensions/smallrye-fault-tolerance/deployment/src/test/java/io/quarkus/smallrye/faulttolerance/test/retry/stackoverflow/RetryStackOverflowService.java\nnew file mode 100644\nindex 0000000000000..a17ce92480ede\n--- /dev/null\n+++ b/extensions/smallrye-fault-tolerance/deployment/src/test/java/io/quarkus/smallrye/faulttolerance/test/retry/stackoverflow/RetryStackOverflowService.java\n@@ -0,0 +1,19 @@\n+package io.quarkus.smallrye.faulttolerance.test.retry.stackoverflow;\n+\n+import jakarta.enterprise.context.ApplicationScoped;\n+\n+import org.eclipse.microprofile.faulttolerance.Fallback;\n+import org.eclipse.microprofile.faulttolerance.Retry;\n+\n+@ApplicationScoped\n+public class RetryStackOverflowService {\n+    @Retry(maxRetries = 10_000, jitter = 0)\n+    @Fallback(fallbackMethod = \"fallback\")\n+    public String hello() {\n+        throw new RuntimeException(\"trigger retry\");\n+    }\n+\n+    public String fallback() {\n+        return \"fallback\";\n+    }\n+}\n\ndiff --git a/extensions/smallrye-fault-tolerance/deployment/src/test/java/io/quarkus/smallrye/faulttolerance/test/retry/stackoverflow/RetryStackOverflowTest.java b/extensions/smallrye-fault-tolerance/deployment/src/test/java/io/quarkus/smallrye/faulttolerance/test/retry/stackoverflow/RetryStackOverflowTest.java\nnew file mode 100644\nindex 0000000000000..5b3adb1af8570\n--- /dev/null\n+++ b/extensions/smallrye-fault-tolerance/deployment/src/test/java/io/quarkus/smallrye/faulttolerance/test/retry/stackoverflow/RetryStackOverflowTest.java\n@@ -0,0 +1,24 @@\n+package io.quarkus.smallrye.faulttolerance.test.retry.stackoverflow;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import jakarta.inject.Inject;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class RetryStackOverflowTest {\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .withApplicationRoot(jar -> jar.addClass(RetryStackOverflowService.class));\n+\n+    @Inject\n+    RetryStackOverflowService service;\n+\n+    @Test\n+    public void test() {\n+        assertEquals(\"fallback\", service.hello());\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47482",
    "pr_id": 47482,
    "issue_id": 47475,
    "repo": "quarkusio/quarkus",
    "problem_statement": "NullPointerException in AppMakerHelper in Camel CI causes test discovery to fail\n### Describe the bug\n\nVisible in https://github.com/quarkusio/quarkus-platform/pull/1466\n\n```\n2025-04-16T13:17:50.8752528Z java.lang.NullPointerException\n2025-04-16T13:17:50.8753546Z \tat java.base/java.util.concurrent.ConcurrentHashMap.putVal(ConcurrentHashMap.java:1011)\n2025-04-16T13:17:50.8754996Z \tat java.base/java.util.concurrent.ConcurrentHashMap.put(ConcurrentHashMap.java:1006)\n2025-04-16T13:17:50.8756144Z \tat java.base/java.util.Properties.put(Properties.java:1301)\n2025-04-16T13:17:50.8756920Z \tat java.base/java.util.Properties.setProperty(Properties.java:229)\n2025-04-16T13:17:50.8757895Z \tat java.base/java.lang.System.setProperty(System.java:1013)\n2025-04-16T13:17:50.8758912Z \tat io.quarkus.test.common.RestorableSystemProperties.setProperties(RestorableSystemProperties.java:23)\n2025-04-16T13:17:50.8760073Z \tat io.quarkus.test.junit.AppMakerHelper.createAugmentor(AppMakerHelper.java:133)\n2025-04-16T13:17:50.8761081Z \tat io.quarkus.test.junit.AppMakerHelper.getStartupAction(AppMakerHelper.java:284)\n2025-04-16T13:17:50.8762356Z \tat io.quarkus.test.junit.classloading.FacadeClassLoader.getOrCreateRuntimeClassLoader(FacadeClassLoader.java:555)\n2025-04-16T13:17:50.8764031Z \tat io.quarkus.test.junit.classloading.FacadeClassLoader.getQuarkusClassLoader(FacadeClassLoader.java:474)\n2025-04-16T13:17:50.8765303Z \tat io.quarkus.test.junit.classloading.FacadeClassLoader.loadClass(FacadeClassLoader.java:333)\n2025-04-16T13:17:50.8766212Z \tat java.base/java.lang.Class.forName0(Native Method)\n[...]\norg.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)\n2025-04-16T13:17:50.8821301Z [ERROR] TestEngine with ID 'junit-jupiter' failed to discover tests\n2025-04-16T13:17:50.9156900Z [INFO] \n2025-04-16T13:17:50.9157527Z [INFO] Results:\n2025-04-16T13:17:50.9158476Z [INFO] \n2025-04-16T13:17:50.9158806Z [INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0\n```\n",
    "issue_word_count": 293,
    "test_files_count": 1,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "test-framework/common/src/main/java/io/quarkus/test/common/RestorableSystemProperties.java"
    ],
    "pr_changed_test_files": [
      "test-framework/common/src/main/java/io/quarkus/test/common/RestorableSystemProperties.java"
    ],
    "base_commit": "ddc1defeb3d8a77581cf8fff97ead647b77fd36f",
    "head_commit": "1b29afec399190bbc08c506b2c22398f5801b83c",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47482",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47482",
    "dockerfile": "",
    "pr_merged_at": "2025-04-23T08:23:36.000Z",
    "patch": "",
    "test_patch": "diff --git a/test-framework/common/src/main/java/io/quarkus/test/common/RestorableSystemProperties.java b/test-framework/common/src/main/java/io/quarkus/test/common/RestorableSystemProperties.java\nindex 34ee3996a49df..70ee20939577a 100644\n--- a/test-framework/common/src/main/java/io/quarkus/test/common/RestorableSystemProperties.java\n+++ b/test-framework/common/src/main/java/io/quarkus/test/common/RestorableSystemProperties.java\n@@ -20,6 +20,16 @@ public static RestorableSystemProperties setProperties(Map<String, String> props\n             sysPropRestore.put(i.getKey(), System.getProperty(i.getKey()));\n         }\n         for (Map.Entry<String, String> i : props.entrySet()) {\n+            if (i.getKey() == null) {\n+                throw new IllegalArgumentException(\n+                        String.format(\"Internal error: Cannot set null key as a system property (value is %s)\",\n+                                i.getValue()));\n+            }\n+            if (i.getValue() == null) {\n+                throw new IllegalArgumentException(\n+                        String.format(\"Internal error: Cannot use null value as a system property (key is %s)\",\n+                                i.getKey()));\n+            }\n             System.setProperty(i.getKey(), i.getValue());\n         }\n         return new RestorableSystemProperties(sysPropRestore);\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47468",
    "pr_id": 47468,
    "issue_id": 47418,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Dev mode doesn't reflect removed extension with Quarkus main\n### Describe the bug\n\nDev mode doesn't reflect removed extension with Quarkus main\n\nI'm having application in dev mode, I removed `quarkus-smallrye-health` using cli, pom.file get adjusted, dev mode detects change pom.xml and reloads the application.\nBut the application still starts with `quarkus-smallrye-health`.\n\nI have been trying to identify when the regression happened and the problematic piece is https://github.com/quarkusio/quarkus/pull/47375 by @aloubyansky \n\nTo double check it, one needs to revert 3 commits or revert 468fae0c5457645cfd23c683d6faab798e3e1d75 + do some manual adjustments because of conflicts\n```\ngit revert 567408feb6f16b675c20e0e86a65df42861722d5\ngit revert 22a7ecb4570fc28f767ffe0596752b6e1927f74f\ngit revert 468fae0c5457645cfd23c683d6faab798e3e1d75\n```\n\nAnother pain point is dealing with merge commits and branches it creates in commit tree, \"rebase and merge\" strategy on PRs would be much nicer when needing to deal with commits bisection. My first hit (https://github.com/quarkusio/quarkus/pull/47378) was a false positive :/\n\n### Expected behavior\n\nApplication gets reloaded without removed extension.\n\n### Actual behavior\n\nApplication gets reloaded as change in pom.xml is detected, but the removed extension is still loaded.\n\n### How to Reproduce?\n\nTerminal nr. 1:\n```\ncd ~/tmp\nrm -rf app\nquarkus create app app -x=quarkus-smallrye-health,quarkus-rest\ncd app\nquarkus dev -Dquarkus.platform.version=999-SNAPSHOT -Dquarkus.platform.group-id=io.quarkus\n```\nTerminal nr. 2:\n```\ncd ~/tmp/app\ncurl http://localhost:8080/q/health\nquarkus extension remove quarkus-smallrye-health\nsleep 5\ncurl http://localhost:8080/q/health\n```\n\n### Output of `uname -a` or `ver`\n\nmacOS\n\n### Output of `java -version`\n\nJava 21\n\n### Quarkus version or git rev\n\n006177281dbc82b3cb67547b153b78f5172f9631\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
    "issue_word_count": 283,
    "test_files_count": 6,
    "non_test_files_count": 13,
    "pr_changed_files": [
      "devtools/maven/src/main/java/io/quarkus/maven/DevMojo.java",
      "devtools/maven/src/main/java/io/quarkus/maven/QuarkusBootstrapMojo.java",
      "devtools/maven/src/main/java/io/quarkus/maven/QuarkusBootstrapProvider.java",
      "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/BootstrapAppModelFactory.java",
      "independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/BootstrapMavenContext.java",
      "independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/BootstrapMavenContextConfig.java",
      "independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/DefaultEffectiveModelResolver.java",
      "independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/MavenModelBuilder.java",
      "independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/LocalProject.java",
      "independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/LocalWorkspace.java",
      "independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/ModelUtils.java",
      "independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/WorkspaceLoader.java",
      "independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/WorkspaceModulePom.java",
      "integration-tests/maven/src/test/java/io/quarkus/maven/it/DevMojoIT.java",
      "integration-tests/maven/src/test/resources-filtered/projects/project-with-extension/extra/pom.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/project-with-extension/extra/src/main/java/org/acme/extra/Extra.java",
      "integration-tests/maven/src/test/resources-filtered/projects/project-with-extension/library/pom.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/project-with-extension/pom.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/project-with-extension/runner/pom.xml"
    ],
    "pr_changed_test_files": [
      "integration-tests/maven/src/test/java/io/quarkus/maven/it/DevMojoIT.java",
      "integration-tests/maven/src/test/resources-filtered/projects/project-with-extension/extra/pom.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/project-with-extension/extra/src/main/java/org/acme/extra/Extra.java",
      "integration-tests/maven/src/test/resources-filtered/projects/project-with-extension/library/pom.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/project-with-extension/pom.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/project-with-extension/runner/pom.xml"
    ],
    "base_commit": "71c995944689f50292ac410caf40eef0bbd798eb",
    "head_commit": "236c646cdfd1ef7ce23604e45cd71e702df62ddf",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47468",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47468",
    "dockerfile": "",
    "pr_merged_at": "2025-04-22T16:08:46.000Z",
    "patch": "diff --git a/devtools/maven/src/main/java/io/quarkus/maven/DevMojo.java b/devtools/maven/src/main/java/io/quarkus/maven/DevMojo.java\nindex e79ade6b3d3cf..983984d9e1fdb 100644\n--- a/devtools/maven/src/main/java/io/quarkus/maven/DevMojo.java\n+++ b/devtools/maven/src/main/java/io/quarkus/maven/DevMojo.java\n@@ -1,6 +1,8 @@\n package io.quarkus.maven;\n \n import static io.quarkus.analytics.dto.segment.TrackEventType.DEV_MODE;\n+import static io.quarkus.maven.QuarkusBootstrapMojo.CLOSE_BOOTSTRAPPED_APP_PARAM;\n+import static io.quarkus.maven.QuarkusBootstrapMojo.MODE_PARAM;\n import static io.smallrye.common.expression.Expression.Flag.LENIENT_SYNTAX;\n import static io.smallrye.common.expression.Expression.Flag.NO_TRIM;\n import static java.util.Collections.emptyMap;\n@@ -557,16 +559,20 @@ public void close() throws IOException {\n                         }\n                         return;\n                     }\n-                    final Set<Path> changed = new HashSet<>();\n+                    List<String> changedPoms = List.of();\n                     for (Map.Entry<Path, Long> e : pomFiles.entrySet()) {\n                         long t = Files.getLastModifiedTime(e.getKey()).toMillis();\n                         if (t > e.getValue()) {\n-                            changed.add(e.getKey());\n+                            if (changedPoms.isEmpty()) {\n+                                // unless it's a git or some other command, there won't be many POMs modified in 100 milliseconds\n+                                changedPoms = new ArrayList<>(1);\n+                            }\n+                            changedPoms.add(e.getKey().toString());\n                             pomFiles.put(e.getKey(), t);\n                         }\n                     }\n-                    if (!changed.isEmpty()) {\n-                        getLog().info(\"Changes detected to \" + changed + \", restarting dev mode\");\n+                    if (!changedPoms.isEmpty()) {\n+                        logPomChanges(changedPoms);\n \n                         // stop the runner before we build the new one as the debug port being free\n                         // is tested when building the runner\n@@ -574,10 +580,10 @@ public void close() throws IOException {\n \n                         final DevModeRunner newRunner;\n                         try {\n-                            bootstrapId = handleAutoCompile();\n+                            bootstrapId = handleAutoCompile(changedPoms);\n                             newRunner = new DevModeRunner(runner.commandLine.getDebugPort(), bootstrapId);\n                         } catch (Exception e) {\n-                            getLog().info(\"Could not load changed pom.xml file, changes not applied\", e);\n+                            getLog().info(\"Could not load changedPoms pom.xml file, changes not applied\", e);\n                             continue;\n                         }\n                         newRunner.run();\n@@ -590,6 +596,15 @@ public void close() throws IOException {\n         }\n     }\n \n+    private void logPomChanges(List<String> changedPoms) {\n+        final StringBuilder sb = new StringBuilder().append(\"Restarting dev mode following changes in \");\n+        sb.append(changedPoms.get(0));\n+        for (int i = 1; i < changedPoms.size(); ++i) {\n+            sb.append(\", \").append(changedPoms.get(i));\n+        }\n+        getLog().info(sb.toString());\n+    }\n+\n     /**\n      * if the process is forcibly killed then the terminal may be left in raw mode, which\n      * messes everything up. This attempts to fix that by saving the state so it can be restored\n@@ -649,7 +664,18 @@ private void restoreTerminalState() {\n     }\n \n     private String handleAutoCompile() throws MojoExecutionException {\n+        return handleAutoCompile(List.of());\n+    }\n \n+    /**\n+     * Invokes Maven project goals that are meant to be executed before quarkus:dev,\n+     * unless they have already been executed.\n+     *\n+     * @param reloadPoms a list of POM files that should be reloaded from disk instead of read from the reactor\n+     * @return bootstrap id\n+     * @throws MojoExecutionException in case of an error\n+     */\n+    private String handleAutoCompile(List<String> reloadPoms) throws MojoExecutionException {\n         List<String> goals = session.getGoals();\n         // check for default goal(s) if none were specified explicitly,\n         // see also org.apache.maven.lifecycle.internal.DefaultLifecycleTaskSegmentCalculator\n@@ -761,10 +787,7 @@ private String handleAutoCompile() throws MojoExecutionException {\n             }\n         }\n \n-        final Map<String, String> quarkusGoalParams = Map.of(\n-                \"mode\", LaunchMode.DEVELOPMENT.name(),\n-                QuarkusBootstrapMojo.CLOSE_BOOTSTRAPPED_APP, \"false\",\n-                \"bootstrapId\", bootstrapId);\n+        Map<String, String> quarkusGoalParams = null;\n         for (int phaseIndex = latestHandledPhaseIndex + 1; phaseIndex < PRE_DEV_MODE_PHASES.size(); ++phaseIndex) {\n             var executions = phaseExecutions.get(PRE_DEV_MODE_PHASES.get(phaseIndex));\n             if (executions == null) {\n@@ -774,6 +797,9 @@ private String handleAutoCompile() throws MojoExecutionException {\n                 var executedGoals = executedPluginGoals.getOrDefault(pe.plugin.getId(), List.of());\n                 for (String goal : pe.execution.getGoals()) {\n                     if (!executedGoals.contains(goal)) {\n+                        if (quarkusGoalParams == null) {\n+                            quarkusGoalParams = getQuarkusGoalParams(bootstrapId, reloadPoms);\n+                        }\n                         try {\n                             executeGoal(pe, goal,\n                                     pe.getPluginId().equals(quarkusPluginId) ? quarkusGoalParams : Map.of());\n@@ -793,6 +819,35 @@ private String handleAutoCompile() throws MojoExecutionException {\n         return bootstrapId;\n     }\n \n+    /**\n+     * Returns a map of parameters for the Quarkus plugin goals to be invoked.\n+     *\n+     * @param bootstrapId bootstrap id\n+     * @param reloadPoms POM files to be reloaded from disk instead of taken from the reactor\n+     * @return map of parameters for the Quarkus plugin goals\n+     */\n+    private static Map<String, String> getQuarkusGoalParams(String bootstrapId, List<String> reloadPoms) {\n+        final Map<String, String> result = new HashMap<>(4);\n+        result.put(QuarkusBootstrapMojo.MODE_PARAM, LaunchMode.DEVELOPMENT.name());\n+        result.put(QuarkusBootstrapMojo.CLOSE_BOOTSTRAPPED_APP_PARAM, \"false\");\n+        result.put(QuarkusBootstrapMojo.BOOTSTRAP_ID_PARAM, bootstrapId);\n+        if (reloadPoms != null && !reloadPoms.isEmpty()) {\n+            String reloadPomsStr;\n+            if (reloadPoms.size() == 1) {\n+                reloadPomsStr = reloadPoms.get(0);\n+            } else {\n+                final StringBuilder sb = new StringBuilder();\n+                sb.append(reloadPoms.get(0));\n+                for (int i = 1; i < reloadPoms.size(); ++i) {\n+                    sb.append(\",\").append(reloadPoms.get(i));\n+                }\n+                reloadPomsStr = sb.toString();\n+            }\n+            result.put(QuarkusBootstrapMojo.RELOAD_POMS_PARAM, reloadPomsStr);\n+        }\n+        return result;\n+    }\n+\n     private String getCurrentGoal() {\n         return mojoExecution.getMojoDescriptor().getPluginDescriptor().getGoalPrefix() + \":\"\n                 + mojoExecution.getGoal();\n@@ -1004,7 +1059,7 @@ && matchesExecution(executionId, exec.getId())) {\n             }\n         }\n \n-        if ((Xpp3Dom) plugin.getConfiguration() != null) {\n+        if (plugin.getConfiguration() != null) {\n             mergedConfig = mergedConfig == null ? (Xpp3Dom) plugin.getConfiguration()\n                     : Xpp3Dom.mergeXpp3Dom(mergedConfig, (Xpp3Dom) plugin.getConfiguration(), true);\n         }\n@@ -1300,17 +1355,15 @@ void run() throws Exception {\n             process = processBuilder.start();\n \n             //https://github.com/quarkusio/quarkus/issues/232\n-            Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {\n-                @Override\n-                public void run() {\n-                    process.destroy();\n-                    try {\n-                        process.waitFor();\n-                    } catch (InterruptedException e) {\n-                        getLog().warn(\"Unable to properly wait for dev-mode end\", e);\n-                    }\n-                }\n-            }, \"Development Mode Shutdown Hook\"));\n+            Runtime.getRuntime().addShutdownHook(new Thread(this::safeStop, \"Development Mode Shutdown Hook\"));\n+        }\n+\n+        private void safeStop() {\n+            try {\n+                stop();\n+            } catch (InterruptedException e) {\n+                getLog().warn(\"Unable to properly wait for dev-mode end\", e);\n+            }\n         }\n \n         void stop() throws InterruptedException {\n@@ -1467,7 +1520,7 @@ private DevModeCommandLine newLauncher(String actualDebugPort, String bootstrapI\n                     .setRootProjectDir(rootProjectDir);\n \n             // There are a couple of reasons we don't want to use the original Maven session:\n-            // 1) a reload could be triggered by a change in a pom.xml, in which case the Maven session might not be in sync any more with the effective POM;\n+            // 1) a reload could be triggered by a change in a pom.xml, in which case the Maven session might not be in sync anymore with the effective POM;\n             // 2) in case there is a local module that has a snapshot version, which is also available in a remote snapshot repository,\n             // the Maven resolver will be checking for newer snapshots in the remote repository and might end up resolving the artifact from there.\n             final BootstrapMavenContext mvnCtx = workspaceProvider.createMavenContext(mvnConfig);\n\ndiff --git a/devtools/maven/src/main/java/io/quarkus/maven/QuarkusBootstrapMojo.java b/devtools/maven/src/main/java/io/quarkus/maven/QuarkusBootstrapMojo.java\nindex fe53cd99d3433..cc7a1d698baa1 100644\n--- a/devtools/maven/src/main/java/io/quarkus/maven/QuarkusBootstrapMojo.java\n+++ b/devtools/maven/src/main/java/io/quarkus/maven/QuarkusBootstrapMojo.java\n@@ -8,6 +8,7 @@\n import java.util.Map;\n import java.util.Optional;\n import java.util.Properties;\n+import java.util.Set;\n import java.util.function.Consumer;\n import java.util.stream.Stream;\n \n@@ -36,7 +37,10 @@\n \n public abstract class QuarkusBootstrapMojo extends AbstractMojo {\n \n-    static final String CLOSE_BOOTSTRAPPED_APP = \"closeBootstrappedApp\";\n+    static final String BOOTSTRAP_ID_PARAM = \"bootstrapId\";\n+    static final String CLOSE_BOOTSTRAPPED_APP_PARAM = \"closeBootstrappedApp\";\n+    static final String MODE_PARAM = \"mode\";\n+    static final String RELOAD_POMS_PARAM = \"reloadPoms\";\n \n     static final String NATIVE_PROFILE_NAME = \"native\";\n \n@@ -158,7 +162,14 @@ public abstract class QuarkusBootstrapMojo extends AbstractMojo {\n      * Whether to close the bootstrapped applications after the execution\n      */\n     @Parameter(property = \"quarkusCloseBootstrappedApp\")\n-    private Boolean closeBootstrappedApp;\n+    Boolean closeBootstrappedApp;\n+\n+    /**\n+     * POM files from the workspace that should be reloaded from the disk instead of taken from the Maven reactor.\n+     * This parameter is not supposed to be configured by a user.\n+     */\n+    @Parameter(property = \"reloadPoms\")\n+    Set<File> reloadPoms = Set.of();\n \n     private ArtifactKey projectId;\n \n\ndiff --git a/devtools/maven/src/main/java/io/quarkus/maven/QuarkusBootstrapProvider.java b/devtools/maven/src/main/java/io/quarkus/maven/QuarkusBootstrapProvider.java\nindex 2d838f26493c4..a16ba48fad7ba 100644\n--- a/devtools/maven/src/main/java/io/quarkus/maven/QuarkusBootstrapProvider.java\n+++ b/devtools/maven/src/main/java/io/quarkus/maven/QuarkusBootstrapProvider.java\n@@ -6,8 +6,6 @@\n import java.io.Closeable;\n import java.io.File;\n import java.io.IOException;\n-import java.nio.file.Path;\n-import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n@@ -21,7 +19,6 @@\n import javax.inject.Singleton;\n \n import org.apache.maven.artifact.Artifact;\n-import org.apache.maven.execution.MavenSession;\n import org.apache.maven.model.Model;\n import org.apache.maven.plugin.MojoExecutionException;\n import org.apache.maven.project.MavenProject;\n@@ -80,25 +77,25 @@ static ArtifactKey getProjectId(MavenProject project) {\n         return ArtifactKey.ga(project.getGroupId(), project.getArtifactId());\n     }\n \n-    static Map<Path, Model> getProjectMap(MavenSession session) {\n-        final List<MavenProject> allProjects = session.getAllProjects();\n-        if (allProjects == null) {\n-            return Map.of();\n-        }\n-        final Map<Path, Model> projectModels = new HashMap<>(allProjects.size());\n-        for (MavenProject mp : allProjects) {\n-            final Model model = getRawModel(mp);\n-            projectModels.put(mp.getFile().toPath(), model);\n-            // The Maven Model API determines the project directory as the directory containing the POM file.\n-            // However, in case when plugins manipulating POMs store their results elsewhere\n-            // (such as the flatten plugin storing the flattened POM under the target directory),\n-            // both the base directory and the directory containing the POM file should be added to the map.\n-            var pomDir = mp.getFile().getParentFile();\n-            if (!pomDir.equals(mp.getBasedir())) {\n-                projectModels.put(mp.getBasedir().toPath().resolve(\"pom.xml\"), model);\n+    static void setProjectModels(QuarkusBootstrapMojo mojo, BootstrapMavenContextConfig<?> config) {\n+        final List<MavenProject> allProjects = mojo.mavenSession().getAllProjects();\n+        if (allProjects != null) {\n+            for (MavenProject mp : allProjects) {\n+                if (mojo.reloadPoms.contains(mp.getFile())) {\n+                    continue;\n+                }\n+                final Model model = getRawModel(mp);\n+                config.addProvidedModule(mp.getFile().toPath(), model, mp.getModel());\n+                // The Maven Model API determines the project directory as the directory containing the POM file.\n+                // However, in case when plugins manipulating POMs store their results elsewhere\n+                // (such as the flatten plugin storing the flattened POM under the target directory),\n+                // both the base directory and the directory containing the POM file should be added to the map.\n+                var pomDir = mp.getFile().getParentFile();\n+                if (!pomDir.equals(mp.getBasedir())) {\n+                    config.addProvidedModule(mp.getBasedir().toPath().resolve(\"pom.xml\"), model, mp.getModel());\n+                }\n             }\n         }\n-        return projectModels;\n     }\n \n     /**\n@@ -123,8 +120,6 @@ private static Model getRawModel(MavenProject mp) {\n             model.setDependencies(mp.getDependencies());\n         }\n         model.setPomFile(mp.getFile());\n-        // activated profiles or custom extensions may have overridden the build defaults\n-        model.setBuild(mp.getModel().getBuild());\n         return model;\n     }\n \n@@ -227,18 +222,18 @@ public class QuarkusMavenAppBootstrap implements Closeable {\n         private MavenArtifactResolver artifactResolver(QuarkusBootstrapMojo mojo, LaunchMode mode) {\n             try {\n                 if (mode == LaunchMode.DEVELOPMENT || mode == LaunchMode.TEST || isWorkspaceDiscovery(mojo)) {\n-                    var resolver = workspaceProvider.createArtifactResolver(\n-                            BootstrapMavenContext.config()\n-                                    // it's important to pass user settings in case the process was not launched using the original mvn script\n-                                    // for example using org.codehaus.plexus.classworlds.launcher.Launcher\n-                                    .setUserSettings(mojo.mavenSession().getRequest().getUserSettingsFile())\n-                                    .setCurrentProject(mojo.mavenProject().getFile().toString())\n-                                    .setPreferPomsFromWorkspace(true)\n-                                    .setProjectModelProvider(getProjectMap(mojo.mavenSession()))\n-                                    // pass the repositories since Maven extensions could manipulate repository configs\n-                                    .setRemoteRepositories(mojo.remoteRepositories())\n-                                    .setEffectiveModelBuilder(BootstrapMavenContextConfig\n-                                            .getEffectiveModelBuilderProperty(mojo.mavenProject().getProperties())));\n+                    final BootstrapMavenContextConfig<?> config = BootstrapMavenContext.config()\n+                            // it's important to pass user settings in case the process was not launched using the original mvn script,\n+                            // for example, using org.codehaus.plexus.classworlds.launcher.Launcher\n+                            .setUserSettings(mojo.mavenSession().getRequest().getUserSettingsFile())\n+                            .setCurrentProject(mojo.mavenProject().getFile().toString())\n+                            .setPreferPomsFromWorkspace(true)\n+                            // pass the repositories since Maven extensions could manipulate repository configs\n+                            .setRemoteRepositories(mojo.remoteRepositories())\n+                            .setEffectiveModelBuilder(BootstrapMavenContextConfig\n+                                    .getEffectiveModelBuilderProperty(mojo.mavenProject().getProperties()));\n+                    setProjectModels(mojo, config);\n+                    var resolver = workspaceProvider.createArtifactResolver(config);\n                     final LocalProject currentProject = resolver.getMavenContext().getCurrentProject();\n                     if (currentProject != null && workspaceId == 0) {\n                         workspaceId = currentProject.getWorkspace().getId();\n\ndiff --git a/independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/BootstrapAppModelFactory.java b/independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/BootstrapAppModelFactory.java\nindex 9ebbc33795e7d..c7f93411a5e7c 100644\n--- a/independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/BootstrapAppModelFactory.java\n+++ b/independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/BootstrapAppModelFactory.java\n@@ -171,9 +171,9 @@ private BootstrapAppModelResolver initAppModelResolver(MavenArtifactResolver art\n                 .setDevMode(devMode);\n         var project = artifactResolver.getMavenContext().getCurrentProject();\n         if (project != null) {\n-            final Properties modelProps = project.getModelBuildingResult() == null\n+            final Properties modelProps = project.getEffectiveModel() == null\n                     ? project.getRawModel().getProperties()\n-                    : project.getModelBuildingResult().getEffectiveModel().getProperties();\n+                    : project.getEffectiveModel().getProperties();\n             appModelResolver.setLegacyModelResolver(BootstrapAppModelResolver.isLegacyModelResolver(modelProps));\n         }\n         return appModelResolver;\n\ndiff --git a/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/BootstrapMavenContext.java b/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/BootstrapMavenContext.java\nindex 2941f8035d48d..fe04dd69e34ce 100644\n--- a/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/BootstrapMavenContext.java\n+++ b/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/BootstrapMavenContext.java\n@@ -77,6 +77,7 @@\n import io.quarkus.bootstrap.resolver.maven.workspace.LocalProject;\n import io.quarkus.bootstrap.resolver.maven.workspace.LocalWorkspace;\n import io.quarkus.bootstrap.resolver.maven.workspace.ModelUtils;\n+import io.quarkus.bootstrap.resolver.maven.workspace.WorkspaceModulePom;\n import io.quarkus.bootstrap.util.PropertyUtils;\n import io.quarkus.maven.dependency.ArtifactCoords;\n import io.smallrye.beanbag.maven.MavenFactory;\n@@ -194,7 +195,7 @@ public BootstrapMavenContext(BootstrapMavenContextConfig<?> config)\n             this.currentPom = currentProject.getRawModel().getPomFile().toPath();\n             this.workspace = config.currentProject.getWorkspace();\n         } else if (config.workspaceDiscovery) {\n-            currentProject = resolveCurrentProject(config.modelProvider);\n+            currentProject = resolveCurrentProject(config.providedModules);\n             this.workspace = currentProject == null ? null : currentProject.getWorkspace();\n             if (workspace != null) {\n                 if (config.repoSession == null && repoSession != null && repoSession.getWorkspaceReader() == null) {\n@@ -377,9 +378,9 @@ private boolean getLocalRepoTailIgnoreAvailability() {\n                 : localRepoTailIgnoreAvailability;\n     }\n \n-    private LocalProject resolveCurrentProject(Map<Path, Model> modelProvider) throws BootstrapMavenException {\n+    private LocalProject resolveCurrentProject(List<WorkspaceModulePom> providedModules) throws BootstrapMavenException {\n         try {\n-            return LocalProject.loadWorkspace(this, modelProvider);\n+            return LocalProject.loadWorkspace(this, providedModules);\n         } catch (Exception e) {\n             throw new BootstrapMavenException(\"Failed to load current project at \" + getCurrentProjectPomOrNull(), e);\n         }\n\ndiff --git a/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/BootstrapMavenContextConfig.java b/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/BootstrapMavenContextConfig.java\nindex ec529a330f30a..d22614901cc80 100644\n--- a/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/BootstrapMavenContextConfig.java\n+++ b/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/BootstrapMavenContextConfig.java\n@@ -6,7 +6,6 @@\n import java.nio.file.Paths;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Map;\n import java.util.Properties;\n \n import org.apache.maven.model.Model;\n@@ -18,6 +17,7 @@\n \n import io.quarkus.bootstrap.resolver.maven.options.BootstrapMavenOptions;\n import io.quarkus.bootstrap.resolver.maven.workspace.LocalProject;\n+import io.quarkus.bootstrap.resolver.maven.workspace.WorkspaceModulePom;\n \n public class BootstrapMavenContextConfig<T extends BootstrapMavenContextConfig<T>> {\n \n@@ -58,7 +58,7 @@ public static boolean getEffectiveModelBuilderProperty(Properties props) {\n     protected boolean preferPomsFromWorkspace;\n     protected Boolean effectiveModelBuilder;\n     protected Boolean wsModuleParentHierarchy;\n-    protected Map<Path, Model> modelProvider;\n+    protected List<WorkspaceModulePom> providedModules;\n     protected List<String> excludeSisuBeanPackages;\n     protected List<String> includeSisuBeanPackages;\n     protected Boolean warnOnFailedWorkspaceModules;\n@@ -366,16 +366,20 @@ public T setWorkspaceModuleParentHierarchy(boolean wsModuleParentHierarchy) {\n     }\n \n     /**\n-     * When workspace discovery is enabled, this method allows to set a POM\n-     * provider that would return a {@link org.apache.maven.model.Model} for\n-     * a given workspace module directory.\n+     * When workspace discovery is enabled, this method allows providing POMs\n+     * for a given workspace POM file. It doesn't have to be a complete list of modules.\n      *\n-     * @param modelProvider POM provider\n+     * @param pomFile POM file, never nul\n+     * @param rawModel raw POM model or null\n+     * @param effectiveModel effective POM model or null\n      * @return this instance\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public T setProjectModelProvider(Map<Path, Model> modelProvider) {\n-        this.modelProvider = modelProvider;\n+    public T addProvidedModule(Path pomFile, Model rawModel, Model effectiveModel) {\n+        if (providedModules == null || providedModules.isEmpty()) {\n+            providedModules = new ArrayList<>();\n+        }\n+        providedModules.add(new WorkspaceModulePom(pomFile, rawModel, effectiveModel));\n         return (T) this;\n     }\n \n\ndiff --git a/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/DefaultEffectiveModelResolver.java b/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/DefaultEffectiveModelResolver.java\nindex 1e7eee0c08ae6..c541261cefc16 100644\n--- a/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/DefaultEffectiveModelResolver.java\n+++ b/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/DefaultEffectiveModelResolver.java\n@@ -62,8 +62,8 @@ public Model resolveEffectiveModel(ArtifactCoords coords, List<RemoteRepository>\n         if (ws != null) {\n             final LocalProject project = ws.getProject(coords.getGroupId(), coords.getArtifactId());\n             if (project != null && coords.getVersion().equals(project.getVersion())\n-                    && project.getModelBuildingResult() != null) {\n-                return project.getModelBuildingResult().getEffectiveModel();\n+                    && project.getEffectiveModel() != null) {\n+                return project.getEffectiveModel();\n             }\n         }\n \n\ndiff --git a/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/MavenModelBuilder.java b/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/MavenModelBuilder.java\nindex adceb555de77f..670e5b49ad134 100644\n--- a/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/MavenModelBuilder.java\n+++ b/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/MavenModelBuilder.java\n@@ -16,14 +16,11 @@\n import org.apache.maven.model.building.ModelBuildingRequest;\n import org.apache.maven.model.building.ModelBuildingResult;\n import org.apache.maven.model.building.Result;\n-import org.eclipse.aether.artifact.Artifact;\n-import org.eclipse.aether.artifact.DefaultArtifact;\n \n import io.quarkus.bootstrap.resolver.maven.options.BootstrapMavenOptions;\n import io.quarkus.bootstrap.resolver.maven.workspace.LocalProject;\n import io.quarkus.bootstrap.resolver.maven.workspace.LocalWorkspace;\n import io.quarkus.bootstrap.resolver.maven.workspace.ModelUtils;\n-import io.quarkus.maven.dependency.ArtifactCoords;\n \n /**\n  *\n@@ -35,16 +32,16 @@ public class MavenModelBuilder implements ModelBuilder {\n     private final BootstrapMavenContext ctx;\n     // This mapping is particularly useful when POM files do not exactly match the Model present in the LocalWorkspace.\n     // This may happen when Maven extensions manipulate the original POMs by changing versions, etc.\n-    private final Map<File, Model> poms;\n+    private final Map<File, LocalProject> poms;\n \n     public MavenModelBuilder(BootstrapMavenContext ctx) {\n         builder = BootstrapModelBuilderFactory.getDefaultModelBuilder();\n         this.ctx = ctx;\n         if (ctx != null && ctx.getWorkspace() != null) {\n             final Collection<LocalProject> projects = ctx.getWorkspace().getProjects().values();\n-            final Map<File, Model> tmp = new HashMap<>(projects.size());\n+            final Map<File, LocalProject> tmp = new HashMap<>(projects.size());\n             for (var p : projects) {\n-                tmp.put(p.getRawModel().getPomFile(), p.getRawModel());\n+                tmp.put(p.getRawModel().getPomFile(), p);\n             }\n             poms = tmp;\n         } else {\n@@ -54,59 +51,54 @@ public MavenModelBuilder(BootstrapMavenContext ctx) {\n \n     @Override\n     public ModelBuildingResult build(ModelBuildingRequest request) throws ModelBuildingException {\n-        final LocalWorkspace workspace = ctx.getWorkspace();\n-        if (workspace != null) {\n-            request.setWorkspaceModelResolver(workspace);\n-            final Model requestModel = getModel(request);\n-            if (requestModel != null) {\n-                final Artifact artifact = new DefaultArtifact(ModelUtils.getGroupId(requestModel), requestModel.getArtifactId(),\n-                        null, ArtifactCoords.TYPE_POM,\n-                        ModelUtils.getVersion(requestModel));\n-                if (workspace.findArtifact(artifact) != null) {\n-                    final ModelBuildingResult result = workspace\n-                            .getProject(artifact.getGroupId(), artifact.getArtifactId()).getModelBuildingResult();\n-                    if (result != null) {\n-                        return result;\n-                    }\n-                    try {\n-                        completeWorkspaceProjectBuildRequest(request);\n-                    } catch (BootstrapMavenException e) {\n-                        throw new RuntimeException(\"Failed to build model for \" + ModelUtils.getGroupId(requestModel)\n-                                + \":\" + requestModel.getArtifactId() + \":\" + ModelUtils.getVersion(requestModel), e);\n-                    }\n-                }\n+        final LocalProject lp = getLocalProjectOrNull(request);\n+        if (lp != null) {\n+            if (lp.getModelBuildingResult() != null) {\n+                return lp.getModelBuildingResult();\n+            }\n+            if (request.getRawModel() == null) {\n+                request.setRawModel(lp.getRawModel());\n+            }\n+            completeWorkspaceProjectBuildRequest(request);\n+            final LocalWorkspace workspace = lp.getWorkspace();\n+            if (workspace != null) {\n+                request.setWorkspaceModelResolver(workspace);\n             }\n         }\n         return builder.build(request);\n     }\n \n-    private Model getModel(ModelBuildingRequest request) {\n-        Model requestModel = request.getRawModel();\n-        if (requestModel != null) {\n-            return requestModel;\n-        }\n+    private LocalProject getLocalProjectOrNull(ModelBuildingRequest request) {\n         if (request.getPomFile() != null) {\n-            requestModel = poms.get(request.getPomFile());\n-            if (requestModel != null) {\n-                request.setRawModel(requestModel);\n-                return requestModel;\n+            final LocalProject lp = poms.get(request.getPomFile());\n+            if (lp != null) {\n+                return lp;\n             }\n         }\n-        if (request.getModelSource() != null) {\n-            try {\n-                requestModel = ModelUtils.readModel(request.getModelSource().getInputStream());\n-                request.setRawModel(requestModel);\n-                if (request.getPomFile() != null) {\n-                    requestModel.setPomFile(request.getPomFile());\n+\n+        Model requestModel = request.getRawModel();\n+        if (requestModel == null) {\n+            if (request.getModelSource() != null) {\n+                try {\n+                    requestModel = ModelUtils.readModel(request.getModelSource().getInputStream());\n+                    request.setRawModel(requestModel);\n+                    if (request.getPomFile() != null) {\n+                        requestModel.setPomFile(request.getPomFile());\n+                    }\n+                } catch (IOException e) {\n+                    // ignore\n                 }\n-            } catch (IOException e) {\n-                // ignore\n             }\n         }\n-        return requestModel;\n+\n+        if (requestModel != null && ctx.getWorkspace() != null) {\n+            return ctx.getWorkspace().getLocalProjectOrNull(ModelUtils.getGroupId(requestModel),\n+                    requestModel.getArtifactId(), ModelUtils.getRawVersion(requestModel));\n+        }\n+        return null;\n     }\n \n-    private void completeWorkspaceProjectBuildRequest(ModelBuildingRequest request) throws BootstrapMavenException {\n+    private void completeWorkspaceProjectBuildRequest(ModelBuildingRequest request) {\n         final Set<String> addedProfiles;\n         final List<Profile> profiles = request.getProfiles();\n         if (profiles.isEmpty()) {\n@@ -118,7 +110,16 @@ private void completeWorkspaceProjectBuildRequest(ModelBuildingRequest request)\n             }\n         }\n \n-        for (Profile p : ctx.getActiveSettingsProfiles()) {\n+        final List<Profile> activeSettingsProfiles;\n+        try {\n+            activeSettingsProfiles = ctx.getActiveSettingsProfiles();\n+        } catch (BootstrapMavenException e) {\n+            var requestModel = request.getRawModel();\n+            throw new RuntimeException(\"Failed to build model for \" + ModelUtils.getGroupId(requestModel)\n+                    + \":\" + requestModel.getArtifactId() + \":\" + ModelUtils.getVersion(requestModel), e);\n+        }\n+\n+        for (Profile p : activeSettingsProfiles) {\n             if (!addedProfiles.contains(p.getId())) {\n                 profiles.add(p);\n                 request.getActiveProfileIds().add(p.getId());\n\ndiff --git a/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/LocalProject.java b/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/LocalProject.java\nindex 5ef9dc2fe2651..93599ae307f41 100644\n--- a/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/LocalProject.java\n+++ b/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/LocalProject.java\n@@ -104,13 +104,13 @@ public static LocalProject loadWorkspace(BootstrapMavenContext ctx) throws Boots\n         return loadWorkspace(ctx, null);\n     }\n \n-    public static LocalProject loadWorkspace(BootstrapMavenContext ctx, Map<Path, Model> modelProvider)\n+    public static LocalProject loadWorkspace(BootstrapMavenContext ctx, List<WorkspaceModulePom> providedModules)\n             throws BootstrapMavenException {\n         final Path currentProjectPom = ctx.getCurrentProjectPomOrNull();\n         if (currentProjectPom == null) {\n             return null;\n         }\n-        final WorkspaceLoader wsLoader = new WorkspaceLoader(ctx, currentProjectPom, modelProvider);\n+        final WorkspaceLoader wsLoader = new WorkspaceLoader(ctx, currentProjectPom, providedModules);\n         final Path rootProjectBaseDir = ctx.getRootProjectBaseDir();\n         if (rootProjectBaseDir != null && !rootProjectBaseDir.equals(currentProjectPom.getParent())) {\n             wsLoader.setWorkspaceRootPom(rootProjectBaseDir.resolve(POM_XML));\n@@ -144,22 +144,29 @@ static Path locateCurrentProjectPom(Path path, boolean required) throws Bootstra\n     }\n \n     private final Model rawModel;\n+    private final Model effectiveModel;\n+    private final ModelBuildingResult modelBuildingResult;\n     private final ArtifactKey key;\n     private String version;\n     private final Path dir;\n     private final LocalWorkspace workspace;\n-    final List<LocalProject> modules = new ArrayList<>(0);\n-    private final ModelBuildingResult modelBuildingResult;\n     private volatile LocalProject parent;\n     private volatile WorkspaceModule module;\n \n+    /**\n+     * TODO: linking LocalProject to a ModelBuildingResult is probably not a good idea.\n+     * Perhaps, the result should be cached in the MavenModelBuilder instead.\n+     *\n+     * @param modelBuildingResult model building result\n+     * @param workspace workspace\n+     */\n     LocalProject(ModelBuildingResult modelBuildingResult, LocalWorkspace workspace) {\n+        this.modelBuildingResult = modelBuildingResult;\n         this.rawModel = modelBuildingResult.getRawModel();\n-        final Model effectiveModel = modelBuildingResult.getEffectiveModel();\n+        this.effectiveModel = modelBuildingResult.getEffectiveModel();\n         this.key = ArtifactKey.ga(effectiveModel.getGroupId(), effectiveModel.getArtifactId());\n         this.version = effectiveModel.getVersion();\n         this.dir = effectiveModel.getProjectDirectory().toPath();\n-        this.modelBuildingResult = modelBuildingResult;\n         this.workspace = workspace;\n         if (workspace != null) {\n             workspace.addProject(this);\n@@ -170,8 +177,13 @@ static Path locateCurrentProjectPom(Path path, boolean required) throws Bootstra\n     }\n \n     LocalProject(Model rawModel, LocalWorkspace workspace) {\n-        this.modelBuildingResult = null;\n+        this(rawModel, null, workspace);\n+    }\n+\n+    LocalProject(Model rawModel, Model effectiveModel, LocalWorkspace workspace) {\n         this.rawModel = rawModel;\n+        this.effectiveModel = effectiveModel;\n+        this.modelBuildingResult = null;\n         this.dir = rawModel.getProjectDirectory().toPath();\n         this.workspace = workspace;\n         this.key = ArtifactKey.ga(ModelUtils.getGroupId(rawModel), rawModel.getArtifactId());\n@@ -190,6 +202,10 @@ static Path locateCurrentProjectPom(Path path, boolean required) throws Bootstra\n         }\n     }\n \n+    public ModelBuildingResult getModelBuildingResult() {\n+        return modelBuildingResult;\n+    }\n+\n     protected long getPomLastModified() {\n         return rawModel.getPomFile().lastModified();\n     }\n@@ -234,9 +250,9 @@ public Path getDir() {\n     }\n \n     public Path getOutputDir() {\n-        return modelBuildingResult == null\n+        return effectiveModel == null\n                 ? resolveRelativeToBaseDir(configuredBuildDir(this, BuildBase::getDirectory), \"target\")\n-                : Path.of(modelBuildingResult.getEffectiveModel().getBuild().getDirectory());\n+                : Path.of(effectiveModel.getBuild().getDirectory());\n     }\n \n     public Path getCodeGenOutputDir() {\n@@ -248,21 +264,21 @@ public Path getGeneratedSourcesDir() {\n     }\n \n     public Path getClassesDir() {\n-        return modelBuildingResult == null\n+        return effectiveModel == null\n                 ? resolveRelativeToBuildDir(configuredBuildDir(this, Build::getOutputDirectory), \"classes\")\n-                : Path.of(modelBuildingResult.getEffectiveModel().getBuild().getOutputDirectory());\n+                : Path.of(effectiveModel.getBuild().getOutputDirectory());\n     }\n \n     public Path getTestClassesDir() {\n-        return modelBuildingResult == null\n+        return effectiveModel == null\n                 ? resolveRelativeToBuildDir(configuredBuildDir(this, Build::getTestOutputDirectory), \"test-classes\")\n-                : Path.of(modelBuildingResult.getEffectiveModel().getBuild().getTestOutputDirectory());\n+                : Path.of(effectiveModel.getBuild().getTestOutputDirectory());\n     }\n \n     public Path getSourcesSourcesDir() {\n-        return modelBuildingResult == null\n+        return effectiveModel == null\n                 ? resolveRelativeToBaseDir(configuredBuildDir(this, Build::getSourceDirectory), \"src/main/java\")\n-                : Path.of(modelBuildingResult.getEffectiveModel().getBuild().getSourceDirectory());\n+                : Path.of(effectiveModel.getBuild().getSourceDirectory());\n     }\n \n     public Path getTestSourcesSourcesDir() {\n@@ -297,14 +313,14 @@ public PathCollection getTestResourcesSourcesDirs() {\n                 .collect(Collectors.toCollection(LinkedHashSet::new)));\n     }\n \n-    public ModelBuildingResult getModelBuildingResult() {\n-        return modelBuildingResult;\n-    }\n-\n     public Model getRawModel() {\n         return rawModel;\n     }\n \n+    public Model getEffectiveModel() {\n+        return effectiveModel;\n+    }\n+\n     public LocalWorkspace getWorkspace() {\n         return workspace;\n     }\n@@ -314,7 +330,7 @@ public ArtifactKey getKey() {\n     }\n \n     public String getPackaging() {\n-        return modelBuildingResult == null ? rawModel.getPackaging() : modelBuildingResult.getEffectiveModel().getPackaging();\n+        return effectiveModel == null ? rawModel.getPackaging() : effectiveModel.getPackaging();\n     }\n \n     public ResolvedDependency getAppArtifact() {\n@@ -352,6 +368,11 @@ private static String configuredBuildDir(LocalProject project, Function<Build, S\n             }\n             if (project.rawModel.getBuild() != null) {\n                 dir = f.apply(project.rawModel.getBuild());\n+                // in case the \"raw\" model is passed in from the reactor by the QuarkusBootstrapProvider,\n+                // the Build will contain an effective config, so we need to take the relative path\n+                if (dir != null) {\n+                    // TODO\n+                }\n             }\n         }\n         return dir;\n@@ -372,7 +393,7 @@ public WorkspaceModule toWorkspaceModule(BootstrapMavenContext ctx) {\n                 .setBuildFile(getRawModel().getPomFile().toPath())\n                 .setBuildDir(getOutputDir());\n \n-        final Model model = modelBuildingResult == null ? getRawModel() : modelBuildingResult.getEffectiveModel();\n+        final Model model = effectiveModel == null ? rawModel : effectiveModel;\n         if (!ArtifactCoords.TYPE_POM.equals(getPackaging())) {\n             final List<Plugin> plugins = model.getBuild() == null ? List.of() : model.getBuild().getPlugins();\n             boolean addDefaultSourceSet = addSourceSetsFromPlugins(plugins, moduleBuilder);\n\ndiff --git a/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/LocalWorkspace.java b/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/LocalWorkspace.java\nindex 660a7ccb920da..79a20857749bc 100644\n--- a/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/LocalWorkspace.java\n+++ b/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/LocalWorkspace.java\n@@ -11,10 +11,8 @@\n import java.util.Map;\n \n import org.apache.maven.model.Model;\n-import org.apache.maven.model.resolution.UnresolvableModelException;\n import org.apache.maven.model.resolution.WorkspaceModelResolver;\n import org.eclipse.aether.artifact.Artifact;\n-import org.eclipse.aether.artifact.DefaultArtifact;\n import org.eclipse.aether.repository.WorkspaceReader;\n import org.eclipse.aether.repository.WorkspaceRepository;\n \n@@ -96,18 +94,15 @@ private void initLastModifiedAndHash() {\n     }\n \n     @Override\n-    public Model resolveRawModel(String groupId, String artifactId, String versionConstraint)\n-            throws UnresolvableModelException {\n-        if (findArtifact(new DefaultArtifact(groupId, artifactId, null, ArtifactCoords.TYPE_POM, versionConstraint)) != null) {\n-            return getProject(groupId, artifactId).getRawModel();\n-        }\n-        return null;\n+    public Model resolveRawModel(String groupId, String artifactId, String versionConstraint) {\n+        var lp = getLocalProjectOrNull(groupId, artifactId, versionConstraint);\n+        return lp == null ? null : lp.getRawModel();\n     }\n \n     @Override\n-    public Model resolveEffectiveModel(String groupId, String artifactId, String versionConstraint)\n-            throws UnresolvableModelException {\n-        return null;\n+    public Model resolveEffectiveModel(String groupId, String artifactId, String versionConstraint) {\n+        var lp = getLocalProjectOrNull(groupId, artifactId, versionConstraint);\n+        return lp == null ? null : lp.getEffectiveModel();\n     }\n \n     public Map<ArtifactKey, LocalProject> getProjects() {\n@@ -121,13 +116,8 @@ public WorkspaceRepository getRepository() {\n \n     @Override\n     public File findArtifact(Artifact artifact) {\n-        final LocalProject lp = getProject(artifact.getGroupId(), artifact.getArtifactId());\n-        final String findVersion = artifact.getVersion();\n-        if (lp == null\n-                || !findVersion.isEmpty()\n-                        && !lp.getVersion().equals(findVersion)\n-                        && !(ModelUtils.isUnresolvedVersion(findVersion)\n-                                && lp.getVersion().equals(resolvedVersion))) {\n+        final LocalProject lp = getLocalProjectOrNull(artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion());\n+        if (lp == null) {\n             return null;\n         }\n \n@@ -172,6 +162,18 @@ public File findArtifact(Artifact artifact) {\n         return null;\n     }\n \n+    public LocalProject getLocalProjectOrNull(String groupId, String artifactId, String version) {\n+        final LocalProject lp = getProject(groupId, artifactId);\n+        if (lp == null\n+                || !version.isEmpty()\n+                        && !lp.getVersion().equals(version)\n+                        && !(ModelUtils.isUnresolvedVersion(version)\n+                                && lp.getVersion().equals(resolvedVersion))) {\n+            return null;\n+        }\n+        return lp;\n+    }\n+\n     private Path emptyJarOutput(LocalProject lp, Artifact artifact) {\n         // If the project has neither sources nor resources directories then it is an empty JAR.\n         // If this method returns null then the Maven resolver will attempt to resolve the artifact from a repository\n@@ -251,21 +253,13 @@ void setResolvedVersion(String resolvedVersion) {\n         this.resolvedVersion = resolvedVersion;\n     }\n \n-    LocalProject getCurrentProject() {\n-        return currentProject;\n-    }\n-\n-    void setCurrentProject(LocalProject currentProject) {\n-        this.currentProject = currentProject;\n-    }\n-\n     void setBootstrapMavenContext(BootstrapMavenContext mvnCtx) {\n         this.mvnCtx = mvnCtx;\n     }\n \n     @Override\n     public WorkspaceModule getProjectModule(String groupId, String artifactId, String version) {\n-        final LocalProject project = getProject(groupId, artifactId);\n-        return project == null || !project.getVersion().equals(version) ? null : project.toWorkspaceModule(mvnCtx);\n+        final LocalProject project = getLocalProjectOrNull(groupId, artifactId, version);\n+        return project == null ? null : project.toWorkspaceModule(mvnCtx);\n     }\n }\n\ndiff --git a/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/ModelUtils.java b/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/ModelUtils.java\nindex 556407a142017..fe458a2f558ee 100644\n--- a/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/ModelUtils.java\n+++ b/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/ModelUtils.java\n@@ -176,7 +176,7 @@ public static boolean isUnresolvedVersion(String version) {\n     }\n \n     public static String resolveVersion(String rawVersion, Model rawModel) {\n-        final Map<String, String> props = new HashMap<>();\n+        final Map<String, String> props = new HashMap<>(rawModel.getProperties().size() + System.getProperties().size());\n         putAll(props, rawModel.getProperties());\n         putAll(props, System.getProperties());\n \n\ndiff --git a/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/WorkspaceLoader.java b/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/WorkspaceLoader.java\nindex cc2cd36c0d51c..73d5e6cc7b04e 100644\n--- a/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/WorkspaceLoader.java\n+++ b/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/WorkspaceLoader.java\n@@ -17,7 +17,6 @@\n import java.util.function.Consumer;\n \n import org.apache.maven.model.Model;\n-import org.apache.maven.model.Parent;\n import org.apache.maven.model.Profile;\n import org.apache.maven.model.building.DefaultModelBuildingRequest;\n import org.apache.maven.model.building.ModelBuilder;\n@@ -41,9 +40,29 @@ public class WorkspaceLoader implements WorkspaceModelResolver, WorkspaceReader\n \n     private static final Logger log = Logger.getLogger(WorkspaceLoader.class);\n \n-    private static final String POM_XML = \"pom.xml\";\n+    static final String POM_XML = \"pom.xml\";\n \n-    private static final Model MISSING_MODEL = new Model();\n+    static final Model MISSING_MODEL = new Model();\n+\n+    static Path getFsRootDir() {\n+        return Path.of(\"/\");\n+    }\n+\n+    static Model readModel(Path pom) {\n+        try {\n+            final Model model = ModelUtils.readModel(pom);\n+            model.setPomFile(pom.toFile());\n+            return model;\n+        } catch (NoSuchFileException e) {\n+            // some projects may be missing pom.xml relying on Maven extensions (e.g. tycho-maven-plugin) to build them,\n+            // which we don't support in this workspace loader\n+            log.warn(\"Module(s) under \" + pom.getParent() + \" will be handled as thirdparty dependencies because \" + pom\n+                    + \" does not exist\");\n+            return MISSING_MODEL;\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(\"Failed to load POM from \" + pom, e);\n+        }\n+    }\n \n     private static Path locateCurrentProjectPom(Path path) throws BootstrapMavenException {\n         Path p = path;\n@@ -57,16 +76,16 @@ private static Path locateCurrentProjectPom(Path path) throws BootstrapMavenExce\n         throw new BootstrapMavenException(\"Failed to locate project pom.xml for \" + path);\n     }\n \n-    private final Deque<RawModule> moduleQueue = new ConcurrentLinkedDeque<>();\n+    private final Deque<WorkspaceModulePom> moduleQueue = new ConcurrentLinkedDeque<>();\n     private final Map<Path, Model> loadedPoms = new ConcurrentHashMap<>();\n     private final Map<GAV, Model> loadedModules = new ConcurrentHashMap<>();\n-    private final Consumer<Model> modelProcessor;\n+    private final Consumer<WorkspaceModulePom> modelProcessor;\n \n     private final LocalWorkspace workspace = new LocalWorkspace();\n     private final Path currentProjectPom;\n     private volatile LocalProject currentProject;\n \n-    WorkspaceLoader(BootstrapMavenContext ctx, Path currentProjectPom, Map<Path, Model> modelProvider)\n+    WorkspaceLoader(BootstrapMavenContext ctx, Path currentProjectPom, List<WorkspaceModulePom> providedModules)\n             throws BootstrapMavenException {\n         try {\n             final BasicFileAttributes fileAttributes = Files.readAttributes(currentProjectPom, BasicFileAttributes.class);\n@@ -75,15 +94,19 @@ private static Path locateCurrentProjectPom(Path path) throws BootstrapMavenExce\n         } catch (IOException e) {\n             throw new IllegalArgumentException(currentProjectPom + \" does not exist\", e);\n         }\n-        if (modelProvider != null) {\n+        boolean queueCurrentPom = this.currentProjectPom != null;\n+        if (providedModules != null) {\n             // queue all the provided POMs\n-            for (var e : modelProvider.entrySet()) {\n-                moduleQueue.push(new RawModule(e.getKey(), e.getValue()));\n+            for (var e : providedModules) {\n+                if (queueCurrentPom && this.currentProjectPom.equals(e.pom)) {\n+                    queueCurrentPom = false;\n+                }\n+                moduleQueue.push(e);\n             }\n         }\n-        // make sure the current project POM is queued\n-        if (modelProvider == null || !modelProvider.containsKey(this.currentProjectPom)) {\n-            addModulePom(this.currentProjectPom);\n+\n+        if (queueCurrentPom) {\n+            moduleQueue.push(new WorkspaceModulePom(this.currentProjectPom));\n         }\n \n         modelProcessor = getModelProcessor(ctx);\n@@ -92,7 +115,7 @@ private static Path locateCurrentProjectPom(Path path) throws BootstrapMavenExce\n \n     private void addModulePom(Path pom) {\n         if (pom != null) {\n-            moduleQueue.push(new RawModule(pom));\n+            moduleQueue.push(new WorkspaceModulePom(pom));\n         }\n     }\n \n@@ -103,10 +126,10 @@ void setWorkspaceRootPom(Path rootPom) {\n     LocalProject load() throws BootstrapMavenException {\n         final ModelResolutionTaskRunner taskRunner = ModelResolutionTaskRunner.getNonBlockingTaskRunner();\n         while (!moduleQueue.isEmpty()) {\n-            final ConcurrentLinkedDeque<RawModule> newModules = new ConcurrentLinkedDeque<>();\n+            final ConcurrentLinkedDeque<WorkspaceModulePom> newModules = new ConcurrentLinkedDeque<>();\n             while (!moduleQueue.isEmpty()) {\n                 while (!moduleQueue.isEmpty()) {\n-                    final RawModule module = moduleQueue.removeLast();\n+                    final WorkspaceModulePom module = moduleQueue.removeLast();\n                     taskRunner.run(() -> loadModule(module, newModules));\n                 }\n                 taskRunner.waitForCompletion();\n@@ -122,10 +145,10 @@ LocalProject load() throws BootstrapMavenException {\n         return currentProject;\n     }\n \n-    private Consumer<Model> getModelProcessor(BootstrapMavenContext ctx) throws BootstrapMavenException {\n+    private Consumer<WorkspaceModulePom> getModelProcessor(BootstrapMavenContext ctx) throws BootstrapMavenException {\n         if (ctx == null || !ctx.isEffectiveModelBuilder()) {\n-            return rawModel -> {\n-                var project = new LocalProject(rawModel, workspace);\n+            return rawModule -> {\n+                var project = new LocalProject(rawModule.getModel(), rawModule.effectiveModel, workspace);\n                 if (currentProject == null && project.getDir().equals(currentProjectPom.getParent())) {\n                     currentProject = project;\n                 }\n@@ -145,9 +168,9 @@ private Consumer<Model> getModelProcessor(BootstrapMavenContext ctx) throws Boot\n         final List<String> inactiveProfileIds = cliOptions.getInactiveProfileIds();\n         final boolean warnOnFailingWsModules = ctx.isWarnOnFailingWorkspaceModules();\n \n-        return rawModel -> {\n+        return rawModule -> {\n             var req = new DefaultModelBuildingRequest();\n-            req.setPomFile(rawModel.getPomFile());\n+            req.setPomFile(rawModule.getModel().getPomFile());\n             req.setModelResolver(modelResolver);\n             req.setSystemProperties(System.getProperties());\n             req.setUserProperties(System.getProperties());\n@@ -155,28 +178,28 @@ private Consumer<Model> getModelProcessor(BootstrapMavenContext ctx) throws Boot\n             req.setActiveProfileIds(activeProfileIds);\n             req.setInactiveProfileIds(inactiveProfileIds);\n             req.setProfiles(profiles);\n-            req.setRawModel(rawModel);\n+            req.setRawModel(rawModule.getModel());\n             req.setWorkspaceModelResolver(this);\n             LocalProject project;\n             try {\n                 project = new LocalProject(modelBuilder.build(req), workspace);\n             } catch (Exception e) {\n                 if (warnOnFailingWsModules) {\n-                    log.warn(\"Failed to resolve effective model for \" + rawModel.getPomFile(), e);\n+                    log.warn(\"Failed to resolve effective model for \" + rawModule.getModel().getPomFile(), e);\n                     return;\n                 }\n-                throw new RuntimeException(\"Failed to resolve the effective model for \" + rawModel.getPomFile(), e);\n+                throw new RuntimeException(\"Failed to resolve the effective model for \" + rawModule.getModel().getPomFile(), e);\n             }\n             if (currentProject == null && project.getDir().equals(currentProjectPom.getParent())) {\n                 currentProject = project;\n             }\n-            for (var module : project.getModelBuildingResult().getEffectiveModel().getModules()) {\n+            for (var module : project.getEffectiveModel().getModules()) {\n                 addModulePom(project.getDir().resolve(module).resolve(POM_XML));\n             }\n         };\n     }\n \n-    private void loadModule(RawModule rawModule, Collection<RawModule> newModules) {\n+    private void loadModule(WorkspaceModulePom rawModule, Collection<WorkspaceModulePom> newModules) {\n         final Path moduleDir = rawModule.getModuleDir();\n         if (loadedPoms.containsKey(moduleDir)) {\n             return;\n@@ -220,20 +243,16 @@ private void loadModule(RawModule rawModule, Collection<RawModule> newModules) {\n                     parentDir = getFsRootDir();\n                 }\n                 if (!loadedPoms.containsKey(parentDir)) {\n-                    rawModule.parent = new RawModule(parentPom);\n+                    rawModule.parent = new WorkspaceModulePom(parentPom);\n                     moduleQueue.push(rawModule.parent);\n                 }\n             }\n         }\n     }\n \n-    private static Path getFsRootDir() {\n-        return Path.of(\"/\");\n-    }\n-\n     private void queueModule(Path dir) {\n         if (!loadedPoms.containsKey(dir)) {\n-            moduleQueue.push(new RawModule(dir.resolve(POM_XML)));\n+            moduleQueue.push(new WorkspaceModulePom(dir.resolve(POM_XML)));\n         }\n     }\n \n@@ -246,7 +265,7 @@ public Model resolveRawModel(String groupId, String artifactId, String versionCo\n     public Model resolveEffectiveModel(String groupId, String artifactId, String versionConstraint) {\n         final LocalProject project = workspace.getProject(groupId, artifactId);\n         return project != null && project.getVersion().equals(versionConstraint)\n-                ? project.getModelBuildingResult().getEffectiveModel()\n+                ? project.getEffectiveModel()\n                 : null;\n     }\n \n@@ -269,88 +288,4 @@ public List<String> findVersions(Artifact artifact) {\n         var model = loadedModules.get(new GAV(artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion()));\n         return model == null ? List.of() : List.of(ModelUtils.getVersion(model));\n     }\n-\n-    private static Model readModel(Path pom) {\n-        try {\n-            final Model model = ModelUtils.readModel(pom);\n-            model.setPomFile(pom.toFile());\n-            return model;\n-        } catch (NoSuchFileException e) {\n-            // some projects may be missing pom.xml relying on Maven extensions (e.g. tycho-maven-plugin) to build them,\n-            // which we don't support in this workspace loader\n-            log.warn(\"Module(s) under \" + pom.getParent() + \" will be handled as thirdparty dependencies because \" + pom\n-                    + \" does not exist\");\n-            return MISSING_MODEL;\n-        } catch (IOException e) {\n-            throw new UncheckedIOException(\"Failed to load POM from \" + pom, e);\n-        }\n-    }\n-\n-    private static class RawModule {\n-        final Path pom;\n-        Model model;\n-        RawModule parent;\n-        boolean processed;\n-\n-        private RawModule(Path pom) {\n-            this(null, pom);\n-        }\n-\n-        private RawModule(RawModule parent, Path pom) {\n-            this.pom = pom.normalize().toAbsolutePath();\n-            this.parent = parent;\n-        }\n-\n-        public RawModule(Path pom, Model model) {\n-            this.pom = pom;\n-            this.model = model;\n-        }\n-\n-        private Path getModuleDir() {\n-            var moduleDir = pom.getParent();\n-            return moduleDir == null ? getFsRootDir() : moduleDir;\n-        }\n-\n-        private Model getModel() {\n-            return model == null ? model = readModel(pom) : model;\n-        }\n-\n-        private Path getParentPom() {\n-            if (model == null) {\n-                return null;\n-            }\n-            Path parentPom = null;\n-            final Parent parent = model.getParent();\n-            if (parent != null && parent.getRelativePath() != null && !parent.getRelativePath().isEmpty()) {\n-                parentPom = pom.getParent().resolve(parent.getRelativePath()).normalize();\n-                if (Files.isDirectory(parentPom)) {\n-                    parentPom = parentPom.resolve(POM_XML);\n-                }\n-            } else {\n-                final Path parentDir = pom.getParent().getParent();\n-                if (parentDir != null) {\n-                    parentPom = parentDir.resolve(POM_XML);\n-                }\n-            }\n-            return parentPom != null && Files.exists(parentPom) ? parentPom : null;\n-        }\n-\n-        private void process(Consumer<Model> consumer) {\n-            if (processed) {\n-                return;\n-            }\n-            processed = true;\n-            if (parent != null) {\n-                parent.process(consumer);\n-            }\n-            if (model != null && model != MISSING_MODEL) {\n-                consumer.accept(model);\n-            }\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return String.valueOf(pom);\n-        }\n-    }\n }\n\ndiff --git a/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/WorkspaceModulePom.java b/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/WorkspaceModulePom.java\nnew file mode 100644\nindex 0000000000000..de895cc78cfb8\n--- /dev/null\n+++ b/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/WorkspaceModulePom.java\n@@ -0,0 +1,73 @@\n+package io.quarkus.bootstrap.resolver.maven.workspace;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.function.Consumer;\n+\n+import org.apache.maven.model.Model;\n+import org.apache.maven.model.Parent;\n+\n+public class WorkspaceModulePom {\n+    final Path pom;\n+    Model model;\n+    Model effectiveModel;\n+    WorkspaceModulePom parent;\n+    boolean processed;\n+\n+    WorkspaceModulePom(Path pom) {\n+        this(pom, null, null);\n+    }\n+\n+    public WorkspaceModulePom(Path pom, Model model, Model effectiveModel) {\n+        this.pom = pom.normalize().toAbsolutePath();\n+        this.model = model;\n+        this.effectiveModel = effectiveModel;\n+    }\n+\n+    Path getModuleDir() {\n+        var moduleDir = pom.getParent();\n+        return moduleDir == null ? WorkspaceLoader.getFsRootDir() : moduleDir;\n+    }\n+\n+    Model getModel() {\n+        return model == null ? model = WorkspaceLoader.readModel(pom) : model;\n+    }\n+\n+    Path getParentPom() {\n+        if (model == null) {\n+            return null;\n+        }\n+        Path parentPom = null;\n+        final Parent parent = model.getParent();\n+        if (parent != null && parent.getRelativePath() != null && !parent.getRelativePath().isEmpty()) {\n+            parentPom = pom.getParent().resolve(parent.getRelativePath()).normalize();\n+            if (Files.isDirectory(parentPom)) {\n+                parentPom = parentPom.resolve(WorkspaceLoader.POM_XML);\n+            }\n+        } else {\n+            final Path parentDir = pom.getParent().getParent();\n+            if (parentDir != null) {\n+                parentPom = parentDir.resolve(WorkspaceLoader.POM_XML);\n+            }\n+        }\n+        return parentPom != null && Files.exists(parentPom) ? parentPom : null;\n+    }\n+\n+    void process(Consumer<WorkspaceModulePom> consumer) {\n+        if (processed) {\n+            return;\n+        }\n+        processed = true;\n+        if (parent != null) {\n+            parent.process(consumer);\n+        }\n+        if (model != null && model != WorkspaceLoader.MISSING_MODEL) {\n+            consumer.accept(this);\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.valueOf(pom);\n+    }\n+}\n",
    "test_patch": "diff --git a/integration-tests/maven/src/test/java/io/quarkus/maven/it/DevMojoIT.java b/integration-tests/maven/src/test/java/io/quarkus/maven/it/DevMojoIT.java\nindex 95d9b26dd414f..a216d29a26112 100644\n--- a/integration-tests/maven/src/test/java/io/quarkus/maven/it/DevMojoIT.java\n+++ b/integration-tests/maven/src/test/java/io/quarkus/maven/it/DevMojoIT.java\n@@ -20,9 +20,11 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n+import java.util.Set;\n import java.util.UUID;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n@@ -41,6 +43,7 @@\n \n import io.quarkus.bootstrap.model.CapabilityErrors;\n import io.quarkus.devui.tests.DevUIJsonRPCTest;\n+import io.quarkus.maven.dependency.ArtifactCoords;\n import io.quarkus.maven.it.continuoustesting.ContinuousTestingMavenTestUtils;\n import io.quarkus.maven.it.verifier.MavenProcessInvocationResult;\n import io.quarkus.maven.it.verifier.RunningInvoker;\n@@ -510,7 +513,7 @@ public void testAlternatePom() throws Exception {\n         }\n         Files.copy(pom.toPath(), alternatePom.toPath());\n         // Now edit the pom.xml to trigger the dev mode restart\n-        filter(alternatePom, Collections.singletonMap(\"<!-- insert test dependencies here -->\",\n+        filter(alternatePom, Map.of(\"<!-- insert test dependencies here -->\",\n                 \"        <dependency>\\n\" +\n                         \"            <groupId>io.quarkus</groupId>\\n\" +\n                         \"            <artifactId>quarkus-smallrye-openapi</artifactId>\\n\" +\n@@ -576,6 +579,68 @@ protected List<String> getNonReloadableArtifacts(final List<String> log) {\n         return artifacts;\n     }\n \n+    @Test\n+    public void testPomReload() throws MavenInvocationException, IOException {\n+        testDir = initProject(\"projects/project-with-extension\", \"projects/pom-reload\");\n+\n+        // add the extra dependency to the application module\n+        filter(new File(testDir, \"runner/pom.xml\"), Map.of(\n+                \"<!-- begin comment\", \"<!-- begin comment -->\",\n+                \"end comment -->\", \"<!-- end comment -->\"));\n+\n+        // launch the application\n+        run(false);\n+\n+        var localDeps = parseArtifactCoords(devModeClient.getHttpResponse(\"/app/hello/local-modules\"));\n+        assertThat(localDeps).containsExactlyInAnyOrder(\n+                ArtifactCoords.jar(\"org.acme.extra\", \"acme-extra\", \"1.0-SNAPSHOT\"),\n+                ArtifactCoords.jar(\"org.acme\", \"acme-common-transitive\", \"1.0-SNAPSHOT\"),\n+                ArtifactCoords.jar(\"org.acme\", \"acme-common\", \"1.0-SNAPSHOT\"),\n+                ArtifactCoords.jar(\"org.acme\", \"acme-library\", \"1.0-SNAPSHOT\"),\n+                ArtifactCoords.jar(\"org.acme\", \"acme-quarkus-ext-deployment\", \"1.0-SNAPSHOT\"),\n+                ArtifactCoords.jar(\"org.acme\", \"acme-quarkus-ext\", \"1.0-SNAPSHOT\"));\n+\n+        // remove the extra dependency from the application module\n+        filter(new File(testDir, \"runner/pom.xml\"), Map.of(\n+                \"<!-- begin comment -->\", \"<!-- begin comment\",\n+                \"<!-- end comment -->\", \"end comment -->\"));\n+\n+        await()\n+                .pollDelay(100, TimeUnit.MILLISECONDS)\n+                .atMost(TestUtils.getDefaultTimeout(), TimeUnit.MINUTES)\n+                .until(() -> {\n+                    final String response = devModeClient.getHttpResponse(\"/app/hello/local-modules\");\n+                    System.out.println(\"local-modules: \" + response);\n+                    return !response.contains(\"acme-extra\");\n+                });\n+\n+        // add the extra dependency to a dependency module\n+        filter(new File(testDir, \"library/pom.xml\"), Map.of(\n+                \"<!-- begin comment\", \"<!-- begin comment -->\",\n+                \"end comment -->\", \"<!-- end comment -->\"));\n+\n+        await()\n+                .pollDelay(100, TimeUnit.MILLISECONDS)\n+                .atMost(TestUtils.getDefaultTimeout(), TimeUnit.MINUTES)\n+                .until(() -> {\n+                    final String response = devModeClient.getHttpResponse(\"/app/hello/local-modules\");\n+                    System.out.println(\"local-modules: \" + response);\n+                    return response.contains(\"acme-extra\");\n+                });\n+    }\n+\n+    private static Set<ArtifactCoords> parseArtifactCoords(String s) {\n+        if (s.charAt(0) == '[' && s.charAt(s.length() - 1) == ']') {\n+            s = s.substring(1, s.length() - 1);\n+        }\n+        var arr = s.split(\",\");\n+        final Set<ArtifactCoords> result = new HashSet<>(arr.length);\n+        for (var i : arr) {\n+            result.add(ArtifactCoords.fromString(i.trim()));\n+        }\n+        return result;\n+    }\n+\n     @Test\n     public void testRestClientCustomHeadersExtension() throws MavenInvocationException, IOException {\n         testDir = getTargetDir(\"projects/rest-client-custom-headers-extension\");\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/project-with-extension/extra/pom.xml b/integration-tests/maven/src/test/resources-filtered/projects/project-with-extension/extra/pom.xml\nnew file mode 100644\nindex 0000000000000..ae9476c5eab4e\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/project-with-extension/extra/pom.xml\n@@ -0,0 +1,11 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project>\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.acme</groupId>\n+        <artifactId>quarkus-quickstart-multimodule-parent</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+    </parent>\n+    <groupId>org.acme.extra</groupId>\n+    <artifactId>acme-extra</artifactId>\n+</project>\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/project-with-extension/extra/src/main/java/org/acme/extra/Extra.java b/integration-tests/maven/src/test/resources-filtered/projects/project-with-extension/extra/src/main/java/org/acme/extra/Extra.java\nnew file mode 100644\nindex 0000000000000..34db7b2c3971f\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/project-with-extension/extra/src/main/java/org/acme/extra/Extra.java\n@@ -0,0 +1,4 @@\n+package org.acme.extra;\n+\n+public class Extra {\n+}\n\\ No newline at end of file\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/project-with-extension/library/pom.xml b/integration-tests/maven/src/test/resources-filtered/projects/project-with-extension/library/pom.xml\nindex 00924ba037e02..767b81fba44d9 100644\n--- a/integration-tests/maven/src/test/resources-filtered/projects/project-with-extension/library/pom.xml\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/project-with-extension/library/pom.xml\n@@ -16,5 +16,12 @@\n             <groupId>org.acme</groupId>\n             <artifactId>acme-common-transitive</artifactId>\n         </dependency>\n+        <!-- begin comment\n+        <dependency>\n+            <groupId>org.acme.extra</groupId>\n+            <artifactId>acme-extra</artifactId>\n+            <version>1.0-SNAPSHOT</version>\n+        </dependency>\n+        end comment -->\n     </dependencies>\n </project>\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/project-with-extension/pom.xml b/integration-tests/maven/src/test/resources-filtered/projects/project-with-extension/pom.xml\nindex b4a41a6c51afb..aace5b49ceef3 100644\n--- a/integration-tests/maven/src/test/resources-filtered/projects/project-with-extension/pom.xml\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/project-with-extension/pom.xml\n@@ -19,6 +19,7 @@\n         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n     </properties>\n     <modules>\n+        <module>extra</module>\n         <module>common</module>\n         <module>common-transitive</module>\n         <module>quarkus-ext</module>\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/project-with-extension/runner/pom.xml b/integration-tests/maven/src/test/resources-filtered/projects/project-with-extension/runner/pom.xml\nindex fb6ae6cde6dcd..06c65ffacfcce 100644\n--- a/integration-tests/maven/src/test/resources-filtered/projects/project-with-extension/runner/pom.xml\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/project-with-extension/runner/pom.xml\n@@ -14,7 +14,7 @@\n     <dependencies>\n         <dependency>\n             <groupId>io.quarkus</groupId>\n-            <artifactId>quarkus-resteasy</artifactId>\n+            <artifactId>quarkus-rest</artifactId>\n         </dependency>\n         <dependency>\n             <groupId>org.acme</groupId>\n@@ -28,6 +28,13 @@\n             <groupId>org.acme</groupId>\n             <artifactId>acme-library</artifactId>\n         </dependency>\n+        <!-- begin comment\n+        <dependency>\n+            <groupId>org.acme.extra</groupId>\n+            <artifactId>acme-extra</artifactId>\n+            <version>1.0-SNAPSHOT</version>\n+        </dependency>\n+        end comment -->\n         <dependency>\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-junit5</artifactId>\n@@ -59,6 +66,8 @@\n                 <executions>\n                     <execution>\n                         <goals>\n+                            <!-- it's important to the generate-code goal here to test reloadPoms parameter -->\n+                            <goal>generate-code</goal>\n                             <goal>build</goal>\n                         </goals>\n                     </execution>\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47452",
    "pr_id": 47452,
    "issue_id": 43011,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Compilation error on using Generics for Rest Client: java.lang.RuntimeException: Invalid type for descriptor T \n### Describe the bug\r\n\r\nWhen creating clients for Rest Service, I was trying to create a generic interface to map the methods from `PanacheEntityResource` class that's used to create services for entities:\r\n\r\n```java\r\n@Produces(MediaType.APPLICATION_JSON)\r\npublic interface BasicClient<T extends BasicType> {    \r\n    @GET    \r\n    T get();\r\n}\r\n```\r\n\r\n```java\r\n@Path(\"/typea\")\r\n@RegisterRestClient(configKey = \"typeab-service\")\r\npublic interface TypeAClient extends BasicClient<TypeA> {\r\n}\r\n```\r\n\r\n```java\r\n@Path(\"/typeb\")\r\n@RegisterRestClient(configKey = \"typeab-service\")\r\npublic interface TypeBClient extends BasicClient<TypeB> {\r\n}\r\n```\r\n\r\nI have created a simple project ( [code-with-quarkus.zip](https://github.com/user-attachments/files/16869014/code-with-quarkus.zip) ) to show the problem. The regular Java compilation (without tests) runs fine, but when the client is used, the problem appears:\r\n\r\n```posh\r\n[ERROR] Errors:\r\n[ERROR]   ServiceTest.testTypeAClient » Runtime java.lang.RuntimeException: io.quarkus.builder.BuildException: Build failure: Build failed due to errors        \r\n[error]: Build step io.quarkus.arc.deployment.ArcProcessor#generateResources threw an exception: java.lang.reflect.UndeclaredThrowableException        \r\nat io.quarkus.deployment.ExtensionLoader$3.execute(ExtensionLoader.java:860)        \r\nat io.quarkus.builder.BuildContext.run(BuildContext.java:256)        \r\nat org.jboss.threads.ContextHandler$1.runWith(ContextHandler.java:18)        \r\nat org.jboss.threads.EnhancedQueueExecutor$Task.doRunWith(EnhancedQueueExecutor.java:2516)        \r\nat org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2495)        \r\nat org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1521)        \r\nat java.base/java.lang.Thread.run(Thread.java:1583)        \r\nat org.jboss.threads.JBossThread.run(JBossThread.java:483)\r\nCaused by: java.util.concurrent.ExecutionException: java.lang.RuntimeException: Invalid type for descriptor T        \r\nat java.base/java.util.concurrent.FutureTask.report(FutureTask.java:122)        \r\nat java.base/java.util.concurrent.FutureTask.get(FutureTask.java:191)        \r\nat io.quarkus.arc.processor.BeanProcessor.generateResources(BeanProcessor.java:432)        \r\nat io.quarkus.arc.deployment.ArcProcessor.generateResources(ArcProcessor.java:537)        \r\nat java.base/java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:733)        \r\nat io.quarkus.deployment.ExtensionLoader$3.execute(ExtensionLoader.java:854)        \r\n... 7 more\r\nCaused by: java.lang.RuntimeException: Invalid type for descriptor T        \r\nat io.quarkus.gizmo.DescriptorUtils.typeToString(DescriptorUtils.java:222)        \r\nat io.quarkus.gizmo.MethodDescriptor.<init>(MethodDescriptor.java:66)        \r\nat io.quarkus.gizmo.MethodDescriptor.of(MethodDescriptor.java:109)        \r\nat io.quarkus.arc.processor.ClientProxyGenerator.generate(ClientProxyGenerator.java:161)        \r\nat io.quarkus.arc.processor.BeanProcessor$4$1.call(BeanProcessor.java:326)        \r\nat io.quarkus.arc.processor.BeanProcessor$4$1.call(BeanProcessor.java:323)        \r\nat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)        \r\n... 6 more\r\n```\r\n\r\nIf I implement without the interface, it works fine.\r\n\r\n### Expected behavior\r\n\r\nUse a generic super interface to map common methods.\r\n\r\n### Actual behavior\r\n\r\nSee the above stack trace.\r\n\r\n### How to Reproduce?\r\n\r\nSee the attached sample project.\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\n```\r\nLinux localhost.localdomain 6.9.12-200.fc40.x86_64 #1 SMP PREEMPT_DYNAMIC Sat Jul 27 15:56:15 UTC 2024 x86_64 GNU/Linux\r\n```\r\n\r\n### Output of `java -version`\r\n\r\n```\r\nopenjdk version \"21.0.4\" 2024-07-16 OpenJDK Runtime Environment (Red_Hat-21.0.4.0.7-2) (build 21.0.4+7) OpenJDK 64-Bit Server VM (Red_Hat-21.0.4.0.7-2) (build 21.0.4+7, mixed mode, sharing)\r\n```\r\n\r\n### Quarkus version or git rev\r\n\r\n3.14.1\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\n```\r\nApache Maven 3.9.8 (36645f6c9b5079805ea5009217e36f2cffd34256)\r\nMaven home: /home/ricardo.alonso/.m2/wrapper/dists/apache-maven-3.9.8-bin/337e6d14/apache-maven-3.9.8\r\nJava version: 21.0.4, vendor: Red Hat, Inc., runtime: /usr/lib/jvm/java-21-openjdk-21.0.4.0.7-2.fc40.x86_64\r\nDefault locale: en_GB, platform encoding: UTF-8\r\nOS name: \"linux\", version: \"6.9.12-200.fc40.x86_64\", arch: \"amd64\", family: \"unix\"\r\n```\r\n\r\n### Additional information\r\n\r\n_No response_",
    "issue_word_count": 611,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/InterfacePathInheritanceTest.java",
      "independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/scanning/ResteasyReactiveScanner.java"
    ],
    "pr_changed_test_files": [
      "extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/InterfacePathInheritanceTest.java"
    ],
    "base_commit": "63962a08a065808839e1dc7ed6bd073d946ff174",
    "head_commit": "e3b4bab8d3e56f9a6ea0ba47d562c8a9c7a2b6b0",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47452",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47452",
    "dockerfile": "",
    "pr_merged_at": "2025-04-22T06:07:28.000Z",
    "patch": "diff --git a/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/scanning/ResteasyReactiveScanner.java b/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/scanning/ResteasyReactiveScanner.java\nindex c35395754a992..8e0dbde397300 100644\n--- a/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/scanning/ResteasyReactiveScanner.java\n+++ b/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/scanning/ResteasyReactiveScanner.java\n@@ -302,11 +302,9 @@ public static ResourceScanningResult scanResources(\n             }\n         }\n \n-        Map<DotName, String> clientInterfaceSubtypes = new HashMap<>();\n-        for (DotName interfaceName : clientInterfaces.keySet()) {\n-            addClientSubInterfaces(interfaceName, index, clientInterfaceSubtypes, clientInterfaces);\n+        for (DotName interfaceName : new ArrayList<>(clientInterfaces.keySet())) {\n+            addClientSubInterfaces(interfaceName, index, clientInterfaces);\n         }\n-        clientInterfaces.putAll(clientInterfaceSubtypes);\n \n         for (Map.Entry<DotName, String> i : pathInterfaces.entrySet()) {\n             for (ClassInfo clazz : index.getAllKnownImplementors(i.getKey())) {\n@@ -402,13 +400,13 @@ public static ResourceScanningResult scanResources(\n     }\n \n     private static void addClientSubInterfaces(DotName interfaceName, IndexView index,\n-            Map<DotName, String> clientInterfaceSubtypes, Map<DotName, String> clientInterfaces) {\n+            Map<DotName, String> clientInterfaces) {\n+\n         Collection<ClassInfo> subclasses = index.getKnownDirectImplementors(interfaceName);\n         for (ClassInfo subclass : subclasses) {\n-            if (!clientInterfaces.containsKey(subclass.name()) && Modifier.isInterface(subclass.flags())\n-                    && !clientInterfaceSubtypes.containsKey(subclass.name())) {\n-                clientInterfaceSubtypes.put(subclass.name(), clientInterfaces.get(interfaceName));\n-                addClientSubInterfaces(subclass.name(), index, clientInterfaceSubtypes, clientInterfaces);\n+            if (!clientInterfaces.containsKey(subclass.name()) && Modifier.isInterface(subclass.flags())) {\n+                clientInterfaces.put(subclass.name(), clientInterfaces.get(interfaceName));\n+                addClientSubInterfaces(subclass.name(), index, clientInterfaces);\n             }\n         }\n \n",
    "test_patch": "diff --git a/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/InterfacePathInheritanceTest.java b/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/InterfacePathInheritanceTest.java\nnew file mode 100644\nindex 0000000000000..bf00190a6e0be\n--- /dev/null\n+++ b/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/InterfacePathInheritanceTest.java\n@@ -0,0 +1,71 @@\n+package io.quarkus.rest.client.reactive;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+\n+import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n+import org.hamcrest.MatcherAssert;\n+import org.jboss.jandex.DotName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.builder.BuildChainBuilder;\n+import io.quarkus.builder.BuildContext;\n+import io.quarkus.builder.BuildStep;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.resteasy.reactive.common.deployment.ResourceScanningResultBuildItem;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class InterfacePathInheritanceTest {\n+    @RegisterExtension\n+    static final QuarkusUnitTest TEST = new QuarkusUnitTest()\n+            .withApplicationRoot((jar) -> jar\n+                    .addClass(Z.class)\n+                    .addClass(Y.class)\n+                    .addClass(InheritanceTestClient.class))\n+            .addBuildChainCustomizer(new Consumer<BuildChainBuilder>() {\n+                @Override\n+                public void accept(BuildChainBuilder buildChainBuilder) {\n+                    buildChainBuilder.addBuildStep(new BuildStep() {\n+                        @Override\n+                        public void execute(BuildContext context) {\n+                            ResourceScanningResultBuildItem consumed = context.consume(ResourceScanningResultBuildItem.class);\n+                            context.produce(new FeatureBuildItem(\"just-here-to-invoke-buildstep\"));\n+\n+                            Map<DotName, String> clientInterfaces = consumed.getResult().getClientInterfaces();\n+                            MatcherAssert.assertThat(clientInterfaces.size(), is(3));\n+                            clientInterfaces.forEach((k, v) -> {\n+                                MatcherAssert.assertThat(\"Path of %s needs to match\".formatted(k), v, is(\"hello\"));\n+                            });\n+                        }\n+                    }).consumes(ResourceScanningResultBuildItem.class).produces(FeatureBuildItem.class).build();\n+                }\n+            });\n+\n+    @Test\n+    void basicTest() {\n+        // see addBuildChainCustomizer of RegisterExtension for the test logic\n+    }\n+\n+    @Path(\"hello\")\n+    public interface Z {\n+        @GET\n+        @Path(\"something\")\n+        String get();\n+    }\n+\n+    public interface Y extends Z {\n+\n+    }\n+\n+    @RegisterRestClient\n+    public interface InheritanceTestClient extends Y {\n+\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47451",
    "pr_id": 47451,
    "issue_id": 47315,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Default constructors of OIDC config builders should set correct default values\n### Description\n\nIt is possible to build an individual OIDC config group with a group specific builder. \nThese group specific builders can be initialized from the main OidcTenantConfig builder, when they correctly pick up default values, for example, `true` for some boolean properties. \nBut, when the group specific builder is created with its default constructor, the correct default values are not set, requiring users calling additional builder methods\n\n### Implementation ideas\n\n_No response_",
    "issue_word_count": 82,
    "test_files_count": 3,
    "non_test_files_count": 5,
    "pr_changed_files": [
      "extensions/oidc-client-registration/runtime/src/main/java/io/quarkus/oidc/client/registration/OidcClientRegistrationConfig.java",
      "extensions/oidc-client-registration/runtime/src/main/java/io/quarkus/oidc/client/registration/OidcClientRegistrationConfigBuilder.java",
      "extensions/oidc-client-registration/runtime/src/test/java/io/quarkus/oidc/client/registration/OidcClientRegistrationConfigBuilderTest.java",
      "extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/OidcClientConfigBuilder.java",
      "extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/OidcClientConfig.java",
      "extensions/oidc-client/runtime/src/test/java/io/quarkus/oidc/client/OidcClientConfigBuilderTest.java",
      "extensions/oidc-common/runtime/src/main/java/io/quarkus/oidc/common/runtime/config/OidcClientCommonConfigBuilder.java",
      "extensions/oidc-common/runtime/src/test/java/io/quarkus/oidc/common/runtime/OidcClientCommonConfigBuilderTest.java"
    ],
    "pr_changed_test_files": [
      "extensions/oidc-client-registration/runtime/src/test/java/io/quarkus/oidc/client/registration/OidcClientRegistrationConfigBuilderTest.java",
      "extensions/oidc-client/runtime/src/test/java/io/quarkus/oidc/client/OidcClientConfigBuilderTest.java",
      "extensions/oidc-common/runtime/src/test/java/io/quarkus/oidc/common/runtime/OidcClientCommonConfigBuilderTest.java"
    ],
    "base_commit": "63962a08a065808839e1dc7ed6bd073d946ff174",
    "head_commit": "8d11c397d38f20b97a6f600241d8cde9a0d4af39",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47451",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47451",
    "dockerfile": "",
    "pr_merged_at": "2025-04-21T21:46:34.000Z",
    "patch": "diff --git a/extensions/oidc-client-registration/runtime/src/main/java/io/quarkus/oidc/client/registration/OidcClientRegistrationConfig.java b/extensions/oidc-client-registration/runtime/src/main/java/io/quarkus/oidc/client/registration/OidcClientRegistrationConfig.java\nindex 19a671c00dfa5..1cdac1204e257 100644\n--- a/extensions/oidc-client-registration/runtime/src/main/java/io/quarkus/oidc/client/registration/OidcClientRegistrationConfig.java\n+++ b/extensions/oidc-client-registration/runtime/src/main/java/io/quarkus/oidc/client/registration/OidcClientRegistrationConfig.java\n@@ -1,14 +1,9 @@\n package io.quarkus.oidc.client.registration;\n \n-import static io.quarkus.oidc.client.registration.runtime.OidcClientRegistrationsConfig.getDefaultClientRegistration;\n-\n import java.util.Map;\n-import java.util.Objects;\n import java.util.Optional;\n \n-import io.quarkus.oidc.client.registration.runtime.OidcClientRegistrationsConfig;\n import io.quarkus.oidc.common.runtime.config.OidcCommonConfig;\n-import io.smallrye.config.SmallRyeConfigBuilder;\n import io.smallrye.config.WithDefault;\n \n //https://datatracker.ietf.org/doc/html/rfc7592\n@@ -74,13 +69,7 @@ interface Metadata {\n      * @return OidcClientRegistrationConfigBuilder builder\n      */\n     static OidcClientRegistrationConfigBuilder builder() {\n-        var clientRegistrationsConfig = new SmallRyeConfigBuilder()\n-                .addDiscoveredConverters()\n-                .withMapping(OidcClientRegistrationsConfig.class)\n-                .build()\n-                .getConfigMapping(OidcClientRegistrationsConfig.class);\n-        var clientRegistrationWithDefaultValues = getDefaultClientRegistration(clientRegistrationsConfig);\n-        return new OidcClientRegistrationConfigBuilder(clientRegistrationWithDefaultValues);\n+        return new OidcClientRegistrationConfigBuilder();\n     }\n \n     /**\n@@ -90,7 +79,6 @@ static OidcClientRegistrationConfigBuilder builder() {\n      * @return OidcClientRegistrationConfigBuilder\n      */\n     static OidcClientRegistrationConfigBuilder builder(OidcClientRegistrationConfig config) {\n-        Objects.requireNonNull(config);\n         return new OidcClientRegistrationConfigBuilder(config);\n     }\n \n\ndiff --git a/extensions/oidc-client-registration/runtime/src/main/java/io/quarkus/oidc/client/registration/OidcClientRegistrationConfigBuilder.java b/extensions/oidc-client-registration/runtime/src/main/java/io/quarkus/oidc/client/registration/OidcClientRegistrationConfigBuilder.java\nindex 65c5f70d18cc2..9b84240099871 100644\n--- a/extensions/oidc-client-registration/runtime/src/main/java/io/quarkus/oidc/client/registration/OidcClientRegistrationConfigBuilder.java\n+++ b/extensions/oidc-client-registration/runtime/src/main/java/io/quarkus/oidc/client/registration/OidcClientRegistrationConfigBuilder.java\n@@ -1,11 +1,15 @@\n package io.quarkus.oidc.client.registration;\n \n+import static io.quarkus.oidc.client.registration.runtime.OidcClientRegistrationsConfig.getDefaultClientRegistration;\n+\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Objects;\n import java.util.Optional;\n \n+import io.quarkus.oidc.client.registration.runtime.OidcClientRegistrationsConfig;\n import io.quarkus.oidc.common.runtime.config.OidcCommonConfigBuilder;\n+import io.smallrye.config.SmallRyeConfigBuilder;\n \n /**\n  * The {@link OidcClientRegistrationConfig} builder. This builder is not thread safe.\n@@ -60,14 +64,31 @@ public Metadata metadata() {\n         }\n     }\n \n+    /**\n+     * {@link OidcClientRegistrationConfig} with documented defaults.\n+     * Cached here so that we avoid building the SmallRye Config again and again when no-args builder constructors\n+     * are used.\n+     */\n+    private static volatile OidcClientRegistrationConfig configWithDefaults = null;\n+\n     private Optional<String> id;\n     private boolean registrationEnabled;\n     private boolean registerEarly;\n     private Optional<String> initialToken;\n     private OidcClientRegistrationConfig.Metadata metadata;\n \n-    OidcClientRegistrationConfigBuilder(OidcClientRegistrationConfig config) {\n-        super(config);\n+    /**\n+     * Creates {@link OidcClientRegistrationConfig} builder populated with documented default values.\n+     */\n+    public OidcClientRegistrationConfigBuilder() {\n+        this(getConfigWithDefaults());\n+    }\n+\n+    /**\n+     * Creates {@link OidcClientRegistrationConfig} builder populated with {@code config} values.\n+     */\n+    public OidcClientRegistrationConfigBuilder(OidcClientRegistrationConfig config) {\n+        super(Objects.requireNonNull(config));\n         this.id = config.id();\n         this.registrationEnabled = config.registrationEnabled();\n         this.registerEarly = config.registerEarly();\n@@ -171,7 +192,7 @@ public MetadataBuilder(OidcClientRegistrationConfigBuilder configBuilder) {\n         }\n \n         public MetadataBuilder() {\n-            this.configBuilder = null;\n+            this(new OidcClientRegistrationConfigBuilder());\n         }\n \n         public OidcClientRegistrationConfig.Metadata build() {\n@@ -235,4 +256,16 @@ public MetadataBuilder extraProps(Map<String, String> extraProps) {\n             return this;\n         }\n     }\n+\n+    private static OidcClientRegistrationConfig getConfigWithDefaults() {\n+        if (configWithDefaults == null) {\n+            final OidcClientRegistrationsConfig clientRegistrationsConfig = new SmallRyeConfigBuilder()\n+                    .addDiscoveredConverters()\n+                    .withMapping(OidcClientRegistrationsConfig.class)\n+                    .build()\n+                    .getConfigMapping(OidcClientRegistrationsConfig.class);\n+            configWithDefaults = getDefaultClientRegistration(clientRegistrationsConfig);\n+        }\n+        return configWithDefaults;\n+    }\n }\n\ndiff --git a/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/OidcClientConfigBuilder.java b/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/OidcClientConfigBuilder.java\nindex 212befb6de1ab..cfbf48ddba9b0 100644\n--- a/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/OidcClientConfigBuilder.java\n+++ b/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/OidcClientConfigBuilder.java\n@@ -11,7 +11,9 @@\n \n import io.quarkus.oidc.client.runtime.OidcClientConfig;\n import io.quarkus.oidc.client.runtime.OidcClientConfig.Grant;\n+import io.quarkus.oidc.client.runtime.OidcClientsConfig;\n import io.quarkus.oidc.common.runtime.config.OidcClientCommonConfigBuilder;\n+import io.smallrye.config.SmallRyeConfigBuilder;\n \n /**\n  * Builder for the {@link io.quarkus.oidc.client.runtime.OidcClientConfig}. This builder is not thread-safe.\n@@ -103,6 +105,13 @@ public Map<String, String> headers() {\n         }\n     }\n \n+    /**\n+     * {@link OidcClientConfig} with documented defaults.\n+     * Cached here so that we avoid building the SmallRye Config again and again when no-args builder constructors\n+     * are used.\n+     */\n+    private static volatile OidcClientConfig configWithDefaults = null;\n+\n     private final Map<String, String> headers = new HashMap<>();\n     private boolean earlyTokensAcquisition;\n     private final Map<String, Map<String, String>> grantOptions = new HashMap<>();\n@@ -115,6 +124,13 @@ public Map<String, String> headers() {\n     private boolean clientEnabled;\n     private Optional<String> id;\n \n+    /**\n+     * Creates {@link OidcClientConfigBuilder} builder populated with documented default values.\n+     */\n+    public OidcClientConfigBuilder() {\n+        this(getConfigWithDefaults());\n+    }\n+\n     /**\n      * @param config created either by this builder or SmallRye Config; config methods must never return null\n      */\n@@ -339,7 +355,7 @@ private record GrantImpl(Type type, String accessTokenProperty, String refreshTo\n         private String refreshExpiresInProperty;\n \n         public GrantBuilder() {\n-            this(OidcClientConfig.builder());\n+            this(new OidcClientConfigBuilder());\n         }\n \n         public GrantBuilder(OidcClientConfigBuilder builder) {\n@@ -405,4 +421,16 @@ public Grant build() {\n             return new GrantImpl(type, accessTokenProperty, refreshTokenProperty, expiresInProperty, refreshExpiresInProperty);\n         }\n     }\n+\n+    private static OidcClientConfig getConfigWithDefaults() {\n+        if (configWithDefaults == null) {\n+            final OidcClientsConfig clientsConfig = new SmallRyeConfigBuilder()\n+                    .addDiscoveredConverters()\n+                    .withMapping(OidcClientsConfig.class)\n+                    .build()\n+                    .getConfigMapping(OidcClientsConfig.class);\n+            configWithDefaults = OidcClientsConfig.getDefaultClient(clientsConfig);\n+        }\n+        return configWithDefaults;\n+    }\n }\n\ndiff --git a/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/OidcClientConfig.java b/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/OidcClientConfig.java\nindex 155bdd99a3ad0..2cfe03fd896cc 100644\n--- a/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/OidcClientConfig.java\n+++ b/extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/OidcClientConfig.java\n@@ -10,7 +10,6 @@\n import io.quarkus.oidc.common.runtime.config.OidcClientCommonConfig;\n import io.quarkus.oidc.common.runtime.config.OidcCommonConfig;\n import io.quarkus.runtime.annotations.ConfigDocMapKey;\n-import io.smallrye.config.SmallRyeConfigBuilder;\n import io.smallrye.config.WithDefault;\n \n public interface OidcClientConfig extends OidcClientCommonConfig {\n@@ -179,12 +178,7 @@ public String getGrantType() {\n      * @return OidcClientConfigBuilder builder\n      */\n     static OidcClientConfigBuilder builder() {\n-        var clientsConfig = new SmallRyeConfigBuilder()\n-                .addDiscoveredConverters()\n-                .withMapping(OidcClientsConfig.class)\n-                .build()\n-                .getConfigMapping(OidcClientsConfig.class);\n-        return builder(OidcClientsConfig.getDefaultClient(clientsConfig));\n+        return new OidcClientConfigBuilder();\n     }\n \n     /**\n\ndiff --git a/extensions/oidc-common/runtime/src/main/java/io/quarkus/oidc/common/runtime/config/OidcClientCommonConfigBuilder.java b/extensions/oidc-common/runtime/src/main/java/io/quarkus/oidc/common/runtime/config/OidcClientCommonConfigBuilder.java\nindex 643fa456cae2e..7026891aae877 100644\n--- a/extensions/oidc-common/runtime/src/main/java/io/quarkus/oidc/common/runtime/config/OidcClientCommonConfigBuilder.java\n+++ b/extensions/oidc-common/runtime/src/main/java/io/quarkus/oidc/common/runtime/config/OidcClientCommonConfigBuilder.java\n@@ -13,6 +13,7 @@\n import io.quarkus.oidc.common.runtime.config.OidcClientCommonConfig.Credentials.Provider;\n import io.quarkus.oidc.common.runtime.config.OidcClientCommonConfig.Credentials.Secret;\n import io.quarkus.oidc.common.runtime.config.OidcClientCommonConfig.Credentials.Secret.Method;\n+import io.smallrye.config.SmallRyeConfigBuilder;\n \n public abstract class OidcClientCommonConfigBuilder<T> extends OidcCommonConfigBuilder<T> {\n \n@@ -169,10 +170,7 @@ private record CredentialsImpl(Optional<String> secret, Secret clientSecret, Jwt\n         private Jwt jwt;\n \n         public CredentialsBuilder() {\n-            this.builder = null;\n-            this.secret = Optional.empty();\n-            this.clientSecret = new SecretBuilder<>().build();\n-            this.jwt = new JwtBuilder<>().build();\n+            this(getConfigBuilderWithDefaults());\n         }\n \n         public CredentialsBuilder(OidcClientCommonConfigBuilder<T> builder) {\n@@ -268,6 +266,21 @@ public T end() {\n         public Credentials build() {\n             return new CredentialsImpl(secret, clientSecret, jwt);\n         }\n+\n+        private static <T> OidcClientCommonConfigBuilder<T> getConfigBuilderWithDefaults() {\n+            final OidcClientCommonConfig clientCommonConfig = new SmallRyeConfigBuilder()\n+                    .addDiscoveredConverters()\n+                    .withMapping(OidcClientCommonConfig.class)\n+                    .build()\n+                    .getConfigMapping(OidcClientCommonConfig.class);\n+            return new OidcClientCommonConfigBuilder<>(clientCommonConfig) {\n+                @Override\n+                protected T getBuilder() {\n+                    throw new UnsupportedOperationException(\n+                            \"Use the 'OidcClientCommonConfigBuilder.CredentialsBuilder#build' method instead\");\n+                }\n+            };\n+        }\n     }\n \n     /**\n",
    "test_patch": "diff --git a/extensions/oidc-client-registration/runtime/src/test/java/io/quarkus/oidc/client/registration/OidcClientRegistrationConfigBuilderTest.java b/extensions/oidc-client-registration/runtime/src/test/java/io/quarkus/oidc/client/registration/OidcClientRegistrationConfigBuilderTest.java\nindex 214e33b2238c2..c87dee5a35215 100644\n--- a/extensions/oidc-client-registration/runtime/src/test/java/io/quarkus/oidc/client/registration/OidcClientRegistrationConfigBuilderTest.java\n+++ b/extensions/oidc-client-registration/runtime/src/test/java/io/quarkus/oidc/client/registration/OidcClientRegistrationConfigBuilderTest.java\n@@ -17,7 +17,12 @@ public class OidcClientRegistrationConfigBuilderTest {\n     @Test\n     public void testDefaultValues() {\n         var config = OidcClientRegistrationConfig.builder().build();\n+        testDefaultValues(config);\n+        config = new OidcClientRegistrationConfigBuilder().build();\n+        testDefaultValues(config);\n+    }\n \n+    private static void testDefaultValues(OidcClientRegistrationConfig config) {\n         // OidcClientRegistrationConfig methods\n         assertTrue(config.id().isEmpty());\n         assertTrue(config.registrationEnabled());\n@@ -265,4 +270,13 @@ public void testCreateBuilderShortcuts() {\n         assertEquals(\"registration-path\", config.registrationPath().orElse(null));\n         assertEquals(\"redirect-uri\", config.metadata().redirectUri().orElse(null));\n     }\n+\n+    @Test\n+    public void testMetadataBuilderDefaults() {\n+        var metadata = new MetadataBuilder().build();\n+        assertTrue(metadata.clientName().isEmpty());\n+        assertTrue(metadata.postLogoutUri().isEmpty());\n+        assertTrue(metadata.redirectUri().isEmpty());\n+        assertTrue(metadata.extraProps().isEmpty());\n+    }\n }\n\ndiff --git a/extensions/oidc-client/runtime/src/test/java/io/quarkus/oidc/client/OidcClientConfigBuilderTest.java b/extensions/oidc-client/runtime/src/test/java/io/quarkus/oidc/client/OidcClientConfigBuilderTest.java\nindex 5de44331d95f8..524353939bfea 100644\n--- a/extensions/oidc-client/runtime/src/test/java/io/quarkus/oidc/client/OidcClientConfigBuilderTest.java\n+++ b/extensions/oidc-client/runtime/src/test/java/io/quarkus/oidc/client/OidcClientConfigBuilderTest.java\n@@ -26,7 +26,12 @@ public class OidcClientConfigBuilderTest {\n     @Test\n     public void testDefaultValues() {\n         var config = OidcClientConfig.builder().id(\"default-test\").build();\n+        testDefaultValues(config);\n+        config = new OidcClientConfigBuilder().id(\"default-test\").build();\n+        testDefaultValues(config);\n+    }\n \n+    private static void testDefaultValues(OidcClientConfig config) {\n         // OidcClientConfig methods\n         assertEquals(\"default-test\", config.id().orElse(null));\n         assertTrue(config.clientEnabled());\n\ndiff --git a/extensions/oidc-common/runtime/src/test/java/io/quarkus/oidc/common/runtime/OidcClientCommonConfigBuilderTest.java b/extensions/oidc-common/runtime/src/test/java/io/quarkus/oidc/common/runtime/OidcClientCommonConfigBuilderTest.java\nnew file mode 100644\nindex 0000000000000..5740558ffcc27\n--- /dev/null\n+++ b/extensions/oidc-common/runtime/src/test/java/io/quarkus/oidc/common/runtime/OidcClientCommonConfigBuilderTest.java\n@@ -0,0 +1,55 @@\n+package io.quarkus.oidc.common.runtime;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.oidc.common.runtime.config.OidcClientCommonConfig.Credentials;\n+import io.quarkus.oidc.common.runtime.config.OidcClientCommonConfigBuilder.CredentialsBuilder;\n+\n+public class OidcClientCommonConfigBuilderTest {\n+\n+    @Test\n+    public void testCredentialsBuilderDefaultValues() {\n+        Credentials credentials = new CredentialsBuilder<>().build();\n+        assertNotNull(credentials);\n+        assertTrue(credentials.secret().isEmpty());\n+        var clientSecret = credentials.clientSecret();\n+        assertNotNull(clientSecret);\n+        assertTrue(clientSecret.value().isEmpty());\n+        assertTrue(clientSecret.method().isEmpty());\n+        var provider = clientSecret.provider();\n+        assertNotNull(provider);\n+        assertTrue(provider.key().isEmpty());\n+        assertTrue(provider.keyringName().isEmpty());\n+        assertTrue(provider.name().isEmpty());\n+        var jwt = credentials.jwt();\n+        assertNotNull(jwt);\n+        assertEquals(Credentials.Jwt.Source.CLIENT, jwt.source());\n+        assertTrue(jwt.secret().isEmpty());\n+        provider = jwt.secretProvider();\n+        assertNotNull(provider);\n+        assertTrue(provider.key().isEmpty());\n+        assertTrue(provider.keyringName().isEmpty());\n+        assertTrue(provider.name().isEmpty());\n+        assertTrue(jwt.key().isEmpty());\n+        assertTrue(jwt.keyFile().isEmpty());\n+        assertTrue(jwt.keyStoreFile().isEmpty());\n+        assertTrue(jwt.keyStorePassword().isEmpty());\n+        assertTrue(jwt.keyId().isEmpty());\n+        assertTrue(jwt.keyPassword().isEmpty());\n+        assertTrue(jwt.audience().isEmpty());\n+        assertTrue(jwt.tokenKeyId().isEmpty());\n+        assertTrue(jwt.issuer().isEmpty());\n+        assertTrue(jwt.subject().isEmpty());\n+        assertTrue(jwt.claims().isEmpty());\n+        assertTrue(jwt.signatureAlgorithm().isEmpty());\n+        assertEquals(10, jwt.lifespan());\n+        assertFalse(jwt.assertion());\n+        assertFalse(jwt.tokenPath().isPresent());\n+    }\n+\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47450",
    "pr_id": 47450,
    "issue_id": 47372,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Make OIDC required claims support arrays and apply to introspection responses\n### Description\n\n`quarkus.oidc.token.required-claims` map property is a simpler alternative to registering Jose4j `Validator` for enforcing that some JWT token claims contain required values.\n\nCurrently it can only deal with simple string claims. Claims like issuer, audience (that may be a list) have a dedicated configuration support.\nIf users want to check some other custom claims that may be lists of strings, they have to register Jose4j `Validator`.\n\nIt is also not currently applicable to introspection responses.\n\nIt should start with supporting claims that might be arrays of strings, and indeed, it should be applicable to introspection responses.\n\n\n### Implementation ideas\n\nIf `quarkus.oidc.token.required-claims.myclaim=a` identifies a `myclaim` array claim, then it should be checked that this array contains `a`. \nIf it is `quarkus.oidc.token.required-claims.myclaim=a,b` then the array should contain both `a` and `b`.\n",
    "issue_word_count": 156,
    "test_files_count": 11,
    "non_test_files_count": 5,
    "pr_changed_files": [
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcProvider.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/StaticTenantResolver.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/builders/TokenConfigBuilder.java",
      "extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcTenantConfigBuilderTest.java",
      "extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcTenantConfigImpl.java",
      "integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/CustomTenantConfigResolver.java",
      "integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/OidcResource.java",
      "integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/TenantIntrospectionRequiredClaimsResource.java",
      "integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/TenantSpecificJwtPreferredNameValidator.java",
      "integration-tests/oidc-tenancy/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java",
      "integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/AdminResource.java",
      "integration-tests/oidc-wiremock/src/main/resources/application.properties",
      "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java",
      "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/StaticTenantIssuerResolverTest.java"
    ],
    "pr_changed_test_files": [
      "extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcTenantConfigBuilderTest.java",
      "extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcTenantConfigImpl.java",
      "integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/CustomTenantConfigResolver.java",
      "integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/OidcResource.java",
      "integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/TenantIntrospectionRequiredClaimsResource.java",
      "integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/TenantSpecificJwtPreferredNameValidator.java",
      "integration-tests/oidc-tenancy/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java",
      "integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/AdminResource.java",
      "integration-tests/oidc-wiremock/src/main/resources/application.properties",
      "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java",
      "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/StaticTenantIssuerResolverTest.java"
    ],
    "base_commit": "bb0dc7700f2857246cca4d3334f834c96508ae08",
    "head_commit": "496d0f432b9fc64b52d6f16836f2889cd342a3af",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47450",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47450",
    "dockerfile": "",
    "pr_merged_at": "2025-04-22T10:17:42.000Z",
    "patch": "diff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java\nindex c9f24a7b5ded9..2ca170864a3e2 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java\n@@ -2222,7 +2222,7 @@ public static Token fromAudience(String... audience) {\n          * Strings are the only supported types. Use {@linkplain SecurityIdentityAugmentor} to verify claims of other types or\n          * complex claims.\n          */\n-        public Map<String, String> requiredClaims = new HashMap<>();\n+        public Map<String, Set<String>> requiredClaims = new HashMap<>();\n \n         /**\n          * Expected token type\n@@ -2507,11 +2507,11 @@ public void setDecryptionKeyLocation(String decryptionKeyLocation) {\n             this.decryptionKeyLocation = Optional.of(decryptionKeyLocation);\n         }\n \n-        public Map<String, String> getRequiredClaims() {\n+        public Map<String, Set<String>> getRequiredClaims() {\n             return requiredClaims;\n         }\n \n-        public void setRequiredClaims(Map<String, String> requiredClaims) {\n+        public void setRequiredClaims(Map<String, Set<String>> requiredClaims) {\n             this.requiredClaims = requiredClaims;\n         }\n \n@@ -2596,7 +2596,7 @@ public boolean subjectRequired() {\n         }\n \n         @Override\n-        public Map<String, String> requiredClaims() {\n+        public Map<String, Set<String>> requiredClaims() {\n             return requiredClaims;\n         }\n \n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcProvider.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcProvider.java\nindex 02614f4823344..1bd93cc06f00e 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcProvider.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcProvider.java\n@@ -1,5 +1,7 @@\n package io.quarkus.oidc.runtime;\n \n+import static java.util.Objects.requireNonNull;\n+\n import java.io.Closeable;\n import java.nio.charset.StandardCharsets;\n import java.security.Key;\n@@ -8,9 +10,11 @@\n import java.util.Base64;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import java.util.function.BiFunction;\n import java.util.function.Function;\n \n+import jakarta.json.JsonArray;\n import jakarta.json.JsonObject;\n \n import org.eclipse.microprofile.jwt.Claims;\n@@ -76,7 +80,7 @@ public class OidcProvider implements Closeable {\n     final TokenCustomizer tokenCustomizer;\n     final String issuer;\n     final String[] audience;\n-    final Map<String, String> requiredClaims;\n+    final Map<String, Set<String>> requiredClaims;\n     final Key tokenDecryptionKey;\n     final AlgorithmConstraints requiredAlgorithmConstraints;\n \n@@ -160,8 +164,9 @@ private String[] checkAudienceProp() {\n         return audienceProp != null ? audienceProp.toArray(new String[] {}) : null;\n     }\n \n-    private Map<String, String> checkRequiredClaimsProp() {\n-        return oidcConfig != null ? oidcConfig.token().requiredClaims() : null;\n+    private Map<String, Set<String>> checkRequiredClaimsProp() {\n+        return oidcConfig != null && !oidcConfig.token().requiredClaims().isEmpty() ? oidcConfig.token().requiredClaims()\n+                : null;\n     }\n \n     public TokenVerificationResult verifySelfSignedJwtToken(String token, Key generatedInternalSignatureKey)\n@@ -216,7 +221,7 @@ private TokenVerificationResult verifyJwtTokenInternal(String token,\n         }\n \n         if (nonce != null) {\n-            builder.registerValidator(new CustomClaimsValidator(Map.of(OidcConstants.NONCE, nonce)));\n+            builder.registerValidator(new CustomClaimsValidator(Map.of(OidcConstants.NONCE, Set.of(nonce))));\n         }\n \n         for (Validator customValidator : customValidators) {\n@@ -241,7 +246,7 @@ private TokenVerificationResult verifyJwtTokenInternal(String token,\n         } else {\n             builder.setSkipDefaultAudienceValidation();\n         }\n-        if (requiredClaims != null && !requiredClaims.isEmpty()) {\n+        if (requiredClaims != null) {\n             builder.registerValidator(new CustomClaimsValidator(requiredClaims));\n         }\n \n@@ -387,22 +392,46 @@ public TokenIntrospection apply(TokenIntrospection introspectionResult, Throwabl\n                             throw new AuthenticationFailedException(ex, tokenMap(token, idToken));\n                         }\n \n-                        if (requiredClaims != null && !requiredClaims.isEmpty()) {\n-                            for (Map.Entry<String, String> requiredClaim : requiredClaims.entrySet()) {\n-                                String introspectionClaimValue = null;\n-                                try {\n-                                    introspectionClaimValue = introspectionResult.getString(requiredClaim.getKey());\n-                                } catch (ClassCastException ex) {\n-                                    LOG.debugf(\"Introspection claim %s is not String\", requiredClaim.getKey());\n+                        if (requiredClaims != null) {\n+                            for (Map.Entry<String, Set<String>> requiredClaim : requiredClaims.entrySet()) {\n+                                final String requiredClaimName = requiredClaim.getKey();\n+                                if (!introspectionResult.contains(requiredClaimName)) {\n+                                    LOG.debugf(\"Introspection claim %s is missing\", requiredClaimName);\n                                     throw new AuthenticationFailedException(tokenMap(token, idToken));\n                                 }\n-                                if (introspectionClaimValue == null) {\n-                                    LOG.debugf(\"Introspection claim %s is missing\", requiredClaim.getKey());\n+                                final Set<String> requiredClaimValues = requiredClaim.getValue();\n+                                if (requiredClaimValues.size() == 1) {\n+                                    String introspectionClaimValue = null;\n+                                    try {\n+                                        introspectionClaimValue = introspectionResult.getString(requiredClaimName);\n+                                    } catch (ClassCastException ex) {\n+                                        LOG.debugf(\"Introspection claim %s is not String\", requiredClaimName);\n+                                    }\n+                                    String requiredClaimValue = requiredClaimValues.iterator().next();\n+                                    if (requiredClaimValue.equals(introspectionClaimValue)) {\n+                                        continue;\n+                                    }\n+                                }\n+                                final JsonArray actualClaimValueArray;\n+                                try {\n+                                    actualClaimValueArray = requireNonNull(introspectionResult.getArray(requiredClaimName));\n+                                } catch (Exception ignored) {\n+                                    LOG.debugf(\"Introspection claim %s is neither string or array\", requiredClaimName);\n                                     throw new AuthenticationFailedException(tokenMap(token, idToken));\n                                 }\n-                                if (!introspectionClaimValue.equals(requiredClaim.getValue())) {\n+                                requiredClaimValuesLoop: for (String requiredClaimValue : requiredClaimValues) {\n+                                    for (int i = 0; i < actualClaimValueArray.size(); i++) {\n+                                        try {\n+                                            String actualClaimValue = actualClaimValueArray.getString(i);\n+                                            if (requiredClaimValue.equals(actualClaimValue)) {\n+                                                continue requiredClaimValuesLoop;\n+                                            }\n+                                        } catch (Exception ignored) {\n+                                            // try next actual claim value\n+                                        }\n+                                    }\n                                     LOG.debugf(\"Value of the introspection claim %s does not match required value of %s\",\n-                                            requiredClaim.getKey(), requiredClaim.getValue());\n+                                            requiredClaimName, requiredClaimValue);\n                                     throw new AuthenticationFailedException(tokenMap(token, idToken));\n                                 }\n                             }\n@@ -416,8 +445,7 @@ public TokenIntrospection apply(TokenIntrospection introspectionResult, Throwabl\n \n     private void verifyTokenExpiry(String token, boolean idToken, Long exp) {\n         if (isTokenExpired(exp)) {\n-            String error = String.format(\"Token issued to client %s has expired\",\n-                    oidcConfig.clientId().get());\n+            String error = String.format(\"Token issued to client %s has expired\", oidcConfig.clientId().get());\n             LOG.debugf(error);\n             throw new AuthenticationFailedException(\n                     new InvalidJwtException(error,\n@@ -436,7 +464,7 @@ private int getLifespanGrace() {\n                 : 0;\n     }\n \n-    private static final long now() {\n+    private static long now() {\n         return System.currentTimeMillis();\n     }\n \n@@ -624,7 +652,7 @@ public Key resolveKey(JsonWebSignature jws, List<JsonWebStructure> nestingContex\n         }\n \n         private Key initKey(Key generatedInternalSignatureKey) {\n-            String clientSecret = OidcCommonUtils.getClientOrJwtSecret(oidcConfig.credentials);\n+            String clientSecret = OidcCommonUtils.getClientOrJwtSecret(oidcConfig.credentials());\n             if (clientSecret != null) {\n                 LOG.debug(\"Verifying internal ID token with a configured client secret\");\n                 return KeyUtils.createSecretKeyFromSecret(clientSecret);\n@@ -642,11 +670,11 @@ public OidcConfigurationMetadata getMetadata() {\n         return client == null ? null : client.getMetadata();\n     }\n \n-    private static class CustomClaimsValidator implements Validator {\n+    private static final class CustomClaimsValidator implements Validator {\n \n-        private final Map<String, String> customClaims;\n+        private final Map<String, Set<String>> customClaims;\n \n-        public CustomClaimsValidator(Map<String, String> customClaims) {\n+        private CustomClaimsValidator(Map<String, Set<String>> customClaims) {\n             this.customClaims = customClaims;\n         }\n \n@@ -658,13 +686,29 @@ public String validate(JwtContext jwtContext) throws MalformedClaimException {\n                 if (!claims.hasClaim(claimName)) {\n                     return \"claim \" + claimName + \" is missing\";\n                 }\n-                if (!claims.isClaimValueString(claimName)) {\n-                    throw new MalformedClaimException(\"expected claim \" + claimName + \" to be a string\");\n-                }\n-                var claimValue = claims.getStringClaimValue(claimName);\n-                var targetValue = targetClaim.getValue();\n-                if (!claimValue.equals(targetValue)) {\n-                    return \"claim \" + claimName + \" does not match expected value of \" + targetValue;\n+                Set<String> requiredClaimValues = targetClaim.getValue();\n+                if (claims.isClaimValueString(claimName)) {\n+                    if (requiredClaimValues.size() == 1) {\n+                        String actualClaimValue = claims.getStringClaimValue(claimName);\n+                        String requiredClaimValue = requiredClaimValues.iterator().next();\n+                        if (!requiredClaimValue.equals(actualClaimValue)) {\n+                            return \"claim \" + claimName + \" does not match expected value of \" + requiredClaimValues;\n+                        }\n+                    } else {\n+                        throw new MalformedClaimException(\"expected claim \" + claimName + \" must be a list of strings\");\n+                    }\n+                } else {\n+                    if (claims.isClaimValueStringList(claimName)) {\n+                        List<String> actualClaimValues = claims.getStringListClaimValue(claimName);\n+                        for (String requiredClaimValue : requiredClaimValues) {\n+                            if (!actualClaimValues.contains(requiredClaimValue)) {\n+                                return \"claim \" + claimName + \" does not match expected value of \" + requiredClaimValues;\n+                            }\n+                        }\n+                    } else {\n+                        throw new MalformedClaimException(\n+                                \"expected claim \" + claimName + \" must be a list of strings or a string\");\n+                    }\n                 }\n             }\n             return null;\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java\nindex 55d07c111b036..b3ba37830ca89 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java\n@@ -1002,13 +1002,14 @@ interface Token {\n \n         /**\n          * A map of required claims and their expected values.\n-         * For example, `quarkus.oidc.token.required-claims.org_id = org_xyz` would require tokens to have the `org_id` claim to\n-         * be present and set to `org_xyz`.\n-         * Strings are the only supported types. Use {@linkplain SecurityIdentityAugmentor} to verify claims of other types or\n-         * complex claims.\n+         * For example, `quarkus.oidc.token.required-claims.org_id = org_xyz` would require tokens to have the `org_id`\n+         * claim to be present and set to `org_xyz`. On the other hand, if it was set to `org_xyz,org_abc`,\n+         * the `org_id` claim would need to have both `org_xyz` and `org_abc` values.\n+         * Strings and arrays of strings are currently the only supported types.\n+         * Use {@linkplain SecurityIdentityAugmentor} to verify claims of other types or complex claims.\n          */\n         @ConfigDocMapKey(\"claim-name\")\n-        Map<String, String> requiredClaims();\n+        Map<String, Set<@WithConverter(TrimmedStringConverter.class) String>> requiredClaims();\n \n         /**\n          * Expected token type\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/StaticTenantResolver.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/StaticTenantResolver.java\nindex 6ae7b7f1c30fa..78f674235474e 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/StaticTenantResolver.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/StaticTenantResolver.java\n@@ -6,6 +6,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.function.BiFunction;\n \n@@ -19,6 +20,7 @@\n import io.quarkus.oidc.common.runtime.OidcCommonUtils;\n import io.quarkus.vertx.http.runtime.security.ImmutablePathMatcher;\n import io.smallrye.mutiny.Uni;\n+import io.vertx.core.json.JsonArray;\n import io.vertx.core.json.JsonObject;\n import io.vertx.ext.web.RoutingContext;\n \n@@ -246,9 +248,41 @@ private static String getTenantId(RoutingContext context, TenantConfigContext te\n             return null;\n         }\n \n-        private static boolean requiredClaimsMatch(Map<String, String> requiredClaims, JsonObject tokenJson) {\n-            for (Map.Entry<String, String> entry : requiredClaims.entrySet()) {\n-                if (!entry.getValue().equals(tokenJson.getString(entry.getKey()))) {\n+        private static boolean requiredClaimsMatch(Map<String, Set<String>> requiredClaims, JsonObject tokenJson) {\n+            for (Map.Entry<String, Set<String>> entry : requiredClaims.entrySet()) {\n+                Set<String> requiredClaimSet = entry.getValue();\n+                String claimName = entry.getKey();\n+                if (requiredClaimSet.size() == 1) {\n+                    String actualClaimValueAsStr;\n+                    try {\n+                        actualClaimValueAsStr = tokenJson.getString(claimName);\n+                    } catch (Exception ex) {\n+                        actualClaimValueAsStr = null;\n+                    }\n+                    if (actualClaimValueAsStr != null && requiredClaimSet.contains(actualClaimValueAsStr)) {\n+                        continue;\n+                    }\n+                }\n+                final JsonArray actualClaimValues;\n+                try {\n+                    actualClaimValues = tokenJson.getJsonArray(claimName);\n+                } catch (Exception e) {\n+                    return false;\n+                }\n+                if (actualClaimValues == null) {\n+                    return false;\n+                }\n+                outer: for (String requiredClaimValue : requiredClaimSet) {\n+                    for (int i = 0; i < actualClaimValues.size(); i++) {\n+                        try {\n+                            String actualClaimValue = actualClaimValues.getString(i);\n+                            if (requiredClaimValue.equals(actualClaimValue)) {\n+                                continue outer;\n+                            }\n+                        } catch (Exception ignored) {\n+                            // try next actual claim value\n+                        }\n+                    }\n                     return false;\n                 }\n             }\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/builders/TokenConfigBuilder.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/builders/TokenConfigBuilder.java\nindex fed0552f6e248..585326d8a8711 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/builders/TokenConfigBuilder.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/builders/TokenConfigBuilder.java\n@@ -9,6 +9,9 @@\n import java.util.Objects;\n import java.util.Optional;\n import java.util.OptionalInt;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n \n import io.quarkus.oidc.OidcTenantConfigBuilder;\n import io.quarkus.oidc.runtime.OidcTenantConfig;\n@@ -20,7 +23,7 @@\n public final class TokenConfigBuilder {\n \n     private record TokenImpl(Optional<String> issuer, Optional<List<String>> audience, boolean subjectRequired,\n-            Map<String, String> requiredClaims, Optional<String> tokenType, OptionalInt lifespanGrace,\n+            Map<String, Set<String>> requiredClaims, Optional<String> tokenType, OptionalInt lifespanGrace,\n             Optional<Duration> age, boolean issuedAtRequired, Optional<String> principalClaim, boolean refreshExpired,\n             Optional<Duration> refreshTokenTimeSkew, Duration forcedJwkRefreshInterval, Optional<String> header,\n             String authorizationScheme, Optional<OidcTenantConfig.SignatureAlgorithm> signatureAlgorithm,\n@@ -30,7 +33,7 @@ private record TokenImpl(Optional<String> issuer, Optional<List<String>> audienc\n     }\n \n     private final OidcTenantConfigBuilder builder;\n-    private final Map<String, String> requiredClaims = new HashMap<>();\n+    private final Map<String, Set<String>> requiredClaims = new HashMap<>();\n     private final List<String> audience = new ArrayList<>();\n     private Optional<String> issuer;\n     private boolean subjectRequired;\n@@ -103,7 +106,19 @@ public OidcTenantConfigBuilder end() {\n     public TokenConfigBuilder requiredClaims(String requiredClaimName, String requiredClaimValue) {\n         Objects.requireNonNull(requiredClaimName);\n         Objects.requireNonNull(requiredClaimValue);\n-        this.requiredClaims.put(requiredClaimName, requiredClaimValue);\n+        this.requiredClaims.put(requiredClaimName, Set.of(requiredClaimValue));\n+        return this;\n+    }\n+\n+    /**\n+     * @param requiredClaimName {@link OidcTenantConfig.Token#requiredClaims()} name\n+     * @param requiredClaimValues {@link OidcTenantConfig.Token#requiredClaims()} value\n+     * @return this builder\n+     */\n+    public TokenConfigBuilder requiredClaims(String requiredClaimName, Set<String> requiredClaimValues) {\n+        Objects.requireNonNull(requiredClaimName);\n+        Objects.requireNonNull(requiredClaimValues);\n+        this.requiredClaims.put(requiredClaimName, Set.copyOf(requiredClaimValues));\n         return this;\n     }\n \n@@ -112,6 +127,30 @@ public TokenConfigBuilder requiredClaims(String requiredClaimName, String requir\n      * @return this builder\n      */\n     public TokenConfigBuilder requiredClaims(Map<String, String> requiredClaims) {\n+        if (requiredClaims != null) {\n+            return this.setRequiredClaims(requiredClaims\n+                    .entrySet()\n+                    .stream()\n+                    .collect(Collectors.toMap(new Function<Map.Entry<String, String>, String>() {\n+                        @Override\n+                        public String apply(Map.Entry<String, String> stringStringEntry) {\n+                            return stringStringEntry.getKey();\n+                        }\n+                    }, new Function<Map.Entry<String, String>, Set<String>>() {\n+                        @Override\n+                        public Set<String> apply(Map.Entry<String, String> e) {\n+                            return Set.of(e.getValue());\n+                        }\n+                    })));\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * @param requiredClaims {@link OidcTenantConfig.Token#requiredClaims()}\n+     * @return this builder\n+     */\n+    public TokenConfigBuilder setRequiredClaims(Map<String, Set<String>> requiredClaims) {\n         if (requiredClaims != null) {\n             this.requiredClaims.putAll(requiredClaims);\n         }\n",
    "test_patch": "diff --git a/extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcTenantConfigBuilderTest.java b/extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcTenantConfigBuilderTest.java\nindex a3bb7b8b92798..7b18788731897 100644\n--- a/extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcTenantConfigBuilderTest.java\n+++ b/extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcTenantConfigBuilderTest.java\n@@ -15,6 +15,7 @@\n import java.time.Duration;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n \n import org.junit.jupiter.api.Test;\n \n@@ -294,6 +295,7 @@ public void testSetEveryProperty() {\n                 .lifespanGrace(99)\n                 .tokenType(\"McGonagall\")\n                 .requiredClaims(\"req-claim-name\", \"req-claim-val\")\n+                .requiredClaims(\"req-array-claim-name\", Set.of(\"item-1\", \"item-2\"))\n                 .subjectRequired()\n                 .audience(\"professor hagrid\")\n                 .issuer(\"issuer-3\")\n@@ -464,8 +466,9 @@ public void testSetEveryProperty() {\n         assertEquals(1, token.audience().get().size());\n         assertTrue(token.audience().get().contains(\"professor hagrid\"));\n         assertTrue(token.subjectRequired());\n-        assertEquals(1, token.requiredClaims().size());\n-        assertEquals(\"req-claim-val\", token.requiredClaims().get(\"req-claim-name\"));\n+        assertEquals(2, token.requiredClaims().size());\n+        assertEquals(\"req-claim-val\", token.requiredClaims().get(\"req-claim-name\").iterator().next());\n+        assertEquals(Set.of(\"item-1\", \"item-2\"), token.requiredClaims().get(\"req-array-claim-name\"));\n         assertEquals(\"McGonagall\", token.tokenType().get());\n         assertEquals(99, token.lifespanGrace().getAsInt());\n         assertEquals(68, token.age().get().toMinutes());\n@@ -1080,7 +1083,7 @@ public void testTokenBuilder() {\n         assertTrue(builtFirst.refreshExpired());\n         assertTrue(builtFirst.subjectRequired());\n         assertEquals(1, builtFirst.requiredClaims().size());\n-        assertEquals(\"II\", builtFirst.requiredClaims().get(\"I\"));\n+        assertEquals(\"II\", builtFirst.requiredClaims().get(\"I\").iterator().next());\n         assertEquals(2, builtFirst.audience().orElseThrow().size());\n         assertTrue(builtFirst.audience().orElseThrow().contains(\"one\"));\n         assertTrue(builtFirst.audience().orElseThrow().contains(\"two\"));\n@@ -1099,8 +1102,8 @@ public void testTokenBuilder() {\n         assertTrue(builtSecond.refreshExpired());\n         assertTrue(builtSecond.subjectRequired());\n         assertEquals(2, builtSecond.requiredClaims().size());\n-        assertEquals(\"II\", builtSecond.requiredClaims().get(\"I\"));\n-        assertEquals(\"IV\", builtSecond.requiredClaims().get(\"III\"));\n+        assertEquals(\"II\", builtSecond.requiredClaims().get(\"I\").iterator().next());\n+        assertEquals(\"IV\", builtSecond.requiredClaims().get(\"III\").iterator().next());\n         assertEquals(3, builtSecond.audience().orElseThrow().size());\n         assertTrue(builtSecond.audience().orElseThrow().contains(\"one\"));\n         assertTrue(builtSecond.audience().orElseThrow().contains(\"two\"));\n\ndiff --git a/extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcTenantConfigImpl.java b/extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcTenantConfigImpl.java\nindex 5cb5da48633a7..038fd760b1de5 100644\n--- a/extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcTenantConfigImpl.java\n+++ b/extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcTenantConfigImpl.java\n@@ -337,7 +337,7 @@ public boolean subjectRequired() {\n             }\n \n             @Override\n-            public Map<String, String> requiredClaims() {\n+            public Map<String, Set<String>> requiredClaims() {\n                 invocationsRecorder.put(ConfigMappingMethods.TOKEN_REQUIRED_CLAIMS, true);\n                 return Map.of();\n             }\n\ndiff --git a/integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/CustomTenantConfigResolver.java b/integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/CustomTenantConfigResolver.java\nindex be89405e24f77..c9dabeae80707 100644\n--- a/integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/CustomTenantConfigResolver.java\n+++ b/integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/CustomTenantConfigResolver.java\n@@ -2,6 +2,7 @@\n \n import java.time.Duration;\n import java.util.Map;\n+import java.util.Set;\n import java.util.function.Supplier;\n \n import jakarta.enterprise.context.ApplicationScoped;\n@@ -73,11 +74,24 @@ public OidcTenantConfig get() {\n                     // try the absolute URI\n                     config.setIntrospectionPath(authServerUri + \"/introspect\");\n                     return config;\n+                } else if (\"tenant-introspection-multiple-required-claims\".equals(tenantId)) {\n+                    String uri = context.request().absoluteURI();\n+                    String authServerUri = uri.replace(\"/tenant-introspection/tenant-introspection-multiple-required-claims\",\n+                            \"/oidc\");\n+                    return OidcTenantConfig\n+                            .authServerUrl(authServerUri)\n+                            .tenantId(\"tenant-introspection-multiple-required-claims\")\n+                            .discoveryEnabled(false)\n+                            .clientId(\"client\")\n+                            .introspectionPath(authServerUri + \"/introspect\")\n+                            .allowTokenIntrospectionCache(false)\n+                            .token().requiredClaims(\"required_claim\", Set.of(\"1\", \"2\")).end()\n+                            .build();\n                 } else if (\"tenant-introspection-required-claims\".equals(tenantId)) {\n \n                     OidcTenantConfig config = new OidcTenantConfig();\n                     config.setTenantId(\"tenant-introspection-required-claims\");\n-                    config.token.setRequiredClaims(Map.of(\"required_claim\", \"1\"));\n+                    config.token.setRequiredClaims(Map.of(\"required_claim\", Set.of(\"1\")));\n                     String uri = context.request().absoluteURI();\n                     String authServerUri = uri.replace(\"/tenant-introspection/tenant-introspection-required-claims\",\n                             \"/oidc\");\n\ndiff --git a/integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/OidcResource.java b/integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/OidcResource.java\nindex 35b2aa937a0e5..bda333371892e 100644\n--- a/integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/OidcResource.java\n+++ b/integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/OidcResource.java\n@@ -41,6 +41,7 @@ public class OidcResource {\n     private volatile int jwkEndpointCallCount;\n     private volatile int introspectionEndpointCallCount;\n     private volatile int opaqueToken2UsageCount;\n+    private volatile int opaqueToken3UsageCount;\n     private volatile int revokeEndpointCallCount;\n     private volatile int userInfoEndpointCallCount;\n     private volatile boolean enableDiscovery = true;\n@@ -120,6 +121,13 @@ public int resetOpaqueTokenCallCount() {\n         return opaqueToken2UsageCount;\n     }\n \n+    @POST\n+    @Path(\"opaque-token-3-call-count\")\n+    public int resetOpaqueToken3CallCount() {\n+        opaqueToken3UsageCount = 0;\n+        return opaqueToken3UsageCount;\n+    }\n+\n     @POST\n     @Produces(\"application/json\")\n     @Path(\"introspect\")\n@@ -128,11 +136,26 @@ public String introspect(@FormParam(\"client_id\") String clientId, @FormParam(\"cl\n         introspectionEndpointCallCount++;\n \n         boolean activeStatus = introspection && !token.endsWith(\"-invalid\");\n-        boolean requiredClaim = true;\n+        String requiredClaim = \"\\\"required_claim\\\": \\\"1\\\",\";\n         if (token.endsWith(\"_2\") && ++opaqueToken2UsageCount == 2) {\n             // This is to confirm that the same opaque token_2 works well when its introspection response\n             // includes `required_claim` with value \"1\" but fails when the required claim is not included\n-            requiredClaim = false;\n+            requiredClaim = \"\";\n+        }\n+        if (token.endsWith(\"_3\")) {\n+            ++opaqueToken3UsageCount;\n+            // This is to confirm that the same opaque token_3 works well when its introspection response\n+            // includes `required_claim` with values \"1,2\" but fails when the required claim is not included\n+            // or when required claim value is just \"1\"\n+            if (opaqueToken3UsageCount == 2) {\n+                requiredClaim = \"\\\"required_claim\\\": [\\\"1\\\"],\";\n+            }\n+            if (opaqueToken3UsageCount == 3) {\n+                requiredClaim = \"\";\n+            }\n+            if (opaqueToken3UsageCount == 4) {\n+                requiredClaim = \"\\\"required_claim\\\": [\\\"1\\\", \\\"2\\\"],\";\n+            }\n         }\n         String introspectionClientId = \"none\";\n         String introspectionClientSecret = \"none\";\n@@ -159,7 +182,7 @@ public String introspect(@FormParam(\"client_id\") String clientId, @FormParam(\"cl\n                 \"   \\\"scope\\\": \\\"user\\\",\" +\n                 \"   \\\"email\\\": \\\"user@gmail.com\\\",\" +\n                 \"   \\\"username\\\": \\\"alice\\\",\" +\n-                (requiredClaim ? \"\\\"required_claim\\\": \\\"1\\\",\" : \"\") +\n+                requiredClaim +\n                 \"   \\\"introspection_client_id\\\": \\\"\" + introspectionClientId + \"\\\",\" +\n                 \"   \\\"introspection_client_secret\\\": \\\"\" + introspectionClientSecret + \"\\\",\" +\n                 \"   \\\"client_id\\\": \\\"\" + clientId + \"\\\"\" +\n@@ -282,6 +305,16 @@ public String testOpaqueToken2() {\n                 \"   \\\"expires_in\\\": 300 }\";\n     }\n \n+    @POST\n+    @Path(\"opaque-token3\")\n+    @Produces(\"application/json\")\n+    public String testOpaqueToken3() {\n+        return \"{\\\"access_token\\\": \\\"987654321_3\\\",\" +\n+                \"   \\\"token_type\\\": \\\"Bearer\\\",\" +\n+                \"   \\\"refresh_token\\\": \\\"123456789\\\",\" +\n+                \"   \\\"expires_in\\\": 300 }\";\n+    }\n+\n     @POST\n     @Path(\"enable-introspection\")\n     public boolean setIntrospection() {\n\ndiff --git a/integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/TenantIntrospectionRequiredClaimsResource.java b/integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/TenantIntrospectionRequiredClaimsResource.java\nindex 3c85c6a670615..688eeead463b8 100644\n--- a/integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/TenantIntrospectionRequiredClaimsResource.java\n+++ b/integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/TenantIntrospectionRequiredClaimsResource.java\n@@ -19,4 +19,18 @@ public class TenantIntrospectionRequiredClaimsResource {\n     public String userPermission() {\n         return token.getUsername() + \", required_claim:\" + token.getString(\"required_claim\");\n     }\n+\n+    @GET\n+    @Path(\"tenant-introspection-multiple-required-claims\")\n+    public String userPermission2() {\n+        var requiredClaimValBuilder = new StringBuilder();\n+        var requiredClaimArr = token.getArray(\"required_claim\");\n+        for (int i = 0; i < requiredClaimArr.size(); i++) {\n+            if (i > 0) {\n+                requiredClaimValBuilder.append(\",\");\n+            }\n+            requiredClaimValBuilder.append(requiredClaimArr.getString(i));\n+        }\n+        return token.getUsername() + \", required_claim:\" + requiredClaimValBuilder;\n+    }\n }\n\ndiff --git a/integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/TenantSpecificJwtPreferredNameValidator.java b/integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/TenantSpecificJwtPreferredNameValidator.java\nindex 715ddfa489883..52eba3115b18a 100644\n--- a/integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/TenantSpecificJwtPreferredNameValidator.java\n+++ b/integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/TenantSpecificJwtPreferredNameValidator.java\n@@ -1,7 +1,6 @@\n package io.quarkus.it.keycloak;\n \n import jakarta.enterprise.context.ApplicationScoped;\n-import jakarta.inject.Inject;\n \n import org.jose4j.jwt.MalformedClaimException;\n import org.jose4j.jwt.consumer.JwtContext;\n@@ -16,14 +15,17 @@\n @ApplicationScoped\n public class TenantSpecificJwtPreferredNameValidator implements Validator {\n \n-    @Inject\n-    OidcConfig oidcConfig;\n+    private final String requiredClaim;\n+\n+    public TenantSpecificJwtPreferredNameValidator(OidcConfig oidcConfig) {\n+        this.requiredClaim = oidcConfig.namedTenants().get(\"tenant-requiredclaim\").token().requiredClaims().get(\"azp\")\n+                .iterator().next();\n+    }\n \n     @Override\n     public String validate(JwtContext jwtContext) throws MalformedClaimException {\n         // verify that normal scoped validator is created when the runtime config is ready\n-        if (!\"quarkus-app-b\"\n-                .equals(oidcConfig.namedTenants().get(\"tenant-requiredclaim\").token().requiredClaims().get(\"azp\"))) {\n+        if (!\"quarkus-app-b\".equals(requiredClaim)) {\n             throw new IllegalStateException(\"The 'tenant-requiredclaim' tenant required claim 'azp' is not 'quarkus-app-b'\");\n         }\n \n\ndiff --git a/integration-tests/oidc-tenancy/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java b/integration-tests/oidc-tenancy/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java\nindex ab495108ef0f3..664cca9bb893a 100644\n--- a/integration-tests/oidc-tenancy/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java\n+++ b/integration-tests/oidc-tenancy/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java\n@@ -747,6 +747,40 @@ public void testTokenIntrospectionRequiredClaims() {\n         RestAssured.when().post(\"/oidc/opaque-token-call-count\").then().body(equalTo(\"0\"));\n     }\n \n+    @Test\n+    public void testMultipleTokenIntrospectionRequiredClaims() {\n+        RestAssured.when().post(\"/oidc/enable-introspection\").then().body(equalTo(\"true\"));\n+        RestAssured.when().post(\"/oidc/opaque-token-3-call-count\").then().body(equalTo(\"0\"));\n+        String opaqueToken3 = getOpaqueAccessToken3FromSimpleOidc();\n+\n+        // Expected to fail now because its introspection does include the expected required claim, but value is \"1\"\n+        RestAssured.given().auth().oauth2(opaqueToken3)\n+                .when().get(\"/tenant-introspection/tenant-introspection-multiple-required-claims\")\n+                .then()\n+                .statusCode(401);\n+\n+        // Expected to fail now because its introspection does include the expected required claim, but value is [\"1\"]\n+        RestAssured.given().auth().oauth2(opaqueToken3)\n+                .when().get(\"/tenant-introspection/tenant-introspection-multiple-required-claims\")\n+                .then()\n+                .statusCode(401);\n+\n+        // Expected to fail now because its introspection does not include the expected required claim\n+        RestAssured.given().auth().oauth2(opaqueToken3)\n+                .when().get(\"/tenant-introspection/tenant-introspection-multiple-required-claims\")\n+                .then()\n+                .statusCode(401);\n+\n+        // Successful request with opaque token 3 because the required claim is [\"1\",\"2\"]\n+        RestAssured.given().auth().oauth2(opaqueToken3)\n+                .when().get(\"/tenant-introspection/tenant-introspection-multiple-required-claims\")\n+                .then()\n+                .statusCode(200)\n+                .body(equalTo(\"alice, required_claim:1,2\"));\n+\n+        RestAssured.when().post(\"/oidc/opaque-token-3-call-count\").then().body(equalTo(\"0\"));\n+    }\n+\n     @Test\n     public void testResolveStaticTenantsByPathPatterns() {\n         // default tenant path pattern is more specific, therefore it wins over tenant-b pattern that is also matched\n@@ -931,6 +965,15 @@ private String getOpaqueAccessToken2FromSimpleOidc() {\n         return object.getString(\"access_token\");\n     }\n \n+    private String getOpaqueAccessToken3FromSimpleOidc() {\n+        String json = RestAssured\n+                .when()\n+                .post(\"/oidc/opaque-token3\")\n+                .body().asString();\n+        JsonObject object = new JsonObject(json);\n+        return object.getString(\"access_token\");\n+    }\n+\n     static WebClient createWebClient() {\n         WebClient webClient = new WebClient();\n         webClient.setCssErrorHandler(new SilentCssErrorHandler());\n\ndiff --git a/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/AdminResource.java b/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/AdminResource.java\nindex 314e644788d84..55120894f7069 100644\n--- a/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/AdminResource.java\n+++ b/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/AdminResource.java\n@@ -43,6 +43,14 @@ public String adminRequiredAlgorithm() {\n         return \"granted:\" + identity.getRoles();\n     }\n \n+    @Path(\"bearer-required-claims\")\n+    @GET\n+    @RolesAllowed(\"admin\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public String adminRequiredClaims() {\n+        return \"granted:\" + identity.getRoles();\n+    }\n+\n     @Path(\"bearer-azure\")\n     @GET\n     @Authenticated\n\ndiff --git a/integration-tests/oidc-wiremock/src/main/resources/application.properties b/integration-tests/oidc-wiremock/src/main/resources/application.properties\nindex 4bbf6da00f0ac..43af58c2b4c72 100644\n--- a/integration-tests/oidc-wiremock/src/main/resources/application.properties\n+++ b/integration-tests/oidc-wiremock/src/main/resources/application.properties\n@@ -292,4 +292,16 @@ quarkus.grpc.server.use-separate-server=false\n %issuer-based-resolver.quarkus.oidc.bearer-issuer-resolver-b.credentials.secret=secret\n %issuer-based-resolver.quarkus.oidc.bearer-issuer-resolver-b.token.audience=https://correct-issuer.edu\n %issuer-based-resolver.quarkus.oidc.bearer-issuer-resolver-b.token.allow-jwt-introspection=false\n+%issuer-based-resolver.quarkus.oidc.bearer-issuer-resolver-abc.auth-server-url=http://localhost:8185/auth/realms/quarkus2\n+%issuer-based-resolver.quarkus.oidc.bearer-issuer-resolver-abc.client-id=quarkus-app\n+%issuer-based-resolver.quarkus.oidc.bearer-issuer-resolver-abc.token.required-claims.client-name=a,b,c\n+%issuer-based-resolver.quarkus.oidc.bearer-issuer-resolver-abc.credentials.secret=secret\n+%issuer-based-resolver.quarkus.oidc.bearer-issuer-resolver-abc.token.audience=https://correct-issuer.edu\n+%issuer-based-resolver.quarkus.oidc.bearer-issuer-resolver-abc.token.allow-jwt-introspection=false\n %issuer-based-resolver.quarkus.oidc.resolve-tenants-with-issuer=true\n+\n+quarkus.oidc.bearer-required-claims.auth-server-url=${keycloak.url:replaced-by-test-resource}/realms/quarkus/\n+quarkus.oidc.bearer-required-claims.client-id=quarkus-app\n+quarkus.oidc.bearer-required-claims.credentials.secret=secret\n+quarkus.oidc.bearer-required-claims.token.signature-algorithm=PS256\n+quarkus.oidc.bearer-required-claims.token.required-claims.my-claim=one,two,three\n\ndiff --git a/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java b/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java\nindex 83b2438ddfc11..136dc8522640c 100644\n--- a/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java\n+++ b/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java\n@@ -709,10 +709,48 @@ public void testJwtClaimPermissionChecker() {\n                 .statusCode(403);\n     }\n \n+    @Test\n+    public void testMultipleRequiredClaimValues() {\n+        // required claim values \"one\", \"two\", and \"three\" are missing\n+        RestAssured.given().auth().oauth2(getAccessToken(null))\n+                .when().get(\"/api/admin/bearer-required-claims\")\n+                .then()\n+                .statusCode(401);\n+        // required claim values \"one\" and \"two\" is missing\n+        RestAssured.given().auth().oauth2(getAccessToken(Set.of(\"three\")))\n+                .when().get(\"/api/admin/bearer-required-claims\")\n+                .then()\n+                .statusCode(401);\n+        // required claim value \"two\" is missing\n+        RestAssured.given().auth().oauth2(getAccessToken(Set.of(\"one\", \"three\")))\n+                .when().get(\"/api/admin/bearer-required-claims\")\n+                .then()\n+                .statusCode(401);\n+        // all required claim values are there\n+        RestAssured.given().auth().oauth2(getAccessToken(Set.of(\"one\", \"two\", \"three\")))\n+                .when().get(\"/api/admin/bearer-required-claims\")\n+                .then()\n+                .statusCode(200)\n+                .body(Matchers.containsString(\"admin\"));\n+    }\n+\n     private String getAccessToken(String userName, Set<String> groups) {\n         return getAccessToken(userName, groups, SignatureAlgorithm.RS256);\n     }\n \n+    private String getAccessToken(Set<String> claimValues) {\n+        var jwtBuilder = Jwt.preferredUserName(\"admin\")\n+                .groups(Set.of(\"admin\"))\n+                .issuer(\"https://server.example.com\")\n+                .audience(\"https://service.example.com\");\n+        if (claimValues != null) {\n+            jwtBuilder.claim(\"my-claim\", claimValues);\n+        }\n+        return jwtBuilder\n+                .jws().algorithm(SignatureAlgorithm.PS256)\n+                .sign();\n+    }\n+\n     private String getAccessToken(String userName, Set<String> groups, SignatureAlgorithm alg) {\n         return Jwt.preferredUserName(userName)\n                 .groups(groups)\n\ndiff --git a/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/StaticTenantIssuerResolverTest.java b/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/StaticTenantIssuerResolverTest.java\nindex 765ed968b1a5a..886802768951a 100644\n--- a/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/StaticTenantIssuerResolverTest.java\n+++ b/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/StaticTenantIssuerResolverTest.java\n@@ -28,12 +28,14 @@ public void testOidcServerUnavailableOnAppStartup() {\n                     .body(Matchers.is(\"static.tenant.id=bearer-issuer-resolver-a\"));\n             requestAdminRoles(\"https://correct-issuer.edu\", \"b\").statusCode(200)\n                     .body(Matchers.is(\"static.tenant.id=bearer-issuer-resolver-b\"));\n+            requestAdminRoles(\"https://correct-issuer.edu\", Set.of(\"a\", \"b\", \"c\")).statusCode(200)\n+                    .body(Matchers.is(\"static.tenant.id=bearer-issuer-resolver-abc\"));\n         } finally {\n             server.stop();\n         }\n     }\n \n-    private static ValidatableResponse requestAdminRoles(String issuer, String clientName) {\n+    private static ValidatableResponse requestAdminRoles(String issuer, Object clientName) {\n         return RestAssured.given().auth().oauth2(getAdminTokenWithRole(issuer, clientName))\n                 .when().get(\"/api/admin/bearer-issuer-resolver/issuer\").then();\n     }\n@@ -45,7 +47,7 @@ public String getConfigProfile() {\n         }\n     }\n \n-    private static String getAdminTokenWithRole(String issuer, String clientName) {\n+    private static String getAdminTokenWithRole(String issuer, Object clientName) {\n         return Jwt.preferredUserName(\"alice\")\n                 .groups(Set.of(\"admin\"))\n                 .issuer(issuer)\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47448",
    "pr_id": 47448,
    "issue_id": 47350,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Attempt to create HttpSecurityPolicy with duplicated names should lead to warning or error\n### Describe the bug\n\nI have REST appplicatiom, where some of endpoints are protected with `@AuthorizationPolicy` annotation. When I create two Policy classes with the same name (as returned by `name` method), there is no warning or error about it.\n\n### Expected behavior\n\nQuarkus should (at least) warn about duplicated names. This often happens due to copy-and-paste gone wrong and guides don't mention an ability[1] to have several policies with the same name.\n\n[1] https://quarkus.io/guides/security-authorize-web-endpoints-reference#custom-http-security-policy\n\n### Actual behavior\n\nNo warnings\n\n### How to Reproduce?\n\nhttps://github.com/fedinskiy/reproducer/tree/duplicated-policy (see tests)\n\n### Output of `uname -a` or `ver`\n\n6.13.9-200.fc41.x86_64\n\n### Output of `java -version`\n\n21.0.5, vendor: Eclipse Adoptium\n\n### Quarkus version or git rev\n\n3.19.2\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nApache Maven 3.9.6 (bc0240f3c744dd6b6ec2920b3cd08dcc295161ae)\n\n### Additional information\n\n_No response_",
    "issue_word_count": 169,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/security/DuplicatedNamedAuthPolicyValidationFailureTest.java",
      "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/AbstractPathMatchingHttpSecurityPolicy.java",
      "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/JaxRsPathMatchingHttpSecurityPolicy.java"
    ],
    "pr_changed_test_files": [
      "extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/security/DuplicatedNamedAuthPolicyValidationFailureTest.java"
    ],
    "base_commit": "fd4ac9a1cfcc2d98ad1a291b80acbe071e665972",
    "head_commit": "85975e7df791812b96809dc3d403e77b407561ae",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47448",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47448",
    "dockerfile": "",
    "pr_merged_at": "2025-04-20T10:01:45.000Z",
    "patch": "diff --git a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/AbstractPathMatchingHttpSecurityPolicy.java b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/AbstractPathMatchingHttpSecurityPolicy.java\nindex 9f77474009773..2d0e0903fa453 100644\n--- a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/AbstractPathMatchingHttpSecurityPolicy.java\n+++ b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/AbstractPathMatchingHttpSecurityPolicy.java\n@@ -16,6 +16,7 @@\n \n import jakarta.enterprise.inject.Instance;\n \n+import io.quarkus.arc.ClientProxy;\n import io.quarkus.runtime.configuration.ConfigurationException;\n import io.quarkus.security.StringPermission;\n import io.quarkus.security.identity.SecurityIdentity;\n@@ -236,7 +237,10 @@ private static Map<String, HttpSecurityPolicy> toNamedHttpSecPolicies(Map<String\n                 if (policy.name().isBlank()) {\n                     throw new ConfigurationException(\"HTTP Security policy '\" + policy + \"' name must not be blank\");\n                 }\n-                namedPolicies.put(policy.name(), policy);\n+                var previousPolicy = namedPolicies.put(policy.name(), policy);\n+                if (previousPolicy != null) {\n+                    throw duplicateNamedPoliciesNotAllowedEx(previousPolicy, policy);\n+                }\n             }\n         }\n \n@@ -271,12 +275,26 @@ private static Map<String, HttpSecurityPolicy> toNamedHttpSecPolicies(Map<String\n                     roleToPermissions.put(role, Set.copyOf(permissions));\n                 }\n             }\n-            namedPolicies.put(e.getKey(),\n-                    new RolesAllowedHttpSecurityPolicy(policyConfig.rolesAllowed(), roleToPermissions, policyConfig.roles()));\n+            var rolesAllowedPolicy = new RolesAllowedHttpSecurityPolicy(policyConfig.rolesAllowed(), roleToPermissions,\n+                    policyConfig.roles());\n+            var previousPolicy = namedPolicies.put(e.getKey(), rolesAllowedPolicy);\n+            if (previousPolicy != null) {\n+                throw duplicateNamedPoliciesNotAllowedEx(previousPolicy, rolesAllowedPolicy);\n+            }\n+        }\n+\n+        var previousPolicy = namedPolicies.put(\"deny\", DenySecurityPolicy.INSTANCE);\n+        if (previousPolicy != null) {\n+            throw duplicateNamedPoliciesNotAllowedEx(previousPolicy, DenySecurityPolicy.INSTANCE);\n+        }\n+        previousPolicy = namedPolicies.put(\"permit\", new PermitSecurityPolicy());\n+        if (previousPolicy != null) {\n+            throw duplicateNamedPoliciesNotAllowedEx(previousPolicy, new PermitSecurityPolicy());\n+        }\n+        previousPolicy = namedPolicies.put(\"authenticated\", new AuthenticatedHttpSecurityPolicy());\n+        if (previousPolicy != null) {\n+            throw duplicateNamedPoliciesNotAllowedEx(previousPolicy, new AuthenticatedHttpSecurityPolicy());\n         }\n-        namedPolicies.put(\"deny\", new DenySecurityPolicy());\n-        namedPolicies.put(\"permit\", new PermitSecurityPolicy());\n-        namedPolicies.put(\"authenticated\", new AuthenticatedHttpSecurityPolicy());\n         return namedPolicies;\n     }\n \n@@ -386,6 +404,13 @@ private void addAction(String action) {\n         }\n     }\n \n+    static ConfigurationException duplicateNamedPoliciesNotAllowedEx(HttpSecurityPolicy policy1, HttpSecurityPolicy policy2) {\n+        String policyClassName1 = ClientProxy.unwrap(policy1).getClass().getName();\n+        String policyClassName2 = ClientProxy.unwrap(policy2).getClass().getName();\n+        return new ConfigurationException(\"Only one HttpSecurityPolicy with the name '\"\n+                + policy1.name() + \"' is allowed, but found: \" + policyClassName1 + \" and \" + policyClassName2);\n+    }\n+\n     record HttpMatcher(String authMechanism, Set<String> methods, HttpSecurityPolicy checker) {\n \n     }\n\ndiff --git a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/JaxRsPathMatchingHttpSecurityPolicy.java b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/JaxRsPathMatchingHttpSecurityPolicy.java\nindex 033984def80ce..1382435b121b6 100644\n--- a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/JaxRsPathMatchingHttpSecurityPolicy.java\n+++ b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/JaxRsPathMatchingHttpSecurityPolicy.java\n@@ -1,6 +1,7 @@\n package io.quarkus.vertx.http.runtime.security;\n \n import static io.quarkus.vertx.http.runtime.PolicyMappingConfig.AppliesTo.JAXRS;\n+import static io.quarkus.vertx.http.runtime.security.AbstractPathMatchingHttpSecurityPolicy.duplicateNamedPoliciesNotAllowedEx;\n \n import java.util.HashMap;\n import java.util.Map;\n@@ -46,7 +47,10 @@ public class JaxRsPathMatchingHttpSecurityPolicy {\n             var allPolicies = new HashMap<String, HttpSecurityPolicy>();\n             for (HttpSecurityPolicy installedPolicy : installedPolicies) {\n                 if (installedPolicy.name() != null) {\n-                    allPolicies.put(installedPolicy.name(), installedPolicy);\n+                    var previousPolicy = allPolicies.put(installedPolicy.name(), installedPolicy);\n+                    if (previousPolicy != null) {\n+                        throw duplicateNamedPoliciesNotAllowedEx(previousPolicy, installedPolicy);\n+                    }\n                 }\n             }\n             var annotationPoliciesOnly = new HashMap<String, HttpSecurityPolicy>();\n",
    "test_patch": "diff --git a/extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/security/DuplicatedNamedAuthPolicyValidationFailureTest.java b/extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/security/DuplicatedNamedAuthPolicyValidationFailureTest.java\nnew file mode 100644\nindex 0000000000000..b4280acc1c2cf\n--- /dev/null\n+++ b/extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/security/DuplicatedNamedAuthPolicyValidationFailureTest.java\n@@ -0,0 +1,65 @@\n+package io.quarkus.vertx.http.security;\n+\n+import jakarta.enterprise.context.ApplicationScoped;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.security.identity.SecurityIdentity;\n+import io.quarkus.test.QuarkusUnitTest;\n+import io.quarkus.vertx.http.runtime.security.HttpSecurityPolicy;\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.ext.web.RoutingContext;\n+\n+public class DuplicatedNamedAuthPolicyValidationFailureTest {\n+\n+    private static final String POLICY_NAME = \"p_o_l_i_c_y_n_a_m_e\";\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .withApplicationRoot((jar) -> jar\n+                    .addClasses(NamedPolicy_1.class, NamedPolicy_2.class))\n+            .assertException(throwable -> {\n+                var errMsg = throwable.getMessage();\n+                Assertions.assertTrue(errMsg.contains(\"Only one HttpSecurityPolicy\"), errMsg);\n+                Assertions.assertTrue(errMsg.contains(POLICY_NAME), errMsg);\n+                Assertions.assertTrue(errMsg.contains(NamedPolicy_1.class.getSimpleName()));\n+                Assertions.assertTrue(errMsg.contains(NamedPolicy_2.class.getSimpleName()));\n+            });\n+\n+    @Test\n+    public void test() {\n+        Assertions.fail(\"Build was supposed to fail due to validation\");\n+    }\n+\n+    @ApplicationScoped\n+    public static class NamedPolicy_1 implements HttpSecurityPolicy {\n+\n+        @Override\n+        public Uni<CheckResult> checkPermission(RoutingContext request, Uni<SecurityIdentity> identity,\n+                AuthorizationRequestContext requestContext) {\n+            return null;\n+        }\n+\n+        @Override\n+        public String name() {\n+            return POLICY_NAME;\n+        }\n+    }\n+\n+    @ApplicationScoped\n+    public static class NamedPolicy_2 implements HttpSecurityPolicy {\n+\n+        @Override\n+        public Uni<CheckResult> checkPermission(RoutingContext request, Uni<SecurityIdentity> identity,\n+                AuthorizationRequestContext requestContext) {\n+            return null;\n+        }\n+\n+        @Override\n+        public String name() {\n+            return POLICY_NAME;\n+        }\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47445",
    "pr_id": 47445,
    "issue_id": 46213,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Support for OAuth2 Step-up authentication challenge protocol\n### Description\n\nSee https://datatracker.ietf.org/doc/rfc9470/\n\nCC @FroMage @viniciusfcf \n\n### Implementation ideas\n\n_No response_",
    "issue_word_count": 23,
    "test_files_count": 9,
    "non_test_files_count": 16,
    "pr_changed_files": [
      "docs/src/main/asciidoc/security-oidc-bearer-token-authentication.adoc",
      "extensions/oidc-common/runtime/src/main/java/io/quarkus/oidc/common/runtime/OidcConstants.java",
      "extensions/oidc/deployment/src/main/java/io/quarkus/oidc/deployment/OidcBuildStep.java",
      "extensions/oidc/deployment/src/test/java/io/quarkus/oidc/test/EmptyAuthenticationContextValidationFailureTest.java",
      "extensions/oidc/deployment/src/test/java/io/quarkus/oidc/test/ProactiveAuthenticationContextValidationFailureTest.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/AuthenticationContext.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcProvider.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/StepUpAuthenticationPolicy.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantContextFactory.java",
      "extensions/resteasy-classic/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/AuthenticationFailedExceptionMapper.java",
      "extensions/resteasy-reactive/rest/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/exceptionmappers/AuthenticationFailedExceptionMapper.java",
      "extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/EagerSecurityInterceptorBindingBuildItem.java",
      "extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/HttpSecurityProcessor.java",
      "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/HttpSecurityRecorder.java",
      "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/HttpSecurityUtils.java",
      "integration-tests/oidc-tenancy/pom.xml",
      "integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/AcrValueValidator.java",
      "integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/CustomTenantConfigResolver.java",
      "integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/OidcResource.java",
      "integration-tests/oidc-tenancy/src/main/resources/application.properties",
      "integration-tests/oidc-tenancy/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java",
      "integration-tests/oidc-tenancy/src/test/java/io/quarkus/it/keycloak/BearerTokenStepUpAuthenticationTest.java"
    ],
    "pr_changed_test_files": [
      "extensions/oidc/deployment/src/test/java/io/quarkus/oidc/test/EmptyAuthenticationContextValidationFailureTest.java",
      "extensions/oidc/deployment/src/test/java/io/quarkus/oidc/test/ProactiveAuthenticationContextValidationFailureTest.java",
      "integration-tests/oidc-tenancy/pom.xml",
      "integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/AcrValueValidator.java",
      "integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/CustomTenantConfigResolver.java",
      "integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/OidcResource.java",
      "integration-tests/oidc-tenancy/src/main/resources/application.properties",
      "integration-tests/oidc-tenancy/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java",
      "integration-tests/oidc-tenancy/src/test/java/io/quarkus/it/keycloak/BearerTokenStepUpAuthenticationTest.java"
    ],
    "base_commit": "cc8f7e6b7a9fee4bdcc90154a0071e5f4c92494f",
    "head_commit": "735a043f802139273da5910fc495347e986ecbcc",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47445",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47445",
    "dockerfile": "",
    "pr_merged_at": "2025-04-23T22:22:42.000Z",
    "patch": "diff --git a/docs/src/main/asciidoc/security-oidc-bearer-token-authentication.adoc b/docs/src/main/asciidoc/security-oidc-bearer-token-authentication.adoc\nindex 1290bdf5ee59b..515fd831ef25c 100644\n--- a/docs/src/main/asciidoc/security-oidc-bearer-token-authentication.adoc\n+++ b/docs/src/main/asciidoc/security-oidc-bearer-token-authentication.adoc\n@@ -1604,6 +1604,113 @@ public class OidcStartup {\n For more complex setup involving multiple tenants please see the xref:security-openid-connect-multitenancy.adoc#programmatic-startup[Programmatic OIDC start-up for multitenant application]\n section of the OpenID Connect Multi-Tenancy guide.\n \n+== Step Up Authentication\n+\n+The `io.quarkus.oidc.AuthenticationContext` annotation can be used to list one or more Authentication Context Class Reference (ACR) values to enforce a required authentication level for the Jakarta REST resource classes and methods.\n+The https://datatracker.ietf.org/doc/rfc9470/[OAuth 2.0 Step Up Authentication Challenge Protocol] introduces a mechanism for resource servers to request stronger authentication methods when the token does not have expected Authentication Context Class Reference (ACR) values.\n+Consider the following example:\n+\n+[source,java]\n+----\n+package io.quarkus.it.oidc;\n+\n+import io.quarkus.oidc.AuthenticationContext;\n+import io.quarkus.oidc.BearerTokenAuthentication;\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+\n+@BearerTokenAuthentication\n+@Path(\"/\")\n+public class GreetingsResource {\n+\n+    @Path(\"hello\")\n+    @AuthenticationContext(\"myACR\") <1>\n+    @GET\n+    public String hello() {\n+        return \"hello\";\n+    }\n+\n+    @Path(\"hi\")\n+    @AuthenticationContext(value = \"myACR\", maxAge = \"PT120m\") <2>\n+    @GET\n+    public String hi() {\n+        return \"hi\";\n+    }\n+}\n+----\n+<1> Bearer access token must have an `acr` claim with the `myACR` ACR value.\n+<2> Bearer access token must have an `acr` claim with the `myACR` ACR value and be in use for no longer than 120 minutes since the authentication time.\n+\n+[source,properties]\n+----\n+quarkus.http.auth.proactive=false <1>\n+----\n+<1> Disable proactive authentication so that the `@AuthenticationContext` annotation can be matched with the endpoint before Quarkus authenticates incoming requests.\n+\n+If the bearer access token claim `acr` does not contain `myACR`, Quarkus returns an authentication requirements challenge indicating required `acr_values`:\n+\n+----\n+HTTP/1.1 401 Unauthorized\n+WWW-Authenticate: Bearer error=\"insufficient_user_authentication\",\n+ error_description=\"A different authentication level is required\",\n+ acr_values=\"myACR\"\n+----\n+\n+When a client such as Single-page application (SPA) receives a challenge with the `insufficient_user_authentication` error code, it must parse `acr_values`, request a new user login which must meet the `acr_values` constraints, and use a new access token to access Quarkus.\n+\n+[NOTE]\n+====\n+The `io.quarkus.oidc.AuthenticationContext` annotation can also be used to enforce required authentication level for a WebSockets Next server endpoint.\n+The annotation must be placed on the endpoint class, because the `SecurityIdentity` is created before the HTTP connection is upgraded to a WebSocket connection.\n+For more information about the HTTP upgrade security, see the xref:websockets-next-reference.adoc#secure-http-upgrade[Secure HTTP upgrade] section of the Quarkus \"WebSockets Next reference\" guide.\n+====\n+\n+It is also possible to enforce the required authentication level for an OIDC tenant:\n+\n+[source,properties]\n+----\n+quarkus.oidc.hr.token.required-claims.acr=myACR\n+----\n+\n+Or, if you need more flexibility, write a <<jose4j-validator>>:\n+\n+[source,java]\n+----\n+package io.quarkus.it.oidc;\n+\n+import java.util.Map;\n+\n+import jakarta.enterprise.context.ApplicationScoped;\n+\n+import org.jose4j.jwt.MalformedClaimException;\n+import org.jose4j.jwt.consumer.JwtContext;\n+import org.jose4j.jwt.consumer.Validator;\n+\n+import io.quarkus.arc.Unremovable;\n+import io.quarkus.oidc.TenantFeature;\n+import io.quarkus.oidc.common.runtime.OidcConstants;\n+import io.quarkus.security.AuthenticationFailedException;\n+\n+@Unremovable\n+@ApplicationScoped\n+@TenantFeature(\"hr\")\n+public class AcrValueValidator implements Validator {\n+\n+    @Override\n+    public String validate(JwtContext jwtContext) throws MalformedClaimException {\n+        var jwtClaims = jwtContext.getJwtClaims();\n+        if (jwtClaims.hasClaim(\"acr\")) {\n+            var acrClaim = jwtClaims.getStringListClaimValue(\"acr\");\n+            if (acrClaim.contains(\"myACR\") && acrClaim.contains(\"yourACR\")) {\n+                return null;\n+            }\n+        }\n+        String requiredAcrValues = \"myACR,yourACR\";\n+        throw new AuthenticationFailedException(Map.of(OidcConstants.ACR_VALUES, requiredAcrValues));\n+    }\n+}\n+----\n+\n == References\n \n * xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties]\n\ndiff --git a/extensions/oidc-common/runtime/src/main/java/io/quarkus/oidc/common/runtime/OidcConstants.java b/extensions/oidc-common/runtime/src/main/java/io/quarkus/oidc/common/runtime/OidcConstants.java\nindex 04d81088945b7..a771786f6dce0 100644\n--- a/extensions/oidc-common/runtime/src/main/java/io/quarkus/oidc/common/runtime/OidcConstants.java\n+++ b/extensions/oidc-common/runtime/src/main/java/io/quarkus/oidc/common/runtime/OidcConstants.java\n@@ -98,4 +98,8 @@ public final class OidcConstants {\n     public static final String DPOP_ACCESS_TOKEN_THUMBPRINT = \"ath\";\n     public static final String DPOP_HTTP_METHOD = \"htm\";\n     public static final String DPOP_HTTP_REQUEST_URI = \"htu\";\n+\n+    public static final String ACR = \"acr\";\n+    public static final String ACR_VALUES = \"acr_values\";\n+    public static final String MAX_AGE = \"max_age\";\n }\n\ndiff --git a/extensions/oidc/deployment/src/main/java/io/quarkus/oidc/deployment/OidcBuildStep.java b/extensions/oidc/deployment/src/main/java/io/quarkus/oidc/deployment/OidcBuildStep.java\nindex 51d0d0b3aa3b9..fd8ff45760d8b 100644\n--- a/extensions/oidc/deployment/src/main/java/io/quarkus/oidc/deployment/OidcBuildStep.java\n+++ b/extensions/oidc/deployment/src/main/java/io/quarkus/oidc/deployment/OidcBuildStep.java\n@@ -6,7 +6,13 @@\n import static io.quarkus.arc.processor.DotNames.NAMED;\n import static io.quarkus.oidc.common.runtime.OidcConstants.BEARER_SCHEME;\n import static io.quarkus.oidc.common.runtime.OidcConstants.CODE_FLOW_CODE;\n+import static io.quarkus.oidc.runtime.OidcRecorder.ACR_VALUES_TO_MAX_AGE_SEPARATOR;\n import static io.quarkus.oidc.runtime.OidcUtils.DEFAULT_TENANT_ID;\n+import static io.quarkus.security.spi.ClassSecurityAnnotationBuildItem.useClassLevelSecurity;\n+import static io.quarkus.vertx.http.deployment.EagerSecurityInterceptorBindingBuildItem.toTargetName;\n+import static io.quarkus.vertx.http.deployment.HttpSecurityProcessor.collectAnnotatedClasses;\n+import static io.quarkus.vertx.http.deployment.HttpSecurityProcessor.collectClassMethodsWithoutRbacAnnotation;\n+import static io.quarkus.vertx.http.deployment.HttpSecurityProcessor.collectMethodsWithoutRbacAnnotation;\n import static org.jboss.jandex.AnnotationTarget.Kind.CLASS;\n import static org.jboss.jandex.AnnotationTarget.Kind.METHOD;\n \n@@ -15,6 +21,7 @@\n import java.util.Optional;\n import java.util.Set;\n import java.util.function.BooleanSupplier;\n+import java.util.function.Predicate;\n \n import jakarta.enterprise.context.RequestScoped;\n import jakarta.inject.Singleton;\n@@ -25,8 +32,10 @@\n import org.jboss.jandex.AnnotationInstance;\n import org.jboss.jandex.AnnotationTarget;\n import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.ClassInfo;\n import org.jboss.jandex.ClassType;\n import org.jboss.jandex.DotName;\n+import org.jboss.jandex.MethodInfo;\n import org.jboss.jandex.ParameterizedType;\n import org.jboss.jandex.Type;\n import org.jboss.logging.Logger;\n@@ -63,6 +72,7 @@\n import io.quarkus.deployment.builditem.RunTimeConfigurationDefaultBuildItem;\n import io.quarkus.deployment.builditem.RuntimeConfigSetupCompleteBuildItem;\n import io.quarkus.deployment.builditem.SystemPropertyBuildItem;\n+import io.quarkus.oidc.AuthenticationContext;\n import io.quarkus.oidc.AuthorizationCodeFlow;\n import io.quarkus.oidc.BearerTokenAuthentication;\n import io.quarkus.oidc.IdToken;\n@@ -90,11 +100,17 @@\n import io.quarkus.oidc.runtime.OidcUtils;\n import io.quarkus.oidc.runtime.TenantConfigBean;\n import io.quarkus.oidc.runtime.providers.AzureAccessTokenCustomizer;\n+import io.quarkus.runtime.configuration.ConfigurationException;\n+import io.quarkus.security.Authenticated;\n import io.quarkus.security.runtime.SecurityConfig;\n+import io.quarkus.security.spi.AdditionalSecuredMethodsBuildItem;\n+import io.quarkus.security.spi.ClassSecurityAnnotationBuildItem;\n+import io.quarkus.security.spi.RegisterClassSecurityCheckBuildItem;\n import io.quarkus.tls.deployment.spi.TlsRegistryBuildItem;\n import io.quarkus.vertx.core.deployment.CoreVertxBuildItem;\n import io.quarkus.vertx.http.deployment.EagerSecurityInterceptorBindingBuildItem;\n import io.quarkus.vertx.http.deployment.HttpAuthMechanismAnnotationBuildItem;\n+import io.quarkus.vertx.http.deployment.HttpSecurityUtils;\n import io.quarkus.vertx.http.deployment.PreRouterFinalizationBuildItem;\n import io.quarkus.vertx.http.deployment.SecurityInformationBuildItem;\n import io.quarkus.vertx.http.runtime.VertxHttpBuildTimeConfig;\n@@ -112,6 +128,7 @@ public class OidcBuildStep {\n             DotNames.INJECTABLE_INSTANCE);\n     private static final DotName TENANT_NAME = DotName.createSimple(Tenant.class);\n     private static final DotName TENANT_FEATURE_NAME = DotName.createSimple(TenantFeature.class);\n+    private static final DotName AUTHENTICATION_CONTEXT_NAME = DotName.createSimple(AuthenticationContext.class);\n     private static final DotName TENANT_IDENTITY_PROVIDER_NAME = DotName.createSimple(TenantIdentityProvider.class);\n     private static final Logger LOG = Logger.getLogger(OidcBuildStep.class);\n     private static final DotName USER_INFO_NAME = DotName.createSimple(UserInfo.class);\n@@ -348,7 +365,8 @@ public void registerTenantResolverInterceptor(Capabilities capabilities, OidcRec\n             BuildProducer<EagerSecurityInterceptorBindingBuildItem> bindingProducer,\n             BuildProducer<SystemPropertyBuildItem> systemPropertyProducer) {\n         if (!httpBuildTimeConfig.auth().proactive()\n-                && (capabilities.isPresent(Capability.RESTEASY_REACTIVE) || capabilities.isPresent(Capability.RESTEASY))) {\n+                && (capabilities.isPresent(Capability.RESTEASY_REACTIVE) || capabilities.isPresent(Capability.RESTEASY)\n+                        || capabilities.isPresent(Capability.WEBSOCKETS_NEXT))) {\n             boolean foundTenantResolver = combinedIndexBuildItem\n                     .getIndex()\n                     .getAnnotations(TENANT_NAME)\n@@ -399,6 +417,73 @@ RunTimeConfigBuilderBuildItem useOidcTenantDefaultIdConfigBuilder() {\n         return new RunTimeConfigBuilderBuildItem(OidcTenantDefaultIdConfigBuilder.class);\n     }\n \n+    @BuildStep\n+    @Record(ExecutionTime.STATIC_INIT)\n+    public void registerAuthenticationContextInterceptor(Capabilities capabilities, OidcRecorder recorder,\n+            VertxHttpBuildTimeConfig httpBuildTimeConfig, CombinedIndexBuildItem combinedIndexBuildItem,\n+            BuildProducer<RegisterClassSecurityCheckBuildItem> registerClassSecurityCheckProducer,\n+            List<ClassSecurityAnnotationBuildItem> classSecurityAnnotations,\n+            BuildProducer<AdditionalSecuredMethodsBuildItem> additionalSecuredMethodsProducer,\n+            BuildProducer<EagerSecurityInterceptorBindingBuildItem> bindingProducer) {\n+        var authCtxAnnotations = combinedIndexBuildItem.getIndex().getAnnotations(AUTHENTICATION_CONTEXT_NAME);\n+        if (authCtxAnnotations.isEmpty() || !areEagerSecInterceptorsSupported(capabilities, httpBuildTimeConfig)) {\n+            return;\n+        }\n+        bindingProducer.produce(new EagerSecurityInterceptorBindingBuildItem(recorder.authenticationContextInterceptorCreator(),\n+                ai -> {\n+                    AnnotationValue maxAgeAnnotationValue = ai.value(\"maxAge\");\n+                    String maxAge = maxAgeAnnotationValue == null ? \"\" : maxAgeAnnotationValue.asString();\n+\n+                    String acrValues = \"\";\n+                    AnnotationValue annotationValue = ai.value();\n+                    String[] annotationValues = annotationValue == null ? null : annotationValue.asStringArray();\n+                    if (annotationValues == null || annotationValues.length == 0) {\n+                        // no acr values and no max age\n+                        throw new ConfigurationException(\"Annotation '\" + AUTHENTICATION_CONTEXT_NAME + \"' placed on '\"\n+                                + toTargetName(ai.target()) + \"' specifies no 'acr' value\");\n+                    } else {\n+                        acrValues = String.join(\",\", annotationValues);\n+                    }\n+\n+                    return acrValues + ACR_VALUES_TO_MAX_AGE_SEPARATOR + maxAge;\n+                }, true, AUTHENTICATION_CONTEXT_NAME));\n+\n+        // @AuthenticationContext -> authentication required\n+        // register @Authenticated for annotated methods\n+        Set<MethodInfo> annotatedMethods = collectMethodsWithoutRbacAnnotation(authCtxAnnotations\n+                .stream()\n+                .map(AnnotationInstance::target)\n+                .filter(at -> at.kind() == METHOD)\n+                .map(AnnotationTarget::asMethod)\n+                .toList());\n+        additionalSecuredMethodsProducer\n+                .produce(new AdditionalSecuredMethodsBuildItem(annotatedMethods, Optional.of(List.of(\"**\"))));\n+        // method-level security; this registers @Authenticated if no RBAC is explicitly declared\n+        Predicate<ClassInfo> useClassLevelSecurity = useClassLevelSecurity(classSecurityAnnotations);\n+        Set<MethodInfo> annotatedClassMethods = collectClassMethodsWithoutRbacAnnotation(\n+                collectAnnotatedClasses(authCtxAnnotations, Predicate.not(useClassLevelSecurity)));\n+        additionalSecuredMethodsProducer\n+                .produce(new AdditionalSecuredMethodsBuildItem(annotatedClassMethods, Optional.of(List.of(\"**\"))));\n+        // class-level security; this registers @Authenticated if no RBAC is explicitly declared\n+        collectAnnotatedClasses(authCtxAnnotations, useClassLevelSecurity).stream()\n+                .filter(Predicate.not(HttpSecurityUtils::hasSecurityAnnotation))\n+                .forEach(c -> registerClassSecurityCheckProducer.produce(\n+                        new RegisterClassSecurityCheckBuildItem(c.name(), AnnotationInstance\n+                                .builder(Authenticated.class).buildWithTarget(c))));\n+    }\n+\n+    private static boolean areEagerSecInterceptorsSupported(Capabilities capabilities,\n+            VertxHttpBuildTimeConfig httpBuildTimeConfig) {\n+        if (httpBuildTimeConfig.auth().proactive()) {\n+            throw new RuntimeException(\"The '%s' annotation is only supported when proactive authentication is disabled\"\n+                    .formatted(AUTHENTICATION_CONTEXT_NAME));\n+        } else if (capabilities.isMissing(Capability.WEBSOCKETS_NEXT) && capabilities.isMissing(Capability.RESTEASY_REACTIVE)\n+                && capabilities.isMissing(Capability.RESTEASY)) {\n+            throw new RuntimeException(\"The '%s' can only be used on Jakarta REST or WebSockets Next endpoints\");\n+        }\n+        return true;\n+    }\n+\n     private static boolean isInjected(BeanRegistrationPhaseBuildItem beanRegistrationPhaseBuildItem, DotName requiredType,\n             DotName withoutQualifier) {\n         for (InjectionPointInfo injectionPoint : beanRegistrationPhaseBuildItem.getInjectionPoints()) {\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/AuthenticationContext.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/AuthenticationContext.java\nnew file mode 100644\nindex 0000000000000..303b485d697e7\n--- /dev/null\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/AuthenticationContext.java\n@@ -0,0 +1,32 @@\n+package io.quarkus.oidc;\n+\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.ElementType.TYPE;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Annotation that can be used to list Authentication Context Class Reference (ACR) values to enforce a required\n+ * authentication level for the endpoint classes and methods.\n+ * <a href=\"https://datatracker.ietf.org/doc/rfc9470/\">OAuth 2.0 Step Up Authentication Challenge Protocol</a>\n+ * is initiated when the access token does not have sufficient authentication strength.\n+ */\n+@Target({ TYPE, METHOD })\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface AuthenticationContext {\n+\n+    /**\n+     * Required ACR ('acr') claim values.\n+     */\n+    String[] value();\n+\n+    /**\n+     * Token age relative to the value of the 'auth_time' claim value.\n+     *\n+     * @see io.quarkus.runtime.configuration.DurationConverter#parseDuration(String) for supported duration values\n+     */\n+    String maxAge() default \"\";\n+\n+}\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java\nindex b56c32d604cd4..1bc17f683f889 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java\n@@ -138,8 +138,15 @@ public Uni<ChallengeData> getChallenge(RoutingContext context) {\n         return tenantContext.onItem().transformToUni(new Function<TenantConfigContext, Uni<? extends ChallengeData>>() {\n             @Override\n             public Uni<ChallengeData> apply(TenantConfigContext tenantContext) {\n+                final String wwwAuthHeaderValue;\n+                if (StepUpAuthenticationPolicy.isInsufficientUserAuthException(context)) {\n+                    wwwAuthHeaderValue = tenantContext.oidcConfig().token().authorizationScheme() +\n+                            StepUpAuthenticationPolicy.getAuthRequirementChallenge(context);\n+                } else {\n+                    wwwAuthHeaderValue = tenantContext.oidcConfig().token().authorizationScheme();\n+                }\n                 return Uni.createFrom().item(new ChallengeData(HttpResponseStatus.UNAUTHORIZED.code(),\n-                        HttpHeaderNames.WWW_AUTHENTICATE, tenantContext.oidcConfig().token().authorizationScheme()));\n+                        HttpHeaderNames.WWW_AUTHENTICATE, wwwAuthHeaderValue));\n             }\n         });\n     }\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java\nindex c9b96500d8cd6..765aa90ac9f1f 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java\n@@ -197,7 +197,12 @@ public Uni<SecurityIdentity> apply(TokenVerificationResult result, Throwable t)\n \n     private Uni<TokenVerificationResult> verifyPrimaryTokenUni(Map<String, Object> requestData,\n             TokenAuthenticationRequest request, TenantConfigContext resolvedContext, UserInfo userInfo) {\n+        StepUpAuthenticationPolicy stepUpAuthPolicy = StepUpAuthenticationPolicy.getFromRequest(request);\n         if (isInternalIdToken(request)) {\n+            if (stepUpAuthPolicy != null) {\n+                return Uni.createFrom().failure(new OIDCException(\n+                        \"The @AuthenticationContext annotation cannot be used with an internal ID token\"));\n+            }\n             if (requestData.get(NEW_AUTHENTICATION) == Boolean.TRUE) {\n                 // No need to verify it in this case as 'CodeAuthenticationMechanism' has just created it\n                 return Uni.createFrom()\n@@ -323,6 +328,10 @@ public TokenVerificationResult apply(TokenVerificationResult t) {\n                 }\n             }\n \n+            if (stepUpAuthPolicy != null) {\n+                result = result.invoke(stepUpAuthPolicy);\n+            }\n+\n             return result;\n         }\n     }\n@@ -768,6 +777,10 @@ private static Uni<SecurityIdentity> validateTokenWithoutOidcServer(TokenAuthent\n         try {\n             TokenVerificationResult result = resolvedContext.provider().verifyJwtToken(request.getToken().getToken(),\n                     resolvedContext.oidcConfig().token().subjectRequired(), false, null);\n+            StepUpAuthenticationPolicy stepUpAuthPolicy = StepUpAuthenticationPolicy.getFromRequest(request);\n+            if (stepUpAuthPolicy != null) {\n+                stepUpAuthPolicy.accept(result);\n+            }\n             return Uni.createFrom()\n                     .item(validateAndCreateIdentity(Map.of(), request.getToken(), resolvedContext,\n                             result.localVerificationResult, result.localVerificationResult, null, null, request));\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcProvider.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcProvider.java\nindex 1bd93cc06f00e..411c659de5c53 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcProvider.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcProvider.java\n@@ -1,5 +1,7 @@\n package io.quarkus.oidc.runtime;\n \n+import static io.quarkus.oidc.common.runtime.OidcConstants.ACR;\n+import static io.quarkus.oidc.runtime.StepUpAuthenticationPolicy.throwAuthenticationFailedException;\n import static java.util.Objects.requireNonNull;\n \n import java.io.Closeable;\n@@ -7,6 +9,7 @@\n import java.security.Key;\n import java.security.PrivateKey;\n import java.time.Duration;\n+import java.util.ArrayList;\n import java.util.Base64;\n import java.util.List;\n import java.util.Map;\n@@ -21,8 +24,10 @@\n import org.jboss.logging.Logger;\n import org.jose4j.jwa.AlgorithmConstraints;\n import org.jose4j.jws.JsonWebSignature;\n+import org.jose4j.jwt.JwtClaims;\n import org.jose4j.jwt.MalformedClaimException;\n import org.jose4j.jwt.consumer.ErrorCodeValidator;\n+import org.jose4j.jwt.consumer.ErrorCodeValidatorAdapter;\n import org.jose4j.jwt.consumer.ErrorCodes;\n import org.jose4j.jwt.consumer.InvalidJwtException;\n import org.jose4j.jwt.consumer.JwtConsumer;\n@@ -224,8 +229,20 @@ private TokenVerificationResult verifyJwtTokenInternal(String token,\n             builder.registerValidator(new CustomClaimsValidator(Map.of(OidcConstants.NONCE, Set.of(nonce))));\n         }\n \n-        for (Validator customValidator : customValidators) {\n-            builder.registerValidator(customValidator);\n+        final List<CatchingErrorCodeValidator> validators;\n+        if (!customValidators.isEmpty() || requiredClaims != null) {\n+            validators = new ArrayList<>();\n+            for (Validator customValidator : customValidators) {\n+                validators.add(new CatchingErrorCodeValidator(customValidator));\n+            }\n+            if (requiredClaims != null) {\n+                validators.add(new CatchingErrorCodeValidator(new CustomClaimsValidator(requiredClaims)));\n+            }\n+            for (var validator : validators) {\n+                builder.registerValidator(validator);\n+            }\n+        } else {\n+            validators = null;\n         }\n \n         if (issuedAtRequired) {\n@@ -246,9 +263,6 @@ private TokenVerificationResult verifyJwtTokenInternal(String token,\n         } else {\n             builder.setSkipDefaultAudienceValidation();\n         }\n-        if (requiredClaims != null) {\n-            builder.registerValidator(new CustomClaimsValidator(requiredClaims));\n-        }\n \n         if (oidcConfig.token().lifespanGrace().isPresent()) {\n             final int lifespanGrace = oidcConfig.token().lifespanGrace().getAsInt();\n@@ -277,6 +291,14 @@ private TokenVerificationResult verifyJwtTokenInternal(String token,\n             }\n             throw ex;\n         }\n+        if (validators != null) {\n+            // this is workaround for we want to give custom validators option to fail authentication over 'acr' values\n+            for (CatchingErrorCodeValidator validator : validators) {\n+                if (validator.authenticationFailure != null) {\n+                    throw validator.authenticationFailure;\n+                }\n+            }\n+        }\n         TokenVerificationResult result = new TokenVerificationResult(OidcCommonUtils.decodeJwtContent(token), null);\n \n         verifyTokenAge(result.localVerificationResult.getLong(Claims.iat.name()));\n@@ -681,34 +703,44 @@ private CustomClaimsValidator(Map<String, Set<String>> customClaims) {\n         @Override\n         public String validate(JwtContext jwtContext) throws MalformedClaimException {\n             var claims = jwtContext.getJwtClaims();\n-            for (var targetClaim : customClaims.entrySet()) {\n-                var claimName = targetClaim.getKey();\n-                if (!claims.hasClaim(claimName)) {\n-                    return \"claim \" + claimName + \" is missing\";\n+            for (var requiredClaim : customClaims.entrySet()) {\n+                String validationFailureMessage = validate(requiredClaim.getKey(), requiredClaim.getValue(), claims);\n+                if (validationFailureMessage != null) {\n+                    if (ACR.equals(requiredClaim.getKey())) {\n+                        throwAuthenticationFailedException(validationFailureMessage, requiredClaim.getValue());\n+                    }\n+                    return validationFailureMessage;\n                 }\n-                Set<String> requiredClaimValues = targetClaim.getValue();\n-                if (claims.isClaimValueString(claimName)) {\n-                    if (requiredClaimValues.size() == 1) {\n-                        String actualClaimValue = claims.getStringClaimValue(claimName);\n-                        String requiredClaimValue = requiredClaimValues.iterator().next();\n-                        if (!requiredClaimValue.equals(actualClaimValue)) {\n-                            return \"claim \" + claimName + \" does not match expected value of \" + requiredClaimValues;\n-                        }\n-                    } else {\n-                        throw new MalformedClaimException(\"expected claim \" + claimName + \" must be a list of strings\");\n+            }\n+            return null;\n+        }\n+\n+        private static String validate(String requiredClaimName, Set<String> requiredClaimValues, JwtClaims claims)\n+                throws MalformedClaimException {\n+            if (!claims.hasClaim(requiredClaimName)) {\n+                return \"claim \" + requiredClaimName + \" is missing\";\n+            }\n+            if (claims.isClaimValueString(requiredClaimName)) {\n+                if (requiredClaimValues.size() == 1) {\n+                    String actualClaimValue = claims.getStringClaimValue(requiredClaimName);\n+                    String requiredClaimValue = requiredClaimValues.iterator().next();\n+                    if (!requiredClaimValue.equals(actualClaimValue)) {\n+                        return \"claim \" + requiredClaimName + \" does not match expected value of \" + requiredClaimValues;\n                     }\n                 } else {\n-                    if (claims.isClaimValueStringList(claimName)) {\n-                        List<String> actualClaimValues = claims.getStringListClaimValue(claimName);\n-                        for (String requiredClaimValue : requiredClaimValues) {\n-                            if (!actualClaimValues.contains(requiredClaimValue)) {\n-                                return \"claim \" + claimName + \" does not match expected value of \" + requiredClaimValues;\n-                            }\n+                    throw new MalformedClaimException(\"expected claim \" + requiredClaimName + \" must be a list of strings\");\n+                }\n+            } else {\n+                if (claims.isClaimValueStringList(requiredClaimName)) {\n+                    List<String> actualClaimValues = claims.getStringListClaimValue(requiredClaimName);\n+                    for (String requiredClaimValue : requiredClaimValues) {\n+                        if (!actualClaimValues.contains(requiredClaimValue)) {\n+                            return \"claim \" + requiredClaimName + \" does not match expected value of \" + requiredClaimValues;\n                         }\n-                    } else {\n-                        throw new MalformedClaimException(\n-                                \"expected claim \" + claimName + \" must be a list of strings or a string\");\n                     }\n+                } else {\n+                    throw new MalformedClaimException(\n+                            \"expected claim \" + requiredClaimName + \" must be a list of strings or a string\");\n                 }\n             }\n             return null;\n@@ -718,4 +750,27 @@ public String validate(JwtContext jwtContext) throws MalformedClaimException {\n     private static Map<String, Object> tokenMap(String token, boolean idToken) {\n         return Map.of(idToken ? OidcConstants.ID_TOKEN_VALUE : OidcConstants.ACCESS_TOKEN_VALUE, token);\n     }\n+\n+    private static final class CatchingErrorCodeValidator extends ErrorCodeValidatorAdapter {\n+\n+        private AuthenticationFailedException authenticationFailure;\n+\n+        private CatchingErrorCodeValidator(Validator validator) {\n+            super(validator);\n+        }\n+\n+        @Override\n+        public Error validate(JwtContext jwtContext) throws MalformedClaimException {\n+            try {\n+                return super.validate(jwtContext);\n+            } catch (AuthenticationFailedException e) {\n+                if (e.getAttribute(OidcConstants.ACR_VALUES) != null) {\n+                    authenticationFailure = e;\n+                    return null;\n+                } else {\n+                    throw e;\n+                }\n+            }\n+        }\n+    }\n }\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java\nindex 781341d041b48..c01435acd9fef 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java\n@@ -2,8 +2,10 @@\n \n import static io.quarkus.oidc.runtime.OidcConfig.getDefaultTenant;\n import static io.quarkus.oidc.runtime.OidcUtils.DEFAULT_TENANT_ID;\n+import static io.quarkus.runtime.configuration.DurationConverter.parseDuration;\n import static io.quarkus.vertx.http.runtime.security.HttpSecurityUtils.getRoutingContextAttribute;\n \n+import java.time.Duration;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.function.Consumer;\n@@ -40,6 +42,7 @@\n @Recorder\n public class OidcRecorder {\n \n+    public static final String ACR_VALUES_TO_MAX_AGE_SEPARATOR = \"@#$%@\";\n     static final Logger LOG = Logger.getLogger(OidcRecorder.class);\n \n     public Supplier<DefaultTokenIntrospectionUserInfoCache> setupTokenCache(OidcConfig config, Supplier<Vertx> vertx) {\n@@ -134,6 +137,45 @@ public TenantIdentityProvider get() {\n         };\n     }\n \n+    public Function<String, Consumer<RoutingContext>> authenticationContextInterceptorCreator() {\n+        StepUpAuthenticationPolicy.markAsEnabled();\n+        return new Function<String, Consumer<RoutingContext>>() {\n+            @Override\n+            public Consumer<RoutingContext> apply(String annotationBinding) {\n+                int separatorIndex = annotationBinding.indexOf(ACR_VALUES_TO_MAX_AGE_SEPARATOR);\n+                String acrValues = annotationBinding.substring(0, separatorIndex);\n+                String maxAgeAsStr = annotationBinding.substring(separatorIndex + ACR_VALUES_TO_MAX_AGE_SEPARATOR.length());\n+                final Duration maxAgeDuration;\n+                if (maxAgeAsStr.isEmpty()) {\n+                    maxAgeDuration = null;\n+                } else {\n+                    maxAgeDuration = parseDuration(maxAgeAsStr);\n+                }\n+                StepUpAuthenticationPolicy policy = new StepUpAuthenticationPolicy(acrValues, maxAgeDuration);\n+                return new Consumer<RoutingContext>() {\n+                    @Override\n+                    public void accept(RoutingContext routingContext) {\n+                        String requestPath = routingContext.request().path();\n+                        OidcTenantConfig tenantConfig = routingContext.get(OidcTenantConfig.class.getName());\n+                        if (tenantConfig != null || routingContext.user() != null) {\n+                            throw new AuthenticationFailedException(\"\"\"\n+                                    Authentication has happened before the '@AuthenticationContext' annotation was\n+                                    matched with the HTTP request path '%s'. It can happen when the authentication\n+                                    is required by an HTTP Security Policy before the JAX-RS chain is run. In such\n+                                    cases, please set the 'quarkus.http.auth.permission.\"permissions\".applies-to=JAXRS'\n+                                    to all HTTP Security Policies which secure the same REST endpoints as the ones\n+                                    annotated with the '@AuthenticationContext' annotation.\n+                                    \"\"\".formatted(requestPath));\n+                        }\n+                        LOG.debugf(\"The '@AuthenticationContext' annotation set required 'acr' values '%s' \"\n+                                + \"and max age '%s' for the request path '%s'\", acrValues, maxAgeAsStr, requestPath);\n+                        policy.storeSelfOnContext(routingContext);\n+                    }\n+                };\n+            }\n+        };\n+    }\n+\n     private static final class TenantSpecificOidcIdentityProvider extends OidcIdentityProvider\n             implements TenantIdentityProvider {\n \n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/StepUpAuthenticationPolicy.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/StepUpAuthenticationPolicy.java\nnew file mode 100644\nindex 0000000000000..8199c19be95fd\n--- /dev/null\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/StepUpAuthenticationPolicy.java\n@@ -0,0 +1,150 @@\n+package io.quarkus.oidc.runtime;\n+\n+import static io.quarkus.oidc.common.runtime.OidcConstants.ACR_VALUES;\n+import static io.quarkus.oidc.common.runtime.OidcConstants.MAX_AGE;\n+import static io.quarkus.vertx.http.runtime.security.HttpSecurityUtils.getAuthenticationFailureFromEvent;\n+import static io.quarkus.vertx.http.runtime.security.HttpSecurityUtils.getRoutingContextAttribute;\n+\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.microprofile.jwt.Claims;\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.oidc.common.runtime.OidcConstants;\n+import io.quarkus.security.AuthenticationFailedException;\n+import io.quarkus.security.identity.request.TokenAuthenticationRequest;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.RoutingContext;\n+\n+record StepUpAuthenticationPolicy(String[] expectedAcrValues, Long maxAge) implements Consumer<TokenVerificationResult> {\n+\n+    private static volatile boolean enabled = false;\n+\n+    StepUpAuthenticationPolicy(String acrValues, Duration maxAge) {\n+        this(acrValues.split(\",\"), maxAge == null ? null : maxAge.toSeconds());\n+    }\n+\n+    private static final Logger LOG = Logger.getLogger(StepUpAuthenticationPolicy.class);\n+    private static final String AUTHENTICATION_POLICY_KEY = \"io.quarkus.oidc.runtime.step-up-auth\";\n+\n+    @Override\n+    public void accept(TokenVerificationResult t) {\n+        JsonObject json = t.localVerificationResult != null ? t.localVerificationResult\n+                : new JsonObject(t.introspectionResult.getIntrospectionString());\n+        verifyAcr(json);\n+        if (maxAge != null) {\n+            verifyMaxAge(json);\n+        }\n+    }\n+\n+    private void verifyMaxAge(JsonObject json) {\n+        Long authTime = json.getLong(Claims.auth_time.name());\n+        if (authTime == null) {\n+            authTime = json.getLong(Claims.iat.name());\n+            if (authTime != null) {\n+                LOG.debugf(\"The '%s' claim value is not available, using the '%s' claim value '%s' to verify maximum token age\",\n+                        Claims.auth_time.name(), Claims.iat.name(), authTime);\n+            }\n+        }\n+        if (authTime != null) {\n+            final long nowSecs = System.currentTimeMillis() / 1000;\n+            if (nowSecs - authTime > maxAge) {\n+                throwAuthenticationFailedException(\n+                        \"The token age '%d' has exceeded '%d'\".formatted(authTime + maxAge, nowSecs));\n+            }\n+        } else {\n+            throwAuthenticationFailedException(\"Token has no '%s' claim\".formatted(Claims.auth_time.name()));\n+        }\n+    }\n+\n+    private void verifyAcr(JsonObject json) {\n+        JsonArray acr = json.getJsonArray(OidcConstants.ACR);\n+        if (acr != null && !acr.isEmpty()) {\n+            boolean acrFound = true;\n+            for (String expectedAcrValue : expectedAcrValues) {\n+                if (!acr.contains(expectedAcrValue)) {\n+                    LOG.debug(\"Acr value \" + expectedAcrValue + \" is required but not found in token 'acr' claim: \" + acr);\n+                    acrFound = false;\n+                    break;\n+                }\n+            }\n+            if (acrFound) {\n+                return;\n+            }\n+        }\n+\n+        final String message = \"Valid token with '%s' acr claim values is required\"\n+                .formatted(Arrays.toString(expectedAcrValues));\n+        throwAuthenticationFailedException(message);\n+    }\n+\n+    private void throwAuthenticationFailedException(String exceptionMessage) {\n+        throwAuthenticationFailedException(exceptionMessage, expectedAcrValues, maxAge);\n+    }\n+\n+    private static void throwAuthenticationFailedException(String exceptionMessage, String[] expectedAcrValues, Long maxAge) {\n+        final Map<String, Object> failureContext;\n+        if (maxAge == null) {\n+            failureContext = Map.of(ACR_VALUES, String.join(\",\", expectedAcrValues));\n+        } else {\n+            failureContext = Map.of(ACR_VALUES, String.join(\",\", expectedAcrValues), MAX_AGE, Long.toString(maxAge));\n+        }\n+        throw new AuthenticationFailedException(exceptionMessage, failureContext);\n+    }\n+\n+    static void throwAuthenticationFailedException(String exceptionMessage, Set<String> expectedAcrValues) {\n+        throwAuthenticationFailedException(exceptionMessage, expectedAcrValues.toArray(new String[] {}), null);\n+    }\n+\n+    void storeSelfOnContext(RoutingContext routingContext) {\n+        routingContext.put(AUTHENTICATION_POLICY_KEY, this);\n+    }\n+\n+    static StepUpAuthenticationPolicy getFromRequest(TokenAuthenticationRequest request) {\n+        RoutingContext routingContext = getRoutingContextAttribute(request);\n+        return routingContext != null ? routingContext.get(AUTHENTICATION_POLICY_KEY) : null;\n+    }\n+\n+    static boolean isInsufficientUserAuthException(RoutingContext routingContext) {\n+        final AuthenticationFailedException authFailure = getAuthenticationFailureFromEvent(routingContext);\n+        return isInsufficientUserAuthException(authFailure);\n+    }\n+\n+    static String getAuthRequirementChallenge(RoutingContext context) {\n+        final AuthenticationFailedException authFailure = getAuthenticationFailureFromEvent(context);\n+        if (isInsufficientUserAuthException(authFailure)) {\n+            StringBuilder challengeBuilder = new StringBuilder(\" error=\\\"insufficient_user_authentication\\\",\" +\n+                    \" error_description=\\\"A different authentication level is required\\\"\");\n+            if (authFailure.getAttribute(ACR_VALUES) != null) {\n+                challengeBuilder.append(\", \").append(ACR_VALUES).append(\"=\\\"\")\n+                        .append((String) authFailure.getAttribute(ACR_VALUES))\n+                        .append(\"\\\"\");\n+            }\n+            if (authFailure.getAttribute(MAX_AGE) != null) {\n+                challengeBuilder.append(\", \").append(MAX_AGE).append(\"=\\\"\")\n+                        .append((String) authFailure.getAttribute(MAX_AGE))\n+                        .append(\"\\\"\");\n+            }\n+            return challengeBuilder.toString();\n+        }\n+        return null;\n+    }\n+\n+    private static boolean isInsufficientUserAuthException(AuthenticationFailedException authFailure) {\n+        return authFailure != null\n+                && (authFailure.getAttribute(ACR_VALUES) != null || authFailure.getAttribute(MAX_AGE) != null);\n+    }\n+\n+    static void markAsEnabled() {\n+        enabled = true;\n+    }\n+\n+    static boolean isEnabled() {\n+        return enabled;\n+    }\n+}\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantContextFactory.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantContextFactory.java\nindex 242b380515d13..08f5cf3d42de3 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantContextFactory.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantContextFactory.java\n@@ -223,6 +223,15 @@ private Uni<TenantConfigContext> createTenantContext(OidcTenantConfig oidcTenant\n             throw new ConfigurationException(\n                     \"UserInfo is not required but 'verifyAccessTokenWithUserInfo' is enabled\");\n         }\n+        if (!oidcConfig.authentication().idTokenRequired().orElse(true) && OidcUtils.isWebApp(oidcConfig)\n+                && StepUpAuthenticationPolicy.isEnabled()) {\n+            String propertyName = getConfigPropertyForTenant(tenantId, \"authentication.id-token-required\");\n+            // this can be false alarm in case Quarkus application have multiple tenants and 'acr' values are not\n+            // required for this tenant, which we cannot know\n+            LOG.warnf(\"Step Up Authentication is not supported for tenant '%s', because the internal IdToken is\"\n+                    + \" generated by Quarkus. Please see the '%s' configuration property documentation for more information\",\n+                    tenantId, propertyName);\n+        }\n         if (!oidcConfig.authentication().idTokenRequired().orElse(true) && !enableUserInfo(oidcConfig)) {\n             throw new ConfigurationException(\n                     \"UserInfo is not required but it will be needed to verify a code flow access token\");\n\ndiff --git a/extensions/resteasy-classic/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/AuthenticationFailedExceptionMapper.java b/extensions/resteasy-classic/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/AuthenticationFailedExceptionMapper.java\nindex 07b8f4324334b..3de2b958f4b62 100644\n--- a/extensions/resteasy-classic/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/AuthenticationFailedExceptionMapper.java\n+++ b/extensions/resteasy-classic/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/AuthenticationFailedExceptionMapper.java\n@@ -1,5 +1,7 @@\n package io.quarkus.resteasy.runtime;\n \n+import static io.quarkus.vertx.http.runtime.security.HttpSecurityUtils.addAuthenticationFailureToEvent;\n+\n import jakarta.annotation.Priority;\n import jakarta.enterprise.inject.spi.CDI;\n import jakarta.ws.rs.Priorities;\n@@ -35,6 +37,7 @@ public Response toResponse(AuthenticationFailedException exception) {\n         if (context != null) {\n             HttpAuthenticator authenticator = context.get(HttpAuthenticator.class.getName());\n             if (authenticator != null) {\n+                addAuthenticationFailureToEvent(exception, currentVertxRequest.getCurrent());\n                 ChallengeData challengeData = authenticator.getChallenge(context)\n                         .await().indefinitely();\n                 int statusCode = challengeData == null ? 401 : challengeData.status;\n\ndiff --git a/extensions/resteasy-reactive/rest/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/exceptionmappers/AuthenticationFailedExceptionMapper.java b/extensions/resteasy-reactive/rest/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/exceptionmappers/AuthenticationFailedExceptionMapper.java\nindex e3fd961eb64f6..fb446821d396b 100644\n--- a/extensions/resteasy-reactive/rest/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/exceptionmappers/AuthenticationFailedExceptionMapper.java\n+++ b/extensions/resteasy-reactive/rest/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/exceptionmappers/AuthenticationFailedExceptionMapper.java\n@@ -1,5 +1,7 @@\n package io.quarkus.resteasy.reactive.server.runtime.exceptionmappers;\n \n+import static io.quarkus.vertx.http.runtime.security.HttpSecurityUtils.addAuthenticationFailureToEvent;\n+\n import jakarta.ws.rs.Priorities;\n import jakarta.ws.rs.core.Response;\n \n@@ -14,6 +16,7 @@ public class AuthenticationFailedExceptionMapper {\n \n     @ServerExceptionMapper(value = AuthenticationFailedException.class, priority = Priorities.USER + 1)\n     public Uni<Response> handle(RoutingContext routingContext, AuthenticationFailedException exception) {\n+        addAuthenticationFailureToEvent(exception, routingContext);\n         return SecurityExceptionMapperUtil.handleWithAuthenticator(routingContext,\n                 LaunchMode.isDev() ? exception.getMessage() : null);\n     }\n\ndiff --git a/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/EagerSecurityInterceptorBindingBuildItem.java b/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/EagerSecurityInterceptorBindingBuildItem.java\nindex 2b4ba0a05fd76..447997451ebdc 100644\n--- a/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/EagerSecurityInterceptorBindingBuildItem.java\n+++ b/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/EagerSecurityInterceptorBindingBuildItem.java\n@@ -31,6 +31,7 @@ public final class EagerSecurityInterceptorBindingBuildItem extends MultiBuildIt\n      * For example, we know that endpoint annotated with {@link HttpAuthenticationMechanism} is always secured.\n      */\n     private final boolean requiresSecurityCheck;\n+    private final Function<AnnotationInstance, String> bindingValueExtractor;\n \n     /**\n      *\n@@ -39,10 +40,17 @@ public final class EagerSecurityInterceptorBindingBuildItem extends MultiBuildIt\n      */\n     public EagerSecurityInterceptorBindingBuildItem(Function<String, Consumer<RoutingContext>> interceptorCreator,\n             DotName... interceptorBindings) {\n+        this(interceptorCreator, null, false, interceptorBindings);\n+    }\n+\n+    public EagerSecurityInterceptorBindingBuildItem(Function<String, Consumer<RoutingContext>> interceptorCreator,\n+            Function<AnnotationInstance, String> bindingValueExtractor,\n+            boolean requiresSecurityCheck, DotName... interceptorBindings) {\n         this.annotationBindings = interceptorBindings;\n         this.interceptorCreator = interceptorCreator;\n         this.bindingToValue = Map.of();\n-        this.requiresSecurityCheck = false;\n+        this.requiresSecurityCheck = requiresSecurityCheck;\n+        this.bindingValueExtractor = bindingValueExtractor;\n     }\n \n     EagerSecurityInterceptorBindingBuildItem(Function<String, Consumer<RoutingContext>> interceptorCreator,\n@@ -51,6 +59,7 @@ public EagerSecurityInterceptorBindingBuildItem(Function<String, Consumer<Routin\n         this.interceptorCreator = interceptorCreator;\n         this.bindingToValue = bindingToValue;\n         this.requiresSecurityCheck = true;\n+        this.bindingValueExtractor = null;\n     }\n \n     public DotName[] getAnnotationBindings() {\n@@ -63,6 +72,9 @@ Function<String, Consumer<RoutingContext>> getInterceptorCreator() {\n \n     public String getBindingValue(AnnotationInstance annotationInstance, DotName annotation,\n             AnnotationTarget annotationTarget) {\n+        if (bindingValueExtractor != null) {\n+            return bindingValueExtractor.apply(annotationInstance);\n+        }\n         if (bindingToValue.containsKey(annotation.toString())) {\n             return bindingToValue.get(annotation.toString());\n         }\n@@ -73,7 +85,7 @@ public String getBindingValue(AnnotationInstance annotationInstance, DotName ann\n         return annotationInstance.value().asString();\n     }\n \n-    private static String toTargetName(AnnotationTarget target) {\n+    public static String toTargetName(AnnotationTarget target) {\n         if (target.kind() == AnnotationTarget.Kind.METHOD) {\n             return target.asMethod().declaringClass().name().toString() + \"#\" + target.asMethod().name();\n         } else {\n\ndiff --git a/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/HttpSecurityProcessor.java b/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/HttpSecurityProcessor.java\nindex a38ce05c2e1b7..991e13dd7611e 100644\n--- a/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/HttpSecurityProcessor.java\n+++ b/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/HttpSecurityProcessor.java\n@@ -659,7 +659,7 @@ private static boolean isMtlsClientAuthenticationEnabled(VertxHttpBuildTimeConfi\n         return !ClientAuth.NONE.equals(httpBuildTimeConfig.tlsClientAuth());\n     }\n \n-    private static Set<MethodInfo> collectClassMethodsWithoutRbacAnnotation(Collection<ClassInfo> classes) {\n+    public static Set<MethodInfo> collectClassMethodsWithoutRbacAnnotation(Collection<ClassInfo> classes) {\n         return classes\n                 .stream()\n                 .filter(c -> !HttpSecurityUtils.hasSecurityAnnotation(c))\n@@ -670,14 +670,14 @@ private static Set<MethodInfo> collectClassMethodsWithoutRbacAnnotation(Collecti\n                 .collect(Collectors.toSet());\n     }\n \n-    private static Set<MethodInfo> collectMethodsWithoutRbacAnnotation(Collection<MethodInfo> methods) {\n+    public static Set<MethodInfo> collectMethodsWithoutRbacAnnotation(Collection<MethodInfo> methods) {\n         return methods\n                 .stream()\n                 .filter(m -> !HttpSecurityUtils.hasSecurityAnnotation(m))\n                 .collect(Collectors.toSet());\n     }\n \n-    private static Set<ClassInfo> collectAnnotatedClasses(Collection<AnnotationInstance> instances,\n+    public static Set<ClassInfo> collectAnnotatedClasses(Collection<AnnotationInstance> instances,\n             Predicate<ClassInfo> filter) {\n         return instances\n                 .stream()\n\ndiff --git a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/HttpSecurityRecorder.java b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/HttpSecurityRecorder.java\nindex b040997fab79b..0414a44fce5a1 100644\n--- a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/HttpSecurityRecorder.java\n+++ b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/HttpSecurityRecorder.java\n@@ -1,5 +1,6 @@\n package io.quarkus.vertx.http.runtime.security;\n \n+import static io.quarkus.vertx.http.runtime.security.HttpSecurityUtils.addAuthenticationFailureToEvent;\n import static io.quarkus.vertx.http.runtime.security.HttpSecurityUtils.setRoutingContextAttribute;\n import static io.quarkus.vertx.http.runtime.security.RolesMapping.ROLES_MAPPING_KEY;\n \n@@ -186,6 +187,7 @@ public void accept(RoutingContext event, Throwable throwable) {\n             }\n             //auth failed\n             if (throwable instanceof AuthenticationFailedException authenticationFailedException) {\n+                addAuthenticationFailureToEvent(authenticationFailedException, event);\n                 getAuthenticator(event).sendChallenge(event).subscribe().with(new Consumer<Boolean>() {\n                     @Override\n                     public void accept(Boolean aBoolean) {\n\ndiff --git a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/HttpSecurityUtils.java b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/HttpSecurityUtils.java\nindex a364d81c16d9f..9b3e995cbf465 100644\n--- a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/HttpSecurityUtils.java\n+++ b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/HttpSecurityUtils.java\n@@ -7,6 +7,7 @@\n import javax.naming.ldap.Rdn;\n import javax.security.auth.x500.X500Principal;\n \n+import io.quarkus.security.AuthenticationFailedException;\n import io.quarkus.security.identity.SecurityIdentity;\n import io.quarkus.security.identity.request.AuthenticationRequest;\n import io.vertx.ext.web.RoutingContext;\n@@ -16,6 +17,7 @@ public final class HttpSecurityUtils {\n     public final static String ROUTING_CONTEXT_ATTRIBUTE = \"quarkus.http.routing.context\";\n     static final String SECURITY_IDENTITIES_ATTRIBUTE = \"io.quarkus.security.identities\";\n     static final String COMMON_NAME = \"CN\";\n+    private static final String AUTHENTICATION_FAILURE_KEY = \"io.quarkus.vertx.http.runtime.security#authentication-failure\";\n \n     private HttpSecurityUtils() {\n \n@@ -88,4 +90,21 @@ static String getRdnValue(X500Principal principal, String rdnType) {\n         }\n         return null;\n     }\n+\n+    /**\n+     * Adds {@link AuthenticationFailedException} failure to the current {@link RoutingContext}.\n+     * Main motivation is to have {@link AuthenticationFailedException#getAttributes()} available during challenge.\n+     */\n+    public static void addAuthenticationFailureToEvent(AuthenticationFailedException exception, RoutingContext routingContext) {\n+        if (routingContext != null && exception != null) {\n+            routingContext.put(AUTHENTICATION_FAILURE_KEY, exception);\n+        }\n+    }\n+\n+    public static AuthenticationFailedException getAuthenticationFailureFromEvent(RoutingContext routingContext) {\n+        if (routingContext != null) {\n+            return routingContext.get(AUTHENTICATION_FAILURE_KEY);\n+        }\n+        return null;\n+    }\n }\n",
    "test_patch": "diff --git a/extensions/oidc/deployment/src/test/java/io/quarkus/oidc/test/EmptyAuthenticationContextValidationFailureTest.java b/extensions/oidc/deployment/src/test/java/io/quarkus/oidc/test/EmptyAuthenticationContextValidationFailureTest.java\nnew file mode 100644\nindex 0000000000000..96a093aaf808c\n--- /dev/null\n+++ b/extensions/oidc/deployment/src/test/java/io/quarkus/oidc/test/EmptyAuthenticationContextValidationFailureTest.java\n@@ -0,0 +1,50 @@\n+package io.quarkus.oidc.test;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.oidc.AuthenticationContext;\n+import io.quarkus.runtime.util.ExceptionUtil;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class EmptyAuthenticationContextValidationFailureTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest test = new QuarkusUnitTest()\n+            .withApplicationRoot(jar -> jar\n+                    // starting the dev service would be a waste\n+                    .addClass(StepUpAuthResource.class)\n+                    .addAsResource(new StringAsset(\"\"\"\n+                            quarkus.devservices.enabled=false\n+                            quarkus.http.auth.proactive=false\n+                            \"\"\"), \"application.properties\"))\n+            .assertException(t -> {\n+                Throwable rootCause = ExceptionUtil.getRootCause(t);\n+                Assertions.assertNotNull(rootCause);\n+                String message = rootCause.getMessage();\n+                Assertions.assertNotNull(message);\n+                Assertions.assertTrue(message.contains(\"io.quarkus.oidc.AuthenticationContext\"), message);\n+                Assertions.assertTrue(message.contains(\"specifies no 'acr' value\"), message);\n+            });\n+\n+    @Test\n+    public void test() {\n+        Assertions.fail(\"Validation should fail\");\n+    }\n+\n+    @AuthenticationContext({})\n+    @Path(\"step-up-auth\")\n+    public static class StepUpAuthResource {\n+\n+        @GET\n+        public String stepUpAuth() {\n+            return \"step-up-auth\";\n+        }\n+\n+    }\n+}\n\ndiff --git a/extensions/oidc/deployment/src/test/java/io/quarkus/oidc/test/ProactiveAuthenticationContextValidationFailureTest.java b/extensions/oidc/deployment/src/test/java/io/quarkus/oidc/test/ProactiveAuthenticationContextValidationFailureTest.java\nnew file mode 100644\nindex 0000000000000..07ba36d58867b\n--- /dev/null\n+++ b/extensions/oidc/deployment/src/test/java/io/quarkus/oidc/test/ProactiveAuthenticationContextValidationFailureTest.java\n@@ -0,0 +1,46 @@\n+package io.quarkus.oidc.test;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.oidc.AuthenticationContext;\n+import io.quarkus.runtime.util.ExceptionUtil;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class ProactiveAuthenticationContextValidationFailureTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest test = new QuarkusUnitTest()\n+            .withApplicationRoot(jar -> jar\n+                    // starting the dev service would be a waste\n+                    .addClass(StepUpAuthResource.class)\n+                    .addAsResource(new StringAsset(\"quarkus.devservices.enabled=false\"), \"application.properties\"))\n+            .assertException(t -> {\n+                Throwable rootCause = ExceptionUtil.getRootCause(t);\n+                Assertions.assertNotNull(rootCause);\n+                String message = rootCause.getMessage();\n+                Assertions.assertNotNull(message);\n+                Assertions.assertTrue(message.contains(\"proactive authentication is disabled\"), message);\n+            });\n+\n+    @Test\n+    public void test() {\n+        Assertions.fail(\"Validation should fail\");\n+    }\n+\n+    @AuthenticationContext(\"ignored\")\n+    @Path(\"step-up-auth\")\n+    public static class StepUpAuthResource {\n+\n+        @GET\n+        public String stepUpAuth() {\n+            return \"step-up-auth\";\n+        }\n+\n+    }\n+}\n\ndiff --git a/integration-tests/oidc-tenancy/pom.xml b/integration-tests/oidc-tenancy/pom.xml\nindex dcdce9632edc1..e62e1bea953cb 100644\n--- a/integration-tests/oidc-tenancy/pom.xml\n+++ b/integration-tests/oidc-tenancy/pom.xml\n@@ -34,6 +34,10 @@\n             <groupId>org.eclipse.angus</groupId>\n             <artifactId>angus-activation</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-websockets-next</artifactId>\n+        </dependency>\n \n         <!-- test dependencies -->\n         <dependency>\n@@ -124,6 +128,19 @@\n                 </exclusion>\n             </exclusions>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-websockets-next-deployment</artifactId>\n+            <version>${project.version}</version>\n+            <type>pom</type>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>*</groupId>\n+                    <artifactId>*</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n     </dependencies>\n \n     <build>\n\ndiff --git a/integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/AcrValueValidator.java b/integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/AcrValueValidator.java\nnew file mode 100644\nindex 0000000000000..cf7948e719f2b\n--- /dev/null\n+++ b/integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/AcrValueValidator.java\n@@ -0,0 +1,35 @@\n+package io.quarkus.it.keycloak;\n+\n+import static org.eclipse.microprofile.jwt.Claims.acr;\n+\n+import java.util.Map;\n+\n+import jakarta.enterprise.context.ApplicationScoped;\n+\n+import org.jose4j.jwt.MalformedClaimException;\n+import org.jose4j.jwt.consumer.JwtContext;\n+import org.jose4j.jwt.consumer.Validator;\n+\n+import io.quarkus.arc.Unremovable;\n+import io.quarkus.oidc.TenantFeature;\n+import io.quarkus.oidc.common.runtime.OidcConstants;\n+import io.quarkus.security.AuthenticationFailedException;\n+\n+@Unremovable\n+@ApplicationScoped\n+@TenantFeature(\"step-up-auth-custom-validator\")\n+public class AcrValueValidator implements Validator {\n+\n+    @Override\n+    public String validate(JwtContext jwtContext) throws MalformedClaimException {\n+        var jwtClaims = jwtContext.getJwtClaims();\n+        if (jwtClaims.hasClaim(acr.name())) {\n+            var acrClaim = jwtClaims.getStringListClaimValue(acr.name());\n+            if (acrClaim.contains(\"delta\") && acrClaim.contains(\"epsilon\") && acrClaim.contains(\"zeta\")) {\n+                return null;\n+            }\n+        }\n+        String requiredAcrValues = \"delta,epsilon,zeta\";\n+        throw new AuthenticationFailedException(Map.of(OidcConstants.ACR_VALUES, requiredAcrValues));\n+    }\n+}\n\ndiff --git a/integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/CustomTenantConfigResolver.java b/integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/CustomTenantConfigResolver.java\nindex c9dabeae80707..e4c9620095543 100644\n--- a/integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/CustomTenantConfigResolver.java\n+++ b/integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/CustomTenantConfigResolver.java\n@@ -28,6 +28,11 @@ public Uni<OidcTenantConfig> resolve(RoutingContext context, OidcRequestContext<\n         return requestContext.runBlocking(new Supplier<OidcTenantConfig>() {\n             @Override\n             public OidcTenantConfig get() {\n+                if (context.normalizedPath().startsWith(\"/ws/tenant-annotation/bearer-step-up-auth\")\n+                        || context.normalizedPath().startsWith(\"/tenant-ann-step-up-auth\")) {\n+                    // use @Tenant annotation to resolve configuration\n+                    return null;\n+                }\n \n                 // Make sure this resolver is called only once during a given request\n                 if (context.get(\"dynamic_config_resolved\") != null) {\n@@ -48,7 +53,7 @@ public OidcTenantConfig get() {\n                     config.getAuthentication().setUserInfoRequired(true);\n                     config.setAllowUserInfoCache(false);\n                     return config;\n-                } else if (\"tenant-oidc\".equals(tenantId)) {\n+                } else if (\"tenant-oidc\".equals(tenantId) || context.normalizedPath().startsWith(\"/step-up-auth\")) {\n                     OidcTenantConfig config = new OidcTenantConfig();\n                     config.setTenantId(\"tenant-oidc\");\n                     String uri = context.request().absoluteURI();\n@@ -63,7 +68,11 @@ public OidcTenantConfig get() {\n                             authServerUri = uri.replace(\"/tenant-opaque/tenant-oidc/api/admin-permission\", \"/oidc\");\n                         }\n                     } else {\n-                        authServerUri = uri.replace(\"/tenant/tenant-oidc/api/user\", \"/oidc\");\n+                        if (path.contains(\"/step-up-auth\")) {\n+                            authServerUri = uri.substring(0, uri.indexOf(\"/step-up-auth\")) + \"/oidc\";\n+                        } else {\n+                            authServerUri = uri.replace(\"/tenant/tenant-oidc/api/user\", \"/oidc\");\n+                        }\n                     }\n                     config.setAuthServerUrl(authServerUri);\n                     config.setClientId(\"client\");\n\ndiff --git a/integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/OidcResource.java b/integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/OidcResource.java\nindex bda333371892e..722fe3e1b4f74 100644\n--- a/integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/OidcResource.java\n+++ b/integration-tests/oidc-tenancy/src/main/java/io/quarkus/it/keycloak/OidcResource.java\n@@ -2,6 +2,7 @@\n \n import java.security.PublicKey;\n import java.time.Duration;\n+import java.util.Arrays;\n import java.util.Base64;\n import java.util.Set;\n \n@@ -265,6 +266,17 @@ public String token(@FormParam(\"grant_type\") String grantType, @FormParam(\"clien\n         }\n     }\n \n+    @POST\n+    @Path(\"accesstoken-with-acr\")\n+    @Produces(\"application/json\")\n+    public String testAccessTokenWithAcr(@QueryParam(\"acr\") String acr, @QueryParam(\"auth_time\") String authTime) {\n+        return \"{\\\"access_token\\\": \\\"\" + jwt(null, \"123456789\", \"1\", false, acr, authTime)\n+                + \"\\\",\" +\n+                \"   \\\"token_type\\\": \\\"Bearer\\\",\" +\n+                \"   \\\"refresh_token\\\": \\\"123456789\\\",\" +\n+                \"   \\\"expires_in\\\": 300 }\";\n+    }\n+\n     @POST\n     @Path(\"accesstoken\")\n     @Produces(\"application/json\")\n@@ -362,6 +374,10 @@ private String jwt(String audience, String subject, String kid) {\n     }\n \n     private String jwt(String audience, String subject, String kid, boolean withEmptyScope) {\n+        return jwt(audience, subject, kid, withEmptyScope, null, null);\n+    }\n+\n+    private String jwt(String audience, String subject, String kid, boolean withEmptyScope, String acr, String authTime) {\n         JwtClaimsBuilder builder = Jwt.claim(\"typ\", \"Bearer\")\n                 .upn(\"alice\")\n                 .preferredUserName(\"alice\")\n@@ -378,6 +394,14 @@ private String jwt(String audience, String subject, String kid, boolean withEmpt\n             builder.claim(\"scope\", \"\");\n         }\n \n+        if (acr != null && !acr.isEmpty()) {\n+            builder.claim(\"acr\", Arrays.asList(acr.split(\",\")));\n+        }\n+\n+        if (authTime != null && !authTime.isEmpty()) {\n+            builder.claim(\"auth_time\", Long.parseLong(authTime));\n+        }\n+\n         return builder.jws().keyId(kid)\n                 .sign(key.getPrivateKey());\n     }\n\ndiff --git a/integration-tests/oidc-tenancy/src/main/resources/application.properties b/integration-tests/oidc-tenancy/src/main/resources/application.properties\nindex 585dc9e277f14..30b77282a5f89 100644\n--- a/integration-tests/oidc-tenancy/src/main/resources/application.properties\n+++ b/integration-tests/oidc-tenancy/src/main/resources/application.properties\n@@ -189,3 +189,25 @@ quarkus.http.auth.permission.basic-policy.auth-mechanism=basic\n quarkus.http.auth.permission.bearer-policy.paths=/multiple-auth-mech/bearer/policy\n quarkus.http.auth.permission.bearer-policy.policy=authenticated\n quarkus.http.auth.permission.bearer-policy.auth-mechanism=Bearer\n+\n+quarkus.oidc.step-up-auth-required-claims.client-id=client\n+quarkus.oidc.step-up-auth-required-claims.allow-token-introspection-cache=false\n+quarkus.oidc.step-up-auth-required-claims.jwks-path=jwks\n+quarkus.oidc.step-up-auth-required-claims.auth-server-url=http://localhost:${quarkus.http.test-port}/oidc\n+quarkus.oidc.step-up-auth-required-claims.introspection-path=${quarkus.oidc.step-up-auth-annotation-selection.auth-server-url}\n+quarkus.oidc.step-up-auth-required-claims.token.required-claims.acr=alpha,beta,gamma\n+quarkus.oidc.step-up-auth-custom-validator.client-id=client\n+quarkus.oidc.step-up-auth-custom-validator.allow-token-introspection-cache=false\n+quarkus.oidc.step-up-auth-custom-validator.jwks-path=jwks\n+quarkus.oidc.step-up-auth-custom-validator.auth-server-url=http://localhost:${quarkus.http.test-port}/oidc\n+quarkus.oidc.step-up-auth-custom-validator.introspection-path=${quarkus.oidc.step-up-auth-annotation-selection.auth-server-url}\n+%step-up-auth.quarkus.oidc.step-up-auth-annotation-selection.client-id=client\n+%step-up-auth.quarkus.oidc.step-up-auth-annotation-selection.allow-token-introspection-cache=false\n+%step-up-auth.quarkus.oidc.step-up-auth-annotation-selection.jwks-path=jwks\n+%step-up-auth.quarkus.oidc.step-up-auth-annotation-selection.auth-server-url=http://localhost:${quarkus.http.test-port}/oidc\n+%step-up-auth.quarkus.oidc.step-up-auth-annotation-selection.introspection-path=${quarkus.oidc.step-up-auth-annotation-selection.auth-server-url}\n+%step-up-auth.quarkus.oidc.step-up-auth-annotation-selection-2.client-id=client\n+%step-up-auth.quarkus.oidc.step-up-auth-annotation-selection-2.allow-token-introspection-cache=false\n+%step-up-auth.quarkus.oidc.step-up-auth-annotation-selection-2.jwks-path=jwks\n+%step-up-auth.quarkus.oidc.step-up-auth-annotation-selection-2.auth-server-url=http://localhost:${quarkus.http.test-port}/oidc\n+%step-up-auth.quarkus.oidc.step-up-auth-annotation-selection-2.introspection-path=${quarkus.oidc.step-up-auth-annotation-selection.auth-server-url}\n\ndiff --git a/integration-tests/oidc-tenancy/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java b/integration-tests/oidc-tenancy/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java\nindex 664cca9bb893a..4257e5f84823d 100644\n--- a/integration-tests/oidc-tenancy/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java\n+++ b/integration-tests/oidc-tenancy/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java\n@@ -1,6 +1,8 @@\n package io.quarkus.it.keycloak;\n \n+import static io.quarkus.it.keycloak.BearerTokenStepUpAuthenticationTest.getAccessTokenWithAcr;\n import static org.awaitility.Awaitility.await;\n+import static org.hamcrest.Matchers.containsString;\n import static org.hamcrest.Matchers.equalTo;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotEquals;\n@@ -12,6 +14,7 @@\n import java.net.URI;\n import java.time.Duration;\n import java.util.List;\n+import java.util.Set;\n import java.util.concurrent.Callable;\n import java.util.concurrent.TimeUnit;\n \n@@ -909,6 +912,76 @@ public void testAnnotationBasedAuthMechSelection() throws IOException {\n         }\n     }\n \n+    @Test\n+    public void testStepUpAuthUsingRequiredClaimsConfigProperty() {\n+        RestAssured.when().post(\"/oidc/jwk-endpoint-call-count\").then().body(equalTo(\"0\"));\n+        RestAssured.when().post(\"/oidc/introspection-endpoint-call-count\").then().body(equalTo(\"0\"));\n+        RestAssured.when().post(\"/oidc/revoke-endpoint-call-count\").then().body(equalTo(\"0\"));\n+        RestAssured.when().post(\"/oidc/disable-introspection\").then().body(equalTo(\"false\"));\n+        RestAssured.when().post(\"/oidc/disable-discovery\").then().body(equalTo(\"false\"));\n+\n+        // for this tenant, 3 'acr' values are required: alpha, beta, gamma\n+        RestAssured.given().auth().oauth2(getAccessTokenWithAcr(Set.of()))\n+                .when().get(\"/tenants/step-up-auth-required-claims/api/user\")\n+                .then()\n+                .statusCode(401)\n+                .header(\"www-authenticate\", containsString(\"insufficient_user_authentication\"))\n+                .header(\"www-authenticate\", containsString(\"acr_values\"))\n+                .header(\"www-authenticate\", containsString(\"alpha\"))\n+                .header(\"www-authenticate\", containsString(\"beta\"))\n+                .header(\"www-authenticate\", containsString(\"gamma\"));\n+        // 'gamma' acr value is missing -> 401\n+        RestAssured.given().auth().oauth2(getAccessTokenWithAcr(Set.of(\"alpha\", \"beta\")))\n+                .when().get(\"/tenants/step-up-auth-required-claims/api/user\")\n+                .then()\n+                .statusCode(401)\n+                .header(\"www-authenticate\", containsString(\"insufficient_user_authentication\"))\n+                .header(\"www-authenticate\", containsString(\"acr_values\"))\n+                .header(\"www-authenticate\", containsString(\"alpha\"))\n+                .header(\"www-authenticate\", containsString(\"beta\"))\n+                .header(\"www-authenticate\", containsString(\"gamma\"));\n+        RestAssured.given().auth().oauth2(getAccessTokenWithAcr(Set.of(\"alpha\", \"beta\", \"gamma\")))\n+                .when().get(\"/tenants/step-up-auth-required-claims/api/user\")\n+                .then()\n+                .statusCode(200)\n+                .body(equalTo(\"alice:service\"));\n+    }\n+\n+    @Test\n+    public void testStepUpAuthUsingCustomValidatorRequiringAcrValues() {\n+        RestAssured.when().post(\"/oidc/jwk-endpoint-call-count\").then().body(equalTo(\"0\"));\n+        RestAssured.when().post(\"/oidc/introspection-endpoint-call-count\").then().body(equalTo(\"0\"));\n+        RestAssured.when().post(\"/oidc/revoke-endpoint-call-count\").then().body(equalTo(\"0\"));\n+        RestAssured.when().post(\"/oidc/disable-introspection\").then().body(equalTo(\"false\"));\n+        RestAssured.when().post(\"/oidc/disable-discovery\").then().body(equalTo(\"false\"));\n+\n+        // for this tenant, 3 'acr' values are required: delta, epsilon, zeta\n+        RestAssured.given().auth().oauth2(getAccessTokenWithAcr(Set.of()))\n+                .when().get(\"/tenants/step-up-auth-custom-validator/api/user\")\n+                .then()\n+                .statusCode(401)\n+                .header(\"www-authenticate\", containsString(\"insufficient_user_authentication\"))\n+                .header(\"www-authenticate\", containsString(\"acr_values\"))\n+                .header(\"www-authenticate\", containsString(\"delta\"))\n+                .header(\"www-authenticate\", containsString(\"epsilon\"))\n+                .header(\"www-authenticate\", containsString(\"zeta\"));\n+        // 'gamma' acr value is missing -> 401\n+        RestAssured.given().auth().oauth2(getAccessTokenWithAcr(Set.of(\"alpha\", \"beta\")))\n+                .when().get(\"/tenants/step-up-auth-custom-validator/api/user\")\n+                .then()\n+                .statusCode(401)\n+                .header(\"www-authenticate\", containsString(\"insufficient_user_authentication\"))\n+                .header(\"www-authenticate\", containsString(\"acr_values\"))\n+                .header(\"www-authenticate\", containsString(\"delta\"))\n+                .header(\"www-authenticate\", containsString(\"epsilon\"))\n+                .header(\"www-authenticate\", containsString(\"zeta\"));\n+        RestAssured.given().auth().oauth2(getAccessTokenWithAcr(Set.of(\"delta\", \"epsilon\", \"zeta\")))\n+                .when().get(\"/tenants/step-up-auth-custom-validator/api/user\")\n+                .then()\n+                .statusCode(200)\n+                .body(equalTo(\"alice:service\"));\n+    }\n+\n     private String getAccessToken(String userName, String clientId) {\n         return getAccessToken(userName, clientId, clientId);\n     }\n\ndiff --git a/integration-tests/oidc-tenancy/src/test/java/io/quarkus/it/keycloak/BearerTokenStepUpAuthenticationTest.java b/integration-tests/oidc-tenancy/src/test/java/io/quarkus/it/keycloak/BearerTokenStepUpAuthenticationTest.java\nnew file mode 100644\nindex 0000000000000..68af88c5848ce\n--- /dev/null\n+++ b/integration-tests/oidc-tenancy/src/test/java/io/quarkus/it/keycloak/BearerTokenStepUpAuthenticationTest.java\n@@ -0,0 +1,461 @@\n+package io.quarkus.it.keycloak;\n+\n+import static org.hamcrest.Matchers.*;\n+\n+import java.net.URI;\n+import java.util.*;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+\n+import jakarta.annotation.security.RolesAllowed;\n+import jakarta.inject.Inject;\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+\n+import org.awaitility.Awaitility;\n+import org.eclipse.microprofile.jwt.Claims;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.oidc.AuthenticationContext;\n+import io.quarkus.oidc.OidcTenantConfig;\n+import io.quarkus.oidc.Tenant;\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.common.http.TestHTTPResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.QuarkusTestProfile;\n+import io.quarkus.test.junit.TestProfile;\n+import io.quarkus.websockets.next.OnOpen;\n+import io.quarkus.websockets.next.OnTextMessage;\n+import io.quarkus.websockets.next.WebSocket;\n+import io.restassured.RestAssured;\n+import io.restassured.response.ValidatableResponse;\n+import io.smallrye.jwt.build.Jwt;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.WebSocketClient;\n+import io.vertx.core.http.WebSocketConnectOptions;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@TestProfile(BearerTokenStepUpAuthenticationTest.StepUpAuthTestProfile.class)\n+@QuarkusTestResource(KeycloakRealmResourceManager.class)\n+@QuarkusTest\n+public class BearerTokenStepUpAuthenticationTest {\n+\n+    @TestHTTPResource(\"/ws/tenant-annotation/bearer-step-up-auth\")\n+    URI websocketAuthCtxUri;\n+\n+    @Inject\n+    Vertx vertx;\n+\n+    @Test\n+    public void testMethodLevelAuthCtxNoRbac() {\n+        // anonymous, no RBAC annotations on endpoint but acr required -> fail\n+        RestAssured.given()\n+                .when().get(\"/step-up-auth/method-level/no-rbac-annotation\")\n+                .then().statusCode(401);\n+        // no acr -> fail\n+        stepUpMethodLevelRequest(Set.of(), \"no-rbac-annotation\").statusCode(401);\n+        // wrong single acr -> fail\n+        stepUpMethodLevelRequest(Set.of(\"3\"), \"no-rbac-annotation\").statusCode(401);\n+        // wrong multiple acr -> fail\n+        stepUpMethodLevelRequest(Set.of(\"3\", \"4\"), \"no-rbac-annotation\").statusCode(401)\n+                .header(\"www-authenticate\", containsString(\"insufficient_user_authentication\"))\n+                .header(\"www-authenticate\", containsString(\"1\"));\n+        // correct acr -> pass\n+        stepUpMethodLevelRequest(Set.of(\"1\"), \"no-rbac-annotation\").statusCode(200).body(is(\"no-rbac-annotation\"));\n+    }\n+\n+    @Test\n+    public void testLocalTokenVerification() {\n+        // anonymous, no RBAC annotations on endpoint but acr required -> fail\n+        RestAssured.given()\n+                .when().get(\"/tenant-ann-no-oidc-server-step-up-auth\")\n+                .then().statusCode(401);\n+        Function<Set<String>, ValidatableResponse> request = acrValues -> RestAssured\n+                .given()\n+                .auth().oauth2(getAccessTokenVerifiedWithoutOidcServer(acrValues))\n+                .when().get(\"/tenant-ann-no-oidc-server-step-up-auth\")\n+                .then();\n+        // no acr -> fail\n+        request.apply(Set.of()).statusCode(401);\n+        // wrong single acr -> fail\n+        request.apply(Set.of(\"3\")).statusCode(401);\n+        // wrong multiple acr -> fail\n+        request.apply(Set.of(\"3\", \"4\")).statusCode(401)\n+                .header(\"www-authenticate\", containsString(\"insufficient_user_authentication\"))\n+                .header(\"www-authenticate\", containsString(\"1\"));\n+        // correct acr -> pass\n+        request.apply(Set.of(\"1\")).statusCode(200).body(is(\"/tenant-ann-no-oidc-server-step-up-auth\"));\n+    }\n+\n+    @Test\n+    public void testClassLevelAuthCtxNoRbac() {\n+        // anonymous, no RBAC annotations on endpoint but acr required -> fail\n+        RestAssured.given()\n+                .when().get(\"/step-up-auth/class-level/no-rbac-annotation\")\n+                .then().statusCode(401);\n+        // no acr -> fail\n+        stepUpClassLevelRequest(Set.of(), \"no-rbac-annotation\").statusCode(401);\n+        // wrong single acr -> fail\n+        stepUpClassLevelRequest(Set.of(\"3\"), \"no-rbac-annotation\").statusCode(401);\n+        // wrong multiple acr -> fail\n+        stepUpClassLevelRequest(Set.of(\"3\", \"4\"), \"no-rbac-annotation\").statusCode(401);\n+        // correct acr -> pass\n+        stepUpClassLevelRequest(Set.of(\"2\"), \"no-rbac-annotation\").statusCode(200).body(is(\"no-rbac-annotation\"));\n+    }\n+\n+    @Test\n+    public void testMethodLevelAuthCtxRolesAllowed() {\n+        // no acr -> fail\n+        stepUpMethodLevelRequest(Set.of(), \"user-role\").statusCode(401);\n+        // wrong single acr -> fail\n+        stepUpMethodLevelRequest(Set.of(\"1\"), \"user-role\").statusCode(401);\n+        // wrong multiple acr -> fail\n+        stepUpMethodLevelRequest(Set.of(\"1\", \"4\"), \"user-role\").statusCode(401)\n+                .header(\"www-authenticate\", containsString(\"insufficient_user_authentication\"))\n+                .header(\"www-authenticate\", containsString(\"3\"));\n+        // correct acr & wrong role -> fail\n+        stepUpMethodLevelRequest(Set.of(\"3\"), \"admin-role\").statusCode(403);\n+        // correct acr & correct role -> pass\n+        stepUpMethodLevelRequest(Set.of(\"3\"), \"user-role\").statusCode(200).body(is(\"user-role\"));\n+    }\n+\n+    @Test\n+    public void testMethodLevelAuthTenantAnnotationSelection() {\n+        // wrong acr & correct tenant -> fail\n+        RestAssured.given()\n+                .auth().oauth2(getAccessToken(Set.of(\"3\")))\n+                .when().get(\"/tenant-ann-step-up-auth/bearer-step-up-auth-1\")\n+                .then()\n+                .statusCode(401);\n+        // correct acr & tenant -> pass\n+        RestAssured.given()\n+                .auth().oauth2(getAccessToken(Set.of(\"6\")))\n+                .when().get(\"/tenant-ann-step-up-auth/bearer-step-up-auth-1\")\n+                .then()\n+                .statusCode(200)\n+                .body(is(\"step-up-auth-annotation-selection\"));\n+        // correct acr & second tenant -> pass\n+        RestAssured.given()\n+                .auth().oauth2(getAccessToken(Set.of(\"6\")))\n+                .when().get(\"/tenant-ann-step-up-auth/bearer-step-up-auth-2\")\n+                .then()\n+                .statusCode(200)\n+                .body(is(\"step-up-auth-annotation-selection-2\"));\n+    }\n+\n+    @Test\n+    public void testClassLevelAuthCtxRolesAllowed() {\n+        // no acr -> fail\n+        stepUpClassLevelRequest(Set.of(), \"user-role\").statusCode(401);\n+        // wrong single acr -> fail\n+        stepUpClassLevelRequest(Set.of(\"1\"), \"user-role\").statusCode(401);\n+        // wrong multiple acr -> fail\n+        stepUpClassLevelRequest(Set.of(\"1\", \"4\"), \"user-role\").statusCode(401);\n+        // correct acr & wrong role -> fail\n+        stepUpClassLevelRequest(Set.of(\"2\"), \"admin-role\").statusCode(403);\n+        // correct acr & correct role -> pass\n+        stepUpClassLevelRequest(Set.of(\"2\"), \"user-role\").statusCode(200).body(is(\"user-role\"));\n+    }\n+\n+    @Test\n+    public void testMethodLevelMultipleAcrsRequired() {\n+        // no acr -> fail\n+        stepUpMethodLevelRequest(Set.of(), \"multiple-acr-required\").statusCode(401);\n+        // wrong single acr -> fail\n+        stepUpMethodLevelRequest(Set.of(\"4\"), \"multiple-acr-required\").statusCode(401);\n+        // wrong multiple acr -> fail\n+        stepUpMethodLevelRequest(Set.of(\"4\", \"5\"), \"multiple-acr-required\").statusCode(401)\n+                .header(\"www-authenticate\", containsString(\"insufficient_user_authentication\"))\n+                .header(\"www-authenticate\", containsString(\"1\"))\n+                .header(\"www-authenticate\", containsString(\"2\"))\n+                .header(\"www-authenticate\", containsString(\"3\"));\n+        // one wrong, one correct acr -> fail\n+        stepUpMethodLevelRequest(Set.of(\"1\", \"4\"), \"multiple-acr-required\").statusCode(401);\n+        // one wrong, two correct acrs -> fail\n+        stepUpMethodLevelRequest(Set.of(\"1\", \"2\", \"4\"), \"multiple-acr-required\").statusCode(401);\n+        // correct acrs -> pass\n+        stepUpMethodLevelRequest(Set.of(\"1\", \"2\", \"3\"), \"multiple-acr-required\").statusCode(200)\n+                .body(is(\"multiple-acr-required\"));\n+        // correct acrs & an irrelevant extra acr -> pass\n+        stepUpMethodLevelRequest(Set.of(\"1\", \"2\", \"3\", \"4\"), \"multiple-acr-required\").statusCode(200)\n+                .body(is(\"multiple-acr-required\"));\n+    }\n+\n+    @Test\n+    public void testWebSocketsClassLevelAuthContextAnnotation()\n+            throws ExecutionException, InterruptedException, TimeoutException {\n+        // wrong acr -> fail\n+        String wrongToken = getAccessToken(Set.of(\"3\"));\n+        Assertions.assertThrows(RuntimeException.class, () -> callWebSocketEndpoint(wrongToken, true));\n+        // correct acr -> pass\n+        String correctToken = getAccessToken(Set.of(\"7\"));\n+        callWebSocketEndpoint(correctToken, false);\n+    }\n+\n+    @Test\n+    public void testMaxAgeAndAcrRequired() {\n+        // no auth_time claim && no acr -> fail\n+        stepUpMethodLevelRequest(null, \"max-age-and-acr-required\").statusCode(401)\n+                .header(\"www-authenticate\", containsString(\"insufficient_user_authentication\"))\n+                .header(\"www-authenticate\", containsString(\"max_age\"))\n+                .header(\"www-authenticate\", containsString(\"120\"))\n+                .header(\"www-authenticate\", containsString(\"acr_values\"))\n+                .header(\"www-authenticate\", containsString(\"myACR\"));\n+        // no auth_time claim but iat is correct and acr is correct -> pass\n+        stepUpMethodLevelRequest(Set.of(\"myACR\"), \"max-age-and-acr-required\").statusCode(200)\n+                .body(is(\"max-age-and-acr-required\"));\n+        // correct acr but (auth_time + max_age < now) -> fail\n+        stepUpMethodLevelRequest(Set.of(\"myACR\"), \"max-age-and-acr-required\", 123L).statusCode(401)\n+                .header(\"www-authenticate\", containsString(\"insufficient_user_authentication\"))\n+                .header(\"www-authenticate\", containsString(\"max_age\"))\n+                .header(\"www-authenticate\", containsString(\"120\"))\n+                .header(\"www-authenticate\", containsString(\"acr_values\"))\n+                .header(\"www-authenticate\", containsString(\"myACR\"));\n+        // correct expires at (auth_time + max_age > now) but wrong acr -> fail\n+        final long nowSecs = System.currentTimeMillis() / 1000;\n+        stepUpMethodLevelRequest(Set.of(\"wrongACR\"), \"max-age-and-acr-required\", nowSecs).statusCode(401)\n+                .header(\"www-authenticate\", containsString(\"insufficient_user_authentication\"))\n+                .header(\"www-authenticate\", containsString(\"max_age\"))\n+                .header(\"www-authenticate\", containsString(\"120\"))\n+                .header(\"www-authenticate\", containsString(\"acr_values\"))\n+                .header(\"www-authenticate\", containsString(\"myACR\"));\n+        // correct acr but (auth_time + max_age > now) -> pass\n+        stepUpMethodLevelRequest(Set.of(\"myACR\"), \"max-age-and-acr-required\", nowSecs).statusCode(200)\n+                .body(is(\"max-age-and-acr-required\"));\n+    }\n+\n+    private static ValidatableResponse stepUpMethodLevelRequest(Set<String> acrValues, String path) {\n+        return stepUpMethodLevelRequest(acrValues, path, null);\n+    }\n+\n+    private static ValidatableResponse stepUpMethodLevelRequest(Set<String> acrValues, String path,\n+            Long authTime) {\n+        return stepUpRequest(acrValues, \"method\", path, authTime);\n+    }\n+\n+    private static ValidatableResponse stepUpClassLevelRequest(Set<String> acrValues, String path) {\n+        return stepUpRequest(acrValues, \"class\", path, null);\n+    }\n+\n+    private static ValidatableResponse stepUpRequest(Set<String> acrValues, String level, String path,\n+            Long authTime) {\n+        return RestAssured.given()\n+                .auth().oauth2(getAccessTokenVerifiedWithOidcServer(acrValues, authTime))\n+                .when().get(\"/step-up-auth/\" + level + \"-level/\" + path)\n+                .then();\n+    }\n+\n+    private static String getAccessToken(Set<String> acrValues) {\n+        return getAccessTokenVerifiedWithOidcServer(acrValues, null);\n+    }\n+\n+    static String getAccessTokenWithAcr(Set<String> acrValues) {\n+        return getAccessTokenVerifiedWithOidcServer(acrValues, null);\n+    }\n+\n+    private static String getAccessTokenVerifiedWithOidcServer(Set<String> acrValues, Long authTime) {\n+        // get access token from simple OIDC resource\n+        String json = RestAssured\n+                .given()\n+                .queryParam(\"auth_time\", authTime == null ? \"\" : Long.toString(authTime))\n+                .queryParam(\"acr\", acrValues == null ? \"\" : String.join(\",\", acrValues))\n+                .when()\n+                .post(\"/oidc/accesstoken-with-acr\")\n+                .body().asString();\n+        JsonObject object = new JsonObject(json);\n+        return object.getString(\"access_token\");\n+    }\n+\n+    private static String getAccessTokenVerifiedWithoutOidcServer(Set<String> acrValues) {\n+        var jwtBuilder = Jwt.claim(\"scope\", \"read:data\").preferredUserName(\"alice\").issuer(\"acceptable-issuer\");\n+        if (acrValues != null) {\n+            jwtBuilder.claim(Claims.acr, acrValues);\n+        }\n+        return jwtBuilder.sign();\n+    }\n+\n+    private void callWebSocketEndpoint(String token, boolean expectFailure)\n+            throws InterruptedException, ExecutionException, TimeoutException {\n+        CountDownLatch connectedLatch = new CountDownLatch(1);\n+        CountDownLatch messagesLatch = new CountDownLatch(2);\n+        List<String> messages = new CopyOnWriteArrayList<>();\n+        AtomicReference<io.vertx.core.http.WebSocket> ws1 = new AtomicReference<>();\n+        WebSocketClient client = vertx.createWebSocketClient();\n+        WebSocketConnectOptions options = new WebSocketConnectOptions();\n+        options.setHost(websocketAuthCtxUri.getHost());\n+        options.setPort(websocketAuthCtxUri.getPort());\n+        options.setURI(websocketAuthCtxUri.getPath());\n+        if (token != null) {\n+            options.addHeader(HttpHeaders.AUTHORIZATION.toString(), \"Bearer \" + token);\n+        }\n+        AtomicReference<Throwable> throwable = new AtomicReference<>();\n+        try {\n+            client\n+                    .connect(options)\n+                    .onComplete(r -> {\n+                        if (r.succeeded()) {\n+                            io.vertx.core.http.WebSocket ws = r.result();\n+                            ws.textMessageHandler(msg -> {\n+                                messages.add(msg);\n+                                messagesLatch.countDown();\n+                            });\n+                            // We will use this socket to write a message later on\n+                            ws1.set(ws);\n+                            connectedLatch.countDown();\n+                        } else {\n+                            throwable.set(r.cause());\n+                        }\n+                    });\n+            if (expectFailure) {\n+                Awaitility.await().atMost(5, TimeUnit.SECONDS).until(() -> throwable.get() != null);\n+                throw new RuntimeException(throwable.get());\n+            } else {\n+                Assertions.assertTrue(connectedLatch.await(5, TimeUnit.SECONDS));\n+                ws1.get().writeTextMessage(\"hello\");\n+                Assertions.assertTrue(messagesLatch.await(5, TimeUnit.SECONDS), \"Messages: \" + messages);\n+                Assertions.assertEquals(2, messages.size(), \"Messages: \" + messages);\n+                Assertions.assertEquals(\"ready\", messages.get(0));\n+                Assertions.assertEquals(\"step-up-auth-annotation-selection echo: hello\", messages.get(1));\n+            }\n+        } finally {\n+            client.close().toCompletionStage().toCompletableFuture().get(5, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @Tenant(\"tenant-public-key\")\n+    @Path(\"/tenant-ann-no-oidc-server-step-up-auth\")\n+    public static class TenantAnnotationNoOidcServerStepUpAuthResource {\n+        @GET\n+        @AuthenticationContext(\"1\")\n+        public String noRbacAnnotationMethodLevel() {\n+            return \"/tenant-ann-no-oidc-server-step-up-auth\";\n+        }\n+    }\n+\n+    @Path(\"/step-up-auth/method-level\")\n+    public static class StepUpAuthMethodLevelResource {\n+\n+        @GET\n+        @AuthenticationContext(\"1\")\n+        @Path(\"no-rbac-annotation\")\n+        public String noRbacAnnotationMethodLevel() {\n+            return \"no-rbac-annotation\";\n+        }\n+\n+        @GET\n+        @AuthenticationContext(\"3\")\n+        @RolesAllowed(\"user\")\n+        @Path(\"user-role\")\n+        public String userRoleMethodLevel() {\n+            return \"user-role\";\n+        }\n+\n+        @GET\n+        @AuthenticationContext(\"3\")\n+        @RolesAllowed(\"admin\")\n+        @Path(\"admin-role\")\n+        public String adminRoleMethodLevel() {\n+            return \"admin-role\";\n+        }\n+\n+        @GET\n+        @AuthenticationContext({ \"1\", \"2\", \"3\" })\n+        @Path(\"multiple-acr-required\")\n+        public String multipleAcrRequiredMethodLevel() {\n+            return \"multiple-acr-required\";\n+        }\n+\n+        @GET\n+        @AuthenticationContext(maxAge = \"PT120s\", value = \"myACR\")\n+        @Path(\"max-age-and-acr-required\")\n+        public String maxAgeAndAcrRequired() {\n+            return \"max-age-and-acr-required\";\n+        }\n+    }\n+\n+    @Path(\"/tenant-ann-step-up-auth\")\n+    public static class TenantAnnotationStepUpAuthResource {\n+\n+        @Inject\n+        RoutingContext routingContext;\n+\n+        @Tenant(\"step-up-auth-annotation-selection\")\n+        @AuthenticationContext(\"6\")\n+        @GET\n+        @Path(\"/bearer-step-up-auth-1\")\n+        public String firstTenantSelectedMethodLevel() {\n+            return getTenantId();\n+        }\n+\n+        @Tenant(\"step-up-auth-annotation-selection-2\")\n+        @AuthenticationContext(\"6\")\n+        @GET\n+        @Path(\"/bearer-step-up-auth-2\")\n+        public String secondTenantSelectedMethodLevel() {\n+            return getTenantId();\n+        }\n+\n+        private String getTenantId() {\n+            OidcTenantConfig tenantConfig = routingContext.get(OidcTenantConfig.class.getName());\n+            return tenantConfig.tenantId().get();\n+        }\n+\n+    }\n+\n+    @AuthenticationContext(\"2\")\n+    @Path(\"/step-up-auth/class-level\")\n+    public static class StepUpAuthClassLevelResource {\n+\n+        @GET\n+        @Path(\"no-rbac-annotation\")\n+        public String noRbacAnnotationMethodLevel() {\n+            return \"no-rbac-annotation\";\n+        }\n+\n+        @GET\n+        @RolesAllowed(\"user\")\n+        @Path(\"user-role\")\n+        public String userRoleMethodLevel() {\n+            return \"user-role\";\n+        }\n+\n+        @GET\n+        @RolesAllowed(\"admin\")\n+        @Path(\"admin-role\")\n+        public String adminRoleMethodLevel() {\n+            return \"admin-role\";\n+        }\n+    }\n+\n+    @AuthenticationContext(\"7\")\n+    @Tenant(\"step-up-auth-annotation-selection\")\n+    @WebSocket(path = \"/ws/tenant-annotation/bearer-step-up-auth\")\n+    public static class WebSocketEndpointWithTenantAnnotationAndAuthCtx {\n+\n+        @OnOpen\n+        String open() {\n+            return \"ready\";\n+        }\n+\n+        @OnTextMessage\n+        String echo(String message) {\n+            return \"step-up-auth-annotation-selection echo: \" + message;\n+        }\n+\n+    }\n+\n+    public static class StepUpAuthTestProfile implements QuarkusTestProfile {\n+        @Override\n+        public String getConfigProfile() {\n+            return \"step-up-auth\";\n+        }\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47439",
    "pr_id": 47439,
    "issue_id": 47437,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Multi persistence units  are all marked with defaultBean in quarkus hibernate orm\n### Describe the bug\n\nI have the following in the application.properties\n```\nquarkus.datasource.db-kind=${cq.sqlJdbcKind:h2}\nquarkus.hibernate-orm.database.generation=drop-and-create\nquarkus.hibernate-orm.packages=org.apache.camel.quarkus.component.jpa.it.model,org.apache.camel.processor.idempotent.jpa\n\n\nquarkus.datasource.\"test\".db-kind=${cq.sqlJdbcKind:h2}\nquarkus.datasource.\"test\".jdbc.max-size=8\n\nquarkus.hibernate-orm.\"test\".packages=org.acme\nquarkus.hibernate-orm.\"test\".datasource=test\nquarkus.hibernate-orm.\"test\".database.generation=drop-and-create\n\n```\n\nWhen the camel-jpa is looking up the default bean with `jakarta.persistence.EntityManagerFactory`. All of them are returning. It seems that all the PU are marked with defautBean. see the following codes\nhttps://github.com/quarkusio/quarkus/blob/fb596fb9d37ae343e1eb87c09fc69da62e963b77/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmCdiProcessor.java#L220-L237\n\n### Expected behavior\n\n_No response_\n\n### Actual behavior\n\n_No response_\n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### Quarkus version or git rev\n\n_No response_\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
    "issue_word_count": 199,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmCdiProcessor.java",
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsCdiStatelessSessionTest.java"
    ],
    "pr_changed_test_files": [
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsCdiStatelessSessionTest.java"
    ],
    "base_commit": "86aa614c7df8aeb0bdef975f1a7d5df280b694d0",
    "head_commit": "1f1036e919270d100d66762ff8ab82cc2bfeec62",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47439",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47439",
    "dockerfile": "",
    "pr_merged_at": "2025-04-18T15:24:37.000Z",
    "patch": "diff --git a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmCdiProcessor.java b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmCdiProcessor.java\nindex 38739260d1652..48130d3b71c8f 100644\n--- a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmCdiProcessor.java\n+++ b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmCdiProcessor.java\n@@ -246,7 +246,7 @@ void generateDataSourceBeans(HibernateOrmRecorder recorder,\n \n             syntheticBeanBuildItemBuildProducer\n                     .produce(createSyntheticBean(persistenceUnitName,\n-                            true, true,\n+                            isDefaultPU, isNamedPU,\n                             StatelessSession.class, STATELESS_SESSION_EXPOSED_TYPES, false)\n                             .createWith(recorder.statelessSessionSupplier(persistenceUnitName))\n                             .addInjectionPoint(ClassType.create(DotName.createSimple(TransactionSessions.class)))\n",
    "test_patch": "diff --git a/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsCdiStatelessSessionTest.java b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsCdiStatelessSessionTest.java\nnew file mode 100644\nindex 0000000000000..a9ee5577787c8\n--- /dev/null\n+++ b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsCdiStatelessSessionTest.java\n@@ -0,0 +1,76 @@\n+package io.quarkus.hibernate.orm.multiplepersistenceunits;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import jakarta.inject.Inject;\n+import jakarta.transaction.Transactional;\n+\n+import org.hibernate.StatelessSession;\n+import org.hibernate.UnknownEntityTypeException;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.hibernate.orm.PersistenceUnit;\n+import io.quarkus.hibernate.orm.multiplepersistenceunits.model.config.DefaultEntity;\n+import io.quarkus.hibernate.orm.multiplepersistenceunits.model.config.inventory.Plane;\n+import io.quarkus.hibernate.orm.multiplepersistenceunits.model.config.user.User;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class MultiplePersistenceUnitsCdiStatelessSessionTest {\n+\n+    @RegisterExtension\n+    static QuarkusUnitTest runner = new QuarkusUnitTest()\n+            .withApplicationRoot((jar) -> jar\n+                    .addClass(DefaultEntity.class)\n+                    .addClass(User.class)\n+                    .addClass(Plane.class)\n+                    .addAsResource(\"application-multiple-persistence-units.properties\", \"application.properties\"));\n+\n+    @Inject\n+    StatelessSession defaultSession;\n+\n+    @Inject\n+    @PersistenceUnit(\"users\")\n+    StatelessSession usersSession;\n+\n+    @Inject\n+    @PersistenceUnit(\"inventory\")\n+    StatelessSession inventorySession;\n+\n+    @Test\n+    @Transactional\n+    public void defaultEntityManagerInTransaction() {\n+        DefaultEntity defaultEntity = new DefaultEntity(\"default\");\n+        defaultSession.insert(defaultEntity);\n+\n+        DefaultEntity savedDefaultEntity = defaultSession.get(DefaultEntity.class, defaultEntity.getId());\n+        assertEquals(defaultEntity.getName(), savedDefaultEntity.getName());\n+    }\n+\n+    @Transactional\n+    public void usersEntityManagerInTransaction() {\n+        User user = new User(\"gsmet\");\n+        usersSession.insert(user);\n+\n+        User savedUser = usersSession.get(User.class, user.getId());\n+        assertEquals(user.getName(), savedUser.getName());\n+    }\n+\n+    @Test\n+    @Transactional\n+    public void inventoryEntityManagerInTransaction() {\n+        Plane plane = new Plane(\"Airbus A380\");\n+        inventorySession.insert(plane);\n+\n+        Plane savedPlane = inventorySession.get(Plane.class, plane.getId());\n+        assertEquals(plane.getName(), savedPlane.getName());\n+    }\n+\n+    @Test\n+    @Transactional\n+    public void testUserInInventorySession() {\n+        User user = new User(\"gsmet\");\n+        assertThatThrownBy(() -> inventorySession.insert(user)).isInstanceOf(UnknownEntityTypeException.class);\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47435",
    "pr_id": 47435,
    "issue_id": 47337,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Stork related classes initialized in Quarkus 3.20 with rest client\n### Describe the bug\n\nStork related classes (io/quarkus/runner/recorded/SmallRyeStorkProcessor) are initialized in Quarkus 3.20 application with rest client, while stork is not being used\n\nI was playing with new AsyncProfiler 4 and noticed that Quarkus 3.20 has Stork related classes in CPU FlameGraph. I was using https://github.com/quarkus-qe/quarkus-startstop/blob/main/app-full-microprofile/pom.xml application\n\nI didn't see Stork related classes when using Quarkus 3.15.4 or 3.21.2. Quarkus 3.20 is LTS, thus reporting the issue.\n\n![Image](https://github.com/user-attachments/assets/f02e9639-d38f-4f60-a96b-b470c80ec73b)\n\n<img src=\"https://github.com/user-attachments/assets/3a757792-fd42-47ef-94c4-d57587ba1168\" width=\"400\">\n\n### Expected behavior\n\nNo Stork related classes get initialized as it's not actively used\n\n### Actual behavior\n\nStork classes get initialized\n\n### How to Reproduce?\n\n```bash\ngit clone https://github.com/quarkus-qe/quarkus-startstop\n\nwget https://github.com/async-profiler/async-profiler/releases/download/v4.0/async-profiler-4.0-macos.zip\nunzip -q async-profiler-4.0-macos.zip\nASYNC_PROFILER=$PWD/async-profiler-4.0-macos\n```\n```bash\nbuild () {\n  QUARKUS_VERSION=$1\n  mvn clean package -f /Users/rsvoboda/git/quarkus-startstop/app-full-microprofile -Dquarkus.version=${QUARKUS_VERSION}\n  rm -rf quarkus-app-${QUARKUS_VERSION}\n  mv /Users/rsvoboda/git/quarkus-startstop/app-full-microprofile/target/quarkus-app quarkus-app-${QUARKUS_VERSION}\n}\nstartupCPU () {\n  QUARKUS_VERSION=$1\n  java -agentpath:${ASYNC_PROFILER}/lib/libasyncProfiler.dylib=start,event=cpu,file=startup-profile-cpu-${QUARKUS_VERSION}.html -jar quarkus-app-${QUARKUS_VERSION}/quarkus-run.jar &\n  PID=$!\n  sleep 3 && kill $PID\n}\n```\n```bash\nbuild 3.20.0\nstartupCPU 3.20.0\n\nbuild 3.15.4\nstartupCPU 3.15.4\n\nbuild 3.21.2\nstartupCPU 3.21.2\n\nopen startup*.html\n```\n\n### Output of `uname -a` or `ver`\n\nmacOS\n\n### Output of `java -version`\n\nJava 21\n\n### Quarkus version or git rev\n\nQuarkus 3.20.0\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
    "issue_word_count": 330,
    "test_files_count": 2,
    "non_test_files_count": 10,
    "pr_changed_files": [
      "core/deployment/src/main/java/io/quarkus/deployment/Capability.java",
      "docs/src/main/asciidoc/stork-kubernetes.adoc",
      "docs/src/main/asciidoc/stork.adoc",
      "extensions/micrometer/deployment/pom.xml",
      "extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java",
      "extensions/resteasy-reactive/rest-client/deployment/pom.xml",
      "extensions/resteasy-reactive/rest-client/runtime/pom.xml",
      "extensions/smallrye-stork/runtime/pom.xml",
      "independent-projects/resteasy-reactive/client/runtime/pom.xml",
      "independent-projects/resteasy-reactive/client/runtime/src/main/java/org/jboss/resteasy/reactive/client/impl/StorkClientRequestFilter.java",
      "integration-tests/rest-client-reactive-stork/pom.xml",
      "integration-tests/smallrye-stork-registration/pom.xml"
    ],
    "pr_changed_test_files": [
      "integration-tests/rest-client-reactive-stork/pom.xml",
      "integration-tests/smallrye-stork-registration/pom.xml"
    ],
    "base_commit": "2f397be366838491d8dab06f1cfad2211037b899",
    "head_commit": "70ac69520d258e4db7a272e6a763bf136b827dae",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47435",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47435",
    "dockerfile": "",
    "pr_merged_at": "2025-04-22T12:54:38.000Z",
    "patch": "diff --git a/core/deployment/src/main/java/io/quarkus/deployment/Capability.java b/core/deployment/src/main/java/io/quarkus/deployment/Capability.java\nindex 27a7d5d81b437..87be9f42852fe 100644\n--- a/core/deployment/src/main/java/io/quarkus/deployment/Capability.java\n+++ b/core/deployment/src/main/java/io/quarkus/deployment/Capability.java\n@@ -127,6 +127,7 @@ public interface Capability {\n     String SMALLRYE_OPENAPI = QUARKUS_PREFIX + \".smallrye.openapi\";\n     String SMALLRYE_GRAPHQL = QUARKUS_PREFIX + \".smallrye.graphql\";\n     String SMALLRYE_FAULT_TOLERANCE = QUARKUS_PREFIX + \".smallrye.faulttolerance\";\n+    String SMALLRYE_STORK = QUARKUS_PREFIX + \".smallrye.stork\";\n \n     String SPRING_WEB = QUARKUS_PREFIX + \".spring.web\";\n \n\ndiff --git a/docs/src/main/asciidoc/stork-kubernetes.adoc b/docs/src/main/asciidoc/stork-kubernetes.adoc\nindex b841e3da93484..d39d50af50640 100644\n--- a/docs/src/main/asciidoc/stork-kubernetes.adoc\n+++ b/docs/src/main/asciidoc/stork-kubernetes.adoc\n@@ -61,10 +61,10 @@ The various integrations in Quarkus extract the location of the service from tha\n \n == Bootstrapping the project\n \n-Create a Quarkus project importing the quarkus-rest-client and quarkus-rest extensions using your favorite approach:\n+Create a Quarkus project importing the quarkus-rest-client, quarkus-rest, and quarkus-smallrye-stork extensions using your favorite approach:\n \n :create-app-artifact-id: stork-kubernetes-quickstart\n-:create-app-extensions: quarkus-rest-client,quarkus-rest\n+:create-app-extensions: quarkus-rest-client,quarkus-rest,quarkus-smallrye-stork\n include::{includes}/devtools/create-app.adoc[]\n \n In the generated project, also add the following dependencies:\n\ndiff --git a/docs/src/main/asciidoc/stork.adoc b/docs/src/main/asciidoc/stork.adoc\nindex 5f2fe9e2329e7..baa0ce402cb90 100644\n--- a/docs/src/main/asciidoc/stork.adoc\n+++ b/docs/src/main/asciidoc/stork.adoc\n@@ -70,10 +70,10 @@ image::stork-process.png[Discovery and Selection of services,width=50%, align=ce\n \n == Bootstrapping the project\n \n-Create a Quarkus project importing the quarkus-rest-client and quarkus-rest extensions using your favorite approach:\n+Create a Quarkus project importing the quarkus-rest-client, quarkus-rest, and quarkus-smallrye-stork extensions using your favorite approach:\n \n :create-app-artifact-id: stork-quickstart\n-:create-app-extensions: quarkus-rest-client,quarkus-rest\n+:create-app-extensions: quarkus-rest-client,quarkus-rest,quarkus-smallrye-stork\n include::{includes}/devtools/create-app.adoc[]\n \n In the generated project, also add the following dependencies:\n\ndiff --git a/extensions/micrometer/deployment/pom.xml b/extensions/micrometer/deployment/pom.xml\nindex d91b14055188d..cf381f90c8470 100644\n--- a/extensions/micrometer/deployment/pom.xml\n+++ b/extensions/micrometer/deployment/pom.xml\n@@ -91,6 +91,12 @@\n             <scope>test</scope>\n         </dependency>\n \n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-smallrye-stork-deployment</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+\n         <dependency>\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-rest-jackson-deployment</artifactId>\n\ndiff --git a/extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java b/extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java\nindex 96ff4bd1d5c4a..d995dd3c83a03 100644\n--- a/extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java\n+++ b/extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java\n@@ -259,9 +259,14 @@ void initializeRuntimeInitializedClasses(BuildProducer<RuntimeInitializedClassBu\n     }\n \n     @BuildStep\n-    void initializeStorkFilter(BuildProducer<AdditionalBeanBuildItem> additionalBeans,\n+    void initializeStorkFilter(Capabilities capabilities,\n+            BuildProducer<AdditionalBeanBuildItem> additionalBeans,\n             BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n             BuildProducer<AdditionalIndexedClassesBuildItem> additionalIndexedClassesBuildItem) {\n+        if (!capabilities.isPresent(Capability.SMALLRYE_STORK)) {\n+            return;\n+        }\n+\n         additionalBeans.produce(AdditionalBeanBuildItem.unremovableOf(StorkClientRequestFilter.class));\n         additionalIndexedClassesBuildItem\n                 .produce(new AdditionalIndexedClassesBuildItem(StorkClientRequestFilter.class.getName()));\n\ndiff --git a/extensions/resteasy-reactive/rest-client/deployment/pom.xml b/extensions/resteasy-reactive/rest-client/deployment/pom.xml\nindex d0a49dc0fc3d9..cbed3dd2a3de7 100644\n--- a/extensions/resteasy-reactive/rest-client/deployment/pom.xml\n+++ b/extensions/resteasy-reactive/rest-client/deployment/pom.xml\n@@ -24,10 +24,6 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-rest-client-jaxrs-deployment</artifactId>\n         </dependency>\n-        <dependency>\n-            <groupId>io.quarkus</groupId>\n-            <artifactId>quarkus-smallrye-stork-deployment</artifactId>\n-        </dependency>\n         <dependency>\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-rest-client-config-deployment</artifactId>\n@@ -101,6 +97,11 @@\n             <artifactId>stork-load-balancer-least-response-time</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-smallrye-stork-deployment</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n         <dependency>\n             <groupId>io.smallrye.stork</groupId>\n             <artifactId>stork-service-discovery-static-list</artifactId>\n\ndiff --git a/extensions/resteasy-reactive/rest-client/runtime/pom.xml b/extensions/resteasy-reactive/rest-client/runtime/pom.xml\nindex 17d8aff738006..531aa0c4d327a 100644\n--- a/extensions/resteasy-reactive/rest-client/runtime/pom.xml\n+++ b/extensions/resteasy-reactive/rest-client/runtime/pom.xml\n@@ -18,10 +18,6 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-rest-client-jaxrs</artifactId>\n         </dependency>\n-        <dependency>\n-            <groupId>io.quarkus</groupId>\n-            <artifactId>quarkus-smallrye-stork</artifactId>\n-        </dependency>\n         <dependency>\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-rest-client-config</artifactId>\n@@ -30,14 +26,6 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-tls-registry</artifactId>\n         </dependency>\n-        <dependency>\n-            <groupId>io.smallrye.stork</groupId>\n-            <artifactId>stork-api</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>io.smallrye.stork</groupId>\n-            <artifactId>stork-core</artifactId>\n-        </dependency>\n         <dependency>\n             <groupId>org.eclipse.microprofile.rest.client</groupId>\n             <artifactId>microprofile-rest-client-api</artifactId>\n\ndiff --git a/extensions/smallrye-stork/runtime/pom.xml b/extensions/smallrye-stork/runtime/pom.xml\nindex e39c5d036c008..e8ce7252ecfeb 100644\n--- a/extensions/smallrye-stork/runtime/pom.xml\n+++ b/extensions/smallrye-stork/runtime/pom.xml\n@@ -41,6 +41,11 @@\n             <plugin>\n                 <groupId>io.quarkus</groupId>\n                 <artifactId>quarkus-extension-maven-plugin</artifactId>\n+                <configuration>\n+                    <capabilities>\n+                        <provides>io.quarkus.smallrye.stork</provides>\n+                    </capabilities>\n+                </configuration>\n             </plugin>\n             <plugin>\n                 <artifactId>maven-compiler-plugin</artifactId>\n\ndiff --git a/independent-projects/resteasy-reactive/client/runtime/pom.xml b/independent-projects/resteasy-reactive/client/runtime/pom.xml\nindex 7c15c528f9071..92e68aeaa6f23 100644\n--- a/independent-projects/resteasy-reactive/client/runtime/pom.xml\n+++ b/independent-projects/resteasy-reactive/client/runtime/pom.xml\n@@ -17,6 +17,11 @@\n         <dependency>\n             <groupId>io.smallrye.stork</groupId>\n             <artifactId>stork-core</artifactId>\n+            <optional>true</optional>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.smallrye.stork</groupId>\n+            <artifactId>stork-api</artifactId>\n         </dependency>\n         <dependency>\n             <groupId>io.quarkus.resteasy.reactive</groupId>\n\ndiff --git a/independent-projects/resteasy-reactive/client/runtime/src/main/java/org/jboss/resteasy/reactive/client/impl/StorkClientRequestFilter.java b/independent-projects/resteasy-reactive/client/runtime/src/main/java/org/jboss/resteasy/reactive/client/impl/StorkClientRequestFilter.java\nindex 92ec1af83341f..ea966459e817a 100644\n--- a/independent-projects/resteasy-reactive/client/runtime/src/main/java/org/jboss/resteasy/reactive/client/impl/StorkClientRequestFilter.java\n+++ b/independent-projects/resteasy-reactive/client/runtime/src/main/java/org/jboss/resteasy/reactive/client/impl/StorkClientRequestFilter.java\n@@ -20,8 +20,25 @@\n @Priority(Priorities.AUTHENTICATION)\n @Provider\n public class StorkClientRequestFilter implements ResteasyReactiveClientRequestFilter {\n+\n     private static final Logger log = Logger.getLogger(StorkClientRequestFilter.class);\n \n+    private final Stork stork;\n+\n+    public StorkClientRequestFilter() {\n+        try {\n+            stork = Stork.getInstance();\n+\n+            if (stork == null) {\n+                throw new IllegalStateException(\n+                        \"Trying to use a StorkClientRequestFilter but the quarkus-smallrye-stork extension is missing, please add the extension.\");\n+            }\n+        } catch (Exception e) {\n+            throw new IllegalStateException(\n+                    \"Trying to use a StorkClientRequestFilter but the quarkus-smallrye-stork extension is missing, please add the extension.\");\n+        }\n+    }\n+\n     @Override\n     public void filter(ResteasyReactiveClientRequestContext requestContext) {\n         URI uri = requestContext.getUri();\n@@ -34,8 +51,7 @@ public void filter(ResteasyReactiveClientRequestContext requestContext) {\n             requestContext.suspend();\n             boolean measureTime = shouldMeasureTime(requestContext.getResponseType());\n             try {\n-                Stork.getInstance()\n-                        .getService(serviceName)\n+                stork.getService(serviceName)\n                         .selectInstanceAndRecordStart(measureTime)\n                         .subscribe()\n                         .with(instance -> {\n",
    "test_patch": "diff --git a/integration-tests/rest-client-reactive-stork/pom.xml b/integration-tests/rest-client-reactive-stork/pom.xml\nindex d2de2b01f1013..b84cee3058bd2 100644\n--- a/integration-tests/rest-client-reactive-stork/pom.xml\n+++ b/integration-tests/rest-client-reactive-stork/pom.xml\n@@ -22,6 +22,10 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-rest-client-jackson</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-smallrye-stork</artifactId>\n+        </dependency>\n         <dependency>\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-rest-jackson</artifactId>\n@@ -93,6 +97,19 @@\n                 </exclusion>\n             </exclusions>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-smallrye-stork-deployment</artifactId>\n+            <version>${project.version}</version>\n+            <type>pom</type>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>*</groupId>\n+                    <artifactId>*</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n         <dependency>\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-vertx-http-deployment</artifactId>\n\ndiff --git a/integration-tests/smallrye-stork-registration/pom.xml b/integration-tests/smallrye-stork-registration/pom.xml\nindex 7e5f1ddf33ae3..a352eb1fd1eae 100644\n--- a/integration-tests/smallrye-stork-registration/pom.xml\n+++ b/integration-tests/smallrye-stork-registration/pom.xml\n@@ -19,7 +19,7 @@\n         </dependency>\n         <dependency>\n             <groupId>io.quarkus</groupId>\n-            <artifactId>quarkus-smallrye-stork-deployment</artifactId>\n+            <artifactId>quarkus-smallrye-stork</artifactId>\n         </dependency>\n         <dependency>\n             <groupId>io.smallrye.stork</groupId>\n@@ -60,6 +60,19 @@\n                 </exclusion>\n             </exclusions>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-smallrye-stork-deployment</artifactId>\n+            <version>${project.version}</version>\n+            <type>pom</type>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>*</groupId>\n+                    <artifactId>*</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n     </dependencies>\n \n     <build>\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47426",
    "pr_id": 47426,
    "issue_id": 47419,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Since 3.22.0CR1 fails ConfigProvider.getConfig() in the JUnit test (called from @MethodSource)\n### Describe the bug\n\nIn Camel-quarkus's test AzureServiceBusTestResource (mocked one), with the upgrade to `3.22.0.CR1`, one test started to fail with the error:\n```\n[ERROR] Errors: \n[ERROR]   AzureServiceBusTest.produceConsumeOptions:359 » ServiceConfiguration io.smallrye.config.SmallRyeConfigFactory: io.quarkus.runtime.configuration.QuarkusConfigFactory not a subtype\n```\nI was able to find the culprit. It is one of the last commits in 3.22.0.CR1 -  https://github.com/quarkusio/quarkus/commit/3c85fe4c847f73cc1588cb9d25b5fcf669d65dc7\n\nI'm not sure, what exactly is causing the issue. But vefore the PR was merged, our test was working, with the PR merged, the test is not working.\n\nHere is my forked branch, where the issue can be reproduced - https://github.com/JiriOndrusek/camel-quarkus/tree/quarkus-configprofile-error-reproducer\n\n\n\n\n### Expected behavior\n\ntest should work with Quarkus 3.22.0CR1 (as was with the older version)\n\n### Actual behavior\n\n-  test is using methodSource - https://github.com/JiriOndrusek/camel-quarkus/blob/quarkus-configprofile-error-reproducer/integration-test-groups/azure/azure-servicebus/src/test/java/org/apache/camel/quarkus/component/azure/servicebus/it/AzureServiceBusTest.java#L355-L380\n- from whic h the VonfigProvider.gtConfig is called - https://github.com/JiriOndrusek/camel-quarkus/blob/quarkus-configprofile-error-reproducer/integration-test-groups/azure/azure-servicebus/src/main/java/org/apache/camel/quarkus/component/azure/servicebus/it/AzureServiceBusHelper.java#L52\n- this call throws an error. \n\n### How to Reproduce?\n\nHow to reproduce:\n\n1. build Quarkus from the wrong commit, build camel-quarkus from my branch (CQ depends on quarkus 999-SNAPSHOT)\n2. run the ~~`integration-tests/azure-grouped/`~~  `integration-test-groups/azure/azure-servicebus/` test module\n3. you should see a failure in `produceConsumeMessage`\nthe test runs with mocked test resource, therefore there is no need to configure anything\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### Quarkus version or git rev\n\n_No response_\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
    "issue_word_count": 335,
    "test_files_count": 3,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "integration-tests/main/src/test/java/io/quarkus/it/main/MethodSourceTest.java",
      "integration-tests/maven/pom.xml",
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/ExecutionListener.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/main/src/test/java/io/quarkus/it/main/MethodSourceTest.java",
      "integration-tests/maven/pom.xml",
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/ExecutionListener.java"
    ],
    "base_commit": "fd4ac9a1cfcc2d98ad1a291b80acbe071e665972",
    "head_commit": "8cd31211a2c1e8d5d8e606bf04734aff0f1c9f0d",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47426",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47426",
    "dockerfile": "",
    "pr_merged_at": "2025-04-22T11:16:09.000Z",
    "patch": "",
    "test_patch": "diff --git a/integration-tests/main/src/test/java/io/quarkus/it/main/MethodSourceTest.java b/integration-tests/main/src/test/java/io/quarkus/it/main/MethodSourceTest.java\nindex c9836ec311839..a0a8cd5f49524 100644\n--- a/integration-tests/main/src/test/java/io/quarkus/it/main/MethodSourceTest.java\n+++ b/integration-tests/main/src/test/java/io/quarkus/it/main/MethodSourceTest.java\n@@ -8,6 +8,7 @@\n \n import jakarta.inject.Inject;\n \n+import org.eclipse.microprofile.config.ConfigProvider;\n import org.hamcrest.CoreMatchers;\n import org.hamcrest.Matcher;\n import org.junit.jupiter.params.ParameterizedTest;\n@@ -28,6 +29,9 @@ public class MethodSourceTest {\n     public void testParameterResolver(UnusedBean.DummyInput dummyInput, Matcher<String> matcher) {\n         UnusedBean.DummyResult dummyResult = unusedBean.dummy(dummyInput);\n         assertThat(dummyResult.getResult(), matcher);\n+\n+        // Can we get config?\n+        ConfigProvider.getConfig();\n     }\n \n     private static Collection<Arguments> provideDummyInput() {\n\ndiff --git a/integration-tests/maven/pom.xml b/integration-tests/maven/pom.xml\nindex 87d3b17ccdf1e..36bae175c560c 100644\n--- a/integration-tests/maven/pom.xml\n+++ b/integration-tests/maven/pom.xml\n@@ -74,6 +74,14 @@\n             <artifactId>quarkus-vertx-http-dev-ui-tests</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <!-- This one is used by the tested projects so we need to create a dependency\n+        to make sure GIB triggers the testing. --> \n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-junit5</artifactId>\n+            <scope>test</scope>\n+            <version>${project.version}</version>\n+        </dependency>\n         <dependency>\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-project-core-extension-codestarts</artifactId>\n\ndiff --git a/test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/ExecutionListener.java b/test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/ExecutionListener.java\nindex d382ce633a659..7a2ef02d9db7e 100644\n--- a/test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/ExecutionListener.java\n+++ b/test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/ExecutionListener.java\n@@ -25,14 +25,12 @@ public void executionStarted(TestIdentifier testIdentifier) {\n         Optional<TestSource> oSource = testIdentifier.getSource();\n         if (oSource.isPresent()) {\n             TestSource source = oSource.get();\n-            if (source instanceof ClassSource) {\n-                ClassSource cs = (ClassSource) source;\n+            if (source instanceof ClassSource cs) {\n                 ClassLoader classLoader = cs.getJavaClass().getClassLoader();\n                 // Only adjust the TCCL in cases where we know the QuarkusTestExtension would be about to do it anyway\n                 // We could check annotations, but that would be slow, and the assumption that only Quarkus Tests are loaded with the quarkus classloader should be a fair one\n                 if (classLoader instanceof QuarkusClassLoader) {\n-                    origCl = Thread.currentThread()\n-                            .getContextClassLoader();\n+                    origCl = Thread.currentThread().getContextClassLoader();\n                     Thread.currentThread().setContextClassLoader(classLoader);\n                 } else {\n                     origCl = null;\n@@ -43,9 +41,15 @@ public void executionStarted(TestIdentifier testIdentifier) {\n \n     @Override\n     public void executionFinished(TestIdentifier testIdentifier, TestExecutionResult result) {\n-        if (origCl != null) {\n-            // If execution is parallel this could be odd, but if execution is parallel any kind of TCCL manipulation will be ill-fated\n-            Thread.currentThread().setContextClassLoader(origCl);\n+        Optional<TestSource> oSource = testIdentifier.getSource();\n+        if (oSource.isPresent()) {\n+            TestSource source = oSource.get();\n+            if (source instanceof ClassSource) {\n+                if (origCl != null) {\n+                    // If execution is parallel this could produce odd results, but if execution is parallel any kind of TCCL manipulation will be ill-fated\n+                    Thread.currentThread().setContextClassLoader(origCl);\n+                }\n+            }\n         }\n     }\n }\n\\ No newline at end of file\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47421",
    "pr_id": 47421,
    "issue_id": 47003,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Instance<T> does not find implementations having a @Context annotated field\n### Describe the bug\n\nWhen iterating over a `Instance<T>`, no implementations of `T` having a `@Context` annotated field are returned.\n\n```\n    @Inject\n    Instance<GreetingGenerator> generators;\n```\n```\nfor (GreetingGenerator generator : generators) {\n            if (generator.handlesLanguage(\"de\")) {\n                return generator.generateGreeting();\n            }\n        }\n```\n\nAnd: \n\n```\n@ApplicationScoped\npublic class GermanGreetingGenerator extends GreetingGenerator {\n\n    @Context\n    HttpHeaders headers;\n```\n\nThe GermanGreetingGenerator  is never found by the for loop.\n\nDirectly injecting and using the GermanGreetingGenerator works as expected,\n\n### Expected behavior\n\nEither a log message about this circumstance. or find the GermanGreetingGenerator.\n\n### Actual behavior\n\nGermanGreetingGenerator is not returned with Instance<T>\n\n### How to Reproduce?\n\nDownload reproducer: \n\n[instance-unremovable.zip](https://github.com/user-attachments/files/19468014/instance-unremovable.zip)\n\nmvn quarkus:dev\nOpen localhost:8080/hello.\nShould display \"Servus\", but instead displays \"Hello\".\nIn GermanGreetingGenerator.java, remove     @Context HttpHeaders headers;\nOpen localhost:8080/hello.\nCorrectly displays now \"Servus\"\n\n### Output of `uname -a` or `ver`\n\nMINGW64_NT-10.0-26100 NANBCHL9NG3 3.3.6-341.x86_64 2022-09-05 20:28 UTC x86_64 Msys\n\n### Output of `java -version`\n\nopenjdk 21.0.5 2024-10-15 LTS OpenJDK Runtime Environment Temurin-21.0.5+11 (build 21.0.5+11-LTS) OpenJDK 64-Bit Server VM Temurin-21.0.5+11 (build 21.0.5+11-LTS, mixed mode, sharing)\n\n### Quarkus version or git rev\n\n3.19.4\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nApache Maven 3.8.8 (4c87b05d9aedce574290d1acc98575ed5eb6cd39) Maven home: C:\\eclipse\\tools\\java\\maven Java version: 21.0.5, vendor: Eclipse Adoptium, runtime: C:\\eclipse\\tools\\java\\21 Default locale: de_DE, platform encoding: UTF-8 OS name: \"windows 11\", version: \"10.0\", arch: \"amd64\", family: \"windows\"\n\n### Additional information\n\n_No response_",
    "issue_word_count": 279,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "extensions/resteasy-reactive/rest/deployment/src/main/java/io/quarkus/resteasy/reactive/server/deployment/ResteasyReactiveProcessor.java",
      "extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/ContextAndInstanceTest.java",
      "independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/EndpointIndexer.java"
    ],
    "pr_changed_test_files": [
      "extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/ContextAndInstanceTest.java"
    ],
    "base_commit": "69e41f6ddbbf61b5a7112cb5fa7715cdd1e56856",
    "head_commit": "458a36096f682455c5505a5631c598df4a800161",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47421",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47421",
    "dockerfile": "",
    "pr_merged_at": "2025-04-18T06:13:18.000Z",
    "patch": "diff --git a/extensions/resteasy-reactive/rest/deployment/src/main/java/io/quarkus/resteasy/reactive/server/deployment/ResteasyReactiveProcessor.java b/extensions/resteasy-reactive/rest/deployment/src/main/java/io/quarkus/resteasy/reactive/server/deployment/ResteasyReactiveProcessor.java\nindex 0e49ab9bd274e..3922ac0500d33 100644\n--- a/extensions/resteasy-reactive/rest/deployment/src/main/java/io/quarkus/resteasy/reactive/server/deployment/ResteasyReactiveProcessor.java\n+++ b/extensions/resteasy-reactive/rest/deployment/src/main/java/io/quarkus/resteasy/reactive/server/deployment/ResteasyReactiveProcessor.java\n@@ -1049,21 +1049,21 @@ private boolean isRecord(IndexView index, DotName name) {\n \n     private AnnotationInstance createTypedAnnotationInstance(ClassInfo clazz,\n             BeanArchiveIndexBuildItem beanArchiveIndexBuildItem) {\n-        Set<DotName> interfaceNames = new HashSet<>();\n+        Set<DotName> allBeanTypes = new HashSet<>();\n+        allBeanTypes.add(clazz.name());\n+\n         ClassInfo currentClazz = clazz;\n-        while (!ResteasyReactiveDotNames.OBJECT.equals(currentClazz.name())) {\n-            currentClazz.interfaceNames().forEach(iface -> interfaceNames.add(iface));\n-            // inspect super class\n+        while (!ResteasyReactiveDotNames.OBJECT.equals(currentClazz.name()) && currentClazz != null) {\n+            if (currentClazz.isAbstract()) {\n+                allBeanTypes.add(currentClazz.name());\n+            }\n+            allBeanTypes.addAll(getAllParentInterfaces(currentClazz.interfaceNames(), beanArchiveIndexBuildItem));\n             currentClazz = beanArchiveIndexBuildItem.getIndex().getClassByName(currentClazz.superName());\n         }\n-        Set<DotName> allInterfaces = new HashSet<>();\n-        recursiveInterfaceSearch(interfaceNames, allInterfaces, beanArchiveIndexBuildItem);\n-        AnnotationValue[] annotationValues = new AnnotationValue[allInterfaces.size() + 1];\n-        // always add the bean impl class\n-        annotationValues[0] = AnnotationValue.createClassValue(\"value\",\n-                Type.create(clazz.name(), Type.Kind.CLASS));\n-        Iterator<DotName> iterator = allInterfaces.iterator();\n-        for (int i = 1; i < annotationValues.length; i++) {\n+\n+        AnnotationValue[] annotationValues = new AnnotationValue[allBeanTypes.size()];\n+        Iterator<DotName> iterator = allBeanTypes.iterator();\n+        for (int i = 0; i < annotationValues.length; i++) {\n             annotationValues[i] = AnnotationValue.createClassValue(\"value\",\n                     Type.create(iterator.next(), Type.Kind.CLASS));\n         }\n@@ -1072,9 +1072,9 @@ private AnnotationInstance createTypedAnnotationInstance(ClassInfo clazz,\n                         annotationValues) });\n     }\n \n-    private void recursiveInterfaceSearch(Set<DotName> interfacesToProcess, Set<DotName> allDiscoveredInterfaces,\n+    private Set<DotName> getAllParentInterfaces(Collection<DotName> interfacesToProcess,\n             BeanArchiveIndexBuildItem beanArchiveIndexBuildItem) {\n-        allDiscoveredInterfaces.addAll(interfacesToProcess);\n+        Set<DotName> allDiscoveredInterfaces = new HashSet<DotName>(interfacesToProcess);\n         Set<DotName> additionalInterfacesToProcess = new HashSet<>();\n         for (DotName name : interfacesToProcess) {\n             ClassInfo clazz = beanArchiveIndexBuildItem.getIndex().getClassByName(name);\n@@ -1085,8 +1085,10 @@ private void recursiveInterfaceSearch(Set<DotName> interfacesToProcess, Set<DotN\n         }\n         if (!additionalInterfacesToProcess.isEmpty()) {\n             // recursively process newly found interfaces\n-            recursiveInterfaceSearch(additionalInterfacesToProcess, allDiscoveredInterfaces, beanArchiveIndexBuildItem);\n+            allDiscoveredInterfaces.addAll(getAllParentInterfaces(additionalInterfacesToProcess, beanArchiveIndexBuildItem));\n         }\n+\n+        return allDiscoveredInterfaces;\n     }\n \n     private Collection<DotName> additionalContextTypes(List<ContextTypeBuildItem> contextTypeBuildItems) {\n\ndiff --git a/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/EndpointIndexer.java b/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/EndpointIndexer.java\nindex 5124a68e20b0b..5bbcf87f4c545 100644\n--- a/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/EndpointIndexer.java\n+++ b/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/EndpointIndexer.java\n@@ -297,10 +297,12 @@ public Optional<ResourceClass> createEndpoints(ClassInfo classInfo, boolean cons\n                 }\n                 clazz.setPath(sanitizePath(path));\n             }\n-            if (factoryCreator != null && !classInfo.isInterface()) {\n-                // Most likely an interface for a sub resource. The ResourceLocatorHandler does not use the factory to create new instances, but uses the result of the sub resource locator method instead\n+            if (factoryCreator != null && !classInfo.isInterface() && !classInfo.isAbstract()) {\n+                // Most likely an interface or an abstract class in the hierarchy of a sub resource.\n+                // The ResourceLocatorHandler does not use the factory to create new instances, but uses the result of the sub resource locator method instead\n                 // Interfaces therefore do not need a factory here\n-                // Otherwise, when having multiple implementations of the interface, an Ambiguous Bean Resolution error occurs, since io.quarkus.arc.runtime.BeanContainerImpl.createFactory is run, even if the factory is never invoked\n+                // Otherwise, when having multiple implementations of the interface or abstract class, an Ambiguous Bean Resolution error occurs,\n+                // since io.quarkus.arc.runtime.BeanContainerImpl.createFactory is run, even if the factory is never invoked\n                 clazz.setFactory(factoryCreator.apply(classInfo.name().toString()));\n             }\n             Map<String, String> classLevelExceptionMappers = this.classLevelExceptionMappers.get(classInfo.name());\n",
    "test_patch": "diff --git a/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/ContextAndInstanceTest.java b/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/ContextAndInstanceTest.java\nnew file mode 100644\nindex 0000000000000..3c29c87b73371\n--- /dev/null\n+++ b/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/ContextAndInstanceTest.java\n@@ -0,0 +1,131 @@\n+package io.quarkus.resteasy.reactive.server.test.resource.basic;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+import java.util.function.Supplier;\n+\n+import jakarta.enterprise.context.ApplicationScoped;\n+import jakarta.enterprise.inject.Instance;\n+import jakarta.enterprise.inject.spi.CDI;\n+import jakarta.ws.rs.core.Context;\n+import jakarta.ws.rs.core.HttpHeaders;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.arc.Unremovable;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class ContextAndInstanceTest {\n+\n+    @RegisterExtension\n+    static QuarkusUnitTest testExtension = new QuarkusUnitTest()\n+            .setArchiveProducer(new Supplier<>() {\n+                @Override\n+                public JavaArchive get() {\n+                    JavaArchive jar = ShrinkWrap.create(JavaArchive.class);\n+                    jar.addClasses(SummaryGeneratorInterface.class);\n+                    jar.addClasses(SummaryGeneratorSubInterface.class);\n+                    jar.addClasses(SummaryGenerator.class);\n+                    jar.addClasses(GermanSummaryGenerator.class);\n+                    jar.addClasses(GreetingGeneratorInterface.class);\n+                    jar.addClasses(GreetingGeneratorSubInterface.class);\n+                    jar.addClasses(GermanGreetingGenerator.class);\n+                    return jar;\n+                }\n+            });\n+\n+    @Test\n+    void testContextWithAbstractClass() {\n+        {\n+            Instance<GermanSummaryGenerator> greetingGenerators = CDI.current()\n+                    .select(ContextAndInstanceTest.GermanSummaryGenerator.class);\n+            assertThat(greetingGenerators.isResolvable(), equalTo(true));\n+        }\n+\n+        {\n+            Instance<SummaryGenerator> greetingGenerators = CDI.current()\n+                    .select(ContextAndInstanceTest.SummaryGenerator.class);\n+            assertThat(greetingGenerators.isResolvable(), equalTo(true));\n+        }\n+\n+        {\n+            Instance<SummaryGeneratorInterface> greetingGenerators = CDI.current()\n+                    .select(ContextAndInstanceTest.SummaryGeneratorInterface.class);\n+            assertThat(greetingGenerators.isResolvable(), equalTo(true));\n+        }\n+\n+        {\n+            Instance<SummaryGeneratorSubInterface> greetingGenerators = CDI.current()\n+                    .select(ContextAndInstanceTest.SummaryGeneratorSubInterface.class);\n+            assertThat(greetingGenerators.isResolvable(), equalTo(true));\n+        }\n+    }\n+\n+    @Test\n+    void testContextWithOnlyInterfaces() {\n+        {\n+            Instance<GreetingGeneratorInterface> greetingGenerators = CDI.current()\n+                    .select(ContextAndInstanceTest.GreetingGeneratorInterface.class);\n+            assertThat(greetingGenerators.isResolvable(), equalTo(true));\n+        }\n+\n+        {\n+            Instance<GreetingGeneratorSubInterface> greetingGenerators = CDI.current()\n+                    .select(ContextAndInstanceTest.GreetingGeneratorSubInterface.class);\n+            assertThat(greetingGenerators.isResolvable(), equalTo(true));\n+        }\n+\n+        {\n+            Instance<AnotherSubInterface> greetingGenerators = CDI.current()\n+                    .select(ContextAndInstanceTest.AnotherSubInterface.class);\n+            assertThat(greetingGenerators.isResolvable(), equalTo(true));\n+        }\n+\n+        {\n+            Instance<AnotherInterface> greetingGenerators = CDI.current()\n+                    .select(ContextAndInstanceTest.AnotherInterface.class);\n+            assertThat(greetingGenerators.isResolvable(), equalTo(true));\n+        }\n+    }\n+\n+    public interface SummaryGeneratorInterface {\n+    }\n+\n+    public interface SummaryGeneratorSubInterface extends SummaryGeneratorInterface {\n+    }\n+\n+    public abstract static class SummaryGenerator implements SummaryGeneratorSubInterface {\n+    }\n+\n+    @Unremovable\n+    @ApplicationScoped\n+    public static class GermanSummaryGenerator extends SummaryGenerator {\n+\n+        @Context\n+        HttpHeaders headers;\n+    }\n+\n+    public interface GreetingGeneratorInterface {\n+    }\n+\n+    public interface GreetingGeneratorSubInterface extends GreetingGeneratorInterface {\n+    }\n+\n+    public interface AnotherInterface {\n+    }\n+\n+    public interface AnotherSubInterface extends AnotherInterface {\n+    }\n+\n+    @Unremovable\n+    @ApplicationScoped\n+    public static class GermanGreetingGenerator implements GreetingGeneratorSubInterface, AnotherSubInterface {\n+\n+        @Context\n+        HttpHeaders headers;\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47415",
    "pr_id": 47415,
    "issue_id": 47409,
    "repo": "quarkusio/quarkus",
    "problem_statement": "quarkus_websockets_server_connections_opened_errors_total metric doesn't increment when exception is thrown on websocket opening\n### Describe the bug\n\nWebsocket.next endpoint throwing exception on opening of connection doesn't increment count of `quarkus_websockets_server_connections_opened_errors_total{uri=${ENDPOINT}}` metric counter.\n\nFor example, I have a following websocket:\n\n```\n@WebSocket(path = \"/failing\")\npublic class FailingWebsocket {\n    @OnOpen()\n    public void onOpen() {\n        throw new RuntimeException(\"Websocket failed to open\");\n    }\n.\n.\n.\n}\n```\n\nBut opening a connection on it doesn't increment the counter. Same happens for the `quarkus_websockets_client_connections_opened_errors_total{uri=${ENDPOINT}}` counter.\n\n### Expected behavior\n\nThe `quarkus_websockets_server_connections_opened_errors_total{uri=${ENDPOINT}}`  counter is incremented.\n\n### Actual behavior\n\nThe `quarkus_websockets_server_connections_opened_errors_total{uri=${ENDPOINT}}`  counter is not incremented.\n\n### How to Reproduce?\n\nEither invoke the aforementioned websocket.next via devui, or run the automated test:\n\n```\ngit clone git@github.com:mjurc/quarkus-test-suite.git --branch QUARKUS-5667 && cd quarkus-test-suite\n./mvnw clean verify -pl websockets/websocket-next -Dit.test=OpenShiftWebSocketsNextMetricsIT#serverErrorMetricsTest\n```\n\n### Output of `uname -a` or `ver`\n\nLinux donnager 6.14.2-300.fc42.x86_64 #1 SMP PREEMPT_DYNAMIC Thu Apr 10 21:50:55 UTC 2025 x86_64 GNU/Linux\n\n### Output of `java -version`\n\nJava version: 21.0.6, vendor: Red Hat, Inc., runtime: /usr/lib/jvm/java-21-openjdk\n\n### Quarkus version or git rev\n\nmain, 3.20.0\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nApache Maven 3.9.9 (8e8579a9e76f7d015ee5ec7bfcdc97d260186937) Maven home: /home/mjurc/.m2/wrapper/dists/apache-maven-3.9.9/3477a4f1 Java version: 21.0.6, vendor: Red Hat, Inc., runtime: /usr/lib/jvm/java-21-openjdk Default locale: en_US, platform encoding: UTF-8 OS name: \"linux\", version: \"6.14.2-300.fc42.x86_64\", arch: \"amd64\", family: \"unix\"\n\n### Additional information\n\n_No response_",
    "issue_word_count": 267,
    "test_files_count": 1,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "extensions/websockets-next/deployment/src/test/java/io/quarkus/websockets/next/test/telemetry/MetricsAsserter.java",
      "extensions/websockets-next/runtime/src/main/java/io/quarkus/websockets/next/runtime/Endpoints.java",
      "extensions/websockets-next/runtime/src/main/java/io/quarkus/websockets/next/runtime/telemetry/MetricsBuilderCustomizer.java",
      "extensions/websockets-next/runtime/src/main/java/io/quarkus/websockets/next/runtime/telemetry/MetricsConnectionInterceptor.java",
      "extensions/websockets-next/runtime/src/main/java/io/quarkus/websockets/next/runtime/telemetry/TelemetryConstants.java"
    ],
    "pr_changed_test_files": [
      "extensions/websockets-next/deployment/src/test/java/io/quarkus/websockets/next/test/telemetry/MetricsAsserter.java"
    ],
    "base_commit": "71c995944689f50292ac410caf40eef0bbd798eb",
    "head_commit": "d6de7f56b024adb056574abce27a0fbeb528080f",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47415",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47415",
    "dockerfile": "",
    "pr_merged_at": "2025-04-22T08:28:29.000Z",
    "patch": "diff --git a/extensions/websockets-next/runtime/src/main/java/io/quarkus/websockets/next/runtime/Endpoints.java b/extensions/websockets-next/runtime/src/main/java/io/quarkus/websockets/next/runtime/Endpoints.java\nindex 707b696f4643f..7a3a6c43895df 100644\n--- a/extensions/websockets-next/runtime/src/main/java/io/quarkus/websockets/next/runtime/Endpoints.java\n+++ b/extensions/websockets-next/runtime/src/main/java/io/quarkus/websockets/next/runtime/Endpoints.java\n@@ -113,6 +113,9 @@ public void handle(Void event) {\n                             });\n                         }\n                     } else {\n+                        if (telemetrySupport != null) {\n+                            telemetrySupport.connectionOpeningFailed(r.cause());\n+                        }\n                         handleFailure(unhandledFailureStrategy, r.cause(), \"Unable to complete @OnOpen callback\", connection);\n                     }\n                 });\n\ndiff --git a/extensions/websockets-next/runtime/src/main/java/io/quarkus/websockets/next/runtime/telemetry/MetricsBuilderCustomizer.java b/extensions/websockets-next/runtime/src/main/java/io/quarkus/websockets/next/runtime/telemetry/MetricsBuilderCustomizer.java\nindex e867113d09e04..f82186a0ceb12 100644\n--- a/extensions/websockets-next/runtime/src/main/java/io/quarkus/websockets/next/runtime/telemetry/MetricsBuilderCustomizer.java\n+++ b/extensions/websockets-next/runtime/src/main/java/io/quarkus/websockets/next/runtime/telemetry/MetricsBuilderCustomizer.java\n@@ -6,8 +6,8 @@\n import static io.quarkus.websockets.next.runtime.telemetry.TelemetryConstants.CLIENT_ENDPOINT_COUNT_ERRORS;\n import static io.quarkus.websockets.next.runtime.telemetry.TelemetryConstants.DIRECTION_TAG_KEY;\n import static io.quarkus.websockets.next.runtime.telemetry.TelemetryConstants.SERVER_CONNECTION_CLOSED;\n+import static io.quarkus.websockets.next.runtime.telemetry.TelemetryConstants.SERVER_CONNECTION_ON_OPEN_ERROR;\n import static io.quarkus.websockets.next.runtime.telemetry.TelemetryConstants.SERVER_CONNECTION_OPENED;\n-import static io.quarkus.websockets.next.runtime.telemetry.TelemetryConstants.SERVER_CONNECTION_OPENED_ERROR;\n import static io.quarkus.websockets.next.runtime.telemetry.TelemetryConstants.SERVER_ENDPOINT_COUNT_ERRORS;\n import static io.quarkus.websockets.next.runtime.telemetry.TelemetryConstants.Direction.INBOUND;\n import static io.quarkus.websockets.next.runtime.telemetry.TelemetryConstants.Direction.OUTBOUND;\n@@ -98,7 +98,7 @@ public ErrorInterceptor apply(String path) {\n                     .withRegistry(meterRegistry);\n \n             private final Meter.MeterProvider<Counter> connectionOpeningFailedCounter = Counter\n-                    .builder(SERVER_CONNECTION_OPENED_ERROR)\n+                    .builder(SERVER_CONNECTION_ON_OPEN_ERROR)\n                     .description(\"Number of failures occurred when opening server connection failed.\")\n                     .withRegistry(meterRegistry);\n \n\ndiff --git a/extensions/websockets-next/runtime/src/main/java/io/quarkus/websockets/next/runtime/telemetry/MetricsConnectionInterceptor.java b/extensions/websockets-next/runtime/src/main/java/io/quarkus/websockets/next/runtime/telemetry/MetricsConnectionInterceptor.java\nindex 015878dc0a670..263d491e39f0b 100644\n--- a/extensions/websockets-next/runtime/src/main/java/io/quarkus/websockets/next/runtime/telemetry/MetricsConnectionInterceptor.java\n+++ b/extensions/websockets-next/runtime/src/main/java/io/quarkus/websockets/next/runtime/telemetry/MetricsConnectionInterceptor.java\n@@ -7,11 +7,11 @@\n final class MetricsConnectionInterceptor implements ConnectionInterceptor {\n \n     private final Counter connectionOpenCounter;\n-    private final Counter connectionOpeninigFailedCounter;\n+    private final Counter connectionOnOpenErrorsCounter;\n \n     MetricsConnectionInterceptor(Counter connectionOpenCounter, Counter connectionOpeninigFailedCounter) {\n         this.connectionOpenCounter = connectionOpenCounter;\n-        this.connectionOpeninigFailedCounter = connectionOpeninigFailedCounter;\n+        this.connectionOnOpenErrorsCounter = connectionOpeninigFailedCounter;\n     }\n \n     @Override\n@@ -21,7 +21,7 @@ public void connectionOpened() {\n \n     @Override\n     public void connectionOpeningFailed(Throwable cause) {\n-        connectionOpeninigFailedCounter.increment();\n+        connectionOnOpenErrorsCounter.increment();\n     }\n \n     @Override\n\ndiff --git a/extensions/websockets-next/runtime/src/main/java/io/quarkus/websockets/next/runtime/telemetry/TelemetryConstants.java b/extensions/websockets-next/runtime/src/main/java/io/quarkus/websockets/next/runtime/telemetry/TelemetryConstants.java\nindex b044bd7fb999f..d841b501cf422 100644\n--- a/extensions/websockets-next/runtime/src/main/java/io/quarkus/websockets/next/runtime/telemetry/TelemetryConstants.java\n+++ b/extensions/websockets-next/runtime/src/main/java/io/quarkus/websockets/next/runtime/telemetry/TelemetryConstants.java\n@@ -26,7 +26,7 @@ private TelemetryConstants() {\n     /**\n      * Counts number of times that opening of a WebSocket server connection resulted in error.\n      */\n-    public static final String SERVER_CONNECTION_OPENED_ERROR = \"quarkus.websockets.server.connections.opened.errors\";\n+    public static final String SERVER_CONNECTION_ON_OPEN_ERROR = \"quarkus.websockets.server.connections.onopen.errors\";\n \n     /**\n      * Counts number of times that opening of a WebSocket client connection resulted in error.\n",
    "test_patch": "diff --git a/extensions/websockets-next/deployment/src/test/java/io/quarkus/websockets/next/test/telemetry/MetricsAsserter.java b/extensions/websockets-next/deployment/src/test/java/io/quarkus/websockets/next/test/telemetry/MetricsAsserter.java\nindex ed81876f1f4f6..69ba97eb5efb9 100644\n--- a/extensions/websockets-next/deployment/src/test/java/io/quarkus/websockets/next/test/telemetry/MetricsAsserter.java\n+++ b/extensions/websockets-next/deployment/src/test/java/io/quarkus/websockets/next/test/telemetry/MetricsAsserter.java\n@@ -7,8 +7,8 @@\n import static io.quarkus.websockets.next.runtime.telemetry.TelemetryConstants.CLIENT_ENDPOINT_COUNT_ERRORS;\n import static io.quarkus.websockets.next.runtime.telemetry.TelemetryConstants.SERVER_BYTES;\n import static io.quarkus.websockets.next.runtime.telemetry.TelemetryConstants.SERVER_CONNECTION_CLOSED;\n+import static io.quarkus.websockets.next.runtime.telemetry.TelemetryConstants.SERVER_CONNECTION_ON_OPEN_ERROR;\n import static io.quarkus.websockets.next.runtime.telemetry.TelemetryConstants.SERVER_CONNECTION_OPENED;\n-import static io.quarkus.websockets.next.runtime.telemetry.TelemetryConstants.SERVER_CONNECTION_OPENED_ERROR;\n import static io.quarkus.websockets.next.runtime.telemetry.TelemetryConstants.SERVER_COUNT;\n import static io.quarkus.websockets.next.runtime.telemetry.TelemetryConstants.SERVER_ENDPOINT_COUNT_ERRORS;\n import static io.quarkus.websockets.next.runtime.telemetry.TelemetryConstants.Direction.INBOUND;\n@@ -120,7 +120,7 @@ static Matcher<String> assertClientErrorTotal(String path, int clientErrorCount)\n     }\n \n     static Matcher<String> assertServerConnectionOpeningFailedTotal(String path, int serverConnectionOpeningFailedCount) {\n-        return assertTotal(SERVER_CONNECTION_OPENED_ERROR, serverConnectionOpeningFailedCount, path, null);\n+        return assertTotal(SERVER_CONNECTION_ON_OPEN_ERROR, serverConnectionOpeningFailedCount, path, null);\n     }\n \n     static Matcher<String> assertServerConnectionOpenedTotal(int serverConnectionOpenedCount) {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47401",
    "pr_id": 47401,
    "issue_id": 47383,
    "repo": "quarkusio/quarkus",
    "problem_statement": "mocked quarkus-rest-client complains about missing uri\n### Describe the bug\n\nI can not mock rest clients. Quarkus complaints about the uri not being set. But I do not want to set the uri, since I am mocking the result of the client anyway.\n\n```\n@QuarkusTest\nclass GreetingResourceTest {\n\n    @InjectMock\n    @RestClient\n    MyRemoteService myRemoteService;\n[...]\n```\n\nResults in the log from below.\n\nI can work around this by adding\n```\n%test.quarkus.rest-client.\"org.acme.MyRemoteService\".url=http://localhost:8080/i-do-not-exist\n```\nTo my application.properties.\n\nSee doc: https://quarkus.io/guides/rest-client#mocking-with-injectmock\n\n### Expected behavior\n\nI can mock quarkus rest clients inn my quarkustest\n\n### Actual behavior\n\n```\n2025-04-15 17:51:02,863 INFO  [io.quarkus] (main) rest-client-mock 1.0.0-SNAPSHOT on JVM (powered by Quarkus 3.21.2) started in 4.370s. Listening on: http://localhost:8081\n2025-04-15 17:51:02,867 INFO  [io.quarkus] (main) Profile test activated. \n2025-04-15 17:51:02,867 INFO  [io.quarkus] (main) Installed features: [cdi, rest, rest-client, rest-client-jackson, smallrye-context-propagation, vertx]\n\norg.junit.jupiter.api.extension.TestInstantiationException: Failed to create test instance\n\n\tat io.quarkus.test.junit.QuarkusTestExtension.initTestState(QuarkusTestExtension.java:767)\n\tat io.quarkus.test.junit.QuarkusTestExtension.interceptTestClassConstructor(QuarkusTestExtension.java:733)\n\tat java.base/java.util.Optional.orElseGet(Optional.java:364)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1597)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1597)\nCaused by: java.lang.RuntimeException: java.lang.reflect.InvocationTargetException\n\tat io.quarkus.runner.bootstrap.RunningQuarkusApplicationImpl.instance(RunningQuarkusApplicationImpl.java:90)\n\tat io.quarkus.test.junit.QuarkusTestExtension.createActualTestInstance(QuarkusTestExtension.java:773)\n\tat io.quarkus.test.junit.QuarkusTestExtension.initTestState(QuarkusTestExtension.java:761)\n\t... 4 more\nCaused by: java.lang.reflect.InvocationTargetException\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat io.quarkus.runner.bootstrap.RunningQuarkusApplicationImpl.instance(RunningQuarkusApplicationImpl.java:88)\n\t... 6 more\nCaused by: java.lang.RuntimeException: Error injecting org.acme.GreetingResource org.acme.GreetingResourceTest.greetingResource\n\tat org.acme.GreetingResourceTest_Bean.doCreate(Unknown Source)\n\tat org.acme.GreetingResourceTest_Bean.create(Unknown Source)\n\tat org.acme.GreetingResourceTest_Bean.get(Unknown Source)\n\tat org.acme.GreetingResourceTest_Bean.get(Unknown Source)\n\tat io.quarkus.arc.impl.InstanceImpl.getBeanInstance(InstanceImpl.java:325)\n\tat io.quarkus.arc.impl.InstanceImpl.getInternal(InstanceImpl.java:309)\n\tat io.quarkus.arc.impl.InstanceImpl.get(InstanceImpl.java:190)\n\t... 8 more\nCaused by: java.lang.RuntimeException: Error injecting org.acme.MyRemoteService org.acme.GreetingResource.myRemoteService\n\tat org.acme.GreetingResource_Bean.doCreate(Unknown Source)\n\tat org.acme.GreetingResource_Bean.create(Unknown Source)\n\tat org.acme.GreetingResource_Bean.create(Unknown Source)\n\tat io.quarkus.arc.impl.AbstractSharedContext.createInstanceHandle(AbstractSharedContext.java:119)\n\tat io.quarkus.arc.impl.AbstractSharedContext$1.get(AbstractSharedContext.java:38)\n\tat io.quarkus.arc.impl.AbstractSharedContext$1.get(AbstractSharedContext.java:35)\n\tat io.quarkus.arc.impl.LazyValue.get(LazyValue.java:32)\n\tat io.quarkus.arc.impl.ComputingCache.computeIfAbsent(ComputingCache.java:69)\n\tat io.quarkus.arc.impl.ComputingCacheContextInstances.computeIfAbsent(ComputingCacheContextInstances.java:19)\n\tat io.quarkus.arc.impl.AbstractSharedContext.get(AbstractSharedContext.java:35)\n\tat org.acme.GreetingResource_Bean.get(Unknown Source)\n\tat org.acme.GreetingResource_Bean.get(Unknown Source)\n\t... 15 more\nCaused by: java.lang.IllegalArgumentException: Unable to determine the proper baseUrl/baseUri. Consider registering using @RegisterRestClient(baseUri=\"someuri\"), @RegisterRestClient(configKey=\"orkey\"), or by adding 'quarkus.rest-client.\"org.acme.MyRemoteService\".url' or 'quarkus.rest-client.\"org.acme.MyRemoteService\".uri' to your Quarkus configuration\n\tat io.quarkus.rest.client.reactive.runtime.RestClientCDIDelegateBuilder.configureBaseUrl(RestClientCDIDelegateBuilder.java:402)\n\tat io.quarkus.rest.client.reactive.runtime.RestClientCDIDelegateBuilder.configureBuilder(RestClientCDIDelegateBuilder.java:78)\n\tat io.quarkus.rest.client.reactive.runtime.RestClientCDIDelegateBuilder.build(RestClientCDIDelegateBuilder.java:73)\n\tat io.quarkus.rest.client.reactive.runtime.RestClientCDIDelegateBuilder.createDelegate(RestClientCDIDelegateBuilder.java:54)\n\tat io.quarkus.rest.client.reactive.runtime.RestClientReactiveCDIWrapperBase.delegate(RestClientReactiveCDIWrapperBase.java:76)\n\tat io.quarkus.rest.client.reactive.runtime.RestClientReactiveCDIWrapperBase.<init>(RestClientReactiveCDIWrapperBase.java:30)\n\tat org.acme.MyRemoteService$$CDIWrapper.<init>(Unknown Source)\n\tat org.acme.MyRemoteService$$CDIWrapper_ClientProxy.<init>(Unknown Source)\n\tat org.acme.MyRemoteService$$CDIWrapper_Bean.proxy(Unknown Source)\n\tat org.acme.MyRemoteService$$CDIWrapper_Bean.get(Unknown Source)\n\tat org.acme.MyRemoteService$$CDIWrapper_Bean.get(Unknown Source)\n\t... 27 more\n\n\njava.lang.NullPointerException: Cannot invoke \"Object.hashCode()\" because \"key\" is null\n\n\tat java.base/java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:937)\n\tat java.base/java.util.concurrent.ConcurrentHashMap.getOrDefault(ConcurrentHashMap.java:1599)\n\tat io.quarkus.test.junit.mockito.internal.MockitoMocksTracker.getMocks(MockitoMocksTracker.java:25)\n\tat io.quarkus.test.junit.mockito.internal.MockitoMocksTracker.clear(MockitoMocksTracker.java:35)\n\tat io.quarkus.test.junit.mockito.internal.ResetMockitoMocksAfterAllCallback.afterAll(ResetMockitoMocksAfterAllCallback.java:10)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat io.quarkus.test.junit.AbstractTestWithCallbacksExtension.invokeCallbacks(AbstractTestWithCallbacksExtension.java:162)\n\tat io.quarkus.test.junit.AbstractTestWithCallbacksExtension.invokeAfterAllCallbacks(AbstractTestWithCallbacksExtension.java:100)\n\tat io.quarkus.test.junit.QuarkusTestExtension.runAfterAllCallbacks(QuarkusTestExtension.java:1055)\n\tat io.quarkus.test.junit.QuarkusTestExtension.afterAll(QuarkusTestExtension.java:1023)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1597)\n```\n\n### How to Reproduce?\n\nReproducer: \n\n[rest-client-mock.zip](https://github.com/user-attachments/files/19761454/rest-client-mock.zip)\n\nmvn quarkus:test\n\n### Output of `uname -a` or `ver`\n\nMINGW64_NT-10.0-26100 NANBCHL9NG3 3.3.6-341.x86_64 2022-09-05 20:28 UTC x86_64 Msys\n\n### Output of `java -version`\n\nopenjdk 21.0.5 2024-10-15 LTS OpenJDK Runtime Environment Temurin-21.0.5+11 (build 21.0.5+11-LTS) OpenJDK 64-Bit Server VM Temurin-21.0.5+11 (build 21.0.5+11-LTS, mixed mode, sharing)\n\n### Quarkus version or git rev\n\n3.21.2\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nApache Maven 3.8.8 (4c87b05d9aedce574290d1acc98575ed5eb6cd39) Maven home: C:\\eclipse\\tools\\java\\maven Java version: 21.0.5, vendor: Eclipse Adoptium, runtime: C:\\eclipse\\tools\\java\\21 Default locale: de_DE, platform encoding: UTF-8 OS name: \"windows 11\", version: \"10.0\", arch: \"amd64\", family: \"windows\"\n\n### Additional information\n\n_No response_",
    "issue_word_count": 953,
    "test_files_count": 30,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "core/runtime/src/main/java/io/quarkus/runtime/MockedThroughWrapper.java",
      "extensions/hibernate-validator/runtime/src/main/java/io/quarkus/hibernate/validator/runtime/ArcProxyBeanMetaDataClassNormalizer.java",
      "extensions/resteasy-reactive/rest-client/deployment/src/main/java/io/quarkus/rest/client/reactive/deployment/RestClientReactiveProcessor.java",
      "extensions/resteasy-reactive/rest-client/runtime/src/main/java/io/quarkus/rest/client/reactive/runtime/RestClientReactiveCDIWrapperBase.java",
      "integration-tests/grpc-plain-text-mutiny/src/test/java/io/quarkus/grpc/examples/hello/GrpcMockTest.java",
      "integration-tests/hibernate-orm-panache/src/test/java/io/quarkus/it/panache/defaultpu/PanacheMockingTest.java",
      "integration-tests/hibernate-reactive-panache/src/test/java/io/quarkus/it/panache/reactive/PanacheMockingTest.java",
      "integration-tests/hibernate-validator/src/test/java/io/quarkus/hibernate/validator/runtime/ArcProxyBeanMetaDataClassNormalizerTest.java",
      "integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/DummyResourceTest.java",
      "integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/FooResourceTest.java",
      "integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/GenericFieldsTest.java",
      "integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/GreetingResourceTest.java",
      "integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/GreetingSingletonResourceMockTest.java",
      "integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/GreetingSingletonResourceTest.java",
      "integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/MockedObserverTest.java",
      "integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/NestedTest.java",
      "integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/SameBeanInstanceTest.java",
      "integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/UnusedServiceTest.java",
      "integration-tests/mongodb-panache-kotlin/src/test/kotlin/io/quarkus/it/mongodb/panache/MongodbPanacheMockingTest.kt",
      "integration-tests/mongodb-panache/src/test/java/io/quarkus/it/mongodb/panache/MongodbPanacheMockingTest.java",
      "integration-tests/mongodb-panache/src/test/java/io/quarkus/it/mongodb/panache/reactive/ReactiveMongodbPanacheMockingTest.java",
      "integration-tests/rest-client-reactive/src/main/java/io/quarkus/it/rest/client/main/FaultToleranceOnInterfaceClient.java",
      "integration-tests/rest-client-reactive/src/test/java/io/quarkus/it/rest/client/BasicTest.java",
      "integration-tests/rest-client-reactive/src/test/java/io/quarkus/it/rest/client/InjectMockTest.java",
      "integration-tests/rest-client-reactive/src/test/java/io/quarkus/it/rest/client/InjectMockWithInterceptorTest.java",
      "test-framework/junit5-component/src/main/java/io/quarkus/test/component/QuarkusComponentTestExtension.java",
      "test-framework/junit5-component/src/test/java/io/quarkus/test/component/declarative/InjectMockTest.java",
      "test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/InjectMock.java",
      "test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/CreateMockitoMocksCallback.java",
      "test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/SetMockitoMockAsBeanMockCallback.java",
      "test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/SingletonToApplicationScopedTestBuildChainCustomizerProducer.java",
      "test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/UnremoveableMockTestBuildChainCustomizerProducer.java",
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/MockSupport.java",
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/internal/VerifyMockitoMocksCallback.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/grpc-plain-text-mutiny/src/test/java/io/quarkus/grpc/examples/hello/GrpcMockTest.java",
      "integration-tests/hibernate-orm-panache/src/test/java/io/quarkus/it/panache/defaultpu/PanacheMockingTest.java",
      "integration-tests/hibernate-reactive-panache/src/test/java/io/quarkus/it/panache/reactive/PanacheMockingTest.java",
      "integration-tests/hibernate-validator/src/test/java/io/quarkus/hibernate/validator/runtime/ArcProxyBeanMetaDataClassNormalizerTest.java",
      "integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/DummyResourceTest.java",
      "integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/FooResourceTest.java",
      "integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/GenericFieldsTest.java",
      "integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/GreetingResourceTest.java",
      "integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/GreetingSingletonResourceMockTest.java",
      "integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/GreetingSingletonResourceTest.java",
      "integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/MockedObserverTest.java",
      "integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/NestedTest.java",
      "integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/SameBeanInstanceTest.java",
      "integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/UnusedServiceTest.java",
      "integration-tests/mongodb-panache-kotlin/src/test/kotlin/io/quarkus/it/mongodb/panache/MongodbPanacheMockingTest.kt",
      "integration-tests/mongodb-panache/src/test/java/io/quarkus/it/mongodb/panache/MongodbPanacheMockingTest.java",
      "integration-tests/mongodb-panache/src/test/java/io/quarkus/it/mongodb/panache/reactive/ReactiveMongodbPanacheMockingTest.java",
      "integration-tests/rest-client-reactive/src/main/java/io/quarkus/it/rest/client/main/FaultToleranceOnInterfaceClient.java",
      "integration-tests/rest-client-reactive/src/test/java/io/quarkus/it/rest/client/BasicTest.java",
      "integration-tests/rest-client-reactive/src/test/java/io/quarkus/it/rest/client/InjectMockTest.java",
      "integration-tests/rest-client-reactive/src/test/java/io/quarkus/it/rest/client/InjectMockWithInterceptorTest.java",
      "test-framework/junit5-component/src/main/java/io/quarkus/test/component/QuarkusComponentTestExtension.java",
      "test-framework/junit5-component/src/test/java/io/quarkus/test/component/declarative/InjectMockTest.java",
      "test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/InjectMock.java",
      "test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/CreateMockitoMocksCallback.java",
      "test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/SetMockitoMockAsBeanMockCallback.java",
      "test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/SingletonToApplicationScopedTestBuildChainCustomizerProducer.java",
      "test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/UnremoveableMockTestBuildChainCustomizerProducer.java",
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/MockSupport.java",
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/internal/VerifyMockitoMocksCallback.java"
    ],
    "base_commit": "53bdc31e6a84e60c0a3fb9c72f19ac3218990fcf",
    "head_commit": "80a1b7120819afdd9a97f918ee3aad275ff87b08",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47401",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47401",
    "dockerfile": "",
    "pr_merged_at": "2025-04-17T17:36:11.000Z",
    "patch": "diff --git a/core/runtime/src/main/java/io/quarkus/runtime/MockedThroughWrapper.java b/core/runtime/src/main/java/io/quarkus/runtime/MockedThroughWrapper.java\nindex 2c11b4683f18e..586d7784aecb2 100644\n--- a/core/runtime/src/main/java/io/quarkus/runtime/MockedThroughWrapper.java\n+++ b/core/runtime/src/main/java/io/quarkus/runtime/MockedThroughWrapper.java\n@@ -2,8 +2,8 @@\n \n /**\n  * Usually, QuarkusMock mocking replaces a \"delegating instance\" of a client proxy.\n- *\n- * In some cases, e.g. for REST Client Reactive, a CDI bean is a wrapper over a delegate.\n+ * <p>\n+ * In some cases, e.g. for REST Client, a CDI bean is a wrapper over a delegate.\n  * This interface allows to replace the delegate instead of the delegating instance of the proxy.\n  */\n public interface MockedThroughWrapper {\n\ndiff --git a/extensions/hibernate-validator/runtime/src/main/java/io/quarkus/hibernate/validator/runtime/ArcProxyBeanMetaDataClassNormalizer.java b/extensions/hibernate-validator/runtime/src/main/java/io/quarkus/hibernate/validator/runtime/ArcProxyBeanMetaDataClassNormalizer.java\nindex 03d66360d2db5..47d25f6c4c72a 100644\n--- a/extensions/hibernate-validator/runtime/src/main/java/io/quarkus/hibernate/validator/runtime/ArcProxyBeanMetaDataClassNormalizer.java\n+++ b/extensions/hibernate-validator/runtime/src/main/java/io/quarkus/hibernate/validator/runtime/ArcProxyBeanMetaDataClassNormalizer.java\n@@ -10,7 +10,7 @@\n  * <br />\n  * This can have more than one level of hierarchy, for example:\n  * <ul>\n- * <li>When using @{@link io.quarkus.test.junit.mockito.InjectMock} or @{@link io.quarkus.test.junit.mockito.InjectSpy}</li>\n+ * <li>When using {@code io.quarkus.test.InjectMock} or {@code io.quarkus.test.junit.mockito.InjectSpy}</li>\n  * </ul>\n  */\n public class ArcProxyBeanMetaDataClassNormalizer implements BeanMetaDataClassNormalizer {\n\ndiff --git a/extensions/resteasy-reactive/rest-client/deployment/src/main/java/io/quarkus/rest/client/reactive/deployment/RestClientReactiveProcessor.java b/extensions/resteasy-reactive/rest-client/deployment/src/main/java/io/quarkus/rest/client/reactive/deployment/RestClientReactiveProcessor.java\nindex ae388d44dfcf9..76f0410f9c7c1 100644\n--- a/extensions/resteasy-reactive/rest-client/deployment/src/main/java/io/quarkus/rest/client/reactive/deployment/RestClientReactiveProcessor.java\n+++ b/extensions/resteasy-reactive/rest-client/deployment/src/main/java/io/quarkus/rest/client/reactive/deployment/RestClientReactiveProcessor.java\n@@ -28,6 +28,7 @@\n import java.lang.reflect.Modifier;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n@@ -35,6 +36,7 @@\n import java.util.Optional;\n import java.util.Set;\n import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n \n import jakarta.enterprise.context.SessionScoped;\n import jakarta.enterprise.inject.Typed;\n@@ -87,6 +89,7 @@\n import io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem;\n import io.quarkus.deployment.builditem.FeatureBuildItem;\n import io.quarkus.deployment.builditem.GeneratedClassBuildItem;\n+import io.quarkus.deployment.builditem.LaunchModeBuildItem;\n import io.quarkus.deployment.builditem.RunTimeConfigBuilderBuildItem;\n import io.quarkus.deployment.builditem.ShutdownContextBuildItem;\n import io.quarkus.deployment.builditem.StaticInitConfigBuilderBuildItem;\n@@ -119,7 +122,9 @@ class RestClientReactiveProcessor {\n     private static final Logger log = Logger.getLogger(RestClientReactiveProcessor.class);\n \n     private static final DotName REGISTER_REST_CLIENT = DotName.createSimple(RegisterRestClient.class.getName());\n+    private static final DotName REST_CLIENT = DotName.createSimple(RestClient.class.getName());\n     private static final DotName SESSION_SCOPED = DotName.createSimple(SessionScoped.class.getName());\n+    private static final DotName INJECT_MOCK = DotName.createSimple(\"io.quarkus.test.InjectMock\");\n     private static final DotName KOTLIN_METADATA_ANNOTATION = DotName.createSimple(\"kotlin.Metadata\");\n \n     private static final String ENABLE_COMPRESSION = \"quarkus.http.enable-compression\";\n@@ -473,11 +478,24 @@ void addRestClientBeans(Capabilities capabilities,\n             BuildProducer<GeneratedBeanBuildItem> generatedBeans,\n             RestClientReactiveConfig clientConfig,\n             RestClientsBuildTimeConfig clientsBuildConfig,\n+            LaunchModeBuildItem launchMode,\n             RestClientRecorder recorder,\n             ShutdownContextBuildItem shutdown) {\n \n         CompositeIndex index = CompositeIndex.create(combinedIndexBuildItem.getIndex());\n \n+        Set<DotName> requestedRestClientMocks = Collections.emptySet();\n+        if (launchMode.getLaunchMode() == LaunchMode.TEST) {\n+            // we need to determine which RestClient interfaces have been marked for mocking\n+            requestedRestClientMocks = combinedIndexBuildItem.getIndex().getAnnotations(INJECT_MOCK)\n+                    .stream()\n+                    .filter(ai -> ai.target().kind() == AnnotationTarget.Kind.FIELD)\n+                    .map(ai -> ai.target().asField())\n+                    .filter(f -> f.hasAnnotation(REST_CLIENT))\n+                    .map(f -> f.type().name())\n+                    .collect(Collectors.toSet());\n+        }\n+\n         Map<String, String> configKeys = new HashMap<>();\n         var annotationsStore = new AnnotationStore(index, restClientAnnotationsTransformerBuildItem.stream()\n                 .map(RestClientAnnotationsTransformerBuildItem::getAnnotationTransformation).toList());\n@@ -552,6 +570,8 @@ void addRestClientBeans(Capabilities capabilities,\n                 Optional<String> baseUri = registerRestClient.getDefaultBaseUri();\n \n                 ResultHandle baseUriHandle = constructor.load(baseUri.isPresent() ? baseUri.get() : \"\");\n+                boolean lazyDelegate = scope.getDotName().equals(REQUEST_SCOPED)\n+                        || requestedRestClientMocks.contains(jaxrsInterface.name());\n                 constructor.invokeSpecialMethod(\n                         MethodDescriptor.ofConstructor(RestClientReactiveCDIWrapperBase.class, Class.class, String.class,\n                                 String.class, boolean.class),\n@@ -559,7 +579,7 @@ void addRestClientBeans(Capabilities capabilities,\n                         constructor.loadClassFromTCCL(jaxrsInterface.toString()),\n                         baseUriHandle,\n                         configKey.isPresent() ? constructor.load(configKey.get()) : constructor.loadNull(),\n-                        constructor.load(scope.getDotName().equals(REQUEST_SCOPED)));\n+                        constructor.load(lazyDelegate));\n                 constructor.returnValue(null);\n \n                 // METHODS:\n\ndiff --git a/extensions/resteasy-reactive/rest-client/runtime/src/main/java/io/quarkus/rest/client/reactive/runtime/RestClientReactiveCDIWrapperBase.java b/extensions/resteasy-reactive/rest-client/runtime/src/main/java/io/quarkus/rest/client/reactive/runtime/RestClientReactiveCDIWrapperBase.java\nindex 9677bc5827b71..725daeda6c933 100644\n--- a/extensions/resteasy-reactive/rest-client/runtime/src/main/java/io/quarkus/rest/client/reactive/runtime/RestClientReactiveCDIWrapperBase.java\n+++ b/extensions/resteasy-reactive/rest-client/runtime/src/main/java/io/quarkus/rest/client/reactive/runtime/RestClientReactiveCDIWrapperBase.java\n@@ -21,13 +21,12 @@ public abstract class RestClientReactiveCDIWrapperBase<T extends Closeable> impl\n     private Object mock;\n \n     public RestClientReactiveCDIWrapperBase(Class<T> jaxrsInterface, String baseUriFromAnnotation,\n-            String configKey, boolean requestScope) {\n+            String configKey, boolean lazyDelegate) {\n         this.jaxrsInterface = jaxrsInterface;\n         this.baseUriFromAnnotation = baseUriFromAnnotation;\n         this.configKey = configKey;\n-        if (!requestScope) {\n-            // when not using the Request scope, we eagerly create the delegate\n-            delegate();\n+        if (!lazyDelegate) {\n+            constructDelegate();\n         }\n     }\n \n@@ -55,7 +54,7 @@ public void destroy() {\n     @SuppressWarnings(\"unused\")\n     @NoClassInterceptors\n     public Object getDelegate() {\n-        return mock == null ? delegate() : mock;\n+        return mock == null ? constructDelegate() : mock;\n     }\n \n     @Override\n@@ -71,7 +70,7 @@ public void clearMock() {\n     }\n \n     @NoClassInterceptors\n-    private T delegate() {\n+    private T constructDelegate() {\n         if (delegate == null) {\n             delegate = RestClientCDIDelegateBuilder.createDelegate(jaxrsInterface, baseUriFromAnnotation, configKey);\n         }\n",
    "test_patch": "diff --git a/integration-tests/grpc-plain-text-mutiny/src/test/java/io/quarkus/grpc/examples/hello/GrpcMockTest.java b/integration-tests/grpc-plain-text-mutiny/src/test/java/io/quarkus/grpc/examples/hello/GrpcMockTest.java\nindex 468d7fe59d995..d235c8bff1fb2 100644\n--- a/integration-tests/grpc-plain-text-mutiny/src/test/java/io/quarkus/grpc/examples/hello/GrpcMockTest.java\n+++ b/integration-tests/grpc-plain-text-mutiny/src/test/java/io/quarkus/grpc/examples/hello/GrpcMockTest.java\n@@ -11,8 +11,8 @@\n import examples.HelloReply;\n import examples.HelloRequest;\n import io.quarkus.grpc.GrpcClient;\n+import io.quarkus.test.InjectMock;\n import io.quarkus.test.junit.QuarkusTest;\n-import io.quarkus.test.junit.mockito.InjectMock;\n import io.smallrye.mutiny.Uni;\n \n @QuarkusTest\n\ndiff --git a/integration-tests/hibernate-orm-panache/src/test/java/io/quarkus/it/panache/defaultpu/PanacheMockingTest.java b/integration-tests/hibernate-orm-panache/src/test/java/io/quarkus/it/panache/defaultpu/PanacheMockingTest.java\nindex 13d34e7f3aa36..46ef68e1ba5a9 100644\n--- a/integration-tests/hibernate-orm-panache/src/test/java/io/quarkus/it/panache/defaultpu/PanacheMockingTest.java\n+++ b/integration-tests/hibernate-orm-panache/src/test/java/io/quarkus/it/panache/defaultpu/PanacheMockingTest.java\n@@ -17,8 +17,8 @@\n \n import io.quarkus.hibernate.orm.panache.PanacheRepositoryBase;\n import io.quarkus.panache.mock.PanacheMock;\n+import io.quarkus.test.InjectMock;\n import io.quarkus.test.junit.QuarkusTest;\n-import io.quarkus.test.junit.mockito.InjectMock;\n \n @QuarkusTest\n public class PanacheMockingTest {\n\ndiff --git a/integration-tests/hibernate-reactive-panache/src/test/java/io/quarkus/it/panache/reactive/PanacheMockingTest.java b/integration-tests/hibernate-reactive-panache/src/test/java/io/quarkus/it/panache/reactive/PanacheMockingTest.java\nindex d8a87e05176ca..7006c799a2513 100644\n--- a/integration-tests/hibernate-reactive-panache/src/test/java/io/quarkus/it/panache/reactive/PanacheMockingTest.java\n+++ b/integration-tests/hibernate-reactive-panache/src/test/java/io/quarkus/it/panache/reactive/PanacheMockingTest.java\n@@ -17,8 +17,8 @@\n import io.quarkus.hibernate.reactive.panache.Panache;\n import io.quarkus.hibernate.reactive.panache.PanacheRepositoryBase;\n import io.quarkus.panache.mock.PanacheMock;\n+import io.quarkus.test.InjectMock;\n import io.quarkus.test.junit.QuarkusTest;\n-import io.quarkus.test.junit.mockito.InjectMock;\n import io.quarkus.test.vertx.RunOnVertxContext;\n import io.quarkus.test.vertx.UniAsserter;\n import io.smallrye.mutiny.Uni;\n\ndiff --git a/integration-tests/hibernate-validator/src/test/java/io/quarkus/hibernate/validator/runtime/ArcProxyBeanMetaDataClassNormalizerTest.java b/integration-tests/hibernate-validator/src/test/java/io/quarkus/hibernate/validator/runtime/ArcProxyBeanMetaDataClassNormalizerTest.java\nindex 03576025ba276..cde6cfdacefa6 100644\n--- a/integration-tests/hibernate-validator/src/test/java/io/quarkus/hibernate/validator/runtime/ArcProxyBeanMetaDataClassNormalizerTest.java\n+++ b/integration-tests/hibernate-validator/src/test/java/io/quarkus/hibernate/validator/runtime/ArcProxyBeanMetaDataClassNormalizerTest.java\n@@ -48,8 +48,8 @@ private static class FirstSubclass extends Original implements Subclass {\n     }\n \n     /**\n-     * Simulates an object injected through @{@link io.quarkus.test.junit.mockito.InjectMock}\n-     * or @{@link io.quarkus.test.junit.mockito.InjectSpy}.\n+     * Simulates an object injected through {@link io.quarkus.test.InjectMock}\n+     * or {@code io.quarkus.test.junit.mockito.InjectSpy}.\n      */\n     private static class SecondSubclass extends FirstSubclass {\n     }\n\ndiff --git a/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/DummyResourceTest.java b/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/DummyResourceTest.java\nindex 1c4b942ed31eb..7f23b62525e25 100644\n--- a/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/DummyResourceTest.java\n+++ b/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/DummyResourceTest.java\n@@ -9,8 +9,8 @@\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n+import io.quarkus.test.InjectMock;\n import io.quarkus.test.junit.QuarkusTest;\n-import io.quarkus.test.junit.mockito.InjectMock;\n \n @QuarkusTest\n class DummyResourceTest {\n\ndiff --git a/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/FooResourceTest.java b/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/FooResourceTest.java\nindex 6b367213e61e3..ea234186b9628 100644\n--- a/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/FooResourceTest.java\n+++ b/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/FooResourceTest.java\n@@ -9,13 +9,15 @@\n import org.junit.jupiter.api.Test;\n import org.mockito.Mockito;\n \n+import io.quarkus.test.InjectMock;\n import io.quarkus.test.junit.QuarkusTest;\n-import io.quarkus.test.junit.mockito.InjectMock;\n+import io.quarkus.test.junit.mockito.MockitoConfig;\n \n @QuarkusTest\n class FooResourceTest {\n \n-    @InjectMock(returnsDeepMocks = true)\n+    @InjectMock\n+    @MockitoConfig(returnsDeepMocks = true)\n     FooService fooService;\n \n     @Test\n\ndiff --git a/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/GenericFieldsTest.java b/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/GenericFieldsTest.java\nindex 3cffaa136f972..313bc6123e92f 100644\n--- a/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/GenericFieldsTest.java\n+++ b/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/GenericFieldsTest.java\n@@ -6,8 +6,8 @@\n import org.junit.jupiter.api.Test;\n import org.mockito.Mockito;\n \n+import io.quarkus.test.InjectMock;\n import io.quarkus.test.junit.QuarkusTest;\n-import io.quarkus.test.junit.mockito.InjectMock;\n \n @QuarkusTest\n public class GenericFieldsTest {\n\ndiff --git a/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/GreetingResourceTest.java b/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/GreetingResourceTest.java\nindex 59da48f321042..da5696cd49394 100644\n--- a/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/GreetingResourceTest.java\n+++ b/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/GreetingResourceTest.java\n@@ -7,8 +7,8 @@\n import org.junit.jupiter.api.Test;\n import org.mockito.Mockito;\n \n+import io.quarkus.test.InjectMock;\n import io.quarkus.test.junit.QuarkusTest;\n-import io.quarkus.test.junit.mockito.InjectMock;\n \n @QuarkusTest\n class GreetingResourceTest {\n\ndiff --git a/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/GreetingSingletonResourceMockTest.java b/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/GreetingSingletonResourceMockTest.java\nindex 52ca8be7def2c..0937e127fc764 100644\n--- a/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/GreetingSingletonResourceMockTest.java\n+++ b/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/GreetingSingletonResourceMockTest.java\n@@ -5,14 +5,16 @@\n import org.junit.jupiter.api.Test;\n import org.mockito.Mockito;\n \n+import io.quarkus.test.InjectMock;\n import io.quarkus.test.junit.QuarkusTest;\n-import io.quarkus.test.junit.mockito.InjectMock;\n+import io.quarkus.test.junit.mockito.MockitoConfig;\n \n @QuarkusTest\n class GreetingSingletonResourceMockTest {\n \n     // resteasy-reactive adds @Singleton automatically\n-    @InjectMock(convertScopes = true)\n+    @InjectMock\n+    @MockitoConfig(convertScopes = true)\n     GreetingResourceSingleton greetingResourceSingleton;\n \n     @Test\n\ndiff --git a/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/GreetingSingletonResourceTest.java b/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/GreetingSingletonResourceTest.java\nindex 5a066cf01482e..cf647d707c324 100644\n--- a/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/GreetingSingletonResourceTest.java\n+++ b/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/GreetingSingletonResourceTest.java\n@@ -10,21 +10,23 @@\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n \n+import io.quarkus.test.InjectMock;\n import io.quarkus.test.junit.QuarkusTest;\n-import io.quarkus.test.junit.mockito.InjectMock;\n import io.quarkus.test.junit.mockito.MockitoConfig;\n \n @QuarkusTest\n class GreetingSingletonResourceTest {\n \n-    @InjectMock(convertScopes = true)\n+    @InjectMock\n+    @MockitoConfig(convertScopes = true)\n     MessageServiceSingleton messageService;\n \n-    @io.quarkus.test.InjectMock\n+    @InjectMock\n     @MockitoConfig(convertScopes = true)\n     SuffixServiceSingleton suffixService;\n \n-    @InjectMock(convertScopes = true)\n+    @InjectMock\n+    @MockitoConfig(convertScopes = true)\n     CapitalizerServiceSingleton capitalizerService;\n \n     @Test\n\ndiff --git a/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/MockedObserverTest.java b/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/MockedObserverTest.java\nindex fb9075d9d22ff..355bec672e9b7 100644\n--- a/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/MockedObserverTest.java\n+++ b/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/MockedObserverTest.java\n@@ -12,8 +12,8 @@\n import org.junit.jupiter.api.Test;\n import org.mockito.Mockito;\n \n+import io.quarkus.test.InjectMock;\n import io.quarkus.test.junit.QuarkusTest;\n-import io.quarkus.test.junit.mockito.InjectMock;\n \n @QuarkusTest\n class MockedObserverTest {\n\ndiff --git a/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/NestedTest.java b/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/NestedTest.java\nindex 94f4060f26521..7d8ffda2a1d0d 100644\n--- a/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/NestedTest.java\n+++ b/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/NestedTest.java\n@@ -7,8 +7,8 @@\n import org.junit.jupiter.api.Test;\n import org.mockito.Mockito;\n \n+import io.quarkus.test.InjectMock;\n import io.quarkus.test.junit.QuarkusTest;\n-import io.quarkus.test.junit.mockito.InjectMock;\n \n @QuarkusTest\n public class NestedTest {\n\ndiff --git a/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/SameBeanInstanceTest.java b/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/SameBeanInstanceTest.java\nindex 8979dd408f102..3e8d88f7cf70b 100644\n--- a/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/SameBeanInstanceTest.java\n+++ b/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/SameBeanInstanceTest.java\n@@ -6,8 +6,8 @@\n \n import org.junit.jupiter.api.Test;\n \n+import io.quarkus.test.InjectMock;\n import io.quarkus.test.junit.QuarkusTest;\n-import io.quarkus.test.junit.mockito.InjectMock;\n \n @QuarkusTest\n public class SameBeanInstanceTest {\n\ndiff --git a/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/UnusedServiceTest.java b/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/UnusedServiceTest.java\nindex d3c3481429664..8082f409525d9 100644\n--- a/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/UnusedServiceTest.java\n+++ b/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/UnusedServiceTest.java\n@@ -4,8 +4,8 @@\n import org.junit.jupiter.api.Test;\n \n import io.quarkus.arc.Arc;\n+import io.quarkus.test.InjectMock;\n import io.quarkus.test.junit.QuarkusTest;\n-import io.quarkus.test.junit.mockito.InjectMock;\n \n @QuarkusTest\n public class UnusedServiceTest {\n\ndiff --git a/integration-tests/mongodb-panache-kotlin/src/test/kotlin/io/quarkus/it/mongodb/panache/MongodbPanacheMockingTest.kt b/integration-tests/mongodb-panache-kotlin/src/test/kotlin/io/quarkus/it/mongodb/panache/MongodbPanacheMockingTest.kt\nindex 1c789e4d4a087..1c14000e4433a 100644\n--- a/integration-tests/mongodb-panache-kotlin/src/test/kotlin/io/quarkus/it/mongodb/panache/MongodbPanacheMockingTest.kt\n+++ b/integration-tests/mongodb-panache-kotlin/src/test/kotlin/io/quarkus/it/mongodb/panache/MongodbPanacheMockingTest.kt\n@@ -5,8 +5,8 @@ import io.quarkus.it.mongodb.panache.person.Person\n import io.quarkus.it.mongodb.panache.person.PersonEntity\n import io.quarkus.it.mongodb.panache.person.PersonRepository\n import io.quarkus.mongodb.panache.kotlin.PanacheMongoRepositoryBase\n+import io.quarkus.test.InjectMock\n import io.quarkus.test.junit.QuarkusTest\n-import io.quarkus.test.junit.mockito.InjectMock\n import jakarta.inject.Inject\n import jakarta.ws.rs.WebApplicationException\n import java.util.Collections\n\ndiff --git a/integration-tests/mongodb-panache/src/test/java/io/quarkus/it/mongodb/panache/MongodbPanacheMockingTest.java b/integration-tests/mongodb-panache/src/test/java/io/quarkus/it/mongodb/panache/MongodbPanacheMockingTest.java\nindex ea0518704967d..5aa4790fa09c2 100644\n--- a/integration-tests/mongodb-panache/src/test/java/io/quarkus/it/mongodb/panache/MongodbPanacheMockingTest.java\n+++ b/integration-tests/mongodb-panache/src/test/java/io/quarkus/it/mongodb/panache/MongodbPanacheMockingTest.java\n@@ -16,8 +16,8 @@\n import io.quarkus.it.mongodb.panache.person.PersonRepository;\n import io.quarkus.mongodb.panache.PanacheMongoRepositoryBase;\n import io.quarkus.panache.mock.PanacheMock;\n+import io.quarkus.test.InjectMock;\n import io.quarkus.test.junit.QuarkusTest;\n-import io.quarkus.test.junit.mockito.InjectMock;\n \n @QuarkusTest\n public class MongodbPanacheMockingTest {\n\ndiff --git a/integration-tests/mongodb-panache/src/test/java/io/quarkus/it/mongodb/panache/reactive/ReactiveMongodbPanacheMockingTest.java b/integration-tests/mongodb-panache/src/test/java/io/quarkus/it/mongodb/panache/reactive/ReactiveMongodbPanacheMockingTest.java\nindex ad932612fac8c..96eb57d8c3812 100644\n--- a/integration-tests/mongodb-panache/src/test/java/io/quarkus/it/mongodb/panache/reactive/ReactiveMongodbPanacheMockingTest.java\n+++ b/integration-tests/mongodb-panache/src/test/java/io/quarkus/it/mongodb/panache/reactive/ReactiveMongodbPanacheMockingTest.java\n@@ -14,8 +14,8 @@\n import io.quarkus.it.mongodb.panache.reactive.person.MockableReactivePersonRepository;\n import io.quarkus.it.mongodb.panache.reactive.person.ReactivePersonEntity;\n import io.quarkus.panache.mock.PanacheMock;\n+import io.quarkus.test.InjectMock;\n import io.quarkus.test.junit.QuarkusTest;\n-import io.quarkus.test.junit.mockito.InjectMock;\n import io.smallrye.mutiny.Uni;\n \n @QuarkusTest\n\ndiff --git a/integration-tests/rest-client-reactive/src/main/java/io/quarkus/it/rest/client/main/FaultToleranceOnInterfaceClient.java b/integration-tests/rest-client-reactive/src/main/java/io/quarkus/it/rest/client/main/FaultToleranceOnInterfaceClient.java\nindex 3c0c4d3a181ce..aaa41b269020e 100644\n--- a/integration-tests/rest-client-reactive/src/main/java/io/quarkus/it/rest/client/main/FaultToleranceOnInterfaceClient.java\n+++ b/integration-tests/rest-client-reactive/src/main/java/io/quarkus/it/rest/client/main/FaultToleranceOnInterfaceClient.java\n@@ -12,7 +12,7 @@\n import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n \n @Path(\"/unprocessable\")\n-@RegisterRestClient(configKey = \"w-fault-tolerance\")\n+@RegisterRestClient(configKey = \"w-fault-tolerance-int\")\n @CircuitBreaker(requestVolumeThreshold = 2, delay = 1, delayUnit = ChronoUnit.MINUTES)\n public interface FaultToleranceOnInterfaceClient {\n     @GET\n\ndiff --git a/integration-tests/rest-client-reactive/src/test/java/io/quarkus/it/rest/client/BasicTest.java b/integration-tests/rest-client-reactive/src/test/java/io/quarkus/it/rest/client/BasicTest.java\nindex 74ece3afbb356..3dee48386c72a 100644\n--- a/integration-tests/rest-client-reactive/src/test/java/io/quarkus/it/rest/client/BasicTest.java\n+++ b/integration-tests/rest-client-reactive/src/test/java/io/quarkus/it/rest/client/BasicTest.java\n@@ -24,11 +24,14 @@\n import io.opentelemetry.api.trace.TraceId;\n import io.quarkus.test.common.http.TestHTTPResource;\n import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.QuarkusTestProfile;\n+import io.quarkus.test.junit.TestProfile;\n import io.restassured.RestAssured;\n import io.restassured.common.mapper.TypeRef;\n import io.restassured.response.Response;\n \n @QuarkusTest\n+@TestProfile(BasicTest.TestProfile.class)\n public class BasicTest {\n \n     @TestHTTPResource(\"/apples\")\n@@ -289,4 +292,11 @@ private List<Map<String, Object>> getClientSpansFromFullUrl(final String spanNam\n                         ((String) stringObjectMap.get(\"attr_url.full\")).startsWith(httpUrl))\n                 .collect(Collectors.toList());\n     }\n+\n+    public static class TestProfile implements QuarkusTestProfile {\n+        @Override\n+        public Map<String, String> getConfigOverrides() {\n+            return Map.of(\"w-fault-tolerance-int/mp-rest/url\", \"${test.url}\");\n+        }\n+    }\n }\n\ndiff --git a/integration-tests/rest-client-reactive/src/test/java/io/quarkus/it/rest/client/InjectMockTest.java b/integration-tests/rest-client-reactive/src/test/java/io/quarkus/it/rest/client/InjectMockTest.java\nindex 3e39e65f8f013..cea423ed50506 100644\n--- a/integration-tests/rest-client-reactive/src/test/java/io/quarkus/it/rest/client/InjectMockTest.java\n+++ b/integration-tests/rest-client-reactive/src/test/java/io/quarkus/it/rest/client/InjectMockTest.java\n@@ -11,8 +11,8 @@\n \n import io.quarkus.it.rest.client.main.ClientWithExceptionMapper;\n import io.quarkus.it.rest.client.main.MyResponseExceptionMapper;\n+import io.quarkus.test.InjectMock;\n import io.quarkus.test.junit.QuarkusTest;\n-import io.quarkus.test.junit.mockito.InjectMock;\n import io.restassured.RestAssured;\n \n @QuarkusTest\n\ndiff --git a/integration-tests/rest-client-reactive/src/test/java/io/quarkus/it/rest/client/InjectMockWithInterceptorTest.java b/integration-tests/rest-client-reactive/src/test/java/io/quarkus/it/rest/client/InjectMockWithInterceptorTest.java\nindex dad4e747d0d54..0bea1f0afdc71 100644\n--- a/integration-tests/rest-client-reactive/src/test/java/io/quarkus/it/rest/client/InjectMockWithInterceptorTest.java\n+++ b/integration-tests/rest-client-reactive/src/test/java/io/quarkus/it/rest/client/InjectMockWithInterceptorTest.java\n@@ -12,8 +12,8 @@\n import org.junit.jupiter.api.Test;\n \n import io.quarkus.it.rest.client.main.FaultToleranceOnInterfaceClient;\n+import io.quarkus.test.InjectMock;\n import io.quarkus.test.junit.QuarkusTest;\n-import io.quarkus.test.junit.mockito.InjectMock;\n import io.restassured.RestAssured;\n import io.smallrye.faulttolerance.api.CircuitBreakerMaintenance;\n \n\ndiff --git a/test-framework/junit5-component/src/main/java/io/quarkus/test/component/QuarkusComponentTestExtension.java b/test-framework/junit5-component/src/main/java/io/quarkus/test/component/QuarkusComponentTestExtension.java\nindex 9cf757f602bf0..7735c6716d62c 100644\n--- a/test-framework/junit5-component/src/main/java/io/quarkus/test/component/QuarkusComponentTestExtension.java\n+++ b/test-framework/junit5-component/src/main/java/io/quarkus/test/component/QuarkusComponentTestExtension.java\n@@ -1064,13 +1064,7 @@ private List<FieldInjector> injectFields(Class<?> testClass, Object testInstance\n     }\n \n     private List<Field> findInjectFields(Class<?> testClass, boolean scanEnclosingClasses) {\n-        List<Class<? extends Annotation>> injectAnnotations;\n-        Class<? extends Annotation> deprecatedInjectMock = loadDeprecatedInjectMock();\n-        if (deprecatedInjectMock != null) {\n-            injectAnnotations = List.of(Inject.class, InjectMock.class, deprecatedInjectMock);\n-        } else {\n-            injectAnnotations = List.of(Inject.class, InjectMock.class);\n-        }\n+        List<Class<? extends Annotation>> injectAnnotations = List.of(Inject.class, InjectMock.class);\n         List<Field> found = findFields(testClass, injectAnnotations);\n         if (scanEnclosingClasses) {\n             Class<?> enclosing = testClass.getEnclosingClass();\n@@ -1250,15 +1244,6 @@ private static Object handleListAll(java.lang.reflect.Type requiredType, Annotat\n                 : handles.stream().map(InstanceHandle::get).collect(Collectors.toUnmodifiableList());\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    private Class<? extends Annotation> loadDeprecatedInjectMock() {\n-        try {\n-            return (Class<? extends Annotation>) Class.forName(\"io.quarkus.test.junit.mockito.InjectMock\");\n-        } catch (Throwable e) {\n-            return null;\n-        }\n-    }\n-\n     private static boolean isListRequiredType(java.lang.reflect.Type type) {\n         if (type instanceof ParameterizedType) {\n             final ParameterizedType parameterizedType = (ParameterizedType) type;\n\ndiff --git a/test-framework/junit5-component/src/test/java/io/quarkus/test/component/declarative/InjectMockTest.java b/test-framework/junit5-component/src/test/java/io/quarkus/test/component/declarative/InjectMockTest.java\nindex a3ec60dbf0213..c3625d83baf40 100644\n--- a/test-framework/junit5-component/src/test/java/io/quarkus/test/component/declarative/InjectMockTest.java\n+++ b/test-framework/junit5-component/src/test/java/io/quarkus/test/component/declarative/InjectMockTest.java\n@@ -7,11 +7,11 @@\n import org.junit.jupiter.api.Test;\n import org.mockito.Mockito;\n \n+import io.quarkus.test.InjectMock;\n import io.quarkus.test.component.QuarkusComponentTest;\n import io.quarkus.test.component.TestConfigProperty;\n import io.quarkus.test.component.beans.Charlie;\n import io.quarkus.test.component.beans.MyComponent;\n-import io.quarkus.test.junit.mockito.InjectMock;\n \n @QuarkusComponentTest(MyComponent.class)\n @TestConfigProperty(key = \"foo\", value = \"BAR\")\n\ndiff --git a/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/InjectMock.java b/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/InjectMock.java\ndeleted file mode 100644\nindex 209ec79b45d01..0000000000000\n--- a/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/InjectMock.java\n+++ /dev/null\n@@ -1,32 +0,0 @@\n-package io.quarkus.test.junit.mockito;\n-\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n-\n-/**\n- * When used on a field of a test class, the field becomes a Mockito mock,\n- * that is then used to mock the normal scoped bean which the field represents.\n- *\n- * @deprecated Use {@link io.quarkus.test.InjectMock} and {@link MockitoConfig} instead.\n- */\n-@Deprecated(since = \"3.2\", forRemoval = true)\n-@Target(ElementType.FIELD)\n-@Retention(RetentionPolicy.RUNTIME)\n-public @interface InjectMock {\n-\n-    /**\n-     * If true, then Quarkus will change the scope of the target {@code Singleton} bean to {@code ApplicationScoped}\n-     * to make it mockable.\n-     * This is an advanced setting and should only be used if you don't rely on the differences between {@code Singleton}\n-     * and {@code ApplicationScoped} beans (for example it is invalid to read fields of {@code ApplicationScoped} beans\n-     * as a proxy stands in place of the actual implementation)\n-     */\n-    boolean convertScopes() default false;\n-\n-    /**\n-     * If true, the mock will be created with the {@link org.mockito.Mockito#RETURNS_DEEP_STUBS}\n-     */\n-    boolean returnsDeepMocks() default false;\n-}\n\ndiff --git a/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/CreateMockitoMocksCallback.java b/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/CreateMockitoMocksCallback.java\nindex 99bfce1995b5e..d38ac8cec48cf 100644\n--- a/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/CreateMockitoMocksCallback.java\n+++ b/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/CreateMockitoMocksCallback.java\n@@ -14,8 +14,8 @@\n import io.quarkus.arc.Arc;\n import io.quarkus.arc.ArcContainer;\n import io.quarkus.arc.InstanceHandle;\n+import io.quarkus.test.InjectMock;\n import io.quarkus.test.junit.callback.QuarkusTestAfterConstructCallback;\n-import io.quarkus.test.junit.mockito.InjectMock;\n import io.quarkus.test.junit.mockito.MockitoConfig;\n \n public class CreateMockitoMocksCallback implements QuarkusTestAfterConstructCallback {\n@@ -25,17 +25,11 @@ public void afterConstruct(Object testInstance) {\n         Class<?> current = testInstance.getClass();\n         while (current.getSuperclass() != null) {\n             for (Field field : current.getDeclaredFields()) {\n-                InjectMock deprecatedInjectMock = field.getAnnotation(InjectMock.class);\n-                if (deprecatedInjectMock != null) {\n-                    boolean returnsDeepMocks = deprecatedInjectMock.returnsDeepMocks();\n+                InjectMock injectMock = field.getAnnotation(InjectMock.class);\n+                if (injectMock != null) {\n+                    MockitoConfig config = field.getAnnotation(MockitoConfig.class);\n+                    boolean returnsDeepMocks = config != null ? config.returnsDeepMocks() : false;\n                     injectField(testInstance, field, InjectMock.class, returnsDeepMocks);\n-                } else {\n-                    io.quarkus.test.InjectMock injectMock = field.getAnnotation(io.quarkus.test.InjectMock.class);\n-                    if (injectMock != null) {\n-                        MockitoConfig config = field.getAnnotation(MockitoConfig.class);\n-                        boolean returnsDeepMocks = config != null ? config.returnsDeepMocks() : false;\n-                        injectField(testInstance, field, io.quarkus.test.InjectMock.class, returnsDeepMocks);\n-                    }\n                 }\n             }\n             current = current.getSuperclass();\n\ndiff --git a/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/SetMockitoMockAsBeanMockCallback.java b/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/SetMockitoMockAsBeanMockCallback.java\nindex c8409f1b9028a..9840a46ac9ff0 100644\n--- a/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/SetMockitoMockAsBeanMockCallback.java\n+++ b/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/SetMockitoMockAsBeanMockCallback.java\n@@ -22,7 +22,7 @@ private void installMock(MockitoMocksTracker.Mocked mocked) {\n         } catch (Exception e) {\n             throw new RuntimeException(mocked.beanInstance()\n                     + \" is not a normal scoped CDI bean, make sure the bean is a normal scope like @ApplicationScoped or @RequestScoped.\"\n-                    + \" Alternatively you can use '@InjectMock(convertScopes=true)' instead of '@InjectMock' if you would like\"\n+                    + \" Alternatively you can use '@MockitoConfig(convertScopes = true)' in addition to '@InjectMock' if you would like\"\n                     + \" Quarkus to automatically make that conversion (you should only use this if you understand the implications).\");\n         }\n     }\n\ndiff --git a/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/SingletonToApplicationScopedTestBuildChainCustomizerProducer.java b/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/SingletonToApplicationScopedTestBuildChainCustomizerProducer.java\nindex d9b0709c27fb8..fdafcf5a3c3e8 100644\n--- a/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/SingletonToApplicationScopedTestBuildChainCustomizerProducer.java\n+++ b/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/SingletonToApplicationScopedTestBuildChainCustomizerProducer.java\n@@ -24,15 +24,14 @@\n import io.quarkus.builder.BuildChainBuilder;\n import io.quarkus.builder.BuildContext;\n import io.quarkus.builder.BuildStep;\n+import io.quarkus.test.InjectMock;\n import io.quarkus.test.junit.buildchain.TestBuildChainCustomizerProducer;\n-import io.quarkus.test.junit.mockito.InjectMock;\n import io.quarkus.test.junit.mockito.InjectSpy;\n import io.quarkus.test.junit.mockito.MockitoConfig;\n \n public class SingletonToApplicationScopedTestBuildChainCustomizerProducer implements TestBuildChainCustomizerProducer {\n \n-    static final DotName INJECT_MOCK = DotName.createSimple(io.quarkus.test.InjectMock.class.getName());\n-    static final DotName DEPRECATED_INJECT_MOCK = DotName.createSimple(InjectMock.class.getName());\n+    static final DotName INJECT_MOCK = DotName.createSimple(InjectMock.class.getName());\n     static final DotName INJECT_SPY = DotName.createSimple(InjectSpy.class.getName());\n     static final DotName MOCKITO_CONFIG = DotName.createSimple(MockitoConfig.class.getName());\n \n@@ -47,7 +46,6 @@ public void accept(BuildChainBuilder buildChainBuilder) {\n                     public void execute(BuildContext context) {\n                         Set<DotName> mockTypes = new HashSet<>();\n                         List<AnnotationInstance> instances = new ArrayList<>();\n-                        instances.addAll(testClassesIndex.getAnnotations(DEPRECATED_INJECT_MOCK));\n                         instances.addAll(testClassesIndex.getAnnotations(INJECT_SPY));\n                         instances.addAll(testClassesIndex.getAnnotations(MOCKITO_CONFIG));\n                         for (AnnotationInstance instance : instances) {\n\ndiff --git a/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/UnremoveableMockTestBuildChainCustomizerProducer.java b/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/UnremoveableMockTestBuildChainCustomizerProducer.java\nindex 2cf787127ca75..905233d3dce73 100644\n--- a/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/UnremoveableMockTestBuildChainCustomizerProducer.java\n+++ b/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/UnremoveableMockTestBuildChainCustomizerProducer.java\n@@ -27,10 +27,9 @@ public void accept(BuildChainBuilder buildChainBuilder) {\n                     @Override\n                     public void execute(BuildContext context) {\n                         Set<String> mockTypes = new HashSet<>();\n-                        List<AnnotationInstance> instances = new ArrayList<>(testClassesIndex.getAnnotations(\n-                                SingletonToApplicationScopedTestBuildChainCustomizerProducer.DEPRECATED_INJECT_MOCK));\n-                        instances.addAll(testClassesIndex\n-                                .getAnnotations(SingletonToApplicationScopedTestBuildChainCustomizerProducer.INJECT_MOCK));\n+                        List<AnnotationInstance> instances = new ArrayList<>(testClassesIndex\n+                                .getAnnotations(\n+                                        SingletonToApplicationScopedTestBuildChainCustomizerProducer.INJECT_MOCK));\n                         for (AnnotationInstance instance : instances) {\n                             mockTypes.add(instance.target().asField().type().name().toString());\n                         }\n\ndiff --git a/test-framework/junit5/src/main/java/io/quarkus/test/junit/MockSupport.java b/test-framework/junit5/src/main/java/io/quarkus/test/junit/MockSupport.java\nindex c730281b34366..4aef9804fb807 100644\n--- a/test-framework/junit5/src/main/java/io/quarkus/test/junit/MockSupport.java\n+++ b/test-framework/junit5/src/main/java/io/quarkus/test/junit/MockSupport.java\n@@ -24,8 +24,8 @@ static void popContext() {\n         List<Object> val = contexts.pop();\n         for (Object i : val) {\n             try {\n-                if (i instanceof MockedThroughWrapper) {\n-                    ((MockedThroughWrapper) i).clearMock();\n+                if (i instanceof MockedThroughWrapper m) {\n+                    m.clearMock();\n                 } else {\n                     i.getClass().getDeclaredMethod(\"arc$clearMock\").invoke(i);\n \n@@ -45,8 +45,8 @@ static <T> void installMock(T instance, T mock) {\n             throw new IllegalStateException(\"No test in progress\");\n         }\n         try {\n-            if (instance instanceof MockedThroughWrapper) {\n-                ((MockedThroughWrapper) instance).setMock(mock);\n+            if (instance instanceof MockedThroughWrapper m) {\n+                m.setMock(mock);\n                 inst.add(instance);\n             } else {\n \n\ndiff --git a/test-framework/junit5/src/main/java/io/quarkus/test/junit/internal/VerifyMockitoMocksCallback.java b/test-framework/junit5/src/main/java/io/quarkus/test/junit/internal/VerifyMockitoMocksCallback.java\nindex 02d1f28212646..023587978d6b8 100644\n--- a/test-framework/junit5/src/main/java/io/quarkus/test/junit/internal/VerifyMockitoMocksCallback.java\n+++ b/test-framework/junit5/src/main/java/io/quarkus/test/junit/internal/VerifyMockitoMocksCallback.java\n@@ -16,8 +16,8 @@ public class VerifyMockitoMocksCallback implements QuarkusTestAfterConstructCall\n \n     @Override\n     public void afterConstruct(Object testInstance) {\n-        Class<? extends Annotation> deprecatedInjectMock = loadDeprecatedInjectMock();\n-        if (deprecatedInjectMock == null) {\n+        Class<? extends Annotation> mockitoConfig = loadMockitoConfig();\n+        if (mockitoConfig == null) { // this means that the quarkus-junit5-mockito dependency was not added\n             List<Field> injectMockFields = new ArrayList<>();\n             Class<?> current = testInstance.getClass();\n             while (current != null) {\n@@ -37,10 +37,10 @@ public void afterConstruct(Object testInstance) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    private Class<? extends Annotation> loadDeprecatedInjectMock() {\n+    private Class<? extends Annotation> loadMockitoConfig() {\n         try {\n-            return (Class<? extends Annotation>) Class.forName(\"io.quarkus.test.junit.mockito.InjectMock\");\n-        } catch (Throwable e) {\n+            return (Class<? extends Annotation>) Class.forName(\"io.quarkus.test.junit.mockito.MockitoConfig\");\n+        } catch (ClassNotFoundException ignored) {\n             return null;\n         }\n     }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47386",
    "pr_id": 47386,
    "issue_id": 26496,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Matching a base path of another controller, results in `405 Method Not Allowed`\n### Describe the bug\n\nIt took me some time to understand the bug I am hitting, but now I am pretty certain it's a bug and it's reproducible. Let's imagine you have two controllers:\r\n\r\n```\r\n@Path(\"/base\")\r\nclass Base {\r\n\r\n   @GET\r\n   @Path(\"{id}\") \r\n   public Uni<RestResponse<?>> base() {..}\r\n}\r\n\r\n@Path(\"/base/{id}\")\r\nclass Extension {\r\n\r\n   @GET\r\n   @Path(\"extension\") \r\n   public Uni<RestResponse<?>> extension() {..}\r\n}\r\n```\r\n\r\nCalling `GET /base/123` will result in `HTTP 405 Method Not Allowed`. Note that:\r\n\r\n* endpoints are correctly visible in the Dev UI `List of endpoints`\r\n* endpoints are correctly included in Open API and Swagger UI\r\n\r\nHowever, seems that the base-path of the second controller is hiding the first controller in case when things are getting resolved in the `org.jboss.resteasy.reactive.server.handlers.ClassRoutingHandler`.  \n\n### Expected behavior\n\nTarget method executed correctly.\n\n### Actual behavior\n\n`405 Method Not Allowed`\n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### GraalVM version (if different from Java)\n\n_No response_\n\n### Quarkus version or git rev\n\n2.10.0.Final\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nMaven home: /home/ise/.m2/wrapper/dists/apache-maven-3.8.4-bin/52ccbt68d252mdldqsfsn03jlf/apache-maven-3.8.4 Java version: 17.0.3, vendor: Private Build, runtime: /usr/lib/jvm/java-17-openjdk-amd64 Default locale: en_US, platform encoding: UTF-8 OS name: \"linux\", version: \"5.13.0-51-generic\", arch: \"amd64\", family: \"unix\"\n\n### Additional information\n\nWorkaround is to match base paths in both controllers:\r\n\r\n```\r\n@Path(\"/base\")\r\nclass Base {\r\n\r\n   @GET\r\n   @Path(\"{id}\") \r\n   public Uni<RestResponse<?>> base() {..}\r\n}\r\n\r\n@Path(\"/base\")\r\nclass Extension {\r\n\r\n   @GET\r\n   @Path(\"{id}/extension\") \r\n   public Uni<RestResponse<?>> extension() {..}\r\n}\r\n```",
    "issue_word_count": 285,
    "test_files_count": 2,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/OverlappingResourceClassPathTest.java",
      "extensions/resteasy-reactive/rest/runtime/src/test/java/io/quarkus/resteasy/reactive/runtime/mapping/RequestMapperTestCase.java",
      "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java",
      "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/ClassRoutingHandler.java",
      "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/RestInitialHandler.java",
      "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/mapping/RequestMapper.java"
    ],
    "pr_changed_test_files": [
      "extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/OverlappingResourceClassPathTest.java",
      "extensions/resteasy-reactive/rest/runtime/src/test/java/io/quarkus/resteasy/reactive/runtime/mapping/RequestMapperTestCase.java"
    ],
    "base_commit": "244937ac27c360f1bb945399ca657d05e8c6e0dc",
    "head_commit": "6b67e052ff355782ac4eba5d5f392c702c594a7d",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47386",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47386",
    "dockerfile": "",
    "pr_merged_at": "2025-05-15T09:18:34.000Z",
    "patch": "diff --git a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java\nindex 289625c40fdcf..5efd63f98183f 100644\n--- a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java\n+++ b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java\n@@ -51,6 +51,7 @@\n import org.jboss.resteasy.reactive.server.SimpleResourceInfo;\n import org.jboss.resteasy.reactive.server.core.multipart.FormData;\n import org.jboss.resteasy.reactive.server.core.serialization.EntityWriter;\n+import org.jboss.resteasy.reactive.server.handlers.RestInitialHandler;\n import org.jboss.resteasy.reactive.server.injection.ResteasyReactiveInjectionContext;\n import org.jboss.resteasy.reactive.server.jaxrs.AsyncResponseImpl;\n import org.jboss.resteasy.reactive.server.jaxrs.ContainerRequestContextImpl;\n@@ -62,6 +63,7 @@\n import org.jboss.resteasy.reactive.server.jaxrs.SseEventSinkImpl;\n import org.jboss.resteasy.reactive.server.jaxrs.SseImpl;\n import org.jboss.resteasy.reactive.server.jaxrs.UriInfoImpl;\n+import org.jboss.resteasy.reactive.server.mapping.RequestMapper;\n import org.jboss.resteasy.reactive.server.mapping.RuntimeResource;\n import org.jboss.resteasy.reactive.server.mapping.URITemplate;\n import org.jboss.resteasy.reactive.server.multipart.FormValue;\n@@ -156,6 +158,8 @@ public abstract class ResteasyReactiveRequestContext\n     private FormData formData;\n     private boolean producesChecked;\n \n+    private RequestMapper.RequestMatch<RestInitialHandler.InitialMatch> initialMatch;\n+\n     public ResteasyReactiveRequestContext(Deployment deployment,\n             ThreadSetupAction requestContext, ServerRestHandler[] handlerChain, ServerRestHandler[] abortHandlerChain) {\n         super(handlerChain, abortHandlerChain, requestContext);\n@@ -203,6 +207,44 @@ public void restart(RuntimeResource target, boolean setLocatorTarget) {\n         this.target = target;\n     }\n \n+    public void setupInitialMatchAndRestart(RequestMapper.RequestMatch<RestInitialHandler.InitialMatch> initialMatch) {\n+        this.initialMatch = initialMatch;\n+\n+        restart(initialMatch.value.handlers);\n+        setMaxPathParams(initialMatch.value.maxPathParams);\n+        setRemaining(initialMatch.remaining);\n+        for (int i = 0; i < initialMatch.pathParamValues.length; ++i) {\n+            String pathParamValue = initialMatch.pathParamValues[i];\n+            if (pathParamValue == null) {\n+                break;\n+            }\n+            setPathParamValue(i, initialMatch.pathParamValues[i]);\n+        }\n+    }\n+\n+    /**\n+     * Restarts handler chain processing if another initial match is found.\n+     *\n+     * @return true if a restart occurred\n+     */\n+    public boolean restartWithNextInitialMatch() {\n+        initialMatch = new RequestMapper<>(deployment.getClassMappers()).continueMatching(getPathWithoutPrefix(), initialMatch);\n+        if (initialMatch == null) {\n+            return false;\n+        }\n+        restart(initialMatch.value.handlers);\n+        setMaxPathParams(initialMatch.value.maxPathParams);\n+        setRemaining(initialMatch.remaining);\n+        for (int i = 0; i < initialMatch.pathParamValues.length; ++i) {\n+            String pathParamValue = initialMatch.pathParamValues[i];\n+            if (pathParamValue == null) {\n+                break;\n+            }\n+            setPathParamValue(i, initialMatch.pathParamValues[i]);\n+        }\n+        return true;\n+    }\n+\n     /**\n      * Meant to be used when an error occurred early in processing chain\n      */\n\ndiff --git a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/ClassRoutingHandler.java b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/ClassRoutingHandler.java\nindex 8c23885d37674..c7434b396aefb 100644\n--- a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/ClassRoutingHandler.java\n+++ b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/ClassRoutingHandler.java\n@@ -66,6 +66,9 @@ public void handle(ResteasyReactiveRequestContext requestContext) throws Excepti\n                 mapper = mappers.get(null);\n             }\n             if (mapper == null) {\n+                if (requestContext.restartWithNextInitialMatch()) {\n+                    return;\n+                }\n                 // The idea here is to check if any of the mappers of the class could map the request - if the HTTP Method were correct\n                 String remaining = getRemaining(requestContext);\n                 for (RequestMapper<RuntimeResource> existingMapper : mappers.values()) {\n@@ -89,6 +92,9 @@ public void handle(ResteasyReactiveRequestContext requestContext) throws Excepti\n             }\n \n             if (target == null) {\n+                if (requestContext.restartWithNextInitialMatch()) {\n+                    return;\n+                }\n                 // The idea here is to check if any of the mappers of the class could map the request - if the HTTP Method were correct\n                 for (Map.Entry<String, RequestMapper<RuntimeResource>> entry : mappers.entrySet()) {\n                     if (entry.getKey() == null) {\n\ndiff --git a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/RestInitialHandler.java b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/RestInitialHandler.java\nindex 6afebf58c4fe9..84f30d6ff4cb6 100644\n--- a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/RestInitialHandler.java\n+++ b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/RestInitialHandler.java\n@@ -73,16 +73,7 @@ public void handle(ResteasyReactiveRequestContext requestContext) throws Excepti\n                 return;\n             }\n         }\n-        requestContext.restart(target.value.handlers);\n-        requestContext.setMaxPathParams(target.value.maxPathParams);\n-        requestContext.setRemaining(target.remaining);\n-        for (int i = 0; i < target.pathParamValues.length; ++i) {\n-            String pathParamValue = target.pathParamValues[i];\n-            if (pathParamValue == null) {\n-                break;\n-            }\n-            requestContext.setPathParamValue(i, target.pathParamValues[i]);\n-        }\n+        requestContext.setupInitialMatchAndRestart(target);\n     }\n \n     public static class InitialMatch {\n\ndiff --git a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/mapping/RequestMapper.java b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/mapping/RequestMapper.java\nindex 6c5d8869d3a75..e85367904451a 100644\n--- a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/mapping/RequestMapper.java\n+++ b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/mapping/RequestMapper.java\n@@ -4,7 +4,6 @@\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashMap;\n-import java.util.List;\n import java.util.Map;\n import java.util.function.BiConsumer;\n import java.util.regex.Matcher;\n@@ -42,30 +41,84 @@ public void accept(String stem, ArrayList<RequestPath<T>> list) {\n         requestPaths = pathMatcherBuilder.build();\n     }\n \n+    /**\n+     * Match the path to the UriTemplates. Returns the best match, meaning the least remaining path after match.\n+     *\n+     * @param path path to search UriTemplate for\n+     * @return best RequestMatch, or null if the path has no match\n+     */\n     public RequestMatch<T> map(String path) {\n-        var result = mapFromPathMatcher(path, requestPaths.match(path));\n+        var result = mapFromPathMatcher(path, requestPaths.match(path), 0);\n         if (result != null) {\n             return result;\n         }\n \n         // the following code is meant to handle cases like https://github.com/quarkusio/quarkus/issues/30667\n-        return mapFromPathMatcher(path, requestPaths.defaultMatch(path));\n+        return mapFromPathMatcher(path, requestPaths.defaultMatch(path), 0);\n+    }\n+\n+    /**\n+     * Continue matching for the next best path starting from the last match, meaning the least remaining path after match.\n+     *\n+     * @param path path to search UriTemplate for\n+     * @return another RequestMatch. Might return null if all matches are exhausted.\n+     */\n+    public RequestMatch<T> continueMatching(String path, RequestMatch<T> lastMatch) {\n+        if (lastMatch == null) {\n+            return null;\n+        }\n+\n+        var initialMatches = requestPaths.match(path);\n+        var result = mapFromPathMatcher(path, initialMatches, 0);\n+        if (result != null) {\n+            int idx = nextMatchStartingIndex(initialMatches, lastMatch);\n+            return mapFromPathMatcher(path, initialMatches, idx);\n+        }\n+\n+        // the following code is meant to handle cases like https://github.com/quarkusio/quarkus/issues/30667\n+        initialMatches = requestPaths.defaultMatch(path);\n+        result = mapFromPathMatcher(path, initialMatches, 0);\n+        if (result != null) {\n+            int idx = nextMatchStartingIndex(initialMatches, lastMatch);\n+            return mapFromPathMatcher(path, initialMatches, idx);\n+        }\n+        return null;\n+    }\n+\n+    private int nextMatchStartingIndex(PathMatcher.PathMatch<ArrayList<RequestPath<T>>> initialMatches,\n+            RequestMatch<T> current) {\n+        if (initialMatches.getValue() == null || initialMatches.getValue().isEmpty()) {\n+            return -1;\n+        }\n+        for (int i = 0; i < initialMatches.getValue().size(); i++) {\n+            if (initialMatches.getValue().get(i).template == current.template) {\n+                i++;\n+\n+                if (i < initialMatches.getValue().size()) {\n+                    return i;\n+                }\n+                return -1;\n+            }\n+        }\n+\n+        return -1;\n     }\n \n     @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n-    private RequestMatch<T> mapFromPathMatcher(String path, PathMatcher.PathMatch<ArrayList<RequestPath<T>>> initialMatch) {\n-        var value = initialMatch.getValue();\n-        if (initialMatch.getValue() == null) {\n+    private RequestMatch<T> mapFromPathMatcher(String path, PathMatcher.PathMatch<ArrayList<RequestPath<T>>> initialMatches,\n+            int startIdx) {\n+        var value = initialMatches.getValue();\n+        if (value == null || startIdx < 0) {\n             return null;\n         }\n         int pathLength = path.length();\n-        for (int index = 0; index < ((List<RequestPath<T>>) value).size(); index++) {\n-            RequestPath<T> potentialMatch = ((List<RequestPath<T>>) value).get(index);\n+        for (int index = startIdx; index < value.size(); index++) {\n+            RequestPath<T> potentialMatch = value.get(index);\n             String[] params = (maxParams > 0) ? new String[maxParams] : EMPTY_STRING_ARRAY;\n             int paramCount = 0;\n             boolean matched = true;\n             boolean prefixAllowed = potentialMatch.prefixTemplate;\n-            int matchPos = initialMatch.getMatched().length();\n+            int matchPos = initialMatches.getMatched().length();\n             for (int i = 1; i < potentialMatch.template.components.length; ++i) {\n                 URITemplate.TemplateComponent segment = potentialMatch.template.components[i];\n                 if (segment.type == URITemplate.Type.CUSTOM_REGEX) {\n",
    "test_patch": "diff --git a/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/OverlappingResourceClassPathTest.java b/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/OverlappingResourceClassPathTest.java\nnew file mode 100644\nindex 0000000000000..1e2245a24d724\n--- /dev/null\n+++ b/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/OverlappingResourceClassPathTest.java\n@@ -0,0 +1,79 @@\n+package io.quarkus.resteasy.reactive.server.test.resource.basic;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+import java.util.function.Supplier;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+\n+import org.jboss.resteasy.reactive.RestPath;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.resteasy.reactive.server.test.simple.PortProviderUtil;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+class OverlappingResourceClassPathTest {\n+    @RegisterExtension\n+    static QuarkusUnitTest testExtension = new QuarkusUnitTest()\n+            .setArchiveProducer(new Supplier<>() {\n+                @Override\n+                public JavaArchive get() {\n+                    JavaArchive war = ShrinkWrap.create(JavaArchive.class);\n+                    war.addClasses(PortProviderUtil.class);\n+                    war.addClasses(UsersResource.class);\n+                    war.addClasses(UserResource.class);\n+                    war.addClasses(GreetingResource.class);\n+                    return war;\n+                }\n+            });\n+\n+    @Test\n+    void basicTest() {\n+        given()\n+                .get(\"/users/userId\")\n+                .then()\n+                .statusCode(200)\n+                .body(equalTo(\"userId\"));\n+\n+        given()\n+                .get(\"/users/userId/by-id\")\n+                .then()\n+                .statusCode(200)\n+                .body(equalTo(\"getByIdInUserResource-userId\"));\n+    }\n+\n+    @Path(\"/users\")\n+    public static class UsersResource {\n+\n+        @GET\n+        @Path(\"{id}\")\n+        public String getByIdInUsersResource(@RestPath String id) {\n+            return id;\n+        }\n+    }\n+\n+    @Path(\"/users/{id}\")\n+    public static class UserResource {\n+\n+        @GET\n+        @Path(\"by-id\")\n+        public String getByIdInUserResource(@RestPath String id) {\n+            return \"getByIdInUserResource-\" + id;\n+        }\n+    }\n+\n+    @Path(\"/i-do-not-match\")\n+    public static class GreetingResource {\n+\n+        @GET\n+        @Path(\"greet\")\n+        public String greet() {\n+            return \"Hello\";\n+        }\n+    }\n+}\n\ndiff --git a/extensions/resteasy-reactive/rest/runtime/src/test/java/io/quarkus/resteasy/reactive/runtime/mapping/RequestMapperTestCase.java b/extensions/resteasy-reactive/rest/runtime/src/test/java/io/quarkus/resteasy/reactive/runtime/mapping/RequestMapperTestCase.java\nindex 3e78532428fb9..1964c1c09400d 100644\n--- a/extensions/resteasy-reactive/rest/runtime/src/test/java/io/quarkus/resteasy/reactive/runtime/mapping/RequestMapperTestCase.java\n+++ b/extensions/resteasy-reactive/rest/runtime/src/test/java/io/quarkus/resteasy/reactive/runtime/mapping/RequestMapperTestCase.java\n@@ -10,9 +10,9 @@\n public class RequestMapperTestCase {\n \n     @Test\n-    public void testPathMapper() {\n+    void testMap() {\n \n-        RequestMapper<String> mapper = mapper(\"/id\", \"/id/{param}\", \"/bar/{p1}/{p2}\", \"/bar/{p1}\");\n+        RequestMapper<String> mapper = mapper(false, \"/id\", \"/id/{param}\", \"/bar/{p1}/{p2}\", \"/bar/{p1}\");\n         mapper.dump();\n \n         RequestMapper.RequestMatch<String> result = mapper.map(\"/bar/34/44\");\n@@ -31,13 +31,32 @@ public void testPathMapper() {\n         result = mapper.map(\"/bar/34\");\n         Assertions.assertEquals(\"/bar/{p1}\", result.value);\n         Assertions.assertEquals(\"34\", result.pathParamValues[0]);\n+    }\n+\n+    @Test\n+    public void testContinueMatching() {\n+        RequestMapper<String> mapper = mapper(true, \"/greetings\", \"/greetings/{id}\", \"/greetings/unrelated\");\n+        mapper.dump();\n+\n+        var result = mapper.map(\"/not-existing\");\n+        Assertions.assertNull(result);\n+\n+        result = mapper.map(\"/greetings/greeting-id\");\n+        Assertions.assertNotNull(result);\n+        Assertions.assertEquals(\"\", result.remaining);\n+\n+        result = mapper.continueMatching(\"/greetings/greeting-id\", result);\n+        Assertions.assertNotNull(result);\n+        Assertions.assertEquals(\"/greeting-id\", result.remaining);\n \n+        result = mapper.continueMatching(\"/greetings/greeting-id\", result);\n+        Assertions.assertNull(result);\n     }\n \n-    RequestMapper<String> mapper(String... vals) {\n+    RequestMapper<String> mapper(boolean prefixTemplates, String... vals) {\n         ArrayList<RequestMapper.RequestPath<String>> list = new ArrayList<>();\n         for (String i : vals) {\n-            list.add(new RequestMapper.RequestPath<>(false, new URITemplate(i, false), i));\n+            list.add(new RequestMapper.RequestPath<>(prefixTemplates, new URITemplate(i, false), i));\n         }\n         return new RequestMapper<>(list);\n     }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47379",
    "pr_id": 47379,
    "issue_id": 47082,
    "repo": "quarkusio/quarkus",
    "problem_statement": "ServiceLoader triggered from custom JUnit extensions results in ServiceConfigurationError\n### Describe the bug\n\nSlight variation of https://github.com/quarkusio/quarkus/issues/47081.\n\nThis time using a custom JUnit condition that uses a Testcontainers API which results in `ServiceLoader` being used. In this case `DockerClientFactory.instance().dockerHostIpAddress()` results in:\n\n```\n java.util.ServiceConfigurationError: org.testcontainers.dockerclient.DockerClientProviderStrategy: org.testcontainers.dockerclient.TestcontainersHostPropertyClientProviderStrategy not a subtype\n    at java.base/java.util.ServiceLoader.fail(ServiceLoader.java:593)\n    at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.hasNextService(ServiceLoader.java:1244)\n    at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.hasNext(ServiceLoader.java:1273)\n    at java.base/java.util.ServiceLoader$2.hasNext(ServiceLoader.java:1309)\n    at java.base/java.util.ServiceLoader$3.hasNext(ServiceLoader.java:1393)\n    at java.base/java.lang.Iterable.forEach(Iterable.java:74)\n    at org.testcontainers.DockerClientFactory.getOrInitializeStrategy(DockerClientFactory.java:152)\n    at org.testcontainers.DockerClientFactory.dockerHostIpAddress(DockerClientFactory.java:344)\n    at org.apache.camel.quarkus.test.support.certificate.TestCertificateGenerationExtension.resolveDockerHost(TestCertificateGenerationExtension.java:113)\n```\n\nHere's a reproducer app (see details below).\n\n[junit-extension-test.zip](https://github.com/user-attachments/files/19535506/junit-extension-test.zip)\n\n\n### Expected behavior\n\n_No response_\n\n### Actual behavior\n\n_No response_\n\n### How to Reproduce?\n\nSee attached reproducer app.\n\nReplicate the failure with `mvn clean test`. To activate a TCCL switch that fixes the test do `mvn clean test  -DswitchTCCL=true`.\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### Quarkus version or git rev\n\n999-SNAPSHOT\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
    "issue_word_count": 252,
    "test_files_count": 11,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "integration-tests/maven/src/test/java/io/quarkus/maven/it/QuarkusTestIT.java",
      "integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/pom.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/main/java/org/acme/HelloResource.java",
      "integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/main/java/org/acme/MyApplication.java",
      "integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/main/resources/META-INF/beans.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/main/resources/META-INF/resources/index.html",
      "integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/main/resources/application.properties",
      "integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/test/java/org/acme/CustomBeforeAllCallback.java",
      "integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/test/java/org/acme/ExampleTest.java",
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/ExecutionListener.java",
      "test-framework/junit5/src/main/resources/META-INF/services/org.junit.platform.launcher.TestExecutionListener"
    ],
    "pr_changed_test_files": [
      "integration-tests/maven/src/test/java/io/quarkus/maven/it/QuarkusTestIT.java",
      "integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/pom.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/main/java/org/acme/HelloResource.java",
      "integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/main/java/org/acme/MyApplication.java",
      "integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/main/resources/META-INF/beans.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/main/resources/META-INF/resources/index.html",
      "integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/main/resources/application.properties",
      "integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/test/java/org/acme/CustomBeforeAllCallback.java",
      "integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/test/java/org/acme/ExampleTest.java",
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/ExecutionListener.java",
      "test-framework/junit5/src/main/resources/META-INF/services/org.junit.platform.launcher.TestExecutionListener"
    ],
    "base_commit": "73b9458932922557edaaf7b4087deb1c479ac8f5",
    "head_commit": "98f294cf57c8fd48e4c082739ea091d25751f154",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47379",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47379",
    "dockerfile": "",
    "pr_merged_at": "2025-04-16T07:34:43.000Z",
    "patch": "",
    "test_patch": "diff --git a/integration-tests/maven/src/test/java/io/quarkus/maven/it/QuarkusTestIT.java b/integration-tests/maven/src/test/java/io/quarkus/maven/it/QuarkusTestIT.java\nindex 5ce35ad77eb34..923997f7bc14e 100644\n--- a/integration-tests/maven/src/test/java/io/quarkus/maven/it/QuarkusTestIT.java\n+++ b/integration-tests/maven/src/test/java/io/quarkus/maven/it/QuarkusTestIT.java\n@@ -23,6 +23,40 @@\n  */\n public class QuarkusTestIT extends RunAndCheckMojoTestBase {\n \n+    @Test\n+    public void testQuarkusTestWithThirdPartyExtensionContinuousTesting()\n+            throws MavenInvocationException, FileNotFoundException {\n+        //we also check continuous testing\n+        String sourceDir = \"projects/test-third-party-junit-extension\";\n+        testDir = initProject(sourceDir, sourceDir + \"-processed-devmode\");\n+\n+        runAndCheck();\n+\n+        ContinuousTestingMavenTestUtils testingTestUtils = new ContinuousTestingMavenTestUtils(getPort());\n+        ContinuousTestingMavenTestUtils.TestStatus results = testingTestUtils.waitForNextCompletion();\n+        // This is a bit brittle when we add tests, but failures are often so catastrophic they're not even reported as failures,\n+        // so we need to check the pass count explicitly\n+        Assertions.assertEquals(0, results.getTestsFailed());\n+        Assertions.assertEquals(1, results.getTestsPassed());\n+    }\n+\n+    @Test\n+    public void testQuarkusTestWithThirdPartyExtension()\n+            throws MavenInvocationException, InterruptedException {\n+        String sourceDir = \"projects/test-third-party-junit-extension\";\n+        testDir = initProject(sourceDir, sourceDir + \"-processed\");\n+        RunningInvoker invoker = new RunningInvoker(testDir, false);\n+\n+        // to properly surface the problem of multiple classpath entries, we need to install the project to the local m2\n+        MavenProcessInvocationResult installInvocation = invoker.execute(\n+                List.of(\"clean\", \"verify\", \"-Dquarkus.analytics.disabled=true\"),\n+                Collections.emptyMap());\n+        assertThat(installInvocation.getProcess().waitFor(2, TimeUnit.MINUTES)).isTrue();\n+        assertThat(installInvocation.getExecutionException()).isNull();\n+        assertThat(installInvocation.getExitCode()).isEqualTo(0);\n+\n+    }\n+\n     /**\n      * Tests that if @QuarkusTest is added as a JUnitExtension through META-INF/services, things still work.\n      * JBeret does this, for example.\n@@ -89,4 +123,5 @@ public void testQuarkusTestInMetaInfServicesNormalTesting()\n         assertThat(installInvocation.getExitCode()).isEqualTo(0);\n \n     }\n+\n }\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/pom.xml b/integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/pom.xml\nnew file mode 100644\nindex 0000000000000..b5948eefddc1d\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/pom.xml\n@@ -0,0 +1,122 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <groupId>org.acme</groupId>\n+    <artifactId>quarkus-test-test-profile</artifactId>\n+    <version>1.0-SNAPSHOT</version>\n+\n+    <properties>\n+        <quarkus.platform.group-id>io.quarkus</quarkus.platform.group-id>\n+        <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>\n+        <quarkus.platform.version>@project.version@</quarkus.platform.version>\n+        <quarkus-plugin.version>@project.version@</quarkus-plugin.version>\n+        <compiler-plugin.version>${compiler-plugin.version}</compiler-plugin.version>\n+        <surefire-plugin.version>${version.surefire.plugin}</surefire-plugin.version>\n+        <maven.compiler.source>${maven.compiler.source}</maven.compiler.source>\n+        <maven.compiler.target>${maven.compiler.target}</maven.compiler.target>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    </properties>\n+\n+    <dependencyManagement>\n+        <dependencies>\n+            <dependency>\n+                <groupId>\\${quarkus.platform.group-id}</groupId>\n+                <artifactId>\\${quarkus.platform.artifact-id}</artifactId>\n+                <version>\\${quarkus.platform.version}</version>\n+                <type>pom</type>\n+                <scope>import</scope>\n+            </dependency>\n+        </dependencies>\n+    </dependencyManagement>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-resteasy</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-junit5</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <!-- Dependency which uses a service loader to do stuff -->\n+        <dependency>\n+            <groupId>org.testcontainers</groupId>\n+            <artifactId>testcontainers</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <version>\\${surefire-plugin.version}</version>\n+                <configuration>\n+                    <systemPropertyVariables>\n+                        <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n+                        <maven.home>\\${maven.home}</maven.home>\n+                    </systemPropertyVariables>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>io.quarkus</groupId>\n+                <artifactId>quarkus-maven-plugin</artifactId>\n+                <version>\\${quarkus-plugin.version}</version>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>build</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+\n+    <profiles>\n+        <profile>\n+            <id>native</id>\n+            <activation>\n+                <property>\n+                    <name>native</name>\n+                </property>\n+            </activation>\n+            <properties>\n+                <quarkus.native.enabled>true</quarkus.native.enabled>\n+            </properties>\n+            <build>\n+                <plugins>\n+                    <plugin>\n+                        <groupId>org.apache.maven.plugins</groupId>\n+                        <artifactId>maven-surefire-plugin</artifactId>\n+                        <configuration>\n+                            <skipTests>\\${native.surefire.skip}</skipTests>\n+                        </configuration>\n+                    </plugin>\n+                    <plugin>\n+                        <artifactId>maven-failsafe-plugin</artifactId>\n+                        <version>\\${surefire-plugin.version}</version>\n+                        <executions>\n+                            <execution>\n+                                <goals>\n+                                    <goal>integration-test</goal>\n+                                    <goal>verify</goal>\n+                                </goals>\n+                                <configuration>\n+                                    <systemPropertyVariables>\n+                                        <native.image.path>\\${project.build.directory}/\\${project.build.finalName}-runner</native.image.path>\n+                                        <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n+                                        <maven.home>\\${maven.home}</maven.home>\n+                                    </systemPropertyVariables>\n+                                </configuration>\n+                            </execution>\n+                        </executions>\n+                    </plugin>\n+                </plugins>\n+            </build>\n+        </profile>\n+    </profiles>\n+</project>\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/main/java/org/acme/HelloResource.java b/integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/main/java/org/acme/HelloResource.java\nnew file mode 100644\nindex 0000000000000..a7dfdbd043216\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/main/java/org/acme/HelloResource.java\n@@ -0,0 +1,18 @@\n+package org.acme;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.Produces;\n+import jakarta.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class HelloResource {\n+\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+\n+}\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/main/java/org/acme/MyApplication.java b/integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/main/java/org/acme/MyApplication.java\nnew file mode 100644\nindex 0000000000000..a6d66f8b9eda2\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/main/java/org/acme/MyApplication.java\n@@ -0,0 +1,9 @@\n+package org.acme;\n+\n+import jakarta.ws.rs.ApplicationPath;\n+import jakarta.ws.rs.core.Application;\n+\n+@ApplicationPath(\"/app\")\n+public class MyApplication extends Application {\n+\n+}\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/main/resources/META-INF/beans.xml b/integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/main/resources/META-INF/beans.xml\nnew file mode 100644\nindex 0000000000000..e69de29bb2d1d\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/main/resources/META-INF/resources/index.html b/integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/main/resources/META-INF/resources/index.html\nnew file mode 100644\nindex 0000000000000..36789577840ad\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/main/resources/META-INF/resources/index.html\n@@ -0,0 +1,156 @@\n+<!DOCTYPE html>\n+<html lang=\"en\">\n+<head>\n+    <meta charset=\"UTF-8\">\n+    <title>acme - 1.0-SNAPSHOT</title>\n+    <style>\n+        h1, h2, h3, h4, h5, h6 {\n+            margin-bottom: 0.5rem;\n+            font-weight: 400;\n+            line-height: 1.5;\n+        }\n+\n+        h1 {\n+            font-size: 2.5rem;\n+        }\n+\n+        h2 {\n+            font-size: 2rem\n+        }\n+\n+        h3 {\n+            font-size: 1.75rem\n+        }\n+\n+        h4 {\n+            font-size: 1.5rem\n+        }\n+\n+        h5 {\n+            font-size: 1.25rem\n+        }\n+\n+        h6 {\n+            font-size: 1rem\n+        }\n+\n+        .lead {\n+            font-weight: 300;\n+            font-size: 2rem;\n+        }\n+\n+        .banner {\n+            font-size: 2.7rem;\n+            margin: 0;\n+            padding: 2rem 1rem;\n+            background-color: #00A1E2;\n+            color: white;\n+        }\n+\n+        body {\n+            margin: 0;\n+            font-family: -apple-system, system-ui, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n+        }\n+\n+        code {\n+            font-family: SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n+            font-size: 87.5%;\n+            color: #e83e8c;\n+            word-break: break-word;\n+        }\n+\n+        .left-column {\n+            padding: .75rem;\n+            max-width: 75%;\n+            min-width: 55%;\n+        }\n+\n+        .right-column {\n+            padding: .75rem;\n+            max-width: 25%;\n+        }\n+\n+        .container {\n+            display: flex;\n+            width: 100%;\n+        }\n+\n+        li {\n+            margin: 0.75rem;\n+        }\n+\n+        .right-section {\n+            margin-left: 1rem;\n+            padding-left: 0.5rem;\n+        }\n+\n+        .right-section h3 {\n+            padding-top: 0;\n+            font-weight: 200;\n+        }\n+\n+        .right-section ul {\n+            border-left: 0.3rem solid #00A1E2;\n+            list-style-type: none;\n+            padding-left: 0;\n+        }\n+\n+    </style>\n+</head>\n+<body>\n+\n+<div class=\"banner lead\">\n+    Your new Cloud-Native application is ready!\n+</div>\n+\n+<div class=\"container\">\n+    <div class=\"left-column\">\n+        <p class=\"lead\"> Congratulations, you have created a new Quarkus application.</p>\n+\n+        <h2>Why do you see this?</h2>\n+\n+        <p>This page is served by Quarkus. The source is in\n+            <code>src/main/resources/META-INF/resources/index.html</code>.</p>\n+\n+        <h2>What can I do from here?</h2>\n+\n+        <p>If not already done, run the application in <em>dev mode</em> using: <code>mvn quarkus:dev</code>.\n+        </p>\n+        <ul>\n+            <li>Add REST resources, Servlets, functions and other services in <code>src/main/java</code>.</li>\n+            <li>Your static assets are located in <code>src/main/resources/META-INF/resources</code>.</li>\n+            <li>Configure your application in <code>src/main/resources/application.properties</code>.\n+            </li>\n+        </ul>\n+\n+        <h2>Do you like Quarkus?</h2>\n+        <p>Go give it a star on <a href=\"https://github.com/quarkusio/quarkus\">GitHub</a>.</p>\n+\n+        <h2>How do I get rid of this page?</h2>\n+        <p>Just delete the <code>src/main/resources/META-INF/resources/index.html</code> file.</p>\n+    </div>\n+    <div class=\"right-column\">\n+        <div class=\"right-section\">\n+            <h3>Application</h3>\n+            <ul>\n+                <li>GroupId: org.acme</li>\n+                <li>ArtifactId: acme</li>\n+                <li>Version: 1.0-SNAPSHOT</li>\n+                <li>Quarkus Version: 999-SNAPSHOT</li>\n+            </ul>\n+        </div>\n+        <div class=\"right-section\">\n+            <h3>Next steps</h3>\n+            <ul>\n+                <!-- the url have been erased on purpose -->\n+                <li><a href=\"#\">Setup your IDE</a></li>\n+                <li><a href=\"#\">Getting started</a></li>\n+                <li><a href=\"#\">Documentation</a></li>\n+            </ul>\n+        </div>\n+    </div>\n+</div>\n+\n+\n+</body>\n+</html>\n\\ No newline at end of file\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/main/resources/application.properties b/integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/main/resources/application.properties\nnew file mode 100644\nindex 0000000000000..07a519e0e7928\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/main/resources/application.properties\n@@ -0,0 +1 @@\n+quarkus.test.continuous-testing=enabled\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/test/java/org/acme/CustomBeforeAllCallback.java b/integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/test/java/org/acme/CustomBeforeAllCallback.java\nnew file mode 100644\nindex 0000000000000..d60fd541186c1\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/test/java/org/acme/CustomBeforeAllCallback.java\n@@ -0,0 +1,23 @@\n+package org.acme;\n+\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.testcontainers.DockerClientFactory;\n+\n+public class CustomBeforeAllCallback implements BeforeAllCallback {\n+    @Override\n+    public void beforeAll(ExtensionContext context) {\n+        // Under the covers, this uses a service loader\n+        try {\n+            DockerClientFactory.instance()\n+                    .dockerHostIpAddress();\n+        } catch (IllegalStateException e) {\n+            // Docker won't work on windows CI\n+            if (System.getProperty(\"os.name\").contains(\"indows\") && e.getMessage().contains(\"valid Docker environment\")) {\n+                // This is expected on windows\n+            } else {\n+                throw e;\n+            }\n+        }\n+    }\n+}\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/test/java/org/acme/ExampleTest.java b/integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/test/java/org/acme/ExampleTest.java\nnew file mode 100644\nindex 0000000000000..24a1a25f41ae9\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/test-third-party-junit-extension/src/test/java/org/acme/ExampleTest.java\n@@ -0,0 +1,15 @@\n+package org.acme;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+@ExtendWith(CustomBeforeAllCallback.class)\n+@QuarkusTest\n+class ExampleTest {\n+    @Test\n+    void testSomething() {\n+    }\n+\n+}\n\ndiff --git a/test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/ExecutionListener.java b/test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/ExecutionListener.java\nnew file mode 100644\nindex 0000000000000..d382ce633a659\n--- /dev/null\n+++ b/test-framework/junit5/src/main/java/io/quarkus/test/junit/launcher/ExecutionListener.java\n@@ -0,0 +1,51 @@\n+package io.quarkus.test.junit.launcher;\n+\n+import java.util.Optional;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.TestSource;\n+import org.junit.platform.engine.support.descriptor.ClassSource;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+\n+import io.quarkus.bootstrap.classloading.QuarkusClassLoader;\n+\n+/**\n+ * The earliest hook a test extension can have is BeforeAllCallback.\n+ * Since we don't know if other extensions might be registered, we want to get in before that callback and set the TCCL to be\n+ * the classloader of the test class.\n+ */\n+public class ExecutionListener implements TestExecutionListener {\n+\n+    private ClassLoader origCl = null;\n+\n+    @Override\n+    public void executionStarted(TestIdentifier testIdentifier) {\n+        // This will be called for various levels of containers, only some of which are tests, so check carefully and do not assume\n+        Optional<TestSource> oSource = testIdentifier.getSource();\n+        if (oSource.isPresent()) {\n+            TestSource source = oSource.get();\n+            if (source instanceof ClassSource) {\n+                ClassSource cs = (ClassSource) source;\n+                ClassLoader classLoader = cs.getJavaClass().getClassLoader();\n+                // Only adjust the TCCL in cases where we know the QuarkusTestExtension would be about to do it anyway\n+                // We could check annotations, but that would be slow, and the assumption that only Quarkus Tests are loaded with the quarkus classloader should be a fair one\n+                if (classLoader instanceof QuarkusClassLoader) {\n+                    origCl = Thread.currentThread()\n+                            .getContextClassLoader();\n+                    Thread.currentThread().setContextClassLoader(classLoader);\n+                } else {\n+                    origCl = null;\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void executionFinished(TestIdentifier testIdentifier, TestExecutionResult result) {\n+        if (origCl != null) {\n+            // If execution is parallel this could be odd, but if execution is parallel any kind of TCCL manipulation will be ill-fated\n+            Thread.currentThread().setContextClassLoader(origCl);\n+        }\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/test-framework/junit5/src/main/resources/META-INF/services/org.junit.platform.launcher.TestExecutionListener b/test-framework/junit5/src/main/resources/META-INF/services/org.junit.platform.launcher.TestExecutionListener\nnew file mode 100644\nindex 0000000000000..364aa0dd9cf78\n--- /dev/null\n+++ b/test-framework/junit5/src/main/resources/META-INF/services/org.junit.platform.launcher.TestExecutionListener\n@@ -0,0 +1 @@\n+io.quarkus.test.junit.launcher.ExecutionListener\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47377",
    "pr_id": 47377,
    "issue_id": 47313,
    "repo": "quarkusio/quarkus",
    "problem_statement": "`maven-flatten-plugin` is incompatible with `generate-code-tests` mojo from quarkus-maven-plugin\n### Describe the bug\n\nWhen using the `maven-flatten-plugin` in my Maven project, the `@QuarkusTest` execution fails with the following error:\n\n```\n[ERROR] Errors: \n[ERROR]   GreetingResourceTest.testHelloEndpoint » Runtime io.smallrye.config.ConfigValidationException: Configuration validation failed:\n        java.util.NoSuchElementException: SRCFG00011: Could not expand value platform.quarkus.native.builder-image in property quarkus.native.builder-image\n```\n\n### Expected behavior\n\nThe test execution should not fail, even when using the flatten-maven-plugin\n\n### Actual behavior\n\n_No response_\n\n### How to Reproduce?\n\n1. Clone https://github.com/rbioteau/quarkus-flatten-maven-plugin.git\n2. Run `./mvnw clean verify`\n\n### Output of `uname -a` or `ver`\n\nLinux LAP-00391 6.11.0-21-generic #21~24.04.1-Ubuntu SMP PREEMPT_DYNAMIC Mon Feb 24 16:52:15 UTC 2 x86_64 x86_64 x86_64 GNU/Linux\n\n### Output of `java -version`\n\nopenjdk version \"21.0.4\" 2024-07-16 LTS OpenJDK Runtime Environment Temurin-21.0.4+7 (build 21.0.4+7-LTS) OpenJDK 64-Bit Server VM Temurin-21.0.4+7 (build 21.0.4+7-LTS, mixed mode, sharing)\n\n### Quarkus version or git rev\n\n3.21.2\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nopenjdk version \"21.0.4\" 2024-07-16 LTS OpenJDK Runtime Environment Temurin-21.0.4+7 (build 21.0.4+7-LTS) OpenJDK 64-Bit Server VM Temurin-21.0.4+7 (build 21.0.4+7-LTS, mixed mode, sharing)\n\n### Additional information\n\n_No response_",
    "issue_word_count": 249,
    "test_files_count": 5,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "devtools/maven/src/main/java/io/quarkus/maven/QuarkusBootstrapProvider.java",
      "integration-tests/maven/src/test/java/io/quarkus/maven/it/BuildIT.java",
      "integration-tests/maven/src/test/resources-filtered/projects/flatten-maven-plugin/pom.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/flatten-maven-plugin/src/main/java/org/acme/GreetingResource.java",
      "integration-tests/maven/src/test/resources-filtered/projects/flatten-maven-plugin/src/test/java/org/acme/GreetingResourceTest.java",
      "integration-tests/maven/src/test/resources-filtered/projects/pom-in-target-dir/pom.xml"
    ],
    "pr_changed_test_files": [
      "integration-tests/maven/src/test/java/io/quarkus/maven/it/BuildIT.java",
      "integration-tests/maven/src/test/resources-filtered/projects/flatten-maven-plugin/pom.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/flatten-maven-plugin/src/main/java/org/acme/GreetingResource.java",
      "integration-tests/maven/src/test/resources-filtered/projects/flatten-maven-plugin/src/test/java/org/acme/GreetingResourceTest.java",
      "integration-tests/maven/src/test/resources-filtered/projects/pom-in-target-dir/pom.xml"
    ],
    "base_commit": "6c2155526d9535bfc51ff7e589a2e4f8c4aae939",
    "head_commit": "22a7ecb4570fc28f767ffe0596752b6e1927f74f",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47377",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47377",
    "dockerfile": "",
    "pr_merged_at": "2025-04-15T21:05:53.000Z",
    "patch": "diff --git a/devtools/maven/src/main/java/io/quarkus/maven/QuarkusBootstrapProvider.java b/devtools/maven/src/main/java/io/quarkus/maven/QuarkusBootstrapProvider.java\nindex 53ee8f0e8c145..2d838f26493c4 100644\n--- a/devtools/maven/src/main/java/io/quarkus/maven/QuarkusBootstrapProvider.java\n+++ b/devtools/maven/src/main/java/io/quarkus/maven/QuarkusBootstrapProvider.java\n@@ -87,10 +87,7 @@ static Map<Path, Model> getProjectMap(MavenSession session) {\n         }\n         final Map<Path, Model> projectModels = new HashMap<>(allProjects.size());\n         for (MavenProject mp : allProjects) {\n-            final Model model = mp.getOriginalModel();\n-            model.setPomFile(mp.getFile());\n-            // activated profiles or custom extensions may have overridden the build defaults\n-            model.setBuild(mp.getModel().getBuild());\n+            final Model model = getRawModel(mp);\n             projectModels.put(mp.getFile().toPath(), model);\n             // The Maven Model API determines the project directory as the directory containing the POM file.\n             // However, in case when plugins manipulating POMs store their results elsewhere\n@@ -104,6 +101,33 @@ static Map<Path, Model> getProjectMap(MavenSession session) {\n         return projectModels;\n     }\n \n+    /**\n+     * This method is meant to return the \"raw\" model, i.e. the one that would be obtained\n+     * by reading a {@code pom.xml} file, w/o interpolation, flattening, etc.\n+     * However, plugins, such as, {@code flatten-maven-plugin}, may manipulate raw POMs\n+     * early enough by stripping dependency management, test scoped dependencies, etc,\n+     * to break our bootstrap. So this method attempts to make sure the essential configuration\n+     * is still available to bootstrap a Quarkus app.\n+     *\n+     * @param mp Maven project\n+     * @return raw POM\n+     */\n+    private static Model getRawModel(MavenProject mp) {\n+        final Model model = mp.getOriginalModel();\n+        if (model.getDependencyManagement() == null) {\n+            // this could be the flatten plugin removing the dependencyManagement\n+            // in which case we set the effective dependency management to not lose the platform info\n+            model.setDependencyManagement(mp.getDependencyManagement());\n+            // it also helps to set the effective dependencies in this case\n+            // since the flatten plugin may remove the test dependencies from the POM\n+            model.setDependencies(mp.getDependencies());\n+        }\n+        model.setPomFile(mp.getFile());\n+        // activated profiles or custom extensions may have overridden the build defaults\n+        model.setBuild(mp.getModel().getBuild());\n+        return model;\n+    }\n+\n     private static String getBootstrapProviderId(ArtifactKey moduleKey, String bootstrapId) {\n         return bootstrapId == null ? moduleKey.toGacString() : moduleKey.toGacString() + \"-\" + bootstrapId;\n     }\n",
    "test_patch": "diff --git a/integration-tests/maven/src/test/java/io/quarkus/maven/it/BuildIT.java b/integration-tests/maven/src/test/java/io/quarkus/maven/it/BuildIT.java\nindex 8476350ab06d1..2614e296833c4 100644\n--- a/integration-tests/maven/src/test/java/io/quarkus/maven/it/BuildIT.java\n+++ b/integration-tests/maven/src/test/java/io/quarkus/maven/it/BuildIT.java\n@@ -201,6 +201,15 @@ void testMavenExtensionManipulatingPom()\n         build();\n     }\n \n+    @Test\n+    void testFlattenMavenPlugin()\n+            throws MavenInvocationException, IOException, InterruptedException {\n+        // in this case the flatten plugin is expected to strip down dependencyManagement and test scoped dependencies\n+        // which would break Quarkus bootstrap\n+        testDir = initProject(\"projects/flatten-maven-plugin\", \"projects/flatten-maven-plugin-processed\");\n+        build();\n+    }\n+\n     private void launch() throws IOException {\n         launch(TestContext.FAST_NO_PREFIX, \"\", \"hello, from foo\");\n     }\n@@ -239,11 +248,7 @@ private void build(boolean parallel, String... arg) throws MavenInvocationExcept\n \n         final List<String> args = new ArrayList<>(2);\n         args.add(\"package\");\n-        if (arg.length > 0) {\n-            for (String a : arg) {\n-                args.add(a);\n-            }\n-        }\n+        Collections.addAll(args, arg);\n         MavenProcessInvocationResult result = running.execute(args, Collections.emptyMap());\n         int exitCode = result.getProcess().waitFor();\n         if (exitCode != 0) {\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/flatten-maven-plugin/pom.xml b/integration-tests/maven/src/test/resources-filtered/projects/flatten-maven-plugin/pom.xml\nnew file mode 100644\nindex 0000000000000..a9fde9964e5e1\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/flatten-maven-plugin/pom.xml\n@@ -0,0 +1,107 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <groupId>org.acme</groupId>\n+    <artifactId>quarkus-flatten-maven-plugin</artifactId>\n+    <version>1.0.0-SNAPSHOT</version>\n+\n+    <properties>\n+        <quarkus.platform.group-id>io.quarkus</quarkus.platform.group-id>\n+        <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>\n+        <quarkus.platform.version>@project.version@</quarkus.platform.version>\n+        <compiler-plugin.version>${compiler-plugin.version}</compiler-plugin.version>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <maven.compiler.source>${maven.compiler.source}</maven.compiler.source>\n+        <maven.compiler.target>${maven.compiler.target}</maven.compiler.target>\n+        <skipITs>true</skipITs>\n+        <surefire-plugin.version>${version.surefire.plugin}</surefire-plugin.version>\n+    </properties>\n+\n+    <dependencyManagement>\n+        <dependencies>\n+            <dependency>\n+                <groupId>\\${quarkus.platform.group-id}</groupId>\n+                <artifactId>\\${quarkus.platform.artifact-id}</artifactId>\n+                <version>\\${quarkus.platform.version}</version>\n+                <type>pom</type>\n+                <scope>import</scope>\n+            </dependency>\n+        </dependencies>\n+    </dependencyManagement>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-rest</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-junit5</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.rest-assured</groupId>\n+            <artifactId>rest-assured</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <artifactId>flatten-maven-plugin</artifactId>\n+                <version>1.7.0</version>\n+                <executions>\n+                    <!-- Cause @QuarkusTest execution failure -->\n+                    <execution>\n+                        <id>flatten</id>\n+                        <goals>\n+                            <goal>flatten</goal>\n+                        </goals>\n+                        <phase>process-resources</phase>\n+                    </execution>\n+                    <execution>\n+                        <id>flatten.clean</id>\n+                        <goals>\n+                            <goal>clean</goal>\n+                        </goals>\n+                        <phase>clean</phase>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>\\${quarkus.platform.group-id}</groupId>\n+                <artifactId>quarkus-maven-plugin</artifactId>\n+                <version>\\${quarkus.platform.version}</version>\n+                <extensions>true</extensions>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>build</goal>\n+                            <goal>generate-code</goal>\n+                            <goal>generate-code-tests</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <version>\\${compiler-plugin.version}</version>\n+                <configuration>\n+                    <parameters>true</parameters>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <version>\\${surefire-plugin.version}</version>\n+                <configuration>\n+                    <systemPropertyVariables>\n+                        <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n+                        <maven.home>\\${maven.home}</maven.home>\n+                    </systemPropertyVariables>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+</project>\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/flatten-maven-plugin/src/main/java/org/acme/GreetingResource.java b/integration-tests/maven/src/test/resources-filtered/projects/flatten-maven-plugin/src/main/java/org/acme/GreetingResource.java\nnew file mode 100644\nindex 0000000000000..244f294265375\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/flatten-maven-plugin/src/main/java/org/acme/GreetingResource.java\n@@ -0,0 +1,16 @@\n+package org.acme;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.Produces;\n+import jakarta.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"Hello from Quarkus REST\";\n+    }\n+}\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/flatten-maven-plugin/src/test/java/org/acme/GreetingResourceTest.java b/integration-tests/maven/src/test/resources-filtered/projects/flatten-maven-plugin/src/test/java/org/acme/GreetingResourceTest.java\nnew file mode 100644\nindex 0000000000000..18332e4c7ad2f\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/flatten-maven-plugin/src/test/java/org/acme/GreetingResourceTest.java\n@@ -0,0 +1,20 @@\n+package org.acme;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.is;\n+\n+@QuarkusTest\n+class GreetingResourceTest {\n+    @Test\n+    void testHelloEndpoint() {\n+        given()\n+          .when().get(\"/hello\")\n+          .then()\n+             .statusCode(200)\n+             .body(is(\"Hello from Quarkus REST\"));\n+    }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/pom-in-target-dir/pom.xml b/integration-tests/maven/src/test/resources-filtered/projects/pom-in-target-dir/pom.xml\nindex cd8d0d067a275..b245860cc1b2f 100644\n--- a/integration-tests/maven/src/test/resources-filtered/projects/pom-in-target-dir/pom.xml\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/pom-in-target-dir/pom.xml\n@@ -36,7 +36,7 @@\n       <plugin>\n         <groupId>org.codehaus.mojo</groupId>\n         <artifactId>flatten-maven-plugin</artifactId>\n-        <version>1.5.0</version>\n+        <version>1.7.0</version>\n         <configuration>\n           <outputDirectory>target</outputDirectory>\n           <pomElements>\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47375",
    "pr_id": 47375,
    "issue_id": 47189,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Quarkus generate-code-tests Phase Fails with JGitVer in Multimodule Project\n### Describe the bug\n\nWhen using JGitVer in a Maven multimodule project with Quarkus, the generate-code-tests phase of the Quarkus Maven plugin fails to complete. The build aborts with an error indicating that an artifact (org.acme:dto-in-jar:jar:0) cannot be resolved, even though the project structure and dependencies appear to be correctly configured. This issue prevents successful test code generation and subsequent build steps.\n\n### Expected behavior\n\nThe generate-code-tests phase should complete successfully, generating test-related code for the Quarkus application, even when JGitVer is used for version management in a multimodule project. The build should proceed without errors related to dependency resolution.\n\n### Actual behavior\n\nThe build fails during the generate-code-tests phase with the following error:\n\n> [ERROR] Failed to execute goal io.quarkus.platform:quarkus-maven-plugin:3.19.2:generate-code-tests (default) on project code-with-quarkus: Quarkus code generation phase has failed: The following errors were encountered while processing Quarkus application dependencies:\n> [ERROR] 1) Failed to resolve artifact org.acme:dto-in-jar:jar:0\n> [ERROR]   at io.quarkus.bootstrap.resolver.maven.ApplicationDependencyResolver.resolve(ApplicationDependencyResolver.java:869)\n\n### How to Reproduce?\n\n[code-with-quarkus.zip](https://github.com/user-attachments/files/19608545/code-with-quarkus.zip)\n\nA minimal reproducer is attached to this issue as a ZIP archive (code-with-quarkus.zip).\n\nSteps to reproduce the behavior:\n\n1. Extract the attached code-with-quarkus.zip file.\n2. Navigate to the root directory of the extracted project.\n3. Run ./mvnw clean install to build the multimodule project.\n4. Observe the build failure during the generate-code-tests phase with the error above.\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\nopenjdk-23.0.2\n\n### Quarkus version or git rev\n\n3.19.2\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nmvn 3.9.9\n\n### Additional information\n\nThe attached reproducer includes a parent POM with JGitVer configured and a Quarkus module (code-with-quarkus) that triggers the error.",
    "issue_word_count": 343,
    "test_files_count": 14,
    "non_test_files_count": 7,
    "pr_changed_files": [
      "devtools/cli/src/test/java/io/quarkus/cli/MavenProjectInfoAndUpdateTest.java",
      "devtools/maven/src/main/java/io/quarkus/maven/QuarkusBootstrapProvider.java",
      "independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/BootstrapMavenContext.java",
      "independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/BootstrapMavenContextConfig.java",
      "independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/MavenModelBuilder.java",
      "independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/LocalProject.java",
      "independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/WorkspaceLoader.java",
      "independent-projects/tools/registry-client/src/main/java/io/quarkus/registry/client/maven/MavenRegistryClientFactory.java",
      "integration-tests/devtools/src/test/java/io/quarkus/devtools/commands/ListExtensionsTest.java",
      "integration-tests/maven/src/test/java/io/quarkus/maven/it/BuildIT.java",
      "integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/.mvn/extensions.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/app/pom.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/app/src/main/java/org/acme/Application.java",
      "integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/app/src/main/resources/application.properties",
      "integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/app/src/test/java/org/acme/ApplicationTest.java",
      "integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/greeter/pom.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/greeter/src/main/java/org/acme/greeter/Greeter.java",
      "integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/greeter/src/main/resources/META-INF/beans.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/pom.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/mvn-ext/pom.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/mvn-ext/src/main/java/org/acme/mvn/ext/AcmeModelProcessor.java"
    ],
    "pr_changed_test_files": [
      "devtools/cli/src/test/java/io/quarkus/cli/MavenProjectInfoAndUpdateTest.java",
      "integration-tests/devtools/src/test/java/io/quarkus/devtools/commands/ListExtensionsTest.java",
      "integration-tests/maven/src/test/java/io/quarkus/maven/it/BuildIT.java",
      "integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/.mvn/extensions.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/app/pom.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/app/src/main/java/org/acme/Application.java",
      "integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/app/src/main/resources/application.properties",
      "integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/app/src/test/java/org/acme/ApplicationTest.java",
      "integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/greeter/pom.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/greeter/src/main/java/org/acme/greeter/Greeter.java",
      "integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/greeter/src/main/resources/META-INF/beans.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/pom.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/mvn-ext/pom.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/mvn-ext/src/main/java/org/acme/mvn/ext/AcmeModelProcessor.java"
    ],
    "base_commit": "8a68d967975f7c57af57f3341903ad35fc209bb8",
    "head_commit": "468fae0c5457645cfd23c683d6faab798e3e1d75",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47375",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47375",
    "dockerfile": "",
    "pr_merged_at": "2025-04-15T16:52:15.000Z",
    "patch": "diff --git a/devtools/maven/src/main/java/io/quarkus/maven/QuarkusBootstrapProvider.java b/devtools/maven/src/main/java/io/quarkus/maven/QuarkusBootstrapProvider.java\nindex 0440aac927820..53ee8f0e8c145 100644\n--- a/devtools/maven/src/main/java/io/quarkus/maven/QuarkusBootstrapProvider.java\n+++ b/devtools/maven/src/main/java/io/quarkus/maven/QuarkusBootstrapProvider.java\n@@ -91,14 +91,14 @@ static Map<Path, Model> getProjectMap(MavenSession session) {\n             model.setPomFile(mp.getFile());\n             // activated profiles or custom extensions may have overridden the build defaults\n             model.setBuild(mp.getModel().getBuild());\n-            projectModels.put(mp.getBasedir().toPath(), model);\n+            projectModels.put(mp.getFile().toPath(), model);\n             // The Maven Model API determines the project directory as the directory containing the POM file.\n             // However, in case when plugins manipulating POMs store their results elsewhere\n             // (such as the flatten plugin storing the flattened POM under the target directory),\n             // both the base directory and the directory containing the POM file should be added to the map.\n             var pomDir = mp.getFile().getParentFile();\n             if (!pomDir.equals(mp.getBasedir())) {\n-                projectModels.put(pomDir.toPath(), model);\n+                projectModels.put(mp.getBasedir().toPath().resolve(\"pom.xml\"), model);\n             }\n         }\n         return projectModels;\n@@ -210,7 +210,7 @@ private MavenArtifactResolver artifactResolver(QuarkusBootstrapMojo mojo, Launch\n                                     .setUserSettings(mojo.mavenSession().getRequest().getUserSettingsFile())\n                                     .setCurrentProject(mojo.mavenProject().getFile().toString())\n                                     .setPreferPomsFromWorkspace(true)\n-                                    .setProjectModelProvider(getProjectMap(mojo.mavenSession())::get)\n+                                    .setProjectModelProvider(getProjectMap(mojo.mavenSession()))\n                                     // pass the repositories since Maven extensions could manipulate repository configs\n                                     .setRemoteRepositories(mojo.remoteRepositories())\n                                     .setEffectiveModelBuilder(BootstrapMavenContextConfig\n\ndiff --git a/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/BootstrapMavenContext.java b/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/BootstrapMavenContext.java\nindex 47e97a0790ec4..2941f8035d48d 100644\n--- a/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/BootstrapMavenContext.java\n+++ b/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/BootstrapMavenContext.java\n@@ -14,7 +14,6 @@\n import java.util.Map;\n import java.util.Properties;\n import java.util.Set;\n-import java.util.function.Function;\n import java.util.function.Supplier;\n import java.util.stream.Collectors;\n \n@@ -378,7 +377,7 @@ private boolean getLocalRepoTailIgnoreAvailability() {\n                 : localRepoTailIgnoreAvailability;\n     }\n \n-    private LocalProject resolveCurrentProject(Function<Path, Model> modelProvider) throws BootstrapMavenException {\n+    private LocalProject resolveCurrentProject(Map<Path, Model> modelProvider) throws BootstrapMavenException {\n         try {\n             return LocalProject.loadWorkspace(this, modelProvider);\n         } catch (Exception e) {\n\ndiff --git a/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/BootstrapMavenContextConfig.java b/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/BootstrapMavenContextConfig.java\nindex 8d8aca42cf958..ec529a330f30a 100644\n--- a/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/BootstrapMavenContextConfig.java\n+++ b/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/BootstrapMavenContextConfig.java\n@@ -6,8 +6,8 @@\n import java.nio.file.Paths;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Map;\n import java.util.Properties;\n-import java.util.function.Function;\n \n import org.apache.maven.model.Model;\n import org.apache.maven.settings.crypto.SettingsDecrypter;\n@@ -58,7 +58,7 @@ public static boolean getEffectiveModelBuilderProperty(Properties props) {\n     protected boolean preferPomsFromWorkspace;\n     protected Boolean effectiveModelBuilder;\n     protected Boolean wsModuleParentHierarchy;\n-    protected Function<Path, Model> modelProvider;\n+    protected Map<Path, Model> modelProvider;\n     protected List<String> excludeSisuBeanPackages;\n     protected List<String> includeSisuBeanPackages;\n     protected Boolean warnOnFailedWorkspaceModules;\n@@ -374,7 +374,7 @@ public T setWorkspaceModuleParentHierarchy(boolean wsModuleParentHierarchy) {\n      * @return this instance\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public T setProjectModelProvider(Function<Path, Model> modelProvider) {\n+    public T setProjectModelProvider(Map<Path, Model> modelProvider) {\n         this.modelProvider = modelProvider;\n         return (T) this;\n     }\n\ndiff --git a/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/MavenModelBuilder.java b/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/MavenModelBuilder.java\nindex acbbf79875343..adceb555de77f 100644\n--- a/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/MavenModelBuilder.java\n+++ b/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/MavenModelBuilder.java\n@@ -2,8 +2,11 @@\n \n import java.io.File;\n import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n \n import org.apache.maven.model.Model;\n@@ -17,6 +20,7 @@\n import org.eclipse.aether.artifact.DefaultArtifact;\n \n import io.quarkus.bootstrap.resolver.maven.options.BootstrapMavenOptions;\n+import io.quarkus.bootstrap.resolver.maven.workspace.LocalProject;\n import io.quarkus.bootstrap.resolver.maven.workspace.LocalWorkspace;\n import io.quarkus.bootstrap.resolver.maven.workspace.ModelUtils;\n import io.quarkus.maven.dependency.ArtifactCoords;\n@@ -29,10 +33,23 @@ public class MavenModelBuilder implements ModelBuilder {\n \n     private final ModelBuilder builder;\n     private final BootstrapMavenContext ctx;\n+    // This mapping is particularly useful when POM files do not exactly match the Model present in the LocalWorkspace.\n+    // This may happen when Maven extensions manipulate the original POMs by changing versions, etc.\n+    private final Map<File, Model> poms;\n \n     public MavenModelBuilder(BootstrapMavenContext ctx) {\n         builder = BootstrapModelBuilderFactory.getDefaultModelBuilder();\n         this.ctx = ctx;\n+        if (ctx != null && ctx.getWorkspace() != null) {\n+            final Collection<LocalProject> projects = ctx.getWorkspace().getProjects().values();\n+            final Map<File, Model> tmp = new HashMap<>(projects.size());\n+            for (var p : projects) {\n+                tmp.put(p.getRawModel().getPomFile(), p.getRawModel());\n+            }\n+            poms = tmp;\n+        } else {\n+            poms = Map.of();\n+        }\n     }\n \n     @Override\n@@ -65,17 +82,25 @@ public ModelBuildingResult build(ModelBuildingRequest request) throws ModelBuild\n \n     private Model getModel(ModelBuildingRequest request) {\n         Model requestModel = request.getRawModel();\n-        if (requestModel == null) {\n-            if (request.getModelSource() != null) {\n-                try {\n-                    requestModel = ModelUtils.readModel(request.getModelSource().getInputStream());\n-                    request.setRawModel(requestModel);\n-                    if (request.getPomFile() != null) {\n-                        requestModel.setPomFile(request.getPomFile());\n-                    }\n-                } catch (IOException e) {\n-                    // ignore\n+        if (requestModel != null) {\n+            return requestModel;\n+        }\n+        if (request.getPomFile() != null) {\n+            requestModel = poms.get(request.getPomFile());\n+            if (requestModel != null) {\n+                request.setRawModel(requestModel);\n+                return requestModel;\n+            }\n+        }\n+        if (request.getModelSource() != null) {\n+            try {\n+                requestModel = ModelUtils.readModel(request.getModelSource().getInputStream());\n+                request.setRawModel(requestModel);\n+                if (request.getPomFile() != null) {\n+                    requestModel.setPomFile(request.getPomFile());\n                 }\n+            } catch (IOException e) {\n+                // ignore\n             }\n         }\n         return requestModel;\n\ndiff --git a/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/LocalProject.java b/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/LocalProject.java\nindex 31da5fc9c7c2d..5ef9dc2fe2651 100644\n--- a/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/LocalProject.java\n+++ b/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/LocalProject.java\n@@ -104,7 +104,7 @@ public static LocalProject loadWorkspace(BootstrapMavenContext ctx) throws Boots\n         return loadWorkspace(ctx, null);\n     }\n \n-    public static LocalProject loadWorkspace(BootstrapMavenContext ctx, Function<Path, Model> modelProvider)\n+    public static LocalProject loadWorkspace(BootstrapMavenContext ctx, Map<Path, Model> modelProvider)\n             throws BootstrapMavenException {\n         final Path currentProjectPom = ctx.getCurrentProjectPomOrNull();\n         if (currentProjectPom == null) {\n@@ -163,6 +163,9 @@ static Path locateCurrentProjectPom(Path path, boolean required) throws Bootstra\n         this.workspace = workspace;\n         if (workspace != null) {\n             workspace.addProject(this);\n+            if (!version.equals(ModelUtils.getRawVersion(rawModel))) {\n+                workspace.setResolvedVersion(version);\n+            }\n         }\n     }\n \n\ndiff --git a/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/WorkspaceLoader.java b/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/WorkspaceLoader.java\nindex 8453ddc4b2562..1049dd0d5621a 100644\n--- a/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/WorkspaceLoader.java\n+++ b/independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/WorkspaceLoader.java\n@@ -18,7 +18,6 @@\n import java.util.concurrent.Phaser;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.function.Consumer;\n-import java.util.function.Function;\n \n import org.apache.maven.model.Model;\n import org.apache.maven.model.Parent;\n@@ -63,7 +62,6 @@ private static Path locateCurrentProjectPom(Path path) throws BootstrapMavenExce\n     private final Deque<RawModule> moduleQueue = new ConcurrentLinkedDeque<>();\n     private final Map<Path, Model> loadedPoms = new ConcurrentHashMap<>();\n \n-    private final Function<Path, Model> modelProvider;\n     private final Map<GAV, Model> loadedModules = new ConcurrentHashMap<>();\n \n     private final LocalWorkspace workspace = new LocalWorkspace();\n@@ -77,7 +75,7 @@ private static Path locateCurrentProjectPom(Path path) throws BootstrapMavenExce\n     private List<String> inactiveProfileIds;\n     private List<Profile> profiles;\n \n-    WorkspaceLoader(BootstrapMavenContext ctx, Path currentProjectPom, Function<Path, Model> modelProvider)\n+    WorkspaceLoader(BootstrapMavenContext ctx, Path currentProjectPom, Map<Path, Model> modelProvider)\n             throws BootstrapMavenException {\n         try {\n             final BasicFileAttributes fileAttributes = Files.readAttributes(currentProjectPom, BasicFileAttributes.class);\n@@ -86,8 +84,16 @@ private static Path locateCurrentProjectPom(Path path) throws BootstrapMavenExce\n         } catch (IOException e) {\n             throw new IllegalArgumentException(currentProjectPom + \" does not exist\", e);\n         }\n-        addModulePom(this.currentProjectPom);\n-        this.modelProvider = modelProvider == null ? pom -> null : modelProvider;\n+        if (modelProvider != null) {\n+            // queue all the provided POMs\n+            for (var e : modelProvider.entrySet()) {\n+                moduleQueue.push(new RawModule(e.getKey(), e.getValue()));\n+            }\n+        }\n+        // make sure the current project POM is queued\n+        if (modelProvider == null || !modelProvider.containsKey(this.currentProjectPom)) {\n+            addModulePom(this.currentProjectPom);\n+        }\n \n         if (ctx != null && ctx.isEffectiveModelBuilder()) {\n             modelBuilder = BootstrapModelBuilderFactory.getDefaultModelBuilder();\n@@ -118,50 +124,11 @@ void setWorkspaceRootPom(Path rootPom) {\n     }\n \n     LocalProject load() throws BootstrapMavenException {\n-        final AtomicReference<LocalProject> currentProject = new AtomicReference<>();\n-        final Consumer<Model> processor;\n-        if (modelBuilder == null) {\n-            processor = rawModel -> {\n-                var project = new LocalProject(rawModel, workspace);\n-                if (currentProject.get() == null && project.getDir().equals(currentProjectPom.getParent())) {\n-                    currentProject.set(project);\n-                }\n-            };\n-        } else {\n-            processor = rawModel -> {\n-                var req = new DefaultModelBuildingRequest();\n-                req.setPomFile(rawModel.getPomFile());\n-                req.setModelResolver(modelResolver);\n-                req.setSystemProperties(System.getProperties());\n-                req.setUserProperties(System.getProperties());\n-                req.setModelCache(modelCache);\n-                req.setActiveProfileIds(activeProfileIds);\n-                req.setInactiveProfileIds(inactiveProfileIds);\n-                req.setProfiles(profiles);\n-                req.setRawModel(rawModel);\n-                req.setWorkspaceModelResolver(this);\n-                LocalProject project = null;\n-                try {\n-                    project = new LocalProject(modelBuilder.build(req), workspace);\n-                } catch (Exception e) {\n-                    if (warnOnFailingWsModules) {\n-                        log.warn(\"Failed to resolve effective model for \" + rawModel.getPomFile(), e);\n-                        return;\n-                    }\n-                    throw new RuntimeException(\"Failed to resolve the effective model for \" + rawModel.getPomFile(), e);\n-                }\n-                if (currentProject.get() == null && project.getDir().equals(currentProjectPom.getParent())) {\n-                    currentProject.set(project);\n-                }\n-                for (var module : project.getModelBuildingResult().getEffectiveModel().getModules()) {\n-                    addModulePom(project.getDir().resolve(module).resolve(POM_XML));\n-                }\n-            };\n-        }\n-\n         final ConcurrentLinkedDeque<Exception> errors = new ConcurrentLinkedDeque<>();\n+        final AtomicReference<LocalProject> currentProjectRef = new AtomicReference<>();\n+        final Consumer<Model> modelProcessor = getModelProcessor(currentProjectRef);\n         while (!moduleQueue.isEmpty()) {\n-            ConcurrentLinkedDeque<RawModule> newModules = new ConcurrentLinkedDeque<>();\n+            final ConcurrentLinkedDeque<RawModule> newModules = new ConcurrentLinkedDeque<>();\n             while (!moduleQueue.isEmpty()) {\n                 final Phaser phaser = new Phaser(1);\n                 while (!moduleQueue.isEmpty()) {\n@@ -181,58 +148,91 @@ LocalProject load() throws BootstrapMavenException {\n                 assertNoErrors(errors);\n             }\n             for (var newModule : newModules) {\n-                newModule.process(processor);\n+                newModule.process(modelProcessor);\n             }\n         }\n \n-        if (currentProject.get() == null) {\n+        final LocalProject result = currentProjectRef.get();\n+        if (result == null) {\n             throw new BootstrapMavenException(\"Failed to load project \" + currentProjectPom);\n         }\n-        return currentProject.get();\n+        return result;\n     }\n \n-    private void loadModule(RawModule rawModule, Collection<RawModule> newModules) {\n-        var moduleDir = rawModule.pom.getParent();\n-        if (moduleDir == null) {\n-            moduleDir = getFsRootDir();\n+    private Consumer<Model> getModelProcessor(AtomicReference<LocalProject> currentProjectRef) {\n+        if (modelBuilder == null) {\n+            return rawModel -> {\n+                var project = new LocalProject(rawModel, workspace);\n+                if (currentProjectRef.get() == null && project.getDir().equals(currentProjectPom.getParent())) {\n+                    currentProjectRef.set(project);\n+                }\n+            };\n         }\n+        return rawModel -> {\n+            var req = new DefaultModelBuildingRequest();\n+            req.setPomFile(rawModel.getPomFile());\n+            req.setModelResolver(modelResolver);\n+            req.setSystemProperties(System.getProperties());\n+            req.setUserProperties(System.getProperties());\n+            req.setModelCache(modelCache);\n+            req.setActiveProfileIds(activeProfileIds);\n+            req.setInactiveProfileIds(inactiveProfileIds);\n+            req.setProfiles(profiles);\n+            req.setRawModel(rawModel);\n+            req.setWorkspaceModelResolver(this);\n+            LocalProject project;\n+            try {\n+                project = new LocalProject(modelBuilder.build(req), workspace);\n+            } catch (Exception e) {\n+                if (warnOnFailingWsModules) {\n+                    log.warn(\"Failed to resolve effective model for \" + rawModel.getPomFile(), e);\n+                    return;\n+                }\n+                throw new RuntimeException(\"Failed to resolve the effective model for \" + rawModel.getPomFile(), e);\n+            }\n+            if (currentProjectRef.get() == null && project.getDir().equals(currentProjectPom.getParent())) {\n+                currentProjectRef.set(project);\n+            }\n+            for (var module : project.getModelBuildingResult().getEffectiveModel().getModules()) {\n+                addModulePom(project.getDir().resolve(module).resolve(POM_XML));\n+            }\n+        };\n+    }\n+\n+    private void loadModule(RawModule rawModule, Collection<RawModule> newModules) {\n+        final Path moduleDir = rawModule.getModuleDir();\n         if (loadedPoms.containsKey(moduleDir)) {\n             return;\n         }\n \n-        rawModule.model = modelProvider == null ? null : modelProvider.apply(moduleDir);\n-        if (rawModule.model == null) {\n-            rawModule.model = readModel(rawModule.pom);\n-        }\n-        loadedPoms.put(moduleDir, rawModule.model);\n-        if (rawModule.model == MISSING_MODEL) {\n+        final Model model = rawModule.getModel();\n+        loadedPoms.put(moduleDir, model);\n+        if (model == MISSING_MODEL) {\n             return;\n         }\n \n-        final String rawVersion = ModelUtils.getRawVersion(rawModule.model);\n+        final String rawVersion = ModelUtils.getRawVersion(model);\n         final String version = ModelUtils.isUnresolvedVersion(rawVersion)\n-                ? ModelUtils.resolveVersion(rawVersion, rawModule.model)\n+                ? ModelUtils.resolveVersion(rawVersion, model)\n                 : rawVersion;\n-        var added = loadedModules.putIfAbsent(\n-                new GAV(ModelUtils.getGroupId(rawModule.model), rawModule.model.getArtifactId(), version),\n-                rawModule.model);\n-        if (added != null) {\n+        final Model existingModel = loadedModules.putIfAbsent(\n+                new GAV(ModelUtils.getGroupId(model), model.getArtifactId(), version),\n+                model);\n+        if (existingModel != null) {\n             return;\n         }\n         newModules.add(rawModule);\n \n         if (!rawVersion.equals(version)) {\n-            loadedModules.putIfAbsent(\n-                    new GAV(ModelUtils.getGroupId(rawModule.model), rawModule.model.getArtifactId(), rawVersion),\n-                    rawModule.model);\n+            loadedModules.putIfAbsent(new GAV(ModelUtils.getGroupId(model), model.getArtifactId(), rawVersion), model);\n         }\n \n-        for (var module : rawModule.model.getModules()) {\n-            queueModule(rawModule.model.getProjectDirectory().toPath().resolve(module));\n+        for (var module : model.getModules()) {\n+            queueModule(model.getProjectDirectory().toPath().resolve(module));\n         }\n-        for (var profile : rawModule.model.getProfiles()) {\n+        for (var profile : model.getProfiles()) {\n             for (var module : profile.getModules()) {\n-                queueModule(rawModule.model.getProjectDirectory().toPath().resolve(module));\n+                queueModule(model.getProjectDirectory().toPath().resolve(module));\n             }\n         }\n         if (rawModule.parent == null) {\n@@ -353,6 +353,20 @@ private RawModule(RawModule parent, Path pom) {\n             this.parent = parent;\n         }\n \n+        public RawModule(Path pom, Model model) {\n+            this.pom = pom;\n+            this.model = model;\n+        }\n+\n+        private Path getModuleDir() {\n+            var moduleDir = pom.getParent();\n+            return moduleDir == null ? getFsRootDir() : moduleDir;\n+        }\n+\n+        private Model getModel() {\n+            return model == null ? model = readModel(pom) : model;\n+        }\n+\n         private Path getParentPom() {\n             if (model == null) {\n                 return null;\n@@ -381,9 +395,14 @@ private void process(Consumer<Model> consumer) {\n             if (parent != null) {\n                 parent.process(consumer);\n             }\n-            if (model != null) {\n+            if (model != null && model != MISSING_MODEL) {\n                 consumer.accept(model);\n             }\n         }\n+\n+        @Override\n+        public String toString() {\n+            return String.valueOf(pom);\n+        }\n     }\n }\n\ndiff --git a/independent-projects/tools/registry-client/src/main/java/io/quarkus/registry/client/maven/MavenRegistryClientFactory.java b/independent-projects/tools/registry-client/src/main/java/io/quarkus/registry/client/maven/MavenRegistryClientFactory.java\nindex 1b5dc39361d71..377fffbd0922a 100644\n--- a/independent-projects/tools/registry-client/src/main/java/io/quarkus/registry/client/maven/MavenRegistryClientFactory.java\n+++ b/independent-projects/tools/registry-client/src/main/java/io/quarkus/registry/client/maven/MavenRegistryClientFactory.java\n@@ -24,6 +24,7 @@\n import io.quarkus.bootstrap.resolver.maven.BootstrapMavenContext;\n import io.quarkus.bootstrap.resolver.maven.BootstrapMavenException;\n import io.quarkus.bootstrap.resolver.maven.MavenArtifactResolver;\n+import io.quarkus.bootstrap.resolver.maven.workspace.LocalProject;\n import io.quarkus.devtools.messagewriter.MessageWriter;\n import io.quarkus.maven.dependency.ArtifactCoords;\n import io.quarkus.registry.RegistryResolutionException;\n@@ -337,6 +338,7 @@ private static boolean isComplete(RegistryMavenRepoConfig config) {\n     private static MavenArtifactResolver newResolver(MavenArtifactResolver resolver, List<RemoteRepository> aggregatedRepos,\n             RegistryConfig config, MessageWriter log) {\n         try {\n+            final LocalProject currentProject = resolver.getMavenContext().getCurrentProject();\n             final BootstrapMavenContext mvnCtx = new BootstrapMavenContext(\n                     BootstrapMavenContext.config()\n                             .setRepositorySystem(resolver.getSystem())\n@@ -344,7 +346,9 @@ private static MavenArtifactResolver newResolver(MavenArtifactResolver resolver,\n                             .setRemoteRepositoryManager(resolver.getRemoteRepositoryManager())\n                             .setRemoteRepositories(aggregatedRepos)\n                             .setLocalRepository(resolver.getMavenContext().getLocalRepo())\n-                            .setCurrentProject(resolver.getMavenContext().getCurrentProject()));\n+                            .setCurrentProject(currentProject)\n+                            // if the currentProject is null, workspace discovery should still be disabled\n+                            .setWorkspaceDiscovery(currentProject != null));\n             return new MavenArtifactResolver(mvnCtx);\n         } catch (BootstrapMavenException e) {\n             throw new IllegalStateException(\"Failed to initialize Maven context\", e);\n",
    "test_patch": "diff --git a/devtools/cli/src/test/java/io/quarkus/cli/MavenProjectInfoAndUpdateTest.java b/devtools/cli/src/test/java/io/quarkus/cli/MavenProjectInfoAndUpdateTest.java\nindex 1fc65face666c..b5654b98137f3 100644\n--- a/devtools/cli/src/test/java/io/quarkus/cli/MavenProjectInfoAndUpdateTest.java\n+++ b/devtools/cli/src/test/java/io/quarkus/cli/MavenProjectInfoAndUpdateTest.java\n@@ -104,14 +104,17 @@ void testMisalignedPlatformExtensionVersion() throws Exception {\n         assertRegistryExtensions(infoResult.stdout, \"registry.acme.org\",\n                 UP_TO_DATE_ICON.iconOrMessage() + \"       org.acme:acme-quarkiverse-extension:1.0\");\n \n-        final CliDriver.Result rectifyResult = run(projectDir, \"update\", \"--platform-version=1.0.0\", \"--no-rewrite\");\n-        assertThat(rectifyResult.getExitCode()).isEqualTo(0);\n+        CliDriver.Result updateResult = run(projectDir, \"update\", \"--platform-version=1.0.0\", \"--no-rewrite\");\n+        assertThat(updateResult.getExitCode()).isEqualTo(0);\n \n-        assertThat(rectifyResult.stdout)\n+        assertThat(updateResult.stdout)\n                 .contains(\n                         \"-       org.acme.quarkus.platform:acme-quarkus-subatomic:[1.0.0 -> managed]\");\n+        assertQuarkusPlatformBomUpdates(updateResult.stdout,\n+                ArtifactCoords.pom(\"org.acme.quarkus.platform\", \"quarkus-bom\", \"[2.0.0 -> 1.0.0]\"),\n+                ArtifactCoords.pom(\"org.acme.quarkus.platform\", \"acme-bom\", \"[2.0.0 -> 1.0.0]\"));\n \n-        final CliDriver.Result updateResult = run(projectDir, \"update\", \"-Dquarkus.platform.version=1.0.0\", \"--no-rewrite\");\n+        updateResult = run(projectDir, \"update\", \"-Dquarkus.platform.version=1.0.0\", \"--no-rewrite\");\n         assertThat(updateResult.getExitCode()).isEqualTo(0);\n         assertQuarkusPlatformBomUpdates(updateResult.stdout,\n                 ArtifactCoords.pom(\"org.acme.quarkus.platform\", \"quarkus-bom\", \"[1.0.0 -> 2.0.0]\"),\n\ndiff --git a/integration-tests/devtools/src/test/java/io/quarkus/devtools/commands/ListExtensionsTest.java b/integration-tests/devtools/src/test/java/io/quarkus/devtools/commands/ListExtensionsTest.java\nindex 049c8f28f90c4..48b839d55d21d 100644\n--- a/integration-tests/devtools/src/test/java/io/quarkus/devtools/commands/ListExtensionsTest.java\n+++ b/integration-tests/devtools/src/test/java/io/quarkus/devtools/commands/ListExtensionsTest.java\n@@ -192,6 +192,9 @@ private QuarkusProject createNewProject(final File pom) throws IOException, Quar\n     }\n \n     private static Map<ArtifactKey, ArtifactCoords> readByKey(QuarkusProject project) throws IOException {\n+        // re-create the QuarkusProject to re-read the POM Model from the disk\n+        project = QuarkusProjectHelper.getProject(project.getProjectDirPath(), project.getExtensionsCatalog(),\n+                project.getBuildTool(), project.getJavaVersion(), project.log());\n         return project.getExtensionManager().getInstalled().stream()\n                 .collect(toMap(ArtifactCoords::getKey, Function.identity()));\n     }\n\ndiff --git a/integration-tests/maven/src/test/java/io/quarkus/maven/it/BuildIT.java b/integration-tests/maven/src/test/java/io/quarkus/maven/it/BuildIT.java\nindex b084a502e6b69..1cc0e55d42fea 100644\n--- a/integration-tests/maven/src/test/java/io/quarkus/maven/it/BuildIT.java\n+++ b/integration-tests/maven/src/test/java/io/quarkus/maven/it/BuildIT.java\n@@ -185,6 +185,17 @@ void testCustomManifestAttributes() throws MavenInvocationException, Interrupted\n \n     }\n \n+    @Test\n+    void testMavenExtensionManipulatingPom()\n+            throws MavenInvocationException, IOException, InterruptedException {\n+        testDir = initProject(\"projects/maven-extension-manipulating-pom/mvn-ext\",\n+                \"projects/maven-extension-manipulating-pom/mvn-ext-processed\");\n+        build(\"install\");\n+        testDir = initProject(\"projects/maven-extension-manipulating-pom/app\",\n+                \"projects/maven-extension-manipulating-pom/app-processed\");\n+        build();\n+    }\n+\n     private void launch() throws IOException {\n         launch(TestContext.FAST_NO_PREFIX, \"\", \"hello, from foo\");\n     }\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/.mvn/extensions.xml b/integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/.mvn/extensions.xml\nnew file mode 100644\nindex 0000000000000..d7db2df225af2\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/.mvn/extensions.xml\n@@ -0,0 +1,8 @@\n+<extensions xmlns=\"http://maven.apache.org/EXTENSIONS/1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/EXTENSIONS/1.0.0 http://maven.apache.org/xsd/core-extensions-1.0.0.xsd\">\n+    <extension>\n+        <groupId>org.acme</groupId>\n+        <artifactId>acme-version-assigner</artifactId>\n+        <version>0.0.1</version>\n+    </extension>\n+</extensions>\n\\ No newline at end of file\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/app/pom.xml b/integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/app/pom.xml\nnew file mode 100644\nindex 0000000000000..40881a79f41c1\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/app/pom.xml\n@@ -0,0 +1,87 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <groupId>org.acme</groupId>\n+    <artifactId>acme-app</artifactId>\n+    <version>0</version>\n+    <packaging>jar</packaging>\n+\n+\n+    <properties>\n+        <quarkus.platform.group-id>io.quarkus</quarkus.platform.group-id>\n+        <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>\n+        <quarkus.platform.version>@project.version@</quarkus.platform.version>\n+        <compiler-plugin.version>${compiler-plugin.version}</compiler-plugin.version>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <maven.compiler.source>${maven.compiler.source}</maven.compiler.source>\n+        <maven.compiler.target>${maven.compiler.target}</maven.compiler.target>\n+        <skipITs>true</skipITs>\n+        <surefire-plugin.version>${version.surefire.plugin}</surefire-plugin.version>\n+    </properties>\n+\n+    <dependencyManagement>\n+        <dependencies>\n+            <dependency>\n+                <groupId>\\${quarkus.platform.group-id}</groupId>\n+                <artifactId>\\${quarkus.platform.artifact-id}</artifactId>\n+                <version>\\${quarkus.platform.version}</version>\n+                <type>pom</type>\n+                <scope>import</scope>\n+            </dependency>\n+        </dependencies>\n+    </dependencyManagement>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.acme</groupId>\n+            <artifactId>acme-greeter</artifactId>\n+            <version>\\${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-arc</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-junit5</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>\\${quarkus.platform.group-id}</groupId>\n+                <artifactId>quarkus-maven-plugin</artifactId>\n+                <version>\\${quarkus.platform.version}</version>\n+                <extensions>true</extensions>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>build</goal>\n+                            <goal>generate-code</goal>\n+                            <goal>generate-code-tests</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <version>\\${compiler-plugin.version}</version>\n+                <configuration>\n+                    <parameters>true</parameters>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <version>\\${surefire-plugin.version}</version>\n+                <configuration>\n+                    <systemPropertyVariables>\n+                        <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n+                        <maven.home>\\${maven.home}</maven.home>\n+                    </systemPropertyVariables>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+</project>\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/app/src/main/java/org/acme/Application.java b/integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/app/src/main/java/org/acme/Application.java\nnew file mode 100644\nindex 0000000000000..9783126e131aa\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/app/src/main/java/org/acme/Application.java\n@@ -0,0 +1,25 @@\n+package org.acme;\n+\n+import io.quarkus.runtime.QuarkusApplication;\n+import io.quarkus.runtime.annotations.QuarkusMain;\n+import io.quarkus.logging.Log;\n+import jakarta.inject.Inject;\n+\n+import org.acme.greeter.Greeter;\n+\n+@QuarkusMain\n+public class Application implements QuarkusApplication {\n+\n+    @Inject\n+    Greeter greeter;\n+\n+    @Override\n+    public int run(String... args) throws Exception {\n+        String msg = greeter.getGreeting();\n+        if(args.length > 0) {\n+            msg += \", \" + args[0] + \"!\";\n+        }\n+        Log.info(msg);\n+        return 0;\n+    }\n+}\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/app/src/main/resources/application.properties b/integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/app/src/main/resources/application.properties\nnew file mode 100644\nindex 0000000000000..804ec11934ccb\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/app/src/main/resources/application.properties\n@@ -0,0 +1,3 @@\n+quarkus.banner.enabled=false\n+quarkus.log.level=WARN\n+quarkus.log.category.\"org.acme\".level=INFO\n\\ No newline at end of file\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/app/src/test/java/org/acme/ApplicationTest.java b/integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/app/src/test/java/org/acme/ApplicationTest.java\nnew file mode 100644\nindex 0000000000000..8666b84efe0a3\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/app/src/test/java/org/acme/ApplicationTest.java\n@@ -0,0 +1,17 @@\n+package org.acme;\n+\n+import io.quarkus.test.junit.main.Launch;\n+import io.quarkus.test.junit.main.LaunchResult;\n+import io.quarkus.test.junit.main.QuarkusMainTest;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+@QuarkusMainTest\n+public class ApplicationTest {\n+\n+    @Test\n+    @Launch(\"World\")\n+    public void testLaunchCommand(LaunchResult result) {\n+        Assertions.assertTrue(result.getOutput().contains(\"Hello, World!\"));\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/greeter/pom.xml b/integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/greeter/pom.xml\nnew file mode 100644\nindex 0000000000000..74f14a3de6516\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/greeter/pom.xml\n@@ -0,0 +1,38 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <groupId>org.acme</groupId>\n+    <artifactId>acme-greeter</artifactId>\n+    <version>0</version>\n+\n+    <properties>\n+        <quarkus.platform.group-id>io.quarkus</quarkus.platform.group-id>\n+        <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>\n+        <quarkus.platform.version>@project.version@</quarkus.platform.version>\n+        <compiler-plugin.version>${compiler-plugin.version}</compiler-plugin.version>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <maven.compiler.source>${maven.compiler.source}</maven.compiler.source>\n+        <maven.compiler.target>${maven.compiler.target}</maven.compiler.target>\n+    </properties>\n+\n+    <dependencyManagement>\n+        <dependencies>\n+            <dependency>\n+                <groupId>\\${quarkus.platform.group-id}</groupId>\n+                <artifactId>\\${quarkus.platform.artifact-id}</artifactId>\n+                <version>\\${quarkus.platform.version}</version>\n+                <type>pom</type>\n+                <scope>import</scope>\n+            </dependency>\n+        </dependencies>\n+    </dependencyManagement>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>jakarta.enterprise</groupId>\n+            <artifactId>jakarta.enterprise.cdi-api</artifactId>\n+        </dependency>\n+    </dependencies>\n+</project>\n\\ No newline at end of file\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/greeter/src/main/java/org/acme/greeter/Greeter.java b/integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/greeter/src/main/java/org/acme/greeter/Greeter.java\nnew file mode 100644\nindex 0000000000000..db1ef908c0333\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/greeter/src/main/java/org/acme/greeter/Greeter.java\n@@ -0,0 +1,10 @@\n+package org.acme.greeter;\n+\n+import jakarta.enterprise.context.ApplicationScoped;\n+\n+@ApplicationScoped\n+public class Greeter {\n+    public String getGreeting() {\n+        return \"Hello\";\n+    }\n+}\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/greeter/src/main/resources/META-INF/beans.xml b/integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/greeter/src/main/resources/META-INF/beans.xml\nnew file mode 100644\nindex 0000000000000..e69de29bb2d1d\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/pom.xml b/integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/pom.xml\nnew file mode 100644\nindex 0000000000000..528487a1a5f3f\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/app/pom.xml\n@@ -0,0 +1,12 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <groupId>org.acme</groupId>\n+    <artifactId>parent</artifactId>\n+    <version>1.0.0-SNAPSHOT</version>\n+    <packaging>pom</packaging>\n+    <modules>\n+        <module>greeter</module>\n+        <module>app</module>\n+    </modules>\n+</project>\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/mvn-ext/pom.xml b/integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/mvn-ext/pom.xml\nnew file mode 100644\nindex 0000000000000..43bbe80a40263\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/mvn-ext/pom.xml\n@@ -0,0 +1,57 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <groupId>org.acme</groupId>\n+  <artifactId>acme-version-assigner</artifactId>\n+  <version>0.0.1</version>\n+  <packaging>jar</packaging>\n+  <properties>\n+    <quarkus.platform.group-id>io.quarkus</quarkus.platform.group-id>\n+    <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>\n+    <quarkus.platform.version>@project.version@</quarkus.platform.version>\n+    <quarkus-plugin.version>@project.version@</quarkus-plugin.version>\n+    <compiler-plugin.version>${compiler-plugin.version}</compiler-plugin.version>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    <maven.compiler.source>${maven.compiler.source}</maven.compiler.source>\n+    <maven.compiler.target>${maven.compiler.target}</maven.compiler.target>\n+  </properties>\n+  <dependencyManagement>\n+    <dependencies>\n+        <dependency>\n+          <groupId>\\${quarkus.platform.group-id}</groupId>\n+          <artifactId>\\${quarkus.platform.artifact-id}</artifactId>\n+          <version>\\${quarkus.platform.version}</version>\n+          <type>pom</type>\n+          <scope>import</scope>\n+        </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.maven</groupId>\n+      <artifactId>maven-core</artifactId>\n+      <scope>provided</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.codehaus.plexus</groupId>\n+      <artifactId>plexus-component-annotations</artifactId>\n+      <scope>provided</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.codehaus.plexus</groupId>\n+        <artifactId>plexus-component-metadata</artifactId>\n+        <version>2.2.0</version>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>generate-metadata</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>\n\\ No newline at end of file\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/mvn-ext/src/main/java/org/acme/mvn/ext/AcmeModelProcessor.java b/integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/mvn-ext/src/main/java/org/acme/mvn/ext/AcmeModelProcessor.java\nnew file mode 100644\nindex 0000000000000..211d78f1e4e2c\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/maven-extension-manipulating-pom/mvn-ext/src/main/java/org/acme/mvn/ext/AcmeModelProcessor.java\n@@ -0,0 +1,119 @@\n+package org.acme.mvn.ext;\n+\n+import org.apache.maven.model.Dependency;\n+import org.apache.maven.model.Model;\n+import org.apache.maven.model.Plugin;\n+import org.apache.maven.model.building.DefaultModelProcessor;\n+import org.apache.maven.model.building.ModelProcessor;\n+import org.codehaus.plexus.component.annotations.Component;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.util.Map;\n+\n+@Component(role = ModelProcessor.class)\n+public class AcmeModelProcessor extends DefaultModelProcessor {\n+\n+    private static final String ACME_VERSION = \"1.0.0-acme-00001\";\n+    private static final String PROJECT_VERSION = \"\\${project.version}\";\n+\n+    @Override\n+    public Model read(File input, Map<String, ?> options) throws IOException {\n+        return provisionModel(super.read(input, options), options);\n+    }\n+\n+    @Override\n+    public Model read(Reader input, Map<String, ?> options) throws IOException {\n+        return provisionModel(super.read(input, options), options);\n+    }\n+\n+    @Override\n+    public Model read(InputStream input, Map<String, ?> options) throws IOException {\n+        return provisionModel(super.read(input, options), options);\n+    }\n+\n+    private Model provisionModel(Model model, Map<String, ?> options) {\n+        if(\"org.acme\".equals(getGroupId(model))) {\n+            setAcmeVersion(model, ACME_VERSION);\n+        }\n+        return model;\n+    }\n+\n+    private static void setAcmeVersion(Model model, String version) {\n+        if(model.getVersion() != null) {\n+            model.setVersion(version);\n+        }\n+        resolveProjectVersionVariable(version, model);\n+\n+        if(model.getParent() != null) {\n+            model.getParent().setVersion(version);\n+        }\n+    }\n+\n+    private static void resolveProjectVersionVariable(String version, Model model) {\n+        // resolve project.version in properties\n+        if (model.getProperties() != null) {\n+            for (Map.Entry<Object, Object> entry : model.getProperties().entrySet()) {\n+                if (PROJECT_VERSION.equals(entry.getValue())) {\n+                    entry.setValue(version);\n+                }\n+            }\n+        }\n+\n+        // resolve project.version in dependencies\n+        if (model.getDependencies() != null) {\n+            for (Dependency dependency : model.getDependencies()) {\n+                if (PROJECT_VERSION.equals(dependency.getVersion())) {\n+                    dependency.setVersion(version);\n+                }\n+            }\n+        }\n+\n+        // resole project.version in dependencyManagement\n+        if (model.getDependencyManagement() != null\n+                && model.getDependencyManagement().getDependencies() != null) {\n+            for (Dependency dependency : model.getDependencyManagement().getDependencies()) {\n+                if (PROJECT_VERSION.equals(dependency.getVersion())) {\n+                    dependency.setVersion(version);\n+                }\n+            }\n+        }\n+\n+        // resolve project.version in plugins\n+        if (model.getBuild() != null && model.getBuild().getPlugins() != null) {\n+            for (Plugin plugin : model.getBuild().getPlugins()) {\n+                if (plugin.getDependencies() != null) {\n+                    for (Dependency dependency : plugin.getDependencies()) {\n+                        if (PROJECT_VERSION.equals(dependency.getVersion())) {\n+                            dependency.setVersion(version);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        // resolve project.version in pluginManagement\n+        if (model.getBuild() != null\n+                && model.getBuild().getPluginManagement() != null\n+                && model.getBuild().getPluginManagement().getPlugins() != null) {\n+            for (Plugin plugin : model.getBuild().getPluginManagement().getPlugins()) {\n+                if (plugin.getDependencies() != null) {\n+                    for (Dependency dependency : plugin.getDependencies()) {\n+                        if (PROJECT_VERSION.equals(dependency.getVersion())) {\n+                            dependency.setVersion(version);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private static String getGroupId(Model model) {\n+        if(model.getGroupId() != null) {\n+            return model.getGroupId();\n+        }\n+        return model.getParent() == null ? null : model.getParent().getGroupId();\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47373",
    "pr_id": 47373,
    "issue_id": 47369,
    "repo": "quarkusio/quarkus",
    "problem_statement": "http root-path in tests is not getting prefixed with slash\n### Describe the bug\n\n```\nquarkus.http.root-path=root-path/\n```\n\nIn my QuarkusTest, url is then set as `http://localhost:8081root-path/hello`.\n```\n@QuarkusTest\nclass GreetingResourceTest {\n\n    @TestHTTPEndpoint(GreetingResource.class)\n    @TestHTTPResource\n    String url;\n```\n\nPrefixing the root path with a slash, solves this problem.\n\nAs another note, the root path without prefixing slash works when I start quarkus in dev mode.\n\n### Expected behavior\n\nThe TestHTTPEndpoint should be built correctly\n\n### Actual behavior\n\n_No response_\n\n### How to Reproduce?\n\nDownload: \n\n[root-path-testresource.zip](https://github.com/user-attachments/files/19753676/root-path-testresource.zip)\n\nmvn quarkus:test\n\n### Output of `uname -a` or `ver`\n\nMINGW64_NT-10.0-26100 NANBCHL9NG3 3.3.6-341.x86_64 2022-09-05 20:28 UTC x86_64 Msys\n\n### Output of `java -version`\n\nopenjdk 21.0.5 2024-10-15 LTS OpenJDK Runtime Environment Temurin-21.0.5+11 (build 21.0.5+11-LTS) OpenJDK 64-Bit Server VM Temurin-21.0.5+11 (build 21.0.5+11-LTS, mixed mode, sharing)\n\n### Quarkus version or git rev\n\n3.21.2\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nApache Maven 3.8.8 (4c87b05d9aedce574290d1acc98575ed5eb6cd39) Maven home: C:\\eclipse\\tools\\java\\maven Java version: 21.0.5, vendor: Eclipse Adoptium, runtime: C:\\eclipse\\tools\\java\\21 Default locale: de_DE, platform encoding: UTF-8 OS name: \"windows 11\", version: \"10.0\", arch: \"amd64\", family: \"windows\"\n\n### Additional information\n\n_No response_",
    "issue_word_count": 239,
    "test_files_count": 3,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/path/RootPathTestHTTPResourceTestCase.java",
      "test-framework/common/src/main/java/io/quarkus/test/common/http/TestHTTPConfigSourceInterceptor.java",
      "test-framework/common/src/main/java/io/quarkus/test/common/http/TestHTTPConfigSourceProvider.java"
    ],
    "pr_changed_test_files": [
      "extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/path/RootPathTestHTTPResourceTestCase.java",
      "test-framework/common/src/main/java/io/quarkus/test/common/http/TestHTTPConfigSourceInterceptor.java",
      "test-framework/common/src/main/java/io/quarkus/test/common/http/TestHTTPConfigSourceProvider.java"
    ],
    "base_commit": "8a68d967975f7c57af57f3341903ad35fc209bb8",
    "head_commit": "8d089228f748287d9de9188f7f54a0f7824a00db",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47373",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47373",
    "dockerfile": "",
    "pr_merged_at": "2025-04-15T15:49:15.000Z",
    "patch": "",
    "test_patch": "diff --git a/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/path/RootPathTestHTTPResourceTestCase.java b/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/path/RootPathTestHTTPResourceTestCase.java\nnew file mode 100644\nindex 0000000000000..31b44ac9cc2a0\n--- /dev/null\n+++ b/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/path/RootPathTestHTTPResourceTestCase.java\n@@ -0,0 +1,38 @@\n+package io.quarkus.resteasy.reactive.server.test.path;\n+\n+import static io.restassured.RestAssured.when;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+import io.quarkus.test.common.http.TestHTTPEndpoint;\n+import io.quarkus.test.common.http.TestHTTPResource;\n+import io.restassured.RestAssured;\n+\n+public class RootPathTestHTTPResourceTestCase {\n+\n+    @RegisterExtension\n+    static QuarkusUnitTest test = new QuarkusUnitTest()\n+            .overrideConfigKey(\"quarkus.http.root-path\", \"app/\")\n+            .withApplicationRoot((jar) -> jar\n+                    .addClass(HelloResource.class));\n+\n+    @TestHTTPEndpoint(HelloResource.class)\n+    @TestHTTPResource\n+    String url;\n+\n+    @Test\n+    public void testRestAssured() {\n+        RestAssured.basePath = \"/\";\n+        when().get(\"/app/hello\").then().statusCode(200).body(Matchers.is(\"hello\"));\n+        when().get(\"/app/hello/nested\").then().statusCode(200).body(Matchers.is(\"world hello\"));\n+    }\n+\n+    @Test\n+    public void testTestHTTPResource() {\n+        assertThat(url).isEqualTo(\"http://localhost:8081/app/hello\");\n+    }\n+}\n\ndiff --git a/test-framework/common/src/main/java/io/quarkus/test/common/http/TestHTTPConfigSourceInterceptor.java b/test-framework/common/src/main/java/io/quarkus/test/common/http/TestHTTPConfigSourceInterceptor.java\nindex a5c059a2b39cb..2cf835c1d16f4 100644\n--- a/test-framework/common/src/main/java/io/quarkus/test/common/http/TestHTTPConfigSourceInterceptor.java\n+++ b/test-framework/common/src/main/java/io/quarkus/test/common/http/TestHTTPConfigSourceInterceptor.java\n@@ -1,5 +1,7 @@\n package io.quarkus.test.common.http;\n \n+import static io.quarkus.test.common.http.TestHTTPConfigSourceProvider.HTTP_ROOT_PATH_KEY;\n+import static io.quarkus.test.common.http.TestHTTPConfigSourceProvider.MANAGEMENT_ROOT_PATH_KEY;\n import static io.quarkus.test.common.http.TestHTTPConfigSourceProvider.TEST_MANAGEMENT_URL_KEY;\n import static io.quarkus.test.common.http.TestHTTPConfigSourceProvider.TEST_MANAGEMENT_URL_SSL_KEY;\n import static io.quarkus.test.common.http.TestHTTPConfigSourceProvider.TEST_URL_KEY;\n@@ -28,6 +30,14 @@ public ConfigValue getValue(final ConfigSourceInterceptorContext context, final\n                 name.equals(TEST_MANAGEMENT_URL_SSL_KEY)) {\n \n             return sanitizeUrl(super.getValue(context, name));\n+        } else if (name.equals(HTTP_ROOT_PATH_KEY) || name.equals(MANAGEMENT_ROOT_PATH_KEY)) {\n+            ConfigValue configValue = super.getValue(context, name);\n+            if ((configValue == null) || (configValue.getRawValue() == null) || configValue.getRawValue().isEmpty()\n+                    || configValue.getRawValue().startsWith(\"/\")) {\n+                return configValue;\n+            }\n+            return configValue.from().withValue(\"/\" + configValue.getValue()).withRawValue(\"/\" + configValue.getRawValue())\n+                    .build();\n         }\n \n         return context.proceed(name);\n\ndiff --git a/test-framework/common/src/main/java/io/quarkus/test/common/http/TestHTTPConfigSourceProvider.java b/test-framework/common/src/main/java/io/quarkus/test/common/http/TestHTTPConfigSourceProvider.java\nindex 7f2e25fb6fe08..e34b705dc69ce 100644\n--- a/test-framework/common/src/main/java/io/quarkus/test/common/http/TestHTTPConfigSourceProvider.java\n+++ b/test-framework/common/src/main/java/io/quarkus/test/common/http/TestHTTPConfigSourceProvider.java\n@@ -24,6 +24,9 @@ public class TestHTTPConfigSourceProvider implements ConfigSourceProvider {\n     static final String TEST_MANAGEMENT_URL_SSL_VALUE = \"https://${quarkus.management.host:localhost}:${quarkus.management.test-port:9001}${quarkus.management.root-path:/q}\";\n     static final String TEST_MANAGEMENT_URL_SSL_KEY = \"test.management.url.ssl\";\n \n+    static final String HTTP_ROOT_PATH_KEY = \"quarkus.http.root-path\";\n+    static final String MANAGEMENT_ROOT_PATH_KEY = \"quarkus.http.management-path\";\n+\n     static final Map<String, String> entries = Map.of(\n             TEST_URL_KEY, TEST_URL_VALUE,\n             TEST_URL_SSL_KEY, TEST_URL_SSL_VALUE,\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47370",
    "pr_id": 47370,
    "issue_id": 39167,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Prevent reordering of env in kubernetes deployment\n### Description\n\nI'm using the kubernetes extension to generate the manifest files for my application, which are then committed into a repository.\r\n\r\nHowever, sometimes variables inside the env part of the deployment are reordered, causing unwanted changes in the git history.\r\n\r\nWould it be possible to produce the env vars in a fixed order? For instance they could be sorted alphabetically by name.\n\n### Implementation ideas\n\n_No response_",
    "issue_word_count": 74,
    "test_files_count": 2,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/DevClusterHelper.java",
      "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/VanillaKubernetesProcessor.java",
      "integration-tests/kubernetes/quarkus-standard-way/src/test/java/io/quarkus/it/kubernetes/KubernetesWithEnvSortedByNameTest.java",
      "integration-tests/kubernetes/quarkus-standard-way/src/test/resources/kubernetes-with-env-sorted-by-name.properties"
    ],
    "pr_changed_test_files": [
      "integration-tests/kubernetes/quarkus-standard-way/src/test/java/io/quarkus/it/kubernetes/KubernetesWithEnvSortedByNameTest.java",
      "integration-tests/kubernetes/quarkus-standard-way/src/test/resources/kubernetes-with-env-sorted-by-name.properties"
    ],
    "base_commit": "44dcf5d2f105a7bf4b7d83d16d709fb4592d54cc",
    "head_commit": "568f7331659447f74022a0234fe0b320d746d8d2",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47370",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47370",
    "dockerfile": "",
    "pr_merged_at": "2025-06-16T12:49:13.000Z",
    "patch": "diff --git a/extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/DevClusterHelper.java b/extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/DevClusterHelper.java\nindex 1f6dabfc93d77..ba0d8cfce595a 100644\n--- a/extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/DevClusterHelper.java\n+++ b/extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/DevClusterHelper.java\n@@ -16,6 +16,7 @@\n import java.nio.charset.StandardCharsets;\n import java.security.MessageDigest;\n import java.util.ArrayList;\n+import java.util.Comparator;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n@@ -111,16 +112,19 @@ public static List<DecoratorBuildItem> createDecorators(String clusterKind,\n         image.ifPresent(\n                 i -> result.add(new DecoratorBuildItem(clusterKind, new ApplyContainerImageDecorator(name, i.getImage()))));\n \n-        Stream.concat(config.convertToBuildItems().stream(), Targetable.filteredByTarget(envs, KUBERNETES))\n-                .forEach(e -> result.add(new DecoratorBuildItem(clusterKind,\n-                        new AddEnvVarDecorator(ApplicationContainerDecorator.ANY, name, new EnvBuilder()\n-                                .withName(EnvConverter.convertName(e.getName()))\n-                                .withValue(e.getValue())\n-                                .withSecret(e.getSecret())\n-                                .withConfigmap(e.getConfigMap())\n-                                .withField(e.getField())\n-                                .withPrefix(e.getPrefix())\n-                                .build()))));\n+        var stream = Stream.concat(config.convertToBuildItems().stream(), Targetable.filteredByTarget(envs, KUBERNETES));\n+        if (config.idempotent()) {\n+            stream = stream.sorted(Comparator.comparing(e -> EnvConverter.convertName(e.getName())));\n+        }\n+        stream.forEach(e -> result.add(new DecoratorBuildItem(clusterKind,\n+                new AddEnvVarDecorator(ApplicationContainerDecorator.ANY, name, new EnvBuilder()\n+                        .withName(EnvConverter.convertName(e.getName()))\n+                        .withValue(e.getValue())\n+                        .withSecret(e.getSecret())\n+                        .withConfigmap(e.getConfigMap())\n+                        .withField(e.getField())\n+                        .withPrefix(e.getPrefix())\n+                        .build()))));\n \n         result.add(new DecoratorBuildItem(clusterKind, new ApplyImagePullPolicyDecorator(name, \"IfNotPresent\")));\n \n\ndiff --git a/extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/VanillaKubernetesProcessor.java b/extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/VanillaKubernetesProcessor.java\nindex ae94dcd5a1d2e..2060b7f44fab0 100644\n--- a/extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/VanillaKubernetesProcessor.java\n+++ b/extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/VanillaKubernetesProcessor.java\n@@ -12,6 +12,7 @@\n import static io.quarkus.kubernetes.spi.KubernetesDeploymentTargetBuildItem.VANILLA_KUBERNETES_PRIORITY;\n \n import java.util.ArrayList;\n+import java.util.Comparator;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n@@ -70,7 +71,6 @@\n import io.quarkus.kubernetes.spi.KubernetesServiceAccountBuildItem;\n import io.quarkus.kubernetes.spi.Targetable;\n \n-@SuppressWarnings(\"OptionalUsedAsFieldOrParameterType\")\n public class VanillaKubernetesProcessor {\n \n     @BuildStep\n@@ -246,13 +246,16 @@ public List<DecoratorBuildItem> createDecorators(ApplicationInfoBuildItem applic\n         result.add(new DecoratorBuildItem(KUBERNETES, new ApplyImagePullPolicyDecorator(name, config.imagePullPolicy())));\n         result.add(new DecoratorBuildItem(KUBERNETES, new AddSelectorToDeploymentDecorator(name)));\n \n-        Stream.concat(config.convertToBuildItems().stream(), Targetable.filteredByTarget(envs, KUBERNETES))\n-                .forEach(e -> result.add(new DecoratorBuildItem(KUBERNETES,\n-                        new AddEnvVarDecorator(ApplicationContainerDecorator.ANY, name,\n-                                new EnvBuilder().withName(EnvConverter.convertName(e.getName())).withValue(e.getValue())\n-                                        .withSecret(e.getSecret()).withConfigmap(e.getConfigMap()).withField(e.getField())\n-                                        .withPrefix(e.getPrefix())\n-                                        .build()))));\n+        var stream = Stream.concat(config.convertToBuildItems().stream(), Targetable.filteredByTarget(envs, KUBERNETES));\n+        if (config.idempotent()) {\n+            stream = stream.sorted(Comparator.comparing(e -> EnvConverter.convertName(e.getName())));\n+        }\n+        stream.forEach(e -> result.add(new DecoratorBuildItem(KUBERNETES,\n+                new AddEnvVarDecorator(ApplicationContainerDecorator.ANY, name,\n+                        new EnvBuilder().withName(EnvConverter.convertName(e.getName())).withValue(e.getValue())\n+                                .withSecret(e.getSecret()).withConfigmap(e.getConfigMap()).withField(e.getField())\n+                                .withPrefix(e.getPrefix())\n+                                .build()))));\n \n         config.containerName().ifPresent(containerName -> result\n                 .add(new DecoratorBuildItem(KUBERNETES, new ChangeContainerNameDecorator(containerName))));\n",
    "test_patch": "diff --git a/integration-tests/kubernetes/quarkus-standard-way/src/test/java/io/quarkus/it/kubernetes/KubernetesWithEnvSortedByNameTest.java b/integration-tests/kubernetes/quarkus-standard-way/src/test/java/io/quarkus/it/kubernetes/KubernetesWithEnvSortedByNameTest.java\nnew file mode 100644\nindex 0000000000000..056896d7a879d\n--- /dev/null\n+++ b/integration-tests/kubernetes/quarkus-standard-way/src/test/java/io/quarkus/it/kubernetes/KubernetesWithEnvSortedByNameTest.java\n@@ -0,0 +1,66 @@\n+package io.quarkus.it.kubernetes;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.fabric8.kubernetes.api.model.EnvVar;\n+import io.fabric8.kubernetes.api.model.HasMetadata;\n+import io.fabric8.kubernetes.api.model.apps.Deployment;\n+import io.quarkus.test.ProdBuildResults;\n+import io.quarkus.test.ProdModeTestResults;\n+import io.quarkus.test.QuarkusProdModeTest;\n+\n+public class KubernetesWithEnvSortedByNameTest {\n+\n+    @RegisterExtension\n+    static final QuarkusProdModeTest config = new QuarkusProdModeTest()\n+            .withApplicationRoot((jar) -> jar.addClasses(GreetingResource.class))\n+            .setApplicationName(\"env-sorted-by-name\")\n+            .setApplicationVersion(\"0.1-SNAPSHOT\")\n+            .withConfigurationResource(\"kubernetes-with-env-sorted-by-name.properties\");\n+\n+    @ProdBuildResults\n+    private ProdModeTestResults prodModeTestResults;\n+\n+    @Test\n+    public void assertGeneratedResources() throws IOException {\n+        Path kubernetesDir = prodModeTestResults.getBuildDir().resolve(\"kubernetes\");\n+        assertThat(kubernetesDir)\n+                .isDirectoryContaining(p -> p.getFileName().endsWith(\"kubernetes.json\"))\n+                .isDirectoryContaining(p -> p.getFileName().endsWith(\"kubernetes.yml\"));\n+        List<HasMetadata> kubernetesList = DeserializationUtil\n+                .deserializeAsList(kubernetesDir.resolve(\"kubernetes.yml\"));\n+        assertThat(kubernetesList.get(0)).isInstanceOfSatisfying(Deployment.class, d -> {\n+            assertThat(d.getMetadata()).satisfies(m -> {\n+                assertThat(m.getName()).isEqualTo(\"env-sorted-by-name\");\n+            });\n+\n+            assertThat(d.getSpec()).satisfies(deploymentSpec -> {\n+                assertThat(deploymentSpec.getTemplate()).satisfies(t -> {\n+                    assertThat(t.getSpec()).satisfies(podSpec -> {\n+                        assertThat(podSpec.getContainers()).singleElement().satisfies(container -> {\n+                            assertThat(container.getEnv()).extracting(EnvVar::getName).containsExactly(\n+                                    \"KUBERNETES_NAMESPACE\",\n+                                    \"AVAR\",\n+                                    \"BVAR\",\n+                                    \"CVAR\",\n+                                    \"DVAR\",\n+                                    \"EVAR\",\n+                                    \"FVAR\",\n+                                    \"GVAR\",\n+                                    \"HVAR_MP_REST_URL\",\n+                                    \"I_COMPLEX_VALUE\",\n+                                    \"LVAR\");\n+                        });\n+                    });\n+                });\n+            });\n+        });\n+    }\n+}\n\ndiff --git a/integration-tests/kubernetes/quarkus-standard-way/src/test/resources/kubernetes-with-env-sorted-by-name.properties b/integration-tests/kubernetes/quarkus-standard-way/src/test/resources/kubernetes-with-env-sorted-by-name.properties\nnew file mode 100644\nindex 0000000000000..42ced83834835\n--- /dev/null\n+++ b/integration-tests/kubernetes/quarkus-standard-way/src/test/resources/kubernetes-with-env-sorted-by-name.properties\n@@ -0,0 +1,19 @@\n+quarkus.kubernetes.idempotent=true\n+\n+quarkus.kubernetes.env.vars.avar=valuea\n+quarkus.kubernetes.env.vars.cvar=valuec\n+quarkus.kubernetes.env.vars.evar=valuee\n+quarkus.kubernetes.env.vars.gvar=valueg\n+quarkus.kubernetes.env.vars.lvar=valuel\n+\n+quarkus.kubernetes.env.mapping.bvar.from-secret=db-secret\n+quarkus.kubernetes.env.mapping.bvar.with-key=database.password\n+\n+quarkus.kubernetes.env.mapping.dvar.from-configmap=my-configmap\n+quarkus.kubernetes.env.mapping.dvar.with-key=keyName\n+\n+quarkus.kubernetes.env.fields.fvar=metadata.name\n+\n+quarkus.kubernetes.env.vars.\"i-complex.value\"=true\n+\n+quarkus.kubernetes.env.mapping.hvar/mp-rest/url.with-key=foo.url\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47368",
    "pr_id": 47368,
    "issue_id": 47366,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Optional<> @HeaderParam REST Client arguments\n### Describe the bug\n\nWhen specifying a `@HeaderParam` annotated microprofile REST Client argument as an `Optional<>`, the `Optional.toString()` value is being populated within the HTTP Header.\n\n### Expected behavior\n\nThe actual value of an `Optional` argument should be populated in the HTTP header value for the HTTP request.\n\n### Actual behavior\n\nThe `Optional`'s `toString()` value is populated within the HTTP Header which will not lead to the expected results:\n\nOptional's toString() Impl:\n```java\n    @Override\n    public String toString() {\n        return value != null\n            ? (\"Optional[\" + value + \"]\")\n            : \"Optional.empty\";\n    }\n```\n\n### How to Reproduce?\n\nReproducer: https://github.com/jknocek/quarkus-rest-client-bug\n\nSteps to reproduce:\n1. Clone and run the linked Quarkus app\n2. Send an HTTP GET to `http://localhost:8080/send`\n3. View the console logs to see the ouput. Two REST invocations will have been made. One with and one without a value. Neither header value is as expected:\n\n```\n__  ____  __  _____   ___  __ ____  ______ \n --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/ \n -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\   \n--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/   \n2025-04-14 17:42:03,249 INFO  [io.quarkus] (Quarkus Main Thread) quarkus-rest-client-bug 1.0-SNAPSHOT on JVM (powered by Quarkus 3.21.2) started in 0.368s. Listening on: http://localhost:8080\n2025-04-14 17:42:03,249 INFO  [io.quarkus] (Quarkus Main Thread) Profile dev activated. Live Coding activated.\n2025-04-14 17:42:03,249 INFO  [io.quarkus] (Quarkus Main Thread) Installed features: [cdi, rest, rest-client, smallrye-context-propagation, vertx]\n2025-04-14 17:42:03,250 INFO  [io.qua.dep.dev.RuntimeUpdatesProcessor] (vert.x-worker-thread-1) Live reload total time: 0.896s \n2025-04-14 17:42:03,256 INFO  [com.qua.bug.TestResource] (executor-thread-2) Receive invoked, HTTP Header: Optional[Hello World!]\n2025-04-14 17:42:03,259 INFO  [com.qua.bug.TestResource] (executor-thread-2) Receive invoked, HTTP Header: Optional.empty\n```\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\nopenjdk version \"21.0.5\" 2024-10-15 LTS\n\n### Quarkus version or git rev\n\n3.21.2\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nGradle 8.12\n\n### Additional information\n\n_No response_",
    "issue_word_count": 372,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java",
      "extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/headers/OptionalHeaderTest.java"
    ],
    "pr_changed_test_files": [
      "extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/headers/OptionalHeaderTest.java"
    ],
    "base_commit": "df644e4409da22db6c1281fca9ef24aad419c538",
    "head_commit": "3ad6e97ba7e3efdb328f931053b985b57baa86c1",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47368",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47368",
    "dockerfile": "",
    "pr_merged_at": "2025-04-15T17:43:47.000Z",
    "patch": "diff --git a/extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java b/extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java\nindex 880f5ea045160..ae84a701b3748 100644\n--- a/extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java\n+++ b/extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java\n@@ -1138,6 +1138,19 @@ A more full example of generated client (with sub-resource) can is at the bottom\n                             // just store the index of parameter used to create the body, we'll use it later\n                             bodyParameterIdx = paramIdx;\n                         } else if (param.parameterType == ParameterType.HEADER) {\n+                            Type paramType = jandexMethod.parameterType(paramIdx);\n+                            String effectiveParamTypeStr = paramType.name().toString();\n+                            boolean isOptional = isOptional(paramType, index);\n+                            if (isOptional) {\n+                                effectiveParamTypeStr = DotNames.OBJECT.toString();\n+                                if (paramType.kind() == PARAMETERIZED_TYPE) {\n+                                    Type objectType = paramType.asParameterizedType().arguments().get(0);\n+                                    if ((objectType.kind() == CLASS) || (objectType.kind() == PARAMETERIZED_TYPE)) {\n+                                        effectiveParamTypeStr = objectType.name().toString();\n+                                    }\n+                                }\n+                            }\n+\n                             // headers are added at the invocation builder level\n                             MethodDescriptor handleHeaderDescriptor = MethodDescriptor.ofMethod(name,\n                                     method.getName() + \"$$\" + methodIndex + \"$$handleHeader$$\" + paramIdx,\n@@ -1149,8 +1162,15 @@ A more full example of generated client (with sub-resource) can is at the bottom\n                             AssignableResultHandle invocationBuilderRef = handleHeaderMethod\n                                     .createVariable(Invocation.Builder.class);\n                             handleHeaderMethod.assign(invocationBuilderRef, handleHeaderMethod.getMethodParam(0));\n+                            ResultHandle headerValue = handleHeaderMethod.getMethodParam(1);\n                             addHeaderParam(handleHeaderMethod, invocationBuilderRef, param.name,\n-                                    handleHeaderMethod.getMethodParam(1), param.type,\n+                                    isOptional\n+                                            ? handleHeaderMethod.invokeVirtualMethod(\n+                                                    MethodDescriptor.ofMethod(Optional.class, \"orElse\", Object.class,\n+                                                            Object.class),\n+                                                    headerValue, handleHeaderMethod.loadNull())\n+                                            : headerValue,\n+                                    effectiveParamTypeStr,\n                                     handleHeaderMethod.getThis(),\n                                     getGenericTypeFromArray(handleHeaderMethod, methodGenericParametersField, paramIdx),\n                                     getAnnotationsFromArray(handleHeaderMethod, methodParamAnnotationsField, paramIdx));\n@@ -1528,10 +1548,10 @@ private void handleSubResourceMethod(List<JaxrsClientReactiveEnricherBuildItem>\n             for (int i = 0; i < method.getParameters().length; i++) {\n                 MethodParameter param = method.getParameters()[i];\n                 if (param.parameterType != ParameterType.PATH) {\n-                    FieldDescriptor paramField = subContext.classCreator.getFieldCreator(\"param\" + i, param.type)\n+                    FieldDescriptor paramField = subContext.classCreator.getFieldCreator(\"param\" + i, param.declaredType)\n                             .setModifiers(Modifier.PUBLIC)\n                             .getFieldDescriptor();\n-                    subParamFields.add(new SubResourceParameter(method.getParameters()[i], param.type,\n+                    subParamFields.add(new SubResourceParameter(method.getParameters()[i], param.declaredType,\n                             jandexMethod.parameterType(i), paramField, methodParamAnnotationsField,\n                             methodGenericParametersField,\n                             i));\n@@ -1670,6 +1690,19 @@ private void handleSubResourceMethod(List<JaxrsClientReactiveEnricherBuildItem>\n                             // just store the index of parameter used to create the body, we'll use it later\n                             bodyParameterValue = paramValue;\n                         } else if (param.parameterType == ParameterType.HEADER) {\n+                            Type paramType = jandexSubMethod.parameterType(subParamField.paramIndex);\n+                            String effectiveParamTypeStr = paramType.name().toString();\n+                            boolean isOptional = isOptional(paramType, index);\n+                            if (isOptional) {\n+                                effectiveParamTypeStr = DotNames.OBJECT.toString();\n+                                if (paramType.kind() == PARAMETERIZED_TYPE) {\n+                                    Type objectType = paramType.asParameterizedType().arguments().get(0);\n+                                    if ((objectType.kind() == CLASS) || (objectType.kind() == PARAMETERIZED_TYPE)) {\n+                                        effectiveParamTypeStr = objectType.name().toString();\n+                                    }\n+                                }\n+                            }\n+\n                             // headers are added at the invocation builder level\n                             MethodDescriptor handleHeaderDescriptor = MethodDescriptor.ofMethod(subName,\n                                     subMethod.getName() + \"$$\" + subMethodIndex + \"$$handleHeader$$param\"\n@@ -1682,9 +1715,15 @@ private void handleSubResourceMethod(List<JaxrsClientReactiveEnricherBuildItem>\n                             AssignableResultHandle invocationBuilderRef = handleHeaderMethod\n                                     .createVariable(Invocation.Builder.class);\n                             handleHeaderMethod.assign(invocationBuilderRef, handleHeaderMethod.getMethodParam(0));\n+                            ResultHandle headerValue = handleHeaderMethod.getMethodParam(1);\n                             addHeaderParam(handleHeaderMethod, invocationBuilderRef, param.name,\n-                                    handleHeaderMethod.getMethodParam(1),\n-                                    param.type,\n+                                    isOptional\n+                                            ? handleHeaderMethod.invokeVirtualMethod(\n+                                                    MethodDescriptor.ofMethod(Optional.class, \"orElse\", Object.class,\n+                                                            Object.class),\n+                                                    headerValue, handleHeaderMethod.loadNull())\n+                                            : headerValue,\n+                                    effectiveParamTypeStr,\n                                     handleHeaderMethod.readInstanceField(clientField, handleHeaderMethod.getThis()),\n                                     getGenericTypeFromArray(handleHeaderMethod, subParamField.genericsParametersField,\n                                             subParamField.paramIndex),\n@@ -1796,6 +1835,19 @@ private void handleSubResourceMethod(List<JaxrsClientReactiveEnricherBuildItem>\n                             // just store the index of parameter used to create the body, we'll use it later\n                             bodyParameterValue = subMethodCreator.getMethodParam(paramIdx);\n                         } else if (param.parameterType == ParameterType.HEADER) {\n+                            Type paramType = jandexSubMethod.parameterType(paramIdx);\n+                            String effectiveParamTypeStr = paramType.name().toString();\n+                            boolean isOptional = isOptional(paramType, index);\n+                            if (isOptional) {\n+                                effectiveParamTypeStr = DotNames.OBJECT.toString();\n+                                if (paramType.kind() == PARAMETERIZED_TYPE) {\n+                                    Type objectType = paramType.asParameterizedType().arguments().get(0);\n+                                    if ((objectType.kind() == CLASS) || (objectType.kind() == PARAMETERIZED_TYPE)) {\n+                                        effectiveParamTypeStr = objectType.name().toString();\n+                                    }\n+                                }\n+                            }\n+\n                             // headers are added at the invocation builder level\n                             MethodDescriptor handleHeaderDescriptor = MethodDescriptor.ofMethod(subName,\n                                     subMethod.getName() + \"$$\" + subMethodIndex + \"$$handleHeader$$\" + paramIdx,\n@@ -1806,9 +1858,16 @@ private void handleSubResourceMethod(List<JaxrsClientReactiveEnricherBuildItem>\n \n                             AssignableResultHandle invocationBuilderRef = handleHeaderMethod\n                                     .createVariable(Invocation.Builder.class);\n+                            ResultHandle headerValue = handleHeaderMethod.getMethodParam(1);\n                             handleHeaderMethod.assign(invocationBuilderRef, handleHeaderMethod.getMethodParam(0));\n                             addHeaderParam(handleHeaderMethod, invocationBuilderRef, param.name,\n-                                    handleHeaderMethod.getMethodParam(1), param.type,\n+                                    isOptional\n+                                            ? handleHeaderMethod.invokeVirtualMethod(\n+                                                    MethodDescriptor.ofMethod(Optional.class, \"orElse\", Object.class,\n+                                                            Object.class),\n+                                                    headerValue, handleHeaderMethod.loadNull())\n+                                            : headerValue,\n+                                    effectiveParamTypeStr,\n                                     handleHeaderMethod.readInstanceField(clientField, handleHeaderMethod.getThis()),\n                                     getGenericTypeFromArray(handleHeaderMethod, subMethodGenericParametersField, paramIdx),\n                                     getAnnotationsFromArray(handleHeaderMethod, subMethodParamAnnotationsField, paramIdx));\n@@ -1998,7 +2057,7 @@ private void generateSubResourceLocatorOwnerMethod(String name, ClassRestClientC\n         for (int i = 0; i < method.getParameters().length; i++) {\n             MethodParameter param = method.getParameters()[i];\n             if (param.parameterType != ParameterType.PATH) {\n-                FieldDescriptor paramField = FieldDescriptor.of(subName, \"param\" + i, param.type);\n+                FieldDescriptor paramField = FieldDescriptor.of(subName, \"param\" + i, param.declaredType);\n                 ownerMethod.writeInstanceField(paramField, subInstance, ownerMethod.getMethodParam(i));\n             }\n \n@@ -3123,22 +3182,22 @@ private boolean isOptional(Type type, IndexView index) {\n     }\n \n     private void addHeaderParam(BytecodeCreator invoBuilderEnricher, AssignableResultHandle invocationBuilder,\n-            String paramName, ResultHandle headerParamHandle, String paramType, ResultHandle client,\n+            String headerName, ResultHandle headerValueHandle, String paramType, ResultHandle client,\n             ResultHandle genericType, ResultHandle annotations) {\n \n-        BytecodeCreator notNullValue = invoBuilderEnricher.ifNull(headerParamHandle).falseBranch();\n+        BytecodeCreator notNullValue = invoBuilderEnricher.ifNull(headerValueHandle).falseBranch();\n \n-        headerParamHandle = notNullValue.invokeVirtualMethod(\n+        headerValueHandle = notNullValue.invokeVirtualMethod(\n                 MethodDescriptor.ofMethod(RestClientBase.class, \"convertParam\", Object.class,\n                         Object.class, Class.class, java.lang.reflect.Type.class, Annotation[].class),\n-                client, headerParamHandle,\n+                client, headerValueHandle,\n                 notNullValue.loadClassFromTCCL(paramType), genericType, annotations);\n \n         notNullValue.assign(invocationBuilder,\n                 notNullValue.invokeInterfaceMethod(\n                         MethodDescriptor.ofMethod(Invocation.Builder.class, \"header\", Invocation.Builder.class,\n                                 String.class, Object.class),\n-                        invocationBuilder, notNullValue.load(paramName), headerParamHandle));\n+                        invocationBuilder, notNullValue.load(headerName), headerValueHandle));\n     }\n \n     private void addPathParam(BytecodeCreator methodCreator, AssignableResultHandle methodTarget,\n",
    "test_patch": "diff --git a/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/headers/OptionalHeaderTest.java b/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/headers/OptionalHeaderTest.java\nnew file mode 100644\nindex 0000000000000..20a9f2b06861f\n--- /dev/null\n+++ b/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/headers/OptionalHeaderTest.java\n@@ -0,0 +1,98 @@\n+package io.quarkus.rest.client.reactive.headers;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.net.URI;\n+import java.util.Optional;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.HeaderParam;\n+import jakarta.ws.rs.Path;\n+\n+import org.jboss.resteasy.reactive.RestHeader;\n+import org.jboss.resteasy.reactive.RestQuery;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.rest.client.reactive.QuarkusRestClientBuilder;\n+import io.quarkus.test.QuarkusUnitTest;\n+import io.quarkus.test.common.http.TestHTTPResource;\n+\n+public class OptionalHeaderTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .withApplicationRoot((jar) -> jar.addClasses(Resource.class,\n+                    Client.class, OtherClient.class, OtherSubClient.class));\n+\n+    @TestHTTPResource\n+    URI baseUri;\n+\n+    @Test\n+    void normalClient() {\n+        Client client = QuarkusRestClientBuilder.newBuilder().baseUri(baseUri).build(Client.class);\n+        String result = client.send(Optional.empty(), \"q\", Optional.of(\"h2\"), Optional.of(3));\n+        assertThat(result).isEqualTo(\"query=q/Header2=h2,Header3=3\");\n+    }\n+\n+    @Test\n+    void subresourceClient() {\n+        OtherClient client = QuarkusRestClientBuilder.newBuilder().baseUri(baseUri).build(OtherClient.class);\n+        String result = client.send(Optional.empty(), \"q\").send(Optional.of(\"h2\"), Optional.of(3));\n+        assertThat(result).isEqualTo(\"query=q/Header2=h2,Header3=3\");\n+    }\n+\n+    @Path(\"resource\")\n+    public interface Client {\n+\n+        @Path(\"test\")\n+        @GET\n+        String send(@HeaderParam(\"header1\") Optional<String> header1, @RestQuery String query,\n+                @RestHeader Optional<String> header2, @RestHeader Optional<Integer> header3);\n+    }\n+\n+    @Path(\"resource\")\n+    public interface OtherClient {\n+\n+        @Path(\"test\")\n+        OtherSubClient send(@HeaderParam(\"header1\") Optional<String> header1, @RestQuery String query);\n+    }\n+\n+    public interface OtherSubClient {\n+\n+        @GET\n+        String send(@RestHeader Optional<String> header2, @RestHeader Optional<Integer> header3);\n+    }\n+\n+    @Path(\"resource\")\n+    public static class Resource {\n+\n+        @Path(\"test\")\n+        @GET\n+        public String test(@RestQuery String query, @RestHeader String header1,\n+                @RestHeader String header2,\n+                @RestHeader Integer header3) {\n+            StringBuilder result = new StringBuilder(\"query=\");\n+            result.append(query);\n+            result.append(\"/\");\n+            if (header1 != null) {\n+                result.append(\"Header1\");\n+                result.append(\"=\");\n+                result.append(header1);\n+                result.append(\",\");\n+            }\n+            if (header2 != null) {\n+                result.append(\"Header2\");\n+                result.append(\"=\");\n+                result.append(header2);\n+                result.append(\",\");\n+            }\n+            if (header3 != null) {\n+                result.append(\"Header3\");\n+                result.append(\"=\");\n+                result.append(header3);\n+            }\n+            return result.toString();\n+        }\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47341",
    "pr_id": 47341,
    "issue_id": 47321,
    "repo": "quarkusio/quarkus",
    "problem_statement": "ServerRequestContext can not be used as parameter of ServerExceptionMapper\n### Describe the bug\n\nThe documentation for `ServerExceptionMapper` https://quarkus.io/guides/rest#exception-mapping states:\n> Your exception mapper may declare any of the following parameter types:\n> [...}\n> Any of the [Context objects](https://quarkus.io/guides/rest#context-objects)\n\nThe list of context objects also includes the [ServerRequestContext](https://javadoc.io/doc/io.quarkus.resteasy.reactive/resteasy-reactive/3.21.2/org/jboss/resteasy/reactive/server/spi/ServerRequestContext.html).\n\nWhen I want to use the ServerRequestContext as method parameter, I get an exception on startup, see below.\n\nfails:\n```\n    @ServerExceptionMapper\n    RestResponse<String> handle(RuntimeException e, ServerRequestContext serverRequestContext) {\n        return RestResponse.ok(serverRequestContext.getRequestHeaders().getRequestHeaders().toString());\n    }\n```\n\nIt works perfectly if I instead use an `@Inject`:\n ```\n    @Inject\n    ServerRequestContext serverRequestContext;\n\n    @ServerExceptionMapper\n    RestResponse<String> handle(RuntimeException e) {\n        return RestResponse.ok(serverRequestContext.getRequestHeaders().getRequestHeaders().toString());\n    }\n```\n\n### Expected behavior\n\nI can use any of the context objects https://quarkus.io/guides/rest#context-objects as method parameter; Since that is what the doc says.\n\n### Actual behavior\n\n```\n2025-04-11 20:57:12,481 ERROR [io.qua.dep.dev.IsolatedDevModeMain] (vert.x-worker-thread-1) Failed to start quarkus [Error Occurred After Shutdown]: java.lang.RuntimeException: io.quarkus.builder.BuildException: Build failure: Build failed due to errors\n        [error]: Build step io.quarkus.resteasy.reactive.server.deployment.ResteasyReactiveProcessor#handleClassLevelExceptionMappers threw an exception: java.lang.RuntimeException: Parameter 'serverRequestContext' of method 'handle of class 'org.acme.GreetingResource' is not allowed\n        at org.jboss.resteasy.reactive.server.processor.generation.exceptionmappers.ServerExceptionMapperGenerator.getTargetMethodParamsInfo(ServerExceptionMapperGenerator.java:608)\n        at org.jboss.resteasy.reactive.server.processor.generation.exceptionmappers.ServerExceptionMapperGenerator.generateRRResponse(ServerExceptionMapperGenerator.java:479)\n        at org.jboss.resteasy.reactive.server.processor.generation.exceptionmappers.ServerExceptionMapperGenerator.generatePerClassMapper(ServerExceptionMapperGenerator.java:158)\n        at io.quarkus.resteasy.reactive.server.deployment.ResteasyReactiveProcessor.handleClassLevelExceptionMappers(ResteasyReactiveProcessor.java:396)\n        at java.base/java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:732)\n        at io.quarkus.deployment.ExtensionLoader$3.execute(ExtensionLoader.java:856)\n        at io.quarkus.builder.BuildContext.run(BuildContext.java:255)\n        at org.jboss.threads.ContextHandler$1.runWith(ContextHandler.java:18)\n        at org.jboss.threads.EnhancedQueueExecutor$Task.doRunWith(EnhancedQueueExecutor.java:2675)\n        at org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2654)\n        at org.jboss.threads.EnhancedQueueExecutor.runThreadBody(EnhancedQueueExecutor.java:1627)\n        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1594)\n        at java.base/java.lang.Thread.run(Thread.java:833)\n        at org.jboss.threads.JBossThread.run(JBossThread.java:499)\n\n        at io.quarkus.runner.bootstrap.AugmentActionImpl.runAugment(AugmentActionImpl.java:372)\n        at io.quarkus.runner.bootstrap.AugmentActionImpl.reloadExistingApplication(AugmentActionImpl.java:303)\n        at io.quarkus.runner.bootstrap.AugmentActionImpl.reloadExistingApplication(AugmentActionImpl.java:61)\n        at io.quarkus.deployment.dev.IsolatedDevModeMain.restartApp(IsolatedDevModeMain.java:200)\n        at io.quarkus.deployment.dev.IsolatedDevModeMain.restartCallback(IsolatedDevModeMain.java:183)\n        at io.quarkus.deployment.dev.RuntimeUpdatesProcessor.doScan(RuntimeUpdatesProcessor.java:555)\n        at io.quarkus.deployment.dev.RuntimeUpdatesProcessor.doScan(RuntimeUpdatesProcessor.java:455)\n        at io.quarkus.vertx.http.runtime.devmode.VertxHttpHotReplacementSetup$6.call(VertxHttpHotReplacementSetup.java:163)\n        at io.quarkus.vertx.http.runtime.devmode.VertxHttpHotReplacementSetup$6.call(VertxHttpHotReplacementSetup.java:150)\n        at io.vertx.core.impl.ContextImpl.lambda$executeBlocking$4(ContextImpl.java:192)\n        at io.vertx.core.impl.ContextInternal.dispatch(ContextInternal.java:270)\n        at io.vertx.core.impl.ContextImpl$1.execute(ContextImpl.java:221)\n        at io.vertx.core.impl.WorkerTask.run(WorkerTask.java:56)\n        at org.jboss.threads.ContextHandler$1.runWith(ContextHandler.java:18)\n        at org.jboss.threads.EnhancedQueueExecutor$Task.doRunWith(EnhancedQueueExecutor.java:2675)\n        at org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2654)\n        at org.jboss.threads.EnhancedQueueExecutor.runThreadBody(EnhancedQueueExecutor.java:1627)\n        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1594)\n        at org.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:11)\n        at org.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:11)\n        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n        at java.base/java.lang.Thread.run(Thread.java:833)\nCaused by: io.quarkus.builder.BuildException: Build failure: Build failed due to errors\n        [error]: Build step io.quarkus.resteasy.reactive.server.deployment.ResteasyReactiveProcessor#handleClassLevelExceptionMappers threw an exception: java.lang.RuntimeException: Parameter 'serverRequestContext' of method 'handle of class 'org.acme.GreetingResource' is not allowed\n        at org.jboss.resteasy.reactive.server.processor.generation.exceptionmappers.ServerExceptionMapperGenerator.getTargetMethodParamsInfo(ServerExceptionMapperGenerator.java:608)\n        at org.jboss.resteasy.reactive.server.processor.generation.exceptionmappers.ServerExceptionMapperGenerator.generateRRResponse(ServerExceptionMapperGenerator.java:479)\n        at org.jboss.resteasy.reactive.server.processor.generation.exceptionmappers.ServerExceptionMapperGenerator.generatePerClassMapper(ServerExceptionMapperGenerator.java:158)\n        at io.quarkus.resteasy.reactive.server.deployment.ResteasyReactiveProcessor.handleClassLevelExceptionMappers(ResteasyReactiveProcessor.java:396)\n        at java.base/java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:732)\n        at io.quarkus.deployment.ExtensionLoader$3.execute(ExtensionLoader.java:856)\n        at io.quarkus.builder.BuildContext.run(BuildContext.java:255)\n        at org.jboss.threads.ContextHandler$1.runWith(ContextHandler.java:18)\n        at org.jboss.threads.EnhancedQueueExecutor$Task.doRunWith(EnhancedQueueExecutor.java:2675)\n        at org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2654)\n        at org.jboss.threads.EnhancedQueueExecutor.runThreadBody(EnhancedQueueExecutor.java:1627)\n        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1594)\n        at java.base/java.lang.Thread.run(Thread.java:833)\n        at org.jboss.threads.JBossThread.run(JBossThread.java:499)\n\n        at io.quarkus.builder.Execution.run(Execution.java:122)\n        at io.quarkus.builder.BuildExecutionBuilder.execute(BuildExecutionBuilder.java:78)\n        at io.quarkus.deployment.QuarkusAugmentor.run(QuarkusAugmentor.java:161)\n        at io.quarkus.runner.bootstrap.AugmentActionImpl.runAugment(AugmentActionImpl.java:368)\n        ... 21 more\nCaused by: java.lang.RuntimeException: Parameter 'serverRequestContext' of method 'handle of class 'org.acme.GreetingResource' is not allowed      \n        at org.jboss.resteasy.reactive.server.processor.generation.exceptionmappers.ServerExceptionMapperGenerator.getTargetMethodParamsInfo(ServerExceptionMapperGenerator.java:608)\n        at org.jboss.resteasy.reactive.server.processor.generation.exceptionmappers.ServerExceptionMapperGenerator.generateRRResponse(ServerExceptionMapperGenerator.java:479)\n        at org.jboss.resteasy.reactive.server.processor.generation.exceptionmappers.ServerExceptionMapperGenerator.generatePerClassMapper(ServerExceptionMapperGenerator.java:158)\n        at io.quarkus.resteasy.reactive.server.deployment.ResteasyReactiveProcessor.handleClassLevelExceptionMappers(ResteasyReactiveProcessor.java:396)\n        at java.base/java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:732)\n        at io.quarkus.deployment.ExtensionLoader$3.execute(ExtensionLoader.java:856)\n        at io.quarkus.builder.BuildContext.run(BuildContext.java:255)\n        at org.jboss.threads.ContextHandler$1.runWith(ContextHandler.java:18)\n        at org.jboss.threads.EnhancedQueueExecutor$Task.doRunWith(EnhancedQueueExecutor.java:2675)\n        at org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2654)\n        at org.jboss.threads.EnhancedQueueExecutor.runThreadBody(EnhancedQueueExecutor.java:1627)\n        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1594)\n        at java.base/java.lang.Thread.run(Thread.java:833)\n        at org.jboss.threads.JBossThread.run(JBossThread.java:499)\n```\n\n### How to Reproduce?\n\nDownload Reproducer: \n[rest-inject-server-req-context.zip](https://github.com/user-attachments/files/19713010/rest-inject-server-req-context.zip)\nmvn quarkus:dev\nError from above happens directly\n\n### Output of `uname -a` or `ver`\n\nMINGW64_NT-10.0-22621 THEROCK 3.1.7-340.x86_64 2021-03-26 22:17 UTC x86_64 Msys\n\n### Output of `java -version`\n\nopenjdk 17.0.1 2021-10-19 OpenJDK Runtime Environment Temurin-17.0.1+12 (build 17.0.1+12) OpenJDK 64-Bit Server VM Temurin-17.0.1+12 (build 17.0.1+12, mixed mode, sharing)\n\n### Quarkus version or git rev\n\n3.21.2\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nMaven home: C:\\tools\\java\\maven Java version: 17.0.1, vendor: Eclipse Adoptium, runtime: C:\\tools\\java\\17-temurin Default locale: de_DE, platform encoding: Cp1252 OS name: \"windows 10\", version: \"10.0\", arch: \"amd64\", family: \"windows\"\n\n### Additional information\n\n_No response_",
    "issue_word_count": 1174,
    "test_files_count": 3,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/customexceptions/MyOtherExceptionMapper.java",
      "extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/customproviders/CustomContainerRequestFilter.java",
      "extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/customproviders/CustomFiltersTest.java",
      "independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/ResteasyReactiveDotNames.java",
      "independent-projects/resteasy-reactive/server/processor/src/main/java/org/jboss/resteasy/reactive/server/processor/generation/exceptionmappers/ServerExceptionMapperGenerator.java",
      "independent-projects/resteasy-reactive/server/processor/src/main/java/org/jboss/resteasy/reactive/server/processor/generation/filters/CustomFilterGenerator.java"
    ],
    "pr_changed_test_files": [
      "extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/customexceptions/MyOtherExceptionMapper.java",
      "extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/customproviders/CustomContainerRequestFilter.java",
      "extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/customproviders/CustomFiltersTest.java"
    ],
    "base_commit": "81d3813eda665ef8ef79ad4cbcf7fef3fc89ca22",
    "head_commit": "07316336bca2dc1a8391bd1754e6fa3ee0e1be7e",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47341",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47341",
    "dockerfile": "",
    "pr_merged_at": "2025-04-14T15:07:12.000Z",
    "patch": "diff --git a/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/ResteasyReactiveDotNames.java b/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/ResteasyReactiveDotNames.java\nindex f5c7f27482b5b..721b080e365b7 100644\n--- a/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/ResteasyReactiveDotNames.java\n+++ b/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/ResteasyReactiveDotNames.java\n@@ -273,6 +273,9 @@ public final class ResteasyReactiveDotNames {\n     public static final DotName RESTEASY_REACTIVE_CONTAINER_REQUEST_CONTEXT = DotName\n             .createSimple(\"org.jboss.resteasy.reactive.server.spi.ResteasyReactiveContainerRequestContext\");\n \n+    public static final DotName RESTEASY_REACTIVE_SERVER_REQUEST_CONTEXT = DotName\n+            .createSimple(\"org.jboss.resteasy.reactive.server.spi.ServerRequestContext\");\n+\n     public static final DotName WITH_FORM_READ = DotName\n             .createSimple(\"org.jboss.resteasy.reactive.server.WithFormRead\");\n \n\ndiff --git a/independent-projects/resteasy-reactive/server/processor/src/main/java/org/jboss/resteasy/reactive/server/processor/generation/exceptionmappers/ServerExceptionMapperGenerator.java b/independent-projects/resteasy-reactive/server/processor/src/main/java/org/jboss/resteasy/reactive/server/processor/generation/exceptionmappers/ServerExceptionMapperGenerator.java\nindex 61bae308125c4..c4f1d25ec857f 100644\n--- a/independent-projects/resteasy-reactive/server/processor/src/main/java/org/jboss/resteasy/reactive/server/processor/generation/exceptionmappers/ServerExceptionMapperGenerator.java\n+++ b/independent-projects/resteasy-reactive/server/processor/src/main/java/org/jboss/resteasy/reactive/server/processor/generation/exceptionmappers/ServerExceptionMapperGenerator.java\n@@ -9,6 +9,7 @@\n import static org.jboss.resteasy.reactive.common.processor.ResteasyReactiveDotNames.RESPONSE;\n import static org.jboss.resteasy.reactive.common.processor.ResteasyReactiveDotNames.REST_RESPONSE;\n import static org.jboss.resteasy.reactive.common.processor.ResteasyReactiveDotNames.SERVER_EXCEPTION_MAPPER;\n+import static org.jboss.resteasy.reactive.common.processor.ResteasyReactiveDotNames.SERVER_REQUEST_CONTEXT;\n import static org.jboss.resteasy.reactive.common.processor.ResteasyReactiveDotNames.UNI;\n import static org.jboss.resteasy.reactive.common.processor.ResteasyReactiveDotNames.URI_INFO;\n import static org.jboss.resteasy.reactive.server.processor.generation.multipart.GeneratorUtils.paramHandleFromReqContextMethod;\n@@ -569,6 +570,8 @@ private static TargetMethodParamsInfo getTargetMethodParamsInfo(MethodInfo targe\n                         ofMethod(ResteasyReactiveRequestContext.class.getName(), \"getContainerRequestContext\",\n                                 ContainerRequestContextImpl.class),\n                         contextHandle);\n+            } else if (SERVER_REQUEST_CONTEXT.equals(paramDotName)) {\n+                targetMethodParamHandles[i] = contextHandle;\n             } else if (URI_INFO.equals(paramDotName)) {\n                 paramHandleFromReqContextMethod(mc, contextHandle, targetMethodParamHandles, i,\n                         \"getUriInfo\",\n\ndiff --git a/independent-projects/resteasy-reactive/server/processor/src/main/java/org/jboss/resteasy/reactive/server/processor/generation/filters/CustomFilterGenerator.java b/independent-projects/resteasy-reactive/server/processor/src/main/java/org/jboss/resteasy/reactive/server/processor/generation/filters/CustomFilterGenerator.java\nindex 0758a7ae43b2a..6eabe60ae27dd 100644\n--- a/independent-projects/resteasy-reactive/server/processor/src/main/java/org/jboss/resteasy/reactive/server/processor/generation/filters/CustomFilterGenerator.java\n+++ b/independent-projects/resteasy-reactive/server/processor/src/main/java/org/jboss/resteasy/reactive/server/processor/generation/filters/CustomFilterGenerator.java\n@@ -8,6 +8,7 @@\n import static org.jboss.resteasy.reactive.common.processor.ResteasyReactiveDotNames.RESOURCE_INFO;\n import static org.jboss.resteasy.reactive.common.processor.ResteasyReactiveDotNames.RESPONSE;\n import static org.jboss.resteasy.reactive.common.processor.ResteasyReactiveDotNames.REST_RESPONSE;\n+import static org.jboss.resteasy.reactive.common.processor.ResteasyReactiveDotNames.SERVER_REQUEST_CONTEXT;\n import static org.jboss.resteasy.reactive.common.processor.ResteasyReactiveDotNames.THROWABLE;\n import static org.jboss.resteasy.reactive.common.processor.ResteasyReactiveDotNames.UNI;\n import static org.jboss.resteasy.reactive.common.processor.ResteasyReactiveDotNames.URI_INFO;\n@@ -330,6 +331,8 @@ private ResultHandle[] getRequestFilterResultHandles(MethodInfo targetMethod, Do\n             } else if (ResteasyReactiveServerDotNames.QUARKUS_REST_CONTAINER_REQUEST_CONTEXT.equals(paramDotName)) {\n                 targetMethodParamHandles[i] = filterMethod.checkCast(filterMethod.getMethodParam(0),\n                         ResteasyReactiveContainerRequestContext.class);\n+            } else if (SERVER_REQUEST_CONTEXT.equals(paramDotName)) {\n+                targetMethodParamHandles[i] = rrReqCtxHandle;\n             } else if (URI_INFO.equals(paramDotName)) {\n                 GeneratorUtils.paramHandleFromReqContextMethod(filterMethod, rrReqCtxHandle, targetMethodParamHandles,\n                         i,\n",
    "test_patch": "diff --git a/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/customexceptions/MyOtherExceptionMapper.java b/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/customexceptions/MyOtherExceptionMapper.java\nindex 1940b46cec857..4cfc322236a7c 100644\n--- a/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/customexceptions/MyOtherExceptionMapper.java\n+++ b/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/customexceptions/MyOtherExceptionMapper.java\n@@ -4,6 +4,7 @@\n \n import org.jboss.resteasy.reactive.server.ServerExceptionMapper;\n import org.jboss.resteasy.reactive.server.SimpleResourceInfo;\n+import org.jboss.resteasy.reactive.server.spi.ServerRequestContext;\n \n import io.vertx.ext.web.RoutingContext;\n \n@@ -17,7 +18,9 @@ public MyOtherExceptionMapper(SomeBean someBean) {\n \n     @ServerExceptionMapper\n     public Response handleMyOtherException(RoutingContext routingContext, MyOtherException myOtherException,\n-            SimpleResourceInfo simplifiedResourceInfo) {\n+            SimpleResourceInfo simplifiedResourceInfo, ServerRequestContext serverRequestContext) {\n+        serverRequestContext.getResteasyReactiveResourceInfo();\n+        simplifiedResourceInfo.getMethodName();\n         return Response.status(411).build();\n     }\n }\n\ndiff --git a/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/customproviders/CustomContainerRequestFilter.java b/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/customproviders/CustomContainerRequestFilter.java\nindex 1a7212d257807..46d05b65c089e 100644\n--- a/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/customproviders/CustomContainerRequestFilter.java\n+++ b/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/customproviders/CustomContainerRequestFilter.java\n@@ -5,12 +5,15 @@\n import jakarta.ws.rs.core.UriInfo;\n \n import org.jboss.resteasy.reactive.server.ServerRequestFilter;\n+import org.jboss.resteasy.reactive.server.spi.ServerRequestContext;\n \n public class CustomContainerRequestFilter {\n \n     @ServerRequestFilter\n-    public void whatever(UriInfo uriInfo, HttpHeaders httpHeaders, ContainerRequestContext requestContext) {\n-        String customHeaderValue = uriInfo.getPath() + \"-\" + httpHeaders.getHeaderString(\"some-input\");\n+    public void whatever(UriInfo uriInfo, HttpHeaders httpHeaders, ContainerRequestContext requestContext,\n+            ServerRequestContext serverRequestContext) {\n+        String customHeaderValue = uriInfo.getPath() + \"-\" + httpHeaders.getHeaderString(\"some-input\") + \"-\"\n+                + serverRequestContext.getRequestHeaders().getHeaderString(\"some-other-input\");\n         requestContext.getHeaders().putSingle(\"custom-header\", customHeaderValue);\n     }\n }\n\ndiff --git a/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/customproviders/CustomFiltersTest.java b/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/customproviders/CustomFiltersTest.java\nindex e92475042209a..5ff4e204f17f8 100644\n--- a/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/customproviders/CustomFiltersTest.java\n+++ b/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/customproviders/CustomFiltersTest.java\n@@ -31,14 +31,16 @@ public JavaArchive get() {\n \n     @Test\n     public void testFilters() {\n-        Headers responseHeaders = RestAssured.given().header(\"some-input\", \"bar\").get(\"/custom/req\")\n-                .then().statusCode(200).body(Matchers.containsString(\"/custom/req-bar-null\")).extract().headers();\n+        Headers responseHeaders = RestAssured.given().header(\"some-input\", \"bar\").header(\"some-other-input\", \"bar2\")\n+                .get(\"/custom/req\")\n+                .then().statusCode(200).body(Matchers.containsString(\"/custom/req-bar-bar2-null\")).extract().headers();\n         assertThat(responseHeaders.getValues(\"java-method\")).containsOnly(\"filters\");\n         Assertions.assertEquals(3, AssertContainerFilter.COUNT.get());\n         assertThat(responseHeaders.getValues(\"very\")).isEmpty();\n \n-        responseHeaders = RestAssured.given().header(\"some-input\", \"bar\").get(\"/custom/metal\")\n-                .then().statusCode(200).body(Matchers.containsString(\"/custom/metal-bar-metal\")).extract().headers();\n+        responseHeaders = RestAssured.given().header(\"some-input\", \"bar\").header(\"some-other-input\", \"bar2\")\n+                .get(\"/custom/metal\")\n+                .then().statusCode(200).body(Matchers.containsString(\"/custom/metal-bar-bar2-metal\")).extract().headers();\n         assertThat(responseHeaders.getValues(\"very\")).containsOnly(\"heavy\");\n     }\n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47320",
    "pr_id": 47320,
    "issue_id": 47319,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Support for accepting encrypted OIDC access tokens\n### Description\n\nQuarkus OIDC can already accept encrypted inner-signed ID tokens but in some contexts such as MCP authorization collocated RS and OIDC provider case, encrypted bearer access tokens may also have to be accepted.\n\n### Implementation ideas\n\nPossibly reuse `quarkus.oidc.token.decryption-key-location` and also add `quarkus.oidc.token.decryption-key` for letting users inline them, as it is reasonable to expect, when the token encryption is required, the OIDC provider uses the same encryption key for encrypting either ID or access tokens or both.",
    "issue_word_count": 94,
    "test_files_count": 7,
    "non_test_files_count": 13,
    "pr_changed_files": [
      "docs/src/main/asciidoc/security-oidc-expanded-configuration.adoc",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/DefaultTokenStateManager.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/LazyTenantConfigContext.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcProvider.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcUtils.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantConfigContext.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantConfigContextImpl.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantContextFactory.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/builders/TokenConfigBuilder.java",
      "extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcProviderTest.java",
      "extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcTenantConfigImpl.java",
      "integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/AdminResource.java",
      "integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/CodeFlowEncryptedIdTokenResource.java",
      "integration-tests/oidc-wiremock/src/main/resources/application.properties",
      "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java",
      "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/CodeFlowAuthorizationTest.java"
    ],
    "pr_changed_test_files": [
      "extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcProviderTest.java",
      "extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcTenantConfigImpl.java",
      "integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/AdminResource.java",
      "integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/CodeFlowEncryptedIdTokenResource.java",
      "integration-tests/oidc-wiremock/src/main/resources/application.properties",
      "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java",
      "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/CodeFlowAuthorizationTest.java"
    ],
    "base_commit": "8838e377cceaf09644de86975210f942870d4857",
    "head_commit": "cf190355af5fd02dde005e8018032be807e28ef0",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47320",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47320",
    "dockerfile": "",
    "pr_merged_at": "2025-05-07T16:37:21.000Z",
    "patch": "diff --git a/docs/src/main/asciidoc/security-oidc-expanded-configuration.adoc b/docs/src/main/asciidoc/security-oidc-expanded-configuration.adoc\nindex 7e55ddd460737..57cd22c4a233a 100644\n--- a/docs/src/main/asciidoc/security-oidc-expanded-configuration.adoc\n+++ b/docs/src/main/asciidoc/security-oidc-expanded-configuration.adoc\n@@ -193,6 +193,7 @@ When a client secret is configured with `quarkus.oidc.credentials.secret`, it is\n \n The remaining three properties in the `quarkus.oidc.credentials.client-secret.provider.*` namespace allow to customize how a custom xref:credentials-provider.adoc[CredentialsProvider] can be used to provide secrets stored in secure locations. Alternatively, you can use Quarkus Configuration system to manage secrets, see the xref:config-secrets.adoc[Secrets in Configuration] guide.\n \n+[[jwt-client-credentials]]\n === JWT client credentials\n \n Instead of sending a client secret, Quarkus OIDC can authenticate to OIDC providers by sending a generated JWT authentication token signed with either a client secret or private key.\n@@ -715,7 +716,7 @@ Token properties cover a lot of requirements related to the token verification,\n [[token-preprocessing]]\n === Token preprocessing\n \n-Some tokens may have to decrypted or their headers preprocessed for the verification process to start and succeed.\n+ID and access tokens may have to be decrypted or their headers preprocessed for the verification process to start and succeed.\n \n .Token preprocessing properties\n [options=\"header\"]\n@@ -723,10 +724,18 @@ Some tokens may have to decrypted or their headers preprocessed for the verifica\n |Property | Default |Description\n \n |quarkus.oidc.token.decryption-key-location || Decryption key location\n+|quarkus.oidc.token.decrypt-id-token || Decrypt ID token if this property is `true` or if `quarkus.oidc.token.decryption-key-location` is set\n+|quarkus.oidc.token.decrypt-access-token |false| Decrypt access token\n |quarkus.oidc.token.customizer-name || Customizer name\n |====\n \n-OIDC providers usually issue signed ID tokens but they may also issue encrypted ID tokens which Quarkus needs to decrypt. Use the `quarkus.oidc.token.decryption-key-location` property to point to a JWK or PEM decryption key file in this case.\n+OIDC providers usually issue signed ID and access tokens but may also additionally encrypt these tokens which Quarkus needs to decrypt to verify them. Choose which token types must be decrypted: the ID token with `quarkus.oidc.token.decrypt-id-token`, or the access token with `quarkus.oidc.token.decrypt-access-token`.\n+\n+Both ID and access tokens are considered encrypted if they contain 5 parts separated by the dot character, indicating that the JWE encryption was used.\n+\n+For backward compatibility reasons, ID token decryption is attempted if  `quarkus.oidc.token.decryption-key-location` is configured, but using an optional `quarkus.oidc.token.decrypt-id-token` boolean property is RECOMMENDED instead, to allow for more flexibility in selecting decryption keys.\n+\n+When either ID or access token must be decrypted, `quarkus.oidc.token.decryption-key-location` is checked first. If this property is not configured, then the <<jwt-client-credentials>> key, if available, is used. Finally, if the decryption key is still not initialized, the configured client secret is used as a decryption key.\n \n `quarkus.oidc.token.customizer-name` is an advanced property that may be used to select a specific `io.quarkus.oidc.TokenCustomizer` implementation which can pre-process JWT token headers before its signature can be verified. The main use-case is to support verifying legacy Azure JWT tokens which must have their `nonce` header recalculated for the signature verification to succeed.\n \n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java\nindex 2ca170864a3e2..ff0eef86499a8 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java\n@@ -2332,6 +2332,16 @@ public static Token fromAudience(String... audience) {\n          */\n         public Optional<String> decryptionKeyLocation = Optional.empty();\n \n+        /**\n+         * Decrypt ID token.\n+         */\n+        Optional<Boolean> decryptIdToken = Optional.empty();\n+\n+        /**\n+         * Decrypt access token.\n+         */\n+        boolean decryptAccessToken;\n+\n         /**\n          * Allow the remote introspection of JWT tokens when no matching JWK key is available.\n          *\n@@ -2572,6 +2582,8 @@ private void addConfigMappingValues(io.quarkus.oidc.runtime.OidcTenantConfig.Tok\n             authorizationScheme = mapping.authorizationScheme();\n             signatureAlgorithm = mapping.signatureAlgorithm().map(Enum::toString).map(SignatureAlgorithm::valueOf);\n             decryptionKeyLocation = mapping.decryptionKeyLocation();\n+            decryptIdToken = mapping.decryptIdToken();\n+            decryptAccessToken = mapping.decryptAccessToken();\n             allowJwtIntrospection = mapping.allowJwtIntrospection();\n             requireJwtIntrospectionOnly = mapping.requireJwtIntrospectionOnly();\n             allowOpaqueTokenIntrospection = mapping.allowOpaqueTokenIntrospection();\n@@ -2661,6 +2673,16 @@ public Optional<String> decryptionKeyLocation() {\n             return decryptionKeyLocation;\n         }\n \n+        @Override\n+        public Optional<Boolean> decryptIdToken() {\n+            return decryptIdToken;\n+        }\n+\n+        @Override\n+        public boolean decryptAccessToken() {\n+            return decryptAccessToken;\n+        }\n+\n         @Override\n         public boolean allowJwtIntrospection() {\n             return allowJwtIntrospection;\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\nindex f360ac4a678ca..5c73026f145a8 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\n@@ -22,11 +22,9 @@\n import org.jboss.logging.Logger;\n import org.jose4j.jwt.consumer.ErrorCodes;\n import org.jose4j.jwt.consumer.InvalidJwtException;\n-import org.jose4j.lang.JoseException;\n import org.jose4j.lang.UnresolvableKeyException;\n \n import io.netty.handler.codec.http.HttpResponseStatus;\n-import io.quarkus.logging.Log;\n import io.quarkus.oidc.AuthorizationCodeTokens;\n import io.quarkus.oidc.IdTokenCredential;\n import io.quarkus.oidc.JavaScriptRequestChecker;\n@@ -49,7 +47,6 @@\n import io.quarkus.security.spi.runtime.BlockingSecurityExecutor;\n import io.quarkus.security.spi.runtime.SecurityEventHelper;\n import io.quarkus.vertx.http.runtime.security.ChallengeData;\n-import io.smallrye.jwt.algorithm.KeyEncryptionAlgorithm;\n import io.smallrye.jwt.build.Jwt;\n import io.smallrye.jwt.build.JwtClaimsBuilder;\n import io.smallrye.jwt.build.JwtSignatureBuilder;\n@@ -355,7 +352,7 @@ public Uni<? extends SecurityIdentity> apply(AuthorizationCodeTokens session) {\n                         context.put(OidcConstants.ACCESS_TOKEN_VALUE, session.getAccessToken());\n                         context.put(AuthorizationCodeTokens.class.getName(), session);\n                         // Default token state manager may have encrypted ID token when it was saved in a cookie\n-                        final String currentIdToken = decryptIdTokenIfEncryptedByProvider(configContext, session.getIdToken());\n+                        final String currentIdToken = decryptIdToken(configContext, session.getIdToken());\n                         return authenticate(identityProviderManager, context,\n                                 new IdTokenCredential(currentIdToken,\n                                         isInternalIdToken(currentIdToken, configContext)))\n@@ -506,22 +503,6 @@ private Uni<SecurityIdentity> redirectToSessionExpiredPage(RoutingContext contex\n                         filterRedirect(context, configContext, sessionExpiredUri, Redirect.Location.SESSION_EXPIRED_PAGE))));\n     }\n \n-    private static String decryptIdTokenIfEncryptedByProvider(TenantConfigContext resolvedContext, String token) {\n-        if ((resolvedContext.provider().tokenDecryptionKey != null\n-                || resolvedContext.provider().client.getClientJwtKey() != null)\n-                && OidcUtils.isEncryptedToken(token)) {\n-            try {\n-                return OidcUtils.decryptString(token,\n-                        resolvedContext.provider().tokenDecryptionKey != null ? resolvedContext.provider().tokenDecryptionKey\n-                                : resolvedContext.provider().client.getClientJwtKey(),\n-                        KeyEncryptionAlgorithm.RSA_OAEP);\n-            } catch (JoseException ex) {\n-                Log.debugf(\"Failed to decrypt a token: %s, a token introspection will be attempted instead\", ex.getMessage());\n-            }\n-        }\n-        return token;\n-    }\n-\n     private boolean isLogout(RoutingContext context, TenantConfigContext configContext, SecurityIdentity identity) {\n         return isRpInitiatedLogout(context, configContext) || isBackChannelLogoutPending(configContext, identity)\n                 || isFrontChannelLogoutValid(context, configContext, identity);\n@@ -881,7 +862,7 @@ public Uni<SecurityIdentity> apply(final AuthorizationCodeTokens tokens, final T\n                         context.put(AuthorizationCodeTokens.class.getName(), tokens);\n \n                         // Default token state manager may have encrypted ID token\n-                        final String idToken = decryptIdTokenIfEncryptedByProvider(configContext, tokens.getIdToken());\n+                        final String idToken = decryptIdToken(configContext, tokens.getIdToken());\n \n                         LOG.debug(\"Authorization code has been exchanged, verifying ID token\");\n                         return authenticate(identityProviderManager, context,\n@@ -1004,7 +985,7 @@ private CodeAuthenticationStateBean getCodeAuthenticationBean(String[] parsedSta\n             JsonObject json = null;\n \n             try {\n-                json = OidcUtils.decryptJson(parsedStateCookieValue[1], configContext.getStateEncryptionKey());\n+                json = OidcUtils.decryptJson(parsedStateCookieValue[1], configContext.getStateCookieEncryptionKey());\n             } catch (Exception ex) {\n                 LOG.errorf(\"State cookie value can not be decrypted for the %s tenant\",\n                         configContext.oidcConfig().tenantId().get());\n@@ -1054,7 +1035,7 @@ private String generateInternalIdToken(TenantConfigContext context, UserInfo use\n                             .getEncoded()));\n         } else {\n             LOG.debug(\"Signing internal ID token with a generated secret key\");\n-            return sigBuilder.sign(context.getInternalIdTokenSecretKey());\n+            return sigBuilder.sign(context.getInternalIdTokenSigningKey());\n         }\n     }\n \n@@ -1157,6 +1138,19 @@ private void fireEvent(SecurityEvent.Type eventType, Map<String, Object> propert\n         }\n     }\n \n+    private static String decryptIdToken(TenantConfigContext configContext, String idToken) {\n+        if (configContext.oidcConfig().token().decryptIdToken().isPresent() &&\n+                !configContext.oidcConfig().token().decryptIdToken().get()) {\n+            return idToken;\n+        }\n+        if (configContext.oidcConfig().token().decryptIdToken().orElse(false)\n+                || configContext.oidcConfig().token().decryptionKeyLocation().isPresent()) {\n+            return OidcUtils.decryptToken(configContext, idToken);\n+        } else {\n+            return idToken;\n+        }\n+    }\n+\n     private String getRedirectPath(OidcTenantConfig oidcConfig, RoutingContext context) {\n         Authentication auth = oidcConfig.authentication();\n         return auth.redirectPath().isPresent() ? auth.redirectPath().get() : context.request().path();\n@@ -1233,7 +1227,7 @@ private String encodeExtraStateValue(CodeAuthenticationStateBean extraStateValue\n                 json.put(OidcUtils.STATE_COOKIE_RESTORE_PATH, extraStateValue.getRestorePath());\n             }\n             try {\n-                return OidcUtils.encryptJson(json, configContext.getStateEncryptionKey());\n+                return OidcUtils.encryptJson(json, configContext.getStateCookieEncryptionKey());\n             } catch (Exception ex) {\n                 LOG.errorf(\"State containing the code verifier can not be encrypted: %s\", ex.getMessage());\n                 throw new AuthenticationCompletionException(ex);\n@@ -1343,7 +1337,7 @@ public Uni<SecurityIdentity> apply(final AuthorizationCodeTokens tokens, final T\n                             context.put(REFRESH_TOKEN_GRANT_RESPONSE, Boolean.TRUE);\n \n                             // Default token state manager may have encrypted the refreshed ID token\n-                            final String idToken = decryptIdTokenIfEncryptedByProvider(configContext, tokens.getIdToken());\n+                            final String idToken = decryptIdToken(configContext, tokens.getIdToken());\n \n                             LOG.debug(\"Verifying the refreshed ID token\");\n                             return authenticate(identityProviderManager, context,\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/DefaultTokenStateManager.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/DefaultTokenStateManager.java\nindex b72b654f5060a..c33c64daeae8d 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/DefaultTokenStateManager.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/DefaultTokenStateManager.java\n@@ -228,7 +228,7 @@ private String encryptToken(String token, RoutingContext context, OidcTenantConf\n             try {\n                 KeyEncryptionAlgorithm encAlgorithm = KeyEncryptionAlgorithm\n                         .valueOf(oidcConfig.tokenStateManager().encryptionAlgorithm().name());\n-                return OidcUtils.encryptString(token, configContext.getTokenEncSecretKey(), encAlgorithm);\n+                return OidcUtils.encryptString(token, configContext.getSessionCookieEncryptionKey(), encAlgorithm);\n             } catch (Exception ex) {\n                 throw new AuthenticationFailedException(ex);\n             }\n@@ -242,7 +242,7 @@ private String decryptToken(String token, RoutingContext context, OidcTenantConf\n             try {\n                 KeyEncryptionAlgorithm encAlgorithm = KeyEncryptionAlgorithm\n                         .valueOf(oidcConfig.tokenStateManager().encryptionAlgorithm().name());\n-                return OidcUtils.decryptString(token, configContext.getTokenEncSecretKey(), encAlgorithm);\n+                return OidcUtils.decryptString(token, configContext.getSessionCookieEncryptionKey(), encAlgorithm);\n             } catch (Exception ex) {\n                 throw new AuthenticationFailedException(ex);\n             }\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/LazyTenantConfigContext.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/LazyTenantConfigContext.java\nindex 91ea3f8590722..00ccf3ae99319 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/LazyTenantConfigContext.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/LazyTenantConfigContext.java\n@@ -1,5 +1,6 @@\n package io.quarkus.oidc.runtime;\n \n+import java.security.Key;\n import java.util.List;\n import java.util.function.Supplier;\n \n@@ -66,18 +67,23 @@ public OidcProviderClientImpl getOidcProviderClient() {\n     }\n \n     @Override\n-    public SecretKey getStateEncryptionKey() {\n-        return delegate.getStateEncryptionKey();\n+    public SecretKey getStateCookieEncryptionKey() {\n+        return delegate.getStateCookieEncryptionKey();\n     }\n \n     @Override\n-    public SecretKey getTokenEncSecretKey() {\n-        return delegate.getTokenEncSecretKey();\n+    public SecretKey getSessionCookieEncryptionKey() {\n+        return delegate.getSessionCookieEncryptionKey();\n     }\n \n     @Override\n-    public SecretKey getInternalIdTokenSecretKey() {\n-        return delegate.getInternalIdTokenSecretKey();\n+    public SecretKey getInternalIdTokenSigningKey() {\n+        return delegate.getInternalIdTokenSigningKey();\n+    }\n+\n+    @Override\n+    public Key getTokenDecryptionKey() {\n+        return delegate.getTokenDecryptionKey();\n     }\n \n     @Override\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java\nindex 765aa90ac9f1f..1e30210ae1018 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java\n@@ -105,6 +105,10 @@ protected Map<String, Object> getRequestData(TokenAuthenticationRequest request)\n \n     private Uni<SecurityIdentity> authenticate(TokenAuthenticationRequest request, Map<String, Object> requestData,\n             TenantConfigContext resolvedContext) {\n+        if (!isIdToken(request.getToken()) && resolvedContext.oidcConfig().token().decryptAccessToken()) {\n+            String decryptedToken = OidcUtils.decryptToken(resolvedContext, request.getToken().getToken());\n+            request = new TokenAuthenticationRequest(new AccessTokenCredential(decryptedToken));\n+        }\n         if (resolvedContext.oidcConfig().authServerUrl().isPresent()) {\n             return validateAllTokensWithOidcServer(requestData, request, resolvedContext);\n         } else if (resolvedContext.oidcConfig().certificateChain().trustStoreFile().isPresent()) {\n@@ -623,7 +627,11 @@ private Uni<TokenVerificationResult> verifyCodeFlowAccessTokenUni(Map<String, Ob\n         if (isIdToken(request)\n                 && (resolvedContext.oidcConfig().authentication().verifyAccessToken()\n                         || resolvedContext.oidcConfig().roles().source().orElse(null) == Source.accesstoken)) {\n-            final String codeAccessToken = (String) requestData.get(OidcConstants.ACCESS_TOKEN_VALUE);\n+            String codeAccessToken = (String) requestData.get(OidcConstants.ACCESS_TOKEN_VALUE);\n+            if (resolvedContext.oidcConfig().token().decryptAccessToken()) {\n+                codeAccessToken = OidcUtils.decryptToken(resolvedContext, codeAccessToken);\n+                requestData.put(OidcConstants.ACCESS_TOKEN_VALUE, codeAccessToken);\n+            }\n             return verifyTokenUni(requestData, resolvedContext, new AccessTokenCredential(codeAccessToken), false,\n                     false, true, userInfo);\n         } else {\n@@ -692,7 +700,7 @@ private Uni<TokenVerificationResult> verifyTokenUni(Map<String, Object> requestD\n     private Uni<TokenVerificationResult> verifySelfSignedTokenUni(TenantConfigContext resolvedContext, String token) {\n         try {\n             return Uni.createFrom().item(\n-                    resolvedContext.provider().verifySelfSignedJwtToken(token, resolvedContext.getInternalIdTokenSecretKey()));\n+                    resolvedContext.provider().verifySelfSignedJwtToken(token, resolvedContext.getInternalIdTokenSigningKey()));\n         } catch (Throwable t) {\n             return Uni.createFrom().failure(t);\n         }\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcProvider.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcProvider.java\nindex 411c659de5c53..f03d2c09e2a6d 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcProvider.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcProvider.java\n@@ -86,17 +86,15 @@ public class OidcProvider implements Closeable {\n     final String issuer;\n     final String[] audience;\n     final Map<String, Set<String>> requiredClaims;\n-    final Key tokenDecryptionKey;\n     final AlgorithmConstraints requiredAlgorithmConstraints;\n \n-    public OidcProvider(OidcProviderClientImpl client, OidcTenantConfig oidcConfig, JsonWebKeySet jwks,\n-            Key tokenDecryptionKey) {\n-        this(client, oidcConfig, jwks, TenantFeatureFinder.find(oidcConfig), tokenDecryptionKey,\n+    public OidcProvider(OidcProviderClientImpl client, OidcTenantConfig oidcConfig, JsonWebKeySet jwks) {\n+        this(client, oidcConfig, jwks, TenantFeatureFinder.find(oidcConfig),\n                 TenantFeatureFinder.find(oidcConfig, Validator.class));\n     }\n \n     public OidcProvider(OidcProviderClientImpl client, OidcTenantConfig oidcConfig, JsonWebKeySet jwks,\n-            TokenCustomizer tokenCustomizer, Key tokenDecryptionKey, List<Validator> customValidators) {\n+            TokenCustomizer tokenCustomizer, List<Validator> customValidators) {\n         this.client = client;\n         this.oidcConfig = oidcConfig;\n         this.tokenCustomizer = tokenCustomizer;\n@@ -116,7 +114,6 @@ public OidcProvider(OidcProviderClientImpl client, OidcTenantConfig oidcConfig,\n         this.issuer = checkIssuerProp();\n         this.audience = checkAudienceProp();\n         this.requiredClaims = checkRequiredClaimsProp();\n-        this.tokenDecryptionKey = tokenDecryptionKey;\n         this.requiredAlgorithmConstraints = checkSignatureAlgorithm();\n         this.customValidators = customValidators == null ? List.of() : customValidators;\n         if (client != null) {\n@@ -124,7 +121,7 @@ public OidcProvider(OidcProviderClientImpl client, OidcTenantConfig oidcConfig,\n         }\n     }\n \n-    public OidcProvider(String publicKeyEnc, OidcTenantConfig oidcConfig, Key tokenDecryptionKey) {\n+    public OidcProvider(String publicKeyEnc, OidcTenantConfig oidcConfig) {\n         this.client = null;\n         this.oidcConfig = oidcConfig;\n         this.tokenCustomizer = TenantFeatureFinder.find(oidcConfig);\n@@ -139,7 +136,6 @@ public OidcProvider(String publicKeyEnc, OidcTenantConfig oidcConfig, Key tokenD\n         this.issuer = checkIssuerProp();\n         this.audience = checkAudienceProp();\n         this.requiredClaims = checkRequiredClaimsProp();\n-        this.tokenDecryptionKey = tokenDecryptionKey;\n         this.requiredAlgorithmConstraints = checkSignatureAlgorithm();\n         this.customValidators = TenantFeatureFinder.find(oidcConfig, Validator.class);\n     }\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java\nindex b3ba37830ca89..b1462b9abe892 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java\n@@ -1112,17 +1112,31 @@ interface Token {\n         Optional<SignatureAlgorithm> signatureAlgorithm();\n \n         /**\n-         * Decryption key location.\n-         * JWT tokens can be inner-signed and encrypted by OpenId Connect providers.\n-         * However, it is not always possible to remotely introspect such tokens because\n-         * the providers might not control the private decryption keys.\n-         * In such cases set this property to point to the file containing the decryption private key in\n-         * PEM or JSON Web Key (JWK) format.\n-         * If this property is not set and the `private_key_jwt` client authentication method is used, the private key\n-         * used to sign the client authentication JWT tokens are also used to decrypt the encrypted ID tokens.\n+         * Decryption key location for encrypted ID and access tokens.\n          */\n         Optional<String> decryptionKeyLocation();\n \n+        /**\n+         * Decrypt ID token.\n+         *\n+         * If the {@link Token#decryptionKeyLocation()} property is configured then the decryption key will be loaded from this\n+         * location.\n+         * Otherwise, if the JWT authentication token key is available, then it will be used to decrypt the token.\n+         * Finally, if a client secret is configured, it will be used as a secret key to decrypt the token.\n+         */\n+        Optional<Boolean> decryptIdToken();\n+\n+        /**\n+         * Decrypt access token.\n+         *\n+         * If the {@link Token#decryptionKeyLocation()} property is configured then the decryption key will be loaded from this\n+         * location.\n+         * Otherwise, if the JWT authentication token key is available, then it will be used to decrypt the token.\n+         * Finally, if a client secret is configured, it will be used as a secret key to decrypt the token.\n+         */\n+        @WithDefault(\"false\")\n+        boolean decryptAccessToken();\n+\n         /**\n          * Allow the remote introspection of JWT tokens when no matching JWK key is available.\n          *\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcUtils.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcUtils.java\nindex 8df0e680c08a7..ec33ecb741ae3 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcUtils.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcUtils.java\n@@ -10,6 +10,7 @@\n import java.security.Key;\n import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n+import java.security.PrivateKey;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -34,6 +35,8 @@\n import org.jboss.logging.Logger;\n import org.jose4j.jwa.AlgorithmConstraints;\n import org.jose4j.jwe.JsonWebEncryption;\n+import org.jose4j.jwk.JsonWebKey;\n+import org.jose4j.jwk.PublicJsonWebKey;\n import org.jose4j.jwt.JwtClaims;\n import org.jose4j.jwt.consumer.InvalidJwtException;\n import org.jose4j.lang.JoseException;\n@@ -65,6 +68,7 @@\n import io.quarkus.vertx.http.runtime.security.HttpSecurityUtils;\n import io.smallrye.jwt.algorithm.ContentEncryptionAlgorithm;\n import io.smallrye.jwt.algorithm.KeyEncryptionAlgorithm;\n+import io.smallrye.jwt.util.KeyUtils;\n import io.smallrye.mutiny.Uni;\n import io.smallrye.mutiny.subscription.UniEmitter;\n import io.vertx.core.Handler;\n@@ -330,7 +334,8 @@ static QuarkusSecurityIdentity validateAndCreateIdentity(Map<String, Object> req\n         if (codeTokens != null) {\n             RefreshToken refreshTokenCredential = new RefreshToken(codeTokens.getRefreshToken());\n             builder.addCredential(refreshTokenCredential);\n-            builder.addCredential(new AccessTokenCredential(codeTokens.getAccessToken(), refreshTokenCredential));\n+            builder.addCredential(new AccessTokenCredential((String) requestData.get(OidcConstants.ACCESS_TOKEN_VALUE),\n+                    refreshTokenCredential));\n         }\n         JsonWebToken jwtPrincipal;\n         try {\n@@ -603,7 +608,7 @@ public static String encryptString(String jweString, SecretKey key) throws Excep\n         return encryptString(jweString, key, KeyEncryptionAlgorithm.A256GCMKW);\n     }\n \n-    public static String encryptString(String jweString, SecretKey key, KeyEncryptionAlgorithm algorithm) throws Exception {\n+    public static String encryptString(String jweString, Key key, KeyEncryptionAlgorithm algorithm) throws Exception {\n         JsonWebEncryption jwe = new JsonWebEncryption();\n         jwe.setAlgorithmHeaderValue(algorithm.getAlgorithm());\n         jwe.setEncryptionMethodHeaderParameter(ContentEncryptionAlgorithm.A256GCM.getAlgorithm());\n@@ -714,7 +719,9 @@ static String extractBearerToken(RoutingContext context, OidcTenantConfig oidcCo\n             return null;\n         }\n \n-        return headerValue.substring(idx + 1);\n+        String token = headerValue.substring(idx + 1);\n+\n+        return token;\n     }\n \n     static void storeExtractedBearerToken(RoutingContext context, String token) {\n@@ -767,6 +774,15 @@ public static ServerCookie createCookie(RoutingContext context, OidcTenantConfig\n         return cookie;\n     }\n \n+    public static SecretKey createSecretKeyFromDigest(String secretKey) {\n+        try {\n+            final byte[] secretBytes = secretKey.getBytes(StandardCharsets.UTF_8);\n+            return new SecretKeySpec(getSha256Digest(secretBytes), \"AES\");\n+        } catch (Exception ex) {\n+            throw new OIDCException(ex);\n+        }\n+    }\n+\n     public static SecretKey createSecretKeyFromDigest(byte[] secretBytes) {\n         try {\n             return new SecretKeySpec(getSha256Digest(secretBytes), \"AES\");\n@@ -859,4 +875,45 @@ public static void setClearSiteData(RoutingContext context, OidcTenantConfig oid\n             context.response().putHeader(CLEAR_SITE_DATA_HEADER, builder.toString());\n         }\n     }\n+\n+    public static Key readDecryptionKey(String decryptionKeyLocation) throws Exception {\n+        Key key = null;\n+\n+        String keyContent = KeyUtils.readKeyContent(decryptionKeyLocation);\n+        if (keyContent != null) {\n+            List<JsonWebKey> keys = KeyUtils.loadJsonWebKeys(keyContent);\n+            if (keys != null && keys.size() == 1 &&\n+                    (keys.get(0).getAlgorithm() == null\n+                            || keys.get(0).getAlgorithm().equals(KeyEncryptionAlgorithm.RSA_OAEP.getAlgorithm()))\n+                    && (\"enc\".equals(keys.get(0).getUse()) || keys.get(0).getUse() == null)) {\n+                key = PublicJsonWebKey.class.cast(keys.get(0)).getPrivateKey();\n+            }\n+        }\n+        if (key == null) {\n+            key = KeyUtils.decodeDecryptionPrivateKey(keyContent);\n+        }\n+        return key;\n+    }\n+\n+    public static String decryptToken(TenantConfigContext resolvedContext, String token) {\n+        if (OidcUtils.isEncryptedToken(token)) {\n+\n+            Key decryptionKey = resolvedContext.getTokenDecryptionKey();\n+            if (decryptionKey == null) {\n+                LOG.error(\"Token decryption key is not available\");\n+                throw new AuthenticationFailedException();\n+            }\n+\n+            //TODO: Make the encryption algorithm configurable\n+            KeyEncryptionAlgorithm encryptionAlgorithm = decryptionKey instanceof PrivateKey ? KeyEncryptionAlgorithm.RSA_OAEP\n+                    : KeyEncryptionAlgorithm.A256GCMKW;\n+\n+            try {\n+                return OidcUtils.decryptString(token, decryptionKey, encryptionAlgorithm);\n+            } catch (JoseException ex) {\n+                LOG.debugf(\"Failed to decrypt a token: %s\", ex.getMessage());\n+            }\n+        }\n+        return token;\n+    }\n }\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantConfigContext.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantConfigContext.java\nindex 47b1c41ef6f81..f2c581573d3d8 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantConfigContext.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantConfigContext.java\n@@ -1,5 +1,6 @@\n package io.quarkus.oidc.runtime;\n \n+import java.security.Key;\n import java.util.List;\n import java.util.function.Supplier;\n \n@@ -31,11 +32,13 @@ public sealed interface TenantConfigContext permits TenantConfigContextImpl, Laz\n \n     OidcProviderClientImpl getOidcProviderClient();\n \n-    SecretKey getStateEncryptionKey();\n+    SecretKey getStateCookieEncryptionKey();\n \n-    SecretKey getTokenEncSecretKey();\n+    SecretKey getSessionCookieEncryptionKey();\n \n-    SecretKey getInternalIdTokenSecretKey();\n+    SecretKey getInternalIdTokenSigningKey();\n+\n+    Key getTokenDecryptionKey();\n \n     List<OidcRedirectFilter> getOidcRedirectFilters(Redirect.Location loc);\n \n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantConfigContextImpl.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantConfigContextImpl.java\nindex 3e7937b485e52..b1aa6e816c038 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantConfigContextImpl.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantConfigContextImpl.java\n@@ -1,6 +1,7 @@\n package io.quarkus.oidc.runtime;\n \n import java.nio.charset.StandardCharsets;\n+import java.security.Key;\n import java.security.PrivateKey;\n import java.util.ArrayList;\n import java.util.HashMap;\n@@ -37,19 +38,24 @@ final class TenantConfigContextImpl implements TenantConfigContext {\n     private final Map<Redirect.Location, List<OidcRedirectFilter>> redirectFilters;\n \n     /**\n-     * PKCE Secret Key\n+     * State cookie encryption key\n      */\n-    private final SecretKey stateSecretKey;\n+    private final SecretKey stateCookieEncryptionKey;\n \n     /**\n-     * Token Encryption Secret Key\n+     * Session cookie encryption key\n      */\n-    private final SecretKey tokenEncSecretKey;\n+    private final SecretKey sessionCookieEncryptionKey;\n+\n+    /**\n+     * ID and access token decryption key;\n+     */\n+    private final Key tokenDecryptionKey;\n \n     /**\n      * Internal ID token generated key\n      */\n-    private final SecretKey internalIdTokenGeneratedKey;\n+    private final SecretKey internalIdTokenSigningKey;\n \n     private final boolean ready;\n \n@@ -64,13 +70,47 @@ final class TenantConfigContextImpl implements TenantConfigContext {\n         this.ready = ready;\n \n         boolean isService = OidcUtils.isServiceApp(config);\n-        stateSecretKey = !isService && provider != null && provider.client != null ? createStateSecretKey(config) : null;\n-        tokenEncSecretKey = !isService && provider != null && provider.client != null\n+        stateCookieEncryptionKey = !isService && providerIsNoNull(provider) ? createStateSecretKey(config)\n+                : null;\n+        sessionCookieEncryptionKey = !isService && providerIsNoNull(provider)\n                 ? createTokenEncSecretKey(config, provider)\n                 : null;\n-        internalIdTokenGeneratedKey = !isService && provider != null && provider.client != null\n+        internalIdTokenSigningKey = !isService && providerIsNoNull(provider)\n                 ? generateIdTokenSecretKey(config, provider)\n                 : null;\n+        tokenDecryptionKey = providerIsNoNull(provider) ? createTokenDecryptionKey(provider) : null;\n+    }\n+\n+    private static boolean providerIsNoNull(OidcProvider provider) {\n+        return provider != null && provider.client != null;\n+    }\n+\n+    private static Key createTokenDecryptionKey(OidcProvider provider) {\n+        Key key = null;\n+\n+        OidcTenantConfig oidcConfig = provider.oidcConfig;\n+        if (oidcConfig.token().decryptionKeyLocation().isPresent()) {\n+            try {\n+                return OidcUtils.readDecryptionKey(oidcConfig.token().decryptionKeyLocation().get());\n+            } catch (Exception ex) {\n+                throw new ConfigurationException(\n+                        String.format(\"Token decryption key for tenant %s can not be read from %s\",\n+                                oidcConfig.tenantId().get(), oidcConfig.token().decryptionKeyLocation().get()),\n+                        ex);\n+            }\n+        }\n+\n+        if (oidcConfig.token().decryptIdToken().orElse(false) || oidcConfig.token().decryptAccessToken()) {\n+            if (provider.client.getClientJwtKey() != null) {\n+                key = provider.client.getClientJwtKey();\n+            } else {\n+                String clientSecret = OidcCommonUtils.clientSecret(provider.oidcConfig.credentials());\n+                if (clientSecret != null) {\n+                    key = OidcUtils.createSecretKeyFromDigest(clientSecret);\n+                }\n+            }\n+        }\n+        return key;\n     }\n \n     private static SecretKey createStateSecretKey(OidcTenantConfig config) {\n@@ -206,18 +246,23 @@ public OidcProviderClientImpl getOidcProviderClient() {\n     }\n \n     @Override\n-    public SecretKey getStateEncryptionKey() {\n-        return stateSecretKey;\n+    public SecretKey getStateCookieEncryptionKey() {\n+        return stateCookieEncryptionKey;\n+    }\n+\n+    @Override\n+    public SecretKey getSessionCookieEncryptionKey() {\n+        return sessionCookieEncryptionKey;\n     }\n \n     @Override\n-    public SecretKey getTokenEncSecretKey() {\n-        return tokenEncSecretKey;\n+    public SecretKey getInternalIdTokenSigningKey() {\n+        return this.internalIdTokenSigningKey;\n     }\n \n     @Override\n-    public SecretKey getInternalIdTokenSecretKey() {\n-        return this.internalIdTokenGeneratedKey;\n+    public Key getTokenDecryptionKey() {\n+        return tokenDecryptionKey;\n     }\n \n     private static Map<Redirect.Location, List<OidcRedirectFilter>> getRedirectFiltersMap(List<OidcRedirectFilter> filters) {\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantContextFactory.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantContextFactory.java\nindex c3e73bbcf7fb1..07bf3016ba88f 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantContextFactory.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/TenantContextFactory.java\n@@ -6,7 +6,6 @@\n import static io.quarkus.oidc.runtime.OidcRecorder.LOG;\n import static io.quarkus.oidc.runtime.OidcUtils.DEFAULT_TENANT_ID;\n \n-import java.security.Key;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -17,9 +16,6 @@\n import java.util.function.Function;\n import java.util.function.Supplier;\n \n-import org.jose4j.jwk.JsonWebKey;\n-import org.jose4j.jwk.PublicJsonWebKey;\n-\n import io.quarkus.arc.Arc;\n import io.quarkus.arc.ArcContainer;\n import io.quarkus.oidc.OIDCException;\n@@ -37,8 +33,6 @@\n import io.quarkus.runtime.configuration.ConfigurationException;\n import io.quarkus.security.spi.runtime.SecurityEventHelper;\n import io.quarkus.tls.TlsConfigurationRegistry;\n-import io.smallrye.jwt.algorithm.KeyEncryptionAlgorithm;\n-import io.smallrye.jwt.util.KeyUtils;\n import io.smallrye.mutiny.TimeoutException;\n import io.smallrye.mutiny.Uni;\n import io.vertx.core.Vertx;\n@@ -174,7 +168,7 @@ private Uni<TenantConfigContext> createTenantContext(OidcTenantConfig oidcTenant\n \n         if (!oidcConfig.tenantEnabled()) {\n             LOG.debugf(\"'%s' tenant configuration is disabled\", tenantId);\n-            return Uni.createFrom().item(TenantConfigContext.createReady(new OidcProvider(null, null, null, null), oidcConfig));\n+            return Uni.createFrom().item(TenantConfigContext.createReady(new OidcProvider(null, null, null), oidcConfig));\n         }\n \n         if (oidcConfig.authServerUrl().isEmpty()) {\n@@ -201,7 +195,7 @@ private Uni<TenantConfigContext> createTenantContext(OidcTenantConfig oidcTenant\n                                 + \" or named tenants are configured.\");\n                         oidcConfig.tenantEnabled = false;\n                         return Uni.createFrom()\n-                                .item(TenantConfigContext.createReady(new OidcProvider(null, null, null, null), oidcConfig));\n+                                .item(TenantConfigContext.createReady(new OidcProvider(null, null, null), oidcConfig));\n                     }\n                 }\n                 throw new ConfigurationException(\n@@ -377,7 +371,7 @@ private TenantConfigContext createTenantContextFromPublicKey(OidcTenantConfig oi\n                 + \" no connection to the OIDC server will be created\");\n \n         return TenantConfigContext.createReady(\n-                new OidcProvider(oidcConfig.publicKey().get(), oidcConfig, readTokenDecryptionKey(oidcConfig)), oidcConfig);\n+                new OidcProvider(oidcConfig.publicKey().get(), oidcConfig), oidcConfig);\n     }\n \n     private TenantConfigContext createTenantContextToVerifyCertChain(OidcTenantConfig oidcConfig) {\n@@ -387,7 +381,7 @@ private TenantConfigContext createTenantContextToVerifyCertChain(OidcTenantConfi\n         }\n \n         return TenantConfigContext.createReady(\n-                new OidcProvider(null, oidcConfig, readTokenDecryptionKey(oidcConfig)), oidcConfig);\n+                new OidcProvider(null, oidcConfig), oidcConfig);\n     }\n \n     private OIDCException toOidcException(Throwable cause, String authServerUrl, String tenantId) {\n@@ -409,48 +403,17 @@ public Uni<OidcProvider> apply(OidcProviderClientImpl client) {\n                                     .transform(new Function<JsonWebKeySet, OidcProvider>() {\n                                         @Override\n                                         public OidcProvider apply(JsonWebKeySet jwks) {\n-                                            return new OidcProvider(client, oidcConfig, jwks,\n-                                                    readTokenDecryptionKey(oidcConfig));\n+                                            return new OidcProvider(client, oidcConfig, jwks);\n                                         }\n                                     });\n                         } else {\n                             return Uni.createFrom()\n-                                    .item(new OidcProvider(client, oidcConfig, null, readTokenDecryptionKey(oidcConfig)));\n+                                    .item(new OidcProvider(client, oidcConfig, null));\n                         }\n                     }\n                 });\n     }\n \n-    private Key readTokenDecryptionKey(OidcTenantConfig oidcConfig) {\n-        if (oidcConfig.token().decryptionKeyLocation().isPresent()) {\n-            try {\n-                Key key = null;\n-\n-                String keyContent = KeyUtils.readKeyContent(oidcConfig.token().decryptionKeyLocation().get());\n-                if (keyContent != null) {\n-                    List<JsonWebKey> keys = KeyUtils.loadJsonWebKeys(keyContent);\n-                    if (keys != null && keys.size() == 1 &&\n-                            (keys.get(0).getAlgorithm() == null\n-                                    || keys.get(0).getAlgorithm().equals(KeyEncryptionAlgorithm.RSA_OAEP.getAlgorithm()))\n-                            && (\"enc\".equals(keys.get(0).getUse()) || keys.get(0).getUse() == null)) {\n-                        key = PublicJsonWebKey.class.cast(keys.get(0)).getPrivateKey();\n-                    }\n-                }\n-                if (key == null) {\n-                    key = KeyUtils.decodeDecryptionPrivateKey(keyContent);\n-                }\n-                return key;\n-            } catch (Exception ex) {\n-                throw new ConfigurationException(\n-                        String.format(\"Token decryption key for tenant %s can not be read from %s\",\n-                                oidcConfig.tenantId().get(), oidcConfig.token().decryptionKeyLocation().get()),\n-                        ex);\n-            }\n-        } else {\n-            return null;\n-        }\n-    }\n-\n     private Uni<JsonWebKeySet> getJsonWebSetUni(OidcProviderClientImpl client, OidcTenantConfig oidcConfig) {\n         if (!oidcConfig.discoveryEnabled().orElse(true)) {\n             String tenantId = oidcConfig.tenantId().orElse(DEFAULT_TENANT_ID);\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/builders/TokenConfigBuilder.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/builders/TokenConfigBuilder.java\nindex 585326d8a8711..bebfa2ff4d50c 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/builders/TokenConfigBuilder.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/builders/TokenConfigBuilder.java\n@@ -27,7 +27,8 @@ private record TokenImpl(Optional<String> issuer, Optional<List<String>> audienc\n             Optional<Duration> age, boolean issuedAtRequired, Optional<String> principalClaim, boolean refreshExpired,\n             Optional<Duration> refreshTokenTimeSkew, Duration forcedJwkRefreshInterval, Optional<String> header,\n             String authorizationScheme, Optional<OidcTenantConfig.SignatureAlgorithm> signatureAlgorithm,\n-            Optional<String> decryptionKeyLocation, boolean allowJwtIntrospection, boolean requireJwtIntrospectionOnly,\n+            Optional<String> decryptionKeyLocation, Optional<Boolean> decryptIdToken, boolean decryptAccessToken,\n+            boolean allowJwtIntrospection, boolean requireJwtIntrospectionOnly,\n             boolean allowOpaqueTokenIntrospection, Optional<String> customizerName,\n             Optional<Boolean> verifyAccessTokenWithUserInfo, Binding binding) implements OidcTenantConfig.Token {\n     }\n@@ -49,6 +50,8 @@ private record TokenImpl(Optional<String> issuer, Optional<List<String>> audienc\n     private String authorizationScheme;\n     private Optional<OidcTenantConfig.SignatureAlgorithm> signatureAlgorithm;\n     private Optional<String> decryptionKeyLocation;\n+    Optional<Boolean> decryptIdToken;\n+    private boolean decryptAccessToken;\n     private boolean allowJwtIntrospection;\n     private boolean requireJwtIntrospectionOnly;\n     private boolean allowOpaqueTokenIntrospection;\n@@ -83,6 +86,8 @@ public TokenConfigBuilder(OidcTenantConfigBuilder builder) {\n         this.authorizationScheme = token.authorizationScheme();\n         this.signatureAlgorithm = token.signatureAlgorithm();\n         this.decryptionKeyLocation = token.decryptionKeyLocation();\n+        this.decryptIdToken = token.decryptIdToken();\n+        this.decryptAccessToken = token.decryptAccessToken();\n         this.allowJwtIntrospection = token.allowJwtIntrospection();\n         this.requireJwtIntrospectionOnly = token.requireJwtIntrospectionOnly();\n         this.allowOpaqueTokenIntrospection = token.allowOpaqueTokenIntrospection();\n@@ -332,6 +337,42 @@ public TokenConfigBuilder decryptionKeyLocation(String decryptionKeyLocation) {\n         return this;\n     }\n \n+    /**\n+     * Sets {@link OidcTenantConfig.Token#decryptIdToken()} to true\n+     *\n+     * @return this builder\n+     */\n+    public TokenConfigBuilder decryptIdToken() {\n+        return decryptIdToken(true);\n+    }\n+\n+    /**\n+     * @param decryptIdToken {@link OidcTenantConfig.Token#decryptIdToken()}\n+     * @return this builder\n+     */\n+    public TokenConfigBuilder decryptIdToken(boolean decryptIdToken) {\n+        this.decryptIdToken = Optional.of(decryptIdToken);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets {@link OidcTenantConfig.Token#decryptAccessToken()} to true.\n+     *\n+     * @return this builder\n+     */\n+    public TokenConfigBuilder decryptAccessToken() {\n+        return decryptAccessToken(true);\n+    }\n+\n+    /**\n+     * @param decryptAccessToken {@link OidcTenantConfig.Token#decryptAccessToken()}\n+     * @return this builder\n+     */\n+    public TokenConfigBuilder decryptAccessToken(boolean decryptAccessToken) {\n+        this.decryptAccessToken = decryptAccessToken;\n+        return this;\n+    }\n+\n     /**\n      * Sets {@link OidcTenantConfig.Token#allowJwtIntrospection()} to true.\n      *\n@@ -447,7 +488,9 @@ public OidcTenantConfig.Token build() {\n         return new TokenImpl(issuer, optionalAudience, subjectRequired, Map.copyOf(requiredClaims), tokenType,\n                 lifespanGrace, age, issuedAtRequired, principalClaim, refreshExpired, refreshTokenTimeSkew,\n                 forcedJwkRefreshInterval, header, authorizationScheme, signatureAlgorithm, decryptionKeyLocation,\n-                allowJwtIntrospection, requireJwtIntrospectionOnly, allowOpaqueTokenIntrospection, customizerName,\n+                decryptIdToken,\n+                decryptAccessToken, allowJwtIntrospection, requireJwtIntrospectionOnly, allowOpaqueTokenIntrospection,\n+                customizerName,\n                 verifyAccessTokenWithUserInfo, binding);\n     }\n \n",
    "test_patch": "diff --git a/extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcProviderTest.java b/extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcProviderTest.java\nindex ca7b72c1cbe50..48352c214cee9 100644\n--- a/extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcProviderTest.java\n+++ b/extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcProviderTest.java\n@@ -45,7 +45,7 @@ public void testAlgorithmCustomizer() throws Exception {\n         JsonWebKeySet jwkSet = new JsonWebKeySet(\"{\\\"keys\\\": [\" + rsaJsonWebKey.toJson() + \"]}\");\n         OidcTenantConfig oidcConfig = new OidcTenantConfig();\n \n-        try (OidcProvider provider = new OidcProvider(null, oidcConfig, jwkSet, null)) {\n+        try (OidcProvider provider = new OidcProvider(null, oidcConfig, jwkSet)) {\n             try {\n                 provider.verifyJwtToken(newToken, false, false, null);\n                 fail(\"InvalidJwtException expected\");\n@@ -61,7 +61,7 @@ public JsonObject customizeHeaders(JsonObject headers) {\n                 return Json.createObjectBuilder(headers).add(\"alg\", \"RS256\").build();\n             }\n \n-        }, null, null)) {\n+        }, null)) {\n             TokenVerificationResult result = provider.verifyJwtToken(newToken, false, false, null);\n             assertEquals(\"http://keycloak/realm\", result.localVerificationResult.getString(\"iss\"));\n         }\n@@ -76,7 +76,7 @@ public void testTokenWithoutKidSingleRsaJwkWithoutKid() throws Exception {\n \n         final String token = Jwt.issuer(\"http://keycloak/realm\").sign(rsaJsonWebKey.getPrivateKey());\n \n-        try (OidcProvider provider = new OidcProvider(null, new OidcTenantConfig(), jwkSet, null)) {\n+        try (OidcProvider provider = new OidcProvider(null, new OidcTenantConfig(), jwkSet)) {\n             TokenVerificationResult result = provider.verifyJwtToken(token, false, false, null);\n             assertEquals(\"http://keycloak/realm\", result.localVerificationResult.getString(\"iss\"));\n         }\n@@ -91,7 +91,7 @@ public void testTokenWithoutKidMultipleRSAJwkWithoutKid() throws Exception {\n \n         final String token = Jwt.issuer(\"http://keycloak/realm\").sign(rsaJsonWebKey1.getPrivateKey());\n \n-        try (OidcProvider provider = new OidcProvider(null, new OidcTenantConfig(), jwkSet, null)) {\n+        try (OidcProvider provider = new OidcProvider(null, new OidcTenantConfig(), jwkSet)) {\n             try {\n                 provider.verifyJwtToken(token, false, false, null);\n                 fail(\"InvalidJwtException expected\");\n@@ -112,7 +112,7 @@ public void testTokenWithoutKidMultipleRSAJwkWithoutKidTryAll() throws Exception\n         final OidcTenantConfig config = new OidcTenantConfig();\n         config.jwks.tryAll = true;\n \n-        try (OidcProvider provider = new OidcProvider(null, config, jwkSet, null)) {\n+        try (OidcProvider provider = new OidcProvider(null, config, jwkSet)) {\n             TokenVerificationResult result = provider.verifyJwtToken(token, false, false, null);\n             assertEquals(\"http://keycloak/realm\", result.localVerificationResult.getString(\"iss\"));\n         }\n@@ -130,7 +130,7 @@ public void testTokenWithoutKidMultipleRSAJwkWithoutKidTryAllNoMatching() throws\n         final OidcTenantConfig config = new OidcTenantConfig();\n         config.jwks.tryAll = true;\n \n-        try (OidcProvider provider = new OidcProvider(null, config, jwkSet, null)) {\n+        try (OidcProvider provider = new OidcProvider(null, config, jwkSet)) {\n             try {\n                 provider.verifyJwtToken(token, false, false, null);\n                 fail(\"InvalidJwtException expected\");\n@@ -161,13 +161,13 @@ public void testSubject() throws Exception {\n \n         final String tokenWithSub = Jwt.subject(\"subject\").jws().keyId(\"k1\").sign(rsaJsonWebKey.getPrivateKey());\n \n-        try (OidcProvider provider = new OidcProvider(null, oidcConfig, jwkSet, null)) {\n+        try (OidcProvider provider = new OidcProvider(null, oidcConfig, jwkSet)) {\n             TokenVerificationResult result = provider.verifyJwtToken(tokenWithSub, false, true, null);\n             assertEquals(\"subject\", result.localVerificationResult.getString(Claims.sub.name()));\n         }\n \n         final String tokenWithoutSub = Jwt.claims().jws().keyId(\"k1\").sign(rsaJsonWebKey.getPrivateKey());\n-        try (OidcProvider provider = new OidcProvider(null, oidcConfig, jwkSet, null)) {\n+        try (OidcProvider provider = new OidcProvider(null, oidcConfig, jwkSet)) {\n             try {\n                 provider.verifyJwtToken(tokenWithoutSub, false, true, null);\n                 fail(\"InvalidJwtException expected\");\n@@ -188,13 +188,13 @@ public void testNonce() throws Exception {\n \n         final String tokenWithNonce = Jwt.claim(\"nonce\", \"123456\").jws().keyId(\"k1\").sign(rsaJsonWebKey.getPrivateKey());\n \n-        try (OidcProvider provider = new OidcProvider(null, oidcConfig, jwkSet, null)) {\n+        try (OidcProvider provider = new OidcProvider(null, oidcConfig, jwkSet)) {\n             TokenVerificationResult result = provider.verifyJwtToken(tokenWithNonce, false, false, \"123456\");\n             assertEquals(\"123456\", result.localVerificationResult.getString(Claims.nonce.name()));\n         }\n \n         final String tokenWithoutNonce = Jwt.claims().jws().keyId(\"k1\").sign(rsaJsonWebKey.getPrivateKey());\n-        try (OidcProvider provider = new OidcProvider(null, oidcConfig, jwkSet, null)) {\n+        try (OidcProvider provider = new OidcProvider(null, oidcConfig, jwkSet)) {\n             try {\n                 provider.verifyJwtToken(tokenWithoutNonce, false, false, \"123456\");\n                 fail(\"InvalidJwtException expected\");\n@@ -225,7 +225,7 @@ public void testAge() throws Exception {\n         OidcTenantConfig oidcConfig = new OidcTenantConfig();\n         oidcConfig.token.issuedAtRequired = false;\n \n-        try (OidcProvider provider = new OidcProvider(null, oidcConfig, jwkSet, null)) {\n+        try (OidcProvider provider = new OidcProvider(null, oidcConfig, jwkSet)) {\n             TokenVerificationResult result = provider.verifyJwtToken(token, false, false, null);\n             assertNull(result.localVerificationResult.getString(Claims.iat.name()));\n         }\n@@ -233,7 +233,7 @@ public void testAge() throws Exception {\n         OidcTenantConfig oidcConfigRequireAge = new OidcTenantConfig();\n         oidcConfigRequireAge.token.issuedAtRequired = true;\n \n-        try (OidcProvider provider = new OidcProvider(null, oidcConfigRequireAge, jwkSet, null)) {\n+        try (OidcProvider provider = new OidcProvider(null, oidcConfigRequireAge, jwkSet)) {\n             try {\n                 provider.verifyJwtToken(token, false, false, null);\n                 fail(\"InvalidJwtException expected\");\n@@ -255,7 +255,7 @@ public void testJwtValidators() throws Exception {\n                 .sign(rsaJsonWebKey.getPrivateKey());\n \n         // no validators\n-        try (OidcProvider provider = new OidcProvider(null, oidcConfig, jwkSet, null, null, null)) {\n+        try (OidcProvider provider = new OidcProvider(null, oidcConfig, jwkSet, null, null)) {\n             TokenVerificationResult result = provider.verifyJwtToken(token, false, false, null);\n             assertEquals(\"claimValue1\", result.localVerificationResult.getString(\"claim1\"));\n             assertEquals(\"claimValue2\", result.localVerificationResult.getString(\"claim2\"));\n@@ -271,7 +271,7 @@ public String validate(JwtContext jwtContext) throws MalformedClaimException {\n                 return null;\n             }\n         };\n-        try (OidcProvider provider = new OidcProvider(null, oidcConfig, jwkSet, null, null, List.of(validator1))) {\n+        try (OidcProvider provider = new OidcProvider(null, oidcConfig, jwkSet, null, List.of(validator1))) {\n             try {\n                 provider.verifyJwtToken(token, false, false, null);\n                 fail(\"InvalidJwtException expected\");\n@@ -291,7 +291,7 @@ public String validate(JwtContext jwtContext) throws MalformedClaimException {\n             }\n         };\n         // check the first validator is still run\n-        try (OidcProvider provider = new OidcProvider(null, oidcConfig, jwkSet, null, null, List.of(validator1, validator2))) {\n+        try (OidcProvider provider = new OidcProvider(null, oidcConfig, jwkSet, null, List.of(validator1, validator2))) {\n             try {\n                 provider.verifyJwtToken(token, false, false, null);\n                 fail(\"InvalidJwtException expected\");\n@@ -301,7 +301,7 @@ public String validate(JwtContext jwtContext) throws MalformedClaimException {\n         }\n         // check the second validator is applied\n         token = Jwt.claim(\"claim2\", \"claimValue2\").jws().keyId(\"k1\").sign(rsaJsonWebKey.getPrivateKey());\n-        try (OidcProvider provider = new OidcProvider(null, oidcConfig, jwkSet, null, null, List.of(validator1, validator2))) {\n+        try (OidcProvider provider = new OidcProvider(null, oidcConfig, jwkSet, null, List.of(validator1, validator2))) {\n             try {\n                 provider.verifyJwtToken(token, false, false, null);\n                 fail(\"InvalidJwtException expected\");\n\ndiff --git a/extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcTenantConfigImpl.java b/extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcTenantConfigImpl.java\nindex 038fd760b1de5..7eca5db1f61c0 100644\n--- a/extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcTenantConfigImpl.java\n+++ b/extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcTenantConfigImpl.java\n@@ -187,6 +187,8 @@ enum ConfigMappingMethods {\n         TOKEN_AUTHORIZATION_SCHEME,\n         TOKEN_SIGNATURE_ALGORITHM,\n         TOKEN_DECRYPTION_KEY_LOCATION,\n+        TOKEN_DECRYPT_ID_TOKEN,\n+        TOKEN_DECRYPT_ACCESS_TOKEN,\n         TOKEN_ALLOW_JWT_INTROSPECTION,\n         TOKEN_REQUIRE_JWT_INTROSPECTION_ONLY,\n         TOKEN_ALLOW_OPAQUE_TOKEN_INTROSPECTION,\n@@ -414,6 +416,18 @@ public Optional<String> decryptionKeyLocation() {\n                 return Optional.empty();\n             }\n \n+            @Override\n+            public Optional<Boolean> decryptIdToken() {\n+                invocationsRecorder.put(ConfigMappingMethods.TOKEN_DECRYPT_ID_TOKEN, true);\n+                return Optional.of(false);\n+            }\n+\n+            @Override\n+            public boolean decryptAccessToken() {\n+                invocationsRecorder.put(ConfigMappingMethods.TOKEN_DECRYPT_ACCESS_TOKEN, true);\n+                return false;\n+            }\n+\n             @Override\n             public boolean allowJwtIntrospection() {\n                 invocationsRecorder.put(ConfigMappingMethods.TOKEN_ALLOW_JWT_INTROSPECTION, true);\n\ndiff --git a/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/AdminResource.java b/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/AdminResource.java\nindex 55120894f7069..ff5cb8e630225 100644\n--- a/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/AdminResource.java\n+++ b/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/AdminResource.java\n@@ -75,6 +75,30 @@ public String adminIssuerTest() {\n         return \"static.tenant.id=\" + routingContext.get(\"static.tenant.id\");\n     }\n \n+    @Path(\"bearer-encrypted-with-decryption-key\")\n+    @GET\n+    @RolesAllowed(\"admin\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public String bearerEncryptedWithDecryptionKey() {\n+        return \"granted:\" + identity.getRoles();\n+    }\n+\n+    @Path(\"bearer-encrypted-with-client-secret\")\n+    @GET\n+    @RolesAllowed(\"admin\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public String bearerEncryptedWithClientSecret() {\n+        return \"granted:\" + identity.getRoles();\n+    }\n+\n+    @Path(\"bearer-encrypted-without-decryption-key\")\n+    @GET\n+    @RolesAllowed(\"admin\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public String bearerEncryptedWithoutDecryptionKey() {\n+        throw new RuntimeException(\"Unencrypted token can not be validated\");\n+    }\n+\n     @Path(\"bearer-certificate-full-chain\")\n     @GET\n     @RolesAllowed(\"admin\")\n\ndiff --git a/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/CodeFlowEncryptedIdTokenResource.java b/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/CodeFlowEncryptedIdTokenResource.java\nindex 9d1eb6dcabe14..b1ea2204f15b9 100644\n--- a/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/CodeFlowEncryptedIdTokenResource.java\n+++ b/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/CodeFlowEncryptedIdTokenResource.java\n@@ -29,4 +29,11 @@ public String accessJwk() {\n     public String accessPem() {\n         return \"user: \" + idToken.getName();\n     }\n+\n+    @GET\n+    @Authenticated\n+    @Path(\"/code-flow-encrypted-id-token-disabled\")\n+    public String idTokenDecryptionDisabled() {\n+        throw new RuntimeException(\"ID token decryption disabled\");\n+    }\n }\n\ndiff --git a/integration-tests/oidc-wiremock/src/main/resources/application.properties b/integration-tests/oidc-wiremock/src/main/resources/application.properties\nindex 43af58c2b4c72..b12d53e8797ee 100644\n--- a/integration-tests/oidc-wiremock/src/main/resources/application.properties\n+++ b/integration-tests/oidc-wiremock/src/main/resources/application.properties\n@@ -62,6 +62,15 @@ quarkus.oidc.code-flow-encrypted-id-token-pem.token-path=encrypted-id-token\n quarkus.oidc.code-flow-encrypted-id-token-pem.token.decryption-key-location=privateKey.pem\n quarkus.oidc.code-flow-encrypted-id-token-pem.token.audience=any\n \n+quarkus.oidc.code-flow-encrypted-id-token-disabled.auth-server-url=${keycloak.url:replaced-by-test-resource}/realms/quarkus/\n+quarkus.oidc.code-flow-encrypted-id-token-disabled.client-id=quarkus-web-app\n+quarkus.oidc.code-flow-encrypted-id-token-disabled.credentials.secret=secret\n+quarkus.oidc.code-flow-encrypted-id-token-disabled.application-type=web-app\n+quarkus.oidc.code-flow-encrypted-id-token-disabled.token-path=encrypted-id-token\n+quarkus.oidc.code-flow-encrypted-id-token-disabled.token.decryption-key-location=privateKey.pem\n+quarkus.oidc.code-flow-encrypted-id-token-disabled.token.decryption-id-token=false\n+quarkus.oidc.code-flow-encrypted-id-token-disabled.token.audience=any\n+\n quarkus.oidc.code-flow-form-post.auth-server-url=${keycloak.url:replaced-by-test-resource}/realms/quarkus-form-post/\n quarkus.oidc.code-flow-form-post.authentication.user-info-required=false\n quarkus.oidc.code-flow-form-post.client-id=quarkus-web-app\n@@ -197,6 +206,17 @@ quarkus.oidc.bearer-required-algorithm.client-id=quarkus-app\n quarkus.oidc.bearer-required-algorithm.credentials.secret=secret\n quarkus.oidc.bearer-required-algorithm.token.signature-algorithm=PS256\n \n+quarkus.oidc.bearer-encrypted-without-decryption-key.auth-server-url=${keycloak.url:replaced-by-test-resource}/realms/quarkus/\n+\n+quarkus.oidc.bearer-encrypted-with-decryption-key.auth-server-url=${keycloak.url:replaced-by-test-resource}/realms/quarkus/\n+quarkus.oidc.bearer-encrypted-with-decryption-key.token.decrypt-access-token=true\n+quarkus.oidc.bearer-encrypted-with-decryption-key.token.decryption-key-location=privateKeyEncryptedIdToken.jwk\n+\n+quarkus.oidc.bearer-encrypted-with-client-secret.auth-server-url=${keycloak.url:replaced-by-test-resource}/realms/quarkus/\n+quarkus.oidc.bearer-encrypted-with-client-secret.client-id=quarkus-web-app\n+quarkus.oidc.bearer-encrypted-with-client-secret.credentials.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n+quarkus.oidc.bearer-encrypted-with-client-secret.token.decrypt-access-token=true\n+\n quarkus.oidc.bearer-permission-checker.auth-server-url=${keycloak.url:replaced-by-test-resource}/realms/quarkus/\n quarkus.oidc.bearer-permission-checker.client-id=quarkus-app\n quarkus.oidc.bearer-permission-checker.credentials.secret=secret\n\ndiff --git a/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java b/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java\nindex a13b630019ebf..0c734613848ae 100644\n--- a/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java\n+++ b/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java\n@@ -19,6 +19,8 @@\n import java.util.List;\n import java.util.Set;\n \n+import javax.crypto.SecretKey;\n+\n import org.awaitility.Awaitility;\n import org.hamcrest.Matchers;\n import org.jose4j.jwx.HeaderParameterNames;\n@@ -175,6 +177,55 @@ public void testAccessAdminResourceRequiredAlgorithm() {\n                 .body(Matchers.containsString(\"admin\"));\n     }\n \n+    @Test\n+    public void testBearerTokenEncryptedWithPublicKey() {\n+        // We can pass encrypted ID token as if it were an encrypted access token\n+        String encryptedToken = OidcWiremockTestResource.getEncryptedIdToken(\"admin\", Set.of(\"admin\"));\n+        RestAssured.given().auth().oauth2(encryptedToken)\n+                .when().get(\"/api/admin/bearer-encrypted-without-decryption-key\")\n+                .then()\n+                .statusCode(401);\n+\n+        // This endpoint expects that a token was encrypted with the client secret key\n+        RestAssured.given().auth().oauth2(encryptedToken)\n+                .when().get(\"/api/admin/bearer-encrypted-with-client-secret\")\n+                .then()\n+                .statusCode(401);\n+\n+        RestAssured.given().auth().oauth2(encryptedToken)\n+                .when().get(\"/api/admin/bearer-encrypted-with-decryption-key\")\n+                .then()\n+                .statusCode(200)\n+                .body(Matchers.containsString(\"admin\"));\n+    }\n+\n+    @Test\n+    public void testBearerTokenEncryptedWithClientSecret() throws Exception {\n+        // We can pass encrypted ID token as if it were an encrypted access token\n+\n+        SecretKey encryptionKey = OidcUtils.createSecretKeyFromDigest(\n+                \"AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\");\n+        String token = OidcWiremockTestResource.getIdToken(\"admin\", Set.of(\"admin\"));\n+        String encryptedToken = OidcUtils.encryptString(token, encryptionKey);\n+\n+        RestAssured.given().auth().oauth2(encryptedToken)\n+                .when().get(\"/api/admin/bearer-encrypted-without-decryption-key\")\n+                .then()\n+                .statusCode(401);\n+\n+        // This endpoint expects that a token was encrypted with the public key\n+        RestAssured.given().auth().oauth2(encryptedToken)\n+                .when().get(\"/api/admin/bearer-encrypted-with-decryption-key\")\n+                .then()\n+                .statusCode(401);\n+\n+        RestAssured.given().auth().oauth2(encryptedToken)\n+                .when().get(\"/api/admin/bearer-encrypted-with-client-secret\")\n+                .then()\n+                .statusCode(200)\n+                .body(Matchers.containsString(\"admin\"));\n+    }\n+\n     @Test\n     public void testAccessAdminResourceWithCertThumbprint() {\n         RestAssured.given().auth().oauth2(getAccessTokenWithThumbprint(\"admin\", Set.of(\"admin\")))\n\ndiff --git a/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/CodeFlowAuthorizationTest.java b/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/CodeFlowAuthorizationTest.java\nindex 2cf119efba3d7..d8ca4e588b42a 100644\n--- a/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/CodeFlowAuthorizationTest.java\n+++ b/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/CodeFlowAuthorizationTest.java\n@@ -204,6 +204,29 @@ private void doTestCodeFlowEncryptedIdToken(String tenant, KeyEncryptionAlgorith\n         clearCache();\n     }\n \n+    @Test\n+    public void testCodeFlowEncryptedIdTokenDisabled() throws IOException {\n+        try (final WebClient webClient = createWebClient()) {\n+            webClient.getOptions().setRedirectEnabled(true);\n+            HtmlPage page = webClient\n+                    .getPage(\"http://localhost:8081/code-flow-encrypted-id-token/code-flow-encrypted-id-token-disabled\");\n+\n+            HtmlForm form = page.getFormByName(\"form\");\n+            form.getInputByName(\"username\").type(\"alice\");\n+            form.getInputByName(\"password\").type(\"alice\");\n+\n+            try {\n+                form.getInputByValue(\"login\").click();\n+                fail(\"ID token decryption is disabled\");\n+            } catch (FailingHttpStatusCodeException ex) {\n+                assertEquals(500, ex.getResponse().getStatusCode());\n+            }\n+\n+            webClient.getCookieManager().clearCookies();\n+        }\n+        clearCache();\n+    }\n+\n     private static boolean isEncryptedToken(String token, KeyEncryptionAlgorithm alg) {\n         int expectedNonEmptyParts = alg == KeyEncryptionAlgorithm.DIR ? 4 : 5;\n         return new StringTokenizer(token, \".\").countTokens() == expectedNonEmptyParts;\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47296",
    "pr_id": 47296,
    "issue_id": 47284,
    "repo": "quarkusio/quarkus",
    "problem_statement": "OidcDevServicesProcessor should not append @example.com if username already contains email\n### Description\n\nThe OidcDevServicesProcessor appends @example.com to the username, even if it already contains an email.\nFor example, username 'alice' -> 'alice@example.com'. This case is ok, imo, since alice does not contain an email.\n\nI needed however to configure a specific pre existing email as my fake user (to match some testdata in my db), and was surprised that I got \"user@domain.com@example.com\" as the name.\n\n\n\n### Implementation ideas\n\nWhen the username already contains an @ sign, no additional @example.com should be appended.",
    "issue_word_count": 97,
    "test_files_count": 2,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "extensions/devservices/oidc/src/main/java/io/quarkus/devservices/oidc/OidcDevServicesProcessor.java",
      "integration-tests/oidc-dev-services/src/main/java/io/quarkus/it/oidc/dev/services/SecuredResource.java",
      "integration-tests/oidc-dev-services/src/test/java/io/quarkus/it/oidc/dev/services/BearerAuthenticationOidcDevServicesTest.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/oidc-dev-services/src/main/java/io/quarkus/it/oidc/dev/services/SecuredResource.java",
      "integration-tests/oidc-dev-services/src/test/java/io/quarkus/it/oidc/dev/services/BearerAuthenticationOidcDevServicesTest.java"
    ],
    "base_commit": "75b67ec0f1c84565fad683930341adcb3343aadb",
    "head_commit": "9f7ae46bb8d570f327a6387df0b504f2397dc519",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47296",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47296",
    "dockerfile": "",
    "pr_merged_at": "2025-04-14T09:59:16.000Z",
    "patch": "diff --git a/extensions/devservices/oidc/src/main/java/io/quarkus/devservices/oidc/OidcDevServicesProcessor.java b/extensions/devservices/oidc/src/main/java/io/quarkus/devservices/oidc/OidcDevServicesProcessor.java\nindex 69298610e385d..89d64f23707d8 100644\n--- a/extensions/devservices/oidc/src/main/java/io/quarkus/devservices/oidc/OidcDevServicesProcessor.java\n+++ b/extensions/devservices/oidc/src/main/java/io/quarkus/devservices/oidc/OidcDevServicesProcessor.java\n@@ -714,9 +714,9 @@ private static String createIdToken(String user, Set<String> roles, String clien\n                 .audience(clientId)\n                 .subject(user)\n                 .upn(user)\n-                .claim(\"name\", capitalize(user))\n-                .claim(Claims.preferred_username, user + \"@example.com\")\n-                .claim(Claims.email, user + \"@example.com\")\n+                .claim(\"name\", buildNameClaimValue(user))\n+                .claim(Claims.preferred_username, buildEmailClaimValue(user))\n+                .claim(Claims.email, buildEmailClaimValue(user))\n                 .groups(roles)\n                 .jws()\n                 .keyId(kid)\n@@ -731,15 +731,29 @@ private static String createAccessToken(String user, Set<String> roles, Set<Stri\n                 .subject(user)\n                 .scope(scope)\n                 .upn(user)\n-                .claim(\"name\", capitalize(user))\n-                .claim(Claims.preferred_username, user + \"@example.com\")\n-                .claim(Claims.email, user + \"@example.com\")\n+                .claim(\"name\", buildNameClaimValue(user))\n+                .claim(Claims.preferred_username, buildEmailClaimValue(user))\n+                .claim(Claims.email, buildEmailClaimValue(user))\n                 .groups(roles)\n                 .jws()\n                 .keyId(kid)\n                 .sign(kp.getPrivate());\n     }\n \n+    private static String buildNameClaimValue(String user) {\n+        if (user.contains(\"@\")) {\n+            return capitalize(user.split(\"@\")[0]);\n+        }\n+        return capitalize(user);\n+    }\n+\n+    private static String buildEmailClaimValue(String user) {\n+        if (user.contains(\"@\")) {\n+            return user;\n+        }\n+        return user + \"@example.com\";\n+    }\n+\n     /*\n      * {\"kty\":\"RSA\",\n      * \"use\":\"sig\",\n@@ -801,13 +815,13 @@ private static void userInfo(RoutingContext rc) {\n                         {\n                             \"preferred_username\": \"%1$s\",\n                             \"sub\": \"%2$s\",\n-                            \"name\": \"%2$s\",\n-                            \"family_name\": \"%2$s\",\n-                            \"given_name\": \"%2$s\",\n-                            \"email\": \"%3$s\"\n+                            \"name\": \"%3$s\",\n+                            \"family_name\": \"%3$s\",\n+                            \"given_name\": \"%3$s\",\n+                            \"email\": \"%4$s\"\n                         }\n                         \"\"\".formatted(claims.getString(Claims.preferred_username.name()),\n-                        claims.getString(Claims.sub.name()), claims.getString(Claims.email.name()));\n+                        claims.getString(Claims.sub.name()), claims.getString(\"name\"), claims.getString(Claims.email.name()));\n                 rc.response()\n                         .putHeader(\"Content-Type\", \"application/json\")\n                         .endAndForget(data);\n",
    "test_patch": "diff --git a/integration-tests/oidc-dev-services/src/main/java/io/quarkus/it/oidc/dev/services/SecuredResource.java b/integration-tests/oidc-dev-services/src/main/java/io/quarkus/it/oidc/dev/services/SecuredResource.java\nindex dcc3a947e72a9..124482eba00aa 100644\n--- a/integration-tests/oidc-dev-services/src/main/java/io/quarkus/it/oidc/dev/services/SecuredResource.java\n+++ b/integration-tests/oidc-dev-services/src/main/java/io/quarkus/it/oidc/dev/services/SecuredResource.java\n@@ -44,7 +44,7 @@ public String getAdminOnly() {\n     @GET\n     @Path(\"user-only\")\n     public String getUserOnly() {\n-        return userInfo.getPreferredUserName() + \" \" + securityIdentity.getRoles();\n+        return userInfo.getPreferredUserName() + \" \" + securityIdentity.getRoles() + \" \" + userInfo.getName();\n     }\n \n     @GET\n\ndiff --git a/integration-tests/oidc-dev-services/src/test/java/io/quarkus/it/oidc/dev/services/BearerAuthenticationOidcDevServicesTest.java b/integration-tests/oidc-dev-services/src/test/java/io/quarkus/it/oidc/dev/services/BearerAuthenticationOidcDevServicesTest.java\nindex 623c51403e732..b12d6ac4f9b7c 100644\n--- a/integration-tests/oidc-dev-services/src/test/java/io/quarkus/it/oidc/dev/services/BearerAuthenticationOidcDevServicesTest.java\n+++ b/integration-tests/oidc-dev-services/src/test/java/io/quarkus/it/oidc/dev/services/BearerAuthenticationOidcDevServicesTest.java\n@@ -49,7 +49,7 @@ public void testLoginAsAlice() {\n                 .get(\"/secured/user-only\")\n                 .then()\n                 .statusCode(200)\n-                .body(Matchers.containsString(\"alice\"))\n+                .body(Matchers.startsWith(\"alice@example.com \"))\n                 .body(Matchers.containsString(\"admin\"))\n                 .body(Matchers.containsString(\"user\"));\n     }\n@@ -66,10 +66,31 @@ public void testLoginAsBob() {\n                 .get(\"/secured/user-only\")\n                 .then()\n                 .statusCode(200)\n-                .body(Matchers.containsString(\"bob\"))\n+                .body(Matchers.startsWith(\"bob@example.com \"))\n                 .body(Matchers.containsString(\"user\"));\n     }\n \n+    @Test\n+    void testEmailAndName() {\n+        // test users get an @example.com appended if username is not an email address\n+        RestAssured.given()\n+                .auth().oauth2(getAccessToken(\"bob\"))\n+                .get(\"/secured/user-only\")\n+                .then()\n+                .statusCode(200)\n+                .body(Matchers.startsWith(\"bob@example.com \"))\n+                .body(Matchers.containsString(\" Bob\"));\n+\n+        // Test no additional @example.com is appended if requested username is likely already an email address\n+        RestAssured.given()\n+                .auth().oauth2(getAccessToken(\"bob@example.com\"))\n+                .get(\"/secured/user-only\")\n+                .then()\n+                .statusCode(200)\n+                .body(Matchers.startsWith(\"bob@example.com \"))\n+                .body(Matchers.containsString(\" Bob\"));\n+    }\n+\n     private String getAccessToken(String user) {\n         return oidcTestClient.getAccessToken(user, user);\n     }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47281",
    "pr_id": 47281,
    "issue_id": 47275,
    "repo": "quarkusio/quarkus",
    "problem_statement": "@Nested of Junit5 not working with @QuarkusComponentTest: Bean CDI is removed in compilation time\n### Describe the bug\n\n**When performing tests in IntelliJIdea with @Nested classes and @QuarkusComponentTest annotation then @Inject Bean CDI is removed of the context even being used in methods**\n\n_MY CODE:_\n \n```\n@QuarkusComponentTest\n@DisplayName(\"--- Authentication service tests ---\")\npublic class AuthenticationServiceTest {\n\n    @Inject\n    AuthenticationService service;\n\n    @InjectMock\n    CredentialRepository credentialRepository;\n\n    @InjectMock\n    ForgotPasswordRepository forgotPasswordRepository;\n\n    @InjectMock\n    CredentialMapper credentialMapper = Mappers.getMapper(CredentialMapper.class);\n\n    @InjectMock\n    ForgotPasswordMapper forgotPasswordMapper = Mappers.getMapper(ForgotPasswordMapper.class);\n\n    Validator hibernateValidator = Validation.buildDefaultValidatorFactory().getValidator();\n\n    @Nested\n    @DisplayName(\"--- CredentialRequest tests \")\n    class CredentialRequestTests {\n\n        @Test\n        @DisplayName(\"Must have one violation when email is null\")\n        void givenPersistCredential_whenEmailIsNull_thenThrowConstraintViolationException() {\n\n            final String password = \"#Rayan12\";\n            final CredentialRequest request = new CredentialRequest(new EmailRequest(null), password);\n\n            final Set<ConstraintViolation<CredentialRequest>> violations = hibernateValidator.validate(request);\n\n            final String message = violations.iterator().next().getMessage(),\n                    expectedMessage = \"Email required!\";\n\n            final int size = violations.size(),\n                    expectedSize = 1;\n\n            assertEquals(expectedSize, violations.size());\n            assertEquals(expectedMessage, message);\n\n        }\n\n        @ParameterizedTest\n        @ValueSource(strings = {\n                \"\", \" \", \"plainaddress\", \"@missingusername.com\", \"username@.com\", \"username@.com.\", \"username@domain..com\",\n                \"username@domain.c\", \"username@domain.toolong\", \"username@domain,com\", \"username@domain@domain.com\",\n                \"username@domain..com\", \"username@domain.com (Joe Smith)\", \"username@domain.com.\", \"username@domain.com-\",\n                \"username@domain.com_\", \"username@domain.com+\", \"username@domain.com%\", \"username@domain.com#\",\n                \"username@domain.com$\", \"username@domain.com!\", \"username@domain.com^\", \"username@domain.com&\",\n                \"username@domain.com*\", \"username@domain.com(\", \"username@domain.com)\", \"username@domain.com=\",\n                \"username@domain.com{\", \"username@domain.com}\", \"username@domain.com[\", \"username@domain.com]\"\n        })\n        @DisplayName(\"Must have one violation when email is invalid in pattern xxx@domain.com\")\n        void givenPersistCredential_whenEmailIsInvalid_thenThrowConstraintViolationException(@SkipInject final String email) {\n\n            final String password = \"#Rayan12\";\n            final CredentialRequest request = new CredentialRequest(new EmailRequest(email), password);\n\n            final Set<ConstraintViolation<CredentialRequest>> violations = hibernateValidator.validate(request);\n\n            final String message = violations.iterator().next().getMessage(),\n                    expectedMessage = \"Invalid email! Pattern required: xxx@domain.com\";\n\n            final int size = violations.size(),\n                    expectedSize = 1;\n\n            assertEquals(expectedSize, size);\n            assertEquals(expectedMessage, message);\n\n        }\n\n        @Test\n        @DisplayName(\"Must have one violation when password is null\")\n        void givenPersistCredential_whenPasswordIsNull_thenThrowConstraintViolationException() {\n\n            final String email = \"admin@gmail.com\";\n            final CredentialRequest request = new CredentialRequest(new EmailRequest(email), null);\n\n            final Set<ConstraintViolation<CredentialRequest>> violations = hibernateValidator.validate(request);\n\n            final String message = violations.iterator().next().getMessage(),\n                    expectedMessage = \"Password required!\";\n\n            final int size = violations.size(),\n                    expectedSize = 1;\n\n            assertEquals(expectedSize, size);\n            assertEquals(expectedMessage, message);\n        }\n\n        @ParameterizedTest\n        @ValueSource(strings = {\n                \"abcde\", \"ABCDE\", \"12345\", \"abc123\", \"ABC123\", \"abc!@#\", \"123!@#\", \"abcABC\", \"abcABC123\",\n                \"abcABC!@#\", \"123ABC!@#\", \"abc123!@#\", \"abcABC123!@#\", \"abcdE\", \"abcdE1\",\n                \"abcdE1!@#\", \"abcdE1!@#2\", \"abcdE1!@#23\", \"abcdE1!@#234\", \"abcdE1!@#2345\", \"abcdE1!@#23456\", \"abcdE1!@#234567\",\n                \"abcdE1!@#2345678\", \"abcdE1!@#23456789\", \"abcdE1!@#234567890\", \"abcdE1!@#2345678901\"\n        })\n        @DisplayName(\"Must have one violation when password is invalid in pattern '5 and 8 characters, at least 1 special character and a capital letter'\")\n        void givenPersistCredential_whenPasswordIsInvalid_thenThrowConstraintViolationException(@SkipInject final String password) {\n\n            final String email = \"admin@gmail.com\";\n            final CredentialRequest request = new CredentialRequest(new EmailRequest(email), password);\n\n            final Set<ConstraintViolation<CredentialRequest>> violations = hibernateValidator.validate(request);\n\n            final String message = violations.iterator().next().getMessage(),\n                    expectedMessage = \"Invalid password! Between 5 and 8 characters, at least 1 special character and a capital letter!\";\n\n            final int size = violations.size(),\n                    expectedSize = 1;\n\n            assertEquals(expectedSize, size);\n            assertEquals(expectedMessage, message);\n\n        }\n    }\n\n\n    @Nested\n    @DisplayName(\"---- Persist credential tests ----\")\n    class PersistCredentialTests {\n\n        CredentialRequest request;\n\n        @BeforeEach\n        void setUp() {\n            request = new CredentialRequest(new EmailRequest(\"admin@gmail.com\"), \"#Admin12\");\n        }\n\n        @Test\n        @DisplayName(\"Should be throw WebApplicationException with status code 409 Conflict when email already exists\")\n        void givenPersistCredential_whenRequestEmailIsPresent_thenThrowWebApplicationException() {\n\n            final Credential credential = new Credential();\n\n            when(credentialRepository.findCredentialByEmail(request.emailRequest().email()))\n                    .thenReturn(Optional.of(credential));\n\n            final WebApplicationException e = assertThrows(WebApplicationException.class,\n                    () -> service.persistCredential(request));\n\n            final String expectedMessage = format(\"Client with email %s already exists!\", request.emailRequest().email());\n            final Response.Status expectedStatusCode = CONFLICT;\n\n            assertEquals(expectedMessage, e.getMessage());\n            assertEquals(expectedStatusCode, e.getResponse().getStatusInfo().toEnum());\n\n            verify(credentialRepository, times(1)).findCredentialByEmail(request.emailRequest().email());\n        }\n\n        @Test\n        @DisplayName(\"Should persist and return CredentialResponse when request is valid\")\n        void givenPersistCredential_whenRequestIsValid_thenPersistAndReturnCredentialResponse() {\n\n            final Credential credential = Credential.builder()\n                    .id(UUID.randomUUID())\n                    .email(request.emailRequest().email())\n                    .password(CryptographyUtils.encrypt(request.password()))\n                    .build();\n\n            final CredentialResponse expectedResponse = CredentialResponse.builder()\n                    .id(credential.getId())\n                    .email(credential.getEmail())\n                    .password(credential.getPassword())\n                    .createdAt(credential.getCreatedAt())\n                    .keycloakUserId(null)\n                    .build();\n\n            when(credentialRepository.findCredentialByEmail(request.emailRequest().email()))\n                    .thenReturn(Optional.empty());\n\n            when(credentialMapper.requestToCredential(request)).thenReturn(credential);\n            doNothing().when(credentialRepository).persist(credential);\n            when(credentialMapper.credentialToResponse(credential)).thenReturn(expectedResponse);\n\n            final CredentialResponse response = service.persistCredential(request);\n\n            assertEquals(response, expectedResponse);\n\n            verify(credentialRepository).findCredentialByEmail(request.emailRequest().email());\n            verify(credentialMapper).requestToCredential(request);\n            verify(credentialRepository).persist(credential);\n            verify(credentialMapper).credentialToResponse(credential);\n        }\n    }\n\n```\n\n_EXCEPTION TRACE_\n```\njava.lang.IllegalStateException: The injected field [dev.rayan.services.AuthenticationService dev.rayan.services.AuthenticationServiceTest.service] expects a real component; but no matching component was registered\n\n\tat io.quarkus.test.component.QuarkusComponentTestExtension$FieldInjector.<init>(QuarkusComponentTestExtension.java:1169)\n\tat io.quarkus.test.component.QuarkusComponentTestExtension.injectFields(QuarkusComponentTestExtension.java:1055)\n\tat io.quarkus.test.component.QuarkusComponentTestExtension.startContainer(QuarkusComponentTestExtension.java:501)\n\tat io.quarkus.test.component.QuarkusComponentTestExtension.beforeEach(QuarkusComponentTestExtension.java:237)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\tat java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)\n\tat java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\tat java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)\n\tat java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)\n\tat java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\tat java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n```\n\n_THE WARNING_\n\n![Image](https://github.com/user-attachments/assets/85c00e99-1a73-49c0-b5fc-1979c7be82e5)\n\n\n### Expected behavior\n\nMethods correctly executed with @Nested Junit5 classes\n\n### Actual behavior\n\nException throwning. @Unremoavable in beans is necessary: https://pt.quarkus.io/blog/unused-beans/\n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\nQuarkus 22\n\n### Quarkus version or git rev\n\n_No response_\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nMaven 3.13\n\n### Additional information\n\n_No response_",
    "issue_word_count": 1305,
    "test_files_count": 3,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "test-framework/junit5-component/src/main/java/io/quarkus/test/component/QuarkusComponentTestExtension.java",
      "test-framework/junit5-component/src/test/java/io/quarkus/test/component/beans/MySimpleComponent.java",
      "test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/NestedTest.java"
    ],
    "pr_changed_test_files": [
      "test-framework/junit5-component/src/main/java/io/quarkus/test/component/QuarkusComponentTestExtension.java",
      "test-framework/junit5-component/src/test/java/io/quarkus/test/component/beans/MySimpleComponent.java",
      "test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/NestedTest.java"
    ],
    "base_commit": "c343b9940c8befb06ece2e156f5980f0c0729935",
    "head_commit": "5c6397637ff547a848eb2a6ac11de2b021de4de2",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47281",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47281",
    "dockerfile": "",
    "pr_merged_at": "2025-04-10T09:55:46.000Z",
    "patch": "",
    "test_patch": "diff --git a/test-framework/junit5-component/src/main/java/io/quarkus/test/component/QuarkusComponentTestExtension.java b/test-framework/junit5-component/src/main/java/io/quarkus/test/component/QuarkusComponentTestExtension.java\nindex 6944ddb55d6d4..9cf757f602bf0 100644\n--- a/test-framework/junit5-component/src/main/java/io/quarkus/test/component/QuarkusComponentTestExtension.java\n+++ b/test-framework/junit5-component/src/main/java/io/quarkus/test/component/QuarkusComponentTestExtension.java\n@@ -70,6 +70,7 @@\n import org.jboss.jandex.Type;\n import org.jboss.jandex.Type.Kind;\n import org.jboss.logging.Logger;\n+import org.junit.jupiter.api.Nested;\n import org.junit.jupiter.api.RepeatedTest;\n import org.junit.jupiter.api.RepetitionInfo;\n import org.junit.jupiter.api.Test;\n@@ -218,6 +219,11 @@ public QuarkusComponentTestExtension(Class<?>... additionalComponentClasses) {\n     @Override\n     public void beforeAll(ExtensionContext context) throws Exception {\n         long start = System.nanoTime();\n+        if (context.getRequiredTestClass().isAnnotationPresent(Nested.class)) {\n+            // There is no callback that runs after all tests in a test class but before any @Nested test classes run\n+            // Therefore we need to discard the existing container here\n+            cleanup(context);\n+        }\n         buildContainer(context);\n         startContainer(context, Lifecycle.PER_CLASS);\n         LOG.debugf(\"beforeAll: %s ms\", TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start));\n@@ -605,7 +611,7 @@ private ClassLoader initArcContainer(ExtensionContext extensionContext, QuarkusC\n             AtomicReference<BeanResolver> beanResolver = new AtomicReference<>();\n \n             // Collect all @Inject and @InjectMock test class injection points to define a bean removal exclusion\n-            List<Field> injectFields = findInjectFields(testClass);\n+            List<Field> injectFields = findInjectFields(testClass, true);\n             List<Parameter> injectParams = findInjectParams(testClass);\n \n             BeanProcessor.Builder builder = BeanProcessor.builder()\n@@ -1051,13 +1057,13 @@ static <T> T cast(Object obj) {\n \n     private List<FieldInjector> injectFields(Class<?> testClass, Object testInstance) throws Exception {\n         List<FieldInjector> injectedFields = new ArrayList<>();\n-        for (Field field : findInjectFields(testClass)) {\n+        for (Field field : findInjectFields(testClass, false)) {\n             injectedFields.add(new FieldInjector(field, testInstance));\n         }\n         return injectedFields;\n     }\n \n-    private List<Field> findInjectFields(Class<?> testClass) {\n+    private List<Field> findInjectFields(Class<?> testClass, boolean scanEnclosingClasses) {\n         List<Class<? extends Annotation>> injectAnnotations;\n         Class<? extends Annotation> deprecatedInjectMock = loadDeprecatedInjectMock();\n         if (deprecatedInjectMock != null) {\n@@ -1065,7 +1071,16 @@ private List<Field> findInjectFields(Class<?> testClass) {\n         } else {\n             injectAnnotations = List.of(Inject.class, InjectMock.class);\n         }\n-        return findFields(testClass, injectAnnotations);\n+        List<Field> found = findFields(testClass, injectAnnotations);\n+        if (scanEnclosingClasses) {\n+            Class<?> enclosing = testClass.getEnclosingClass();\n+            while (enclosing != null) {\n+                // @Nested test class\n+                found.addAll(findFields(enclosing, injectAnnotations));\n+                enclosing = enclosing.getEnclosingClass();\n+            }\n+        }\n+        return found;\n     }\n \n     private List<Parameter> findInjectParams(Class<?> testClass) {\n\ndiff --git a/test-framework/junit5-component/src/test/java/io/quarkus/test/component/beans/MySimpleComponent.java b/test-framework/junit5-component/src/test/java/io/quarkus/test/component/beans/MySimpleComponent.java\nnew file mode 100644\nindex 0000000000000..ed3bc012dd110\n--- /dev/null\n+++ b/test-framework/junit5-component/src/test/java/io/quarkus/test/component/beans/MySimpleComponent.java\n@@ -0,0 +1,20 @@\n+package io.quarkus.test.component.beans;\n+\n+import jakarta.annotation.PostConstruct;\n+import jakarta.enterprise.context.ApplicationScoped;\n+\n+@ApplicationScoped\n+public class MySimpleComponent {\n+\n+    private String name;\n+\n+    @PostConstruct\n+    void init() {\n+        name = \"foo\";\n+    }\n+\n+    public String ping() {\n+        return name;\n+    }\n+\n+}\n\ndiff --git a/test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/NestedTest.java b/test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/NestedTest.java\nindex 86b8ef2e905a8..e89fd8eda7d9d 100644\n--- a/test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/NestedTest.java\n+++ b/test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/NestedTest.java\n@@ -13,6 +13,7 @@\n import io.quarkus.test.component.TestConfigProperty;\n import io.quarkus.test.component.beans.Charlie;\n import io.quarkus.test.component.beans.MyComponent;\n+import io.quarkus.test.component.beans.MySimpleComponent;\n \n @QuarkusComponentTest\n @TestConfigProperty(key = \"foo\", value = \"BAR\")\n@@ -21,6 +22,9 @@ public class NestedTest {\n     @Inject\n     MyComponent myComponent;\n \n+    @Inject\n+    MySimpleComponent mySimpleComponent;\n+\n     @InjectMock\n     Charlie charlie;\n \n@@ -28,6 +32,7 @@ public class NestedTest {\n     public void testPing() {\n         Mockito.when(charlie.ping()).thenReturn(\"foo\");\n         assertEquals(\"foo and BAR\", myComponent.ping());\n+        assertEquals(\"foo\", mySimpleComponent.ping());\n     }\n \n     @TestConfigProperty(key = \"foo\", value = \"BANG\") // declared on nested test class -> ignored\n@@ -41,6 +46,7 @@ class Nested1 {\n         public void testPing1() {\n             Mockito.when(charlie.ping()).thenReturn(\"baz\");\n             assertEquals(\"baz and BAR\", myComponent.ping());\n+            assertEquals(\"foo\", mySimpleComponent.ping());\n         }\n     }\n \n@@ -55,6 +61,33 @@ class Nested2 {\n         public void testPing2() {\n             Mockito.when(charlie.ping()).thenReturn(\"baz\");\n             assertEquals(\"baz and RAB\", myComponent.ping());\n+            assertEquals(\"foo\", mySimpleComponent.ping());\n+        }\n+\n+        @Nested\n+        class Nested3 {\n+\n+            @Test\n+            @TestConfigProperty(key = \"foo\", value = \"AJAJ\")\n+            public void testPing3() {\n+                Mockito.when(charlie.ping()).thenReturn(\"bazinga\");\n+                assertEquals(\"bazinga and AJAJ\", myComponent.ping());\n+                assertEquals(\"foo\", mySimpleComponent.ping());\n+            }\n+\n+            @Nested\n+            class Nested4 {\n+\n+                @Test\n+                @TestConfigProperty(key = \"foo\", value = \"JAJA\")\n+                public void testPing3() {\n+                    Mockito.when(charlie.ping()).thenReturn(\"BAZINGA\");\n+                    assertEquals(\"BAZINGA and JAJA\", myComponent.ping());\n+                    assertEquals(\"foo\", mySimpleComponent.ping());\n+                }\n+\n+            }\n+\n         }\n     }\n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47255",
    "pr_id": 47255,
    "issue_id": 47184,
    "repo": "quarkusio/quarkus",
    "problem_statement": "ORM doc examples shows deprecated org.hibernate.EmptyInterceptor\n### Description\n\n`org.hibernate.Interceptor` should be used instead of the deprecated `org.hibernate.EmptyInterceptor`.\nhttps://quarkus.io/guides/hibernate-orm#interceptors\n\nAnd on the way, maybe the last few places in the quarkus codebase, where EmptyInterceptor is used, could be also cleaned up.\nhttps://github.com/search?q=repo%3Aquarkusio%2Fquarkus%20EmptyInterceptor&type=code\n\n\n### Implementation ideas\n\n_No response_",
    "issue_word_count": 66,
    "test_files_count": 4,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "docs/src/main/asciidoc/hibernate-orm.adoc",
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/interceptor/ApplicationScopedInterceptorTest.java",
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/interceptor/DependentInterceptorTest.java",
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/interceptor/TransactionScopedInterceptorTest.java",
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsInterceptorTest.java"
    ],
    "pr_changed_test_files": [
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/interceptor/ApplicationScopedInterceptorTest.java",
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/interceptor/DependentInterceptorTest.java",
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/interceptor/TransactionScopedInterceptorTest.java",
      "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsInterceptorTest.java"
    ],
    "base_commit": "32d82178658485ab6e62beca34f23b733c229f9c",
    "head_commit": "0ac461faed6ad7f648b997ebcb5cadaf5531006a",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47255",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47255",
    "dockerfile": "",
    "pr_merged_at": "2025-04-09T10:55:49.000Z",
    "patch": "diff --git a/docs/src/main/asciidoc/hibernate-orm.adoc b/docs/src/main/asciidoc/hibernate-orm.adoc\nindex d819fb1b26b95..9f951ccbebc8f 100644\n--- a/docs/src/main/asciidoc/hibernate-orm.adoc\n+++ b/docs/src/main/asciidoc/hibernate-orm.adoc\n@@ -1435,9 +1435,9 @@ to your `SessionFactory` by simply defining a CDI bean with the appropriate qual\n [source,java]\n ----\n @PersistenceUnitExtension // <1>\n-public static class MyInterceptor extends EmptyInterceptor { // <2>\n+public static class MyInterceptor implements Interceptor, Serializable { // <2>\n     @Override\n-    public boolean onLoad(Object entity, Serializable id, Object[] state, // <3>\n+    public boolean onLoad(Object entity, Object id, Object[] state, // <3>\n             String[] propertyNames, Type[] types) {\n         // ...\n         return false;\n@@ -1448,8 +1448,7 @@ public static class MyInterceptor extends EmptyInterceptor { // <2>\n to tell Quarkus it should be used in the default persistence unit.\n +\n For <<multiple-persistence-units,named persistence units>>, use `@PersistenceUnitExtension(\"nameOfYourPU\")`\n-<2> Either extend `org.hibernate.EmptyInterceptor` or implement `org.hibernate.Interceptor` directly.\n-<3> Implement methods as necessary.\n+<2> Implement methods of `org.hibernate.Interceptor` as necessary.\n \n [TIP]\n ====\n",
    "test_patch": "diff --git a/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/interceptor/ApplicationScopedInterceptorTest.java b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/interceptor/ApplicationScopedInterceptorTest.java\nindex d114c555a330d..7b4bc97eaaa77 100644\n--- a/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/interceptor/ApplicationScopedInterceptorTest.java\n+++ b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/interceptor/ApplicationScopedInterceptorTest.java\n@@ -2,7 +2,6 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n-import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n@@ -14,7 +13,7 @@\n import jakarta.persistence.Table;\n import jakarta.transaction.UserTransaction;\n \n-import org.hibernate.EmptyInterceptor;\n+import org.hibernate.Interceptor;\n import org.hibernate.Session;\n import org.hibernate.SessionFactory;\n import org.hibernate.type.Type;\n@@ -113,7 +112,7 @@ public MyEntity(int id) {\n     }\n \n     @PersistenceUnitExtension // @ApplicationScoped is the default\n-    public static class ApplicationScopedInterceptor extends EmptyInterceptor {\n+    public static class ApplicationScopedInterceptor implements Interceptor {\n         private static final List<ApplicationScopedInterceptor> instances = Collections.synchronizedList(new ArrayList<>());\n         private static final List<Object> loadedIds = Collections.synchronizedList(new ArrayList<>());\n \n@@ -124,7 +123,7 @@ public ApplicationScopedInterceptor() {\n         }\n \n         @Override\n-        public boolean onLoad(Object entity, Serializable id, Object[] state, String[] propertyNames, Type[] types) {\n+        public boolean onLoad(Object entity, Object id, Object[] state, String[] propertyNames, Type[] types) {\n             loadedIds.add(id);\n             return false;\n         }\n\ndiff --git a/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/interceptor/DependentInterceptorTest.java b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/interceptor/DependentInterceptorTest.java\nindex 3824f3b3eb5bd..c1b38cae6fc8b 100644\n--- a/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/interceptor/DependentInterceptorTest.java\n+++ b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/interceptor/DependentInterceptorTest.java\n@@ -2,7 +2,6 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n-import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n@@ -15,7 +14,7 @@\n import jakarta.persistence.Table;\n import jakarta.transaction.UserTransaction;\n \n-import org.hibernate.EmptyInterceptor;\n+import org.hibernate.Interceptor;\n import org.hibernate.Session;\n import org.hibernate.SessionFactory;\n import org.hibernate.type.Type;\n@@ -116,7 +115,7 @@ public MyEntity(int id) {\n \n     @PersistenceUnitExtension\n     @Dependent\n-    public static class DependentInterceptor extends EmptyInterceptor {\n+    public static class DependentInterceptor implements Interceptor {\n         private static final List<DependentInterceptor> instances = Collections.synchronizedList(new ArrayList<>());\n         private static final List<Object> loadedIds = Collections.synchronizedList(new ArrayList<>());\n \n@@ -127,7 +126,7 @@ public DependentInterceptor() {\n         }\n \n         @Override\n-        public boolean onLoad(Object entity, Serializable id, Object[] state, String[] propertyNames, Type[] types) {\n+        public boolean onLoad(Object entity, Object id, Object[] state, String[] propertyNames, Type[] types) {\n             loadedIds.add(id);\n             return false;\n         }\n\ndiff --git a/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/interceptor/TransactionScopedInterceptorTest.java b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/interceptor/TransactionScopedInterceptorTest.java\nindex 8878a756c2cb1..c1f1501778442 100644\n--- a/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/interceptor/TransactionScopedInterceptorTest.java\n+++ b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/interceptor/TransactionScopedInterceptorTest.java\n@@ -3,7 +3,6 @@\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatThrownBy;\n \n-import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n@@ -16,7 +15,7 @@\n import jakarta.transaction.TransactionScoped;\n import jakarta.transaction.UserTransaction;\n \n-import org.hibernate.EmptyInterceptor;\n+import org.hibernate.Interceptor;\n import org.hibernate.Session;\n import org.hibernate.SessionFactory;\n import org.hibernate.type.Type;\n@@ -118,7 +117,7 @@ public MyEntity(int id) {\n \n     @PersistenceUnitExtension\n     @TransactionScoped\n-    public static class TransactionScopedInterceptor extends EmptyInterceptor {\n+    public static class TransactionScopedInterceptor implements Interceptor {\n         private static final List<TransactionScopedInterceptor> instances = Collections.synchronizedList(new ArrayList<>());\n         private static final List<Object> loadedIds = Collections.synchronizedList(new ArrayList<>());\n \n@@ -129,7 +128,7 @@ public TransactionScopedInterceptor() {\n         }\n \n         @Override\n-        public boolean onLoad(Object entity, Serializable id, Object[] state, String[] propertyNames, Type[] types) {\n+        public boolean onLoad(Object entity, Object id, Object[] state, String[] propertyNames, Type[] types) {\n             loadedIds.add(id);\n             return false;\n         }\n\ndiff --git a/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsInterceptorTest.java b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsInterceptorTest.java\nindex 74b7d037bf1c0..73a064f3aa870 100644\n--- a/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsInterceptorTest.java\n+++ b/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsInterceptorTest.java\n@@ -2,7 +2,6 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n-import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n@@ -10,7 +9,7 @@\n import jakarta.inject.Inject;\n import jakarta.transaction.UserTransaction;\n \n-import org.hibernate.EmptyInterceptor;\n+import org.hibernate.Interceptor;\n import org.hibernate.Session;\n import org.hibernate.type.Type;\n import org.junit.jupiter.api.BeforeEach;\n@@ -105,7 +104,7 @@ public void test() throws Exception {\n     }\n \n     @PersistenceUnitExtension\n-    public static class MyDefaultPUInterceptor extends EmptyInterceptor {\n+    public static class MyDefaultPUInterceptor implements Interceptor {\n         private static final List<MyDefaultPUInterceptor> instances = Collections.synchronizedList(new ArrayList<>());\n         private static final List<Object> loadedIds = Collections.synchronizedList(new ArrayList<>());\n \n@@ -116,14 +115,14 @@ public MyDefaultPUInterceptor() {\n         }\n \n         @Override\n-        public boolean onLoad(Object entity, Serializable id, Object[] state, String[] propertyNames, Type[] types) {\n+        public boolean onLoad(Object entity, Object id, Object[] state, String[] propertyNames, Type[] types) {\n             loadedIds.add(id);\n             return false;\n         }\n     }\n \n     @PersistenceUnitExtension(\"inventory\")\n-    public static class MyInventoryPUInterceptor extends EmptyInterceptor {\n+    public static class MyInventoryPUInterceptor implements Interceptor {\n         private static final List<MyInventoryPUInterceptor> instances = Collections.synchronizedList(new ArrayList<>());\n         private static final List<Object> loadedIds = Collections.synchronizedList(new ArrayList<>());\n \n@@ -134,7 +133,7 @@ public MyInventoryPUInterceptor() {\n         }\n \n         @Override\n-        public boolean onLoad(Object entity, Serializable id, Object[] state, String[] propertyNames, Type[] types) {\n+        public boolean onLoad(Object entity, Object id, Object[] state, String[] propertyNames, Type[] types) {\n             loadedIds.add(id);\n             return false;\n         }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47248",
    "pr_id": 47248,
    "issue_id": 47242,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Log rotation seems impossible to disable\n### Describe the bug\n\nWe are running a quarkus-based application, KeyCloak on-prem. Logrotation is done system-wide by Linux' logrotate facility. As it seems there is no way to disable quarkus' built in log rotation:\n\nThis is bad, because:\n\n- Ops need to have one interface to configure log rotation. Having to check various service-specific configuration files is not really an option.\n- When trying to debug problems with KeyCloak one often wants to use `tail -f keycloak.log`, but this does not work with KeyCloak, because the way it rotates (rename keycloak.log and continue logging into a different file) breaks this.\n- Also there are additional triggers for log rotating which all seem on by default. This is against best practices. Expected log rotate behaviour is once a day. Doing things entirely differently causes a lot of work for ops responsible not only for KeyCloak but lots of other services in a data center.\n\n\n\n### Expected behavior\n\nThere should be a switch settable in quarkus.properties controlling whether quarkus does log rotation at all. \n\n### Actual behavior\n\nThere is no such switch. As a workaround one can set two properties in quarkus.properties:\n```\nquarkus.log.file.rotation.max-file-size=999M\nquarkus.log.file.rotation.rotate-on-boot=false\n```\n\nThis however has its limits and is not a clean solution.\n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### Quarkus version or git rev\n\n_No response_\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\nThis ticket is forked from KeyCloak issue [38699](https://github.com/keycloak/keycloak/issues/38699) as this is a quarkus and not a KeyCloak issue.",
    "issue_word_count": 290,
    "test_files_count": 2,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "core/runtime/src/main/java/io/quarkus/runtime/logging/LogRuntimeConfig.java",
      "core/runtime/src/main/java/io/quarkus/runtime/logging/LoggingSetupRecorder.java",
      "integration-tests/test-extension/extension/deployment/src/main/resources/application-no-log-rotation.properties",
      "integration-tests/test-extension/extension/deployment/src/test/java/io/quarkus/logging/NoRotationLoggingTest.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/test-extension/extension/deployment/src/main/resources/application-no-log-rotation.properties",
      "integration-tests/test-extension/extension/deployment/src/test/java/io/quarkus/logging/NoRotationLoggingTest.java"
    ],
    "base_commit": "39c187ca1d18c490be7bb1a88a4046ad5b3f733c",
    "head_commit": "94aeee4e80893da50576dd79bbc10da3e78544d5",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47248",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47248",
    "dockerfile": "",
    "pr_merged_at": "2025-04-08T18:04:09.000Z",
    "patch": "diff --git a/core/runtime/src/main/java/io/quarkus/runtime/logging/LogRuntimeConfig.java b/core/runtime/src/main/java/io/quarkus/runtime/logging/LogRuntimeConfig.java\nindex 28a2516ae0a23..025c87fc76076 100644\n--- a/core/runtime/src/main/java/io/quarkus/runtime/logging/LogRuntimeConfig.java\n+++ b/core/runtime/src/main/java/io/quarkus/runtime/logging/LogRuntimeConfig.java\n@@ -223,6 +223,13 @@ interface FileConfig {\n         RotationConfig rotation();\n \n         interface RotationConfig {\n+\n+            /**\n+             * Whether log rotation is enabled.\n+             */\n+            @WithDefault(\"true\")\n+            boolean enabled();\n+\n             /**\n              * The maximum log file size, after which a rotation is executed.\n              * Note that the file is rotated <em>after</em> the log record is written.\n\ndiff --git a/core/runtime/src/main/java/io/quarkus/runtime/logging/LoggingSetupRecorder.java b/core/runtime/src/main/java/io/quarkus/runtime/logging/LoggingSetupRecorder.java\nindex f35a464a7ad73..e36aa217ac0ef 100644\n--- a/core/runtime/src/main/java/io/quarkus/runtime/logging/LoggingSetupRecorder.java\n+++ b/core/runtime/src/main/java/io/quarkus/runtime/logging/LoggingSetupRecorder.java\n@@ -654,7 +654,9 @@ private static Handler configureFileHandler(final FileConfig config, final Error\n             final boolean includeFilters) {\n         FileHandler handler;\n         FileConfig.RotationConfig rotationConfig = config.rotation();\n-        if (rotationConfig.fileSuffix().isPresent()) {\n+        if (!rotationConfig.enabled()) {\n+            handler = new FileHandler();\n+        } else if (rotationConfig.fileSuffix().isPresent()) {\n             PeriodicSizeRotatingFileHandler periodicSizeRotatingFileHandler = new PeriodicSizeRotatingFileHandler();\n             periodicSizeRotatingFileHandler.setSuffix(rotationConfig.fileSuffix().get());\n             periodicSizeRotatingFileHandler.setRotateSize(rotationConfig.maxFileSize().asLongValue());\n",
    "test_patch": "diff --git a/integration-tests/test-extension/extension/deployment/src/main/resources/application-no-log-rotation.properties b/integration-tests/test-extension/extension/deployment/src/main/resources/application-no-log-rotation.properties\nnew file mode 100644\nindex 0000000000000..bd44692ed4379\n--- /dev/null\n+++ b/integration-tests/test-extension/extension/deployment/src/main/resources/application-no-log-rotation.properties\n@@ -0,0 +1,6 @@\n+quarkus.log.level=INFO\n+quarkus.log.file.enable=true\n+quarkus.log.file.level=INFO\n+quarkus.log.file.format=%d{HH:mm:ss} %-5p [%c{2.}]] (%t) %s%e%n\n+quarkus.log.file.rotation.enabled=false\n+quarkus.root.dsa-key-location=/DSAPublicKey.encoded\n\ndiff --git a/integration-tests/test-extension/extension/deployment/src/test/java/io/quarkus/logging/NoRotationLoggingTest.java b/integration-tests/test-extension/extension/deployment/src/test/java/io/quarkus/logging/NoRotationLoggingTest.java\nnew file mode 100644\nindex 0000000000000..84333fe6b8b0d\n--- /dev/null\n+++ b/integration-tests/test-extension/extension/deployment/src/test/java/io/quarkus/logging/NoRotationLoggingTest.java\n@@ -0,0 +1,38 @@\n+package io.quarkus.logging;\n+\n+import static io.quarkus.logging.LoggingTestsHelper.getHandler;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.logging.Formatter;\n+import java.util.logging.Handler;\n+import java.util.logging.Level;\n+\n+import org.jboss.logmanager.formatters.PatternFormatter;\n+import org.jboss.logmanager.handlers.FileHandler;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class NoRotationLoggingTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .withConfigurationResource(\"application-no-log-rotation.properties\")\n+            .withApplicationRoot((jar) -> jar\n+                    .addClass(LoggingTestsHelper.class)\n+                    .addAsManifestResource(\"application.properties\", \"microprofile-config.properties\"))\n+            .setLogFileName(\"NoRotationLoggingTest.log\");\n+\n+    @Test\n+    public void sizeRotatingConfigurationTest() {\n+        Handler handler = getHandler(FileHandler.class);\n+        assertThat(handler.getLevel()).isEqualTo(Level.INFO);\n+        assertThat(handler).isExactlyInstanceOf(FileHandler.class);\n+\n+        Formatter formatter = handler.getFormatter();\n+        assertThat(formatter).isInstanceOf(PatternFormatter.class);\n+        PatternFormatter patternFormatter = (PatternFormatter) formatter;\n+        assertThat(patternFormatter.getPattern()).isEqualTo(\"%d{HH:mm:ss} %-5p [%c{2.}]] (%t) %s%e%n\");\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47244",
    "pr_id": 47244,
    "issue_id": 47148,
    "repo": "quarkusio/quarkus",
    "problem_statement": "@Dependent is required for CDI @Decorator to be enabled\n### Describe the bug\n\nContrary to the documentation https://quarkus.io/version/main/guides/cdi#decorators it is required to add `@Dependent` bean defining annotation in order to get the decorator bean enabled. \n\nOther part of the Quarkus documentation https://quarkus.io/guides/cdi-reference references CDI specification:\n_Bean classes that don’t have a [bean defining annotation](https://jakarta.ee/specifications/cdi/4.1/jakarta-cdi-spec-4.1.html#bean_defining_annotations) are not discovered. This behavior is defined by CDI. But producer methods and fields and observer methods are discovered even if the declaring class is not annotated with a bean defining annotation (this behavior is different to what is defined in CDI). In fact, the declaring bean classes are considered annotated with `@Dependent`._\n\nAnd in turn in CDI spec defines:\n_The set of bean defining annotations contains:\n* `@ApplicationScoped` and `@RequestScoped` annotations,\n* all other normal scope types,\n* `@Interceptor` annotation,\n* **all stereotype annotations (i.e. annotations annotated with `@Stereotype`),**\n* and the `@Dependent` scope annotation._\n\nThe `@Decorator` is in fact a stereotype so it should be sufficient, but it is not.\n\n\n### Expected behavior\n\nIt's not necessary to annotate CDI decorator with @Dependent or the documentation is updated to do so.\n\n### Actual behavior\n\nSample decorator https://quarkus.io/version/main/guides/cdi#decorators is not enabled.\n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### Quarkus version or git rev\n\n_No response_\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
    "issue_word_count": 267,
    "test_files_count": 4,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "build-parent/pom.xml",
      "extensions/arc/deployment/pom.xml",
      "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/BeanArchiveProcessor.java",
      "extensions/arc/deployment/src/test/java/io/quarkus/arc/test/decorator/DecoratorAsBeanDefiningAnnotationTest.java",
      "extensions/arc/pom.xml",
      "extensions/arc/test-supplement-decorator/pom.xml",
      "extensions/arc/test-supplement-decorator/src/main/java/io/quarkus/arc/test/supplement/decorator/SomeDecorator.java",
      "extensions/arc/test-supplement-decorator/src/main/java/io/quarkus/arc/test/supplement/decorator/SomeInterface.java"
    ],
    "pr_changed_test_files": [
      "extensions/arc/deployment/src/test/java/io/quarkus/arc/test/decorator/DecoratorAsBeanDefiningAnnotationTest.java",
      "extensions/arc/test-supplement-decorator/pom.xml",
      "extensions/arc/test-supplement-decorator/src/main/java/io/quarkus/arc/test/supplement/decorator/SomeDecorator.java",
      "extensions/arc/test-supplement-decorator/src/main/java/io/quarkus/arc/test/supplement/decorator/SomeInterface.java"
    ],
    "base_commit": "aee6916c168c64a9f543029e157ee5033eaa81dc",
    "head_commit": "58398b99b5b5bd2c7660d27e192110c51a3ba8a0",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47244",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47244",
    "dockerfile": "",
    "pr_merged_at": "2025-04-09T11:43:12.000Z",
    "patch": "diff --git a/build-parent/pom.xml b/build-parent/pom.xml\nindex 84c7ef938fd22..3fd86b8338210 100644\n--- a/build-parent/pom.xml\n+++ b/build-parent/pom.xml\n@@ -277,6 +277,11 @@\n                 <artifactId>quarkus-arc-test-supplement</artifactId>\n                 <version>${project.version}</version>\n             </dependency>\n+            <dependency>\n+                <groupId>io.quarkus</groupId>\n+                <artifactId>quarkus-arc-test-supplement-decorator</artifactId>\n+                <version>${project.version}</version>\n+            </dependency>\n             <dependency>\n                 <groupId>org.assertj</groupId>\n                 <artifactId>assertj-core</artifactId>\n\ndiff --git a/extensions/arc/deployment/pom.xml b/extensions/arc/deployment/pom.xml\nindex 6f2af2e608c2e..eb95259c8e0c0 100644\n--- a/extensions/arc/deployment/pom.xml\n+++ b/extensions/arc/deployment/pom.xml\n@@ -49,6 +49,11 @@\n             <artifactId>quarkus-arc-test-supplement</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-arc-test-supplement-decorator</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n         <!-- Used to test wrong @Singleton detection -->\n         <dependency>\n             <groupId>jakarta.ejb</groupId>\n\ndiff --git a/extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/BeanArchiveProcessor.java b/extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/BeanArchiveProcessor.java\nindex c1eb8187624dc..9e73bf63bc720 100644\n--- a/extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/BeanArchiveProcessor.java\n+++ b/extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/BeanArchiveProcessor.java\n@@ -149,11 +149,14 @@ private IndexView buildApplicationIndex(ArcConfig config, ApplicationArchivesBui\n                         .map(bda -> new BeanDefiningAnnotation(bda.getName(), bda.getDefaultScope()))\n                         .collect(Collectors.toList()), stereotypes);\n         beanDefiningAnnotations.addAll(customScopes.getCustomScopeNames());\n-        // Also include archives that are not bean archives but contain scopes, qualifiers or interceptor bindings\n+        // Also include archives that are not bean archives but contain scopes, qualifiers,\n+        // interceptor bindings, interceptors or decorators\n         beanDefiningAnnotations.add(DotNames.SCOPE);\n         beanDefiningAnnotations.add(DotNames.NORMAL_SCOPE);\n         beanDefiningAnnotations.add(DotNames.QUALIFIER);\n         beanDefiningAnnotations.add(DotNames.INTERCEPTOR_BINDING);\n+        beanDefiningAnnotations.add(DotNames.DECORATOR);\n+        beanDefiningAnnotations.add(DotNames.INTERCEPTOR);\n \n         boolean rootIsAlwaysBeanArchive = !config.strictCompatibility();\n         Collection<ApplicationArchive> candidateArchives = applicationArchivesBuildItem.getApplicationArchives();\n\ndiff --git a/extensions/arc/pom.xml b/extensions/arc/pom.xml\nindex 386df972b8bcb..b5493d31a39b1 100644\n--- a/extensions/arc/pom.xml\n+++ b/extensions/arc/pom.xml\n@@ -17,6 +17,7 @@\n         <module>deployment</module>\n         <module>runtime</module>\n         <module>test-supplement</module>\n+        <module>test-supplement-decorator</module>\n     </modules>\n \n </project>\n",
    "test_patch": "diff --git a/extensions/arc/deployment/src/test/java/io/quarkus/arc/test/decorator/DecoratorAsBeanDefiningAnnotationTest.java b/extensions/arc/deployment/src/test/java/io/quarkus/arc/test/decorator/DecoratorAsBeanDefiningAnnotationTest.java\nnew file mode 100644\nindex 0000000000000..feb864ba353f8\n--- /dev/null\n+++ b/extensions/arc/deployment/src/test/java/io/quarkus/arc/test/decorator/DecoratorAsBeanDefiningAnnotationTest.java\n@@ -0,0 +1,46 @@\n+package io.quarkus.arc.test.decorator;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.util.List;\n+\n+import jakarta.enterprise.context.Dependent;\n+import jakarta.inject.Inject;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.arc.test.supplement.decorator.SomeInterface;\n+import io.quarkus.builder.Version;\n+import io.quarkus.maven.dependency.Dependency;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DecoratorAsBeanDefiningAnnotationTest {\n+\n+    // The test has a CDI bean in the application and a decorator in a second archive that has no other CDI items.\n+    // The idea is to test that @Decorator is a bean defining annotation and will be picked up.\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .withApplicationRoot(jar -> jar.addClass(SomeBean.class))\n+            // we need a non-application archive, so cannot use `withAdditionalDependency()`\n+            .setForcedDependencies(\n+                    List.of(Dependency.of(\"io.quarkus\", \"quarkus-arc-test-supplement-decorator\", Version.getVersion())));\n+\n+    @Inject\n+    SomeBean bean;\n+\n+    @Test\n+    public void test() {\n+        assertEquals(\"Delegated: SomeBean\", bean.ping());\n+    }\n+\n+    @Dependent\n+    public static class SomeBean implements SomeInterface {\n+\n+        @Override\n+        public String ping() {\n+            return SomeBean.class.getSimpleName();\n+        }\n+    }\n+}\n\ndiff --git a/extensions/arc/test-supplement-decorator/pom.xml b/extensions/arc/test-supplement-decorator/pom.xml\nnew file mode 100644\nindex 0000000000000..2f8c1e7124764\n--- /dev/null\n+++ b/extensions/arc/test-supplement-decorator/pom.xml\n@@ -0,0 +1,40 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>quarkus-arc-parent</artifactId>\n+        <groupId>io.quarkus</groupId>\n+        <version>999-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>quarkus-arc-test-supplement-decorator</artifactId>\n+    <name>Quarkus - ArC - Test Supplement Decorator</name>\n+    <description>Supplement archive for ArC tests</description>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>jakarta.enterprise</groupId>\n+            <artifactId>jakarta.enterprise.cdi-api</artifactId>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>io.smallrye</groupId>\n+                <artifactId>jandex-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>make-index</id>\n+                        <goals>\n+                            <goal>jandex</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+</project>\n\ndiff --git a/extensions/arc/test-supplement-decorator/src/main/java/io/quarkus/arc/test/supplement/decorator/SomeDecorator.java b/extensions/arc/test-supplement-decorator/src/main/java/io/quarkus/arc/test/supplement/decorator/SomeDecorator.java\nnew file mode 100644\nindex 0000000000000..704924ee92d9a\n--- /dev/null\n+++ b/extensions/arc/test-supplement-decorator/src/main/java/io/quarkus/arc/test/supplement/decorator/SomeDecorator.java\n@@ -0,0 +1,21 @@\n+package io.quarkus.arc.test.supplement.decorator;\n+\n+import jakarta.annotation.Priority;\n+import jakarta.decorator.Decorator;\n+import jakarta.decorator.Delegate;\n+import jakarta.inject.Inject;\n+\n+@Decorator\n+@Priority(10)\n+public class SomeDecorator implements SomeInterface {\n+\n+    @Inject\n+    @Delegate\n+    SomeInterface delegate;\n+\n+    @Override\n+    public String ping() {\n+        return \"Delegated: \" + delegate.ping();\n+    }\n+\n+}\n\ndiff --git a/extensions/arc/test-supplement-decorator/src/main/java/io/quarkus/arc/test/supplement/decorator/SomeInterface.java b/extensions/arc/test-supplement-decorator/src/main/java/io/quarkus/arc/test/supplement/decorator/SomeInterface.java\nnew file mode 100644\nindex 0000000000000..1975b3b704932\n--- /dev/null\n+++ b/extensions/arc/test-supplement-decorator/src/main/java/io/quarkus/arc/test/supplement/decorator/SomeInterface.java\n@@ -0,0 +1,7 @@\n+package io.quarkus.arc.test.supplement.decorator;\n+\n+public interface SomeInterface {\n+\n+    String ping();\n+\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47186",
    "pr_id": 47186,
    "issue_id": 47101,
    "repo": "quarkusio/quarkus",
    "problem_statement": "liquibase support setting of liquibase.secureParsing in application.properties\n### Describe the bug\n\nThis is on quarkus 3.21\n\nLiquibase denies loading a local xsd file and also has problems with http:// urls for loading xsd schemas.\nAccording to https://github.com/liquibase/liquibase/issues/2654 the property `-Dliquibase.secureParsing=false` has to be set to be allowed to load these files.\n\nAt the moment I can only add this via\n```\n./mvnw test -Dliquibase.secureParsing=false\n```\n\nPlease extend quarkus-liquibase, resp. the `application.properties` to include the setting like `quarkus.liquibase.secureParsing=false`\n\n### Expected behavior\n\n_No response_\n\n### Actual behavior\n\n_No response_\n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### Quarkus version or git rev\n\n_No response_\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
    "issue_word_count": 142,
    "test_files_count": 6,
    "non_test_files_count": 5,
    "pr_changed_files": [
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionSecureParsingDisabledTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionSecureParsingEnabledTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/resources/insecure-db/changeLog.xml",
      "extensions/liquibase/liquibase/deployment/src/test/resources/insecure-db/dbchangelog-3.8.xsd",
      "extensions/liquibase/liquibase/deployment/src/test/resources/secure-parsing-disabled.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/secure-parsing-enabled.properties",
      "extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/LiquibaseFactory.java",
      "extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseConfig.java",
      "extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseCreator.java",
      "extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseDataSourceRuntimeConfig.java",
      "extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseRecorder.java"
    ],
    "pr_changed_test_files": [
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionSecureParsingDisabledTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionSecureParsingEnabledTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/resources/insecure-db/changeLog.xml",
      "extensions/liquibase/liquibase/deployment/src/test/resources/insecure-db/dbchangelog-3.8.xsd",
      "extensions/liquibase/liquibase/deployment/src/test/resources/secure-parsing-disabled.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/secure-parsing-enabled.properties"
    ],
    "base_commit": "4c5720e4d0736e98662df52577b6b9e5c1dbfa88",
    "head_commit": "1f45299686bf3fa053ad758dd6f9695b1587b5c7",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47186",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47186",
    "dockerfile": "",
    "pr_merged_at": "2025-04-07T08:42:01.000Z",
    "patch": "diff --git a/extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/LiquibaseFactory.java b/extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/LiquibaseFactory.java\nindex 6bc2900e1f288..b0e3acc9718c2 100644\n--- a/extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/LiquibaseFactory.java\n+++ b/extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/LiquibaseFactory.java\n@@ -4,6 +4,7 @@\n import java.nio.file.Paths;\n import java.sql.Connection;\n import java.sql.DriverManager;\n+import java.util.HashMap;\n import java.util.Map;\n \n import javax.sql.DataSource;\n@@ -20,6 +21,7 @@\n import liquibase.database.Database;\n import liquibase.database.DatabaseFactory;\n import liquibase.database.jvm.JdbcConnection;\n+import liquibase.exception.LiquibaseException;\n import liquibase.resource.ClassLoaderResourceAccessor;\n import liquibase.resource.CompositeResourceAccessor;\n import liquibase.resource.DirectoryResourceAccessor;\n@@ -126,7 +128,8 @@ public Liquibase createLiquibase() {\n                     database.setDefaultSchemaName(config.defaultSchemaName.get());\n                 }\n             }\n-            Liquibase liquibase = new Liquibase(parsedChangeLog, resourceAccessor, database);\n+            Liquibase liquibase = new QuarkusLiquibase(parsedChangeLog, resourceAccessor, database,\n+                    createResettableSystemProperties());\n \n             for (Map.Entry<String, String> entry : config.changeLogParameters.entrySet()) {\n                 liquibase.getChangeLogParameters().set(entry.getKey(), entry.getValue());\n@@ -165,11 +168,38 @@ public String getDataSourceName() {\n         return dataSourceName;\n     }\n \n-    public ResettableSystemProperties createResettableSystemProperties() {\n-        if (config.allowDuplicatedChangesetIdentifiers.isEmpty()) {\n-            return ResettableSystemProperties.empty();\n+    private ResettableSystemProperties createResettableSystemProperties() {\n+        Map<String, String> resettableProperties = new HashMap<>();\n+\n+        if (config.allowDuplicatedChangesetIdentifiers.isPresent()) {\n+            resettableProperties.put(\"liquibase.allowDuplicatedChangesetIdentifiers\",\n+                    config.allowDuplicatedChangesetIdentifiers.get().toString());\n+        }\n+\n+        if (!config.secureParsing) {\n+            resettableProperties.put(\"liquibase.secureParsing\", \"false\");\n+        }\n+\n+        return new ResettableSystemProperties(resettableProperties);\n+    }\n+\n+    private static class QuarkusLiquibase extends Liquibase {\n+\n+        private final ResettableSystemProperties resettableSystemProperties;\n+\n+        public QuarkusLiquibase(String changeLogFile, ResourceAccessor resourceAccessor, Database database,\n+                ResettableSystemProperties resettableSystemProperties) {\n+            super(changeLogFile, resourceAccessor, database);\n+            this.resettableSystemProperties = resettableSystemProperties;\n+        }\n+\n+        @Override\n+        public void close() throws LiquibaseException {\n+            try {\n+                super.close();\n+            } finally {\n+                resettableSystemProperties.close();\n+            }\n         }\n-        return ResettableSystemProperties.of(\"liquibase.allowDuplicatedChangesetIdentifiers\",\n-                config.allowDuplicatedChangesetIdentifiers.get().toString());\n     }\n }\n\ndiff --git a/extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseConfig.java b/extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseConfig.java\nindex a9fc7b70e7469..e62ffab2c80f8 100644\n--- a/extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseConfig.java\n+++ b/extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseConfig.java\n@@ -100,6 +100,13 @@ public class LiquibaseConfig {\n     /**\n      * Allows duplicated changeset identifiers without failing Liquibase execution.\n      */\n-    public Optional<Boolean> allowDuplicatedChangesetIdentifiers;\n+    public Optional<Boolean> allowDuplicatedChangesetIdentifiers = Optional.empty();\n+\n+    /**\n+     * Whether Liquibase should enforce secure parsing.\n+     * <p>\n+     * If secure parsing is enforced, unsecure files may not be parsed.\n+     */\n+    public boolean secureParsing = true;\n \n }\n\ndiff --git a/extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseCreator.java b/extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseCreator.java\nindex 5915420bc1e7d..3ce2ceef7f3d7 100644\n--- a/extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseCreator.java\n+++ b/extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseCreator.java\n@@ -40,6 +40,7 @@ public LiquibaseFactory createLiquibaseFactory(DataSource dataSource, String dat\n         config.cleanAtStart = liquibaseRuntimeConfig.cleanAtStart();\n         config.validateOnMigrate = liquibaseRuntimeConfig.validateOnMigrate();\n         config.allowDuplicatedChangesetIdentifiers = liquibaseRuntimeConfig.allowDuplicatedChangesetIdentifiers();\n+        config.secureParsing = liquibaseRuntimeConfig.secureParsing();\n         return new LiquibaseFactory(config, dataSource, dataSourceName);\n     }\n }\n\ndiff --git a/extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseDataSourceRuntimeConfig.java b/extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseDataSourceRuntimeConfig.java\nindex 5556b09e99a90..356694fae61ce 100644\n--- a/extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseDataSourceRuntimeConfig.java\n+++ b/extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseDataSourceRuntimeConfig.java\n@@ -117,4 +117,11 @@ public interface LiquibaseDataSourceRuntimeConfig {\n      */\n     Optional<Boolean> allowDuplicatedChangesetIdentifiers();\n \n+    /**\n+     * Whether Liquibase should enforce secure parsing.\n+     * <p>\n+     * If secure parsing is enforced, insecure files may not be parsed.\n+     */\n+    @WithDefault(\"true\")\n+    boolean secureParsing();\n }\n\ndiff --git a/extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseRecorder.java b/extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseRecorder.java\nindex c0f217bb77b42..5361717f81fee 100644\n--- a/extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseRecorder.java\n+++ b/extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseRecorder.java\n@@ -13,7 +13,6 @@\n import io.quarkus.arc.InjectableInstance;\n import io.quarkus.arc.SyntheticCreationalContext;\n import io.quarkus.liquibase.LiquibaseFactory;\n-import io.quarkus.runtime.ResettableSystemProperties;\n import io.quarkus.runtime.RuntimeValue;\n import io.quarkus.runtime.annotations.Recorder;\n import liquibase.Liquibase;\n@@ -85,9 +84,7 @@ public void doStartActions(String dataSourceName) {\n         }\n \n         LiquibaseFactory liquibaseFactory = liquibaseFactoryInstance.get();\n-        try (Liquibase liquibase = liquibaseFactory.createLiquibase();\n-                ResettableSystemProperties resettableSystemProperties = liquibaseFactory\n-                        .createResettableSystemProperties()) {\n+        try (Liquibase liquibase = liquibaseFactory.createLiquibase()) {\n             if (dataSourceConfig.cleanAtStart()) {\n                 liquibase.dropAll();\n             }\n",
    "test_patch": "diff --git a/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionSecureParsingDisabledTest.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionSecureParsingDisabledTest.java\nnew file mode 100644\nindex 0000000000000..396faf7832a8e\n--- /dev/null\n+++ b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionSecureParsingDisabledTest.java\n@@ -0,0 +1,42 @@\n+package io.quarkus.liquibase.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.util.List;\n+\n+import jakarta.inject.Inject;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.liquibase.LiquibaseFactory;\n+import io.quarkus.test.QuarkusUnitTest;\n+import liquibase.Liquibase;\n+import liquibase.changelog.ChangeSetStatus;\n+\n+public class LiquibaseExtensionSecureParsingDisabledTest {\n+\n+    @Inject\n+    LiquibaseFactory liquibaseFactory;\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .withApplicationRoot((jar) -> jar\n+                    .addAsResource(\"insecure-db/changeLog.xml\", \"db/changeLog.xml\")\n+                    .addAsResource(\"insecure-db/dbchangelog-3.8.xsd\", \"db/dbchangelog-3.8.xsd\")\n+                    .addAsResource(\"secure-parsing-disabled.properties\", \"application.properties\"));\n+\n+    @Test\n+    public void testSecureParsingDisabled() throws Exception {\n+        try (Liquibase liquibase = liquibaseFactory.createLiquibase()) {\n+            List<ChangeSetStatus> status = liquibase.getChangeSetStatuses(liquibaseFactory.createContexts(),\n+                    liquibaseFactory.createLabels());\n+            assertNotNull(status);\n+            assertEquals(1, status.size());\n+            assertEquals(\"id-1\", status.get(0).getChangeSet().getId());\n+            assertFalse(status.get(0).getWillRun());\n+        }\n+    }\n+}\n\ndiff --git a/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionSecureParsingEnabledTest.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionSecureParsingEnabledTest.java\nnew file mode 100644\nindex 0000000000000..ae8bbe8429b92\n--- /dev/null\n+++ b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionSecureParsingEnabledTest.java\n@@ -0,0 +1,34 @@\n+package io.quarkus.liquibase.test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+\n+import jakarta.inject.Inject;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.liquibase.LiquibaseFactory;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class LiquibaseExtensionSecureParsingEnabledTest {\n+\n+    @Inject\n+    LiquibaseFactory liquibaseFactory;\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .withApplicationRoot((jar) -> jar\n+                    .addAsResource(\"insecure-db/changeLog.xml\", \"db/changeLog.xml\")\n+                    .addAsResource(\"insecure-db/dbchangelog-3.8.xsd\", \"db/dbchangelog-3.8.xsd\")\n+                    .addAsResource(\"secure-parsing-enabled.properties\", \"application.properties\"))\n+            .assertException(t -> {\n+                assertThat(t.getCause().getCause())\n+                        .hasMessageContaining(\"because 'file' access is not allowed\");\n+            });\n+\n+    @Test\n+    public void testSecureParsing() throws Exception {\n+        fail(\"should not be executed\");\n+    }\n+}\n\ndiff --git a/extensions/liquibase/liquibase/deployment/src/test/resources/insecure-db/changeLog.xml b/extensions/liquibase/liquibase/deployment/src/test/resources/insecure-db/changeLog.xml\nnew file mode 100644\nindex 0000000000000..bbfca859cb349\n--- /dev/null\n+++ b/extensions/liquibase/liquibase/deployment/src/test/resources/insecure-db/changeLog.xml\n@@ -0,0 +1,15 @@\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n+    xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog db/dbchangelog-3.8.xsd\"\n+    logicalFilePath=\"changeLog.xml\">\n+\n+    <changeSet author=\"dev (generated)\" id=\"id-1\">\n+        <createTable tableName=\"TEST_INSECURE_PARSING\">\n+            <column name=\"ID\" type=\"VARCHAR(255)\">\n+                <constraints nullable=\"false\"/>\n+            </column>\n+            <column name=\"NAME\" type=\"VARCHAR(255)\"/>\n+        </createTable>\n+    </changeSet>\n+\n+</databaseChangeLog>\n\\ No newline at end of file\n\ndiff --git a/extensions/liquibase/liquibase/deployment/src/test/resources/insecure-db/dbchangelog-3.8.xsd b/extensions/liquibase/liquibase/deployment/src/test/resources/insecure-db/dbchangelog-3.8.xsd\nnew file mode 100644\nindex 0000000000000..b859c563da62f\n--- /dev/null\n+++ b/extensions/liquibase/liquibase/deployment/src/test/resources/insecure-db/dbchangelog-3.8.xsd\n@@ -0,0 +1,1381 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n+            targetNamespace=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n+            xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n+            elementFormDefault=\"qualified\">\n+\n+    <xsd:simpleType name=\"propertyExpression\" id=\"propertyExpression\">\n+        <xsd:restriction base=\"xsd:string\">\n+            <xsd:pattern value=\"$\\{[\\w\\.]+\\}\"/>\n+        </xsd:restriction>\n+    </xsd:simpleType>\n+\n+    <xsd:simpleType name=\"booleanExp\" id=\"booleanExp\">\n+        <xsd:annotation>\n+            <xsd:appinfo>\n+                <xsd:documentation>Extension to standard XSD boolean type to allow ${} parameters</xsd:documentation>\n+            </xsd:appinfo>\n+        </xsd:annotation>\n+        <xsd:union>\n+            <xsd:simpleType>\n+                <xsd:restriction base=\"xsd:boolean\"/>\n+            </xsd:simpleType>\n+            <xsd:simpleType>\n+                <xsd:restriction base=\"propertyExpression\"/>\n+            </xsd:simpleType>\n+        </xsd:union>\n+    </xsd:simpleType>\n+\n+    <xsd:simpleType name=\"integerExp\" id=\"integerExp\">\n+        <xsd:annotation>\n+            <xsd:appinfo>\n+                <xsd:documentation>Extension to standard XSD integer type to allow ${} parameters</xsd:documentation>\n+            </xsd:appinfo>\n+        </xsd:annotation>\n+        <xsd:union>\n+            <xsd:simpleType>\n+                <xsd:restriction base=\"xsd:integer\"/>\n+            </xsd:simpleType>\n+            <xsd:simpleType>\n+                <xsd:restriction base=\"propertyExpression\"/>\n+            </xsd:simpleType>\n+        </xsd:union>\n+    </xsd:simpleType>\n+\n+    <xsd:simpleType name=\"onChangeSetPreconditionErrorOrFail\">\n+        <xsd:restriction base=\"xsd:string\">\n+            <xsd:enumeration value=\"HALT\"/>\n+            <xsd:enumeration value=\"WARN\"/>\n+            <xsd:enumeration value=\"CONTINUE\"/>\n+            <xsd:enumeration value=\"MARK_RAN\"/>\n+        </xsd:restriction>\n+    </xsd:simpleType>\n+\n+    <xsd:simpleType name=\"onChangeLogPreconditionErrorOrFail\">\n+        <xsd:restriction base=\"xsd:string\">\n+            <xsd:enumeration value=\"HALT\"/>\n+            <xsd:enumeration value=\"WARN\"/>\n+        </xsd:restriction>\n+    </xsd:simpleType>\n+\n+    <xsd:simpleType name=\"onChangeLogPreconditionOnSqlOutput\">\n+        <xsd:restriction base=\"xsd:string\">\n+            <xsd:enumeration value=\"TEST\"/>\n+            <xsd:enumeration value=\"FAIL\"/>\n+            <xsd:enumeration value=\"IGNORE\"/>\n+        </xsd:restriction>\n+    </xsd:simpleType>\n+\n+    <xsd:simpleType name=\"onChangeSetValidationFail\">\n+        <xsd:restriction base=\"xsd:string\">\n+            <xsd:enumeration value=\"HALT\"/>\n+            <xsd:enumeration value=\"MARK_RAN\"/>\n+        </xsd:restriction>\n+    </xsd:simpleType>\n+\n+    <xsd:simpleType name=\"objectQuotingStrategy\">\n+        <xsd:restriction base=\"xsd:string\">\n+            <xsd:enumeration value=\"LEGACY\"/>\n+            <xsd:enumeration value=\"QUOTE_ALL_OBJECTS\"/>\n+            <xsd:enumeration value=\"QUOTE_ONLY_RESERVED_WORDS\"/>\n+        </xsd:restriction>\n+    </xsd:simpleType>\n+\n+    <!-- This is the main (root) part of the xsd -->\n+    <xsd:element name=\"databaseChangeLog\">\n+        <xsd:complexType>\n+            <xsd:sequence>\n+                <xsd:element name=\"property\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n+                    <xsd:complexType>\n+                        <xsd:attribute name=\"file\" type=\"xsd:string\"/>\n+                        <xsd:attribute name=\"name\" type=\"xsd:string\"/>\n+                        <xsd:attribute name=\"value\" type=\"xsd:string\"/>\n+                        <xsd:attribute name=\"dbms\" type=\"xsd:string\"/>\n+                        <xsd:attribute name=\"context\" type=\"xsd:string\"/>\n+                        <xsd:attribute name=\"labels\" type=\"xsd:string\"/>\n+                        <xsd:attribute name=\"global\" type=\"xsd:boolean\"/>\n+                        <xsd:attribute name=\"target\" type=\"xsd:string\"/>\n+                        <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"/>\n+                    </xsd:complexType>\n+                </xsd:element>\n+\n+                <xsd:element name=\"preConditions\" minOccurs=\"0\"\n+                             maxOccurs=\"1\">\n+                    <xsd:complexType>\n+                        <xsd:choice>\n+                            <xsd:group ref=\"PreConditionChildren\" maxOccurs=\"unbounded\"/>\n+                        </xsd:choice>\n+                        <xsd:attribute name=\"onFailMessage\" type=\"xsd:string\"/>\n+                        <xsd:attribute name=\"onErrorMessage\" type=\"xsd:string\"/>\n+                        <xsd:attribute name=\"onFail\"\n+                                       type=\"onChangeLogPreconditionErrorOrFail\"/>\n+                        <xsd:attribute name=\"onError\"\n+                                       type=\"onChangeLogPreconditionErrorOrFail\"/>\n+                        <xsd:attribute name=\"onSqlOutput\"\n+                                       type=\"onChangeLogPreconditionOnSqlOutput\"/>\n+                    </xsd:complexType>\n+                </xsd:element>\n+\n+                <xsd:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n+                    <xsd:element name=\"changeSet\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n+                        <xsd:complexType>\n+                            <xsd:sequence>\n+                                <xsd:element name=\"validCheckSum\" minOccurs=\"0\"\n+                                             maxOccurs=\"unbounded\">\n+                                    <xsd:complexType mixed=\"true\">\n+                                        <xsd:sequence>\n+                                            <xsd:element ref=\"comment\" minOccurs=\"0\"\n+                                                         maxOccurs=\"1\"/>\n+                                        </xsd:sequence>\n+                                    </xsd:complexType>\n+                                </xsd:element>\n+                                <xsd:element name=\"preConditions\" minOccurs=\"0\"\n+                                             maxOccurs=\"1\">\n+                                    <xsd:annotation>\n+                                        <xsd:appinfo>\n+                                            <xsd:documentation>onChangeLogPreconditionOnSqlOutput determines what should\n+                                                happen when evaluating this precondition in updateSQL mode. TEST: Run\n+                                                precondition, FAIL: Fail precondition, IGNORE: Skip precondition check\n+                                                [DEFAULT]\n+                                            </xsd:documentation>\n+                                        </xsd:appinfo>\n+                                    </xsd:annotation>\n+                                    <xsd:complexType>\n+                                        <xsd:choice>\n+                                            <xsd:group ref=\"PreConditionChildren\" maxOccurs=\"unbounded\"/>\n+                                        </xsd:choice>\n+                                        <xsd:attribute name=\"onFailMessage\" type=\"xsd:string\"/>\n+                                        <xsd:attribute name=\"onErrorMessage\" type=\"xsd:string\"/>\n+                                        <xsd:attribute name=\"onFail\"\n+                                                       type=\"onChangeSetPreconditionErrorOrFail\"/>\n+                                        <xsd:attribute name=\"onError\"\n+                                                       type=\"onChangeSetPreconditionErrorOrFail\"/>\n+                                        <xsd:attribute name=\"onSqlOutput\"\n+                                                       type=\"onChangeLogPreconditionOnSqlOutput\"/>\n+                                    </xsd:complexType>\n+                                </xsd:element>\n+                                <xsd:choice>\n+                                    <xsd:element ref=\"tagDatabase\" maxOccurs=\"1\"/>\n+                                    <xsd:group ref=\"changeSetChildren\" minOccurs=\"0\"\n+                                               maxOccurs=\"unbounded\"/>\n+                                </xsd:choice>\n+\n+                                <xsd:element name=\"modifySql\" minOccurs=\"0\"\n+                                             maxOccurs=\"unbounded\">\n+                                    <xsd:complexType>\n+                                        <xsd:choice>\n+                                            <xsd:group ref=\"modifySqlChildren\" minOccurs=\"1\"\n+                                                       maxOccurs=\"unbounded\"/>\n+                                        </xsd:choice>\n+                                        <xsd:attribute name=\"dbms\" type=\"xsd:string\"/>\n+                                        <xsd:attribute name=\"context\" type=\"xsd:string\"/>\n+                                        <xsd:attribute name=\"labels\" type=\"xsd:string\"/>\n+                                        <xsd:attribute name=\"applyToRollback\" type=\"booleanExp\"/>\n+                                    </xsd:complexType>\n+                                </xsd:element>\n+\n+                            </xsd:sequence>\n+                            <xsd:attributeGroup ref=\"changeSetAttributes\"/>\n+                            <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"/>\n+                        </xsd:complexType>\n+                    </xsd:element>\n+\n+                    <!-- include -->\n+                    <xsd:element name=\"include\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n+                        <xsd:complexType>\n+                            <xsd:attribute name=\"id\" type=\"xsd:string\"/>\n+                            <xsd:attribute name=\"author\" type=\"xsd:string\"/>\n+                            <xsd:attribute name=\"file\" type=\"xsd:string\" use=\"required\"/>\n+                            <xsd:attribute name=\"relativeToChangelogFile\" type=\"booleanExp\"/>\n+                            <xsd:attribute name=\"context\" type=\"xsd:string\"/>\n+                            <xsd:attribute name=\"labels\" type=\"xsd:string\"/>\n+                            <xsd:attribute name=\"ignore\" type=\"xsd:string\"/>\n+                            <xsd:attribute name=\"created\" type=\"xsd:string\"/>\n+                            <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"/>\n+                        </xsd:complexType>\n+                    </xsd:element>\n+                    <xsd:element name=\"includeAll\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n+                        <xsd:complexType>\n+                            <xsd:attribute name=\"path\" type=\"xsd:string\" use=\"required\"/>\n+                            <xsd:attribute name=\"errorIfMissingOrEmpty\" type=\"booleanExp\" default=\"false\"/>\n+                            <xsd:attribute name=\"relativeToChangelogFile\" type=\"booleanExp\"/>\n+                            <xsd:attribute name=\"resourceComparator\" type=\"xsd:string\"/>\n+                            <xsd:attribute name=\"filter\" type=\"xsd:string\"/>\n+                            <xsd:attribute name=\"context\" type=\"xsd:string\"/>\n+                            <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"/>\n+                        </xsd:complexType>\n+                    </xsd:element>\n+                </xsd:choice>\n+            </xsd:sequence>\n+            <xsd:attributeGroup ref=\"changeLogAttributes\"/>\n+            <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:group name=\"modifySqlChildren\">\n+        <xsd:choice>\n+            <xsd:element name=\"replace\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n+                <xsd:complexType>\n+                    <xsd:attribute name=\"replace\" type=\"xsd:string\" use=\"required\"/>\n+                    <xsd:attribute name=\"with\" type=\"xsd:string\" use=\"required\"/>\n+                </xsd:complexType>\n+            </xsd:element>\n+            <xsd:element name=\"regExpReplace\" minOccurs=\"0\"\n+                         maxOccurs=\"unbounded\">\n+                <xsd:complexType>\n+                    <xsd:attribute name=\"replace\" type=\"xsd:string\" use=\"required\"/>\n+                    <xsd:attribute name=\"with\" type=\"xsd:string\" use=\"required\"/>\n+                </xsd:complexType>\n+            </xsd:element>\n+            <xsd:element name=\"prepend\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n+                <xsd:complexType>\n+                    <xsd:attribute name=\"value\" type=\"xsd:string\" use=\"required\"/>\n+                </xsd:complexType>\n+            </xsd:element>\n+            <xsd:element name=\"append\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n+                <xsd:complexType>\n+                    <xsd:attribute name=\"value\" type=\"xsd:string\" use=\"required\"/>\n+                </xsd:complexType>\n+            </xsd:element>\n+        </xsd:choice>\n+    </xsd:group>\n+\n+    <!-- Attributes for DatabaseInfo -->\n+    <xsd:attributeGroup name=\"DatabaseInfoAttributes\">\n+        <xsd:attribute name=\"type\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"version\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"username\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"password\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"port\" type=\"integerExp\"/>\n+        <xsd:attribute name=\"host\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"schemaName\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"driverName\" type=\"xsd:string\"/>\n+    </xsd:attributeGroup>\n+\n+    <!-- Attributes for changeSet -->\n+    <xsd:attributeGroup name=\"changeLogAttributes\">\n+        <xsd:attribute name=\"logicalFilePath\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"context\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"objectQuotingStrategy\" type=\"objectQuotingStrategy\" default=\"LEGACY\"/>\n+    </xsd:attributeGroup>\n+\n+    <!-- Attributes for changeSet -->\n+    <xsd:attributeGroup name=\"changeSetAttributes\">\n+        <xsd:attribute name=\"id\" type=\"xsd:string\" use=\"required\"/>\n+        <xsd:attribute name=\"author\" type=\"xsd:string\" use=\"required\"/>\n+        <xsd:attribute name=\"context\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"labels\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"dbms\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"runOnChange\" type=\"booleanExp\"/>\n+        <xsd:attribute name=\"runAlways\" type=\"booleanExp\"/>\n+        <xsd:attribute name=\"failOnError\" type=\"booleanExp\"/>\n+        <xsd:attribute name=\"onValidationFail\" type=\"onChangeSetValidationFail\"/>\n+        <xsd:attribute name=\"runInTransaction\" type=\"booleanExp\" default=\"true\"/>\n+        <xsd:attribute name=\"logicalFilePath\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"objectQuotingStrategy\" type=\"objectQuotingStrategy\"/>\n+        <xsd:attribute name=\"created\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"runOrder\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"ignore\" type=\"booleanExp\"/>\n+    </xsd:attributeGroup>\n+\n+    <!-- Attributes for changes -->\n+    <xsd:attributeGroup name=\"changeAttributes\">\n+        <xsd:anyAttribute namespace=\"##any\" processContents=\"lax\"/>\n+    </xsd:attributeGroup>\n+\n+    <!-- Attributes for constraints -->\n+    <xsd:attributeGroup name=\"constraintsAttributes\">\n+        <xsd:attribute name=\"nullable\" type=\"booleanExp\"/>\n+        <xsd:attribute name=\"notNullConstraintName\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"primaryKey\" type=\"booleanExp\"/>\n+        <xsd:attribute name=\"primaryKeyName\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"primaryKeyTablespace\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"unique\" type=\"booleanExp\"/>\n+        <xsd:attribute name=\"uniqueConstraintName\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"references\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"referencedTableCatalogName\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"referencedTableSchemaName\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"referencedTableName\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"referencedColumnNames\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"foreignKeyName\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"deleteCascade\" type=\"booleanExp\"/>\n+        <xsd:attribute name=\"deferrable\" type=\"booleanExp\"/>\n+        <xsd:attribute name=\"initiallyDeferred\" type=\"booleanExp\"/>\n+        <xsd:attribute name=\"checkConstraint\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"validateNullable\" type=\"booleanExp\"/>\n+        <xsd:attribute name=\"validateUnique\" type=\"booleanExp\"/>\n+        <xsd:attribute name=\"validatePrimaryKey\" type=\"booleanExp\"/>\n+        <xsd:attribute name=\"validateForeignKey\" type=\"booleanExp\"/>\n+    </xsd:attributeGroup>\n+\n+    <xsd:attributeGroup name=\"column\">\n+        <xsd:attribute name=\"name\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"computed\" type=\"booleanExp\"/>\n+        <xsd:attribute name=\"descending\" type=\"booleanExp\"/>\n+        <xsd:attribute name=\"type\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"value\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"valueNumeric\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"valueBoolean\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"valueDate\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"valueComputed\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"valueSequenceCurrent\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"valueSequenceNext\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"valueBlobFile\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"valueClobFile\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"defaultValue\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"defaultValueNumeric\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"defaultValueDate\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"defaultValueBoolean\" type=\"booleanExp\"/>\n+        <xsd:attribute name=\"defaultValueComputed\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"defaultValueSequenceCurrent\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"defaultValueSequenceNext\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"defaultValueConstraintName\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"autoIncrement\" type=\"booleanExp\"/>\n+        <xsd:attribute name=\"startWith\" type=\"xsd:long\"/>\n+        <xsd:attribute name=\"incrementBy\" type=\"xsd:long\"/>\n+        <xsd:attribute name=\"generationType\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"defaultOnNull\" type=\"booleanExp\"/>\n+        <xsd:attribute name=\"remarks\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"encoding\" type=\"xsd:string\">\n+            <xsd:annotation>\n+                <xsd:appinfo>\n+                    <xsd:documentation>\n+                        Used with valueClobFile to specify file encoding explicitly.\n+                    </xsd:documentation>\n+                </xsd:appinfo>\n+            </xsd:annotation>\n+        </xsd:attribute>\n+        <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"/>\n+    </xsd:attributeGroup>\n+\n+    <xsd:complexType name=\"columnType\" mixed=\"true\">\n+        <xsd:sequence>\n+            <xsd:element ref=\"constraints\" minOccurs=\"0\"/>\n+            <xsd:any namespace=\"##other\" processContents=\"lax\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+        </xsd:sequence>\n+        <xsd:attributeGroup ref=\"column\"/>\n+        <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"/>\n+    </xsd:complexType>\n+\n+    <xsd:attributeGroup name=\"param\">\n+        <xsd:attribute name=\"name\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"value\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"valueNumeric\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"valueBoolean\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"valueDate\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"valueComputed\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"valueSequenceNext\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"valueSequenceCurrent\" type=\"xsd:string\"/>\n+    </xsd:attributeGroup>\n+\n+    <xsd:attributeGroup name=\"tableNameAttribute\">\n+        <xsd:attribute name=\"catalogName\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"schemaName\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"tableName\" type=\"xsd:string\" use=\"required\"/>\n+    </xsd:attributeGroup>\n+\n+    <xsd:attributeGroup name=\"dropTableAttributes\">\n+        <xsd:attributeGroup ref=\"tableNameAttribute\"/>\n+        <xsd:attribute name=\"cascadeConstraints\" type=\"booleanExp\"/>\n+    </xsd:attributeGroup>\n+\n+    <xsd:attributeGroup name=\"renameTableAttributes\">\n+        <xsd:attribute name=\"catalogName\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"schemaName\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"oldTableName\" type=\"xsd:string\"\n+                       use=\"required\"/>\n+        <xsd:attribute name=\"newTableName\" type=\"xsd:string\"\n+                       use=\"required\"/>\n+    </xsd:attributeGroup>\n+\n+    <xsd:attributeGroup name=\"renameViewAttributes\">\n+        <xsd:attribute name=\"catalogName\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"schemaName\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"oldViewName\" type=\"xsd:string\" use=\"required\"/>\n+        <xsd:attribute name=\"newViewName\" type=\"xsd:string\" use=\"required\"/>\n+    </xsd:attributeGroup>\n+\n+    <xsd:attributeGroup name=\"renameColumnAttributes\">\n+        <xsd:attributeGroup ref=\"tableNameAttribute\"/>\n+        <xsd:attribute name=\"oldColumnName\" type=\"xsd:string\"\n+                       use=\"required\"/>\n+        <xsd:attribute name=\"newColumnName\" type=\"xsd:string\"\n+                       use=\"required\"/>\n+        <xsd:attribute name=\"columnDataType\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"remarks\" type=\"xsd:string\"/>\n+    </xsd:attributeGroup>\n+\n+    <xsd:attributeGroup name=\"dropColumnAttributes\">\n+        <xsd:attributeGroup ref=\"tableNameAttribute\"/>\n+        <xsd:attribute name=\"columnName\" type=\"xsd:string\"/>\n+    </xsd:attributeGroup>\n+\n+    <xsd:attributeGroup name=\"sequenceAttributes\">\n+        <xsd:attribute name=\"catalogName\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"schemaName\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"sequenceName\" type=\"xsd:string\"\n+                       use=\"required\"/>\n+        <xsd:attribute name=\"startValue\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"incrementBy\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"maxValue\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"minValue\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"ordered\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"cacheSize\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"dataType\" type=\"xsd:string\" />\n+        <xsd:attribute name=\"cycle\" type=\"xsd:string\">\n+            <xsd:annotation>\n+                <xsd:documentation>\n+                    true for a cycling sequence, false for a non-cycling sequence.\n+                    Default is false.\n+                </xsd:documentation>\n+            </xsd:annotation>\n+        </xsd:attribute>\n+    </xsd:attributeGroup>\n+\n+    <xsd:attributeGroup name=\"renameSequenceAttributes\">\n+        <xsd:attribute name=\"catalogName\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"schemaName\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"oldSequenceName\" type=\"xsd:string\"\n+                       use=\"required\"/>\n+        <xsd:attribute name=\"newSequenceName\" type=\"xsd:string\"\n+                       use=\"required\"/>\n+    </xsd:attributeGroup>\n+\n+    <xsd:attributeGroup name=\"indexName\">\n+        <xsd:attribute name=\"indexName\" type=\"xsd:string\" use=\"required\"/>\n+    </xsd:attributeGroup>\n+\n+    <xsd:attributeGroup name=\"createIndex\">\n+        <xsd:attributeGroup ref=\"tableNameAttribute\"/>\n+        <xsd:attributeGroup ref=\"indexName\"/>\n+        <xsd:attribute name=\"associatedWith\" type=\"xsd:string\" use=\"optional\"/>\n+        <xsd:attribute name=\"unique\" type=\"booleanExp\"/>\n+        <xsd:attribute name=\"clustered\" type=\"booleanExp\"/>\n+        <xsd:attribute name=\"tablespace\" type=\"xsd:string\"/>\n+        <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"/>\n+    </xsd:attributeGroup>\n+\n+\n+    <xsd:element name=\"addPrimaryKey\">\n+        <xsd:complexType>\n+            <xsd:choice maxOccurs=\"unbounded\">\n+                <xsd:any namespace=\"##other\" processContents=\"lax\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+            </xsd:choice>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attributeGroup ref=\"tableNameAttribute\"/>\n+            <xsd:attribute name=\"columnNames\" type=\"xsd:string\"\n+                           use=\"required\"/>\n+            <xsd:attribute name=\"constraintName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"tablespace\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"clustered\" type=\"booleanExp\"/>\n+            <xsd:attribute name=\"forIndexCatalogName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"forIndexSchemaName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"forIndexName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"validate\" type=\"booleanExp\"/>\n+            <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"dropPrimaryKey\">\n+        <xsd:complexType>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attributeGroup ref=\"tableNameAttribute\"/>\n+            <xsd:attribute name=\"constraintName\" type=\"xsd:string\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"addUniqueConstraint\">\n+        <xsd:complexType>\n+            <xsd:choice maxOccurs=\"unbounded\">\n+                <xsd:any namespace=\"##other\" processContents=\"lax\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n+            </xsd:choice>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attributeGroup ref=\"tableNameAttribute\"/>\n+            <xsd:attribute name=\"columnNames\" type=\"xsd:string\"\n+                           use=\"required\"/>\n+            <xsd:attribute name=\"constraintName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"tablespace\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"disabled\" type=\"booleanExp\"/>\n+            <xsd:attribute name=\"deferrable\" type=\"booleanExp\"/>\n+            <xsd:attribute name=\"initiallyDeferred\" type=\"booleanExp\"/>\n+            <xsd:attribute name=\"forIndexCatalogName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"forIndexSchemaName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"forIndexName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"clustered\" type=\"booleanExp\"/>\n+            <xsd:attribute name=\"validate\" type=\"booleanExp\"/>\n+            <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"dropUniqueConstraint\">\n+        <xsd:complexType>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attributeGroup ref=\"tableNameAttribute\"/>\n+            <xsd:attribute name=\"constraintName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"uniqueColumns\" type=\"xsd:string\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"modifyDataType\">\n+        <xsd:complexType>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attributeGroup ref=\"tableNameAttribute\"/>\n+            <xsd:attribute name=\"columnName\" type=\"xsd:string\" use=\"required\"/>\n+            <xsd:attribute name=\"newDataType\" type=\"xsd:string\" use=\"required\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"addLookupTable\">\n+        <xsd:complexType>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attribute name=\"existingTableCatalogName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"existingTableSchemaName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"existingTableName\" type=\"xsd:string\"\n+                           use=\"required\"/>\n+            <xsd:attribute name=\"existingColumnName\" type=\"xsd:string\"\n+                           use=\"required\"/>\n+            <xsd:attribute name=\"newTableCatalogName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"newTableSchemaName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"newTableName\" type=\"xsd:string\"\n+                           use=\"required\"/>\n+            <xsd:attribute name=\"newColumnName\" type=\"xsd:string\"\n+                           use=\"required\"/>\n+            <xsd:attribute name=\"newColumnDataType\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"constraintName\" type=\"xsd:string\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"addAutoIncrement\">\n+        <xsd:complexType>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attributeGroup ref=\"tableNameAttribute\"/>\n+            <xsd:attribute name=\"columnName\" type=\"xsd:string\" use=\"required\"/>\n+            <xsd:attribute name=\"columnDataType\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"startWith\" type=\"xsd:long\"/>\n+            <xsd:attribute name=\"incrementBy\" type=\"xsd:long\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"addDefaultValue\">\n+        <xsd:complexType>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attributeGroup ref=\"tableNameAttribute\"/>\n+            <xsd:attribute name=\"columnName\" type=\"xsd:string\" use=\"required\"/>\n+            <xsd:attribute name=\"columnDataType\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"defaultValue\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"defaultValueNumeric\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"defaultValueDate\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"defaultValueBoolean\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"defaultValueComputed\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"defaultValueSequenceNext\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"defaultValueConstraintName\" type=\"xsd:string\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"dropDefaultValue\">\n+        <xsd:complexType>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attributeGroup ref=\"tableNameAttribute\"/>\n+            <xsd:attribute name=\"columnName\" type=\"xsd:string\" use=\"required\"/>\n+            <xsd:attribute name=\"columnDataType\" type=\"xsd:string\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"loadData\">\n+        <xsd:complexType mixed=\"true\">\n+            <xsd:sequence>\n+                <xsd:element name=\"column\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n+                    <xsd:complexType>\n+                        <xsd:attribute name=\"index\" type=\"integerExp\"/>\n+                        <xsd:attribute name=\"header\" type=\"xsd:string\"/>\n+                        <xsd:attribute name=\"name\" type=\"xsd:string\"/>\n+                        <xsd:attribute name=\"type\" type=\"xsd:string\"/>\n+                        <xsd:attribute name=\"defaultValue\" type=\"xsd:string\"/>\n+                        <xsd:attribute name=\"defaultValueNumeric\" type=\"xsd:string\"/>\n+                        <xsd:attribute name=\"defaultValueDate\" type=\"xsd:string\"/>\n+                        <xsd:attribute name=\"defaultValueBoolean\" type=\"booleanExp\"/>\n+                        <xsd:attribute name=\"defaultValueComputed\" type=\"xsd:string\"/>\n+                    </xsd:complexType>\n+                </xsd:element>\n+            </xsd:sequence>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attributeGroup ref=\"tableNameAttribute\"/>\n+            <xsd:attribute name=\"file\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"relativeToChangelogFile\" type=\"booleanExp\"/>\n+            <xsd:attribute name=\"usePreparedStatements\" type=\"booleanExp\"/>\n+            <xsd:attribute name=\"encoding\" type=\"xsd:string\" default=\"UTF-8\"/>\n+            <xsd:attribute name=\"separator\" type=\"xsd:string\" default=\",\"/>\n+            <xsd:attribute name=\"quotchar\" type=\"xsd:string\" default=\"&quot;\"/>\n+            <xsd:attribute name=\"commentLineStartsWith\" type=\"xsd:string\" default=\"#\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"loadUpdateData\">\n+        <xsd:complexType mixed=\"true\">\n+            <xsd:sequence>\n+                <xsd:element name=\"column\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n+                    <xsd:complexType>\n+                        <xsd:attribute name=\"index\" type=\"integerExp\"/>\n+                        <xsd:attribute name=\"header\" type=\"xsd:string\"/>\n+                        <xsd:attribute name=\"name\" type=\"xsd:string\"/>\n+                        <xsd:attribute name=\"type\" type=\"xsd:string\"/>\n+                        <xsd:attribute name=\"defaultValue\" type=\"xsd:string\"/>\n+                        <xsd:attribute name=\"defaultValueNumeric\" type=\"xsd:string\"/>\n+                        <xsd:attribute name=\"defaultValueDate\" type=\"xsd:string\"/>\n+                        <xsd:attribute name=\"defaultValueBoolean\" type=\"booleanExp\"/>\n+                        <xsd:attribute name=\"defaultValueComputed\" type=\"xsd:string\"/>\n+                    </xsd:complexType>\n+                </xsd:element>\n+            </xsd:sequence>\n+            <xsd:attributeGroup ref=\"tableNameAttribute\"/>\n+            <xsd:attribute name=\"file\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"relativeToChangelogFile\" type=\"booleanExp\"/>\n+            <xsd:attribute name=\"encoding\" type=\"xsd:string\" default=\"UTF-8\"/>\n+            <xsd:attribute name=\"primaryKey\" type=\"xsd:string\" use=\"required\"/>\n+            <xsd:attribute name=\"onlyUpdate\" type=\"xsd:boolean\" default=\"false\"/>\n+            <xsd:attribute name=\"separator\" type=\"xsd:string\" default=\",\"/>\n+            <xsd:attribute name=\"quotchar\" type=\"xsd:string\" default=\"&quot;\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:simpleType name=\"fkCascadeActionOptions\">\n+        <xsd:restriction base=\"xsd:token\">\n+            <xsd:enumeration value=\"CASCADE\"></xsd:enumeration>\n+            <xsd:enumeration value=\"SET NULL\"></xsd:enumeration>\n+            <xsd:enumeration value=\"SET DEFAULT\"></xsd:enumeration>\n+            <xsd:enumeration value=\"RESTRICT\"></xsd:enumeration>\n+            <xsd:enumeration value=\"NO ACTION\"></xsd:enumeration>\n+        </xsd:restriction>\n+    </xsd:simpleType>\n+\n+    <xsd:attributeGroup name=\"addForeignKeyConstraintAttrib\">\n+        <xsd:attribute name=\"baseTableCatalogName\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"baseTableSchemaName\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"baseTableName\" type=\"xsd:string\"\n+                       use=\"required\"/>\n+        <xsd:attribute name=\"baseColumnNames\" type=\"xsd:string\"\n+                       use=\"required\"/>\n+        <xsd:attribute name=\"constraintName\" type=\"xsd:string\"\n+                       use=\"required\"/>\n+        <xsd:attribute name=\"referencedTableCatalogName\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"referencedTableSchemaName\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"referencedTableName\" type=\"xsd:string\"\n+                       use=\"required\"/>\n+        <xsd:attribute name=\"referencedColumnNames\" type=\"xsd:string\"\n+                       use=\"required\"/>\n+        <xsd:attribute name=\"deferrable\" type=\"booleanExp\"/>\n+        <xsd:attribute name=\"initiallyDeferred\" type=\"booleanExp\"/>\n+        <xsd:attribute name=\"deleteCascade\" type=\"booleanExp\"/>\n+        <xsd:attribute name=\"onDelete\" type=\"fkCascadeActionOptions\"/>\n+        <xsd:attribute name=\"onUpdate\" type=\"fkCascadeActionOptions\"/>\n+        <xsd:attribute name=\"referencesUniqueColumn\" type=\"booleanExp\"/>\n+        <xsd:attribute name=\"validate\" type=\"booleanExp\"/>\n+    </xsd:attributeGroup>\n+\n+    <xsd:attributeGroup name=\"addNotNullConstraintAttrib\">\n+        <xsd:attributeGroup ref=\"tableNameAttribute\"/>\n+        <xsd:attribute name=\"columnName\" type=\"xsd:string\" use=\"required\"/>\n+        <xsd:attribute name=\"defaultNullValue\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"columnDataType\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"constraintName\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"validate\" type=\"booleanExp\"/>\n+    </xsd:attributeGroup>\n+\n+\n+    <xsd:element name=\"addNotNullConstraint\">\n+        <xsd:complexType>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attributeGroup ref=\"addNotNullConstraintAttrib\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"addForeignKeyConstraint\">\n+        <xsd:complexType>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attributeGroup ref=\"addForeignKeyConstraintAttrib\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:attributeGroup name=\"dbmsAttrib\">\n+        <xsd:attribute name=\"type\" type=\"xsd:string\" use=\"required\"/>\n+    </xsd:attributeGroup>\n+\n+    <xsd:element name=\"dbms\">\n+        <xsd:complexType>\n+            <xsd:attributeGroup ref=\"dbmsAttrib\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"changeSetExecuted\">\n+        <xsd:complexType>\n+            <xsd:attribute name=\"id\" type=\"xsd:string\" use=\"required\"/>\n+            <xsd:attribute name=\"author\" type=\"xsd:string\" use=\"required\"/>\n+            <xsd:attribute name=\"changeLogFile\" type=\"xsd:string\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"tableExists\">\n+        <xsd:complexType>\n+            <xsd:attribute name=\"catalogName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"schemaName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"tableName\" type=\"xsd:string\" use=\"required\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"columnExists\">\n+        <xsd:complexType>\n+            <xsd:attribute name=\"catalogName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"schemaName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"tableName\" type=\"xsd:string\" use=\"required\"/>\n+            <xsd:attribute name=\"columnName\" type=\"xsd:string\" use=\"required\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"sequenceExists\">\n+        <xsd:complexType>\n+            <xsd:attribute name=\"catalogName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"schemaName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"sequenceName\" type=\"xsd:string\" use=\"required\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"foreignKeyConstraintExists\">\n+        <xsd:complexType>\n+            <xsd:attribute name=\"catalogName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"schemaName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"foreignKeyTableName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"foreignKeyName\" type=\"xsd:string\" use=\"required\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"indexExists\">\n+        <xsd:complexType>\n+            <xsd:attribute name=\"catalogName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"schemaName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"indexName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"tableName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"columnNames\" type=\"xsd:string\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"rowCount\">\n+        <xsd:complexType>\n+            <xsd:attribute name=\"catalogName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"schemaName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"tableName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"expectedRows\" type=\"xsd:int\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"tableIsEmpty\">\n+        <xsd:complexType>\n+            <xsd:attribute name=\"catalogName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"schemaName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"tableName\" type=\"xsd:string\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"changeLogPropertyDefined\">\n+        <xsd:complexType>\n+            <xsd:attribute name=\"property\" type=\"xsd:string\" use=\"required\"/>\n+            <xsd:attribute name=\"value\" type=\"xsd:string\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"primaryKeyExists\">\n+        <xsd:complexType>\n+            <xsd:attribute name=\"catalogName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"schemaName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"primaryKeyName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"tableName\" type=\"xsd:string\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"viewExists\">\n+        <xsd:complexType>\n+            <xsd:attribute name=\"catalogName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"schemaName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"viewName\" type=\"xsd:string\" use=\"required\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"sqlCheck\">\n+        <xsd:complexType mixed=\"true\">\n+            <xsd:attribute name=\"expectedResult\" type=\"xsd:string\"\n+                           use=\"required\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"customPrecondition\">\n+        <xsd:complexType>\n+            <xsd:sequence>\n+                <xsd:element name=\"param\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n+                    <xsd:complexType>\n+                        <xsd:attribute name=\"name\" type=\"xsd:string\" use=\"required\"/>\n+                        <xsd:attribute name=\"value\" type=\"xsd:string\" use=\"required\"/>\n+                    </xsd:complexType>\n+                </xsd:element>\n+            </xsd:sequence>\n+            <xsd:attribute name=\"className\" type=\"xsd:string\" use=\"required\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"and\">\n+        <xsd:complexType>\n+            <xsd:choice>\n+                <xsd:group ref=\"PreConditionChildren\" minOccurs=\"1\"\n+                           maxOccurs=\"unbounded\"/>\n+            </xsd:choice>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"or\">\n+        <xsd:complexType>\n+            <xsd:choice>\n+                <xsd:group ref=\"PreConditionChildren\" minOccurs=\"1\"\n+                           maxOccurs=\"unbounded\"/>\n+            </xsd:choice>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"not\">\n+        <xsd:complexType>\n+            <xsd:choice>\n+                <xsd:group ref=\"PreConditionChildren\" minOccurs=\"1\"\n+                           maxOccurs=\"unbounded\"/>\n+            </xsd:choice>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:attributeGroup name=\"runningAsAttrib\">\n+        <xsd:attribute name=\"username\" type=\"xsd:string\" use=\"required\"/>\n+    </xsd:attributeGroup>\n+\n+    <xsd:element name=\"runningAs\">\n+        <xsd:complexType>\n+            <xsd:attributeGroup ref=\"runningAsAttrib\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:attributeGroup name=\"objectQuotingStrategyAttrib\">\n+        <xsd:attribute name=\"strategy\" type=\"xsd:string\" use=\"required\"/>\n+    </xsd:attributeGroup>\n+\n+    <xsd:element name=\"expectedQuotingStrategy\">\n+        <xsd:complexType>\n+            <xsd:attributeGroup ref=\"objectQuotingStrategyAttrib\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:attributeGroup name=\"dropForeignKeyConstraintAttrib\">\n+        <xsd:attribute name=\"baseTableCatalogName\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"baseTableSchemaName\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"baseTableName\" type=\"xsd:string\"\n+                       use=\"required\"/>\n+        <xsd:attribute name=\"constraintName\" type=\"xsd:string\"/>\n+    </xsd:attributeGroup>\n+\n+    <xsd:element name=\"dropForeignKeyConstraint\">\n+        <xsd:complexType>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attributeGroup ref=\"dropForeignKeyConstraintAttrib\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:attributeGroup name=\"dropAllForeignKeyConstraintsAttrib\">\n+        <xsd:attribute name=\"baseTableCatalogName\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"baseTableSchemaName\" type=\"xsd:string\"/>\n+        <xsd:attribute name=\"baseTableName\" type=\"xsd:string\"\n+                       use=\"required\"/>\n+    </xsd:attributeGroup>\n+\n+    <xsd:element name=\"dropAllForeignKeyConstraints\">\n+        <xsd:complexType>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attributeGroup ref=\"dropAllForeignKeyConstraintsAttrib\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"dropNotNullConstraint\">\n+        <xsd:complexType>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attribute name=\"catalogName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"schemaName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"tableName\" type=\"xsd:string\" use=\"required\"/>\n+            <xsd:attribute name=\"columnName\" type=\"xsd:string\" use=\"required\"/>\n+            <xsd:attribute name=\"columnDataType\" type=\"xsd:string\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"setTableRemarks\">\n+        <xsd:complexType>\n+            <xsd:attribute name=\"catalogName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"schemaName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"tableName\" type=\"xsd:string\" use=\"required\"/>\n+            <xsd:attribute name=\"remarks\" type=\"xsd:string\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"setColumnRemarks\">\n+        <xsd:complexType>\n+            <xsd:attribute name=\"catalogName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"schemaName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"tableName\" type=\"xsd:string\" use=\"required\"/>\n+            <xsd:attribute name=\"columnName\" type=\"xsd:string\" use=\"required\"/>\n+            <xsd:attribute name=\"remarks\" type=\"xsd:string\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"constraints\">\n+        <xsd:complexType>\n+            <xsd:attributeGroup ref=\"constraintsAttributes\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+\n+    <xsd:element name=\"column\">\n+        <xsd:complexType mixed=\"true\">\n+            <xsd:sequence>\n+                <xsd:element ref=\"constraints\" minOccurs=\"0\"/>\n+            </xsd:sequence>\n+            <xsd:attributeGroup ref=\"column\"/>\n+            <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"param\">\n+        <xsd:complexType>\n+            <xsd:attributeGroup ref=\"param\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <!-- Children for createTable -->\n+    <xsd:element name=\"createTable\">\n+        <xsd:complexType>\n+            <xsd:choice maxOccurs=\"unbounded\">\n+                <xsd:element ref=\"column\" minOccurs=\"1\" maxOccurs=\"unbounded\"/>\n+                <xsd:any namespace=\"##other\" processContents=\"lax\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+            </xsd:choice>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attributeGroup ref=\"tableNameAttribute\"/>\n+            <xsd:attribute name=\"tablespace\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"remarks\" type=\"xsd:string\"/>\n+            <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <!-- Children for createView -->\n+    <xsd:element name=\"createView\">\n+        <xsd:complexType>\n+            <xsd:simpleContent>\n+                <xsd:extension base=\"xsd:string\">\n+                    <xsd:attributeGroup ref=\"changeAttributes\"/>\n+                    <xsd:attribute name=\"catalogName\" type=\"xsd:string\"/>\n+                    <xsd:attribute name=\"schemaName\" type=\"xsd:string\"/>\n+                    <xsd:attribute name=\"viewName\" type=\"xsd:string\" use=\"required\"/>\n+                    <xsd:attribute name=\"remarks\" type=\"xsd:string\"/>\n+                    <xsd:attribute name=\"replaceIfExists\" type=\"booleanExp\"/>\n+                    <xsd:attribute name=\"fullDefinition\" type=\"booleanExp\"/>\n+                    <xsd:attribute name=\"path\" type=\"xsd:string\"/>\n+                    <xsd:attribute name=\"encoding\" type=\"xsd:string\"/>\n+                    <xsd:attribute name=\"relativeToChangelogFile\" type=\"booleanExp\"/>\n+                    <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"/>\n+                </xsd:extension>\n+            </xsd:simpleContent>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <!-- Children for insert -->\n+    <xsd:element name=\"insert\">\n+        <xsd:complexType>\n+            <xsd:sequence>\n+                <xsd:element ref=\"column\" maxOccurs=\"unbounded\"/>\n+            </xsd:sequence>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attributeGroup ref=\"tableNameAttribute\"/>\n+            <xsd:attribute name=\"dbms\" type=\"xsd:string\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"update\">\n+        <xsd:complexType mixed=\"true\">\n+            <xsd:sequence>\n+                <xsd:element ref=\"column\" minOccurs=\"1\" maxOccurs=\"unbounded\"/>\n+                <xsd:element name=\"where\" minOccurs=\"0\" maxOccurs=\"1\" type=\"xsd:string\"/>\n+                <xsd:element ref=\"whereParams\" minOccurs=\"0\" maxOccurs=\"1\"/>\n+            </xsd:sequence>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attributeGroup ref=\"tableNameAttribute\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"whereParams\">\n+        <xsd:complexType mixed=\"true\">\n+            <xsd:sequence>\n+                <xsd:element ref=\"param\" minOccurs=\"1\" maxOccurs=\"unbounded\"/>\n+            </xsd:sequence>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"delete\">\n+        <xsd:complexType mixed=\"true\">\n+            <xsd:sequence>\n+                <xsd:element name=\"where\" minOccurs=\"0\" maxOccurs=\"1\"/>\n+                <xsd:element ref=\"whereParams\" minOccurs=\"0\" maxOccurs=\"1\"/>\n+            </xsd:sequence>\n+            <xsd:attributeGroup ref=\"tableNameAttribute\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <!-- Children for addColum -->\n+    <xsd:element name=\"addColumn\">\n+        <xsd:complexType>\n+            <xsd:sequence>\n+                <xsd:element name=\"column\" minOccurs=\"1\" maxOccurs=\"unbounded\">\n+                    <xsd:complexType>\n+                        <xsd:complexContent mixed=\"true\">\n+                            <xsd:extension base=\"columnType\">\n+                                <xsd:attribute name=\"beforeColumn\" type=\"xsd:string\"/>\n+                                <xsd:attribute name=\"afterColumn\" type=\"xsd:string\"/>\n+                                <xsd:attribute name=\"position\" type=\"xsd:integer\"/>\n+                            </xsd:extension>\n+                        </xsd:complexContent>\n+                    </xsd:complexType>\n+                </xsd:element>\n+            </xsd:sequence>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attributeGroup ref=\"tableNameAttribute\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"rollback\">\n+        <xsd:complexType mixed=\"true\">\n+            <xsd:choice>\n+                <xsd:group ref=\"changeSetChildren\" minOccurs=\"0\"\n+                           maxOccurs=\"unbounded\"/>\n+            </xsd:choice>\n+            <xsd:attribute name=\"changeSetPath\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"changeSetAuthor\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"changeSetId\" type=\"xsd:string\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <!-- comment  -->\n+    <xsd:element name=\"comment\" type=\"xsd:string\"/>\n+\n+    <!-- sql -->\n+    <xsd:element name=\"sql\">\n+        <xsd:complexType mixed=\"true\">\n+            <xsd:sequence>\n+                <xsd:element ref=\"comment\" minOccurs=\"0\" maxOccurs=\"1\"/>\n+            </xsd:sequence>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attribute name=\"stripComments\" type=\"booleanExp\"/>\n+            <xsd:attribute name=\"splitStatements\" type=\"booleanExp\"/>\n+            <xsd:attribute name=\"endDelimiter\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"dbms\" type=\"xsd:string\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"createProcedure\">\n+        <xsd:complexType mixed=\"true\">\n+            <xsd:sequence>\n+                <xsd:element ref=\"comment\" minOccurs=\"0\" maxOccurs=\"1\"/>\n+            </xsd:sequence>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attribute name=\"catalogName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"schemaName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"procedureName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"path\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"encoding\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"relativeToChangelogFile\" type=\"booleanExp\"/>\n+            <xsd:attribute name=\"dbms\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"replaceIfExists\" type=\"xsd:boolean\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"executeCommand\">\n+        <xsd:complexType>\n+            <xsd:sequence>\n+                <xsd:element name=\"arg\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n+                    <xsd:complexType>\n+                        <xsd:attribute name=\"value\" type=\"xsd:string\" use=\"required\"/>\n+                    </xsd:complexType>\n+                </xsd:element>\n+            </xsd:sequence>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attribute name=\"executable\" type=\"xsd:string\" use=\"required\"/>\n+            <xsd:attribute name=\"os\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"timeout\" type=\"xsd:string\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"sqlFile\">\n+        <xsd:complexType>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attribute name=\"path\" type=\"xsd:string\" use=\"required\"/>\n+            <xsd:attribute name=\"stripComments\" type=\"booleanExp\"/>\n+            <xsd:attribute name=\"splitStatements\" type=\"booleanExp\"/>\n+            <xsd:attribute name=\"encoding\" type=\"xsd:string\" default=\"UTF-8\"/>\n+            <xsd:attribute name=\"endDelimiter\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"relativeToChangelogFile\" type=\"booleanExp\"/>\n+            <xsd:attribute name=\"dbms\" type=\"xsd:string\"/>\n+            <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"tagDatabase\">\n+        <xsd:complexType>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attribute name=\"tag\" type=\"xsd:string\" use=\"required\"/>\n+            <xsd:anyAttribute namespace=\"##other\"  processContents=\"lax\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"stop\">\n+        <xsd:complexType mixed=\"true\">\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"empty\">\n+        <xsd:complexType>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"output\">\n+        <xsd:complexType mixed=\"true\">\n+            <xsd:attribute name=\"target\" type=\"xsd:string\"/>\n+        </xsd:complexType>\n+\n+    </xsd:element>\n+\n+    <!-- renameTable -->\n+    <xsd:element name=\"renameTable\">\n+        <xsd:complexType>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attributeGroup ref=\"renameTableAttributes\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"renameView\">\n+        <xsd:complexType>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attributeGroup ref=\"renameViewAttributes\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <!-- dropTable -->\n+    <xsd:element name=\"dropTable\">\n+        <xsd:complexType>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attributeGroup ref=\"dropTableAttributes\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"dropView\">\n+        <xsd:complexType>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attribute name=\"viewName\" type=\"xsd:string\" use=\"required\"/>\n+            <xsd:attribute name=\"catalogName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"schemaName\" type=\"xsd:string\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"dropProcedure\">\n+        <xsd:complexType>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attribute name=\"procedureName\" type=\"xsd:string\" use=\"required\"/>\n+            <xsd:attribute name=\"catalogName\" type=\"xsd:string\"/>\n+            <xsd:attribute name=\"schemaName\" type=\"xsd:string\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <!-- renameColumn -->\n+    <xsd:element name=\"renameColumn\">\n+        <xsd:complexType>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attributeGroup ref=\"renameColumnAttributes\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"dropColumn\">\n+        <xsd:complexType>\n+            <xsd:sequence>\n+                <xsd:element name=\"column\" minOccurs=\"0\" maxOccurs=\"unbounded\" type=\"columnType\"/>\n+            </xsd:sequence>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attributeGroup ref=\"dropColumnAttributes\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"mergeColumns\">\n+        <xsd:complexType>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attributeGroup ref=\"tableNameAttribute\"/>\n+            <xsd:attribute name=\"column1Name\" type=\"xsd:string\"\n+                           use=\"required\"/>\n+            <xsd:attribute name=\"joinString\" type=\"xsd:string\" use=\"required\"/>\n+            <xsd:attribute name=\"column2Name\" type=\"xsd:string\"\n+                           use=\"required\"/>\n+            <xsd:attribute name=\"finalColumnName\" type=\"xsd:string\"\n+                           use=\"required\"/>\n+            <xsd:attribute name=\"finalColumnType\" type=\"xsd:string\"\n+                           use=\"required\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"createSequence\">\n+        <xsd:complexType>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attributeGroup ref=\"sequenceAttributes\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"alterSequence\">\n+        <xsd:complexType>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attributeGroup ref=\"sequenceAttributes\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"dropSequence\">\n+        <xsd:complexType>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attributeGroup ref=\"sequenceAttributes\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"renameSequence\">\n+        <xsd:complexType>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attributeGroup ref=\"renameSequenceAttributes\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"createIndex\">\n+        <xsd:complexType>\n+            <xsd:choice maxOccurs=\"unbounded\">\n+                <xsd:element ref=\"column\" maxOccurs=\"unbounded\"/>\n+                <xsd:any namespace=\"##other\" processContents=\"lax\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+            </xsd:choice>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attributeGroup ref=\"createIndex\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"dropIndex\">\n+        <xsd:complexType>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attributeGroup ref=\"tableNameAttribute\"/>\n+            <xsd:attributeGroup ref=\"indexName\"/>\n+            <xsd:attribute name=\"associatedWith\" type=\"xsd:string\" use=\"optional\"/>\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+    <xsd:element name=\"customChange\">\n+        <xsd:complexType>\n+            <xsd:sequence>\n+                <xsd:element name=\"param\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n+                    <xsd:complexType mixed=\"true\">\n+                        <xsd:attribute name=\"name\" type=\"xsd:string\" use=\"required\"/>\n+                        <xsd:attribute name=\"value\" type=\"xsd:string\"/>\n+                    </xsd:complexType>\n+                </xsd:element>\n+            </xsd:sequence>\n+            <xsd:attributeGroup ref=\"changeAttributes\"/>\n+            <xsd:attribute name=\"class\" type=\"xsd:string\" use=\"required\"/>\n+            <xsd:anyAttribute processContents=\"lax\" />\n+        </xsd:complexType>\n+    </xsd:element>\n+\n+\n+    <!-- Children for changeSet -->\n+    <xsd:group name=\"changeSetChildren\">\n+        <xsd:choice>\n+            <xsd:element ref=\"comment\" maxOccurs=\"1\"/>\n+            <xsd:element ref=\"createTable\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"dropTable\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"createView\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"renameView\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"dropView\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"insert\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"addColumn\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"sql\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"createProcedure\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"dropProcedure\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"sqlFile\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"renameTable\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"renameColumn\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"dropColumn\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"mergeColumns\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"modifyDataType\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"createSequence\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"alterSequence\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"dropSequence\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"renameSequence\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"createIndex\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"dropIndex\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"addNotNullConstraint\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"dropNotNullConstraint\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"addForeignKeyConstraint\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"dropForeignKeyConstraint\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"dropAllForeignKeyConstraints\"\n+                         maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"addPrimaryKey\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"dropPrimaryKey\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"addLookupTable\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"addAutoIncrement\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"addDefaultValue\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"dropDefaultValue\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"addUniqueConstraint\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"dropUniqueConstraint\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"setTableRemarks\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"setColumnRemarks\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"customChange\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"update\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"delete\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"loadData\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"loadUpdateData\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"executeCommand\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"stop\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"output\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"empty\" maxOccurs=\"unbounded\"/>\n+            <xsd:element ref=\"rollback\" maxOccurs=\"1\"/>\n+            <xsd:any namespace=\"##other\" processContents=\"lax\" minOccurs=\"0\"\n+                     maxOccurs=\"unbounded\"/>\n+        </xsd:choice>\n+    </xsd:group>\n+\n+    <!-- Children for Precondition -->\n+    <xsd:group name=\"PreConditionChildren\">\n+        <xsd:sequence>\n+            <xsd:choice>\n+                <xsd:element ref=\"and\" maxOccurs=\"unbounded\"/>\n+                <xsd:element ref=\"or\" maxOccurs=\"unbounded\"/>\n+                <xsd:element ref=\"not\" maxOccurs=\"unbounded\"/>\n+                <xsd:element ref=\"dbms\" maxOccurs=\"unbounded\"/>\n+                <xsd:element ref=\"runningAs\" maxOccurs=\"unbounded\"/>\n+                <xsd:element ref=\"changeSetExecuted\" maxOccurs=\"unbounded\"/>\n+                <xsd:element ref=\"tableExists\" maxOccurs=\"unbounded\"/>\n+                <xsd:element ref=\"columnExists\" maxOccurs=\"unbounded\"/>\n+                <xsd:element ref=\"sequenceExists\" maxOccurs=\"unbounded\"/>\n+                <xsd:element ref=\"foreignKeyConstraintExists\" maxOccurs=\"unbounded\"/>\n+                <xsd:element ref=\"indexExists\" maxOccurs=\"unbounded\"/>\n+                <xsd:element ref=\"primaryKeyExists\" maxOccurs=\"unbounded\"/>\n+                <xsd:element ref=\"viewExists\" maxOccurs=\"unbounded\"/>\n+                <xsd:element ref=\"tableIsEmpty\" maxOccurs=\"unbounded\"/>\n+                <xsd:element ref=\"rowCount\" maxOccurs=\"unbounded\"/>\n+                <xsd:element ref=\"sqlCheck\" maxOccurs=\"unbounded\"/>\n+                <xsd:element ref=\"changeLogPropertyDefined\" maxOccurs=\"unbounded\"/>\n+                <xsd:element ref=\"expectedQuotingStrategy\" maxOccurs=\"unbounded\"/>\n+                <xsd:element ref=\"customPrecondition\" maxOccurs=\"unbounded\"/>\n+                <xsd:any namespace=\"##other\" processContents=\"lax\" minOccurs=\"0\"\n+                         maxOccurs=\"unbounded\"/>\n+            </xsd:choice>\n+        </xsd:sequence>\n+\n+    </xsd:group>\n+</xsd:schema>\n\ndiff --git a/extensions/liquibase/liquibase/deployment/src/test/resources/secure-parsing-disabled.properties b/extensions/liquibase/liquibase/deployment/src/test/resources/secure-parsing-disabled.properties\nnew file mode 100644\nindex 0000000000000..caafcdc5a7efc\n--- /dev/null\n+++ b/extensions/liquibase/liquibase/deployment/src/test/resources/secure-parsing-disabled.properties\n@@ -0,0 +1,7 @@\n+quarkus.datasource.db-kind=h2\n+quarkus.datasource.username=sa\n+quarkus.datasource.password=sa\n+quarkus.datasource.jdbc.url=jdbc:h2:tcp://localhost/mem:test-quarkus-secure-parsing-disabled;DB_CLOSE_DELAY=-1\n+# Liquibase config properties\n+quarkus.liquibase.migrate-at-start=true\n+quarkus.liquibase.secure-parsing=false\n\ndiff --git a/extensions/liquibase/liquibase/deployment/src/test/resources/secure-parsing-enabled.properties b/extensions/liquibase/liquibase/deployment/src/test/resources/secure-parsing-enabled.properties\nnew file mode 100644\nindex 0000000000000..b745f52e7aabe\n--- /dev/null\n+++ b/extensions/liquibase/liquibase/deployment/src/test/resources/secure-parsing-enabled.properties\n@@ -0,0 +1,6 @@\n+quarkus.datasource.db-kind=h2\n+quarkus.datasource.username=sa\n+quarkus.datasource.password=sa\n+quarkus.datasource.jdbc.url=jdbc:h2:tcp://localhost/mem:test-secure-parsing-enabled;DB_CLOSE_DELAY=-1\n+# Liquibase config properties\n+quarkus.liquibase.migrate-at-start=true\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47181",
    "pr_id": 47181,
    "issue_id": 47179,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Since Quarkus 3.19 quarkus-junit5-mockito doesn't clean up mocks properly when used in combination with @TestInstance(TestInstance.Lifecycle.PER_CLASS)\n### Describe the bug\n\nWhen using `@InjectSpy` inside a QuarkusTest the mock isn't reset/cleaned up properly between runs if the test has `@TestInstance(TestInstance.Lifecycle.PER_CLASS)` set. If I downgrade to Quarkus 3.18 it works.\n\n### Expected behavior\n\nTests using this behaviour which were working in Quarkus 3.18 work the same in 3.19\n\n### Actual behavior\n\nTests that use this that worked in Quarkus 3.18 now fail because the mock isn't cleaned up and mocks from other tests \"leak\" into other tests.\n\n### How to Reproduce?\n\nSee readme in https://github.com/higgs01/quarkus-reprod-mockito-cleanup\n\n### Output of `uname -a` or `ver`\n\nMicrosoft Windows\n\n### Output of `java -version`\n\nJava version: 17.0.13, vendor: Temurin\n\n### Quarkus version or git rev\n\n_No response_\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nApache Maven 3.9.9 (8e8579a9e76f7d015ee5ec7bfcdc97d260186937)\n\n### Additional information\n\nIt seems like the change that has introduced this behavour was https://github.com/quarkusio/quarkus/pull/46119 \n\nOur current workaround is to call `Mockito.reset()` for each of our mocks inside `@BeforeEach` (similarly to what quarkus did in 3.18)\n\nWe're currently using Quarkus 3.20 LTS. If this issue were to result in a change it'd be great for us if this would be included as a bugfix for 3.20",
    "issue_word_count": 241,
    "test_files_count": 3,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/PerClassSpyTest.java",
      "test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/MockitoMocksTracker.java",
      "test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/SetMockitoMockAsBeanMockCallback.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/PerClassSpyTest.java",
      "test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/MockitoMocksTracker.java",
      "test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/SetMockitoMockAsBeanMockCallback.java"
    ],
    "base_commit": "397237e6c92156340bf8bb9fb18c916b7152f4bd",
    "head_commit": "dd998af3d09d6f393c7a4669cd80b6bbe18fa897",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47181",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47181",
    "dockerfile": "",
    "pr_merged_at": "2025-04-04T13:37:08.000Z",
    "patch": "",
    "test_patch": "diff --git a/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/PerClassSpyTest.java b/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/PerClassSpyTest.java\nnew file mode 100644\nindex 0000000000000..71801fca42a50\n--- /dev/null\n+++ b/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/PerClassSpyTest.java\n@@ -0,0 +1,46 @@\n+package io.quarkus.it.mockbean;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.when;\n+\n+import jakarta.enterprise.context.ApplicationScoped;\n+\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.mockito.InjectSpy;\n+\n+@QuarkusTest\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+public class PerClassSpyTest {\n+\n+    @InjectSpy\n+    IdentityService identityService;\n+\n+    @Test\n+    @Order(1)\n+    void testWithSpy() {\n+        when(identityService.call(any())).thenReturn(\"DUMMY\");\n+        assertEquals(\"DUMMY\", identityService.call(\"foo\"));\n+    }\n+\n+    @Test\n+    @Order(2)\n+    void testWithoutSpy() {\n+        assertEquals(\"foo\", identityService.call(\"foo\"));\n+    }\n+\n+    @ApplicationScoped\n+    public static class IdentityService {\n+\n+        public String call(String input) {\n+            return input;\n+        }\n+    }\n+}\n\ndiff --git a/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/MockitoMocksTracker.java b/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/MockitoMocksTracker.java\nindex 8ad2aa440986d..8e21756b52632 100644\n--- a/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/MockitoMocksTracker.java\n+++ b/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/MockitoMocksTracker.java\n@@ -25,7 +25,9 @@ static Set<Mocked> getMocks(Object testInstance) {\n     }\n \n     static void reset(Object testInstance) {\n-        Mockito.framework().clearInlineMock(testInstance);\n+        for (Mocked m : getMocks(testInstance)) {\n+            Mockito.framework().clearInlineMock(m.mock);\n+        }\n     }\n \n     static Optional<Object> currentMock(Object testInstance, Object beanInstance) {\n@@ -38,13 +40,6 @@ static Optional<Object> currentMock(Object testInstance, Object beanInstance) {\n         return Optional.empty();\n     }\n \n-    static class Mocked {\n-        final Object mock;\n-        final Object beanInstance;\n-\n-        public Mocked(Object mock, Object beanInstance) {\n-            this.mock = mock;\n-            this.beanInstance = beanInstance;\n-        }\n+    record Mocked(Object mock, Object beanInstance) {\n     }\n }\n\ndiff --git a/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/SetMockitoMockAsBeanMockCallback.java b/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/SetMockitoMockAsBeanMockCallback.java\nindex b83fcc34bd416..c8409f1b9028a 100644\n--- a/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/SetMockitoMockAsBeanMockCallback.java\n+++ b/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/SetMockitoMockAsBeanMockCallback.java\n@@ -18,9 +18,9 @@ public void beforeEach(QuarkusTestMethodContext context) {\n \n     private void installMock(MockitoMocksTracker.Mocked mocked) {\n         try {\n-            QuarkusMock.installMockForInstance(mocked.mock, mocked.beanInstance);\n+            QuarkusMock.installMockForInstance(mocked.mock(), mocked.beanInstance());\n         } catch (Exception e) {\n-            throw new RuntimeException(mocked.beanInstance\n+            throw new RuntimeException(mocked.beanInstance()\n                     + \" is not a normal scoped CDI bean, make sure the bean is a normal scope like @ApplicationScoped or @RequestScoped.\"\n                     + \" Alternatively you can use '@InjectMock(convertScopes=true)' instead of '@InjectMock' if you would like\"\n                     + \" Quarkus to automatically make that conversion (you should only use this if you understand the implications).\");\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47176",
    "pr_id": 47176,
    "issue_id": 46718,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Quarkus fails to resolve `quarkus.application.version` in dev mode\n### Describe the bug\n\nWhen updating quarkus from 3.18.4 to 3.19.2 quarkus applications could not be started in dev mode via it's static main method, if the application's version is being referenced somewhere in it's configuration, e.g. via\n\n```\nquarkus:\n  container-image:\n    labels:\n      app-version: ${quarkus.application.version}\n```\n\nAs both are build-time configurations, this should not be an issue with referencing runtime-time config from build-time config.\n\nNote: Starting the application via `mvn quarkus:dev` works as expected.\n\n### Expected behavior\n\nShould start in dev mode as it was for the 3.18.x branch.\n\n### Actual behavior\n\nApplications fails to start in dev mode due to either provided or resolved `quarkus.application.version`:\n\n```\nException in thread \"main\" java.lang.RuntimeException: java.lang.reflect.InvocationTargetException\n\tat io.quarkus.launcher.QuarkusLauncher.launch(QuarkusLauncher.java:58)\n\tat io.quarkus.runtime.Quarkus.launchFromIDE(Quarkus.java:114)\n\tat io.quarkus.runtime.Quarkus.run(Quarkus.java:92)\n\tat io.quarkus.runtime.Quarkus.run(Quarkus.java:48)\n\tat io.quarkus.runtime.Quarkus.run(Quarkus.java:137)\n\tat com.example.App.main(App.java:8)\nCaused by: java.lang.reflect.InvocationTargetException\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:569)\n\tat io.quarkus.launcher.QuarkusLauncher.launch(QuarkusLauncher.java:56)\n\t... 5 more\nCaused by: java.lang.RuntimeException: java.lang.RuntimeException: io.quarkus.bootstrap.prebuild.CodeGenException: Failed to initialize application configuration\n\tat io.quarkus.bootstrap.IDELauncherImpl.launch(IDELauncherImpl.java:97)\n\t... 10 more\nCaused by: java.lang.RuntimeException: io.quarkus.bootstrap.prebuild.CodeGenException: Failed to initialize application configuration\n\tat io.quarkus.deployment.dev.IsolatedDevModeMain.accept(IsolatedDevModeMain.java:458)\n\tat io.quarkus.deployment.dev.IDEDevModeMain.accept(IDEDevModeMain.java:71)\n\tat io.quarkus.deployment.dev.IDEDevModeMain.accept(IDEDevModeMain.java:28)\n\tat io.quarkus.bootstrap.app.CuratedApplication.runInCl(CuratedApplication.java:138)\n\tat io.quarkus.bootstrap.app.CuratedApplication.runInAugmentClassLoader(CuratedApplication.java:93)\n\tat io.quarkus.bootstrap.IDELauncherImpl.launch(IDELauncherImpl.java:93)\n\t... 10 more\n\tSuppressed: java.lang.IllegalStateException: Hot deployment of the application is not supported when updating the Quarkus version. The application needs to be stopped and dev mode started up again\n\t\tat io.quarkus.deployment.dev.IsolatedDevModeMain.close(IsolatedDevModeMain.java:334)\n\t\tat io.quarkus.deployment.dev.IsolatedDevModeMain.accept(IsolatedDevModeMain.java:460)\n\t\t... 15 more\nCaused by: io.quarkus.bootstrap.prebuild.CodeGenException: Failed to initialize application configuration\n\tat io.quarkus.deployment.CodeGenerator.readConfig(CodeGenerator.java:356)\n\tat io.quarkus.deployment.CodeGenerator.getConfig(CodeGenerator.java:290)\n\tat io.quarkus.deployment.dev.CodeGenWatcher.<init>(CodeGenWatcher.java:41)\n\tat io.quarkus.deployment.dev.IsolatedDevModeMain.accept(IsolatedDevModeMain.java:419)\n\t... 15 more\nCaused by: io.smallrye.config.ConfigValidationException: Configuration validation failed:\n\tjava.util.NoSuchElementException: SRCFG00011: Could not expand value quarkus.application.version in property quarkus.container-image.labels.app-version\n\tat io.smallrye.config.SmallRyeConfig.buildMappings(SmallRyeConfig.java:141)\n\tat io.smallrye.config.SmallRyeConfig.<init>(SmallRyeConfig.java:95)\n\tat io.smallrye.config.SmallRyeConfigBuilder.build(SmallRyeConfigBuilder.java:773)\n\tat io.quarkus.deployment.configuration.BuildTimeConfigurationReader.initConfiguration(BuildTimeConfigurationReader.java:412)\n\tat io.quarkus.deployment.CodeGenerator.lambda$getConfig$6(CodeGenerator.java:291)\n\tat io.quarkus.deployment.CodeGenerator.readConfig(CodeGenerator.java:354)\n\t... 18 more\n```\n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\nLinux NHH43414 5.15.167.4-microsoft-standard-WSL2 #1 SMP Tue Nov 5 00:21:55 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux\n\n### Output of `java -version`\n\nopenjdk version \"17.0.14\" 2025-01-21\n\n### Quarkus version or git rev\n\n3.19.2\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nApache Maven 3.8.7\n\n### Additional information\n\n_No response_",
    "issue_word_count": 623,
    "test_files_count": 5,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "core/deployment/src/main/java/io/quarkus/deployment/dev/IDEDevModeMain.java",
      "integration-tests/maven/src/test/java/io/quarkus/maven/it/BuildIT.java",
      "integration-tests/maven/src/test/resources-filtered/projects/ide-dev-mode-build-props/pom.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/ide-dev-mode-build-props/src/main/resources/application.properties",
      "integration-tests/maven/src/test/resources-filtered/projects/ide-dev-mode-build-props/src/test/java/orc/acme/LauncherTest.java",
      "integration-tests/maven/src/test/resources-filtered/projects/ide-dev-mode-build-props/src/test/java/orc/acme/TestApp.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/maven/src/test/java/io/quarkus/maven/it/BuildIT.java",
      "integration-tests/maven/src/test/resources-filtered/projects/ide-dev-mode-build-props/pom.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/ide-dev-mode-build-props/src/main/resources/application.properties",
      "integration-tests/maven/src/test/resources-filtered/projects/ide-dev-mode-build-props/src/test/java/orc/acme/LauncherTest.java",
      "integration-tests/maven/src/test/resources-filtered/projects/ide-dev-mode-build-props/src/test/java/orc/acme/TestApp.java"
    ],
    "base_commit": "df644e4409da22db6c1281fca9ef24aad419c538",
    "head_commit": "b0498e60ddf5ebc3399891f24993466872ff01cc",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47176",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47176",
    "dockerfile": "",
    "pr_merged_at": "2025-04-15T14:38:55.000Z",
    "patch": "diff --git a/core/deployment/src/main/java/io/quarkus/deployment/dev/IDEDevModeMain.java b/core/deployment/src/main/java/io/quarkus/deployment/dev/IDEDevModeMain.java\nindex a12bb9da89890..864d8688d8813 100644\n--- a/core/deployment/src/main/java/io/quarkus/deployment/dev/IDEDevModeMain.java\n+++ b/core/deployment/src/main/java/io/quarkus/deployment/dev/IDEDevModeMain.java\n@@ -5,6 +5,7 @@\n import java.util.HashMap;\n import java.util.LinkedHashSet;\n import java.util.Map;\n+import java.util.Properties;\n import java.util.Set;\n import java.util.function.BiConsumer;\n \n@@ -37,6 +38,10 @@ public void accept(CuratedApplication curatedApplication, Map<String, Object> st\n         Path appClasses = (Path) stringObjectMap.get(\"app-classes\");\n         DevModeContext devModeContext = new DevModeContext();\n         devModeContext.setArgs((String[]) stringObjectMap.get(\"args\"));\n+        Properties buildSystemProperties = curatedApplication.getQuarkusBootstrap().getBuildSystemProperties();\n+        for (String key : buildSystemProperties.stringPropertyNames()) {\n+            devModeContext.getBuildSystemProperties().put(key, buildSystemProperties.getProperty(key));\n+        }\n \n         ApplicationModel appModel = null;\n         try {\n",
    "test_patch": "diff --git a/integration-tests/maven/src/test/java/io/quarkus/maven/it/BuildIT.java b/integration-tests/maven/src/test/java/io/quarkus/maven/it/BuildIT.java\nindex b084a502e6b69..18dfdf5f99254 100644\n--- a/integration-tests/maven/src/test/java/io/quarkus/maven/it/BuildIT.java\n+++ b/integration-tests/maven/src/test/java/io/quarkus/maven/it/BuildIT.java\n@@ -182,7 +182,12 @@ void testCustomManifestAttributes() throws MavenInvocationException, Interrupted\n                 assertThat(section.getValue(\"visibility\")).isEqualTo(\"private\");\n             }\n         }\n+    }\n \n+    @Test\n+    void testIdeDevModeBuildPropsPropagation() throws MavenInvocationException, InterruptedException, IOException {\n+        testDir = initProject(\"projects/ide-dev-mode-build-props\");\n+        build();\n     }\n \n     private void launch() throws IOException {\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/ide-dev-mode-build-props/pom.xml b/integration-tests/maven/src/test/resources-filtered/projects/ide-dev-mode-build-props/pom.xml\nnew file mode 100644\nindex 0000000000000..aeb84ad4b1356\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/ide-dev-mode-build-props/pom.xml\n@@ -0,0 +1,72 @@\n+<?xml version=\"1.0\"?>\n+<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <groupId>org.acme</groupId>\n+  <artifactId>acme</artifactId>\n+  <version>1.0-SNAPSHOT</version>\n+  <properties>\n+    <quarkus.platform.group-id>io.quarkus</quarkus.platform.group-id>\n+    <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>\n+    <quarkus.platform.version>@project.version@</quarkus.platform.version>\n+    <quarkus-plugin.version>@project.version@</quarkus-plugin.version>\n+    <compiler-plugin.version>${compiler-plugin.version}</compiler-plugin.version>\n+    <maven.compiler.source>${maven.compiler.source}</maven.compiler.source>\n+    <maven.compiler.target>${maven.compiler.target}</maven.compiler.target>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+  </properties>\n+  <dependencyManagement>\n+    <dependencies>\n+      <!-- insert managed dependencies here -->\n+      <dependency>\n+        <groupId>\\${quarkus.platform.group-id}</groupId>\n+        <artifactId>\\${quarkus.platform.artifact-id}</artifactId>\n+        <version>\\${quarkus.platform.version}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+  <dependencies>\n+    <!-- insert test dependencies here -->\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-core</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-avro</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-container-image-docker</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-junit5</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <artifactId>maven-compiler-plugin</artifactId>\n+        <version>\\${compiler-plugin.version}</version>\n+      </plugin>\n+      <plugin>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-maven-plugin</artifactId>\n+        <version>\\${quarkus-plugin.version}</version>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>generate-code</goal>\n+              <goal>generate-code-tests</goal>\n+              <goal>build</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/ide-dev-mode-build-props/src/main/resources/application.properties b/integration-tests/maven/src/test/resources-filtered/projects/ide-dev-mode-build-props/src/main/resources/application.properties\nnew file mode 100644\nindex 0000000000000..785be944928af\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/ide-dev-mode-build-props/src/main/resources/application.properties\n@@ -0,0 +1 @@\n+quarkus.container-image.labels.app-version=${quarkus.application.version}\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/ide-dev-mode-build-props/src/test/java/orc/acme/LauncherTest.java b/integration-tests/maven/src/test/resources-filtered/projects/ide-dev-mode-build-props/src/test/java/orc/acme/LauncherTest.java\nnew file mode 100644\nindex 0000000000000..ebe6c720a0234\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/ide-dev-mode-build-props/src/test/java/orc/acme/LauncherTest.java\n@@ -0,0 +1,12 @@\n+package org.acme;\n+\n+import io.quarkus.launcher.QuarkusLauncher;\n+import org.junit.jupiter.api.Test;\n+\n+public class LauncherTest {\n+    @Test\n+    public void testLauncher() throws Exception {\n+        try(var app = QuarkusLauncher.launch(LauncherTest.class.getName(), TestApp.class.getName())) {\n+        }\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/ide-dev-mode-build-props/src/test/java/orc/acme/TestApp.java b/integration-tests/maven/src/test/resources-filtered/projects/ide-dev-mode-build-props/src/test/java/orc/acme/TestApp.java\nnew file mode 100644\nindex 0000000000000..b855e4e95f230\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/ide-dev-mode-build-props/src/test/java/orc/acme/TestApp.java\n@@ -0,0 +1,9 @@\n+package org.acme;\n+\n+import io.quarkus.runtime.Quarkus;\n+\n+public class TestApp {\n+    public static void main(String[] args) {\n+        Quarkus.run(args);\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47136",
    "pr_id": 47136,
    "issue_id": 47132,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Qute: New line in expression with tab indentation\n### Describe the bug\n\nFormatting expressions over multiple lines breaks with tab indentation, spaces work fine. \n\nFor a `somePage` with two required properites `data` and `test` the following works fine with spaces but fails with tabs:\n```\n{#include somePage data=\"hello\"\n  test=\"value\" /}\n```\n\nWhen using a tag with additional arguments like the {#form} tag from Renarde, this will not break but render the wrong output.\n\nWith an example tag\n```\n<div {_args.skipIt().asHtmlAttributes}>\n\t<span>Arg: {one}</span>\n</div>\n```\nthe code:\n```\n    {#example one=\"one\"\n    class=\"test\" /}\n```\nproduces different outputs depending on the used indentation (spaces vs tab):\n\nWith spaces:\n```\n<div class=\"test\" one=\"one\">\n\t<span>Arg: one</span>\n</div>\n```\n\nWith tabs:\n```\n<div one=\"one&quot;\n\tclass=&quot;test\">\n\t<span>Arg: one&quot;\n\tclass=&quot;test</span>\n</div>\n```\n\n\n### Expected behavior\n\nThe output should be the same regardless of the indentation method used.\n\n### Actual behavior\n\nIndentation with tabs result in error or produces wrong output. \n\n### How to Reproduce?\n\nReproducer: https://github.com/LukasLeppich/qute-tabs\n\n1. Start with `mvnw quarkus:dev`\n2. Visit http://localhost:8080/spaces\n3. Visit http://localhost:8080/tabs\n\n### Output of `uname -a` or `ver`\n\nWindows 10\n\n### Output of `java -version`\n\nopenjdk version \"21.0.6\" 2025-01-21 LTS OpenJDK Runtime Environment Temurin-21.0.6+7 (build 21.0.6+7-LTS) OpenJDK 64-Bit Server VM Temurin-21.0.6+7 (build 21.0.6+7-LTS, mixed mode, sharing)\n\n### Quarkus version or git rev\n\n3.21.0\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nApache Maven 3.9.9 (8e8579a9e76f7d015ee5ec7bfcdc97d260186937) Maven home: C:\\Users\\lukas.leppich\\.m2\\wrapper\\dists\\apache-maven-3.9.9-bin\\33b4b2b4\\apache-maven-3.9.9         Java version: 21.0.6, vendor: Eclipse Adoptium, runtime: C:\\Program Files\\Eclipse Adoptium\\jdk-21.0.6.7-hotspot Default locale: de_DE, platform encoding: UTF-8 OS name: \"windows 10\", version: \"10.0\", arch: \"amd64\", family: \"windows\"\n\n### Additional information\n\n_No response_",
    "issue_word_count": 327,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "docs/src/main/asciidoc/qute-reference.adoc",
      "independent-projects/qute/core/src/main/java/io/quarkus/qute/Parser.java",
      "independent-projects/qute/core/src/test/java/io/quarkus/qute/UserTagTest.java"
    ],
    "pr_changed_test_files": [
      "independent-projects/qute/core/src/test/java/io/quarkus/qute/UserTagTest.java"
    ],
    "base_commit": "47af98a8ea09eb036d31b8a01ba2652679860c62",
    "head_commit": "1f0e013ff041826ea90db1b51ddb10aeb99396d4",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47136",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47136",
    "dockerfile": "",
    "pr_merged_at": "2025-04-02T16:05:28.000Z",
    "patch": "diff --git a/docs/src/main/asciidoc/qute-reference.adoc b/docs/src/main/asciidoc/qute-reference.adoc\nindex a3515a5e356bc..5cc37d5057a05 100644\n--- a/docs/src/main/asciidoc/qute-reference.adoc\n+++ b/docs/src/main/asciidoc/qute-reference.adoc\n@@ -652,7 +652,7 @@ Some sections support optional end tags, i.e. if the end tag is missing then the\n ==== Parameters\n \n A start tag can define parameters with optional names, e.g. `{#if item.isActive}` and `{#let foo=1 bar=false}`.\n-Parameters are separated by one or more spaces.\n+Parameters are separated by one or more whitespaces.\n Names are separated from the values by the equals sign.\n Names and values can be prefixed and suffixed with any number of spaces, e.g. `{#let id='Foo'}` and `{#let id  = 'Foo'}` are equivalents where the name of the parameter is `id` and the value is `Foo`.\n Values can be grouped using parentheses, e.g. `{#let id=(item.id ?: 42)}` where the name is `id` and the value is `item.id ?: 42`.\n\ndiff --git a/independent-projects/qute/core/src/main/java/io/quarkus/qute/Parser.java b/independent-projects/qute/core/src/main/java/io/quarkus/qute/Parser.java\nindex 6842fd091a86c..498c15ebd1dfd 100644\n--- a/independent-projects/qute/core/src/main/java/io/quarkus/qute/Parser.java\n+++ b/independent-projects/qute/core/src/main/java/io/quarkus/qute/Parser.java\n@@ -821,14 +821,14 @@ static <B extends ErrorInitializer & WithOrigin> Iterator<String> splitSectionPa\n         boolean stringLiteralDouble = false;\n         short composite = 0;\n         byte brackets = 0;\n-        boolean space = false;\n+        boolean whitespace = false;\n         List<String> parts = new ArrayList<>();\n         StringBuilder buffer = new StringBuilder();\n \n         for (int i = 0; i < content.length(); i++) {\n             char c = content.charAt(i);\n-            if (c == ' ') {\n-                if (!space) {\n+            if (Character.isWhitespace(c)) {\n+                if (!whitespace) {\n                     if (!stringLiteralSingle\n                             && !stringLiteralDouble\n                             && composite == 0\n@@ -837,7 +837,7 @@ static <B extends ErrorInitializer & WithOrigin> Iterator<String> splitSectionPa\n                             parts.add(buffer.toString());\n                             buffer = new StringBuilder();\n                         }\n-                        space = true;\n+                        whitespace = true;\n                     } else {\n                         buffer.append(c);\n                     }\n@@ -854,7 +854,7 @@ static <B extends ErrorInitializer & WithOrigin> Iterator<String> splitSectionPa\n                 } else if (!stringLiteralSingle\n                         && !stringLiteralDouble\n                         && isCompositeStart(c)\n-                        && (i == 0 || space || composite > 0\n+                        && (i == 0 || whitespace || composite > 0\n                                 || (buffer.length() > 0 && buffer.charAt(buffer.length() - 1) == '!'))) {\n                     composite++;\n                 } else if (!stringLiteralSingle\n@@ -871,7 +871,7 @@ && isCompositeEnd(c)\n                         && Parser.isRightBracket(c) && brackets > 0) {\n                     brackets--;\n                 }\n-                space = false;\n+                whitespace = false;\n                 buffer.append(c);\n             }\n         }\n",
    "test_patch": "diff --git a/independent-projects/qute/core/src/test/java/io/quarkus/qute/UserTagTest.java b/independent-projects/qute/core/src/test/java/io/quarkus/qute/UserTagTest.java\nindex 821cd3fc39e2a..805f05d0581ed 100644\n--- a/independent-projects/qute/core/src/test/java/io/quarkus/qute/UserTagTest.java\n+++ b/independent-projects/qute/core/src/test/java/io/quarkus/qute/UserTagTest.java\n@@ -243,4 +243,24 @@ public void testSkipIt() {\n         assertEquals(\"foo=\\\"true\\\"\",\n                 engine.parse(\"{#arg foo=true 'foo and bar' /}\").render());\n     }\n+\n+    @Test\n+    public void testArgumentsWhitespace() {\n+        Engine engine = Engine.builder()\n+                .addDefaults()\n+                .addValueResolver(new ReflectionValueResolver())\n+                .addSectionHelper(new UserTagSectionHelper.Factory(\"arg\", \"arg-tag\"))\n+                .addResultMapper(new HtmlEscaper(List.of(\"text/html\")))\n+                .build();\n+        engine.putTemplate(\"arg-tag\", engine.parse(\"{_args.asHtmlAttributes}::{hash}\"));\n+        assertEquals(\"class=\\\"rounded\\\" hash=\\\"ia3andy\\\"::ia3andy\",\n+                engine.parse(\"\"\"\n+                        {#arg hash='ia3andy'  \\n\\t\n+                            class='rounded' /}\n+                        \"\"\").render().trim());\n+        assertEquals(\"class=\\\"rounded\\\" hash=\\\"ia3andy\\\"::ia3andy\",\n+                engine.parse(\"\"\"\n+                        {#arg hash='ia3andy'\\n\\tclass='rounded' /}\n+                        \"\"\").render().trim());\n+    }\n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47127",
    "pr_id": 47127,
    "issue_id": 45216,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Ability to customize gRPC server's fallbackHandlerRegistry\n### Description\n\nI'm looking for a way to set the fallbackHandlerRegistry for a gRPC server created by Quarkus.\n\nNeed it to customize handling of the gRPC calls that the server doesn't implement, in particular:\n* log such calls;\n* attach custom trailers to the UNIMPLEMENTED response.\n\nNormally, I'd use a gRPC server interceptor for both logging and adding trailers. But server interceptors are not called for unimplemented methods.\n\nRelated: https://github.com/quarkusio/quarkus/issues/10039\n\n### Implementation ideas\n\n_No response_",
    "issue_word_count": 87,
    "test_files_count": 3,
    "non_test_files_count": 6,
    "pr_changed_files": [
      "docs/src/main/asciidoc/grpc-service-implementation.adoc",
      "extensions/grpc/deployment/src/main/java/io/quarkus/grpc/deployment/GrpcClientProcessor.java",
      "extensions/grpc/deployment/src/main/java/io/quarkus/grpc/deployment/GrpcDotNames.java",
      "extensions/grpc/runtime/src/main/java/io/quarkus/grpc/api/ServerBuilderCustomizer.java",
      "extensions/grpc/runtime/src/main/java/io/quarkus/grpc/runtime/GrpcServerRecorder.java",
      "extensions/grpc/runtime/src/main/java/io/quarkus/grpc/runtime/supports/Channels.java",
      "integration-tests/grpc-interceptors/src/main/java/io/quarkus/grpc/examples/interceptors/HelloWorldEndpoint.java",
      "integration-tests/grpc-interceptors/src/main/java/io/quarkus/grpc/examples/interceptors/MySBC.java",
      "integration-tests/grpc-interceptors/src/test/java/io/quarkus/grpc/example/interceptors/HelloWorldEndpointTestBase.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/grpc-interceptors/src/main/java/io/quarkus/grpc/examples/interceptors/HelloWorldEndpoint.java",
      "integration-tests/grpc-interceptors/src/main/java/io/quarkus/grpc/examples/interceptors/MySBC.java",
      "integration-tests/grpc-interceptors/src/test/java/io/quarkus/grpc/example/interceptors/HelloWorldEndpointTestBase.java"
    ],
    "base_commit": "ff7b0f6ad49ad6ae264e48fb8a8af00f5a65f3e1",
    "head_commit": "7b5dee43656b9b49b4628fdf697f769443142638",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47127",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47127",
    "dockerfile": "",
    "pr_merged_at": "2025-04-03T06:27:40.000Z",
    "patch": "diff --git a/docs/src/main/asciidoc/grpc-service-implementation.adoc b/docs/src/main/asciidoc/grpc-service-implementation.adoc\nindex 3715e45c0063a..1aaf18c393a19 100644\n--- a/docs/src/main/asciidoc/grpc-service-implementation.adoc\n+++ b/docs/src/main/asciidoc/grpc-service-implementation.adoc\n@@ -254,6 +254,46 @@ quarkus.grpc.server.ssl.trust-store-password=*****\n quarkus.grpc.server.ssl.client-auth=REQUIRED\n ----\n \n+=== Custom server building\n+\n+When Quarkus builds a gRPC server instance, users can apply their own Server(Builder) customizers. The customizers are applied by `priority`, the higher the number the later customizer is applied. The customizers are applied before Quarkus applies user's server configuration; e.g. ideal for some initial defaults.\n+\n+There are two `customize` methods, the first one uses gRPC's `ServerBuilder` as a parameter - to be used with Quarkus' legacy gRPC support, where the other uses `GrpcServerOptions` - to be used with the new Vert.x gRPC support. User should implement the right `customize` method per gRPC support type usage, or both if the customizer is gRPC type neutral.\n+\n+[source, java]\n+----\n+public interface ServerBuilderCustomizer<T extends ServerBuilder<T>> {\n+\n+    /**\n+     * Customize a ServerBuilder instance.\n+     *\n+     * @param config server's configuration\n+     * @param builder Server builder instance\n+     */\n+    default void customize(GrpcServerConfiguration config, T builder) {\n+    }\n+\n+    /**\n+     * Customize a GrpcServerOptions instance.\n+     *\n+     * @param config server's configuration\n+     * @param options GrpcServerOptions instance\n+     */\n+    default void customize(GrpcServerConfiguration config, GrpcServerOptions options) {\n+    }\n+\n+    /**\n+     * Priority by which the customizers are applied.\n+     * Higher priority is applied later.\n+     *\n+     * @return the priority\n+     */\n+    default int priority() {\n+        return 0;\n+    }\n+}\n+----\n+\n == Server Interceptors\n \n gRPC server interceptors let you perform logic, such as authentication, before your service is invoked.\n\ndiff --git a/extensions/grpc/deployment/src/main/java/io/quarkus/grpc/deployment/GrpcClientProcessor.java b/extensions/grpc/deployment/src/main/java/io/quarkus/grpc/deployment/GrpcClientProcessor.java\nindex 056cb1ac5134a..816944b7a0c4d 100644\n--- a/extensions/grpc/deployment/src/main/java/io/quarkus/grpc/deployment/GrpcClientProcessor.java\n+++ b/extensions/grpc/deployment/src/main/java/io/quarkus/grpc/deployment/GrpcClientProcessor.java\n@@ -442,6 +442,11 @@ UnremovableBeanBuildItem unremovableChannelBuilderCustomizers() {\n         return UnremovableBeanBuildItem.beanTypes(GrpcDotNames.CHANNEL_BUILDER_CUSTOMIZER);\n     }\n \n+    @BuildStep\n+    UnremovableBeanBuildItem unremovableServerBuilderCustomizers() {\n+        return UnremovableBeanBuildItem.beanTypes(GrpcDotNames.SERVER_BUILDER_CUSTOMIZER);\n+    }\n+\n     Set<String> getRegisteredInterceptors(InjectionPointInfo injectionPoint) {\n         Set<AnnotationInstance> qualifiers = injectionPoint.getRequiredQualifiers();\n         if (qualifiers.size() <= 1) {\n\ndiff --git a/extensions/grpc/deployment/src/main/java/io/quarkus/grpc/deployment/GrpcDotNames.java b/extensions/grpc/deployment/src/main/java/io/quarkus/grpc/deployment/GrpcDotNames.java\nindex 8f97a287eb594..65e5c0b0af409 100644\n--- a/extensions/grpc/deployment/src/main/java/io/quarkus/grpc/deployment/GrpcDotNames.java\n+++ b/extensions/grpc/deployment/src/main/java/io/quarkus/grpc/deployment/GrpcDotNames.java\n@@ -25,6 +25,7 @@\n import io.quarkus.grpc.RegisterInterceptor;\n import io.quarkus.grpc.RegisterInterceptors;\n import io.quarkus.grpc.api.ChannelBuilderCustomizer;\n+import io.quarkus.grpc.api.ServerBuilderCustomizer;\n import io.quarkus.grpc.runtime.supports.Channels;\n import io.quarkus.grpc.runtime.supports.GrpcClientConfigProvider;\n import io.smallrye.common.annotation.Blocking;\n@@ -60,6 +61,7 @@ public class GrpcDotNames {\n     public static final DotName CLIENT_INTERCEPTOR = DotName.createSimple(ClientInterceptor.class.getName());\n \n     public static final DotName CHANNEL_BUILDER_CUSTOMIZER = DotName.createSimple(ChannelBuilderCustomizer.class.getName());\n+    public static final DotName SERVER_BUILDER_CUSTOMIZER = DotName.createSimple(ServerBuilderCustomizer.class.getName());\n \n     static final MethodDescriptor CREATE_CHANNEL_METHOD = MethodDescriptor.ofMethod(Channels.class, \"createChannel\",\n             Channel.class, String.class, Set.class);\n\ndiff --git a/extensions/grpc/runtime/src/main/java/io/quarkus/grpc/api/ServerBuilderCustomizer.java b/extensions/grpc/runtime/src/main/java/io/quarkus/grpc/api/ServerBuilderCustomizer.java\nnew file mode 100644\nindex 0000000000000..4a1dd6df717ba\n--- /dev/null\n+++ b/extensions/grpc/runtime/src/main/java/io/quarkus/grpc/api/ServerBuilderCustomizer.java\n@@ -0,0 +1,42 @@\n+package io.quarkus.grpc.api;\n+\n+import io.grpc.ServerBuilder;\n+import io.quarkus.grpc.runtime.config.GrpcServerConfiguration;\n+import io.vertx.grpc.server.GrpcServerOptions;\n+\n+/**\n+ * Allow for customization of Server building.\n+ * Implement the customize method, depending on which ServerBuilder implementation you're going to use,\n+ * e.g. Vert.x or Netty.\n+ * This is an experimental API, subject to change.\n+ */\n+public interface ServerBuilderCustomizer<T extends ServerBuilder<T>> {\n+\n+    /**\n+     * Customize a ServerBuilder instance.\n+     *\n+     * @param config server's configuration\n+     * @param builder Server builder instance\n+     */\n+    default void customize(GrpcServerConfiguration config, T builder) {\n+    }\n+\n+    /**\n+     * Customize a GrpcServerOptions instance.\n+     *\n+     * @param config server's configuration\n+     * @param options GrpcServerOptions instance\n+     */\n+    default void customize(GrpcServerConfiguration config, GrpcServerOptions options) {\n+    }\n+\n+    /**\n+     * Priority by which the customizers are applied.\n+     * Higher priority is applied later.\n+     *\n+     * @return the priority\n+     */\n+    default int priority() {\n+        return 0;\n+    }\n+}\n\ndiff --git a/extensions/grpc/runtime/src/main/java/io/quarkus/grpc/runtime/GrpcServerRecorder.java b/extensions/grpc/runtime/src/main/java/io/quarkus/grpc/runtime/GrpcServerRecorder.java\nindex a60e2349cbe87..f4bfa3d7a0247 100644\n--- a/extensions/grpc/runtime/src/main/java/io/quarkus/grpc/runtime/GrpcServerRecorder.java\n+++ b/extensions/grpc/runtime/src/main/java/io/quarkus/grpc/runtime/GrpcServerRecorder.java\n@@ -11,6 +11,7 @@\n import java.util.AbstractMap;\n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.Comparator;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Locale;\n@@ -25,7 +26,9 @@\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.regex.Pattern;\n \n+import jakarta.enterprise.inject.Any;\n import jakarta.enterprise.inject.Instance;\n+import jakarta.enterprise.util.TypeLiteral;\n \n import org.jboss.logging.Logger;\n \n@@ -41,6 +44,7 @@\n import io.quarkus.arc.Arc;\n import io.quarkus.arc.InstanceHandle;\n import io.quarkus.arc.Subclass;\n+import io.quarkus.grpc.api.ServerBuilderCustomizer;\n import io.quarkus.grpc.auth.GrpcSecurityInterceptor;\n import io.quarkus.grpc.reflection.service.ReflectionServiceV1;\n import io.quarkus.grpc.reflection.service.ReflectionServiceV1alpha;\n@@ -173,6 +177,16 @@ private void buildGrpcServer(Vertx vertx, GrpcServerConfiguration configuration,\n             Map<Integer, Handler<RoutingContext>> securityHandlers) {\n \n         GrpcServerOptions options = new GrpcServerOptions();\n+\n+        List<ServerBuilderCustomizer<?>> serverBuilderCustomizers = Arc.container()\n+                .select(new TypeLiteral<ServerBuilderCustomizer<?>>() {\n+                }, Any.Literal.INSTANCE)\n+                .stream()\n+                .sorted(Comparator.<ServerBuilderCustomizer<?>, Integer> comparing(ServerBuilderCustomizer::priority))\n+                .toList();\n+\n+        serverBuilderCustomizers.forEach(sbc -> sbc.customize(configuration, options));\n+\n         if (!configuration.maxInboundMessageSize().isEmpty()) {\n             options.setMaxMessageSize(configuration.maxInboundMessageSize().getAsInt());\n         }\n@@ -556,11 +570,27 @@ private Map.Entry<Integer, Server> buildServer(Vertx vertx, GrpcServerConfigurat\n \n         AtomicBoolean usePlainText = new AtomicBoolean();\n \n-        ServerBuilder builder;\n+        ServerBuilder<?> builder;\n         if (provider != null) {\n             builder = provider.createServerBuilder(vertx, configuration, launchMode);\n         } else {\n-            VertxServerBuilder vsBuilder = VertxServerBuilder.forAddress(vertx, configuration.host(), port);\n+            builder = VertxServerBuilder.forAddress(vertx, configuration.host(), port);\n+        }\n+\n+        List<ServerBuilderCustomizer<? extends ServerBuilder<?>>> serverBuilderCustomizers = Arc.container()\n+                .select(new TypeLiteral<ServerBuilderCustomizer<?>>() {\n+                }, Any.Literal.INSTANCE)\n+                .stream()\n+                .sorted(Comparator.<ServerBuilderCustomizer<?>, Integer> comparing(ServerBuilderCustomizer::priority))\n+                .toList();\n+\n+        for (ServerBuilderCustomizer scb : serverBuilderCustomizers) {\n+            scb.customize(configuration, builder);\n+        }\n+\n+        // moved here - after ctor call, so it's applied after customizers\n+        if (provider == null) {\n+            VertxServerBuilder vsBuilder = (VertxServerBuilder) builder;\n             // add Vert.x specific stuff here\n             vsBuilder.useSsl(options -> {\n                 try {\n@@ -576,7 +606,6 @@ private Map.Entry<Integer, Server> buildServer(Vertx vertx, GrpcServerConfigurat\n                         false)\n                         .onComplete(result -> devModeWrapper.run(command)));\n             }\n-            builder = vsBuilder;\n         }\n \n         if (configuration.maxInboundMessageSize().isPresent()) {\n\ndiff --git a/extensions/grpc/runtime/src/main/java/io/quarkus/grpc/runtime/supports/Channels.java b/extensions/grpc/runtime/src/main/java/io/quarkus/grpc/runtime/supports/Channels.java\nindex 15332f3796a9e..a7a1e4e0f8a96 100644\n--- a/extensions/grpc/runtime/src/main/java/io/quarkus/grpc/runtime/supports/Channels.java\n+++ b/extensions/grpc/runtime/src/main/java/io/quarkus/grpc/runtime/supports/Channels.java\n@@ -17,6 +17,7 @@\n import java.util.ArrayList;\n import java.util.Comparator;\n import java.util.HashSet;\n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n@@ -202,10 +203,12 @@ public static Channel createChannel(String name, Set<String> perClientIntercepto\n                 builder = NettyChannelBuilder.forTarget(target);\n             }\n \n+            Map<String, Object> configMap = new LinkedHashMap<>();\n             for (ChannelBuilderCustomizer customizer : channelBuilderCustomizers) {\n                 Map<String, Object> map = customizer.customize(name, config, builder);\n-                builder.defaultServiceConfig(map);\n+                configMap.putAll(map);\n             }\n+            builder.defaultServiceConfig(configMap);\n \n             if (config.useVertxEventLoop() && builder instanceof NettyChannelBuilder) {\n                 NettyChannelBuilder ncBuilder = (NettyChannelBuilder) builder;\n",
    "test_patch": "diff --git a/integration-tests/grpc-interceptors/src/main/java/io/quarkus/grpc/examples/interceptors/HelloWorldEndpoint.java b/integration-tests/grpc-interceptors/src/main/java/io/quarkus/grpc/examples/interceptors/HelloWorldEndpoint.java\nindex 40dc8f083d9ea..981345d976a90 100644\n--- a/integration-tests/grpc-interceptors/src/main/java/io/quarkus/grpc/examples/interceptors/HelloWorldEndpoint.java\n+++ b/integration-tests/grpc-interceptors/src/main/java/io/quarkus/grpc/examples/interceptors/HelloWorldEndpoint.java\n@@ -32,7 +32,8 @@ public Response helloBlocking(@PathParam(\"name\") String name) {\n \n         return Response.ok(helloReply.getMessage())\n                 .header(\"interceptors\", String.join(\",\", invoked))\n-                .header(\"used\", MyCBC.USED.get() + \"\")\n+                .header(\"used_cbc\", MyCBC.USED.get() + \"\")\n+                .header(\"used_sbc\", MySBC.USED.get() + \"\")\n                 .build();\n     }\n \n\ndiff --git a/integration-tests/grpc-interceptors/src/main/java/io/quarkus/grpc/examples/interceptors/MySBC.java b/integration-tests/grpc-interceptors/src/main/java/io/quarkus/grpc/examples/interceptors/MySBC.java\nnew file mode 100644\nindex 0000000000000..cfeb2917e5703\n--- /dev/null\n+++ b/integration-tests/grpc-interceptors/src/main/java/io/quarkus/grpc/examples/interceptors/MySBC.java\n@@ -0,0 +1,25 @@\n+package io.quarkus.grpc.examples.interceptors;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import jakarta.enterprise.context.ApplicationScoped;\n+\n+import io.quarkus.grpc.api.ServerBuilderCustomizer;\n+import io.quarkus.grpc.runtime.config.GrpcServerConfiguration;\n+import io.vertx.grpc.VertxServerBuilder;\n+import io.vertx.grpc.server.GrpcServerOptions;\n+\n+@ApplicationScoped\n+public class MySBC implements ServerBuilderCustomizer<VertxServerBuilder> {\n+    public static final AtomicBoolean USED = new AtomicBoolean(false);\n+\n+    @Override\n+    public void customize(GrpcServerConfiguration config, VertxServerBuilder builder) {\n+        USED.set(true);\n+    }\n+\n+    @Override\n+    public void customize(GrpcServerConfiguration config, GrpcServerOptions options) {\n+        USED.set(true);\n+    }\n+}\n\ndiff --git a/integration-tests/grpc-interceptors/src/test/java/io/quarkus/grpc/example/interceptors/HelloWorldEndpointTestBase.java b/integration-tests/grpc-interceptors/src/test/java/io/quarkus/grpc/example/interceptors/HelloWorldEndpointTestBase.java\nindex c3b480ecd75b0..71b3a726cca09 100644\n--- a/integration-tests/grpc-interceptors/src/test/java/io/quarkus/grpc/example/interceptors/HelloWorldEndpointTestBase.java\n+++ b/integration-tests/grpc-interceptors/src/test/java/io/quarkus/grpc/example/interceptors/HelloWorldEndpointTestBase.java\n@@ -27,7 +27,10 @@ public void testHelloWorldServiceUsingBlockingStub() {\n \n         ensureThatMetricsAreProduced();\n \n-        String used = response.getHeader(\"used\");\n+        String used = response.getHeader(\"used_cbc\");\n+        assertThat(Boolean.parseBoolean(used)).isTrue();\n+\n+        used = response.getHeader(\"used_sbc\");\n         assertThat(Boolean.parseBoolean(used)).isTrue();\n     }\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47118",
    "pr_id": 47118,
    "issue_id": 47117,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Disable automatic recovery for XA capable DataSources\n### Description\n\nWhen XA recovery is enabled then by default all XA capable datasources are registered with the transaction recovery system. The recent Agroal upgrade to version 2.6 (see Issue #47067 ) adds support for a config property to selectively disable adding such XA datasources for recovery and this proposal is to add a similar config property to the datasources extension config which will enable this feature. The javadoc for the property will be:\n\n     * Whether to enable recover for this datasource.\n     * <p>\n     * Normally a transaction manager will call xa_recover () on an XA connection during recovery to obtain\n     * a list of transaction branches that are currently in a prepared or heuristically completed state.\n     * However, it can happen that multiple XA connections connect to the same database which would all\n     * return the same set of branches and for reasons of improved performance only one should be used\n     * for recover() calls. The default value for this configuration property is true because when there\n     * is only one connection it is vital for data consistency that the connection is able to report its list of\n     * prepared or heuristically completed branches.\n\n### Implementation ideas\n\n_No response_",
    "issue_word_count": 195,
    "test_files_count": 2,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "docs/src/main/asciidoc/datasource.adoc",
      "extensions/agroal/deployment/src/test/java/io/quarkus/agroal/test/XaDataSourceConfigTest.java",
      "extensions/agroal/deployment/src/test/resources/application-recovery-datasources.properties",
      "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceJdbcRuntimeConfig.java",
      "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSources.java"
    ],
    "pr_changed_test_files": [
      "extensions/agroal/deployment/src/test/java/io/quarkus/agroal/test/XaDataSourceConfigTest.java",
      "extensions/agroal/deployment/src/test/resources/application-recovery-datasources.properties"
    ],
    "base_commit": "5fc29738188597bcf221099f0b34711f4d556d48",
    "head_commit": "b89838c5513c8865c36911827aef03067e11971d",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47118",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47118",
    "dockerfile": "",
    "pr_merged_at": "2025-04-10T15:00:03.000Z",
    "patch": "diff --git a/docs/src/main/asciidoc/datasource.adoc b/docs/src/main/asciidoc/datasource.adoc\nindex 2d653f36cac7f..9416390388269 100644\n--- a/docs/src/main/asciidoc/datasource.adoc\n+++ b/docs/src/main/asciidoc/datasource.adoc\n@@ -680,6 +680,8 @@ You can override this by setting the `transactions` configuration property:\n * `quarkus.datasource.jdbc.transactions` for default unnamed datasource\n * `quarkus.datasource._<datasource-name>_.jdbc.transactions` for named datasource\n \n+When a datasource is enabled for XA (by setting `quarkus.datasource[.optional name].jdbc.transactions to xa)` and the transaction recovery system is enabled (by setting the property `quarkus.transaction-manager.enable-recovery` to true) then the datasource is automatically registered for recovery. This is a safe default, but you can override this behaviour on a per-datasource basis by setting `quarkus.datasource.jdbc.enable-recovery`/`quarkus.datasource.\"datasource-name\".jdbc.enable-recovery` to `false`. Only use this for advanced use cases and if you know recovery will not be necessary, otherwise it may result in data loss and/or data unavailability because resources may become locked indefinitely.\n+\n For more information, see the <<configuration-reference,Configuration reference>> section below.\n \n To facilitate the storage of transaction logs in a database by using JDBC, see xref:transaction.adoc#jdbcstore[Configuring transaction logs to be stored in a datasource] section of the xref:transaction.adoc[Using transactions in Quarkus] guide.\n\ndiff --git a/extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceJdbcRuntimeConfig.java b/extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceJdbcRuntimeConfig.java\nindex 743db149b0797..922157a8c47e1 100644\n--- a/extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceJdbcRuntimeConfig.java\n+++ b/extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceJdbcRuntimeConfig.java\n@@ -133,6 +133,20 @@ public interface DataSourceJdbcRuntimeConfig {\n     @WithDefault(\"true\")\n     boolean poolingEnabled();\n \n+    /**\n+     * Whether to enable recovery for this datasource.\n+     * <p>\n+     * Normally a transaction manager will call xa_recover () on an XA connection during recovery to obtain\n+     * a list of transaction branches that are currently in a prepared or heuristically completed state.\n+     * However, it can happen that multiple XA connections connect to the same datasource which would all\n+     * return the same set of branches and for reasons of improved performance only one should be used\n+     * for recover() calls. The default value for this configuration property is true because when there\n+     * is only one connection it is vital for data consistency that the connection is able to report its\n+     * list of prepared or heuristically completed branches.\n+     */\n+    @WithDefault(\"true\")\n+    boolean enableRecovery();\n+\n     /**\n      * Require an active transaction when acquiring a connection. Recommended for production.\n      * WARNING: Some extensions acquire connections without holding a transaction for things like schema updates and schema\n\ndiff --git a/extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSources.java b/extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSources.java\nindex 5b60fadd9f597..3d8ffbbde6dbe 100644\n--- a/extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSources.java\n+++ b/extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSources.java\n@@ -348,6 +348,7 @@ public boolean isValid(Connection connection) {\n         }\n         poolConfiguration.enhancedLeakReport(dataSourceJdbcRuntimeConfig.extendedLeakReport());\n         poolConfiguration.flushOnClose(dataSourceJdbcRuntimeConfig.flushOnClose());\n+        poolConfiguration.recoveryEnable(dataSourceJdbcRuntimeConfig.enableRecovery());\n     }\n \n }\n",
    "test_patch": "diff --git a/extensions/agroal/deployment/src/test/java/io/quarkus/agroal/test/XaDataSourceConfigTest.java b/extensions/agroal/deployment/src/test/java/io/quarkus/agroal/test/XaDataSourceConfigTest.java\nnew file mode 100644\nindex 0000000000000..30150b345c3ca\n--- /dev/null\n+++ b/extensions/agroal/deployment/src/test/java/io/quarkus/agroal/test/XaDataSourceConfigTest.java\n@@ -0,0 +1,69 @@\n+package io.quarkus.agroal.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertInstanceOf;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.sql.SQLException;\n+\n+import jakarta.enterprise.context.control.ActivateRequestContext;\n+import jakarta.inject.Inject;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.agroal.api.AgroalDataSource;\n+import io.agroal.api.configuration.AgroalConnectionPoolConfiguration;\n+import io.agroal.narayana.NarayanaTransactionIntegration;\n+import io.quarkus.agroal.DataSource;\n+import io.quarkus.narayana.jta.QuarkusTransaction;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class XaDataSourceConfigTest {\n+\n+    //tag::injection[]\n+    @Inject\n+    @DataSource(\"xa\")\n+    AgroalDataSource xaRecoverDS;\n+\n+    @Inject\n+    @DataSource(\"xaNoRecover\")\n+    AgroalDataSource xaNoRecoverDS;\n+    //end::injection[]\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .withConfigurationResource(\"application-recovery-datasources.properties\");\n+\n+    @Test\n+    @ActivateRequestContext\n+    public void testEnlistDatasourcesWithRecovery() throws SQLException {\n+        AgroalConnectionPoolConfiguration xaRecoverConfig = xaRecoverDS.getConfiguration().connectionPoolConfiguration();\n+        AgroalConnectionPoolConfiguration xaNoRecoverConfig = xaNoRecoverDS.getConfiguration().connectionPoolConfiguration();\n+\n+        assertTrue(xaRecoverConfig.recoveryEnable(), \"xaRecoverDS datasource should have recover enabled\");\n+        assertFalse(xaNoRecoverConfig.recoveryEnable(), \"xaNoRecoverDS datasource should not have recover enabled\");\n+\n+        assertInstanceOf(NarayanaTransactionIntegration.class, xaRecoverConfig.transactionIntegration(),\n+                \"Agroal transaction integration should use Narayana for xaRecoverDS\");\n+        assertInstanceOf(NarayanaTransactionIntegration.class, xaNoRecoverConfig.transactionIntegration(),\n+                \"Agroal transaction integration should use Narayana for xaNoRecoverDS\");\n+\n+        // run a transaction and use the two datasources, ensuring that it commits ok\n+        QuarkusTransaction.begin();\n+\n+        // Remark: the two datasources will have been registered with the transaction recovery system because the config\n+        // includes quarkus.transaction-manager.enable-recovery=true\n+        // see QuarkusRecoveryService for details of how the recovery service manages connections to datasources\n+        try (var conn = xaRecoverDS.getConnection()) {\n+            assertFalse(conn.getAutoCommit(), \"XA connection should not have the auto commit flag set\");\n+            try (var conn2 = xaNoRecoverDS.getConnection()) {\n+                assertFalse(conn2.getAutoCommit(), \"XA connection should not have the auto commit flag set\");\n+            }\n+        }\n+\n+        assertTrue(QuarkusTransaction.isActive(), \"transaction should still have been active\");\n+\n+        QuarkusTransaction.commit();\n+    }\n+}\n\ndiff --git a/extensions/agroal/deployment/src/test/resources/application-recovery-datasources.properties b/extensions/agroal/deployment/src/test/resources/application-recovery-datasources.properties\nnew file mode 100644\nindex 0000000000000..463f21dfbc234\n--- /dev/null\n+++ b/extensions/agroal/deployment/src/test/resources/application-recovery-datasources.properties\n@@ -0,0 +1,15 @@\n+quarkus.transaction-manager.enable-recovery=true\n+\n+quarkus.datasource.xa.db-kind=h2\n+quarkus.datasource.xa.username=username1\n+quarkus.datasource.xa.jdbc.driver=org.h2.jdbcx.JdbcDataSource\n+quarkus.datasource.xa.jdbc.url=jdbc:h2:tcp://localhost/mem:recover\n+quarkus.datasource.xa.jdbc.enable-recovery=true\n+quarkus.datasource.xa.jdbc.transactions=xa\n+\n+quarkus.datasource.xaNoRecover.db-kind=h2\n+quarkus.datasource.xaNoRecover.username=username1\n+quarkus.datasource.xaNoRecover.jdbc.driver=org.h2.jdbcx.JdbcDataSource\n+quarkus.datasource.xaNoRecover.jdbc.url=jdbc:h2:tcp://localhost/mem:recover\n+quarkus.datasource.xaNoRecover.jdbc.enable-recovery=false\n+quarkus.datasource.xaNoRecover.jdbc.transactions=xa\n\\ No newline at end of file\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47108",
    "pr_id": 47108,
    "issue_id": 39634,
    "repo": "quarkusio/quarkus",
    "problem_statement": "[JDK 23+15] org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslClientCallbackHandler.handleCallback fails with UnsupportedOperationException\n### Describe the bug\r\n\r\nIn our Mandrel native integration tests we see new failures since the JDK `23+15` ea build in `quarkus-integration-test-kafka-oauth-keycloak-999-SNAPSHOT-runner` tests:\r\n\r\n```\r\n2024-03-22 02:18:58,664 WARN  [org.apa.kaf.com.net.Selector] (kafka-producer-network-thread | kafka-producer-out) [Producer clientId=kafka-producer-out] Unexpected error from localhost/127.0.0.1 (channelId=-1); closing connection: java.lang.UnsupportedOperationException: getSubject is supported only if a security manager is allowed\r\n\tat java.base@23-beta/javax.security.auth.Subject.getSubject(Subject.java:347)\r\n\tat org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslClientCallbackHandler.handleCallback(OAuthBearerSaslClientCallbackHandler.java:99)\r\n\tat org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslClientCallbackHandler.handle(OAuthBearerSaslClientCallbackHandler.java:83)\r\n\tat org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslClient.evaluateChallenge(OAuthBearerSaslClient.java:92)\r\n\tat org.apache.kafka.common.security.authenticator.SaslClientAuthenticator.lambda$createSaslToken$1(SaslClientAuthenticator.java:535)\r\n\tat java.base@23-beta/jdk.internal.vm.ScopedValueContainer.callWithoutScope(ScopedValueContainer.java:162)\r\n\tat java.base@23-beta/jdk.internal.vm.ScopedValueContainer.call(ScopedValueContainer.java:147)\r\n\tat java.base@23-beta/java.lang.ScopedValue$Carrier.runWith(ScopedValue.java:74)\r\n\tat java.base@23-beta/java.lang.ScopedValue$Carrier.call(ScopedValue.java:419)\r\n\tat java.base@23-beta/java.lang.ScopedValue.callWhere(ScopedValue.java:588)\r\n\tat java.base@23-beta/javax.security.auth.Subject.callAs(Subject.java:439)\r\n\tat java.base@23-beta/javax.security.auth.Subject.doAs(Subject.java:614)\r\n\tat org.apache.kafka.common.security.authenticator.SaslClientAuthenticator.createSaslToken(SaslClientAuthenticator.java:535)\r\n\tat org.apache.kafka.common.security.authenticator.SaslClientAuthenticator.sendSaslClientToken(SaslClientAuthenticator.java:434)\r\n\tat org.apache.kafka.common.security.authenticator.SaslClientAuthenticator.sendInitialToken(SaslClientAuthenticator.java:333)\r\n\tat org.apache.kafka.common.security.authenticator.SaslClientAuthenticator.authenticate(SaslClientAuthenticator.java:274)\r\n\tat org.apache.kafka.common.network.KafkaChannel.prepare(KafkaChannel.java:181)\r\n\tat org.apache.kafka.common.network.Selector.pollSelectionKeys(Selector.java:543)\r\n\tat org.apache.kafka.common.network.Selector.poll(Selector.java:481)\r\n\tat org.apache.kafka.clients.NetworkClient.poll(NetworkClient.java:585)\r\n\tat org.apache.kafka.clients.producer.internals.Sender.runOnce(Sender.java:349)\r\n\tat org.apache.kafka.clients.producer.internals.Sender.run(Sender.java:252)\r\n\tat java.base@23-beta/java.lang.Thread.runWith(Thread.java:1588)\r\n\tat java.base@23-beta/java.lang.Thread.run(Thread.java:1575)\r\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.core.thread.PlatformThreads.threadStartRoutine(PlatformThreads.java:836)\r\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.core.thread.PlatformThreads.threadStartRoutine(PlatformThreads.java:812)\r\n```\r\n\r\nSee: https://github.com/graalvm/mandrel/actions/runs/8384081617/job/22961614228#step:12:968\r\n\r\nI'm pretty sure, though, this isn't a native-only issue but can happen in JVM mode on `JDK 23+15` as well.\r\n\r\n### Expected behavior\r\n\r\nNo `java.lang.UnsupportedOperationException: getSubject is supported only if a security manager is allowed` is being thrown.\r\n\r\n### Actual behavior\r\n\r\n`java.lang.UnsupportedOperationException` is being thrown.\r\n\r\n### How to Reproduce?\r\n\r\nBuild `Integration Tests - Kafka OAUTH with Keycloak` native test and run test with a `23-beta+15-ea, vendor version: Mandrel-24.1.0-dev13054560` mandrel build. For example from [here](https://github.com/graalvm/mandrel/actions/runs/8384081617/artifacts/1348828245).\r\n\r\n### Additional information\r\n\r\nThis seems to be caused by https://bugs.openjdk.org/browse/JDK-8296244 freshly part of `JDK 23+15`. See the CSR on how to possibly fix it: https://bugs.openjdk.org/browse/JDK-8327134",
    "issue_word_count": 568,
    "test_files_count": 3,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "bom/application/pom.xml",
      "extensions/kafka-client/deployment/src/main/java/io/quarkus/kafka/client/deployment/KafkaProcessor.java",
      "extensions/kafka-client/runtime/src/main/java/io/quarkus/kafka/client/runtime/graal/Crc32CSubstitutions.java",
      "integration-tests/compose-devservices/src/main/java/io/quarkus/it/compose/devservices/kafka/KafkaAdminManager.java",
      "integration-tests/kafka-devservices/src/main/java/io/quarkus/it/kafka/KafkaAdminManager.java",
      "integration-tests/kafka-oauth-keycloak/pom.xml"
    ],
    "pr_changed_test_files": [
      "integration-tests/compose-devservices/src/main/java/io/quarkus/it/compose/devservices/kafka/KafkaAdminManager.java",
      "integration-tests/kafka-devservices/src/main/java/io/quarkus/it/kafka/KafkaAdminManager.java",
      "integration-tests/kafka-oauth-keycloak/pom.xml"
    ],
    "base_commit": "b4fc932b2f231a3668dbb6f1568c5dec0139a29c",
    "head_commit": "f5687095980402eeccb2cf0435ccb155ae6bfec7",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47108",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47108",
    "dockerfile": "",
    "pr_merged_at": "2025-05-29T08:49:03.000Z",
    "patch": "diff --git a/bom/application/pom.xml b/bom/application/pom.xml\nindex 4f3d4daa121d7..bf666c304c855 100644\n--- a/bom/application/pom.xml\n+++ b/bom/application/pom.xml\n@@ -139,7 +139,7 @@\n         <jboss-logging.version>3.6.1.Final</jboss-logging.version>\n         <mutiny.version>2.9.0</mutiny.version>\n         <jctools-core.version>4.0.5</jctools-core.version>\n-        <kafka3.version>3.9.0</kafka3.version>\n+        <kafka3.version>4.0.0</kafka3.version>\n         <lz4.version>1.8.0</lz4.version> <!-- dependency of the kafka-clients that could be overridden by other imported BOMs in the platform -->\n         <snappy.version>1.1.10.5</snappy.version>\n         <strimzi-test-container.version>0.109.1</strimzi-test-container.version>\n\ndiff --git a/extensions/kafka-client/deployment/src/main/java/io/quarkus/kafka/client/deployment/KafkaProcessor.java b/extensions/kafka-client/deployment/src/main/java/io/quarkus/kafka/client/deployment/KafkaProcessor.java\nindex 8f5719ed50a33..c7f9db9df5661 100644\n--- a/extensions/kafka-client/deployment/src/main/java/io/quarkus/kafka/client/deployment/KafkaProcessor.java\n+++ b/extensions/kafka-client/deployment/src/main/java/io/quarkus/kafka/client/deployment/KafkaProcessor.java\n@@ -20,7 +20,7 @@\n import org.apache.kafka.clients.consumer.StickyAssignor;\n import org.apache.kafka.clients.producer.Partitioner;\n import org.apache.kafka.clients.producer.ProducerInterceptor;\n-import org.apache.kafka.clients.producer.internals.DefaultPartitioner;\n+import org.apache.kafka.common.metrics.MetricsReporter;\n import org.apache.kafka.common.security.auth.AuthenticateCallbackHandler;\n import org.apache.kafka.common.security.auth.SecurityProtocol;\n import org.apache.kafka.common.security.authenticator.AbstractLogin;\n@@ -249,6 +249,7 @@ public void build(\n         collectImplementors(toRegister, indexBuildItem, ConsumerPartitionAssignor.class);\n         collectImplementors(toRegister, indexBuildItem, ConsumerInterceptor.class);\n         collectImplementors(toRegister, indexBuildItem, ProducerInterceptor.class);\n+        collectImplementors(toRegister, indexBuildItem, MetricsReporter.class);\n \n         reflectiveClass.produce(ReflectiveClassBuildItem.builder(OAuthBearerSaslClient.class,\n                 OAuthBearerSaslClient.OAuthBearerSaslClientFactory.class,\n@@ -295,7 +296,6 @@ public void build(\n \n         // built in partitioner and partition assignors\n         reflectiveClass.produce(ReflectiveClassBuildItem.builder(\n-                DefaultPartitioner.class,\n                 RangeAssignor.class,\n                 RoundRobinAssignor.class,\n                 StickyAssignor.class)\n\ndiff --git a/extensions/kafka-client/runtime/src/main/java/io/quarkus/kafka/client/runtime/graal/Crc32CSubstitutions.java b/extensions/kafka-client/runtime/src/main/java/io/quarkus/kafka/client/runtime/graal/Crc32CSubstitutions.java\ndeleted file mode 100644\nindex af99ccbbf3235..0000000000000\n--- a/extensions/kafka-client/runtime/src/main/java/io/quarkus/kafka/client/runtime/graal/Crc32CSubstitutions.java\n+++ /dev/null\n@@ -1,34 +0,0 @@\n-package io.quarkus.kafka.client.runtime.graal;\n-\n-import java.lang.invoke.MethodHandle;\n-import java.util.zip.Checksum;\n-\n-import org.apache.kafka.common.utils.Crc32C;\n-\n-import com.oracle.svm.core.annotate.Alias;\n-import com.oracle.svm.core.annotate.RecomputeFieldValue;\n-import com.oracle.svm.core.annotate.RecomputeFieldValue.Kind;\n-import com.oracle.svm.core.annotate.Substitute;\n-import com.oracle.svm.core.annotate.TargetClass;\n-\n-/**\n- * The following substitution replaces the usage of {@code MethodHandle} in {@code Java9ChecksumFactory} with a plain\n- * constructor invocation when run under GraalVM. This is necessary because the native image generator does not support method\n- * handles.\n- */\n-@TargetClass(value = Crc32C.class, innerClass = \"Java9ChecksumFactory\")\n-final class Target_org_apache_kafka_common_utils_Crc32C_Java9ChecksumFactory {\n-\n-    @Alias\n-    @RecomputeFieldValue(kind = Kind.Reset)\n-    private static MethodHandle CONSTRUCTOR;\n-\n-    @Substitute\n-    public Checksum create() {\n-        try {\n-            return (Checksum) Class.forName(\"java.util.zip.CRC32C\").getConstructor().newInstance();\n-        } catch (ReflectiveOperationException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-}\n",
    "test_patch": "diff --git a/integration-tests/compose-devservices/src/main/java/io/quarkus/it/compose/devservices/kafka/KafkaAdminManager.java b/integration-tests/compose-devservices/src/main/java/io/quarkus/it/compose/devservices/kafka/KafkaAdminManager.java\nindex 338e848fc2d2b..4a51af9154341 100644\n--- a/integration-tests/compose-devservices/src/main/java/io/quarkus/it/compose/devservices/kafka/KafkaAdminManager.java\n+++ b/integration-tests/compose-devservices/src/main/java/io/quarkus/it/compose/devservices/kafka/KafkaAdminManager.java\n@@ -57,8 +57,8 @@ public void createTopic(String topic, int partitions) {\n     public int partitions(String topic) {\n         TopicDescription topicDescription;\n         try {\n-            Map<String, TopicDescription> partitions = admin.describeTopics(Collections.singletonList(topic)).all()\n-                    .get(2000, TimeUnit.MILLISECONDS);\n+            Map<String, TopicDescription> partitions = admin.describeTopics(Collections.singletonList(topic))\n+                    .allTopicNames().get(2000, TimeUnit.MILLISECONDS);\n             topicDescription = partitions.get(topic);\n         } catch (InterruptedException | ExecutionException | TimeoutException e) {\n             throw new RuntimeException(e);\n\ndiff --git a/integration-tests/kafka-devservices/src/main/java/io/quarkus/it/kafka/KafkaAdminManager.java b/integration-tests/kafka-devservices/src/main/java/io/quarkus/it/kafka/KafkaAdminManager.java\nindex 4646a438c80b9..5b02b128bd3c1 100644\n--- a/integration-tests/kafka-devservices/src/main/java/io/quarkus/it/kafka/KafkaAdminManager.java\n+++ b/integration-tests/kafka-devservices/src/main/java/io/quarkus/it/kafka/KafkaAdminManager.java\n@@ -43,8 +43,8 @@ void cleanup() {\n     public int partitions(String topic) {\n         TopicDescription topicDescription;\n         try {\n-            Map<String, TopicDescription> partitions = admin.describeTopics(Collections.singletonList(topic)).all()\n-                    .get(2000, TimeUnit.MILLISECONDS);\n+            Map<String, TopicDescription> partitions = admin.describeTopics(Collections.singletonList(topic))\n+                    .allTopicNames().get(2000, TimeUnit.MILLISECONDS);\n             topicDescription = partitions.get(topic);\n         } catch (InterruptedException | ExecutionException | TimeoutException e) {\n             throw new RuntimeException(e);\n\ndiff --git a/integration-tests/kafka-oauth-keycloak/pom.xml b/integration-tests/kafka-oauth-keycloak/pom.xml\nindex 31a2a1ce3161c..43f19d3917acf 100644\n--- a/integration-tests/kafka-oauth-keycloak/pom.xml\n+++ b/integration-tests/kafka-oauth-keycloak/pom.xml\n@@ -177,7 +177,6 @@\n                         <artifactId>maven-surefire-plugin</artifactId>\n                         <configuration>\n                             <skip>false</skip>\n-                            <argLine>-Djava.security.manager=allow</argLine>\n                             <systemPropertyVariables>\n                                 <!-- Configure the app to test to resolve \"keycloak\" hostname to the Docker hostname -->\n                                 <keycloak.docker.image>${keycloak.docker.image}</keycloak.docker.image>\n@@ -189,7 +188,6 @@\n                         <artifactId>maven-failsafe-plugin</artifactId>\n                         <configuration>\n                             <skip>false</skip>\n-                            <argLine>-Djava.security.manager=allow</argLine>\n                             <systemPropertyVariables>\n                                 <keycloak.docker.image>${keycloak.docker.image}</keycloak.docker.image>\n                                 <keycloak.realm.json>${project.basedir}/src/test/resources/keycloak/realms/kafka-authz-realm.json</keycloak.realm.json>\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47100",
    "pr_id": 47100,
    "issue_id": 47092,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Qute: str:builder appends string multiple times\n### Describe the bug\n\nI use the following example `{str:builder('Qute').append(\"is\").append(\"cool!\")}` and it renders as `Quteisisiscool!cool!cool!`\n\nAlso the `{str:concat(\"Hello \",\"!\")}` renders as `Hello !` (correctly) but the `{str:concat(\"Hello '\",\"!\")}` as `Hello '\",\"!`.\n\nI think this is a problem in all `str` functions, or in general where Strings are used and apostrophe ' is included. (I think it happens in eval too.)\n\nI use Quarkus `3.21.0`\n\n### Expected behavior\n\n_No response_\n\n### Actual behavior\n\n_No response_\n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### Mandrel or GraalVM version (if different from Java)\n\n_No response_\n\n### Quarkus version or git rev\n\n_No response_\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
    "issue_word_count": 139,
    "test_files_count": 3,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/TypeInfos.java",
      "extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/extensions/StringTemplateExtensionsTest.java",
      "independent-projects/qute/core/src/main/java/io/quarkus/qute/Expressions.java",
      "independent-projects/qute/core/src/test/java/io/quarkus/qute/ParserTest.java",
      "independent-projects/qute/generator/src/main/java/io/quarkus/qute/generator/ValueResolverGenerator.java",
      "independent-projects/qute/generator/src/test/java/io/quarkus/qute/generator/SimpleGeneratorTest.java"
    ],
    "pr_changed_test_files": [
      "extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/extensions/StringTemplateExtensionsTest.java",
      "independent-projects/qute/core/src/test/java/io/quarkus/qute/ParserTest.java",
      "independent-projects/qute/generator/src/test/java/io/quarkus/qute/generator/SimpleGeneratorTest.java"
    ],
    "base_commit": "059bca02ea401a1cd6cee26ec241ebaf07964343",
    "head_commit": "2e50b88ee03ab34e27209d8ea18522e715232846",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47100",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47100",
    "dockerfile": "",
    "pr_merged_at": "2025-04-01T19:47:38.000Z",
    "patch": "diff --git a/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/TypeInfos.java b/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/TypeInfos.java\nindex fbc0ec54a7400..c37726dc6de6d 100644\n--- a/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/TypeInfos.java\n+++ b/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/TypeInfos.java\n@@ -221,8 +221,13 @@ public boolean isInfixNotationSupported() {\n         }\n \n         @Override\n-        public boolean isLiteralSeparator(char candidate) {\n-            return candidate == '<' || candidate == '>';\n+        public boolean isLiteralSeparatorStart(char candidate) {\n+            return candidate == '<';\n+        }\n+\n+        @Override\n+        public boolean isLiteralSeparatorEnd(char startSeparator, char candidate) {\n+            return candidate == '>';\n         }\n \n     };\n\ndiff --git a/independent-projects/qute/core/src/main/java/io/quarkus/qute/Expressions.java b/independent-projects/qute/core/src/main/java/io/quarkus/qute/Expressions.java\nindex 0c3d8bd9eb5d1..cb332d9f4942f 100644\n--- a/independent-projects/qute/core/src/main/java/io/quarkus/qute/Expressions.java\n+++ b/independent-projects/qute/core/src/main/java/io/quarkus/qute/Expressions.java\n@@ -72,7 +72,7 @@ public static List<String> splitParts(String value, SplitConfig splitConfig) {\n         if (value == null || value.isEmpty()) {\n             return Collections.emptyList();\n         }\n-        boolean literal = false;\n+        char literal = 0;\n         char separator = 0;\n         byte infix = 0;\n         byte brackets = 0;\n@@ -83,7 +83,7 @@ public static List<String> splitParts(String value, SplitConfig splitConfig) {\n             if (splitConfig.isSeparator(c)) {\n                 // Adjacent separators may be ignored\n                 if (separator == 0 || separator != c) {\n-                    if (!literal && brackets == 0 && infix == 0) {\n+                    if (literal == 0 && brackets == 0 && infix == 0) {\n                         if (splitConfig.shouldPrependSeparator(c)) {\n                             buffer.append(c);\n                         }\n@@ -99,11 +99,15 @@ public static List<String> splitParts(String value, SplitConfig splitConfig) {\n                     }\n                 }\n             } else {\n-                if (splitConfig.isLiteralSeparator(c)) {\n-                    literal = !literal;\n+                if (literal == 0\n+                        && splitConfig.isLiteralSeparatorStart(c)) {\n+                    literal = c;\n+                } else if (literal != 0\n+                        && splitConfig.isLiteralSeparatorEnd(literal, c)) {\n+                    literal = 0;\n                 }\n                 // Non-separator char\n-                if (!literal) {\n+                if (literal == 0) {\n                     // Not inside a string/type literal\n                     if (brackets == 0 && c == ' ' && splitConfig.isInfixNotationSupported()) {\n                         // Infix supported, blank space and not inside a virtual method\n@@ -212,8 +216,19 @@ public boolean isInfixNotationSupported() {\n         }\n \n         @Override\n-        public boolean isLiteralSeparator(char candidate) {\n-            return SplitConfig.super.isLiteralSeparator(candidate) || candidate == '<' || candidate == '>';\n+        public boolean isLiteralSeparatorStart(char candidate) {\n+            return SplitConfig.super.isLiteralSeparatorStart(candidate)\n+                    // We need this in order to support things like {@com.foo.Bar<? extends org.acme.Baz, String> bar}\n+                    // where a space should not be treated as a separator\n+                    || candidate == '<';\n+        }\n+\n+        @Override\n+        public boolean isLiteralSeparatorEnd(char startSeparator, char candidate) {\n+            if (startSeparator == '<') {\n+                return candidate == '>';\n+            }\n+            return SplitConfig.super.isLiteralSeparatorEnd(startSeparator, candidate);\n         }\n \n     };\n@@ -221,7 +236,7 @@ public boolean isLiteralSeparator(char candidate) {\n     private static final SplitConfig TYPE_INFO_SPLIT_CONFIG = new DefaultSplitConfig() {\n \n         @Override\n-        public boolean isLiteralSeparator(char candidate) {\n+        public boolean isLiteralSeparatorStart(char candidate) {\n             return candidate == TYPE_INFO_SEPARATOR || LiteralSupport.isStringLiteralSeparator(candidate);\n         }\n     };\n@@ -247,12 +262,36 @@ public boolean shouldAppendSeparator(char candidate) {\n \n     public interface SplitConfig {\n \n+        /**\n+         *\n+         * @param candidate\n+         * @return {@code true} if the characted should be treated as a \"part\" separator\n+         */\n         boolean isSeparator(char candidate);\n \n-        default boolean isLiteralSeparator(char candidate) {\n+        /**\n+         * A \"part\" separator used inside a literal must be ignored.\n+         *\n+         * @param candidate\n+         * @return {@code true} if the characted should be treated as a \"literal\" start separator\n+         */\n+        default boolean isLiteralSeparatorStart(char candidate) {\n             return LiteralSupport.isStringLiteralSeparator(candidate);\n         }\n \n+        /**\n+         *\n+         * @param startSeparator\n+         * @param candidate\n+         * @return {@code true} if the characted should be treated as a \"literal\" end separator\n+         */\n+        default boolean isLiteralSeparatorEnd(char startSeparator, char candidate) {\n+            if (isLiteralSeparatorStart(startSeparator)) {\n+                return startSeparator == candidate;\n+            }\n+            return false;\n+        }\n+\n         default boolean shouldPrependSeparator(char candidate) {\n             return false;\n         }\n\ndiff --git a/independent-projects/qute/generator/src/main/java/io/quarkus/qute/generator/ValueResolverGenerator.java b/independent-projects/qute/generator/src/main/java/io/quarkus/qute/generator/ValueResolverGenerator.java\nindex 329acd30c1fc8..9a304546e3e29 100644\n--- a/independent-projects/qute/generator/src/main/java/io/quarkus/qute/generator/ValueResolverGenerator.java\n+++ b/independent-projects/qute/generator/src/main/java/io/quarkus/qute/generator/ValueResolverGenerator.java\n@@ -894,6 +894,8 @@ private void matchMethods(String matchName, int matchParamsCount, Collection<Met\n                 } else {\n                     tryCatch.invokeVirtualMethod(Descriptors.COMPLETABLE_FUTURE_COMPLETE, whenRet, invokeRet);\n                 }\n+                // Always return from the matching block so that other matching methods are not used\n+                paramMatchScope.returnVoid();\n             }\n         }\n \n",
    "test_patch": "diff --git a/extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/extensions/StringTemplateExtensionsTest.java b/extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/extensions/StringTemplateExtensionsTest.java\nindex 903dd0c04d707..58578dd4d77c8 100644\n--- a/extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/extensions/StringTemplateExtensionsTest.java\n+++ b/extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/extensions/StringTemplateExtensionsTest.java\n@@ -19,9 +19,15 @@ public class StringTemplateExtensionsTest {\n \n     @RegisterExtension\n     static final QuarkusUnitTest config = new QuarkusUnitTest()\n-            .withApplicationRoot(root -> root.addAsResource(\n-                    new StringAsset(\"{str:eval('Hello {name}!')}\"),\n-                    \"templates/hello.txt\"));\n+            .withApplicationRoot(root -> root\n+                    .addAsResource(\n+                            new StringAsset(\"{str:eval('Hello {name}!')}\"),\n+                            \"templates/hello.txt\")\n+                    .addAsResource(\n+                            // https://github.com/quarkusio/quarkus/issues/47092\n+                            // This will trigger value resolver generation for StringBuilder\n+                            new StringAsset(\"{str:builder.append('Qute').append(\\\" is\\\").append(' cool!')}\"),\n+                            \"templates/builder.txt\"));\n \n     @Inject\n     Engine engine;\n@@ -93,6 +99,21 @@ public void testTemplateExtensions() {\n         assertEquals(\"Hello fool!\",\n                 hello.data(\"name\", \"fool\")\n                         .render());\n+\n+        // https://github.com/quarkusio/quarkus/issues/47092\n+        assertEquals(\"Quteiscool!\",\n+                engine.parse(\"{str:builder('Qute').append(\\\"is\\\").append(\\\"cool!\\\")}\")\n+                        .render());\n+        assertEquals(\"Qute's cool!\",\n+                engine.parse(\"{str:builder('Qute').append(\\\"'s\\\").append(\\\" cool!\\\")}\")\n+                        .render());\n+        assertEquals(\"\\\"Qute\\\" is cool!\",\n+                engine.parse(\"{str:builder('\\\"Qute\\\" ').append('is').append(\\\" cool!\\\")}\")\n+                        .render());\n+        assertEquals(\"Hello '!\",\n+                engine.parse(\"{str:concat(\\\"Hello '\\\",\\\"!\\\")}\")\n+                        .render());\n+\n     }\n \n }\n\ndiff --git a/independent-projects/qute/core/src/test/java/io/quarkus/qute/ParserTest.java b/independent-projects/qute/core/src/test/java/io/quarkus/qute/ParserTest.java\nindex deb8c6dfdeeff..9fa33d1e2bde3 100644\n--- a/independent-projects/qute/core/src/test/java/io/quarkus/qute/ParserTest.java\n+++ b/independent-projects/qute/core/src/test/java/io/quarkus/qute/ParserTest.java\n@@ -21,6 +21,7 @@\n \n import org.junit.jupiter.api.Test;\n \n+import io.quarkus.qute.Expression.Part;\n import io.quarkus.qute.TemplateException.Builder;\n import io.quarkus.qute.TemplateLocator.TemplateLocation;\n import io.quarkus.qute.TemplateNode.Origin;\n@@ -460,13 +461,38 @@ public void testSectionParameterWithNestedSingleQuotationMark() {\n         assertSectionParams(engine, \"{#let id=\\\"'Foo \\\"}\", Map.of(\"id\", \"\\\"'Foo \\\"\"));\n         assertSectionParams(engine, \"{#let id=\\\"'Foo ' \\\"}\", Map.of(\"id\", \"\\\"'Foo ' \\\"\"));\n         assertSectionParams(engine, \"{#let id=\\\"'Foo ' \\\" bar='baz'}\", Map.of(\"id\", \"\\\"'Foo ' \\\"\", \"bar\", \"'baz'\"));\n-        assertSectionParams(engine, \"{#let my=bad id=(\\\"'Foo ' \\\" + 1) bar='baz'}\",\n-                Map.of(\"my\", \"bad\", \"id\", \"(\\\"'Foo ' \\\" + 1)\", \"bar\", \"'baz'\"));\n+        assertSectionParams(engine, \"{#let my=bad id=(foo + 1) bar='baz'}\",\n+                Map.of(\"my\", \"bad\", \"id\", \"(foo + 1)\", \"bar\", \"'baz'\"));\n         assertSectionParams(engine, \"{#let id = 'Foo'}\", Map.of(\"id\", \"'Foo'\"));\n         assertSectionParams(engine, \"{#let id= 'Foo'}\", Map.of(\"id\", \"'Foo'\"));\n         assertSectionParams(engine, \"{#let my = (bad or not) id=1}\", Map.of(\"my\", \"(bad or not)\", \"id\", \"1\"));\n         assertSectionParams(engine, \"{#let my= (bad or not) id=1}\", Map.of(\"my\", \"(bad or not)\", \"id\", \"1\"));\n+    }\n+\n+    @Test\n+    public void testVirtualMethodWithNestedLiteralSeparator() {\n+        Engine engine = Engine.builder().addDefaults().build();\n+        List<Part> parts = engine.parse(\"{foo('Bar \\\"!')}\").findExpression(e -> true).getParts();\n+        assertVirtualMethodParam(parts.get(0), \"foo\", \"Bar \\\"!\");\n+\n+        parts = engine.parse(\"{foo(\\\"Bar '!\\\")}\").findExpression(e -> true).getParts();\n+        assertVirtualMethodParam(parts.get(0), \"foo\", \"Bar '!\");\n+\n+        parts = engine.parse(\"{foo(\\\"Bar '!\\\").baz(1)}\").findExpression(e -> true).getParts();\n+        assertVirtualMethodParam(parts.get(0), \"foo\", \"Bar '!\");\n+        assertVirtualMethodParam(parts.get(1), \"baz\", \"1\");\n+\n+        parts = engine.parse(\"{str:builder('Qute').append(\\\"is '\\\").append(\\\"cool!\\\")}\").findExpression(e -> true).getParts();\n+        assertVirtualMethodParam(parts.get(0), \"builder\", \"Qute\");\n+        assertVirtualMethodParam(parts.get(1), \"append\", \"is '\");\n+        assertVirtualMethodParam(parts.get(2), \"append\", \"cool!\");\n+    }\n \n+    private void assertVirtualMethodParam(Part part, String name, String literal) {\n+        assertTrue(part.isVirtualMethod());\n+        assertEquals(name, part.getName());\n+        assertTrue(part.asVirtualMethod().getParameters().get(0).isLiteral());\n+        assertEquals(literal, part.asVirtualMethod().getParameters().get(0).getLiteral().toString());\n     }\n \n     @Test\n\ndiff --git a/independent-projects/qute/generator/src/test/java/io/quarkus/qute/generator/SimpleGeneratorTest.java b/independent-projects/qute/generator/src/test/java/io/quarkus/qute/generator/SimpleGeneratorTest.java\nindex a84dd142a52c4..59c0c5d479c61 100644\n--- a/independent-projects/qute/generator/src/test/java/io/quarkus/qute/generator/SimpleGeneratorTest.java\n+++ b/independent-projects/qute/generator/src/test/java/io/quarkus/qute/generator/SimpleGeneratorTest.java\n@@ -13,6 +13,8 @@\n import java.util.concurrent.CompletionStage;\n import java.util.concurrent.TimeUnit;\n \n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationValue;\n import org.jboss.jandex.ClassInfo;\n import org.jboss.jandex.DotName;\n import org.jboss.jandex.Index;\n@@ -39,15 +41,16 @@ public class SimpleGeneratorTest {\n     public static void init() throws IOException {\n         TestClassOutput classOutput = new TestClassOutput();\n         Index index = index(MyService.class, PublicMyService.class, BaseService.class, MyItem.class, String.class,\n-                CompletionStage.class, List.class, MyEnum.class);\n+                CompletionStage.class, List.class, MyEnum.class, StringBuilder.class);\n         ClassInfo myServiceClazz = index.getClassByName(DotName.createSimple(MyService.class.getName()));\n         ValueResolverGenerator generator = ValueResolverGenerator.builder().setIndex(index).setClassOutput(classOutput)\n                 .addClass(myServiceClazz)\n-                .addClass(index.getClassByName(DotName.createSimple(PublicMyService.class.getName())))\n-                .addClass(index.getClassByName(DotName.createSimple(MyItem.class.getName())))\n-                .addClass(index.getClassByName(DotName.createSimple(String.class.getName())))\n-                .addClass(index.getClassByName(DotName.createSimple(List.class.getName())))\n-                .addClass(index.getClassByName(DotName.createSimple(MyEnum.class.getName())))\n+                .addClass(index.getClassByName(PublicMyService.class))\n+                .addClass(index.getClassByName(MyItem.class))\n+                .addClass(index.getClassByName(String.class))\n+                .addClass(index.getClassByName(List.class))\n+                .addClass(index.getClassByName(MyEnum.class))\n+                .addClass(index.getClassByName(StringBuilder.class), stringBuilderTemplateData())\n                 .build();\n \n         generator.generate();\n@@ -146,6 +149,7 @@ public void testWithEngine() throws Exception {\n         assertEquals(\"OK\", engine.parse(\"{#if enum is MyEnum:BAR}OK{/if}\").data(\"enum\", MyEnum.BAR).render());\n         assertEquals(\"one\", engine.parse(\"{MyEnum:valueOf('ONE').name}\").render());\n         assertEquals(\"10\", engine.parse(\"{io_quarkus_qute_generator_MyService:getDummy(5)}\").render());\n+        assertEquals(\"foo\", engine.parse(\"{builder.append('foo')}\").data(\"builder\", new StringBuilder()).render());\n     }\n \n     @Test\n@@ -192,4 +196,15 @@ public static Index index(Class<?>... classes) throws IOException {\n         return indexer.complete();\n     }\n \n+    private static AnnotationInstance stringBuilderTemplateData() {\n+        AnnotationValue ignoreValue = AnnotationValue.createArrayValue(ValueResolverGenerator.IGNORE, new AnnotationValue[] {});\n+        AnnotationValue targetValue = AnnotationValue.createClassValue(\"target\",\n+                Type.create(ValueResolverGenerator.TEMPLATE_DATA, Kind.CLASS));\n+        AnnotationValue propertiesValue = AnnotationValue.createBooleanValue(ValueResolverGenerator.PROPERTIES, false);\n+        AnnotationValue ignoreSuperclassesValue = AnnotationValue.createBooleanValue(ValueResolverGenerator.IGNORE_SUPERCLASSES,\n+                true);\n+        return AnnotationInstance.create(ValueResolverGenerator.TEMPLATE_DATA, null,\n+                new AnnotationValue[] { targetValue, ignoreValue, propertiesValue, ignoreSuperclassesValue });\n+    }\n+\n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47080",
    "pr_id": 47080,
    "issue_id": 47078,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Qute: empty optional should be considered falsy\n### Description\n\nSee also https://quarkus.io/guides/qute-reference#if_section.\n\n### Implementation ideas\n\n_No response_",
    "issue_word_count": 21,
    "test_files_count": 2,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "docs/src/main/asciidoc/qute-reference.adoc",
      "independent-projects/qute/core/src/main/java/io/quarkus/qute/Booleans.java",
      "independent-projects/qute/core/src/test/java/io/quarkus/qute/BooleansTest.java",
      "independent-projects/qute/core/src/test/java/io/quarkus/qute/IfSectionTest.java"
    ],
    "pr_changed_test_files": [
      "independent-projects/qute/core/src/test/java/io/quarkus/qute/BooleansTest.java",
      "independent-projects/qute/core/src/test/java/io/quarkus/qute/IfSectionTest.java"
    ],
    "base_commit": "46892f9d2c7b0e63f5c6057f4d7143b8e61dabc3",
    "head_commit": "d8ea48d33818252e39fc4e8faa6dc32ac46aff57",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47080",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47080",
    "dockerfile": "",
    "pr_merged_at": "2025-04-01T08:41:41.000Z",
    "patch": "diff --git a/docs/src/main/asciidoc/qute-reference.adoc b/docs/src/main/asciidoc/qute-reference.adoc\nindex 503a1cc511a7c..a3515a5e356bc 100644\n--- a/docs/src/main/asciidoc/qute-reference.adoc\n+++ b/docs/src/main/asciidoc/qute-reference.adoc\n@@ -789,7 +789,7 @@ A loop section may also define the `{#else}` block that is executed when there a\n \n The `{#if}` section represents a basic control flow section.\n The simplest possible version accepts a single parameter and renders the content if the condition is evaluated to `true`.\n-A condition without an operator evaluates to `true` if the value is not considered `falsy`, i.e. if the value is not `null`, `false`, an empty collection, an empty map, an empty array, an empty string/char sequence or a number equal to zero.\n+A condition without an operator evaluates to `true` if the value is not considered `falsy`, i.e. if the value is not `null`, `false`, an empty collection, an empty map, an empty array, an empty string/char sequence, an empty `java.util.Optional`/`java.util.OptionalInt`/`java.util.OptionalLong`/`java.util.OptionalDouble` or a number equal to zero.\n \n [source,html]\n ----\n\ndiff --git a/independent-projects/qute/core/src/main/java/io/quarkus/qute/Booleans.java b/independent-projects/qute/core/src/main/java/io/quarkus/qute/Booleans.java\nindex 27db415f16122..1d305e7f40603 100644\n--- a/independent-projects/qute/core/src/main/java/io/quarkus/qute/Booleans.java\n+++ b/independent-projects/qute/core/src/main/java/io/quarkus/qute/Booleans.java\n@@ -5,6 +5,10 @@\n import java.math.BigInteger;\n import java.util.Collection;\n import java.util.Map;\n+import java.util.Optional;\n+import java.util.OptionalDouble;\n+import java.util.OptionalInt;\n+import java.util.OptionalLong;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n public final class Booleans {\n@@ -22,20 +26,28 @@ private Booleans() {\n     public static boolean isFalsy(Object value) {\n         if (value == null || Results.isNotFound(value)) {\n             return true;\n-        } else if (value instanceof Boolean) {\n-            return !(Boolean) value;\n-        } else if (value instanceof AtomicBoolean) {\n-            return !((AtomicBoolean) value).get();\n-        } else if (value instanceof Collection) {\n-            return ((Collection<?>) value).isEmpty();\n-        } else if (value instanceof Map) {\n-            return ((Map<?, ?>) value).isEmpty();\n+        } else if (value instanceof Boolean bool) {\n+            return !bool;\n+        } else if (value instanceof AtomicBoolean atomicBool) {\n+            return !atomicBool.get();\n+        } else if (value instanceof Collection col) {\n+            return col.isEmpty();\n+        } else if (value instanceof Map map) {\n+            return map.isEmpty();\n         } else if (value.getClass().isArray()) {\n             return Array.getLength(value) == 0;\n-        } else if (value instanceof CharSequence) {\n-            return ((CharSequence) value).length() == 0;\n-        } else if (value instanceof Number) {\n-            return isZero((Number) value);\n+        } else if (value instanceof CharSequence cs) {\n+            return cs.length() == 0;\n+        } else if (value instanceof Number num) {\n+            return isZero(num);\n+        } else if (value instanceof Optional opt) {\n+            return opt.isEmpty();\n+        } else if (value instanceof OptionalInt opt) {\n+            return opt.isEmpty();\n+        } else if (value instanceof OptionalLong opt) {\n+            return opt.isEmpty();\n+        } else if (value instanceof OptionalDouble opt) {\n+            return opt.isEmpty();\n         }\n         return false;\n     }\n",
    "test_patch": "diff --git a/independent-projects/qute/core/src/test/java/io/quarkus/qute/BooleansTest.java b/independent-projects/qute/core/src/test/java/io/quarkus/qute/BooleansTest.java\nindex 0f1e1794fbe8c..3aba2f01ff049 100644\n--- a/independent-projects/qute/core/src/test/java/io/quarkus/qute/BooleansTest.java\n+++ b/independent-projects/qute/core/src/test/java/io/quarkus/qute/BooleansTest.java\n@@ -10,6 +10,10 @@\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.OptionalDouble;\n+import java.util.OptionalInt;\n+import java.util.OptionalLong;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicLong;\n \n@@ -34,6 +38,10 @@ public void testIsFalsy() {\n         assertTrue(Booleans.isFalsy(new String[0]));\n         assertTrue(Booleans.isFalsy(new AtomicLong(0)));\n         assertTrue(Booleans.isFalsy(new AtomicBoolean(false)));\n+        assertTrue(Booleans.isFalsy(Optional.empty()));\n+        assertTrue(Booleans.isFalsy(OptionalInt.empty()));\n+        assertTrue(Booleans.isFalsy(OptionalLong.empty()));\n+        assertTrue(Booleans.isFalsy(OptionalDouble.empty()));\n         // truthy values\n         assertFalse(Booleans.isFalsy(new Object()));\n         assertFalse(Booleans.isFalsy(true));\n@@ -49,6 +57,10 @@ public void testIsFalsy() {\n         assertFalse(Booleans.isFalsy(new String[] { \"foo\" }));\n         assertFalse(Booleans.isFalsy(new AtomicLong(10)));\n         assertFalse(Booleans.isFalsy(new AtomicBoolean(true)));\n+        assertFalse(Booleans.isFalsy(Optional.of(\"foo\")));\n+        assertFalse(Booleans.isFalsy(OptionalInt.of(1)));\n+        assertFalse(Booleans.isFalsy(OptionalLong.of(10l)));\n+        assertFalse(Booleans.isFalsy(OptionalDouble.of(1.0)));\n     }\n \n     @Test\n\ndiff --git a/independent-projects/qute/core/src/test/java/io/quarkus/qute/IfSectionTest.java b/independent-projects/qute/core/src/test/java/io/quarkus/qute/IfSectionTest.java\nindex d260a6c608a5e..8c5f25cc60817 100644\n--- a/independent-projects/qute/core/src/test/java/io/quarkus/qute/IfSectionTest.java\n+++ b/independent-projects/qute/core/src/test/java/io/quarkus/qute/IfSectionTest.java\n@@ -8,6 +8,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n \n import org.junit.jupiter.api.Test;\n \n@@ -171,6 +172,8 @@ public void testFalsy() {\n         data.put(\"mapEmpty\", Collections.emptyMap());\n         data.put(\"array\", new String[] { \"foo\" });\n         data.put(\"arrayEmpty\", new String[] {});\n+        data.put(\"optional\", Optional.of(\"foo\"));\n+        data.put(\"optionalEmpty\", Optional.empty());\n \n         assertEquals(\"1\", engine.parse(\"{#if name}1{#else}0{/if}\").render(data));\n         assertEquals(\"0\", engine.parse(\"{#if nameEmpty}1{#else}0{/if}\").render(data));\n@@ -183,6 +186,8 @@ public void testFalsy() {\n         assertEquals(\"0\", engine.parse(\"{#if mapEmpty}1{#else}0{/if}\").render(data));\n         assertEquals(\"1\", engine.parse(\"{#if array}1{#else}0{/if}\").render(data));\n         assertEquals(\"0\", engine.parse(\"{#if arrayEmpty}1{#else}0{/if}\").render(data));\n+        assertEquals(\"1\", engine.parse(\"{#if optional}1{#else}0{/if}\").render(data));\n+        assertEquals(\"0\", engine.parse(\"{#if optionalEmpty}1{#else}0{/if}\").render(data));\n         assertEquals(\"1\", engine.parse(\"{#if !arrayEmpty}1{#else}0{/if}\").render(data));\n         assertEquals(\"1\", engine.parse(\"{#if arrayEmpty || name}1{#else}0{/if}\").render(data));\n         assertEquals(\"0\", engine.parse(\"{#if arrayEmpty && name}1{#else}0{/if}\").render(data));\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47076",
    "pr_id": 47076,
    "issue_id": 47062,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Constructor injection of io.opentelemetry.api.metrics.Meter in a @GrpcService-annotated class makes tests fail\n### Describe the bug\n\nWhen trying to use OpenTelemetry metrics within a @GrpcService-annotated class via constructor injection of `io.opentelemetry.api.metrics.Meter` like this:\n\n```java\n@GrpcService\npublic class HelloGrpcService implements HelloGrpc {\n    private final LongCounter counter;\n\n    public HelloGrpcService(Meter meter) {\n        counter = meter.counterBuilder(\"hello-metrics\")\n                .setDescription(\"hello-metrics\")\n                .setUnit(\"invocations\")\n                .build();\n    }\n\n    @Override\n    public Uni<HelloReply> sayHello(HelloRequest request) {\n        counter.add(1);\n\n        return Uni.createFrom().item(\"Hello \" + request.getName() + \"!\")\n                .map(msg -> HelloReply.newBuilder().setMessage(msg).build());\n    }\n}\n```\nleads to exception when running tests: `java.lang.IllegalStateException: GlobalOpenTelemetry.set has already been called. GlobalOpenTelemetry.set must be called only once before any calls to GlobalOpenTelemetry.get. If you are using the OpenTelemetrySdk, use OpenTelemetrySdkBuilder.buildAndRegisterGlobal instead. Previous invocation set to cause of this exception.`\n\nRunning application in Dev mode is not affected.\nSwitching from constructor injection of the Meter class to field injection makes tests pass successfully.\n\n### Expected behavior\n\nSuccessful tests execution.\n\n### Actual behavior\n\nRunning test fails with error.\n\n<details>\n  <summary>Stacktrace</summary>\n  \n```\n2025-03-28 16:35:48,767 INFO  [io.ope.sdk.aut.AutoConfiguredOpenTelemetrySdkBuilder] (vert.x-eventloop-thread-0) Error encountered during autoconfiguration. Closing partially configured components.\n2025-03-28 16:35:48,800 ERROR [io.qua.grp.run.GrpcServerRecorder] (main) Unable to start the gRPC server: jakarta.enterprise.inject.CreationException: Error creating synthetic bean [Le6zQbzkojAYO_OiKIQWJf4lGa4]: io.opentelemetry.sdk.autoconfigure.spi.ConfigurationException: Unexpected configuration error\n        at io.opentelemetry.api.OpenTelemetry_Le6zQbzkojAYO_OiKIQWJf4lGa4_Synthetic_Bean.doCreate(Unknown Source)\n        at io.opentelemetry.api.OpenTelemetry_Le6zQbzkojAYO_OiKIQWJf4lGa4_Synthetic_Bean.create(Unknown Source)\n        at io.opentelemetry.api.OpenTelemetry_Le6zQbzkojAYO_OiKIQWJf4lGa4_Synthetic_Bean.create(Unknown Source)\n        at io.quarkus.arc.impl.AbstractSharedContext.createInstanceHandle(AbstractSharedContext.java:119)\n        at io.quarkus.arc.impl.AbstractSharedContext$1.get(AbstractSharedContext.java:38)\n        at io.quarkus.arc.impl.AbstractSharedContext$1.get(AbstractSharedContext.java:35)\n        at io.quarkus.arc.impl.LazyValue.get(LazyValue.java:32)\n        at io.quarkus.arc.impl.ComputingCache.computeIfAbsent(ComputingCache.java:69)\n        at io.quarkus.arc.impl.ComputingCacheContextInstances.computeIfAbsent(ComputingCacheContextInstances.java:19)\n        at io.quarkus.arc.impl.AbstractSharedContext.get(AbstractSharedContext.java:35)\n        at io.opentelemetry.api.OpenTelemetry_Le6zQbzkojAYO_OiKIQWJf4lGa4_Synthetic_Bean.get(Unknown Source)\n        at io.opentelemetry.api.OpenTelemetry_Le6zQbzkojAYO_OiKIQWJf4lGa4_Synthetic_Bean.get(Unknown Source)\n        at io.quarkus.opentelemetry.runtime.tracing.intrumentation.grpc.GrpcTracingServerInterceptor_Bean.doCreate(Unknown Source)\n        at io.quarkus.opentelemetry.runtime.tracing.intrumentation.grpc.GrpcTracingServerInterceptor_Bean.create(Unknown Source)\n        at io.quarkus.opentelemetry.runtime.tracing.intrumentation.grpc.GrpcTracingServerInterceptor_Bean.create(Unknown Source)\n        at io.quarkus.arc.impl.AbstractSharedContext.createInstanceHandle(AbstractSharedContext.java:119)\n        at io.quarkus.arc.impl.AbstractSharedContext$1.get(AbstractSharedContext.java:38)\n        at io.quarkus.arc.impl.AbstractSharedContext$1.get(AbstractSharedContext.java:35)\n        at io.quarkus.arc.impl.LazyValue.get(LazyValue.java:32)\n        at io.quarkus.arc.impl.ComputingCache.computeIfAbsent(ComputingCache.java:69)\n        at io.quarkus.arc.impl.ComputingCacheContextInstances.computeIfAbsent(ComputingCacheContextInstances.java:19)\n        at io.quarkus.arc.impl.AbstractSharedContext.get(AbstractSharedContext.java:35)\n        at io.quarkus.opentelemetry.runtime.tracing.intrumentation.grpc.GrpcTracingServerInterceptor_Bean.get(Unknown Source)\n        at io.quarkus.opentelemetry.runtime.tracing.intrumentation.grpc.GrpcTracingServerInterceptor_Bean.get(Unknown Source)\n        at io.quarkus.arc.impl.ArcContainerImpl.beanInstanceHandle(ArcContainerImpl.java:570)\n        at io.quarkus.arc.impl.ArcContainerImpl.beanInstanceHandle(ArcContainerImpl.java:550)\n        at io.quarkus.arc.impl.ArcContainerImpl.beanInstanceHandle(ArcContainerImpl.java:583)\n        at io.quarkus.arc.impl.ArcContainerImpl.instanceHandle(ArcContainerImpl.java:545)\n        at io.quarkus.arc.impl.ArcContainerImpl.instance(ArcContainerImpl.java:300)\n        at io.quarkus.grpc.runtime.Interceptors.getSortedGlobalInterceptors(Interceptors.java:75)\n        at io.quarkus.grpc.runtime.GrpcContainer.getSortedGlobalInterceptors(GrpcContainer.java:29)\n        at io.quarkus.grpc.runtime.GrpcContainer_ClientProxy.getSortedGlobalInterceptors(Unknown Source)\n        at io.quarkus.grpc.runtime.GrpcServerRecorder.buildServer(GrpcServerRecorder.java:601)\n        at io.quarkus.grpc.runtime.GrpcServerRecorder$GrpcServerVerticle.start(GrpcServerRecorder.java:701)\n        at io.vertx.core.impl.DeploymentManager.lambda$doDeploy$5(DeploymentManager.java:210)\n        at io.vertx.core.impl.ContextInternal.dispatch(ContextInternal.java:270)\n        at io.vertx.core.impl.ContextInternal.dispatch(ContextInternal.java:252)\n        at io.vertx.core.impl.ContextInternal.lambda$runOnContext$0(ContextInternal.java:50)\n        at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)\n        at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)\n        at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)\n        at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)\n        at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)\n        at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n        at java.base/java.lang.Thread.run(Thread.java:1575)\nCaused by: io.opentelemetry.sdk.autoconfigure.spi.ConfigurationException: Unexpected configuration error\n        at io.opentelemetry.sdk.autoconfigure.AutoConfiguredOpenTelemetrySdkBuilder.build(AutoConfiguredOpenTelemetrySdkBuilder.java:527)\n        at io.quarkus.opentelemetry.runtime.OpenTelemetryRecorder$1.apply(OpenTelemetryRecorder.java:87)\n        at io.quarkus.opentelemetry.runtime.OpenTelemetryRecorder$1.apply(OpenTelemetryRecorder.java:60)\n        at io.opentelemetry.api.OpenTelemetry_Le6zQbzkojAYO_OiKIQWJf4lGa4_Synthetic_Bean.createSynthetic(Unknown Source)\n        ... 46 more\nCaused by: java.lang.IllegalStateException: GlobalOpenTelemetry.set has already been called. GlobalOpenTelemetry.set must be called only once before any calls to GlobalOpenTelemetry.get. If you are using the OpenTelemetrySdk, use OpenTelemetrySdkBuilder.buildAndRegisterGlobal instead. Previous invocation set to cause of this exception.\n        at io.opentelemetry.api.GlobalOpenTelemetry.set(GlobalOpenTelemetry.java:107)\n        at io.opentelemetry.sdk.autoconfigure.AutoConfiguredOpenTelemetrySdkBuilder.maybeSetAsGlobal(AutoConfiguredOpenTelemetrySdkBuilder.java:594)\n        at io.opentelemetry.sdk.autoconfigure.AutoConfiguredOpenTelemetrySdkBuilder.build(AutoConfiguredOpenTelemetrySdkBuilder.java:508)\n        ... 49 more\nCaused by: java.lang.Throwable\n        at io.opentelemetry.api.GlobalOpenTelemetry.set(GlobalOpenTelemetry.java:115)\n        at io.opentelemetry.api.GlobalOpenTelemetry.get(GlobalOpenTelemetry.java:85)\n        at io.opentelemetry.api.GlobalOpenTelemetry.getMeter(GlobalOpenTelemetry.java:188)\n        at io.quarkus.opentelemetry.runtime.metrics.cdi.MetricsProducer.getMeter(MetricsProducer.java:20)\n        at io.quarkus.opentelemetry.runtime.metrics.cdi.MetricsProducer_ProducerMethod_getMeter__LCWQKFg0TE0K7y0bevY-HMwmcg_Bean.doCreate(Unknown Source)\n        at io.quarkus.opentelemetry.runtime.metrics.cdi.MetricsProducer_ProducerMethod_getMeter__LCWQKFg0TE0K7y0bevY-HMwmcg_Bean.create(Unknown Source)\n        at io.quarkus.opentelemetry.runtime.metrics.cdi.MetricsProducer_ProducerMethod_getMeter__LCWQKFg0TE0K7y0bevY-HMwmcg_Bean.create(Unknown Source)\n        at io.quarkus.arc.impl.AbstractSharedContext.createInstanceHandle(AbstractSharedContext.java:119)\n        at io.quarkus.arc.impl.AbstractSharedContext$1.get(AbstractSharedContext.java:38)\n        at io.quarkus.arc.impl.AbstractSharedContext$1.get(AbstractSharedContext.java:35)\n        at io.quarkus.arc.generator.Default_jakarta_enterprise_context_ApplicationScoped_ContextInstances.c14(Unknown Source)\n        at io.quarkus.arc.generator.Default_jakarta_enterprise_context_ApplicationScoped_ContextInstances.computeIfAbsent(Unknown Source)\n        at io.quarkus.arc.impl.AbstractSharedContext.get(AbstractSharedContext.java:35)\n        at io.quarkus.arc.impl.ClientProxies.getApplicationScopedDelegate(ClientProxies.java:23)\n        at io.opentelemetry.api.metrics.MetricsProducer_ProducerMethod_getMeter__LCWQKFg0TE0K7y0bevY-HMwmcg_ClientProxy.arc$delegate(Unknown Source)\n        at io.opentelemetry.api.metrics.MetricsProducer_ProducerMethod_getMeter__LCWQKFg0TE0K7y0bevY-HMwmcg_ClientProxy.counterBuilder(Unknown Source)\n        at org.acme.HelloGrpcService.<init>(HelloGrpcService.java:14)\n        at org.acme.HelloGrpcService_Bean.doCreate(Unknown Source)\n        at org.acme.HelloGrpcService_Bean.create(Unknown Source)\n        at org.acme.HelloGrpcService_Bean.create(Unknown Source)\n        at io.quarkus.arc.impl.AbstractSharedContext.createInstanceHandle(AbstractSharedContext.java:119)\n        at io.quarkus.arc.impl.AbstractSharedContext$1.get(AbstractSharedContext.java:38)\n        at io.quarkus.arc.impl.AbstractSharedContext$1.get(AbstractSharedContext.java:35)\n        at io.quarkus.arc.impl.LazyValue.get(LazyValue.java:32)\n        at io.quarkus.arc.impl.ComputingCache.computeIfAbsent(ComputingCache.java:69)\n        at io.quarkus.arc.impl.ComputingCacheContextInstances.computeIfAbsent(ComputingCacheContextInstances.java:19)\n        at io.quarkus.arc.impl.AbstractSharedContext.get(AbstractSharedContext.java:35)\n        at org.acme.HelloGrpcService_Bean.get(Unknown Source)\n        at org.acme.HelloGrpcService_Bean.get(Unknown Source)\n        at org.acme.HelloGrpcBean_Bean.doCreate(Unknown Source)\n        at org.acme.HelloGrpcBean_Bean.create(Unknown Source)\n        at org.acme.HelloGrpcBean_Bean.create(Unknown Source)\n        at io.quarkus.arc.impl.AbstractSharedContext.createInstanceHandle(AbstractSharedContext.java:119)\n        at io.quarkus.arc.impl.AbstractSharedContext$1.get(AbstractSharedContext.java:38)\n        at io.quarkus.arc.impl.AbstractSharedContext$1.get(AbstractSharedContext.java:35)\n        at io.quarkus.arc.impl.LazyValue.get(LazyValue.java:32)\n        at io.quarkus.arc.impl.ComputingCache.computeIfAbsent(ComputingCache.java:69)\n        at io.quarkus.arc.impl.ComputingCacheContextInstances.computeIfAbsent(ComputingCacheContextInstances.java:19)\n        at io.quarkus.arc.impl.AbstractSharedContext.get(AbstractSharedContext.java:35)\n        at org.acme.HelloGrpcBean_Bean.get(Unknown Source)\n        at org.acme.HelloGrpcBean_Bean.get(Unknown Source)\n        at io.quarkus.arc.impl.InstanceImpl.getBeanInstance(InstanceImpl.java:325)\n        at io.quarkus.arc.impl.InstanceImpl$InstanceIterator.next(InstanceImpl.java:363)\n        at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)\n        at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1939)\n        at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)\n        at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)\n        at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)\n        at java.base/java.util.stream.ReduceOps$5.evaluateSequential(ReduceOps.java:258)\n        at java.base/java.util.stream.ReduceOps$5.evaluateSequential(ReduceOps.java:248)\n        at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)\n        at java.base/java.util.stream.ReferencePipeline.count(ReferencePipeline.java:754)\n        at io.quarkus.grpc.runtime.GrpcServerRecorder.hasNoServices(GrpcServerRecorder.java:443)\n        at io.quarkus.grpc.runtime.GrpcServerRecorder.initializeGrpcServer(GrpcServerRecorder.java:131)\n        at io.quarkus.runner.recorded.GrpcServerProcessor$initializeServer985917842.deploy_0(Unknown Source)\n        at io.quarkus.runner.recorded.GrpcServerProcessor$initializeServer985917842.deploy(Unknown Source)\n        at io.quarkus.runner.ApplicationImpl.doStart(Unknown Source)\n        at io.quarkus.runtime.Application.start(Application.java:101)\n        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n        at java.base/java.lang.reflect.Method.invoke(Method.java:580)\n        at io.quarkus.runner.bootstrap.StartupActionImpl.run(StartupActionImpl.java:305)\n        at io.quarkus.test.junit.QuarkusTestExtension.doJavaStart(QuarkusTestExtension.java:224)\n        at io.quarkus.test.junit.QuarkusTestExtension.ensureStarted(QuarkusTestExtension.java:578)\n        at io.quarkus.test.junit.QuarkusTestExtension.beforeAll(QuarkusTestExtension.java:628)\n        at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeBeforeAllCallbacks$12(ClassBasedTestDescriptor.java:396)\n        at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n        at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeBeforeAllCallbacks(ClassBasedTestDescriptor.java:396)\n        at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.before(ClassBasedTestDescriptor.java:212)\n        at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.before(ClassBasedTestDescriptor.java:85)\n        at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:153)\n        at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n        at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)\n        at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n        at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)\n        at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n        at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)\n        at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)\n        at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)\n        at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\n        at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)\n        at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n        at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)\n        at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n        at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)\n        at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n        at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)\n        at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)\n        at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)\n        at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\n        at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)\n        at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)\n        at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)\n        at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)\n        at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)\n        at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)\n        at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)\n        at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)\n        at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)\n        at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)\n        at org.apache.maven.surefire.junitplatform.LazyLauncher.execute(LazyLauncher.java:56)\n        at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:184)\n        at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:148)\n        at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:122)\n        at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)\n        at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)\n        at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)\n        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)\n```\n</details>\n\n### How to Reproduce?\n\nTo reproduce:\n\n1. Clone https://github.com/Ultranium/quarkus-opentelemetry-grpc-reproducer\n2. Run `./mvnw test`\n\n### Output of `uname -a` or `ver`\n\nLinux desktop 6.13.5-200.fc41.x86_64 #1 SMP PREEMPT_DYNAMIC Thu Feb 27 15:07:31 UTC 2025 x86_64 GNU/Linux\n\n### Output of `java -version`\n\nopenjdk version \"21.0.6\" 2025-01-21\n\n### Quarkus version or git rev\n\n3.21.0\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nGradle 8.12\n\n### Additional information\n\nRelated discussion: https://github.com/quarkusio/quarkus/discussions/47060",
    "issue_word_count": 2071,
    "test_files_count": 6,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "extensions/grpc/deployment/src/main/java/io/quarkus/grpc/deployment/GrpcServerProcessor.java",
      "integration-tests/opentelemetry-grpc-only/pom.xml",
      "integration-tests/opentelemetry-grpc-only/src/main/java/io/quarkus/it/opentelemetry/grpc/HelloGrpcService.java",
      "integration-tests/opentelemetry-grpc-only/src/main/proto/hello.proto",
      "integration-tests/opentelemetry-grpc-only/src/main/resources/application.properties",
      "integration-tests/opentelemetry-grpc-only/src/test/java/io/quarkus/it/opentelemetry/grpc/HelloGrpcClientTest.java",
      "integration-tests/pom.xml"
    ],
    "pr_changed_test_files": [
      "integration-tests/opentelemetry-grpc-only/pom.xml",
      "integration-tests/opentelemetry-grpc-only/src/main/java/io/quarkus/it/opentelemetry/grpc/HelloGrpcService.java",
      "integration-tests/opentelemetry-grpc-only/src/main/proto/hello.proto",
      "integration-tests/opentelemetry-grpc-only/src/main/resources/application.properties",
      "integration-tests/opentelemetry-grpc-only/src/test/java/io/quarkus/it/opentelemetry/grpc/HelloGrpcClientTest.java",
      "integration-tests/pom.xml"
    ],
    "base_commit": "46892f9d2c7b0e63f5c6057f4d7143b8e61dabc3",
    "head_commit": "9fec960ed1b1f39add270a78f57639c84c4da999",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47076",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47076",
    "dockerfile": "",
    "pr_merged_at": "2025-04-01T07:53:11.000Z",
    "patch": "diff --git a/extensions/grpc/deployment/src/main/java/io/quarkus/grpc/deployment/GrpcServerProcessor.java b/extensions/grpc/deployment/src/main/java/io/quarkus/grpc/deployment/GrpcServerProcessor.java\nindex 3b1fae9fdd80a..38584ffdd90ae 100644\n--- a/extensions/grpc/deployment/src/main/java/io/quarkus/grpc/deployment/GrpcServerProcessor.java\n+++ b/extensions/grpc/deployment/src/main/java/io/quarkus/grpc/deployment/GrpcServerProcessor.java\n@@ -690,7 +690,9 @@ ServiceStartBuildItem initializeServer(GrpcServerRecorder recorder,\n             LaunchModeBuildItem launchModeBuildItem,\n             VertxWebRouterBuildItem routerBuildItem,\n             VertxBuildItem vertx, Capabilities capabilities,\n-            List<FilterBuildItem> filterBuildItems) {\n+            List<FilterBuildItem> filterBuildItems,\n+            // used to ensure that gRPC server starts after OTel has been set up\n+            @SuppressWarnings(\"unused\") BeanContainerBuildItem beanContainerBuildItem) {\n \n         // Build the list of blocking methods per service implementation\n         Map<String, List<String>> blocking = new HashMap<>();\n",
    "test_patch": "diff --git a/integration-tests/opentelemetry-grpc-only/pom.xml b/integration-tests/opentelemetry-grpc-only/pom.xml\nnew file mode 100644\nindex 0000000000000..a5e12b703fb45\n--- /dev/null\n+++ b/integration-tests/opentelemetry-grpc-only/pom.xml\n@@ -0,0 +1,140 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-integration-tests-parent</artifactId>\n+        <version>999-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>quarkus-integration-test-opentelemetry-grpc-only</artifactId>\n+    <name>Quarkus - Integration Tests - OpenTelemetry gRPC Only</name>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-grpc</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-opentelemetry</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-arc</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-junit5</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <!-- Minimal test dependencies to *-deployment artifacts for consistent build order -->\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-grpc-deployment</artifactId>\n+            <version>${project.version}</version>\n+            <type>pom</type>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>*</groupId>\n+                    <artifactId>*</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-opentelemetry-deployment</artifactId>\n+            <version>${project.version}</version>\n+            <type>pom</type>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>*</groupId>\n+                    <artifactId>*</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-arc-deployment</artifactId>\n+            <version>${project.version}</version>\n+            <type>pom</type>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>*</groupId>\n+                    <artifactId>*</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>io.quarkus</groupId>\n+                <artifactId>quarkus-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>build</goal>\n+                            <goal>generate-code</goal>\n+                            <goal>generate-code-tests</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <profiles>\n+        <profile>\n+            <id>native-image</id>\n+            <activation>\n+                <property>\n+                    <name>native</name>\n+                </property>\n+            </activation>\n+\n+            <properties>\n+                <quarkus.native.enabled>true</quarkus.native.enabled>\n+            </properties>\n+\n+            <build>\n+                <plugins>\n+                    <plugin>\n+                        <groupId>org.apache.maven.plugins</groupId>\n+                        <artifactId>maven-surefire-plugin</artifactId>\n+                        <configuration>\n+                            <skipTests>${native.surefire.skip}</skipTests>\n+                        </configuration>\n+                    </plugin>\n+\n+                    <plugin>\n+                        <artifactId>maven-failsafe-plugin</artifactId>\n+                        <executions>\n+                            <execution>\n+                                <goals>\n+                                    <goal>integration-test</goal>\n+                                    <goal>verify</goal>\n+                                </goals>\n+                                <configuration>\n+                                    <systemPropertyVariables>\n+                                        <native.image.path>\n+                                            ${project.build.directory}/${project.build.finalName}-runner\n+                                        </native.image.path>\n+                                    </systemPropertyVariables>\n+                                </configuration>\n+                            </execution>\n+                        </executions>\n+                    </plugin>\n+                </plugins>\n+            </build>\n+        </profile>\n+    </profiles>\n+</project>\n\ndiff --git a/integration-tests/opentelemetry-grpc-only/src/main/java/io/quarkus/it/opentelemetry/grpc/HelloGrpcService.java b/integration-tests/opentelemetry-grpc-only/src/main/java/io/quarkus/it/opentelemetry/grpc/HelloGrpcService.java\nnew file mode 100644\nindex 0000000000000..eb88f179bd8ad\n--- /dev/null\n+++ b/integration-tests/opentelemetry-grpc-only/src/main/java/io/quarkus/it/opentelemetry/grpc/HelloGrpcService.java\n@@ -0,0 +1,26 @@\n+package org.acme;\n+\n+import io.opentelemetry.api.metrics.LongCounter;\n+import io.opentelemetry.api.metrics.Meter;\n+import io.quarkus.grpc.GrpcService;\n+import io.smallrye.mutiny.Uni;\n+\n+@GrpcService\n+public class HelloGrpcService implements HelloGrpc {\n+    private final LongCounter counter;\n+\n+    public HelloGrpcService(Meter meter) {\n+        counter = meter.counterBuilder(\"hello-metrics\")\n+                .setDescription(\"hello-metrics\")\n+                .setUnit(\"invocations\")\n+                .build();\n+    }\n+\n+    @Override\n+    public Uni<HelloReply> sayHello(HelloRequest request) {\n+        counter.add(1);\n+\n+        return Uni.createFrom().item(\"Hello \" + request.getName() + \"!\")\n+                .map(msg -> HelloReply.newBuilder().setMessage(msg).build());\n+    }\n+}\n\ndiff --git a/integration-tests/opentelemetry-grpc-only/src/main/proto/hello.proto b/integration-tests/opentelemetry-grpc-only/src/main/proto/hello.proto\nnew file mode 100644\nindex 0000000000000..eafc74faf7dc6\n--- /dev/null\n+++ b/integration-tests/opentelemetry-grpc-only/src/main/proto/hello.proto\n@@ -0,0 +1,19 @@\n+syntax = \"proto3\";\n+\n+option java_multiple_files = true;\n+option java_package = \"org.acme\";\n+option java_outer_classname = \"HelloGrpcProto\";\n+\n+package hello;\n+\n+service HelloGrpc {\n+  rpc SayHello (HelloRequest) returns (HelloReply) {}\n+}\n+\n+message HelloRequest {\n+  string name = 1;\n+}\n+\n+message HelloReply {\n+  string message = 1;\n+}\n\ndiff --git a/integration-tests/opentelemetry-grpc-only/src/main/resources/application.properties b/integration-tests/opentelemetry-grpc-only/src/main/resources/application.properties\nnew file mode 100644\nindex 0000000000000..a072c41cfb8b1\n--- /dev/null\n+++ b/integration-tests/opentelemetry-grpc-only/src/main/resources/application.properties\n@@ -0,0 +1,10 @@\n+quarkus.grpc.clients.hello.host=localhost\n+%test.quarkus.grpc.clients.hello.port=9001\n+\n+quarkus.otel.bsp.schedule.delay=100\n+quarkus.otel.bsp.export.timeout=5s\n+\n+quarkus.otel.metrics.enabled=true\n+\n+#quarkus.grpc.clients.streaming.use-quarkus-grpc-client=true\n+#quarkus.grpc.server.use-separate-server=false\n\\ No newline at end of file\n\ndiff --git a/integration-tests/opentelemetry-grpc-only/src/test/java/io/quarkus/it/opentelemetry/grpc/HelloGrpcClientTest.java b/integration-tests/opentelemetry-grpc-only/src/test/java/io/quarkus/it/opentelemetry/grpc/HelloGrpcClientTest.java\nnew file mode 100644\nindex 0000000000000..8a9d8c0e9305e\n--- /dev/null\n+++ b/integration-tests/opentelemetry-grpc-only/src/test/java/io/quarkus/it/opentelemetry/grpc/HelloGrpcClientTest.java\n@@ -0,0 +1,26 @@\n+package io.quarkus.it.opentelemetry.grpc;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.time.Duration;\n+\n+import org.acme.HelloGrpc;\n+import org.acme.HelloReply;\n+import org.acme.HelloRequest;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.grpc.GrpcClient;\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+@QuarkusTest\n+public class HelloGrpcClientTest {\n+    @GrpcClient\n+    HelloGrpc helloGrpc;\n+\n+    @Test\n+    void testHello() {\n+        HelloReply reply = helloGrpc\n+                .sayHello(HelloRequest.newBuilder().setName(\"Neo\").build()).await().atMost(Duration.ofSeconds(5));\n+        assertEquals(\"Hello Neo!\", reply.getMessage());\n+    }\n+}\n\ndiff --git a/integration-tests/pom.xml b/integration-tests/pom.xml\nindex 6a5e0f39a3c27..ccd0f283cbb7e 100644\n--- a/integration-tests/pom.xml\n+++ b/integration-tests/pom.xml\n@@ -377,6 +377,7 @@\n                 <module>opentelemetry-vertx</module>\n                 <module>opentelemetry-reactive</module>\n                 <module>opentelemetry-grpc</module>\n+                <module>opentelemetry-grpc-only</module>\n                 <module>opentelemetry-vertx-exporter</module>\n                 <module>opentelemetry-reactive-messaging</module>\n                 <module>opentelemetry-redis-instrumentation</module>\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47065",
    "pr_id": 47065,
    "issue_id": 40831,
    "repo": "quarkusio/quarkus",
    "problem_statement": "RestEasy reactive: Cannot use method with same name but different parameters\n### Describe the bug\n\nDownloading a Quarkus project with \"Start Coding\" with only RESTEasy Reactive (3.2.12.FINAL), I modify the GreetingResource to have two @GET endpoints. I try to execute the first one.\n\n### Expected behavior\n\nGET endpoint working as expected.\n\n### Actual behavior\n\nGetting the following error:\r\n\r\n```java\r\n2024-05-24 13:55:20,630 ERROR [io.qua.ver.htt.run.QuarkusErrorHandler] (executor-thread-1) HTTP Request to /hello/z failed, error id: 510e7f82-47e1-425a-b730-1cda0e5eade2-1: java.lang.ClassCastException: class java.lang.String cannot be cast to class java.util.List (java.lang.String and java.util.List are in module java.base of loader 'bootstrap')\r\n\tat org.acme.GreetingResource$quarkusrestinvoker$hello_b14314082eb006718a61dd4be4a41cda1d994f26.invoke(Unknown Source)\r\n\tat org.jboss.resteasy.reactive.server.handlers.InvocationHandler.handle(InvocationHandler.java:29)\r\n\tat io.quarkus.resteasy.reactive.server.runtime.QuarkusResteasyReactiveRequestContext.invokeHandler(QuarkusResteasyReactiveRequestContext.java:141)\r\n\tat org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext.run(AbstractResteasyReactiveContext.java:145)\r\n\tat io.quarkus.vertx.core.runtime.VertxCoreRecorder$14.runWith(VertxCoreRecorder.java:576)\r\n\tat org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2513)\r\n\tat org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1538)\r\n\tat org.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:29)\r\n\tat org.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:29)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\r\n```\n\n### How to Reproduce?\n\nGet the quarkus project from Quarkus website --> \"Start Coding\". Select Quarkus 3.2 to get the 3.2.12.FINAL version.\r\n\r\nModify the GreetingResource.java file with the following content:\r\n\r\n```java\r\npackage org.acme;\r\n\r\nimport jakarta.enterprise.context.ApplicationScoped;\r\nimport jakarta.ws.rs.GET;\r\nimport jakarta.ws.rs.Path;\r\nimport jakarta.ws.rs.PathParam;\r\nimport jakarta.ws.rs.Produces;\r\nimport jakarta.ws.rs.core.MediaType;\r\n\r\nimport java.util.List;\r\n\r\n@Path(\"/hello\")\r\n@ApplicationScoped\r\npublic class GreetingResource {\r\n\r\n    @GET\r\n    @Path(\"/{variable}\")\r\n    @Produces(MediaType.TEXT_PLAIN)\r\n    public String hello(@PathParam(\"variable\") String variable) {\r\n        return \"Hello from RESTEasy Reactive\";\r\n    }\r\n\r\n    @GET\r\n    @Path(\"/{variable}/abc\")\r\n    @Produces(MediaType.TEXT_PLAIN)\r\n    public String hello(@PathParam(\"variable\") List<String> variable) {\r\n        return \"Hello from RESTEasy Reactive\";\r\n    }\r\n}\r\n```\r\n\r\n(I have also deleted the class test)\r\n\r\nAdd the following dependancy in pom.xml:\r\n```\r\n<dependency>\r\n            <groupId>io.quarkus</groupId>\r\n            <artifactId>quarkus-smallrye-openapi</artifactId>\r\n        </dependency>\r\n```\r\n\r\nUsing swagger, I execute the first endpoint with any value for the path param \"variable\".\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\nopenjdk version \"17.0.9\"\n\n### Quarkus version or git rev\n\n3.2.12.FINAL\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nMaven 3.9.2\n\n### Additional information\n\n_No response_",
    "issue_word_count": 435,
    "test_files_count": 1,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "core/runtime/src/main/java/io/quarkus/runtime/util/HashUtil.java",
      "extensions/resteasy-reactive/rest/deployment/src/main/java/io/quarkus/resteasy/reactive/server/deployment/QuarkusInvokerFactory.java",
      "extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/ResourceMethodSameSignatureTest.java",
      "independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/HashUtil.java"
    ],
    "pr_changed_test_files": [
      "extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/ResourceMethodSameSignatureTest.java"
    ],
    "base_commit": "07e3041be03a3460b220522ae8870292334b16ba",
    "head_commit": "2db147eb33f85a2074cbc17492d93d3572cac2a9",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47065",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47065",
    "dockerfile": "",
    "pr_merged_at": "2025-03-31T05:14:06.000Z",
    "patch": "diff --git a/core/runtime/src/main/java/io/quarkus/runtime/util/HashUtil.java b/core/runtime/src/main/java/io/quarkus/runtime/util/HashUtil.java\nindex e70a7c6d65ddc..e97f8fce9d4cc 100644\n--- a/core/runtime/src/main/java/io/quarkus/runtime/util/HashUtil.java\n+++ b/core/runtime/src/main/java/io/quarkus/runtime/util/HashUtil.java\n@@ -16,7 +16,7 @@ private static MessageDigest getMessageDigest(String alg) {\n \n     private static void toHex(byte[] digest, StringBuilder sb) {\n         for (int i = 0; i < digest.length; ++i) {\n-            sb.append(Integer.toHexString((digest[i] & 0xFF) | 0x100).substring(1, 3));\n+            sb.append(Integer.toHexString((digest[i] & 0xFF) | 0x100), 1, 3);\n         }\n     }\n \n\ndiff --git a/extensions/resteasy-reactive/rest/deployment/src/main/java/io/quarkus/resteasy/reactive/server/deployment/QuarkusInvokerFactory.java b/extensions/resteasy-reactive/rest/deployment/src/main/java/io/quarkus/resteasy/reactive/server/deployment/QuarkusInvokerFactory.java\nindex 80bdce0deba84..fddb325052e84 100644\n--- a/extensions/resteasy-reactive/rest/deployment/src/main/java/io/quarkus/resteasy/reactive/server/deployment/QuarkusInvokerFactory.java\n+++ b/extensions/resteasy-reactive/rest/deployment/src/main/java/io/quarkus/resteasy/reactive/server/deployment/QuarkusInvokerFactory.java\n@@ -1,12 +1,12 @@\n package io.quarkus.resteasy.reactive.server.deployment;\n \n import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n import java.util.function.Supplier;\n \n import org.jboss.jandex.ClassInfo;\n import org.jboss.jandex.MethodInfo;\n import org.jboss.jandex.Type;\n-import org.jboss.resteasy.reactive.common.model.MethodParameter;\n import org.jboss.resteasy.reactive.common.model.ResourceMethod;\n import org.jboss.resteasy.reactive.common.processor.HashUtil;\n import org.jboss.resteasy.reactive.server.processor.EndpointInvokerFactory;\n@@ -34,14 +34,14 @@ public QuarkusInvokerFactory(BuildProducer<GeneratedClassBuildItem> generatedCla\n     @Override\n     public Supplier<EndpointInvoker> create(ResourceMethod method, ClassInfo currentClassInfo, MethodInfo info) {\n \n-        StringBuilder sigBuilder = new StringBuilder();\n-        sigBuilder.append(method.getName())\n-                .append(method.getReturnType());\n-        for (MethodParameter t : method.getParameters()) {\n-            sigBuilder.append(t);\n-        }\n+        String endpointIdentifier = info.toString() +\n+                method.getHttpMethod() +\n+                method.getPath() +\n+                Arrays.toString(method.getConsumes()) +\n+                Arrays.toString(method.getProduces());\n+\n         String baseName = currentClassInfo.name() + \"$quarkusrestinvoker$\" + method.getName() + \"_\"\n-                + HashUtil.sha1(sigBuilder.toString());\n+                + HashUtil.sha1(endpointIdentifier);\n         try (ClassCreator classCreator = new ClassCreator(\n                 new GeneratedClassGizmoAdaptor(generatedClassBuildItemBuildProducer, true), baseName, null,\n                 Object.class.getName(), EndpointInvoker.class.getName())) {\n\ndiff --git a/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/HashUtil.java b/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/HashUtil.java\nindex 1b01d6e14c875..39575c5ba9597 100644\n--- a/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/HashUtil.java\n+++ b/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/HashUtil.java\n@@ -20,7 +20,7 @@ public static String sha1(byte[] value) {\n             byte[] digest = md.digest(value);\n             StringBuilder sb = new StringBuilder(40);\n             for (int i = 0; i < digest.length; ++i) {\n-                sb.append(Integer.toHexString((digest[i] & 0xFF) | 0x100).substring(1, 3));\n+                sb.append(Integer.toHexString((digest[i] & 0xFF) | 0x100), 1, 3);\n             }\n             return sb.toString();\n         } catch (NoSuchAlgorithmException e) {\n@@ -38,7 +38,7 @@ public static String sha256(byte[] value) {\n             byte[] digest = md.digest(value);\n             StringBuilder sb = new StringBuilder(40);\n             for (int i = 0; i < digest.length; ++i) {\n-                sb.append(Integer.toHexString((digest[i] & 0xFF) | 0x100).substring(1, 3));\n+                sb.append(Integer.toHexString((digest[i] & 0xFF) | 0x100), 1, 3);\n             }\n             return sb.toString();\n         } catch (NoSuchAlgorithmException e) {\n",
    "test_patch": "diff --git a/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/ResourceMethodSameSignatureTest.java b/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/ResourceMethodSameSignatureTest.java\nnew file mode 100644\nindex 0000000000000..143523ae45322\n--- /dev/null\n+++ b/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/ResourceMethodSameSignatureTest.java\n@@ -0,0 +1,84 @@\n+package io.quarkus.resteasy.reactive.server.test.resource.basic;\n+\n+import java.util.List;\n+\n+import jakarta.enterprise.context.ApplicationScoped;\n+import jakarta.ws.rs.Consumes;\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.POST;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.PathParam;\n+import jakarta.ws.rs.Produces;\n+import jakarta.ws.rs.core.MediaType;\n+\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+import io.restassured.RestAssured;\n+\n+class ResourceMethodSameSignatureTest {\n+    @RegisterExtension\n+    static final QuarkusUnitTest TEST = new QuarkusUnitTest()\n+            .withApplicationRoot((jar) -> jar\n+                    .addClass(GreetingResource.class));\n+\n+    @Test\n+    void basicTest() {\n+        RestAssured.get(\"/greetings/Quarkus\")\n+                .then()\n+                .statusCode(200)\n+                .body(Matchers.equalTo(\"Hello Quarkus\"));\n+\n+        RestAssured.get(\"/greetings/Quarkus/with-question\")\n+                .then()\n+                .statusCode(200)\n+                .body(Matchers.equalTo(\"Hello [Quarkus], how are you?\"));\n+\n+        RestAssured.given().contentType(\"text/plain\").post(\"/greetings/Quarkus\")\n+                .then()\n+                .statusCode(200)\n+                .body(Matchers.equalTo(\"Hello Quarkus\"));\n+\n+        RestAssured.given().contentType(\"application/xml\").post(\"/greetings/Quarkus\")\n+                .then()\n+                .statusCode(200)\n+                .body(Matchers.equalTo(\"Hello [Quarkus], how are you?\"));\n+    }\n+\n+    @Path(\"/greetings\")\n+    @ApplicationScoped\n+    public static class GreetingResource {\n+\n+        @GET\n+        @Path(\"/{name}\")\n+        @Produces(MediaType.TEXT_PLAIN)\n+        public String hello(@PathParam(\"name\") String name) {\n+            return \"Hello %s\".formatted(name);\n+        }\n+\n+        @GET\n+        @Path(\"/{name}/with-question\")\n+        @Produces(MediaType.TEXT_PLAIN)\n+        public String hello(@PathParam(\"name\") List<String> name) {\n+            return \"Hello %s, how are you?\".formatted(name);\n+        }\n+\n+        @POST\n+        @Path(\"/{name}\")\n+        @Consumes(MediaType.TEXT_PLAIN)\n+        @Produces(MediaType.TEXT_PLAIN)\n+        public String hello(@PathParam(\"name\") String name, String ignored) {\n+            return \"Hello %s\".formatted(name);\n+        }\n+\n+        @POST\n+        @Path(\"/{name}\")\n+        @Consumes(MediaType.APPLICATION_XML)\n+        @Produces(MediaType.TEXT_PLAIN)\n+        public String hello(@PathParam(\"name\") List<String> name, String ignored) {\n+            return \"Hello %s, how are you?\".formatted(name);\n+        }\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47057",
    "pr_id": 47057,
    "issue_id": 47031,
    "repo": "quarkusio/quarkus",
    "problem_statement": "OpenTelemetry: disabling tracing while keeping metrics enabled leads to UnsatisfiedResolutionException\n### Describe the bug\n\nWhen using the *quarkus-opentelemetry* extension, setting the following config:\n```\nquarkus.otel.metrics.enabled=true\nquarkus.otel.traces.enabled=false\n```\nleads to Quarkus failing to start because of the following error:\n```\njakarta.enterprise.inject.UnsatisfiedResolutionException: No bean found for required type [class io.quarkus.opentelemetry.runtime.tracing.DelayedAttributes] and qualifiers [[@jakarta.enterprise.inject.Any()]]\n```\n\n### Expected behavior\n\nApplication should start with OpenTelemetry metrics enabled and tracing disabled.\n\n### Actual behavior\n\nQuarkus fails to start emitting the following stracktrace:\n```\n2025-03-27 11:25:01,013 ERROR [io.qua.run.Application] (Quarkus Main Thread) Failed to start application: java.lang.RuntimeException: Failed to start quarkus\n        at io.quarkus.runner.ApplicationImpl.doStart(Unknown Source)\n        at io.quarkus.runtime.Application.start(Application.java:101)\n        at io.quarkus.runtime.ApplicationLifecycleManager.run(ApplicationLifecycleManager.java:121)\n        at io.quarkus.runtime.Quarkus.run(Quarkus.java:77)\n        at io.quarkus.runtime.Quarkus.run(Quarkus.java:48)\n        at io.quarkus.runtime.Quarkus.run(Quarkus.java:137)\n        at io.quarkus.runner.GeneratedMain.main(Unknown Source)\n        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n        at java.base/java.lang.reflect.Method.invoke(Method.java:580)\n        at io.quarkus.runner.bootstrap.StartupActionImpl$1.run(StartupActionImpl.java:116)\n        at java.base/java.lang.Thread.run(Thread.java:1575)\nCaused by: jakarta.enterprise.inject.CreationException: Error creating synthetic bean [Le6zQbzkojAYO_OiKIQWJf4lGa4]: jakarta.enterprise.inject.UnsatisfiedResolutionException: No bean found for required type [class io.quarkus.opentelemetry.runtime.tracing.DelayedAttributes] and qualifiers [[@jakarta.enterprise.inject.Any()]]\n        at io.opentelemetry.api.OpenTelemetry_Le6zQbzkojAYO_OiKIQWJf4lGa4_Synthetic_Bean.doCreate(Unknown Source)\n        at io.opentelemetry.api.OpenTelemetry_Le6zQbzkojAYO_OiKIQWJf4lGa4_Synthetic_Bean.create(Unknown Source)\n        at io.opentelemetry.api.OpenTelemetry_Le6zQbzkojAYO_OiKIQWJf4lGa4_Synthetic_Bean.create(Unknown Source)\n        at io.quarkus.arc.impl.AbstractSharedContext.createInstanceHandle(AbstractSharedContext.java:119)\n        at io.quarkus.arc.impl.AbstractSharedContext$1.get(AbstractSharedContext.java:38)\n        at io.quarkus.arc.impl.AbstractSharedContext$1.get(AbstractSharedContext.java:35)\n        at io.quarkus.arc.impl.LazyValue.get(LazyValue.java:32)\n        at io.quarkus.arc.impl.ComputingCache.computeIfAbsent(ComputingCache.java:69)\n        at io.quarkus.arc.impl.ComputingCacheContextInstances.computeIfAbsent(ComputingCacheContextInstances.java:19)\n        at io.quarkus.arc.impl.AbstractSharedContext.get(AbstractSharedContext.java:35)\n        at io.opentelemetry.api.OpenTelemetry_Le6zQbzkojAYO_OiKIQWJf4lGa4_Synthetic_Bean.get(Unknown Source)\n        at io.opentelemetry.api.OpenTelemetry_Le6zQbzkojAYO_OiKIQWJf4lGa4_Synthetic_Bean.get(Unknown Source)\n        at io.quarkus.arc.impl.InstanceImpl.getBeanInstance(InstanceImpl.java:325)\n        at io.quarkus.arc.impl.InstanceImpl.getInternal(InstanceImpl.java:309)\n        at io.quarkus.arc.impl.InstanceImpl.get(InstanceImpl.java:190)\n        at io.quarkus.arc.runtime.BeanContainerImpl.beanInstance(BeanContainerImpl.java:28)\n        at io.quarkus.opentelemetry.runtime.tracing.intrumentation.InstrumentationRecorder.setupVertxTracer(InstrumentationRecorder.java:59)\n        at io.quarkus.runner.recorded.OpenTelemetryProcessor$setupVertx1012958309.deploy_0(Unknown Source)\n        at io.quarkus.runner.recorded.OpenTelemetryProcessor$setupVertx1012958309.deploy(Unknown Source)\n        ... 11 more\nCaused by: jakarta.enterprise.inject.UnsatisfiedResolutionException: No bean found for required type [class io.quarkus.opentelemetry.runtime.tracing.DelayedAttributes] and qualifiers [[@jakarta.enterprise.inject.Any()]]\n        at io.quarkus.arc.impl.InstanceImpl.bean(InstanceImpl.java:288)\n        at io.quarkus.arc.impl.InstanceImpl.getInternal(InstanceImpl.java:309)\n        at io.quarkus.arc.impl.InstanceImpl.get(InstanceImpl.java:190)\n        at io.quarkus.opentelemetry.runtime.AutoConfiguredOpenTelemetrySdkBuilderCustomizer$TracingResourceCustomizer$1.apply(AutoConfiguredOpenTelemetrySdkBuilderCustomizer.java:118)\n        at io.quarkus.opentelemetry.runtime.AutoConfiguredOpenTelemetrySdkBuilderCustomizer$TracingResourceCustomizer$1.apply(AutoConfiguredOpenTelemetrySdkBuilderCustomizer.java:112)\n        at io.opentelemetry.sdk.autoconfigure.AutoConfiguredOpenTelemetrySdkBuilder.lambda$mergeCustomizer$13(AutoConfiguredOpenTelemetrySdkBuilder.java:653)\n        at io.opentelemetry.sdk.autoconfigure.ResourceConfiguration.configureResource(ResourceConfiguration.java:117)\n        at io.opentelemetry.sdk.autoconfigure.AutoConfiguredOpenTelemetrySdkBuilder.build(AutoConfiguredOpenTelemetrySdkBuilder.java:441)\n        at io.quarkus.opentelemetry.runtime.OpenTelemetryRecorder$1.apply(OpenTelemetryRecorder.java:87)\n        at io.quarkus.opentelemetry.runtime.OpenTelemetryRecorder$1.apply(OpenTelemetryRecorder.java:60)\n        at io.opentelemetry.api.OpenTelemetry_Le6zQbzkojAYO_OiKIQWJf4lGa4_Synthetic_Bean.createSynthetic(Unknown Source)\n        ... 30 more\n```\n\n### How to Reproduce?\n\nMinimal reproducer: https://github.com/Ultranium/quarkus-opentelemetry-reproducer\n\n### Output of `uname -a` or `ver`\n\nLinux desktop 6.13.5-200.fc41.x86_64 #1 SMP PREEMPT_DYNAMIC Thu Feb 27 15:07:31 UTC 2025 x86_64 GNU/Linux\n\n### Output of `java -version`\n\nopenjdk version \"21.0.6\" 2025-01-21\n\n### Quarkus version or git rev\n\n3.21.0, 3.19.4\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nGradle 8.12\n\n### Additional information\n\nRelated discussion: https://github.com/quarkusio/quarkus/discussions/47011",
    "issue_word_count": 669,
    "test_files_count": 1,
    "non_test_files_count": 6,
    "pr_changed_files": [
      "extensions/opentelemetry/deployment/src/main/java/io/quarkus/opentelemetry/deployment/OpenTelemetryProcessor.java",
      "extensions/opentelemetry/deployment/src/main/java/io/quarkus/opentelemetry/deployment/tracing/TracerProcessor.java",
      "extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/traces/OpenTelemetryTracingDisabledTest.java",
      "extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/AutoConfiguredOpenTelemetrySdkBuilderCustomizer.java",
      "extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/DelayedAttributes.java",
      "extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/OpenTelemetryRecorder.java",
      "extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/tracing/TracerRecorder.java"
    ],
    "pr_changed_test_files": [
      "extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/traces/OpenTelemetryTracingDisabledTest.java"
    ],
    "base_commit": "de3c319d04b01e3661a597c755e685a6aee6baff",
    "head_commit": "6bc5d93c4833c32720708db8cd5898dc120b2c5a",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47057",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47057",
    "dockerfile": "",
    "pr_merged_at": "2025-03-28T14:33:57.000Z",
    "patch": "diff --git a/extensions/opentelemetry/deployment/src/main/java/io/quarkus/opentelemetry/deployment/OpenTelemetryProcessor.java b/extensions/opentelemetry/deployment/src/main/java/io/quarkus/opentelemetry/deployment/OpenTelemetryProcessor.java\nindex 35969342b0230..116f90d2f32b6 100644\n--- a/extensions/opentelemetry/deployment/src/main/java/io/quarkus/opentelemetry/deployment/OpenTelemetryProcessor.java\n+++ b/extensions/opentelemetry/deployment/src/main/java/io/quarkus/opentelemetry/deployment/OpenTelemetryProcessor.java\n@@ -23,6 +23,7 @@\n import org.jboss.jandex.Type;\n \n import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.common.Attributes;\n import io.opentelemetry.exporter.otlp.internal.OtlpLogRecordExporterProvider;\n import io.opentelemetry.exporter.otlp.internal.OtlpMetricExporterProvider;\n import io.opentelemetry.exporter.otlp.internal.OtlpSpanExporterProvider;\n@@ -45,6 +46,7 @@\n import io.quarkus.arc.deployment.ValidationPhaseBuildItem.ValidationErrorBuildItem;\n import io.quarkus.arc.processor.InterceptorBindingRegistrar;\n import io.quarkus.arc.processor.Transformation;\n+import io.quarkus.builder.Version;\n import io.quarkus.datasource.common.runtime.DataSourceUtil;\n import io.quarkus.deployment.Capabilities;\n import io.quarkus.deployment.Capability;\n@@ -53,6 +55,7 @@\n import io.quarkus.deployment.annotations.BuildSteps;\n import io.quarkus.deployment.annotations.ExecutionTime;\n import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.builditem.ApplicationInfoBuildItem;\n import io.quarkus.deployment.builditem.LaunchModeBuildItem;\n import io.quarkus.deployment.builditem.RemovedResourceBuildItem;\n import io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBuildItem;\n@@ -63,6 +66,7 @@\n import io.quarkus.maven.dependency.ArtifactKey;\n import io.quarkus.opentelemetry.OpenTelemetryDestroyer;\n import io.quarkus.opentelemetry.runtime.AutoConfiguredOpenTelemetrySdkBuilderCustomizer;\n+import io.quarkus.opentelemetry.runtime.DelayedAttributes;\n import io.quarkus.opentelemetry.runtime.OpenTelemetryRecorder;\n import io.quarkus.opentelemetry.runtime.QuarkusContextStorage;\n import io.quarkus.opentelemetry.runtime.config.build.ExporterType;\n@@ -96,7 +100,7 @@ AdditionalBeanBuildItem ensureProducerIsRetained() {\n                 .setUnremovable()\n                 .addBeanClasses(\n                         AutoConfiguredOpenTelemetrySdkBuilderCustomizer.SimpleLogRecordProcessorCustomizer.class,\n-                        AutoConfiguredOpenTelemetrySdkBuilderCustomizer.TracingResourceCustomizer.class,\n+                        AutoConfiguredOpenTelemetrySdkBuilderCustomizer.ResourceCustomizer.class,\n                         AutoConfiguredOpenTelemetrySdkBuilderCustomizer.SamplerCustomizer.class,\n                         AutoConfiguredOpenTelemetrySdkBuilderCustomizer.TracerProviderCustomizer.class,\n                         AutoConfiguredOpenTelemetrySdkBuilderCustomizer.MetricProviderCustomizer.class,\n@@ -104,6 +108,18 @@ AdditionalBeanBuildItem ensureProducerIsRetained() {\n                 .build();\n     }\n \n+    // Signal independent resource attributes\n+    @BuildStep\n+    @Record(ExecutionTime.STATIC_INIT)\n+    SyntheticBeanBuildItem setupDelayedAttribute(OpenTelemetryRecorder recorder, ApplicationInfoBuildItem appInfo) {\n+        return SyntheticBeanBuildItem.configure(DelayedAttributes.class).types(Attributes.class)\n+                .supplier(recorder.delayedAttributes(Version.getVersion(),\n+                        appInfo.getName(), appInfo.getVersion()))\n+                .scope(Singleton.class)\n+                .setRuntimeInit()\n+                .done();\n+    }\n+\n     @BuildStep\n     @Record(ExecutionTime.RUNTIME_INIT)\n     void openTelemetryBean(OpenTelemetryRecorder recorder,\n\ndiff --git a/extensions/opentelemetry/deployment/src/main/java/io/quarkus/opentelemetry/deployment/tracing/TracerProcessor.java b/extensions/opentelemetry/deployment/src/main/java/io/quarkus/opentelemetry/deployment/tracing/TracerProcessor.java\nindex c7576783e9d25..1c9928aa491b1 100644\n--- a/extensions/opentelemetry/deployment/src/main/java/io/quarkus/opentelemetry/deployment/tracing/TracerProcessor.java\n+++ b/extensions/opentelemetry/deployment/src/main/java/io/quarkus/opentelemetry/deployment/tracing/TracerProcessor.java\n@@ -15,7 +15,6 @@\n import java.util.function.BooleanSupplier;\n \n import jakarta.enterprise.inject.spi.EventContext;\n-import jakarta.inject.Singleton;\n \n import org.jboss.jandex.AnnotationInstance;\n import org.jboss.jandex.AnnotationTarget;\n@@ -25,7 +24,6 @@\n import org.jboss.jandex.MethodInfo;\n import org.jboss.logging.Logger;\n \n-import io.opentelemetry.api.common.Attributes;\n import io.opentelemetry.context.propagation.TextMapPropagator;\n import io.opentelemetry.sdk.resources.Resource;\n import io.opentelemetry.sdk.trace.IdGenerator;\n@@ -35,10 +33,8 @@\n import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n import io.quarkus.arc.deployment.ObserverRegistrationPhaseBuildItem;\n import io.quarkus.arc.deployment.ObserverRegistrationPhaseBuildItem.ObserverConfiguratorBuildItem;\n-import io.quarkus.arc.deployment.SyntheticBeanBuildItem;\n import io.quarkus.arc.deployment.UnremovableBeanBuildItem;\n import io.quarkus.arc.processor.DotNames;\n-import io.quarkus.builder.Version;\n import io.quarkus.deployment.Capabilities;\n import io.quarkus.deployment.Capability;\n import io.quarkus.deployment.annotations.BuildProducer;\n@@ -46,13 +42,11 @@\n import io.quarkus.deployment.annotations.BuildSteps;\n import io.quarkus.deployment.annotations.ExecutionTime;\n import io.quarkus.deployment.annotations.Record;\n-import io.quarkus.deployment.builditem.ApplicationInfoBuildItem;\n import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n import io.quarkus.gizmo.MethodDescriptor;\n import io.quarkus.gizmo.ResultHandle;\n import io.quarkus.opentelemetry.runtime.config.build.OTelBuildConfig;\n import io.quarkus.opentelemetry.runtime.config.build.OTelBuildConfig.SecurityEvents.SecurityEventType;\n-import io.quarkus.opentelemetry.runtime.tracing.DelayedAttributes;\n import io.quarkus.opentelemetry.runtime.tracing.TracerRecorder;\n import io.quarkus.opentelemetry.runtime.tracing.cdi.TracerProducer;\n import io.quarkus.opentelemetry.runtime.tracing.security.EndUserSpanProcessor;\n@@ -172,17 +166,6 @@ void dropNames(\n         dropStaticResources.produce(new DropStaticResourcesBuildItem(resources));\n     }\n \n-    @BuildStep\n-    @Record(ExecutionTime.STATIC_INIT)\n-    SyntheticBeanBuildItem setupDelayedAttribute(TracerRecorder recorder, ApplicationInfoBuildItem appInfo) {\n-        return SyntheticBeanBuildItem.configure(DelayedAttributes.class).types(Attributes.class)\n-                .supplier(recorder.delayedAttributes(Version.getVersion(),\n-                        appInfo.getName(), appInfo.getVersion()))\n-                .scope(Singleton.class)\n-                .setRuntimeInit()\n-                .done();\n-    }\n-\n     @BuildStep\n     @Record(ExecutionTime.STATIC_INIT)\n     void setupSampler(\n\ndiff --git a/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/AutoConfiguredOpenTelemetrySdkBuilderCustomizer.java b/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/AutoConfiguredOpenTelemetrySdkBuilderCustomizer.java\nindex 3706eb9fd5c73..011efa6b4f8f6 100644\n--- a/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/AutoConfiguredOpenTelemetrySdkBuilderCustomizer.java\n+++ b/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/AutoConfiguredOpenTelemetrySdkBuilderCustomizer.java\n@@ -35,7 +35,6 @@\n import io.quarkus.opentelemetry.runtime.config.runtime.OTelRuntimeConfig;\n import io.quarkus.opentelemetry.runtime.exporter.otlp.tracing.RemoveableLateBoundSpanProcessor;\n import io.quarkus.opentelemetry.runtime.propagation.TextMapPropagatorCustomizer;\n-import io.quarkus.opentelemetry.runtime.tracing.DelayedAttributes;\n import io.quarkus.opentelemetry.runtime.tracing.DropTargetsSampler;\n import io.quarkus.opentelemetry.runtime.tracing.TracerRecorder;\n import io.quarkus.opentelemetry.runtime.tracing.TracerUtil;\n@@ -87,7 +86,7 @@ public LogRecordProcessor apply(LogRecordProcessor lrp, ConfigProperties cp) {\n     }\n \n     @Singleton\n-    final class TracingResourceCustomizer implements AutoConfiguredOpenTelemetrySdkBuilderCustomizer {\n+    final class ResourceCustomizer implements AutoConfiguredOpenTelemetrySdkBuilderCustomizer {\n \n         private final ApplicationConfig appConfig;\n         private final OTelBuildConfig oTelBuildConfig;\n@@ -95,7 +94,7 @@ final class TracingResourceCustomizer implements AutoConfiguredOpenTelemetrySdkB\n         private final Instance<DelayedAttributes> delayedAttributes;\n         private final List<Resource> resources;\n \n-        public TracingResourceCustomizer(ApplicationConfig appConfig,\n+        public ResourceCustomizer(ApplicationConfig appConfig,\n                 OTelBuildConfig oTelBuildConfig,\n                 OTelRuntimeConfig oTelRuntimeConfig,\n                 @Any Instance<DelayedAttributes> delayedAttributes,\n@@ -112,36 +111,31 @@ public void customize(AutoConfiguredOpenTelemetrySdkBuilder builder) {\n             builder.addResourceCustomizer(new BiFunction<>() {\n                 @Override\n                 public Resource apply(Resource existingResource, ConfigProperties configProperties) {\n-                    if (oTelBuildConfig.traces().enabled().orElse(TRUE) ||\n-                            oTelBuildConfig.metrics().enabled().orElse(TRUE)) {\n-                        Resource consolidatedResource = existingResource.merge(\n-                                Resource.create(delayedAttributes.get()));\n-\n-                        // if user explicitly set 'otel.service.name', make sure we don't override it with defaults\n-                        // inside resource customizer\n-                        String serviceName = oTelRuntimeConfig\n-                                .serviceName()\n-                                .filter(new Predicate<String>() {\n-                                    @Override\n-                                    public boolean test(String sn) {\n-                                        return !sn.equals(appConfig.name().orElse(\"unset\"));\n-                                    }\n-                                })\n-                                .orElse(null);\n-\n-                        String hostname = getHostname();\n-\n-                        // Merge resource instances with env attributes\n-                        Resource resource = resources.stream()\n-                                .reduce(Resource.empty(), Resource::merge)\n-                                .merge(TracerUtil.mapResourceAttributes(\n-                                        oTelRuntimeConfig.resourceAttributes().orElse(emptyList()),\n-                                        serviceName, // from properties\n-                                        hostname));\n-                        return consolidatedResource.merge(resource);\n-                    } else {\n-                        return Resource.builder().build();\n-                    }\n+                    Resource consolidatedResource = existingResource.merge(\n+                            Resource.create(delayedAttributes.get()));\n+\n+                    // if user explicitly set 'otel.service.name', make sure we don't override it with defaults\n+                    // inside resource customizer\n+                    String serviceName = oTelRuntimeConfig\n+                            .serviceName()\n+                            .filter(new Predicate<String>() {\n+                                @Override\n+                                public boolean test(String sn) {\n+                                    return !sn.equals(appConfig.name().orElse(\"unset\"));\n+                                }\n+                            })\n+                            .orElse(null);\n+\n+                    String hostname = getHostname();\n+\n+                    // Merge resource instances with env attributes\n+                    Resource resource = resources.stream()\n+                            .reduce(Resource.empty(), Resource::merge)\n+                            .merge(TracerUtil.mapResourceAttributes(\n+                                    oTelRuntimeConfig.resourceAttributes().orElse(emptyList()),\n+                                    serviceName, // from properties\n+                                    hostname));\n+                    return consolidatedResource.merge(resource);\n                 }\n             });\n         }\n\ndiff --git a/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/tracing/DelayedAttributes.java b/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/DelayedAttributes.java\nsimilarity index 98%\nrename from extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/tracing/DelayedAttributes.java\nrename to extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/DelayedAttributes.java\nindex 1360ddd5a2fc3..30d121f6cabab 100644\n--- a/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/tracing/DelayedAttributes.java\n+++ b/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/DelayedAttributes.java\n@@ -1,4 +1,4 @@\n-package io.quarkus.opentelemetry.runtime.tracing;\n+package io.quarkus.opentelemetry.runtime;\n \n import java.util.Collections;\n import java.util.Map;\n\ndiff --git a/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/OpenTelemetryRecorder.java b/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/OpenTelemetryRecorder.java\nindex 8b950ed3087ee..d01f31e34f583 100644\n--- a/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/OpenTelemetryRecorder.java\n+++ b/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/OpenTelemetryRecorder.java\n@@ -1,5 +1,10 @@\n package io.quarkus.opentelemetry.runtime;\n \n+import static io.opentelemetry.semconv.ServiceAttributes.SERVICE_NAME;\n+import static io.opentelemetry.semconv.ServiceAttributes.SERVICE_VERSION;\n+import static io.opentelemetry.semconv.incubating.WebengineIncubatingAttributes.WEBENGINE_NAME;\n+import static io.opentelemetry.semconv.incubating.WebengineIncubatingAttributes.WEBENGINE_VERSION;\n+\n import java.time.Duration;\n import java.util.HashMap;\n import java.util.Map;\n@@ -14,9 +19,11 @@\n \n import io.opentelemetry.api.GlobalOpenTelemetry;\n import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.common.Attributes;\n import io.opentelemetry.api.incubator.events.GlobalEventLoggerProvider;\n import io.opentelemetry.context.ContextStorage;\n import io.opentelemetry.sdk.autoconfigure.AutoConfiguredOpenTelemetrySdk;\n+import io.opentelemetry.sdk.resources.Resource;\n import io.quarkus.arc.SyntheticCreationalContext;\n import io.quarkus.opentelemetry.runtime.config.runtime.OTelRuntimeConfig;\n import io.quarkus.runtime.RuntimeValue;\n@@ -39,6 +46,27 @@ public void resetGlobalOpenTelemetryForDevMode() {\n         GlobalEventLoggerProvider.resetForTest();\n     }\n \n+    @StaticInit\n+    public Supplier<DelayedAttributes> delayedAttributes(String quarkusVersion,\n+            String serviceName,\n+            String serviceVersion) {\n+        return new Supplier<>() {\n+            @Override\n+            public DelayedAttributes get() {\n+                var result = new DelayedAttributes();\n+                result.setAttributesDelegate(Resource.getDefault()\n+                        .merge(Resource.create(\n+                                Attributes.of(\n+                                        SERVICE_NAME, serviceName,\n+                                        SERVICE_VERSION, serviceVersion,\n+                                        WEBENGINE_NAME, \"Quarkus\",\n+                                        WEBENGINE_VERSION, quarkusVersion)))\n+                        .getAttributes());\n+                return result;\n+            }\n+        };\n+    }\n+\n     @RuntimeInit\n     public RuntimeValue<Boolean> isOtelSdkEnabled(OTelRuntimeConfig oTelRuntimeConfig) {\n         return new RuntimeValue<>(!oTelRuntimeConfig.sdkDisabled());\n\ndiff --git a/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/tracing/TracerRecorder.java b/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/tracing/TracerRecorder.java\nindex 9445e53ed4175..e2ba880c1548b 100644\n--- a/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/tracing/TracerRecorder.java\n+++ b/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/tracing/TracerRecorder.java\n@@ -1,17 +1,9 @@\n package io.quarkus.opentelemetry.runtime.tracing;\n \n-import static io.opentelemetry.semconv.ServiceAttributes.SERVICE_NAME;\n-import static io.opentelemetry.semconv.ServiceAttributes.SERVICE_VERSION;\n-import static io.opentelemetry.semconv.incubating.WebengineIncubatingAttributes.WEBENGINE_NAME;\n-import static io.opentelemetry.semconv.incubating.WebengineIncubatingAttributes.WEBENGINE_VERSION;\n-\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import java.util.function.Supplier;\n \n-import io.opentelemetry.api.common.Attributes;\n-import io.opentelemetry.sdk.resources.Resource;\n import io.quarkus.runtime.annotations.Recorder;\n import io.quarkus.runtime.annotations.StaticInit;\n \n@@ -21,27 +13,6 @@ public class TracerRecorder {\n     public static final Set<String> dropNonApplicationUriTargets = new HashSet<>();\n     public static final Set<String> dropStaticResourceTargets = new HashSet<>();\n \n-    @StaticInit\n-    public Supplier<DelayedAttributes> delayedAttributes(String quarkusVersion,\n-            String serviceName,\n-            String serviceVersion) {\n-        return new Supplier<>() {\n-            @Override\n-            public DelayedAttributes get() {\n-                var result = new DelayedAttributes();\n-                result.setAttributesDelegate(Resource.getDefault()\n-                        .merge(Resource.create(\n-                                Attributes.of(\n-                                        SERVICE_NAME, serviceName,\n-                                        SERVICE_VERSION, serviceVersion,\n-                                        WEBENGINE_NAME, \"Quarkus\",\n-                                        WEBENGINE_VERSION, quarkusVersion)))\n-                        .getAttributes());\n-                return result;\n-            }\n-        };\n-    }\n-\n     @StaticInit\n     public void setupSampler(\n             List<String> dropNonApplicationUris,\n",
    "test_patch": "diff --git a/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/traces/OpenTelemetryTracingDisabledTest.java b/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/traces/OpenTelemetryTracingDisabledTest.java\nnew file mode 100644\nindex 0000000000000..9bc89cf769d9b\n--- /dev/null\n+++ b/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/traces/OpenTelemetryTracingDisabledTest.java\n@@ -0,0 +1,28 @@\n+package io.quarkus.opentelemetry.deployment.traces;\n+\n+import jakarta.inject.Inject;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class OpenTelemetryTracingDisabledTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .withEmptyApplication()\n+            .overrideConfigKey(\"quarkus.otel.traces.enabled\", \"false\")\n+            .overrideConfigKey(\"quarkus.otel.metrics.enabled\", \"true\")\n+            .overrideConfigKey(\"quarkus.otel.logs.enabled\", \"true\");\n+\n+    @Inject\n+    OpenTelemetry openTelemetry;\n+\n+    @Test\n+    void testNoOpenTelemetry() {\n+        Assertions.assertNotNull(openTelemetry, \"A OpenTelemetry instance must be available\");\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47049",
    "pr_id": 47049,
    "issue_id": 47032,
    "repo": "quarkusio/quarkus",
    "problem_statement": "quarkus-tls-registry 'javax.net.ssl' causes \"java.lang.IllegalStateException: No CN or OU in O=xxx,C=xxx\" and crashs quarkus application starts\n### Describe the bug\n\nWhen a quarkus application is using the tls configuration name `javax.net.ssl`, created by default by `quarkus-tls-registry`, there is a control on the certificates stored in the cacerts : if one certificate doesn't have a CN or OU, quarkus throws an exception `java.lang.IllegalStateException: No CN or OU in O=xxx,C=xxx` and crash the application.  \nThis check is new, it has been added from Quarkus 3.19 : see `io.quarkus.tls.runtime.JavaxNetSslTrustStoreProvider` and also see https://github.com/quarkusio/quarkus/blob/974851eb4a5003745e642882804516f03b297d58/extensions/tls-registry/runtime/src/main/java/io/quarkus/tls/runtime/CertificateRecorder.java#L177   \n  \nNote, if a tls configuration is defined in the application using the same trust store as the cacerts used by `javax.net.ssl` configuration, there is no error, the trust store is loaded. The check on the CN or OU doesn't applies.\n\n\n### Expected behavior\n\nThe application startup should not crash, i think a warning in the logs should be enough.\n\n### Actual behavior\n\nThe application startup crash with the exception `Caused by: java.lang.IllegalStateException: No CN or OU in O=Govxxxxx Authority,C=xxx` if the loaded cacerts contains at least one certificate with no CN or OU defined.\n\n### How to Reproduce?\n\nSee https://github.com/TucoBouchState/sslconf  \n\n### Output of `uname -a` or `ver`\n\nMicrosoft Windows [Version 10.0.26100.3194]\n\n### Output of `java -version`\n\nOpenJDK 64-Bit Server VM Temurin-21.0.6+7 (build 21.0.6+7-LTS, mixed mode, sharing)\n\n### Quarkus version or git rev\n\n3.19.4\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nApache Maven 3.9.9 (8e8579a9e76f7d015ee5ec7bfcdc97d260186937)\n\n### Additional information\n\nStack trace :\n```logs\nCaused by: java.lang.IllegalStateException: No CN or OU in O=Govxxxxx Authority,C=xxx\n\tat io.quarkus.tls.runtime.JavaxNetSslTrustStoreProvider$JavaNetSslTrustOptions.lambda$new$4(JavaxNetSslTrustStoreProvider.java:74)\n\tat java.base/java.util.Optional.orElseThrow(Optional.java:403)\n\tat io.quarkus.tls.runtime.JavaxNetSslTrustStoreProvider$JavaNetSslTrustOptions.lambda$new$5(JavaxNetSslTrustStoreProvider.java:74)\n\tat java.base/java.util.Optional.orElseGet(Optional.java:364)\n\tat io.quarkus.tls.runtime.JavaxNetSslTrustStoreProvider$JavaNetSslTrustOptions.<init>(JavaxNetSslTrustStoreProvider.java:70)\n\tat io.quarkus.tls.runtime.JavaxNetSslTrustStoreProvider.getTrustStore(JavaxNetSslTrustStoreProvider.java:45)\n\tat io.quarkus.tls.runtime.CertificateRecorder.lambda$get$0(CertificateRecorder.java:181)\n\tat java.base/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1708)\n\tat io.quarkus.tls.runtime.CertificateRecorder.get(CertificateRecorder.java:180)\n\tat io.quarkiverse.cxf.CXFClientInfo.tlsConfiguration(CXFClientInfo.java:344)\n\tat io.quarkiverse.cxf.CXFClientInfo.<init>(CXFClientInfo.java:269)\n\tat io.quarkiverse.cxf.CxfClientProducer.selectorCXFClientInfo(CxfClientProducer.java:298)\n\tat io.quarkiverse.cxf.CxfClientProducer.selectorCXFClientInfo(CxfClientProducer.java:[274\n```",
    "issue_word_count": 455,
    "test_files_count": 2,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "extensions/tls-registry/runtime/pom.xml",
      "extensions/tls-registry/runtime/src/main/java/io/quarkus/tls/runtime/JavaxNetSslTrustStoreProvider.java",
      "extensions/tls-registry/runtime/src/test/java/io/quarkus/tls/runtime/JavaxNetSslTrustStoreProviderTest.java",
      "extensions/tls-registry/runtime/src/test/resources/JavaxNetSslTrustStoreProviderTest.jks"
    ],
    "pr_changed_test_files": [
      "extensions/tls-registry/runtime/src/test/java/io/quarkus/tls/runtime/JavaxNetSslTrustStoreProviderTest.java",
      "extensions/tls-registry/runtime/src/test/resources/JavaxNetSslTrustStoreProviderTest.jks"
    ],
    "base_commit": "acad55663c16a62969fa79e37b116af9ddec1a72",
    "head_commit": "b67b51de9babaf197a8a88701bfdfc3c912a6c26",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47049",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47049",
    "dockerfile": "",
    "pr_merged_at": "2025-04-01T16:41:18.000Z",
    "patch": "diff --git a/extensions/tls-registry/runtime/pom.xml b/extensions/tls-registry/runtime/pom.xml\nindex d4147418b05af..18d5f7c9fa25b 100644\n--- a/extensions/tls-registry/runtime/pom.xml\n+++ b/extensions/tls-registry/runtime/pom.xml\n@@ -37,6 +37,17 @@\n             <artifactId>vertx-web</artifactId>\n             <optional>true</optional>\n         </dependency>\n+\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.assertj</groupId>\n+            <artifactId>assertj-core</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n     </dependencies>\n \n     <build>\n\ndiff --git a/extensions/tls-registry/runtime/src/main/java/io/quarkus/tls/runtime/JavaxNetSslTrustStoreProvider.java b/extensions/tls-registry/runtime/src/main/java/io/quarkus/tls/runtime/JavaxNetSslTrustStoreProvider.java\nindex 340d205155fb7..0ef273e0deb14 100644\n--- a/extensions/tls-registry/runtime/src/main/java/io/quarkus/tls/runtime/JavaxNetSslTrustStoreProvider.java\n+++ b/extensions/tls-registry/runtime/src/main/java/io/quarkus/tls/runtime/JavaxNetSslTrustStoreProvider.java\n@@ -6,8 +6,10 @@\n import java.security.NoSuchAlgorithmException;\n import java.security.cert.CertificateException;\n import java.security.cert.X509Certificate;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Locale;\n+import java.util.Set;\n import java.util.function.Function;\n \n import javax.naming.InvalidNameException;\n@@ -56,27 +58,7 @@ static class JavaNetSslTrustOptions implements TrustOptions {\n                 final TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n                 tmf.init((KeyStore) null);\n \n-                final String tsType = System.getProperty(\"javax.net.ssl.trustStoreType\", KeyStore.getDefaultType());\n-                final KeyStore cacerts = KeyStore.getInstance(tsType);\n-                cacerts.load(null, null);\n-                for (TrustManager tm : tmf.getTrustManagers()) {\n-                    for (X509Certificate c : ((X509TrustManager) tm).getAcceptedIssuers()) {\n-                        final String dn = c.getSubjectX500Principal().getName();\n-                        final List<Rdn> rdns = new LdapName(dn).getRdns();\n-                        String alias = rdns.stream()\n-                                .filter(rdn -> rdn.getType().equalsIgnoreCase(\"cn\"))\n-                                .map(rdn -> rdn.getValue().toString())\n-                                .findFirst()\n-                                .orElseGet(() -> rdns.stream()\n-                                        .filter(rdn -> rdn.getType().equalsIgnoreCase(\"ou\"))\n-                                        .map(rdn -> rdn.getValue().toString())\n-                                        .findFirst()\n-                                        .orElseThrow(() -> new IllegalStateException(\"No CN or OU in \" + dn)));\n-                        alias = alias.replace(\" \", \"\");\n-                        alias = alias.toLowerCase(Locale.ROOT);\n-                        cacerts.setCertificateEntry(alias, c);\n-                    }\n-                }\n+                final KeyStore cacerts = copyCerts(tmf);\n                 trustManagerFactory = tmf;\n                 keystore = cacerts;\n             } catch (NoSuchAlgorithmException | KeyStoreException | InvalidNameException | CertificateException\n@@ -85,6 +67,43 @@ static class JavaNetSslTrustOptions implements TrustOptions {\n             }\n         }\n \n+        static KeyStore copyCerts(final TrustManagerFactory tmf)\n+                throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException, InvalidNameException {\n+            final String tsType = System.getProperty(\"javax.net.ssl.trustStoreType\", KeyStore.getDefaultType());\n+            final KeyStore cacerts = KeyStore.getInstance(tsType);\n+            cacerts.load(null, null);\n+            final Set<String> aliases = new HashSet<>();\n+            for (TrustManager tm : tmf.getTrustManagers()) {\n+                for (X509Certificate c : ((X509TrustManager) tm).getAcceptedIssuers()) {\n+                    final String dn = c.getSubjectX500Principal().getName();\n+                    final List<Rdn> rdns = new LdapName(dn).getRdns();\n+                    String alias = rdns.stream()\n+                            .filter(rdn -> rdn.getType().equalsIgnoreCase(\"cn\"))\n+                            .map(rdn -> rdn.getValue().toString())\n+                            .findFirst()\n+                            .orElseGet(() -> rdns.stream()\n+                                    .filter(rdn -> rdn.getType().equalsIgnoreCase(\"ou\"))\n+                                    .map(rdn -> rdn.getValue().toString())\n+                                    .findFirst()\n+                                    .orElse(dn));\n+                    alias = alias.replace(\" \", \"\");\n+                    alias = alias.toLowerCase(Locale.ROOT);\n+                    if (aliases.contains(alias)) {\n+                        /* Make the alias unique if needed */\n+                        int i = 1;\n+                        String indexedAlias = alias + i;\n+                        while (aliases.contains(indexedAlias)) {\n+                            indexedAlias = alias + (++i);\n+                        }\n+                        alias = indexedAlias;\n+                    }\n+                    aliases.add(alias);\n+                    cacerts.setCertificateEntry(alias, c);\n+                }\n+            }\n+            return cacerts;\n+        }\n+\n         @Override\n         public Function<String, TrustManager[]> trustManagerMapper(Vertx vertx) throws Exception {\n             if (helper == null) {\n",
    "test_patch": "diff --git a/extensions/tls-registry/runtime/src/test/java/io/quarkus/tls/runtime/JavaxNetSslTrustStoreProviderTest.java b/extensions/tls-registry/runtime/src/test/java/io/quarkus/tls/runtime/JavaxNetSslTrustStoreProviderTest.java\nnew file mode 100644\nindex 0000000000000..e1eedb4649182\n--- /dev/null\n+++ b/extensions/tls-registry/runtime/src/test/java/io/quarkus/tls/runtime/JavaxNetSslTrustStoreProviderTest.java\n@@ -0,0 +1,33 @@\n+package io.quarkus.tls.runtime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.cert.CertificateException;\n+\n+import javax.naming.InvalidNameException;\n+import javax.net.ssl.TrustManagerFactory;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.tls.runtime.JavaxNetSslTrustStoreProvider.JavaNetSslTrustOptions;\n+\n+public class JavaxNetSslTrustStoreProviderTest {\n+\n+    @Test\n+    void copyCerts()\n+            throws NoSuchAlgorithmException, KeyStoreException, IOException, CertificateException, InvalidNameException {\n+        final TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+        KeyStore ks = KeyStore.getInstance(\"JKS\");\n+        try (InputStream in = getClass().getClassLoader().getResourceAsStream(\"JavaxNetSslTrustStoreProviderTest.jks\")) {\n+            ks.load(in, \"changeit\".toCharArray());\n+        }\n+        Assertions.assertThat(ks.size()).isGreaterThan(0);\n+        tmf.init(ks);\n+        final KeyStore cacerts = JavaNetSslTrustOptions.copyCerts(tmf);\n+        Assertions.assertThat(cacerts.size()).isEqualTo(ks.size());\n+    }\n+}\n\ndiff --git a/extensions/tls-registry/runtime/src/test/resources/JavaxNetSslTrustStoreProviderTest.jks b/extensions/tls-registry/runtime/src/test/resources/JavaxNetSslTrustStoreProviderTest.jks\nnew file mode 100644\nindex 0000000000000..fa17a2646278c\nBinary files /dev/null and b/extensions/tls-registry/runtime/src/test/resources/JavaxNetSslTrustStoreProviderTest.jks differ\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47047",
    "pr_id": 47047,
    "issue_id": 36343,
    "repo": "quarkusio/quarkus",
    "problem_statement": "REST Client with generic subresource fails with InvalidRestClientDefinitionException\n### Describe the bug\r\n\r\nGiven the following REST client definition:\r\n\r\n```java\r\n@Path(\"api\")\r\n@RegisterRestClient\r\npublic interface TestApi {\r\n\r\n\tinterface GenericFunction<R> {\r\n\r\n\t\t@GET\r\n\t\tR get();\r\n\t}\r\n\r\n\t@Path(\"get\")\r\n\tGenericFunction<String> subresource();\r\n}\r\n```\r\n\r\nfails during invocation (not deployment, yikes) with:\r\n```posh\r\nCaused by: org.jboss.resteasy.reactive.client.api.InvalidRestClientDefinitionException: Failed to generate client for class interface org.acme.TestApi : Sub resource type is not a class: org.acme.TestApi$GenericFunction\r\n        at org.jboss.resteasy.reactive.client.impl.ClientProxies.get(ClientProxies.java:29)\r\n        at org.jboss.resteasy.reactive.client.impl.WebTargetImpl.proxy(WebTargetImpl.java:449)\r\n        at io.quarkus.rest.client.reactive.runtime.RestClientBuilderImpl.build(RestClientBuilderImpl.java:386)\r\n        ... 38 more\r\n```\r\n\r\nDue to the fact, that the actual type argument is a very concrete class, I suspect the extension the unresolved `GenericFunction#get` method of the class itself being checked (returning a type variable of course) instead of the actual parameterized type, which is returned by `TestApi#subresource`.\r\n\r\nIf I change the REST client definition to the following, everything works of course:\r\n```java\r\n@Path(\"api\")\r\n@RegisterRestClient\r\npublic interface TestApi {\r\n\r\n\tinterface SimpleFunction {\r\n\r\n\t\t@GET\r\n\t\tString get();\r\n\t}\r\n\r\n\t@Path(\"get\")\r\n\tSimpleFunction subresource();\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nAs the given generic subresource is a valid subresource locator with a valid subresource method when implementing this API as an API provider, I would expect this API interface being a valid defintion for a REST client too. For this generic use case, all static information are available to resolve the the subresource method's type variable at deployment time to String, not some unbound type variable. The `quarkus-resteasy-reactive` extension is able to do so, but not the `quarkus-rest-client-reactive` extension.\r\n\r\n### Actual behavior\r\n\r\nFails with the beforementioned exception during invocation time :/ \r\n\r\n### How to Reproduce?\r\n\r\n_No response_\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\nDarwin sl-macbook.fritz.box 22.6.0 Darwin Kernel Version 22.6.0: Fri Sep 15 13:39:54 PDT 2023; root:xnu-8796.141.3.700.8~1/RELEASE_ARM64_T8112 arm64\r\n\r\n### Output of `java -version`\r\n\r\nopenjdk version \"17.0.8.1\" 2023-08-24 OpenJDK Runtime Environment Homebrew (build 17.0.8.1+0) OpenJDK 64-Bit Server VM Homebrew (build 17.0.8.1+0, mixed mode, sharing)\r\n\r\n### GraalVM version (if different from Java)\r\n\r\n_No response_\r\n\r\n### Quarkus version or git rev\r\n\r\n3.4.1\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\nApache Maven 3.8.6\r\n\r\n### Additional information\r\n\r\n_No response_",
    "issue_word_count": 401,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java",
      "extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/subresource/SubResourceGenericsTest.java"
    ],
    "pr_changed_test_files": [
      "extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/subresource/SubResourceGenericsTest.java"
    ],
    "base_commit": "2a82f2b553cab397479988510c46c0ea922e7a3b",
    "head_commit": "b793849edb9d925d478d2bee2f227cfc90cd8a3b",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47047",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47047",
    "dockerfile": "",
    "pr_merged_at": "2025-03-28T08:25:09.000Z",
    "patch": "diff --git a/extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java b/extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java\nindex 42f46bebc31c4..880f5ea045160 100644\n--- a/extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java\n+++ b/extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java\n@@ -5,6 +5,7 @@\n import static org.jboss.jandex.Type.Kind.CLASS;\n import static org.jboss.jandex.Type.Kind.PARAMETERIZED_TYPE;\n import static org.jboss.jandex.Type.Kind.PRIMITIVE;\n+import static org.jboss.jandex.Type.Kind.TYPE_VARIABLE;\n import static org.jboss.resteasy.reactive.client.impl.RestClientRequestContext.DEFAULT_CONTENT_TYPE_PROP;\n import static org.jboss.resteasy.reactive.common.processor.EndpointIndexer.extractProducesConsumesValues;\n import static org.jboss.resteasy.reactive.common.processor.JandexUtil.isAssignableFrom;\n@@ -83,6 +84,7 @@\n import org.jboss.jandex.ParameterizedType;\n import org.jboss.jandex.PrimitiveType;\n import org.jboss.jandex.Type;\n+import org.jboss.jandex.TypeVariable;\n import org.jboss.logging.Logger;\n import org.jboss.resteasy.reactive.client.api.ClientMultipartForm;\n import org.jboss.resteasy.reactive.client.handlers.ClientObservabilityHandler;\n@@ -930,7 +932,7 @@ A more full example of generated client (with sub-resource) can is at the bottom\n                     handleSubResourceMethod(enrichers, generatedClasses, interfaceClass, index, defaultMediaType,\n                             httpAnnotationToMethod, name, classContext, baseTarget, methodIndex, method,\n                             javaMethodParameters, jandexMethod, multipartResponseTypes, Collections.emptyList(),\n-                            generatedSubResources);\n+                            generatedSubResources, new HashMap<>());\n                 } else {\n                     FieldDescriptor methodField = classContext.createJavaMethodField(interfaceClass, jandexMethod,\n                             methodIndex);\n@@ -1228,7 +1230,7 @@ A more full example of generated client (with sub-resource) can is at the bottom\n                     handleReturn(interfaceClass, defaultMediaType, method.getHttpMethod(),\n                             method.getConsumes(), jandexMethod, methodCreator, formParams,\n                             bodyParameterIdx == null ? null : methodCreator.getMethodParam(bodyParameterIdx), builder,\n-                            multipart);\n+                            multipart, Collections.emptyMap());\n                 }\n             }\n \n@@ -1399,9 +1401,48 @@ private void handleSubResourceMethod(List<JaxrsClientReactiveEnricherBuildItem>\n             ClassRestClientContext ownerContext, ResultHandle ownerTarget, int methodIndex,\n             ResourceMethod method, String[] javaMethodParameters, MethodInfo jandexMethod,\n             Set<ClassInfo> multipartResponseTypes, List<SubResourceParameter> ownerSubResourceParameters,\n-            Map<GeneratedSubResourceKey, String> generatedSubResources) {\n+            Map<GeneratedSubResourceKey, String> generatedSubResources, Map<String, Type> ownerIdentifierToTypeVariable) {\n+\n+        Map<String, Type> identifierToTypeVariable = new HashMap<>();\n         Type returnType = jandexMethod.returnType();\n-        if (returnType.kind() != CLASS) {\n+        if (returnType.kind() == PARAMETERIZED_TYPE) {\n+\n+            ParameterizedType parameterizedReturnType = returnType.asParameterizedType();\n+            ClassInfo returnClass = index.getClassByName(returnType.name());\n+            ParameterizedType.Builder methodReturnTypeBuilder = ParameterizedType.builder(returnType.name());\n+            for (int i = 0; i < parameterizedReturnType.arguments().size(); i++) {\n+                Type paramReturnTypeArg = parameterizedReturnType.arguments().get(i);\n+                Type resolvedType;\n+                if (paramReturnTypeArg.kind() == TYPE_VARIABLE) {\n+                    // method returns another subresource, and one of the arguments is a type variable e.g.  Wrapper<T>\n+                    resolvedType = ownerIdentifierToTypeVariable.get(paramReturnTypeArg.asTypeVariable().identifier());\n+                    if (resolvedType == null) {\n+                        throw new IllegalArgumentException(\n+                                \"Type variable %s of the sub resource locator method's return type %s could not be resolved.\"\n+                                        .formatted(paramReturnTypeArg.asTypeVariable().identifier(), jandexMethod));\n+                    }\n+                } else {\n+                    // Subresource, but no type variable, e.g. Wrapper<String>\n+                    resolvedType = paramReturnTypeArg;\n+                }\n+\n+                identifierToTypeVariable.put(returnClass.typeParameters().get(i).identifier(), resolvedType);\n+                methodReturnTypeBuilder.addArgument(resolvedType);\n+            }\n+\n+            // rewrite returnType to reflect the resolved type variable for the generatedSubResources cache\n+            // i.e. Wrapper<String> instead of Wrapper<V>\n+            returnType = methodReturnTypeBuilder.build();\n+        } else if (returnType.kind() == TYPE_VARIABLE) {\n+            TypeVariable typeVariable = returnType.asTypeVariable();\n+            // rewrite returnType to reflect the resolved type variable for the generatedSubResources cache\n+            // i.e. String instead of Type Variable V\n+            returnType = identifierToTypeVariable.get(typeVariable.identifier());\n+            if (returnType == null) {\n+                return;\n+            }\n+\n+        } else if (returnType.kind() != CLASS) {\n             // sort of sub-resource method that returns a thing that isn't a class\n             throw new IllegalArgumentException(\"Sub resource type is not a class: \" + returnType.name().toString());\n         }\n@@ -1854,7 +1895,7 @@ private void handleSubResourceMethod(List<JaxrsClientReactiveEnricherBuildItem>\n                     handleReturn(subInterface, defaultMediaType,\n                             getHttpMethod(jandexSubMethod, subMethod.getHttpMethod(), httpAnnotationToMethod),\n                             consumes, jandexSubMethod, subMethodCreator, formParams, bodyParameterValue,\n-                            builder, multipart);\n+                            builder, multipart, identifierToTypeVariable);\n                 } else {\n                     // finding corresponding jandex method, used by enricher (MicroProfile enricher stores it in a field\n                     // to later fill in context with corresponding java.lang.reflect.Method)\n@@ -1867,7 +1908,7 @@ private void handleSubResourceMethod(List<JaxrsClientReactiveEnricherBuildItem>\n                     handleSubResourceMethod(enrichers, generatedClasses, subInterface, index,\n                             defaultMediaType, httpAnnotationToMethod, subName, subContext, subMethodTarget,\n                             subMethodIndex, subMethod, subJavaMethodParameters, jandexSubMethod,\n-                            multipartResponseTypes, subParamFields, generatedSubResources);\n+                            multipartResponseTypes, subParamFields, generatedSubResources, identifierToTypeVariable);\n                 }\n \n             }\n@@ -2295,13 +2336,24 @@ private String getHttpMethod(MethodInfo subMethod, String defaultMethod, Map<Dot\n \n     private void handleReturn(ClassInfo restClientInterface, String defaultMediaType, String httpMethod, String[] consumes,\n             MethodInfo jandexMethod, MethodCreator methodCreator, ResultHandle formParams,\n-            ResultHandle bodyValue, AssignableResultHandle builder, boolean multipart) {\n+            ResultHandle bodyValue, AssignableResultHandle builder, boolean multipart,\n+            Map<String, Type> identifierToTypeVariable) {\n         Type returnType = jandexMethod.returnType();\n         ReturnCategory returnCategory = ReturnCategory.BLOCKING;\n \n+        if (returnType.kind() == TYPE_VARIABLE) {\n+            TypeVariable typeVariable = returnType.asTypeVariable();\n+            Type resolvedTypeVariable = identifierToTypeVariable.get(typeVariable.identifier());\n+            if (resolvedTypeVariable != null) {\n+                returnType = resolvedTypeVariable;\n+            } else {\n+                throw new RuntimeException(\"Type variable %s of the return type of method %s could not be resolved.\"\n+                        .formatted(typeVariable.identifier(), jandexMethod));\n+            }\n+        }\n+\n         String simpleReturnType = returnType.name().toString();\n         ResultHandle genericReturnType = null;\n-\n         if (returnType.kind() == PARAMETERIZED_TYPE) {\n             ParameterizedType paramType = returnType.asParameterizedType();\n             if (ASYNC_RETURN_TYPES.contains(paramType.name())) {\n",
    "test_patch": "diff --git a/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/subresource/SubResourceGenericsTest.java b/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/subresource/SubResourceGenericsTest.java\nnew file mode 100644\nindex 0000000000000..28985eca83876\n--- /dev/null\n+++ b/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/subresource/SubResourceGenericsTest.java\n@@ -0,0 +1,208 @@\n+package io.quarkus.rest.client.reactive.subresource;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.WebApplicationException;\n+import jakarta.ws.rs.core.MediaType;\n+import jakarta.ws.rs.core.MultivaluedMap;\n+import jakarta.ws.rs.ext.Provider;\n+\n+import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n+import org.eclipse.microprofile.rest.client.inject.RestClient;\n+import org.jboss.resteasy.reactive.client.impl.RestClientRequestContext;\n+import org.jboss.resteasy.reactive.client.spi.ClientMessageBodyReader;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.rest.client.reactive.QuarkusRestClientBuilder;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class SubResourceGenericsTest {\n+    @RegisterExtension\n+    static final QuarkusUnitTest TEST = new QuarkusUnitTest()\n+            .withApplicationRoot((jar) -> jar\n+                    .addClass(Resource.class)\n+                    .addClass(ClientLocator.class)\n+                    .addClass(TranslationSubResource.class)\n+                    .addClass(EnglishSubResource.class)\n+                    .addClass(ShortsSubResource.class)\n+                    .addClass(HelloSubResource.class)\n+                    .addClass(EachCellAsListElementClientMessageBodyReader.class)\n+                    .addClass(CellsAsMapEntryClientMessageBodyReader.class));\n+\n+    @RestClient\n+    ClientLocator client;\n+\n+    @Test\n+    void testRestCalls() {\n+        {\n+            String result = client.string().subResource().subResource().subResource().get();\n+            assertThat(result).isEqualTo(\"Hello,World\");\n+        }\n+\n+        {\n+            Long result = client.number().subResource().subResource().subResource().get();\n+            assertThat(result).isEqualTo(42L);\n+        }\n+\n+        {\n+            List<String> result = client.testListOnRoot();\n+            assertThat(result).contains(\"Hello\", \"World\");\n+        }\n+\n+        {\n+            List<String> result = client.list().subResource().subResource().subResource().get();\n+            assertThat(result).contains(\"Hello\", \"World\");\n+        }\n+\n+        {\n+            Map<String, String> result = client.map().subResource().subResource().subResource().get();\n+            assertThat(result).containsEntry(\"Hello\", \"World\");\n+        }\n+    }\n+\n+    @Test\n+    void testFailureSubResourceLocatorMethodWithUnresolvedTypeVariable() {\n+\n+        try {\n+            QuarkusRestClientBuilder.newBuilder().baseUri(URI.create(\"http://localhost:8081\"))\n+                    .build(TranslationSubResource.class);\n+        } catch (Exception e) {\n+            assertThat(e.getMessage()).endsWith(\n+                    \"Failed to generate client for class interface io.quarkus.rest.client.reactive.subresource.SubResourceGenericsTest$TranslationSubResource : Type variable R of the sub resource locator method's return type io.quarkus.rest.client.reactive.subresource.SubResourceGenericsTest$EnglishSubResource<R> subResource() could not be resolved.\");\n+            return;\n+        }\n+        Assertions.fail(\"Should have thrown an exception\");\n+    }\n+\n+    @Test\n+    void testFailureRestClientMethodWithUnresolvedTypeVariable() {\n+\n+        try {\n+            QuarkusRestClientBuilder.newBuilder().baseUri(URI.create(\"http://localhost:8081\")).build(HelloSubResource.class);\n+        } catch (Exception e) {\n+            assertThat(e.getMessage()).endsWith(\n+                    \"Failed to generate client for class interface io.quarkus.rest.client.reactive.subresource.SubResourceGenericsTest$HelloSubResource : Type variable V of the return type of method V get() could not be resolved.\");\n+            return;\n+        }\n+        Assertions.fail(\"Should have thrown an exception\");\n+    }\n+\n+    @Path(\"\")\n+    public static class Resource {\n+        @Path(\"greetings/translations/english/shorts/hello\")\n+        @GET\n+        public String greet() {\n+            return \"Hello,World\";\n+        }\n+\n+        @Path(\"greetings-count/translations/english/shorts/hello\")\n+        @GET\n+        public Long greetingCount() {\n+            return 42L;\n+        }\n+    }\n+\n+    @RegisterRestClient(baseUri = \"http://localhost:8081\")\n+    @Path(\"\")\n+    public interface ClientLocator {\n+\n+        @Path(\"greetings/translations\")\n+        TranslationSubResource<String> string();\n+\n+        @Path(\"greetings-count/translations\")\n+        TranslationSubResource<Long> number();\n+\n+        @Path(\"greetings/translations\")\n+        TranslationSubResource<List<String>> list();\n+\n+        @Path(\"greetings/translations\")\n+        TranslationSubResource<Map<String, String>> map();\n+\n+        @Path(\"greetings/translations/english/shorts/hello\")\n+        @GET\n+        List<String> testListOnRoot();\n+    }\n+\n+    public interface TranslationSubResource<R> {\n+        @Path(\"english\")\n+        EnglishSubResource<R> subResource();\n+    }\n+\n+    public interface EnglishSubResource<Z> {\n+        @Path(\"shorts\")\n+        ShortsSubResource<Z> subResource();\n+    }\n+\n+    public interface ShortsSubResource<Y> {\n+        @Path(\"hello\")\n+        HelloSubResource<Y> subResource();\n+    }\n+\n+    public interface HelloSubResource<V> {\n+        @GET\n+        V get();\n+    }\n+\n+    @Provider\n+    public static class EachCellAsListElementClientMessageBodyReader implements ClientMessageBodyReader<List<String>> {\n+\n+        @Override\n+        public List<String> readFrom(Class<List<String>> type, Type genericType, Annotation[] annotations, MediaType mediaType,\n+                MultivaluedMap<String, String> httpHeaders, InputStream entityStream, RestClientRequestContext context)\n+                throws IOException, WebApplicationException {\n+            return readFrom(type, genericType, annotations, mediaType, httpHeaders, entityStream);\n+        }\n+\n+        @Override\n+        public boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType) {\n+            return genericType.getTypeName().equals(\"java.util.List<java.lang.String>\");\n+        }\n+\n+        @Override\n+        public List<String> readFrom(Class<List<String>> type, Type genericType, Annotation[] annotations, MediaType mediaType,\n+                MultivaluedMap<String, String> httpHeaders, InputStream entityStream)\n+                throws IOException, WebApplicationException {\n+            String body = new String(entityStream.readAllBytes(), StandardCharsets.UTF_8);\n+            return Arrays.asList(body.split(\",\"));\n+        }\n+    }\n+\n+    @Provider\n+    public static class CellsAsMapEntryClientMessageBodyReader implements ClientMessageBodyReader<Map<String, String>> {\n+\n+        @Override\n+        public Map<String, String> readFrom(Class<Map<String, String>> type, Type genericType, Annotation[] annotations,\n+                MediaType mediaType, MultivaluedMap<String, String> httpHeaders, InputStream entityStream,\n+                RestClientRequestContext context) throws IOException, WebApplicationException {\n+            return readFrom(type, genericType, annotations, mediaType, httpHeaders, entityStream);\n+        }\n+\n+        @Override\n+        public boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType) {\n+            return genericType.getTypeName().equals(\"java.util.Map<java.lang.String, java.lang.String>\");\n+        }\n+\n+        @Override\n+        public Map<String, String> readFrom(Class<Map<String, String>> type, Type genericType, Annotation[] annotations,\n+                MediaType mediaType, MultivaluedMap<String, String> httpHeaders, InputStream entityStream)\n+                throws IOException, WebApplicationException {\n+            String body = new String(entityStream.readAllBytes(), StandardCharsets.UTF_8);\n+            String[] split = body.split(\",\");\n+            return Map.of(split[0], split[1]);\n+        }\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47040",
    "pr_id": 47040,
    "issue_id": 45207,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Authentication failure exceptions and events should provide additional request specific information\n### Description\n\nThe user code which observes `AuthenticationFailedException` should be able to log or do other actions with the credentials which can not be verified. For example, if the code flow access token is invalid, users should be able to use soon to be available `OidcProviderClient` to revoke the token.\n\n\n### Implementation ideas\n\nIf it is OIDC it should pass the failed token with `AuthenticationFailedException`, probably as a map property",
    "issue_word_count": 79,
    "test_files_count": 2,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcProvider.java",
      "integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/SecurityEventListener.java",
      "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerOpaqueTokenAuthorizationTest.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/SecurityEventListener.java",
      "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerOpaqueTokenAuthorizationTest.java"
    ],
    "base_commit": "2a82f2b553cab397479988510c46c0ea922e7a3b",
    "head_commit": "f40f37d05a403aefc8bb0f325cc479269f0ca208",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47040",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47040",
    "dockerfile": "",
    "pr_merged_at": "2025-03-28T12:51:06.000Z",
    "patch": "diff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java\nindex 941fe6a1574e3..b56c32d604cd4 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java\n@@ -5,6 +5,7 @@\n import java.security.cert.Certificate;\n import java.security.cert.X509Certificate;\n import java.util.List;\n+import java.util.Map;\n import java.util.function.Function;\n \n import javax.net.ssl.SSLPeerUnverifiedException;\n@@ -35,8 +36,8 @@ public Uni<SecurityIdentity> authenticate(RoutingContext context,\n         // if a bearer token is provided try to authenticate\n         if (token != null) {\n             try {\n-                setCertificateThumbprint(context, oidcTenantConfig);\n-                setDPopProof(context, oidcTenantConfig);\n+                setCertificateThumbprint(context, oidcTenantConfig, token);\n+                setDPopProof(context, oidcTenantConfig, token);\n             } catch (AuthenticationFailedException ex) {\n                 return Uni.createFrom().failure(ex);\n             }\n@@ -46,29 +47,29 @@ public Uni<SecurityIdentity> authenticate(RoutingContext context,\n         return Uni.createFrom().nullItem();\n     }\n \n-    private static void setCertificateThumbprint(RoutingContext context, OidcTenantConfig oidcTenantConfig) {\n+    private static void setCertificateThumbprint(RoutingContext context, OidcTenantConfig oidcTenantConfig, String token) {\n         if (oidcTenantConfig.token().binding().certificate()) {\n-            Certificate cert = getCertificate(context);\n+            Certificate cert = getCertificate(context, token);\n             if (!(cert instanceof X509Certificate)) {\n                 LOG.warn(\"Access token must be bound to X509 client certiifcate\");\n-                throw new AuthenticationFailedException();\n+                throw new AuthenticationFailedException(tokenMap(token));\n             }\n             context.put(OidcConstants.X509_SHA256_THUMBPRINT,\n                     TrustStoreUtils.calculateThumprint((X509Certificate) cert));\n         }\n     }\n \n-    private static void setDPopProof(RoutingContext context, OidcTenantConfig oidcTenantConfig) {\n+    private static void setDPopProof(RoutingContext context, OidcTenantConfig oidcTenantConfig, String token) {\n         if (OidcConstants.DPOP_SCHEME.equals(oidcTenantConfig.token().authorizationScheme())) {\n \n             List<String> proofs = context.request().headers().getAll(OidcConstants.DPOP_SCHEME);\n             if (proofs == null || proofs.isEmpty()) {\n                 LOG.warn(\"DPOP proof header must be present to verify the DPOP access token binding\");\n-                throw new AuthenticationFailedException();\n+                throw new AuthenticationFailedException(tokenMap(token));\n             }\n             if (proofs.size() != 1) {\n                 LOG.warn(\"Only a single DPOP proof header is accepted\");\n-                throw new AuthenticationFailedException();\n+                throw new AuthenticationFailedException(tokenMap(token));\n             }\n             String proof = proofs.get(0);\n \n@@ -78,28 +79,28 @@ private static void setDPopProof(RoutingContext context, OidcTenantConfig oidcTe\n \n             if (!OidcConstants.DPOP_TOKEN_TYPE.equals(proofJwtHeaders.getString(OidcConstants.TOKEN_TYPE_HEADER))) {\n                 LOG.warn(\"Invalid DPOP proof token type ('typ') header\");\n-                throw new AuthenticationFailedException();\n+                throw new AuthenticationFailedException(tokenMap(token));\n             }\n \n             // Check HTTP method and request URI\n             String proofHttpMethod = proofJwtClaims.getString(OidcConstants.DPOP_HTTP_METHOD);\n             if (proofHttpMethod == null) {\n                 LOG.warn(\"DPOP proof HTTP method claim is missing\");\n-                throw new AuthenticationFailedException();\n+                throw new AuthenticationFailedException(tokenMap(token));\n             }\n \n             String httpMethod = context.request().method().name();\n             if (!httpMethod.equals(proofHttpMethod)) {\n                 LOG.warnf(\"DPOP proof HTTP method claim %s does not match the request HTTP method %s\", proofHttpMethod,\n                         httpMethod);\n-                throw new AuthenticationFailedException();\n+                throw new AuthenticationFailedException(tokenMap(token));\n             }\n \n             // Check HTTP request URI\n             String proofHttpRequestUri = proofJwtClaims.getString(OidcConstants.DPOP_HTTP_REQUEST_URI);\n             if (proofHttpRequestUri == null) {\n                 LOG.warn(\"DPOP proof HTTP request uri claim is missing\");\n-                throw new AuthenticationFailedException();\n+                throw new AuthenticationFailedException(tokenMap(token));\n             }\n \n             String httpRequestUri = context.request().absoluteURI();\n@@ -110,7 +111,7 @@ private static void setDPopProof(RoutingContext context, OidcTenantConfig oidcTe\n             if (!httpRequestUri.equals(proofHttpRequestUri)) {\n                 LOG.warnf(\"DPOP proof HTTP request uri claim %s does not match the request HTTP uri %s\", proofHttpRequestUri,\n                         httpRequestUri);\n-                throw new AuthenticationFailedException();\n+                throw new AuthenticationFailedException(tokenMap(token));\n             }\n \n             context.put(OidcUtils.DPOP_PROOF, proof);\n@@ -119,15 +120,19 @@ private static void setDPopProof(RoutingContext context, OidcTenantConfig oidcTe\n         }\n     }\n \n-    private static Certificate getCertificate(RoutingContext context) {\n+    private static Certificate getCertificate(RoutingContext context, String token) {\n         try {\n             return context.request().sslSession().getPeerCertificates()[0];\n         } catch (SSLPeerUnverifiedException e) {\n             LOG.warn(\"Access token must be certificate bound but no client certificate is available\");\n-            throw new AuthenticationFailedException();\n+            throw new AuthenticationFailedException(tokenMap(token));\n         }\n     }\n \n+    private static Map<String, Object> tokenMap(String token) {\n+        return Map.of(OidcConstants.ACCESS_TOKEN_VALUE, token);\n+    }\n+\n     public Uni<ChallengeData> getChallenge(RoutingContext context) {\n         Uni<TenantConfigContext> tenantContext = resolver.resolveContext(context);\n         return tenantContext.onItem().transformToUni(new Function<TenantConfigContext, Uni<? extends ChallengeData>>() {\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\nindex fcf6ddf1c5cb1..bf95a1b652117 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\n@@ -369,7 +369,8 @@ public Uni<? extends SecurityIdentity> apply(Throwable t) {\n                                         }\n                                         if (t instanceof LogoutException) {\n                                             LOG.debugf(\"User has been logged out, authentication challenge is required\");\n-                                            return Uni.createFrom().failure(new AuthenticationFailedException(t));\n+                                            return Uni.createFrom()\n+                                                    .failure(new AuthenticationFailedException(t, tokenMap(currentIdToken)));\n                                         }\n \n                                         if (!(t instanceof TokenAutoRefreshException)) {\n@@ -392,7 +393,7 @@ public Uni<? extends SecurityIdentity> apply(Throwable t) {\n                                                     LOG.debugf(\n                                                             \"Session can not be verified due to an unresolved key exception, reauthentication is required\");\n                                                     // Redirect the user to the OIDC provider to re-authenticate\n-                                                    failure = new AuthenticationFailedException();\n+                                                    failure = new AuthenticationFailedException(tokenMap(currentIdToken));\n                                                 } else {\n                                                     // Failures such as the signature verification failures require 401 status\n                                                     String error = logAuthenticationError(context, t);\n@@ -1327,14 +1328,15 @@ public Uni<SecurityIdentity> apply(final AuthorizationCodeTokens tokens, final T\n                                     LOG.debug(\"Using the current SecurityIdentity since the ID token is still valid\");\n                                     return Uni.createFrom().item(fallback);\n                                 } else {\n-                                    return Uni.createFrom().failure(new AuthenticationFailedException(t));\n+                                    return Uni.createFrom()\n+                                            .failure(new AuthenticationFailedException(t, tokenMap(currentIdToken)));\n                                 }\n                             } else if (configContext.oidcConfig().authentication().sessionExpiredPath().isPresent()) {\n                                 // Token has expired but the refresh does not work, check if the session expired page is available\n                                 return redirectToSessionExpiredPage(context, configContext);\n                             }\n                             // Redirect to the OIDC provider to reauthenticate\n-                            return Uni.createFrom().failure(new AuthenticationFailedException(t));\n+                            return Uni.createFrom().failure(new AuthenticationFailedException(t, tokenMap(currentIdToken)));\n                         } else {\n                             context.put(OidcConstants.ACCESS_TOKEN_VALUE, tokens.getAccessToken());\n                             context.put(AuthorizationCodeTokens.class.getName(), tokens);\n@@ -1368,7 +1370,7 @@ public SecurityIdentity apply(SecurityIdentity identity) {\n                                         @Override\n                                         public Throwable apply(Throwable tInner) {\n                                             LOG.debugf(\"Verifying the refreshed ID token failed %s\", errorMessage(tInner));\n-                                            return new AuthenticationFailedException(tInner);\n+                                            return new AuthenticationFailedException(tInner, tokenMap(currentIdToken));\n                                         }\n                                     });\n                         }\n@@ -1392,7 +1394,7 @@ public AuthorizationCodeTokens apply(AuthorizationCodeTokens tokens) {\n                                 if (!autoRefresh) {\n                                     LOG.debugf(\n                                             \"ID token is not returned in the refresh token grant response, re-authentication is required\");\n-                                    throw new AuthenticationFailedException();\n+                                    throw new AuthenticationFailedException(tokenMap(currentIdToken));\n                                 } else {\n                                     // Auto-refresh is triggered while current ID token is still valid, continue using it.\n                                     tokens.setIdToken(currentIdToken);\n@@ -1532,4 +1534,8 @@ public Void apply(Void t) {\n         }\n \n     }\n+\n+    private static Map<String, Object> tokenMap(String token) {\n+        return Map.of(OidcConstants.ID_TOKEN_VALUE, token);\n+    }\n }\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java\nindex 1d214f88dea87..c9b96500d8cd6 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java\n@@ -133,7 +133,8 @@ && isOpaqueAccessToken(requestData, request, resolvedContext)) {\n                             @Override\n                             public Uni<SecurityIdentity> apply(UserInfo userInfo, Throwable t) {\n                                 if (t != null) {\n-                                    return Uni.createFrom().failure(new AuthenticationFailedException(t));\n+                                    return Uni.createFrom().failure(t instanceof AuthenticationFailedException ? t\n+                                            : new AuthenticationFailedException(t));\n                                 }\n                                 return validateTokenWithUserInfoAndCreateIdentity(requestData, request, resolvedContext,\n                                         userInfo);\n@@ -162,7 +163,8 @@ private Uni<SecurityIdentity> validateTokenWithUserInfoAndCreateIdentity(Map<Str\n                     public Uni<SecurityIdentity> apply(TokenVerificationResult codeAccessToken, Throwable t) {\n                         if (t != null) {\n                             requestData.put(OidcUtils.CODE_ACCESS_TOKEN_FAILURE, t);\n-                            return Uni.createFrom().failure(new AuthenticationFailedException(t));\n+                            return Uni.createFrom().failure(t instanceof AuthenticationFailedException ? t\n+                                    : new AuthenticationFailedException(t, codeAccessTokenMap(requestData)));\n                         }\n \n                         if (codeAccessToken != null) {\n@@ -178,7 +180,10 @@ public Uni<SecurityIdentity> apply(TokenVerificationResult codeAccessToken, Thro\n                                             @Override\n                                             public Uni<SecurityIdentity> apply(TokenVerificationResult result, Throwable t) {\n                                                 if (t != null) {\n-                                                    return Uni.createFrom().failure(new AuthenticationFailedException(t));\n+                                                    return Uni.createFrom()\n+                                                            .failure(t instanceof AuthenticationFailedException ? t\n+                                                                    : new AuthenticationFailedException(t,\n+                                                                            tokenMap(request.getToken())));\n                                                 }\n \n                                                 return createSecurityIdentityWithOidcServer(result, requestData, request,\n@@ -204,7 +209,7 @@ private Uni<TokenVerificationResult> verifyPrimaryTokenUni(Map<String, Object> r\n         } else {\n             final boolean idToken = isIdToken(request);\n             Uni<TokenVerificationResult> result = verifyTokenUni(requestData, resolvedContext, request.getToken(), idToken,\n-                    false, userInfo);\n+                    idToken, false, userInfo);\n             if (!idToken) {\n                 if (resolvedContext.oidcConfig().token().binding().certificate()) {\n                     result = result.onItem().transform(new Function<TokenVerificationResult, TokenVerificationResult>() {\n@@ -215,16 +220,16 @@ public TokenVerificationResult apply(TokenVerificationResult t) {\n                             if (tokenCertificateThumbprint == null) {\n                                 LOG.warn(\n                                         \"Access token does not contain a confirmation 'cnf' claim with the certificate thumbprint\");\n-                                throw new AuthenticationFailedException();\n+                                throw new AuthenticationFailedException(tokenMap(request.getToken()));\n                             }\n                             String clientCertificateThumbprint = (String) requestData.get(OidcConstants.X509_SHA256_THUMBPRINT);\n                             if (clientCertificateThumbprint == null) {\n                                 LOG.warn(\"Client certificate thumbprint is not available\");\n-                                throw new AuthenticationFailedException();\n+                                throw new AuthenticationFailedException(tokenMap(request.getToken()));\n                             }\n                             if (!clientCertificateThumbprint.equals(tokenCertificateThumbprint)) {\n                                 LOG.warn(\"Client certificate thumbprint does not match the token certificate thumbprint\");\n-                                throw new AuthenticationFailedException();\n+                                throw new AuthenticationFailedException(tokenMap(request.getToken()));\n                             }\n                             return t;\n                         }\n@@ -242,7 +247,7 @@ public TokenVerificationResult apply(TokenVerificationResult t) {\n                             if (dpopJwkThumbprint == null) {\n                                 LOG.warn(\n                                         \"DPoP access token does not contain a confirmation 'cnf' claim with the JWK thumbprint\");\n-                                throw new AuthenticationFailedException();\n+                                throw new AuthenticationFailedException(tokenMap(request.getToken()));\n                             }\n \n                             JsonObject proofHeaders = (JsonObject) requestData.get(OidcUtils.DPOP_PROOF_JWT_HEADERS);\n@@ -250,7 +255,7 @@ public TokenVerificationResult apply(TokenVerificationResult t) {\n                             JsonObject jwkProof = proofHeaders.getJsonObject(OidcConstants.DPOP_JWK_HEADER);\n                             if (jwkProof == null) {\n                                 LOG.warn(\"DPoP proof jwk header is missing\");\n-                                throw new AuthenticationFailedException();\n+                                throw new AuthenticationFailedException(tokenMap(request.getToken()));\n                             }\n \n                             PublicJsonWebKey publicJsonWebKey = null;\n@@ -258,12 +263,12 @@ public TokenVerificationResult apply(TokenVerificationResult t) {\n                                 publicJsonWebKey = PublicJsonWebKey.Factory.newPublicJwk(jwkProof.getMap());\n                             } catch (JoseException ex) {\n                                 LOG.warn(\"DPoP proof jwk header does not represent a valid JWK key\");\n-                                throw new AuthenticationFailedException(ex);\n+                                throw new AuthenticationFailedException(ex, tokenMap(request.getToken()));\n                             }\n \n                             if (publicJsonWebKey.getPrivateKey() != null) {\n                                 LOG.warn(\"DPoP proof JWK key is a private key but it must be a public key\");\n-                                throw new AuthenticationFailedException();\n+                                throw new AuthenticationFailedException(tokenMap(request.getToken()));\n                             }\n \n                             byte[] jwkProofDigest = publicJsonWebKey.calculateThumbprint(\"SHA-256\");\n@@ -271,7 +276,7 @@ public TokenVerificationResult apply(TokenVerificationResult t) {\n \n                             if (!dpopJwkThumbprint.equals(jwkProofThumbprint)) {\n                                 LOG.warn(\"DPoP access token JWK thumbprint does not match the DPoP proof JWK thumbprint\");\n-                                throw new AuthenticationFailedException();\n+                                throw new AuthenticationFailedException(tokenMap(request.getToken()));\n                             }\n \n                             try {\n@@ -281,11 +286,11 @@ public TokenVerificationResult apply(TokenVerificationResult t) {\n                                 jws.setKey(publicJsonWebKey.getPublicKey());\n                                 if (!jws.verifySignature()) {\n                                     LOG.warn(\"DPoP proof token signature is invalid\");\n-                                    throw new AuthenticationFailedException();\n+                                    throw new AuthenticationFailedException(tokenMap(request.getToken()));\n                                 }\n                             } catch (JoseException ex) {\n                                 LOG.warn(\"DPoP proof token signature can not be verified\");\n-                                throw new AuthenticationFailedException(ex);\n+                                throw new AuthenticationFailedException(ex, tokenMap(request.getToken()));\n                             }\n \n                             JsonObject proofClaims = (JsonObject) requestData.get(OidcUtils.DPOP_PROOF_JWT_CLAIMS);\n@@ -295,7 +300,7 @@ public TokenVerificationResult apply(TokenVerificationResult t) {\n                             String accessTokenProof = proofClaims.getString(OidcConstants.DPOP_ACCESS_TOKEN_THUMBPRINT);\n                             if (accessTokenProof == null) {\n                                 LOG.warn(\"DPoP proof access token hash is missing\");\n-                                throw new AuthenticationFailedException();\n+                                throw new AuthenticationFailedException(tokenMap(request.getToken()));\n                             }\n \n                             String accessTokenHash = null;\n@@ -308,7 +313,7 @@ public TokenVerificationResult apply(TokenVerificationResult t) {\n \n                             if (!accessTokenProof.equals(accessTokenHash)) {\n                                 LOG.warn(\"DPoP access token hash does not match the DPoP proof access token hash\");\n-                                throw new AuthenticationFailedException();\n+                                throw new AuthenticationFailedException(tokenMap(request.getToken()));\n                             }\n \n                             return t;\n@@ -357,7 +362,8 @@ private Uni<SecurityIdentity> getUserInfoAndCreateIdentity(Uni<TokenVerification\n                     @Override\n                     public Uni<SecurityIdentity> apply(TokenVerificationResult result, Throwable t) {\n                         if (t != null) {\n-                            return Uni.createFrom().failure(new AuthenticationFailedException(t));\n+                            return Uni.createFrom().failure(t instanceof AuthenticationFailedException ? t\n+                                    : new AuthenticationFailedException(t, tokenMap(request.getToken())));\n                         }\n \n                         Uni<TokenVerificationResult> codeAccessTokenUni = verifyCodeFlowAccessTokenUni(requestData, request,\n@@ -370,7 +376,7 @@ public Uni<SecurityIdentity> apply(TokenVerificationResult codeAccessTokenResult\n                                         if (t != null) {\n                                             requestData.put(OidcUtils.CODE_ACCESS_TOKEN_FAILURE, t);\n                                             return Uni.createFrom().failure(t instanceof AuthenticationFailedException ? t\n-                                                    : new AuthenticationFailedException(t));\n+                                                    : new AuthenticationFailedException(t, codeAccessTokenMap(requestData)));\n                                         }\n                                         if (codeAccessTokenResult != null) {\n                                             if (tokenAutoRefreshPrepared(codeAccessTokenResult, requestData,\n@@ -388,8 +394,9 @@ public Uni<SecurityIdentity> apply(TokenVerificationResult codeAccessTokenResult\n                                                                 public Uni<SecurityIdentity> apply(UserInfo userInfo,\n                                                                         Throwable t) {\n                                                                     if (t != null) {\n-                                                                        return Uni.createFrom()\n-                                                                                .failure(new AuthenticationFailedException(t));\n+                                                                        return Uni.createFrom().failure(\n+                                                                                t instanceof AuthenticationFailedException ? t\n+                                                                                        : new AuthenticationFailedException(t));\n                                                                     }\n                                                                     return createSecurityIdentityWithOidcServer(result,\n                                                                             requestData, request, resolvedContext, userInfo);\n@@ -450,20 +457,21 @@ private Uni<SecurityIdentity> createSecurityIdentityWithOidcServer(TokenVerifica\n                         resolvedContext, tokenJson, rolesJson, userInfo, result.introspectionResult, request);\n                 // If the primary token is a bearer access token then there's no point of checking if\n                 // it should be refreshed as RT is only available for the code flow tokens\n-                if (isIdToken(request)\n+                if (isIdToken(tokenCred)\n                         && tokenAutoRefreshPrepared(result, requestData, resolvedContext.oidcConfig(), false)) {\n                     return Uni.createFrom().failure(new TokenAutoRefreshException(securityIdentity));\n                 } else {\n                     return Uni.createFrom().item(securityIdentity);\n                 }\n             } catch (Throwable ex) {\n-                return Uni.createFrom().failure(new AuthenticationFailedException(ex));\n+                return Uni.createFrom().failure(ex instanceof AuthenticationFailedException ? ex\n+                        : new AuthenticationFailedException(ex, tokenMap(tokenCred)));\n             }\n-        } else if (isIdToken(request)\n+        } else if (isIdToken(tokenCred)\n                 || tokenCred instanceof AccessTokenCredential\n                         && !((AccessTokenCredential) tokenCred).isOpaque()) {\n             return Uni.createFrom()\n-                    .failure(new AuthenticationFailedException(\"JWT token can not be converted to JSON\"));\n+                    .failure(new AuthenticationFailedException(\"JWT token can not be converted to JSON\", tokenMap(tokenCred)));\n         } else {\n             // ID Token or Bearer access token has been introspected or verified via Userinfo acquisition\n             QuarkusSecurityIdentity.Builder builder = QuarkusSecurityIdentity.builder();\n@@ -482,7 +490,7 @@ && tokenAutoRefreshPrepared(result, requestData, resolvedContext.oidcConfig(), f\n                 } else {\n                     // we don't expect this to ever happen\n                     LOG.debug(\"Illegal state - token introspection result is not available.\");\n-                    return Uni.createFrom().failure(new AuthenticationFailedException());\n+                    return Uni.createFrom().failure(new AuthenticationFailedException(tokenMap(tokenCred)));\n                 }\n             } else {\n                 OidcUtils.setSecurityIdentityIntrospection(builder, result.introspectionResult);\n@@ -517,7 +525,7 @@ public String getName() {\n             SecurityIdentity identity = builder.build();\n             // If the primary token is a bearer access token then there's no point of checking if\n             // it should be refreshed as RT is only available for the code flow tokens\n-            if (isIdToken(request)\n+            if (isIdToken(tokenCred)\n                     && tokenAutoRefreshPrepared(result, requestData, resolvedContext.oidcConfig(), false)) {\n                 return Uni.createFrom().failure(new TokenAutoRefreshException(identity));\n             }\n@@ -526,12 +534,26 @@ && tokenAutoRefreshPrepared(result, requestData, resolvedContext.oidcConfig(), f\n \n     }\n \n+    private static Map<String, Object> codeAccessTokenMap(Map<String, Object> requestData) {\n+        final String codeAccessToken = (String) requestData.get(OidcConstants.ACCESS_TOKEN_VALUE);\n+        return Map.of(OidcConstants.ACCESS_TOKEN_VALUE, codeAccessToken);\n+    }\n+\n+    private static Map<String, Object> tokenMap(TokenCredential tokenCred) {\n+        final String tokenType = isIdToken(tokenCred) ? OidcConstants.ID_TOKEN_VALUE : OidcConstants.ACCESS_TOKEN_VALUE;\n+        return Map.of(tokenType, tokenCred.getToken());\n+    }\n+\n     private static boolean isInternalIdToken(TokenAuthenticationRequest request) {\n         return isIdToken(request) && ((IdTokenCredential) request.getToken()).isInternal();\n     }\n \n+    private static boolean isIdToken(TokenCredential tokenCred) {\n+        return tokenCred instanceof IdTokenCredential;\n+    }\n+\n     private static boolean isIdToken(TokenAuthenticationRequest request) {\n-        return request.getToken() instanceof IdTokenCredential;\n+        return isIdToken(request.getToken());\n     }\n \n     private static boolean tokenAutoRefreshPrepared(TokenVerificationResult result, Map<String, Object> requestData,\n@@ -593,15 +615,16 @@ private Uni<TokenVerificationResult> verifyCodeFlowAccessTokenUni(Map<String, Ob\n                 && (resolvedContext.oidcConfig().authentication().verifyAccessToken()\n                         || resolvedContext.oidcConfig().roles().source().orElse(null) == Source.accesstoken)) {\n             final String codeAccessToken = (String) requestData.get(OidcConstants.ACCESS_TOKEN_VALUE);\n-            return verifyTokenUni(requestData, resolvedContext, new AccessTokenCredential(codeAccessToken), false, true,\n-                    userInfo);\n+            return verifyTokenUni(requestData, resolvedContext, new AccessTokenCredential(codeAccessToken), false,\n+                    false, true, userInfo);\n         } else {\n             return NULL_CODE_ACCESS_TOKEN_UNI;\n         }\n     }\n \n     private Uni<TokenVerificationResult> verifyTokenUni(Map<String, Object> requestData, TenantConfigContext resolvedContext,\n-            TokenCredential tokenCred, boolean enforceAudienceVerification, boolean codeFlowAccessToken, UserInfo userInfo) {\n+            TokenCredential tokenCred, boolean idToken, boolean enforceAudienceVerification, boolean codeFlowAccessToken,\n+            UserInfo userInfo) {\n         final String token = tokenCred.getToken();\n         Long expiresIn = null;\n         if (codeFlowAccessToken) {\n@@ -611,26 +634,27 @@ private Uni<TokenVerificationResult> verifyTokenUni(Map<String, Object> requestD\n         if (OidcUtils.isOpaqueToken(token)) {\n             if (!resolvedContext.oidcConfig().token().allowOpaqueTokenIntrospection()) {\n                 LOG.debug(\"Token is opaque but the opaque token introspection is not allowed\");\n-                throw new AuthenticationFailedException();\n+                throw new AuthenticationFailedException(tokenMap(tokenCred));\n             }\n             // verify opaque access token with UserInfo if enabled and introspection URI is absent\n             if (resolvedContext.oidcConfig().token().verifyAccessTokenWithUserInfo().orElse(false)\n                     && resolvedContext.provider().getMetadata().getIntrospectionUri() == null) {\n                 if (userInfo == null) {\n                     return Uni.createFrom().failure(\n-                            new AuthenticationFailedException(\"Opaque access token verification failed as user info is null.\"));\n+                            new AuthenticationFailedException(\"Opaque access token verification failed as user info is null.\",\n+                                    tokenMap(tokenCred)));\n                 } else {\n                     // valid token verification result\n                     return Uni.createFrom().item(new TokenVerificationResult(null, null));\n                 }\n             }\n             LOG.debug(\"Starting the opaque token introspection\");\n-            return introspectTokenUni(resolvedContext, token, expiresIn, false);\n+            return introspectTokenUni(resolvedContext, token, idToken, expiresIn, false);\n         } else if (resolvedContext.provider().getMetadata().getJsonWebKeySetUri() == null\n                 || resolvedContext.oidcConfig().token().requireJwtIntrospectionOnly()) {\n             // Verify JWT token with the remote introspection\n             LOG.debug(\"Starting the JWT token introspection\");\n-            return introspectTokenUni(resolvedContext, token, expiresIn, false);\n+            return introspectTokenUni(resolvedContext, token, idToken, expiresIn, false);\n         } else if (resolvedContext.oidcConfig().jwks().resolveEarly()) {\n             // Verify JWT token with the local JWK keys with a possible remote introspection fallback\n             final String nonce = tokenCred instanceof IdTokenCredential ? (String) requestData.get(OidcConstants.NONCE) : null;\n@@ -642,7 +666,7 @@ private Uni<TokenVerificationResult> verifyTokenUni(Map<String, Object> requestD\n             } catch (Throwable t) {\n                 if (t.getCause() instanceof UnresolvableKeyException) {\n                     LOG.debug(\"No matching JWK key is found, refreshing and repeating the token verification\");\n-                    return refreshJwksAndVerifyTokenUni(resolvedContext, token, enforceAudienceVerification,\n+                    return refreshJwksAndVerifyTokenUni(resolvedContext, token, idToken, enforceAudienceVerification,\n                             resolvedContext.oidcConfig().token().subjectRequired(), nonce, expiresIn);\n                 } else {\n                     LOG.debugf(\"Token verification has failed: %s\", t.getMessage());\n@@ -666,11 +690,12 @@ private Uni<TokenVerificationResult> verifySelfSignedTokenUni(TenantConfigContex\n     }\n \n     private Uni<TokenVerificationResult> refreshJwksAndVerifyTokenUni(TenantConfigContext resolvedContext, String token,\n+            boolean idToken,\n             boolean enforceAudienceVerification, boolean subjectRequired, String nonce, Long expiresIn) {\n         return resolvedContext.provider()\n                 .refreshJwksAndVerifyJwtToken(token, enforceAudienceVerification, subjectRequired, nonce)\n                 .onFailure(f -> fallbackToIntrospectionIfNoMatchingKey(f, resolvedContext))\n-                .recoverWithUni(f -> introspectTokenUni(resolvedContext, token, expiresIn, true));\n+                .recoverWithUni(f -> introspectTokenUni(resolvedContext, token, idToken, expiresIn, true));\n     }\n \n     private Uni<TokenVerificationResult> resolveJwksAndVerifyTokenUni(TenantConfigContext resolvedContext,\n@@ -680,7 +705,8 @@ private Uni<TokenVerificationResult> resolveJwksAndVerifyTokenUni(TenantConfigCo\n                 .getKeyResolverAndVerifyJwtToken(tokenCred, enforceAudienceVerification, subjectRequired, nonce,\n                         (tokenCred instanceof IdTokenCredential))\n                 .onFailure(f -> fallbackToIntrospectionIfNoMatchingKey(f, resolvedContext))\n-                .recoverWithUni(f -> introspectTokenUni(resolvedContext, tokenCred.getToken(), expiresIn, true));\n+                .recoverWithUni(f -> introspectTokenUni(resolvedContext, tokenCred.getToken(),\n+                        isIdToken(tokenCred), expiresIn, true));\n     }\n \n     private static boolean fallbackToIntrospectionIfNoMatchingKey(Throwable f, TenantConfigContext resolvedContext) {\n@@ -698,28 +724,28 @@ private static boolean fallbackToIntrospectionIfNoMatchingKey(Throwable f, Tenan\n     }\n \n     private Uni<TokenVerificationResult> introspectTokenUni(TenantConfigContext resolvedContext, final String token,\n-            Long expiresIn, boolean fallbackFromJwkMatch) {\n+            boolean idToken, Long expiresIn, boolean fallbackFromJwkMatch) {\n         TokenIntrospectionCache tokenIntrospectionCache = tenantResolver.getTokenIntrospectionCache();\n         Uni<TokenIntrospection> tokenIntrospectionUni = tokenIntrospectionCache == null ? null\n                 : tokenIntrospectionCache\n                         .getIntrospection(token, resolvedContext.oidcConfig(), getIntrospectionRequestContext);\n         if (tokenIntrospectionUni == null) {\n-            tokenIntrospectionUni = newTokenIntrospectionUni(resolvedContext, token, expiresIn, fallbackFromJwkMatch);\n+            tokenIntrospectionUni = newTokenIntrospectionUni(resolvedContext, token, idToken, expiresIn, fallbackFromJwkMatch);\n         } else {\n             tokenIntrospectionUni = tokenIntrospectionUni.onItem().ifNull()\n                     .switchTo(new Supplier<Uni<? extends TokenIntrospection>>() {\n                         @Override\n                         public Uni<TokenIntrospection> get() {\n-                            return newTokenIntrospectionUni(resolvedContext, token, expiresIn, fallbackFromJwkMatch);\n+                            return newTokenIntrospectionUni(resolvedContext, token, idToken, expiresIn, fallbackFromJwkMatch);\n                         }\n                     });\n         }\n         return tokenIntrospectionUni.onItem().transform(t -> new TokenVerificationResult(null, t));\n     }\n \n-    private Uni<TokenIntrospection> newTokenIntrospectionUni(TenantConfigContext resolvedContext, String token,\n+    private Uni<TokenIntrospection> newTokenIntrospectionUni(TenantConfigContext resolvedContext, String token, boolean idToken,\n             Long expiresIn, boolean fallbackFromJwkMatch) {\n-        Uni<TokenIntrospection> tokenIntrospectionUni = resolvedContext.provider().introspectToken(token, expiresIn,\n+        Uni<TokenIntrospection> tokenIntrospectionUni = resolvedContext.provider().introspectToken(token, idToken, expiresIn,\n                 fallbackFromJwkMatch);\n         if (tenantResolver.getTokenIntrospectionCache() == null\n                 || !resolvedContext.oidcConfig().allowTokenIntrospectionCache()) {\n@@ -746,7 +772,8 @@ private static Uni<SecurityIdentity> validateTokenWithoutOidcServer(TokenAuthent\n                     .item(validateAndCreateIdentity(Map.of(), request.getToken(), resolvedContext,\n                             result.localVerificationResult, result.localVerificationResult, null, null, request));\n         } catch (Throwable t) {\n-            return Uni.createFrom().failure(new AuthenticationFailedException(t));\n+            return Uni.createFrom().failure(t instanceof AuthenticationFailedException ? t\n+                    : new AuthenticationFailedException(t, tokenMap(request.getToken())));\n         }\n     }\n \n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcProvider.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcProvider.java\nindex c30ce8942e0f3..02614f4823344 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcProvider.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcProvider.java\n@@ -350,7 +350,8 @@ public Uni<? extends TokenVerificationResult> apply(VerificationKeyResolver reso\n                 });\n     }\n \n-    public Uni<TokenIntrospection> introspectToken(String token, Long expiresIn, boolean fallbackFromJwkMatch) {\n+    public Uni<TokenIntrospection> introspectToken(String token, boolean idToken, Long expiresIn,\n+            boolean fallbackFromJwkMatch) {\n         if (client.getMetadata().getIntrospectionUri() == null) {\n             String errorMessage = String.format(\"Token issued to client %s \"\n                     + (fallbackFromJwkMatch ? \"does not have a matching verification key and it \" : \"\")\n@@ -358,7 +359,7 @@ public Uni<TokenIntrospection> introspectToken(String token, Long expiresIn, boo\n                     + \"please check if your OpenId Connect Provider supports the token introspection\",\n                     oidcConfig.clientId().get());\n \n-            throw new AuthenticationFailedException(errorMessage);\n+            throw new AuthenticationFailedException(errorMessage, tokenMap(token, idToken));\n         }\n         return client.introspectAccessToken(token).onItemOrFailure()\n                 .transform(new BiFunction<TokenIntrospection, Throwable, TokenIntrospection>() {\n@@ -366,7 +367,7 @@ public Uni<TokenIntrospection> introspectToken(String token, Long expiresIn, boo\n                     @Override\n                     public TokenIntrospection apply(TokenIntrospection introspectionResult, Throwable t) {\n                         if (t != null) {\n-                            throw new AuthenticationFailedException(t);\n+                            throw new AuthenticationFailedException(t, tokenMap(token, idToken));\n                         }\n                         Long introspectionExpiresIn = introspectionResult.getLong(OidcConstants.INTROSPECTION_TOKEN_EXP);\n                         if (introspectionExpiresIn == null && expiresIn != null) {\n@@ -374,15 +375,16 @@ public TokenIntrospection apply(TokenIntrospection introspectionResult, Throwabl\n                             introspectionExpiresIn = now() + expiresIn;\n                         }\n                         if (!introspectionResult.isActive()) {\n-                            verifyTokenExpiry(introspectionExpiresIn);\n+                            verifyTokenExpiry(token, idToken, introspectionExpiresIn);\n                             throw new AuthenticationFailedException(\n-                                    String.format(\"Token issued to client %s is not active\", oidcConfig.clientId().get()));\n+                                    String.format(\"Token issued to client %s is not active\", oidcConfig.clientId().get()),\n+                                    tokenMap(token, idToken));\n                         }\n-                        verifyTokenExpiry(introspectionExpiresIn);\n+                        verifyTokenExpiry(token, idToken, introspectionExpiresIn);\n                         try {\n                             verifyTokenAge(introspectionResult.getLong(OidcConstants.INTROSPECTION_TOKEN_IAT));\n                         } catch (InvalidJwtException ex) {\n-                            throw new AuthenticationFailedException(ex);\n+                            throw new AuthenticationFailedException(ex, tokenMap(token, idToken));\n                         }\n \n                         if (requiredClaims != null && !requiredClaims.isEmpty()) {\n@@ -392,16 +394,16 @@ public TokenIntrospection apply(TokenIntrospection introspectionResult, Throwabl\n                                     introspectionClaimValue = introspectionResult.getString(requiredClaim.getKey());\n                                 } catch (ClassCastException ex) {\n                                     LOG.debugf(\"Introspection claim %s is not String\", requiredClaim.getKey());\n-                                    throw new AuthenticationFailedException();\n+                                    throw new AuthenticationFailedException(tokenMap(token, idToken));\n                                 }\n                                 if (introspectionClaimValue == null) {\n                                     LOG.debugf(\"Introspection claim %s is missing\", requiredClaim.getKey());\n-                                    throw new AuthenticationFailedException();\n+                                    throw new AuthenticationFailedException(tokenMap(token, idToken));\n                                 }\n                                 if (!introspectionClaimValue.equals(requiredClaim.getValue())) {\n                                     LOG.debugf(\"Value of the introspection claim %s does not match required value of %s\",\n                                             requiredClaim.getKey(), requiredClaim.getValue());\n-                                    throw new AuthenticationFailedException();\n+                                    throw new AuthenticationFailedException(tokenMap(token, idToken));\n                                 }\n                             }\n                         }\n@@ -412,14 +414,15 @@ public TokenIntrospection apply(TokenIntrospection introspectionResult, Throwabl\n                 });\n     }\n \n-    private void verifyTokenExpiry(Long exp) {\n+    private void verifyTokenExpiry(String token, boolean idToken, Long exp) {\n         if (isTokenExpired(exp)) {\n             String error = String.format(\"Token issued to client %s has expired\",\n                     oidcConfig.clientId().get());\n             LOG.debugf(error);\n             throw new AuthenticationFailedException(\n                     new InvalidJwtException(error,\n-                            List.of(new ErrorCodeValidator.Error(ErrorCodes.EXPIRED, error)), null));\n+                            List.of(new ErrorCodeValidator.Error(ErrorCodes.EXPIRED, error)), null),\n+                    tokenMap(token, idToken));\n         }\n     }\n \n@@ -668,4 +671,7 @@ public String validate(JwtContext jwtContext) throws MalformedClaimException {\n         }\n     }\n \n+    private static Map<String, Object> tokenMap(String token, boolean idToken) {\n+        return Map.of(idToken ? OidcConstants.ID_TOKEN_VALUE : OidcConstants.ACCESS_TOKEN_VALUE, token);\n+    }\n }\n",
    "test_patch": "diff --git a/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/SecurityEventListener.java b/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/SecurityEventListener.java\nnew file mode 100644\nindex 0000000000000..d95da2adff9f2\n--- /dev/null\n+++ b/integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/SecurityEventListener.java\n@@ -0,0 +1,24 @@\n+package io.quarkus.it.keycloak;\n+\n+import jakarta.enterprise.context.ApplicationScoped;\n+import jakarta.enterprise.event.Observes;\n+\n+import io.quarkus.oidc.common.runtime.OidcConstants;\n+import io.quarkus.security.AuthenticationFailedException;\n+import io.quarkus.security.spi.runtime.AuthenticationFailureEvent;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@ApplicationScoped\n+public class SecurityEventListener {\n+\n+    public void event(@Observes AuthenticationFailureEvent event) {\n+        RoutingContext vertxContext = (RoutingContext) event.getEventProperties()\n+                .get(RoutingContext.class.getName());\n+        AuthenticationFailedException ex = (AuthenticationFailedException) event.getAuthenticationFailure();\n+        if (\"expired\".equals(ex.getAttribute(OidcConstants.ACCESS_TOKEN_VALUE))) {\n+            vertxContext.response().setStatusCode(401);\n+            vertxContext.response().end(\"Token: expired\");\n+        }\n+    }\n+\n+}\n\ndiff --git a/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerOpaqueTokenAuthorizationTest.java b/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerOpaqueTokenAuthorizationTest.java\nindex 2c70886ec6fa4..7eca8247029a4 100644\n--- a/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerOpaqueTokenAuthorizationTest.java\n+++ b/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerOpaqueTokenAuthorizationTest.java\n@@ -72,7 +72,8 @@ public void testExpiredBearerToken() {\n                 .header(\"Authorization\", \"Bearer \" + \"expired\")\n                 .get(\"/opaque/api/users/me/bearer\")\n                 .then()\n-                .statusCode(401);\n+                .statusCode(401)\n+                .body(Matchers.equalTo(\"Token: expired\"));\n     }\n \n     @Test\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47025",
    "pr_id": 47025,
    "issue_id": 47021,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Grpc Client in Tests fail when Running on Linux with Netty Native Transports\n### Describe the bug\n\nUsed Getting Started and created a project with the grpc extension.\n\nAdded linux netty native transports and enabled `quarkus.vertx.prefer-native-transport`.\n\nWhen running tests on linux, fails with:\n\n```\nCaused by: java.lang.IllegalStateException: incompatible event loop type: io.netty.channel.epoll.EpollEventLoop\n        at io.netty.channel.AbstractChannel$AbstractUnsafe.register(AbstractChannel.java:472)\n```\n\n\n\n\n### Expected behavior\n\nTests should pass\n\n### Actual behavior\n\nTest fails with\n```\nCaused by: java.lang.IllegalStateException: incompatible event loop type: io.netty.channel.epoll.EpollEventLoop\n        at io.netty.channel.AbstractChannel$AbstractUnsafe.register(AbstractChannel.java:472)\n```\n\n\n### How to Reproduce?\n\nReproducer: https://github.com/pcasaes/test-grpc-client\n\nOn windows and mac can use docker to run on linux vm\n\n```\ndocker run --rm -it -v .:/work maven:3.9-amazoncorretto-21 /bin/bash\n\ncd work\nmvn clean verify\n```\n\n### Output of `uname -a` or `ver`\n\nLinux 09dcf29f42c6 6.10.14-linuxkit #1 SMP Fri Nov 29 17:22:03 UTC 2024 aarch64 aarch64 aarch64 GNU/Linux\n\n### Output of `java -version`\n\nOpenJDK 64-Bit Server VM warning: Unable to get SVE vector length on this system. Disabling SVE. Specify -XX:UseSVE=0 to shun this warning. openjdk version \"21.0.6\" 2025-01-21 LTS OpenJDK Runtime Environment Corretto-21.0.6.7.1 (build 21.0.6+7-LTS) OpenJDK 64-Bit Server VM Corretto-21.0.6.7.1 (build 21.0.6+7-LTS, mixed mode, sharing)\n\n### Quarkus version or git rev\n\n3.21.0\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nOpenJDK 64-Bit Server VM warning: Unable to get SVE vector length on this system. Disabling SVE. Specify -XX:UseSVE=0 to shun this warning. Apache Maven 3.9.9 (8e8579a9e76f7d015ee5ec7bfcdc97d260186937) Maven home: /usr/share/maven Java version: 21.0.6, vendor: Amazon.com Inc., runtime: /usr/lib/jvm/java-21-amazon-corretto Default locale: en, platform encoding: UTF-8 OS name: \"linux\", version: \"6.10.14-linuxkit\", arch: \"aarch64\", family: \"unix\"\n\n### Additional information\n\nThe issue seems to be in the GRPC Client. Although the client is in the test code in this reproducer, I suspect the issue will also happen in production code.\n\nDisabling GRPC client's use-vertx-event-loop will allow the client to work. The issue seems to be introduced by this PR https://github.com/quarkusio/quarkus/pull/46198\n\n```yaml\nquarkus:\n  vertx:\n    prefer-native-transport: true\n  grpc:\n    clients:\n      \"test\":\n        use-vertx-event-loop: false\n```\n\nDisabling native-transport will also allow the the client to work. Using the new Vert.x gRPC on the server has no impact.",
    "issue_word_count": 435,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "extensions/grpc/deployment/src/test/java/io/quarkus/grpc/client/MutinyStubInjectionTest.java",
      "extensions/grpc/runtime/src/main/java/io/quarkus/grpc/runtime/supports/Channels.java"
    ],
    "pr_changed_test_files": [
      "extensions/grpc/deployment/src/test/java/io/quarkus/grpc/client/MutinyStubInjectionTest.java"
    ],
    "base_commit": "cb27ee738c8a7d21f9037461037697100cf30399",
    "head_commit": "2c42ae841720ed6d7f2f1d1c6fbcadef326037fc",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47025",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47025",
    "dockerfile": "",
    "pr_merged_at": "2025-04-01T15:41:07.000Z",
    "patch": "diff --git a/extensions/grpc/runtime/src/main/java/io/quarkus/grpc/runtime/supports/Channels.java b/extensions/grpc/runtime/src/main/java/io/quarkus/grpc/runtime/supports/Channels.java\nindex d8514c4ab2e0a..15332f3796a9e 100644\n--- a/extensions/grpc/runtime/src/main/java/io/quarkus/grpc/runtime/supports/Channels.java\n+++ b/extensions/grpc/runtime/src/main/java/io/quarkus/grpc/runtime/supports/Channels.java\n@@ -212,7 +212,7 @@ public static Channel createChannel(String name, Set<String> perClientIntercepto\n                 // just use the existing Vertx event loop group, if possible\n                 Vertx vertx = container.instance(Vertx.class).get();\n                 // only support NIO for now, since Vertx::transport is not exposed in the API\n-                if (vertx != null && vertx.isNativeTransportEnabled()) {\n+                if (vertx != null && !vertx.isNativeTransportEnabled()) {\n                     // see https://github.com/eclipse-vertx/vert.x/pull/5292\n                     boolean reuseNettyAllocators = Boolean.getBoolean(\"vertx.reuseNettyAllocators\");\n                     if (reuseNettyAllocators) {\n",
    "test_patch": "diff --git a/extensions/grpc/deployment/src/test/java/io/quarkus/grpc/client/MutinyStubInjectionTest.java b/extensions/grpc/deployment/src/test/java/io/quarkus/grpc/client/MutinyStubInjectionTest.java\nindex f9cb5c8a4722a..d0a40e359eb46 100644\n--- a/extensions/grpc/deployment/src/test/java/io/quarkus/grpc/client/MutinyStubInjectionTest.java\n+++ b/extensions/grpc/deployment/src/test/java/io/quarkus/grpc/client/MutinyStubInjectionTest.java\n@@ -45,7 +45,7 @@ public class MutinyStubInjectionTest {\n     @Test\n     public void test() {\n         String neo = service.invoke(\"neo-mutiny\");\n-        assertThat(neo).startsWith(\"Hello neo-mutiny\").doesNotContain(\"vert.x\");\n+        assertThat(neo).startsWith(\"Hello neo-mutiny\").contains(\"vert.x\");\n \n         neo = service.invokeFromIoThread(\"neo-io\");\n         assertThat(neo).startsWith(\"Hello neo-io\").contains(\"vert.x\");\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-47012",
    "pr_id": 47012,
    "issue_id": 44278,
    "repo": "quarkusio/quarkus",
    "problem_statement": "JPA static metamodel / Jakarta Data tests, dependency management and documentation\n### Description\n\nWe currently don't have guidance regarding the use of the JPA static metamodel or Jakarta Data in Quarkus.\n\nUltimately we will want to handle Jakarta Data in Panache and provide an integrated developer experience, but:\n\n1. This will require Panache 2, which still requires some time before it can get out.\n2. Some people will not be using Panache anyway.\n\nSo, let's:\n\n* Add dependency management for Jakarta Data dependencies, aligned on whatever Hibernate ORM requires/implements\n* Document how to use the JPA static metamodel and Jakarta Data in Quarkus. In particular Jakarta Data requires an additional runtime dependency.\n* Document known limitations. In particular, I suspect the annotation processor won't work great in dev mode, at least in Gradle -- I think @FroMage made it work with Maven, at least.\n* Add integration tests.\n* Perhaps, add a quickstart.\n\n### Implementation ideas\n\n_No response_",
    "issue_word_count": 153,
    "test_files_count": 8,
    "non_test_files_count": 5,
    "pr_changed_files": [
      "bom/application/pom.xml",
      "docs/pom.xml",
      "docs/src/main/asciidoc/_attributes.adoc",
      "docs/src/main/asciidoc/hibernate-orm.adoc",
      "integration-tests/hibernate-orm-data/pom.xml",
      "integration-tests/hibernate-orm-data/src/main/java/io/quarkus/it/hibernate/jpamodelgen/data/MyEntity.java",
      "integration-tests/hibernate-orm-data/src/main/java/io/quarkus/it/hibernate/jpamodelgen/data/MyEntityResource.java",
      "integration-tests/hibernate-orm-data/src/main/java/io/quarkus/it/hibernate/jpamodelgen/data/MyRepository.java",
      "integration-tests/hibernate-orm-data/src/main/resources/application.properties",
      "integration-tests/hibernate-orm-data/src/test/java/io/quarkus/it/hibernate/jpamodelgen/data/HibernateOrmDataInGraalIT.java",
      "integration-tests/hibernate-orm-data/src/test/java/io/quarkus/it/hibernate/jpamodelgen/data/HibernateOrmDataTest.java",
      "integration-tests/pom.xml",
      "pom.xml"
    ],
    "pr_changed_test_files": [
      "integration-tests/hibernate-orm-data/pom.xml",
      "integration-tests/hibernate-orm-data/src/main/java/io/quarkus/it/hibernate/jpamodelgen/data/MyEntity.java",
      "integration-tests/hibernate-orm-data/src/main/java/io/quarkus/it/hibernate/jpamodelgen/data/MyEntityResource.java",
      "integration-tests/hibernate-orm-data/src/main/java/io/quarkus/it/hibernate/jpamodelgen/data/MyRepository.java",
      "integration-tests/hibernate-orm-data/src/main/resources/application.properties",
      "integration-tests/hibernate-orm-data/src/test/java/io/quarkus/it/hibernate/jpamodelgen/data/HibernateOrmDataInGraalIT.java",
      "integration-tests/hibernate-orm-data/src/test/java/io/quarkus/it/hibernate/jpamodelgen/data/HibernateOrmDataTest.java",
      "integration-tests/pom.xml"
    ],
    "base_commit": "1179279cf85000dbca5e396369e9e4b0ce9bd384",
    "head_commit": "cc55044bd8295d9a479480681c63675c0422a262",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/47012",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47012",
    "dockerfile": "",
    "pr_merged_at": "2025-04-14T07:33:23.000Z",
    "patch": "diff --git a/bom/application/pom.xml b/bom/application/pom.xml\nindex a0df2449b6e95..457e12972de2b 100644\n--- a/bom/application/pom.xml\n+++ b/bom/application/pom.xml\n@@ -71,7 +71,8 @@\n         <jakarta.json-api.version>2.1.3</jakarta.json-api.version>\n         <jakarta.json.bind-api.version>3.0.1</jakarta.json.bind-api.version>\n         <jakarta.mail-api.version>2.1.3</jakarta.mail-api.version>\n-        <jakarta.persistence-api.version>3.1.0</jakarta.persistence-api.version>\n+        <!--jakarta.persistence-api.version is located in the root pom -->\n+        <jakarta.data-api.version>1.0.1</jakarta.data-api.version>\n         <jakarta.resource-api.version>2.1.0</jakarta.resource-api.version>\n         <jakarta.servlet-api.version>6.0.0</jakarta.servlet-api.version>\n         <jakarta.transaction-api.version>2.0.1</jakarta.transaction-api.version>\n@@ -4390,6 +4391,11 @@\n                 <artifactId>jakarta.persistence-api</artifactId>\n                 <version>${jakarta.persistence-api.version}</version>\n             </dependency>\n+            <dependency>\n+                <groupId>jakarta.data</groupId>\n+                <artifactId>jakarta.data-api</artifactId>\n+                <version>${jakarta.data-api.version}</version>\n+            </dependency>\n             <dependency>\n                 <groupId>jakarta.resource</groupId>\n                 <artifactId>jakarta.resource-api</artifactId>\n\ndiff --git a/docs/pom.xml b/docs/pom.xml\nindex bc1cddaa15c54..ad1ce9884bf16 100644\n--- a/docs/pom.xml\n+++ b/docs/pom.xml\n@@ -3230,6 +3230,17 @@\n                             <versionString>${hibernate-validator.version}</versionString>\n                         </configuration>\n                     </execution>\n+                    <execution>\n+                        <id>parse-version-jakarta-persistence</id>\n+                        <goals>\n+                            <goal>parse-version</goal>\n+                        </goals>\n+                        <phase>validate</phase>\n+                        <configuration>\n+                            <propertyPrefix>jakarta-persistence</propertyPrefix>\n+                            <versionString>${jakarta.persistence-api.version}</versionString>\n+                        </configuration>\n+                    </execution>\n                 </executions>\n             </plugin>\n             <plugin>\n\ndiff --git a/docs/src/main/asciidoc/_attributes.adoc b/docs/src/main/asciidoc/_attributes.adoc\nindex b91b5fe9eab66..5e2f6023a7a7a 100644\n--- a/docs/src/main/asciidoc/_attributes.adoc\n+++ b/docs/src/main/asciidoc/_attributes.adoc\n@@ -30,6 +30,7 @@\n :hibernate-orm-version-major-minor: ${hibernate-orm.majorVersion}.${hibernate-orm.minorVersion}\n :hibernate-search-version-major-minor: ${hibernate-search.majorVersion}.${hibernate-search.minorVersion}\n :hibernate-validator-version-major-minor: ${hibernate-validator.majorVersion}.${hibernate-validator.minorVersion}\n+:jakarta-persistence-version-major-minor: ${jakarta-persistence.majorVersion}.${jakarta-persistence.minorVersion}\n // .\n :quarkus-home-url: ${quarkus-home-url}\n :quarkus-org-url: https://github.com/quarkusio\n@@ -56,6 +57,7 @@\n :hibernate-orm-dialect-docs-url: https://docs.jboss.org/hibernate/orm/{hibernate-orm-version-major-minor}/dialect/dialect.html\n :hibernate-search-docs-url: https://docs.jboss.org/hibernate/search/{hibernate-search-version-major-minor}/reference/en-US/html_single/\n :hibernate-validator-docs-url: https://docs.jboss.org/hibernate/validator/{hibernate-validator-version-major-minor}/reference/en-US/html_single/\n+:jakarta-persistence-spec-url: https://jakarta.ee/specifications/persistence/{jakarta-persistence-version-major-minor}/jakarta-persistence-spec-{jakarta-persistence-version-major-minor}#a6072\n // .\n :amazon-services-guide: https://docs.quarkiverse.io/quarkus-amazon-services/dev/index.html\n :config-consul-guide: https://docs.quarkiverse.io/quarkus-config-extensions/dev/consul.html\n\ndiff --git a/docs/src/main/asciidoc/hibernate-orm.adoc b/docs/src/main/asciidoc/hibernate-orm.adoc\nindex 9f951ccbebc8f..a750316197db4 100644\n--- a/docs/src/main/asciidoc/hibernate-orm.adoc\n+++ b/docs/src/main/asciidoc/hibernate-orm.adoc\n@@ -1646,3 +1646,134 @@ try {\n Since Quarkus has built-in exception mappers for `jakarta.validation.ConstraintViolationException`,\n explicitly handling these exceptions might be redundant. See the xref:validation.adoc#rest-end-point-validation[REST end point validation]\n section of the Hibernate Validator guide for more details.\n+\n+[[jakarta-data]]\n+== Static metamodel and Jakarta Data\n+\n+Both static metamodel and Jakarta Data capabilities of Hibernate ORM are available in Quarkus\n+through the `hibernate-jpamodelgen` annotation processor. Since it is an annotation processor,\n+you must configure the annotation processor in your build tool:\n+\n+[source,xml,role=\"primary asciidoc-tabs-target-sync-cli asciidoc-tabs-target-sync-maven\"]\n+.pom.xml\n+----\n+<plugin>\n+    <artifactId>maven-compiler-plugin</artifactId>\n+    <configuration>\n+        <annotationProcessorPaths>\n+            <path>\n+                <groupId>org.hibernate.orm</groupId>\n+                <artifactId>hibernate-jpamodelgen</artifactId>\n+                <!-- Note, no artifact version is required, it's managed by Quarkus.  -->\n+            </path>\n+            <!-- other processors that may be required by your app -->\n+        </annotationProcessorPaths>\n+        <!-- Other compiler plugin configuration options -->\n+    </configuration>\n+</plugin>\n+----\n+\n+[source,gradle,role=\"secondary asciidoc-tabs-target-sync-gradle\"]\n+.build.gradle\n+----\n+// Enforce the version management of your annotation processor dependencies,\n+// so that there's no need to define an explicit version of the hibernate-jpamodelgen\n+annotationProcessor enforcedPlatform(\"${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}\")\n+annotationProcessor 'org.hibernate.orm:hibernate-jpamodelgen'\n+----\n+\n+=== Static metamodel\n+\n+The generated static metamodel allows for building queries in a type-safe manner.\n+Let's consider having a simple entity:\n+\n+[source,java]\n+----\n+@Entity\n+public class MyEntity {\n+    @Id\n+    @GeneratedValue\n+    public Integer id;\n+\n+    @Column(unique = true)\n+    public String name;\n+}\n+----\n+\n+A query created with the help of static metamodel may look as:\n+\n+[source,java]\n+----\n+var builder = session.getCriteriaBuilder();\n+var criteria = builder.createQuery(MyEntity.class);\n+var e = criteria.from(MyEntity_.class);\n+criteria.where(e.get(MyEntity_.name).equalTo(name));\n+var query = session.createQuery(criteria);\n+var result = query.list();\n+----\n+\n+For a more detailed overview of static metamodel, please refer to the link:{jakarta-persistence-spec-url}#a6072[Jakarta Persistence specification].\n+\n+=== Jakarta Data\n+\n+Jakarta Data requires, besides having the `hibernate-jpamodelgen` annotation processor in place, one extra dependency to be added:\n+\n+[source,xml,role=\"primary asciidoc-tabs-target-sync-cli asciidoc-tabs-target-sync-maven\"]\n+.pom.xml\n+----\n+<dependency>\n+    <groupId>jakarta.data</groupId>\n+    <artifactId>jakarta.data-api</artifactId>\n+</dependency>\n+----\n+\n+[source,gradle,role=\"secondary asciidoc-tabs-target-sync-gradle\"]\n+.build.gradle\n+----\n+implementation 'jakarta.data:jakarta.data-api'\n+----\n+\n+With this dependency, and the annotation processor in place you could simply create your repositories as follows:\n+\n+[source,java]\n+----\n+@Repository\n+public interface MyRepository extends CrudRepository<MyEntity, Integer> { // <1>\n+\n+    @Query(\"select e from MyEntity e where e.name like :name\") // <2>\n+    List<MyEntity> findByName(String name);\n+\n+    @Delete // <3>\n+    void delete(String name);\n+\n+}\n+----\n+1. To skip the boilerplate definition of CRUD operations,\n+we can use one of the available interfaces (e.g. `CrudRepository` or `BasicRepository`).\n+2. Adding custom queries with parameters is as easy as providing your query string to the `@Query` annotation.\n+3. If the basic CRUD operations from the Jakarta Data interfaces are not enough,\n+we can always add a custom one, in this case a delete operation that removes `MyEntity`s by name.\n+\n+And then the repository can be used as any other bean:\n+\n+[source,java]\n+----\n+public class MyEntityResource {\n+\n+    @Inject\n+    MyRepository repository;\n+\n+    @POST\n+    @Transactional\n+    public void create(MyEntity entity) {\n+        repository.insert(entity);\n+    }\n+\n+\t// ...\n+\n+}\n+----\n+\n+Please refer to the corresponding https://hibernate.org/repositories/[Hibernate Data Repositories]\n+and https://jakarta.ee/specifications/data/1.0/jakarta-data-1.0[Jakarta Data]\n+guides to learn what else they have to offer.\n\ndiff --git a/pom.xml b/pom.xml\nindex b69ce5df3ac26..f350a81e16186 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -72,6 +72,7 @@\n         <kubernetes-client.version>7.1.0</kubernetes-client.version> <!-- Please check with Java Operator SDK team before updating -->\n         <rest-assured.version>5.5.1</rest-assured.version>\n         <hibernate-orm.version>6.6.13.Final</hibernate-orm.version> <!-- WARNING when updating, also align the versions below -->\n+        <jakarta.persistence-api.version>3.1.0</jakarta.persistence-api.version> <!-- version controlled by Hibernate ORM's needs -->\n         <antlr.version>4.13.0</antlr.version> <!-- version controlled by Hibernate ORM's needs -->\n         <bytebuddy.version>1.15.11</bytebuddy.version> <!-- version controlled by Hibernate ORM's needs -->\n         <hibernate-commons-annotations.version>7.0.3.Final</hibernate-commons-annotations.version> <!-- version controlled by Hibernate ORM's needs -->\n",
    "test_patch": "diff --git a/integration-tests/hibernate-orm-data/pom.xml b/integration-tests/hibernate-orm-data/pom.xml\nnew file mode 100644\nindex 0000000000000..66d2437bc6c98\n--- /dev/null\n+++ b/integration-tests/hibernate-orm-data/pom.xml\n@@ -0,0 +1,148 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>quarkus-integration-tests-parent</artifactId>\n+        <groupId>io.quarkus</groupId>\n+        <version>999-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>quarkus-integration-test-hibernate-orm-data</artifactId>\n+    <name>Quarkus - Integration Tests - Hibernate ORM with Jakarta Data</name>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-hibernate-orm</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>jakarta.data</groupId>\n+            <artifactId>jakarta.data-api</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-rest</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-rest-jackson</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-jdbc-h2</artifactId>\n+        </dependency>\n+\n+        <!-- test dependencies -->\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-junit5</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-junit5-internal</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.rest-assured</groupId>\n+            <artifactId>rest-assured</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.assertj</groupId>\n+            <artifactId>assertj-core</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <!-- Minimal test dependencies to *-deployment artifacts for consistent build order -->\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-hibernate-orm-deployment</artifactId>\n+            <version>${project.version}</version>\n+            <type>pom</type>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>*</groupId>\n+                    <artifactId>*</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-jdbc-h2-deployment</artifactId>\n+            <version>${project.version}</version>\n+            <type>pom</type>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>*</groupId>\n+                    <artifactId>*</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-rest-deployment</artifactId>\n+            <version>${project.version}</version>\n+            <type>pom</type>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>*</groupId>\n+                    <artifactId>*</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-rest-jackson-deployment</artifactId>\n+            <version>${project.version}</version>\n+            <type>pom</type>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>*</groupId>\n+                    <artifactId>*</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <resources>\n+            <resource>\n+                <directory>src/main/resources</directory>\n+                <filtering>true</filtering>\n+            </resource>\n+        </resources>\n+        <plugins>\n+            <plugin>\n+                <groupId>io.quarkus</groupId>\n+                <artifactId>quarkus-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>build</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <configuration>\n+                    <annotationProcessorPaths>\n+                        <path>\n+                            <groupId>org.hibernate.orm</groupId>\n+                            <artifactId>hibernate-jpamodelgen</artifactId>\n+                        </path>\n+                    </annotationProcessorPaths>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+\n+</project>\n\ndiff --git a/integration-tests/hibernate-orm-data/src/main/java/io/quarkus/it/hibernate/jpamodelgen/data/MyEntity.java b/integration-tests/hibernate-orm-data/src/main/java/io/quarkus/it/hibernate/jpamodelgen/data/MyEntity.java\nnew file mode 100644\nindex 0000000000000..0c12769a65e80\n--- /dev/null\n+++ b/integration-tests/hibernate-orm-data/src/main/java/io/quarkus/it/hibernate/jpamodelgen/data/MyEntity.java\n@@ -0,0 +1,30 @@\n+package io.quarkus.it.hibernate.jpamodelgen.data;\n+\n+import jakarta.persistence.Column;\n+import jakarta.persistence.Entity;\n+import jakarta.persistence.GeneratedValue;\n+import jakarta.persistence.Id;\n+\n+@Entity\n+public class MyEntity {\n+\n+    @Id\n+    @GeneratedValue\n+    public Integer id;\n+\n+    @Column(unique = true)\n+    public String name;\n+\n+    MyEntity() {\n+    }\n+\n+    public MyEntity(String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"MyOrmEntity [id=\" + id + \", name=\" + name + \"]\";\n+    }\n+\n+}\n\ndiff --git a/integration-tests/hibernate-orm-data/src/main/java/io/quarkus/it/hibernate/jpamodelgen/data/MyEntityResource.java b/integration-tests/hibernate-orm-data/src/main/java/io/quarkus/it/hibernate/jpamodelgen/data/MyEntityResource.java\nnew file mode 100644\nindex 0000000000000..5572299945ca6\n--- /dev/null\n+++ b/integration-tests/hibernate-orm-data/src/main/java/io/quarkus/it/hibernate/jpamodelgen/data/MyEntityResource.java\n@@ -0,0 +1,59 @@\n+package io.quarkus.it.hibernate.jpamodelgen.data;\n+\n+import java.util.List;\n+\n+import jakarta.enterprise.context.ApplicationScoped;\n+import jakarta.inject.Inject;\n+import jakarta.transaction.Transactional;\n+import jakarta.ws.rs.Consumes;\n+import jakarta.ws.rs.DELETE;\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.NotFoundException;\n+import jakarta.ws.rs.POST;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.Produces;\n+\n+import org.jboss.resteasy.reactive.RestPath;\n+\n+@ApplicationScoped\n+@Produces(\"application/json\")\n+@Consumes(\"application/json\")\n+@Path(\"/data/\")\n+public class MyEntityResource {\n+\n+    @Inject\n+    MyRepository repository;\n+\n+    @POST\n+    @Transactional\n+    public void create(MyEntity entity) {\n+        repository.insert(entity);\n+    }\n+\n+    @GET\n+    @Transactional\n+    @Path(\"/by/name/{name}\")\n+    public MyEntity getByName(@RestPath String name) {\n+        List<MyEntity> entities = repository.findByName(name);\n+        if (entities.isEmpty()) {\n+            throw new NotFoundException();\n+        }\n+        return entities.get(0);\n+    }\n+\n+    @POST\n+    @Transactional\n+    @Path(\"/rename/{before}/to/{after}\")\n+    public void rename(@RestPath String before, @RestPath String after) {\n+        MyEntity byName = getByName(before);\n+        byName.name = after;\n+        repository.update(byName);\n+    }\n+\n+    @DELETE\n+    @Transactional\n+    @Path(\"/by/name/{name}\")\n+    public void deleteByName(@RestPath String name) {\n+        repository.delete(name);\n+    }\n+}\n\ndiff --git a/integration-tests/hibernate-orm-data/src/main/java/io/quarkus/it/hibernate/jpamodelgen/data/MyRepository.java b/integration-tests/hibernate-orm-data/src/main/java/io/quarkus/it/hibernate/jpamodelgen/data/MyRepository.java\nnew file mode 100644\nindex 0000000000000..d2c2073ec3be6\n--- /dev/null\n+++ b/integration-tests/hibernate-orm-data/src/main/java/io/quarkus/it/hibernate/jpamodelgen/data/MyRepository.java\n@@ -0,0 +1,19 @@\n+package io.quarkus.it.hibernate.jpamodelgen.data;\n+\n+import java.util.List;\n+\n+import jakarta.data.repository.CrudRepository;\n+import jakarta.data.repository.Delete;\n+import jakarta.data.repository.Query;\n+import jakarta.data.repository.Repository;\n+\n+@Repository\n+public interface MyRepository extends CrudRepository<MyEntity, Integer> {\n+\n+    @Query(\"select e from MyEntity e where e.name like :name\")\n+    List<MyEntity> findByName(String name);\n+\n+    @Delete\n+    void delete(String name);\n+\n+}\n\ndiff --git a/integration-tests/hibernate-orm-data/src/main/resources/application.properties b/integration-tests/hibernate-orm-data/src/main/resources/application.properties\nnew file mode 100644\nindex 0000000000000..0c8f975c6ca56\n--- /dev/null\n+++ b/integration-tests/hibernate-orm-data/src/main/resources/application.properties\n@@ -0,0 +1,2 @@\n+quarkus.datasource.jdbc.max-size=8\n+quarkus.hibernate-orm.database.generation=drop-and-create\n\ndiff --git a/integration-tests/hibernate-orm-data/src/test/java/io/quarkus/it/hibernate/jpamodelgen/data/HibernateOrmDataInGraalIT.java b/integration-tests/hibernate-orm-data/src/test/java/io/quarkus/it/hibernate/jpamodelgen/data/HibernateOrmDataInGraalIT.java\nnew file mode 100644\nindex 0000000000000..64175aee5e43a\n--- /dev/null\n+++ b/integration-tests/hibernate-orm-data/src/test/java/io/quarkus/it/hibernate/jpamodelgen/data/HibernateOrmDataInGraalIT.java\n@@ -0,0 +1,8 @@\n+package io.quarkus.it.hibernate.jpamodelgen.data;\n+\n+import io.quarkus.test.junit.QuarkusIntegrationTest;\n+\n+@QuarkusIntegrationTest\n+public class HibernateOrmDataInGraalIT extends HibernateOrmDataTest {\n+\n+}\n\ndiff --git a/integration-tests/hibernate-orm-data/src/test/java/io/quarkus/it/hibernate/jpamodelgen/data/HibernateOrmDataTest.java b/integration-tests/hibernate-orm-data/src/test/java/io/quarkus/it/hibernate/jpamodelgen/data/HibernateOrmDataTest.java\nnew file mode 100644\nindex 0000000000000..928f783b4692e\n--- /dev/null\n+++ b/integration-tests/hibernate-orm-data/src/test/java/io/quarkus/it/hibernate/jpamodelgen/data/HibernateOrmDataTest.java\n@@ -0,0 +1,71 @@\n+package io.quarkus.it.hibernate.jpamodelgen.data;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.http.ContentType;\n+\n+@QuarkusTest\n+public class HibernateOrmDataTest {\n+    private static final String ROOT = \"/data\";\n+\n+    @Test\n+    public void staticMetamodel() {\n+        // Create/retrieve\n+        given()\n+                .pathParam(\"name\", \"foo\")\n+                .contentType(ContentType.JSON)\n+                .when().get(ROOT + \"/by/name/{name}\")\n+                .then()\n+                .statusCode(404);\n+        given()\n+                .body(new MyEntity(\"foo\"))\n+                .contentType(ContentType.JSON)\n+                .when().post(ROOT)\n+                .then()\n+                .statusCode(204);\n+        given()\n+                .pathParam(\"name\", \"foo\")\n+                .contentType(ContentType.JSON)\n+                .when().get(ROOT + \"/by/name/{name}\")\n+                .then()\n+                .statusCode(200);\n+\n+        // Update\n+        given()\n+                .pathParam(\"name\", \"bar\")\n+                .contentType(ContentType.JSON)\n+                .when().get(ROOT + \"/by/name/{name}\")\n+                .then()\n+                .statusCode(404);\n+        given()\n+                .pathParam(\"before\", \"foo\")\n+                .pathParam(\"after\", \"bar\")\n+                .contentType(ContentType.JSON)\n+                .when().post(ROOT + \"/rename/{before}/to/{after}\")\n+                .then()\n+                .statusCode(204);\n+        given()\n+                .pathParam(\"name\", \"bar\")\n+                .contentType(ContentType.JSON)\n+                .when().get(ROOT + \"/by/name/{name}\")\n+                .then()\n+                .statusCode(200);\n+\n+        // Delete\n+        given()\n+                .pathParam(\"name\", \"bar\")\n+                .contentType(ContentType.JSON)\n+                .when().delete(ROOT + \"/by/name/{name}\")\n+                .then()\n+                .statusCode(204);\n+        given()\n+                .pathParam(\"name\", \"bar\")\n+                .contentType(ContentType.JSON)\n+                .when().get(ROOT + \"/by/name/{name}\")\n+                .then()\n+                .statusCode(404);\n+    }\n+}\n\ndiff --git a/integration-tests/pom.xml b/integration-tests/pom.xml\nindex ee572ee589bcc..c56a7a3b3ac1f 100644\n--- a/integration-tests/pom.xml\n+++ b/integration-tests/pom.xml\n@@ -230,6 +230,7 @@\n                 <module>hibernate-search-standalone-opensearch</module>\n                 <module>hibernate-orm-tenancy</module>\n                 <module>hibernate-orm-jpamodelgen</module>\n+                <module>hibernate-orm-data</module>\n                 <module>hibernate-orm-envers</module>\n                 <module>vertx-http</module>\n                 <module>vertx-http-compressors</module>\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46991",
    "pr_id": 46991,
    "issue_id": 0,
    "repo": "quarkusio/quarkus",
    "problem_statement": "",
    "issue_word_count": 0,
    "test_files_count": 0,
    "non_test_files_count": 0,
    "pr_changed_files": [],
    "pr_changed_test_files": [],
    "base_commit": "",
    "head_commit": "",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46991",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46991",
    "dockerfile": "",
    "pr_merged_at": "",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46985",
    "pr_id": 46985,
    "issue_id": 46980,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Qute template validation error when using template records with fragments\n### Describe the bug\n\nI get a validation error when using template records with a fragment that I don’t get with the equivalent type-safe template.\n\n### Expected behavior\n\nNo build error.\n\n### Actual behavior\n\nA build error:\n\n```\nExecution failed for task ':quarkusAppPartsBuild'.\n> There was a failure while executing work items\n   > A failure occurred while executing io.quarkus.gradle.tasks.worker.BuildWorker\n      > io.quarkus.builder.BuildException: Build failure: Build failed due to errors\n                [error]: Build step io.quarkus.qute.deployment.QuteProcessor#processTemplateErrors threw an exception: io.quarkus.qute.TemplateException: Found incorrect expressions (1):\n                [1] GreetingResource/hello.txt:2:29 - {foo}: Only type-safe expressions are allowed in the checked template defined via: org.acme.GreetingResource$hello; an expression must be based on a checked template parameter [foo, name], or bound via a param declaration, or the requirement must be relaxed via @CheckedTemplate(requireTypeSafeExpressions = false)\n        \n                at io.quarkus.qute.deployment.QuteProcessor.processTemplateErrors(QuteProcessor.java:271)\n                at java.base/java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:733)\n                at io.quarkus.deployment.ExtensionLoader$3.execute(ExtensionLoader.java:856)\n                at io.quarkus.builder.BuildContext.run(BuildContext.java:256)\n                at org.jboss.threads.ContextHandler$1.runWith(ContextHandler.java:18)\n                at org.jboss.threads.EnhancedQueueExecutor$Task.doRunWith(EnhancedQueueExecutor.java:2675)\n                at org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2654)\n                at org.jboss.threads.EnhancedQueueExecutor.runThreadBody(EnhancedQueueExecutor.java:1627)\n                at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1594)\n                at java.base/java.lang.Thread.run(Thread.java:1583)\n                at org.jboss.threads.JBossThread.run(JBossThread.java:499)\n                Suppressed: io.quarkus.qute.TemplateException: GreetingResource/hello.txt:2:29 - {foo}: Only type-safe expressions are allowed in the checked template defined via: org.acme.GreetingResource$hello; an expression must be based on a checked template parameter [foo, name], or bound via a param declaration, or the requirement must be relaxed via @CheckedTemplate(requireTypeSafeExpressions = false)\n                        at io.quarkus.qute.TemplateException$Builder.build(TemplateException.java:169)\n                        at io.quarkus.qute.deployment.QuteProcessor.processTemplateErrors(QuteProcessor.java:236)\n                        ... 10 more\n```\n\n### How to Reproduce?\n\nReproducer: [quarkus-reproducer.zip](https://github.com/user-attachments/files/19441281/quarkus-reproducer.zip)\n\n*Steps to reproduce*\n\n1. Run `./gradlew clean build`.\n\n### Output of `uname -a` or `ver`\n\nDarwin Rods-MacBook-Pro.local 24.3.0 Darwin Kernel Version 24.3.0: Thu Jan  2 20:24:23 PST 2025; root:xnu-11215.81.4~3/RELEASE_ARM64_T6031 arm64\n\n### Output of `java -version`\n\nopenjdk version \"21.0.6\" 2025-01-21 OpenJDK Runtime Environment Homebrew (build 21.0.6) OpenJDK 64-Bit Server VM Homebrew (build 21.0.6, mixed mode, sharing)\n\n### Quarkus version or git rev\n\n3.19.4\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nGradle 8.9\n\n### Additional information\n\n_No response_",
    "issue_word_count": 456,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/QuteProcessor.java",
      "extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/records/TemplateRecordTest.java"
    ],
    "pr_changed_test_files": [
      "extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/records/TemplateRecordTest.java"
    ],
    "base_commit": "ec22a127fd9c5219ebe65f3c13c2191293570a01",
    "head_commit": "a721c3f3c13be0123bf8c813d9765eec707de9d2",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46985",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46985",
    "dockerfile": "",
    "pr_merged_at": "2025-03-25T11:40:43.000Z",
    "patch": "diff --git a/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/QuteProcessor.java b/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/QuteProcessor.java\nindex 41cd73c3b0125..411bed98d68df 100644\n--- a/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/QuteProcessor.java\n+++ b/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/QuteProcessor.java\n@@ -725,6 +725,10 @@ public void beforeParsing(ParserHelper parserHelper) {\n                     // We need to find out whether the parsed template represents a checked template\n                     String path = templatePathWithoutSuffix(templateId, config);\n                     for (CheckedTemplateBuildItem checkedTemplate : checkedTemplates) {\n+                        if (checkedTemplate.isFragment()) {\n+                            // Ignore fragments\n+                            continue;\n+                        }\n                         if (checkedTemplate.templateId.equals(path)) {\n                             for (Entry<String, String> entry : checkedTemplate.bindings.entrySet()) {\n                                 parserHelper.addParameter(entry.getKey(), entry.getValue());\n",
    "test_patch": "diff --git a/extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/records/TemplateRecordTest.java b/extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/records/TemplateRecordTest.java\nindex d3f7e1546d14a..9f773c8781b02 100644\n--- a/extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/records/TemplateRecordTest.java\n+++ b/extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/records/TemplateRecordTest.java\n@@ -34,7 +34,7 @@ public class TemplateRecordTest {\n                             \"templates/TemplateRecordTest/HelloInt.txt\")\n                     .addAsResource(new StringAsset(\"Hello {name}!\"),\n                             \"templates/hello_world.txt\")\n-                    .addAsResource(new StringAsset(\"Hello {#fragment id=name}{name}{/fragment}!\"),\n+                    .addAsResource(new StringAsset(\"Hello {#fragment name}{name}{/fragment} and {foo}!\"),\n                             \"templates/hello.txt\")\n                     .addAsResource(new StringAsset(\"{alpha}:{bravo}:{charlie}\"),\n                             \"templates/TemplateRecordTest/multiParams.txt\"));\n@@ -71,7 +71,14 @@ public void testTemplateRecords() throws InterruptedException, ExecutionExceptio\n         assertFalse(helloInt.getTemplate().isFragment());\n \n         assertEquals(\"Hello Lu!\", new helloWorld(\"Lu\").render());\n-        assertEquals(\"Lu\", new hello$name(\"Lu\").render());\n+\n+        hello hello = new hello(\"Ma\", \"bar\");\n+        assertFalse(hello.getTemplate().isFragment());\n+        assertEquals(\"Hello Ma and bar!\", hello.render());\n+\n+        hello$name hello$name = new hello$name(\"Lu\");\n+        assertTrue(hello$name.getTemplate().isFragment());\n+        assertEquals(\"Lu\", hello$name.render());\n \n         assertEquals(\"15:true:foo\", new multiParams(true, 15, \"foo\").render());\n         assertThrows(IllegalArgumentException.class, () -> new multiParams(false, 50, null));\n@@ -84,6 +91,10 @@ record HelloInt(int val) implements TemplateInstance {\n     record helloWorld(String name) implements TemplateInstance {\n     }\n \n+    @CheckedTemplate(basePath = \"\")\n+    record hello(String name, String foo) implements TemplateInstance {\n+    }\n+\n     @CheckedTemplate(basePath = \"\")\n     record hello$name(String name) implements TemplateInstance {\n     }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46956",
    "pr_id": 46956,
    "issue_id": 46628,
    "repo": "quarkusio/quarkus",
    "problem_statement": "swagger ui does not show schema examples after migration to quarkus 3.19\n### Describe the bug\n\nAfter migration from quarkus 3.16.3 to 3.19.1 we recognized that open api examples for schemas are not shown anymore in the swagger ui\n\n### Expected behavior\n\nExamples must be shown like in previous version.  Example from swagger ui of quarkus 3.16.3:\n\n![Image](https://github.com/user-attachments/assets/4a6d976d-503d-4e80-a4df-de97408e6009)\n\n### Actual behavior\n\nThe example is not shown in the swagger UI\n\n### How to Reproduce?\n\n1. create an attribute on a class\n2. add @Schema annotation with example value to the attribute\n```\n@Schema(example = \"John\")\nprivate String firstName;\n```\n3. run application in dev mode\n4. check the generated swagger ui. The example is not visible:\n\n![Image](https://github.com/user-attachments/assets/f750d0b3-bd61-459a-b056-44bc5316c441)\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### Quarkus version or git rev\n\n_No response_\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\nIt seems that since microprofile open api specification version 4, the attribute \"example\" on schema annotation was deprecated. Instead that, the attribute \"examples\" must be used. It seems that quarkus automatically maps the example attribute value to examples. So if i use\n```\n@Schema(example = \"John\")\nprivate String firstName;\n```  \nthe open api specification contains following content: \n\n![Image](https://github.com/user-attachments/assets/f52e724d-c135-4821-a0ac-7417e767be6e)\n",
    "issue_word_count": 242,
    "test_files_count": 2,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "extensions/smallrye-openapi-common/deployment/src/main/java/io/quarkus/smallrye/openapi/common/deployment/SmallRyeOpenApiConfig.java",
      "extensions/smallrye-openapi/deployment/src/test/java/io/quarkus/smallrye/openapi/deployment/filter/SecurityConfigFilterTest.java",
      "extensions/smallrye-openapi/deployment/src/test/java/io/quarkus/smallrye/openapi/test/jaxrs/MergeSchemaExamplesTestCases.java",
      "extensions/smallrye-openapi/runtime/src/main/java/io/quarkus/smallrye/openapi/runtime/OpenApiConfigMapping.java",
      "tcks/microprofile-openapi/pom.xml"
    ],
    "pr_changed_test_files": [
      "extensions/smallrye-openapi/deployment/src/test/java/io/quarkus/smallrye/openapi/deployment/filter/SecurityConfigFilterTest.java",
      "extensions/smallrye-openapi/deployment/src/test/java/io/quarkus/smallrye/openapi/test/jaxrs/MergeSchemaExamplesTestCases.java"
    ],
    "base_commit": "ec22a127fd9c5219ebe65f3c13c2191293570a01",
    "head_commit": "28eade70a083e6c70369ce643c6b183bcfb9925b",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46956",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46956",
    "dockerfile": "",
    "pr_merged_at": "2025-03-25T15:56:22.000Z",
    "patch": "diff --git a/extensions/smallrye-openapi-common/deployment/src/main/java/io/quarkus/smallrye/openapi/common/deployment/SmallRyeOpenApiConfig.java b/extensions/smallrye-openapi-common/deployment/src/main/java/io/quarkus/smallrye/openapi/common/deployment/SmallRyeOpenApiConfig.java\nindex 67e681e839156..224f297da9ee4 100644\n--- a/extensions/smallrye-openapi-common/deployment/src/main/java/io/quarkus/smallrye/openapi/common/deployment/SmallRyeOpenApiConfig.java\n+++ b/extensions/smallrye-openapi-common/deployment/src/main/java/io/quarkus/smallrye/openapi/common/deployment/SmallRyeOpenApiConfig.java\n@@ -110,7 +110,6 @@ public interface SmallRyeOpenApiConfig {\n      * Setting it to `true` will automatically add a default server to the schema if none is provided,\n      * using the current running server host and port.\n      */\n-\n     Optional<Boolean> autoAddServer();\n \n     /**\n@@ -122,13 +121,11 @@ public interface SmallRyeOpenApiConfig {\n     /**\n      * Required when using `apiKey` security. The location of the API key. Valid values are \"query\", \"header\" or \"cookie\".\n      */\n-\n     Optional<String> apiKeyParameterIn();\n \n     /**\n      * Required when using `apiKey` security. The name of the header, query or cookie parameter to be used.\n      */\n-\n     Optional<String> apiKeyParameterName();\n \n     /**\n@@ -236,6 +233,15 @@ public interface SmallRyeOpenApiConfig {\n      */\n     Optional<OperationIdStrategy> operationIdStrategy();\n \n+    /**\n+     * Set this boolean value to enable the merging of the deprecated `@Schema`\n+     * `example` property into the `examples` array introduced in OAS 3.1.0. If\n+     * not set, it will default to `false` and the deprecated `example` will be\n+     * kept as a separate annotation on the schema in the OpenAPI model.\n+     */\n+    @WithDefault(\"false\")\n+    boolean mergeSchemaExamples();\n+\n     public enum SecurityScheme {\n         apiKey,\n         basic,\n\ndiff --git a/extensions/smallrye-openapi/runtime/src/main/java/io/quarkus/smallrye/openapi/runtime/OpenApiConfigMapping.java b/extensions/smallrye-openapi/runtime/src/main/java/io/quarkus/smallrye/openapi/runtime/OpenApiConfigMapping.java\nindex 9d1fdb11ad2ce..52df8fec94563 100644\n--- a/extensions/smallrye-openapi/runtime/src/main/java/io/quarkus/smallrye/openapi/runtime/OpenApiConfigMapping.java\n+++ b/extensions/smallrye-openapi/runtime/src/main/java/io/quarkus/smallrye/openapi/runtime/OpenApiConfigMapping.java\n@@ -54,6 +54,7 @@ private static Map<String, String> relocations() {\n         mapKey(relocations, SmallRyeOASConfig.INFO_LICENSE_NAME, QUARKUS_INFO_LICENSE_NAME);\n         mapKey(relocations, SmallRyeOASConfig.INFO_LICENSE_URL, QUARKUS_INFO_LICENSE_URL);\n         mapKey(relocations, SmallRyeOASConfig.OPERATION_ID_STRAGEGY, QUARKUS_OPERATION_ID_STRATEGY);\n+        mapKey(relocations, SmallRyeOASConfig.SMALLRYE_MERGE_SCHEMA_EXAMPLES, QUARKUS_MERGE_SCHEMA_EXAMPLES);\n         return Collections.unmodifiableMap(relocations);\n     }\n \n@@ -74,5 +75,6 @@ private static void mapKey(Map<String, String> map, String quarkusKey, String ot\n     private static final String QUARKUS_INFO_LICENSE_NAME = \"quarkus.smallrye-openapi.info-license-name\";\n     private static final String QUARKUS_INFO_LICENSE_URL = \"quarkus.smallrye-openapi.info-license-url\";\n     private static final String QUARKUS_OPERATION_ID_STRATEGY = \"quarkus.smallrye-openapi.operation-id-strategy\";\n+    private static final String QUARKUS_MERGE_SCHEMA_EXAMPLES = \"quarkus.smallrye-openapi.merge-schema-examples\";\n \n }\n\ndiff --git a/tcks/microprofile-openapi/pom.xml b/tcks/microprofile-openapi/pom.xml\nindex e704edbf5c9f8..5f52b2bec26e1 100644\n--- a/tcks/microprofile-openapi/pom.xml\n+++ b/tcks/microprofile-openapi/pom.xml\n@@ -31,6 +31,7 @@\n                         <quarkus.http.non-application-root-path>/</quarkus.http.non-application-root-path>\n                         <quarkus.smallrye-openapi.auto-add-tags>false</quarkus.smallrye-openapi.auto-add-tags>\n                         <quarkus.smallrye-openapi.auto-add-bad-request-response>false</quarkus.smallrye-openapi.auto-add-bad-request-response>\n+                        <quarkus.smallrye-openapi.merge-schema-examples>true</quarkus.smallrye-openapi.merge-schema-examples>\n                     </systemPropertyVariables>\n                     <!-- This workaround allows us to run a single test using\n                         the \"test\" system property -->\n",
    "test_patch": "diff --git a/extensions/smallrye-openapi/deployment/src/test/java/io/quarkus/smallrye/openapi/deployment/filter/SecurityConfigFilterTest.java b/extensions/smallrye-openapi/deployment/src/test/java/io/quarkus/smallrye/openapi/deployment/filter/SecurityConfigFilterTest.java\nindex 2bf6c3ba209e8..e4dc539c060bd 100644\n--- a/extensions/smallrye-openapi/deployment/src/test/java/io/quarkus/smallrye/openapi/deployment/filter/SecurityConfigFilterTest.java\n+++ b/extensions/smallrye-openapi/deployment/src/test/java/io/quarkus/smallrye/openapi/deployment/filter/SecurityConfigFilterTest.java\n@@ -261,5 +261,10 @@ public Optional<OperationIdStrategy> operationIdStrategy() {\n         public Map<String, String> securitySchemeExtensions() {\n             return Map.of();\n         }\n+\n+        @Override\n+        public boolean mergeSchemaExamples() {\n+            return false;\n+        }\n     }\n }\n\ndiff --git a/extensions/smallrye-openapi/deployment/src/test/java/io/quarkus/smallrye/openapi/test/jaxrs/MergeSchemaExamplesTestCases.java b/extensions/smallrye-openapi/deployment/src/test/java/io/quarkus/smallrye/openapi/test/jaxrs/MergeSchemaExamplesTestCases.java\nnew file mode 100644\nindex 0000000000000..2eee5e5a5546f\n--- /dev/null\n+++ b/extensions/smallrye-openapi/deployment/src/test/java/io/quarkus/smallrye/openapi/test/jaxrs/MergeSchemaExamplesTestCases.java\n@@ -0,0 +1,101 @@\n+package io.quarkus.smallrye.openapi.test.jaxrs;\n+\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.is;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.Produces;\n+import jakarta.ws.rs.core.MediaType;\n+\n+import org.eclipse.microprofile.openapi.annotations.media.Schema;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+import io.restassured.RestAssured;\n+import io.smallrye.openapi.api.SmallRyeOASConfig;\n+\n+abstract class MergeSchemaExamplesTestCases {\n+\n+    @Schema(name = \"Bean\")\n+    static class Bean {\n+        @Schema(example = \"Deprecated example\", examples = {\n+                \"New example 1\",\n+                \"New example 2\"\n+        })\n+        private String field;\n+\n+        public String getField() {\n+            return field;\n+        }\n+    }\n+\n+    @Path(\"/resource\")\n+    static class Resource {\n+        @GET\n+        @Produces(MediaType.TEXT_PLAIN)\n+        public Bean get() {\n+            return new Bean();\n+        }\n+    }\n+\n+    private final String exampleValue;\n+    private final String[] examplesValue;\n+\n+    MergeSchemaExamplesTestCases(String exampleValue, String[] examplesValue) {\n+        this.exampleValue = exampleValue;\n+        this.examplesValue = examplesValue;\n+    }\n+\n+    @Test\n+    void testExamples() {\n+        RestAssured.given()\n+                .header(\"Accept\", \"application/json\")\n+                .when()\n+                .get(\"/q/openapi\")\n+                .then()\n+                .log().ifValidationFails()\n+                .body(\"components.schemas.Bean.properties.field.example\", is(exampleValue))\n+                .body(\"components.schemas.Bean.properties.field.examples\", contains(examplesValue));\n+    }\n+\n+    static class MergeSchemaExamplesDefaultTestCase extends MergeSchemaExamplesTestCases {\n+        @RegisterExtension\n+        static QuarkusUnitTest runner = new QuarkusUnitTest()\n+                .withApplicationRoot((jar) -> jar\n+                        .addClasses(Resource.class, Bean.class));\n+\n+        MergeSchemaExamplesDefaultTestCase() {\n+            super(\"Deprecated example\", new String[] { \"New example 1\", \"New example 2\" });\n+        }\n+    }\n+\n+    static class MergeSchemaExamplesQuarkusTrueTestCase extends MergeSchemaExamplesTestCases {\n+        @RegisterExtension\n+        static QuarkusUnitTest runner = new QuarkusUnitTest()\n+                .withApplicationRoot((jar) -> jar\n+                        .addClasses(Resource.class, Bean.class)\n+                        .addAsResource(new StringAsset(\"quarkus.smallrye-openapi.merge-schema-examples=true\\n\"),\n+                                \"application.properties\"));\n+\n+        MergeSchemaExamplesQuarkusTrueTestCase() {\n+            super(null, new String[] { \"New example 1\", \"New example 2\", \"Deprecated example\" });\n+        }\n+    }\n+\n+    static class MergeSchemaExamplesSmallRyeTrueTestCase extends MergeSchemaExamplesTestCases {\n+        @RegisterExtension\n+        static QuarkusUnitTest runner = new QuarkusUnitTest()\n+                .withApplicationRoot((jar) -> jar\n+                        .addClasses(Resource.class, Bean.class)\n+                        .addAsResource(new StringAsset(SmallRyeOASConfig.SMALLRYE_MERGE_SCHEMA_EXAMPLES + \"=true\\n\"),\n+                                \"application.properties\"));\n+\n+        MergeSchemaExamplesSmallRyeTrueTestCase() {\n+            super(null, new String[] { \"New example 1\", \"New example 2\", \"Deprecated example\" });\n+        }\n+    }\n+\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46952",
    "pr_id": 46952,
    "issue_id": 45378,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Duplicate GeneratedStaticResourceBuildItem throws IllegalStateException: Duplicate key\n### Describe the bug\n\nIn case of duplicate GeneratedStaticResourceBuildItem, GeneratedStaticResourcesProcessor#process throws an exception \"IllegalStateException: Duplicate key\".\n\n### Expected behavior\n\nI think it should print a warning and keep one of the items instead. Or at least throw a proper exception explaining that there are multiple generated static resources on the same path.\n\n### Quarkus version or git rev\n\n3.17\n",
    "issue_word_count": 64,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/GeneratedStaticResourcesProcessor.java",
      "extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/GeneratedStaticResourceBuildItemDuplicatedTest.java"
    ],
    "pr_changed_test_files": [
      "extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/GeneratedStaticResourceBuildItemDuplicatedTest.java"
    ],
    "base_commit": "ec22a127fd9c5219ebe65f3c13c2191293570a01",
    "head_commit": "2224c7f2822ac2c85f0da2968134a9bf989aa144",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46952",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46952",
    "dockerfile": "",
    "pr_merged_at": "2025-03-25T16:20:47.000Z",
    "patch": "diff --git a/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/GeneratedStaticResourcesProcessor.java b/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/GeneratedStaticResourcesProcessor.java\nindex d6316b11e86ed..897d8145b4404 100644\n--- a/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/GeneratedStaticResourcesProcessor.java\n+++ b/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/GeneratedStaticResourcesProcessor.java\n@@ -6,6 +6,7 @@\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -13,6 +14,7 @@\n \n import io.quarkus.bootstrap.classloading.ClassPathElement;\n import io.quarkus.bootstrap.classloading.QuarkusClassLoader;\n+import io.quarkus.builder.BuildException;\n import io.quarkus.deployment.IsDevelopment;\n import io.quarkus.deployment.IsNormal;\n import io.quarkus.deployment.annotations.BuildProducer;\n@@ -80,10 +82,17 @@ public void produceResources(List<GeneratedStaticResourceBuildItem> generatedSta\n     public void process(List<GeneratedStaticResourceBuildItem> generatedStaticResources,\n             LaunchModeBuildItem launchModeBuildItem,\n             BuildProducer<RouteBuildItem> routes, GeneratedStaticResourcesRecorder generatedStaticResourcesRecorder,\n-            BuildProducer<NotFoundPageDisplayableEndpointBuildItem> notFoundPageProducer) {\n+            BuildProducer<NotFoundPageDisplayableEndpointBuildItem> notFoundPageProducer) throws BuildException {\n         if (generatedStaticResources.isEmpty()) {\n             return;\n         }\n+\n+        List<String> duplicates = collectDuplicates(generatedStaticResources);\n+        if (!duplicates.isEmpty()) {\n+            throw new BuildException(\n+                    \"Duplicate endpoints detected, the endpoint for static resources must be unique: \" + duplicates);\n+        }\n+\n         Map<String, String> generatedFilesResources = generatedStaticResources.stream()\n                 .peek(path -> notFoundPageProducer.produce(new NotFoundPageDisplayableEndpointBuildItem(path.getEndpoint())))\n                 .filter(GeneratedStaticResourceBuildItem::isFile)\n@@ -162,4 +171,12 @@ private static void visitRuntimeMetaInfResources(PathVisitor visitor) {\n             }\n         }\n     }\n+\n+    private static List<String> collectDuplicates(List<GeneratedStaticResourceBuildItem> generatedStaticResources) {\n+        Set<String> uniques = new HashSet<>();\n+        return generatedStaticResources.stream()\n+                .map(GeneratedStaticResourceBuildItem::getEndpoint)\n+                .filter(e -> !uniques.add(e))\n+                .toList();\n+    }\n }\n",
    "test_patch": "diff --git a/extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/GeneratedStaticResourceBuildItemDuplicatedTest.java b/extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/GeneratedStaticResourceBuildItemDuplicatedTest.java\nnew file mode 100644\nindex 0000000000000..78f5832431415\n--- /dev/null\n+++ b/extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/GeneratedStaticResourceBuildItemDuplicatedTest.java\n@@ -0,0 +1,51 @@\n+package io.quarkus.vertx.http;\n+\n+import static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.function.Consumer;\n+\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.builder.BuildChainBuilder;\n+import io.quarkus.builder.BuildContext;\n+import io.quarkus.builder.BuildStep;\n+import io.quarkus.deployment.builditem.GeneratedResourceBuildItem;\n+import io.quarkus.test.QuarkusUnitTest;\n+import io.quarkus.vertx.http.deployment.spi.GeneratedStaticResourceBuildItem;\n+\n+public class GeneratedStaticResourceBuildItemDuplicatedTest {\n+\n+    @RegisterExtension\n+    final static QuarkusUnitTest test = new QuarkusUnitTest().withApplicationRoot(\n+            (jar) -> jar.add(new StringAsset(\"\"), \"application.properties\"))\n+            .addBuildChainCustomizer(new Consumer<BuildChainBuilder>() {\n+                @Override\n+                public void accept(BuildChainBuilder buildChainBuilder) {\n+\n+                    buildChainBuilder.addBuildStep(new BuildStep() {\n+                        @Override\n+                        public void execute(BuildContext context) {\n+                            context.produce(new GeneratedStaticResourceBuildItem(\n+                                    \"/index.html\", \"Hello from Quarkus\".getBytes(StandardCharsets.UTF_8)));\n+                            context.produce(new GeneratedStaticResourceBuildItem(\"/index.html\",\n+                                    \"GeneratedStaticResourceBuildItem says: Hello from me!\".getBytes(StandardCharsets.UTF_8)));\n+                        }\n+                    }).produces(GeneratedStaticResourceBuildItem.class).produces(GeneratedResourceBuildItem.class).build();\n+                }\n+            })\n+            .assertException(throwable -> {\n+                String message = throwable.getCause().getMessage();\n+                assertThat(message)\n+                        .contains(\"Duplicate endpoints detected, the endpoint for static resources must be unique:\");\n+                assertThat(message).contains(\"/index.html\");\n+            });\n+\n+    @Test\n+    void assertTrue() {\n+        Assertions.assertTrue(true);\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46947",
    "pr_id": 46947,
    "issue_id": 37904,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Kubernetes extension uses wrong metrics port when management interface is in use\n### Describe the bug\r\n\r\nWhen enabling the management interface like this:\r\n```properties\r\nquarkus.management.enable=true\r\nquarkus.management.port=9000\r\n```\r\nthe generated kubernetes manifests still use the main application server port in the prometheus scrape config labels.\r\n\r\n### Expected behavior\r\n\r\ndeployment has following labels\r\n```yml\r\nprometheus.io/scrape: \"true\"\r\nprometheus.io/path: /q/metrics\r\nprometheus.io/port: \"9000\"\r\nprometheus.io/scheme: http\r\n```\r\n\r\n### Actual behavior\r\n\r\ndeployment has following labels\r\n```yml\r\nprometheus.io/scrape: \"true\"\r\nprometheus.io/path: /q/metrics\r\nprometheus.io/port: \"8080\"\r\nprometheus.io/scheme: http\r\n```\r\n\r\n### How to Reproduce?\r\n\r\nReproducer Project: https://github.com/SIMULATAN/quarkus-kubernetes-management-metrics-reproducer\r\n\r\nReproduction steps:\r\n1. Run `mvn clean package`\r\n2. Open `target/kubernetes/kubernetes.yml`\r\n3. Notice that the prometheus label refer to the incorrect port \r\n\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\n`Linux sim-15p-arch 6.6.7-arch1-1 #1 SMP PREEMPT_DYNAMIC Thu, 14 Dec 2023 03:45:42 +0000 x86_64 GNU/Linux`\r\n\r\n### Output of `java -version`\r\n\r\n`21 Azul Systems, Inc.`\r\n\r\n### Quarkus version or git rev\r\n\r\n`3.6.0.CR1 & 3.6.0`\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\n`Gradle 8.5-rc-3 & Maven 3.9.6`\r\n\r\n### Additional information\r\n\r\nReading through the source, it appears as if appropriate handling already exists for health checks and probes but not metrics.",
    "issue_word_count": 224,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesCommonHelper.java",
      "integration-tests/kubernetes/quarkus-standard-way/src/test/java/io/quarkus/it/kubernetes/KubernetesWithMetricsAndManagementInterfaceEnabledTest.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/kubernetes/quarkus-standard-way/src/test/java/io/quarkus/it/kubernetes/KubernetesWithMetricsAndManagementInterfaceEnabledTest.java"
    ],
    "base_commit": "112cd6f081002ce7ea7cbff20a7be5554d6252a3",
    "head_commit": "49093841d23c7079b375ead077bdd5c36d26be13",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46947",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46947",
    "dockerfile": "",
    "pr_merged_at": "2025-03-27T07:33:23.000Z",
    "patch": "diff --git a/extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesCommonHelper.java b/extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesCommonHelper.java\nindex e939c0b5f2d22..910b150837837 100644\n--- a/extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesCommonHelper.java\n+++ b/extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesCommonHelper.java\n@@ -20,6 +20,7 @@\n import java.util.function.Function;\n import java.util.stream.Collectors;\n \n+import org.eclipse.microprofile.config.ConfigProvider;\n import org.jboss.logging.Logger;\n \n import io.dekorate.kubernetes.annotation.ImagePullPolicy;\n@@ -1017,8 +1018,13 @@ private static List<DecoratorBuildItem> createAnnotationDecorators(Optional<Proj\n                             PROMETHEUS_ANNOTATION_TARGETS)));\n                     result.add(new DecoratorBuildItem(target, new AddAnnotationDecorator(name,\n                             config.prometheus().path().orElse(prefix + \"/path\"), path, PROMETHEUS_ANNOTATION_TARGETS)));\n+\n+                    final var managementPort = ConfigProvider.getConfig()\n+                            .getOptionalValue(\"quarkus.management.port\", Integer.class).orElse(9000);\n+                    final var prometheusPort = KubernetesConfigUtil.managementPortIsEnabled() ? managementPort\n+                            : port.get().getContainerPort();\n                     result.add(new DecoratorBuildItem(target, new AddAnnotationDecorator(name,\n-                            config.prometheus().port().orElse(prefix + \"/port\"), \"\" + port.get().getContainerPort(),\n+                            config.prometheus().port().orElse(prefix + \"/port\"), \"\" + prometheusPort,\n                             PROMETHEUS_ANNOTATION_TARGETS)));\n                     result.add(new DecoratorBuildItem(target, new AddAnnotationDecorator(name,\n                             config.prometheus().scheme().orElse(prefix + \"/scheme\"), \"http\",\n",
    "test_patch": "diff --git a/integration-tests/kubernetes/quarkus-standard-way/src/test/java/io/quarkus/it/kubernetes/KubernetesWithMetricsAndManagementInterfaceEnabledTest.java b/integration-tests/kubernetes/quarkus-standard-way/src/test/java/io/quarkus/it/kubernetes/KubernetesWithMetricsAndManagementInterfaceEnabledTest.java\nnew file mode 100644\nindex 0000000000000..2dc920374fdc4\n--- /dev/null\n+++ b/integration-tests/kubernetes/quarkus-standard-way/src/test/java/io/quarkus/it/kubernetes/KubernetesWithMetricsAndManagementInterfaceEnabledTest.java\n@@ -0,0 +1,89 @@\n+package io.quarkus.it.kubernetes;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.entry;\n+import static org.hamcrest.Matchers.is;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.fabric8.kubernetes.api.model.HasMetadata;\n+import io.fabric8.kubernetes.api.model.apps.Deployment;\n+import io.quarkus.builder.Version;\n+import io.quarkus.maven.dependency.Dependency;\n+import io.quarkus.test.LogFile;\n+import io.quarkus.test.ProdBuildResults;\n+import io.quarkus.test.ProdModeTestResults;\n+import io.quarkus.test.QuarkusProdModeTest;\n+\n+public class KubernetesWithMetricsAndManagementInterfaceEnabledTest {\n+\n+    @RegisterExtension\n+    static final QuarkusProdModeTest config = new QuarkusProdModeTest()\n+            .withApplicationRoot((jar) -> jar.addClasses(GreetingResource.class))\n+            .setApplicationName(\"metrics\")\n+            .setApplicationVersion(\"0.1-SNAPSHOT\")\n+            .setRun(true)\n+            .setLogFileName(\"k8s.log\")\n+            .overrideConfigKey(\"quarkus.management.enabled\", \"true\")\n+            .overrideConfigKey(\"quarkus.management.port\", \"9090\")\n+            .setForcedDependencies(List.of(\n+                    Dependency.of(\"io.quarkus\", \"quarkus-smallrye-metrics\", Version.getVersion()),\n+                    Dependency.of(\"io.quarkus\", \"quarkus-kubernetes-client\", Version.getVersion())));\n+\n+    @ProdBuildResults\n+    private ProdModeTestResults prodModeTestResults;\n+\n+    @LogFile\n+    private Path logfile;\n+\n+    @Test\n+    public void assertApplicationRuns() {\n+        assertThat(logfile).isRegularFile().hasFileName(\"k8s.log\");\n+        TestUtil.assertLogFileContents(logfile, \"kubernetes\", \"metrics\");\n+\n+        given()\n+                .when().get(\"/greeting\")\n+                .then()\n+                .statusCode(200)\n+                .body(is(\"hello\"));\n+    }\n+\n+    @Test\n+    public void assertGeneratedResources() throws IOException {\n+        final Path kubernetesDir = prodModeTestResults.getBuildDir().resolve(\"kubernetes\");\n+        assertThat(kubernetesDir)\n+                .isDirectoryContaining(p -> p.getFileName().endsWith(\"kubernetes.json\"))\n+                .isDirectoryContaining(p -> p.getFileName().endsWith(\"kubernetes.yml\"));\n+        List<HasMetadata> kubernetesList = DeserializationUtil\n+                .deserializeAsList(kubernetesDir.resolve(\"kubernetes.yml\"));\n+\n+        assertThat(kubernetesList).filteredOn(h -> \"Deployment\".equals(h.getKind())).singleElement()\n+                .isInstanceOfSatisfying(Deployment.class, d -> {\n+                    assertThat(d.getMetadata()).satisfies(m -> assertThat(m.getName()).isEqualTo(\"metrics\"));\n+\n+                    assertThat(d.getSpec()).satisfies(deploymentSpec -> {\n+                        assertThat(deploymentSpec.getTemplate()).satisfies(t -> {\n+                            assertThat(t.getMetadata()).satisfies(meta -> {\n+                                assertThat(meta.getAnnotations()).contains(entry(\"prometheus.io/scrape\", \"true\"),\n+                                        entry(\"prometheus.io/path\", \"/q/metrics\"), entry(\"prometheus.io/port\", \"9090\"),\n+                                        entry(\"prometheus.io/scheme\", \"http\"));\n+                            });\n+                        });\n+                    });\n+                });\n+\n+        assertThat(kubernetesList).filteredOn(h -> \"Service\".equals(h.getKind())).singleElement().satisfies(h -> {\n+            assertThat(h.getMetadata().getAnnotations()).contains(entry(\"prometheus.io/scrape\", \"true\"),\n+                    entry(\"prometheus.io/path\", \"/q/metrics\"), entry(\"prometheus.io/port\", \"9090\"),\n+                    entry(\"prometheus.io/scheme\", \"http\"));\n+        });\n+\n+    }\n+\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46930",
    "pr_id": 46930,
    "issue_id": 46893,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Graphql federation @Resolver and @Blocking do not work\n### Describe the bug\n\nIf I use those two annotations on a method\n\n```\nimport io.smallrye.common.annotation.Blocking\nimport io.smallrye.graphql.api.federation.Resolver\n```\n\nI get this error on build:\n\n```\n The @Blocking, @NonBlocking and @RunOnVirtualThread annotations may only be used on \"entrypoint\" methods (methods invoked by various frameworks in Quarkus)\n13:58:33   Using the @Blocking, @NonBlocking and @RunOnVirtualThread annotations on methods that can only be invoked by application code is invalid\n13:58:33     at io.quarkus.deployment.execannotations.ExecutionModelAnnotationsProcessor.check(ExecutionModelAnnotationsProcessor.java:55)\n13:58:33     at java.base/java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:733)\n13:58:33     at io.quarkus.deployment.ExtensionLoader$3.execute(ExtensionLoader.java:856)\n13:58:33     at io.quarkus.builder.BuildContext.run(BuildContext.java:255)\n13:58:33     at org.jboss.threads.ContextHandler$1.runWith(ContextHandler.java:18)\n13:58:33     at org.jboss.threads.EnhancedQueueExecutor$Task.doRunWith(EnhancedQueueExecutor.java:2675)\n13:58:33     at org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2654)\n13:58:33     at org.jboss.threads.EnhancedQueueExecutor.runThreadBody(EnhancedQueueExecutor.java:1627)\n13:58:33     at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1594)\n13:58:33     at java.base/java.lang.Thread.run(Thread.java:1583)\n13:58:33     at org.jboss.threads.JBossThread.run(JBossThread.java:499)\n```\n\nBut the resolver is only called from the Federation Data Fetcher like a query., so blocking should be supported.\n\n### Expected behavior\n\n_No response_\n\n### Actual behavior\n\n_No response_\n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### Quarkus version or git rev\n\n_No response_\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
    "issue_word_count": 291,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/GraphqlMethodsProcessor.java",
      "extensions/smallrye-graphql/deployment/src/test/java/io/quarkus/smallrye/graphql/deployment/federation/resolver/ExtendedApi.java"
    ],
    "pr_changed_test_files": [
      "extensions/smallrye-graphql/deployment/src/test/java/io/quarkus/smallrye/graphql/deployment/federation/resolver/ExtendedApi.java"
    ],
    "base_commit": "d3d1131ed91ef230b5d3be93dee2cd69d18bfa71",
    "head_commit": "686e63808436136b100b4c5c0b49232af8b90cfd",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46930",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46930",
    "dockerfile": "",
    "pr_merged_at": "2025-03-24T07:24:40.000Z",
    "patch": "diff --git a/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/GraphqlMethodsProcessor.java b/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/GraphqlMethodsProcessor.java\nindex a08df63f9f197..ab17a431a4906 100644\n--- a/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/GraphqlMethodsProcessor.java\n+++ b/extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/GraphqlMethodsProcessor.java\n@@ -10,11 +10,13 @@\n import io.quarkus.deployment.annotations.BuildStep;\n import io.quarkus.deployment.execannotations.ExecutionModelAnnotationsAllowedBuildItem;\n import io.smallrye.graphql.api.Subscription;\n+import io.smallrye.graphql.api.federation.Resolver;\n \n public class GraphqlMethodsProcessor {\n     private static final DotName QUERY = DotName.createSimple(Query.class);\n     private static final DotName MUTATION = DotName.createSimple(Mutation.class);\n     private static final DotName SUBSCRIPTION = DotName.createSimple(Subscription.class);\n+    private static final DotName RESOLVER = DotName.createSimple(Resolver.class);\n \n     @BuildStep\n     ExecutionModelAnnotationsAllowedBuildItem graphqlMethods() {\n@@ -24,7 +26,8 @@ public boolean test(MethodInfo method) {\n                 // maybe just look for `@GraphQLApi` on the declaring class?\n                 return method.hasDeclaredAnnotation(QUERY)\n                         || method.hasDeclaredAnnotation(MUTATION)\n-                        || method.hasDeclaredAnnotation(SUBSCRIPTION);\n+                        || method.hasDeclaredAnnotation(SUBSCRIPTION)\n+                        || method.hasDeclaredAnnotation(RESOLVER);\n             }\n         });\n     }\n",
    "test_patch": "diff --git a/extensions/smallrye-graphql/deployment/src/test/java/io/quarkus/smallrye/graphql/deployment/federation/resolver/ExtendedApi.java b/extensions/smallrye-graphql/deployment/src/test/java/io/quarkus/smallrye/graphql/deployment/federation/resolver/ExtendedApi.java\nindex e33ecb3b5b1c7..4dcf9e1a417f2 100644\n--- a/extensions/smallrye-graphql/deployment/src/test/java/io/quarkus/smallrye/graphql/deployment/federation/resolver/ExtendedApi.java\n+++ b/extensions/smallrye-graphql/deployment/src/test/java/io/quarkus/smallrye/graphql/deployment/federation/resolver/ExtendedApi.java\n@@ -2,10 +2,12 @@\n \n import org.eclipse.microprofile.graphql.GraphQLApi;\n \n+import io.smallrye.common.annotation.Blocking;\n import io.smallrye.graphql.api.federation.Resolver;\n \n @GraphQLApi\n public class ExtendedApi {\n+\n     @Resolver\n     public ExtendedType extendedTypeById(String id) {\n         ExtendedType extendedType = new ExtendedType();\n@@ -15,6 +17,7 @@ public ExtendedType extendedTypeById(String id) {\n     }\n \n     @Resolver\n+    @Blocking\n     public ExtendedType extendedTypeByIdNameKey(String id, String name, String key) {\n         ExtendedType extendedType = new ExtendedType();\n         extendedType.setId(id);\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46918",
    "pr_id": 46918,
    "issue_id": 23990,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Resources path params not not included when a Sub-Resource is filtered by @ServerRequestFilter\n### Describe the bug\r\n\r\nResources path params not not included in ContainerRequestContext/UriInfo when a Sub-Resource is filtered by ServerRequestFilter. \r\n\r\n\r\n### Expected behavior\r\n\r\nWhen a Sub-Resource has path parameters inherited from the parent resource, when filtering with @ServerRequestFilter, the method getPathParameters() of UriInfo should provide all path parameters, including path params inherited from the parent resource.\r\n\r\n### Actual behavior\r\n\r\nWhen a Sub-Resource has path parameters inherited from the parent resource, when filtering with @ServerRequestFilter, the method getPathParameters() of UriInfo doesn't provide path params inherited from the parent resource, only path params of sub-resource.\r\n\r\n### How to Reproduce?\r\n\r\n\r\n@Path(\"/resources\")\r\n@Produces({MediaType.APPLICATION_JSON})\r\n@ApplicationScoped\r\npublic class Resource { \r\n\r\n @Inject SubResource subResource;\r\n\r\n @GET\r\n  @Path(\"/{resourceId}\")\r\n  @SomeNameBindingAnnotition(SomeRole)\r\n  public Uni<ResourceEntity> get(@RestPath String resourceId) {\r\n    return Uni.createFrom().item(resource);\r\n  }\r\n\r\n @Path(\"/{resourceId}/sub-resources\")\r\n  public SubResource setupSubResource() {\r\n    return subResource;\r\n  }\r\n}\r\n\r\n@ApplicationScoped\r\npublic class SubResource { \r\n\r\n @GET\r\n  @Path(\"/{subResourceId}\")\r\n  @SomeNameBindingAnnotition(SomeRole)\r\n  public Uni<ResourceEntity> get(@RestPath String resourceId, @RestPath String subResourceId) {\r\n    return Uni.createFrom().item(subResource);\r\n  }\r\n}\r\n\r\n  @ServerRequestFilter()\r\n  @SomeNameBindingAnnotition(\"\")\r\n  public Uni<Void> filter(\r\n      ContainerRequestContext requestContext,\r\n      UriInfo uriInfo) {\r\n    // when filtering the sub resource, resourceId isn't included\r\n    System.out.println(\"Path params\" + uriInfo.getPathParameters());\r\n  }\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\n_No response_\r\n\r\n### Output of `java -version`\r\n\r\n_No response_\r\n\r\n### GraalVM version (if different from Java)\r\n\r\n_No response_\r\n\r\n### Quarkus version or git rev\r\n\r\n_No response_\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n[code-with-quarkus.zip](https://github.com/quarkusio/quarkus/files/8155272/code-with-quarkus.zip)\r\n\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\n_No response_",
    "issue_word_count": 260,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/SubResourceUriInfoTest.java",
      "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java",
      "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/jaxrs/UriInfoImpl.java"
    ],
    "pr_changed_test_files": [
      "extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/SubResourceUriInfoTest.java"
    ],
    "base_commit": "da2275aa3497ee1a2d081e43ea998eba165df0b0",
    "head_commit": "de0a9bbe31509bf0b72a51c516dd18e3913d8f5b",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46918",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46918",
    "dockerfile": "",
    "pr_merged_at": "2025-03-21T08:41:13.000Z",
    "patch": "diff --git a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java\nindex e72ad3b6913df..a320eddab852d 100644\n--- a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java\n+++ b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java\n@@ -14,6 +14,7 @@\n import java.util.Deque;\n import java.util.LinkedList;\n import java.util.List;\n+import java.util.Map;\n import java.util.concurrent.Executor;\n import java.util.regex.Matcher;\n \n@@ -29,6 +30,7 @@\n import jakarta.ws.rs.core.GenericEntity;\n import jakarta.ws.rs.core.HttpHeaders;\n import jakarta.ws.rs.core.MediaType;\n+import jakarta.ws.rs.core.MultivaluedMap;\n import jakarta.ws.rs.core.PathSegment;\n import jakarta.ws.rs.core.Request;\n import jakarta.ws.rs.core.Response;\n@@ -45,6 +47,7 @@\n import org.jboss.resteasy.reactive.common.util.Encode;\n import org.jboss.resteasy.reactive.common.util.PathHelper;\n import org.jboss.resteasy.reactive.common.util.PathSegmentImpl;\n+import org.jboss.resteasy.reactive.common.util.QuarkusMultivaluedHashMap;\n import org.jboss.resteasy.reactive.server.SimpleResourceInfo;\n import org.jboss.resteasy.reactive.server.core.multipart.FormData;\n import org.jboss.resteasy.reactive.server.core.serialization.EntityWriter;\n@@ -1130,6 +1133,44 @@ public String getResourceLocatorPathParam(String name, boolean encoded) {\n         return getResourceLocatorPathParam(name, (PreviousResource) getProperty(PreviousResource.PROPERTY_KEY), encoded);\n     }\n \n+    /**\n+     * Collects all path parameters, first from the current RuntimeResource, also known as target, and then from the previous\n+     * RuntimeResources, including path parameters from sub resource locators in the process.\n+     *\n+     * @param encoded\n+     * @return MultivaluedMap with path parameters. May be empty, but is never null\n+     */\n+    public MultivaluedMap<String, String> getAllPathParameters(boolean encoded) {\n+        MultivaluedMap<String, String> pathParams = new QuarkusMultivaluedHashMap<>();\n+        // a target can be null if this happens in a filter that runs before the target is set\n+        if (target == null) {\n+            return pathParams;\n+        }\n+\n+        PreviousResource previousResource = null;\n+        Object paramValues = this.pathParamValues;\n+        do {\n+            for (Map.Entry<String, Integer> pathParam : target.getPathParameterIndexes().entrySet()) {\n+                pathParams.add(pathParam.getKey(), doGetPathParam(pathParam.getValue(), paramValues, encoded));\n+            }\n+\n+            if (previousResource != null) {\n+                previousResource = previousResource.prev;\n+            } else {\n+                previousResource = (PreviousResource) getProperty(PreviousResource.PROPERTY_KEY);\n+            }\n+            if (previousResource == null) {\n+                break;\n+            }\n+\n+            target = previousResource.locatorTarget;\n+            paramValues = previousResource.locatorPathParamValues;\n+\n+        } while (true);\n+\n+        return pathParams;\n+    }\n+\n     public FormData getFormData() {\n         return formData;\n     }\n\ndiff --git a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/jaxrs/UriInfoImpl.java b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/jaxrs/UriInfoImpl.java\nindex 7dd314457a2dc..b88d1d09083ae 100644\n--- a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/jaxrs/UriInfoImpl.java\n+++ b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/jaxrs/UriInfoImpl.java\n@@ -6,7 +6,6 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n-import java.util.Map.Entry;\n \n import jakarta.ws.rs.core.MultivaluedMap;\n import jakarta.ws.rs.core.PathSegment;\n@@ -32,7 +31,11 @@ public class UriInfoImpl implements UriInfo {\n \n     private final ResteasyReactiveRequestContext currentRequest;\n     private MultivaluedMap<String, String> queryParams;\n+\n+    // marker for which target the pathParams where created, may be null when getPathParams was never called\n+    private RuntimeResource pathParamsTargetMarker;\n     private MultivaluedMap<String, String> pathParams;\n+\n     private URI requestUri;\n \n     public UriInfoImpl(ResteasyReactiveRequestContext currentRequest) {\n@@ -150,14 +153,12 @@ public MultivaluedMap<String, String> getPathParameters() {\n     public MultivaluedMap<String, String> getPathParameters(boolean decode) {\n         if (!decode)\n             throw encodedNotSupported();\n-        if (pathParams == null) {\n-            pathParams = new QuarkusMultivaluedHashMap<>();\n-            RuntimeResource target = currentRequest.getTarget();\n-            if (target != null) { // a target can be null if this happens in a filter that runs before the target is set\n-                for (Entry<String, Integer> pathParam : target.getPathParameterIndexes().entrySet()) {\n-                    pathParams.add(pathParam.getKey(), currentRequest.getPathParam(pathParam.getValue(), false));\n-                }\n-            }\n+        // pathParams have to be recreated when the target changes.\n+        // this happens e.g. when the ResteasyReactiveRequestContext#restart is called for sub resources\n+        // The sub resource, can have additional path params that are not present on the locator\n+        if (pathParams == null && pathParamsTargetMarker == null || pathParamsTargetMarker != currentRequest.getTarget()) {\n+            pathParams = currentRequest.getAllPathParameters(false);\n+            pathParamsTargetMarker = currentRequest.getTarget();\n         }\n         return new UnmodifiableMultivaluedMap<>(pathParams);\n     }\n",
    "test_patch": "diff --git a/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/SubResourceUriInfoTest.java b/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/SubResourceUriInfoTest.java\nnew file mode 100644\nindex 0000000000000..c7792eac7ff51\n--- /dev/null\n+++ b/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/SubResourceUriInfoTest.java\n@@ -0,0 +1,115 @@\n+package io.quarkus.resteasy.reactive.server.test.resource.basic;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+\n+import java.util.function.Supplier;\n+\n+import jakarta.enterprise.context.RequestScoped;\n+import jakarta.inject.Inject;\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.container.ResourceContext;\n+import jakarta.ws.rs.core.UriInfo;\n+\n+import org.jboss.resteasy.reactive.RestPath;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.resteasy.reactive.server.test.simple.PortProviderUtil;\n+import io.quarkus.test.QuarkusUnitTest;\n+import io.restassured.RestAssured;\n+\n+public class SubResourceUriInfoTest {\n+    @RegisterExtension\n+    static QuarkusUnitTest testExtension = new QuarkusUnitTest()\n+            .setArchiveProducer(new Supplier<>() {\n+                @Override\n+                public JavaArchive get() {\n+                    JavaArchive war = ShrinkWrap.create(JavaArchive.class);\n+                    war.addClasses(PortProviderUtil.class);\n+                    war.addClasses(UsersResource.class);\n+                    war.addClasses(UserResource.class);\n+                    war.addClasses(ContactResource.class);\n+                    war.addClasses(ResponseHolder.class);\n+                    return war;\n+                }\n+            });\n+\n+    @Test\n+    public void basicTest() {\n+        RestAssured.given()\n+                .get(\"/users/userId/contacts/contactId\")\n+                .then()\n+                .statusCode(200)\n+                .body(equalTo(\"{id=[userId]}{id=[contactId, userId]}{id=[contactId, userId]}\"));\n+    }\n+\n+    @RequestScoped\n+    @Path(\"users\")\n+    public static class UsersResource {\n+\n+        @Inject\n+        ResponseHolder responseHolder;\n+\n+        @Inject\n+        UriInfo uriInfo;\n+\n+        @Inject\n+        ResourceContext resourceContext;\n+\n+        @Path(\"{id}\")\n+        public UserResource get(@RestPath String id) {\n+            responseHolder.setResponse(responseHolder.getResponse() + uriInfo.getPathParameters().toString());\n+            return resourceContext.getResource(UserResource.class);\n+        }\n+    }\n+\n+    @RequestScoped\n+    public static class UserResource {\n+\n+        @Inject\n+        ResponseHolder responseHolder;\n+        @Inject\n+        UriInfo uriInfo;\n+\n+        @Inject\n+        ResourceContext resourceContext;\n+\n+        @Path(\"contacts/{id}\")\n+        public ContactResource get(@RestPath String id) {\n+            responseHolder.setResponse(responseHolder.getResponse() + uriInfo.getPathParameters().toString());\n+            return resourceContext.getResource(ContactResource.class);\n+        }\n+    }\n+\n+    @RequestScoped\n+    public static class ContactResource {\n+\n+        @Inject\n+        ResponseHolder responseHolder;\n+\n+        @Inject\n+        UriInfo uriInfo;\n+\n+        @GET\n+        public String getName(@RestPath String id) {\n+            responseHolder.setResponse(responseHolder.getResponse() + uriInfo.getPathParameters().toString());\n+            return responseHolder.getResponse();\n+        }\n+    }\n+\n+    @RequestScoped\n+    public static class ResponseHolder {\n+        String response = \"\";\n+\n+        public String getResponse() {\n+            return response;\n+        }\n+\n+        public void setResponse(String response) {\n+            this.response = response;\n+        }\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46879",
    "pr_id": 46879,
    "issue_id": 46849,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Reevaluate the use of `Response` for generated REST resources of `quarkus-rest-data-panache`\nHello World!\nIm trying to use auto generated endpoints from [rest-data-panache]( https://quarkus.io/guides/rest-data-panache) (Hibernate Reactive)\n\nRight now i'm having problems with kotlin serialization-deserialization. In documentation it says that endpoints return Response while it should return RestResponse<T> instead.\n\n:gear: Environment\nQuarkus Version: 3.19.3\nKotlin Version: 2.0.21\nquarkus-rest-koltin-serialization\nGradle 12.0\n\n```\n@Serializable\n@Entity\n@Table\nclass MockUser(\n    @Id\n    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"mock_user_seq\")\n    @SequenceGenerator(name = \"mock_user_seq\", sequenceName = \"mock_user_seq\", allocationSize = 1)\n    val id: Long? = null,\n\n    val username: String,\n\n    val age: Int\n\n) : PanacheEntityBase()\n```\n```\ninterface MockUserResource : PanacheEntityResource<MockUser, Long> {\n}\n```\nWe mix kotlin with java intentionally because there's no direct support for kotlin https://github.com/quarkusio/quarkus/issues/12235\n\nThank you in advance!\n\n",
    "issue_word_count": 140,
    "test_files_count": 4,
    "non_test_files_count": 15,
    "pr_changed_files": [
      "docs/src/main/asciidoc/rest-data-panache.adoc",
      "extensions/panache/hibernate-orm-rest-data-panache/deployment/pom.xml",
      "extensions/panache/rest-data-panache/deployment/pom.xml",
      "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/AddMethodImplementor.java",
      "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/CountMethodImplementor.java",
      "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/DeleteMethodImplementor.java",
      "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/GetMethodImplementor.java",
      "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/ListMethodImplementor.java",
      "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/OverrideUserMethodImplementor.java",
      "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/StandardMethodImplementor.java",
      "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/UpdateMethodImplementor.java",
      "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/hal/ListHalMethodImplementor.java",
      "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/utils/ResponseImplementor.java",
      "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/utils/SignatureMethodCreator.java",
      "extensions/spring-data-rest/deployment/pom.xml",
      "integration-tests/hibernate-orm-rest-data-panache/pom.xml",
      "integration-tests/hibernate-orm-rest-data-panache/src/test/java/io/quarkus/it/hibernate/orm/rest/data/panache/HibernateOrmRestDataPanacheTest.java",
      "integration-tests/spring-data-rest/pom.xml",
      "integration-tests/spring-data-rest/src/test/java/io/quarkus/it/spring/data/rest/SpringDataRestTest.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/hibernate-orm-rest-data-panache/pom.xml",
      "integration-tests/hibernate-orm-rest-data-panache/src/test/java/io/quarkus/it/hibernate/orm/rest/data/panache/HibernateOrmRestDataPanacheTest.java",
      "integration-tests/spring-data-rest/pom.xml",
      "integration-tests/spring-data-rest/src/test/java/io/quarkus/it/spring/data/rest/SpringDataRestTest.java"
    ],
    "base_commit": "e2ec7c106479f2ae4afd988ebcf97ce41e7f3ff3",
    "head_commit": "b5e90b63132c663b42cc19b162eeac715517f9ff",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46879",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46879",
    "dockerfile": "",
    "pr_merged_at": "2025-03-19T15:24:04.000Z",
    "patch": "diff --git a/docs/src/main/asciidoc/rest-data-panache.adoc b/docs/src/main/asciidoc/rest-data-panache.adoc\nindex ac5c22cc5becb..7ae8cdffd95d0 100644\n--- a/docs/src/main/asciidoc/rest-data-panache.adoc\n+++ b/docs/src/main/asciidoc/rest-data-panache.adoc\n@@ -13,7 +13,7 @@ include::_attributes.adoc[]\n A lot of web applications are monotonous CRUD applications with REST APIs that are tedious to write.\n To streamline this task, REST Data with Panache extension can generate the basic CRUD endpoints for your entities and repositories.\n \n-Currently, this extension supports Hibernate ORM and MongoDB with Panache and can generate CRUD resources that work with `application/json` and `application/hal+json` content.\n+Currently, this extension supports Hibernate ORM and MongoDB with Panache and can generate CRUD resources that work with `application/json` and `application/hal+json` content and generates REST Resources backed by Quarkus REST.\n \n == Setting up REST Data with Panache\n \n@@ -22,22 +22,20 @@ Please, check out the next compatibility table to use the right one according to\n \n .Compatibility Table\n |===\n-|Extension |Status |Hibernate |RESTEasy\n+|Extension |Status |Hibernate\n \n |<<hr-hibernate-orm,quarkus-hibernate-orm-rest-data-panache>>\n |`Stable`\n |`ORM`\n-|`Classic and Reactive`\n \n |<<hr-hibernate-reactive,quarkus-hibernate-reactive-rest-data-panache>>\n |`Experimental`\n |`Reactive`\n-|`Reactive`\n \n |<<hr-mongodb,quarkus-mongodb-rest-data-panache>>\n |`Experimental`\n |`ORM`\n-|`Classic and Reactive`\n+\n |===\n \n [[hr-hibernate-orm]]\n@@ -46,7 +44,7 @@ Please, check out the next compatibility table to use the right one according to\n * Add the required dependencies to your build file\n ** Hibernate ORM REST Data with Panache extension (`quarkus-hibernate-orm-rest-data-panache`)\n ** A JDBC driver extension (`quarkus-jdbc-postgresql`, `quarkus-jdbc-h2`, `quarkus-jdbc-mariadb`, ...)\n-** One of the RESTEasy JSON serialization extensions (the extension supports both Quarkus REST (formerly RESTEasy Reactive) and RESTEasy Classic)\n+** One of the REST JSON serialization extensions (such as `quarkus-rest-jackson`)\n \n [source,xml,role=\"primary asciidoc-tabs-target-sync-cli asciidoc-tabs-target-sync-maven\"]\n .pom.xml\n@@ -60,18 +58,10 @@ Please, check out the next compatibility table to use the right one according to\n     <artifactId>quarkus-jdbc-postgresql</artifactId>\n </dependency>\n \n-<!-- Use this if you are using Quarkus REST -->\n <dependency>\n     <groupId>io.quarkus</groupId>\n     <artifactId>quarkus-rest-jackson</artifactId>\n </dependency>\n-\n-<!-- Use this if you are going to use RESTEasy Classic -->\n-<!--\n-<dependency>\n-    <groupId>io.quarkus</groupId>\n-    <artifactId>quarkus-resteasy-jackson</artifactId>\n-</dependency>\n -->\n ----\n \n@@ -81,11 +71,7 @@ Please, check out the next compatibility table to use the right one according to\n implementation(\"io.quarkus:quarkus-hibernate-orm-rest-data-panache\")\n implementation(\"io.quarkus:quarkus-jdbc-postgresql\")\n \n-// Use this if you are using Quarkus REST\n implementation(\"io.quarkus:quarkus-rest-jackson\")\n-\n-// Use this if you are going to use RESTEasy Classic\n-// implementation(\"io.quarkus:quarkus-resteasy-jackson\")\n ----\n \n * Implement the Panache entities and/or repositories as explained in the xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] guide.\n@@ -143,14 +129,6 @@ To see the Hibernate ORM REST Data with Panache in action, you can check out the\n     <groupId>io.quarkus</groupId>\n     <artifactId>quarkus-rest-jackson</artifactId>\n </dependency>\n-\n-<!-- Use this if you are going to use RESTEasy Classic -->\n-<!--\n-<dependency>\n-    <groupId>io.quarkus</groupId>\n-    <artifactId>quarkus-resteasy-jackson</artifactId>\n-</dependency>\n--->\n ----\n \n [source,gradle,role=\"secondary asciidoc-tabs-target-sync-gradle\"]\n@@ -160,9 +138,6 @@ implementation(\"io.quarkus:quarkus-mongodb-rest-data-panache\")\n \n // Use this if you are using Quarkus REST\n implementation(\"io.quarkus:quarkus-rest-jackson\")\n-\n-// Use this if you are going to use RESTEasy Classic\n-// implementation(\"io.quarkus:quarkus-resteasy-jackson\")\n ----\n \n * Implement the Panache entities and/or repositories as explained in the xref:mongodb-panache.adoc[MongoDB with Panache] guide.\n@@ -233,17 +208,18 @@ public class PeopleResourceJaxRs { // The actual class name is going to be uniqu\n     @GET\n     @Path(\"{id}\")\n     @Produces(\"application/json\")\n-    public Person get(@PathParam(\"id\") Long id){\n+    public RestResponse<Person> get(@PathParam(\"id\") Long id){\n         Person person = resource.get(id);\n         if (person == null) {\n-            throw new WebApplicationException(404);\n+            return ResponseBuilder.create(404).build();\n+        } else {\n+            return ResponseBuilder.ok(var3).build();\n         }\n-        return person;\n     }\n \n     @GET\n     @Produces(\"application/json\")\n-    public Response list(@QueryParam(\"sort\") List<String> sortQuery,\n+    public RestResponse<Person> list(@QueryParam(\"sort\") List<String> sortQuery,\n             @QueryParam(\"page\") @DefaultValue(\"0\") int pageIndex,\n             @QueryParam(\"size\") @DefaultValue(\"20\") int pageSize) {\n         Page page = Page.of(pageIndex, pageSize);\n@@ -254,16 +230,16 @@ public class PeopleResourceJaxRs { // The actual class name is going to be uniqu\n \n     @GET\n     @Path(\"/count\")\n-    public long count() {\n-        return resource.count();\n+    public RestResponse<Long> count() {\n+        return ResponseBuilder.ok(var1.count()).build()\n     }\n \n     @Transactional\n     @POST\n     @Consumes(\"application/json\")\n     @Produces(\"application/json\")\n-    public Response add(Person personToSave) {\n-        Person person = resource.add(person);\n+    public RestResponse<Person> add(Person personToSave) {\n+        Person person = resource.add(personToSave);\n         // ... build a new location URL and return 201 response with an entity\n     }\n \n@@ -272,10 +248,10 @@ public class PeopleResourceJaxRs { // The actual class name is going to be uniqu\n     @Path(\"{id}\")\n     @Consumes(\"application/json\")\n     @Produces(\"application/json\")\n-    public Response update(@PathParam(\"id\") Long id, Person personToSave) {\n+    public RestResponse<Person> update(@PathParam(\"id\") Long id, Person personToSave) {\n         if (resource.get(id) == null) {\n             Person person = resource.update(id, personToSave);\n-            return Response.status(204).build();\n+            return ResponseBuilder.create(204).build();\n         }\n         Person person = resource.update(id, personToSave);\n         // ... build a new location URL and return 201 response with an entity\n@@ -284,10 +260,8 @@ public class PeopleResourceJaxRs { // The actual class name is going to be uniqu\n     @Transactional\n     @DELETE\n     @Path(\"{id}\")\n-    public void delete(@PathParam(\"id\") Long id) {\n-        if (!resource.delete(id)) {\n-            throw new WebApplicationException(404);\n-        }\n+    public RestResponse<Person> delete(@PathParam(\"id\") Long id) {\n+        return !var2.delete(id) ? ResponseBuilder.create(404).build() : ResponseBuilder.create(204).build();\n     }\n }\n ----\n\ndiff --git a/extensions/panache/hibernate-orm-rest-data-panache/deployment/pom.xml b/extensions/panache/hibernate-orm-rest-data-panache/deployment/pom.xml\nindex a0a0ade144e40..bd29c1b58b2a8 100644\n--- a/extensions/panache/hibernate-orm-rest-data-panache/deployment/pom.xml\n+++ b/extensions/panache/hibernate-orm-rest-data-panache/deployment/pom.xml\n@@ -37,12 +37,12 @@\n         </dependency>\n         <dependency>\n             <groupId>io.quarkus</groupId>\n-            <artifactId>quarkus-resteasy-jackson-deployment</artifactId>\n+            <artifactId>quarkus-rest-jackson-deployment</artifactId>\n             <scope>test</scope>\n         </dependency>\n         <dependency>\n             <groupId>io.quarkus</groupId>\n-            <artifactId>quarkus-resteasy-links-deployment</artifactId>\n+            <artifactId>quarkus-rest-links-deployment</artifactId>\n             <scope>test</scope>\n         </dependency>\n         <dependency>\n\ndiff --git a/extensions/panache/rest-data-panache/deployment/pom.xml b/extensions/panache/rest-data-panache/deployment/pom.xml\nindex 91d1ac859736a..fdaa530f6713c 100644\n--- a/extensions/panache/rest-data-panache/deployment/pom.xml\n+++ b/extensions/panache/rest-data-panache/deployment/pom.xml\n@@ -34,11 +34,6 @@\n             <artifactId>quarkus-hal-deployment</artifactId>\n         </dependency>\n \n-        <dependency>\n-            <groupId>io.quarkus</groupId>\n-            <artifactId>quarkus-resteasy-links-deployment</artifactId>\n-            <optional>true</optional>\n-        </dependency>\n         <dependency>\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-rest-links-deployment</artifactId>\n\ndiff --git a/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/AddMethodImplementor.java b/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/AddMethodImplementor.java\nindex eb862c9601d9f..0117419e2b2c6 100644\n--- a/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/AddMethodImplementor.java\n+++ b/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/AddMethodImplementor.java\n@@ -9,6 +9,8 @@\n import jakarta.ws.rs.core.Response;\n import jakarta.ws.rs.core.UriInfo;\n \n+import org.jboss.resteasy.reactive.RestResponse;\n+\n import io.quarkus.deployment.Capabilities;\n import io.quarkus.gizmo.ClassCreator;\n import io.quarkus.gizmo.FieldDescriptor;\n@@ -104,7 +106,8 @@ public AddMethodImplementor(Capabilities capabilities) {\n     protected void implementInternal(ClassCreator classCreator, ResourceMetadata resourceMetadata,\n             ResourceProperties resourceProperties, FieldDescriptor resourceField) {\n         MethodCreator methodCreator = SignatureMethodCreator.getMethodCreator(METHOD_NAME, classCreator,\n-                isNotReactivePanache() ? responseType() : uniType(resourceMetadata.getEntityType()),\n+                isNotReactivePanache() ? responseType(resourceMetadata.getEntityType())\n+                        : uniType(resourceMetadata.getEntityType()),\n                 param(\"entity\", resourceMetadata.getEntityType()), param(\"uriInfo\", UriInfo.class));\n \n         // Add method annotations\n@@ -115,7 +118,7 @@ protected void implementInternal(ClassCreator classCreator, ResourceMetadata res\n         addConsumesAnnotation(methodCreator, APPLICATION_JSON);\n         addProducesJsonAnnotation(methodCreator, resourceProperties);\n         addLinksAnnotation(methodCreator, resourceProperties, resourceMetadata.getEntityType(), REL);\n-        addOpenApiResponseAnnotation(methodCreator, Response.Status.CREATED, resourceMetadata.getEntityType());\n+        addOpenApiResponseAnnotation(methodCreator, RestResponse.Status.CREATED, resourceMetadata.getEntityType());\n         addSecurityAnnotations(methodCreator, resourceProperties);\n         // Add parameter annotations\n         if (hasValidatorCapability()) {\n\ndiff --git a/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/CountMethodImplementor.java b/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/CountMethodImplementor.java\nindex a77e466b742c8..7e7963e68477e 100644\n--- a/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/CountMethodImplementor.java\n+++ b/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/CountMethodImplementor.java\n@@ -4,7 +4,7 @@\n import static io.quarkus.rest.data.panache.deployment.utils.SignatureMethodCreator.responseType;\n import static io.quarkus.rest.data.panache.deployment.utils.SignatureMethodCreator.uniType;\n \n-import jakarta.ws.rs.core.Response;\n+import org.jboss.resteasy.reactive.RestResponse;\n \n import io.quarkus.deployment.Capabilities;\n import io.quarkus.gizmo.ClassCreator;\n@@ -75,20 +75,16 @@ protected void implementInternal(ClassCreator classCreator, ResourceMetadata res\n             ResourceProperties resourceProperties, FieldDescriptor resourceField) {\n         // Method parameters: sort strings, page index, page size, uri info\n         MethodCreator methodCreator = SignatureMethodCreator.getMethodCreator(RESOURCE_METHOD_NAME, classCreator,\n-                isNotReactivePanache() ? responseType() : uniType(Long.class));\n+                isNotReactivePanache() ? responseType(Long.class) : uniType(Long.class));\n \n         // Add method annotations\n         addGetAnnotation(methodCreator);\n         addProducesAnnotation(methodCreator, APPLICATION_JSON);\n         addPathAnnotation(methodCreator, appendToPath(resourceProperties.getPath(RESOURCE_METHOD_NAME), RESOURCE_METHOD_NAME));\n         addMethodAnnotations(methodCreator, resourceProperties.getMethodAnnotations(RESOURCE_METHOD_NAME));\n-        addOpenApiResponseAnnotation(methodCreator, Response.Status.OK, Long.class, false);\n+        addOpenApiResponseAnnotation(methodCreator, RestResponse.Status.OK, Long.class, false);\n         addSecurityAnnotations(methodCreator, resourceProperties);\n-        if (!isResteasyClassic()) {\n-            // We only add the Links annotation in Resteasy Reactive because Resteasy Classic ignores the REL parameter:\n-            // it always uses \"list\" for GET methods, so it interferes with the list implementation.\n-            addLinksAnnotation(methodCreator, resourceProperties, resourceMetadata.getEntityType(), REL);\n-        }\n+        addLinksAnnotation(methodCreator, resourceProperties, resourceMetadata.getEntityType(), REL);\n \n         ResultHandle resource = methodCreator.readInstanceField(resourceField, methodCreator.getThis());\n \n\ndiff --git a/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/DeleteMethodImplementor.java b/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/DeleteMethodImplementor.java\nindex 0734705ec1869..51fb805151847 100644\n--- a/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/DeleteMethodImplementor.java\n+++ b/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/DeleteMethodImplementor.java\n@@ -7,6 +7,8 @@\n \n import jakarta.ws.rs.core.Response;\n \n+import org.jboss.resteasy.reactive.RestResponse;\n+\n import io.quarkus.deployment.Capabilities;\n import io.quarkus.gizmo.BranchResult;\n import io.quarkus.gizmo.ClassCreator;\n@@ -84,7 +86,8 @@ public DeleteMethodImplementor(Capabilities capabilities) {\n     protected void implementInternal(ClassCreator classCreator, ResourceMetadata resourceMetadata,\n             ResourceProperties resourceProperties, FieldDescriptor resourceField) {\n         MethodCreator methodCreator = SignatureMethodCreator.getMethodCreator(METHOD_NAME, classCreator,\n-                isNotReactivePanache() ? responseType() : uniType(resourceMetadata.getEntityType()),\n+                isNotReactivePanache() ? responseType(resourceMetadata.getEntityType())\n+                        : uniType(resourceMetadata.getEntityType()),\n                 param(\"id\", resourceMetadata.getIdType()));\n \n         // Add method annotations\n@@ -93,7 +96,7 @@ protected void implementInternal(ClassCreator classCreator, ResourceMetadata res\n         addPathParamAnnotation(methodCreator.getParameterAnnotations(0), \"id\");\n         addLinksAnnotation(methodCreator, resourceProperties, resourceMetadata.getEntityType(), REL);\n         addMethodAnnotations(methodCreator, resourceProperties.getMethodAnnotations(RESOURCE_METHOD_NAME));\n-        addOpenApiResponseAnnotation(methodCreator, Response.Status.NO_CONTENT);\n+        addOpenApiResponseAnnotation(methodCreator, RestResponse.Status.NO_CONTENT);\n         addSecurityAnnotations(methodCreator, resourceProperties);\n \n         ResultHandle resource = methodCreator.readInstanceField(resourceField, methodCreator.getThis());\n\ndiff --git a/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/GetMethodImplementor.java b/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/GetMethodImplementor.java\nindex 098fa9d3049d6..c10c01b89d9a7 100644\n--- a/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/GetMethodImplementor.java\n+++ b/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/GetMethodImplementor.java\n@@ -7,6 +7,8 @@\n \n import jakarta.ws.rs.core.Response;\n \n+import org.jboss.resteasy.reactive.RestResponse;\n+\n import io.quarkus.deployment.Capabilities;\n import io.quarkus.gizmo.BranchResult;\n import io.quarkus.gizmo.ClassCreator;\n@@ -86,7 +88,8 @@ public GetMethodImplementor(Capabilities capabilities) {\n     protected void implementInternal(ClassCreator classCreator, ResourceMetadata resourceMetadata,\n             ResourceProperties resourceProperties, FieldDescriptor resourceField) {\n         MethodCreator methodCreator = SignatureMethodCreator.getMethodCreator(METHOD_NAME, classCreator,\n-                isNotReactivePanache() ? responseType() : uniType(resourceMetadata.getEntityType()),\n+                isNotReactivePanache() ? responseType(resourceMetadata.getEntityType())\n+                        : uniType(resourceMetadata.getEntityType()),\n                 param(\"id\", resourceMetadata.getIdType()));\n \n         // Add method annotations\n@@ -94,7 +97,7 @@ protected void implementInternal(ClassCreator classCreator, ResourceMetadata res\n         addGetAnnotation(methodCreator);\n         addProducesJsonAnnotation(methodCreator, resourceProperties);\n         addMethodAnnotations(methodCreator, resourceProperties.getMethodAnnotations(RESOURCE_METHOD_NAME));\n-        addOpenApiResponseAnnotation(methodCreator, Response.Status.OK, resourceMetadata.getEntityType());\n+        addOpenApiResponseAnnotation(methodCreator, RestResponse.Status.OK, resourceMetadata.getEntityType());\n         addSecurityAnnotations(methodCreator, resourceProperties);\n \n         addPathParamAnnotation(methodCreator.getParameterAnnotations(0), \"id\");\n\ndiff --git a/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/ListMethodImplementor.java b/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/ListMethodImplementor.java\nindex 09905f1b89426..b3b49c3afa7dc 100644\n--- a/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/ListMethodImplementor.java\n+++ b/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/ListMethodImplementor.java\n@@ -31,6 +31,7 @@\n import jakarta.ws.rs.core.UriInfo;\n \n import org.jboss.jandex.Type;\n+import org.jboss.resteasy.reactive.RestResponse;\n \n import io.quarkus.deployment.Capabilities;\n import io.quarkus.gizmo.AnnotatedElement;\n@@ -190,7 +191,8 @@ private void implementPaged(ClassCreator classCreator, ResourceMetadata resource\n                     param.getClazz()));\n         }\n         MethodCreator methodCreator = SignatureMethodCreator.getMethodCreator(getMethodName(), classCreator,\n-                isNotReactivePanache() ? responseType() : uniType(resourceMetadata.getEntityType()),\n+                isNotReactivePanache() ? responseType(resourceMetadata.getEntityType())\n+                        : uniType(resourceMetadata.getEntityType()),\n                 parameters.toArray(new SignatureMethodCreator.Parameter[0]));\n \n         // Add method annotations\n@@ -199,7 +201,7 @@ private void implementPaged(ClassCreator classCreator, ResourceMetadata resource\n         addProducesJsonAnnotation(methodCreator, resourceProperties);\n         addLinksAnnotation(methodCreator, resourceProperties, resourceMetadata.getEntityType(), REL);\n         addMethodAnnotations(methodCreator, resourceProperties.getMethodAnnotations(RESOURCE_METHOD_NAME));\n-        addOpenApiResponseAnnotation(methodCreator, Response.Status.OK, resourceMetadata.getEntityType(), true);\n+        addOpenApiResponseAnnotation(methodCreator, RestResponse.Status.OK, resourceMetadata.getEntityType(), true);\n         addSecurityAnnotations(methodCreator, resourceProperties);\n         addSortQueryParamValidatorAnnotation(methodCreator);\n         addQueryParamAnnotation(methodCreator.getParameterAnnotations(0), \"sort\");\n@@ -276,7 +278,8 @@ private void implementNotPaged(ClassCreator classCreator, ResourceMetadata resou\n                     param.getClazz()));\n         }\n         MethodCreator methodCreator = SignatureMethodCreator.getMethodCreator(getMethodName(), classCreator,\n-                isNotReactivePanache() ? responseType() : uniType(resourceMetadata.getEntityType()),\n+                isNotReactivePanache() ? responseType(resourceMetadata.getEntityType())\n+                        : uniType(resourceMetadata.getEntityType()),\n                 parameters.toArray(new SignatureMethodCreator.Parameter[0]));\n \n         // Add method annotations\n@@ -285,7 +288,7 @@ private void implementNotPaged(ClassCreator classCreator, ResourceMetadata resou\n         addProducesJsonAnnotation(methodCreator, resourceProperties);\n         addLinksAnnotation(methodCreator, resourceProperties, resourceMetadata.getEntityType(), REL);\n         addMethodAnnotations(methodCreator, resourceProperties.getMethodAnnotations(RESOURCE_METHOD_NAME));\n-        addOpenApiResponseAnnotation(methodCreator, Response.Status.OK, resourceMetadata.getEntityType(), true);\n+        addOpenApiResponseAnnotation(methodCreator, RestResponse.Status.OK, resourceMetadata.getEntityType(), true);\n         addSecurityAnnotations(methodCreator, resourceProperties);\n         addQueryParamAnnotation(methodCreator.getParameterAnnotations(0), \"sort\");\n         addQueryParamAnnotation(methodCreator.getParameterAnnotations(1), \"namedQuery\");\n\ndiff --git a/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/OverrideUserMethodImplementor.java b/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/OverrideUserMethodImplementor.java\nindex cd0c85662367a..9eb8c07cbb82a 100644\n--- a/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/OverrideUserMethodImplementor.java\n+++ b/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/OverrideUserMethodImplementor.java\n@@ -91,8 +91,7 @@ protected void addLinksAnnotation(AnnotatedElement element, ResourceProperties r\n             return;\n         }\n \n-        String linksAnnotationName = isResteasyClassic() ? \"org.jboss.resteasy.links.LinkResource\"\n-                : \"io.quarkus.resteasy.reactive.links.RestLink\";\n+        String linksAnnotationName = \"io.quarkus.resteasy.reactive.links.RestLink\";\n         // Add the links annotation if and only if the user didn't add it.\n         if (!methodInfo.hasAnnotation(linksAnnotationName)) {\n             super.addLinksAnnotation(element, resourceProperties, entityClassName, rel);\n\ndiff --git a/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/StandardMethodImplementor.java b/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/StandardMethodImplementor.java\nindex 7c7b9c2f600b8..080bc8f1020eb 100644\n--- a/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/StandardMethodImplementor.java\n+++ b/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/StandardMethodImplementor.java\n@@ -13,10 +13,10 @@\n import jakarta.ws.rs.Produces;\n import jakarta.ws.rs.QueryParam;\n import jakarta.ws.rs.core.Context;\n-import jakarta.ws.rs.core.Response;\n \n import org.jboss.jandex.AnnotationInstance;\n import org.jboss.logging.Logger;\n+import org.jboss.resteasy.reactive.RestResponse;\n \n import io.quarkus.deployment.Capabilities;\n import io.quarkus.deployment.Capability;\n@@ -52,7 +52,7 @@ public abstract class StandardMethodImplementor implements MethodImplementor {\n \n     protected StandardMethodImplementor(Capabilities capabilities) {\n         this.capabilities = capabilities;\n-        this.responseImplementor = new ResponseImplementor(capabilities);\n+        this.responseImplementor = new ResponseImplementor();\n     }\n \n     /**\n@@ -104,20 +104,14 @@ protected void addDeleteAnnotation(AnnotatedElement element) {\n     protected void addLinksAnnotation(AnnotatedElement element, ResourceProperties resourceProperties, String entityClassName,\n             String rel) {\n         if (resourceProperties.isHal()) {\n-            if (isResteasyClassic()) {\n-                AnnotationCreator linkResource = element.addAnnotation(\"org.jboss.resteasy.links.LinkResource\");\n-                linkResource.addValue(\"entityClassName\", entityClassName);\n+            AnnotationCreator linkResource = element.addAnnotation(RestLink.class);\n+            Class<?> entityClass;\n+            try {\n+                entityClass = Thread.currentThread().getContextClassLoader().loadClass(entityClassName);\n+                linkResource.addValue(\"entityType\", entityClass);\n                 linkResource.addValue(\"rel\", rel);\n-            } else {\n-                AnnotationCreator linkResource = element.addAnnotation(RestLink.class);\n-                Class<?> entityClass;\n-                try {\n-                    entityClass = Thread.currentThread().getContextClassLoader().loadClass(entityClassName);\n-                    linkResource.addValue(\"entityType\", entityClass);\n-                    linkResource.addValue(\"rel\", rel);\n-                } catch (ClassNotFoundException e) {\n-                    LOGGER.error(\"Unable to create links for entity: '\" + entityClassName + \"'\", e);\n-                }\n+            } catch (ClassNotFoundException e) {\n+                LOGGER.error(\"Unable to create links for entity: '\" + entityClassName + \"'\", e);\n             }\n         }\n     }\n@@ -177,25 +171,25 @@ protected void addSecurityAnnotations(AnnotatedElement element, ResourceProperti\n         }\n     }\n \n-    protected void addOpenApiResponseAnnotation(AnnotatedElement element, Response.Status status) {\n+    protected void addOpenApiResponseAnnotation(AnnotatedElement element, RestResponse.Status status) {\n         if (capabilities.isPresent(Capability.SMALLRYE_OPENAPI)) {\n             element.addAnnotation(OPENAPI_RESPONSE_ANNOTATION)\n                     .add(\"responseCode\", String.valueOf(status.getStatusCode()));\n         }\n     }\n \n-    protected void addOpenApiResponseAnnotation(AnnotatedElement element, Response.Status status, String entityType) {\n+    protected void addOpenApiResponseAnnotation(AnnotatedElement element, RestResponse.Status status, String entityType) {\n         addOpenApiResponseAnnotation(element, status, entityType, false);\n     }\n \n-    protected void addOpenApiResponseAnnotation(AnnotatedElement element, Response.Status status, String entityType,\n+    protected void addOpenApiResponseAnnotation(AnnotatedElement element, RestResponse.Status status, String entityType,\n             boolean isList) {\n         if (capabilities.isPresent(Capability.SMALLRYE_OPENAPI)) {\n             addOpenApiResponseAnnotation(element, status, toClass(entityType), isList);\n         }\n     }\n \n-    protected void addOpenApiResponseAnnotation(AnnotatedElement element, Response.Status status, Class<?> clazz,\n+    protected void addOpenApiResponseAnnotation(AnnotatedElement element, RestResponse.Status status, Class<?> clazz,\n             boolean isList) {\n         if (capabilities.isPresent(Capability.SMALLRYE_OPENAPI)) {\n             AnnotationCreator schemaAnnotation = AnnotationCreator.of(OPENAPI_SCHEMA_ANNOTATION)\n@@ -232,10 +226,6 @@ protected boolean hasValidatorCapability() {\n         return capabilities.isPresent(Capability.HIBERNATE_VALIDATOR);\n     }\n \n-    protected boolean isResteasyClassic() {\n-        return capabilities.isPresent(Capability.RESTEASY);\n-    }\n-\n     protected boolean isNotReactivePanache() {\n         return !capabilities.isPresent(Capability.HIBERNATE_REACTIVE);\n     }\n\ndiff --git a/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/UpdateMethodImplementor.java b/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/UpdateMethodImplementor.java\nindex 2f42be5938390..cbe7eaa3710c2 100644\n--- a/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/UpdateMethodImplementor.java\n+++ b/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/UpdateMethodImplementor.java\n@@ -12,6 +12,8 @@\n import jakarta.ws.rs.core.Response;\n import jakarta.ws.rs.core.UriInfo;\n \n+import org.jboss.resteasy.reactive.RestResponse;\n+\n import io.quarkus.arc.Arc;\n import io.quarkus.arc.ArcContainer;\n import io.quarkus.arc.InstanceHandle;\n@@ -136,7 +138,8 @@ public UpdateMethodImplementor(Capabilities capabilities) {\n     protected void implementInternal(ClassCreator classCreator, ResourceMetadata resourceMetadata,\n             ResourceProperties resourceProperties, FieldDescriptor resourceField) {\n         MethodCreator methodCreator = SignatureMethodCreator.getMethodCreator(METHOD_NAME, classCreator,\n-                isNotReactivePanache() ? responseType() : uniType(resourceMetadata.getEntityType()),\n+                isNotReactivePanache() ? responseType(resourceMetadata.getEntityType())\n+                        : uniType(resourceMetadata.getEntityType()),\n                 param(\"id\", resourceMetadata.getIdType()),\n                 param(\"entity\", resourceMetadata.getEntityType()),\n                 param(\"uriInfo\", UriInfo.class));\n@@ -150,7 +153,7 @@ protected void implementInternal(ClassCreator classCreator, ResourceMetadata res\n         addProducesJsonAnnotation(methodCreator, resourceProperties);\n         addLinksAnnotation(methodCreator, resourceProperties, resourceMetadata.getEntityType(), REL);\n         addMethodAnnotations(methodCreator, resourceProperties.getMethodAnnotations(RESOURCE_UPDATE_METHOD_NAME));\n-        addOpenApiResponseAnnotation(methodCreator, Response.Status.CREATED, resourceMetadata.getEntityType());\n+        addOpenApiResponseAnnotation(methodCreator, RestResponse.Status.CREATED, resourceMetadata.getEntityType());\n         addSecurityAnnotations(methodCreator, resourceProperties);\n         // Add parameter annotations\n         if (hasValidatorCapability()) {\n\ndiff --git a/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/hal/ListHalMethodImplementor.java b/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/hal/ListHalMethodImplementor.java\nindex 933478e01c022..fcee1b07c982d 100644\n--- a/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/hal/ListHalMethodImplementor.java\n+++ b/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/hal/ListHalMethodImplementor.java\n@@ -22,7 +22,6 @@\n import io.quarkus.rest.data.panache.deployment.ResourceMetadata;\n import io.quarkus.rest.data.panache.deployment.methods.ListMethodImplementor;\n import io.quarkus.rest.data.panache.deployment.properties.ResourceProperties;\n-import io.quarkus.resteasy.links.runtime.hal.ResteasyHalService;\n import io.quarkus.resteasy.reactive.links.runtime.hal.ResteasyReactiveHalService;\n \n public final class ListHalMethodImplementor extends ListMethodImplementor {\n@@ -79,7 +78,7 @@ private ResultHandle wrapHalEntities(BytecodeCreator creator, ResultHandle entit\n         ResultHandle instanceHandle = creator.invokeInterfaceMethod(\n                 ofMethod(ArcContainer.class, \"instance\", InstanceHandle.class, Class.class, Annotation[].class),\n                 arcContainer,\n-                creator.loadClassFromTCCL(isResteasyClassic() ? ResteasyHalService.class : ResteasyReactiveHalService.class),\n+                creator.loadClassFromTCCL(ResteasyReactiveHalService.class),\n                 creator.newArray(Annotation.class, 0));\n         ResultHandle halService = creator.invokeInterfaceMethod(\n                 ofMethod(InstanceHandle.class, \"get\", Object.class), instanceHandle);\n\ndiff --git a/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/utils/ResponseImplementor.java b/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/utils/ResponseImplementor.java\nindex 834ae183d89b5..a6bcf7127b863 100644\n--- a/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/utils/ResponseImplementor.java\n+++ b/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/utils/ResponseImplementor.java\n@@ -7,42 +7,34 @@\n \n import jakarta.ws.rs.WebApplicationException;\n import jakarta.ws.rs.core.Link;\n-import jakarta.ws.rs.core.Response;\n-import jakarta.ws.rs.core.Response.ResponseBuilder;\n+\n+import org.jboss.resteasy.reactive.RestResponse;\n \n import io.quarkus.arc.Arc;\n import io.quarkus.arc.ArcContainer;\n import io.quarkus.arc.InstanceHandle;\n-import io.quarkus.deployment.Capabilities;\n-import io.quarkus.deployment.Capability;\n import io.quarkus.gizmo.BytecodeCreator;\n import io.quarkus.gizmo.MethodDescriptor;\n import io.quarkus.gizmo.ResultHandle;\n import io.quarkus.hal.HalService;\n import io.quarkus.rest.data.panache.deployment.properties.ResourceProperties;\n-import io.quarkus.resteasy.links.runtime.hal.ResteasyHalService;\n import io.quarkus.resteasy.reactive.links.runtime.hal.ResteasyReactiveHalService;\n \n public final class ResponseImplementor {\n \n-    private final Capabilities capabilities;\n-\n-    public ResponseImplementor(Capabilities capabilities) {\n-        this.capabilities = capabilities;\n-    }\n-\n     public ResultHandle ok(BytecodeCreator creator, ResultHandle entity) {\n         ResultHandle builder = creator.invokeStaticMethod(\n-                ofMethod(Response.class, \"ok\", ResponseBuilder.class, Object.class), entity);\n-        return creator.invokeVirtualMethod(ofMethod(ResponseBuilder.class, \"build\", Response.class), builder);\n+                ofMethod(RestResponse.ResponseBuilder.class, \"ok\", RestResponse.ResponseBuilder.class, Object.class), entity);\n+        return creator.invokeVirtualMethod(ofMethod(RestResponse.ResponseBuilder.class, \"build\", RestResponse.class), builder);\n     }\n \n     public ResultHandle ok(BytecodeCreator creator, ResultHandle entity, ResultHandle links) {\n         ResultHandle builder = creator.invokeStaticMethod(\n-                ofMethod(Response.class, \"ok\", ResponseBuilder.class, Object.class), entity);\n+                ofMethod(RestResponse.ResponseBuilder.class, \"ok\", RestResponse.ResponseBuilder.class, Object.class), entity);\n         creator.invokeVirtualMethod(\n-                ofMethod(ResponseBuilder.class, \"links\", ResponseBuilder.class, Link[].class), builder, links);\n-        return creator.invokeVirtualMethod(ofMethod(ResponseBuilder.class, \"build\", Response.class), builder);\n+                ofMethod(RestResponse.ResponseBuilder.class, \"links\", RestResponse.ResponseBuilder.class, Link[].class),\n+                builder, links);\n+        return creator.invokeVirtualMethod(ofMethod(RestResponse.ResponseBuilder.class, \"build\", RestResponse.class), builder);\n     }\n \n     public ResultHandle created(BytecodeCreator creator, ResultHandle entity, ResourceProperties resourceProperties) {\n@@ -60,7 +52,7 @@ public ResultHandle getEntityUrl(BytecodeCreator creator, ResultHandle entity) {\n                 MethodDescriptor.ofMethod(ArcContainer.class, \"instance\", InstanceHandle.class, Class.class,\n                         Annotation[].class),\n                 arcContainer,\n-                creator.loadClassFromTCCL(isResteasyClassic() ? ResteasyHalService.class : ResteasyReactiveHalService.class),\n+                creator.loadClassFromTCCL(ResteasyReactiveHalService.class),\n                 creator.loadNull());\n         ResultHandle halService = creator.invokeInterfaceMethod(\n                 MethodDescriptor.ofMethod(InstanceHandle.class, \"get\", Object.class),\n@@ -73,41 +65,41 @@ public ResultHandle getEntityUrl(BytecodeCreator creator, ResultHandle entity) {\n     }\n \n     public ResultHandle noContent(BytecodeCreator creator) {\n-        return status(creator, Response.Status.NO_CONTENT.getStatusCode());\n+        return status(creator, RestResponse.Status.NO_CONTENT.getStatusCode());\n     }\n \n     public ResultHandle notFound(BytecodeCreator creator) {\n-        return status(creator, Response.Status.NOT_FOUND.getStatusCode());\n+        return status(creator, RestResponse.Status.NOT_FOUND.getStatusCode());\n     }\n \n     public ResultHandle notFoundException(BytecodeCreator creator) {\n         return creator.newInstance(MethodDescriptor.ofConstructor(WebApplicationException.class, int.class),\n-                creator.load(Response.Status.NOT_FOUND.getStatusCode()));\n+                creator.load(RestResponse.Status.NOT_FOUND.getStatusCode()));\n     }\n \n     private ResultHandle doCreated(BytecodeCreator creator, ResultHandle entity, ResultHandle location) {\n-        ResultHandle builder = getResponseBuilder(creator, Response.Status.CREATED.getStatusCode());\n+        ResultHandle builder = getResponseBuilder(creator, RestResponse.Status.CREATED.getStatusCode());\n         creator.invokeVirtualMethod(\n-                ofMethod(ResponseBuilder.class, \"entity\", ResponseBuilder.class, Object.class), builder, entity);\n+                ofMethod(RestResponse.ResponseBuilder.class, \"entity\", RestResponse.ResponseBuilder.class, Object.class),\n+                builder, entity);\n         if (location != null) {\n             creator.invokeVirtualMethod(\n-                    ofMethod(ResponseBuilder.class, \"location\", ResponseBuilder.class, URI.class), builder, location);\n+                    ofMethod(RestResponse.ResponseBuilder.class, \"location\", RestResponse.ResponseBuilder.class, URI.class),\n+                    builder, location);\n         }\n \n-        return creator.invokeVirtualMethod(ofMethod(ResponseBuilder.class, \"build\", Response.class), builder);\n+        return creator.invokeVirtualMethod(ofMethod(RestResponse.ResponseBuilder.class, \"build\", RestResponse.class), builder);\n     }\n \n     private ResultHandle status(BytecodeCreator creator, int status) {\n         ResultHandle builder = getResponseBuilder(creator, status);\n-        return creator.invokeVirtualMethod(ofMethod(ResponseBuilder.class, \"build\", Response.class), builder);\n+        return creator.invokeVirtualMethod(ofMethod(RestResponse.ResponseBuilder.class, \"build\", RestResponse.class), builder);\n     }\n \n     private ResultHandle getResponseBuilder(BytecodeCreator creator, int status) {\n         return creator.invokeStaticMethod(\n-                ofMethod(Response.class, \"status\", ResponseBuilder.class, int.class), creator.load(status));\n+                ofMethod(RestResponse.ResponseBuilder.class, \"create\", RestResponse.ResponseBuilder.class, int.class),\n+                creator.load(status));\n     }\n \n-    private boolean isResteasyClassic() {\n-        return capabilities.isPresent(Capability.RESTEASY);\n-    }\n }\n\ndiff --git a/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/utils/SignatureMethodCreator.java b/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/utils/SignatureMethodCreator.java\nindex 402dc1a124834..44f4fc3fc326a 100644\n--- a/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/utils/SignatureMethodCreator.java\n+++ b/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/utils/SignatureMethodCreator.java\n@@ -9,6 +9,8 @@\n \n import jakarta.ws.rs.core.Response;\n \n+import org.jboss.resteasy.reactive.RestResponse;\n+\n import io.quarkus.gizmo.ClassCreator;\n import io.quarkus.gizmo.MethodCreator;\n import io.quarkus.gizmo.SignatureBuilder;\n@@ -87,22 +89,23 @@ public static class ReturnType {\n         private Type type;\n     }\n \n-    public static ReturnType responseType() {\n-        ReturnType returnType = new ReturnType();\n-        returnType.classType = Response.class;\n-        returnType.type = RESPONSE_TYPE;\n-        return returnType;\n+    public static ReturnType responseType(Object entityTypeStr) {\n+        return getReturnType(RestResponse.class, entityTypeStr);\n+    }\n+\n+    public static ReturnType uniType(Object entityTypeStr) {\n+        return getReturnType(Uni.class, entityTypeStr);\n     }\n \n-    public static ReturnType uniType(Object... arguments) {\n+    private static ReturnType getReturnType(Class<?> entityType, Object... arguments) {\n         ReturnType returnType = new ReturnType();\n         Type[] typeArguments = new Type[arguments.length];\n         for (int index = 0; index < arguments.length; index++) {\n             typeArguments[index] = toGizmoType(arguments[index]);\n         }\n \n-        returnType.classType = Uni.class;\n-        returnType.type = parameterizedType(classType(Uni.class), typeArguments);\n+        returnType.classType = entityType;\n+        returnType.type = parameterizedType(classType(entityType), typeArguments);\n         return returnType;\n     }\n }\n\ndiff --git a/extensions/spring-data-rest/deployment/pom.xml b/extensions/spring-data-rest/deployment/pom.xml\nindex f2771ddfbd3c1..aad013b6304fd 100644\n--- a/extensions/spring-data-rest/deployment/pom.xml\n+++ b/extensions/spring-data-rest/deployment/pom.xml\n@@ -38,12 +38,12 @@\n         </dependency>\n         <dependency>\n             <groupId>io.quarkus</groupId>\n-            <artifactId>quarkus-resteasy-jackson-deployment</artifactId>\n+            <artifactId>quarkus-rest-jackson-deployment</artifactId>\n             <scope>test</scope>\n         </dependency>\n         <dependency>\n             <groupId>io.quarkus</groupId>\n-            <artifactId>quarkus-resteasy-links-deployment</artifactId>\n+            <artifactId>quarkus-rest-links-deployment</artifactId>\n             <scope>test</scope>\n         </dependency>\n         <dependency>\n",
    "test_patch": "diff --git a/integration-tests/hibernate-orm-rest-data-panache/pom.xml b/integration-tests/hibernate-orm-rest-data-panache/pom.xml\nindex 05d33882b510d..4ba0870fdf870 100644\n--- a/integration-tests/hibernate-orm-rest-data-panache/pom.xml\n+++ b/integration-tests/hibernate-orm-rest-data-panache/pom.xml\n@@ -23,7 +23,7 @@\n         </dependency>\n         <dependency>\n             <groupId>io.quarkus</groupId>\n-            <artifactId>quarkus-resteasy-jackson</artifactId>\n+            <artifactId>quarkus-rest-jackson</artifactId>\n         </dependency>\n         <dependency>\n             <groupId>io.quarkus</groupId>\n@@ -97,7 +97,7 @@\n         </dependency>\n         <dependency>\n             <groupId>io.quarkus</groupId>\n-            <artifactId>quarkus-resteasy-jackson-deployment</artifactId>\n+            <artifactId>quarkus-rest-jackson-deployment</artifactId>\n             <version>${project.version}</version>\n             <type>pom</type>\n             <scope>test</scope>\n\ndiff --git a/integration-tests/hibernate-orm-rest-data-panache/src/test/java/io/quarkus/it/hibernate/orm/rest/data/panache/HibernateOrmRestDataPanacheTest.java b/integration-tests/hibernate-orm-rest-data-panache/src/test/java/io/quarkus/it/hibernate/orm/rest/data/panache/HibernateOrmRestDataPanacheTest.java\nindex 73a33ea36ef1a..2dac9cc0b4bad 100644\n--- a/integration-tests/hibernate-orm-rest-data-panache/src/test/java/io/quarkus/it/hibernate/orm/rest/data/panache/HibernateOrmRestDataPanacheTest.java\n+++ b/integration-tests/hibernate-orm-rest-data-panache/src/test/java/io/quarkus/it/hibernate/orm/rest/data/panache/HibernateOrmRestDataPanacheTest.java\n@@ -237,8 +237,8 @@ void shouldNotCreateBookWithBlankTitle() {\n                 .and().body(book.toString())\n                 .when().post(\"/books\")\n                 .then().statusCode(400)\n-                .and().body(\"parameterViolations[0].path\", equalTo(\"add.entity.title\"))\n-                .and().body(\"parameterViolations[0].message\", equalTo(\"must not be blank\"));\n+                .and().body(\"violations[0].field\", equalTo(\"add.entity.title\"))\n+                .and().body(\"violations[0].message\", equalTo(\"must not be blank\"));\n     }\n \n     @Test\n@@ -307,7 +307,7 @@ void shouldNotUpdateBookWithBlankTitle() {\n                 .and().body(book.toString())\n                 .when().put(\"/books/\" + CRIME_AND_PUNISHMENT_ID)\n                 .then().statusCode(400)\n-                .and().body(\"parameterViolations[0].path\", equalTo(\"update.entity.title\"))\n-                .and().body(\"parameterViolations[0].message\", equalTo(\"must not be blank\"));\n+                .and().body(\"violations[0].field\", equalTo(\"update.entity.title\"))\n+                .and().body(\"violations[0].message\", equalTo(\"must not be blank\"));\n     }\n }\n\ndiff --git a/integration-tests/spring-data-rest/pom.xml b/integration-tests/spring-data-rest/pom.xml\nindex 3bfe982abcd07..84fedea753647 100644\n--- a/integration-tests/spring-data-rest/pom.xml\n+++ b/integration-tests/spring-data-rest/pom.xml\n@@ -23,7 +23,7 @@\n         </dependency>\n         <dependency>\n             <groupId>io.quarkus</groupId>\n-            <artifactId>quarkus-resteasy-jackson</artifactId>\n+            <artifactId>quarkus-rest-jackson</artifactId>\n         </dependency>\n         <dependency>\n             <groupId>io.quarkus</groupId>\n@@ -97,7 +97,7 @@\n         </dependency>\n         <dependency>\n             <groupId>io.quarkus</groupId>\n-            <artifactId>quarkus-resteasy-jackson-deployment</artifactId>\n+            <artifactId>quarkus-rest-jackson-deployment</artifactId>\n             <version>${project.version}</version>\n             <type>pom</type>\n             <scope>test</scope>\n\ndiff --git a/integration-tests/spring-data-rest/src/test/java/io/quarkus/it/spring/data/rest/SpringDataRestTest.java b/integration-tests/spring-data-rest/src/test/java/io/quarkus/it/spring/data/rest/SpringDataRestTest.java\nindex d8e71d707d4a6..80ee1ed56a0de 100644\n--- a/integration-tests/spring-data-rest/src/test/java/io/quarkus/it/spring/data/rest/SpringDataRestTest.java\n+++ b/integration-tests/spring-data-rest/src/test/java/io/quarkus/it/spring/data/rest/SpringDataRestTest.java\n@@ -187,8 +187,8 @@ void shouldNotCreateBookWithBlankTitle() {\n                 .and().body(book.toString())\n                 .when().post(\"/books\")\n                 .then().statusCode(400)\n-                .and().body(\"parameterViolations[0].path\", equalTo(\"add.entity.title\"))\n-                .and().body(\"parameterViolations[0].message\", equalTo(\"must not be blank\"));\n+                .and().body(\"violations[0].field\", equalTo(\"add.entity.title\"))\n+                .and().body(\"violations[0].message\", equalTo(\"must not be blank\"));\n     }\n \n     @Test\n@@ -257,8 +257,8 @@ void shouldNotUpdateBookWithBlankTitle() {\n                 .and().body(book.toString())\n                 .when().put(\"/books/\" + CRIME_AND_PUNISHMENT_ID)\n                 .then().statusCode(400)\n-                .and().body(\"parameterViolations[0].path\", equalTo(\"update.entity.title\"))\n-                .and().body(\"parameterViolations[0].message\", equalTo(\"must not be blank\"));\n+                .and().body(\"violations[0].field\", equalTo(\"update.entity.title\"))\n+                .and().body(\"violations[0].message\", equalTo(\"must not be blank\"));\n     }\n \n     @Test\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46872",
    "pr_id": 46872,
    "issue_id": 46726,
    "repo": "quarkusio/quarkus",
    "problem_statement": "quarkus.config-tracking.file-suffix does not work as expected\n### Describe the bug\n\nWhen configuring `quarkus.config-tracking.file-suffix` with Quarkus 3.8.6, the `quarkus-prod-config-check` file is not identical to the one generated with the default file suffix (`-config-dump`)\nThis prevents the https://github.com/gradle/quarkus-build-caching-extension to provide build cache hits with the Develocity extension\n\n### Expected behavior\n\nWhen building twice in a row a Quarkus project using 3.8.6, `.quarkus/quarkus-prod-foo-bar` and `target/quarkus-prod-config-check` should be identical\n\n### Actual behavior\n\nThe two files have some differences \n\n<img width=\"2472\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/ed413c1a-9c11-48b9-a327-8be67d5e04d5\" />\n\n\n\n### How to Reproduce?\n\nClone https://github.com/jprinet/helm-quickstart and build it twice:\n```\n./mvnw clean package -Pcustom-suffix\n./mvnw clean package -Pcustom-suffix\n```\n\n\n### Output of `uname -a` or `ver`\n\nDarwin NJ7NXYPHH7 24.3.0 Darwin Kernel Version 24.3.0: Thu Jan  2 20:24:23 PST 2025; root:xnu-11215.81.4~3/RELEASE_ARM64_T6020 arm64 arm Darwin\n\n### Output of `java -version`\n\nopenjdk version \"17.0.6\" 2023-01-17 LTS OpenJDK Runtime Environment (build 17.0.6+10-LTS) OpenJDK 64-Bit Server VM (build 17.0.6+10-LTS, mixed mode, sharing)\n\n### Quarkus version or git rev\n\n3.8.6\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nApache Maven 3.9.9 (8e8579a9e76f7d015ee5ec7bfcdc97d260186937) Maven home: /Users/jprinet/.m2/wrapper/dists/apache-maven-3.9.9-bin/33b4b2b4/apache-maven-3.9.9 Java version: 17.0.6, vendor: BellSoft, runtime: /Users/jprinet/.asdf/installs/java/liberica-17.0.6+10 Default locale: en_US, platform encoding: UTF-8 OS name: \"mac os x\", version: \"15.3.1\", arch: \"aarch64\", family: \"mac\"\n\n### Additional information\n\n_No response_",
    "issue_word_count": 299,
    "test_files_count": 4,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "devtools/maven/src/main/java/io/quarkus/maven/TrackConfigChangesMojo.java",
      "integration-tests/maven/src/test/java/io/quarkus/maven/it/PackageIT.java",
      "integration-tests/maven/src/test/resources-filtered/projects/config-tracking-custom-file/pom.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/config-tracking-custom-file/src/main/java/org/acme/GreetingResource.java",
      "integration-tests/maven/src/test/resources-filtered/projects/config-tracking-custom-file/src/main/resources/application.properties"
    ],
    "pr_changed_test_files": [
      "integration-tests/maven/src/test/java/io/quarkus/maven/it/PackageIT.java",
      "integration-tests/maven/src/test/resources-filtered/projects/config-tracking-custom-file/pom.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/config-tracking-custom-file/src/main/java/org/acme/GreetingResource.java",
      "integration-tests/maven/src/test/resources-filtered/projects/config-tracking-custom-file/src/main/resources/application.properties"
    ],
    "base_commit": "d702f49c8c5a45d047f5f20e0cee8dfadd9b972a",
    "head_commit": "6128a910abff900acc248d9799b1f6888f723e73",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46872",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46872",
    "dockerfile": "",
    "pr_merged_at": "2025-03-24T14:34:42.000Z",
    "patch": "diff --git a/devtools/maven/src/main/java/io/quarkus/maven/TrackConfigChangesMojo.java b/devtools/maven/src/main/java/io/quarkus/maven/TrackConfigChangesMojo.java\nindex 7a71a932e810d..8e750b9ce6ada 100644\n--- a/devtools/maven/src/main/java/io/quarkus/maven/TrackConfigChangesMojo.java\n+++ b/devtools/maven/src/main/java/io/quarkus/maven/TrackConfigChangesMojo.java\n@@ -57,7 +57,7 @@ public class TrackConfigChangesMojo extends QuarkusBootstrapMojo {\n     File recordedBuildConfigDirectory;\n \n     @Parameter(property = \"quarkus.recorded-build-config.file\", required = false)\n-    File recordedBuildConfigFile;\n+    String recordedBuildConfigFile;\n \n     /**\n      * Whether to dump the current build configuration in case the configuration from the previous build isn't found\n@@ -101,16 +101,7 @@ protected void doExecute() throws MojoExecutionException, MojoFailureException {\n             getLog().debug(\"Bootstrapping Quarkus application in mode \" + launchMode);\n         }\n \n-        Path compareFile;\n-        if (this.recordedBuildConfigFile == null) {\n-            compareFile = recordedBuildConfigDirectory.toPath()\n-                    .resolve(\"quarkus-\" + launchMode.getDefaultProfile() + \"-config-dump\");\n-        } else if (this.recordedBuildConfigFile.isAbsolute()) {\n-            compareFile = this.recordedBuildConfigFile.toPath();\n-        } else {\n-            compareFile = recordedBuildConfigDirectory.toPath().resolve(this.recordedBuildConfigFile.toPath());\n-        }\n-\n+        final Path compareFile = resolvePreviousBuildConfigDump(launchMode);\n         final boolean prevConfigExists = Files.exists(compareFile);\n         if (!prevConfigExists && !dumpCurrentWhenRecordedUnavailable && !dumpDependencies) {\n             getLog().info(\"Config dump from the previous build does not exist at \" + compareFile);\n@@ -177,6 +168,19 @@ protected void doExecute() throws MojoExecutionException, MojoFailureException {\n         }\n     }\n \n+    private Path resolvePreviousBuildConfigDump(LaunchMode launchMode) {\n+        final Path previousBuildConfigDump = this.recordedBuildConfigFile == null ? null\n+                : Path.of(this.recordedBuildConfigFile);\n+        if (previousBuildConfigDump == null) {\n+            return recordedBuildConfigDirectory.toPath()\n+                    .resolve(\"quarkus-\" + launchMode.getDefaultProfile() + \"-config-dump\");\n+        }\n+        if (previousBuildConfigDump.isAbsolute()) {\n+            return previousBuildConfigDump;\n+        }\n+        return recordedBuildConfigDirectory.toPath().resolve(previousBuildConfigDump);\n+    }\n+\n     private Path getOutputFile(File outputFile, String profile, String fileNameSuffix) {\n         if (outputFile == null) {\n             return outputDirectory.toPath().resolve(\"quarkus-\" + profile + fileNameSuffix);\n",
    "test_patch": "diff --git a/integration-tests/maven/src/test/java/io/quarkus/maven/it/PackageIT.java b/integration-tests/maven/src/test/java/io/quarkus/maven/it/PackageIT.java\nindex f18bb8d4e0be5..8d92c6e13b326 100644\n--- a/integration-tests/maven/src/test/java/io/quarkus/maven/it/PackageIT.java\n+++ b/integration-tests/maven/src/test/java/io/quarkus/maven/it/PackageIT.java\n@@ -73,6 +73,43 @@ public void testConfigTracking() throws Exception {\n                 .contains(\"Option quarkus.package.jar.type has changed since the last build from fast-jar to uber-jar\");\n     }\n \n+    @Test\n+    public void testConfigTrackingCustomFile() throws Exception {\n+        testDir = initProject(\"projects/config-tracking-custom-file\");\n+        running = new RunningInvoker(testDir, false);\n+        var configDump = new File(new File(testDir, \".quarkus\"), \"quarkus-prod-used-config-options\");\n+        var configCheck = new File(new File(testDir, \"target\"), \"quarkus-prod-config-check\");\n+\n+        // initial build that generates .quarkus/quarkus-prod-config-dump\n+        var result = running.execute(List.of(\"clean package -DskipTests\"), Map.of());\n+        assertThat(result.getProcess().waitFor()).isEqualTo(0);\n+        assertThat(configDump).exists();\n+        assertThat(configCheck).doesNotExist();\n+\n+        // rebuild and compare the files\n+        result = running.execute(List.of(\"clean package -DskipTests\"), Map.of());\n+        assertThat(result.getProcess().waitFor()).isEqualTo(0);\n+        assertThat(configDump).exists();\n+        assertThat(configCheck).exists();\n+        assertThat(configDump).hasSameTextualContentAs(configCheck);\n+\n+        var props = new Properties();\n+        try (BufferedReader reader = Files.newBufferedReader(configDump.toPath())) {\n+            props.load(reader);\n+        }\n+        assertThat(props).containsEntry(\"quarkus.application.name\", HashUtil.sha512(\"code-with-quarkus\"));\n+\n+        assertThat(props).doesNotContainKey(\"quarkus.platform.group-id\");\n+        for (var name : props.stringPropertyNames()) {\n+            assertThat(name).doesNotStartWith(\"quarkus.test.\");\n+        }\n+\n+        result = running.execute(List.of(\"package -DskipTests -Dquarkus.package.jar.type=uber-jar\"), Map.of());\n+        assertThat(result.getProcess().waitFor()).isEqualTo(0);\n+        assertThat(running.log())\n+                .contains(\"Option quarkus.package.jar.type has changed since the last build from fast-jar to uber-jar\");\n+    }\n+\n     @Test\n     public void testPluginClasspathConfig() throws Exception {\n         testDir = initProject(\"projects/test-plugin-classpath-config\");\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/config-tracking-custom-file/pom.xml b/integration-tests/maven/src/test/resources-filtered/projects/config-tracking-custom-file/pom.xml\nnew file mode 100644\nindex 0000000000000..4fb4612c062a6\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/config-tracking-custom-file/pom.xml\n@@ -0,0 +1,71 @@\n+<?xml version=\"1.0\"?>\n+<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <groupId>org.acme</groupId>\n+  <artifactId>code-with-quarkus</artifactId>\n+  <version>1.0.0-SNAPSHOT</version>\n+  <properties>\n+    <compiler-plugin.version>${compiler-plugin.version}</compiler-plugin.version>\n+    <maven.compiler.release>${maven.compiler.release}</maven.compiler.release>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n+    <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>\n+    <quarkus.platform.group-id>io.quarkus</quarkus.platform.group-id>\n+    <quarkus.platform.version>${project.version}</quarkus.platform.version>\n+  </properties>\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>\\${quarkus.platform.group-id}</groupId>\n+        <artifactId>\\${quarkus.platform.artifact-id}</artifactId>\n+        <version>\\${quarkus.platform.version}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-rest</artifactId>\n+    </dependency>\n+  </dependencies>\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>\\${quarkus.platform.group-id}</groupId>\n+        <artifactId>quarkus-maven-plugin</artifactId>\n+        <version>\\${quarkus.platform.version}</version>\n+        <extensions>true</extensions>\n+        <executions>\n+          <execution>\n+            <id>track-prod-config-changes</id>\n+            <phase>process-resources</phase>\n+            <goals>\n+              <goal>track-config-changes</goal>\n+            </goals>\n+          </execution>\n+          <execution>\n+            <goals>\n+              <goal>build</goal>\n+              <goal>generate-code</goal>\n+              <goal>generate-code-tests</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <dumpDependencies>false</dumpDependencies>\n+          <recordedBuildConfigFile>quarkus-prod-used-config-options</recordedBuildConfigFile>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <artifactId>maven-compiler-plugin</artifactId>\n+        <version>\\${compiler-plugin.version}</version>\n+        <configuration>\n+          <parameters>true</parameters>\n+        </configuration>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>\n\\ No newline at end of file\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/config-tracking-custom-file/src/main/java/org/acme/GreetingResource.java b/integration-tests/maven/src/test/resources-filtered/projects/config-tracking-custom-file/src/main/java/org/acme/GreetingResource.java\nnew file mode 100644\nindex 0000000000000..244f294265375\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/config-tracking-custom-file/src/main/java/org/acme/GreetingResource.java\n@@ -0,0 +1,16 @@\n+package org.acme;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.Produces;\n+import jakarta.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"Hello from Quarkus REST\";\n+    }\n+}\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/config-tracking-custom-file/src/main/resources/application.properties b/integration-tests/maven/src/test/resources-filtered/projects/config-tracking-custom-file/src/main/resources/application.properties\nnew file mode 100644\nindex 0000000000000..9b54c166799cc\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/config-tracking-custom-file/src/main/resources/application.properties\n@@ -0,0 +1,4 @@\n+quarkus.config-tracking.enabled=true\n+quarkus.config-tracking.file-suffix=-used-config-options\n+quarkus.config-tracking.hash-options=quarkus.application.*\n+quarkus.config-tracking.exclude=quarkus.test.*,quarkus.platform.group-id\n\\ No newline at end of file\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46871",
    "pr_id": 46871,
    "issue_id": 47159,
    "repo": "quarkusio/quarkus",
    "problem_statement": "3.21.1: something broke, possibly related to mockito\n### Describe the bug\n\nOne of my sample-projects did not survive the upgrade to quarkus `3.21.1`; test execution fails with:\n\n```\n...\n[INFO] --- surefire:3.5.3:test (default-test) @ quarkus-xa ---\n[INFO] Using auto detected provider org.apache.maven.surefire.junitplatform.JUnitPlatformProvider\n[INFO] \n[INFO] -------------------------------------------------------\n[INFO]  T E S T S\n[INFO] -------------------------------------------------------\nFailed to find Premain-Class manifest attribute in /eXchange/.m2/repository/org/mockito/mockito-core/5.12.0/mockito-core-5.12.0.jar\n[ERROR] Error occurred during initialization of VM\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[WARNING] Corrupted channel by directly writing to native stream in forked JVM 1. See FAQ web page and the dump file /git/my-stuff/my-quarkus-samples/quarkus-xa/target/surefire-reports/2025-04-03T20-50-53_746-jvmRun1.dumpstream\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  16.108 s\n[INFO] Finished at: 2025-04-03T20:50:53+02:00\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:3.5.3:test (default-test) on project quarkus-xa: \n[ERROR] \n[ERROR] See /git/my-stuff/my-quarkus-samples/quarkus-xa/target/surefire-reports for the individual test results.\n[ERROR] See dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.\n[ERROR] The forked VM terminated without properly saying goodbye. VM crash or System.exit called?\n[ERROR] Command was /bin/sh -c cd '/git/my-stuff/my-quarkus-samples/quarkus-xa' && '/opt/java/mandrel/23.1.3.1-java21/bin/java' '-javaagent:/eXchange/.m2/repository/org/mockito/mockito-core/5.12.0/mockito-core-5.12.0.jar' '-jar' '/git/my-stuff/my-quarkus-samples/quarkus-xa/target/surefire/surefirebooter-20250403205053851_3.jar' '/git/my-stuff/my-quarkus-samples/quarkus-xa/target/surefire' '2025-04-03T20-50-53_746-jvmRun1' 'surefire-20250403205053851_1tmp' 'surefire_0-20250403205053851_2tmp'\n[ERROR] Error occurred in starting fork, check output in log\n[ERROR] Process Exit Code: 1\n[ERROR] org.apache.maven.surefire.booter.SurefireBooterForkException: The forked VM terminated without properly saying goodbye. VM crash or System.exit called?\n[ERROR] Command was /bin/sh -c cd '/git/my-stuff/my-quarkus-samples/quarkus-xa' && '/opt/java/mandrel/23.1.3.1-java21/bin/java' '-javaagent:/eXchange/.m2/repository/org/mockito/mockito-core/5.12.0/mockito-core-5.12.0.jar' '-jar' '/git/my-stuff/my-quarkus-samples/quarkus-xa/target/surefire/surefirebooter-20250403205053851_3.jar' '/git/my-stuff/my-quarkus-samples/quarkus-xa/target/surefire' '2025-04-03T20-50-53_746-jvmRun1' 'surefire-20250403205053851_1tmp' 'surefire_0-20250403205053851_2tmp'\n[ERROR] Error occurred in starting fork, check output in log\n[ERROR] Process Exit Code: 1\n[ERROR] \tat org.apache.maven.plugin.surefire.booterclient.ForkStarter.fork(ForkStarter.java:643)\n[ERROR] \tat org.apache.maven.plugin.surefire.booterclient.ForkStarter.run(ForkStarter.java:285)\n[ERROR] \tat org.apache.maven.plugin.surefire.booterclient.ForkStarter.run(ForkStarter.java:250)\n[ERROR] \tat org.apache.maven.plugin.surefire.AbstractSurefireMojo.executeProvider(AbstractSurefireMojo.java:1337)\n[ERROR] \tat org.apache.maven.plugin.surefire.AbstractSurefireMojo.executeAfterPreconditionsChecked(AbstractSurefireMojo.java:1135)\n[ERROR] \tat org.apache.maven.plugin.surefire.AbstractSurefireMojo.execute(AbstractSurefireMojo.java:969)\n[ERROR] \tat org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:126)\n[ERROR] \tat org.apache.maven.lifecycle.internal.MojoExecutor.doExecute2(MojoExecutor.java:328)\n[ERROR] \tat org.apache.maven.lifecycle.internal.MojoExecutor.doExecute(MojoExecutor.java:316)\n[ERROR] \tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:212)\n[ERROR] \tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:174)\n[ERROR] \tat org.apache.maven.lifecycle.internal.MojoExecutor.access$000(MojoExecutor.java:75)\n[ERROR] \tat org.apache.maven.lifecycle.internal.MojoExecutor$1.run(MojoExecutor.java:162)\n[ERROR] \tat org.apache.maven.plugin.DefaultMojosExecutionStrategy.execute(DefaultMojosExecutionStrategy.java:39)\n[ERROR] \tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:159)\n[ERROR] \tat org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:105)\n[ERROR] \tat org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:73)\n[ERROR] \tat org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:53)\n[ERROR] \tat org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:118)\n[ERROR] \tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:261)\n[ERROR] \tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:173)\n[ERROR] \tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:101)\n[ERROR] \tat org.apache.maven.cli.MavenCli.execute(MavenCli.java:906)\n[ERROR] \tat org.apache.maven.cli.MavenCli.doMain(MavenCli.java:283)\n[ERROR] \tat org.apache.maven.cli.MavenCli.main(MavenCli.java:206)\n[ERROR] \tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n[ERROR] \tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n[ERROR] \tat org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:255)\n[ERROR] \tat org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:201)\n[ERROR] \tat org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:361)\n[ERROR] \tat org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:314)\n[ERROR] \tat org.codehaus.classworlds.Launcher.main(Launcher.java:41)\n[ERROR] \n...\n```\n\nThe error is reproducible locally and in the github pipeline, see e.g.: https://github.com/turing85/quarkus-xa/actions/runs/14229924413/job/39941760614#step:3:3087\n\n### Expected behavior\n\nApplication builds, and tests are executed successfully.\n\n### Actual behavior\n\nTest execution fails with above error.\n\n### How to Reproduce?\n\nReproducer:\n\n1. Clone https://github.com/turing85/quarkus-xa/, branch `dependabot/maven/quarkus.platform.version-3.21.1`\n```bash\ngit clone https://github.com/turing85/quarkus-xa.git --branch dependabot/maven/quarkus.platform.version-3.21.1 \\\n  && cd quarkus-xa\n```\n2. Run `./mvnw clean verify`\n3. Observe that maven fails with the above error\n\n### Output of `uname -a` or `ver`\n\n```\nLinux xxx 6.8.0-57-generic #59-Ubuntu SMP PREEMPT_DYNAMIC Sat Mar 15 17:40:59 UTC 2025 x86_64 x86_64 x86_64 GNU/Linux\n```\n\n### Output of `java -version`\n\n```\nopenjdk version \"21.0.3\" 2024-04-16 LTS\nOpenJDK Runtime Environment Temurin-21.0.3+9 (build 21.0.3+9-LTS)\nOpenJDK 64-Bit Server VM Temurin-21.0.3+9 (build 21.0.3+9-LTS, mixed mode, sharing)\n\n```\n\n### Quarkus version or git rev\n\n```\n3.21.1\n```\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n```\nApache Maven 3.9.9 (8e8579a9e76f7d015ee5ec7bfcdc97d260186937)\nMaven home: /home/marco/.m2/wrapper/dists/apache-maven-3.9.9/3477a4f1\nJava version: 21.0.3, vendor: Eclipse Adoptium, runtime: /opt/java/mandrel/23.1.3.1-java21\nDefault locale: en_US, platform encoding: UTF-8\nOS name: \"linux\", version: \"6.8.0-57-generic\", arch: \"amd64\", family: \"unix\"\n```\n\n### Additional information\n\n_No response_",
    "issue_word_count": 1077,
    "test_files_count": 16,
    "non_test_files_count": 11,
    "pr_changed_files": [
      "bom/application/pom.xml",
      "devtools/gradle/gradle/libs.versions.toml",
      "extensions/devservices/oidc/src/main/java/io/quarkus/devservices/oidc/OidcDevServicesProcessor.java",
      "extensions/resteasy-classic/resteasy-client/deployment/src/test/java/io/quarkus/restclient/configuration/AbstractRestClientsTest.java",
      "extensions/resteasy-classic/resteasy-client/deployment/src/test/java/io/quarkus/restclient/configuration/MPRestClientsTest.java",
      "extensions/resteasy-classic/resteasy-client/deployment/src/test/java/io/quarkus/restclient/configuration/QuarkusRestClientsTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractNonAbsentSerializationTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractNonEmptySerializationTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractSimpleJsonTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/NonAbsentReflectionFreeSerializationTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/NonAbsentSerializationTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/NonEmptyReflectionFreeSerializationTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/NonEmptySerializationTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonWithReflectionFreeSerializersTest.java",
      "extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/AbstractPermissionCheckerRestMultiTest.java",
      "independent-projects/arc/pom.xml",
      "independent-projects/bootstrap/bom-test/pom.xml",
      "independent-projects/bootstrap/pom.xml",
      "independent-projects/extension-maven-plugin/pom.xml",
      "independent-projects/junit5-virtual-threads/pom.xml",
      "independent-projects/junit5-virtual-threads/src/test/java/io/quarkus/test/junit5/virtual/internal/VirtualThreadExtensionTest.java",
      "independent-projects/qute/pom.xml",
      "independent-projects/resteasy-reactive/pom.xml",
      "independent-projects/tools/pom.xml",
      "integration-tests/oidc-wiremock/src/main/resources/application.properties",
      "tcks/resteasy-reactive/pom.xml"
    ],
    "pr_changed_test_files": [
      "extensions/resteasy-classic/resteasy-client/deployment/src/test/java/io/quarkus/restclient/configuration/AbstractRestClientsTest.java",
      "extensions/resteasy-classic/resteasy-client/deployment/src/test/java/io/quarkus/restclient/configuration/MPRestClientsTest.java",
      "extensions/resteasy-classic/resteasy-client/deployment/src/test/java/io/quarkus/restclient/configuration/QuarkusRestClientsTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractNonAbsentSerializationTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractNonEmptySerializationTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractSimpleJsonTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/NonAbsentReflectionFreeSerializationTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/NonAbsentSerializationTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/NonEmptyReflectionFreeSerializationTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/NonEmptySerializationTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonWithReflectionFreeSerializersTest.java",
      "extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/AbstractPermissionCheckerRestMultiTest.java",
      "independent-projects/bootstrap/bom-test/pom.xml",
      "independent-projects/junit5-virtual-threads/src/test/java/io/quarkus/test/junit5/virtual/internal/VirtualThreadExtensionTest.java",
      "integration-tests/oidc-wiremock/src/main/resources/application.properties"
    ],
    "base_commit": "397237e6c92156340bf8bb9fb18c916b7152f4bd",
    "head_commit": "85ce4f5dac6264fb681670dc5a16c316e911a649",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46871",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46871",
    "dockerfile": "",
    "pr_merged_at": "2025-04-04T16:18:39.000Z",
    "patch": "diff --git a/bom/application/pom.xml b/bom/application/pom.xml\nindex c6542f35145ff..1d3d4dd32c572 100644\n--- a/bom/application/pom.xml\n+++ b/bom/application/pom.xml\n@@ -128,7 +128,7 @@\n         <db2-jdbc.version>12.1.0.0</db2-jdbc.version>\n         <shrinkwrap.version>1.2.6</shrinkwrap.version>\n         <hamcrest.version>2.2</hamcrest.version><!-- The version needs to be compatible with both REST Assured and Awaitility -->\n-        <junit.jupiter.version>5.10.5</junit.jupiter.version>\n+        <junit.jupiter.version>5.12.1</junit.jupiter.version>\n         <infinispan.version>15.0.14.Final</infinispan.version>\n         <infinispan.protostream.version>5.0.13.Final</infinispan.protostream.version>\n         <caffeine.version>3.2.0</caffeine.version>\n@@ -174,7 +174,7 @@\n         <quarkus-spring-data-api.version>3.4</quarkus-spring-data-api.version>\n         <quarkus-spring-security-api.version>6.4</quarkus-spring-security-api.version>\n         <quarkus-spring-boot-api.version>3.4</quarkus-spring-boot-api.version>\n-        <mockito.version>5.12.0</mockito.version>\n+        <mockito.version>5.16.1</mockito.version>\n         <jna.version>5.8.0</jna.version><!-- should satisfy both testcontainers and mongodb -->\n         <quarkus-security.version>2.2.1</quarkus-security.version>\n         <keycloak-client.version>26.0.4</keycloak-client.version>\n\ndiff --git a/devtools/gradle/gradle/libs.versions.toml b/devtools/gradle/gradle/libs.versions.toml\nindex b5b8de7aa1615..10ed3dc1e6e5a 100644\n--- a/devtools/gradle/gradle/libs.versions.toml\n+++ b/devtools/gradle/gradle/libs.versions.toml\n@@ -5,7 +5,7 @@ plugin-publish = \"1.3.1\"\n kotlin = \"2.0.21\"\n smallrye-config = \"3.12.4\"\n \n-junit5 = \"5.10.5\"\n+junit5 = \"5.12.1\"\n assertj = \"3.27.3\"\n \n [plugins]\n\ndiff --git a/extensions/devservices/oidc/src/main/java/io/quarkus/devservices/oidc/OidcDevServicesProcessor.java b/extensions/devservices/oidc/src/main/java/io/quarkus/devservices/oidc/OidcDevServicesProcessor.java\nindex 1e03ae0158540..f9633a3507517 100644\n--- a/extensions/devservices/oidc/src/main/java/io/quarkus/devservices/oidc/OidcDevServicesProcessor.java\n+++ b/extensions/devservices/oidc/src/main/java/io/quarkus/devservices/oidc/OidcDevServicesProcessor.java\n@@ -145,10 +145,6 @@ private static boolean shouldNotStartServer(OidcDevServicesConfig devServicesCon\n             LOG.debug(\"Not starting Dev Services for OIDC as it has been disabled in the config\");\n             return true;\n         }\n-        if (devServicesConfig.enabled().isEmpty() && dockerStatusBuildItem.isContainerRuntimeAvailable()) {\n-            LOG.debug(\"Not starting Dev Services for OIDC as detected support the container functionality\");\n-            return true;\n-        }\n         if (!isOidcEnabled()) {\n             LOG.debug(\"Not starting Dev Services for OIDC as OIDC extension has been disabled in the config\");\n             return true;\n@@ -165,6 +161,11 @@ private static boolean shouldNotStartServer(OidcDevServicesConfig devServicesCon\n             LOG.debug(\"Not starting Dev Services for OIDC as 'quarkus.oidc.provider' has been provided\");\n             return true;\n         }\n+        if (devServicesConfig.enabled().isEmpty() && dockerStatusBuildItem.isContainerRuntimeAvailable()) {\n+            LOG.debug(\n+                    \"Not starting Dev Services for OIDC as a container runtime is available and a Keycloak Dev Services will be started\");\n+            return true;\n+        }\n         return false;\n     }\n \n\ndiff --git a/independent-projects/arc/pom.xml b/independent-projects/arc/pom.xml\nindex 6daea8be67052..3c46d1a82262b 100644\n--- a/independent-projects/arc/pom.xml\n+++ b/independent-projects/arc/pom.xml\n@@ -52,7 +52,7 @@\n         <version.smallrye-common>2.11.0</version.smallrye-common>\n         <!-- test versions -->\n         <version.assertj>3.27.3</version.assertj>\n-        <version.junit5>5.10.5</version.junit5>\n+        <version.junit5>5.12.1</version.junit5>\n         <version.kotlin>2.1.20</version.kotlin>\n         <version.kotlin-coroutines>1.10.1</version.kotlin-coroutines>\n         <version.mockito>5.16.1</version.mockito>\n\ndiff --git a/independent-projects/bootstrap/pom.xml b/independent-projects/bootstrap/pom.xml\nindex 0d992f25decbf..bbf7e6f8976a5 100644\n--- a/independent-projects/bootstrap/pom.xml\n+++ b/independent-projects/bootstrap/pom.xml\n@@ -41,7 +41,7 @@\n         <assertj.version>3.27.3</assertj.version>\n         <eclipse-minimal-json.version>0.9.5</eclipse-minimal-json.version>\n         <jboss-logging.version>3.6.1.Final</jboss-logging.version>\n-        <junit.jupiter.version>5.10.5</junit.jupiter.version>\n+        <junit5.version>5.12.1</junit5.version>\n         <maven-core.version>3.9.9</maven-core.version><!-- Keep in sync with sisu.version -->\n         <sisu.version>0.9.0.M3</sisu.version><!-- Keep in sync with maven-core.version -->\n         <maven-plugin-annotations.version>3.13.1</maven-plugin-annotations.version>\n\ndiff --git a/independent-projects/extension-maven-plugin/pom.xml b/independent-projects/extension-maven-plugin/pom.xml\nindex 1ea56abbc597c..11518a1dc17a0 100644\n--- a/independent-projects/extension-maven-plugin/pom.xml\n+++ b/independent-projects/extension-maven-plugin/pom.xml\n@@ -40,7 +40,7 @@\n         <maven-core.version>3.9.9</maven-core.version>\n         <jackson-bom.version>2.18.3</jackson-bom.version>\n         <smallrye-beanbag.version>1.5.2</smallrye-beanbag.version>\n-        <junit.jupiter.version>5.10.5</junit.jupiter.version>\n+        <junit5.version>5.12.1</junit5.version>\n     </properties>\n     <build>\n         <testResources>\n@@ -203,6 +203,14 @@\n                 <scope>import</scope>\n                 <type>pom</type>\n             </dependency>\n+            <!-- JUnit 5 dependencies, imported as a BOM -->\n+            <dependency>\n+                <groupId>org.junit</groupId>\n+                <artifactId>junit-bom</artifactId>\n+                <version>${junit5.version}</version>\n+                <scope>import</scope>\n+                <type>pom</type>\n+            </dependency>\n         </dependencies>\n     </dependencyManagement>\n \n@@ -340,7 +348,6 @@\n         <dependency>\n             <groupId>org.junit.jupiter</groupId>\n             <artifactId>junit-jupiter</artifactId>\n-            <version>${junit.jupiter.version}</version>\n             <scope>test</scope>\n         </dependency>\n         <dependency>\n@@ -365,7 +372,7 @@\n         <dependency>\n             <groupId>uk.org.webcompere</groupId>\n             <artifactId>system-stubs-jupiter</artifactId>\n-            <version>2.0.1</version>\n+            <version>2.1.7</version>\n             <scope>test</scope>\n         </dependency>\n         <dependency>\n\ndiff --git a/independent-projects/junit5-virtual-threads/pom.xml b/independent-projects/junit5-virtual-threads/pom.xml\nindex ac7e78697299d..eb594440e342e 100644\n--- a/independent-projects/junit5-virtual-threads/pom.xml\n+++ b/independent-projects/junit5-virtual-threads/pom.xml\n@@ -43,18 +43,29 @@\n         <surefire.plugin.version>3.5.2</surefire.plugin.version>\n         <jandex.version>3.2.7</jandex.version>\n \n-        <junit.jupiter.version>5.10.5</junit.jupiter.version>\n+        <junit5.version>5.12.1</junit5.version>\n         <junit.testkit.version>1.10.3</junit.testkit.version>\n         <assertj.version>3.27.3</assertj.version>\n     </properties>\n \n+    <dependencyManagement>\n+        <dependencies>\n+            <!-- JUnit 5 dependencies, imported as a BOM -->\n+            <dependency>\n+                <groupId>org.junit</groupId>\n+                <artifactId>junit-bom</artifactId>\n+                <version>${junit5.version}</version>\n+                <scope>import</scope>\n+                <type>pom</type>\n+            </dependency>\n+        </dependencies>\n+    </dependencyManagement>\n \n     <dependencies>\n         <dependency>\n             <groupId>org.junit.jupiter</groupId>\n             <artifactId>junit-jupiter</artifactId>\n             <scope>compile</scope>\n-            <version>${junit.jupiter.version}</version>\n         </dependency>\n         <dependency>\n             <groupId>org.junit.platform</groupId>\n\ndiff --git a/independent-projects/qute/pom.xml b/independent-projects/qute/pom.xml\nindex 5c82fc8cbd548..5de256da0db6f 100644\n--- a/independent-projects/qute/pom.xml\n+++ b/independent-projects/qute/pom.xml\n@@ -38,7 +38,7 @@\n \n     <properties>\n         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n-        <version.junit>5.10.5</version.junit>\n+        <version.junit>5.12.1</version.junit>\n         <version.assertj>3.27.3</version.assertj>\n         <version.jandex>3.2.7</version.jandex>\n         <version.gizmo>1.9.0</version.gizmo>\n\ndiff --git a/independent-projects/resteasy-reactive/pom.xml b/independent-projects/resteasy-reactive/pom.xml\nindex cbac7ccc9d551..4e135926cc8a3 100644\n--- a/independent-projects/resteasy-reactive/pom.xml\n+++ b/independent-projects/resteasy-reactive/pom.xml\n@@ -47,7 +47,7 @@\n         <jakarta.enterprise.cdi-api.version>4.1.0</jakarta.enterprise.cdi-api.version>\n         <jandex.version>3.2.7</jandex.version>\n         <bytebuddy.version>1.15.11</bytebuddy.version>\n-        <junit5.version>5.10.5</junit5.version>\n+        <junit5.version>5.12.1</junit5.version>\n         <maven.version>3.9.9</maven.version>\n         <assertj.version>3.27.3</assertj.version>\n         <jboss-logging.version>3.6.1.Final</jboss-logging.version>\n@@ -69,7 +69,7 @@\n         <awaitility.version>4.3.0</awaitility.version>\n         <smallrye-mutiny-vertx-core.version>3.18.1</smallrye-mutiny-vertx-core.version>\n         <reactive-streams.version>1.0.4</reactive-streams.version>\n-        <mockito.version>5.12.0</mockito.version>\n+        <mockito.version>5.16.1</mockito.version>\n         <wiremock.version>3.12.1</wiremock.version>\n         <mutiny-zero.version>1.1.1</mutiny-zero.version>\n \n\ndiff --git a/independent-projects/tools/pom.xml b/independent-projects/tools/pom.xml\nindex 105317cc6e179..f421a92ecb766 100644\n--- a/independent-projects/tools/pom.xml\n+++ b/independent-projects/tools/pom.xml\n@@ -51,10 +51,10 @@\n         <assertj.version>3.27.3</assertj.version>\n         <jackson-bom.version>2.18.3</jackson-bom.version>\n         <jakarta.enterprise.cdi-api.version>4.1.0</jakarta.enterprise.cdi-api.version>\n-        <junit.version>5.10.5</junit.version>\n+        <junit5.version>5.12.1</junit5.version>\n         <commons-compress.version>1.27.1</commons-compress.version>\n         <jboss-logging.version>3.6.1.Final</jboss-logging.version>\n-        <mockito.version>5.12.0</mockito.version>\n+        <mockito.version>5.16.1</mockito.version>\n         <quarkus.version>${project.version}</quarkus.version>\n         <maven-model-helper.version>37</maven-model-helper.version>\n         <jandex.version>3.2.7</jandex.version>\n@@ -100,6 +100,15 @@\n                 <scope>import</scope>\n             </dependency>\n \n+            <!-- JUnit 5 dependencies, imported as a BOM -->\n+            <dependency>\n+                <groupId>org.junit</groupId>\n+                <artifactId>junit-bom</artifactId>\n+                <version>${junit5.version}</version>\n+                <scope>import</scope>\n+                <type>pom</type>\n+            </dependency>\n+\n             <dependency>\n                 <groupId>io.quarkus</groupId>\n                 <artifactId>quarkus-devtools-base-codestarts</artifactId>\n@@ -181,12 +190,6 @@\n                 <artifactId>java-properties</artifactId>\n                 <version>${java-properties.version}</version>\n             </dependency>\n-            <dependency>\n-                <groupId>org.junit.jupiter</groupId>\n-                <artifactId>junit-jupiter</artifactId>\n-                <version>${junit.version}</version>\n-                <scope>test</scope>\n-            </dependency>\n             <dependency>\n                 <groupId>io.quarkus</groupId>\n                 <artifactId>quarkus-bootstrap-core</artifactId>\n\ndiff --git a/tcks/resteasy-reactive/pom.xml b/tcks/resteasy-reactive/pom.xml\nindex 6a5ca020299c3..5114077a995db 100644\n--- a/tcks/resteasy-reactive/pom.xml\n+++ b/tcks/resteasy-reactive/pom.xml\n@@ -17,7 +17,7 @@\n     <properties>\n \n         <!-- to avoid sudden surprises, checkout is pinned to a specific commit -->\n-        <resteasy-reactive-testsuite.repo.ref>2b263617d93e3f161bf092bb6425405e9d3c01d0</resteasy-reactive-testsuite.repo.ref>\n+        <resteasy-reactive-testsuite.repo.ref>7aabd9b98f8fdb1f3ee634f7594bd224ea159a34</resteasy-reactive-testsuite.repo.ref>\n \n         <exec.skip>${skipTests}</exec.skip>\n         <resteasy-reactive-testsuite.clone.skip>${exec.skip}</resteasy-reactive-testsuite.clone.skip>\n",
    "test_patch": "diff --git a/extensions/resteasy-classic/resteasy-client/deployment/src/test/java/io/quarkus/restclient/configuration/AbstractRestClientsTest.java b/extensions/resteasy-classic/resteasy-client/deployment/src/test/java/io/quarkus/restclient/configuration/AbstractRestClientsTest.java\nnew file mode 100644\nindex 0000000000000..7c8f434518c18\n--- /dev/null\n+++ b/extensions/resteasy-classic/resteasy-client/deployment/src/test/java/io/quarkus/restclient/configuration/AbstractRestClientsTest.java\n@@ -0,0 +1,53 @@\n+package io.quarkus.restclient.configuration;\n+\n+import java.util.Set;\n+\n+import jakarta.enterprise.inject.spi.Bean;\n+import jakarta.enterprise.inject.spi.BeanManager;\n+import jakarta.inject.Singleton;\n+\n+import org.eclipse.microprofile.rest.client.inject.RestClient;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.arc.Arc;\n+\n+/**\n+ * Tests clients configured with MicroProfile-style configuration.\n+ */\n+abstract class AbstractRestClientsTest {\n+\n+    @RestClient\n+    EchoClientWithConfigKey clientWithConfigKey;\n+\n+    @RestClient\n+    EchoClient fullClassNameClient;\n+\n+    @Test\n+    public void clientWithConfigKeyShouldConnect() {\n+        Assertions.assertEquals(\"Hello\", clientWithConfigKey.echo(\"Hello\"));\n+    }\n+\n+    @Test\n+    void clientWithConfigShouldHaveSingletonScope() {\n+        verifyClientScope(EchoClientWithConfigKey.class, Singleton.class);\n+    }\n+\n+    @Test\n+    public void fullClassNameClientShouldConnect() {\n+        Assertions.assertEquals(\"Hello\", fullClassNameClient.echo(\"Hello\"));\n+    }\n+\n+    @Test\n+    void fullClassNameClientShouldHaveSingletonScope() {\n+        verifyClientScope(EchoClient.class, Singleton.class);\n+    }\n+\n+    static void verifyClientScope(Class clientInterface, Class expectedScope) {\n+        BeanManager beanManager = Arc.container().beanManager();\n+        Set<Bean<?>> beans = beanManager.getBeans(clientInterface, RestClient.LITERAL);\n+        Bean<?> resolvedBean = beanManager.resolve(beans);\n+        Assertions.assertEquals(expectedScope, resolvedBean.getScope());\n+    }\n+\n+}\n\ndiff --git a/extensions/resteasy-classic/resteasy-client/deployment/src/test/java/io/quarkus/restclient/configuration/MPRestClientsTest.java b/extensions/resteasy-classic/resteasy-client/deployment/src/test/java/io/quarkus/restclient/configuration/MPRestClientsTest.java\nindex fd3dc57f49cbb..2c4e39bffc88c 100644\n--- a/extensions/resteasy-classic/resteasy-client/deployment/src/test/java/io/quarkus/restclient/configuration/MPRestClientsTest.java\n+++ b/extensions/resteasy-classic/resteasy-client/deployment/src/test/java/io/quarkus/restclient/configuration/MPRestClientsTest.java\n@@ -1,23 +1,13 @@\n package io.quarkus.restclient.configuration;\n \n-import java.util.Set;\n-\n-import jakarta.enterprise.inject.spi.Bean;\n-import jakarta.enterprise.inject.spi.BeanManager;\n-import jakarta.inject.Singleton;\n-\n-import org.eclipse.microprofile.rest.client.inject.RestClient;\n-import org.junit.jupiter.api.Assertions;\n-import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.RegisterExtension;\n \n-import io.quarkus.arc.Arc;\n import io.quarkus.test.QuarkusUnitTest;\n \n /**\n  * Tests clients configured with MicroProfile-style configuration.\n  */\n-public class MPRestClientsTest {\n+public class MPRestClientsTest extends AbstractRestClientsTest {\n \n     @RegisterExtension\n     static final QuarkusUnitTest config = new QuarkusUnitTest()\n@@ -25,38 +15,4 @@ public class MPRestClientsTest {\n                     .addClasses(EchoResource.class,\n                             EchoClient.class, EchoClientWithConfigKey.class, ShortNameEchoClient.class))\n             .withConfigurationResource(\"mp-restclients-test-application.properties\");\n-\n-    @RestClient\n-    EchoClientWithConfigKey clientWithConfigKey;\n-\n-    @RestClient\n-    EchoClient fullClassNameClient;\n-\n-    @Test\n-    public void clientWithConfigKeyShouldConnect() {\n-        Assertions.assertEquals(\"Hello\", clientWithConfigKey.echo(\"Hello\"));\n-    }\n-\n-    @Test\n-    void clientWithConfigShouldHaveSingletonScope() {\n-        verifyClientScope(EchoClientWithConfigKey.class, Singleton.class);\n-    }\n-\n-    @Test\n-    public void fullClassNameClientShouldConnect() {\n-        Assertions.assertEquals(\"Hello\", fullClassNameClient.echo(\"Hello\"));\n-    }\n-\n-    @Test\n-    void fullClassNameClientShouldHaveSingletonScope() {\n-        verifyClientScope(EchoClient.class, Singleton.class);\n-    }\n-\n-    static void verifyClientScope(Class clientInterface, Class expectedScope) {\n-        BeanManager beanManager = Arc.container().beanManager();\n-        Set<Bean<?>> beans = beanManager.getBeans(clientInterface, RestClient.LITERAL);\n-        Bean<?> resolvedBean = beanManager.resolve(beans);\n-        Assertions.assertEquals(expectedScope, resolvedBean.getScope());\n-    }\n-\n }\n\ndiff --git a/extensions/resteasy-classic/resteasy-client/deployment/src/test/java/io/quarkus/restclient/configuration/QuarkusRestClientsTest.java b/extensions/resteasy-classic/resteasy-client/deployment/src/test/java/io/quarkus/restclient/configuration/QuarkusRestClientsTest.java\nindex 676e6d95ed01b..0fd1f79775c42 100644\n--- a/extensions/resteasy-classic/resteasy-client/deployment/src/test/java/io/quarkus/restclient/configuration/QuarkusRestClientsTest.java\n+++ b/extensions/resteasy-classic/resteasy-client/deployment/src/test/java/io/quarkus/restclient/configuration/QuarkusRestClientsTest.java\n@@ -12,7 +12,7 @@\n /**\n  * Tests clients configured with Quarkus-style configuration.\n  */\n-public class QuarkusRestClientsTest extends MPRestClientsTest {\n+public class QuarkusRestClientsTest extends AbstractRestClientsTest {\n \n     @RegisterExtension\n     static final QuarkusUnitTest config = new QuarkusUnitTest()\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractNonAbsentSerializationTest.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractNonAbsentSerializationTest.java\nnew file mode 100644\nindex 0000000000000..cab0f2ae93cd5\n--- /dev/null\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractNonAbsentSerializationTest.java\n@@ -0,0 +1,52 @@\n+package io.quarkus.resteasy.reactive.jackson.deployment.test;\n+\n+import jakarta.inject.Singleton;\n+\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import io.quarkus.jackson.ObjectMapperCustomizer;\n+import io.restassured.RestAssured;\n+\n+public abstract class AbstractNonAbsentSerializationTest {\n+\n+    @Singleton\n+    public static class NonAbsentObjectMapperCustomizer implements ObjectMapperCustomizer {\n+\n+        @Override\n+        public void customize(ObjectMapper objectMapper) {\n+            objectMapper\n+                    .enable(DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES)\n+                    .disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n+                    .setSerializationInclusion(JsonInclude.Include.NON_ABSENT);\n+        }\n+    }\n+\n+    @Test\n+    public void testObject() {\n+        RestAssured.get(\"/json-include/my-object\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .body(\"name\", Matchers.equalTo(\"name\"))\n+                .body(\"description\", Matchers.equalTo(\"description\"))\n+                .body(\"map.test\", Matchers.equalTo(1))\n+                .body(\"strings[0]\", Matchers.equalTo(\"test\"));\n+    }\n+\n+    @Test\n+    public void testEmptyObject() {\n+        RestAssured.get(\"/json-include/my-object-empty\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .body(\"name\", Matchers.nullValue())\n+                .body(\"description\", Matchers.nullValue())\n+                .body(\"map\", Matchers.anEmptyMap())\n+                .body(\"strings\", Matchers.hasSize(0));\n+    }\n+}\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractNonEmptySerializationTest.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractNonEmptySerializationTest.java\nnew file mode 100644\nindex 0000000000000..479c7354d86b9\n--- /dev/null\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractNonEmptySerializationTest.java\n@@ -0,0 +1,49 @@\n+package io.quarkus.resteasy.reactive.jackson.deployment.test;\n+\n+import jakarta.inject.Singleton;\n+\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import io.quarkus.jackson.ObjectMapperCustomizer;\n+import io.restassured.RestAssured;\n+\n+public abstract class AbstractNonEmptySerializationTest {\n+\n+    @Singleton\n+    public static class NonEmptyObjectMapperCustomizer implements ObjectMapperCustomizer {\n+\n+        @Override\n+        public void customize(ObjectMapper objectMapper) {\n+            objectMapper\n+                    .enable(DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES)\n+                    .disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n+                    .setSerializationInclusion(JsonInclude.Include.NON_EMPTY);\n+        }\n+    }\n+\n+    @Test\n+    public void testObject() {\n+        RestAssured.get(\"/json-include/my-object\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .body(\"name\", Matchers.equalTo(\"name\"))\n+                .body(\"description\", Matchers.equalTo(\"description\"))\n+                .body(\"map.test\", Matchers.equalTo(1))\n+                .body(\"strings[0]\", Matchers.equalTo(\"test\"));\n+    }\n+\n+    @Test\n+    public void testEmptyObject() {\n+        RestAssured.get(\"/json-include/my-object-empty\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .body(Matchers.is(\"{}\"));\n+    }\n+}\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractSimpleJsonTest.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractSimpleJsonTest.java\nnew file mode 100644\nindex 0000000000000..ef93d7509a1c4\n--- /dev/null\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractSimpleJsonTest.java\n@@ -0,0 +1,810 @@\n+package io.quarkus.resteasy.reactive.jackson.deployment.test;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.emptyOrNullString;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.security.test.utils.TestIdentityController;\n+import io.restassured.RestAssured;\n+\n+public abstract class AbstractSimpleJsonTest {\n+\n+    @Test\n+    public void testJson() {\n+        doTestGetPersonNoSecurity(\"/simple\", \"/person\");\n+\n+        RestAssured\n+                .with()\n+                .body(\"{\\\"first\\\": \\\"Bob\\\", \\\"last\\\": \\\"Builder\\\"}\")\n+                .contentType(\"application/json; charset=utf-8\")\n+                .post(\"/simple/person\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .header(\"content-length\", notNullValue())\n+                .header(\"transfer-encoding\", nullValue())\n+                .body(\"first\", Matchers.equalTo(\"Bob\")).body(\"last\", Matchers.equalTo(\"Builder\"));\n+\n+        RestAssured\n+                .with()\n+                .body(\"{\\\"first\\\": \\\"Bob\\\", \\\"last\\\": \\\"Builder\\\"}\")\n+                .contentType(\"application/vnd.quarkus.person-v1+json\")\n+                .post(\"/simple/person-custom-mt\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/vnd.quarkus.person-v1+json\")\n+                .body(\"first\", Matchers.equalTo(\"Bob\")).body(\"last\", Matchers.equalTo(\"Builder\"));\n+\n+        RestAssured\n+                .with()\n+                .body(\"{\\\"first\\\": \\\"Bob\\\", \\\"last\\\": \\\"Builder\\\"}\")\n+                .contentType(\"application/vnd.quarkus.person-v1+json\")\n+                .post(\"/simple/person-custom-mt-response\")\n+                .then()\n+                .statusCode(201)\n+                .contentType(\"application/vnd.quarkus.person-v1+json\")\n+                .body(\"first\", Matchers.equalTo(\"Bob\")).body(\"last\", Matchers.equalTo(\"Builder\"));\n+\n+        RestAssured\n+                .with()\n+                .body(\"{\\\"first\\\": \\\"Bob\\\", \\\"last\\\": \\\"Builder\\\"}\")\n+                .contentType(\"application/vnd.quarkus.person-v1+json\")\n+                .post(\"/simple/person-custom-mt-response-with-type\")\n+                .then()\n+                .statusCode(201)\n+                .contentType(\"application/vnd.quarkus.other-v1+json\")\n+                .body(\"first\", Matchers.equalTo(\"Bob\")).body(\"last\", Matchers.equalTo(\"Builder\"));\n+\n+        RestAssured\n+                .with()\n+                .body(\"[{\\\"first\\\": \\\"Bob\\\", \\\"last\\\": \\\"Builder\\\"}, {\\\"first\\\": \\\"Bob2\\\", \\\"last\\\": \\\"Builder2\\\"}]\")\n+                .contentType(\"application/json; charset=utf-8\")\n+                .post(\"/simple/people\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .body(\"[1].first\", Matchers.equalTo(\"Bob\"))\n+                .body(\"[1].last\", Matchers.equalTo(\"Builder\"))\n+                .body(\"[0].first\", Matchers.equalTo(\"Bob2\"))\n+                .body(\"[0].last\", Matchers.equalTo(\"Builder2\"));\n+\n+        RestAssured.with()\n+                .body(\"[\\\"first\\\", \\\"second\\\"]\")\n+                .contentType(\"application/json; charset=utf-8\")\n+                .post(\"/simple/strings\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .body(\"[0]\", Matchers.equalTo(\"first\"))\n+                .body(\"[1]\", Matchers.equalTo(\"second\"));\n+\n+        RestAssured\n+                .with()\n+                .body(\"[{\\\"first\\\": \\\"Bob\\\", \\\"last\\\": \\\"Builder\\\"}, {\\\"first\\\": \\\"Bob2\\\", \\\"last\\\": \\\"Builder2\\\"}]\")\n+                .contentType(\"application/json; charset=utf-8\")\n+                .post(\"/simple/super\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .body(\"[1].first\", Matchers.equalTo(\"Bob\"))\n+                .body(\"[1].last\", Matchers.equalTo(\"Builder\"))\n+                .body(\"[0].first\", Matchers.equalTo(\"Bob2\"))\n+                .body(\"[0].last\", Matchers.equalTo(\"Builder2\"));\n+    }\n+\n+    private void doTestGetPersonNoSecurity(final String basePath, String path) {\n+        RestAssured.get(basePath + path)\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .header(\"transfer-encoding\", nullValue())\n+                .header(\"content-length\", notNullValue())\n+                .body(\"first\", Matchers.equalTo(\"Bob\"))\n+                .body(\"last\", Matchers.equalTo(\"Builder\"));\n+    }\n+\n+    @Test\n+    public void testLargeJsonPost() {\n+        StringBuilder sb = new StringBuilder();\n+        for (int i = 0; i < 10000; ++i) {\n+            sb.append(\"abc\");\n+        }\n+        String longString = sb.toString();\n+        RestAssured\n+                .with()\n+                .body(\"{\\\"first\\\": \\\"\" + longString + \"\\\", \\\"last\\\": \\\"\" + longString + \"\\\"}\")\n+                .contentType(\"application/json; charset=utf-8\")\n+                .post(\"/simple/person-large\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .body(\"first\", Matchers.equalTo(longString)).body(\"last\", Matchers.equalTo(longString));\n+    }\n+\n+    @Test\n+    public void testValidatedJson() {\n+        String postBody = \"{\\\"first\\\": \\\"Bob\\\", \\\"last\\\": \\\"Builder\\\"}\";\n+        RestAssured\n+                .with()\n+                .body(postBody)\n+                .accept(\"application/json\")\n+                .contentType(\"application/json\")\n+                .post(\"/simple/person-validated\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .body(\"first\", Matchers.equalTo(\"Bob\")).body(\"last\", Matchers.equalTo(\"Builder\"));\n+\n+        RestAssured\n+                .with()\n+                .body(postBody)\n+                .accept(\"application/json\")\n+                .contentType(\"application/json\")\n+                .post(\"/simple/person-invalid-result\")\n+                .then()\n+                .statusCode(500)\n+                .contentType(\"application/json\");\n+\n+        RestAssured\n+                .with()\n+                .body(\"{\\\"first\\\": \\\"Bob\\\"}\")\n+                .accept(\"application/json\")\n+                .contentType(\"application/json\")\n+                .post(\"/simple/person-validated\")\n+                .then()\n+                .statusCode(400)\n+                .contentType(\"application/json\");\n+    }\n+\n+    @Test\n+    public void testAsyncJson() {\n+        RestAssured.get(\"/simple/async-person\")\n+                .then().body(\"first\", Matchers.equalTo(\"Bob\")).body(\"last\", Matchers.equalTo(\"Builder\"));\n+    }\n+\n+    // when there is no view defined, Jackson will serialize all fields\n+    @Test\n+    public void testUserWithoutView() {\n+        RestAssured.get(\"/simple/user-without-view\")\n+                .then().body(containsString(\"1\"), containsString(\"test\"));\n+    }\n+\n+    @Test\n+    public void testUserWithPublicView() {\n+        RestAssured.get(\"/simple/user-with-public-view\")\n+                .then().body(not(containsString(\"1\")), containsString(\"test\"));\n+    }\n+\n+    @Test\n+    public void testUserWithPrivateView() {\n+        RestAssured.get(\"/simple/user-with-private-view\")\n+                .then().body(containsString(\"1\"), containsString(\"test\"));\n+    }\n+\n+    @Test\n+    public void testPerClassExceptionMapper() {\n+        RestAssured\n+                .with()\n+                .body(\"{\\\"first\\\": Bob, \\\"last\\\": \\\"Builder\\\"}\")\n+                .contentType(\"application/json; charset=utf-8\")\n+                .post(\"/simple/person\")\n+                .then()\n+                .statusCode(400)\n+                .contentType(\"application/json\")\n+                .body(containsString(\"Unrecognized token 'Bob'\"));\n+    }\n+\n+    @Test\n+    public void testJsonMulti() {\n+        RestAssured\n+                .with()\n+                .get(\"/simple/multi2\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .body(\"[0].first\", Matchers.equalTo(\"Bob\"))\n+                .body(\"[0].last\", Matchers.equalTo(\"Builder\"))\n+                .body(\"[1].first\", Matchers.equalTo(\"Bob2\"))\n+                .body(\"[1].last\", Matchers.equalTo(\"Builder2\"));\n+        RestAssured\n+                .with()\n+                .get(\"/simple/multi1\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .body(\"[0].first\", Matchers.equalTo(\"Bob\"))\n+                .body(\"[0].last\", Matchers.equalTo(\"Builder\"));\n+        RestAssured\n+                .with()\n+                .get(\"/simple/multi0\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .body(Matchers.equalTo(\"[]\"));\n+    }\n+\n+    @Test\n+    public void testCustomSerialization() {\n+        assertEquals(0, SimpleJsonResource.UnquotedFieldsPersonSerialization.count.intValue());\n+\n+        // assert that we get a proper response\n+        // we can't use json-path to assert because the returned string is not proper json as it does not have quotes around the field names\n+        RestAssured.get(\"/simple/custom-serialized-person\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .header(\"transfer-encoding\", nullValue())\n+                .header(\"content-length\", notNullValue())\n+                .body(containsString(\"Bob\"))\n+                .body(containsString(\"Builder\"));\n+        // assert that our bi-function was created\n+        assertEquals(1, SimpleJsonResource.UnquotedFieldsPersonSerialization.count.intValue());\n+\n+        // assert with a list of people\n+        RestAssured\n+                .with()\n+                .body(\"[{\\\"first\\\": \\\"Bob\\\", \\\"last\\\": \\\"Builder\\\"}, {\\\"first\\\": \\\"Bob2\\\", \\\"last\\\": \\\"Builder2\\\"}]\")\n+                .contentType(\"application/json; charset=utf-8\")\n+                .post(\"/simple/custom-serialized-people\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .header(\"transfer-encoding\", nullValue())\n+                .header(\"content-length\", notNullValue())\n+                .body(containsString(\"Bob\"))\n+                .body(containsString(\"Builder\"))\n+                .body(containsString(\"Bob2\"))\n+                .body(containsString(\"Builder2\"));\n+        // assert that another instance of our bi-function was created as a different resource method was used\n+        assertEquals(2, SimpleJsonResource.UnquotedFieldsPersonSerialization.count.intValue());\n+\n+        RestAssured.get(\"/simple/custom-serialized-person\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\");\n+        RestAssured\n+                .with()\n+                .body(\"[{\\\"first\\\": \\\"Bob\\\", \\\"last\\\": \\\"Builder\\\"}, {\\\"first\\\": \\\"Bob2\\\", \\\"last\\\": \\\"Builder2\\\"}]\")\n+                .contentType(\"application/json; charset=utf-8\")\n+                .post(\"/simple/custom-serialized-people\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\");\n+        // assert that the instances were re-used as we simply invoked methods that should have already created their object writers\n+        assertEquals(2, SimpleJsonResource.UnquotedFieldsPersonSerialization.count.intValue());\n+\n+        RestAssured.get(\"/simple/invalid-use-of-custom-serializer\")\n+                .then()\n+                .statusCode(500);\n+        // a new instance should have been created\n+        assertEquals(3, SimpleJsonResource.UnquotedFieldsPersonSerialization.count.intValue());\n+    }\n+\n+    @Test\n+    public void testCustomDeserialization() {\n+        int currentCounter = SimpleJsonResource.UnquotedFieldsPersonDeserialization.count.intValue();\n+\n+        // assert that the reader support the unquoted fields (because we have used a custom object reader\n+        // via `@CustomDeserialization`\n+        Person actual = RestAssured.given()\n+                .body(\"{first: \\\"Hello\\\", last: \\\"Deserialization\\\"}\")\n+                .contentType(\"application/json; charset=utf-8\")\n+                .post(\"/simple/custom-deserialized-person\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .header(\"transfer-encoding\", nullValue())\n+                .header(\"content-length\", notNullValue())\n+                .extract().as(Person.class);\n+        assertEquals(\"Hello\", actual.getFirst());\n+        assertEquals(\"Deserialization\", actual.getLast());\n+        assertEquals(currentCounter + 1, SimpleJsonResource.UnquotedFieldsPersonDeserialization.count.intValue());\n+\n+        // assert that the instances were re-used as we simply invoked methods that should have already created their object readers\n+        RestAssured.given()\n+                .body(\"{first: \\\"Hello\\\", last: \\\"Deserialization\\\"}\")\n+                .contentType(\"application/json; charset=utf-8\")\n+                .post(\"/simple/custom-deserialized-person\")\n+                .then()\n+                .statusCode(200);\n+        assertEquals(currentCounter + 1, SimpleJsonResource.UnquotedFieldsPersonDeserialization.count.intValue());\n+\n+        // assert with a list of people\n+        RestAssured\n+                .with()\n+                .body(\"[{first: \\\"Bob\\\", last: \\\"Builder\\\"}, {first: \\\"Bob2\\\", last: \\\"Builder2\\\"}]\")\n+                .contentType(\"application/json; charset=utf-8\")\n+                .post(\"/simple/custom-serialized-people\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .header(\"transfer-encoding\", nullValue())\n+                .header(\"content-length\", notNullValue())\n+                .body(containsString(\"Bob\"))\n+                .body(containsString(\"Builder\"))\n+                .body(containsString(\"Bob2\"))\n+                .body(containsString(\"Builder2\"));\n+    }\n+\n+    @Test\n+    public void testSecurityDisabledPerson() {\n+        doTestGetPersonNoSecurity(\"/other\", \"/no-security\");\n+    }\n+\n+    @Test\n+    public void testSecurePerson() {\n+        doTestSecurePerson(\"/simple\", \"/secure-person\");\n+    }\n+\n+    @Test\n+    public void testSecurePersonWithPrivateView() {\n+        doTestSecurePerson(\"/simple\", \"/secure-person-with-private-view\");\n+    }\n+\n+    @Test\n+    public void testSecurePersonWithPublicView() {\n+        doTestSecurePersonWithPublicView(\"/simple\", \"/secure-person-with-public-view\");\n+    }\n+\n+    @Test\n+    public void testUniSecurePersonWithPublicView() {\n+        doTestSecurePersonWithPublicView(\"/simple\", \"/uni-secure-person-with-public-view\");\n+    }\n+\n+    @Test\n+    public void testSecurePersonFromAbstract() {\n+        doTestSecurePerson(\"/other\", \"/abstract-with-security\");\n+    }\n+\n+    @Test\n+    public void testSecureUniPerson() {\n+        doTestSecurePerson(\"/simple\", \"/secure-uni-person\");\n+    }\n+\n+    @Test\n+    public void testSecureRestResponsePerson() {\n+        doTestSecurePerson(\"/simple\", \"/secure-rest-response-person\");\n+    }\n+\n+    @Test\n+    public void testSecureFieldRolesAllowedConfigExp() {\n+        TestIdentityController.resetRoles().add(\"max\", \"max\", \"admin\");\n+        RestAssured.given()\n+                .auth().preemptive().basic(\"max\", \"max\")\n+                .get(\"/simple/secure-person\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .header(\"transfer-encoding\", nullValue())\n+                .header(\"content-length\", notNullValue())\n+                .body(containsString(\"Bob\"))\n+                .body(containsString(\"0\"))\n+                .body(containsString(\"10 Downing St\"))\n+                .body(not(containsString(\"November 30, 1874\")))\n+                .body(containsString(\"Builder\"));\n+        TestIdentityController.resetRoles().add(\"max\", \"max\", \"user\");\n+        RestAssured.given()\n+                .auth().preemptive().basic(\"max\", \"max\")\n+                .get(\"/simple/secure-person\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .header(\"transfer-encoding\", nullValue())\n+                .header(\"content-length\", notNullValue())\n+                .body(containsString(\"Bob\"))\n+                .body(containsString(\"0\"))\n+                .body(containsString(\"10 Downing St\"))\n+                .body(not(containsString(\"November 30, 1874\")))\n+                .body(not(containsString(\"Builder\")));\n+        TestIdentityController.resetRoles().add(\"max\", \"max\", \"alice\");\n+        RestAssured.given()\n+                .auth().preemptive().basic(\"max\", \"max\")\n+                .get(\"/simple/secure-person\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .header(\"transfer-encoding\", nullValue())\n+                .header(\"content-length\", notNullValue())\n+                .body(containsString(\"Bob\"))\n+                .body(containsString(\"0\"))\n+                .body(not(containsString(\"10 Downing St\")))\n+                .body(containsString(\"November 30, 1874\"))\n+                .body(not(containsString(\"Builder\")));\n+    }\n+\n+    private void doTestSecurePerson(String basePath, final String path) {\n+        RestAssured.get(basePath + path)\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .header(\"transfer-encoding\", nullValue())\n+                .header(\"content-length\", notNullValue())\n+                .body(containsString(\"Bob\"))\n+                .body(containsString(\"0\"))\n+                .body(not(containsString(\"10 Downing St\")))\n+                .body(not(containsString(\"November 30, 1874\")))\n+                .body(not(containsString(\"Builder\")));\n+    }\n+\n+    private void doTestSecurePersonWithPublicView(String basePath, final String path) {\n+        RestAssured.get(basePath + path)\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .header(\"transfer-encoding\", nullValue())\n+                .header(\"content-length\", notNullValue())\n+                .body(containsString(\"Bob\"))\n+                .body(not(containsString(\"0\")))\n+                .body(not(containsString(\"10 Downing St\")))\n+                .body(not(containsString(\"November 30, 1874\")))\n+                .body(not(containsString(\"Builder\")));\n+    }\n+\n+    @Test\n+    public void testSecurePeople() {\n+        doTestSecurePeople(\"secure-people\");\n+    }\n+\n+    @Test\n+    public void testSecureUniPeople() {\n+        doTestSecurePeople(\"secure-uni-people\");\n+    }\n+\n+    private void doTestSecurePeople(final String path) {\n+        RestAssured.get(\"/simple/\" + path)\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .header(\"transfer-encoding\", nullValue())\n+                .header(\"content-length\", notNullValue())\n+                .body(containsString(\"Bob\"))\n+                .body(not(containsString(\"Builder\")));\n+    }\n+\n+    @Test\n+    public void testGenericInput() {\n+        RestAssured\n+                .with()\n+                .body(\"{\\\"content\\\": {\\\"name\\\":\\\"foo\\\", \\\"email\\\":\\\"bar\\\"}}\")\n+                .contentType(\"application/json; charset=utf-8\")\n+                .post(\"/simple/genericInput\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"text/plain\")\n+                .body(is(\"foo\"));\n+    }\n+\n+    @Test\n+    public void testInterface() {\n+        RestAssured\n+                .with()\n+                .get(\"/simple/interface\")\n+                .then()\n+                .statusCode(200)\n+                .body(\"nestedInterface.int\", Matchers.is(42))\n+                .body(\"nestedInterface.character\", Matchers.is(\"a\"))\n+                .body(\"nestedInterface.string\", Matchers.is(\"response\"));\n+    }\n+\n+    @Test\n+    public void testSecureFieldOnAbstractClass() {\n+        // implementor with / without @SecureField returned\n+        testSecuredFieldOnAbstractClass(\"cat\", \"dog\");\n+        // abstract class with @SecureField returned\n+        testSecuredFieldOnAbstractClass(\"abstract-named-cat\", \"abstract-named-dog\");\n+        // abstract class without @SecureField directly, but with secured field's field returned\n+        testSecuredFieldOnAbstractClass(\"abstract-cat\", \"abstract-dog\");\n+        // interface with implementors that have @SecureField\n+        testSecuredFieldOnAbstractClass(\"interface-cat\", \"interface-dog\");\n+    }\n+\n+    @Test\n+    public void testSecureFieldOnlyOnFieldOfReturnTypeField() {\n+        // returns class with @SecureField is only on field's field\n+        testSecuredFieldOnReturnTypeField(\"unsecured-pet\");\n+        // returns abstract class and only @SecureField is on implementor's field's field\n+        testSecuredFieldOnReturnTypeField(\"abstract-unsecured-pet\");\n+    }\n+\n+    @Test\n+    public void testSecureFieldOnCollectionTypeField() {\n+        TestIdentityController.resetRoles().add(\"max\", \"max\", \"user\");\n+        RestAssured\n+                .with()\n+                .auth().preemptive().basic(\"max\", \"max\")\n+                .get(\"/simple/frog\")\n+                .then()\n+                .statusCode(200)\n+                .body(\"partner\", Matchers.notNullValue())\n+                .body(\"ponds[0].name\", Matchers.is(\"Atlantic Ocean\"))\n+                .body(\"ponds[0].waterQuality\", Matchers.nullValue());\n+        TestIdentityController.resetRoles().add(\"rolfe\", \"rolfe\", \"admin\");\n+        RestAssured\n+                .with()\n+                .auth().preemptive().basic(\"rolfe\", \"rolfe\")\n+                .get(\"/simple/frog\")\n+                .then()\n+                .statusCode(200)\n+                .body(\"partner\", Matchers.notNullValue())\n+                .body(\"ponds[0].name\", Matchers.is(\"Atlantic Ocean\"))\n+                .body(\"ponds[0].waterQuality\", Matchers.is(\"CLEAR\"));\n+    }\n+\n+    @Test\n+    public void testSecureFieldOnArrayTypeField() {\n+        TestIdentityController.resetRoles().add(\"max\", \"max\", \"user\");\n+        RestAssured\n+                .with()\n+                .auth().preemptive().basic(\"max\", \"max\")\n+                .get(\"/simple/frog-body-parts\")\n+                .then()\n+                .statusCode(200)\n+                .body(\"parts[0].name\", Matchers.nullValue());\n+        TestIdentityController.resetRoles().add(\"rolfe\", \"rolfe\", \"admin\");\n+        RestAssured\n+                .with()\n+                .auth().preemptive().basic(\"rolfe\", \"rolfe\")\n+                .get(\"/simple/frog-body-parts\")\n+                .then()\n+                .statusCode(200)\n+                .body(\"parts[0].name\", Matchers.is(\"protruding eyes\"));\n+    }\n+\n+    @Test\n+    public void testSecureFieldOnTypeVariable() {\n+        TestIdentityController.resetRoles().add(\"max\", \"max\", \"user\");\n+        RestAssured\n+                .with()\n+                .auth().preemptive().basic(\"max\", \"max\")\n+                .get(\"/simple/secure-field-on-type-variable\")\n+                .then()\n+                .statusCode(200)\n+                .body(\"entity.prices[0].price\", Matchers.nullValue());\n+        TestIdentityController.resetRoles().add(\"rolfe\", \"rolfe\", \"admin\");\n+        RestAssured\n+                .with()\n+                .auth().preemptive().basic(\"rolfe\", \"rolfe\")\n+                .get(\"/simple/secure-field-on-type-variable\")\n+                .then()\n+                .statusCode(200)\n+                .body(\"entity.prices[0].price\", Matchers.notNullValue());\n+    }\n+\n+    private static void testSecuredFieldOnReturnTypeField(String subPath) {\n+        TestIdentityController.resetRoles().add(\"max\", \"max\", \"user\");\n+        RestAssured\n+                .with()\n+                .auth().preemptive().basic(\"max\", \"max\")\n+                .get(\"/simple/\" + subPath)\n+                .then()\n+                .statusCode(200)\n+                .body(\"publicName\", Matchers.is(\"Unknown\"))\n+                .body(\"veterinarian.name\", Matchers.is(\"Dolittle\"))\n+                .body(\"veterinarian.title\", Matchers.nullValue());\n+        TestIdentityController.resetRoles().add(\"rolfe\", \"rolfe\", \"admin\");\n+        RestAssured\n+                .with()\n+                .auth().preemptive().basic(\"rolfe\", \"rolfe\")\n+                .get(\"/simple/\" + subPath)\n+                .then()\n+                .statusCode(200)\n+                .body(\"publicName\", Matchers.is(\"Unknown\"))\n+                .body(\"veterinarian.name\", Matchers.is(\"Dolittle\"))\n+                .body(\"veterinarian.title\", Matchers.is(\"VMD\"));\n+    }\n+\n+    private static void testSecuredFieldOnAbstractClass(String catPath, String dogPath) {\n+        TestIdentityController.resetRoles().add(\"max\", \"max\", \"user\");\n+        RestAssured\n+                .with()\n+                .auth().preemptive().basic(\"max\", \"max\")\n+                .get(\"/simple/\" + catPath)\n+                .then()\n+                .statusCode(200)\n+                .body(\"publicName\", Matchers.is(\"Garfield\"))\n+                .body(\"initial\", Matchers.is(\"G\"))\n+                .body(\"privateName\", Matchers.nullValue())\n+                .body(\"veterinarian.name\", Matchers.is(\"Dolittle\"))\n+                .body(\"veterinarian.title\", Matchers.nullValue())\n+                .body(\"privateAge\", Matchers.nullValue());\n+        RestAssured\n+                .with()\n+                .auth().preemptive().basic(\"max\", \"max\")\n+                .get(\"/simple/\" + dogPath)\n+                .then()\n+                .statusCode(200)\n+                .body(\"publicName\", Matchers.is(\"Leo\"))\n+                .body(\"privateName\", Matchers.nullValue())\n+                .body(\"age\", Matchers.is(5))\n+                .body(\"veterinarian.name\", Matchers.is(\"Dolittle\"))\n+                .body(\"veterinarian.title\", Matchers.nullValue());\n+        TestIdentityController.resetRoles().add(\"rolfe\", \"rolfe\", \"admin\");\n+        RestAssured\n+                .with()\n+                .auth().preemptive().basic(\"rolfe\", \"rolfe\")\n+                .get(\"/simple/\" + catPath)\n+                .then()\n+                .statusCode(200)\n+                .body(\"publicName\", Matchers.is(\"Garfield\"))\n+                .body(\"initial\", Matchers.is(\"G\"))\n+                .body(\"privateName\", Matchers.is(\"Monday\"))\n+                .body(\"privateAge\", Matchers.is(4))\n+                .body(\"veterinarian.name\", Matchers.is(\"Dolittle\"))\n+                .body(\"veterinarian.title\", Matchers.is(\"VMD\"));\n+        RestAssured\n+                .with()\n+                .auth().preemptive().basic(\"rolfe\", \"rolfe\")\n+                .get(\"/simple/\" + dogPath)\n+                .then()\n+                .statusCode(200)\n+                .body(\"publicName\", Matchers.is(\"Leo\"))\n+                .body(\"privateName\", Matchers.is(\"Jack\"))\n+                .body(\"age\", Matchers.is(5))\n+                .body(\"veterinarian.name\", Matchers.is(\"Dolittle\"))\n+                .body(\"veterinarian.title\", Matchers.is(\"VMD\"));\n+    }\n+\n+    @Test\n+    public void testEcho() {\n+        RestAssured\n+                .with()\n+                .body(\"{\\\"publicName\\\":\\\"Leo\\\",\\\"veterinarian\\\":{\\\"name\\\":\\\"Dolittle\\\"},\\\"age\\\":5,\\\"vaccinated\\\":true}\")\n+                .contentType(\"application/json; charset=utf-8\")\n+                .post(\"/simple/dog-echo\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .body(\"publicName\", Matchers.is(\"Leo\"))\n+                .body(\"privateName\", Matchers.nullValue())\n+                .body(\"age\", Matchers.is(5))\n+                .body(\"vaccinated\", Matchers.is(true))\n+                .body(\"veterinarian.name\", Matchers.is(\"Dolittle\"))\n+                .body(\"veterinarian.title\", Matchers.nullValue());\n+    }\n+\n+    @Test\n+    public void testEchoWithNullString() {\n+        RestAssured\n+                .with()\n+                .body(\"{\\\"publicName\\\":null,\\\"veterinarian\\\":{\\\"name\\\":\\\"Dolittle\\\"},\\\"age\\\":5,\\\"vaccinated\\\":true}\")\n+                .contentType(\"application/json; charset=utf-8\")\n+                .post(\"/simple/dog-echo\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .body(\"publicName\", Matchers.nullValue())\n+                .body(\"privateName\", Matchers.nullValue())\n+                .body(\"age\", Matchers.is(5))\n+                .body(\"vaccinated\", Matchers.is(true))\n+                .body(\"veterinarian.name\", Matchers.is(\"Dolittle\"))\n+                .body(\"veterinarian.title\", Matchers.nullValue());\n+    }\n+\n+    @Test\n+    public void testEchoWithMissingPrimitive() {\n+        RestAssured\n+                .with()\n+                .body(\"{\\\"publicName\\\":\\\"Leo\\\",\\\"veterinarian\\\":{\\\"name\\\":\\\"Dolittle\\\"},\\\"age\\\":5}\")\n+                .contentType(\"application/json; charset=utf-8\")\n+                .post(\"/simple/dog-echo\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .body(\"publicName\", Matchers.is(\"Leo\"))\n+                .body(\"privateName\", Matchers.nullValue())\n+                .body(\"age\", Matchers.is(5))\n+                .body(\"veterinarian.name\", Matchers.is(\"Dolittle\"))\n+                .body(\"veterinarian.title\", Matchers.nullValue());\n+    }\n+\n+    @Test\n+    public void testRecordEcho() {\n+        String response = RestAssured\n+                .with()\n+                .body(\"{\\\"code\\\":\\\"AL\\\",\\\"is_enabled\\\":true,\\\"name\\\":\\\"Alabama\\\"}\")\n+                .contentType(\"application/json; charset=utf-8\")\n+                .post(\"/simple/record-echo\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .body(\"name\", Matchers.is(\"Alabama\"))\n+                .body(\"code\", Matchers.is(\"AL\"))\n+                .body(\"is_enabled\", Matchers.is(true))\n+                .extract()\n+                .asString();\n+\n+        int first = response.indexOf(\"is_enabled\");\n+        int last = response.lastIndexOf(\"is_enabled\");\n+        // assert that the \"is_enabled\" field is present only once in the response\n+        assertTrue(first >= 0);\n+        assertEquals(first, last);\n+    }\n+\n+    @Test\n+    public void testRecordWithEmptyConstructorEcho() {\n+        RestAssured\n+                .with()\n+                .body(\"{\\\"name\\\":\\\"Bart\\\",\\\"age\\\":5}\")\n+                .contentType(\"application/json; charset=utf-8\")\n+                .post(\"/simple/empty-ctor-record-echo\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .body(\"name\", Matchers.is(\"Bart\"))\n+                .body(\"age\", Matchers.is(5));\n+    }\n+\n+    @Test\n+    public void testNullMapEcho() {\n+        RestAssured\n+                .with()\n+                .body(new MapWrapper(\"test\"))\n+                .contentType(\"application/json; charset=utf-8\")\n+                .post(\"/simple/null-map-echo\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .body(\"name\", Matchers.is(\"test\"))\n+                .body(\"properties\", Matchers.nullValue());\n+    }\n+\n+    @Test\n+    public void testItem() {\n+        RestAssured\n+                .with()\n+                .get(\"/simple/item\")\n+                .then()\n+                .statusCode(200)\n+                .body(\"name\", Matchers.is(\"Name\"))\n+                .body(\"email\", Matchers.is(\"E-mail\"));\n+    }\n+\n+    @Test\n+    public void testItemExtended() {\n+        RestAssured\n+                .with()\n+                .get(\"/simple/item-extended\")\n+                .then()\n+                .statusCode(200)\n+                .body(\"name\", Matchers.is(\"Name\"))\n+                .body(\"email\", Matchers.is(\"E-mail\"))\n+                .body(\"nameExtended\", Matchers.is(\"Name-Extended\"))\n+                .body(\"emailExtended\", Matchers.is(emptyOrNullString()));\n+    }\n+\n+    @Test\n+    public void testPojoWithJsonCreator() {\n+        RestAssured\n+                .with()\n+                .body(\"{\\\"author\\\":\\\"Stephen King\\\",\\\"title\\\":\\\"IT\\\"}\")\n+                .contentType(\"application/json; charset=utf-8\")\n+                .post(\"/simple/book-echo\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .body(\"author\", Matchers.is(\"Stephen King\"))\n+                .body(\"title\", Matchers.is(\"IT\"));\n+    }\n+\n+    @Test\n+    public void testPojoWithFluentSetters() {\n+        RestAssured\n+                .with()\n+                .body(\"{\\\"author\\\":\\\"Mario Fusco\\\",\\\"title\\\":\\\"Lombok must die\\\"}\")\n+                .contentType(\"application/json; charset=utf-8\")\n+                .post(\"/simple/lombok-book-echo\")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\"application/json\")\n+                .body(\"author\", Matchers.is(\"Mario Fusco\"))\n+                .body(\"title\", Matchers.is(\"Lombok must die\"));\n+    }\n+}\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/NonAbsentReflectionFreeSerializationTest.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/NonAbsentReflectionFreeSerializationTest.java\nindex 9cf26be1742f1..7c3a949251565 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/NonAbsentReflectionFreeSerializationTest.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/NonAbsentReflectionFreeSerializationTest.java\n@@ -9,7 +9,7 @@\n \n import io.quarkus.test.QuarkusUnitTest;\n \n-public class NonAbsentReflectionFreeSerializationTest extends NonAbsentSerializationTest {\n+public class NonAbsentReflectionFreeSerializationTest extends AbstractNonAbsentSerializationTest {\n \n     @RegisterExtension\n     static QuarkusUnitTest test = new QuarkusUnitTest()\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/NonAbsentSerializationTest.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/NonAbsentSerializationTest.java\nindex df1f830aab6ea..01885038957ac 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/NonAbsentSerializationTest.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/NonAbsentSerializationTest.java\n@@ -2,24 +2,14 @@\n \n import java.util.function.Supplier;\n \n-import jakarta.inject.Singleton;\n-\n-import org.hamcrest.Matchers;\n import org.jboss.shrinkwrap.api.ShrinkWrap;\n import org.jboss.shrinkwrap.api.asset.StringAsset;\n import org.jboss.shrinkwrap.api.spec.JavaArchive;\n-import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.RegisterExtension;\n \n-import com.fasterxml.jackson.annotation.JsonInclude;\n-import com.fasterxml.jackson.databind.DeserializationFeature;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-\n-import io.quarkus.jackson.ObjectMapperCustomizer;\n import io.quarkus.test.QuarkusUnitTest;\n-import io.restassured.RestAssured;\n \n-public class NonAbsentSerializationTest {\n+public class NonAbsentSerializationTest extends AbstractNonAbsentSerializationTest {\n \n     @RegisterExtension\n     static QuarkusUnitTest test = new QuarkusUnitTest()\n@@ -31,40 +21,4 @@ public JavaArchive get() {\n                             .addAsResource(new StringAsset(\"\"), \"application.properties\");\n                 }\n             });\n-\n-    @Singleton\n-    public static class NonAbsentObjectMapperCustomizer implements ObjectMapperCustomizer {\n-\n-        @Override\n-        public void customize(ObjectMapper objectMapper) {\n-            objectMapper\n-                    .enable(DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES)\n-                    .disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n-                    .setSerializationInclusion(JsonInclude.Include.NON_ABSENT);\n-        }\n-    }\n-\n-    @Test\n-    public void testObject() {\n-        RestAssured.get(\"/json-include/my-object\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .body(\"name\", Matchers.equalTo(\"name\"))\n-                .body(\"description\", Matchers.equalTo(\"description\"))\n-                .body(\"map.test\", Matchers.equalTo(1))\n-                .body(\"strings[0]\", Matchers.equalTo(\"test\"));\n-    }\n-\n-    @Test\n-    public void testEmptyObject() {\n-        RestAssured.get(\"/json-include/my-object-empty\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .body(\"name\", Matchers.nullValue())\n-                .body(\"description\", Matchers.nullValue())\n-                .body(\"map\", Matchers.anEmptyMap())\n-                .body(\"strings\", Matchers.hasSize(0));\n-    }\n }\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/NonEmptyReflectionFreeSerializationTest.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/NonEmptyReflectionFreeSerializationTest.java\nindex 5ea6d6fef47d6..1105a32d43114 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/NonEmptyReflectionFreeSerializationTest.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/NonEmptyReflectionFreeSerializationTest.java\n@@ -9,7 +9,7 @@\n \n import io.quarkus.test.QuarkusUnitTest;\n \n-public class NonEmptyReflectionFreeSerializationTest extends NonEmptySerializationTest {\n+public class NonEmptyReflectionFreeSerializationTest extends AbstractNonEmptySerializationTest {\n \n     @RegisterExtension\n     static QuarkusUnitTest test = new QuarkusUnitTest()\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/NonEmptySerializationTest.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/NonEmptySerializationTest.java\nindex 39fd18ea46002..7a8849d92b18d 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/NonEmptySerializationTest.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/NonEmptySerializationTest.java\n@@ -2,24 +2,14 @@\n \n import java.util.function.Supplier;\n \n-import jakarta.inject.Singleton;\n-\n-import org.hamcrest.Matchers;\n import org.jboss.shrinkwrap.api.ShrinkWrap;\n import org.jboss.shrinkwrap.api.asset.StringAsset;\n import org.jboss.shrinkwrap.api.spec.JavaArchive;\n-import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.RegisterExtension;\n \n-import com.fasterxml.jackson.annotation.JsonInclude;\n-import com.fasterxml.jackson.databind.DeserializationFeature;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-\n-import io.quarkus.jackson.ObjectMapperCustomizer;\n import io.quarkus.test.QuarkusUnitTest;\n-import io.restassured.RestAssured;\n \n-public class NonEmptySerializationTest {\n+public class NonEmptySerializationTest extends AbstractNonEmptySerializationTest {\n \n     @RegisterExtension\n     static QuarkusUnitTest test = new QuarkusUnitTest()\n@@ -31,37 +21,4 @@ public JavaArchive get() {\n                             .addAsResource(new StringAsset(\"\"), \"application.properties\");\n                 }\n             });\n-\n-    @Singleton\n-    public static class NonEmptyObjectMapperCustomizer implements ObjectMapperCustomizer {\n-\n-        @Override\n-        public void customize(ObjectMapper objectMapper) {\n-            objectMapper\n-                    .enable(DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES)\n-                    .disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n-                    .setSerializationInclusion(JsonInclude.Include.NON_EMPTY);\n-        }\n-    }\n-\n-    @Test\n-    public void testObject() {\n-        RestAssured.get(\"/json-include/my-object\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .body(\"name\", Matchers.equalTo(\"name\"))\n-                .body(\"description\", Matchers.equalTo(\"description\"))\n-                .body(\"map.test\", Matchers.equalTo(1))\n-                .body(\"strings[0]\", Matchers.equalTo(\"test\"));\n-    }\n-\n-    @Test\n-    public void testEmptyObject() {\n-        RestAssured.get(\"/json-include/my-object-empty\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .body(Matchers.is(\"{}\"));\n-    }\n }\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonTest.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonTest.java\nindex faa34e14100f6..1bd5b96f311dc 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonTest.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonTest.java\n@@ -1,29 +1,17 @@\n package io.quarkus.resteasy.reactive.jackson.deployment.test;\n \n-import static org.hamcrest.Matchers.containsString;\n-import static org.hamcrest.Matchers.emptyOrNullString;\n-import static org.hamcrest.Matchers.is;\n-import static org.hamcrest.Matchers.not;\n-import static org.hamcrest.Matchers.notNullValue;\n-import static org.hamcrest.Matchers.nullValue;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-\n import java.util.function.Supplier;\n \n-import org.hamcrest.Matchers;\n import org.jboss.shrinkwrap.api.ShrinkWrap;\n import org.jboss.shrinkwrap.api.asset.StringAsset;\n import org.jboss.shrinkwrap.api.spec.JavaArchive;\n-import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.RegisterExtension;\n \n import io.quarkus.security.test.utils.TestIdentityController;\n import io.quarkus.security.test.utils.TestIdentityProvider;\n import io.quarkus.test.QuarkusUnitTest;\n-import io.restassured.RestAssured;\n \n-public class SimpleJsonTest {\n+public class SimpleJsonTest extends AbstractSimpleJsonTest {\n \n     @RegisterExtension\n     static QuarkusUnitTest test = new QuarkusUnitTest()\n@@ -44,795 +32,4 @@ public JavaArchive get() {\n                                     \"birth-date-roles=alice,bob\\n\"), \"application.properties\");\n                 }\n             });\n-\n-    @Test\n-    public void testJson() {\n-        doTestGetPersonNoSecurity(\"/simple\", \"/person\");\n-\n-        RestAssured\n-                .with()\n-                .body(\"{\\\"first\\\": \\\"Bob\\\", \\\"last\\\": \\\"Builder\\\"}\")\n-                .contentType(\"application/json; charset=utf-8\")\n-                .post(\"/simple/person\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .header(\"content-length\", notNullValue())\n-                .header(\"transfer-encoding\", nullValue())\n-                .body(\"first\", Matchers.equalTo(\"Bob\")).body(\"last\", Matchers.equalTo(\"Builder\"));\n-\n-        RestAssured\n-                .with()\n-                .body(\"{\\\"first\\\": \\\"Bob\\\", \\\"last\\\": \\\"Builder\\\"}\")\n-                .contentType(\"application/vnd.quarkus.person-v1+json\")\n-                .post(\"/simple/person-custom-mt\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/vnd.quarkus.person-v1+json\")\n-                .body(\"first\", Matchers.equalTo(\"Bob\")).body(\"last\", Matchers.equalTo(\"Builder\"));\n-\n-        RestAssured\n-                .with()\n-                .body(\"{\\\"first\\\": \\\"Bob\\\", \\\"last\\\": \\\"Builder\\\"}\")\n-                .contentType(\"application/vnd.quarkus.person-v1+json\")\n-                .post(\"/simple/person-custom-mt-response\")\n-                .then()\n-                .statusCode(201)\n-                .contentType(\"application/vnd.quarkus.person-v1+json\")\n-                .body(\"first\", Matchers.equalTo(\"Bob\")).body(\"last\", Matchers.equalTo(\"Builder\"));\n-\n-        RestAssured\n-                .with()\n-                .body(\"{\\\"first\\\": \\\"Bob\\\", \\\"last\\\": \\\"Builder\\\"}\")\n-                .contentType(\"application/vnd.quarkus.person-v1+json\")\n-                .post(\"/simple/person-custom-mt-response-with-type\")\n-                .then()\n-                .statusCode(201)\n-                .contentType(\"application/vnd.quarkus.other-v1+json\")\n-                .body(\"first\", Matchers.equalTo(\"Bob\")).body(\"last\", Matchers.equalTo(\"Builder\"));\n-\n-        RestAssured\n-                .with()\n-                .body(\"[{\\\"first\\\": \\\"Bob\\\", \\\"last\\\": \\\"Builder\\\"}, {\\\"first\\\": \\\"Bob2\\\", \\\"last\\\": \\\"Builder2\\\"}]\")\n-                .contentType(\"application/json; charset=utf-8\")\n-                .post(\"/simple/people\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .body(\"[1].first\", Matchers.equalTo(\"Bob\"))\n-                .body(\"[1].last\", Matchers.equalTo(\"Builder\"))\n-                .body(\"[0].first\", Matchers.equalTo(\"Bob2\"))\n-                .body(\"[0].last\", Matchers.equalTo(\"Builder2\"));\n-\n-        RestAssured.with()\n-                .body(\"[\\\"first\\\", \\\"second\\\"]\")\n-                .contentType(\"application/json; charset=utf-8\")\n-                .post(\"/simple/strings\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .body(\"[0]\", Matchers.equalTo(\"first\"))\n-                .body(\"[1]\", Matchers.equalTo(\"second\"));\n-\n-        RestAssured\n-                .with()\n-                .body(\"[{\\\"first\\\": \\\"Bob\\\", \\\"last\\\": \\\"Builder\\\"}, {\\\"first\\\": \\\"Bob2\\\", \\\"last\\\": \\\"Builder2\\\"}]\")\n-                .contentType(\"application/json; charset=utf-8\")\n-                .post(\"/simple/super\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .body(\"[1].first\", Matchers.equalTo(\"Bob\"))\n-                .body(\"[1].last\", Matchers.equalTo(\"Builder\"))\n-                .body(\"[0].first\", Matchers.equalTo(\"Bob2\"))\n-                .body(\"[0].last\", Matchers.equalTo(\"Builder2\"));\n-    }\n-\n-    private void doTestGetPersonNoSecurity(final String basePath, String path) {\n-        RestAssured.get(basePath + path)\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .header(\"transfer-encoding\", nullValue())\n-                .header(\"content-length\", notNullValue())\n-                .body(\"first\", Matchers.equalTo(\"Bob\"))\n-                .body(\"last\", Matchers.equalTo(\"Builder\"));\n-    }\n-\n-    @Test\n-    public void testLargeJsonPost() {\n-        StringBuilder sb = new StringBuilder();\n-        for (int i = 0; i < 10000; ++i) {\n-            sb.append(\"abc\");\n-        }\n-        String longString = sb.toString();\n-        RestAssured\n-                .with()\n-                .body(\"{\\\"first\\\": \\\"\" + longString + \"\\\", \\\"last\\\": \\\"\" + longString + \"\\\"}\")\n-                .contentType(\"application/json; charset=utf-8\")\n-                .post(\"/simple/person-large\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .body(\"first\", Matchers.equalTo(longString)).body(\"last\", Matchers.equalTo(longString));\n-    }\n-\n-    @Test\n-    public void testValidatedJson() {\n-        String postBody = \"{\\\"first\\\": \\\"Bob\\\", \\\"last\\\": \\\"Builder\\\"}\";\n-        RestAssured\n-                .with()\n-                .body(postBody)\n-                .accept(\"application/json\")\n-                .contentType(\"application/json\")\n-                .post(\"/simple/person-validated\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .body(\"first\", Matchers.equalTo(\"Bob\")).body(\"last\", Matchers.equalTo(\"Builder\"));\n-\n-        RestAssured\n-                .with()\n-                .body(postBody)\n-                .accept(\"application/json\")\n-                .contentType(\"application/json\")\n-                .post(\"/simple/person-invalid-result\")\n-                .then()\n-                .statusCode(500)\n-                .contentType(\"application/json\");\n-\n-        RestAssured\n-                .with()\n-                .body(\"{\\\"first\\\": \\\"Bob\\\"}\")\n-                .accept(\"application/json\")\n-                .contentType(\"application/json\")\n-                .post(\"/simple/person-validated\")\n-                .then()\n-                .statusCode(400)\n-                .contentType(\"application/json\");\n-    }\n-\n-    @Test\n-    public void testAsyncJson() {\n-        RestAssured.get(\"/simple/async-person\")\n-                .then().body(\"first\", Matchers.equalTo(\"Bob\")).body(\"last\", Matchers.equalTo(\"Builder\"));\n-    }\n-\n-    // when there is no view defined, Jackson will serialize all fields\n-    @Test\n-    public void testUserWithoutView() {\n-        RestAssured.get(\"/simple/user-without-view\")\n-                .then().body(containsString(\"1\"), containsString(\"test\"));\n-    }\n-\n-    @Test\n-    public void testUserWithPublicView() {\n-        RestAssured.get(\"/simple/user-with-public-view\")\n-                .then().body(not(containsString(\"1\")), containsString(\"test\"));\n-    }\n-\n-    @Test\n-    public void testUserWithPrivateView() {\n-        RestAssured.get(\"/simple/user-with-private-view\")\n-                .then().body(containsString(\"1\"), containsString(\"test\"));\n-    }\n-\n-    @Test\n-    public void testPerClassExceptionMapper() {\n-        RestAssured\n-                .with()\n-                .body(\"{\\\"first\\\": Bob, \\\"last\\\": \\\"Builder\\\"}\")\n-                .contentType(\"application/json; charset=utf-8\")\n-                .post(\"/simple/person\")\n-                .then()\n-                .statusCode(400)\n-                .contentType(\"application/json\")\n-                .body(containsString(\"Unrecognized token 'Bob'\"));\n-    }\n-\n-    @Test\n-    public void testJsonMulti() {\n-        RestAssured\n-                .with()\n-                .get(\"/simple/multi2\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .body(\"[0].first\", Matchers.equalTo(\"Bob\"))\n-                .body(\"[0].last\", Matchers.equalTo(\"Builder\"))\n-                .body(\"[1].first\", Matchers.equalTo(\"Bob2\"))\n-                .body(\"[1].last\", Matchers.equalTo(\"Builder2\"));\n-        RestAssured\n-                .with()\n-                .get(\"/simple/multi1\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .body(\"[0].first\", Matchers.equalTo(\"Bob\"))\n-                .body(\"[0].last\", Matchers.equalTo(\"Builder\"));\n-        RestAssured\n-                .with()\n-                .get(\"/simple/multi0\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .body(Matchers.equalTo(\"[]\"));\n-    }\n-\n-    @Test\n-    public void testCustomSerialization() {\n-        assertEquals(0, SimpleJsonResource.UnquotedFieldsPersonSerialization.count.intValue());\n-\n-        // assert that we get a proper response\n-        // we can't use json-path to assert because the returned string is not proper json as it does not have quotes around the field names\n-        RestAssured.get(\"/simple/custom-serialized-person\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .header(\"transfer-encoding\", nullValue())\n-                .header(\"content-length\", notNullValue())\n-                .body(containsString(\"Bob\"))\n-                .body(containsString(\"Builder\"));\n-        // assert that our bi-function was created\n-        assertEquals(1, SimpleJsonResource.UnquotedFieldsPersonSerialization.count.intValue());\n-\n-        // assert with a list of people\n-        RestAssured\n-                .with()\n-                .body(\"[{\\\"first\\\": \\\"Bob\\\", \\\"last\\\": \\\"Builder\\\"}, {\\\"first\\\": \\\"Bob2\\\", \\\"last\\\": \\\"Builder2\\\"}]\")\n-                .contentType(\"application/json; charset=utf-8\")\n-                .post(\"/simple/custom-serialized-people\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .header(\"transfer-encoding\", nullValue())\n-                .header(\"content-length\", notNullValue())\n-                .body(containsString(\"Bob\"))\n-                .body(containsString(\"Builder\"))\n-                .body(containsString(\"Bob2\"))\n-                .body(containsString(\"Builder2\"));\n-        // assert that another instance of our bi-function was created as a different resource method was used\n-        assertEquals(2, SimpleJsonResource.UnquotedFieldsPersonSerialization.count.intValue());\n-\n-        RestAssured.get(\"/simple/custom-serialized-person\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\");\n-        RestAssured\n-                .with()\n-                .body(\"[{\\\"first\\\": \\\"Bob\\\", \\\"last\\\": \\\"Builder\\\"}, {\\\"first\\\": \\\"Bob2\\\", \\\"last\\\": \\\"Builder2\\\"}]\")\n-                .contentType(\"application/json; charset=utf-8\")\n-                .post(\"/simple/custom-serialized-people\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\");\n-        // assert that the instances were re-used as we simply invoked methods that should have already created their object writers\n-        assertEquals(2, SimpleJsonResource.UnquotedFieldsPersonSerialization.count.intValue());\n-\n-        RestAssured.get(\"/simple/invalid-use-of-custom-serializer\")\n-                .then()\n-                .statusCode(500);\n-        // a new instance should have been created\n-        assertEquals(3, SimpleJsonResource.UnquotedFieldsPersonSerialization.count.intValue());\n-    }\n-\n-    @Test\n-    public void testCustomDeserialization() {\n-        int currentCounter = SimpleJsonResource.UnquotedFieldsPersonDeserialization.count.intValue();\n-\n-        // assert that the reader support the unquoted fields (because we have used a custom object reader\n-        // via `@CustomDeserialization`\n-        Person actual = RestAssured.given()\n-                .body(\"{first: \\\"Hello\\\", last: \\\"Deserialization\\\"}\")\n-                .contentType(\"application/json; charset=utf-8\")\n-                .post(\"/simple/custom-deserialized-person\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .header(\"transfer-encoding\", nullValue())\n-                .header(\"content-length\", notNullValue())\n-                .extract().as(Person.class);\n-        assertEquals(\"Hello\", actual.getFirst());\n-        assertEquals(\"Deserialization\", actual.getLast());\n-        assertEquals(currentCounter + 1, SimpleJsonResource.UnquotedFieldsPersonDeserialization.count.intValue());\n-\n-        // assert that the instances were re-used as we simply invoked methods that should have already created their object readers\n-        RestAssured.given()\n-                .body(\"{first: \\\"Hello\\\", last: \\\"Deserialization\\\"}\")\n-                .contentType(\"application/json; charset=utf-8\")\n-                .post(\"/simple/custom-deserialized-person\")\n-                .then()\n-                .statusCode(200);\n-        assertEquals(currentCounter + 1, SimpleJsonResource.UnquotedFieldsPersonDeserialization.count.intValue());\n-\n-        // assert with a list of people\n-        RestAssured\n-                .with()\n-                .body(\"[{first: \\\"Bob\\\", last: \\\"Builder\\\"}, {first: \\\"Bob2\\\", last: \\\"Builder2\\\"}]\")\n-                .contentType(\"application/json; charset=utf-8\")\n-                .post(\"/simple/custom-serialized-people\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .header(\"transfer-encoding\", nullValue())\n-                .header(\"content-length\", notNullValue())\n-                .body(containsString(\"Bob\"))\n-                .body(containsString(\"Builder\"))\n-                .body(containsString(\"Bob2\"))\n-                .body(containsString(\"Builder2\"));\n-    }\n-\n-    @Test\n-    public void testSecurityDisabledPerson() {\n-        doTestGetPersonNoSecurity(\"/other\", \"/no-security\");\n-    }\n-\n-    @Test\n-    public void testSecurePerson() {\n-        doTestSecurePerson(\"/simple\", \"/secure-person\");\n-    }\n-\n-    @Test\n-    public void testSecurePersonWithPrivateView() {\n-        doTestSecurePerson(\"/simple\", \"/secure-person-with-private-view\");\n-    }\n-\n-    @Test\n-    public void testSecurePersonWithPublicView() {\n-        doTestSecurePersonWithPublicView(\"/simple\", \"/secure-person-with-public-view\");\n-    }\n-\n-    @Test\n-    public void testUniSecurePersonWithPublicView() {\n-        doTestSecurePersonWithPublicView(\"/simple\", \"/uni-secure-person-with-public-view\");\n-    }\n-\n-    @Test\n-    public void testSecurePersonFromAbstract() {\n-        doTestSecurePerson(\"/other\", \"/abstract-with-security\");\n-    }\n-\n-    @Test\n-    public void testSecureUniPerson() {\n-        doTestSecurePerson(\"/simple\", \"/secure-uni-person\");\n-    }\n-\n-    @Test\n-    public void testSecureRestResponsePerson() {\n-        doTestSecurePerson(\"/simple\", \"/secure-rest-response-person\");\n-    }\n-\n-    @Test\n-    public void testSecureFieldRolesAllowedConfigExp() {\n-        TestIdentityController.resetRoles().add(\"max\", \"max\", \"admin\");\n-        RestAssured.given()\n-                .auth().preemptive().basic(\"max\", \"max\")\n-                .get(\"/simple/secure-person\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .header(\"transfer-encoding\", nullValue())\n-                .header(\"content-length\", notNullValue())\n-                .body(containsString(\"Bob\"))\n-                .body(containsString(\"0\"))\n-                .body(containsString(\"10 Downing St\"))\n-                .body(not(containsString(\"November 30, 1874\")))\n-                .body(containsString(\"Builder\"));\n-        TestIdentityController.resetRoles().add(\"max\", \"max\", \"user\");\n-        RestAssured.given()\n-                .auth().preemptive().basic(\"max\", \"max\")\n-                .get(\"/simple/secure-person\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .header(\"transfer-encoding\", nullValue())\n-                .header(\"content-length\", notNullValue())\n-                .body(containsString(\"Bob\"))\n-                .body(containsString(\"0\"))\n-                .body(containsString(\"10 Downing St\"))\n-                .body(not(containsString(\"November 30, 1874\")))\n-                .body(not(containsString(\"Builder\")));\n-        TestIdentityController.resetRoles().add(\"max\", \"max\", \"alice\");\n-        RestAssured.given()\n-                .auth().preemptive().basic(\"max\", \"max\")\n-                .get(\"/simple/secure-person\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .header(\"transfer-encoding\", nullValue())\n-                .header(\"content-length\", notNullValue())\n-                .body(containsString(\"Bob\"))\n-                .body(containsString(\"0\"))\n-                .body(not(containsString(\"10 Downing St\")))\n-                .body(containsString(\"November 30, 1874\"))\n-                .body(not(containsString(\"Builder\")));\n-    }\n-\n-    private void doTestSecurePerson(String basePath, final String path) {\n-        RestAssured.get(basePath + path)\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .header(\"transfer-encoding\", nullValue())\n-                .header(\"content-length\", notNullValue())\n-                .body(containsString(\"Bob\"))\n-                .body(containsString(\"0\"))\n-                .body(not(containsString(\"10 Downing St\")))\n-                .body(not(containsString(\"November 30, 1874\")))\n-                .body(not(containsString(\"Builder\")));\n-    }\n-\n-    private void doTestSecurePersonWithPublicView(String basePath, final String path) {\n-        RestAssured.get(basePath + path)\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .header(\"transfer-encoding\", nullValue())\n-                .header(\"content-length\", notNullValue())\n-                .body(containsString(\"Bob\"))\n-                .body(not(containsString(\"0\")))\n-                .body(not(containsString(\"10 Downing St\")))\n-                .body(not(containsString(\"November 30, 1874\")))\n-                .body(not(containsString(\"Builder\")));\n-    }\n-\n-    @Test\n-    public void testSecurePeople() {\n-        doTestSecurePeople(\"secure-people\");\n-    }\n-\n-    @Test\n-    public void testSecureUniPeople() {\n-        doTestSecurePeople(\"secure-uni-people\");\n-    }\n-\n-    private void doTestSecurePeople(final String path) {\n-        RestAssured.get(\"/simple/\" + path)\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .header(\"transfer-encoding\", nullValue())\n-                .header(\"content-length\", notNullValue())\n-                .body(containsString(\"Bob\"))\n-                .body(not(containsString(\"Builder\")));\n-    }\n-\n-    @Test\n-    public void testGenericInput() {\n-        RestAssured\n-                .with()\n-                .body(\"{\\\"content\\\": {\\\"name\\\":\\\"foo\\\", \\\"email\\\":\\\"bar\\\"}}\")\n-                .contentType(\"application/json; charset=utf-8\")\n-                .post(\"/simple/genericInput\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"text/plain\")\n-                .body(is(\"foo\"));\n-    }\n-\n-    @Test\n-    public void testInterface() {\n-        RestAssured\n-                .with()\n-                .get(\"/simple/interface\")\n-                .then()\n-                .statusCode(200)\n-                .body(\"nestedInterface.int\", Matchers.is(42))\n-                .body(\"nestedInterface.character\", Matchers.is(\"a\"))\n-                .body(\"nestedInterface.string\", Matchers.is(\"response\"));\n-    }\n-\n-    @Test\n-    public void testSecureFieldOnAbstractClass() {\n-        // implementor with / without @SecureField returned\n-        testSecuredFieldOnAbstractClass(\"cat\", \"dog\");\n-        // abstract class with @SecureField returned\n-        testSecuredFieldOnAbstractClass(\"abstract-named-cat\", \"abstract-named-dog\");\n-        // abstract class without @SecureField directly, but with secured field's field returned\n-        testSecuredFieldOnAbstractClass(\"abstract-cat\", \"abstract-dog\");\n-        // interface with implementors that have @SecureField\n-        testSecuredFieldOnAbstractClass(\"interface-cat\", \"interface-dog\");\n-    }\n-\n-    @Test\n-    public void testSecureFieldOnlyOnFieldOfReturnTypeField() {\n-        // returns class with @SecureField is only on field's field\n-        testSecuredFieldOnReturnTypeField(\"unsecured-pet\");\n-        // returns abstract class and only @SecureField is on implementor's field's field\n-        testSecuredFieldOnReturnTypeField(\"abstract-unsecured-pet\");\n-    }\n-\n-    @Test\n-    public void testSecureFieldOnCollectionTypeField() {\n-        TestIdentityController.resetRoles().add(\"max\", \"max\", \"user\");\n-        RestAssured\n-                .with()\n-                .auth().preemptive().basic(\"max\", \"max\")\n-                .get(\"/simple/frog\")\n-                .then()\n-                .statusCode(200)\n-                .body(\"partner\", Matchers.notNullValue())\n-                .body(\"ponds[0].name\", Matchers.is(\"Atlantic Ocean\"))\n-                .body(\"ponds[0].waterQuality\", Matchers.nullValue());\n-        TestIdentityController.resetRoles().add(\"rolfe\", \"rolfe\", \"admin\");\n-        RestAssured\n-                .with()\n-                .auth().preemptive().basic(\"rolfe\", \"rolfe\")\n-                .get(\"/simple/frog\")\n-                .then()\n-                .statusCode(200)\n-                .body(\"partner\", Matchers.notNullValue())\n-                .body(\"ponds[0].name\", Matchers.is(\"Atlantic Ocean\"))\n-                .body(\"ponds[0].waterQuality\", Matchers.is(\"CLEAR\"));\n-    }\n-\n-    @Test\n-    public void testSecureFieldOnArrayTypeField() {\n-        TestIdentityController.resetRoles().add(\"max\", \"max\", \"user\");\n-        RestAssured\n-                .with()\n-                .auth().preemptive().basic(\"max\", \"max\")\n-                .get(\"/simple/frog-body-parts\")\n-                .then()\n-                .statusCode(200)\n-                .body(\"parts[0].name\", Matchers.nullValue());\n-        TestIdentityController.resetRoles().add(\"rolfe\", \"rolfe\", \"admin\");\n-        RestAssured\n-                .with()\n-                .auth().preemptive().basic(\"rolfe\", \"rolfe\")\n-                .get(\"/simple/frog-body-parts\")\n-                .then()\n-                .statusCode(200)\n-                .body(\"parts[0].name\", Matchers.is(\"protruding eyes\"));\n-    }\n-\n-    @Test\n-    public void testSecureFieldOnTypeVariable() {\n-        TestIdentityController.resetRoles().add(\"max\", \"max\", \"user\");\n-        RestAssured\n-                .with()\n-                .auth().preemptive().basic(\"max\", \"max\")\n-                .get(\"/simple/secure-field-on-type-variable\")\n-                .then()\n-                .statusCode(200)\n-                .body(\"entity.prices[0].price\", Matchers.nullValue());\n-        TestIdentityController.resetRoles().add(\"rolfe\", \"rolfe\", \"admin\");\n-        RestAssured\n-                .with()\n-                .auth().preemptive().basic(\"rolfe\", \"rolfe\")\n-                .get(\"/simple/secure-field-on-type-variable\")\n-                .then()\n-                .statusCode(200)\n-                .body(\"entity.prices[0].price\", Matchers.notNullValue());\n-    }\n-\n-    private static void testSecuredFieldOnReturnTypeField(String subPath) {\n-        TestIdentityController.resetRoles().add(\"max\", \"max\", \"user\");\n-        RestAssured\n-                .with()\n-                .auth().preemptive().basic(\"max\", \"max\")\n-                .get(\"/simple/\" + subPath)\n-                .then()\n-                .statusCode(200)\n-                .body(\"publicName\", Matchers.is(\"Unknown\"))\n-                .body(\"veterinarian.name\", Matchers.is(\"Dolittle\"))\n-                .body(\"veterinarian.title\", Matchers.nullValue());\n-        TestIdentityController.resetRoles().add(\"rolfe\", \"rolfe\", \"admin\");\n-        RestAssured\n-                .with()\n-                .auth().preemptive().basic(\"rolfe\", \"rolfe\")\n-                .get(\"/simple/\" + subPath)\n-                .then()\n-                .statusCode(200)\n-                .body(\"publicName\", Matchers.is(\"Unknown\"))\n-                .body(\"veterinarian.name\", Matchers.is(\"Dolittle\"))\n-                .body(\"veterinarian.title\", Matchers.is(\"VMD\"));\n-    }\n-\n-    private static void testSecuredFieldOnAbstractClass(String catPath, String dogPath) {\n-        TestIdentityController.resetRoles().add(\"max\", \"max\", \"user\");\n-        RestAssured\n-                .with()\n-                .auth().preemptive().basic(\"max\", \"max\")\n-                .get(\"/simple/\" + catPath)\n-                .then()\n-                .statusCode(200)\n-                .body(\"publicName\", Matchers.is(\"Garfield\"))\n-                .body(\"initial\", Matchers.is(\"G\"))\n-                .body(\"privateName\", Matchers.nullValue())\n-                .body(\"veterinarian.name\", Matchers.is(\"Dolittle\"))\n-                .body(\"veterinarian.title\", Matchers.nullValue())\n-                .body(\"privateAge\", Matchers.nullValue());\n-        RestAssured\n-                .with()\n-                .auth().preemptive().basic(\"max\", \"max\")\n-                .get(\"/simple/\" + dogPath)\n-                .then()\n-                .statusCode(200)\n-                .body(\"publicName\", Matchers.is(\"Leo\"))\n-                .body(\"privateName\", Matchers.nullValue())\n-                .body(\"age\", Matchers.is(5))\n-                .body(\"veterinarian.name\", Matchers.is(\"Dolittle\"))\n-                .body(\"veterinarian.title\", Matchers.nullValue());\n-        TestIdentityController.resetRoles().add(\"rolfe\", \"rolfe\", \"admin\");\n-        RestAssured\n-                .with()\n-                .auth().preemptive().basic(\"rolfe\", \"rolfe\")\n-                .get(\"/simple/\" + catPath)\n-                .then()\n-                .statusCode(200)\n-                .body(\"publicName\", Matchers.is(\"Garfield\"))\n-                .body(\"initial\", Matchers.is(\"G\"))\n-                .body(\"privateName\", Matchers.is(\"Monday\"))\n-                .body(\"privateAge\", Matchers.is(4))\n-                .body(\"veterinarian.name\", Matchers.is(\"Dolittle\"))\n-                .body(\"veterinarian.title\", Matchers.is(\"VMD\"));\n-        RestAssured\n-                .with()\n-                .auth().preemptive().basic(\"rolfe\", \"rolfe\")\n-                .get(\"/simple/\" + dogPath)\n-                .then()\n-                .statusCode(200)\n-                .body(\"publicName\", Matchers.is(\"Leo\"))\n-                .body(\"privateName\", Matchers.is(\"Jack\"))\n-                .body(\"age\", Matchers.is(5))\n-                .body(\"veterinarian.name\", Matchers.is(\"Dolittle\"))\n-                .body(\"veterinarian.title\", Matchers.is(\"VMD\"));\n-    }\n-\n-    @Test\n-    public void testEcho() {\n-        RestAssured\n-                .with()\n-                .body(\"{\\\"publicName\\\":\\\"Leo\\\",\\\"veterinarian\\\":{\\\"name\\\":\\\"Dolittle\\\"},\\\"age\\\":5,\\\"vaccinated\\\":true}\")\n-                .contentType(\"application/json; charset=utf-8\")\n-                .post(\"/simple/dog-echo\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .body(\"publicName\", Matchers.is(\"Leo\"))\n-                .body(\"privateName\", Matchers.nullValue())\n-                .body(\"age\", Matchers.is(5))\n-                .body(\"vaccinated\", Matchers.is(true))\n-                .body(\"veterinarian.name\", Matchers.is(\"Dolittle\"))\n-                .body(\"veterinarian.title\", Matchers.nullValue());\n-    }\n-\n-    @Test\n-    public void testEchoWithNullString() {\n-        RestAssured\n-                .with()\n-                .body(\"{\\\"publicName\\\":null,\\\"veterinarian\\\":{\\\"name\\\":\\\"Dolittle\\\"},\\\"age\\\":5,\\\"vaccinated\\\":true}\")\n-                .contentType(\"application/json; charset=utf-8\")\n-                .post(\"/simple/dog-echo\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .body(\"publicName\", Matchers.nullValue())\n-                .body(\"privateName\", Matchers.nullValue())\n-                .body(\"age\", Matchers.is(5))\n-                .body(\"vaccinated\", Matchers.is(true))\n-                .body(\"veterinarian.name\", Matchers.is(\"Dolittle\"))\n-                .body(\"veterinarian.title\", Matchers.nullValue());\n-    }\n-\n-    @Test\n-    public void testEchoWithMissingPrimitive() {\n-        RestAssured\n-                .with()\n-                .body(\"{\\\"publicName\\\":\\\"Leo\\\",\\\"veterinarian\\\":{\\\"name\\\":\\\"Dolittle\\\"},\\\"age\\\":5}\")\n-                .contentType(\"application/json; charset=utf-8\")\n-                .post(\"/simple/dog-echo\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .body(\"publicName\", Matchers.is(\"Leo\"))\n-                .body(\"privateName\", Matchers.nullValue())\n-                .body(\"age\", Matchers.is(5))\n-                .body(\"veterinarian.name\", Matchers.is(\"Dolittle\"))\n-                .body(\"veterinarian.title\", Matchers.nullValue());\n-    }\n-\n-    @Test\n-    public void testRecordEcho() {\n-        String response = RestAssured\n-                .with()\n-                .body(\"{\\\"code\\\":\\\"AL\\\",\\\"is_enabled\\\":true,\\\"name\\\":\\\"Alabama\\\"}\")\n-                .contentType(\"application/json; charset=utf-8\")\n-                .post(\"/simple/record-echo\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .body(\"name\", Matchers.is(\"Alabama\"))\n-                .body(\"code\", Matchers.is(\"AL\"))\n-                .body(\"is_enabled\", Matchers.is(true))\n-                .extract()\n-                .asString();\n-\n-        int first = response.indexOf(\"is_enabled\");\n-        int last = response.lastIndexOf(\"is_enabled\");\n-        // assert that the \"is_enabled\" field is present only once in the response\n-        assertTrue(first >= 0);\n-        assertEquals(first, last);\n-    }\n-\n-    @Test\n-    public void testRecordWithEmptyConstructorEcho() {\n-        RestAssured\n-                .with()\n-                .body(\"{\\\"name\\\":\\\"Bart\\\",\\\"age\\\":5}\")\n-                .contentType(\"application/json; charset=utf-8\")\n-                .post(\"/simple/empty-ctor-record-echo\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .body(\"name\", Matchers.is(\"Bart\"))\n-                .body(\"age\", Matchers.is(5));\n-    }\n-\n-    @Test\n-    public void testNullMapEcho() {\n-        RestAssured\n-                .with()\n-                .body(new MapWrapper(\"test\"))\n-                .contentType(\"application/json; charset=utf-8\")\n-                .post(\"/simple/null-map-echo\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .body(\"name\", Matchers.is(\"test\"))\n-                .body(\"properties\", Matchers.nullValue());\n-    }\n-\n-    @Test\n-    public void testItem() {\n-        RestAssured\n-                .with()\n-                .get(\"/simple/item\")\n-                .then()\n-                .statusCode(200)\n-                .body(\"name\", Matchers.is(\"Name\"))\n-                .body(\"email\", Matchers.is(\"E-mail\"));\n-    }\n-\n-    @Test\n-    public void testItemExtended() {\n-        RestAssured\n-                .with()\n-                .get(\"/simple/item-extended\")\n-                .then()\n-                .statusCode(200)\n-                .body(\"name\", Matchers.is(\"Name\"))\n-                .body(\"email\", Matchers.is(\"E-mail\"))\n-                .body(\"nameExtended\", Matchers.is(\"Name-Extended\"))\n-                .body(\"emailExtended\", Matchers.is(emptyOrNullString()));\n-    }\n-\n-    @Test\n-    public void testPojoWithJsonCreator() {\n-        RestAssured\n-                .with()\n-                .body(\"{\\\"author\\\":\\\"Stephen King\\\",\\\"title\\\":\\\"IT\\\"}\")\n-                .contentType(\"application/json; charset=utf-8\")\n-                .post(\"/simple/book-echo\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .body(\"author\", Matchers.is(\"Stephen King\"))\n-                .body(\"title\", Matchers.is(\"IT\"));\n-    }\n-\n-    @Test\n-    public void testPojoWithFluentSetters() {\n-        RestAssured\n-                .with()\n-                .body(\"{\\\"author\\\":\\\"Mario Fusco\\\",\\\"title\\\":\\\"Lombok must die\\\"}\")\n-                .contentType(\"application/json; charset=utf-8\")\n-                .post(\"/simple/lombok-book-echo\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .body(\"author\", Matchers.is(\"Mario Fusco\"))\n-                .body(\"title\", Matchers.is(\"Lombok must die\"));\n-    }\n }\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonWithReflectionFreeSerializersTest.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonWithReflectionFreeSerializersTest.java\nindex 577a0ebeb9b00..c5ddf344a4214 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonWithReflectionFreeSerializersTest.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonWithReflectionFreeSerializersTest.java\n@@ -13,7 +13,7 @@\n import io.quarkus.security.test.utils.TestIdentityProvider;\n import io.quarkus.test.QuarkusUnitTest;\n \n-public class SimpleJsonWithReflectionFreeSerializersTest extends SimpleJsonTest {\n+public class SimpleJsonWithReflectionFreeSerializersTest extends AbstractSimpleJsonTest {\n \n     @RegisterExtension\n     static QuarkusUnitTest test = new QuarkusUnitTest()\n\ndiff --git a/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/AbstractPermissionCheckerRestMultiTest.java b/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/AbstractPermissionCheckerRestMultiTest.java\nindex e85273794959d..966464b82cc03 100644\n--- a/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/AbstractPermissionCheckerRestMultiTest.java\n+++ b/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/AbstractPermissionCheckerRestMultiTest.java\n@@ -10,23 +10,15 @@\n import org.jboss.resteasy.reactive.RestMulti;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.RegisterExtension;\n \n import io.quarkus.security.PermissionChecker;\n import io.quarkus.security.PermissionsAllowed;\n import io.quarkus.security.test.utils.TestIdentityController;\n-import io.quarkus.security.test.utils.TestIdentityProvider;\n-import io.quarkus.test.QuarkusUnitTest;\n import io.restassured.RestAssured;\n import io.smallrye.mutiny.Multi;\n \n public abstract class AbstractPermissionCheckerRestMultiTest {\n \n-    @RegisterExtension\n-    static QuarkusUnitTest TEST = new QuarkusUnitTest()\n-            .withApplicationRoot((jar) -> jar.addClasses(TestResource.class, TestIdentityController.class,\n-                    TestIdentityProvider.class));\n-\n     @BeforeAll\n     public static void setupUsers() {\n         TestIdentityController.resetRoles().add(\"user\", \"user\");\n\ndiff --git a/independent-projects/bootstrap/bom-test/pom.xml b/independent-projects/bootstrap/bom-test/pom.xml\nindex 75ceb03f4c806..89daac3cff591 100644\n--- a/independent-projects/bootstrap/bom-test/pom.xml\n+++ b/independent-projects/bootstrap/bom-test/pom.xml\n@@ -27,10 +27,11 @@\n                 <scope>test</scope>\n             </dependency>\n             <dependency>\n-                <groupId>org.junit.jupiter</groupId>\n-                <artifactId>junit-jupiter</artifactId>\n-                <version>${junit.jupiter.version}</version>\n-                <scope>test</scope>\n+                <groupId>org.junit</groupId>\n+                <artifactId>junit-bom</artifactId>\n+                <version>${junit5.version}</version>\n+                <scope>import</scope>\n+                <type>pom</type>\n             </dependency>\n             <dependency>\n                 <groupId>org.jboss.shrinkwrap</groupId>\n\ndiff --git a/independent-projects/junit5-virtual-threads/src/test/java/io/quarkus/test/junit5/virtual/internal/VirtualThreadExtensionTest.java b/independent-projects/junit5-virtual-threads/src/test/java/io/quarkus/test/junit5/virtual/internal/VirtualThreadExtensionTest.java\nindex f69a9ac698a74..e8b2a80c18035 100644\n--- a/independent-projects/junit5-virtual-threads/src/test/java/io/quarkus/test/junit5/virtual/internal/VirtualThreadExtensionTest.java\n+++ b/independent-projects/junit5-virtual-threads/src/test/java/io/quarkus/test/junit5/virtual/internal/VirtualThreadExtensionTest.java\n@@ -5,6 +5,7 @@\n \n import java.lang.reflect.AnnotatedElement;\n import java.lang.reflect.Method;\n+import java.nio.file.Path;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n@@ -17,7 +18,9 @@\n import org.junit.jupiter.api.TestInstance;\n import org.junit.jupiter.api.extension.ExecutableInvoker;\n import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.MediaType;\n import org.junit.jupiter.api.extension.TestInstances;\n+import org.junit.jupiter.api.function.ThrowingConsumer;\n import org.junit.jupiter.api.parallel.ExecutionMode;\n \n import io.quarkus.test.junit5.virtual.ShouldNotPin;\n@@ -213,6 +216,19 @@ public ExecutionMode getExecutionMode() {\n         public ExecutableInvoker getExecutableInvoker() {\n             return null;\n         }\n+\n+        @Override\n+        public List<Class<?>> getEnclosingTestClasses() {\n+            return List.of();\n+        }\n+\n+        @Override\n+        public void publishFile(String name, MediaType mediaType, ThrowingConsumer<Path> action) {\n+        }\n+\n+        @Override\n+        public void publishDirectory(String name, ThrowingConsumer<Path> action) {\n+        }\n     }\n \n     private static class TestCollector extends Collector {\n\ndiff --git a/integration-tests/oidc-wiremock/src/main/resources/application.properties b/integration-tests/oidc-wiremock/src/main/resources/application.properties\nindex ac710a8bc6c61..4bbf6da00f0ac 100644\n--- a/integration-tests/oidc-wiremock/src/main/resources/application.properties\n+++ b/integration-tests/oidc-wiremock/src/main/resources/application.properties\n@@ -14,7 +14,7 @@ quarkus.oidc.no-discovery.client-id=quarkus-app\n quarkus.oidc.no-discovery.credentials.secret=secret\n quarkus.oidc.no-discovery.authentication.scopes=profile,email,phone\n \n-quarkus.oidc.code-flow.auth-server-url=${keycloak.url}/realms/quarkus/\n+quarkus.oidc.code-flow.auth-server-url=${keycloak.url:replaced-by-test-resource}/realms/quarkus/\n quarkus.oidc.code-flow.client-id=quarkus-web-app\n quarkus.oidc.code-flow.authentication.user-info-required=false\n quarkus.oidc.code-flow.authentication.verify-access-token=false\n@@ -28,7 +28,7 @@ quarkus.oidc.code-flow.token.audience=https://id.server.example.com\n quarkus.oidc.code-flow.token.refresh-expired=true\n quarkus.oidc.code-flow.token.refresh-token-time-skew=5M\n \n-quarkus.oidc.code-flow-verify-id-and-access-tokens.auth-server-url=${keycloak.url}/realms/quarkus/\n+quarkus.oidc.code-flow-verify-id-and-access-tokens.auth-server-url=${keycloak.url:replaced-by-test-resource}/realms/quarkus/\n quarkus.oidc.code-flow-verify-id-and-access-tokens.client-id=quarkus-web-app\n quarkus.oidc.code-flow-verify-id-and-access-tokens.authentication.user-info-required=false\n quarkus.oidc.code-flow-verify-id-and-access-tokens.authentication.verify-access-token=true\n@@ -37,24 +37,24 @@ quarkus.oidc.code-flow-verify-id-and-access-tokens.application-type=web-app\n quarkus.oidc.code-flow-verify-id-and-access-tokens.token.audience=any\n \n quarkus.oidc.code-flow-opaque-access-token.provider=github\n-quarkus.oidc.code-flow-opaque-access-token.auth-server-url=${keycloak.url}/realms/quarkus/\n+quarkus.oidc.code-flow-opaque-access-token.auth-server-url=${keycloak.url:replaced-by-test-resource}/realms/quarkus/\n quarkus.oidc.code-flow-opaque-access-token.authorization-path=/\n-quarkus.oidc.code-flow-opaque-access-token.token-path=${keycloak.url}/realms/quarkus/opaque-access-token\n+quarkus.oidc.code-flow-opaque-access-token.token-path=${keycloak.url:replaced-by-test-resource}/realms/quarkus/opaque-access-token\n quarkus.oidc.code-flow-opaque-access-token.user-info-path=protocol/openid-connect/userinfo\n quarkus.oidc.code-flow-opaque-access-token.client-id=quarkus-web-app\n quarkus.oidc.code-flow-opaque-access-token.credentials.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n quarkus.oidc.code-flow-opaque-access-token.tenant-paths=/code-flow-opaque-access-token/*\n \n-quarkus.oidc.code-flow-encrypted-id-token-jwk.auth-server-url=${keycloak.url}/realms/quarkus/\n+quarkus.oidc.code-flow-encrypted-id-token-jwk.auth-server-url=${keycloak.url:replaced-by-test-resource}/realms/quarkus/\n quarkus.oidc.code-flow-encrypted-id-token-jwk.client-id=quarkus-web-app\n quarkus.oidc.code-flow-encrypted-id-token-jwk.credentials.secret=secret\n quarkus.oidc.code-flow-encrypted-id-token-jwk.application-type=web-app\n-quarkus.oidc.code-flow-encrypted-id-token-jwk.token-path=${keycloak.url}/realms/quarkus/encrypted-id-token\n+quarkus.oidc.code-flow-encrypted-id-token-jwk.token-path=${keycloak.url:replaced-by-test-resource}/realms/quarkus/encrypted-id-token\n quarkus.oidc.code-flow-encrypted-id-token-jwk.token.decryption-key-location=privateKeyEncryptedIdToken.jwk\n quarkus.oidc.code-flow-encrypted-id-token-jwk.token.audience=https://server.example.com\n quarkus.oidc.code-flow-encrypted-id-token-jwk.token-state-manager.encryption-algorithm=dir\n \n-quarkus.oidc.code-flow-encrypted-id-token-pem.auth-server-url=${keycloak.url}/realms/quarkus/\n+quarkus.oidc.code-flow-encrypted-id-token-pem.auth-server-url=${keycloak.url:replaced-by-test-resource}/realms/quarkus/\n quarkus.oidc.code-flow-encrypted-id-token-pem.client-id=quarkus-web-app\n quarkus.oidc.code-flow-encrypted-id-token-pem.credentials.secret=secret\n quarkus.oidc.code-flow-encrypted-id-token-pem.application-type=web-app\n@@ -62,24 +62,24 @@ quarkus.oidc.code-flow-encrypted-id-token-pem.token-path=encrypted-id-token\n quarkus.oidc.code-flow-encrypted-id-token-pem.token.decryption-key-location=privateKey.pem\n quarkus.oidc.code-flow-encrypted-id-token-pem.token.audience=any\n \n-quarkus.oidc.code-flow-form-post.auth-server-url=${keycloak.url}/realms/quarkus-form-post/\n+quarkus.oidc.code-flow-form-post.auth-server-url=${keycloak.url:replaced-by-test-resource}/realms/quarkus-form-post/\n quarkus.oidc.code-flow-form-post.authentication.user-info-required=false\n quarkus.oidc.code-flow-form-post.client-id=quarkus-web-app\n quarkus.oidc.code-flow-form-post.credentials.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n quarkus.oidc.code-flow-form-post.application-type=web-app\n quarkus.oidc.code-flow-form-post.authentication.response-mode=form_post\n quarkus.oidc.code-flow-form-post.discovery-enabled=false\n-# redirect the user to ${keycloak.url}/realms/quarkus-form-post/ which will respond with form post data\n+# redirect the user to ${keycloak.url:replaced-by-test-resource}/realms/quarkus-form-post/ which will respond with form post data\n quarkus.oidc.code-flow-form-post.authorization-path=/\n # reuse the wiremock access token stub for the `quarkus` realm - it is the same for the query and form post response mode\n-quarkus.oidc.code-flow-form-post.token-path=${keycloak.url}/realms/quarkus/token\n+quarkus.oidc.code-flow-form-post.token-path=${keycloak.url:replaced-by-test-resource}/realms/quarkus/token\n # reuse the wiremock JWK endpoint stub for the `quarkus` realm - it is the same for the query and form post response mode\n-quarkus.oidc.code-flow-form-post.jwks-path=${keycloak.url}/realms/quarkus/protocol/openid-connect/certs\n+quarkus.oidc.code-flow-form-post.jwks-path=${keycloak.url:replaced-by-test-resource}/realms/quarkus/protocol/openid-connect/certs\n quarkus.oidc.code-flow-form-post.logout.backchannel.path=/back-channel-logout\n quarkus.oidc.code-flow-form-post.logout.frontchannel.path=/code-flow-form-post/front-channel-logout\n quarkus.oidc.code-flow-form-post.token.audience=https://server.example.com,https://id.server.example.com\n \n-quarkus.oidc.code-flow-user-info-only.auth-server-url=${keycloak.url}/realms/quarkus/\n+quarkus.oidc.code-flow-user-info-only.auth-server-url=${keycloak.url:replaced-by-test-resource}/realms/quarkus/\n quarkus.oidc.code-flow-user-info-only.discovery-enabled=false\n quarkus.oidc.code-flow-user-info-only.authorization-path=/\n quarkus.oidc.code-flow-user-info-only.token-path=access_token\n@@ -95,7 +95,7 @@ quarkus.oidc.code-flow-user-info-only.application-type=web-app\n quarkus.oidc.code-flow-user-info-github.provider=github\n quarkus.oidc.code-flow-user-info-github.authentication.internal-id-token-lifespan=7H\n quarkus.oidc.code-flow-user-info-github.authentication.verify-access-token=false\n-quarkus.oidc.code-flow-user-info-github.auth-server-url=${keycloak.url}/realms/quarkus/\n+quarkus.oidc.code-flow-user-info-github.auth-server-url=${keycloak.url:replaced-by-test-resource}/realms/quarkus/\n quarkus.oidc.code-flow-user-info-github.authorization-path=/\n quarkus.oidc.code-flow-user-info-github.user-info-path=protocol/openid-connect/userinfo\n quarkus.oidc.code-flow-user-info-github.code-grant.extra-params.extra-param=extra-param-value\n@@ -107,7 +107,7 @@ quarkus.oidc.code-flow-user-info-github.cache-user-info-in-idtoken=false\n quarkus.oidc.code-flow-user-info-github-cache-disabled.provider=github\n quarkus.oidc.code-flow-user-info-github-cache-disabled.authentication.internal-id-token-lifespan=7H\n quarkus.oidc.code-flow-user-info-github-cache-disabled.authentication.verify-access-token=false\n-quarkus.oidc.code-flow-user-info-github-cache-disabled.auth-server-url=${keycloak.url}/realms/quarkus/\n+quarkus.oidc.code-flow-user-info-github-cache-disabled.auth-server-url=${keycloak.url:replaced-by-test-resource}/realms/quarkus/\n quarkus.oidc.code-flow-user-info-github-cache-disabled.authorization-path=/\n quarkus.oidc.code-flow-user-info-github-cache-disabled.user-info-path=protocol/openid-connect/userinfo\n quarkus.oidc.code-flow-user-info-github-cache-disabled.code-grant.extra-params.extra-param=extra-param-value\n@@ -122,18 +122,18 @@ quarkus.oidc.bearer-user-info-github-service.token.principal-claim=preferred_use\n quarkus.oidc.bearer-user-info-github-service.token.verify-access-token-with-user-info=true\n quarkus.oidc.bearer-user-info-github-service.token.allow-jwt-introspection=false\n quarkus.oidc.bearer-user-info-github-service.application-type=service\n-quarkus.oidc.bearer-user-info-github-service.auth-server-url=${keycloak.url}/realms/quarkus/\n+quarkus.oidc.bearer-user-info-github-service.auth-server-url=${keycloak.url:replaced-by-test-resource}/realms/quarkus/\n quarkus.oidc.bearer-user-info-github-service.user-info-path=github/userinfo\n quarkus.oidc.bearer-user-info-github-service.client-id=quarkus-web-app\n quarkus.oidc.bearer-user-info-github-service.credentials.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n \n quarkus.oidc.code-flow-user-info-github-cached-in-idtoken.provider=github\n quarkus.oidc.code-flow-user-info-github-cached-in-idtoken.application-type=hybrid\n-quarkus.oidc.code-flow-user-info-github-cached-in-idtoken.auth-server-url=${keycloak.url}/realms/quarkus/\n+quarkus.oidc.code-flow-user-info-github-cached-in-idtoken.auth-server-url=${keycloak.url:replaced-by-test-resource}/realms/quarkus/\n quarkus.oidc.code-flow-user-info-github-cached-in-idtoken.authorization-path=/\n quarkus.oidc.code-flow-user-info-github-cached-in-idtoken.token-path=access_token_refreshed\n quarkus.oidc.code-flow-user-info-github-cached-in-idtoken.user-info-path=protocol/openid-connect/signeduserinfo\n-quarkus.oidc.code-flow-user-info-github-cached-in-idtoken.jwks-path=${keycloak.url}/realms/quarkus/protocol/openid-connect/certs\n+quarkus.oidc.code-flow-user-info-github-cached-in-idtoken.jwks-path=${keycloak.url:replaced-by-test-resource}/realms/quarkus/protocol/openid-connect/certs\n quarkus.oidc.code-flow-user-info-github-cached-in-idtoken.code-grant.extra-params.extra-param=extra-param-value\n quarkus.oidc.code-flow-user-info-github-cached-in-idtoken.code-grant.headers.X-Custom=XCustomHeaderValue\n quarkus.oidc.code-flow-user-info-github-cached-in-idtoken.cache-user-info-in-idtoken=true\n@@ -149,7 +149,7 @@ quarkus.oidc.code-flow-user-info-github-cached-in-idtoken.certificate-chain.trus\n \n quarkus.oidc.code-flow-token-introspection.provider=github\n quarkus.oidc.code-flow-token-introspection.token.verify-access-token-with-user-info=false\n-quarkus.oidc.code-flow-token-introspection.auth-server-url=${keycloak.url}/realms/quarkus/\n+quarkus.oidc.code-flow-token-introspection.auth-server-url=${keycloak.url:replaced-by-test-resource}/realms/quarkus/\n quarkus.oidc.code-flow-token-introspection.authorization-path=/\n quarkus.oidc.code-flow-token-introspection.user-info-path=protocol/openid-connect/userinfo\n quarkus.oidc.code-flow-token-introspection.introspection-path=protocol/openid-connect/token/introspect\n@@ -159,7 +159,7 @@ quarkus.oidc.code-flow-token-introspection.client-id=quarkus-web-app\n quarkus.oidc.code-flow-token-introspection.credentials.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n quarkus.oidc.code-flow-token-introspection.code-grant.headers.X-Custom=XTokenIntrospection\n \n-quarkus.oidc.code-flow-token-introspection-expires-in.auth-server-url=${keycloak.url}/realms/quarkus/\n+quarkus.oidc.code-flow-token-introspection-expires-in.auth-server-url=${keycloak.url:replaced-by-test-resource}/realms/quarkus/\n quarkus.oidc.code-flow-token-introspection-expires-in.application-type=web-app\n quarkus.oidc.code-flow-token-introspection-expires-in.authentication.user-info-required=false\n quarkus.oidc.code-flow-token-introspection-expires-in.authorization-path=/\n@@ -172,13 +172,13 @@ quarkus.oidc.code-flow-token-introspection-expires-in.credentials.secret=AyM1Sys\n \n quarkus.oidc.token-cache.max-size=1\n \n-quarkus.oidc.bearer.auth-server-url=${keycloak.url}/realms/quarkus/\n+quarkus.oidc.bearer.auth-server-url=${keycloak.url:replaced-by-test-resource}/realms/quarkus/\n quarkus.oidc.bearer.client-id=quarkus-app\n quarkus.oidc.bearer.credentials.secret=secret\n quarkus.oidc.bearer.token.audience=https://service.example.com\n quarkus.oidc.bearer.allow-token-introspection-cache=false\n \n-quarkus.oidc.bearer-kid-or-chain.auth-server-url=${keycloak.url}/realms/quarkus/\n+quarkus.oidc.bearer-kid-or-chain.auth-server-url=${keycloak.url:replaced-by-test-resource}/realms/quarkus/\n quarkus.oidc.bearer-kid-or-chain.client-id=quarkus-app\n quarkus.oidc.bearer-kid-or-chain.credentials.secret=secret\n quarkus.oidc.bearer-kid-or-chain.token.audience=https://service.example.com\n@@ -186,18 +186,18 @@ quarkus.oidc.bearer-kid-or-chain.allow-token-introspection-cache=false\n quarkus.oidc.bearer-kid-or-chain.certificate-chain.trust-store-file=target/chain/truststore.p12\n quarkus.oidc.bearer-kid-or-chain.certificate-chain.trust-store-password=storepassword\n \n-quarkus.oidc.bearer-id.auth-server-url=${keycloak.url}/realms/quarkus/\n+quarkus.oidc.bearer-id.auth-server-url=${keycloak.url:replaced-by-test-resource}/realms/quarkus/\n quarkus.oidc.bearer-id.client-id=quarkus-app\n quarkus.oidc.bearer-id.credentials.secret=secret\n quarkus.oidc.bearer-id.allow-token-introspection-cache=false\n quarkus.oidc.bearer-id.token.authorization-scheme=ID\n \n-quarkus.oidc.bearer-required-algorithm.auth-server-url=${keycloak.url}/realms/quarkus/\n+quarkus.oidc.bearer-required-algorithm.auth-server-url=${keycloak.url:replaced-by-test-resource}/realms/quarkus/\n quarkus.oidc.bearer-required-algorithm.client-id=quarkus-app\n quarkus.oidc.bearer-required-algorithm.credentials.secret=secret\n quarkus.oidc.bearer-required-algorithm.token.signature-algorithm=PS256\n \n-quarkus.oidc.bearer-permission-checker.auth-server-url=${keycloak.url}/realms/quarkus/\n+quarkus.oidc.bearer-permission-checker.auth-server-url=${keycloak.url:replaced-by-test-resource}/realms/quarkus/\n quarkus.oidc.bearer-permission-checker.client-id=quarkus-app\n quarkus.oidc.bearer-permission-checker.credentials.secret=secret\n quarkus.oidc.bearer-permission-checker.token.signature-algorithm=PS256\n@@ -206,21 +206,21 @@ quarkus.oidc.bearer-azure.provider=microsoft\n quarkus.oidc.bearer-azure.authentication.user-info-required=false\n quarkus.oidc.bearer-azure.application-type=service\n quarkus.oidc.bearer-azure.discovery-enabled=false\n-quarkus.oidc.bearer-azure.jwks-path=${keycloak.url}/azure/jwk\n+quarkus.oidc.bearer-azure.jwks-path=${keycloak.url:replaced-by-test-resource}/azure/jwk\n quarkus.oidc.bearer-azure.jwks.resolve-early=false\n quarkus.oidc.bearer-azure.token.lifespan-grace=2147483647\n quarkus.oidc.bearer-azure.token.customizer-name=azure-access-token-customizer\n quarkus.oidc.bearer-azure.certificate-chain.trust-store-file=target/chain/truststore.p12\n quarkus.oidc.bearer-azure.certificate-chain.trust-store-password=storepassword\n \n-quarkus.oidc.bearer-role-claim-path.auth-server-url=${keycloak.url}/realms/quarkus/\n+quarkus.oidc.bearer-role-claim-path.auth-server-url=${keycloak.url:replaced-by-test-resource}/realms/quarkus/\n quarkus.oidc.bearer-role-claim-path.client-id=quarkus-app\n quarkus.oidc.bearer-role-claim-path.credentials.secret=secret\n quarkus.oidc.bearer-role-claim-path.token.audience=https://service.example.com\n quarkus.oidc.bearer-role-claim-path.roles.role-claim-path=\"https://roles.example.com\"\n quarkus.oidc.bearer-role-claim-path.allow-token-introspection-cache=false\n \n-quarkus.oidc.bearer-no-introspection.auth-server-url=${keycloak.url}/realms/quarkus/\n+quarkus.oidc.bearer-no-introspection.auth-server-url=${keycloak.url:replaced-by-test-resource}/realms/quarkus/\n quarkus.oidc.bearer-no-introspection.client-id=quarkus-app\n quarkus.oidc.bearer-no-introspection.credentials.secret=secret\n quarkus.oidc.bearer-no-introspection.token.audience=https://service.example.com\n@@ -237,7 +237,7 @@ quarkus.oidc.bearer-certificate-full-chain-root-only-wrongcname.certificate-chai\n quarkus.oidc.bearer-certificate-full-chain-root-only-wrongcname.certificate-chain.trust-store-password=storepassword\n quarkus.oidc.bearer-certificate-full-chain-root-only-wrongcname.certificate-chain.leaf-certificate-name=www.quarkusio.com\n \n-quarkus.oidc.bearer-key-without-kid-thumbprint.auth-server-url=${keycloak.url}/realms/quarkus/\n+quarkus.oidc.bearer-key-without-kid-thumbprint.auth-server-url=${keycloak.url:replaced-by-test-resource}/realms/quarkus/\n quarkus.oidc.bearer-key-without-kid-thumbprint.authentication.user-info-required=false\n quarkus.oidc.bearer-key-without-kid-thumbprint.discovery-enabled=false\n quarkus.oidc.bearer-key-without-kid-thumbprint.jwks-path=single-key-without-kid-thumbprint\n@@ -246,7 +246,7 @@ quarkus.oidc.bearer-key-without-kid-thumbprint.credentials.secret=secret\n quarkus.oidc.bearer-key-without-kid-thumbprint.token.audience=https://service.example.com\n quarkus.oidc.bearer-key-without-kid-thumbprint.token.allow-jwt-introspection=false\n \n-quarkus.oidc.bearer-wrong-role-path.auth-server-url=${keycloak.url}/realms/quarkus/\n+quarkus.oidc.bearer-wrong-role-path.auth-server-url=${keycloak.url:replaced-by-test-resource}/realms/quarkus/\n quarkus.oidc.bearer-wrong-role-path.client-id=quarkus-app\n quarkus.oidc.bearer-wrong-role-path.credentials.secret=secret\n quarkus.oidc.bearer-wrong-role-path.token.audience=https://service.example.com\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46864",
    "pr_id": 46864,
    "issue_id": 46723,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Allow sending HTTP `Clear-Site-Data` after OIDC logout\n### Description\n\nWhen the user logs out, it may make sense to send https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Clear-Site-Data, alongside the session cookie removal request\n\n### Implementation ideas\n\nMake it possible to configure `Clear-Side-Data` directives",
    "issue_word_count": 51,
    "test_files_count": 3,
    "non_test_files_count": 7,
    "pr_changed_files": [
      "docs/src/main/asciidoc/security-oidc-code-flow-authentication.adoc",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcSessionImpl.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcUtils.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/builders/LogoutConfigBuilder.java",
      "extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcTenantConfigImpl.java",
      "integration-tests/oidc-wiremock-logout/src/main/resources/application.properties",
      "integration-tests/oidc-wiremock-logout/src/test/java/io/quarkus/it/keycloak/CodeFlowAuthorizationTest.java"
    ],
    "pr_changed_test_files": [
      "extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcTenantConfigImpl.java",
      "integration-tests/oidc-wiremock-logout/src/main/resources/application.properties",
      "integration-tests/oidc-wiremock-logout/src/test/java/io/quarkus/it/keycloak/CodeFlowAuthorizationTest.java"
    ],
    "base_commit": "6c767c59bfba5465b29efcfa6d12acc938f100da",
    "head_commit": "9a623b499a25d88053e4a96230684be10b8922f9",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46864",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46864",
    "dockerfile": "",
    "pr_merged_at": "2025-03-18T18:58:38.000Z",
    "patch": "diff --git a/docs/src/main/asciidoc/security-oidc-code-flow-authentication.adoc b/docs/src/main/asciidoc/security-oidc-code-flow-authentication.adoc\nindex 8cb5fb41e6606..bb73b24186d1d 100644\n--- a/docs/src/main/asciidoc/security-oidc-code-flow-authentication.adoc\n+++ b/docs/src/main/asciidoc/security-oidc-code-flow-authentication.adoc\n@@ -1141,6 +1141,15 @@ There are two main ways for the authentication information to expire: the tokens\n \n Let's start with explicit logout operations.\n \n+[NOTE]\n+====\n+You can request setting https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Clear-Site-Data[Clear-Site-Data] directives for all of the logout operations with a `quarkus.oidc.logout.clear-site-data` configuration property. For example:\n+\n+[source,properties]\n+----\n+quarkus.oidc.logout.clear-site-data=cache,cookies\n+----\n+====\n \n [[user-initiated-logout]]\n ==== User-initiated logout\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java\nindex a00b67dd0dc5d..c9f24a7b5ded9 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java\n@@ -8,6 +8,7 @@\n import java.util.Map;\n import java.util.Optional;\n import java.util.OptionalInt;\n+import java.util.Set;\n \n import io.quarkus.oidc.common.runtime.OidcClientCommonConfig;\n import io.quarkus.oidc.common.runtime.OidcConstants;\n@@ -482,6 +483,11 @@ public static class Logout implements io.quarkus.oidc.runtime.OidcTenantConfig.L\n          */\n         public Map<String, String> extraParams;\n \n+        /**\n+         * Clear-Site-Data header directives\n+         */\n+        Optional<Set<ClearSiteData>> clearSiteData = Optional.of(Set.of());\n+\n         /**\n          * Back-Channel Logout configuration\n          */\n@@ -545,6 +551,7 @@ private void addConfigMappingValues(io.quarkus.oidc.runtime.OidcTenantConfig.Log\n             postLogoutPath = mapping.postLogoutPath();\n             postLogoutUriParam = mapping.postLogoutUriParam();\n             extraParams = mapping.extraParams();\n+            clearSiteData = mapping.clearSiteData();\n             backchannel.addConfigMappingValues(mapping.backchannel());\n             frontchannel.addConfigMappingValues(mapping.frontchannel());\n         }\n@@ -578,6 +585,11 @@ public io.quarkus.oidc.runtime.OidcTenantConfig.Backchannel backchannel() {\n         public io.quarkus.oidc.runtime.OidcTenantConfig.Frontchannel frontchannel() {\n             return frontchannel;\n         }\n+\n+        @Override\n+        public Optional<Set<ClearSiteData>> clearSiteData() {\n+            return clearSiteData;\n+        }\n     }\n \n     /**\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\nindex 9a964c5644b01..fcf6ddf1c5cb1 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\n@@ -1512,11 +1512,13 @@ public Uni<Void> apply(SecurityIdentity identity) {\n             if (isRpInitiatedLogout(context, configContext)) {\n                 LOG.debug(\"Performing an RP initiated logout\");\n                 fireEvent(SecurityEvent.Type.OIDC_LOGOUT_RP_INITIATED, identity);\n+                OidcUtils.setClearSiteData(context, configContext.oidcConfig());\n                 return buildLogoutRedirectUriUni(context, configContext, idToken);\n             }\n             if (isBackChannelLogoutPendingAndValid(configContext, identity)\n                     || isFrontChannelLogoutValid(context, configContext,\n                             identity)) {\n+                OidcUtils.setClearSiteData(context, configContext.oidcConfig());\n                 return removeSessionCookie(context, configContext.oidcConfig())\n                         .map(new Function<Void, Void>() {\n                             @Override\n@@ -1528,5 +1530,6 @@ public Void apply(Void t) {\n             }\n             return VOID_UNI;\n         }\n+\n     }\n }\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcSessionImpl.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcSessionImpl.java\nindex 81fcfe90aaa38..703ddd91f67b9 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcSessionImpl.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcSessionImpl.java\n@@ -39,6 +39,7 @@ public Uni<Void> logout() {\n         return oidcConfigUni.onItem().transformToUni(new Function<OidcTenantConfig, Uni<? extends Void>>() {\n             @Override\n             public Uni<Void> apply(OidcTenantConfig oidcConfig) {\n+                OidcUtils.setClearSiteData(routingContext, oidcConfig);\n                 return OidcUtils.removeSessionCookie(routingContext, oidcConfig,\n                         resolver.getTokenStateManager());\n             }\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java\nindex 0c798a146f7ec..55d07c111b036 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java\n@@ -6,6 +6,7 @@\n import java.util.Map;\n import java.util.Optional;\n import java.util.OptionalInt;\n+import java.util.Set;\n \n import io.quarkus.oidc.JavaScriptRequestChecker;\n import io.quarkus.oidc.TenantConfigResolver;\n@@ -291,6 +292,53 @@ interface Logout {\n          * Front-Channel Logout configuration\n          */\n         Frontchannel frontchannel();\n+\n+        enum ClearSiteData {\n+            /**\n+             * Clear cache\n+             */\n+            CACHE(\"cache\"),\n+\n+            /**\n+             * Clear client hints.\n+             */\n+            CLIENT_HINTS(\"clientHints\"),\n+\n+            /**\n+             * Clear cookies.\n+             */\n+            COOKIES(\"cookies\"),\n+\n+            /**\n+             * Clear execution contexts\n+             */\n+            EXECUTION_CONTEXTS(\"executionContexts\"),\n+\n+            /**\n+             * Clear storage\n+             */\n+            STORAGE(\"storage\"),\n+\n+            /**\n+             * Clear all types of data\n+             */\n+            WILDCARD(\"*\");\n+\n+            private String directive;\n+\n+            private ClearSiteData(String directive) {\n+                this.directive = directive;\n+            }\n+\n+            public String directive() {\n+                return \"\\\"\" + directive + \"\\\"\";\n+            }\n+        }\n+\n+        /**\n+         * Clear-Site-Data header directives\n+         */\n+        Optional<Set<ClearSiteData>> clearSiteData();\n     }\n \n     interface Backchannel {\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcUtils.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcUtils.java\nindex 07d0b6dfc092b..471a9c7d0c5f9 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcUtils.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcUtils.java\n@@ -19,6 +19,7 @@\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import java.util.SortedMap;\n import java.util.StringTokenizer;\n import java.util.TreeMap;\n@@ -50,6 +51,7 @@\n import io.quarkus.oidc.common.runtime.OidcConstants;\n import io.quarkus.oidc.runtime.OidcTenantConfig.ApplicationType;\n import io.quarkus.oidc.runtime.OidcTenantConfig.Authentication;\n+import io.quarkus.oidc.runtime.OidcTenantConfig.Logout.ClearSiteData;\n import io.quarkus.oidc.runtime.OidcTenantConfig.Roles;\n import io.quarkus.oidc.runtime.OidcTenantConfig.Token;\n import io.quarkus.oidc.runtime.providers.KnownOidcProviders;\n@@ -104,6 +106,7 @@ public final class OidcUtils {\n     public static final String DPOP_PROOF = \"dpop_proof\";\n     public static final String DPOP_PROOF_JWT_HEADERS = \"dpop_proof_jwt_headers\";\n     public static final String DPOP_PROOF_JWT_CLAIMS = \"dpop_proof_jwt_claims\";\n+    public static final String CLEAR_SITE_DATA_HEADER = \"Clear-Site-Data\";\n \n     private static final String APPLICATION_JWT = \"application/jwt\";\n \n@@ -841,4 +844,18 @@ public static boolean isApplicationJwtContentType(String ct) {\n         String remainder = ct.substring(APPLICATION_JWT.length()).trim();\n         return remainder.indexOf(';') == 0;\n     }\n+\n+    public static void setClearSiteData(RoutingContext context, OidcTenantConfig oidcConfig) {\n+        Set<ClearSiteData> dirs = oidcConfig.logout().clearSiteData().orElse(Set.of());\n+        if (!dirs.isEmpty()) {\n+            StringBuilder builder = new StringBuilder();\n+            for (ClearSiteData dir : dirs) {\n+                if (!builder.isEmpty()) {\n+                    builder.append(\",\");\n+                }\n+                builder.append(dir.directive());\n+            }\n+            context.response().putHeader(CLEAR_SITE_DATA_HEADER, builder.toString());\n+        }\n+    }\n }\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/builders/LogoutConfigBuilder.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/builders/LogoutConfigBuilder.java\nindex dfff4e57c17ac..49b6a5ee6ea97 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/builders/LogoutConfigBuilder.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/builders/LogoutConfigBuilder.java\n@@ -2,12 +2,16 @@\n \n import java.time.Duration;\n import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n import java.util.Optional;\n+import java.util.Set;\n \n import io.quarkus.oidc.OidcTenantConfigBuilder;\n import io.quarkus.oidc.runtime.OidcTenantConfig;\n+import io.quarkus.oidc.runtime.OidcTenantConfig.Logout.ClearSiteData;\n \n /**\n  * Builder for the {@link OidcTenantConfig.Logout}.\n@@ -15,7 +19,8 @@\n public final class LogoutConfigBuilder {\n     private record LogoutImpl(Optional<String> path, Optional<String> postLogoutPath, String postLogoutUriParam,\n             Map<String, String> extraParams, OidcTenantConfig.Backchannel backchannel,\n-            OidcTenantConfig.Frontchannel frontchannel) implements OidcTenantConfig.Logout {\n+            OidcTenantConfig.Frontchannel frontchannel,\n+            Optional<Set<ClearSiteData>> clearSiteData) implements OidcTenantConfig.Logout {\n     }\n \n     private record FrontchannelImpl(Optional<String> path) implements OidcTenantConfig.Frontchannel {\n@@ -28,6 +33,7 @@ private record FrontchannelImpl(Optional<String> path) implements OidcTenantConf\n     private String postLogoutUriParam;\n     private OidcTenantConfig.Backchannel backchannel;\n     private OidcTenantConfig.Frontchannel frontchannel;\n+    private Optional<Set<ClearSiteData>> clearSiteData = Optional.of(new HashSet<>());\n \n     public LogoutConfigBuilder() {\n         this(new OidcTenantConfigBuilder());\n@@ -44,6 +50,7 @@ public LogoutConfigBuilder(OidcTenantConfigBuilder builder) {\n         this.postLogoutUriParam = logout.postLogoutUriParam();\n         this.backchannel = logout.backchannel();\n         this.frontchannel = logout.frontchannel();\n+        this.clearSiteData = logout.clearSiteData();\n     }\n \n     /**\n@@ -105,6 +112,26 @@ public LogoutConfigBuilder extraParams(Map<String, String> extraParams) {\n         return this;\n     }\n \n+    /**\n+     * Clear all site data\n+     *\n+     * @return this builder\n+     */\n+    public LogoutConfigBuilder clearSiteData() {\n+        this.clearSiteData(List.of(ClearSiteData.WILDCARD));\n+        return this;\n+    }\n+\n+    /**\n+     * @param clear site data directives {@link OidcTenantConfig.Logout#clearSiteData()}\n+     * @return this builder\n+     */\n+    public LogoutConfigBuilder clearSiteData(List<ClearSiteData> directives) {\n+        Objects.requireNonNull(directives);\n+        this.clearSiteData.get().addAll(directives);\n+        return this;\n+    }\n+\n     /**\n      * @param backchannel {@link OidcTenantConfig.Logout#backchannel()}\n      * @return this builder\n@@ -134,7 +161,8 @@ public OidcTenantConfigBuilder end() {\n      * @return built {@link OidcTenantConfig.Logout}\n      */\n     public OidcTenantConfig.Logout build() {\n-        return new LogoutImpl(path, postLogoutPath, postLogoutUriParam, Map.copyOf(extraParams), backchannel, frontchannel);\n+        return new LogoutImpl(path, postLogoutPath, postLogoutUriParam, Map.copyOf(extraParams), backchannel, frontchannel,\n+                clearSiteData);\n     }\n \n     /**\n",
    "test_patch": "diff --git a/extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcTenantConfigImpl.java b/extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcTenantConfigImpl.java\nindex 972450482c3a5..5cb5da48633a7 100644\n--- a/extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcTenantConfigImpl.java\n+++ b/extensions/oidc/runtime/src/test/java/io/quarkus/oidc/runtime/OidcTenantConfigImpl.java\n@@ -7,6 +7,7 @@\n import java.util.Map;\n import java.util.Optional;\n import java.util.OptionalInt;\n+import java.util.Set;\n \n import io.quarkus.runtime.configuration.TrimmedStringConverter;\n import io.smallrye.config.WithConverter;\n@@ -160,15 +161,16 @@ enum ConfigMappingMethods {\n         LOGOUT_PATH,\n         LOGOUT_POST_LOGOUT_PATH,\n         LOGOUT_POST_LOGOUT_URI_PARAM,\n-        LOGOUT_POST_LOGOUT_EXTRA_PARAMS,\n-        LOGOUT_POST_LOGOUT_BACK_CHANNEL,\n-        LOGOUT_POST_LOGOUT_FRONT_CHANNEL,\n-        LOGOUT_POST_LOGOUT_FRONT_CHANNEL_PATH,\n-        LOGOUT_POST_LOGOUT_BACK_CHANNEL_PATH,\n-        LOGOUT_POST_LOGOUT_BACK_CHANNEL_TOKEN_CACHE_SIZE,\n-        LOGOUT_POST_LOGOUT_BACK_CHANNEL_TOKEN_CACHE_TTL,\n-        LOGOUT_POST_LOGOUT_BACK_CHANNEL_CLEAN_UP_TIMER_INTERVAL,\n-        LOGOUT_POST_LOGOUT_BACK_CHANNEL_LOGOUT_TOKEN_KEY,\n+        LOGOUT_CLEAR_SITE_DATA,\n+        LOGOUT_EXTRA_PARAMS,\n+        LOGOUT_BACK_CHANNEL,\n+        LOGOUT_FRONT_CHANNEL,\n+        LOGOUT_FRONT_CHANNEL_PATH,\n+        LOGOUT_BACK_CHANNEL_PATH,\n+        LOGOUT_BACK_CHANNEL_TOKEN_CACHE_SIZE,\n+        LOGOUT_BACK_CHANNEL_TOKEN_CACHE_TTL,\n+        LOGOUT_BACK_CHANNEL_CLEAN_UP_TIMER_INTERVAL,\n+        LOGOUT_BACK_CHANNEL_LOGOUT_TOKEN_KEY,\n         TOKEN_ISSUER,\n         TOKEN_AUDIENCE,\n         TOKEN_SUBJECT_REQUIRED,\n@@ -480,42 +482,48 @@ public String postLogoutUriParam() {\n \n             @Override\n             public Map<String, String> extraParams() {\n-                invocationsRecorder.put(ConfigMappingMethods.LOGOUT_POST_LOGOUT_EXTRA_PARAMS, true);\n+                invocationsRecorder.put(ConfigMappingMethods.LOGOUT_EXTRA_PARAMS, true);\n                 return Map.of();\n             }\n \n+            @Override\n+            public Optional<Set<ClearSiteData>> clearSiteData() {\n+                invocationsRecorder.put(ConfigMappingMethods.LOGOUT_CLEAR_SITE_DATA, true);\n+                return Optional.of(Set.of());\n+            }\n+\n             @Override\n             public Backchannel backchannel() {\n-                invocationsRecorder.put(ConfigMappingMethods.LOGOUT_POST_LOGOUT_BACK_CHANNEL, true);\n+                invocationsRecorder.put(ConfigMappingMethods.LOGOUT_BACK_CHANNEL, true);\n                 return new Backchannel() {\n                     @Override\n                     public Optional<String> path() {\n-                        invocationsRecorder.put(ConfigMappingMethods.LOGOUT_POST_LOGOUT_BACK_CHANNEL_PATH, true);\n+                        invocationsRecorder.put(ConfigMappingMethods.LOGOUT_BACK_CHANNEL_PATH, true);\n                         return Optional.empty();\n                     }\n \n                     @Override\n                     public int tokenCacheSize() {\n-                        invocationsRecorder.put(ConfigMappingMethods.LOGOUT_POST_LOGOUT_BACK_CHANNEL_TOKEN_CACHE_SIZE, true);\n+                        invocationsRecorder.put(ConfigMappingMethods.LOGOUT_BACK_CHANNEL_TOKEN_CACHE_SIZE, true);\n                         return 0;\n                     }\n \n                     @Override\n                     public Duration tokenCacheTimeToLive() {\n-                        invocationsRecorder.put(ConfigMappingMethods.LOGOUT_POST_LOGOUT_BACK_CHANNEL_TOKEN_CACHE_TTL, true);\n+                        invocationsRecorder.put(ConfigMappingMethods.LOGOUT_BACK_CHANNEL_TOKEN_CACHE_TTL, true);\n                         return null;\n                     }\n \n                     @Override\n                     public Optional<Duration> cleanUpTimerInterval() {\n-                        invocationsRecorder.put(ConfigMappingMethods.LOGOUT_POST_LOGOUT_BACK_CHANNEL_CLEAN_UP_TIMER_INTERVAL,\n+                        invocationsRecorder.put(ConfigMappingMethods.LOGOUT_BACK_CHANNEL_CLEAN_UP_TIMER_INTERVAL,\n                                 true);\n                         return Optional.empty();\n                     }\n \n                     @Override\n                     public String logoutTokenKey() {\n-                        invocationsRecorder.put(ConfigMappingMethods.LOGOUT_POST_LOGOUT_BACK_CHANNEL_LOGOUT_TOKEN_KEY, true);\n+                        invocationsRecorder.put(ConfigMappingMethods.LOGOUT_BACK_CHANNEL_LOGOUT_TOKEN_KEY, true);\n                         return \"\";\n                     }\n                 };\n@@ -523,11 +531,11 @@ public String logoutTokenKey() {\n \n             @Override\n             public Frontchannel frontchannel() {\n-                invocationsRecorder.put(ConfigMappingMethods.LOGOUT_POST_LOGOUT_FRONT_CHANNEL, true);\n+                invocationsRecorder.put(ConfigMappingMethods.LOGOUT_FRONT_CHANNEL, true);\n                 return new Frontchannel() {\n                     @Override\n                     public Optional<String> path() {\n-                        invocationsRecorder.put(ConfigMappingMethods.LOGOUT_POST_LOGOUT_FRONT_CHANNEL_PATH, true);\n+                        invocationsRecorder.put(ConfigMappingMethods.LOGOUT_FRONT_CHANNEL_PATH, true);\n                         return Optional.empty();\n                     }\n                 };\n\ndiff --git a/integration-tests/oidc-wiremock-logout/src/main/resources/application.properties b/integration-tests/oidc-wiremock-logout/src/main/resources/application.properties\nindex 5690b3fc83c33..2f2b4ba0c2c74 100644\n--- a/integration-tests/oidc-wiremock-logout/src/main/resources/application.properties\n+++ b/integration-tests/oidc-wiremock-logout/src/main/resources/application.properties\n@@ -14,6 +14,7 @@ quarkus.oidc.code-flow-form-post.revoke-path=${keycloak.url}/realms/quarkus/revo\n # reuse the wiremock JWK endpoint stub for the `quarkus` realm - it is the same for the query and form post response mode\n quarkus.oidc.code-flow-form-post.jwks-path=${keycloak.url}/realms/quarkus/protocol/openid-connect/certs\n quarkus.oidc.code-flow-form-post.logout.backchannel.path=/back-channel-logout\n+quarkus.oidc.code-flow-form-post.logout.clear-site-data=cache,cookies\n quarkus.oidc.code-flow-form-post.token.audience=https://server.example.com,https://id.server.example.com\n \n quarkus.native.additional-build-args=-H:IncludeResources=private.*\\\\.*,-H:IncludeResources=.*\\\\.p12\n\ndiff --git a/integration-tests/oidc-wiremock-logout/src/test/java/io/quarkus/it/keycloak/CodeFlowAuthorizationTest.java b/integration-tests/oidc-wiremock-logout/src/test/java/io/quarkus/it/keycloak/CodeFlowAuthorizationTest.java\nindex 27d8bea4beff1..37b9f892fa2c5 100644\n--- a/integration-tests/oidc-wiremock-logout/src/test/java/io/quarkus/it/keycloak/CodeFlowAuthorizationTest.java\n+++ b/integration-tests/oidc-wiremock-logout/src/test/java/io/quarkus/it/keycloak/CodeFlowAuthorizationTest.java\n@@ -7,6 +7,7 @@\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.net.URI;\n import java.time.Duration;\n@@ -94,6 +95,8 @@ public void testCodeFlowFormPostAndBackChannelLogout() throws Exception {\n             WebResponse webResponse = webClient\n                     .loadWebResponse(new WebRequest(URI.create(\"http://localhost:8081/service/code-flow-form-post\").toURL()));\n             assertEquals(302, webResponse.getStatusCode());\n+            String clearSiteData = webResponse.getResponseHeaderValue(\"clear-site-data\");\n+            assertTrue(clearSiteData.equals(\"\\\"cache\\\",\\\"cookies\\\"\") || clearSiteData.equals(\"\\\"cookies\\\",\\\"cache\\\"\"));\n \n             assertNull(getSessionCookie(webClient, \"code-flow-form-post\"));\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46863",
    "pr_id": 46863,
    "issue_id": 46816,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Fails to deserialize (@QueryParam Map)\n### Describe the bug\n\nAfter https://github.com/quarkusio/quarkus/pull/45233 quarkus fails to deserialize rest endpoints with map param like: `(@QueryParam(\"param\") Map<String, String> params)`\n(Example from testsuite - https://github.com/quarkus-qe/quarkus-test-suite/blob/main/http/rest-client-reactive/src/main/java/io/quarkus/ts/http/restclient/reactive/resources/PlainBookResource.java#L54)\n\nAccessing this endpoint with string: `{\"id\":\"Hagakure\",\"author\":\"Tsuramoto\"}` Fails with:\n```\n...\nCaused by: java.lang.RuntimeException: com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `java.util.LinkedHashMap<java.lang.String,java.lang.String>` from Array value (token `JsonToken.START_ARRAY`)\n11:19:03,792 INFO  [app]  at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1, column: 1]\n11:19:03,792 INFO  [app] \tat io.quarkus.ts.http.restclient.reactive.json.JsonParamConverterProvider$JsonParamConverter.fromString(JsonParamConverterProvider.java:82)\n11:19:03,792 INFO  [app] \tat org.jboss.resteasy.reactive.server.core.parameters.converters.RuntimeResolvedConverter.convert(RuntimeResolvedConverter.java:24)\n11:19:03,792 INFO  [app] \tat org.jboss.resteasy.reactive.server.handlers.ParameterHandler.handleResult(ParameterHandler.java:108)\n11:19:03,792 INFO  [app] \t... 69 more\n11:19:03,792 INFO  [app] Caused by: com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `java.util.LinkedHashMap<java.lang.String,java.lang.String>` from Array value (token `JsonToken.START_ARRAY`)\n11:19:03,792 INFO  [app]  at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1, column: 1]\n11:19:03,792 INFO  [app] \tat com.fasterxml.jackson.databind.exc.MismatchedInputException.from(MismatchedInputException.java:59)\n11:19:03,792 INFO  [app] \tat com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(DeserializationContext.java:1767)\n11:19:03,792 INFO  [app] \tat com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1541)\n11:19:03,792 INFO  [app] \tat com.fasterxml.jackson.databind.deser.std.StdDeserializer._deserializeFromArray(StdDeserializer.java:222)\n11:19:03,792 INFO  [app] \tat com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:457)\n11:19:03,792 INFO  [app] \tat com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:32)\n11:19:03,792 INFO  [app] \tat com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:342)\n11:19:03,792 INFO  [app] \tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4917)\n11:19:03,792 INFO  [app] \tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3860)\n11:19:03,792 INFO  [app] \tat io.quarkus.ts.http.restclient.reactive.json.JsonParamConverterProvider$JsonParamConverter.fromString(JsonParamConverterProvider.java:79)\n11:19:03,792 INFO  [app] \t... 71 more\n```\nThis used to work before without problems. \n\nWhen I change the method to explicitly use either HashMap or LinkedHashMap it works without problem (IDK why it works with LinkedHashMap, but cannot deserialize it to same LinkedHashMap if I specify just 'Map').\n\n\n### Expected behavior\n\n_No response_\n\n### Actual behavior\n\n_No response_\n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### Quarkus version or git rev\n\n999-SNAPSHOT\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
    "issue_word_count": 507,
    "test_files_count": 1,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/simple/MapWithParamConverterTest.java",
      "independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/EndpointIndexer.java",
      "independent-projects/resteasy-reactive/server/processor/src/main/java/org/jboss/resteasy/reactive/server/processor/ServerEndpointIndexer.java",
      "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/parameters/converters/MapConverter.java"
    ],
    "pr_changed_test_files": [
      "extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/simple/MapWithParamConverterTest.java"
    ],
    "base_commit": "34fbf30b7f52314147ac103e4d0196e9f0b1435f",
    "head_commit": "9b4238d0109af025246a39025c73391409d8bf01",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46863",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46863",
    "dockerfile": "",
    "pr_merged_at": "2025-03-18T12:55:17.000Z",
    "patch": "diff --git a/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/EndpointIndexer.java b/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/EndpointIndexer.java\nindex 87319d3c6c939..386af3c871840 100644\n--- a/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/EndpointIndexer.java\n+++ b/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/EndpointIndexer.java\n@@ -31,7 +31,6 @@\n import static org.jboss.resteasy.reactive.common.processor.ResteasyReactiveDotNames.LOCAL_DATE_TIME;\n import static org.jboss.resteasy.reactive.common.processor.ResteasyReactiveDotNames.LOCAL_TIME;\n import static org.jboss.resteasy.reactive.common.processor.ResteasyReactiveDotNames.LONG;\n-import static org.jboss.resteasy.reactive.common.processor.ResteasyReactiveDotNames.MAP;\n import static org.jboss.resteasy.reactive.common.processor.ResteasyReactiveDotNames.MATRIX_PARAM;\n import static org.jboss.resteasy.reactive.common.processor.ResteasyReactiveDotNames.MULTI;\n import static org.jboss.resteasy.reactive.common.processor.ResteasyReactiveDotNames.MULTI_PART_DATA_INPUT;\n@@ -1420,17 +1419,6 @@ && isParameterContainerType(paramType.asClassType())) {\n                     handleSortedSetParam(existingConverters, errorLocation, hasRuntimeConverters, builder, elementType,\n                             currentMethodInfo);\n                 }\n-            } else if ((pt.name().equals(MAP) || pt.name().equals(MULTI_VALUED_MAP)) && type != ParameterType.BODY\n-                    && type != ParameterType.FORM) {\n-                //Map and Multimap are typically used to represent query parameters or headers, not structured data in a request body or form.\n-                //Body and form are often mapped to POJOs or richer structures.\n-                typeHandled = true;\n-                builder.setSingle(false);\n-                elementType = toClassName(pt.arguments().get(0), currentClassInfo, actualEndpointInfo, index);\n-                if (convertible) {\n-                    handleMapParam(existingConverters, errorLocation, hasRuntimeConverters, builder, elementType,\n-                            currentMethodInfo);\n-                }\n             } else if (pt.name().equals(OPTIONAL)) {\n                 typeHandled = true;\n                 elementType = toClassName(pt.arguments().get(0), currentClassInfo, actualEndpointInfo, index);\n@@ -1591,10 +1579,6 @@ protected void handleSetParam(Map<String, String> existingConverters, String err\n             PARAM builder, String elementType, MethodInfo currentMethodInfo) {\n     }\n \n-    protected void handleMapParam(Map<String, String> existingConverters, String errorLocation, boolean hasRuntimeConverters,\n-            PARAM builder, String elementType, MethodInfo currentMethodInfo) {\n-    }\n-\n     protected void handleListParam(Map<String, String> existingConverters, String errorLocation, boolean hasRuntimeConverters,\n             PARAM builder, String elementType, MethodInfo currentMethodInfo) {\n     }\n\ndiff --git a/independent-projects/resteasy-reactive/server/processor/src/main/java/org/jboss/resteasy/reactive/server/processor/ServerEndpointIndexer.java b/independent-projects/resteasy-reactive/server/processor/src/main/java/org/jboss/resteasy/reactive/server/processor/ServerEndpointIndexer.java\nindex 97495976a2499..c49c3d7db9142 100644\n--- a/independent-projects/resteasy-reactive/server/processor/src/main/java/org/jboss/resteasy/reactive/server/processor/ServerEndpointIndexer.java\n+++ b/independent-projects/resteasy-reactive/server/processor/src/main/java/org/jboss/resteasy/reactive/server/processor/ServerEndpointIndexer.java\n@@ -75,7 +75,6 @@\n import org.jboss.resteasy.reactive.server.core.parameters.converters.LocalDateParamConverter;\n import org.jboss.resteasy.reactive.server.core.parameters.converters.LocalDateTimeParamConverter;\n import org.jboss.resteasy.reactive.server.core.parameters.converters.LocalTimeParamConverter;\n-import org.jboss.resteasy.reactive.server.core.parameters.converters.MapConverter;\n import org.jboss.resteasy.reactive.server.core.parameters.converters.NoopParameterConverter;\n import org.jboss.resteasy.reactive.server.core.parameters.converters.OffsetDateTimeParamConverter;\n import org.jboss.resteasy.reactive.server.core.parameters.converters.OffsetTimeParamConverter;\n@@ -535,14 +534,6 @@ protected void handleSetParam(Map<String, String> existingConverters, String err\n         builder.setConverter(new SetConverter.SetSupplier(converter));\n     }\n \n-    @Override\n-    protected void handleMapParam(Map<String, String> existingConverters, String errorLocation, boolean hasRuntimeConverters,\n-            ServerIndexedParameter builder, String elementType, MethodInfo currentMethodInfo) {\n-        ParameterConverterSupplier converter = extractConverter(elementType, index,\n-                existingConverters, errorLocation, hasRuntimeConverters, builder.getAnns(), currentMethodInfo);\n-        builder.setConverter(new MapConverter.MapSupplier(converter));\n-    }\n-\n     @Override\n     protected void handleListParam(Map<String, String> existingConverters, String errorLocation, boolean hasRuntimeConverters,\n             ServerIndexedParameter builder, String elementType, MethodInfo currentMethodInfo) {\n\ndiff --git a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/parameters/converters/MapConverter.java b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/parameters/converters/MapConverter.java\ndeleted file mode 100644\nindex 1b04c88c75f40..0000000000000\n--- a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/parameters/converters/MapConverter.java\n+++ /dev/null\n@@ -1,100 +0,0 @@\n-package org.jboss.resteasy.reactive.server.core.parameters.converters;\n-\n-import java.lang.annotation.Annotation;\n-import java.lang.reflect.Type;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-import jakarta.ws.rs.core.MultivaluedHashMap;\n-import jakarta.ws.rs.core.MultivaluedMap;\n-\n-import org.jboss.resteasy.reactive.server.model.ParamConverterProviders;\n-\n-public class MapConverter implements ParameterConverter {\n-\n-    private final ParameterConverter delegate;\n-\n-    public MapConverter(ParameterConverter delegate) {\n-        this.delegate = delegate;\n-    }\n-\n-    @Override\n-    public Object convert(Object parameter) {\n-        if (parameter instanceof Map) {\n-            Map<Object, Object> ret = new HashMap<>();\n-            Map<?, ?> map = (Map<?, ?>) parameter;\n-            for (Map.Entry entry : map.entrySet()) {\n-                if (delegate == null) {\n-                    ret.put(entry.getKey(), entry.getValue());\n-                } else {\n-                    ret.put(entry.getKey(), delegate.convert(entry.getValue()));\n-                }\n-            }\n-            return ret;\n-        } else if (parameter instanceof MultivaluedMap<?, ?>) {\n-            MultivaluedMap<Object, Object> ret = new MultivaluedHashMap<>();\n-            MultivaluedMap<Object, Object> multivaluedMap = (MultivaluedMap<Object, Object>) parameter;\n-            for (Map.Entry<Object, List<Object>> entry : multivaluedMap.entrySet()) {\n-                List<Object> retValues = new ArrayList<>();\n-                for (Object value : entry.getValue()) {\n-                    if (delegate == null) {\n-                        retValues.add(value);\n-                    } else {\n-                        retValues.add(delegate.convert(value));\n-                    }\n-                }\n-                ret.put(entry.getKey(), retValues);\n-            }\n-            return ret;\n-        }\n-        if (parameter == null) {\n-            return Collections.emptyMap();\n-        } else {\n-            return Collections.emptyMap();\n-        }\n-    }\n-\n-    @Override\n-    public void init(ParamConverterProviders deployment, Class<?> rawType, Type genericType, Annotation[] annotations) {\n-        delegate.init(deployment, rawType, genericType, annotations);\n-    }\n-\n-    @Override\n-    public boolean isForSingleObjectContainer() {\n-        return true;\n-    }\n-\n-    public static class MapSupplier implements DelegatingParameterConverterSupplier {\n-        private ParameterConverterSupplier delegate;\n-\n-        public MapSupplier() {\n-        }\n-\n-        // invoked by reflection for BeanParam in ClassInjectorTransformer\n-        public MapSupplier(ParameterConverterSupplier delegate) {\n-            this.delegate = delegate;\n-        }\n-\n-        @Override\n-        public String getClassName() {\n-            return MapConverter.class.getName();\n-        }\n-\n-        @Override\n-        public ParameterConverter get() {\n-            return delegate == null ? new MapConverter(null) : new MapConverter(delegate.get());\n-        }\n-\n-        public ParameterConverterSupplier getDelegate() {\n-            return delegate;\n-        }\n-\n-        public MapSupplier setDelegate(ParameterConverterSupplier delegate) {\n-            this.delegate = delegate;\n-            return this;\n-        }\n-    }\n-}\n",
    "test_patch": "diff --git a/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/simple/MapWithParamConverterTest.java b/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/simple/MapWithParamConverterTest.java\nindex f48a1db6dc0a3..419dfdd721533 100644\n--- a/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/simple/MapWithParamConverterTest.java\n+++ b/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/simple/MapWithParamConverterTest.java\n@@ -2,8 +2,6 @@\n \n import java.lang.annotation.Annotation;\n import java.lang.reflect.Type;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import java.util.stream.Collectors;\n@@ -24,7 +22,6 @@\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n \n@@ -97,26 +94,10 @@ public T fromString(String value) {\n                 return (T) value;\n             }\n             try {\n-                JsonNode jsonNode = objectMapper.readTree(value);\n-                if (jsonNode.isArray()) {\n-                    // Process as a list of maps and merge them into a single map\n-                    JavaType listType = objectMapper.getTypeFactory()\n-                            .constructCollectionType(List.class, rawType);\n-                    List<Map<String, Object>> list = objectMapper.readValue(value, listType);\n-\n-                    Map<String, Object> mergedMap = new LinkedHashMap<>();\n-                    for (Map<String, Object> map : list) {\n-                        mergedMap.putAll(map);\n-                    }\n-                    return (T) mergedMap;\n-                } else {\n-                    // single object\n-                    return genericType != null\n-                            ? objectMapper.readValue(value, genericType)\n-                            : objectMapper.readValue(value, rawType);\n-                }\n+                return genericType != null ? objectMapper.readValue(value, genericType)\n+                        : objectMapper.readValue(value, rawType);\n             } catch (JsonProcessingException e) {\n-                throw new RuntimeException(e);\n+                throw (new RuntimeException(e));\n             }\n         }\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46857",
    "pr_id": 46857,
    "issue_id": 46851,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Native compilation with liquibase + liquibase-mongo fails\n### Describe the bug\n\nHi,\n\nI use liquibase and liquibase-mongo in my project which works fine in JVM mode but when I try to compile in native mode I get an error.\n\nIf I remove one of the liquibase dependencies it works as expected.\n\nReproduced with a freshly generated Quarkus project.\n\nIs there a possible workaround ?\n\nThanks.\n\n### Expected behavior\n\nThe native compilation succeeds.\n\n### Actual behavior\n\n I get the following error:\n```\nError: Substition: liquibase.util.LiquibaseUtil.getBuildInfo(String) conflicts with previously registered: liquibase.util.LiquibaseUtil.getBuildInfo(String)\ncom.oracle.svm.core.util.UserError$UserException: Substition: liquibase.util.LiquibaseUtil.getBuildInfo(String) conflicts with previously registered: liquibase.util.LiquibaseUtil.getBuildInfo(String)\n        at org.graalvm.nativeimage.builder/com.oracle.svm.core.util.UserError.abort(UserError.java:73)\n        at org.graalvm.nativeimage.builder/com.oracle.svm.core.util.UserError.guarantee(UserError.java:97)\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.substitute.AnnotationSubstitutionProcessor.register(AnnotationSubstitutionProcessor.java:964)\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.substitute.AnnotationSubstitutionProcessor.handleMethodInAliasClass(AnnotationSubstitutionProcessor.java:485)\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.substitute.AnnotationSubstitutionProcessor.handleAliasClass(AnnotationSubstitutionProcessor.java:422)\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.substitute.AnnotationSubstitutionProcessor.handleClass(AnnotationSubstitutionProcessor.java:395)\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.substitute.AnnotationSubstitutionProcessor.init(AnnotationSubstitutionProcessor.java:351)\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.createAnnotationSubstitutionProcessor(NativeImageGenerator.java:1029)\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.setupNativeImage(NativeImageGenerator.java:907)\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.doRun(NativeImageGenerator.java:590)\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.run(NativeImageGenerator.java:550)\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.buildImage(NativeImageGeneratorRunner.java:539)\n```\n\n### How to Reproduce?\n\n[code-with-quarkus-liquibase-liquibaseMongo.zip](https://github.com/user-attachments/files/19292423/code-with-quarkus-liquibase-liquibaseMongo.zip)\n\nor \n- generate a Quarkus project with liquibase + liquibase-mongo\n- add minimal configuration (application.properties + db/changeLog.xml)\n- do a native compilation: `mvn install -Dnative -DskipTests -Dquarkus.native.container-build=true`\n\n### Output of `uname -a` or `ver`\n\nUbuntu 24.04.2 LTS (on WSL)\n\n### Output of `java -version`\n\nopenjdk version \"21.0.6\" 2025-01-21\n\n### Quarkus version or git rev\n\n3.19.3\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nApache Maven 3.8.7\n\n### Additional information\n\n_No response_",
    "issue_word_count": 394,
    "test_files_count": 68,
    "non_test_files_count": 32,
    "pr_changed_files": [
      "bom/application/pom.xml",
      "extensions/liquibase-mongodb/runtime/src/main/java/io/quarkus/liquibase/mongodb/runtime/graal/SubstituteLiquibaseUtil.java",
      "extensions/liquibase-mongodb/runtime/src/main/java/io/quarkus/liquibase/mongodb/runtime/graal/SubstituteOsgiUtil.java",
      "extensions/liquibase/liquibase-common/pom.xml",
      "extensions/liquibase/liquibase-common/src/main/java/io/quarkus/liquibase/common/runtime/graal/SubstituteLiquibaseUtil.java",
      "extensions/liquibase/liquibase-common/src/main/java/io/quarkus/liquibase/common/runtime/graal/SubstituteOsgiUtil.java",
      "extensions/liquibase/liquibase-mongodb/deployment/pom.xml",
      "extensions/liquibase/liquibase-mongodb/deployment/src/main/java/io/quarkus/liquibase/mongodb/deployment/LiquibaseMongodbProcessor.java",
      "extensions/liquibase/liquibase-mongodb/pom.xml",
      "extensions/liquibase/liquibase-mongodb/runtime/pom.xml",
      "extensions/liquibase/liquibase-mongodb/runtime/src/main/java/io/quarkus/liquibase/mongodb/LiquibaseMongodbFactory.java",
      "extensions/liquibase/liquibase-mongodb/runtime/src/main/java/io/quarkus/liquibase/mongodb/runtime/LiquibaseMongodbBuildTimeConfig.java",
      "extensions/liquibase/liquibase-mongodb/runtime/src/main/java/io/quarkus/liquibase/mongodb/runtime/LiquibaseMongodbConfig.java",
      "extensions/liquibase/liquibase-mongodb/runtime/src/main/java/io/quarkus/liquibase/mongodb/runtime/LiquibaseMongodbRecorder.java",
      "extensions/liquibase/liquibase-mongodb/runtime/src/main/resources/META-INF/quarkus-extension.yaml",
      "extensions/liquibase/liquibase/deployment/pom.xml",
      "extensions/liquibase/liquibase/deployment/src/main/java/io/quarkus/liquibase/deployment/LiquibaseProcessor.java",
      "extensions/liquibase/liquibase/deployment/src/main/java/io/quarkus/liquibase/deployment/devui/LiquibaseDevUIProcessor.java",
      "extensions/liquibase/liquibase/deployment/src/main/resources/dev-ui/qwc-liquibase-card.js",
      "extensions/liquibase/liquibase/deployment/src/main/resources/dev-ui/qwc-liquibase-datasources.js",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionBaselineOnMigrateNamedDataSourceTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionBaselineOnMigrateTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionCleanAndMigrateAtStartTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionCleanAtStartTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigActiveFalseDefaultDatasourceDynamicInjectionTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigActiveFalseDefaultDatasourceStaticInjectionTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigActiveFalseNamedDatasourceDynamicInjectionTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigActiveFalseNamedDatasourceStaticInjectionTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigDefaultDataSourceTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigDefaultDataSourceWithoutLiquibaseTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigFixture.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigMultiDataSourcesTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigMultiDataSourcesWithoutDefaultTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigNamedDataSourceWithoutDefaultTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigNamedDataSourceWithoutLiquibaseTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigUrlMissingDefaultDatasourceDynamicInjectionTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigUrlMissingDefaultDatasourceStaticInjectionTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigUrlMissingNamedDataSourceDynamicInjectionTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigUrlMissingNamedDataSourceStaticInjectionTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionLoadChangeLogTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartDefaultDatasourceConfigActiveFalseTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartDefaultDatasourceConfigUrlMissingTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartDirectoryChangeLogTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartJsonChangeLogTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartNamedDataSourceTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartNamedDatasourceConfigActiveFalseTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartNamedDatasourceConfigUrlMissingTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartSqlChangeLogTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartXmlChangeLogTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartYamlChangeLogTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseTestResources.java",
      "extensions/liquibase/liquibase/deployment/src/test/resources/baseline-on-migrate-named-datasource.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/baseline-on-migrate.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/clean-and-migrate-at-start-config.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/clean-at-start-config.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/config-for-default-datasource-without-liquibase.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/config-for-default-datasource.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/config-for-missing-named-datasource.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/config-for-multiple-datasources-without-default.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/config-for-multiple-datasources.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/config-for-named-datasource-without-default.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/config-for-named-datasource-without-liquibase.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/db/all/changeLog.xml",
      "extensions/liquibase/liquibase/deployment/src/test/resources/db/all/test/changeLog.sql",
      "extensions/liquibase/liquibase/deployment/src/test/resources/db/changeLog.xml",
      "extensions/liquibase/liquibase/deployment/src/test/resources/db/inventory/changeLog.xml",
      "extensions/liquibase/liquibase/deployment/src/test/resources/db/json/changeLog.json",
      "extensions/liquibase/liquibase/deployment/src/test/resources/db/json/create-tables.json",
      "extensions/liquibase/liquibase/deployment/src/test/resources/db/json/test/test.json",
      "extensions/liquibase/liquibase/deployment/src/test/resources/db/sql/changeLog.sql",
      "extensions/liquibase/liquibase/deployment/src/test/resources/db/users/changeLog.xml",
      "extensions/liquibase/liquibase/deployment/src/test/resources/db/xml/changeLog.xml",
      "extensions/liquibase/liquibase/deployment/src/test/resources/db/xml/create-tables.xml",
      "extensions/liquibase/liquibase/deployment/src/test/resources/db/xml/create-views.xml",
      "extensions/liquibase/liquibase/deployment/src/test/resources/db/xml/test/test.xml",
      "extensions/liquibase/liquibase/deployment/src/test/resources/db/yaml/changeLog.yaml",
      "extensions/liquibase/liquibase/deployment/src/test/resources/db/yaml/create-tables.yaml",
      "extensions/liquibase/liquibase/deployment/src/test/resources/db/yaml/test/test.yaml",
      "extensions/liquibase/liquibase/deployment/src/test/resources/h2-init-data.sql",
      "extensions/liquibase/liquibase/deployment/src/test/resources/load-change-log-config.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/migrate-at-start-config-named-datasource.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/migrate-at-start-config.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/migrate-at-start-directory-config.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/migrate-at-start-json-config.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/migrate-at-start-sql-config.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/migrate-at-start-xml-config.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/migrate-at-start-yaml-config.properties",
      "extensions/liquibase/liquibase/pom.xml",
      "extensions/liquibase/liquibase/runtime/pom.xml",
      "extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/LiquibaseContext.java",
      "extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/LiquibaseDataSource.java",
      "extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/LiquibaseFactory.java",
      "extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/LiquibaseLenientZipPathHandler.java",
      "extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseBuildTimeConfig.java",
      "extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseConfig.java",
      "extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseCreator.java",
      "extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseDataSourceBuildTimeConfig.java",
      "extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseDataSourceRuntimeConfig.java",
      "extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseFactoryProducer.java"
    ],
    "pr_changed_test_files": [
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionBaselineOnMigrateNamedDataSourceTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionBaselineOnMigrateTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionCleanAndMigrateAtStartTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionCleanAtStartTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigActiveFalseDefaultDatasourceDynamicInjectionTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigActiveFalseDefaultDatasourceStaticInjectionTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigActiveFalseNamedDatasourceDynamicInjectionTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigActiveFalseNamedDatasourceStaticInjectionTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigDefaultDataSourceTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigDefaultDataSourceWithoutLiquibaseTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigFixture.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigMultiDataSourcesTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigMultiDataSourcesWithoutDefaultTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigNamedDataSourceWithoutDefaultTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigNamedDataSourceWithoutLiquibaseTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigUrlMissingDefaultDatasourceDynamicInjectionTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigUrlMissingDefaultDatasourceStaticInjectionTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigUrlMissingNamedDataSourceDynamicInjectionTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigUrlMissingNamedDataSourceStaticInjectionTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionLoadChangeLogTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartDefaultDatasourceConfigActiveFalseTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartDefaultDatasourceConfigUrlMissingTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartDirectoryChangeLogTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartJsonChangeLogTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartNamedDataSourceTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartNamedDatasourceConfigActiveFalseTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartNamedDatasourceConfigUrlMissingTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartSqlChangeLogTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartXmlChangeLogTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartYamlChangeLogTest.java",
      "extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseTestResources.java",
      "extensions/liquibase/liquibase/deployment/src/test/resources/baseline-on-migrate-named-datasource.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/baseline-on-migrate.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/clean-and-migrate-at-start-config.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/clean-at-start-config.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/config-for-default-datasource-without-liquibase.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/config-for-default-datasource.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/config-for-missing-named-datasource.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/config-for-multiple-datasources-without-default.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/config-for-multiple-datasources.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/config-for-named-datasource-without-default.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/config-for-named-datasource-without-liquibase.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/db/all/changeLog.xml",
      "extensions/liquibase/liquibase/deployment/src/test/resources/db/all/test/changeLog.sql",
      "extensions/liquibase/liquibase/deployment/src/test/resources/db/changeLog.xml",
      "extensions/liquibase/liquibase/deployment/src/test/resources/db/inventory/changeLog.xml",
      "extensions/liquibase/liquibase/deployment/src/test/resources/db/json/changeLog.json",
      "extensions/liquibase/liquibase/deployment/src/test/resources/db/json/create-tables.json",
      "extensions/liquibase/liquibase/deployment/src/test/resources/db/json/test/test.json",
      "extensions/liquibase/liquibase/deployment/src/test/resources/db/sql/changeLog.sql",
      "extensions/liquibase/liquibase/deployment/src/test/resources/db/users/changeLog.xml",
      "extensions/liquibase/liquibase/deployment/src/test/resources/db/xml/changeLog.xml",
      "extensions/liquibase/liquibase/deployment/src/test/resources/db/xml/create-tables.xml",
      "extensions/liquibase/liquibase/deployment/src/test/resources/db/xml/create-views.xml",
      "extensions/liquibase/liquibase/deployment/src/test/resources/db/xml/test/test.xml",
      "extensions/liquibase/liquibase/deployment/src/test/resources/db/yaml/changeLog.yaml",
      "extensions/liquibase/liquibase/deployment/src/test/resources/db/yaml/create-tables.yaml",
      "extensions/liquibase/liquibase/deployment/src/test/resources/db/yaml/test/test.yaml",
      "extensions/liquibase/liquibase/deployment/src/test/resources/h2-init-data.sql",
      "extensions/liquibase/liquibase/deployment/src/test/resources/load-change-log-config.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/migrate-at-start-config-named-datasource.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/migrate-at-start-config.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/migrate-at-start-directory-config.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/migrate-at-start-json-config.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/migrate-at-start-sql-config.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/migrate-at-start-xml-config.properties",
      "extensions/liquibase/liquibase/deployment/src/test/resources/migrate-at-start-yaml-config.properties"
    ],
    "base_commit": "ecdc140fa5175ffe3806cf6427b47a69eb10f4c1",
    "head_commit": "8b573180ccca99eeaaf81fe0ca179a037005873d",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46857",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46857",
    "dockerfile": "",
    "pr_merged_at": "2025-03-18T13:32:30.000Z",
    "patch": "diff --git a/bom/application/pom.xml b/bom/application/pom.xml\nindex 0d5ad49a962f7..be3c72a7d118c 100644\n--- a/bom/application/pom.xml\n+++ b/bom/application/pom.xml\n@@ -1194,6 +1194,11 @@\n                 <artifactId>quarkus-flyway-db2-deployment</artifactId>\n                 <version>${project.version}</version>\n             </dependency>\n+            <dependency>\n+                <groupId>io.quarkus</groupId>\n+                <artifactId>quarkus-liquibase-common</artifactId>\n+                <version>${project.version}</version>\n+            </dependency>\n             <dependency>\n                 <groupId>io.quarkus</groupId>\n                 <artifactId>quarkus-liquibase</artifactId>\n\ndiff --git a/extensions/liquibase-mongodb/runtime/src/main/java/io/quarkus/liquibase/mongodb/runtime/graal/SubstituteLiquibaseUtil.java b/extensions/liquibase-mongodb/runtime/src/main/java/io/quarkus/liquibase/mongodb/runtime/graal/SubstituteLiquibaseUtil.java\ndeleted file mode 100644\nindex 001478efc5844..0000000000000\n--- a/extensions/liquibase-mongodb/runtime/src/main/java/io/quarkus/liquibase/mongodb/runtime/graal/SubstituteLiquibaseUtil.java\n+++ /dev/null\n@@ -1,52 +0,0 @@\n-package io.quarkus.liquibase.mongodb.runtime.graal;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.net.URL;\n-import java.util.Enumeration;\n-import java.util.Properties;\n-\n-import com.oracle.svm.core.annotate.Alias;\n-import com.oracle.svm.core.annotate.Substitute;\n-import com.oracle.svm.core.annotate.TargetClass;\n-\n-import liquibase.Scope;\n-import liquibase.util.LiquibaseUtil;\n-\n-@TargetClass(liquibase.util.LiquibaseUtil.class)\n-final class SubstituteLiquibaseUtil {\n-\n-    @Alias\n-    private static Properties liquibaseBuildProperties;\n-\n-    @Substitute\n-    private static String getBuildInfo(String propertyId) {\n-        // this is a bit of a mess: we have to get rid of the entire first part that accesses osgi classes\n-        // and only retain the second part\n-        // taken from: https://github.com/liquibase/liquibase/blob/v4.7.1/liquibase-core/src/main/java/liquibase/util/LiquibaseUtil.java#L57-L91\n-        if (liquibaseBuildProperties == null) {\n-            try {\n-                liquibaseBuildProperties = new Properties();\n-                final Enumeration<URL> propertiesUrls = Scope.getCurrentScope().getClassLoader()\n-                        .getResources(\"liquibase.build.properties\");\n-                while (propertiesUrls.hasMoreElements()) {\n-                    final URL url = propertiesUrls.nextElement();\n-                    try (InputStream buildProperties = url.openStream()) {\n-                        if (buildProperties != null) {\n-                            liquibaseBuildProperties.load(buildProperties);\n-                        }\n-                    }\n-                }\n-            } catch (IOException e) {\n-                Scope.getCurrentScope().getLog(LiquibaseUtil.class).severe(\"Cannot read liquibase.build.properties\", e);\n-            }\n-        }\n-\n-        String value;\n-        value = liquibaseBuildProperties.getProperty(propertyId);\n-        if (value == null) {\n-            value = \"UNKNOWN\";\n-        }\n-        return value;\n-    }\n-}\n\ndiff --git a/extensions/liquibase-mongodb/runtime/src/main/java/io/quarkus/liquibase/mongodb/runtime/graal/SubstituteOsgiUtil.java b/extensions/liquibase-mongodb/runtime/src/main/java/io/quarkus/liquibase/mongodb/runtime/graal/SubstituteOsgiUtil.java\ndeleted file mode 100644\nindex 3b9073bc33d0f..0000000000000\n--- a/extensions/liquibase-mongodb/runtime/src/main/java/io/quarkus/liquibase/mongodb/runtime/graal/SubstituteOsgiUtil.java\n+++ /dev/null\n@@ -1,13 +0,0 @@\n-package io.quarkus.liquibase.mongodb.runtime.graal;\n-\n-import com.oracle.svm.core.annotate.Substitute;\n-import com.oracle.svm.core.annotate.TargetClass;\n-\n-@TargetClass(liquibase.util.OsgiUtil.class)\n-final class SubstituteOsgiUtil {\n-\n-    @Substitute\n-    public static <T> Class<T> loadClass(String className) throws ClassNotFoundException {\n-        throw new UnsupportedOperationException(\"OSGi is not supported by quarkus-liquibase\");\n-    }\n-}\n\ndiff --git a/extensions/liquibase/liquibase-common/pom.xml b/extensions/liquibase/liquibase-common/pom.xml\nnew file mode 100644\nindex 0000000000000..01dee59488780\n--- /dev/null\n+++ b/extensions/liquibase/liquibase-common/pom.xml\n@@ -0,0 +1,29 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>quarkus-liquibase-parent-aggregator</artifactId>\n+        <groupId>io.quarkus</groupId>\n+        <version>999-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>quarkus-liquibase-common</artifactId>\n+    <version>999-SNAPSHOT</version>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.liquibase</groupId>\n+            <artifactId>liquibase-core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.graalvm.sdk</groupId>\n+            <artifactId>nativeimage</artifactId>\n+            <scope>provided</scope>\n+        </dependency>\n+    </dependencies>\n+\n+\n+</project>\n\ndiff --git a/extensions/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/graal/SubstituteLiquibaseUtil.java b/extensions/liquibase/liquibase-common/src/main/java/io/quarkus/liquibase/common/runtime/graal/SubstituteLiquibaseUtil.java\nsimilarity index 97%\nrename from extensions/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/graal/SubstituteLiquibaseUtil.java\nrename to extensions/liquibase/liquibase-common/src/main/java/io/quarkus/liquibase/common/runtime/graal/SubstituteLiquibaseUtil.java\nindex 2952d30086a75..ea6454d8b6812 100644\n--- a/extensions/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/graal/SubstituteLiquibaseUtil.java\n+++ b/extensions/liquibase/liquibase-common/src/main/java/io/quarkus/liquibase/common/runtime/graal/SubstituteLiquibaseUtil.java\n@@ -1,4 +1,4 @@\n-package io.quarkus.liquibase.runtime.graal;\n+package io.quarkus.liquibase.common.runtime.graal;\n \n import java.io.IOException;\n import java.io.InputStream;\n\ndiff --git a/extensions/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/graal/SubstituteOsgiUtil.java b/extensions/liquibase/liquibase-common/src/main/java/io/quarkus/liquibase/common/runtime/graal/SubstituteOsgiUtil.java\nsimilarity index 88%\nrename from extensions/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/graal/SubstituteOsgiUtil.java\nrename to extensions/liquibase/liquibase-common/src/main/java/io/quarkus/liquibase/common/runtime/graal/SubstituteOsgiUtil.java\nindex d0e724b8f8567..6d6f94d56cd47 100644\n--- a/extensions/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/graal/SubstituteOsgiUtil.java\n+++ b/extensions/liquibase/liquibase-common/src/main/java/io/quarkus/liquibase/common/runtime/graal/SubstituteOsgiUtil.java\n@@ -1,4 +1,4 @@\n-package io.quarkus.liquibase.runtime.graal;\n+package io.quarkus.liquibase.common.runtime.graal;\n \n import com.oracle.svm.core.annotate.Substitute;\n import com.oracle.svm.core.annotate.TargetClass;\n\ndiff --git a/extensions/liquibase-mongodb/deployment/pom.xml b/extensions/liquibase/liquibase-mongodb/deployment/pom.xml\nsimilarity index 100%\nrename from extensions/liquibase-mongodb/deployment/pom.xml\nrename to extensions/liquibase/liquibase-mongodb/deployment/pom.xml\n\ndiff --git a/extensions/liquibase-mongodb/deployment/src/main/java/io/quarkus/liquibase/mongodb/deployment/LiquibaseMongodbProcessor.java b/extensions/liquibase/liquibase-mongodb/deployment/src/main/java/io/quarkus/liquibase/mongodb/deployment/LiquibaseMongodbProcessor.java\nsimilarity index 100%\nrename from extensions/liquibase-mongodb/deployment/src/main/java/io/quarkus/liquibase/mongodb/deployment/LiquibaseMongodbProcessor.java\nrename to extensions/liquibase/liquibase-mongodb/deployment/src/main/java/io/quarkus/liquibase/mongodb/deployment/LiquibaseMongodbProcessor.java\n\ndiff --git a/extensions/liquibase-mongodb/pom.xml b/extensions/liquibase/liquibase-mongodb/pom.xml\nsimilarity index 89%\nrename from extensions/liquibase-mongodb/pom.xml\nrename to extensions/liquibase/liquibase-mongodb/pom.xml\nindex f9432f43440cb..a7e16fc8f1865 100644\n--- a/extensions/liquibase-mongodb/pom.xml\n+++ b/extensions/liquibase/liquibase-mongodb/pom.xml\n@@ -3,7 +3,7 @@\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n     <parent>\n-        <artifactId>quarkus-extensions-parent</artifactId>\n+        <artifactId>quarkus-liquibase-parent-aggregator</artifactId>\n         <groupId>io.quarkus</groupId>\n         <version>999-SNAPSHOT</version>\n         <relativePath>../pom.xml</relativePath>\n@@ -19,4 +19,4 @@\n         <module>deployment</module>\n     </modules>\n \n-</project>\n\\ No newline at end of file\n+</project>\n\ndiff --git a/extensions/liquibase-mongodb/runtime/pom.xml b/extensions/liquibase/liquibase-mongodb/runtime/pom.xml\nsimilarity index 95%\nrename from extensions/liquibase-mongodb/runtime/pom.xml\nrename to extensions/liquibase/liquibase-mongodb/runtime/pom.xml\nindex 856a9fd6f3bde..75a6913e02418 100644\n--- a/extensions/liquibase-mongodb/runtime/pom.xml\n+++ b/extensions/liquibase/liquibase-mongodb/runtime/pom.xml\n@@ -17,6 +17,10 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-mongodb-client</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-liquibase-common</artifactId>\n+        </dependency>\n         <dependency>\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-jaxb</artifactId>\n\ndiff --git a/extensions/liquibase-mongodb/runtime/src/main/java/io/quarkus/liquibase/mongodb/LiquibaseMongodbFactory.java b/extensions/liquibase/liquibase-mongodb/runtime/src/main/java/io/quarkus/liquibase/mongodb/LiquibaseMongodbFactory.java\nsimilarity index 100%\nrename from extensions/liquibase-mongodb/runtime/src/main/java/io/quarkus/liquibase/mongodb/LiquibaseMongodbFactory.java\nrename to extensions/liquibase/liquibase-mongodb/runtime/src/main/java/io/quarkus/liquibase/mongodb/LiquibaseMongodbFactory.java\n\ndiff --git a/extensions/liquibase-mongodb/runtime/src/main/java/io/quarkus/liquibase/mongodb/runtime/LiquibaseMongodbBuildTimeConfig.java b/extensions/liquibase/liquibase-mongodb/runtime/src/main/java/io/quarkus/liquibase/mongodb/runtime/LiquibaseMongodbBuildTimeConfig.java\nsimilarity index 100%\nrename from extensions/liquibase-mongodb/runtime/src/main/java/io/quarkus/liquibase/mongodb/runtime/LiquibaseMongodbBuildTimeConfig.java\nrename to extensions/liquibase/liquibase-mongodb/runtime/src/main/java/io/quarkus/liquibase/mongodb/runtime/LiquibaseMongodbBuildTimeConfig.java\n\ndiff --git a/extensions/liquibase-mongodb/runtime/src/main/java/io/quarkus/liquibase/mongodb/runtime/LiquibaseMongodbConfig.java b/extensions/liquibase/liquibase-mongodb/runtime/src/main/java/io/quarkus/liquibase/mongodb/runtime/LiquibaseMongodbConfig.java\nsimilarity index 100%\nrename from extensions/liquibase-mongodb/runtime/src/main/java/io/quarkus/liquibase/mongodb/runtime/LiquibaseMongodbConfig.java\nrename to extensions/liquibase/liquibase-mongodb/runtime/src/main/java/io/quarkus/liquibase/mongodb/runtime/LiquibaseMongodbConfig.java\n\ndiff --git a/extensions/liquibase-mongodb/runtime/src/main/java/io/quarkus/liquibase/mongodb/runtime/LiquibaseMongodbRecorder.java b/extensions/liquibase/liquibase-mongodb/runtime/src/main/java/io/quarkus/liquibase/mongodb/runtime/LiquibaseMongodbRecorder.java\nsimilarity index 100%\nrename from extensions/liquibase-mongodb/runtime/src/main/java/io/quarkus/liquibase/mongodb/runtime/LiquibaseMongodbRecorder.java\nrename to extensions/liquibase/liquibase-mongodb/runtime/src/main/java/io/quarkus/liquibase/mongodb/runtime/LiquibaseMongodbRecorder.java\n\ndiff --git a/extensions/liquibase-mongodb/runtime/src/main/resources/META-INF/quarkus-extension.yaml b/extensions/liquibase/liquibase-mongodb/runtime/src/main/resources/META-INF/quarkus-extension.yaml\nsimilarity index 100%\nrename from extensions/liquibase-mongodb/runtime/src/main/resources/META-INF/quarkus-extension.yaml\nrename to extensions/liquibase/liquibase-mongodb/runtime/src/main/resources/META-INF/quarkus-extension.yaml\n\ndiff --git a/extensions/liquibase/deployment/pom.xml b/extensions/liquibase/liquibase/deployment/pom.xml\nsimilarity index 100%\nrename from extensions/liquibase/deployment/pom.xml\nrename to extensions/liquibase/liquibase/deployment/pom.xml\n\ndiff --git a/extensions/liquibase/deployment/src/main/java/io/quarkus/liquibase/deployment/LiquibaseProcessor.java b/extensions/liquibase/liquibase/deployment/src/main/java/io/quarkus/liquibase/deployment/LiquibaseProcessor.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/main/java/io/quarkus/liquibase/deployment/LiquibaseProcessor.java\nrename to extensions/liquibase/liquibase/deployment/src/main/java/io/quarkus/liquibase/deployment/LiquibaseProcessor.java\n\ndiff --git a/extensions/liquibase/deployment/src/main/java/io/quarkus/liquibase/deployment/devui/LiquibaseDevUIProcessor.java b/extensions/liquibase/liquibase/deployment/src/main/java/io/quarkus/liquibase/deployment/devui/LiquibaseDevUIProcessor.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/main/java/io/quarkus/liquibase/deployment/devui/LiquibaseDevUIProcessor.java\nrename to extensions/liquibase/liquibase/deployment/src/main/java/io/quarkus/liquibase/deployment/devui/LiquibaseDevUIProcessor.java\n\ndiff --git a/extensions/liquibase/deployment/src/main/resources/dev-ui/qwc-liquibase-card.js b/extensions/liquibase/liquibase/deployment/src/main/resources/dev-ui/qwc-liquibase-card.js\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/main/resources/dev-ui/qwc-liquibase-card.js\nrename to extensions/liquibase/liquibase/deployment/src/main/resources/dev-ui/qwc-liquibase-card.js\n\ndiff --git a/extensions/liquibase/deployment/src/main/resources/dev-ui/qwc-liquibase-datasources.js b/extensions/liquibase/liquibase/deployment/src/main/resources/dev-ui/qwc-liquibase-datasources.js\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/main/resources/dev-ui/qwc-liquibase-datasources.js\nrename to extensions/liquibase/liquibase/deployment/src/main/resources/dev-ui/qwc-liquibase-datasources.js\n\ndiff --git a/extensions/liquibase/liquibase/pom.xml b/extensions/liquibase/liquibase/pom.xml\nnew file mode 100644\nindex 0000000000000..0fbecf16ad369\n--- /dev/null\n+++ b/extensions/liquibase/liquibase/pom.xml\n@@ -0,0 +1,21 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <parent>\n+        <artifactId>quarkus-liquibase-parent-aggregator</artifactId>\n+        <groupId>io.quarkus</groupId>\n+        <version>999-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>quarkus-liquibase-parent</artifactId>\n+    <name>Quarkus - Liquibase</name>\n+    <packaging>pom</packaging>\n+    <modules>\n+        <module>runtime</module>\n+        <module>deployment</module>\n+    </modules>\n+</project>\n\ndiff --git a/extensions/liquibase/runtime/pom.xml b/extensions/liquibase/liquibase/runtime/pom.xml\nsimilarity index 96%\nrename from extensions/liquibase/runtime/pom.xml\nrename to extensions/liquibase/liquibase/runtime/pom.xml\nindex 7cf7e6533a7bc..d36be99afa54c 100644\n--- a/extensions/liquibase/runtime/pom.xml\n+++ b/extensions/liquibase/liquibase/runtime/pom.xml\n@@ -17,6 +17,10 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-core</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-liquibase-common</artifactId>\n+        </dependency>\n         <dependency>\n             <groupId>org.liquibase</groupId>\n             <artifactId>liquibase-core</artifactId>\n\ndiff --git a/extensions/liquibase/runtime/src/main/java/io/quarkus/liquibase/LiquibaseContext.java b/extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/LiquibaseContext.java\nsimilarity index 100%\nrename from extensions/liquibase/runtime/src/main/java/io/quarkus/liquibase/LiquibaseContext.java\nrename to extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/LiquibaseContext.java\n\ndiff --git a/extensions/liquibase/runtime/src/main/java/io/quarkus/liquibase/LiquibaseDataSource.java b/extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/LiquibaseDataSource.java\nsimilarity index 100%\nrename from extensions/liquibase/runtime/src/main/java/io/quarkus/liquibase/LiquibaseDataSource.java\nrename to extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/LiquibaseDataSource.java\n\ndiff --git a/extensions/liquibase/runtime/src/main/java/io/quarkus/liquibase/LiquibaseFactory.java b/extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/LiquibaseFactory.java\nsimilarity index 100%\nrename from extensions/liquibase/runtime/src/main/java/io/quarkus/liquibase/LiquibaseFactory.java\nrename to extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/LiquibaseFactory.java\n\ndiff --git a/extensions/liquibase/runtime/src/main/java/io/quarkus/liquibase/LiquibaseLenientZipPathHandler.java b/extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/LiquibaseLenientZipPathHandler.java\nsimilarity index 100%\nrename from extensions/liquibase/runtime/src/main/java/io/quarkus/liquibase/LiquibaseLenientZipPathHandler.java\nrename to extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/LiquibaseLenientZipPathHandler.java\n\ndiff --git a/extensions/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseBuildTimeConfig.java b/extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseBuildTimeConfig.java\nsimilarity index 100%\nrename from extensions/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseBuildTimeConfig.java\nrename to extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseBuildTimeConfig.java\n\ndiff --git a/extensions/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseConfig.java b/extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseConfig.java\nsimilarity index 100%\nrename from extensions/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseConfig.java\nrename to extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseConfig.java\n\ndiff --git a/extensions/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseCreator.java b/extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseCreator.java\nsimilarity index 100%\nrename from extensions/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseCreator.java\nrename to extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseCreator.java\n\ndiff --git a/extensions/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseDataSourceBuildTimeConfig.java b/extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseDataSourceBuildTimeConfig.java\nsimilarity index 100%\nrename from extensions/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseDataSourceBuildTimeConfig.java\nrename to extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseDataSourceBuildTimeConfig.java\n\ndiff --git a/extensions/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseDataSourceRuntimeConfig.java b/extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseDataSourceRuntimeConfig.java\nsimilarity index 100%\nrename from extensions/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseDataSourceRuntimeConfig.java\nrename to extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseDataSourceRuntimeConfig.java\n\ndiff --git a/extensions/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseFactoryProducer.java b/extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseFactoryProducer.java\nsimilarity index 100%\nrename from extensions/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseFactoryProducer.java\nrename to extensions/liquibase/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseFactoryProducer.java\n",
    "test_patch": "diff --git a/extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionBaselineOnMigrateNamedDataSourceTest.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionBaselineOnMigrateNamedDataSourceTest.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionBaselineOnMigrateNamedDataSourceTest.java\nrename to extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionBaselineOnMigrateNamedDataSourceTest.java\n\ndiff --git a/extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionBaselineOnMigrateTest.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionBaselineOnMigrateTest.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionBaselineOnMigrateTest.java\nrename to extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionBaselineOnMigrateTest.java\n\ndiff --git a/extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionCleanAndMigrateAtStartTest.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionCleanAndMigrateAtStartTest.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionCleanAndMigrateAtStartTest.java\nrename to extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionCleanAndMigrateAtStartTest.java\n\ndiff --git a/extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionCleanAtStartTest.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionCleanAtStartTest.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionCleanAtStartTest.java\nrename to extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionCleanAtStartTest.java\n\ndiff --git a/extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigActiveFalseDefaultDatasourceDynamicInjectionTest.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigActiveFalseDefaultDatasourceDynamicInjectionTest.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigActiveFalseDefaultDatasourceDynamicInjectionTest.java\nrename to extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigActiveFalseDefaultDatasourceDynamicInjectionTest.java\n\ndiff --git a/extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigActiveFalseDefaultDatasourceStaticInjectionTest.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigActiveFalseDefaultDatasourceStaticInjectionTest.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigActiveFalseDefaultDatasourceStaticInjectionTest.java\nrename to extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigActiveFalseDefaultDatasourceStaticInjectionTest.java\n\ndiff --git a/extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigActiveFalseNamedDatasourceDynamicInjectionTest.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigActiveFalseNamedDatasourceDynamicInjectionTest.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigActiveFalseNamedDatasourceDynamicInjectionTest.java\nrename to extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigActiveFalseNamedDatasourceDynamicInjectionTest.java\n\ndiff --git a/extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigActiveFalseNamedDatasourceStaticInjectionTest.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigActiveFalseNamedDatasourceStaticInjectionTest.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigActiveFalseNamedDatasourceStaticInjectionTest.java\nrename to extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigActiveFalseNamedDatasourceStaticInjectionTest.java\n\ndiff --git a/extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigDefaultDataSourceTest.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigDefaultDataSourceTest.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigDefaultDataSourceTest.java\nrename to extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigDefaultDataSourceTest.java\n\ndiff --git a/extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigDefaultDataSourceWithoutLiquibaseTest.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigDefaultDataSourceWithoutLiquibaseTest.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigDefaultDataSourceWithoutLiquibaseTest.java\nrename to extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigDefaultDataSourceWithoutLiquibaseTest.java\n\ndiff --git a/extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigFixture.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigFixture.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigFixture.java\nrename to extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigFixture.java\n\ndiff --git a/extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigMultiDataSourcesTest.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigMultiDataSourcesTest.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigMultiDataSourcesTest.java\nrename to extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigMultiDataSourcesTest.java\n\ndiff --git a/extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigMultiDataSourcesWithoutDefaultTest.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigMultiDataSourcesWithoutDefaultTest.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigMultiDataSourcesWithoutDefaultTest.java\nrename to extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigMultiDataSourcesWithoutDefaultTest.java\n\ndiff --git a/extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigNamedDataSourceWithoutDefaultTest.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigNamedDataSourceWithoutDefaultTest.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigNamedDataSourceWithoutDefaultTest.java\nrename to extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigNamedDataSourceWithoutDefaultTest.java\n\ndiff --git a/extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigNamedDataSourceWithoutLiquibaseTest.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigNamedDataSourceWithoutLiquibaseTest.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigNamedDataSourceWithoutLiquibaseTest.java\nrename to extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigNamedDataSourceWithoutLiquibaseTest.java\n\ndiff --git a/extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigUrlMissingDefaultDatasourceDynamicInjectionTest.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigUrlMissingDefaultDatasourceDynamicInjectionTest.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigUrlMissingDefaultDatasourceDynamicInjectionTest.java\nrename to extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigUrlMissingDefaultDatasourceDynamicInjectionTest.java\n\ndiff --git a/extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigUrlMissingDefaultDatasourceStaticInjectionTest.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigUrlMissingDefaultDatasourceStaticInjectionTest.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigUrlMissingDefaultDatasourceStaticInjectionTest.java\nrename to extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigUrlMissingDefaultDatasourceStaticInjectionTest.java\n\ndiff --git a/extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigUrlMissingNamedDataSourceDynamicInjectionTest.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigUrlMissingNamedDataSourceDynamicInjectionTest.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigUrlMissingNamedDataSourceDynamicInjectionTest.java\nrename to extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigUrlMissingNamedDataSourceDynamicInjectionTest.java\n\ndiff --git a/extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigUrlMissingNamedDataSourceStaticInjectionTest.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigUrlMissingNamedDataSourceStaticInjectionTest.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigUrlMissingNamedDataSourceStaticInjectionTest.java\nrename to extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionConfigUrlMissingNamedDataSourceStaticInjectionTest.java\n\ndiff --git a/extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionLoadChangeLogTest.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionLoadChangeLogTest.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionLoadChangeLogTest.java\nrename to extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionLoadChangeLogTest.java\n\ndiff --git a/extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartDefaultDatasourceConfigActiveFalseTest.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartDefaultDatasourceConfigActiveFalseTest.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartDefaultDatasourceConfigActiveFalseTest.java\nrename to extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartDefaultDatasourceConfigActiveFalseTest.java\n\ndiff --git a/extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartDefaultDatasourceConfigUrlMissingTest.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartDefaultDatasourceConfigUrlMissingTest.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartDefaultDatasourceConfigUrlMissingTest.java\nrename to extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartDefaultDatasourceConfigUrlMissingTest.java\n\ndiff --git a/extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartDirectoryChangeLogTest.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartDirectoryChangeLogTest.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartDirectoryChangeLogTest.java\nrename to extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartDirectoryChangeLogTest.java\n\ndiff --git a/extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartJsonChangeLogTest.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartJsonChangeLogTest.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartJsonChangeLogTest.java\nrename to extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartJsonChangeLogTest.java\n\ndiff --git a/extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartNamedDataSourceTest.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartNamedDataSourceTest.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartNamedDataSourceTest.java\nrename to extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartNamedDataSourceTest.java\n\ndiff --git a/extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartNamedDatasourceConfigActiveFalseTest.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartNamedDatasourceConfigActiveFalseTest.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartNamedDatasourceConfigActiveFalseTest.java\nrename to extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartNamedDatasourceConfigActiveFalseTest.java\n\ndiff --git a/extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartNamedDatasourceConfigUrlMissingTest.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartNamedDatasourceConfigUrlMissingTest.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartNamedDatasourceConfigUrlMissingTest.java\nrename to extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartNamedDatasourceConfigUrlMissingTest.java\n\ndiff --git a/extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartSqlChangeLogTest.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartSqlChangeLogTest.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartSqlChangeLogTest.java\nrename to extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartSqlChangeLogTest.java\n\ndiff --git a/extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartTest.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartTest.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartTest.java\nrename to extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartTest.java\n\ndiff --git a/extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartXmlChangeLogTest.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartXmlChangeLogTest.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartXmlChangeLogTest.java\nrename to extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartXmlChangeLogTest.java\n\ndiff --git a/extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartYamlChangeLogTest.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartYamlChangeLogTest.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartYamlChangeLogTest.java\nrename to extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseExtensionMigrateAtStartYamlChangeLogTest.java\n\ndiff --git a/extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseTestResources.java b/extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseTestResources.java\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseTestResources.java\nrename to extensions/liquibase/liquibase/deployment/src/test/java/io/quarkus/liquibase/test/LiquibaseTestResources.java\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/baseline-on-migrate-named-datasource.properties b/extensions/liquibase/liquibase/deployment/src/test/resources/baseline-on-migrate-named-datasource.properties\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/baseline-on-migrate-named-datasource.properties\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/baseline-on-migrate-named-datasource.properties\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/baseline-on-migrate.properties b/extensions/liquibase/liquibase/deployment/src/test/resources/baseline-on-migrate.properties\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/baseline-on-migrate.properties\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/baseline-on-migrate.properties\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/clean-and-migrate-at-start-config.properties b/extensions/liquibase/liquibase/deployment/src/test/resources/clean-and-migrate-at-start-config.properties\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/clean-and-migrate-at-start-config.properties\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/clean-and-migrate-at-start-config.properties\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/clean-at-start-config.properties b/extensions/liquibase/liquibase/deployment/src/test/resources/clean-at-start-config.properties\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/clean-at-start-config.properties\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/clean-at-start-config.properties\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/config-for-default-datasource-without-liquibase.properties b/extensions/liquibase/liquibase/deployment/src/test/resources/config-for-default-datasource-without-liquibase.properties\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/config-for-default-datasource-without-liquibase.properties\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/config-for-default-datasource-without-liquibase.properties\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/config-for-default-datasource.properties b/extensions/liquibase/liquibase/deployment/src/test/resources/config-for-default-datasource.properties\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/config-for-default-datasource.properties\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/config-for-default-datasource.properties\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/config-for-missing-named-datasource.properties b/extensions/liquibase/liquibase/deployment/src/test/resources/config-for-missing-named-datasource.properties\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/config-for-missing-named-datasource.properties\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/config-for-missing-named-datasource.properties\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/config-for-multiple-datasources-without-default.properties b/extensions/liquibase/liquibase/deployment/src/test/resources/config-for-multiple-datasources-without-default.properties\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/config-for-multiple-datasources-without-default.properties\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/config-for-multiple-datasources-without-default.properties\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/config-for-multiple-datasources.properties b/extensions/liquibase/liquibase/deployment/src/test/resources/config-for-multiple-datasources.properties\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/config-for-multiple-datasources.properties\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/config-for-multiple-datasources.properties\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/config-for-named-datasource-without-default.properties b/extensions/liquibase/liquibase/deployment/src/test/resources/config-for-named-datasource-without-default.properties\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/config-for-named-datasource-without-default.properties\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/config-for-named-datasource-without-default.properties\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/config-for-named-datasource-without-liquibase.properties b/extensions/liquibase/liquibase/deployment/src/test/resources/config-for-named-datasource-without-liquibase.properties\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/config-for-named-datasource-without-liquibase.properties\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/config-for-named-datasource-without-liquibase.properties\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/db/all/changeLog.xml b/extensions/liquibase/liquibase/deployment/src/test/resources/db/all/changeLog.xml\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/db/all/changeLog.xml\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/db/all/changeLog.xml\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/db/all/test/changeLog.sql b/extensions/liquibase/liquibase/deployment/src/test/resources/db/all/test/changeLog.sql\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/db/all/test/changeLog.sql\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/db/all/test/changeLog.sql\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/db/changeLog.xml b/extensions/liquibase/liquibase/deployment/src/test/resources/db/changeLog.xml\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/db/changeLog.xml\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/db/changeLog.xml\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/db/inventory/changeLog.xml b/extensions/liquibase/liquibase/deployment/src/test/resources/db/inventory/changeLog.xml\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/db/inventory/changeLog.xml\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/db/inventory/changeLog.xml\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/db/json/changeLog.json b/extensions/liquibase/liquibase/deployment/src/test/resources/db/json/changeLog.json\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/db/json/changeLog.json\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/db/json/changeLog.json\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/db/json/create-tables.json b/extensions/liquibase/liquibase/deployment/src/test/resources/db/json/create-tables.json\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/db/json/create-tables.json\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/db/json/create-tables.json\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/db/json/test/test.json b/extensions/liquibase/liquibase/deployment/src/test/resources/db/json/test/test.json\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/db/json/test/test.json\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/db/json/test/test.json\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/db/sql/changeLog.sql b/extensions/liquibase/liquibase/deployment/src/test/resources/db/sql/changeLog.sql\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/db/sql/changeLog.sql\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/db/sql/changeLog.sql\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/db/users/changeLog.xml b/extensions/liquibase/liquibase/deployment/src/test/resources/db/users/changeLog.xml\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/db/users/changeLog.xml\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/db/users/changeLog.xml\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/db/xml/changeLog.xml b/extensions/liquibase/liquibase/deployment/src/test/resources/db/xml/changeLog.xml\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/db/xml/changeLog.xml\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/db/xml/changeLog.xml\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/db/xml/create-tables.xml b/extensions/liquibase/liquibase/deployment/src/test/resources/db/xml/create-tables.xml\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/db/xml/create-tables.xml\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/db/xml/create-tables.xml\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/db/xml/create-views.xml b/extensions/liquibase/liquibase/deployment/src/test/resources/db/xml/create-views.xml\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/db/xml/create-views.xml\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/db/xml/create-views.xml\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/db/xml/test/test.xml b/extensions/liquibase/liquibase/deployment/src/test/resources/db/xml/test/test.xml\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/db/xml/test/test.xml\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/db/xml/test/test.xml\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/db/yaml/changeLog.yaml b/extensions/liquibase/liquibase/deployment/src/test/resources/db/yaml/changeLog.yaml\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/db/yaml/changeLog.yaml\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/db/yaml/changeLog.yaml\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/db/yaml/create-tables.yaml b/extensions/liquibase/liquibase/deployment/src/test/resources/db/yaml/create-tables.yaml\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/db/yaml/create-tables.yaml\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/db/yaml/create-tables.yaml\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/db/yaml/test/test.yaml b/extensions/liquibase/liquibase/deployment/src/test/resources/db/yaml/test/test.yaml\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/db/yaml/test/test.yaml\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/db/yaml/test/test.yaml\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/h2-init-data.sql b/extensions/liquibase/liquibase/deployment/src/test/resources/h2-init-data.sql\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/h2-init-data.sql\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/h2-init-data.sql\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/load-change-log-config.properties b/extensions/liquibase/liquibase/deployment/src/test/resources/load-change-log-config.properties\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/load-change-log-config.properties\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/load-change-log-config.properties\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/migrate-at-start-config-named-datasource.properties b/extensions/liquibase/liquibase/deployment/src/test/resources/migrate-at-start-config-named-datasource.properties\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/migrate-at-start-config-named-datasource.properties\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/migrate-at-start-config-named-datasource.properties\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/migrate-at-start-config.properties b/extensions/liquibase/liquibase/deployment/src/test/resources/migrate-at-start-config.properties\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/migrate-at-start-config.properties\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/migrate-at-start-config.properties\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/migrate-at-start-directory-config.properties b/extensions/liquibase/liquibase/deployment/src/test/resources/migrate-at-start-directory-config.properties\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/migrate-at-start-directory-config.properties\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/migrate-at-start-directory-config.properties\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/migrate-at-start-json-config.properties b/extensions/liquibase/liquibase/deployment/src/test/resources/migrate-at-start-json-config.properties\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/migrate-at-start-json-config.properties\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/migrate-at-start-json-config.properties\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/migrate-at-start-sql-config.properties b/extensions/liquibase/liquibase/deployment/src/test/resources/migrate-at-start-sql-config.properties\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/migrate-at-start-sql-config.properties\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/migrate-at-start-sql-config.properties\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/migrate-at-start-xml-config.properties b/extensions/liquibase/liquibase/deployment/src/test/resources/migrate-at-start-xml-config.properties\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/migrate-at-start-xml-config.properties\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/migrate-at-start-xml-config.properties\n\ndiff --git a/extensions/liquibase/deployment/src/test/resources/migrate-at-start-yaml-config.properties b/extensions/liquibase/liquibase/deployment/src/test/resources/migrate-at-start-yaml-config.properties\nsimilarity index 100%\nrename from extensions/liquibase/deployment/src/test/resources/migrate-at-start-yaml-config.properties\nrename to extensions/liquibase/liquibase/deployment/src/test/resources/migrate-at-start-yaml-config.properties\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46840",
    "pr_id": 46840,
    "issue_id": 37145,
    "repo": "quarkusio/quarkus",
    "problem_statement": "@JsonView annotation ignored for sub-resources\n\r\n[code-with-quarkus.zip](https://github.com/quarkusio/quarkus/files/13394099/code-with-quarkus.zip)\r\n### Describe the bug\r\n\r\nWe want to use `@JsonView` to to selectively hide/show fields for different scenarios.\r\n\r\nIt works for the simple scenario of adding it to a top-level Resource. **But the same code fails if the endpoint is in a sub-resource.**\r\n\r\n## Example\r\n\r\nBasic User class where we want to hide the `password` field in the JSON response except for Private.\r\n\r\n```\r\npublic class User {\r\n\r\n    private String name;\r\n\r\n    // hide the password except for Private view\r\n    @JsonView(Views.Private.class)\r\n    private String password;\r\n\r\n    // getters/setters\r\n}\r\n```\r\n\r\nThe Views are identical to https://quarkus.io/guides/resteasy-reactive#jsonview-support\r\n```\r\npublic class Views {\r\n    public static class Public {}\r\n    public static class Private extends Public {}\r\n}\r\n```\r\n\r\nCreate a simple endpoint at the top-level and it works fine.\r\n\r\n```\r\n@GET\r\n@JsonView(Views.Public.class)\r\npublic User hello() {\r\n    User user = new User();\r\n    user.setName(\"John\");\r\n    user.setPassword(\"password\");\r\n    return user;\r\n}\r\n```\r\n\r\n```\r\nhttp://localhost:8080/hello\r\n{\"name\":\"John\"}\r\n```\r\n\r\n### Bug Scenario - using `@JsonView` in Sub-Resource\r\n\r\nNow create another class `BugResource` with the same code and in `GreetingResource` add a method to return the sub-resource:\r\n\r\n```\r\n@Path(\"/bug\")\r\npublic BugResource getBugResource() {\r\n    return resourceContext.getResource(BugResource.class);\r\n}\r\n```\r\n\r\n\r\n```\r\n@ApplicationScoped\r\n@Unremovable\r\npublic class BugResource {\r\n\r\n    @GET\r\n    @JsonView(Views.Public.class)\r\n    public User hello() {\r\n        User user = new User();\r\n        user.setName(\"John\");\r\n        user.setPassword(\"password\");\r\n        return user;\r\n    }\r\n}\r\n```\r\n\r\n```\r\nhttp://localhost:8080/hello/bug\r\n{\"name\":\"John\",\"password\":\"password\"}\r\n```\r\n\r\n### Temporary workaround\r\n\r\nOur current workaround is to inject ObjectMapper and manually serialize to a String but it gets pretty ugly as we add `@JsonView` to more endpoints:\r\n\r\n```\r\n@Inject\r\nObjectMapper objectMapper;\r\n    \r\n// endpoint must now return a String instead of User\r\npublic String bug() throws JsonProcessingException {\r\n        User user = new User();\r\n        user.setName(\"John\");\r\n        user.setPassword(\"password\");\r\n        return objectMapper.writerWithView(Views.Public.class)\r\n                .writeValueAsString(user);\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\n`@JsonView` annotation on endpoints should work regardless if endpoint is top-level resource or sub-resource.\r\n\r\n### Actual behavior\r\n\r\n`@JsonView` annotation does not work in sub-resources.\r\n\r\n### How to Reproduce?\r\n\r\n1. Generate code-with-quarkus project using Quarkus CLI\r\n2. Add `quarkus-resteasy-reactive-jackson` dependency to pom.xml\r\n3. Modify GreetingResource to return a sub-resource:\r\n\r\n```\r\n@Path(\"/bug\")\r\npublic BugResource getBugResource() {\r\n    return resourceContext.getResource(BugResource.class);\r\n}\r\n```\r\n\r\n4. In the sub-resource, add a simple `@GET` endpoint with a `@JsonView` annotation.\r\n\r\n```\r\n    @GET\r\n    @JsonView(Views.Public.class)\r\n    public User hello() {\r\n        User user = new User();\r\n        user.setName(\"John\");\r\n        user.setPassword(\"password\");\r\n        return user;\r\n    }\r\n```\r\n    \r\n 5. Add User.java and Views.java\r\n \r\n ```\r\n public class User {\r\n\r\n    private String name;\r\n    @JsonView(Views.Private.class)\r\n    private String password;\r\n\r\n    // getters and setters\r\n}\r\n ```\r\n\r\nSame as documentation:\r\n```\r\npublic class Views {\r\n    public static class Public {}\r\n    public static class Private extends Public {}\r\n}\r\n```\r\n\r\nOpen browser: `http://localhost:8080/hello/bug`\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\n_No response_\r\n\r\n### Output of `java -version`\r\n\r\n_No response_\r\n\r\n### Quarkus version or git rev\r\n\r\n3.5.1\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\nBug has existed since at least 2.16.6.Final. I was hoping the upgrade to 3.5.1 would fix it.",
    "issue_word_count": 509,
    "test_files_count": 3,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/CustomSerializationResource.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/CustomSerializationTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/JsonViewSubResourceTest.java"
    ],
    "pr_changed_test_files": [
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/CustomSerializationResource.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/CustomSerializationTest.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/JsonViewSubResourceTest.java"
    ],
    "base_commit": "02377d5364afa5c4d478f1b9b9c8b2ca87594c6b",
    "head_commit": "46b17a27d4ca3f1f62ad23183851f96d6ae6224f",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46840",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46840",
    "dockerfile": "",
    "pr_merged_at": "2025-03-17T09:14:30.000Z",
    "patch": "diff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java\nindex f16e0daf9de94..1597692fad7c3 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java\n@@ -258,8 +258,12 @@ void handleJsonAnnotations(Optional<ResourceScanningResultBuildItem> resourceSca\n         }\n         Collection<ClassInfo> resourceClasses = resourceScanningResultBuildItem.get().getResult().getScannedResources()\n                 .values();\n+\n+        List<ClassInfo> allResourceClasses = new ArrayList<>(resourceClasses);\n+        allResourceClasses.addAll(resourceScanningResultBuildItem.get().getResult().getPossibleSubResources().values());\n+\n         Set<JacksonFeatureBuildItem.Feature> jacksonFeatures = new HashSet<>();\n-        for (ClassInfo resourceClass : resourceClasses) {\n+        for (ClassInfo resourceClass : allResourceClasses) {\n             if (resourceClass.annotationsMap().containsKey(JSON_VIEW)) {\n                 jacksonFeatures.add(JacksonFeatureBuildItem.Feature.JSON_VIEW);\n                 for (AnnotationInstance instance : resourceClass.annotationsMap().get(JSON_VIEW)) {\n",
    "test_patch": "diff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/CustomSerializationResource.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/CustomSerializationResource.java\nindex becd3f13bed80..c4c779293b897 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/CustomSerializationResource.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/CustomSerializationResource.java\n@@ -27,9 +27,9 @@\n import io.quarkus.resteasy.reactive.jackson.CustomDeserialization;\n import io.quarkus.resteasy.reactive.jackson.CustomSerialization;\n \n-@Path(\"/custom-serialization\")\n @CustomSerialization(CustomSerializationResource.UnquotedFieldsPersonSerialization.class)\n @CustomDeserialization(CustomSerializationResource.UnquotedFieldsPersonDeserialization.class)\n+@Path(\"\")\n public class CustomSerializationResource {\n \n     @ServerExceptionMapper\n@@ -39,7 +39,7 @@ public Response handleParseException(WebApplicationException e) {\n     }\n \n     @GET\n-    @Path(\"/person\")\n+    @Path(\"/custom-serialization/person\")\n     public Person getPerson() {\n         Person person = new Person();\n         person.setFirst(\"Bob\");\n@@ -50,7 +50,7 @@ public Person getPerson() {\n     }\n \n     @POST\n-    @Path(\"/person\")\n+    @Path(\"/custom-serialization/person\")\n     @Produces(MediaType.APPLICATION_JSON)\n     @Consumes(MediaType.APPLICATION_JSON)\n     public Person getPerson(Person person) {\n@@ -58,7 +58,7 @@ public Person getPerson(Person person) {\n     }\n \n     @POST\n-    @Path(\"/people/list\")\n+    @Path(\"/custom-serialization/people/list\")\n     @Consumes(MediaType.APPLICATION_JSON)\n     public List<Person> getPeople(List<Person> people) {\n         List<Person> reversed = new ArrayList<>(people.size());\n@@ -69,7 +69,7 @@ public List<Person> getPeople(List<Person> people) {\n     }\n \n     @GET\n-    @Path(\"/invalid-use-of-custom-serializer\")\n+    @Path(\"/custom-serialization/invalid-use-of-custom-serializer\")\n     public User invalidUseOfCustomSerializer() {\n         return testUser();\n     }\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/CustomSerializationTest.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/CustomSerializationTest.java\nindex b7742e522d2be..4a4802d13accd 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/CustomSerializationTest.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/CustomSerializationTest.java\n@@ -5,10 +5,13 @@\n \n import java.util.function.Supplier;\n \n+import jakarta.ws.rs.Path;\n+\n import org.jboss.shrinkwrap.api.ShrinkWrap;\n import org.jboss.shrinkwrap.api.spec.JavaArchive;\n-import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n \n import io.quarkus.test.QuarkusUnitTest;\n import io.restassured.RestAssured;\n@@ -21,15 +24,17 @@ public class CustomSerializationTest {\n                 @Override\n                 public JavaArchive get() {\n                     return ShrinkWrap.create(JavaArchive.class)\n-                            .addClasses(Person.class, CustomSerializationResource.class, User.class, Views.class);\n+                            .addClasses(Person.class, CustomSerializationResource.class, User.class, Views.class,\n+                                    Locator.class);\n                 }\n             });\n \n-    @Test\n-    public void testCustomSerialization() {\n+    @ParameterizedTest\n+    @ValueSource(strings = { \"\", \"/locators\" })\n+    public void testCustomSerialization(String uriPrefix) {\n         // assert that we get a proper response\n         // we can't use json-path to assert because the returned string is not proper json as it does not have quotes around the field names\n-        RestAssured.get(\"/custom-serialization/person\")\n+        RestAssured.get(uriPrefix + \"/custom-serialization/person\")\n                 .then()\n                 .statusCode(200)\n                 .contentType(\"application/json\")\n@@ -41,7 +46,7 @@ public void testCustomSerialization() {\n                 .with()\n                 .body(\"[{\\\"first\\\": \\\"Bob\\\", \\\"last\\\": \\\"Builder\\\"}, {\\\"first\\\": \\\"Bob2\\\", \\\"last\\\": \\\"Builder2\\\"}]\")\n                 .contentType(\"application/json; charset=utf-8\")\n-                .post(\"/custom-serialization/people/list\")\n+                .post(uriPrefix + \"/custom-serialization/people/list\")\n                 .then()\n                 .statusCode(200)\n                 .contentType(\"application/json\")\n@@ -52,20 +57,21 @@ public void testCustomSerialization() {\n \n         // a new instance should have been created\n         int currentCount = CustomSerializationResource.UnquotedFieldsPersonSerialization.count.get();\n-        RestAssured.get(\"/custom-serialization/invalid-use-of-custom-serializer\")\n+        RestAssured.get(uriPrefix + \"/custom-serialization/invalid-use-of-custom-serializer\")\n                 .then()\n                 .statusCode(500);\n         assertEquals(currentCount + 1, CustomSerializationResource.UnquotedFieldsPersonSerialization.count.intValue());\n     }\n \n-    @Test\n-    public void testCustomDeserialization() {\n+    @ParameterizedTest\n+    @ValueSource(strings = { \"\", \"/locators\" })\n+    public void testCustomDeserialization(String uriPrefix) {\n         // assert that the reader support the unquoted fields (because we have used a custom object reader\n         // via `@CustomDeserialization`\n         RestAssured.given()\n                 .body(\"{first: \\\"Hello\\\", last: \\\"Deserialization\\\"}\")\n                 .contentType(\"application/json; charset=utf-8\")\n-                .post(\"/custom-serialization/person\")\n+                .post(uriPrefix + \"/custom-serialization/person\")\n                 .then()\n                 .statusCode(200)\n                 .contentType(\"application/json\")\n@@ -76,7 +82,7 @@ public void testCustomDeserialization() {\n         RestAssured.given()\n                 .body(\"{first: \\\"Hello\\\", last: \\\"Deserialization\\\"}\")\n                 .contentType(\"application/json; charset=utf-8\")\n-                .post(\"/custom-serialization/person\")\n+                .post(uriPrefix + \"/custom-serialization/person\")\n                 .then()\n                 .statusCode(200);\n \n@@ -85,7 +91,7 @@ public void testCustomDeserialization() {\n                 .with()\n                 .body(\"[{first: \\\"Bob\\\", last: \\\"Builder\\\"}, {first: \\\"Bob2\\\", last: \\\"Builder2\\\"}]\")\n                 .contentType(\"application/json; charset=utf-8\")\n-                .post(\"/custom-serialization/people/list\")\n+                .post(uriPrefix + \"/custom-serialization/people/list\")\n                 .then()\n                 .statusCode(200)\n                 .contentType(\"application/json\")\n@@ -94,4 +100,12 @@ public void testCustomDeserialization() {\n                 .body(containsString(\"Bob2\"))\n                 .body(containsString(\"Builder2\"));\n     }\n+\n+    @Path(\"locators\")\n+    public static class Locator {\n+        @Path(\"\")\n+        public CustomSerializationResource get() {\n+            return new CustomSerializationResource();\n+        }\n+    }\n }\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/JsonViewSubResourceTest.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/JsonViewSubResourceTest.java\nnew file mode 100644\nindex 0000000000000..aaee93081488f\n--- /dev/null\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/JsonViewSubResourceTest.java\n@@ -0,0 +1,126 @@\n+package io.quarkus.resteasy.reactive.jackson.deployment.test;\n+\n+import static io.restassured.RestAssured.given;\n+import static jakarta.ws.rs.core.Response.Status.CREATED;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.not;\n+\n+import java.util.function.Supplier;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.POST;\n+import jakarta.ws.rs.Path;\n+\n+import org.jboss.resteasy.reactive.RestResponse;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.fasterxml.jackson.annotation.JsonView;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class JsonViewSubResourceTest {\n+\n+    @RegisterExtension\n+    static QuarkusUnitTest test = new QuarkusUnitTest()\n+            .setArchiveProducer(new Supplier<>() {\n+                @Override\n+                public JavaArchive get() {\n+                    return ShrinkWrap.create(JavaArchive.class)\n+                            .addClasses(User.class, Views.class, UsersResource.class, PublicUserResource.class,\n+                                    PrivateUserResource.class, MixedUserResource.class, SerializeDeserializeUserResource.class);\n+                }\n+            });\n+\n+    @Test\n+    public void test() {\n+        given().accept(\"application/json\").get(\"users/public\")\n+                .then()\n+                .statusCode(200)\n+                .body(not(containsString(\"1\")), containsString(\"test\"));\n+\n+        given().accept(\"application/json\").get(\"users/private\")\n+                .then()\n+                .statusCode(200)\n+                .body(containsString(\"1\"), containsString(\"test\"));\n+\n+        given().accept(\"application/json\").get(\"users/mixed\")\n+                .then()\n+                .statusCode(200)\n+                .body(containsString(\"1\"), containsString(\"test\"));\n+\n+        given().accept(\"application/json\")\n+                .contentType(\"application/json\")\n+                .body(\"\"\"\n+                        {\n+                         \"id\": 1,\n+                         \"name\": \"Foo\"\n+                        }\n+                        \"\"\")\n+                .post(\"users/serialize-deserialize\")\n+                .then()\n+                .statusCode(201)\n+                .body(\"id\", equalTo(0))\n+                .body(\"name\", equalTo(\"Foo\"));\n+    }\n+\n+    @Path(\"users\")\n+    public static class UsersResource {\n+\n+        @Path(\"public\")\n+        public PublicUserResource getPublic() {\n+            return new PublicUserResource();\n+        }\n+\n+        @Path(\"private\")\n+        public PrivateUserResource getPrivate() {\n+            return new PrivateUserResource();\n+        }\n+\n+        @Path(\"mixed\")\n+        public MixedUserResource getMixed() {\n+            return new MixedUserResource();\n+        }\n+\n+        @Path(\"serialize-deserialize\")\n+        public SerializeDeserializeUserResource getSerializeDeserialize() {\n+            return new SerializeDeserializeUserResource();\n+        }\n+    }\n+\n+    @JsonView(Views.Public.class)\n+    public static class PublicUserResource {\n+        @GET\n+        public User get() {\n+            return User.testUser();\n+        }\n+    }\n+\n+    @JsonView(Views.Private.class)\n+    public static class PrivateUserResource {\n+        @GET\n+        public User get() {\n+            return User.testUser();\n+        }\n+    }\n+\n+    @JsonView(Views.Public.class)\n+    public static class MixedUserResource {\n+        @GET\n+        @JsonView(Views.Private.class)\n+        public User get() {\n+            return User.testUser();\n+        }\n+    }\n+\n+    public static class SerializeDeserializeUserResource {\n+        @POST\n+        @JsonView(Views.Private.class)\n+        public RestResponse<User> get(@JsonView(Views.Public.class) User user) {\n+            return RestResponse.status(CREATED, user);\n+        }\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46837",
    "pr_id": 46837,
    "issue_id": 44922,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Multipart upload in subresource fails in quarkus-rest.\n### Describe the bug\n\nWhen using subresources multipart upload fails with 415, Unsupported Media Type, as http error code.\n\n### Expected behavior\n\nFile upload works as expected.\n\n### Actual behavior\n\nGetting 415, Unsupported Media Type, http status.\n\n### How to Reproduce?\n\nMake a main resource and have it expose a subresource that consumes multipart/form-data.\n\nSee [code-with-quarkus.zip](https://github.com/user-attachments/files/18013155/code-with-quarkus.zip) example that reproduces the problem.\n\n\n### Output of `uname -a` or `ver`\n\nLinux LAPTOP-2P262G2R 5.15.167.4-microsoft-standard-WSL2 #1 SMP Tue Nov 5 00:21:55 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux\n\n### Output of `java -version`\n\nopenjdk 21.0.5 2024-10-15 LTS OpenJDK Runtime Environment Temurin-21.0.5+11 (build 21.0.5+11-LTS) OpenJDK 64-Bit Server VM Temurin-21.0.5+11 (build 21.0.5+11-LTS, mixed mode, sharing)\n\n### Quarkus version or git rev\n\n3.17.2\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nApache Maven 3.9.8 (36645f6c9b5079805ea5009217e36f2cffd34256) Maven home: /home/zipper/.m2/wrapper/dists/apache-maven-3.9.8-bin/337e6d14/apache-maven-3.9.8 Java version: 21.0.5, vendor: Eclipse Adoptium, runtime: /home/zipper/.sdkman/candidates/java/21.0.5-tem Default locale: en, platform encoding: UTF-8 OS name: \"linux\", version: \"5.15.167.4-microsoft-standard-wsl2\", arch: \"amd64\", family: \"unix\"\n\n### Additional information\n\nThe bug is also present in earlier versions.",
    "issue_word_count": 250,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/SubResourceMediaTypeTest.java",
      "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/ClassRoutingHandler.java"
    ],
    "pr_changed_test_files": [
      "extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/SubResourceMediaTypeTest.java"
    ],
    "base_commit": "02377d5364afa5c4d478f1b9b9c8b2ca87594c6b",
    "head_commit": "796bc8204e6e4d83195fce391943041e826733e6",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46837",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46837",
    "dockerfile": "",
    "pr_merged_at": "2025-03-17T09:22:34.000Z",
    "patch": "diff --git a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/ClassRoutingHandler.java b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/ClassRoutingHandler.java\nindex b9bf02d05af53..8c23885d37674 100644\n--- a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/ClassRoutingHandler.java\n+++ b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/ClassRoutingHandler.java\n@@ -108,7 +108,8 @@ public void handle(ResteasyReactiveRequestContext requestContext) throws Excepti\n         }\n \n         // according to the spec we need to return HTTP 415 when content-type header doesn't match what is specified in @Consumes\n-        if (!target.value.getConsumes().isEmpty()) {\n+        // HttpMethod being null means this is a sub resource locator method. The handler chain of the sub resource has to match the content-type header\n+        if (target.value.getHttpMethod() != null && !target.value.getConsumes().isEmpty()) {\n             String contentType = (String) requestContext.getHeader(HttpHeaders.CONTENT_TYPE, true);\n             if (contentType != null) {\n                 try {\n@@ -123,7 +124,8 @@ public void handle(ResteasyReactiveRequestContext requestContext) throws Excepti\n             }\n         }\n         // according to the spec we need to return HTTP 406 when Accept header doesn't match what is specified in @Produces\n-        if (target.value.getProduces() != null) {\n+        // HttpMethod being null means this is a sub resource locator method. The handler chain of the sub resource has to match the accept header\n+        if (target.value.getHttpMethod() != null && target.value.getProduces() != null) {\n             // there could potentially be multiple Accept headers and we need to response with 406\n             // if none match the method's @Produces\n             List<String> accepts = (List<String>) requestContext.getHeader(HttpHeaders.ACCEPT, false);\n",
    "test_patch": "diff --git a/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/SubResourceMediaTypeTest.java b/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/SubResourceMediaTypeTest.java\nnew file mode 100644\nindex 0000000000000..556660b648d14\n--- /dev/null\n+++ b/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/SubResourceMediaTypeTest.java\n@@ -0,0 +1,139 @@\n+package io.quarkus.resteasy.reactive.server.test.resource.basic;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.function.Supplier;\n+\n+import jakarta.ws.rs.Consumes;\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.POST;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.Produces;\n+import jakarta.ws.rs.client.Client;\n+import jakarta.ws.rs.client.ClientBuilder;\n+import jakarta.ws.rs.client.Entity;\n+import jakarta.ws.rs.core.MediaType;\n+import jakarta.ws.rs.core.Response;\n+\n+import org.jboss.resteasy.reactive.RestForm;\n+import org.jboss.resteasy.reactive.multipart.FileUpload;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.resteasy.reactive.server.test.simple.PortProviderUtil;\n+import io.quarkus.test.QuarkusUnitTest;\n+import io.restassured.RestAssured;\n+\n+public class SubResourceMediaTypeTest {\n+    @RegisterExtension\n+    static QuarkusUnitTest testExtension = new QuarkusUnitTest()\n+            .setArchiveProducer(new Supplier<>() {\n+                @Override\n+                public JavaArchive get() {\n+                    JavaArchive war = ShrinkWrap.create(JavaArchive.class);\n+                    war.addClasses(PortProviderUtil.class);\n+                    war.addClasses(StoreResource.class);\n+                    war.addClasses(AddressesResource.class);\n+                    return war;\n+                }\n+            });\n+\n+    @Test\n+    public void basicTest() throws IOException {\n+        // Test that produces and consumes on sub resource takes effect\n+        {\n+            Client client = ClientBuilder.newClient();\n+            Response response = client.target(\n+                    PortProviderUtil.generateURL(\n+                            \"/store/addresses\",\n+                            SubResourceMediaTypeTest.class.getSimpleName()))\n+                    .request().accept(\"text/csv\").post(Entity.xml(\"<resultCount>1</resultCount>\"));\n+            Assertions.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+            Assertions.assertEquals(\"name1,street1,city1,state1,zip\", response.readEntity(String.class),\n+                    \"Wrong content of response\");\n+            response.close();\n+            client.close();\n+        }\n+\n+        // Test that produces and consumes on sub resource takes effect\n+        {\n+            Client client = ClientBuilder.newClient();\n+            Response response = client.target(\n+                    PortProviderUtil.generateURL(\n+                            \"/store/addresses\",\n+                            SubResourceMediaTypeTest.class.getSimpleName()))\n+                    .request().accept(\"application/xml\").post(Entity.xml(\"<resultCount>1</resultCount>\"));\n+            Assertions.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+            Assertions.assertEquals(\"<addresses><address><name>name1</name></address></addresses>\",\n+                    response.readEntity(String.class),\n+                    \"Wrong content of response\");\n+            response.close();\n+            client.close();\n+        }\n+\n+        // Test that the produces(text/html) on the locator does not influence the\n+        // produced response types of getAsHTMLWithDefaultResultCount, which should be text/plain, since quarkus-rest\n+        // automatically uses that type for String if none other declared\n+        {\n+            Client client = ClientBuilder.newClient();\n+            Response response = client.target(\n+                    PortProviderUtil.generateURL(\n+                            \"/store/addresses\",\n+                            SubResourceMediaTypeTest.class.getSimpleName()))\n+                    .request().accept(\"text/html\").get();\n+            Assertions.assertEquals(Response.Status.NOT_ACCEPTABLE.getStatusCode(), response.getStatus());\n+            response.close();\n+            client.close();\n+        }\n+\n+        // Test file upload, since that was the test case from 44922\n+        // quarkus-rest does not implement EntityPart.Builder right now, therefore use restassured for this case\n+        {\n+            RestAssured.given().accept(\"text/plain\").multiPart(\"file\", \"name1,street1,city1,state1,zip\")\n+                    .post(\"/store/addresses\").then().statusCode(200).body(equalTo(\"name1,street1,city1,state1,zip\"));\n+        }\n+    }\n+\n+    @Path(\"store\")\n+    @Produces(MediaType.TEXT_HTML)\n+    @Consumes(MediaType.TEXT_HTML)\n+    public static class StoreResource {\n+        @Path(\"addresses\")\n+        public AddressesResource get() {\n+            return new AddressesResource();\n+        }\n+    }\n+\n+    public static class AddressesResource {\n+        @POST\n+        @Produces(\"text/csv\")\n+        @Consumes(MediaType.APPLICATION_XML)\n+        public String getAsCSV(String body) {\n+            return \"name1,street1,city1,state1,zip\";\n+        }\n+\n+        @POST\n+        @Produces(MediaType.APPLICATION_XML)\n+        @Consumes(MediaType.APPLICATION_XML)\n+        public String getAsXML(String body) {\n+            return \"<addresses><address><name>name1</name></address></addresses>\";\n+        }\n+\n+        @GET\n+        public String getAsHTMLWithDefaultResultCount() {\n+            return \"<body><h1>name1</h1></body>\";\n+        }\n+\n+        @POST\n+        @Consumes(MediaType.MULTIPART_FORM_DATA)\n+        @Produces(MediaType.TEXT_PLAIN)\n+        public String uploadAddresses(@RestForm(\"file\") FileUpload file) throws IOException {\n+            return Files.readString(file.uploadedFile());\n+        }\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46822",
    "pr_id": 46822,
    "issue_id": 46765,
    "repo": "quarkusio/quarkus",
    "problem_statement": "OIDC session cookie format changed in 3.18 causing it to be incompatible to 3.17.x\n### Describe the bug\n\nThe format of the quarkus oidc session cookie changed from version 3.17.x to 3.18 which causes a breaking change.\n\nFormat in Quarkus 3.17.x: idToken | accessToken | refreshToken\nFormat in Quarkus 3.18.x:  idToken | accessToken | accessTokenExpiresIn | refreshToken\n\nWhen a user stil has a cookie created by quarkus 3.17, but the applicaiton is already on quarkus 3.18 (typically happens when deploying a new version), then quarkus throws an unhandled exception:\n\n````\nUnhandled exception: java.lang.NumberFormatException: For input string: \"XXXXXXXXXXXXXXXXXXXXXXXXXX\"\n    at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n    at java.base/java.lang.Long.parseLong(Long.java:708)\n    at java.base/java.lang.Long.valueOf(Long.java:1156)\n    at io.quarkus.oidc.runtime.DefaultTokenStateManager.getTokens(DefaultTokenStateManager.java:128)\n    at io.quarkus.oidc.runtime.DefaultTokenStateManager_ClientProxy.getTokens(Unknown Source)\n    at io.quarkus.oidc.runtime.CodeAuthenticationMechanism.reAuthenticate(CodeAuthenticationMechanism.java:338)\n    at io.quarkus.oidc.runtime.CodeAuthenticationMechanism$1.apply(CodeAuthenticationMechanism.java:102)\n    at io.quarkus.oidc.runtime.CodeAuthenticationMechanism$1.apply(CodeAuthenticationMechanism.java:99)\n    at io.smallrye.context.impl.wrappers.SlowContextualFunction.apply(SlowContextualFunction.java:21)\n````\n \n\n### Expected behavior\n\nIf a user arrives with a session cookie that is for whatever reason not valid (old format, malicious format, ...), then quarkus deletes the session cookie such that the user can re-authenticate.\n\n### Actual behavior\n\nUser receives an unexpected error message.\nThe session cookie is not deleted.\nUser cannot recover easily from this failure.\nUser has to delete the cookie activly to recover from this failure. (which is something a normal user cannot do)\n\n### How to Reproduce?\n\n1) Run an application with Quarkus 3.17\n2) Login into this application.\n3) Keep your browser session open\n4) Upgrade your application to Quarkus 3.18 and run it\n5) Refresh your browser session from step 2) => you see an exception \n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### Quarkus version or git rev\n\n3.18.x\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
    "issue_word_count": 354,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/DefaultTokenStateManager.java",
      "integration-tests/oidc-code-flow/src/test/java/io/quarkus/it/keycloak/CodeFlowTest.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/oidc-code-flow/src/test/java/io/quarkus/it/keycloak/CodeFlowTest.java"
    ],
    "base_commit": "ea7d56b80d9451aa8344caad858bdc6a65095ec8",
    "head_commit": "3b248a56ad8270fb3bcfc7bef226ac6536eb95c0",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46822",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46822",
    "dockerfile": "",
    "pr_merged_at": "2025-03-14T16:53:28.000Z",
    "patch": "diff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\nindex 755ca07d481ad..9a964c5644b01 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java\n@@ -338,13 +338,15 @@ private Uni<SecurityIdentity> reAuthenticate(String sessionCookie,\n         context.put(TenantConfigContext.class.getName(), configContext);\n         return resolver.getTokenStateManager().getTokens(context, configContext.oidcConfig(),\n                 sessionCookie, getTokenStateRequestContext)\n-                .onFailure(AuthenticationCompletionException.class)\n+                .onFailure(Throwable.class)\n                 .recoverWithUni(\n                         new Function<Throwable, Uni<? extends AuthorizationCodeTokens>>() {\n                             @Override\n                             public Uni<AuthorizationCodeTokens> apply(Throwable t) {\n+                                Throwable failure = t instanceof AuthenticationFailedException ? t\n+                                        : new AuthenticationFailedException(t);\n                                 return removeSessionCookie(context, configContext.oidcConfig())\n-                                        .replaceWith(Uni.createFrom().failure(t));\n+                                        .replaceWith(Uni.createFrom().failure(failure));\n                             }\n                         })\n                 .chain(new Function<AuthorizationCodeTokens, Uni<? extends SecurityIdentity>>() {\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/DefaultTokenStateManager.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/DefaultTokenStateManager.java\nindex 95484ebc0132b..b72b654f5060a 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/DefaultTokenStateManager.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/DefaultTokenStateManager.java\n@@ -2,12 +2,13 @@\n \n import jakarta.enterprise.context.ApplicationScoped;\n \n+import org.jboss.logging.Logger;\n+\n import io.quarkus.oidc.AuthorizationCodeTokens;\n import io.quarkus.oidc.OidcRequestContext;\n import io.quarkus.oidc.OidcTenantConfig;\n import io.quarkus.oidc.TokenStateManager;\n import io.quarkus.oidc.runtime.OidcTenantConfig.TokenStateManager.Strategy;\n-import io.quarkus.security.AuthenticationCompletionException;\n import io.quarkus.security.AuthenticationFailedException;\n import io.smallrye.jwt.algorithm.KeyEncryptionAlgorithm;\n import io.smallrye.mutiny.Uni;\n@@ -17,6 +18,7 @@\n \n @ApplicationScoped\n public class DefaultTokenStateManager implements TokenStateManager {\n+    private static final Logger LOG = Logger.getLogger(DefaultTokenStateManager.class);\n \n     @Override\n     public Uni<String> createTokenState(RoutingContext routingContext, OidcTenantConfig oidcConfig,\n@@ -125,13 +127,17 @@ public Uni<AuthorizationCodeTokens> getTokens(RoutingContext routingContext, Oid\n \n                 if (oidcConfig.tokenStateManager().strategy() == Strategy.KEEP_ALL_TOKENS) {\n                     accessToken = tokens[1];\n-                    accessTokenExpiresIn = tokens[2].isEmpty() ? null : Long.valueOf(tokens[2]);\n+                    accessTokenExpiresIn = tokens[2].isEmpty() ? null : parseAccessTokenExpiresIn(tokens[2]);\n                     refreshToken = tokens[3];\n                 } else if (oidcConfig.tokenStateManager().strategy() == Strategy.ID_REFRESH_TOKENS) {\n                     refreshToken = tokens[3];\n                 }\n             } catch (ArrayIndexOutOfBoundsException ex) {\n-                return Uni.createFrom().failure(new AuthenticationCompletionException(\"Session cookie is malformed\"));\n+                final String error = \"Session cookie is malformed\";\n+                LOG.debug(ex);\n+                return Uni.createFrom().failure(new AuthenticationFailedException(error));\n+            } catch (AuthenticationFailedException ex) {\n+                return Uni.createFrom().failure(ex);\n             }\n         } else {\n             // Decrypt ID token from the q_session cookie\n@@ -147,9 +153,15 @@ public Uni<AuthorizationCodeTokens> getTokens(RoutingContext routingContext, Oid\n                     String[] accessTokenData = CodeAuthenticationMechanism.COOKIE_PATTERN.split(accessTokenState);\n                     accessToken = accessTokenData[0];\n                     try {\n-                        accessTokenExpiresIn = accessTokenData[1].isEmpty() ? null : Long.valueOf(accessTokenData[1]);\n+                        accessTokenExpiresIn = accessTokenData[1].isEmpty() ? null\n+                                : parseAccessTokenExpiresIn(accessTokenData[1]);\n                     } catch (ArrayIndexOutOfBoundsException ex) {\n-                        return Uni.createFrom().failure(new AuthenticationCompletionException(\"Session cookie is malformed\"));\n+                        final String error = \"Session cookie is malformed\";\n+                        LOG.debug(ex);\n+                        // Make this error message visible in the dev mode\n+                        return Uni.createFrom().failure(new AuthenticationFailedException(error));\n+                    } catch (AuthenticationFailedException ex) {\n+                        return Uni.createFrom().failure(ex);\n                     }\n                 }\n                 Cookie rtCookie = getRefreshTokenCookie(routingContext, oidcConfig);\n@@ -179,6 +191,19 @@ public Uni<Void> deleteTokens(RoutingContext routingContext, OidcTenantConfig oi\n         return CodeAuthenticationMechanism.VOID_UNI;\n     }\n \n+    private static Long parseAccessTokenExpiresIn(String accessTokenExpiresInString) {\n+        try {\n+            return Long.valueOf(accessTokenExpiresInString);\n+        } catch (NumberFormatException ex) {\n+            final String error = \"\"\"\n+                    Access token expires_in property in the session cookie must be a number, found %s\n+                    \"\"\".formatted(accessTokenExpiresInString);\n+            LOG.debug(ex);\n+            // Make this error message visible in the dev mode\n+            throw new AuthenticationFailedException(error);\n+        }\n+    }\n+\n     private static ServerCookie getAccessTokenCookie(RoutingContext routingContext, OidcTenantConfig oidcConfig) {\n         return (ServerCookie) routingContext.request().getCookie(getAccessTokenCookieName(oidcConfig));\n     }\n",
    "test_patch": "diff --git a/integration-tests/oidc-code-flow/src/test/java/io/quarkus/it/keycloak/CodeFlowTest.java b/integration-tests/oidc-code-flow/src/test/java/io/quarkus/it/keycloak/CodeFlowTest.java\nindex 32cd323b16251..6e1e5b02bdf0a 100644\n--- a/integration-tests/oidc-code-flow/src/test/java/io/quarkus/it/keycloak/CodeFlowTest.java\n+++ b/integration-tests/oidc-code-flow/src/test/java/io/quarkus/it/keycloak/CodeFlowTest.java\n@@ -892,11 +892,13 @@ public void testIdTokenInjection() throws IOException {\n             sessionCookie = getSessionCookie(webClient, null);\n             assertEquals(\"1|2|3\", sessionCookie.getValue());\n \n+            webClient.getOptions().setRedirectEnabled(false);\n+\n             try {\n                 webClient.getPage(\"http://localhost:8081/web-app\");\n-                fail(\"401 status error is expected\");\n+                fail(\"302 status error is expected\");\n             } catch (FailingHttpStatusCodeException ex) {\n-                assertEquals(401, ex.getStatusCode());\n+                assertEquals(302, ex.getStatusCode());\n                 assertNull(getSessionCookie(webClient, null));\n             }\n             webClient.getCookieManager().clearCookies();\n@@ -910,9 +912,9 @@ public void testIdTokenInjection() throws IOException {\n \n             try {\n                 webClient.getPage(\"http://localhost:8081/web-app\");\n-                fail(\"401 status error is expected\");\n+                fail(\"302 status error is expected\");\n             } catch (FailingHttpStatusCodeException ex) {\n-                assertEquals(401, ex.getStatusCode());\n+                assertEquals(302, ex.getStatusCode());\n                 assertNull(getSessionCookie(webClient, null));\n             }\n             webClient.getCookieManager().clearCookies();\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46807",
    "pr_id": 46807,
    "issue_id": 46751,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Wrong JsonView is used for writing response entity\n### Describe the bug\n\nI wanted to reuse the same data class for request and response, since it is basically the same. Only a few fields need be hidden, depending on context.\n\nThis is what I came up with:\n\n```\n@JsonView(c.class)\n    @POST\n    public GreetingData getGreeting(@JsonView(JView.Create.class) GreetingData data) {\n        return new GreetingData(data.id() == null ? UUID.randomUUID() : data.id(), data.greetingText());\n    }\n\n    @JsonView({JView.Create.class, JView.Read.class})\n    public record GreetingData(@JsonView(JView.Read.class) UUID id, @JsonView({JView.Create.class, JView.Update.class}) String greetingText) {}\n\n    public record JView() {\n        public record Create() {}\n\n        public record Read() {}\n\n        public record Update() {}\n    }\n```\n\nI would expect this to always write the `GreetingData` object using `JView.Read`, and read using `JView.Create`. However, `JView.Create` is used for read as well as for write.\n\n`ResteasyReactiveServerJacksonRecorder.jsonViewForMethod(resourceInfo.getMethodId());` in `FullyFeaturedServerJacksonMessageBodyWriter` returns `JView.Create`, since only that one is recorded for this resource method. IMO, write and read json views should be handled separetly (i.e. store them in different maps).\n\n### Expected behavior\n\nJView.Read.class gets used\n\n### Actual behavior\n\nJView.Create.class gets used\n\n### How to Reproduce?\n\nReproducer:\n\n[rr-json-view-ser-de.zip](https://github.com/user-attachments/files/19204081/rr-json-view-ser-de.zip)\n\nmvn quarkus:test\nTest fails\n\n### Output of `uname -a` or `ver`\n\nMINGW64_NT-10.0-26100 NANBCHL9NG3 3.3.6-341.x86_64 2022-09-05 20:28 UTC x86_64 Msys\n\n### Output of `java -version`\n\nopenjdk 21.0.5 2024-10-15 LTS OpenJDK Runtime Environment Temurin-21.0.5+11 (build 21.0.5+11-LTS) OpenJDK 64-Bit Server VM Temurin-21.0.5+11 (build 21.0.5+11-LTS, mixed mode, sharing)\n\n### Quarkus version or git rev\n\n3.19.2\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nApache Maven 3.8.8 (4c87b05d9aedce574290d1acc98575ed5eb6cd39) Maven home: C:\\eclipse\\tools\\java\\maven Java version: 21.0.5, vendor: Eclipse Adoptium, runtime: C:\\eclipse\\tools\\java\\21 Default locale: de_DE, platform encoding: UTF-8 OS name: \"windows 11\", version: \"10.0\", arch: \"amd64\", family: \"windows\"\n\n### Additional information\n\n_No response_",
    "issue_word_count": 352,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java",
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/JsonViewDeserializeSerializeTest.java",
      "extensions/resteasy-reactive/rest-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/FullyFeaturedServerJacksonMessageBodyReader.java"
    ],
    "pr_changed_test_files": [
      "extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/JsonViewDeserializeSerializeTest.java"
    ],
    "base_commit": "67e69e76a4f83389278fda7b448c8c9ca5baa0af",
    "head_commit": "a23972df6f263d1a3fc491b77791b0b2d3905646",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46807",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46807",
    "dockerfile": "",
    "pr_merged_at": "2025-03-14T09:41:26.000Z",
    "patch": "diff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java\nindex 467db10c562b0..f16e0daf9de94 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java\n@@ -688,7 +688,7 @@ private String getTargetId(AnnotationInstance instance) {\n         } else if (target.kind() == AnnotationTarget.Kind.METHOD) {\n             return getMethodId(target.asMethod());\n         } else if (target.kind() == AnnotationTarget.Kind.METHOD_PARAMETER) {\n-            return getMethodId(target.asMethodParameter().method());\n+            return \"request-body;\" + getMethodId(target.asMethodParameter().method());\n         }\n \n         throw new UnsupportedOperationException(String.format(\"The `%s` annotation can only \"\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/FullyFeaturedServerJacksonMessageBodyReader.java b/extensions/resteasy-reactive/rest-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/FullyFeaturedServerJacksonMessageBodyReader.java\nindex 086fc681047f7..4dfb5437d1336 100644\n--- a/extensions/resteasy-reactive/rest-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/FullyFeaturedServerJacksonMessageBodyReader.java\n+++ b/extensions/resteasy-reactive/rest-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/FullyFeaturedServerJacksonMessageBodyReader.java\n@@ -179,16 +179,10 @@ public ObjectReader apply(ObjectMapper objectMapper) {\n                     effectiveReader = readerFromAnnotation;\n                 }\n \n-                Class<?> jsonViewValue = ResteasyReactiveServerJacksonRecorder.jsonViewForMethod(resourceInfo.getMethodId());\n+                Class<?> jsonViewValue = ResteasyReactiveServerJacksonRecorder\n+                        .jsonViewForMethod(\"request-body;\" + resourceInfo.getMethodId());\n                 if (jsonViewValue != null) {\n                     return effectiveReader.withView(jsonViewValue);\n-                } else {\n-                    jsonViewValue = ResteasyReactiveServerJacksonRecorder\n-                            .jsonViewForClass(resourceInfo.getResourceClass());\n-                    if (jsonViewValue != null) {\n-                        return effectiveReader.withView(jsonViewValue);\n-                    }\n-\n                 }\n             }\n         }\n",
    "test_patch": "diff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/JsonViewDeserializeSerializeTest.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/JsonViewDeserializeSerializeTest.java\nnew file mode 100644\nindex 0000000000000..58cf25d84fb60\n--- /dev/null\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/JsonViewDeserializeSerializeTest.java\n@@ -0,0 +1,65 @@\n+package io.quarkus.resteasy.reactive.jackson.deployment.test;\n+\n+import static io.restassured.RestAssured.given;\n+import static jakarta.ws.rs.core.Response.Status.CREATED;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+import java.util.function.Supplier;\n+\n+import jakarta.ws.rs.Consumes;\n+import jakarta.ws.rs.POST;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.Produces;\n+import jakarta.ws.rs.core.MediaType;\n+\n+import org.jboss.resteasy.reactive.RestResponse;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.fasterxml.jackson.annotation.JsonView;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class JsonViewDeserializeSerializeTest {\n+\n+    @RegisterExtension\n+    static QuarkusUnitTest test = new QuarkusUnitTest()\n+            .setArchiveProducer(new Supplier<>() {\n+                @Override\n+                public JavaArchive get() {\n+                    return ShrinkWrap.create(JavaArchive.class)\n+                            .addClasses(User.class, Views.class, Resource.class);\n+                }\n+            });\n+\n+    @Test\n+    public void test() {\n+        given().accept(\"application/json\")\n+                .contentType(\"application/json\")\n+                .body(\"\"\"\n+                        {\n+                         \"id\": 1,\n+                         \"name\": \"Foo\"\n+                        }\n+                        \"\"\")\n+                .post(\"test\")\n+                .then()\n+                .statusCode(201)\n+                .body(\"id\", equalTo(0))\n+                .body(\"name\", equalTo(\"Foo\"));\n+    }\n+\n+    @Path(\"test\")\n+    public static class Resource {\n+\n+        @JsonView(Views.Private.class)\n+        @POST\n+        @Produces(MediaType.APPLICATION_JSON)\n+        @Consumes(MediaType.APPLICATION_JSON)\n+        public RestResponse<User> create(@JsonView(Views.Public.class) User user) {\n+            return RestResponse.status(CREATED, user);\n+        }\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46802",
    "pr_id": 46802,
    "issue_id": 46544,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Spring Data API Extension fields with keywords broken\n### Describe the bug\n\nThe following method  `List<Parent> findAllByMessageAndOrder(String message,boolean order);` in ParentRepository breaks after version 3.18.0.CR1.\nBefore the method compiled successfully. Now i get the following error:\n```\n[error]: Build step io.quarkus.spring.data.deployment.SpringDataJPAProcessor#build threw an exception: io.quarkus.spring.data.deployment.UnableToParseMethodException: Entity at.atc.database.entities.Parent does not contain a field named: der. Offending method is 'findAllByMessageAndOrder' of repository 'at.atc.database.repository.ParentRepository'.\n\n```\nIt seems like the keyword is recognized before a matching field.\n\nThe following method  `List<Parent> findAllByPaymentInformationAgeIn(List<Long> age);` in ParentRepository is also not working. Also before 3.18.0.CR1. But the error seems to be the same kind of error:\n```\n[error]: Build step io.quarkus.spring.data.deployment.SpringDataJPAProcessor#build threw an exception: io.quarkus.spring.data.deployment.UnableToParseMethodException: Entity at.atc.database.entities.Parent does not contain a field named: paymentformationAge. Offending method is 'findAllByPaymentInformationAgeIn' of repository 'at.atc.database.repository.ParentRepository'.\n\n```\n\n\n### Expected behavior\n\nThe methods should not cause an error.\n\n### Actual behavior\n\n_No response_\n\n### How to Reproduce?\n\nRepdroducer:\n[QuarkusReproducerJPAQueryMethod.zip](https://github.com/user-attachments/files/19014454/QuarkusReproducerJPAQueryMethod.zip)\n\nRun the reproducer using: `mvn clean compile quarkus:dev` This should cause the exception.\nBoth methods are in the ParentRepository. One is ommented out. To test the other method just uncomment it.\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### Quarkus version or git rev\n\n3.19.1\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
    "issue_word_count": 268,
    "test_files_count": 3,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "extensions/spring-data-jpa/deployment/src/main/java/io/quarkus/spring/data/deployment/MethodNameParser.java",
      "extensions/spring-data-jpa/deployment/src/test/java/io/quarkus/spring/data/deployment/MethodNameParserTest.java",
      "extensions/spring-data-jpa/deployment/src/test/java/io/quarkus/spring/data/deployment/Person.java",
      "extensions/spring-data-jpa/deployment/src/test/java/io/quarkus/spring/data/deployment/PersonRepository.java"
    ],
    "pr_changed_test_files": [
      "extensions/spring-data-jpa/deployment/src/test/java/io/quarkus/spring/data/deployment/MethodNameParserTest.java",
      "extensions/spring-data-jpa/deployment/src/test/java/io/quarkus/spring/data/deployment/Person.java",
      "extensions/spring-data-jpa/deployment/src/test/java/io/quarkus/spring/data/deployment/PersonRepository.java"
    ],
    "base_commit": "42b5e3237060519fa6154d56f417b2771202611d",
    "head_commit": "1d9375e7c818a960980914d32dd5b77c9cb40671",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46802",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46802",
    "dockerfile": "",
    "pr_merged_at": "2025-03-13T16:27:31.000Z",
    "patch": "diff --git a/extensions/spring-data-jpa/deployment/src/main/java/io/quarkus/spring/data/deployment/MethodNameParser.java b/extensions/spring-data-jpa/deployment/src/main/java/io/quarkus/spring/data/deployment/MethodNameParser.java\nindex 9fb498ce5d691..8a276b084fa34 100644\n--- a/extensions/spring-data-jpa/deployment/src/main/java/io/quarkus/spring/data/deployment/MethodNameParser.java\n+++ b/extensions/spring-data-jpa/deployment/src/main/java/io/quarkus/spring/data/deployment/MethodNameParser.java\n@@ -177,9 +177,15 @@ public Result parse(MethodInfo methodInfo) {\n         boolean containsOr = containsLogicOperator(afterByPart, \"Or\");\n         String[] partsArray = parts.toArray(new String[0]);\n         //Spring supports mixing clauses 'And' and 'Or' together in method names\n-        if (containsAnd || containsOr) {\n+        if (containsAnd && containsOr) {\n             List<String> words = splitAndIncludeRegex(afterByPart, \"And\", \"Or\");\n             partsArray = words.toArray(new String[0]);\n+        } else if (containsAnd) {\n+            List<String> words = splitAndIncludeRegex(afterByPart, \"And\");\n+            partsArray = words.toArray(new String[0]);\n+        } else if (containsOr) {\n+            List<String> words = splitAndIncludeRegex(afterByPart, \"Or\");\n+            partsArray = words.toArray(new String[0]);\n         }\n \n         MutableReference<List<ClassInfo>> mappedSuperClassInfoRef = MutableReference.of(mappedSuperClassInfos);\n@@ -393,7 +399,9 @@ private List<String> splitAndIncludeRegex(String input, String... regexes) {\n             if (patternBuilder.length() > 0) {\n                 patternBuilder.append(\"|\");\n             }\n-            patternBuilder.append(\"(\").append(regex).append(\")\");\n+            // Add a limit word, \\b, but adapted to camelCase (start or after a lowercase letter, end or followed by an uppercase letter)\n+            patternBuilder.append(\"(?<=[a-z])(\").append(regex).append(\")(?=[A-Z]|$)\");\n+            patternBuilder.append(\"|(?<=^|[A-Z])(\").append(regex).append(\")(?=[A-Z]|$)\");\n         }\n         Pattern pattern = Pattern.compile(patternBuilder.toString());\n         Matcher matcher = pattern.matcher(input);\n@@ -404,7 +412,6 @@ private List<String> splitAndIncludeRegex(String input, String... regexes) {\n             if (matcher.start() > lastIndex) {\n                 result.add(input.substring(lastIndex, matcher.start()));\n             }\n-\n             // Add the regex\n             result.add(matcher.group());\n             lastIndex = matcher.end();\n@@ -580,10 +587,16 @@ private boolean containsLogicOperator(String str, String operatorStr) {\n         if (index == -1) {\n             return false;\n         }\n-        if (str.length() < index + operatorStr.length() + 1) {\n-            return false;\n-        }\n-        return Character.isUpperCase(str.charAt(index + operatorStr.length()));\n+\n+        // Check if the operator is at the beginning or preceded by capital letter.\n+        boolean startsCorrectly = (index == 0) || Character.isLowerCase(str.charAt(index - 1));\n+\n+        // Check if the operator ends before the end or is followed by a capital letter.\n+        boolean endsCorrectly = (index + operatorStr.length() == str.length())\n+                || Character.isUpperCase(str.charAt(index + operatorStr.length()));\n+\n+        return startsCorrectly && endsCorrectly;\n+\n     }\n \n     private void validateFieldWithOperation(String operation, FieldInfo fieldInfo, String fieldPath,\n",
    "test_patch": "diff --git a/extensions/spring-data-jpa/deployment/src/test/java/io/quarkus/spring/data/deployment/MethodNameParserTest.java b/extensions/spring-data-jpa/deployment/src/test/java/io/quarkus/spring/data/deployment/MethodNameParserTest.java\nindex 4b4d6ee512e5a..3b5686f007bea 100644\n--- a/extensions/spring-data-jpa/deployment/src/test/java/io/quarkus/spring/data/deployment/MethodNameParserTest.java\n+++ b/extensions/spring-data-jpa/deployment/src/test/java/io/quarkus/spring/data/deployment/MethodNameParserTest.java\n@@ -38,6 +38,28 @@ public void testFindAllByAddressZipCode() throws Exception {\n                 .isEqualTo(\"FROM Person AS person LEFT JOIN person.address address WHERE address.zipCode = ?1\");\n     }\n \n+    @Test\n+    public void testFindAllByNameAndOrder() throws Exception {\n+        MethodNameParser.Result result = parseMethod(repositoryClass, \"findAllByNameAndOrder\", entityClass,\n+                additionalClasses);\n+        assertThat(result).isNotNull();\n+        assertSameClass(result.getEntityClass(), entityClass);\n+        assertThat(result.getParamCount()).isEqualTo(2);\n+        assertThat(result.getQuery())\n+                .isEqualTo(\"FROM Person AS person WHERE name = ?1 AND order = ?2\");\n+    }\n+\n+    @Test\n+    public void testFindAllByNameOrOrder() throws Exception {\n+        MethodNameParser.Result result = parseMethod(repositoryClass, \"findAllByNameOrOrder\", entityClass,\n+                additionalClasses);\n+        assertThat(result).isNotNull();\n+        assertSameClass(result.getEntityClass(), entityClass);\n+        assertThat(result.getParamCount()).isEqualTo(2);\n+        assertThat(result.getQuery())\n+                .isEqualTo(\"FROM Person AS person WHERE name = ?1 OR order = ?2\");\n+    }\n+\n     @Test\n     public void testFindAllByAddressCountry() throws Exception {\n         MethodNameParser.Result result = parseMethod(repositoryClass, \"findAllByAddressCountry\", entityClass,\n\ndiff --git a/extensions/spring-data-jpa/deployment/src/test/java/io/quarkus/spring/data/deployment/Person.java b/extensions/spring-data-jpa/deployment/src/test/java/io/quarkus/spring/data/deployment/Person.java\nindex 7c3b04250a7b0..9e7cfc3aaf586 100644\n--- a/extensions/spring-data-jpa/deployment/src/test/java/io/quarkus/spring/data/deployment/Person.java\n+++ b/extensions/spring-data-jpa/deployment/src/test/java/io/quarkus/spring/data/deployment/Person.java\n@@ -19,6 +19,7 @@ public class Person {\n     private Integer age;\n     private ZonedDateTime birthDate;\n     private Boolean active;\n+    private String order;\n \n     @ManyToOne(cascade = CascadeType.ALL)\n     @JoinColumn(name = \"address_id\", referencedColumnName = \"id\")\n@@ -29,11 +30,12 @@ public class Person {\n     public Person() {\n     }\n \n-    public Person(String name, Integer age, ZonedDateTime birthDate, Boolean active) {\n+    public Person(String name, Integer age, ZonedDateTime birthDate, Boolean active, String order) {\n         this.name = name;\n         this.age = age;\n         this.birthDate = birthDate;\n         this.active = active;\n+        this.order = order;\n     }\n \n     public String getName() {\n@@ -68,6 +70,14 @@ public void setActive(Boolean active) {\n         this.active = active;\n     }\n \n+    public String getOrder() {\n+        return order;\n+    }\n+\n+    public void setOrder(String order) {\n+        this.order = order;\n+    }\n+\n     public Address getAddress() {\n         return address;\n     }\n\ndiff --git a/extensions/spring-data-jpa/deployment/src/test/java/io/quarkus/spring/data/deployment/PersonRepository.java b/extensions/spring-data-jpa/deployment/src/test/java/io/quarkus/spring/data/deployment/PersonRepository.java\nindex 1492220aa70d2..04f21b738fc45 100644\n--- a/extensions/spring-data-jpa/deployment/src/test/java/io/quarkus/spring/data/deployment/PersonRepository.java\n+++ b/extensions/spring-data-jpa/deployment/src/test/java/io/quarkus/spring/data/deployment/PersonRepository.java\n@@ -9,6 +9,10 @@ public interface PersonRepository extends Repository<Person, Integer> {\n \n     List<Person> findAllByAddressZipCode(String zipCode);\n \n+    List<Person> findAllByNameAndOrder(String name, String order);\n+\n+    List<Person> findAllByNameOrOrder(String name, String order);\n+\n     List<Person> findAllByAddressCountry(String zipCode);\n \n     List<Person> findAllByNameAndAgeAndActive(String name, int age, boolean active);\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46794",
    "pr_id": 46794,
    "issue_id": 46771,
    "repo": "quarkusio/quarkus",
    "problem_statement": "ArC: validate bean types added to a synthetic bean\n### Description\n\nAnd fail fast if an illegal bean type is registered.\n\nSee also https://github.com/quarkusio/quarkus/discussions/46648.\n\n### Implementation ideas\n\n_No response_",
    "issue_word_count": 33,
    "test_files_count": 4,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanConfigurator.java",
      "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/Types.java",
      "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/buildextension/beans/SyntheticBeanWithTypeVariableArrayTest.java",
      "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/buildextension/beans/SyntheticBeanWithTypeVariableTest.java",
      "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/buildextension/beans/SyntheticBeanWithWildcardParameterizedTypeArrayTest.java",
      "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/buildextension/beans/SyntheticBeanWithWildcardParameterizedTypeTest.java"
    ],
    "pr_changed_test_files": [
      "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/buildextension/beans/SyntheticBeanWithTypeVariableArrayTest.java",
      "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/buildextension/beans/SyntheticBeanWithTypeVariableTest.java",
      "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/buildextension/beans/SyntheticBeanWithWildcardParameterizedTypeArrayTest.java",
      "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/buildextension/beans/SyntheticBeanWithWildcardParameterizedTypeTest.java"
    ],
    "base_commit": "5b589335bde06d5f9ca3c963439dedf8c159cf80",
    "head_commit": "37e8e2879ba609bdbd58062904ba878c4b7e3cc6",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46794",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46794",
    "dockerfile": "",
    "pr_merged_at": "2025-03-17T16:26:49.000Z",
    "patch": "diff --git a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanConfigurator.java b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanConfigurator.java\nindex 80f7b6add09fd..4991e56d9262e 100644\n--- a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanConfigurator.java\n+++ b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanConfigurator.java\n@@ -120,7 +120,13 @@ public void done() {\n                 builder.injections(Collections.singletonList(Injection.forSyntheticBean(injectionPoints)));\n             }\n \n-            beanConsumer.accept(builder.build());\n+            BeanInfo bean = builder.build();\n+\n+            for (Type type : this.types) {\n+                Types.checkLegalBeanType(type, bean);\n+            }\n+\n+            beanConsumer.accept(bean);\n         }\n     }\n \n\ndiff --git a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/Types.java b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/Types.java\nindex e085ef67e1516..376975c37ad64 100644\n--- a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/Types.java\n+++ b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/Types.java\n@@ -243,7 +243,7 @@ private static void getTypeHandle(AssignableResultHandle variable, BytecodeCreat\n \n         } else if (Kind.ARRAY.equals(type.kind())) {\n             ArrayType array = type.asArrayType();\n-            Type elementType = getArrayElementType(array);\n+            Type elementType = array.elementType();\n \n             ResultHandle arrayHandle;\n             if (elementType.kind() == Kind.PRIMITIVE || elementType.kind() == Kind.CLASS) {\n@@ -420,14 +420,6 @@ static Type getProviderType(ClassInfo classInfo) {\n         }\n     }\n \n-    static Type getArrayElementType(ArrayType array) {\n-        Type elementType = array.constituent();\n-        while (elementType.kind() == Kind.ARRAY) {\n-            elementType = elementType.asArrayType().constituent();\n-        }\n-        return elementType;\n-    }\n-\n     static TypeClosure getProducerMethodTypeClosure(MethodInfo producerMethod, BeanDeployment beanDeployment) {\n         Set<Type> types;\n         Set<Type> unrestrictedBeanTypes = new HashSet<>();\n@@ -615,12 +607,39 @@ static List<Type> getResolvedParameters(ClassInfo classInfo, Map<String, Type> r\n         }\n     }\n \n+    /**\n+     * Throws {@code DefinitionException} if given {@code type} is not a legal bean type.\n+     * <p>\n+     * This method is currently only used for synthetic beans. Legal bean types are checked\n+     * for producers through other means (see {@link #checkArrayType(ArrayType, AnnotationTarget) checkArrayType()}\n+     * and {@link #containsWildcard(Type, AnnotationTarget, boolean) containsWildcard()}).\n+     */\n+    static void checkLegalBeanType(Type type, Object beanDescription) {\n+        if (type.kind() == Kind.TYPE_VARIABLE) {\n+            throw new DefinitionException(\"Type variable is not a legal bean type: \" + beanDescription);\n+        } else if (type.kind() == Kind.PARAMETERIZED_TYPE) {\n+            checkWildcard(type, beanDescription);\n+        } else if (type.kind() == Kind.ARRAY) {\n+            checkLegalBeanType(type.asArrayType().elementType(), beanDescription);\n+        }\n+    }\n+\n+    private static void checkWildcard(Type type, Object beanDescription) {\n+        if (type.kind() == Kind.WILDCARD_TYPE) {\n+            throw new DefinitionException(\"Wildcard type is not a legal bean type: \" + beanDescription);\n+        } else if (type.kind() == Kind.PARAMETERIZED_TYPE) {\n+            for (Type typeArgument : type.asParameterizedType().arguments()) {\n+                checkWildcard(typeArgument, beanDescription);\n+            }\n+        }\n+    }\n+\n     /**\n      * Throws {@code DefinitionException} if given {@code producerFieldOrMethod},\n      * whose type is given {@code arrayType}, is invalid due to the rules for arrays.\n      */\n     static void checkArrayType(ArrayType arrayType, AnnotationTarget producerFieldOrMethod) {\n-        Type elementType = getArrayElementType(arrayType);\n+        Type elementType = arrayType.elementType();\n         if (elementType.kind() == Kind.TYPE_VARIABLE) {\n             throw new DefinitionException(\"A type variable array is not a legal bean type: \" + producerFieldOrMethod);\n         }\n",
    "test_patch": "diff --git a/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/buildextension/beans/SyntheticBeanWithTypeVariableArrayTest.java b/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/buildextension/beans/SyntheticBeanWithTypeVariableArrayTest.java\nnew file mode 100644\nindex 0000000000000..c0c39bb556126\n--- /dev/null\n+++ b/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/buildextension/beans/SyntheticBeanWithTypeVariableArrayTest.java\n@@ -0,0 +1,54 @@\n+package io.quarkus.arc.test.buildextension.beans;\n+\n+import static org.junit.jupiter.api.Assertions.assertInstanceOf;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import jakarta.enterprise.inject.spi.DefinitionException;\n+\n+import org.jboss.jandex.ArrayType;\n+import org.jboss.jandex.TypeVariable;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.arc.BeanCreator;\n+import io.quarkus.arc.SyntheticCreationalContext;\n+import io.quarkus.arc.processor.BeanRegistrar;\n+import io.quarkus.arc.test.ArcTestContainer;\n+\n+public class SyntheticBeanWithTypeVariableArrayTest {\n+    @RegisterExtension\n+    public ArcTestContainer container = ArcTestContainer.builder()\n+            .beanRegistrars(new MyBeanRegistrar())\n+            .shouldFail()\n+            .build();\n+\n+    @Test\n+    public void trigger() {\n+        Throwable error = container.getFailure();\n+        assertNotNull(error);\n+        assertInstanceOf(DefinitionException.class, error);\n+        assertTrue(error.getMessage().contains(\"Type variable is not a legal bean type\"));\n+    }\n+\n+    static class MyBean {\n+    }\n+\n+    static class MyBeanCreator implements BeanCreator<MyBean> {\n+        @Override\n+        public MyBean create(SyntheticCreationalContext<MyBean> context) {\n+            return new MyBean();\n+        }\n+    }\n+\n+    static class MyBeanRegistrar implements BeanRegistrar {\n+        @Override\n+        public void register(RegistrationContext context) {\n+            context.configure(MyBean.class)\n+                    .addType(MyBean.class)\n+                    .addType(ArrayType.create(TypeVariable.create(\"T\"), 1))\n+                    .creator(MyBeanCreator.class)\n+                    .done();\n+        }\n+    }\n+}\n\ndiff --git a/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/buildextension/beans/SyntheticBeanWithTypeVariableTest.java b/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/buildextension/beans/SyntheticBeanWithTypeVariableTest.java\nnew file mode 100644\nindex 0000000000000..60bf393a1c4db\n--- /dev/null\n+++ b/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/buildextension/beans/SyntheticBeanWithTypeVariableTest.java\n@@ -0,0 +1,53 @@\n+package io.quarkus.arc.test.buildextension.beans;\n+\n+import static org.junit.jupiter.api.Assertions.assertInstanceOf;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import jakarta.enterprise.inject.spi.DefinitionException;\n+\n+import org.jboss.jandex.TypeVariable;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.arc.BeanCreator;\n+import io.quarkus.arc.SyntheticCreationalContext;\n+import io.quarkus.arc.processor.BeanRegistrar;\n+import io.quarkus.arc.test.ArcTestContainer;\n+\n+public class SyntheticBeanWithTypeVariableTest {\n+    @RegisterExtension\n+    public ArcTestContainer container = ArcTestContainer.builder()\n+            .beanRegistrars(new MyBeanRegistrar())\n+            .shouldFail()\n+            .build();\n+\n+    @Test\n+    public void trigger() {\n+        Throwable error = container.getFailure();\n+        assertNotNull(error);\n+        assertInstanceOf(DefinitionException.class, error);\n+        assertTrue(error.getMessage().contains(\"Type variable is not a legal bean type\"));\n+    }\n+\n+    static class MyBean {\n+    }\n+\n+    static class MyBeanCreator implements BeanCreator<MyBean> {\n+        @Override\n+        public MyBean create(SyntheticCreationalContext<MyBean> context) {\n+            return new MyBean();\n+        }\n+    }\n+\n+    static class MyBeanRegistrar implements BeanRegistrar {\n+        @Override\n+        public void register(RegistrationContext context) {\n+            context.configure(MyBean.class)\n+                    .addType(MyBean.class)\n+                    .addType(TypeVariable.create(\"T\"))\n+                    .creator(MyBeanCreator.class)\n+                    .done();\n+        }\n+    }\n+}\n\ndiff --git a/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/buildextension/beans/SyntheticBeanWithWildcardParameterizedTypeArrayTest.java b/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/buildextension/beans/SyntheticBeanWithWildcardParameterizedTypeArrayTest.java\nnew file mode 100644\nindex 0000000000000..b86ca75f6828e\n--- /dev/null\n+++ b/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/buildextension/beans/SyntheticBeanWithWildcardParameterizedTypeArrayTest.java\n@@ -0,0 +1,58 @@\n+package io.quarkus.arc.test.buildextension.beans;\n+\n+import static org.junit.jupiter.api.Assertions.assertInstanceOf;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.List;\n+\n+import jakarta.enterprise.inject.spi.DefinitionException;\n+\n+import org.jboss.jandex.ArrayType;\n+import org.jboss.jandex.ParameterizedType;\n+import org.jboss.jandex.WildcardType;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.arc.BeanCreator;\n+import io.quarkus.arc.SyntheticCreationalContext;\n+import io.quarkus.arc.processor.BeanRegistrar;\n+import io.quarkus.arc.test.ArcTestContainer;\n+\n+public class SyntheticBeanWithWildcardParameterizedTypeArrayTest {\n+    @RegisterExtension\n+    public ArcTestContainer container = ArcTestContainer.builder()\n+            .beanRegistrars(new MyBeanRegistrar())\n+            .shouldFail()\n+            .build();\n+\n+    @Test\n+    public void trigger() {\n+        Throwable error = container.getFailure();\n+        assertNotNull(error);\n+        assertInstanceOf(DefinitionException.class, error);\n+        assertTrue(error.getMessage().contains(\"Wildcard type is not a legal bean type\"));\n+    }\n+\n+    static class MyBean {\n+    }\n+\n+    static class MyBeanCreator implements BeanCreator<MyBean> {\n+        @Override\n+        public MyBean create(SyntheticCreationalContext<MyBean> context) {\n+            return new MyBean();\n+        }\n+    }\n+\n+    static class MyBeanRegistrar implements BeanRegistrar {\n+        @Override\n+        public void register(RegistrationContext context) {\n+            context.configure(MyBean.class)\n+                    .addType(MyBean.class)\n+                    .addType(ArrayType.create(\n+                            ParameterizedType.builder(List.class).addArgument(WildcardType.UNBOUNDED).build(), 2))\n+                    .creator(MyBeanCreator.class)\n+                    .done();\n+        }\n+    }\n+}\n\ndiff --git a/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/buildextension/beans/SyntheticBeanWithWildcardParameterizedTypeTest.java b/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/buildextension/beans/SyntheticBeanWithWildcardParameterizedTypeTest.java\nnew file mode 100644\nindex 0000000000000..4af3f8a9e9a1b\n--- /dev/null\n+++ b/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/buildextension/beans/SyntheticBeanWithWildcardParameterizedTypeTest.java\n@@ -0,0 +1,56 @@\n+package io.quarkus.arc.test.buildextension.beans;\n+\n+import static org.junit.jupiter.api.Assertions.assertInstanceOf;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.List;\n+\n+import jakarta.enterprise.inject.spi.DefinitionException;\n+\n+import org.jboss.jandex.ParameterizedType;\n+import org.jboss.jandex.WildcardType;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.arc.BeanCreator;\n+import io.quarkus.arc.SyntheticCreationalContext;\n+import io.quarkus.arc.processor.BeanRegistrar;\n+import io.quarkus.arc.test.ArcTestContainer;\n+\n+public class SyntheticBeanWithWildcardParameterizedTypeTest {\n+    @RegisterExtension\n+    public ArcTestContainer container = ArcTestContainer.builder()\n+            .beanRegistrars(new MyBeanRegistrar())\n+            .shouldFail()\n+            .build();\n+\n+    @Test\n+    public void trigger() {\n+        Throwable error = container.getFailure();\n+        assertNotNull(error);\n+        assertInstanceOf(DefinitionException.class, error);\n+        assertTrue(error.getMessage().contains(\"Wildcard type is not a legal bean type\"));\n+    }\n+\n+    static class MyBean {\n+    }\n+\n+    static class MyBeanCreator implements BeanCreator<MyBean> {\n+        @Override\n+        public MyBean create(SyntheticCreationalContext<MyBean> context) {\n+            return new MyBean();\n+        }\n+    }\n+\n+    static class MyBeanRegistrar implements BeanRegistrar {\n+        @Override\n+        public void register(RegistrationContext context) {\n+            context.configure(MyBean.class)\n+                    .addType(MyBean.class)\n+                    .addType(ParameterizedType.builder(List.class).addArgument(WildcardType.UNBOUNDED).build())\n+                    .creator(MyBeanCreator.class)\n+                    .done();\n+        }\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46793",
    "pr_id": 46793,
    "issue_id": 38987,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Mockito fails to mock non-public inner class in continuous testing due to classloading issues\n### Describe the bug\n\nThe following primitive test (and tested class):\r\n```java\r\n@ExtendWith(MockitoExtension.class)\r\npublic class FooTest {\r\n\r\n    @Mock\r\n    private Foo.Inner mock;\r\n\r\n    @Test\r\n    public void test() {\r\n\r\n    }\r\n}\r\n```\r\n```java\r\npublic class Foo {\r\n\r\n    static class Inner {\r\n    }\r\n}\r\n```\r\nworks fine in IDE or mvn, but fails with `mvn quarkus:test`:\r\n```\r\nERROR [io.qua.test] (Test runner thread) Test FooTest#test() failed \r\n: org.mockito.exceptions.base.MockitoException: \r\nMockito cannot mock this class: class org.acme.Foo$Inner.\r\n\r\nMockito can only mock non-private & non-final classes, but the root cause of this error might be different.\r\nPlease check the full stacktrace to understand what the issue is.\r\nIf you're still not sure why you're getting this error, please open an issue on GitHub.\r\n\r\n\r\nJava               : 17\r\nJVM vendor name    : Azul Systems, Inc.\r\nJVM vendor version : 17.0.9+8-LTS\r\nJVM name           : OpenJDK 64-Bit Server VM\r\nJVM version        : 17.0.9+8-LTS\r\nJVM info           : mixed mode, emulated-client, sharing\r\nOS name            : Linux\r\nOS version         : 5.15.0-94-generic\r\n\r\n\r\nUnderlying exception : org.mockito.exceptions.base.MockitoException: \r\nCannot create mock for class org.acme.Foo$Inner\r\n\r\nThe type is not public and its mock class is loaded by a different class loader.\r\nThis can have multiple reasons:\r\n - You are mocking a class with additional interfaces of another class loader\r\n - Mockito is loaded by a different class loader than the mocked type (e.g. with OSGi)\r\n - The thread's context class loader is different than the mock's class loader\r\n\tat org.mockito.junit.jupiter.MockitoExtension.beforeEach(MockitoExtension.java:160)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\r\n\tSuppressed: java.lang.NullPointerException: Cannot invoke \"java.util.Set.forEach(java.util.function.Consumer)\" because the return value of \"org.junit.jupiter.api.extension.ExtensionContext$Store.remove(Object, java.lang.Class)\" is null\r\n\t\tat org.mockito.junit.jupiter.MockitoExtension.afterEach(MockitoExtension.java:194)\r\n\t\t... 2 more\r\nCaused by: org.mockito.exceptions.base.MockitoException: \r\nCannot create mock for class org.acme.Foo$Inner\r\n\r\nThe type is not public and its mock class is loaded by a different class loader.\r\nThis can have multiple reasons:\r\n - You are mocking a class with additional interfaces of another class loader\r\n - Mockito is loaded by a different class loader than the mocked type (e.g. with OSGi)\r\n - The thread's context class loader is different than the mock's class loader\r\n\tat net.bytebuddy.TypeCache.findOrInsert(TypeCache.java:168)\r\n\tat net.bytebuddy.TypeCache$WithInlineExpunction.findOrInsert(TypeCache.java:399)\r\n\tat net.bytebuddy.TypeCache.findOrInsert(TypeCache.java:190)\r\n\tat net.bytebuddy.TypeCache$WithInlineExpunction.findOrInsert(TypeCache.java:410)\r\n\t... 3 more\r\n\r\n\r\nERROR [io.qua.test] (Test runner thread) >>>>>>>>>>>>>>>>>>>> Summary: <<<<<<<<<<<<<<<<<<<<\r\nFooTest#test()\r\n```\n\n### Expected behavior\n\nNo failure, should work as in IDE or mvn.\n\n### Actual behavior\n\nFails with classloading issue.\n\n### How to Reproduce?\n\n1. clone https://github.com/famod/q_ctest-inner\r\n2. `mvn clean verify` (passes)\r\n3. `mvn quarkus:test` fails\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### Quarkus version or git rev\n\n3.7.4\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\nThe problem vanishes after adding `public` to the inner class.\r\n\r\nI have another case where adding `public` helps, but that's not an inner class.\r\n\r\nIt has been an issue for many releases now, I just haven't found the time to report it.\r\nI'm rather sure (IIRC) it was actually working some months ago.",
    "issue_word_count": 590,
    "test_files_count": 9,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "integration-tests/maven/src/test/java/io/quarkus/maven/it/DevMojoIT.java",
      "integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/.gitignore",
      "integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/pom.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/src/main/java/org/acme/Foo.java",
      "integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/src/main/java/org/acme/HelloResource.java",
      "integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/src/main/java/org/acme/MyApplication.java",
      "integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/src/main/resources/META-INF/resources/index.html",
      "integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/src/main/resources/application.properties",
      "integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/src/test/java/org/acme/FooTest.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/maven/src/test/java/io/quarkus/maven/it/DevMojoIT.java",
      "integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/.gitignore",
      "integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/pom.xml",
      "integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/src/main/java/org/acme/Foo.java",
      "integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/src/main/java/org/acme/HelloResource.java",
      "integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/src/main/java/org/acme/MyApplication.java",
      "integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/src/main/resources/META-INF/resources/index.html",
      "integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/src/main/resources/application.properties",
      "integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/src/test/java/org/acme/FooTest.java"
    ],
    "base_commit": "746f5ebdd9b615d6d73fab95a7bcf823889605f3",
    "head_commit": "87440c4128413dc5b16a005f2fb41de5e22833cf",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46793",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46793",
    "dockerfile": "",
    "pr_merged_at": "2025-03-14T13:29:20.000Z",
    "patch": "",
    "test_patch": "diff --git a/integration-tests/maven/src/test/java/io/quarkus/maven/it/DevMojoIT.java b/integration-tests/maven/src/test/java/io/quarkus/maven/it/DevMojoIT.java\nindex e4effebd3ffd0..4cbe04a7334bf 100644\n--- a/integration-tests/maven/src/test/java/io/quarkus/maven/it/DevMojoIT.java\n+++ b/integration-tests/maven/src/test/java/io/quarkus/maven/it/DevMojoIT.java\n@@ -1374,6 +1374,21 @@ public void testPropertyExpansion() throws IOException, MavenInvocationException\n         assertThat(devModeClient.getHttpResponse(\"/app/hello/applicationName\")).isEqualTo(\"myapp\");\n     }\n \n+    @Disabled(\"See https://github.com/quarkusio/quarkus/issues/38987\")\n+    @Test\n+    public void testMockitoForNonPublicInnerClass() throws MavenInvocationException, IOException {\n+        // Scenario discussed in https://github.com/quarkusio/quarkus/issues/38987\n+        testDir = initProject(\"projects/mockito-non-public-inner-class\", \"projects/mockito-non-public-inner-class-out\");\n+        runAndCheck();\n+\n+        ContinuousTestingMavenTestUtils testingTestUtils = new ContinuousTestingMavenTestUtils();\n+        ContinuousTestingMavenTestUtils.TestStatus results = testingTestUtils.waitForNextCompletion();\n+\n+        //check that the tests ran green\n+        Assertions.assertEquals(0, results.getTestsFailed());\n+        Assertions.assertEquals(1, results.getTestsPassed());\n+    }\n+\n     @Test\n     public void testMultiJarModuleDevModeMocks() throws MavenInvocationException, IOException {\n         testDir = initProject(\"projects/multijar-module\", \"projects/multijar-module-devmode-mocks\");\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/.gitignore b/integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/.gitignore\nnew file mode 100644\nindex 0000000000000..8c7863e7b9f1d\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/.gitignore\n@@ -0,0 +1,43 @@\n+#Maven\n+target/\n+pom.xml.tag\n+pom.xml.releaseBackup\n+pom.xml.versionsBackup\n+release.properties\n+.flattened-pom.xml\n+\n+# Eclipse\n+.project\n+.classpath\n+.settings/\n+bin/\n+\n+# IntelliJ\n+.idea\n+*.ipr\n+*.iml\n+*.iws\n+\n+# NetBeans\n+nb-configuration.xml\n+\n+# Visual Studio Code\n+.vscode\n+.factorypath\n+\n+# OSX\n+.DS_Store\n+\n+# Vim\n+*.swp\n+*.swo\n+\n+# patch\n+*.orig\n+*.rej\n+\n+# Local environment\n+.env\n+\n+# Plugin directory\n+/.quarkus/cli/plugins/\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/pom.xml b/integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/pom.xml\nnew file mode 100644\nindex 0000000000000..fbe2012be6825\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/pom.xml\n@@ -0,0 +1,116 @@\n+<?xml version=\"1.0\"?>\n+<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <groupId>org.acme</groupId>\n+  <artifactId>code-with-quarkus</artifactId>\n+  <version>1.0.0-SNAPSHOT</version>\n+  <properties>\n+    <compiler-plugin.version>3.12.1</compiler-plugin.version>\n+    <maven.compiler.release>17</maven.compiler.release>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n+    <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>\n+    <quarkus.platform.group-id>io.quarkus</quarkus.platform.group-id>\n+    <quarkus.platform.version>@project.version@</quarkus.platform.version>\n+    <skipITs>true</skipITs>\n+    <surefire-plugin.version>3.2.5</surefire-plugin.version>\n+  </properties>\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>${quarkus.platform.group-id}</groupId>\n+        <artifactId>${quarkus.platform.artifact-id}</artifactId>\n+        <version>${quarkus.platform.version}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-arc</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-rest</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-junit5-mockito</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>${quarkus.platform.group-id}</groupId>\n+        <artifactId>quarkus-maven-plugin</artifactId>\n+        <version>${quarkus.platform.version}</version>\n+        <extensions>true</extensions>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>build</goal>\n+              <goal>generate-code</goal>\n+              <goal>generate-code-tests</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+      <plugin>\n+        <artifactId>maven-compiler-plugin</artifactId>\n+        <version>${compiler-plugin.version}</version>\n+        <configuration>\n+          <compilerArgs>\n+            <arg>-parameters</arg>\n+          </compilerArgs>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <artifactId>maven-surefire-plugin</artifactId>\n+        <version>${surefire-plugin.version}</version>\n+        <configuration>\n+          <systemPropertyVariables>\n+            <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n+            <maven.home>${maven.home}</maven.home>\n+          </systemPropertyVariables>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <artifactId>maven-failsafe-plugin</artifactId>\n+        <version>${surefire-plugin.version}</version>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>integration-test</goal>\n+              <goal>verify</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <systemPropertyVariables>\n+            <native.image.path>${project.build.directory}/${project.build.finalName}-runner</native.image.path>\n+            <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n+            <maven.home>${maven.home}</maven.home>\n+          </systemPropertyVariables>\n+        </configuration>\n+      </plugin>\n+    </plugins>\n+  </build>\n+  <profiles>\n+    <profile>\n+      <id>native</id>\n+      <activation>\n+        <property>\n+          <name>native</name>\n+        </property>\n+      </activation>\n+      <properties>\n+        <skipITs>false</skipITs>\n+        <quarkus.package.type>native</quarkus.package.type>\n+      </properties>\n+    </profile>\n+  </profiles>\n+</project>\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/src/main/java/org/acme/Foo.java b/integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/src/main/java/org/acme/Foo.java\nnew file mode 100644\nindex 0000000000000..2b937f5008dd0\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/src/main/java/org/acme/Foo.java\n@@ -0,0 +1,7 @@\n+package org.acme;\n+\n+public class Foo {\n+\n+    static class Inner {\n+    }\n+}\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/src/main/java/org/acme/HelloResource.java b/integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/src/main/java/org/acme/HelloResource.java\nnew file mode 100644\nindex 0000000000000..673bff3844f68\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/src/main/java/org/acme/HelloResource.java\n@@ -0,0 +1,17 @@\n+package org.acme;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.Produces;\n+import jakarta.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class HelloResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+\n+}\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/src/main/java/org/acme/MyApplication.java b/integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/src/main/java/org/acme/MyApplication.java\nnew file mode 100644\nindex 0000000000000..a6d66f8b9eda2\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/src/main/java/org/acme/MyApplication.java\n@@ -0,0 +1,9 @@\n+package org.acme;\n+\n+import jakarta.ws.rs.ApplicationPath;\n+import jakarta.ws.rs.core.Application;\n+\n+@ApplicationPath(\"/app\")\n+public class MyApplication extends Application {\n+\n+}\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/src/main/resources/META-INF/resources/index.html b/integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/src/main/resources/META-INF/resources/index.html\nnew file mode 100644\nindex 0000000000000..bbc0fe1468d9c\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/src/main/resources/META-INF/resources/index.html\n@@ -0,0 +1,156 @@\n+<!DOCTYPE html>\n+<html lang=\"en\">\n+<head>\n+    <meta charset=\"UTF-8\">\n+    <title>org.acme - 1.0-SNAPSHOT</title>\n+    <style>\n+        h1, h2, h3, h4, h5, h6 {\n+            margin-bottom: 0.5rem;\n+            font-weight: 400;\n+            line-height: 1.5;\n+        }\n+\n+        h1 {\n+            font-size: 2.5rem;\n+        }\n+\n+        h2 {\n+            font-size: 2rem\n+        }\n+\n+        h3 {\n+            font-size: 1.75rem\n+        }\n+\n+        h4 {\n+            font-size: 1.5rem\n+        }\n+\n+        h5 {\n+            font-size: 1.25rem\n+        }\n+\n+        h6 {\n+            font-size: 1rem\n+        }\n+\n+        .lead {\n+            font-weight: 300;\n+            font-size: 2rem;\n+        }\n+\n+        .banner {\n+            font-size: 2.7rem;\n+            margin: 0;\n+            padding: 2rem 1rem;\n+            background-color: #00A1E2;\n+            color: white;\n+        }\n+\n+        body {\n+            margin: 0;\n+            font-family: -apple-system, system-ui, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n+        }\n+\n+        code {\n+            font-family: SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n+            font-size: 87.5%;\n+            color: #e83e8c;\n+            word-break: break-word;\n+        }\n+\n+        .left-column {\n+            padding: .75rem;\n+            max-width: 75%;\n+            min-width: 55%;\n+        }\n+\n+        .right-column {\n+            padding: .75rem;\n+            max-width: 25%;\n+        }\n+\n+        .container {\n+            display: flex;\n+            width: 100%;\n+        }\n+\n+        li {\n+            margin: 0.75rem;\n+        }\n+\n+        .right-section {\n+            margin-left: 1rem;\n+            padding-left: 0.5rem;\n+        }\n+\n+        .right-section h3 {\n+            padding-top: 0;\n+            font-weight: 200;\n+        }\n+\n+        .right-section ul {\n+            border-left: 0.3rem solid #00A1E2;\n+            list-style-type: none;\n+            padding-left: 0;\n+        }\n+\n+    </style>\n+</head>\n+<body>\n+\n+<div class=\"banner lead\">\n+    Your new Cloud-Native application is ready!\n+</div>\n+\n+<div class=\"container\">\n+    <div class=\"left-column\">\n+        <p class=\"lead\"> Congratulations, you have created a new Quarkus application.</p>\n+\n+        <h2>Why do you see this?</h2>\n+\n+        <p>This page is served by Quarkus. The source is in\n+            <code>src/main/resources/META-INF/resources/index.html</code>.</p>\n+\n+        <h2>What can I do from here?</h2>\n+\n+        <p>If not already done, run the application in <em>dev mode</em> using: <code>mvn quarkus:dev</code>.\n+        </p>\n+        <ul>\n+            <li>Add REST resources, Servlets, functions and other services in <code>src/main/java</code>.</li>\n+            <li>Your static assets are located in <code>src/main/resources/META-INF/resources</code>.</li>\n+            <li>Configure your application in <code>src/main/resources/application.properties</code>.\n+            </li>\n+        </ul>\n+\n+        <h2>Do you like Quarkus?</h2>\n+        <p>Go give it a star on <a href=\"https://github.com/quarkusio/quarkus\">GitHub</a>.</p>\n+\n+        <h2>How do I get rid of this page?</h2>\n+        <p>Just delete the <code>src/main/resources/META-INF/resources/index.html</code> file.</p>\n+    </div>\n+    <div class=\"right-column\">\n+        <div class=\"right-section\">\n+            <h3>Application</h3>\n+            <ul>\n+                <li>GroupId: org.acme</li>\n+                <li>ArtifactId: acme</li>\n+                <li>Version: 1.0-SNAPSHOT</li>\n+                <li>Quarkus Version: 999-SNAPSHOT</li>\n+            </ul>\n+        </div>\n+        <div class=\"right-section\">\n+            <h3>Next steps</h3>\n+            <ul>\n+                <!-- the url have been erased on purpose -->\n+                <li><a href=\"#\">Setup your IDE</a></li>\n+                <li><a href=\"#\">Getting started</a></li>\n+                <li><a href=\"#\">Documentation</a></li>\n+            </ul>\n+        </div>\n+    </div>\n+</div>\n+\n+\n+</body>\n+</html>\n\\ No newline at end of file\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/src/main/resources/application.properties b/integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/src/main/resources/application.properties\nnew file mode 100644\nindex 0000000000000..07a519e0e7928\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/src/main/resources/application.properties\n@@ -0,0 +1 @@\n+quarkus.test.continuous-testing=enabled\n\ndiff --git a/integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/src/test/java/org/acme/FooTest.java b/integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/src/test/java/org/acme/FooTest.java\nnew file mode 100644\nindex 0000000000000..d1dc1ba4e906c\n--- /dev/null\n+++ b/integration-tests/maven/src/test/resources-filtered/projects/mockito-non-public-inner-class/src/test/java/org/acme/FooTest.java\n@@ -0,0 +1,30 @@\n+/*\n+ * Created on 23.02.2024\n+ *\n+ * Copyright(c) 1995 - 2022 T-Systems Multimedia Solutions GmbH\n+ * Riesaer Str. 5, 01129 Dresden\n+ * All rights reserved.\n+ */\n+package org.acme;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+/**\n+ * JAVADOC\n+ *\n+ * @author fmo\n+ */\n+@ExtendWith(MockitoExtension.class)\n+public class FooTest {\n+\n+    @Mock\n+    private Foo.Inner mock;\n+\n+    @Test\n+    public void test() {\n+\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46788",
    "pr_id": 46788,
    "issue_id": 46721,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Decorator for default methods of decorated types not being called\n### Describe the bug\n\nFirst: I am aware, quarkus is an implementation of CDI light, but not CDI full. Nevertheless it provides some functionalities of CDI full, like decorators, which I would expect to work like specified in CDI full.\n\nWe discovered actually some corner cases, where quarkus' implementation of CDI decorators actually behaves differently (in terms of not failing with an exception, but interpreting the spec differently) from other CDI implementations: If a bean has a bean type being an interface with default methods, which the bean itself does not override, any applied decorator for that bean type that override that method is never getting called but any calls are directly delegated to the interface's default method. If the bean overrides these default method (even if it just delegates it's calls to interface's default method), the decorator is getting called as expected.\n\nAs CDI light is not mentioning anything regarding decoration behaviour, I am [referring to the CDI full spec of decotors](https://jakarta.ee/specifications/cdi/4.1/jakarta-cdi-spec-4.1#decorated_types): \n> The decorator intercepts every method which is declared by a decorated type of the decorator and is implemented by the bean class of the decorator.\n\nFrom my interpretation, that reads like: If an interface declares a method (independently of being abstract or concrete) and an decorator class implements this method, the decorator is getting called for invocations of this method. The spec does not mention any differentiation between abstract and default methods. \n\n### Expected behavior\n\nYou can imagine I was somehow surprised when changing some interface's abstract methods to default ones (e.g. to remove duplications in implementing classes), that some decorations did not get applied any more, especially if these decorations are security relevant. I have silently assumed that decoration works, like in other CDI implementations and also programmatically applied DIY GoF decorator pattern.\n\n### Actual behavior\n\nCalls to default methods of decorated bean types, which are not overridden by the decorated bean itself, are not getting decorated, but directly delegated to the default method's implementation.\n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\nLinux NHH43414 5.15.167.4-microsoft-standard-WSL2 #1 SMP Tue Nov 5 00:21:55 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux\n\n### Output of `java -version`\n\nJava version: 21.0.6, vendor: Ubuntu, runtime: /usr/lib/jvm/java-21-openjdk-amd64\n\n### Quarkus version or git rev\n\n3.19.2\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nApache Maven 3.9.9\n\n### Additional information\n\n_No response_",
    "issue_word_count": 436,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanInfo.java",
      "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/decorators/DecoratorDefaultMethodTest.java"
    ],
    "pr_changed_test_files": [
      "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/decorators/DecoratorDefaultMethodTest.java"
    ],
    "base_commit": "526644eb63c727618cd398b8e74d9d8d5f54060e",
    "head_commit": "19a00de7dd3307f24f9bd4e88d9e4ec50faaddd4",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46788",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46788",
    "dockerfile": "",
    "pr_merged_at": "2025-03-18T11:28:51.000Z",
    "patch": "diff --git a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanInfo.java b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanInfo.java\nindex 89b33586ba9ff..0be784cb4487a 100644\n--- a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanInfo.java\n+++ b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanInfo.java\n@@ -827,6 +827,13 @@ private void addDecoratedMethods(Map<MethodKey, DecorationInfo> decoratedMethods\n                 addDecoratedMethods(decoratedMethods, superClassInfo, originalClassInfo, boundDecorators, skipPredicate);\n             }\n         }\n+\n+        for (DotName i : classInfo.interfaceNames()) {\n+            ClassInfo interfaceInfo = getClassByName(beanDeployment.getBeanArchiveIndex(), i);\n+            if (interfaceInfo != null) {\n+                addDecoratedMethods(decoratedMethods, interfaceInfo, originalClassInfo, boundDecorators, skipPredicate);\n+            }\n+        }\n     }\n \n     private List<DecoratorMethod> findMatchingDecorators(MethodInfo method, List<DecoratorInfo> decorators) {\n@@ -857,6 +864,9 @@ private List<DecoratorMethod> findMatchingDecorators(MethodInfo method, List<Dec\n                     decoratedMethodParams = Types.getResolvedParameters(decoratedTypeClass, resolvedTypeParameters,\n                             decoratedMethod,\n                             beanDeployment.getBeanArchiveIndex());\n+                    methodParams = Types.getResolvedParameters(decoratedTypeClass, resolvedTypeParameters,\n+                            method,\n+                            beanDeployment.getBeanArchiveIndex());\n                     for (int i = 0; i < methodParams.size(); i++) {\n                         BeanResolver resolver = beanDeployment.getDelegateInjectionPointResolver();\n                         Type decoratedParam = decoratedMethodParams.get(i);\n",
    "test_patch": "diff --git a/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/decorators/DecoratorDefaultMethodTest.java b/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/decorators/DecoratorDefaultMethodTest.java\nindex ca072e9ae26cd..d92844ef90d1d 100644\n--- a/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/decorators/DecoratorDefaultMethodTest.java\n+++ b/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/decorators/DecoratorDefaultMethodTest.java\n@@ -1,6 +1,8 @@\n package io.quarkus.arc.test.decorators;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import jakarta.annotation.Priority;\n import jakarta.decorator.Decorator;\n@@ -16,9 +18,10 @@\n import io.quarkus.arc.test.ArcTestContainer;\n \n public class DecoratorDefaultMethodTest {\n+\n     @RegisterExtension\n     public ArcTestContainer container = new ArcTestContainer(Converter.class, ToLengthConverter.class,\n-            NoopConverterDecorator.class);\n+            ConverterDecorator.class);\n \n     @SuppressWarnings(\"serial\")\n     @Test\n@@ -26,12 +29,20 @@ public void testDecoration() {\n         Converter<String> converter = Arc.container().instance(new TypeLiteral<Converter<String>>() {\n         }).get();\n         assertEquals(5, converter.convert(\"Hola!\"));\n+        assertTrue(converter.convertToBoolean(\"echo\"));\n+        assertFalse(converter.convertToBoolean(\"echos\"));\n     }\n \n     interface Converter<T> {\n+\n         default int convert(T value) {\n             return Integer.MAX_VALUE;\n         }\n+\n+        // this method is intentionally not overriden by ToLengthConverter\n+        default boolean convertToBoolean(T value) {\n+            return false;\n+        }\n     }\n \n     @ApplicationScoped\n@@ -44,7 +55,7 @@ public int convert(String value) {\n \n     @Priority(1)\n     @Decorator\n-    static class NoopConverterDecorator implements Converter<String> {\n+    static class ConverterDecorator implements Converter<String> {\n \n         @Inject\n         @Delegate\n@@ -54,6 +65,12 @@ static class NoopConverterDecorator implements Converter<String> {\n         public int convert(String value) {\n             return delegate.convert(value);\n         }\n+\n+        @Override\n+        public boolean convertToBoolean(String value) {\n+            return value.equals(\"echo\");\n+        }\n+\n     }\n \n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46738",
    "pr_id": 46738,
    "issue_id": 39800,
    "repo": "quarkusio/quarkus",
    "problem_statement": "PathParam injection doesn't work in subresources in Quarkus REST (formerly RESTEasy Reactive)\n### Describe the bug\r\n\r\nPer JAX-RS, request-scoped subresources have the ability to have parent path parameters, etc. injected. This works correctly for Quarkus RESTEasy and has for years.\r\n\r\nWe are looking at transitioning to Quarkus REST, and the transition was quite painless until we ran our tests and saw that almost all of our subresources were broken at runtime because none of the parent path parameters were injected.\r\n\r\nSee discussion in another ticket starting at https://github.com/quarkusio/quarkus/issues/37148#issuecomment-1826296595.\r\n\r\n### Expected behavior\r\n\r\n`@PathParam` from a parent resource works and is properly injected in subresources in Quarkus REST as it is in Quarkus RESTEasy.\r\n\r\n### Actual behavior\r\n\r\nUsing Quarkus REST, `@PathParam` injection doesn't occur, and the fields are kept to their default value (usually null).\r\n\r\n### How to Reproduce?\r\n\r\nReproducer: \r\n[code-with-quarkus-bug-reproducer.zip](https://github.com/quarkusio/quarkus/files/14812801/code-with-quarkus-bug-reproducer.zip)\r\n\r\nSteps to reproduce:\r\n1. Run with Quarkus REST: `./mvnw compile quarkus:dev`\r\n2. Use `curl` to request subresource endpoint: `curl http://localhost:8080/hello/2/sub` where \"2\" is the parent path param\r\n3. Expected response is \"Hello from SubResource of Hello 2\". Actual response is \"Hello from SubResource of Hello null\"\r\n\r\nIf you change `quarkus-rest` to `quarkus-resteasy` in `pom.xml` and re-run the steps above, the expected response is produced.\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\nDarwin QJRQ3G49V3-ML 23.4.0 Darwin Kernel Version 23.4.0: Fri Mar 15 00:12:49 PDT 2024; root:xnu-10063.101.17~1/RELEASE_ARM64_T6020 arm64\r\n\r\n### Output of `java -version`\r\n\r\nopenjdk version \"21.0.2\" 2024-01-16 OpenJDK Runtime Environment Homebrew (build 21.0.2) OpenJDK 64-Bit Server VM Homebrew (build 21.0.2, mixed mode, sharing)\r\n\r\n### Quarkus version or git rev\r\n\r\n3.9.1\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\nApache Maven 3.9.6 (bc0240f3c744dd6b6ec2920b3cd08dcc295161ae) Maven home: /Users/nadeata1/.m2/wrapper/dists/apache-maven-3.9.6-bin/3311e1d4/apache-maven-3.9.6 Java version: 21.0.2, vendor: Homebrew, runtime: /opt/homebrew/Cellar/openjdk/21.0.2/libexec/openjdk.jdk/Contents/Home Default locale: en_US, platform encoding: UTF-8 OS name: \"mac os x\", version: \"14.4.1\", arch: \"aarch64\", family: \"mac\"\r\n\r\n### Additional information\r\n\r\n_No response_",
    "issue_word_count": 393,
    "test_files_count": 1,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "extensions/resteasy-reactive/rest/deployment/src/main/java/io/quarkus/resteasy/reactive/server/deployment/ResteasyReactiveCDIProcessor.java",
      "extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/SubResourceFieldInjectionTest.java",
      "independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/scanning/ResteasyReactiveScanner.java",
      "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/startup/RuntimeDeploymentManager.java",
      "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/ResourceLocatorHandler.java"
    ],
    "pr_changed_test_files": [
      "extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/SubResourceFieldInjectionTest.java"
    ],
    "base_commit": "784377702aac39824e932ff4c48ce44f0e68b3bd",
    "head_commit": "42541b62b0c0639f2851883608ce035ed0b07d85",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46738",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46738",
    "dockerfile": "",
    "pr_merged_at": "2025-03-12T06:13:11.000Z",
    "patch": "diff --git a/extensions/resteasy-reactive/rest/deployment/src/main/java/io/quarkus/resteasy/reactive/server/deployment/ResteasyReactiveCDIProcessor.java b/extensions/resteasy-reactive/rest/deployment/src/main/java/io/quarkus/resteasy/reactive/server/deployment/ResteasyReactiveCDIProcessor.java\nindex d27e84c33b49c..d56c355522f1d 100644\n--- a/extensions/resteasy-reactive/rest/deployment/src/main/java/io/quarkus/resteasy/reactive/server/deployment/ResteasyReactiveCDIProcessor.java\n+++ b/extensions/resteasy-reactive/rest/deployment/src/main/java/io/quarkus/resteasy/reactive/server/deployment/ResteasyReactiveCDIProcessor.java\n@@ -110,7 +110,10 @@ public void accept(AnnotationTransformation.TransformationContext context) {\n                                             } else {\n                                                 // nothing to do as @RequestScoped was already present\n                                             }\n-                                        } else {\n+                                        } else if (!resourceScanningResultBuildItem.get().getResult().getPossibleSubResources()\n+                                                .containsKey(clazz.name())) {\n+                                            // no @RequestScoped for Sub Resources, since they might have a constructor\n+                                            // not compatible with CDI. User must explicitly mark as RequestScoped\n                                             context.add(RequestScoped.class);\n                                         }\n                                     }\n\ndiff --git a/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/scanning/ResteasyReactiveScanner.java b/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/scanning/ResteasyReactiveScanner.java\nindex 61a61ad272213..c35395754a992 100644\n--- a/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/scanning/ResteasyReactiveScanner.java\n+++ b/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/scanning/ResteasyReactiveScanner.java\n@@ -386,6 +386,9 @@ public static ResourceScanningResult scanResources(\n                     possibleSubResources.containsKey(classInfo.name())) {\n                 continue;\n             }\n+            if (hasJaxRsFieldInjection(classInfo, index)) {\n+                requestScopedResources.add(classInfo.name());\n+            }\n             possibleSubResources.put(classInfo.name(), classInfo);\n             //we need to also look for all subclasses and interfaces\n             //they may have type variables that need to be handled\n\ndiff --git a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/startup/RuntimeDeploymentManager.java b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/startup/RuntimeDeploymentManager.java\nindex 6f3e78a856097..e002104359e7b 100644\n--- a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/startup/RuntimeDeploymentManager.java\n+++ b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/startup/RuntimeDeploymentManager.java\n@@ -104,7 +104,7 @@ public Deployment deploy() {\n                     public BeanFactory.BeanInstance<?> apply(Class<?> aClass) {\n                         return info.getFactoryCreator().apply(aClass).createInstance();\n                     }\n-                });\n+                }, info.getClientProxyUnwrapper());\n \n         // sanitise the prefix for our usage to make it either an empty string, or something which starts with a / and does not\n         // end with one\n\ndiff --git a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/ResourceLocatorHandler.java b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/ResourceLocatorHandler.java\nindex 9dafe4e57b544..c07ac88ec7a33 100644\n--- a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/ResourceLocatorHandler.java\n+++ b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/ResourceLocatorHandler.java\n@@ -15,6 +15,7 @@\n import jakarta.ws.rs.core.Response;\n \n import org.jboss.resteasy.reactive.server.core.ResteasyReactiveRequestContext;\n+import org.jboss.resteasy.reactive.server.injection.ResteasyReactiveInjectionTarget;\n import org.jboss.resteasy.reactive.server.mapping.RequestMapper;\n import org.jboss.resteasy.reactive.server.mapping.RuntimeResource;\n import org.jboss.resteasy.reactive.server.spi.ServerRestHandler;\n@@ -24,9 +25,12 @@ public class ResourceLocatorHandler implements ServerRestHandler {\n \n     private final Map<Class<?>, Map<String, RequestMapper<RuntimeResource>>> resourceLocatorHandlers = new ConcurrentHashMap<>();\n     private final Function<Class<?>, BeanFactory.BeanInstance<?>> instantiator;\n+    private final Function<Object, Object> clientProxyUnwrapper;\n \n-    public ResourceLocatorHandler(Function<Class<?>, BeanFactory.BeanInstance<?>> instantiator) {\n+    public ResourceLocatorHandler(Function<Class<?>, BeanFactory.BeanInstance<?>> instantiator,\n+            Function<Object, Object> clientProxyUnwrapper) {\n         this.instantiator = instantiator;\n+        this.clientProxyUnwrapper = clientProxyUnwrapper;\n     }\n \n     @Override\n@@ -55,6 +59,20 @@ public void onComplete(Throwable throwable) {\n         } else {\n             locatorClass = locator.getClass();\n         }\n+\n+        // in case of a subresource gets returned, we might not control the lifecycle of the subresource ourself\n+        // E.g. the user could return a singleton instance, or construct an instance on each invocation of the locator.\n+        // therefore, only inject into CDI Beans, where we already know they are constructed once for each request\n+        // (thanks to the requestScopedResources validation)\n+        // otherwise TCK JAXRSClient0015 fails\n+        Object unwrapped = null;\n+        if (clientProxyUnwrapper != null) {\n+            unwrapped = clientProxyUnwrapper.apply(locator);\n+        }\n+        if (unwrapped instanceof ResteasyReactiveInjectionTarget t && unwrapped != locator) {\n+            t.__quarkus_rest_inject(requestContext);\n+        }\n+\n         Map<String, RequestMapper<RuntimeResource>> target = findTarget(locatorClass);\n         if (target == null) {\n             throw new RuntimeException(\"Resource locator method returned object that was not a resource: \" + locator);\n",
    "test_patch": "diff --git a/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/SubResourceFieldInjectionTest.java b/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/SubResourceFieldInjectionTest.java\nnew file mode 100644\nindex 0000000000000..163289d15b837\n--- /dev/null\n+++ b/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/SubResourceFieldInjectionTest.java\n@@ -0,0 +1,151 @@\n+package io.quarkus.resteasy.reactive.server.test.resource.basic;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.Supplier;\n+\n+import jakarta.enterprise.context.RequestScoped;\n+import jakarta.inject.Inject;\n+import jakarta.ws.rs.DefaultValue;\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.client.Client;\n+import jakarta.ws.rs.client.ClientBuilder;\n+import jakarta.ws.rs.core.Response;\n+\n+import org.jboss.resteasy.reactive.RestPath;\n+import org.jboss.resteasy.reactive.RestQuery;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.resteasy.reactive.server.test.simple.PortProviderUtil;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class SubResourceFieldInjectionTest {\n+    @RegisterExtension\n+    static QuarkusUnitTest testExtension = new QuarkusUnitTest()\n+            .setArchiveProducer(new Supplier<>() {\n+                @Override\n+                public JavaArchive get() {\n+                    JavaArchive war = ShrinkWrap.create(JavaArchive.class);\n+                    war.addClasses(PortProviderUtil.class);\n+                    war.addClasses(StoreResource.class);\n+                    war.addClasses(OrderResource.class);\n+                    war.addClasses(ContactResource.class);\n+                    war.addClasses(ContactResourceImpl.class);\n+                    war.addClasses(PositionResourceImpl.class);\n+                    return war;\n+                }\n+            }).debugBytecode(true);\n+\n+    @Test\n+    public void basicTest() {\n+        // Test parameter injection works for Class<SubResource> locators\n+        {\n+            Client client = ClientBuilder.newClient();\n+            Response response = client.target(\n+                    PortProviderUtil.generateURL(\n+                            \"/store/orders/orderId/contacts?typeFilter=SENDER\",\n+                            SubResourceFieldInjectionTest.class.getSimpleName()))\n+                    .request().get();\n+            Assertions.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+            Assertions.assertEquals(\"[name1]\", response.readEntity(String.class), \"Wrong content of response\");\n+            response.close();\n+            client.close();\n+        }\n+        {\n+            Client client = ClientBuilder.newClient();\n+            Response response = client.target(\n+                    PortProviderUtil.generateURL(\n+                            \"/store/orders/orderId/contacts\",\n+                            SubResourceFieldInjectionTest.class.getSimpleName()))\n+                    .request().get();\n+            Assertions.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+            Assertions.assertEquals(\"[name1, name2]\", response.readEntity(String.class), \"Wrong content of response\");\n+            response.close();\n+            client.close();\n+        }\n+\n+        // Test parameter injection works for @Inject subresources\n+        {\n+            Client client = ClientBuilder.newClient();\n+            Response response = client.target(\n+                    PortProviderUtil.generateURL(\n+                            \"/store/orders/orderId/positions/positionId\",\n+                            SubResourceFieldInjectionTest.class.getSimpleName()))\n+                    .request().get();\n+            Assertions.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+            Assertions.assertEquals(\"orderId:positionId\", response.readEntity(String.class), \"Wrong content of response\");\n+            response.close();\n+            client.close();\n+        }\n+    }\n+\n+    @Path(\"store\")\n+    public static class StoreResource {\n+        @Inject\n+        PositionResourceImpl positionResource;\n+\n+        @Path(\"orders/{order-id}\")\n+        public OrderResource get(@RestPath String id) {\n+\n+            return new OrderResource() {\n+\n+                @Override\n+                public PositionResourceImpl get(String id) {\n+                    return positionResource;\n+                }\n+\n+                @Override\n+                public Class<ContactResource> contacts() {\n+                    return (Class<ContactResource>) (Object) ContactResourceImpl.class;\n+                }\n+            };\n+        }\n+    }\n+\n+    public interface OrderResource {\n+        @Path(\"positions/{positionId}\")\n+        PositionResourceImpl get(@RestPath String id);\n+\n+        @Path(\"contacts\")\n+        Class<ContactResource> contacts();\n+    }\n+\n+    public interface ContactResource {\n+        @GET\n+        List<String> getContactNames(@RestQuery @DefaultValue(\"123\") String typeFilter);\n+    }\n+\n+    public static class ContactResourceImpl implements ContactResource {\n+\n+        @RestQuery\n+        @DefaultValue(\"123\")\n+        public String typeFilter;\n+\n+        @Override\n+        public List<String> getContactNames(@RestQuery @DefaultValue(\"123\") String typeFilter) {\n+            if (Objects.equals(typeFilter, \"SENDER\")) {\n+                return List.of(\"name1\");\n+            }\n+            return List.of(\"name1\", \"name2\");\n+        }\n+    }\n+\n+    @RequestScoped\n+    public static class PositionResourceImpl {\n+        @RestPath(\"order-id\")\n+        public String orderId;\n+\n+        @RestPath\n+        public String positionId;\n+\n+        @GET\n+        public String get() {\n+            return orderId + \":\" + positionId;\n+        }\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46728",
    "pr_id": 46728,
    "issue_id": 39584,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Dedicated Dev UI interface to execute (and \"log\"?) Hibernate ORM queries\n### Description\n\nWhen developing, It can be quite useful to:\n\n1. Execute queries manually and see their effect/results.\n2. See the history of executed by the app, and potentially re-execute them with some changes.\n\nCurrently, the only options to do so are:\n\n1. For execution, through a JDBC-level Dev UI -- which is a bit too low-level\n2. For query history, the logs.\n\nI think a dedicated Dev UI interface could increase developer joy significantly, especially if we introduce additional features.\n\nInitially it could be just about executing queries, like https://github.com/quarkusio/quarkus/pull/43618. If we go that route we can move the query history + \"extra\" features to a follow-up issue.\n\nA few \"extra\" features that come to mind (though we may not end up implementing all of them):\n\n* More user-friendly display: e.g. show SQL and bind parameter values next to each other, instead of in separate log lines\n* Easy export: \"copy\" buttons, e.g. raw SQL that can be executed directly on the DB.\n* Replay: re-run HQL/SQL requests, possibly after a manual edit, and display results\n* Context: show the stack trace that led to a particular query. Or maybe just rely on some OpenTelemetry tracing integration?\n* Timing: how long did a given query take?\n* Search: filter query history by datasource, sort by query time, ... Though that could require rather heavy infrastructure.\n\n### Implementation ideas\n\n_No response_",
    "issue_word_count": 247,
    "test_files_count": 5,
    "non_test_files_count": 14,
    "pr_changed_files": [
      "extensions/agroal/runtime-dev/src/main/java/io/quarkus/agroal/runtime/dev/ui/DatabaseInspector.java",
      "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourcesJdbcBuildTimeConfig.java",
      "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmConfig.java",
      "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/dev/HibernateOrmDevUIProcessor.java",
      "extensions/hibernate-orm/deployment/src/main/resources/dev-ui/hibernate-orm-entity-types.js",
      "extensions/hibernate-orm/deployment/src/main/resources/dev-ui/hibernate-orm-hql-console.js",
      "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/customized/QuarkusConnectionProvider.java",
      "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevController.java",
      "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevInfo.java",
      "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevIntegrator.java",
      "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevJsonRpcService.java",
      "extensions/vertx-http/runtime/src/main/java/io/quarkus/devui/runtime/comms/JsonRpcMessage.java",
      "extensions/vertx-http/runtime/src/main/java/io/quarkus/devui/runtime/comms/JsonRpcRouter.java",
      "extensions/vertx-http/runtime/src/main/java/io/quarkus/devui/runtime/jsonrpc/JsonRpcCodec.java",
      "integration-tests/devmode/src/test/java/io/quarkus/test/devui/AbstractDevUIHibernateOrmTest.java",
      "integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmActiveFalseAndNamedPuActiveTrueTest.java",
      "integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmActiveFalseTest.java",
      "integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmSmokeTest.java",
      "integration-tests/devmode/src/test/java/io/quarkus/test/devui/MyEntity.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/devmode/src/test/java/io/quarkus/test/devui/AbstractDevUIHibernateOrmTest.java",
      "integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmActiveFalseAndNamedPuActiveTrueTest.java",
      "integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmActiveFalseTest.java",
      "integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmSmokeTest.java",
      "integration-tests/devmode/src/test/java/io/quarkus/test/devui/MyEntity.java"
    ],
    "base_commit": "ce51eb97b28121f746ceaf3aa21f134f082c7806",
    "head_commit": "a22c98574d0aa1a0acc0691a3ffb5f26604408fb",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46728",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46728",
    "dockerfile": "",
    "pr_merged_at": "2025-03-19T10:42:32.000Z",
    "patch": "diff --git a/extensions/agroal/runtime-dev/src/main/java/io/quarkus/agroal/runtime/dev/ui/DatabaseInspector.java b/extensions/agroal/runtime-dev/src/main/java/io/quarkus/agroal/runtime/dev/ui/DatabaseInspector.java\nindex 2b58c7fff364d..712ca249c09c3 100644\n--- a/extensions/agroal/runtime-dev/src/main/java/io/quarkus/agroal/runtime/dev/ui/DatabaseInspector.java\n+++ b/extensions/agroal/runtime-dev/src/main/java/io/quarkus/agroal/runtime/dev/ui/DatabaseInspector.java\n@@ -223,7 +223,10 @@ public DataSet executeSQL(String datasource, String sql, Integer pageNumber, Int\n                         }\n                     }\n                 } else {\n-                    return new DataSet(null, null, \"Only supported for Local Databases\", null, -1);\n+                    return new DataSet(null, null,\n+                            \"Datasource access not allowed. By default only local databases are enabled; you can use the\"\n+                                    + \" 'quarkus.datasource.dev-ui.allowed-db-host' configuration property to configure allowed hosts ('*' to allow all).\",\n+                            null, -1);\n                 }\n             } catch (SQLException ex) {\n                 return new DataSet(null, null, ex.getMessage(), null, -1);\n@@ -325,14 +328,20 @@ private List<String> getPrimaryKeys(DatabaseMetaData metaData, String tableSchem\n     }\n \n     private boolean isAllowedDatabase(AgroalDataSource ads) {\n+        final String allowedHost = this.allowedHost == null ? null : this.allowedHost.trim();\n+        if (allowedHost != null && allowedHost.equals(\"*\")) {\n+            // special value indicating to allow any host\n+            return true;\n+        }\n+\n         AgroalDataSourceConfiguration configuration = ads.getConfiguration();\n         String jdbcUrl = configuration.connectionPoolConfiguration().connectionFactoryConfiguration().jdbcUrl();\n \n         try {\n             if (jdbcUrl.startsWith(\"jdbc:h2:mem:\") || jdbcUrl.startsWith(\"jdbc:h2:file:\")\n                     || jdbcUrl.startsWith(\"jdbc:h2:tcp://localhost\")\n-                    || (this.allowedHost != null && !this.allowedHost.isBlank()\n-                            && jdbcUrl.startsWith(\"jdbc:h2:tcp://\" + this.allowedHost))\n+                    || (allowedHost != null && !allowedHost.isBlank()\n+                            && jdbcUrl.startsWith(\"jdbc:h2:tcp://\" + allowedHost))\n                     || jdbcUrl.startsWith(\"jdbc:derby:memory:\")) {\n                 return true;\n             }\n@@ -343,7 +352,7 @@ private boolean isAllowedDatabase(AgroalDataSource ads) {\n             String host = uri.getHost();\n \n             return host != null && ((host.equals(\"localhost\") || host.equals(\"127.0.0.1\") || host.equals(\"::1\")) ||\n-                    (this.allowedHost != null && !this.allowedHost.isBlank() && host.equalsIgnoreCase(this.allowedHost)));\n+                    (allowedHost != null && !allowedHost.isBlank() && host.equalsIgnoreCase(allowedHost)));\n \n         } catch (URISyntaxException e) {\n             Log.warn(e.getMessage());\n\ndiff --git a/extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourcesJdbcBuildTimeConfig.java b/extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourcesJdbcBuildTimeConfig.java\nindex c239b2be94d7f..5b09e006b3c95 100644\n--- a/extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourcesJdbcBuildTimeConfig.java\n+++ b/extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourcesJdbcBuildTimeConfig.java\n@@ -65,7 +65,8 @@ public interface DevUIBuildTimeConfig {\n         public Optional<String> appendToDefaultSelect();\n \n         /**\n-         * Allowed database host. By default only localhost is allowed. Any provided host here will also be allowed\n+         * Allowed database host. By default, only localhost is allowed. Any provided host here will also be allowed.\n+         * You can use the special value {@code *} to allow any DB host.\n          */\n         public Optional<String> allowedDBHost();\n     }\n\ndiff --git a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmConfig.java b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmConfig.java\nindex 32e60b297619c..644feb4fa569b 100644\n--- a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmConfig.java\n+++ b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmConfig.java\n@@ -90,6 +90,13 @@ default Map<String, HibernateOrmConfigPersistenceUnit> namedPersistenceUnits() {\n      */\n     HibernateOrmConfigMetric metrics();\n \n+    /**\n+     * Dev UI.\n+     */\n+    @WithDefaults\n+    @WithName(\"dev-ui\")\n+    HibernateOrmConfigDevUI devui();\n+\n     default boolean isAnyNonPersistenceXmlPropertySet() {\n         // Do NOT include persistenceXml in here.\n         return defaultPersistenceUnit().isAnyPropertySet() ||\n@@ -182,4 +189,12 @@ default boolean isAnyPropertySet() {\n         }\n     }\n \n+    @ConfigGroup\n+    interface HibernateOrmConfigDevUI {\n+        /**\n+         * Allow hql queries in the Dev UI page\n+         */\n+        @WithDefault(\"false\")\n+        boolean allowHql();\n+    }\n }\n\ndiff --git a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/dev/HibernateOrmDevUIProcessor.java b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/dev/HibernateOrmDevUIProcessor.java\nindex 8db0f4d3084a5..7864a50678e27 100644\n--- a/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/dev/HibernateOrmDevUIProcessor.java\n+++ b/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/dev/HibernateOrmDevUIProcessor.java\n@@ -12,6 +12,7 @@\n import io.quarkus.devui.spi.JsonRPCProvidersBuildItem;\n import io.quarkus.devui.spi.page.CardPageBuildItem;\n import io.quarkus.devui.spi.page.Page;\n+import io.quarkus.hibernate.orm.deployment.HibernateOrmConfig;\n import io.quarkus.hibernate.orm.deployment.HibernateOrmEnabled;\n import io.quarkus.hibernate.orm.deployment.PersistenceUnitDescriptorBuildItem;\n import io.quarkus.hibernate.orm.runtime.PersistenceUnitUtil;\n@@ -22,7 +23,7 @@\n public class HibernateOrmDevUIProcessor {\n \n     @BuildStep\n-    public CardPageBuildItem create() {\n+    public CardPageBuildItem create(HibernateOrmConfig config) {\n         CardPageBuildItem card = new CardPageBuildItem();\n         card.addPage(Page.webComponentPageBuilder()\n                 .title(\"Persistence Units\")\n@@ -39,7 +40,11 @@ public CardPageBuildItem create() {\n                 .componentLink(\"hibernate-orm-named-queries.js\")\n                 .icon(\"font-awesome-solid:circle-question\")\n                 .dynamicLabelJsonRPCMethodName(\"getNumberOfNamedQueries\"));\n-\n+        card.addPage(Page.webComponentPageBuilder()\n+                .title(\"HQL Console\")\n+                .componentLink(\"hibernate-orm-hql-console.js\")\n+                .icon(\"font-awesome-solid:play\")\n+                .metadata(\"allowHql\", String.valueOf(config.devui().allowHql())));\n         return card;\n     }\n \n\ndiff --git a/extensions/hibernate-orm/deployment/src/main/resources/dev-ui/hibernate-orm-entity-types.js b/extensions/hibernate-orm/deployment/src/main/resources/dev-ui/hibernate-orm-entity-types.js\nindex d1b5c041ce7fa..f8f1fb367b0b8 100644\n--- a/extensions/hibernate-orm/deployment/src/main/resources/dev-ui/hibernate-orm-entity-types.js\n+++ b/extensions/hibernate-orm/deployment/src/main/resources/dev-ui/hibernate-orm-entity-types.js\n@@ -87,6 +87,10 @@ export class HibernateOrmEntityTypesComponent extends QwcHotReloadElement {\n         }\n         return html`\n                 <vaadin-grid .items=\"${pu.managedEntities}\" class=\"datatable\" theme=\"no-border row-stripes\">\n+                    <vaadin-grid-column auto-width\n+                                        header=\"JPA entity name\"\n+                                        path=\"name\">\n+                    </vaadin-grid-column>\n                     <vaadin-grid-column auto-width\n                                         header=\"Class name\"\n                                         path=\"className\">\n\ndiff --git a/extensions/hibernate-orm/deployment/src/main/resources/dev-ui/hibernate-orm-hql-console.js b/extensions/hibernate-orm/deployment/src/main/resources/dev-ui/hibernate-orm-hql-console.js\nnew file mode 100644\nindex 0000000000000..67c7f0246006c\n--- /dev/null\n+++ b/extensions/hibernate-orm/deployment/src/main/resources/dev-ui/hibernate-orm-hql-console.js\n@@ -0,0 +1,479 @@\n+import {css, html, QwcHotReloadElement} from 'qwc-hot-reload-element';\n+import {RouterController} from 'router-controller';\n+import {JsonRpc} from 'jsonrpc';\n+import '@vaadin/icon';\n+import '@vaadin/button';\n+import '@vaadin/combo-box';\n+import '@vaadin/grid';\n+import '@vaadin/progress-bar';\n+import '@vaadin/tabs';\n+import '@vaadin/tabsheet';\n+import {columnBodyRenderer} from '@vaadin/grid/lit.js';\n+import {notifier} from 'notifier';\n+\n+export class HibernateOrmHqlConsoleComponent extends QwcHotReloadElement {\n+    jsonRpc = new JsonRpc(this);\n+    configJsonRpc = new JsonRpc(\"devui-configuration\");\n+\n+    routerController = new RouterController(this);\n+\n+    static styles = css`\n+        .bordered {\n+            border: 1px solid var(--lumo-contrast-20pct);\n+            border-radius: var(--lumo-border-radius-l);\n+            padding: var(--lumo-space-s) var(--lumo-space-m);\n+        }\n+\n+        .dataSources {\n+            display: flex;\n+            flex-direction: column;\n+            gap: 20px;\n+            height: 100%;\n+            padding-left: 10px;\n+        }\n+\n+        .tablesAndData {\n+            display: flex;\n+            height: 100%;\n+            gap: 20px;\n+            padding-right: 20px;\n+        }\n+\n+        .tables {\n+            display: flex;\n+            flex-direction: column;\n+            gap: 20px;\n+        }\n+\n+        .tableData {\n+            display: flex;\n+            flex-direction: column;\n+            width: 100%;\n+        }\n+\n+        .tablesCard {\n+            min-width: 192px;\n+            display: flex;\n+        }\n+\n+        .fill {\n+            width: 100%;\n+            height: 100%;\n+        }\n+\n+        .small-icon {\n+            height: var(--lumo-icon-size-s);\n+            width: var(--lumo-icon-size-s);\n+        }\n+\n+        .hqlInput {\n+            display: flex;\n+            justify-content: space-between;\n+            gap: 10px;\n+            align-items: center;\n+            padding-bottom: 20px;\n+            border-bottom-style: dotted;\n+            border-bottom-color: var(--lumo-contrast-10pct);\n+        }\n+\n+        #hql {\n+            width: 100%;\n+        }\n+\n+        .data {\n+            display: flex;\n+            flex-direction: column;\n+            gap: 10px;\n+            width: 100%;\n+            height: 100%;\n+        }\n+\n+        .pager {\n+            display: flex;\n+            justify-content: space-between;\n+        }\n+\n+        .hidden {\n+            visibility: hidden;\n+        }\n+\n+        a, a:visited, a:focus, a:active {\n+            text-decoration: none;\n+            color: var(--lumo-body-text-color);\n+        }\n+\n+        a:hover {\n+            text-decoration: none;\n+            color: var(--lumo-primary-text-color);\n+        }\n+\n+        .font-large {\n+            font-size: var(--lumo-font-size-l);\n+        }\n+\n+        .cursor-text {\n+            cursor: text;\n+        }\n+\n+        .no-margin {\n+            margin: 0;\n+        }\n+    `;\n+\n+\n+    static properties = {\n+        _persistenceUnits: {state: true, type: Array},\n+        _selectedPersistenceUnit: {state: true},\n+        _selectedEntity: {state: true},\n+        _selectedEntityIndex: {state: true},\n+        _currentHQL: {state: true},\n+        _currentDataSet: {state: true},\n+        _currentMessage: {state: true},\n+        _currentPageNumber: {state: true},\n+        _currentNumberOfPages: {state: true},\n+        _allowHql: {state: true},\n+    }\n+\n+    constructor() {\n+        super();\n+        this._persistenceUnits = [];\n+        this._selectedPersistenceUnit = null;\n+        this._selectedEntity = null;\n+        this._selectedEntityIndex = 0;\n+        this._currentHQL = null;\n+        this._currentDataSet = null;\n+        this._currentMessage = null;\n+        this._currentPageNumber = 1;\n+        this._currentNumberOfPages = 1;\n+        this._pageSize = 15;\n+    }\n+\n+    connectedCallback() {\n+        super.connectedCallback();\n+\n+        const page = this.routerController.getCurrentPage();\n+        if (page && page.metadata) {\n+            this._allowHql = (page.metadata.allowHql === \"true\");\n+        } else {\n+            this._allowHql = false;\n+        }\n+\n+        this.hotReload();\n+    }\n+\n+    hotReload() {\n+        this.jsonRpc.getInfo().then(response => {\n+            this._persistenceUnits = response.result.persistenceUnits;\n+            this._selectPersistenceUnit(this._persistenceUnits[0])\n+        }).catch(error => {\n+            console.error(\"Failed to fetch persistence units:\", error);\n+            this._persistenceUnits = [];\n+            notifier.showErrorMessage(\"Failed to fetch persistence units: \" + error, \"bottom-start\", 30);\n+        });\n+    }\n+\n+    render() {\n+        if (this._persistenceUnits) {\n+            return this._renderAllPUs();\n+        } else {\n+            return this._renderFetchingProgress();\n+        }\n+    }\n+\n+    _renderFetchingProgress() {\n+        return html`\n+            <div style=\"color: var(--lumo-secondary-text-color);width: 95%;\">\n+                <div>Fetching persistence units...</div>\n+                <vaadin-progress-bar indeterminate></vaadin-progress-bar>\n+            </div>`;\n+    }\n+\n+    _renderAllPUs() {\n+        return this._persistenceUnits.length === 0\n+            ? html`\n+                    <p>No persistence units were found.\n+                        <vaadin-button @click=\"${this.hotReload}\" theme=\"small\">Check again</vaadin-button>\n+                    </p>`\n+            : html`\n+                    <div class=\"dataSources\">\n+                        ${this._renderTablesAndData()}\n+                    </div>`;\n+    }\n+\n+    _renderDatasourcesComboBox() {\n+        return html`\n+            <vaadin-combo-box\n+                    label=\"Persistence Unit\"\n+                    item-label-path=\"name\"\n+                    item-value-path=\"name\"\n+                    .items=\"${this._persistenceUnits}\"\n+                    .value=\"${this._persistenceUnits[0]?.name || ''}\"\n+                    @value-changed=\"${this._onPersistenceUnitChanged}\"\n+                    .allowCustomValue=\"${false}\"\n+            ></vaadin-combo-box>\n+        `;\n+    }\n+\n+    _onPersistenceUnitChanged(event) {\n+        const selectedValue = event.detail.value;\n+        this._selectPersistenceUnit(this._persistenceUnits.find(unit => unit.name === selectedValue))\n+    }\n+\n+    _selectPersistenceUnit(pu) {\n+        this._selectedPersistenceUnit = pu;\n+        this._selectedEntityIndex = 0;\n+        this._selectedEntity = pu && pu.managedEntities[0] || null;\n+    }\n+\n+    _renderTablesAndData() {\n+        return html`\n+            <div class=\"tablesAndData\">\n+                <div class=\"tables\">\n+                    ${this._renderDatasourcesComboBox()}\n+                    ${this._renderTables()}\n+                </div>\n+                <div class=\"tableData bordered\">\n+                    ${this._renderDataAndInput()}\n+                </div>\n+            </div>`;\n+    }\n+\n+    _renderTables() {\n+        if (this._selectedPersistenceUnit) {\n+            return html`\n+                <qui-card class=\"tablesCard\" header=\"Entities\">\n+                    <div slot=\"content\">\n+                        <vaadin-list-box selected=\"${this._selectedEntityIndex}\"\n+                                         @selected-changed=\"${this._onEntityChanged}\">\n+                            ${this._selectedPersistenceUnit.managedEntities.map((entity) =>\n+                                    html`\n+                                        <vaadin-item>${entity.name}</vaadin-item>`\n+                            )}\n+                        </vaadin-list-box>\n+                    </div>\n+                </qui-card>`;\n+        } else {\n+            return this._renderFetchingProgress();\n+        }\n+    }\n+\n+    _onEntityChanged(event) {\n+        this._selectedEntityIndex = event.detail.value;\n+        this._selectedEntity = this._selectedPersistenceUnit.managedEntities[this._selectedEntityIndex];\n+        this._clearHqlInput();\n+    }\n+\n+    _clearHqlInput() {\n+        if (this._selectedEntity) {\n+            this._executeHQL(\"from \" + this._selectedEntity.name);\n+        } else {\n+            this._currentDataSet = [];\n+        }\n+    }\n+\n+    _executeHQL(hql) {\n+        this._currentPageNumber = 1;\n+        this._currentHQL = hql.trim();\n+        this._executeCurrentHQL();\n+    }\n+\n+    _executeClicked() {\n+        let newValue = this.shadowRoot.getElementById('hql').getAttribute('value');\n+        this._executeHQL(newValue);\n+    }\n+\n+    _executeCurrentHQL() {\n+        if (this._currentHQL) {\n+            this._currentDataSet = null; // indicates loading\n+            this._currentMessage = null;\n+\n+            this.jsonRpc.executeHQL({\n+                persistenceUnit: this._selectedPersistenceUnit.name,\n+                hql: this._currentHQL,\n+                pageNumber: this._currentPageNumber,\n+                pageSize: this._pageSize\n+            }).then(jsonRpcResponse => {\n+                const error = jsonRpcResponse.error && jsonRpcResponse.error.message || jsonRpcResponse.result.error;\n+                if (error) {\n+                    this._currentDataSet = [];\n+                    notifier.showErrorMessage(\"Error executing query: \" + error, \"bottom-start\");\n+                } else if (jsonRpcResponse.result.message) {\n+                    this._currentMessage = jsonRpcResponse.result.message;\n+                } else {\n+                    this._currentDataSet = jsonRpcResponse.result;\n+                    this._currentNumberOfPages = this._getNumberOfPages();\n+                }\n+            });\n+        }\n+    }\n+\n+    // *** data table and HQL input ***\n+\n+    _renderDataAndInput() {\n+        return html`\n+            ${this._renderHqlInput()}\n+            <div tab=\"data-tab\" style=\"height:100%;\">${this._renderTableData()}</div>`;\n+    }\n+\n+    _renderHqlInput() {\n+        if (this._allowHql) {\n+            return html`\n+                <div class=\"hqlInput\">\n+                    <qui-code-block @shiftEnter=${this._shiftEnterPressed} class=\"font-large cursor-text\"\n+                                    content=\"${this._currentHQL}\" id=\"hql\"\n+                                    mode=\"sql\" theme=\"dark\" value='${this._currentHQL}' editable></qui-code-block>\n+                    <vaadin-button class=\"no-margin\" slot=\"suffix\" theme=\"icon\" aria-label=\"Clear\">\n+                        <vaadin-tooltip .hoverDelay=${500} slot=\"tooltip\" text=\"Clear\"></vaadin-tooltip>\n+                        <vaadin-icon class=\"small-icon\" @click=${this._clearHqlInput}\n+                                     icon=\"font-awesome-solid:trash\"></vaadin-icon>\n+                    </vaadin-button>\n+                    <vaadin-button class=\"no-margin\" slot=\"suffix\" theme=\"icon\" aria-label=\"Run\">\n+                        <vaadin-tooltip .hoverDelay=${500} slot=\"tooltip\" text=\"Run\"></vaadin-tooltip>\n+                        <vaadin-icon class=\"small-icon\" @click=${this._executeClicked}\n+                                     icon=\"font-awesome-solid:play\"></vaadin-icon>\n+                    </vaadin-button>\n+                </div>`;\n+        } else {\n+            return html`\n+                <vaadin-button theme=\"small\" @click=\"${this._handleAllowHqlChange}\">Allow HQL execution from here\n+                </vaadin-button>`;\n+        }\n+    }\n+\n+    _handleAllowHqlChange() {\n+        this.configJsonRpc.updateProperty({\n+            'name': '%dev.quarkus.hibernate-orm.dev-ui.allow-hql',\n+            'value': 'true'\n+        }).then(e => {\n+            this._allowHql = true;\n+        });\n+    }\n+\n+    _shiftEnterPressed(event) {\n+        this._executeHQL(event.detail.content);\n+    }\n+\n+    _renderTableData() {\n+        if (this._selectedEntity) {\n+            if (this._currentMessage) {\n+                return html`\n+                    <div class=\"data\"><span style=\"padding-top:20px;\">${this._currentMessage}</span></div>`;\n+            } else if (this._currentDataSet) {\n+                return html`\n+                    <div class=\"data\">\n+                        <vaadin-grid id=\"data-grid\" .items=\"${this._currentDataSet.data}\" theme=\"row-stripes no-border\"\n+                                     class=\"fill\" column-reordering-allowed>\n+                            ${this._renderTableRows(this._currentDataSet.data)}\n+                            <span slot=\"empty-state\">No data.</span>\n+                        </vaadin-grid>\n+                        ${this._renderPager()}\n+                    </div>`;\n+            }\n+        }\n+\n+        return html`\n+            <div style=\"color: var(--lumo-secondary-text-color);width: 95%;padding-top:20px;\">\n+                <div>Fetching data...</div>\n+                <vaadin-progress-bar indeterminate></vaadin-progress-bar>\n+            </div>`;\n+    }\n+\n+    _renderTableRows(data) {\n+        if (!data || data.length === 0) {\n+            return html``;\n+        }\n+\n+        const firstResult = data.find(e => !!e); // first non-null element\n+        if (typeof firstResult === 'object') {\n+            return Object.keys(this._currentDataSet.data[0]).map((col) => {\n+                return html`\n+                    <vaadin-grid-sort-column path=\"${col}\" header=\"${col}\" auto-width resizable ${columnBodyRenderer(\n+                            (item) => this._cellRenderer(item[col]),\n+                            []\n+                    )}></vaadin-grid-sort-column>`;\n+            });\n+        } else {\n+            return html`\n+                <vaadin-grid-sort-column header=\"0\" auto-width resizable ${columnBodyRenderer(\n+                        (value) => this._cellRenderer(value),\n+                        []\n+                )}></vaadin-grid-sort-column>`;\n+        }\n+    }\n+\n+    _cellRenderer(value) {\n+        if (value) {\n+            if (value === 'true') {\n+                return html`\n+                    <vaadin-icon style=\"color: var(--lumo-contrast-50pct);\" title=\"${value}\"\n+                                 icon=\"font-awesome-regular:square-check\"></vaadin-icon>`;\n+            } else if (value === 'false') {\n+                return html`\n+                    <vaadin-icon style=\"color: var(--lumo-contrast-50pct);\" title=\"${value}\"\n+                                 icon=\"font-awesome-regular:square\"></vaadin-icon>`;\n+            } else if (typeof value === 'string' && (value.startsWith('http://') || value.startsWith('https://'))) {\n+                return html`<a href=\"${value}\" target=\"_blank\">${value}</a>`;\n+            } else {\n+                const s = typeof value === 'object' ? JSON.stringify(value) : value;\n+                return html`<span>${s}</span>`;\n+            }\n+        }\n+    }\n+\n+    // *** pager and page handling ***\n+\n+    _renderPager() {\n+        return html`\n+            <div class=\"pager\">\n+                ${this._renderPreviousPageButton()}\n+                <span>${this._currentPageNumber} of ${this._currentNumberOfPages}</span>\n+                ${this._renderNextPageButton()}\n+            </div>`;\n+    }\n+\n+    _renderPreviousPageButton() {\n+        let klas = \"pageButton\";\n+        if (this._currentPageNumber === 1) {\n+            klas = \"hidden\";\n+        }\n+        return html`\n+            <vaadin-button theme=\"icon tertiary\" aria-label=\"Previous\" @click=${this._previousPage} class=\"${klas}\">\n+                <vaadin-icon icon=\"font-awesome-solid:circle-chevron-left\"></vaadin-icon>\n+            </vaadin-button>`;\n+    }\n+\n+    _renderNextPageButton() {\n+        let klas = \"pageButton\";\n+        if (this._currentPageNumber === this._currentNumberOfPages) {\n+            klas = \"hidden\";\n+        }\n+        return html`\n+            <vaadin-button theme=\"icon tertiary\" aria-label=\"Next\" @click=${this._nextPage} class=\"${klas}\">\n+                <vaadin-icon icon=\"font-awesome-solid:circle-chevron-right\"></vaadin-icon>\n+            </vaadin-button>`;\n+    }\n+\n+    _previousPage() {\n+        if (this._currentPageNumber !== 1) {\n+            this._currentPageNumber = this._currentPageNumber - 1;\n+            this._executeCurrentHQL();\n+        }\n+    }\n+\n+    _nextPage() {\n+        this._currentPageNumber = this._currentPageNumber + 1;\n+        this._executeCurrentHQL();\n+    }\n+\n+    _getNumberOfPages() {\n+        if (this._currentDataSet) {\n+            if (this._currentDataSet.totalNumberOfElements > this._pageSize) {\n+                return Math.ceil(this._currentDataSet.totalNumberOfElements / this._pageSize);\n+            } else {\n+                return 1;\n+            }\n+        }\n+    }\n+}\n+\n+customElements.define('hibernate-orm-hql-console', HibernateOrmHqlConsoleComponent);\n\\ No newline at end of file\n\ndiff --git a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/customized/QuarkusConnectionProvider.java b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/customized/QuarkusConnectionProvider.java\nindex 0cd8200f67f57..553fbe90ed574 100644\n--- a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/customized/QuarkusConnectionProvider.java\n+++ b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/customized/QuarkusConnectionProvider.java\n@@ -18,6 +18,10 @@ public QuarkusConnectionProvider(final AgroalDataSource dataSource) {\n         this.dataSource = dataSource;\n     }\n \n+    public AgroalDataSource getDataSource() {\n+        return dataSource;\n+    }\n+\n     @Override\n     public Connection getConnection() throws SQLException {\n         return dataSource.getConnection();\n\ndiff --git a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevController.java b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevController.java\nindex ccf41c4f8bba1..c83436712a62a 100644\n--- a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevController.java\n+++ b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevController.java\n@@ -2,11 +2,7 @@\n \n import java.io.PrintWriter;\n import java.io.StringWriter;\n-import java.util.ArrayList;\n-import java.util.EnumSet;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n+import java.util.*;\n import java.util.function.Supplier;\n \n import org.hibernate.boot.Metadata;\n@@ -14,6 +10,7 @@\n import org.hibernate.boot.query.NamedNativeQueryDefinition;\n import org.hibernate.cfg.AvailableSettings;\n import org.hibernate.engine.config.spi.ConfigurationService;\n+import org.hibernate.engine.spi.SessionFactoryImplementor;\n import org.hibernate.mapping.PersistentClass;\n import org.hibernate.service.ServiceRegistry;\n import org.hibernate.tool.schema.Action;\n@@ -51,13 +48,15 @@ public HibernateOrmDevInfo getInfo() {\n         return info;\n     }\n \n-    void pushPersistenceUnit(String persistenceUnitName,\n+    void pushPersistenceUnit(SessionFactoryImplementor sessionFactoryImplementor, String persistenceUnitName,\n             Metadata metadata, ServiceRegistry serviceRegistry, String importFile) {\n         List<HibernateOrmDevInfo.Entity> managedEntities = new ArrayList<>();\n         for (PersistentClass entityBinding : metadata.getEntityBindings()) {\n-            managedEntities\n-                    .add(new HibernateOrmDevInfo.Entity(entityBinding.getClassName(), entityBinding.getTable().getName()));\n+            managedEntities.add(new HibernateOrmDevInfo.Entity(entityBinding.getJpaEntityName(), entityBinding.getClassName(),\n+                    entityBinding.getTable().getName()));\n         }\n+        // Sort entities alphabetically by JPA entity name\n+        managedEntities.sort(Comparator.comparing(HibernateOrmDevInfo.Entity::getName));\n \n         List<HibernateOrmDevInfo.Query> namedQueries = new ArrayList<>();\n         {\n@@ -67,6 +66,8 @@ void pushPersistenceUnit(String persistenceUnitName,\n                 namedQueries.add(new HibernateOrmDevInfo.Query(queryDefinition));\n             }\n         }\n+        // Sort named queries alphabetically by name\n+        namedQueries.sort(Comparator.comparing(HibernateOrmDevInfo.Query::getName));\n \n         List<HibernateOrmDevInfo.Query> namedNativeQueries = new ArrayList<>();\n         {\n@@ -81,7 +82,7 @@ void pushPersistenceUnit(String persistenceUnitName,\n         DDLSupplier dropDDLSupplier = new DDLSupplier(Action.DROP, metadata, serviceRegistry, importFile);\n         DDLSupplier updateDDLSupplier = new DDLSupplier(Action.UPDATE, metadata, serviceRegistry, importFile);\n \n-        info.add(new HibernateOrmDevInfo.PersistenceUnit(persistenceUnitName, managedEntities,\n+        info.add(new HibernateOrmDevInfo.PersistenceUnit(sessionFactoryImplementor, persistenceUnitName, managedEntities,\n                 namedQueries, namedNativeQueries, createDDLSupplier, dropDDLSupplier, updateDDLSupplier));\n     }\n \n\ndiff --git a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevInfo.java b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevInfo.java\nindex 02a05e4f67d1c..d99185e86fe05 100644\n--- a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevInfo.java\n+++ b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevInfo.java\n@@ -13,6 +13,9 @@\n import org.hibernate.boot.query.NamedNativeQueryDefinition;\n import org.hibernate.boot.query.NamedQueryDefinition;\n import org.hibernate.boot.spi.AbstractNamedQueryDefinition;\n+import org.hibernate.engine.spi.SessionFactoryImplementor;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n \n import io.quarkus.hibernate.orm.runtime.PersistenceUnitUtil;\n \n@@ -40,7 +43,8 @@ public int getNumberOfEntities() {\n     }\n \n     public static class PersistenceUnit {\n-\n+        @JsonIgnore\n+        private final transient SessionFactoryImplementor sessionFactory;\n         private final String name;\n         private final List<Entity> managedEntities;\n         private final List<Query> namedQueries;\n@@ -52,10 +56,11 @@ public static class PersistenceUnit {\n         private final Supplier<String> dropDDLSupplier;\n         private final Supplier<String> updateDDLSupplier;\n \n-        public PersistenceUnit(String name, List<Entity> managedEntities,\n+        public PersistenceUnit(SessionFactoryImplementor sessionFactory, String name, List<Entity> managedEntities,\n                 List<Query> namedQueries,\n                 List<Query> namedNativeQueries, Supplier<String> createDDL, Supplier<String> dropDDL,\n                 Supplier<String> updateDDLSupplier) {\n+            this.sessionFactory = sessionFactory;\n             this.name = name;\n             this.managedEntities = managedEntities;\n             this.namedQueries = namedQueries;\n@@ -65,6 +70,11 @@ public PersistenceUnit(String name, List<Entity> managedEntities,\n             this.updateDDLSupplier = updateDDLSupplier;\n         }\n \n+        // Method name must not be `getSessionFactory` to exclude it from JSON serialization\n+        public SessionFactoryImplementor sessionFactory() {\n+            return sessionFactory;\n+        }\n+\n         public String getName() {\n             return name;\n         }\n@@ -112,15 +122,20 @@ public synchronized String getUpdateDDL() {\n     }\n \n     public static class Entity {\n-\n+        private final String name;\n         private final String className;\n         private final String tableName;\n \n-        public Entity(String className, String tableName) {\n+        public Entity(String name, String className, String tableName) {\n+            this.name = name;\n             this.className = className;\n             this.tableName = tableName;\n         }\n \n+        public String getName() {\n+            return name;\n+        }\n+\n         public String getClassName() {\n             return className;\n         }\n@@ -128,7 +143,6 @@ public String getClassName() {\n         public String getTableName() {\n             return tableName;\n         }\n-\n     }\n \n     public static class Query {\n\ndiff --git a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevIntegrator.java b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevIntegrator.java\nindex 33fef4145df88..01b8ef08003b0 100644\n--- a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevIntegrator.java\n+++ b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevIntegrator.java\n@@ -12,6 +12,7 @@ public class HibernateOrmDevIntegrator implements Integrator {\n     public void integrate(Metadata metadata, SessionFactoryImplementor sessionFactoryImplementor,\n             SessionFactoryServiceRegistry sessionFactoryServiceRegistry) {\n         HibernateOrmDevController.get().pushPersistenceUnit(\n+                sessionFactoryImplementor,\n                 (String) sessionFactoryImplementor.getProperties()\n                         .get(org.hibernate.cfg.AvailableSettings.PERSISTENCE_UNIT_NAME),\n                 metadata, sessionFactoryServiceRegistry,\n\ndiff --git a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevJsonRpcService.java b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevJsonRpcService.java\nindex a82be045e5008..541e104d83005 100644\n--- a/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevJsonRpcService.java\n+++ b/extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevJsonRpcService.java\n@@ -1,6 +1,43 @@\n package io.quarkus.hibernate.orm.runtime.dev;\n \n+import static org.hibernate.query.sqm.internal.SqmUtil.isMutation;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import jakarta.enterprise.inject.spi.CDI;\n+\n+import org.eclipse.microprofile.config.ConfigProvider;\n+import org.hibernate.ScrollMode;\n+import org.hibernate.ScrollableResults;\n+import org.hibernate.Transaction;\n+import org.hibernate.engine.jdbc.connections.spi.ConnectionProvider;\n+import org.hibernate.engine.spi.SessionFactoryImplementor;\n+import org.hibernate.query.Query;\n+import org.hibernate.query.spi.SqmQuery;\n+\n+import io.agroal.api.AgroalDataSource;\n+import io.agroal.api.configuration.AgroalDataSourceConfiguration;\n+import io.quarkus.devui.runtime.comms.JsonRpcMessage;\n+import io.quarkus.devui.runtime.comms.JsonRpcRouter;\n+import io.quarkus.devui.runtime.comms.MessageType;\n+import io.quarkus.hibernate.orm.runtime.customized.QuarkusConnectionProvider;\n+import io.quarkus.logging.Log;\n+import io.quarkus.runtime.LaunchMode;\n+\n public class HibernateOrmDevJsonRpcService {\n+    private boolean isDev;\n+    private String allowedHost;\n+\n+    public HibernateOrmDevJsonRpcService() {\n+        this.isDev = LaunchMode.current() == LaunchMode.DEVELOPMENT && !LaunchMode.isRemoteDev();\n+        this.allowedHost = ConfigProvider.getConfig()\n+                .getOptionalValue(\"quarkus.datasource.dev-ui.allowed-db-host\", String.class)\n+                .orElse(null);\n+    }\n \n     public HibernateOrmDevInfo getInfo() {\n         return HibernateOrmDevController.get().getInfo();\n@@ -18,4 +55,152 @@ public int getNumberOfNamedQueries() {\n         return getInfo().getNumberOfNamedQueries();\n     }\n \n+    private Optional<HibernateOrmDevInfo.PersistenceUnit> findPersistenceUnit(String persistenceUnitName) {\n+        return getInfo().getPersistenceUnits().stream().filter(pu -> pu.getName().equals(persistenceUnitName)).findFirst();\n+    }\n+\n+    /**\n+     * Execute an arbitrary {@code hql} query in the given {@code persistence unit}. The query might be both a selection or a\n+     * mutation statement. For selection queries, the result count is retrieved though a count query and the results, paginated\n+     * based on pageNumber and pageSize are returned. For mutation statements, a custom message including the number of affected\n+     * records is returned.\n+     * <p>\n+     * This method handles result serialization (to JSON) internally, and returns a {@link JsonRpcMessage<String>} to avoid\n+     * further processing by the {@link JsonRpcRouter}.\n+     *\n+     * @param persistenceUnit The name of the persistence unit within which the query will be executed\n+     * @param hql The Hibernate Query Language (HQL) statement to execute\n+     * @param pageNumber The page number, used for selection query results pagination\n+     * @param pageSize The page size, used for selection query results pagination\n+     * @return a {@link JsonRpcMessage<String>} containing the resulting {@link DataSet} serialized to JSON.\n+     */\n+    public JsonRpcMessage<Object> executeHQL(String persistenceUnit, String hql, Integer pageNumber, Integer pageSize) {\n+        if (!isDev) {\n+            return errorDataSet(\"This method is only allowed in dev mode\");\n+        }\n+\n+        if (!hqlIsValid(hql)) {\n+            return errorDataSet(\"The provided HQL was not valid\");\n+        }\n+\n+        Optional<HibernateOrmDevInfo.PersistenceUnit> pu = findPersistenceUnit(persistenceUnit);\n+        if (pu.isEmpty()) {\n+            return errorDataSet(\"No such persistence unit: \" + persistenceUnit);\n+        }\n+\n+        //noinspection resource\n+        SessionFactoryImplementor sf = pu.get().sessionFactory();\n+\n+        // Check the connection for this persistence unit points to an allowed datasource\n+        ConnectionProvider connectionProvider = sf.getServiceRegistry().requireService(ConnectionProvider.class);\n+        if (connectionProvider instanceof QuarkusConnectionProvider quarkusConnectionProvider) {\n+            if (!isAllowedDatabase(quarkusConnectionProvider.getDataSource())) {\n+                return errorDataSet(\"The persistence unit's datasource points to a non-allowed datasource. \"\n+                        + \"By default only local databases are enabled; you can use the 'quarkus.datasource.dev-ui.allowed-db-host'\"\n+                        + \" configuration property to configure allowed hosts ('*' to allow all).\");\n+            }\n+        } else {\n+            return errorDataSet(\"Unsupported Connection Provider type for specified persistence unit.\");\n+        }\n+\n+        return sf.fromSession(session -> {\n+            try {\n+                Query<Object> query = session.createQuery(hql, null);\n+                if (isMutation(((SqmQuery) query).getSqmStatement())) {\n+                    // DML query, execute update within transaction and return custom message with affected rows\n+                    Transaction transaction = session.beginTransaction();\n+                    try {\n+                        int updateCount = query.executeUpdate();\n+                        transaction.commit();\n+\n+                        String message = \"Query executed correctly. Rows affected: \" + updateCount;\n+                        return new JsonRpcMessage<>(new DataSet(null, -1, message, null), MessageType.Response);\n+                    } catch (Exception e) {\n+                        // an error happened in executeUpdate() or during commit\n+                        transaction.rollback();\n+                        throw e;\n+                    }\n+                } else {\n+                    // selection query, execute count query and return paged results\n+\n+                    // This executes a separate count query\n+                    long resultCount = query.getResultCount();\n+\n+                    try (ScrollableResults<Object> scroll = query.scroll(ScrollMode.SCROLL_INSENSITIVE)) {\n+                        boolean hasNext = scroll.scroll((pageNumber - 1) * pageSize + 1);\n+                        List<Object> results = new ArrayList<>();\n+                        int i = 0;\n+                        while (hasNext && i++ < pageSize) {\n+                            results.add(scroll.get());\n+                            hasNext = scroll.next();\n+                        }\n+\n+                        // manually serialize data within the transaction to ensure lazy-loading can function\n+                        String result = writeValueAsString(new DataSet(results, resultCount, null, null));\n+                        JsonRpcMessage<Object> message = new JsonRpcMessage<>(result, MessageType.Response);\n+                        message.setAlreadySerialized(true);\n+                        return message;\n+                    }\n+                }\n+            } catch (Exception ex) {\n+                return new JsonRpcMessage<>(new DataSet(null, -1, null, ex.getMessage()), MessageType.Response);\n+            }\n+        });\n+    }\n+\n+    private static JsonRpcMessage<Object> errorDataSet(String errorMessage) {\n+        return new JsonRpcMessage<>(new DataSet(null, -1, null, errorMessage), MessageType.Response);\n+    }\n+\n+    private static String writeValueAsString(DataSet value) {\n+        try {\n+            JsonRpcRouter jsonRpcRouter = CDI.current().select(JsonRpcRouter.class).get();\n+            return jsonRpcRouter.getJsonMapper().toString(value, true);\n+        } catch (Exception ex) {\n+            throw new RuntimeException(\n+                    \"Unable to encode results as JSON. Note circular associations are not supported at the moment, use `@JsonIgnore` to break circles.\",\n+                    ex);\n+        }\n+    }\n+\n+    private boolean hqlIsValid(String hql) {\n+        return hql != null && !hql.trim().isEmpty();\n+    }\n+\n+    private boolean isAllowedDatabase(AgroalDataSource ads) {\n+        final String allowedHost = this.allowedHost == null ? null : this.allowedHost.trim();\n+        if (allowedHost != null && allowedHost.equals(\"*\")) {\n+            // special value indicating to allow any host\n+            return true;\n+        }\n+\n+        AgroalDataSourceConfiguration configuration = ads.getConfiguration();\n+        String jdbcUrl = configuration.connectionPoolConfiguration().connectionFactoryConfiguration().jdbcUrl();\n+\n+        try {\n+            if (jdbcUrl.startsWith(\"jdbc:h2:mem:\") || jdbcUrl.startsWith(\"jdbc:h2:file:\")\n+                    || jdbcUrl.startsWith(\"jdbc:h2:tcp://localhost\")\n+                    || (allowedHost != null && !allowedHost.isBlank()\n+                            && jdbcUrl.startsWith(\"jdbc:h2:tcp://\" + allowedHost))\n+                    || jdbcUrl.startsWith(\"jdbc:derby:memory:\")) {\n+                return true;\n+            }\n+\n+            String cleanUrl = jdbcUrl.replace(\"jdbc:\", \"\");\n+            URI uri = new URI(cleanUrl);\n+\n+            String host = uri.getHost();\n+\n+            return host != null && ((host.equals(\"localhost\") || host.equals(\"127.0.0.1\") || host.equals(\"::1\")) ||\n+                    (allowedHost != null && !allowedHost.isBlank() && host.equalsIgnoreCase(allowedHost)));\n+\n+        } catch (URISyntaxException e) {\n+            Log.warn(e.getMessage());\n+        }\n+\n+        return false;\n+    }\n+\n+    private record DataSet(List<Object> data, long totalNumberOfElements, String message, String error) {\n+    }\n }\n\ndiff --git a/extensions/vertx-http/runtime/src/main/java/io/quarkus/devui/runtime/comms/JsonRpcMessage.java b/extensions/vertx-http/runtime/src/main/java/io/quarkus/devui/runtime/comms/JsonRpcMessage.java\nindex 2e7428a72cc93..48e4b7824013b 100644\n--- a/extensions/vertx-http/runtime/src/main/java/io/quarkus/devui/runtime/comms/JsonRpcMessage.java\n+++ b/extensions/vertx-http/runtime/src/main/java/io/quarkus/devui/runtime/comms/JsonRpcMessage.java\n@@ -8,6 +8,7 @@\n public class JsonRpcMessage<T> {\n     private T response;\n     private MessageType messageType;\n+    private boolean alreadySerialized = false;\n \n     public JsonRpcMessage() {\n     }\n@@ -32,4 +33,12 @@ public MessageType getMessageType() {\n     public void setMessageType(MessageType messageType) {\n         this.messageType = messageType;\n     }\n+\n+    public boolean isAlreadySerialized() {\n+        return alreadySerialized;\n+    }\n+\n+    public void setAlreadySerialized(boolean alreadySerialized) {\n+        this.alreadySerialized = alreadySerialized;\n+    }\n }\n\\ No newline at end of file\n\ndiff --git a/extensions/vertx-http/runtime/src/main/java/io/quarkus/devui/runtime/comms/JsonRpcRouter.java b/extensions/vertx-http/runtime/src/main/java/io/quarkus/devui/runtime/comms/JsonRpcRouter.java\nindex 2d6f4d326c3c5..a413b53dca8a8 100644\n--- a/extensions/vertx-http/runtime/src/main/java/io/quarkus/devui/runtime/comms/JsonRpcRouter.java\n+++ b/extensions/vertx-http/runtime/src/main/java/io/quarkus/devui/runtime/comms/JsonRpcRouter.java\n@@ -3,11 +3,7 @@\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.time.LocalDateTime;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n+import java.util.*;\n import java.util.concurrent.CompletionStage;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.Flow;\n@@ -233,12 +229,17 @@ private void routeToRuntimeMethod(JsonRpcRequest jsonRpcRequest, ServerWebSocket\n         uni.subscribe()\n                 .with(item -> {\n                     if (item != null && JsonRpcMessage.class.isAssignableFrom(item.getClass())) {\n-                        JsonRpcMessage jsonRpcMessage = (JsonRpcMessage) item;\n-                        codec.writeResponse(s, jsonRpcRequest.getId(), jsonRpcMessage.getResponse(),\n-                                jsonRpcMessage.getMessageType());\n+                        JsonRpcMessage<?> jsonRpcMessage = (JsonRpcMessage<?>) item;\n+                        Object response = jsonRpcMessage.getResponse();\n+                        if (jsonRpcMessage.isAlreadySerialized()) {\n+                            // The message response was already serialized, write text directly to socket\n+                            s.writeTextMessage(\"{\\\"id\\\":\" + jsonRpcRequest.getId() + \",\\\"result\\\":{\\\"messageType\\\":\\\"\"\n+                                    + jsonRpcMessage.getMessageType().name() + \"\\\",\\\"object\\\":\" + response + \"}}\");\n+                        } else {\n+                            codec.writeResponse(s, jsonRpcRequest.getId(), response, jsonRpcMessage.getMessageType());\n+                        }\n                     } else {\n-                        codec.writeResponse(s, jsonRpcRequest.getId(), item,\n-                                MessageType.Response);\n+                        codec.writeResponse(s, jsonRpcRequest.getId(), item, MessageType.Response);\n                     }\n                 }, failure -> {\n                     Throwable actualFailure;\n@@ -347,6 +348,10 @@ private Map<String, String> getArgsAsMap(JsonRpcRequest jsonRpcRequest) {\n         return Map.of();\n     }\n \n+    public JsonMapper getJsonMapper() {\n+        return codec.getJsonMapper();\n+    }\n+\n     private static final String DOT = \".\";\n     private static final String UNSUBSCRIBE = \"unsubscribe\";\n \n\ndiff --git a/extensions/vertx-http/runtime/src/main/java/io/quarkus/devui/runtime/jsonrpc/JsonRpcCodec.java b/extensions/vertx-http/runtime/src/main/java/io/quarkus/devui/runtime/jsonrpc/JsonRpcCodec.java\nindex 46312b607298d..a6de6811aa99d 100644\n--- a/extensions/vertx-http/runtime/src/main/java/io/quarkus/devui/runtime/jsonrpc/JsonRpcCodec.java\n+++ b/extensions/vertx-http/runtime/src/main/java/io/quarkus/devui/runtime/jsonrpc/JsonRpcCodec.java\n@@ -39,8 +39,11 @@ public void writeErrorResponse(ServerWebSocket socket, int id, String jsonRpcMet\n                         \"Method [\" + jsonRpcMethodName + \"] failed: \" + exception.getMessage())));\n     }\n \n-    private void writeResponse(ServerWebSocket socker, JsonRpcResponse response) {\n-        socker.writeTextMessage(jsonMapper.toString(response, true));\n+    private void writeResponse(ServerWebSocket socket, JsonRpcResponse response) {\n+        socket.writeTextMessage(jsonMapper.toString(response, true));\n     }\n \n+    public JsonMapper getJsonMapper() {\n+        return jsonMapper;\n+    }\n }\n",
    "test_patch": "diff --git a/integration-tests/devmode/src/test/java/io/quarkus/test/devui/AbstractDevUIHibernateOrmTest.java b/integration-tests/devmode/src/test/java/io/quarkus/test/devui/AbstractDevUIHibernateOrmTest.java\nindex 7cf413df387f2..45323f245ef72 100644\n--- a/integration-tests/devmode/src/test/java/io/quarkus/test/devui/AbstractDevUIHibernateOrmTest.java\n+++ b/integration-tests/devmode/src/test/java/io/quarkus/test/devui/AbstractDevUIHibernateOrmTest.java\n@@ -1,10 +1,9 @@\n package io.quarkus.test.devui;\n \n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.*;\n \n import java.util.Iterator;\n+import java.util.Map;\n \n import org.junit.jupiter.api.Test;\n \n@@ -21,13 +20,15 @@ public abstract class AbstractDevUIHibernateOrmTest extends DevUIJsonRPCTest {\n     private final String expectedPersistenceUnitName;\n     private final String expectedTableName;\n     private final String expectedClassName;\n+    private final Integer expectedResults;\n \n     public AbstractDevUIHibernateOrmTest(String expectedPersistenceUnitName, String expectedTableName,\n-            String expectedClassName) {\n+            String expectedClassName, Integer expectedResults) {\n         super(\"io.quarkus.quarkus-hibernate-orm\");\n         this.expectedPersistenceUnitName = expectedPersistenceUnitName;\n         this.expectedTableName = expectedTableName;\n         this.expectedClassName = expectedClassName;\n+        this.expectedResults = expectedResults;\n     }\n \n     @Test\n@@ -95,4 +96,65 @@ public void testGetNumberOfNamedQueries() throws Exception {\n         assertTrue(getNumberOfNamedQueriesResponse.isInt());\n         assertEquals(0, getNumberOfNamedQueriesResponse.asInt());\n     }\n+\n+    @Test\n+    public void testExecuteHQL() throws Exception {\n+        String entityName = expectedTableName != null ? expectedTableName : \"MyEntity\";\n+        Map<String, Object> arguments = Map.of(\n+                \"hql\", \"select e from \" + entityName + \" e where e.id = 1\",\n+                \"persistenceUnit\", expectedPersistenceUnitName != null ? expectedPersistenceUnitName : \"\",\n+                \"pageNumber\", 1,\n+                \"pageSize\", 15);\n+\n+        JsonNode dataSet = super.executeJsonRPCMethod(\"executeHQL\", arguments);\n+\n+        if (expectedResults != null) {\n+            // Expect number of results\n+            assertNotNull(dataSet);\n+            assertTrue(dataSet.has(\"totalNumberOfElements\"));\n+            assertTrue(dataSet.has(\"data\"));\n+            assertFalse(dataSet.has(\"error\"));\n+\n+            JsonNode elements = dataSet.get(\"totalNumberOfElements\");\n+            assertTrue(elements.isNumber());\n+            assertEquals(expectedResults, elements.intValue());\n+\n+            JsonNode data = dataSet.get(\"data\");\n+            assertTrue(data.isArray());\n+            assertEquals(expectedResults, data.size());\n+            for (int i = 1; i <= expectedResults; i++) {\n+                JsonNode element = data.get(i - 1);\n+                assertEquals(i, element.get(\"id\").intValue());\n+                assertEquals(\"entity_\" + i, data.get(0).get(\"field\").textValue());\n+            }\n+        } else if (expectedPersistenceUnitName != null) {\n+            // Expecting an empty result set\n+            assertNotNull(dataSet);\n+            assertTrue(dataSet.has(\"totalNumberOfElements\"));\n+            assertTrue(dataSet.has(\"data\"));\n+            assertFalse(dataSet.has(\"error\"));\n+\n+            JsonNode elements = dataSet.get(\"totalNumberOfElements\");\n+            assertTrue(elements.isNumber());\n+            assertEquals(0, elements.intValue());\n+\n+            JsonNode data = dataSet.get(\"data\");\n+            assertTrue(data.isArray());\n+            assertEquals(0, data.size());\n+        } else {\n+            // Expecting an error\n+            assertNotNull(dataSet);\n+            assertTrue(dataSet.has(\"totalNumberOfElements\"));\n+            assertFalse(dataSet.has(\"data\"));\n+            assertTrue(dataSet.has(\"error\"));\n+\n+            JsonNode elements = dataSet.get(\"totalNumberOfElements\");\n+            assertTrue(elements.isNumber());\n+            assertEquals(-1, elements.intValue());\n+\n+            JsonNode error = dataSet.get(\"error\");\n+            assertTrue(error.isTextual());\n+            assertTrue(error.asText().contains(\"No such persistence unit\"));\n+        }\n+    }\n }\n\ndiff --git a/integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmActiveFalseAndNamedPuActiveTrueTest.java b/integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmActiveFalseAndNamedPuActiveTrueTest.java\nindex 24b00da9fd6ce..7a3ef576b95d0 100644\n--- a/integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmActiveFalseAndNamedPuActiveTrueTest.java\n+++ b/integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmActiveFalseAndNamedPuActiveTrueTest.java\n@@ -19,6 +19,7 @@ public class DevUIHibernateOrmActiveFalseAndNamedPuActiveTrueTest extends Abstra\n                             + \"quarkus.hibernate-orm.active=false\\n\"\n                             + \"quarkus.hibernate-orm.datasource=<default>\\n\"\n                             + \"quarkus.hibernate-orm.packages=io.quarkus.test.devui\\n\"\n+                            + \"quarkus.hibernate-orm.\\\"namedpu\\\".database.generation=drop-and-create\\n\"\n                             // ... but it's (implicitly) active for a named PU\n                             + \"quarkus.hibernate-orm.\\\"namedpu\\\".datasource=nameddatasource\\n\"\n                             + \"quarkus.hibernate-orm.\\\"namedpu\\\".packages=io.quarkus.test.devui.namedpu\\n\"),\n@@ -27,7 +28,7 @@ public class DevUIHibernateOrmActiveFalseAndNamedPuActiveTrueTest extends Abstra\n                     .addClasses(MyNamedPuEntity.class));\n \n     public DevUIHibernateOrmActiveFalseAndNamedPuActiveTrueTest() {\n-        super(\"namedpu\", \"MyNamedPuEntity\", \"io.quarkus.test.devui.namedpu.MyNamedPuEntity\");\n+        super(\"namedpu\", \"MyNamedPuEntity\", \"io.quarkus.test.devui.namedpu.MyNamedPuEntity\", null);\n     }\n \n }\n\ndiff --git a/integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmActiveFalseTest.java b/integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmActiveFalseTest.java\nindex 2b23d3ba8439e..c19a623cb063e 100644\n--- a/integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmActiveFalseTest.java\n+++ b/integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmActiveFalseTest.java\n@@ -18,7 +18,7 @@ public class DevUIHibernateOrmActiveFalseTest extends AbstractDevUIHibernateOrmT\n                     .addClasses(MyEntity.class));\n \n     public DevUIHibernateOrmActiveFalseTest() {\n-        super(null, null, null);\n+        super(null, null, null, null);\n     }\n \n }\n\ndiff --git a/integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmSmokeTest.java b/integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmSmokeTest.java\nindex bf20372d5ef6b..09987b1ccb479 100644\n--- a/integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmSmokeTest.java\n+++ b/integration-tests/devmode/src/test/java/io/quarkus/test/devui/DevUIHibernateOrmSmokeTest.java\n@@ -11,11 +11,13 @@ public class DevUIHibernateOrmSmokeTest extends AbstractDevUIHibernateOrmTest {\n     static final QuarkusDevModeTest test = new QuarkusDevModeTest()\n             .withApplicationRoot((jar) -> jar.addAsResource(\n                     new StringAsset(\"quarkus.datasource.db-kind=h2\\n\"\n-                            + \"quarkus.datasource.jdbc.url=jdbc:h2:mem:test\\n\"),\n+                            + \"quarkus.datasource.jdbc.url=jdbc:h2:mem:test\\n\"\n+                            + \"quarkus.hibernate-orm.database.generation=drop-and-create\\n\"),\n                     \"application.properties\")\n+                    .addAsResource(new StringAsset(\"INSERT INTO MyEntity(id, field) VALUES(1, 'entity_1');\"), \"import.sql\")\n                     .addClasses(MyEntity.class));\n \n     public DevUIHibernateOrmSmokeTest() {\n-        super(\"<default>\", \"MyEntity\", \"io.quarkus.test.devui.MyEntity\");\n+        super(\"<default>\", \"MyEntity\", \"io.quarkus.test.devui.MyEntity\", 1);\n     }\n }\n\ndiff --git a/integration-tests/devmode/src/test/java/io/quarkus/test/devui/MyEntity.java b/integration-tests/devmode/src/test/java/io/quarkus/test/devui/MyEntity.java\nindex a9a469f9a31e0..77d32023253da 100644\n--- a/integration-tests/devmode/src/test/java/io/quarkus/test/devui/MyEntity.java\n+++ b/integration-tests/devmode/src/test/java/io/quarkus/test/devui/MyEntity.java\n@@ -6,11 +6,25 @@\n \n @Entity\n public class MyEntity {\n-\n     @Id\n     Long id;\n \n     @Column\n     String field;\n \n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getField() {\n+        return field;\n+    }\n+\n+    public void setField(String field) {\n+        this.field = field;\n+    }\n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46711",
    "pr_id": 46711,
    "issue_id": 46704,
    "repo": "quarkusio/quarkus",
    "problem_statement": "TestPathHelper signature change causing issue on JBeret ecosystem CI\n\nThe innocuous-looking change in https://github.com/quarkusio/quarkus/pull/46625 is causing an issue running the JBatch TCK: https://github.com/quarkiverse/quarkus-jberet/actions/runs/13757259497\n\nWith:\n\n```\njava.lang.RuntimeException: java.lang.IllegalStateException: Unable to translate path for /home/runner/.m2/repository/jakarta/batch/com.ibm.jbatch.tck/2.1.1/com.ibm.jbatch.tck-2.1.1.jar\n\tat io.quarkus.test.junit.QuarkusTestExtension.throwBootFailureException(QuarkusTestExtension.java:611)\n\tat io.quarkus.test.junit.QuarkusTestExtension.interceptTestClassConstructor(QuarkusTestExtension.java:706)\n\tat java.base/java.util.Optional.orElseGet(Optional.java:364)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\nCaused by: java.lang.IllegalStateException: Unable to translate path for /home/runner/.m2/repository/jakarta/batch/com.ibm.jbatch.tck/2.1.1/com.ibm.jbatch.tck-2.1.1.jar\n\tat io.quarkus.test.common.PathTestHelper.getAppClassLocationForTestLocation(PathTestHelper.java:225)\n\tat io.quarkus.test.junit.AbstractJvmQuarkusTestExtension.createAugmentor(AbstractJvmQuarkusTestExtension.java:137)\n\tat io.quarkus.test.junit.QuarkusTestExtension.doJavaStart(QuarkusTestExtension.java:190)\n\tat io.quarkus.test.junit.QuarkusTestExtension.ensureStarted(QuarkusTestExtension.java:578)\n\tat io.quarkus.test.junit.QuarkusTestExtension.beforeAll(QuarkusTestExtension.java:628)\n\t... 1 more\n```\n\n",
    "issue_word_count": 204,
    "test_files_count": 1,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "test-framework/common/src/main/java/io/quarkus/test/common/PathTestHelper.java"
    ],
    "pr_changed_test_files": [
      "test-framework/common/src/main/java/io/quarkus/test/common/PathTestHelper.java"
    ],
    "base_commit": "45ea1b9744775b4ec2d3a9049d02aaae07b4ed14",
    "head_commit": "32de66c654a97c13d5375c705835631c247af1fb",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46711",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46711",
    "dockerfile": "",
    "pr_merged_at": "2025-03-11T08:06:45.000Z",
    "patch": "",
    "test_patch": "diff --git a/test-framework/common/src/main/java/io/quarkus/test/common/PathTestHelper.java b/test-framework/common/src/main/java/io/quarkus/test/common/PathTestHelper.java\nindex a45fa856ce743..3cb7f86951d41 100644\n--- a/test-framework/common/src/main/java/io/quarkus/test/common/PathTestHelper.java\n+++ b/test-framework/common/src/main/java/io/quarkus/test/common/PathTestHelper.java\n@@ -178,9 +178,10 @@ public static Path getAppClassLocation(Class<?> testClass) {\n      * @return directory or JAR containing the application being tested by a test from the given location\n      */\n     public static Path getAppClassLocationForTestLocation(Path testClassLocationPath) {\n-        if (testClassLocationPath.endsWith(\".jar\")) {\n-            if (testClassLocationPath.endsWith(\"-tests.jar\")) {\n-                String testClassLocation = testClassLocationPath.toString();\n+        String testClassLocation = testClassLocationPath.toString();\n+\n+        if (testClassLocation.endsWith(\".jar\")) {\n+            if (testClassLocation.endsWith(\"-tests.jar\")) {\n                 return Paths.get(new StringBuilder()\n                         .append(testClassLocation, 0, testClassLocation.length() - \"-tests.jar\".length())\n                         .append(\".jar\")\n@@ -188,7 +189,6 @@ public static Path getAppClassLocationForTestLocation(Path testClassLocationPath\n             }\n             return testClassLocationPath;\n         }\n-        String testClassLocation = testClassLocationPath.toString();\n         Optional<Path> mainClassesDir = TEST_TO_MAIN_DIR_FRAGMENTS.entrySet().stream()\n                 .filter(e -> testClassLocation.contains(e.getKey()))\n                 .map(e -> {\n@@ -211,7 +211,7 @@ public static Path getAppClassLocationForTestLocation(Path testClassLocationPath\n         }\n         // could be a custom test classes dir under the 'target' dir with the main\n         // classes still under 'target/classes'\n-        p = Path.of(testClassLocation).getParent();\n+        p = testClassLocationPath.getParent();\n         if (p != null && p.getFileName().toString().equals(TARGET)) {\n             p = p.resolve(\"classes\");\n             if (Files.exists(p)) {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46684",
    "pr_id": 46684,
    "issue_id": 46459,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Upgrading from 3.18.2 to 3.18.3 Results in OutOfMemoryError when using @QuarkusTest with Quarkus Junit 5\n### Describe the bug\n\nWhen upgrading from Quarkus `3.18.2` to `3.18.3` our `@QuarkusTest`s start to throw `OutOfMemoryError`. \n\nIt seems the issue is isolated in `quarkus-junit5` dependency or one of its transitives, when I upgrade the rest of dependencies and leave that, things work fine.\n\nPerhaps something to do with this change?  But I'm not sure...\nhttps://github.com/quarkusio/quarkus/commit/820360362c2ae76fc1e97f541ff85f157a363907\n\n### Expected behavior\n\nTests pass without `OutOfMemoryError`\n\n### Actual behavior\n\nTests annotated with `@QuarkusTest` hang and eventually run out of memory with different errors each time.\nExample errors:\n\n```\njava.lang.RuntimeException: io.quarkus.builder.BuildException: Build failure: Build failed due to errors\n\t[error]: Build step io.quarkus.arc.deployment.ArcProcessor#registerBeans threw an exception: java.lang.OutOfMemoryError: Java heap space\n\njava.lang.RuntimeException: java.lang.RuntimeException: io.quarkus.builder.BuildException: Build failure: Build failed due to errors\n\t[error]: Build step io.quarkus.arc.deployment.ArcProcessor#registerBeans threw an exception: java.lang.OutOfMemoryError: Java heap space\n\n\tat io.quarkus.test.junit.QuarkusTestExtension.throwBootFailureException(QuarkusTestExtension.java:611)\n\tat io.quarkus.test.junit.QuarkusTestExtension.interceptTestClassConstructor(QuarkusTestExtension.java:695)\n\tat java.base/java.util.Optional.orElseGet(Optional.java:364)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\nCaused by: java.lang.RuntimeException: io.quarkus.builder.BuildException: Build failure: Build failed due to errors\n\t[error]: Build step io.quarkus.arc.deployment.ArcProcessor#registerBeans threw an exception: java.lang.OutOfMemoryError: Java heap space\n\n\tat io.quarkus.runner.bootstrap.AugmentActionImpl.runAugment(AugmentActionImpl.java:354)\n\tat io.quarkus.runner.bootstrap.AugmentActionImpl.createInitialRuntimeApplication(AugmentActionImpl.java:271)\n\tat io.quarkus.runner.bootstrap.AugmentActionImpl.createInitialRuntimeApplication(AugmentActionImpl.java:61)\n\tat io.quarkus.test.junit.QuarkusTestExtension.doJavaStart(QuarkusTestExtension.java:195)\n\tat io.quarkus.test.junit.QuarkusTestExtension.ensureStarted(QuarkusTestExtension.java:578)\n\tat io.quarkus.test.junit.QuarkusTestExtension.beforeAll(QuarkusTestExtension.java:628)\n\t... 1 more\nCaused by: io.quarkus.builder.BuildException: Build failure: Build failed due to errors\n\t[error]: Build step io.quarkus.arc.deployment.ArcProcessor#registerBeans threw an exception: java.lang.OutOfMemoryError: Java heap space\n\n\tat io.quarkus.builder.Execution.run(Execution.java:124)\n\tat io.quarkus.builder.BuildExecutionBuilder.execute(BuildExecutionBuilder.java:79)\n\tat io.quarkus.deployment.QuarkusAugmentor.run(QuarkusAugmentor.java:161)\n\tat io.quarkus.runner.bootstrap.AugmentActionImpl.runAugment(AugmentActionImpl.java:350)\n\t... 6 more\nCaused by: java.lang.OutOfMemoryError: Java heap space\n```\n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\nOSX and Linux\n\n### Output of `java -version`\n\n17.0\n\n### Quarkus version or git rev\n\n3.18.3\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nGradle 8.12.1\n\n### Additional information\n\nI've also tried version `3.19.0` and the issue has NOT been resolved.",
    "issue_word_count": 463,
    "test_files_count": 2,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/util/QuarkusTestProfileAwareClassOrderer.java",
      "test-framework/junit5/src/test/java/io/quarkus/test/junit/util/QuarkusTestProfileAwareClassOrdererTest.java"
    ],
    "pr_changed_test_files": [
      "test-framework/junit5/src/main/java/io/quarkus/test/junit/util/QuarkusTestProfileAwareClassOrderer.java",
      "test-framework/junit5/src/test/java/io/quarkus/test/junit/util/QuarkusTestProfileAwareClassOrdererTest.java"
    ],
    "base_commit": "0afec26b5eb1cf20e6127dd62f052ca7e675997a",
    "head_commit": "ce72ba7668ee064b4442b0f88cbbe8b674e0487d",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46684",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46684",
    "dockerfile": "",
    "pr_merged_at": "2025-03-10T09:56:41.000Z",
    "patch": "",
    "test_patch": "diff --git a/test-framework/junit5/src/main/java/io/quarkus/test/junit/util/QuarkusTestProfileAwareClassOrderer.java b/test-framework/junit5/src/main/java/io/quarkus/test/junit/util/QuarkusTestProfileAwareClassOrderer.java\nindex 843ff7294b192..5b92c43d0054e 100644\n--- a/test-framework/junit5/src/main/java/io/quarkus/test/junit/util/QuarkusTestProfileAwareClassOrderer.java\n+++ b/test-framework/junit5/src/main/java/io/quarkus/test/junit/util/QuarkusTestProfileAwareClassOrderer.java\n@@ -58,11 +58,11 @@\n  */\n public class QuarkusTestProfileAwareClassOrderer implements ClassOrderer {\n \n-    protected static final String DEFAULT_ORDER_PREFIX_NON_QUARKUS_TEST = \"10_\";\n     protected static final String DEFAULT_ORDER_PREFIX_QUARKUS_TEST = \"20_\";\n     protected static final String DEFAULT_ORDER_PREFIX_QUARKUS_TEST_WITH_MATCHING_RES = \"30_\";\n     protected static final String DEFAULT_ORDER_PREFIX_QUARKUS_TEST_WITH_PROFILE = \"40_\";\n     protected static final String DEFAULT_ORDER_PREFIX_QUARKUS_TEST_WITH_RESTRICTED_RES = \"45_\";\n+    protected static final String DEFAULT_ORDER_PREFIX_NON_QUARKUS_TEST = \"60_\";\n \n     static final String CFGKEY_ORDER_PREFIX_QUARKUS_TEST = \"junit.quarkus.orderer.prefix.quarkus-test\";\n \n\ndiff --git a/test-framework/junit5/src/test/java/io/quarkus/test/junit/util/QuarkusTestProfileAwareClassOrdererTest.java b/test-framework/junit5/src/test/java/io/quarkus/test/junit/util/QuarkusTestProfileAwareClassOrdererTest.java\nindex b4b09cfcb525d..a136bee54a105 100644\n--- a/test-framework/junit5/src/test/java/io/quarkus/test/junit/util/QuarkusTestProfileAwareClassOrdererTest.java\n+++ b/test-framework/junit5/src/test/java/io/quarkus/test/junit/util/QuarkusTestProfileAwareClassOrdererTest.java\n@@ -98,8 +98,6 @@ void allVariants() {\n         new QuarkusTestProfileAwareClassOrderer().orderClasses(contextMock);\n \n         assertThat(input).containsExactly(\n-                nonQuarkusTest1Desc,\n-                nonQuarkusTest2Desc,\n                 quarkusTest1Desc,\n                 quarkusTest1aDesc,\n                 quarkusTest2Desc,\n@@ -114,7 +112,9 @@ void allVariants() {\n                 quarkusTestWithRestrictedResourceDesc,\n                 quarkusTestWithRestrictedResourceDesc2,\n                 quarkusTestWithMetaResourceDesc,\n-                quarkusTestWithMetaResourceDesc2);\n+                quarkusTestWithMetaResourceDesc2,\n+                nonQuarkusTest1Desc,\n+                nonQuarkusTest2Desc);\n     }\n \n     @Test\n@@ -124,9 +124,9 @@ void configuredPrefix() {\n         List<ClassDescriptor> input = Arrays.asList(quarkusTestDesc, nonQuarkusTestDesc);\n         doReturn(input).when(contextMock).getClassDescriptors();\n \n-        new QuarkusTestProfileAwareClassOrderer(\"20_\", \"30_\", \"40_\", \"45_\", \"60_\", Optional.empty()).orderClasses(contextMock);\n+        new QuarkusTestProfileAwareClassOrderer(\"20_\", \"30_\", \"40_\", \"45_\", \"01_\", Optional.empty()).orderClasses(contextMock);\n \n-        assertThat(input).containsExactly(quarkusTestDesc, nonQuarkusTestDesc);\n+        assertThat(input).containsExactly(nonQuarkusTestDesc, quarkusTestDesc);\n     }\n \n     @Test\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46664",
    "pr_id": 46664,
    "issue_id": 46646,
    "repo": "quarkusio/quarkus",
    "problem_statement": "ArC: improve the error message if multiple disposers match a producer method/field\n### Description\n\nCurrently, we do not show any details (such as disposer methods).\n\n### Implementation ideas\n\n_No response_",
    "issue_word_count": 29,
    "test_files_count": 2,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/DisposerInfo.java",
      "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/producer/disposer/DisposerWithAndWithoutQualifiersTest.java",
      "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/producer/disposer/DisposerWithQualifiersTest.java"
    ],
    "pr_changed_test_files": [
      "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/producer/disposer/DisposerWithAndWithoutQualifiersTest.java",
      "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/producer/disposer/DisposerWithQualifiersTest.java"
    ],
    "base_commit": "9847bba0e5e0f5bdab510ad7459f21f993f9f342",
    "head_commit": "5ea026a1e5975b4f839215c995cd89dcca6f77bf",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46664",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46664",
    "dockerfile": "",
    "pr_merged_at": "2025-03-07T13:45:36.000Z",
    "patch": "diff --git a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/DisposerInfo.java b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/DisposerInfo.java\nindex 7b0a75d9dc251..52b631b70f5c8 100644\n--- a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/DisposerInfo.java\n+++ b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/DisposerInfo.java\n@@ -6,6 +6,7 @@\n import java.util.List;\n import java.util.Set;\n \n+import jakarta.enterprise.inject.Default;\n import jakarta.enterprise.inject.spi.DefinitionException;\n \n import org.jboss.jandex.AnnotationInstance;\n@@ -75,8 +76,13 @@ void init(List<Throwable> errors) {\n \n     Collection<AnnotationInstance> getDisposedParameterQualifiers() {\n         Set<AnnotationInstance> resultingQualifiers = new HashSet<>();\n-        Annotations.getParameterAnnotations(declaringBean.getDeployment(), disposerMethod, disposedParameter.position())\n-                .stream().forEach(a -> resultingQualifiers.addAll(declaringBean.getDeployment().extractQualifiers(a)));\n+        for (AnnotationInstance ann : Annotations.getParameterAnnotations(declaringBean.getDeployment(), disposerMethod,\n+                disposedParameter.position())) {\n+            resultingQualifiers.addAll(declaringBean.getDeployment().extractQualifiers(ann));\n+        }\n+        if (resultingQualifiers.isEmpty()) {\n+            resultingQualifiers.add(AnnotationInstance.builder(Default.class).build());\n+        }\n         return resultingQualifiers;\n     }\n \n",
    "test_patch": "diff --git a/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/producer/disposer/DisposerWithAndWithoutQualifiersTest.java b/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/producer/disposer/DisposerWithAndWithoutQualifiersTest.java\nnew file mode 100644\nindex 0000000000000..5c1e24d305422\n--- /dev/null\n+++ b/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/producer/disposer/DisposerWithAndWithoutQualifiersTest.java\n@@ -0,0 +1,97 @@\n+package io.quarkus.arc.test.producer.disposer;\n+\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.ElementType.PARAMETER;\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import jakarta.enterprise.context.Dependent;\n+import jakarta.enterprise.inject.Disposes;\n+import jakarta.enterprise.inject.Produces;\n+import jakarta.enterprise.util.AnnotationLiteral;\n+import jakarta.inject.Qualifier;\n+import jakarta.inject.Singleton;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.arc.InstanceHandle;\n+import io.quarkus.arc.test.ArcTestContainer;\n+\n+public class DisposerWithAndWithoutQualifiersTest {\n+    @RegisterExtension\n+    ArcTestContainer container = new ArcTestContainer(Producer.class, Foo.class, Bar.class);\n+\n+    @Test\n+    public void testDisposers() {\n+        InstanceHandle<String> handle = Arc.container().instance(String.class);\n+        assertEquals(\"default\", handle.get());\n+        assertEquals(0, Producer.destroyed.size());\n+        handle.destroy();\n+        assertEquals(1, Producer.destroyed.size());\n+        assertEquals(\"default\", Producer.destroyed.get(0));\n+\n+        handle = Arc.container().instance(String.class, new Foo.Literal());\n+        assertEquals(\"foo\", handle.get());\n+        assertEquals(1, Producer.destroyed.size());\n+        handle.destroy();\n+        assertEquals(2, Producer.destroyed.size());\n+        assertEquals(\"foo\", Producer.destroyed.get(1));\n+    }\n+\n+    @Singleton\n+    static class Producer {\n+        static final List<String> destroyed = new ArrayList<>();\n+\n+        @Produces\n+        @Dependent\n+        String produce() {\n+            return \"default\";\n+        }\n+\n+        @Produces\n+        @Dependent\n+        @Foo\n+        String produceFoo() {\n+            return \"foo\";\n+        }\n+\n+        void dispose(@Disposes String str) {\n+            destroyed.add(str);\n+        }\n+\n+        void disposeFoo(@Disposes @Foo String str) {\n+            destroyed.add(str);\n+        }\n+\n+        // this one should be ignored\n+        void disposeBar(@Disposes @Bar String str) {\n+            destroyed.add(str);\n+        }\n+    }\n+\n+    @Qualifier\n+    @Inherited\n+    @Target({ TYPE, METHOD, FIELD, PARAMETER })\n+    @Retention(RUNTIME)\n+    public @interface Foo {\n+        class Literal extends AnnotationLiteral<Foo> implements Foo {\n+        }\n+    }\n+\n+    @Qualifier\n+    @Inherited\n+    @Target({ TYPE, METHOD, FIELD, PARAMETER })\n+    @Retention(RUNTIME)\n+    public @interface Bar {\n+    }\n+}\n\ndiff --git a/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/producer/disposer/DisposerWithQualifiersTest.java b/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/producer/disposer/DisposerWithQualifiersTest.java\nindex b09534e446034..1167baf6708c4 100644\n--- a/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/producer/disposer/DisposerWithQualifiersTest.java\n+++ b/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/producer/disposer/DisposerWithQualifiersTest.java\n@@ -60,6 +60,11 @@ void disposeFoo(@Disposes @Any String str) {\n         void disposeBar(@Disposes @Bar String str) {\n             destroyed.add(str);\n         }\n+\n+        // this one should be ignored too\n+        void disposeDefault(@Disposes String str) {\n+            destroyed.add(str);\n+        }\n     }\n \n     @Singleton\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46649",
    "pr_id": 46649,
    "issue_id": 46646,
    "repo": "quarkusio/quarkus",
    "problem_statement": "ArC: improve the error message if multiple disposers match a producer method/field\n### Description\n\nCurrently, we do not show any details (such as disposer methods).\n\n### Implementation ideas\n\n_No response_",
    "issue_word_count": 29,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanDeployment.java",
      "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/producer/disposer/illegal/MultipleDisposersTest.java"
    ],
    "pr_changed_test_files": [
      "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/producer/disposer/illegal/MultipleDisposersTest.java"
    ],
    "base_commit": "dece5ec89517fc0c328fe5b6c434969a06f2145f",
    "head_commit": "99c1c555510276b83af876c7d9e6af82161c8b31",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46649",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46649",
    "dockerfile": "",
    "pr_merged_at": "2025-03-07T07:20:42.000Z",
    "patch": "diff --git a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanDeployment.java b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanDeployment.java\nindex b6667a991631d..d9fd4c057b642 100644\n--- a/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanDeployment.java\n+++ b/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanDeployment.java\n@@ -1473,7 +1473,12 @@ private DisposerInfo findDisposer(Set<Type> beanTypes, BeanInfo declaringBean, A\n             }\n         }\n         if (found.size() > 1) {\n-            throw new DefinitionException(\"Multiple disposer methods found for \" + producer);\n+            StringBuilder error = new StringBuilder(\"Multiple disposer methods found for producer '\")\n+                    .append(producer).append(\"' declared on \").append(declaringBean).append(\":\\n\");\n+            for (DisposerInfo disposer : found) {\n+                error.append(\"\\t- \").append(disposer.getDisposerMethod()).append(\"\\n\");\n+            }\n+            throw new DefinitionException(error.toString());\n         }\n         return found.isEmpty() ? null : found.get(0);\n     }\n",
    "test_patch": "diff --git a/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/producer/disposer/illegal/MultipleDisposersTest.java b/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/producer/disposer/illegal/MultipleDisposersTest.java\nnew file mode 100644\nindex 0000000000000..aa7d9bbfa50ba\n--- /dev/null\n+++ b/independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/producer/disposer/illegal/MultipleDisposersTest.java\n@@ -0,0 +1,49 @@\n+package io.quarkus.arc.test.producer.disposer.illegal;\n+\n+import static org.junit.jupiter.api.Assertions.assertInstanceOf;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import jakarta.enterprise.context.Dependent;\n+import jakarta.enterprise.inject.Disposes;\n+import jakarta.enterprise.inject.Produces;\n+import jakarta.enterprise.inject.spi.DefinitionException;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.arc.test.ArcTestContainer;\n+\n+public class MultipleDisposersTest {\n+    @RegisterExtension\n+    public ArcTestContainer container = ArcTestContainer.builder()\n+            .beanClasses(ProducerDisposer.class)\n+            .shouldFail()\n+            .build();\n+\n+    @Test\n+    public void trigger() {\n+        Throwable error = container.getFailure();\n+        assertNotNull(error);\n+        assertInstanceOf(DefinitionException.class, error);\n+        assertTrue(error.getMessage().contains(\"Multiple disposer methods found\"));\n+        assertTrue(error.getMessage().contains(\"produceString\"));\n+        assertTrue(error.getMessage().contains(\"disposeString\"));\n+        assertTrue(error.getMessage().contains(\"disposeCharSequence\"));\n+    }\n+\n+    @Dependent\n+    static class ProducerDisposer {\n+        @Produces\n+        @Dependent\n+        String produceString() {\n+            return \"\";\n+        }\n+\n+        void disposeString(@Disposes String ignored) {\n+        }\n+\n+        void disposeCharSequence(@Disposes CharSequence ignored) {\n+        }\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46634",
    "pr_id": 46634,
    "issue_id": 46566,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Issuer-based OIDC tenant resolver should check `quarkus.oidc.token.required-claims`\n### Description\n\nGiven a number of static tenants, the issuer-based OIDC tenant uses the current token's issuer claim to find a matching tenant configuration.\n\nIn some cases, there could be several OIDC tenants with exactly the same issuer but different verification/processing requirements which are determined by the presence of some required claims.\n\nQuarkus OIDC has a `quarkus.oidc.token.required-claims` property which the issuer based resolver should check early if more than one static tenant with the same issuer is registered \n\n### Implementation ideas\n\nRecord how many static tenants work with a given issuer. If it is more than one, and the `quarkus.oidc.some-tenant.token.required-claims` property  is configured for `some-tenant` then do an extra check to get the right tenant be found.\n\nIt won't cover 100% cases such as when a special relationship between claims determine which tenant should be selected, but it can help in many cases with the custom tenant resolver option always being available\n\nCC @calvernaz",
    "issue_word_count": 179,
    "test_files_count": 2,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcProvider.java",
      "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/StaticTenantResolver.java",
      "integration-tests/oidc-wiremock/src/main/resources/application.properties",
      "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/StaticTenantIssuerResolverTest.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/oidc-wiremock/src/main/resources/application.properties",
      "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/StaticTenantIssuerResolverTest.java"
    ],
    "base_commit": "50d31e20dd536ddf3b38348a2f4c4de027b7d568",
    "head_commit": "2465448a489984fedc63005ea74ed50c3dda8dad",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46634",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46634",
    "dockerfile": "",
    "pr_merged_at": "2025-03-05T15:54:56.000Z",
    "patch": "diff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcProvider.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcProvider.java\nindex a1e52e97d285b..c30ce8942e0f3 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcProvider.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcProvider.java\n@@ -661,7 +661,7 @@ public String validate(JwtContext jwtContext) throws MalformedClaimException {\n                 var claimValue = claims.getStringClaimValue(claimName);\n                 var targetValue = targetClaim.getValue();\n                 if (!claimValue.equals(targetValue)) {\n-                    return \"claim \" + claimName + \"does not match expected value of \" + targetValue;\n+                    return \"claim \" + claimName + \" does not match expected value of \" + targetValue;\n                 }\n             }\n             return null;\n\ndiff --git a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/StaticTenantResolver.java b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/StaticTenantResolver.java\nindex 1cc0128faf13b..6ae7b7f1c30fa 100644\n--- a/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/StaticTenantResolver.java\n+++ b/extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/StaticTenantResolver.java\n@@ -19,6 +19,7 @@\n import io.quarkus.oidc.common.runtime.OidcCommonUtils;\n import io.quarkus.vertx.http.runtime.security.ImmutablePathMatcher;\n import io.smallrye.mutiny.Uni;\n+import io.vertx.core.json.JsonObject;\n import io.vertx.ext.web.RoutingContext;\n \n final class StaticTenantResolver {\n@@ -226,9 +227,17 @@ private static String getTenantId(RoutingContext context, TenantConfigContext te\n \n                     final String iss = tokenJson.getString(Claims.iss.name());\n                     if (tenantContext.getOidcMetadata().getIssuer().equals(iss)) {\n-                        OidcUtils.storeExtractedBearerToken(context, token);\n \n                         final String tenantId = tenantContext.oidcConfig().tenantId().get();\n+\n+                        if (!requiredClaimsMatch(tenantContext.oidcConfig().token().requiredClaims(), tokenJson)) {\n+                            LOG.debugf(\n+                                    \"OIDC tenant '%s' issuer matches the token issuer '%s' but does not match the token required claims\",\n+                                    tenantId, iss);\n+                            return null;\n+                        }\n+\n+                        OidcUtils.storeExtractedBearerToken(context, token);\n                         LOG.debugf(\"Resolved the '%s' OIDC tenant based on the matching issuer '%s'\", tenantId, iss);\n                         return tenantId;\n                     }\n@@ -237,6 +246,15 @@ private static String getTenantId(RoutingContext context, TenantConfigContext te\n             return null;\n         }\n \n+        private static boolean requiredClaimsMatch(Map<String, String> requiredClaims, JsonObject tokenJson) {\n+            for (Map.Entry<String, String> entry : requiredClaims.entrySet()) {\n+                if (!entry.getValue().equals(tokenJson.getString(entry.getKey()))) {\n+                    return false;\n+                }\n+            }\n+            return true;\n+        }\n+\n         private static boolean isTenantWithoutIssuer(TenantConfigContext tenantContext) {\n             return tenantContext.getOidcMetadata().getIssuer() == null\n                     || ANY_ISSUER.equals(tenantContext.getOidcMetadata().getIssuer());\n",
    "test_patch": "diff --git a/integration-tests/oidc-wiremock/src/main/resources/application.properties b/integration-tests/oidc-wiremock/src/main/resources/application.properties\nindex c8cc2359a2288..ac710a8bc6c61 100644\n--- a/integration-tests/oidc-wiremock/src/main/resources/application.properties\n+++ b/integration-tests/oidc-wiremock/src/main/resources/application.properties\n@@ -280,9 +280,16 @@ quarkus.grpc.clients.hello.host=localhost\n quarkus.grpc.clients.hello.port=8081\n quarkus.grpc.server.use-separate-server=false\n \n-%issuer-based-resolver.quarkus.oidc.bearer-issuer-resolver.auth-server-url=http://localhost:8185/auth/realms/quarkus2\n-%issuer-based-resolver.quarkus.oidc.bearer-issuer-resolver.client-id=quarkus-app\n-%issuer-based-resolver.quarkus.oidc.bearer-issuer-resolver.credentials.secret=secret\n-%issuer-based-resolver.quarkus.oidc.bearer-issuer-resolver.token.audience=https://correct-issuer.edu\n-%issuer-based-resolver.quarkus.oidc.bearer-issuer-resolver.token.allow-jwt-introspection=false\n+%issuer-based-resolver.quarkus.oidc.bearer-issuer-resolver-a.auth-server-url=http://localhost:8185/auth/realms/quarkus2\n+%issuer-based-resolver.quarkus.oidc.bearer-issuer-resolver-a.client-id=quarkus-app\n+%issuer-based-resolver.quarkus.oidc.bearer-issuer-resolver-a.token.required-claims.client-name=a\n+%issuer-based-resolver.quarkus.oidc.bearer-issuer-resolver-a.credentials.secret=secret\n+%issuer-based-resolver.quarkus.oidc.bearer-issuer-resolver-a.token.audience=https://correct-issuer.edu\n+%issuer-based-resolver.quarkus.oidc.bearer-issuer-resolver-a.token.allow-jwt-introspection=false\n+%issuer-based-resolver.quarkus.oidc.bearer-issuer-resolver-b.auth-server-url=http://localhost:8185/auth/realms/quarkus2\n+%issuer-based-resolver.quarkus.oidc.bearer-issuer-resolver-b.client-id=quarkus-app\n+%issuer-based-resolver.quarkus.oidc.bearer-issuer-resolver-b.token.required-claims.client-name=b\n+%issuer-based-resolver.quarkus.oidc.bearer-issuer-resolver-b.credentials.secret=secret\n+%issuer-based-resolver.quarkus.oidc.bearer-issuer-resolver-b.token.audience=https://correct-issuer.edu\n+%issuer-based-resolver.quarkus.oidc.bearer-issuer-resolver-b.token.allow-jwt-introspection=false\n %issuer-based-resolver.quarkus.oidc.resolve-tenants-with-issuer=true\n\ndiff --git a/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/StaticTenantIssuerResolverTest.java b/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/StaticTenantIssuerResolverTest.java\nindex 89c3365b7b944..765ed968b1a5a 100644\n--- a/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/StaticTenantIssuerResolverTest.java\n+++ b/integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/StaticTenantIssuerResolverTest.java\n@@ -22,17 +22,19 @@ public void testOidcServerUnavailableOnAppStartup() {\n         server.start();\n         try {\n             // 500 because default tenant has unavailable OIDC server (otherwise it assumes our issuer)\n-            requestAdminRoles(\"https://wrong-issuer.edu\").statusCode(500);\n+            requestAdminRoles(\"https://wrong-issuer.edu\", \"a\").statusCode(500);\n \n-            requestAdminRoles(\"https://correct-issuer.edu\").statusCode(200)\n-                    .body(Matchers.is(\"static.tenant.id=bearer-issuer-resolver\"));\n+            requestAdminRoles(\"https://correct-issuer.edu\", \"a\").statusCode(200)\n+                    .body(Matchers.is(\"static.tenant.id=bearer-issuer-resolver-a\"));\n+            requestAdminRoles(\"https://correct-issuer.edu\", \"b\").statusCode(200)\n+                    .body(Matchers.is(\"static.tenant.id=bearer-issuer-resolver-b\"));\n         } finally {\n             server.stop();\n         }\n     }\n \n-    private static ValidatableResponse requestAdminRoles(String issuer) {\n-        return RestAssured.given().auth().oauth2(getAdminTokenWithRole(issuer))\n+    private static ValidatableResponse requestAdminRoles(String issuer, String clientName) {\n+        return RestAssured.given().auth().oauth2(getAdminTokenWithRole(issuer, clientName))\n                 .when().get(\"/api/admin/bearer-issuer-resolver/issuer\").then();\n     }\n \n@@ -43,11 +45,12 @@ public String getConfigProfile() {\n         }\n     }\n \n-    private static String getAdminTokenWithRole(String issuer) {\n+    private static String getAdminTokenWithRole(String issuer, String clientName) {\n         return Jwt.preferredUserName(\"alice\")\n                 .groups(Set.of(\"admin\"))\n                 .issuer(issuer)\n                 .audience(issuer)\n+                .claim(\"client-name\", clientName)\n                 .jws()\n                 .keyId(\"1\")\n                 .sign(\"privateKey.jwk\");\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46632",
    "pr_id": 46632,
    "issue_id": 46430,
    "repo": "quarkusio/quarkus",
    "problem_statement": "ResponseBuilderImpl NumberFormatException with IPv6\n### Describe the bug\n\nRelated to #39041 - there's a NumberFormatException with org.jboss.resteasy.reactive.server.jaxrs.ResponseBuilderImpl.location if an IPv6 URI is supplied that is using a default port.\n\nSee https://github.com/keycloak/keycloak/discussions/37488\n\n### Expected behavior\n\nLocation is set correctly.\n\n### Actual behavior\n\nNumberFormatException\n\n```\nava.lang.NumberFormatException: For input string: \"1b60]\"\nat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\nat java.base/java.lang.Integer.parseInt(Integer.java:665)\nat java.base/java.lang.Integer.parseInt(Integer.java:781)\nat org.jboss.resteasy.reactive.server.jaxrs.ResponseBuilderImpl.location(ResponseBuilderImpl.java:33)\nat org.keycloak.protocol.oidc.utils.OIDCRedirectUriBuilder$QueryRedirectUriBuilder.build(OIDCRedirectUriBuilder.java:92)\nat org.keycloak.protocol.oidc.OIDCLoginProtocol.buildRedirectUri(OIDCLoginProtocol.java:318)\nat org.keycloak.protocol.oidc.OIDCLoginProtocol.authenticated(OIDCLoginProtocol.java:305)\nat org.keycloak.services.managers.AuthenticationManager.redirectAfterSuccessfulFlow(AuthenticationManager.java:933)\nat org.keycloak.services.managers.AuthenticationManager.redirectAfterSuccessfulFlow(AuthenticationManager.java:881)\nat org.keycloak.services.managers.AuthenticationManager.finishedRequiredActions(AuthenticationManager.java:1042)\nat org.keycloak.authentication.AuthenticationProcessor.authenticationComplete(AuthenticationProcessor.java:1180)\nat org.keycloak.authentication.AuthenticationProcessor.authenticationAction(AuthenticationProcessor.java:1042)\nat org.keycloak.services.resources.LoginActionsService.processFlow(LoginActionsService.java:378)\nat org.keycloak.services.resources.LoginActionsService.processAuthentication(LoginActionsService.java:349)\nat org.keycloak.services.resources.LoginActionsService.authenticate(LoginActionsService.java:341)\nat org.keycloak.services.resources.LoginActionsService.authenticateForm(LoginActionsService.java:407)\nat org.keycloak.services.resources.LoginActionsService$quarkusrestinvoker$authenticateForm_13d428b70e62601585246c086a52f40868a3208e.invoke(Unknown Source)\nat org.jboss.resteasy.reactive.server.handlers.InvocationHandler.handle(InvocationHandler.java:29)\nat io.quarkus.resteasy.reactive.server.runtime.QuarkusResteasyReactiveRequestContext.invokeHandler(QuarkusResteasyReactiveRequestContext.java:141)\nat org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext.run(AbstractResteasyReactiveContext.java:147)\nat io.quarkus.vertx.core.runtime.VertxCoreRecorder$14.runWith(VertxCoreRecorder.java:635)\nat org.jboss.threads.EnhancedQueueExecutor$Task.doRunWith(EnhancedQueueExecutor.java:2516)\nat org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2495)\nat org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1521)\nat org.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:11)\nat org.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:11)\nat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\nat java.base/java.lang.Thread.run(Thread.java:1623)\n```\n\n### How to Reproduce?\n\n// when the CurrentRequest.serverRequest().serverRequest() is a ipv6 address without a port, e.g. [0:0:0:0:0:0:0:1]\n// use a non-absolute location\nResponseBuilderImpl.ok().location(URI.create(\"//host\"));\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### Quarkus version or git rev\n\n_No response_\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
    "issue_word_count": 421,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/jaxrs/ResponseBuilderImpl.java",
      "independent-projects/resteasy-reactive/server/runtime/src/test/java/org/jboss/resteasy/reactive/server/jaxrs/ResponseBuilderImplTest.java"
    ],
    "pr_changed_test_files": [
      "independent-projects/resteasy-reactive/server/runtime/src/test/java/org/jboss/resteasy/reactive/server/jaxrs/ResponseBuilderImplTest.java"
    ],
    "base_commit": "36bd9d67d73a828fda16e71d4dbc103ea958bda3",
    "head_commit": "1e588842525eeeddb5aca90a8496d83bedb300ca",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46632",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46632",
    "dockerfile": "",
    "pr_merged_at": "2025-03-10T09:32:17.000Z",
    "patch": "diff --git a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/jaxrs/ResponseBuilderImpl.java b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/jaxrs/ResponseBuilderImpl.java\nindex 7b04ab947a610..cc2a072fa20fb 100644\n--- a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/jaxrs/ResponseBuilderImpl.java\n+++ b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/jaxrs/ResponseBuilderImpl.java\n@@ -29,7 +29,7 @@ public Response.ResponseBuilder location(URI location) {\n                     String host = req.getRequestHost();\n                     int port = -1;\n                     int index = host.lastIndexOf(\":\");\n-                    if (index > -1) {\n+                    if (index > -1 && (host.charAt(0) != '[' || index > host.lastIndexOf(\"]\"))) {\n                         port = Integer.parseInt(host.substring(index + 1));\n                         host = host.substring(0, index);\n                     }\n@@ -70,7 +70,7 @@ public Response.ResponseBuilder contentLocation(URI location) {\n                     String host = req.getRequestHost();\n                     int port = -1;\n                     int index = host.lastIndexOf(\":\");\n-                    if (index > -1) {\n+                    if (index > -1 && (host.charAt(0) != '[' || index > host.lastIndexOf(\"]\"))) {\n                         port = Integer.parseInt(host.substring(index + 1));\n                         host = host.substring(0, index);\n                     }\n",
    "test_patch": "diff --git a/independent-projects/resteasy-reactive/server/runtime/src/test/java/org/jboss/resteasy/reactive/server/jaxrs/ResponseBuilderImplTest.java b/independent-projects/resteasy-reactive/server/runtime/src/test/java/org/jboss/resteasy/reactive/server/jaxrs/ResponseBuilderImplTest.java\nnew file mode 100644\nindex 0000000000000..fb8360c27e552\n--- /dev/null\n+++ b/independent-projects/resteasy-reactive/server/runtime/src/test/java/org/jboss/resteasy/reactive/server/jaxrs/ResponseBuilderImplTest.java\n@@ -0,0 +1,29 @@\n+package org.jboss.resteasy.reactive.server.jaxrs;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.net.URI;\n+\n+import jakarta.ws.rs.core.HttpHeaders;\n+\n+import org.jboss.resteasy.reactive.server.core.CurrentRequestManager;\n+import org.jboss.resteasy.reactive.server.core.ResteasyReactiveRequestContext;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+public class ResponseBuilderImplTest {\n+\n+    @Test\n+    public void shouldBuildWithNonAbsoulteLocationAndIPv6Address() {\n+        var context = Mockito.mock(ResteasyReactiveRequestContext.class, Mockito.RETURNS_DEEP_STUBS);\n+        Mockito.when(context.serverRequest().getRequestHost()).thenReturn(\"[0:0:0:0:0:0:0:1]\");\n+        Mockito.when(context.getDeployment().getPrefix()).thenReturn(\"/prefix\");\n+        CurrentRequestManager.set(context);\n+        var response = ResponseBuilderImpl.ok().location(URI.create(\"/host\")).build();\n+        assertEquals(\"//[0:0:0:0:0:0:0:1]/prefix/host\", response.getLocation().toString());\n+\n+        response = ResponseBuilderImpl.ok().contentLocation(URI.create(\"/host\")).build();\n+        assertEquals(\"//[0:0:0:0:0:0:0:1]/host\", response.getHeaders().getFirst(HttpHeaders.CONTENT_LOCATION).toString());\n+    }\n+\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46594",
    "pr_id": 46594,
    "issue_id": 45631,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Improve JaxrsClientReactiveProcessor.setupClientProxies performance\n### Description\n\nIn my real world application, I noticed that io.quarkus.jaxrs.client.reactive.deployment.JaxrsClientReactiveProcessor.setupClientProxies takes about 10% of my hot reload time. (about 500ms).\n\n![Image](https://github.com/user-attachments/assets/e10027e9-0885-4a75-b5c1-9603e2425851)\n\nHowever, in that project I do not have any subresources, which seem to take most of the time.. or so I thought.\n\nAfter a bit of debugging, I figured out that the keycloak-admin-rest-client uses sub resources.\n\nI created a small reproducer project: \n\n[kc-sub-slow.zip](https://github.com/user-attachments/files/18434566/kc-sub-slow.zip)\n\nWith the quarkus-keycloak-admin-rest-client dependency, hot reload takes about 850ms.\nWithout only about 450ms.\n\n\nAnything that can be done here to improve this?\n\nJFR recording of the reproducer (first startup + one hot reload). rename .zip to .jfr: [repro-startup-and-hotreload.zip](https://github.com/user-attachments/files/18434603/repro-startup-and-hotreload.zip)\n\n### Implementation ideas\n\n_No response_",
    "issue_word_count": 164,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java",
      "extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/subresource/SubResourceNoDuplicateClassGenerationTest.java"
    ],
    "pr_changed_test_files": [
      "extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/subresource/SubResourceNoDuplicateClassGenerationTest.java"
    ],
    "base_commit": "95c58a856c6461304d3be100aa056d5756a27a1d",
    "head_commit": "d2e1d82321e16c92ff05e31c572bb993352a38a8",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46594",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46594",
    "dockerfile": "",
    "pr_merged_at": "2025-03-10T06:48:21.000Z",
    "patch": "diff --git a/extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java b/extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java\nindex 9902e15797995..42f46bebc31c4 100644\n--- a/extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java\n+++ b/extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java\n@@ -407,6 +407,7 @@ public void accept(EndpointIndexer.ResourceMethodCallbackEntry entry) {\n             }\n         }\n \n+        Map<GeneratedSubResourceKey, String> generatedSubResources = new HashMap<>();\n         for (Map.Entry<DotName, String> i : result.getClientInterfaces().entrySet()) {\n             ClassInfo clazz = index.getClassByName(i.getKey());\n             //these interfaces can also be clients\n@@ -420,7 +421,8 @@ public void accept(EndpointIndexer.ResourceMethodCallbackEntry entry) {\n                     RuntimeValue<BiFunction<WebTarget, List<ParamConverterProvider>, ?>> proxyProvider = generateClientInvoker(\n                             recorderContext, clientProxy,\n                             enricherBuildItems, generatedClassBuildItemBuildProducer, clazz, index, defaultConsumesType,\n-                            result.getHttpAnnotationToMethod(), observabilityIntegrationNeeded, multipartResponseTypes);\n+                            result.getHttpAnnotationToMethod(), observabilityIntegrationNeeded, multipartResponseTypes,\n+                            generatedSubResources);\n                     if (proxyProvider != null) {\n                         clientImplementations.put(clientProxy.getClassName(), proxyProvider);\n                     }\n@@ -846,7 +848,8 @@ A more full example of generated client (with sub-resource) can is at the bottom\n             RestClientInterface restClientInterface, List<JaxrsClientReactiveEnricherBuildItem> enrichers,\n             BuildProducer<GeneratedClassBuildItem> generatedClasses, ClassInfo interfaceClass,\n             IndexView index, String defaultMediaType, Map<DotName, String> httpAnnotationToMethod,\n-            boolean observabilityIntegrationNeeded, Set<ClassInfo> multipartResponseTypes) {\n+            boolean observabilityIntegrationNeeded, Set<ClassInfo> multipartResponseTypes,\n+            Map<GeneratedSubResourceKey, String> generatedSubResources) {\n \n         String creatorName = restClientInterface.getClassName() + \"$$QuarkusRestClientInterfaceCreator\";\n         String name = restClientInterface.getClassName() + \"$$QuarkusRestClientInterface\";\n@@ -926,7 +929,8 @@ A more full example of generated client (with sub-resource) can is at the bottom\n                 if (method.getHttpMethod() == null) {\n                     handleSubResourceMethod(enrichers, generatedClasses, interfaceClass, index, defaultMediaType,\n                             httpAnnotationToMethod, name, classContext, baseTarget, methodIndex, method,\n-                            javaMethodParameters, jandexMethod, multipartResponseTypes, Collections.emptyList());\n+                            javaMethodParameters, jandexMethod, multipartResponseTypes, Collections.emptyList(),\n+                            generatedSubResources);\n                 } else {\n                     FieldDescriptor methodField = classContext.createJavaMethodField(interfaceClass, jandexMethod,\n                             methodIndex);\n@@ -1394,7 +1398,8 @@ private void handleSubResourceMethod(List<JaxrsClientReactiveEnricherBuildItem>\n             String defaultMediaType, Map<DotName, String> httpAnnotationToMethod, String name,\n             ClassRestClientContext ownerContext, ResultHandle ownerTarget, int methodIndex,\n             ResourceMethod method, String[] javaMethodParameters, MethodInfo jandexMethod,\n-            Set<ClassInfo> multipartResponseTypes, List<SubResourceParameter> ownerSubResourceParameters) {\n+            Set<ClassInfo> multipartResponseTypes, List<SubResourceParameter> ownerSubResourceParameters,\n+            Map<GeneratedSubResourceKey, String> generatedSubResources) {\n         Type returnType = jandexMethod.returnType();\n         if (returnType.kind() != CLASS) {\n             // sort of sub-resource method that returns a thing that isn't a class\n@@ -1412,12 +1417,34 @@ private void handleSubResourceMethod(List<JaxrsClientReactiveEnricherBuildItem>\n \n         ownerContext.createJavaMethodField(interfaceClass, jandexMethod, methodIndex);\n \n-        // generate implementation for a method that returns the sub-client:\n-        MethodCreator ownerMethod = ownerContext.classCreator.getMethodCreator(method.getName(), method.getSimpleReturnType(),\n-                javaMethodParameters);\n+        List<SubResourceMethodParameterKeyPart> ownerSubResourceMethodParameters = new ArrayList<>();\n+        for (SubResourceParameter ownerSubResourceParameter : ownerSubResourceParameters) {\n+            ownerSubResourceMethodParameters.add(SubResourceMethodParameterKeyPart.of(ownerSubResourceParameter));\n+        }\n+\n+        // method parameters (except path parameters) are rewritten to sub client fields (directly, public fields):\n+        List<SubResourceMethodParameterKeyPart> subResourceMethodParameters = new ArrayList<>();\n+        MethodParameter[] parameters = method.getParameters();\n+        for (int i = 0; i < parameters.length; i++) {\n+            MethodParameter parameter = parameters[i];\n+            if (parameter.parameterType != ParameterType.PATH) {\n+                subResourceMethodParameters.add(new SubResourceMethodParameterKeyPart(parameter, i));\n+            }\n+        }\n+\n+        GeneratedSubResourceKey key = new GeneratedSubResourceKey(returnType, ownerSubResourceMethodParameters,\n+                subResourceMethodParameters);\n \n-        String subName = subInterface.name().toString() + HashUtil.sha1(name) + methodIndex;\n+        // generate implementation for a method that returns the sub-client:\n+        String subName = generatedSubResources.get(key);\n+        if (subName != null) {\n+            generateSubResourceLocatorOwnerMethod(name, ownerContext, ownerTarget, methodIndex, method, javaMethodParameters,\n+                    ownerSubResourceParameters, subInterface, subName);\n+            return;\n+        }\n+        subName = subInterface.name().toString() + HashUtil.sha1(name) + methodIndex;\n         MethodDescriptor subConstructorDescriptor = MethodDescriptor.ofConstructor(subName, WebTargetImpl.class.getName());\n+\n         try (ClassRestClientContext subContext = new ClassRestClientContext(subName, subConstructorDescriptor,\n                 generatedClasses, Object.class, subInterface.name().toString())) {\n \n@@ -1428,60 +1455,18 @@ private void handleSubResourceMethod(List<JaxrsClientReactiveEnricherBuildItem>\n                     method);\n \n             boolean encodingEnabled = true;\n-\n-            FieldDescriptor forMethodTargetDesc = ownerContext.classCreator\n-                    .getFieldCreator(\"targetInOwner\" + methodIndex, WebTargetImpl.class).getFieldDescriptor();\n             if (subInterface.hasDeclaredAnnotation(ENCODED)) {\n                 ownerContext.constructor.assign(constructorTarget,\n                         disableEncodingForWebTarget(ownerContext.constructor, constructorTarget));\n                 encodingEnabled = false;\n             }\n \n-            ownerContext.constructor.writeInstanceField(forMethodTargetDesc, ownerContext.constructor.getThis(),\n-                    constructorTarget);\n-\n             Supplier<FieldDescriptor> methodParamAnnotationsField = ownerContext.getLazyJavaMethodParamAnnotationsField(\n                     methodIndex);\n             Supplier<FieldDescriptor> methodGenericParametersField = ownerContext.getLazyJavaMethodGenericParametersField(\n                     methodIndex);\n \n-            AssignableResultHandle client = createRestClientField(name, ownerContext.classCreator, ownerMethod);\n-            AssignableResultHandle webTarget = ownerMethod.createVariable(WebTarget.class);\n-            ownerMethod.assign(webTarget, ownerMethod.readInstanceField(forMethodTargetDesc, ownerMethod.getThis()));\n-\n-            if (encodingEnabled && method.isEncoded()) {\n-                ownerMethod.assign(webTarget, disableEncodingForWebTarget(ownerMethod, webTarget));\n-            }\n-\n-            // Setup Path param from current method\n-            boolean lastEncodingEnabledByParam = true;\n-            for (int i = 0; i < method.getParameters().length; i++) {\n-                MethodParameter param = method.getParameters()[i];\n-                if (encodingEnabled && !method.isEncoded()) {\n-                    boolean needsDisabling = isParamAlreadyEncoded(param);\n-                    if (lastEncodingEnabledByParam && needsDisabling) {\n-                        ownerMethod.assign(webTarget, disableEncodingForWebTarget(ownerMethod, webTarget));\n-                        lastEncodingEnabledByParam = false;\n-                    } else if (!lastEncodingEnabledByParam && !needsDisabling) {\n-                        ownerMethod.assign(webTarget, enableEncodingForWebTarget(ownerMethod, webTarget));\n-                        lastEncodingEnabledByParam = true;\n-                    }\n-                }\n-\n-                if (param.parameterType == ParameterType.PATH) {\n-                    ResultHandle paramValue = ownerMethod.getMethodParam(i);\n-                    // methodTarget = methodTarget.resolveTemplate(paramname, paramvalue);\n-                    addPathParam(ownerMethod, webTarget, param.name, paramValue,\n-                            param.type,\n-                            client,\n-                            getGenericTypeFromArray(ownerMethod, methodGenericParametersField, i),\n-                            getAnnotationsFromArray(ownerMethod, methodParamAnnotationsField, i));\n-                }\n-            }\n-\n             // Continue creating the subresource instance with the web target updated\n-            ResultHandle subInstance = ownerMethod.newInstance(subConstructorDescriptor, webTarget);\n-\n             List<SubResourceParameter> subParamFields = new ArrayList<>();\n \n             for (SubResourceParameter ownerParameter : ownerSubResourceParameters) {\n@@ -1489,8 +1474,6 @@ private void handleSubResourceMethod(List<JaxrsClientReactiveEnricherBuildItem>\n                         ownerParameter.typeName)\n                         .setModifiers(Modifier.PUBLIC)\n                         .getFieldDescriptor();\n-                ownerMethod.writeInstanceField(paramField, subInstance,\n-                        ownerMethod.readInstanceField(ownerParameter.field, ownerMethod.getThis()));\n                 subParamFields.add(new SubResourceParameter(ownerParameter.methodParameter, ownerParameter.typeName,\n                         ownerParameter.type, paramField, ownerParameter.paramAnnotationsField,\n                         ownerParameter.genericsParametersField,\n@@ -1500,7 +1483,6 @@ private void handleSubResourceMethod(List<JaxrsClientReactiveEnricherBuildItem>\n             FieldDescriptor clientField = subContext.classCreator.getFieldCreator(\"client\", RestClientBase.class)\n                     .setModifiers(Modifier.PUBLIC)\n                     .getFieldDescriptor();\n-            ownerMethod.writeInstanceField(clientField, subInstance, client);\n             // method parameters (except path parameters) are rewritten to sub client fields (directly, public fields):\n             for (int i = 0; i < method.getParameters().length; i++) {\n                 MethodParameter param = method.getParameters()[i];\n@@ -1508,13 +1490,11 @@ private void handleSubResourceMethod(List<JaxrsClientReactiveEnricherBuildItem>\n                     FieldDescriptor paramField = subContext.classCreator.getFieldCreator(\"param\" + i, param.type)\n                             .setModifiers(Modifier.PUBLIC)\n                             .getFieldDescriptor();\n-                    ownerMethod.writeInstanceField(paramField, subInstance, ownerMethod.getMethodParam(i));\n                     subParamFields.add(new SubResourceParameter(method.getParameters()[i], param.type,\n                             jandexMethod.parameterType(i), paramField, methodParamAnnotationsField,\n                             methodGenericParametersField,\n                             i));\n                 }\n-\n             }\n \n             int subMethodIndex = 0;\n@@ -1623,7 +1603,8 @@ private void handleSubResourceMethod(List<JaxrsClientReactiveEnricherBuildItem>\n                             AssignableResultHandle invocationBuilderRef = handleBeanParamMethod\n                                     .createVariable(Invocation.Builder.class);\n                             handleBeanParamMethod.assign(invocationBuilderRef, handleBeanParamMethod.getMethodParam(0));\n-                            formParams = addBeanParamData(jandexMethod, methodIndex, subMethodCreator, handleBeanParamMethod,\n+                            formParams = addBeanParamData(jandexMethod, methodIndex, subMethodCreator,\n+                                    handleBeanParamMethod,\n                                     invocationBuilderRef, subContext, beanParam.getItems(),\n                                     paramValue, methodTarget, index,\n                                     interfaceClass.name().toString(),\n@@ -1750,7 +1731,8 @@ private void handleSubResourceMethod(List<JaxrsClientReactiveEnricherBuildItem>\n                             AssignableResultHandle invocationBuilderRef = handleBeanParamMethod\n                                     .createVariable(Invocation.Builder.class);\n                             handleBeanParamMethod.assign(invocationBuilderRef, handleBeanParamMethod.getMethodParam(0));\n-                            formParams = addBeanParamData(jandexMethod, methodIndex, subMethodCreator, handleBeanParamMethod,\n+                            formParams = addBeanParamData(jandexMethod, methodIndex, subMethodCreator,\n+                                    handleBeanParamMethod,\n                                     invocationBuilderRef, subContext, beanParam.getItems(),\n                                     subMethodCreator.getMethodParam(paramIdx), methodTarget, index,\n                                     interfaceClass.name().toString(),\n@@ -1790,7 +1772,8 @@ private void handleSubResourceMethod(List<JaxrsClientReactiveEnricherBuildItem>\n                                     getGenericTypeFromArray(handleHeaderMethod, subMethodGenericParametersField, paramIdx),\n                                     getAnnotationsFromArray(handleHeaderMethod, subMethodParamAnnotationsField, paramIdx));\n                             handleHeaderMethod.returnValue(invocationBuilderRef);\n-                            invocationBuilderEnrichers.put(handleHeaderDescriptor, subMethodCreator.getMethodParam(paramIdx));\n+                            invocationBuilderEnrichers.put(handleHeaderDescriptor,\n+                                    subMethodCreator.getMethodParam(paramIdx));\n                         } else if (param.parameterType == ParameterType.COOKIE) {\n                             // cookies are added at the invocation builder level\n                             MethodDescriptor handleCookieDescriptor = MethodDescriptor.ofMethod(subName,\n@@ -1810,7 +1793,8 @@ private void handleSubResourceMethod(List<JaxrsClientReactiveEnricherBuildItem>\n                                     getGenericTypeFromArray(handleCookieMethod, subMethodGenericParametersField, paramIdx),\n                                     getAnnotationsFromArray(handleCookieMethod, subMethodParamAnnotationsField, paramIdx));\n                             handleCookieMethod.returnValue(invocationBuilderRef);\n-                            invocationBuilderEnrichers.put(handleCookieDescriptor, subMethodCreator.getMethodParam(paramIdx));\n+                            invocationBuilderEnrichers.put(handleCookieDescriptor,\n+                                    subMethodCreator.getMethodParam(paramIdx));\n                         } else if (param.parameterType == ParameterType.FORM) {\n                             formParams = createFormDataIfAbsent(subMethodCreator, formParams, multipart);\n                             // FIXME: this is weird, it doesn't go via converter nor multipart, looks like a bug\n@@ -1883,16 +1867,103 @@ private void handleSubResourceMethod(List<JaxrsClientReactiveEnricherBuildItem>\n                     handleSubResourceMethod(enrichers, generatedClasses, subInterface, index,\n                             defaultMediaType, httpAnnotationToMethod, subName, subContext, subMethodTarget,\n                             subMethodIndex, subMethod, subJavaMethodParameters, jandexSubMethod,\n-                            multipartResponseTypes, subParamFields);\n+                            multipartResponseTypes, subParamFields, generatedSubResources);\n                 }\n \n             }\n \n             subContext.constructor.returnValue(null);\n             subContext.clinit.returnValue(null);\n+        }\n+\n+        generatedSubResources.put(key, subName);\n+        generateSubResourceLocatorOwnerMethod(name, ownerContext, ownerTarget, methodIndex, method, javaMethodParameters,\n+                ownerSubResourceParameters, subInterface, subName);\n+    }\n+\n+    private void generateSubResourceLocatorOwnerMethod(String name, ClassRestClientContext ownerContext,\n+            ResultHandle ownerTarget, int methodIndex, ResourceMethod method, String[] javaMethodParameters,\n+            List<SubResourceParameter> ownerSubResourceParameters, ClassInfo subInterface, String subName) {\n+        MethodCreator ownerMethod = ownerContext.classCreator.getMethodCreator(method.getName(),\n+                method.getSimpleReturnType(),\n+                javaMethodParameters);\n+\n+        AssignableResultHandle constructorTarget = createWebTargetForMethod(ownerContext.constructor, ownerTarget,\n+                method);\n+        boolean encodingEnabled = true;\n+        if (subInterface.hasDeclaredAnnotation(ENCODED)) {\n+            ownerContext.constructor.assign(constructorTarget,\n+                    disableEncodingForWebTarget(ownerContext.constructor, constructorTarget));\n+            encodingEnabled = false;\n+        }\n+        FieldDescriptor forMethodTargetDesc = ownerContext.classCreator\n+                .getFieldCreator(\"targetInOwner\" + methodIndex, WebTargetImpl.class).getFieldDescriptor();\n+        ownerContext.constructor.writeInstanceField(forMethodTargetDesc, ownerContext.constructor.getThis(),\n+                constructorTarget);\n+\n+        Supplier<FieldDescriptor> methodParamAnnotationsField = ownerContext.getLazyJavaMethodParamAnnotationsField(\n+                methodIndex);\n+        Supplier<FieldDescriptor> methodGenericParametersField = ownerContext.getLazyJavaMethodGenericParametersField(\n+                methodIndex);\n+\n+        AssignableResultHandle client = createRestClientField(name, ownerContext.classCreator, ownerMethod);\n+        AssignableResultHandle webTarget = ownerMethod.createVariable(WebTarget.class);\n+        ownerMethod.assign(webTarget, ownerMethod.readInstanceField(forMethodTargetDesc, ownerMethod.getThis()));\n+\n+        if (encodingEnabled && method.isEncoded()) {\n+            ownerMethod.assign(webTarget, disableEncodingForWebTarget(ownerMethod, webTarget));\n+        }\n+\n+        // Setup Path param from current method\n+        boolean lastEncodingEnabledByParam = true;\n+        for (int i = 0; i < method.getParameters().length; i++) {\n+            MethodParameter param = method.getParameters()[i];\n+            if (encodingEnabled && !method.isEncoded()) {\n+                boolean needsDisabling = isParamAlreadyEncoded(param);\n+                if (lastEncodingEnabledByParam && needsDisabling) {\n+                    ownerMethod.assign(webTarget, disableEncodingForWebTarget(ownerMethod, webTarget));\n+                    lastEncodingEnabledByParam = false;\n+                } else if (!lastEncodingEnabledByParam && !needsDisabling) {\n+                    ownerMethod.assign(webTarget, enableEncodingForWebTarget(ownerMethod, webTarget));\n+                    lastEncodingEnabledByParam = true;\n+                }\n+            }\n+\n+            if (param.parameterType == ParameterType.PATH) {\n+                ResultHandle paramValue = ownerMethod.getMethodParam(i);\n+                // methodTarget = methodTarget.resolveTemplate(paramname, paramvalue);\n+                addPathParam(ownerMethod, webTarget, param.name, paramValue,\n+                        param.type,\n+                        client,\n+                        getGenericTypeFromArray(ownerMethod, methodGenericParametersField, i),\n+                        getAnnotationsFromArray(ownerMethod, methodParamAnnotationsField, i));\n+            }\n+        }\n+\n+        // Continue creating the subresource instance with the web target updated\n+        MethodDescriptor subConstructorDescriptor = MethodDescriptor.ofConstructor(subName, WebTargetImpl.class.getName());\n+        ResultHandle subInstance = ownerMethod.newInstance(subConstructorDescriptor, webTarget);\n \n-            ownerMethod.returnValue(subInstance);\n+        for (SubResourceParameter ownerParameter : ownerSubResourceParameters) {\n+            FieldDescriptor paramField = FieldDescriptor.of(subName, ownerParameter.field.getName() + \"$_\",\n+                    ownerParameter.typeName);\n+            ownerMethod.writeInstanceField(paramField, subInstance,\n+                    ownerMethod.readInstanceField(ownerParameter.field, ownerMethod.getThis()));\n         }\n+\n+        ownerMethod.writeInstanceField(FieldDescriptor.of(subName, \"client\", RestClientBase.class), subInstance, client);\n+\n+        // method parameters (except path parameters) are rewritten to sub client fields (directly, public fields):\n+        for (int i = 0; i < method.getParameters().length; i++) {\n+            MethodParameter param = method.getParameters()[i];\n+            if (param.parameterType != ParameterType.PATH) {\n+                FieldDescriptor paramField = FieldDescriptor.of(subName, \"param\" + i, param.type);\n+                ownerMethod.writeInstanceField(paramField, subInstance, ownerMethod.getMethodParam(i));\n+            }\n+\n+        }\n+\n+        ownerMethod.returnValue(subInstance);\n     }\n \n     private AssignableResultHandle createWebTargetForMethod(MethodCreator mc, ResultHandle baseTarget,\n@@ -3230,4 +3301,14 @@ private SubResourceParameter(MethodParameter methodParameter, String typeName, T\n         }\n     }\n \n+    private record GeneratedSubResourceKey(Type returnType,\n+            List<SubResourceMethodParameterKeyPart> ownerSubResourceMethodParameters,\n+            List<SubResourceMethodParameterKeyPart> subResourceMethodParameters) {\n+    }\n+\n+    private record SubResourceMethodParameterKeyPart(MethodParameter methodParameter, int paramIndex) {\n+        static SubResourceMethodParameterKeyPart of(SubResourceParameter subResourceParameter) {\n+            return new SubResourceMethodParameterKeyPart(subResourceParameter.methodParameter, subResourceParameter.paramIndex);\n+        }\n+    }\n }\n",
    "test_patch": "diff --git a/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/subresource/SubResourceNoDuplicateClassGenerationTest.java b/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/subresource/SubResourceNoDuplicateClassGenerationTest.java\nnew file mode 100644\nindex 0000000000000..ebbb41efd5a95\n--- /dev/null\n+++ b/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/subresource/SubResourceNoDuplicateClassGenerationTest.java\n@@ -0,0 +1,122 @@\n+package io.quarkus.rest.client.reactive.subresource;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasEntry;\n+import static org.hamcrest.Matchers.hasSize;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+\n+import org.jboss.resteasy.reactive.RestPath;\n+import org.jboss.resteasy.reactive.RestQuery;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.builder.BuildChainBuilder;\n+import io.quarkus.builder.BuildContext;\n+import io.quarkus.builder.BuildStep;\n+import io.quarkus.deployment.builditem.GeneratedClassBuildItem;\n+import io.quarkus.deployment.builditem.PreloadClassBuildItem;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class SubResourceNoDuplicateClassGenerationTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest TEST = new QuarkusUnitTest()\n+            .withApplicationRoot((jar) -> jar\n+                    .addClass(StoreResourceClientV2.class)\n+                    .addClass(StoreResourceClient.class)\n+                    .addClass(OrderResourceClient.class)\n+                    .addClass(PositionResourceClient.class))\n+            .addBuildChainCustomizer(new Consumer<BuildChainBuilder>() {\n+                @Override\n+                public void accept(BuildChainBuilder buildChainBuilder) {\n+                    buildChainBuilder.addBuildStep(new BuildStep() {\n+                        @Override\n+                        public void execute(BuildContext context) {\n+                            Map<Class<?>, List<String>> genClientsForInterface = new HashMap<>();\n+                            List<GeneratedClassBuildItem> generatedClassBuildItems = context\n+                                    .consumeMulti(GeneratedClassBuildItem.class);\n+                            for (GeneratedClassBuildItem generatedClassBuildItem : generatedClassBuildItems) {\n+                                Class<?> key = null;\n+                                if (generatedClassBuildItem.binaryName().contains(StoreResourceClientV2.class.getName())) {\n+                                    key = StoreResourceClientV2.class;\n+                                } else if (generatedClassBuildItem.binaryName().contains(StoreResourceClient.class.getName())) {\n+                                    key = StoreResourceClient.class;\n+                                } else if (generatedClassBuildItem.binaryName().contains(OrderResourceClient.class.getName())) {\n+                                    key = OrderResourceClient.class;\n+                                } else if (generatedClassBuildItem.binaryName()\n+                                        .contains(PositionResourceClient.class.getName())) {\n+                                    key = PositionResourceClient.class;\n+                                }\n+                                if (key != null) {\n+                                    // List<classname> instead of a simple count to simplify test debugging\n+                                    genClientsForInterface.computeIfAbsent(key, ignored -> new ArrayList<>())\n+                                            .add(generatedClassBuildItem.binaryName());\n+                                }\n+\n+                            }\n+\n+                            // Each store resource includes the order resource with different query params\n+                            // meaning different sub resources impls need to be generated\n+\n+                            // For PositionResourceClient, only 4 as well. Because\n+                            // StoreResourceClient -> OrderResourceClient -> PositionResourceClient\n+                            // and OrderResourceClient -> PositionResourceClient\n+                            // share the same set of not path parameters\n+\n+                            // invoker + client\n+                            assertThat(genClientsForInterface, hasEntry(equalTo(StoreResourceClientV2.class), hasSize(2)));\n+                            // invoker + client\n+                            assertThat(genClientsForInterface, hasEntry(equalTo(StoreResourceClient.class), hasSize(2)));\n+                            // invoker + client + 2 (1 for each store resource)\n+                            assertThat(genClientsForInterface, hasEntry(equalTo(OrderResourceClient.class), hasSize(4)));\n+                            // invoker + client + 2 (1 for each store resource)\n+                            assertThat(genClientsForInterface, hasEntry(equalTo(PositionResourceClient.class), hasSize(4)));\n+                        }\n+                        // just claim to produce PreloadClassBuildItem to get this build step to run\n+                    }).consumes(GeneratedClassBuildItem.class).produces(PreloadClassBuildItem.class).build();\n+                }\n+            });\n+\n+    @Test\n+    void dummy() {\n+        // test logic is in build step\n+    }\n+\n+    @Path(\"store\")\n+    public interface StoreResourceClientV2 {\n+\n+        @Path(\"orders/{orderId}\")\n+        OrderResourceClient orderResource(@RestPath String orderId);\n+    }\n+\n+    @Path(\"store\")\n+    public interface StoreResourceClient {\n+\n+        // In this fictive scenario, the Store SAAS decided to remove the customerId from the query params, and instead retrieve it using a jwt\n+        // Now image these Client interfaces are part of a store-client module provided by the saas. They could still keep this\n+        // (now deprecated) client around, as to not break client module consumers.\n+        // On the quarkus side, we need to make sure that distinct sub resources for the orderresourceclient (and its subresources) are generated\n+        // to make it possible to pass the customerId QueryParam around\n+        @Path(\"orders/{orderId}\")\n+        OrderResourceClient orderResource(@RestQuery String customerId, @RestPath String orderId);\n+    }\n+\n+    public interface OrderResourceClient {\n+        @Path(\"positions\")\n+        PositionResourceClient positionResource();\n+    }\n+\n+    public interface PositionResourceClient {\n+        @GET\n+        List<String> listAll();\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46557",
    "pr_id": 46557,
    "issue_id": 46527,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Broken archive in vaadin-webcomponent dependency\nHello, sorry, I cannot choose right template, because I am not sure where to find maintainers of the problematic dependency. So maybe you can help.\n\nThe problem is that org.mvnpm.at.mvnpm:vaadin-webcomponents:24.6.2 jar contains broken archive .more.tgz.\nUsually it doesn't matter, because I won't use it. But my cybersecurity team blocks the artifact if they cannot extract archives. And it prevents me to update Quarkus (old versions contain normal archive). So can you help with repairing vaadin-webcomponents?",
    "issue_word_count": 93,
    "test_files_count": 1,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "extensions/container-image/deployment/pom.xml",
      "extensions/container-image/deployment/src/main/resources/dev-ui/qwc-container-image-build.js",
      "extensions/container-image/runtime/pom.xml",
      "extensions/container-image/runtime/src/main/java/io/quarkus/container/image/runtime/devui/ContainerBuilderJsonRpcService.java",
      "integration-tests/container-image/maven-invoker-way/src/it/container-native-main/pom.xml"
    ],
    "pr_changed_test_files": [
      "integration-tests/container-image/maven-invoker-way/src/it/container-native-main/pom.xml"
    ],
    "base_commit": "bc14c861573a1b81bbf46119b04bdc8758d7a562",
    "head_commit": "fe18386683d7902508411df79e8bebf90e464d7b",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46557",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46557",
    "dockerfile": "",
    "pr_merged_at": "2025-02-28T14:22:04.000Z",
    "patch": "diff --git a/extensions/container-image/deployment/pom.xml b/extensions/container-image/deployment/pom.xml\nindex f39d1232f2afa..a0713daf60f17 100644\n--- a/extensions/container-image/deployment/pom.xml\n+++ b/extensions/container-image/deployment/pom.xml\n@@ -17,10 +17,6 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-core-deployment</artifactId>\n         </dependency>\n-        <dependency>\n-            <groupId>io.quarkus</groupId>\n-            <artifactId>quarkus-mutiny-deployment</artifactId>\n-        </dependency>\n         <dependency>\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-container-image-spi</artifactId>\n\ndiff --git a/extensions/container-image/deployment/src/main/resources/dev-ui/qwc-container-image-build.js b/extensions/container-image/deployment/src/main/resources/dev-ui/qwc-container-image-build.js\nindex 5ccd32fc751d6..5a1875ee9fc56 100644\n--- a/extensions/container-image/deployment/src/main/resources/dev-ui/qwc-container-image-build.js\n+++ b/extensions/container-image/deployment/src/main/resources/dev-ui/qwc-container-image-build.js\n@@ -121,13 +121,9 @@ export class QwcContainerImageBuild extends LitElement {\n         this.build_error = false;\n         this.result = \"\";\n         this.jsonRpc.build({'type': this.selected_type, 'builder': this.selected_builder})\n-            .onNext(jsonRpcResponse => {\n+            .then(jsonRpcResponse => {\n                 const msg = jsonRpcResponse.result;\n-                if (msg === \"started\") {\n-                    this.build_complete = false;\n-                    this.build_in_progress = true;\n-                    this.build_error = false;\n-                } else if (msg.includes(\"created.\")) {\n+                if (msg.includes(\"created.\")) {\n                     this.result = msg;\n                     this.build_complete = true;\n                     this.build_in_progress = false;\n\ndiff --git a/extensions/container-image/runtime/pom.xml b/extensions/container-image/runtime/pom.xml\nindex b2b22a240420a..5126d4db980b2 100644\n--- a/extensions/container-image/runtime/pom.xml\n+++ b/extensions/container-image/runtime/pom.xml\n@@ -25,10 +25,6 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-core</artifactId>\n         </dependency>\n-        <dependency>\n-            <groupId>io.quarkus</groupId>\n-            <artifactId>quarkus-mutiny</artifactId>\n-        </dependency>\n     </dependencies>\n     <build>\n         <plugins>\n\ndiff --git a/extensions/container-image/runtime/src/main/java/io/quarkus/container/image/runtime/devui/ContainerBuilderJsonRpcService.java b/extensions/container-image/runtime/src/main/java/io/quarkus/container/image/runtime/devui/ContainerBuilderJsonRpcService.java\nindex 1acc266f997ff..026e86c280ac3 100644\n--- a/extensions/container-image/runtime/src/main/java/io/quarkus/container/image/runtime/devui/ContainerBuilderJsonRpcService.java\n+++ b/extensions/container-image/runtime/src/main/java/io/quarkus/container/image/runtime/devui/ContainerBuilderJsonRpcService.java\n@@ -3,27 +3,15 @@\n import java.util.Map;\n \n import io.quarkus.dev.console.DevConsoleManager;\n-import io.smallrye.mutiny.Multi;\n-import io.smallrye.mutiny.Uni;\n-import io.smallrye.mutiny.infrastructure.Infrastructure;\n \n public class ContainerBuilderJsonRpcService {\n \n-    public Multi<String> build(String type, String builder) {\n+    public String build(String type, String builder) {\n         Map<String, String> params = Map.of(\n                 \"quarkus.container-image.builder\", builder,\n                 \"quarkus.build.package-type\", type);\n \n-        // For now, the JSON RPC are called on the event loop, but the action is blocking,\n-        // So, work around this by invoking the action on a worker thread.\n-        Multi<String> build = Uni.createFrom().item(() -> DevConsoleManager\n-                .<String> invoke(\"container-image-build-action\", params))\n-                .runSubscriptionOn(Infrastructure.getDefaultExecutor()) // It's a blocking action.\n-                .toMulti();\n-\n-        return Multi.createBy().concatenating()\n-                .streams(Multi.createFrom().item(\"started\"), build);\n-\n+        return DevConsoleManager.invoke(\"container-image-build-action\", params);\n     }\n \n }\n",
    "test_patch": "diff --git a/integration-tests/container-image/maven-invoker-way/src/it/container-native-main/pom.xml b/integration-tests/container-image/maven-invoker-way/src/it/container-native-main/pom.xml\nindex 8e7cd5ebea18e..968e216a02870 100644\n--- a/integration-tests/container-image/maven-invoker-way/src/it/container-native-main/pom.xml\n+++ b/integration-tests/container-image/maven-invoker-way/src/it/container-native-main/pom.xml\n@@ -29,6 +29,10 @@\n       <groupId>io.quarkus</groupId>\n       <artifactId>quarkus-container-image-docker</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-arc</artifactId>\n+    </dependency>\n     <dependency>\n       <groupId>io.quarkus</groupId>\n       <artifactId>quarkus-junit5</artifactId>\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46529",
    "pr_id": 46529,
    "issue_id": 46528,
    "repo": "quarkusio/quarkus",
    "problem_statement": "support var args in rest client\n### Description\n\nThis works:\n\n```\n@Path(\"objects\")\n    @GET\n    List<Map<String, Object>> objects(@QueryParam(\"id\") List<Integer> id);\n```\n\nbut\n\n```\n@Path(\"objects\")\n    @GET\n    List<Map<String, Object>> objects(@QueryParam(\"id\") int... id);\n```\n\nfails with `java.lang.ClassCastException: class [I cannot be cast to class [Ljava.lang.Object; ([I and [Ljava.lang.Object; are in module java.base of loader 'bootstrap')`\n\n### Implementation ideas\n\n_No response_",
    "issue_word_count": 67,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java",
      "extensions/resteasy-reactive/rest-client-jaxrs/runtime/src/main/java/io/quarkus/jaxrs/client/reactive/runtime/ToObjectArray.java",
      "extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/PrimitiveQueryParamsTest.java"
    ],
    "pr_changed_test_files": [
      "extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/PrimitiveQueryParamsTest.java"
    ],
    "base_commit": "1562be021feda2a92434192bd563c4a888780b23",
    "head_commit": "f1fc0bd7221a58c35a60ecbf164b006b42ca87f0",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46529",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46529",
    "dockerfile": "",
    "pr_merged_at": "2025-02-27T11:00:12.000Z",
    "patch": "diff --git a/extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java b/extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java\nindex 41528da8079c1..9902e15797995 100644\n--- a/extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java\n+++ b/extensions/resteasy-reactive/rest-client-jaxrs/deployment/src/main/java/io/quarkus/jaxrs/client/reactive/deployment/JaxrsClientReactiveProcessor.java\n@@ -2847,8 +2847,59 @@ private ResultHandle addQueryParam(MethodInfo jandexMethod, BytecodeCreator meth\n             ResultHandle paramArray;\n             String componentType = null;\n             if (type.kind() == Type.Kind.ARRAY) {\n-                componentType = type.asArrayType().constituent().name().toString();\n-                paramArray = notNullParam.checkCast(queryParamHandle, Object[].class);\n+                Type constituentType = type.asArrayType().constituent();\n+                if (constituentType.kind() == PRIMITIVE) {\n+                    PrimitiveType primitiveType = constituentType.asPrimitiveType();\n+                    if (primitiveType == PrimitiveType.BYTE) {\n+                        componentType = DotNames.BYTE.toString();\n+                        paramArray = notNullParam.invokeStaticMethod(\n+                                MethodDescriptor.ofMethod(ToObjectArray.class, \"primitiveArray\", Byte[].class, byte[].class),\n+                                queryParamHandle);\n+                    } else if (primitiveType == PrimitiveType.CHAR) {\n+                        componentType = DotNames.CHARACTER.toString();\n+                        paramArray = notNullParam.invokeStaticMethod(\n+                                MethodDescriptor.ofMethod(ToObjectArray.class, \"primitiveArray\", Character[].class,\n+                                        char[].class),\n+                                queryParamHandle);\n+                    } else if (primitiveType == PrimitiveType.DOUBLE) {\n+                        componentType = DotNames.DOUBLE.toString();\n+                        paramArray = notNullParam.invokeStaticMethod(\n+                                MethodDescriptor.ofMethod(ToObjectArray.class, \"primitiveArray\", Double[].class,\n+                                        double[].class),\n+                                queryParamHandle);\n+                    } else if (primitiveType == PrimitiveType.FLOAT) {\n+                        componentType = DotNames.FLOAT.toString();\n+                        paramArray = notNullParam.invokeStaticMethod(\n+                                MethodDescriptor.ofMethod(ToObjectArray.class, \"primitiveArray\", Float[].class, float[].class),\n+                                queryParamHandle);\n+                    } else if (primitiveType == PrimitiveType.INT) {\n+                        componentType = DotNames.INTEGER.toString();\n+                        paramArray = notNullParam.invokeStaticMethod(\n+                                MethodDescriptor.ofMethod(ToObjectArray.class, \"primitiveArray\", Integer[].class, int[].class),\n+                                queryParamHandle);\n+                    } else if (primitiveType == PrimitiveType.LONG) {\n+                        componentType = DotNames.LONG.toString();\n+                        paramArray = notNullParam.invokeStaticMethod(\n+                                MethodDescriptor.ofMethod(ToObjectArray.class, \"primitiveArray\", Long[].class, long[].class),\n+                                queryParamHandle);\n+                    } else if (primitiveType == PrimitiveType.SHORT) {\n+                        componentType = DotNames.SHORT.toString();\n+                        paramArray = notNullParam.invokeStaticMethod(\n+                                MethodDescriptor.ofMethod(ToObjectArray.class, \"primitiveArray\", Short[].class, short[].class),\n+                                queryParamHandle);\n+                    } else if (primitiveType == PrimitiveType.BOOLEAN) {\n+                        componentType = DotNames.BOOLEAN.toString();\n+                        paramArray = notNullParam.invokeStaticMethod(\n+                                MethodDescriptor.ofMethod(ToObjectArray.class, \"primitiveArray\", Boolean[].class,\n+                                        boolean[].class),\n+                                queryParamHandle);\n+                    } else {\n+                        throw new IllegalArgumentException(\"not supported yet\");\n+                    }\n+                } else {\n+                    componentType = constituentType.name().toString();\n+                    paramArray = notNullParam.checkCast(queryParamHandle, Object[].class);\n+                }\n             } else if (isCollection(type, index)) {\n                 if (type.kind() == PARAMETERIZED_TYPE) {\n                     Type paramType = type.asParameterizedType().arguments().get(0);\n\ndiff --git a/extensions/resteasy-reactive/rest-client-jaxrs/runtime/src/main/java/io/quarkus/jaxrs/client/reactive/runtime/ToObjectArray.java b/extensions/resteasy-reactive/rest-client-jaxrs/runtime/src/main/java/io/quarkus/jaxrs/client/reactive/runtime/ToObjectArray.java\nindex 4f4d2f614fbc7..303cef1dc8312 100644\n--- a/extensions/resteasy-reactive/rest-client-jaxrs/runtime/src/main/java/io/quarkus/jaxrs/client/reactive/runtime/ToObjectArray.java\n+++ b/extensions/resteasy-reactive/rest-client-jaxrs/runtime/src/main/java/io/quarkus/jaxrs/client/reactive/runtime/ToObjectArray.java\n@@ -1,7 +1,9 @@\n package io.quarkus.jaxrs.client.reactive.runtime;\n \n+import java.util.Arrays;\n import java.util.Collection;\n import java.util.Optional;\n+import java.util.function.IntFunction;\n \n /**\n  * used by query param handling mechanism, in generated code\n@@ -9,6 +11,16 @@\n @SuppressWarnings(\"unused\")\n public class ToObjectArray {\n \n+    private static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY = {};\n+    private static final Byte[] EMPTY_BYTE_OBJECT_ARRAY = {};\n+    private static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY = {};\n+    private static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY = {};\n+    private static final Float[] EMPTY_FLOAT_OBJECT_ARRAY = {};\n+    private static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY = {};\n+    private static final Long[] EMPTY_LONG_OBJECT_ARRAY = {};\n+    private static final Object[] EMPTY_OBJECT_ARRAY = {};\n+    private static final Short[] EMPTY_SHORT_OBJECT_ARRAY = {};\n+\n     public static Object[] collection(Collection<?> collection) {\n         return collection.toArray();\n     }\n@@ -18,7 +30,130 @@ public static Object[] value(Object value) {\n     }\n \n     public static Object[] optional(Optional<?> optional) {\n-        return optional.isPresent() ? new Object[] { optional.get() } : new Object[] {};\n+        return optional.isPresent() ? new Object[] { optional.get() } : EMPTY_OBJECT_ARRAY;\n+    }\n+\n+    public static Boolean[] primitiveArray(final boolean[] array) {\n+        if (array == null) {\n+            return null;\n+        }\n+        if (array.length == 0) {\n+            return EMPTY_BOOLEAN_OBJECT_ARRAY;\n+        }\n+        final Boolean[] result = new Boolean[array.length];\n+        return setAll(result, i -> array[i] ? Boolean.TRUE : Boolean.FALSE);\n+    }\n+\n+    public static Byte[] primitiveArray(final byte[] array) {\n+        if (array == null) {\n+            return null;\n+        }\n+        if (array.length == 0) {\n+            return EMPTY_BYTE_OBJECT_ARRAY;\n+        }\n+        return setAll(new Byte[array.length], new IntFunction<>() {\n+            @Override\n+            public Byte apply(int index) {\n+                return array[index];\n+            }\n+        });\n+    }\n+\n+    public static Character[] primitiveArray(final char[] array) {\n+        if (array == null) {\n+            return null;\n+        }\n+        if (array.length == 0) {\n+            return EMPTY_CHARACTER_OBJECT_ARRAY;\n+        }\n+        return setAll(new Character[array.length], new IntFunction<>() {\n+            @Override\n+            public Character apply(int index) {\n+                return array[index];\n+            }\n+        });\n+    }\n+\n+    public static Double[] primitiveArray(final double[] array) {\n+        if (array == null) {\n+            return null;\n+        }\n+        if (array.length == 0) {\n+            return EMPTY_DOUBLE_OBJECT_ARRAY;\n+        }\n+        return setAll(new Double[array.length], new IntFunction<>() {\n+            @Override\n+            public Double apply(int index) {\n+                return array[index];\n+            }\n+        });\n+    }\n+\n+    public static Float[] primitiveArray(final float[] array) {\n+        if (array == null) {\n+            return null;\n+        }\n+        if (array.length == 0) {\n+            return EMPTY_FLOAT_OBJECT_ARRAY;\n+        }\n+        return setAll(new Float[array.length], new IntFunction<>() {\n+            @Override\n+            public Float apply(int index) {\n+                return array[index];\n+            }\n+        });\n+    }\n+\n+    public static Integer[] primitiveArray(final int[] array) {\n+        if (array == null) {\n+            return null;\n+        }\n+        if (array.length == 0) {\n+            return EMPTY_INTEGER_OBJECT_ARRAY;\n+        }\n+        return setAll(new Integer[array.length], new IntFunction<>() {\n+            @Override\n+            public Integer apply(int index) {\n+                return array[index];\n+            }\n+        });\n+    }\n+\n+    public static Long[] primitiveArray(final long[] array) {\n+        if (array == null) {\n+            return null;\n+        }\n+        if (array.length == 0) {\n+            return EMPTY_LONG_OBJECT_ARRAY;\n+        }\n+        return setAll(new Long[array.length], new IntFunction<>() {\n+            @Override\n+            public Long apply(int index) {\n+                return array[index];\n+            }\n+        });\n+    }\n+\n+    public static Short[] primitiveArray(final short[] array) {\n+        if (array == null) {\n+            return null;\n+        }\n+        if (array.length == 0) {\n+            return EMPTY_SHORT_OBJECT_ARRAY;\n+        }\n+        return setAll(new Short[array.length], new IntFunction<>() {\n+            @Override\n+            public Short apply(int index) {\n+                return array[index];\n+            }\n+        });\n+    }\n+\n+    private static <T> T[] setAll(final T[] array, final IntFunction<? extends T> generator) {\n+        if (array != null && generator != null) {\n+            Arrays.setAll(array, generator);\n+        }\n+        return array;\n     }\n \n     private ToObjectArray() {\n",
    "test_patch": "diff --git a/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/PrimitiveQueryParamsTest.java b/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/PrimitiveQueryParamsTest.java\nnew file mode 100644\nindex 0000000000000..9d0b3f5d84a71\n--- /dev/null\n+++ b/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/PrimitiveQueryParamsTest.java\n@@ -0,0 +1,69 @@\n+package io.quarkus.rest.client.reactive;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.core.Context;\n+import jakarta.ws.rs.core.MultivaluedMap;\n+import jakarta.ws.rs.core.UriInfo;\n+\n+import org.jboss.resteasy.reactive.RestQuery;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+import io.quarkus.test.common.http.TestHTTPResource;\n+\n+public class PrimitiveQueryParamsTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .withApplicationRoot((jar) -> jar.addClasses(Resource.class, Client.class));\n+\n+    @TestHTTPResource\n+    URI baseUri;\n+\n+    @Test\n+    void testQueryParamsWithPrimitiveArrays() {\n+        Client client = QuarkusRestClientBuilder.newBuilder().baseUri(baseUri).build(Client.class);\n+        String first = client.query(new String[] {}, new int[] { 1 }, true);\n+        assertThat(first).isEqualTo(\"first=1;second=true\");\n+\n+        String second = client.query(new String[] { \"foo\", \"bar\" }, new int[] { 1, 2 });\n+        assertThat(second).isEqualTo(\"first=1,2;strings=foo,bar\");\n+    }\n+\n+    @Path(\"primitive\")\n+    public static class Resource {\n+\n+        @Path(\"query\")\n+        @GET\n+        public String queryParams(@Context UriInfo uriInfo) {\n+\n+            MultivaluedMap<String, String> queryParametersMap = uriInfo.getQueryParameters();\n+            var entries = new ArrayList<String>(queryParametersMap.size());\n+            List<String> queryParamNames = new ArrayList<>(queryParametersMap.keySet());\n+            Collections.sort(queryParamNames);\n+            for (var name : queryParamNames) {\n+                entries.add(name + \"=\" + String.join(\",\", queryParametersMap.get(name)));\n+            }\n+            return String.join(\";\", entries);\n+\n+        }\n+    }\n+\n+    @Path(\"primitive\")\n+    public interface Client {\n+\n+        @Path(\"query\")\n+        @GET\n+        String query(@RestQuery String[] strings, @RestQuery int[] first, @RestQuery boolean... second);\n+\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46505",
    "pr_id": 46505,
    "issue_id": 46476,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Qute Logical OR Operator is not working\nI have the following `TemplateGlobal` class.\n \n```java\n@TemplateGlobal\npublic class Globals {\n    public static boolean usernameEnabled() {\n        return true;\n    }\n    public static boolean emailEnabled() {\n        return true;\n    }\n}\n```\n\nWhen I use the Logical OR Operator like that, I get the following error:\n\n```html\ncase 1: \n{usernameEnabled || emailEnabled}\n\ncase 2: \n{#let options=(usernameEnabled || emailEnabled)}\n  options: {options}\n{/let}\n```\n\n```java\njava.lang.IllegalArgumentException: Invalid type info: ||(emailEnabled)\n\tat io.quarkus.qute.deployment.TypeInfos.create(TypeInfos.java:57)\n\tat io.quarkus.qute.deployment.TypeInfos.create(TypeInfos.java:45)\n\tat io.quarkus.qute.deployment.QuteProcessor.validateNestedExpressions(QuteProcessor.java:1227)\n\tat io.quarkus.qute.deployment.QuteProcessor.validateExpressions(QuteProcessor.java:1041)\n\tat java.base/java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:733)\n\tat io.quarkus.deployment.ExtensionLoader$3.execute(ExtensionLoader.java:856)\n\tat io.quarkus.builder.BuildContext.run(BuildContext.java:255)\n\tat org.jboss.threads.ContextHandler$1.runWith(ContextHandler.java:18)\n\tat org.jboss.threads.EnhancedQueueExecutor$Task.doRunWith(EnhancedQueueExecutor.java:2675)\n\tat org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2654)\n\tat org.jboss.threads.EnhancedQueueExecutor.runThreadBody(EnhancedQueueExecutor.java:1627)\n\tat org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1594)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n\tat org.jboss.threads.JBossThread.run(JBossThread.java:499)\nResulted in: io.quarkus.builder.BuildException: Build failure: Build failed due to errors\n\t[error]: Build step io.quarkus.qute.deployment.QuteProcessor#validateExpressions threw an exception: java.lang.IllegalArgumentException: Invalid type info: ||(emailEnabled)\n\tat io.quarkus.qute.deployment.TypeInfos.create(TypeInfos.java:57)\n\tat io.quarkus.qute.deployment.TypeInfos.create(TypeInfos.java:45)\n\tat io.quarkus.qute.deployment.QuteProcessor.validateNestedExpressions(QuteProcessor.java:1227)\n\tat io.quarkus.qute.deployment.QuteProcessor.validateExpressions(QuteProcessor.java:1041)\n\tat java.base/java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:733)\n\tat io.quarkus.deployment.ExtensionLoader$3.execute(ExtensionLoader.java:856)\n\tat io.quarkus.builder.BuildContext.run(BuildContext.java:255)\n\tat org.jboss.threads.ContextHandler$1.runWith(ContextHandler.java:18)\n\tat org.jboss.threads.EnhancedQueueExecutor$Task.doRunWith(EnhancedQueueExecutor.java:2675)\n\tat org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2654)\n\tat org.jboss.threads.EnhancedQueueExecutor.runThreadBody(EnhancedQueueExecutor.java:1627)\n\tat org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1594)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n\tat org.jboss.threads.JBossThread.run(JBossThread.java:499)\n\n\tat io.quarkus.builder.Execution.run(Execution.java:122)\n\tat io.quarkus.builder.BuildExecutionBuilder.execute(BuildExecutionBuilder.java:78)\n\tat io.quarkus.deployment.QuarkusAugmentor.run(QuarkusAugmentor.java:161)\n\tat io.quarkus.runner.bootstrap.AugmentActionImpl.runAugment(AugmentActionImpl.java:368)\n\tat io.quarkus.runner.bootstrap.AugmentActionImpl.reloadExistingApplication(AugmentActionImpl.java:303)\n\tat io.quarkus.runner.bootstrap.AugmentActionImpl.reloadExistingApplication(AugmentActionImpl.java:61)\n\tat io.quarkus.deployment.dev.IsolatedDevModeMain.restartApp(IsolatedDevModeMain.java:200)\n\tat io.quarkus.deployment.dev.IsolatedDevModeMain.restartCallback(IsolatedDevModeMain.java:183)\n\tat io.quarkus.deployment.dev.RuntimeUpdatesProcessor.doScan(RuntimeUpdatesProcessor.java:555)\n\tat io.quarkus.deployment.dev.RuntimeUpdatesProcessor.doScan(RuntimeUpdatesProcessor.java:455)\n\tat io.quarkus.vertx.http.runtime.devmode.VertxHttpHotReplacementSetup$6.call(VertxHttpHotReplacementSetup.java:163)\n\tat io.quarkus.vertx.http.runtime.devmode.VertxHttpHotReplacementSetup$6.call(VertxHttpHotReplacementSetup.java:150)\n\tat io.vertx.core.impl.ContextImpl.lambda$executeBlocking$4(ContextImpl.java:192)\n\tat io.vertx.core.impl.ContextInternal.dispatch(ContextInternal.java:270)\n\tat io.vertx.core.impl.ContextImpl$1.execute(ContextImpl.java:221)\n\tat io.vertx.core.impl.WorkerTask.run(WorkerTask.java:56)\n\tat org.jboss.threads.ContextHandler$1.runWith(ContextHandler.java:18)\n\tat org.jboss.threads.EnhancedQueueExecutor$Task.doRunWith(EnhancedQueueExecutor.java:2675)\n\tat org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2654)\n\tat org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1591)\n\tat org.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:11)\n\tat org.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:11)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\nResulted in: java.lang.RuntimeException: io.quarkus.builder.BuildException: Build failure: Build failed due to errors\n\t[error]: Build step io.quarkus.qute.deployment.QuteProcessor#validateExpressions threw an exception: java.lang.IllegalArgumentException: Invalid type info: ||(emailEnabled)\n\tat io.quarkus.qute.deployment.TypeInfos.create(TypeInfos.java:57)\n\tat io.quarkus.qute.deployment.TypeInfos.create(TypeInfos.java:45)\n\tat io.quarkus.qute.deployment.QuteProcessor.validateNestedExpressions(QuteProcessor.java:1227)\n\tat io.quarkus.qute.deployment.QuteProcessor.validateExpressions(QuteProcessor.java:1041)\n\tat java.base/java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:733)\n\tat io.quarkus.deployment.ExtensionLoader$3.execute(ExtensionLoader.java:856)\n\tat io.quarkus.builder.BuildContext.run(BuildContext.java:255)\n\tat org.jboss.threads.ContextHandler$1.runWith(ContextHandler.java:18)\n\tat org.jboss.threads.EnhancedQueueExecutor$Task.doRunWith(EnhancedQueueExecutor.java:2675)\n\tat org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2654)\n\tat org.jboss.threads.EnhancedQueueExecutor.runThreadBody(EnhancedQueueExecutor.java:1627)\n\tat org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1594)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n\tat org.jboss.threads.JBossThread.run(JBossThread.java:499)\n\n\tat io.quarkus.runner.bootstrap.AugmentActionImpl.runAugment(AugmentActionImpl.java:372)\n\t... 20 more\nResulted in: io.vertx.core.impl.NoStackTraceException\n```\n",
    "issue_word_count": 810,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/TypeInfos.java",
      "extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/globals/TemplateGlobalTest.java"
    ],
    "pr_changed_test_files": [
      "extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/globals/TemplateGlobalTest.java"
    ],
    "base_commit": "1ba5ca13b724079df3e63b6c14df212a4b5a5542",
    "head_commit": "d22d469d82f70698add0242e240ab118de098c9f",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46505",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46505",
    "dockerfile": "",
    "pr_merged_at": "2025-02-26T13:57:12.000Z",
    "patch": "diff --git a/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/TypeInfos.java b/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/TypeInfos.java\nindex 51aa6b0e8aa03..fbc0ec54a7400 100644\n--- a/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/TypeInfos.java\n+++ b/extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/TypeInfos.java\n@@ -51,7 +51,9 @@ static List<Info> create(Expression expression, IndexView index, Function<String\n \n     static Info create(String typeInfo, Expression.Part part, IndexView index, Function<String, String> templateIdToPathFun,\n             Origin expressionOrigin) {\n-        if (typeInfo.startsWith(TYPE_INFO_SEPARATOR)) {\n+        if (typeInfo.startsWith(TYPE_INFO_SEPARATOR)\n+                && (typeInfo.endsWith(TYPE_INFO_SEPARATOR) || typeInfo.endsWith(RIGHT_ANGLE))) {\n+            // |TYPE_INFO| or |TYPE_INFO|<section-hint>\n             int endIdx = typeInfo.substring(1, typeInfo.length()).indexOf(Expressions.TYPE_INFO_SEPARATOR);\n             if (endIdx < 1) {\n                 throw new IllegalArgumentException(\"Invalid type info: \" + typeInfo);\n",
    "test_patch": "diff --git a/extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/globals/TemplateGlobalTest.java b/extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/globals/TemplateGlobalTest.java\nindex 35674762c495a..d9fc5fb1befa5 100644\n--- a/extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/globals/TemplateGlobalTest.java\n+++ b/extensions/qute/deployment/src/test/java/io/quarkus/qute/deployment/globals/TemplateGlobalTest.java\n@@ -26,7 +26,7 @@ public class TemplateGlobalTest {\n             .withApplicationRoot(root -> root\n                     .addClasses(Globals.class, NextGlobals.class)\n                     .addAsResource(new StringAsset(\n-                            \"Hello {currentUser}|{global:currentUser}! Your name is {_name}|{global:_name}. You're {age}|{global:age} years old.\"),\n+                            \"Hello {currentUser}|{global:currentUser}! Your name is {_name}|{global:_name}. You're {age}|{global:age} years old. [{serviceEnabled || true}]\"),\n                             \"templates/hello.txt\"));\n \n     @Inject\n@@ -42,13 +42,13 @@ public void testTemplateData() {\n         assertEquals(\"Hello 40!\", instance.render());\n         assertTrue(Globals.AGE_USED.get());\n \n-        assertEquals(\"Hello Fu|Fu! Your name is Lu|Lu. You're 40|40 years old.\", hello.render());\n+        assertEquals(\"Hello Fu|Fu! Your name is Lu|Lu. You're 40|40 years old. [true]\", hello.render());\n         assertEquals(\"Hello Fu|Fu! Your name is Lu|Lu. You're 40|40 years old.\",\n                 Qute.fmt(\n                         \"Hello {currentUser}|{global:currentUser}! Your name is {_name}|{global:_name}. You're {age}|{global:age} years old.\")\n                         .render());\n         Globals.user = \"Hu\";\n-        assertEquals(\"Hello Hu|Hu! Your name is Lu|Lu. You're 20|20 years old.\", hello.render());\n+        assertEquals(\"Hello Hu|Hu! Your name is Lu|Lu. You're 20|20 years old. [true]\", hello.render());\n         assertEquals(\"Hello Hu|Hu! Your name is Lu|Lu. You're 20|20 years old.\",\n                 Qute.fmt(\n                         \"Hello {currentUser}|{global:currentUser}! Your name is {_name}|{global:_name}. You're {age}|{global:age} years old.\")\n@@ -70,6 +70,11 @@ static int age() {\n             return user.equals(\"Fu\") ? 40 : 20;\n         }\n \n+        @TemplateGlobal\n+        static boolean serviceEnabled() {\n+            return true;\n+        }\n+\n     }\n \n     static enum Color {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46499",
    "pr_id": 46499,
    "issue_id": 46496,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Reevaluate the compression handling of the REST Client\n### Description\n\nThe REST Client currently introduces `ClientGZIPDecodingInterceptor` as way to handle `gzip` encoded input. \n\nThis is not ideal for a couple reasons:\n* Vert.x should already handle this\n* It doesn't support other values of the `Content-Encoding` header\n\nMoreover the name of the property (`enable-compression`) is just plain wrong as it should be `enable-decompression`\n\n### Implementation ideas\n\n_No response_",
    "issue_word_count": 69,
    "test_files_count": 3,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "extensions/resteasy-reactive/rest-client-jackson/deployment/src/test/java/io/quarkus/rest/client/reactive/jackson/test/ClientUsingGzipCompressionGlobalSettingTest.java",
      "extensions/resteasy-reactive/rest-client/deployment/src/main/java/io/quarkus/rest/client/reactive/deployment/RestClientReactiveProcessor.java",
      "extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/TestUtils.java",
      "extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/compression/GzipCompressionTest.java",
      "independent-projects/resteasy-reactive/client/runtime/src/main/java/org/jboss/resteasy/reactive/client/impl/ClientBuilderImpl.java",
      "independent-projects/resteasy-reactive/client/runtime/src/main/java/org/jboss/resteasy/reactive/client/interceptors/ClientGZIPDecodingInterceptor.java"
    ],
    "pr_changed_test_files": [
      "extensions/resteasy-reactive/rest-client-jackson/deployment/src/test/java/io/quarkus/rest/client/reactive/jackson/test/ClientUsingGzipCompressionGlobalSettingTest.java",
      "extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/TestUtils.java",
      "extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/compression/GzipCompressionTest.java"
    ],
    "base_commit": "453add378a658aff7b69dc4cebd06f508e32773b",
    "head_commit": "37baf0f3eac06fad44e474ef405a0a463fe9bc0f",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46499",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46499",
    "dockerfile": "",
    "pr_merged_at": "2025-02-28T07:58:53.000Z",
    "patch": "diff --git a/extensions/resteasy-reactive/rest-client/deployment/src/main/java/io/quarkus/rest/client/reactive/deployment/RestClientReactiveProcessor.java b/extensions/resteasy-reactive/rest-client/deployment/src/main/java/io/quarkus/rest/client/reactive/deployment/RestClientReactiveProcessor.java\nindex d913bca3c997e..782f4a8b05630 100644\n--- a/extensions/resteasy-reactive/rest-client/deployment/src/main/java/io/quarkus/rest/client/reactive/deployment/RestClientReactiveProcessor.java\n+++ b/extensions/resteasy-reactive/rest-client/deployment/src/main/java/io/quarkus/rest/client/reactive/deployment/RestClientReactiveProcessor.java\n@@ -61,7 +61,6 @@\n import org.jboss.jandex.Type;\n import org.jboss.logging.Logger;\n import org.jboss.resteasy.reactive.client.api.ClientLogger;\n-import org.jboss.resteasy.reactive.client.interceptors.ClientGZIPDecodingInterceptor;\n import org.jboss.resteasy.reactive.client.spi.MissingMessageBodyReaderErrorMessageContextualizer;\n import org.jboss.resteasy.reactive.common.processor.ResteasyReactiveDotNames;\n import org.jboss.resteasy.reactive.common.processor.transformation.AnnotationStore;\n@@ -377,17 +376,6 @@ AdditionalBeanBuildItem registerProviderBeans(CombinedIndexBuildItem combinedInd\n         return builder.build();\n     }\n \n-    @BuildStep\n-    void registerCompressionInterceptors(BuildProducer<ReflectiveClassBuildItem> reflectiveClasses) {\n-        Boolean enableCompression = ConfigProvider.getConfig()\n-                .getOptionalValue(ENABLE_COMPRESSION, Boolean.class)\n-                .orElse(false);\n-        if (enableCompression) {\n-            reflectiveClasses.produce(ReflectiveClassBuildItem.builder(ClientGZIPDecodingInterceptor.class)\n-                    .reason(getClass().getName()).build());\n-        }\n-    }\n-\n     @BuildStep\n     void handleSseEventFilter(BuildProducer<ReflectiveClassBuildItem> reflectiveClasses,\n             BeanArchiveIndexBuildItem beanArchiveIndexBuildItem) {\n\ndiff --git a/independent-projects/resteasy-reactive/client/runtime/src/main/java/org/jboss/resteasy/reactive/client/impl/ClientBuilderImpl.java b/independent-projects/resteasy-reactive/client/runtime/src/main/java/org/jboss/resteasy/reactive/client/impl/ClientBuilderImpl.java\nindex a9b35a4753f02..7dded2873c9cb 100644\n--- a/independent-projects/resteasy-reactive/client/runtime/src/main/java/org/jboss/resteasy/reactive/client/impl/ClientBuilderImpl.java\n+++ b/independent-projects/resteasy-reactive/client/runtime/src/main/java/org/jboss/resteasy/reactive/client/impl/ClientBuilderImpl.java\n@@ -30,7 +30,6 @@\n import org.jboss.resteasy.reactive.client.TlsConfig;\n import org.jboss.resteasy.reactive.client.api.ClientLogger;\n import org.jboss.resteasy.reactive.client.api.LoggingScope;\n-import org.jboss.resteasy.reactive.client.interceptors.ClientGZIPDecodingInterceptor;\n import org.jboss.resteasy.reactive.client.logging.DefaultClientLogger;\n import org.jboss.resteasy.reactive.client.spi.ClientContextResolver;\n import org.jboss.resteasy.reactive.common.jaxrs.ConfigurationImpl;\n@@ -279,7 +278,7 @@ public ClientImpl build() {\n         }\n \n         if (Boolean.TRUE.equals(enableCompression)) {\n-            configuration.register(ClientGZIPDecodingInterceptor.class);\n+            options.setDecompressionSupported(true);\n         }\n \n         clientLogger.setBodySize(loggingBodySize);\n\ndiff --git a/independent-projects/resteasy-reactive/client/runtime/src/main/java/org/jboss/resteasy/reactive/client/interceptors/ClientGZIPDecodingInterceptor.java b/independent-projects/resteasy-reactive/client/runtime/src/main/java/org/jboss/resteasy/reactive/client/interceptors/ClientGZIPDecodingInterceptor.java\ndeleted file mode 100644\nindex fdc64e2c88c1b..0000000000000\n--- a/independent-projects/resteasy-reactive/client/runtime/src/main/java/org/jboss/resteasy/reactive/client/interceptors/ClientGZIPDecodingInterceptor.java\n+++ /dev/null\n@@ -1,41 +0,0 @@\n-package org.jboss.resteasy.reactive.client.interceptors;\n-\n-import static jakarta.ws.rs.core.HttpHeaders.CONTENT_ENCODING;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.util.zip.GZIPInputStream;\n-\n-import jakarta.ws.rs.WebApplicationException;\n-import jakarta.ws.rs.ext.ReaderInterceptor;\n-import jakarta.ws.rs.ext.ReaderInterceptorContext;\n-\n-/**\n- * Implementation based on {@see org.jboss.resteasy.plugins.interceptors.GZIPDecodingInterceptor}.\n- */\n-public class ClientGZIPDecodingInterceptor implements ReaderInterceptor {\n-\n-    private static final String GZIP = \"gzip\";\n-\n-    @Override\n-    public Object aroundReadFrom(ReaderInterceptorContext context)\n-            throws IOException, WebApplicationException {\n-        Object encoding = context.getHeaders().getFirst(CONTENT_ENCODING);\n-        if (encoding != null && encoding.toString().equalsIgnoreCase(GZIP)) {\n-            InputStream old = context.getInputStream();\n-            GZIPInputStream is = new GZIPInputStream(old);\n-            context.setInputStream(is);\n-\n-            Object response;\n-            try {\n-                response = context.proceed();\n-            } finally {\n-                context.setInputStream(old);\n-            }\n-\n-            return response;\n-        } else {\n-            return context.proceed();\n-        }\n-    }\n-}\n",
    "test_patch": "diff --git a/extensions/resteasy-reactive/rest-client-jackson/deployment/src/test/java/io/quarkus/rest/client/reactive/jackson/test/ClientUsingGzipCompressionGlobalSettingTest.java b/extensions/resteasy-reactive/rest-client-jackson/deployment/src/test/java/io/quarkus/rest/client/reactive/jackson/test/ClientUsingGzipCompressionGlobalSettingTest.java\ndeleted file mode 100644\nindex c3e32300dc674..0000000000000\n--- a/extensions/resteasy-reactive/rest-client-jackson/deployment/src/test/java/io/quarkus/rest/client/reactive/jackson/test/ClientUsingGzipCompressionGlobalSettingTest.java\n+++ /dev/null\n@@ -1,73 +0,0 @@\n-package io.quarkus.rest.client.reactive.jackson.test;\n-\n-import jakarta.ws.rs.GET;\n-import jakarta.ws.rs.Path;\n-import jakarta.ws.rs.Produces;\n-import jakarta.ws.rs.core.MediaType;\n-\n-import org.eclipse.microprofile.rest.client.annotation.ClientHeaderParam;\n-import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n-import org.eclipse.microprofile.rest.client.inject.RestClient;\n-import org.junit.jupiter.api.Assertions;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.RegisterExtension;\n-\n-import io.quarkus.test.QuarkusUnitTest;\n-import io.quarkus.vertx.http.Compressed;\n-\n-public class ClientUsingGzipCompressionGlobalSettingTest {\n-    @RegisterExtension\n-    static final QuarkusUnitTest config = new QuarkusUnitTest()\n-            .withApplicationRoot((jar) -> jar\n-                    .addClasses(MyResource.class, Message.class, MyClient.class))\n-            .overrideConfigKey(\"quarkus.http.enable-compression\", \"true\")\n-            .overrideRuntimeConfigKey(\"quarkus.rest-client.my-client.url\", \"http://localhost:${quarkus.http.test-port:8081}\");\n-\n-    @RestClient\n-    MyClient client;\n-\n-    @Test\n-    public void testClientSupportCompressedMessagesWithGzip() {\n-        Message actual = client.receiveCompressed();\n-        Assertions.assertEquals(1, actual.id);\n-    }\n-\n-    @Test\n-    public void testClientStillWorksWhenMessageIsUncompressed() {\n-        Message actual = client.receiveUncompressed();\n-        Assertions.assertEquals(1, actual.id);\n-    }\n-\n-    @Path(\"/client\")\n-    @RegisterRestClient(configKey = \"my-client\")\n-    public interface MyClient {\n-\n-        // This header is used to reproduce the issue: it will force the server to produce the payload with gzip compression\n-        @ClientHeaderParam(name = \"Accept-Encoding\", value = \"gzip\")\n-        @GET\n-        @Path(\"/message\")\n-        Message receiveCompressed();\n-\n-        @GET\n-        @Path(\"/message\")\n-        Message receiveUncompressed();\n-\n-    }\n-\n-    @Path(\"/client\")\n-    public static class MyResource {\n-\n-        @Compressed\n-        @GET\n-        @Produces(MediaType.APPLICATION_JSON)\n-        @Path(\"/message\")\n-        public String receive() {\n-            return \"{\\\"id\\\": 1}\";\n-        }\n-\n-    }\n-\n-    public static class Message {\n-        public int id;\n-    }\n-}\n\ndiff --git a/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/TestUtils.java b/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/TestUtils.java\nnew file mode 100644\nindex 0000000000000..97701d4652d5e\n--- /dev/null\n+++ b/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/TestUtils.java\n@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2011-2019 Contributors to the Eclipse Foundation\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0\n+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+ */\n+\n+package io.quarkus.rest.client.reactive;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.zip.GZIPInputStream;\n+import java.util.zip.GZIPOutputStream;\n+\n+/**\n+ * @author <a href=\"http://tfox.org\">Tim Fox</a>\n+ */\n+public class TestUtils {\n+\n+    public static String randomAlphaString(int length) {\n+        StringBuilder builder = new StringBuilder(length);\n+        for (int i = 0; i < length; i++) {\n+            char c = (char) (65 + 25 * Math.random());\n+            builder.append(c);\n+        }\n+        return builder.toString();\n+    }\n+\n+    public static byte[] compressGzip(String source) throws Exception {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        GZIPOutputStream gos = new GZIPOutputStream(baos);\n+        gos.write(source.getBytes());\n+        gos.close();\n+        return baos.toByteArray();\n+    }\n+\n+    public static byte[] decompressGzip(byte[] source) throws IOException {\n+        GZIPInputStream gis = new GZIPInputStream(new ByteArrayInputStream(source));\n+        byte[] result = gis.readAllBytes();\n+        gis.close();\n+        return result;\n+    }\n+}\n\ndiff --git a/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/compression/GzipCompressionTest.java b/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/compression/GzipCompressionTest.java\nnew file mode 100644\nindex 0000000000000..21745ce8643f5\n--- /dev/null\n+++ b/extensions/resteasy-reactive/rest-client/deployment/src/test/java/io/quarkus/rest/client/reactive/compression/GzipCompressionTest.java\n@@ -0,0 +1,205 @@\n+package io.quarkus.rest.client.reactive.compression;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.IOException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import jakarta.enterprise.event.Observes;\n+import jakarta.inject.Inject;\n+import jakarta.inject.Singleton;\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.Produces;\n+import jakarta.ws.rs.core.MediaType;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.eclipse.microprofile.rest.client.annotation.ClientHeaderParam;\n+import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n+import org.eclipse.microprofile.rest.client.inject.RestClient;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.netty.handler.codec.http.HttpHeaderNames;\n+import io.quarkus.rest.client.reactive.TestUtils;\n+import io.quarkus.test.QuarkusUnitTest;\n+import io.quarkus.vertx.http.HttpServerOptionsCustomizer;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpServerOptions;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.ext.web.codec.BodyCodec;\n+\n+public class GzipCompressionTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .withApplicationRoot((jar) -> jar\n+                    .addClasses(Endpoint.class, Client1.class, TestUtils.class))\n+            .overrideRuntimeConfigKey(\"quarkus.rest-client.client1.url\", \"http://localhost:${quarkus.http.test-port:8081}\")\n+            .overrideRuntimeConfigKey(\"quarkus.rest-client.client1.enable-compression\", \"true\")\n+            .overrideRuntimeConfigKey(\"quarkus.rest-client.client2.url\", \"http://localhost:${quarkus.http.test-port:8081}\")\n+            .overrideRuntimeConfigKey(\"quarkus.rest-client.client2.enable-compression\", \"false\");\n+\n+    private static final String uncompressedString;\n+    private static final byte[] uncompressedBytes;\n+\n+    static {\n+        uncompressedString = TestUtils.randomAlphaString(1000);\n+        uncompressedBytes = uncompressedString.getBytes();\n+    }\n+\n+    @Inject\n+    Vertx vertx;\n+\n+    @ConfigProperty(name = \"quarkus.http.test-port\", defaultValue = \"8081\")\n+    Integer port;\n+\n+    @RestClient\n+    Client1 client1;\n+\n+    @RestClient\n+    Client2 client2;\n+\n+    /**\n+     * This test is very important to ensure that we know the server is actually capable of sending\n+     * gzip encoded data\n+     */\n+    @Test\n+    void ensureServerCanSendCompressedData()\n+            throws ExecutionException, InterruptedException, TimeoutException, IOException {\n+        CompletableFuture<Buffer> receivedBufferCF = new CompletableFuture<>();\n+        WebClient client = WebClient.create(vertx);\n+        try {\n+            client.get(port, \"localhost\", \"/client/message\")\n+                    .putHeader(HttpHeaderNames.ACCEPT_ENCODING.toString(), \"gzip\")\n+                    .putHeader(HttpHeaderNames.ACCEPT.toString(), \"text/plain\")\n+                    .as(BodyCodec.buffer())\n+                    .send()\n+                    .onFailure(receivedBufferCF::completeExceptionally)\n+                    .onSuccess(response -> {\n+                        receivedBufferCF.complete(response.bodyAsBuffer());\n+                    });\n+            Buffer receivedBuffer = receivedBufferCF.get(10, TimeUnit.SECONDS);\n+            byte[] receivedBytes = receivedBuffer.getBytes();\n+            assertThat(receivedBytes).isNotEqualTo(uncompressedBytes);\n+            assertThat(TestUtils.decompressGzip(receivedBytes)).isEqualTo(uncompressedBytes);\n+        } finally {\n+            client.close();\n+        }\n+    }\n+\n+    /**\n+     * We need to know that the server can send uncompressed data as well\n+     */\n+    @Test\n+    void ensureServerCanSendUncompressedData() throws ExecutionException, InterruptedException, TimeoutException {\n+        CompletableFuture<Buffer> receivedBufferCF = new CompletableFuture<>();\n+        WebClient client = WebClient.create(vertx);\n+        try {\n+            client.get(port, \"localhost\", \"/client/message\")\n+                    .putHeader(HttpHeaderNames.ACCEPT.toString(), \"text/plain\")\n+                    .as(BodyCodec.buffer())\n+                    .send()\n+                    .onFailure(receivedBufferCF::completeExceptionally)\n+                    .onSuccess(response -> {\n+                        receivedBufferCF.complete(response.bodyAsBuffer());\n+                    });\n+            Buffer receivedBuffer = receivedBufferCF.get(10, TimeUnit.SECONDS);\n+            assertThat(receivedBuffer.getBytes()).isEqualTo(uncompressedBytes);\n+        } finally {\n+            client.close();\n+        }\n+    }\n+\n+    // now we can actually test the client as we know the server behaves as expected\n+\n+    @Test\n+    void testReceiveCompressed() {\n+        assertThat(client1.receiveCompressed()).isEqualTo(uncompressedString);\n+    }\n+\n+    @Test\n+    void testReceiveUncompressed() {\n+        assertThat(client1.receiveCompressed()).isEqualTo(uncompressedString);\n+    }\n+\n+    @Test\n+    void testReceiveCompressedInClient2() throws IOException {\n+        byte[] receivedBytes = client2.receiveCompressed();\n+        assertThat(receivedBytes).isNotEqualTo(uncompressedBytes);\n+        assertThat(TestUtils.decompressGzip(receivedBytes)).isEqualTo(uncompressedBytes);\n+    }\n+\n+    /**\n+     * This ensures that Vert.x will automatically compress the body of an HTTP response when the Accept-Encoding HTTP\n+     * header requests indicates the client supports such compression\n+     */\n+    @Singleton\n+    public static class ServerOptionsCustomizer implements HttpServerOptionsCustomizer {\n+\n+        @Override\n+        public void customizeHttpServer(HttpServerOptions options) {\n+            options.setCompressionSupported(true);\n+        }\n+    }\n+\n+    /**\n+     * We don't use Quarkus REST here as we want to make sure that don't involve any other layer that could potentially\n+     * be adding compression. This way the compression will be provided only by Vert.x\n+     */\n+    public static class Endpoint {\n+\n+        public void setup(@Observes Router router) {\n+            router.route(\"/client/message\").handler(new Handler<>() {\n+                @Override\n+                public void handle(RoutingContext rc) {\n+                    HttpServerRequest req = rc.request();\n+                    HttpServerResponse response = req.response().setStatusCode(200).putHeader(HttpHeaderNames.CONTENT_TYPE,\n+                            \"text/plain\");\n+                    Buffer body = Buffer.buffer(uncompressedBytes);\n+                    response.end(body);\n+                }\n+            });\n+        }\n+    }\n+\n+    /**\n+     * This client has {@code enable-compression} set to {@code true}\n+     */\n+    @Path(\"/client\")\n+    @RegisterRestClient(configKey = \"client1\")\n+    public interface Client1 {\n+        @ClientHeaderParam(name = \"Accept-Encoding\", value = \"gzip\")\n+        @GET\n+        @Path(\"/message\")\n+        @Produces(MediaType.TEXT_PLAIN)\n+        String receiveCompressed();\n+\n+        @GET\n+        @Path(\"/message\")\n+        @Produces(MediaType.TEXT_PLAIN)\n+        String receiveUncompressed();\n+    }\n+\n+    /**\n+     * This client has {@code enable-compression} set to {@code false}\n+     */\n+    @Path(\"/client\")\n+    @RegisterRestClient(configKey = \"client2\")\n+    public interface Client2 {\n+        @ClientHeaderParam(name = \"Accept-Encoding\", value = \"gzip\")\n+        @GET\n+        @Path(\"/message\")\n+        @Produces(MediaType.TEXT_PLAIN)\n+        byte[] receiveCompressed();\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46487",
    "pr_id": 46487,
    "issue_id": 46449,
    "repo": "quarkusio/quarkus",
    "problem_statement": "@QuarkusComponentTest fails on nested test classes\n### Describe the bug\n\n### Given\nQuarkus version: 3.17.8\nExtensions: quarkus-junit5-component\n\n### When\nHaving a any CDI bean (dummy MyService used in this case) and test class like\n\n```\n@QuarkusComponentTest\nclass NestedComponentTest {\n\n    @Inject\n    private MyService testUnit;\n\n    @Test\n    void topLevel() {\n    }\n\n    @Nested\n    class NonStaticInnerClass {\n\n        @Test\n        void nested() {\n        }\n    }\n}\n\n```\n\n### Then\n`java.lang.IllegalStateException: No component classes to test`\n\n\n### Expected behavior\n\nThe extension should handle nested test classes, as these are often used to structure more complex test scenarios, for which especially @QuarkusComponentTest is a good candidate to reduce mocking efforts.\n\n### Actual behavior\n\n_No response_\n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### Quarkus version or git rev\n\n_No response_\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
    "issue_word_count": 138,
    "test_files_count": 10,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "docs/src/main/asciidoc/testing-components.adoc",
      "test-framework/junit5-component/src/main/java/io/quarkus/test/component/QuarkusComponentTestConfiguration.java",
      "test-framework/junit5-component/src/main/java/io/quarkus/test/component/QuarkusComponentTestExtension.java",
      "test-framework/junit5-component/src/main/java/io/quarkus/test/component/TestConfigProperty.java",
      "test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/NestedNestedTest.java",
      "test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/NestedParamInjectTest.java",
      "test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/NestedTest.java",
      "test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/TopPerClassNestedPerClassTest.java",
      "test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/TopPerClassNestedPerMethodTest.java",
      "test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/TopPerMethodNestedPerClassTest.java"
    ],
    "pr_changed_test_files": [
      "docs/src/main/asciidoc/testing-components.adoc",
      "test-framework/junit5-component/src/main/java/io/quarkus/test/component/QuarkusComponentTestConfiguration.java",
      "test-framework/junit5-component/src/main/java/io/quarkus/test/component/QuarkusComponentTestExtension.java",
      "test-framework/junit5-component/src/main/java/io/quarkus/test/component/TestConfigProperty.java",
      "test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/NestedNestedTest.java",
      "test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/NestedParamInjectTest.java",
      "test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/NestedTest.java",
      "test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/TopPerClassNestedPerClassTest.java",
      "test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/TopPerClassNestedPerMethodTest.java",
      "test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/TopPerMethodNestedPerClassTest.java"
    ],
    "base_commit": "1ba5ca13b724079df3e63b6c14df212a4b5a5542",
    "head_commit": "7cda115b3cb839f703fa6f2535b1d2fad9e065f7",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46487",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46487",
    "dockerfile": "",
    "pr_merged_at": "2025-02-26T08:48:39.000Z",
    "patch": "",
    "test_patch": "diff --git a/docs/src/main/asciidoc/testing-components.adoc b/docs/src/main/asciidoc/testing-components.adoc\nindex 6215ccfee6702..03bf5aa3e119c 100644\n--- a/docs/src/main/asciidoc/testing-components.adoc\n+++ b/docs/src/main/asciidoc/testing-components.adoc\n@@ -232,6 +232,59 @@ public class FooTest {\n Sometimes you need the full control over the bean attributes and maybe even configure the default mock behavior.\n You can use the mock configurator API via the `QuarkusComponentTestExtensionBuilder#mock()` method.\n \n+== Nested Tests\n+\n+JUnit 5 https://junit.org/junit5/docs/current/user-guide/#writing-tests-nested[@Nested tests] may help to structure more complex test scenarios.\n+However, only basic use cases are tested with `@QuarkusComponentTest`.\n+\n+.Nested test\n+[source, java]\n+----\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import jakarta.inject.Inject;\n+import io.quarkus.test.InjectMock;\n+import io.quarkus.test.component.TestConfigProperty;\n+import io.quarkus.test.component.QuarkusComponentTest;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+@QuarkusComponentTest <1>\n+@TestConfigProperty(key = \"bar\", value = \"true\") <2>\n+public class FooTest {\n+\n+    @Inject\n+    Foo foo; <3>\n+\n+    @InjectMock\n+    Charlie charlieMock; <4>\n+    \n+    @Nested\n+    class PingTest {\n+    \n+       @Test\n+       public void testPing() {\n+          Mockito.when(charlieMock.ping()).thenReturn(\"OK\");\n+          assertEquals(\"OK\", foo.ping());\n+       }\n+    }\n+    \n+    @Nested\n+    class PongTest {\n+    \n+       @Test\n+       public void testPong() {\n+          Mockito.when(charlieMock.pong()).thenReturn(\"NOK\");\n+          assertEquals(\"NOK\", foo.pong());\n+       }\n+    }\n+}\n+----\n+<1> The `QuarkusComponentTest` annotation registers the JUnit extension.\n+<2> Sets a configuration property for the test.\n+<3> The test injects the component under the test. `Foo` injects `Charlie`.\n+<4> The test also injects a mock for `Charlie`. The injected reference is an \"unconfigured\" Mockito mock.\n+\n == Configuration\n \n You can set the configuration properties for a test with the `@io.quarkus.test.component.TestConfigProperty` annotation or with the `QuarkusComponentTestExtensionBuilder#configProperty(String, String)` method.\n@@ -240,6 +293,8 @@ If you only need to use the default values for missing config properties, then t\n It is also possible to set configuration properties for a test method with the `@io.quarkus.test.component.TestConfigProperty` annotation.\n However, if the test instance lifecycle is `Lifecycle#_PER_CLASS` this annotation can only be used on the test class and is ignored on test methods.\n \n+NOTE: `@io.quarkus.test.component.TestConfigProperty` declared on a `@Nested` test class is always ignored.\n+\n CDI beans are also automatically registered for all injected https://smallrye.io/smallrye-config/Main/config/mappings/[Config Mappings]. The mappings are populated with the test configuration properties.\n \n == Mocking CDI Interceptors\n\ndiff --git a/test-framework/junit5-component/src/main/java/io/quarkus/test/component/QuarkusComponentTestConfiguration.java b/test-framework/junit5-component/src/main/java/io/quarkus/test/component/QuarkusComponentTestConfiguration.java\nindex ef3e8ec2ab65b..00196d8fe9ac7 100644\n--- a/test-framework/junit5-component/src/main/java/io/quarkus/test/component/QuarkusComponentTestConfiguration.java\n+++ b/test-framework/junit5-component/src/main/java/io/quarkus/test/component/QuarkusComponentTestConfiguration.java\n@@ -27,6 +27,7 @@\n \n import org.eclipse.microprofile.config.spi.Converter;\n import org.jboss.logging.Logger;\n+import org.junit.jupiter.api.Nested;\n import org.mockito.Mock;\n \n import io.quarkus.arc.InjectableInstance;\n@@ -101,6 +102,12 @@ QuarkusComponentTestConfiguration update(Class<?> testClass) {\n         List<AnnotationsTransformer> annotationsTransformers = new ArrayList<>(this.annotationsTransformers);\n         List<Converter<?>> configConverters = new ArrayList<>(this.configConverters);\n \n+        if (testClass.isAnnotationPresent(Nested.class)) {\n+            while (testClass.getEnclosingClass() != null) {\n+                testClass = testClass.getEnclosingClass();\n+            }\n+        }\n+\n         QuarkusComponentTest testAnnotation = testClass.getAnnotation(QuarkusComponentTest.class);\n         if (testAnnotation != null) {\n             Collections.addAll(componentClasses, testAnnotation.value());\n@@ -130,67 +137,78 @@ QuarkusComponentTestConfiguration update(Class<?> testClass) {\n         }\n         Class<?> current = testClass;\n         while (current != null && current != Object.class) {\n-            // All fields annotated with @Inject represent component classes\n-            for (Field field : current.getDeclaredFields()) {\n-                if (field.isAnnotationPresent(Inject.class)) {\n-                    if (Instance.class.isAssignableFrom(field.getType())\n-                            || QuarkusComponentTestExtension.isListAllInjectionPoint(field.getGenericType(),\n-                                    field.getAnnotations(),\n-                                    field)) {\n-                        // Special handling for Instance<Foo> and @All List<Foo>\n-                        componentClasses\n-                                .add(getRawType(\n-                                        QuarkusComponentTestExtension.getFirstActualTypeArgument(field.getGenericType())));\n-                    } else if (!resolvesToBuiltinBean(field.getType())) {\n-                        componentClasses.add(field.getType());\n-                    }\n+            collectComponents(current, addNestedClassesAsComponents, componentClasses);\n+            current = current.getSuperclass();\n+        }\n+\n+        // @TestConfigProperty annotations\n+        for (TestConfigProperty testConfigProperty : testClass.getAnnotationsByType(TestConfigProperty.class)) {\n+            configProperties.put(testConfigProperty.key(), testConfigProperty.value());\n+        }\n+\n+        return new QuarkusComponentTestConfiguration(Map.copyOf(configProperties), Set.copyOf(componentClasses),\n+                this.mockConfigurators, useDefaultConfigProperties, addNestedClassesAsComponents, configSourceOrdinal,\n+                List.copyOf(annotationsTransformers), List.copyOf(configConverters), configBuilderCustomizer);\n+    }\n+\n+    private static void collectComponents(Class<?> testClass, boolean addNestedClassesAsComponents,\n+            List<Class<?>> componentClasses) {\n+        // All fields annotated with @Inject represent component classes\n+        for (Field field : testClass.getDeclaredFields()) {\n+            if (field.isAnnotationPresent(Inject.class)) {\n+                if (Instance.class.isAssignableFrom(field.getType())\n+                        || QuarkusComponentTestExtension.isListAllInjectionPoint(field.getGenericType(),\n+                                field.getAnnotations(),\n+                                field)) {\n+                    // Special handling for Instance<Foo> and @All List<Foo>\n+                    componentClasses\n+                            .add(getRawType(\n+                                    QuarkusComponentTestExtension.getFirstActualTypeArgument(field.getGenericType())));\n+                } else if (!resolvesToBuiltinBean(field.getType())) {\n+                    componentClasses.add(field.getType());\n                 }\n             }\n-            // All static nested classes declared on the test class are components\n-            if (addNestedClassesAsComponents) {\n-                for (Class<?> declaredClass : current.getDeclaredClasses()) {\n-                    if (Modifier.isStatic(declaredClass.getModifiers())) {\n-                        componentClasses.add(declaredClass);\n-                    }\n+        }\n+        // All static nested classes declared on the test class are components\n+        if (addNestedClassesAsComponents) {\n+            for (Class<?> declaredClass : testClass.getDeclaredClasses()) {\n+                if (Modifier.isStatic(declaredClass.getModifiers())) {\n+                    componentClasses.add(declaredClass);\n                 }\n             }\n-            // All params of test methods but:\n-            // - not covered by built-in extensions\n-            // - not annotated with @InjectMock, @SkipInject, @org.mockito.Mock\n-            for (Method method : current.getDeclaredMethods()) {\n-                if (QuarkusComponentTestExtension.isTestMethod(method)) {\n-                    for (Parameter param : method.getParameters()) {\n-                        if (QuarkusComponentTestExtension.BUILTIN_PARAMETER.test(param)\n-                                || param.isAnnotationPresent(InjectMock.class)\n-                                || param.isAnnotationPresent(SkipInject.class)\n-                                || param.isAnnotationPresent(Mock.class)) {\n-                            continue;\n-                        }\n-                        if (Instance.class.isAssignableFrom(param.getType())\n-                                || QuarkusComponentTestExtension.isListAllInjectionPoint(param.getParameterizedType(),\n-                                        param.getAnnotations(),\n-                                        param)) {\n-                            // Special handling for Instance<Foo> and @All List<Foo>\n-                            componentClasses.add(getRawType(\n-                                    QuarkusComponentTestExtension.getFirstActualTypeArgument(param.getParameterizedType())));\n-                        } else {\n-                            componentClasses.add(param.getType());\n-                        }\n+        }\n+        // All params of test methods but:\n+        // - not covered by built-in extensions\n+        // - not annotated with @InjectMock, @SkipInject, @org.mockito.Mock\n+        for (Method method : testClass.getDeclaredMethods()) {\n+            if (QuarkusComponentTestExtension.isTestMethod(method)) {\n+                for (Parameter param : method.getParameters()) {\n+                    if (QuarkusComponentTestExtension.BUILTIN_PARAMETER.test(param)\n+                            || param.isAnnotationPresent(InjectMock.class)\n+                            || param.isAnnotationPresent(SkipInject.class)\n+                            || param.isAnnotationPresent(Mock.class)) {\n+                        continue;\n+                    }\n+                    if (Instance.class.isAssignableFrom(param.getType())\n+                            || QuarkusComponentTestExtension.isListAllInjectionPoint(param.getParameterizedType(),\n+                                    param.getAnnotations(),\n+                                    param)) {\n+                        // Special handling for Instance<Foo> and @All List<Foo>\n+                        componentClasses.add(getRawType(\n+                                QuarkusComponentTestExtension.getFirstActualTypeArgument(param.getParameterizedType())));\n+                    } else {\n+                        componentClasses.add(param.getType());\n                     }\n                 }\n             }\n-            current = current.getSuperclass();\n         }\n \n-        List<TestConfigProperty> testConfigProperties = new ArrayList<>();\n-        Collections.addAll(testConfigProperties, testClass.getAnnotationsByType(TestConfigProperty.class));\n-        for (TestConfigProperty testConfigProperty : testConfigProperties) {\n-            configProperties.put(testConfigProperty.key(), testConfigProperty.value());\n+        // All @Nested inner classes\n+        for (Class<?> nested : testClass.getDeclaredClasses()) {\n+            if (nested.isAnnotationPresent(Nested.class) && !Modifier.isStatic(nested.getModifiers())) {\n+                collectComponents(nested, addNestedClassesAsComponents, componentClasses);\n+            }\n         }\n-\n-        return new QuarkusComponentTestConfiguration(Map.copyOf(configProperties), Set.copyOf(componentClasses),\n-                this.mockConfigurators, useDefaultConfigProperties, addNestedClassesAsComponents, configSourceOrdinal,\n-                List.copyOf(annotationsTransformers), List.copyOf(configConverters), configBuilderCustomizer);\n     }\n \n     QuarkusComponentTestConfiguration update(Method testMethod) {\n\ndiff --git a/test-framework/junit5-component/src/main/java/io/quarkus/test/component/QuarkusComponentTestExtension.java b/test-framework/junit5-component/src/main/java/io/quarkus/test/component/QuarkusComponentTestExtension.java\nindex bf598bd71f352..6944ddb55d6d4 100644\n--- a/test-framework/junit5-component/src/main/java/io/quarkus/test/component/QuarkusComponentTestExtension.java\n+++ b/test-framework/junit5-component/src/main/java/io/quarkus/test/component/QuarkusComponentTestExtension.java\n@@ -188,6 +188,7 @@ public static QuarkusComponentTestExtensionBuilder builder() {\n     private static final String KEY_CONFIG = \"config\";\n     private static final String KEY_TEST_CLASS_CONFIG = \"testClassConfig\";\n     private static final String KEY_CONFIG_MAPPINGS = \"configMappings\";\n+    private static final String KEY_CONTAINER_STATE = \"containerState\";\n \n     private static final String QUARKUS_TEST_COMPONENT_OUTPUT_DIRECTORY = \"quarkus.test.component.output-directory\";\n \n@@ -225,7 +226,6 @@ public void beforeAll(ExtensionContext context) throws Exception {\n     @Override\n     public void afterAll(ExtensionContext context) throws Exception {\n         long start = System.nanoTime();\n-        // Stop the container if Lifecycle.PER_CLASS is used\n         stopContainer(context, Lifecycle.PER_CLASS);\n         cleanup(context);\n         LOG.debugf(\"afterAll: %s ms\", TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start));\n@@ -366,17 +366,25 @@ private void destroyDependentTestMethodParams(ExtensionContext context) {\n     }\n \n     private void buildContainer(ExtensionContext context) {\n+        if (getContainerState(context) != ContainerState.UNINITIALIZED) {\n+            return;\n+        }\n         QuarkusComponentTestConfiguration testClassConfiguration = baseConfiguration\n                 .update(context.getRequiredTestClass());\n         store(context).put(KEY_TEST_CLASS_CONFIG, testClassConfiguration);\n         ClassLoader oldTccl = initArcContainer(context, testClassConfiguration);\n         store(context).put(KEY_OLD_TCCL, oldTccl);\n+        setContainerState(context, ContainerState.INITIALIZED);\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     private void cleanup(ExtensionContext context) {\n+        if (getContainerState(context) != ContainerState.STOPPED) {\n+            return;\n+        }\n         ClassLoader oldTccl = store(context).get(KEY_OLD_TCCL, ClassLoader.class);\n         Thread.currentThread().setContextClassLoader(oldTccl);\n+        store(context).remove(KEY_OLD_TCCL);\n         store(context).remove(KEY_CONFIG_MAPPINGS);\n         Set<Path> generatedResources = store(context).get(KEY_GENERATED_RESOURCES, Set.class);\n         for (Path path : generatedResources) {\n@@ -387,14 +395,19 @@ private void cleanup(ExtensionContext context) {\n                 LOG.errorf(\"Unable to delete the generated resource %s: \", path, e.getMessage());\n             }\n         }\n+        store(context).remove(KEY_GENERATED_RESOURCES);\n+        setContainerState(context, ContainerState.UNINITIALIZED);\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     private void stopContainer(ExtensionContext context, Lifecycle testInstanceLifecycle) throws Exception {\n         if (testInstanceLifecycle.equals(context.getTestInstanceLifecycle().orElse(Lifecycle.PER_METHOD))) {\n+            if (getContainerState(context) != ContainerState.STARTED) {\n+                return;\n+            }\n             for (FieldInjector fieldInjector : (List<FieldInjector>) store(context)\n                     .get(KEY_INJECTED_FIELDS, List.class)) {\n-                fieldInjector.unset(context.getRequiredTestInstance());\n+                fieldInjector.unset();\n             }\n             try {\n                 Arc.shutdown();\n@@ -404,64 +417,93 @@ private void stopContainer(ExtensionContext context, Lifecycle testInstanceLifec\n             MockBeanCreator.clear();\n             ConfigBeanCreator.clear();\n             InterceptorMethodCreator.clear();\n+            store(context).remove(KEY_CONTAINER_STATE);\n \n             SmallRyeConfig config = store(context).get(KEY_CONFIG, SmallRyeConfig.class);\n             ConfigProviderResolver.instance().releaseConfig(config);\n-            ConfigProviderResolver\n-                    .setInstance(store(context).get(KEY_OLD_CONFIG_PROVIDER_RESOLVER,\n-                            ConfigProviderResolver.class));\n+            ConfigProviderResolver oldConfigProviderResolver = store(context).get(KEY_OLD_CONFIG_PROVIDER_RESOLVER,\n+                    ConfigProviderResolver.class);\n+            ConfigProviderResolver.setInstance(oldConfigProviderResolver);\n+            setContainerState(context, ContainerState.STOPPED);\n         }\n     }\n \n+    enum ContainerState {\n+        UNINITIALIZED,\n+        INITIALIZED,\n+        STARTED,\n+        STOPPED\n+    }\n+\n+    private ContainerState getContainerState(ExtensionContext context) {\n+        ContainerState state = store(context).get(KEY_CONTAINER_STATE, ContainerState.class);\n+        return state != null ? state : ContainerState.UNINITIALIZED;\n+    }\n+\n+    private void setContainerState(ExtensionContext context, ContainerState state) {\n+        store(context).put(KEY_CONTAINER_STATE, state);\n+    }\n+\n     private void startContainer(ExtensionContext context, Lifecycle testInstanceLifecycle) throws Exception {\n-        if (testInstanceLifecycle.equals(context.getTestInstanceLifecycle().orElse(Lifecycle.PER_METHOD))) {\n-            // Init ArC\n-            Arc.initialize();\n-\n-            QuarkusComponentTestConfiguration configuration = store(context).get(KEY_TEST_CLASS_CONFIG,\n-                    QuarkusComponentTestConfiguration.class);\n-            Optional<Method> testMethod = context.getTestMethod();\n-            if (testMethod.isPresent()) {\n-                configuration = configuration.update(testMethod.get());\n-            }\n+        if (!testInstanceLifecycle.equals(context.getTestInstanceLifecycle().orElse(Lifecycle.PER_METHOD))) {\n+            return;\n+        }\n+        ContainerState state = getContainerState(context);\n+        if (state == ContainerState.UNINITIALIZED) {\n+            throw new IllegalStateException(\"Container not initialized\");\n+        } else if (state == ContainerState.STARTED) {\n+            return;\n+        }\n+        // Init ArC\n+        Arc.initialize();\n+\n+        QuarkusComponentTestConfiguration configuration = store(context).get(KEY_TEST_CLASS_CONFIG,\n+                QuarkusComponentTestConfiguration.class);\n+        Optional<Method> testMethod = context.getTestMethod();\n+        if (testMethod.isPresent()) {\n+            configuration = configuration.update(testMethod.get());\n+        }\n \n-            ConfigProviderResolver oldConfigProviderResolver = ConfigProviderResolver.instance();\n-            store(context).put(KEY_OLD_CONFIG_PROVIDER_RESOLVER, oldConfigProviderResolver);\n-\n-            SmallRyeConfigProviderResolver smallRyeConfigProviderResolver = new SmallRyeConfigProviderResolver();\n-            ConfigProviderResolver.setInstance(smallRyeConfigProviderResolver);\n-\n-            // TCCL is now the QuarkusComponentTestClassLoader set during initialization\n-            ClassLoader tccl = Thread.currentThread().getContextClassLoader();\n-            SmallRyeConfigBuilder configBuilder = new SmallRyeConfigBuilder().forClassLoader(tccl)\n-                    .addDefaultInterceptors()\n-                    .withConverters(configuration.configConverters.toArray(new Converter<?>[] {}))\n-                    .addDefaultSources()\n-                    .withSources(\n-                            new QuarkusComponentTestConfigSource(configuration.configProperties,\n-                                    configuration.configSourceOrdinal));\n-            @SuppressWarnings(\"unchecked\")\n-            Set<ConfigClass> configMappings = store(context).get(KEY_CONFIG_MAPPINGS, Set.class);\n-            if (configMappings != null) {\n-                // Register the mappings found during bean discovery\n-                for (ConfigClass mapping : configMappings) {\n-                    configBuilder.withMapping(mapping);\n-                }\n-            }\n-            if (configuration.configBuilderCustomizer != null) {\n-                configuration.configBuilderCustomizer.accept(configBuilder);\n+        ConfigProviderResolver oldConfigProviderResolver = ConfigProviderResolver.instance();\n+        store(context).put(KEY_OLD_CONFIG_PROVIDER_RESOLVER, oldConfigProviderResolver);\n+\n+        SmallRyeConfigProviderResolver smallRyeConfigProviderResolver = new SmallRyeConfigProviderResolver();\n+        ConfigProviderResolver.setInstance(smallRyeConfigProviderResolver);\n+\n+        // TCCL is now the QuarkusComponentTestClassLoader set during initialization\n+        ClassLoader tccl = Thread.currentThread().getContextClassLoader();\n+        SmallRyeConfigBuilder configBuilder = new SmallRyeConfigBuilder().forClassLoader(tccl)\n+                .addDefaultInterceptors()\n+                .withConverters(configuration.configConverters.toArray(new Converter<?>[] {}))\n+                .addDefaultSources()\n+                .withSources(\n+                        new QuarkusComponentTestConfigSource(configuration.configProperties,\n+                                configuration.configSourceOrdinal));\n+        @SuppressWarnings(\"unchecked\")\n+        Set<ConfigClass> configMappings = store(context).get(KEY_CONFIG_MAPPINGS, Set.class);\n+        if (configMappings != null) {\n+            // Register the mappings found during bean discovery\n+            for (ConfigClass mapping : configMappings) {\n+                configBuilder.withMapping(mapping);\n             }\n-            SmallRyeConfig config = configBuilder.build();\n-            smallRyeConfigProviderResolver.registerConfig(config, tccl);\n-            store(context).put(KEY_CONFIG, config);\n-            ConfigBeanCreator.setClassLoader(tccl);\n-\n-            // Inject fields declated on the test class\n-            Object testInstance = context.getRequiredTestInstance();\n-            store(context).put(KEY_INJECTED_FIELDS, injectFields(context.getRequiredTestClass(), testInstance));\n-            // Injected test method parameters\n-            store(context).put(KEY_INJECTED_PARAMS, new CopyOnWriteArrayList<>());\n         }\n+        if (configuration.configBuilderCustomizer != null) {\n+            configuration.configBuilderCustomizer.accept(configBuilder);\n+        }\n+        SmallRyeConfig config = configBuilder.build();\n+        smallRyeConfigProviderResolver.registerConfig(config, tccl);\n+        store(context).put(KEY_CONFIG, config);\n+        ConfigBeanCreator.setClassLoader(tccl);\n+\n+        // Inject fields declared on test classes\n+        List<FieldInjector> injectedFields = new ArrayList<>();\n+        for (Object testInstance : context.getRequiredTestInstances().getAllInstances()) {\n+            injectedFields.addAll(injectFields(testInstance.getClass(), testInstance));\n+        }\n+        store(context).put(KEY_INJECTED_FIELDS, injectedFields);\n+        // Injected test method parameters\n+        store(context).put(KEY_INJECTED_PARAMS, new CopyOnWriteArrayList<>());\n+        setContainerState(context, ContainerState.STARTED);\n     }\n \n     private Store store(ExtensionContext context) {\n@@ -1094,11 +1136,13 @@ private List<Method> findMethods(Class<?> testClass, Predicate<Method> methodPre\n \n     static class FieldInjector {\n \n+        private final Object testInstance;\n         private final Field field;\n         private final Runnable unsetAction;\n \n         public FieldInjector(Field field, Object testInstance) throws Exception {\n             this.field = field;\n+            this.testInstance = testInstance;\n \n             ArcContainer container = Arc.container();\n             BeanManager beanManager = container.beanManager();\n@@ -1153,7 +1197,7 @@ public FieldInjector(Field field, Object testInstance) throws Exception {\n             field.set(testInstance, injectedInstance);\n         }\n \n-        void unset(Object testInstance) throws Exception {\n+        void unset() throws Exception {\n             if (unsetAction != null) {\n                 unsetAction.run();\n             }\n\ndiff --git a/test-framework/junit5-component/src/main/java/io/quarkus/test/component/TestConfigProperty.java b/test-framework/junit5-component/src/main/java/io/quarkus/test/component/TestConfigProperty.java\nindex f898c3adf23c4..1e51114b7fef5 100644\n--- a/test-framework/junit5-component/src/main/java/io/quarkus/test/component/TestConfigProperty.java\n+++ b/test-framework/junit5-component/src/main/java/io/quarkus/test/component/TestConfigProperty.java\n@@ -15,11 +15,12 @@\n /**\n  * Set the value of a configuration property.\n  * <p>\n- * If declared on a class then the configuration property is used for all test methods declared on the test class.\n+ * If declared on a top-level test class then the configuration property is used for all test methods declared on the test class\n+ * and all nested test classes.\n  * <p>\n  * If declared on a method then the configuration property is only used for that test method.\n- * If the test instance lifecycle is {@link Lifecycle#_PER_CLASS}, this annotation can only be used on the test class and is\n- * ignored on test methods.\n+ * If the test instance lifecycle is {@link Lifecycle#_PER_CLASS}, this annotation can only be declared on a top-level test\n+ * class, otherwise it's ignored.\n  * <p>\n  * Configuration properties declared on test methods take precedence over the configuration properties declared on test class.\n  *\n\ndiff --git a/test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/NestedNestedTest.java b/test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/NestedNestedTest.java\nnew file mode 100644\nindex 0000000000000..34aa164985e17\n--- /dev/null\n+++ b/test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/NestedNestedTest.java\n@@ -0,0 +1,53 @@\n+package io.quarkus.test.component.nested;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import jakarta.inject.Inject;\n+\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import io.quarkus.test.InjectMock;\n+import io.quarkus.test.component.QuarkusComponentTest;\n+import io.quarkus.test.component.TestConfigProperty;\n+import io.quarkus.test.component.beans.Charlie;\n+import io.quarkus.test.component.beans.MyComponent;\n+\n+@QuarkusComponentTest\n+@TestConfigProperty(key = \"foo\", value = \"BAR\")\n+public class NestedNestedTest {\n+\n+    @Inject\n+    MyComponent myComponent;\n+\n+    @InjectMock\n+    Charlie charlie;\n+\n+    @Test\n+    public void testPing() {\n+        Mockito.when(charlie.ping()).thenReturn(\"foo\");\n+        assertEquals(\"foo and BAR\", myComponent.ping());\n+    }\n+\n+    @Nested\n+    class Nested1 {\n+\n+        @Test\n+        public void testPing1() {\n+            Mockito.when(charlie.ping()).thenReturn(\"baz\");\n+            assertEquals(\"baz and BAR\", myComponent.ping());\n+        }\n+\n+        @Nested\n+        class Nested2 {\n+\n+            @Test\n+            @TestConfigProperty(key = \"foo\", value = \"RAB\")\n+            public void testPing2() {\n+                Mockito.when(charlie.ping()).thenReturn(\"baz\");\n+                assertEquals(\"baz and RAB\", myComponent.ping());\n+            }\n+        }\n+    }\n+}\n\ndiff --git a/test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/NestedParamInjectTest.java b/test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/NestedParamInjectTest.java\nnew file mode 100644\nindex 0000000000000..d4c9b2e6b1e52\n--- /dev/null\n+++ b/test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/NestedParamInjectTest.java\n@@ -0,0 +1,31 @@\n+package io.quarkus.test.component.nested;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import io.quarkus.test.InjectMock;\n+import io.quarkus.test.component.QuarkusComponentTest;\n+import io.quarkus.test.component.TestConfigProperty;\n+import io.quarkus.test.component.beans.Charlie;\n+import io.quarkus.test.component.beans.MyComponent;\n+\n+@QuarkusComponentTest\n+@TestConfigProperty(key = \"foo\", value = \"BAR\")\n+public class NestedParamInjectTest {\n+\n+    @InjectMock\n+    Charlie charlie;\n+\n+    @Nested\n+    class Nested1 {\n+\n+        @Test\n+        public void testPing1(MyComponent myComponent) {\n+            Mockito.when(charlie.ping()).thenReturn(\"baz\");\n+            assertEquals(\"baz and BAR\", myComponent.ping());\n+        }\n+    }\n+}\n\ndiff --git a/test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/NestedTest.java b/test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/NestedTest.java\nnew file mode 100644\nindex 0000000000000..86b8ef2e905a8\n--- /dev/null\n+++ b/test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/NestedTest.java\n@@ -0,0 +1,60 @@\n+package io.quarkus.test.component.nested;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import jakarta.inject.Inject;\n+\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import io.quarkus.test.InjectMock;\n+import io.quarkus.test.component.QuarkusComponentTest;\n+import io.quarkus.test.component.TestConfigProperty;\n+import io.quarkus.test.component.beans.Charlie;\n+import io.quarkus.test.component.beans.MyComponent;\n+\n+@QuarkusComponentTest\n+@TestConfigProperty(key = \"foo\", value = \"BAR\")\n+public class NestedTest {\n+\n+    @Inject\n+    MyComponent myComponent;\n+\n+    @InjectMock\n+    Charlie charlie;\n+\n+    @Test\n+    public void testPing() {\n+        Mockito.when(charlie.ping()).thenReturn(\"foo\");\n+        assertEquals(\"foo and BAR\", myComponent.ping());\n+    }\n+\n+    @TestConfigProperty(key = \"foo\", value = \"BANG\") // declared on nested test class -> ignored\n+    @Nested\n+    class Nested1 {\n+\n+        @InjectMock\n+        Charlie charlie;\n+\n+        @Test\n+        public void testPing1() {\n+            Mockito.when(charlie.ping()).thenReturn(\"baz\");\n+            assertEquals(\"baz and BAR\", myComponent.ping());\n+        }\n+    }\n+\n+    @Nested\n+    class Nested2 {\n+\n+        @Inject\n+        MyComponent myComponent;\n+\n+        @Test\n+        @TestConfigProperty(key = \"foo\", value = \"RAB\")\n+        public void testPing2() {\n+            Mockito.when(charlie.ping()).thenReturn(\"baz\");\n+            assertEquals(\"baz and RAB\", myComponent.ping());\n+        }\n+    }\n+}\n\ndiff --git a/test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/TopPerClassNestedPerClassTest.java b/test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/TopPerClassNestedPerClassTest.java\nnew file mode 100644\nindex 0000000000000..e9237f643effc\n--- /dev/null\n+++ b/test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/TopPerClassNestedPerClassTest.java\n@@ -0,0 +1,58 @@\n+package io.quarkus.test.component.nested;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import jakarta.inject.Inject;\n+\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.api.TestInstance.Lifecycle;\n+import org.mockito.Mockito;\n+\n+import io.quarkus.test.InjectMock;\n+import io.quarkus.test.component.QuarkusComponentTest;\n+import io.quarkus.test.component.TestConfigProperty;\n+import io.quarkus.test.component.beans.Charlie;\n+import io.quarkus.test.component.beans.MyComponent;\n+\n+@TestInstance(Lifecycle.PER_CLASS)\n+@QuarkusComponentTest\n+@TestConfigProperty(key = \"foo\", value = \"BAR\")\n+public class TopPerClassNestedPerClassTest {\n+\n+    @Inject\n+    MyComponent myComponent;\n+\n+    @InjectMock\n+    Charlie charlie;\n+\n+    @Test\n+    public void testPing() {\n+        Mockito.when(charlie.ping()).thenReturn(\"foo\");\n+        assertEquals(\"foo and BAR\", myComponent.ping());\n+    }\n+\n+    @Nested\n+    @TestInstance(Lifecycle.PER_CLASS)\n+    class Nested1 {\n+\n+        @Test\n+        public void testPing1() {\n+            Mockito.when(charlie.ping()).thenReturn(\"baz\");\n+            assertEquals(\"baz and BAR\", myComponent.ping());\n+        }\n+    }\n+\n+    @Nested\n+    @TestInstance(Lifecycle.PER_CLASS)\n+    class Nested2 {\n+\n+        @Test\n+        @TestConfigProperty(key = \"foo\", value = \"IGNORED\") // PER_CLASS -> ignored\n+        public void testPing2() {\n+            Mockito.when(charlie.ping()).thenReturn(\"baz\");\n+            assertEquals(\"baz and BAR\", myComponent.ping());\n+        }\n+    }\n+}\n\ndiff --git a/test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/TopPerClassNestedPerMethodTest.java b/test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/TopPerClassNestedPerMethodTest.java\nnew file mode 100644\nindex 0000000000000..9ac5acca466ca\n--- /dev/null\n+++ b/test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/TopPerClassNestedPerMethodTest.java\n@@ -0,0 +1,55 @@\n+package io.quarkus.test.component.nested;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import jakarta.inject.Inject;\n+\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.api.TestInstance.Lifecycle;\n+import org.mockito.Mockito;\n+\n+import io.quarkus.test.InjectMock;\n+import io.quarkus.test.component.QuarkusComponentTest;\n+import io.quarkus.test.component.TestConfigProperty;\n+import io.quarkus.test.component.beans.Charlie;\n+import io.quarkus.test.component.beans.MyComponent;\n+\n+@TestInstance(Lifecycle.PER_CLASS)\n+@QuarkusComponentTest\n+@TestConfigProperty(key = \"foo\", value = \"BAR\")\n+public class TopPerClassNestedPerMethodTest {\n+\n+    @Inject\n+    MyComponent myComponent;\n+\n+    @InjectMock\n+    Charlie charlie;\n+\n+    @Test\n+    public void testPing() {\n+        Mockito.when(charlie.ping()).thenReturn(\"foo\");\n+        assertEquals(\"foo and BAR\", myComponent.ping());\n+    }\n+\n+    @Nested\n+    class Nested1 {\n+\n+        @Test\n+        public void testPing1() {\n+            Mockito.when(charlie.ping()).thenReturn(\"baz\");\n+            assertEquals(\"baz and BAR\", myComponent.ping());\n+        }\n+    }\n+\n+    @Nested\n+    class Nested2 {\n+\n+        @Test\n+        public void testPing2() {\n+            Mockito.when(charlie.ping()).thenReturn(\"baz\");\n+            assertEquals(\"baz and BAR\", myComponent.ping());\n+        }\n+    }\n+}\n\ndiff --git a/test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/TopPerMethodNestedPerClassTest.java b/test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/TopPerMethodNestedPerClassTest.java\nnew file mode 100644\nindex 0000000000000..6e5384cb4f84c\n--- /dev/null\n+++ b/test-framework/junit5-component/src/test/java/io/quarkus/test/component/nested/TopPerMethodNestedPerClassTest.java\n@@ -0,0 +1,46 @@\n+package io.quarkus.test.component.nested;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import jakarta.inject.Inject;\n+\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.api.TestInstance.Lifecycle;\n+import org.mockito.Mockito;\n+\n+import io.quarkus.test.InjectMock;\n+import io.quarkus.test.component.QuarkusComponentTest;\n+import io.quarkus.test.component.TestConfigProperty;\n+import io.quarkus.test.component.beans.Charlie;\n+import io.quarkus.test.component.beans.MyComponent;\n+\n+@QuarkusComponentTest\n+@TestConfigProperty(key = \"foo\", value = \"BAR\")\n+public class TopPerMethodNestedPerClassTest {\n+\n+    @Inject\n+    MyComponent myComponent;\n+\n+    @InjectMock\n+    Charlie charlie;\n+\n+    @Test\n+    public void testPing() {\n+        Mockito.when(charlie.ping()).thenReturn(\"foo\");\n+        assertEquals(\"foo and BAR\", myComponent.ping());\n+    }\n+\n+    @Nested\n+    @TestInstance(Lifecycle.PER_CLASS)\n+    class Nested1 {\n+\n+        @Test\n+        public void testPing1() {\n+            Mockito.when(charlie.ping()).thenReturn(\"baz\");\n+            assertEquals(\"baz and BAR\", myComponent.ping());\n+        }\n+    }\n+\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46452",
    "pr_id": 46452,
    "issue_id": 46436,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Quarkus tooling use wrong version for create and update (when specifying stream)\n### Describe the bug\n\nFor example: `quarkus create app -S 3.17` creates a project using `3.17.0.CR1`\n\n### Quarkus version or git rev\n\n3.18\n",
    "issue_word_count": 38,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "independent-projects/tools/devtools-testing/src/test/java/io/quarkus/devtools/project/create/QuarkusPlatformArchivedStreamSelectionTest.java",
      "independent-projects/tools/registry-client/src/main/java/io/quarkus/registry/ExtensionCatalogResolver.java"
    ],
    "pr_changed_test_files": [
      "independent-projects/tools/devtools-testing/src/test/java/io/quarkus/devtools/project/create/QuarkusPlatformArchivedStreamSelectionTest.java"
    ],
    "base_commit": "2ca87c3682de9f4e16f28ae60967cbf5396ecb7b",
    "head_commit": "24fac495713be4896034d951ddcf7e8e422a95c2",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46452",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46452",
    "dockerfile": "",
    "pr_merged_at": "2025-02-24T16:47:31.000Z",
    "patch": "diff --git a/independent-projects/tools/registry-client/src/main/java/io/quarkus/registry/ExtensionCatalogResolver.java b/independent-projects/tools/registry-client/src/main/java/io/quarkus/registry/ExtensionCatalogResolver.java\nindex ce568498fc92d..894002c858264 100644\n--- a/independent-projects/tools/registry-client/src/main/java/io/quarkus/registry/ExtensionCatalogResolver.java\n+++ b/independent-projects/tools/registry-client/src/main/java/io/quarkus/registry/ExtensionCatalogResolver.java\n@@ -5,7 +5,6 @@\n import java.net.URL;\n import java.net.URLClassLoader;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n@@ -326,7 +325,8 @@ void addUpstreamQuarkusVersion(String quarkusVersion) {\n         }\n \n         List<RegistryExtensionResolver> getRegistriesForQuarkusCore(String quarkusVersion) {\n-            return registriesByQuarkusCore.computeIfAbsent(quarkusVersion, v -> getRegistriesForQuarkusVersion(v));\n+            return registriesByQuarkusCore.computeIfAbsent(quarkusVersion,\n+                    ExtensionCatalogResolver.this::getRegistriesForQuarkusVersion);\n         }\n \n         public int getCompatibilityCode(String quarkusVersion) {\n@@ -337,11 +337,7 @@ public int getCompatibilityCode(String quarkusVersion, String upstreamQuarkusVer\n             Integer i = compatibilityCodes.get(quarkusVersion);\n             if (i == null) {\n                 if (upstreamQuarkusVersion != null) {\n-                    i = compatibilityCodes.get(upstreamQuarkusVersion);\n-                    if (i == null) {\n-                        i = compatibilityCodes.size();\n-                        compatibilityCodes.put(upstreamQuarkusVersion, i);\n-                    }\n+                    i = compatibilityCodes.computeIfAbsent(upstreamQuarkusVersion, cc -> compatibilityCodes.size());\n                 } else {\n                     i = compatibilityCodes.size();\n                 }\n@@ -356,6 +352,16 @@ void appendAllNonPlatformExtensions() throws RegistryResolutionException {\n             }\n         }\n \n+        void addUpstreamExtensionCatalogs(String quarkusCoreVersion, Set<String> processedPlatformKeys)\n+                throws RegistryResolutionException {\n+            collectPlatformExtensions(quarkusCoreVersion, this, processedPlatformKeys);\n+            int i = 0;\n+            while (i < upstreamQuarkusVersions.size()) {\n+                collectPlatformExtensions(upstreamQuarkusVersions.get(i++), this, processedPlatformKeys);\n+            }\n+            upstreamQuarkusVersions.clear();\n+        }\n+\n         ExtensionCatalog build() throws RegistryResolutionException {\n             appendAllNonPlatformExtensions();\n             if (catalogs.isEmpty()) {\n@@ -474,12 +480,12 @@ public ExtensionCatalog resolveExtensionCatalog(String quarkusCoreVersion) throw\n     }\n \n     private ExtensionCatalog resolveExtensionCatalog(String quarkusCoreVersion,\n-            final ExtensionCatalogBuilder catalogBuilder, Set<String> preferredPlatforms)\n+            final ExtensionCatalogBuilder catalogBuilder, Set<String> preferredPlatformKeys)\n             throws RegistryResolutionException {\n-        collectPlatformExtensions(quarkusCoreVersion, catalogBuilder, preferredPlatforms);\n+        collectPlatformExtensions(quarkusCoreVersion, catalogBuilder, preferredPlatformKeys);\n         int i = 0;\n         while (i < catalogBuilder.upstreamQuarkusVersions.size()) {\n-            collectPlatformExtensions(catalogBuilder.upstreamQuarkusVersions.get(i++), catalogBuilder, preferredPlatforms);\n+            collectPlatformExtensions(catalogBuilder.upstreamQuarkusVersions.get(i++), catalogBuilder, preferredPlatformKeys);\n         }\n         return catalogBuilder.build();\n     }\n@@ -489,11 +495,11 @@ public ExtensionCatalog resolveExtensionCatalog(PlatformStreamCoords streamCoord\n         ensureRegistriesConfigured();\n \n         final PlatformStream stream = findPlatformStreamOrFail(streamCoords);\n-        final List<ExtensionCatalog> catalogs = new ArrayList<>();\n+        ExtensionCatalogBuilder catalogBuilder = new ExtensionCatalogBuilder();\n         for (PlatformRelease release : stream.getReleases()) {\n-            catalogs.add(resolveExtensionCatalog(release.getMemberBoms()));\n+            collectExtensionCatalogs(release.getMemberBoms(), catalogBuilder);\n         }\n-        return CatalogMergeUtility.merge(catalogs);\n+        return catalogBuilder.build();\n     }\n \n     protected PlatformStream findPlatformStreamOrFail(PlatformStreamCoords streamCoords)\n@@ -556,15 +562,13 @@ protected RegistryResolutionException unknownStreamException(PlatformStreamCoord\n                     break;\n                 }\n             }\n-            for (Platform platform : platforms.getPlatforms()) {\n-                knownPlatforms.add(platform);\n-            }\n+            knownPlatforms.addAll(platforms.getPlatforms());\n         }\n \n         final StringBuilder buf = new StringBuilder();\n         if (requestedPlatform != null) {\n             buf.append(\"Failed to locate stream \").append(stream.getStreamId())\n-                    .append(\" in platform \" + requestedPlatform.getPlatformKey());\n+                    .append(\" in platform \").append(requestedPlatform.getPlatformKey());\n         } else if (knownPlatforms.isEmpty()) {\n             buf.append(\"None of the registries provided any platform\");\n         } else {\n@@ -582,18 +586,27 @@ protected RegistryResolutionException unknownStreamException(PlatformStreamCoord\n         return new RegistryResolutionException(buf.toString());\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     public ExtensionCatalog resolveExtensionCatalog(Collection<ArtifactCoords> preferredPlatforms)\n             throws RegistryResolutionException {\n         if (preferredPlatforms.isEmpty()) {\n             return resolveExtensionCatalog();\n         }\n-\n         final ExtensionCatalogBuilder catalogBuilder = new ExtensionCatalogBuilder();\n-        final Set<String> preferredPlatformKeys = new HashSet<>();\n+        collectExtensionCatalogs(preferredPlatforms, catalogBuilder);\n+        return catalogBuilder.build();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private void collectExtensionCatalogs(Collection<ArtifactCoords> preferredPlatforms, ExtensionCatalogBuilder catalogBuilder)\n+            throws RegistryResolutionException {\n+        final Set<String> preferredPlatformKeys = new HashSet<>(4);\n+        final Set<ArtifactCoords> addedPlatformBoms = new HashSet<>();\n         String quarkusVersion = null;\n         int platformIndex = 0;\n         for (ArtifactCoords bom : preferredPlatforms) {\n+            if (!addedPlatformBoms.add(bom)) {\n+                continue;\n+            }\n             final List<RegistryExtensionResolver> registries;\n             try {\n                 registries = filterRegistries(r -> r.checkPlatform(bom));\n@@ -657,12 +670,11 @@ public ExtensionCatalog resolveExtensionCatalog(Collection<ArtifactCoords> prefe\n                         if (!preferredPlatformKeys.add(platformKey)) {\n                             continue;\n                         }\n-                        final Platform.Mutable p = Platform.builder()\n-                                .setPlatformKey(platformKey);\n+                        final Platform.Mutable platform = Platform.builder().setPlatformKey(platformKey);\n \n                         final PlatformStream.Mutable stream = PlatformStream.builder()\n                                 .setId(String.valueOf(md.getOrDefault(\"stream\", \"default\")));\n-                        p.addStream(stream);\n+                        platform.addStream(stream);\n \n                         final PlatformRelease.Mutable release = PlatformRelease.builder()\n                                 .setVersion(PlatformReleaseVersion\n@@ -674,14 +686,16 @@ public ExtensionCatalog resolveExtensionCatalog(Collection<ArtifactCoords> prefe\n                         o = md.get(\"members\");\n                         if (o != null) {\n                             final Collection<String> col = (Collection<String>) o;\n-                            final List<ArtifactCoords> coords = new ArrayList<>(col.size());\n+                            final List<ArtifactCoords> memberCatalogs = new ArrayList<>(col.size());\n                             for (String s : col) {\n-                                coords.add(ArtifactCoords.fromString(s));\n+                                var memberCatalogCoords = ArtifactCoords.fromString(s);\n+                                memberCatalogs.add(memberCatalogCoords);\n+                                addedPlatformBoms.add(PlatformArtifacts.getBomArtifactForCatalog(memberCatalogCoords));\n                             }\n-                            release.setMemberBoms(coords);\n+                            release.setMemberBoms(memberCatalogs);\n                         }\n \n-                        collectPlatformExtensions(quarkusVersion, catalogBuilder, registry, platformIndex, p);\n+                        collectPlatformExtensions(catalogBuilder, registry, platformIndex, platform);\n                         continue;\n                     }\n                 }\n@@ -709,10 +723,8 @@ public ExtensionCatalog resolveExtensionCatalog(Collection<ArtifactCoords> prefe\n                 }\n                 throw new RegistryResolutionException(buf.toString());\n             }\n-            return catalogBuilder.catalogs.isEmpty() ? null : catalogBuilder.build();\n         }\n-        return preferredPlatforms.isEmpty() ? catalogBuilder.build()\n-                : resolveExtensionCatalog(quarkusVersion, catalogBuilder, preferredPlatformKeys);\n+        catalogBuilder.addUpstreamExtensionCatalogs(quarkusVersion, preferredPlatformKeys);\n     }\n \n     public void clearRegistryCache() throws RegistryResolutionException {\n@@ -736,7 +748,7 @@ private void appendNonPlatformExtensions(\n         }\n     }\n \n-    public void appendNonPlatformExtensions(RegistryExtensionResolver registry, ExtensionCatalogBuilder catalogBuilder,\n+    private void appendNonPlatformExtensions(RegistryExtensionResolver registry, ExtensionCatalogBuilder catalogBuilder,\n             String quarkusVersion) throws RegistryResolutionException {\n         final ExtensionCatalog.Mutable nonPlatformCatalog = registry.resolveNonPlatformExtensions(quarkusVersion);\n         if (nonPlatformCatalog == null) {\n@@ -766,7 +778,7 @@ private int getRegistryIndex(String registryId) {\n     }\n \n     private void collectPlatformExtensions(String quarkusCoreVersion, ExtensionCatalogBuilder catalogBuilder,\n-            Set<String> processedPlatforms)\n+            Set<String> processedPlatformKeys)\n             throws RegistryResolutionException {\n         final List<RegistryExtensionResolver> quarkusVersionRegistries = catalogBuilder\n                 .getRegistriesForQuarkusCore(quarkusCoreVersion);\n@@ -780,18 +792,18 @@ private void collectPlatformExtensions(String quarkusCoreVersion, ExtensionCatal\n             if (platforms.isEmpty()) {\n                 continue;\n             }\n-            int platformIndex = processedPlatforms.size();\n+            int platformIndex = processedPlatformKeys.size();\n             for (Platform p : platforms) {\n-                if (processedPlatforms.contains(p.getPlatformKey())) {\n+                if (processedPlatformKeys.contains(p.getPlatformKey())) {\n                     continue;\n                 }\n                 ++platformIndex;\n-                collectPlatformExtensions(quarkusCoreVersion, catalogBuilder, registry, platformIndex, p);\n+                collectPlatformExtensions(catalogBuilder, registry, platformIndex, p);\n             }\n         }\n     }\n \n-    private void collectPlatformExtensions(String quarkusCoreVersion, ExtensionCatalogBuilder catalogBuilder,\n+    private void collectPlatformExtensions(ExtensionCatalogBuilder catalogBuilder,\n             RegistryExtensionResolver registry, int platformIndex,\n             Platform p) throws RegistryResolutionException {\n \n@@ -880,6 +892,6 @@ private List<RegistryExtensionResolver> filterRegistries(Function<RegistryExtens\n             throw new ExclusiveProviderConflictException(conflicts);\n         }\n \n-        return exclusiveProvider == null ? filtered == null ? registries : filtered : Arrays.asList(exclusiveProvider);\n+        return exclusiveProvider == null ? filtered == null ? registries : filtered : List.of(exclusiveProvider);\n     }\n }\n",
    "test_patch": "diff --git a/independent-projects/tools/devtools-testing/src/test/java/io/quarkus/devtools/project/create/QuarkusPlatformArchivedStreamSelectionTest.java b/independent-projects/tools/devtools-testing/src/test/java/io/quarkus/devtools/project/create/QuarkusPlatformArchivedStreamSelectionTest.java\nnew file mode 100644\nindex 0000000000000..1562e9a0fd6dd\n--- /dev/null\n+++ b/independent-projects/tools/devtools-testing/src/test/java/io/quarkus/devtools/project/create/QuarkusPlatformArchivedStreamSelectionTest.java\n@@ -0,0 +1,131 @@\n+package io.quarkus.devtools.project.create;\n+\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.devtools.testing.registry.client.TestRegistryClientBuilder;\n+import io.quarkus.maven.dependency.ArtifactCoords;\n+import io.quarkus.registry.catalog.PlatformStreamCoords;\n+\n+public class QuarkusPlatformArchivedStreamSelectionTest extends MultiplePlatformBomsTestBase {\n+\n+    private static final String ACME_PLATFORM_KEY = \"org.acme.platform\";\n+\n+    @BeforeAll\n+    public static void setup() throws Exception {\n+        TestRegistryClientBuilder.newInstance()\n+                //.debug()\n+                .baseDir(configDir())\n+                // registry\n+                .newRegistry(\"registry.acme.org\")\n+                // platform key\n+                .newPlatform(ACME_PLATFORM_KEY)\n+                // 3.0 STREAM\n+                .newStream(\"3.0\")\n+                // 3.0.5 release\n+                .newRelease(\"3.0.5\")\n+                .quarkusVersion(\"3.0.5\")\n+                // default bom including quarkus-core + essential metadata\n+                .addCoreMember().release()\n+                .newMember(\"acme-zoo-bom\").addExtension(\"org.acme\", \"acme-rabbit\", \"3.0.5\")\n+                .release().stream().platform()\n+                // 2.0 STREAM\n+                .newArchivedStream(\"2.0\")\n+                .newRelease(\"2.0.5\")\n+                .quarkusVersion(\"2.0.5\")\n+                // default bom including quarkus-core + essential metadata\n+                .addCoreMember().release()\n+                .newMember(\"acme-zoo-bom\").addExtension(\"org.acme\", \"acme-rabbit\", \"2.0.5\")\n+                .release().stream()\n+                .newRelease(\"2.0.4\")\n+                .quarkusVersion(\"2.0.4\")\n+                // default bom including quarkus-core + essential metadata\n+                .addCoreMember().release()\n+                .newMember(\"acme-zoo-bom\").addExtension(\"org.acme\", \"acme-rabbit\", \"2.0.4\")\n+                .release().stream()\n+                .newRelease(\"2.0.3\")\n+                .quarkusVersion(\"2.0.3\")\n+                // default bom including quarkus-core + essential metadata\n+                .addCoreMember().release()\n+                .newMember(\"acme-zoo-bom\")\n+                .addExtension(\"org.acme\", \"acme-rabbit\", \"2.0.3\")\n+                .addExtension(\"org.acme\", \"acme-giraffe\", \"2.0.3\")\n+                .release().stream().platform()\n+                // 1.0 STREAM\n+                .newStream(\"1.0\")\n+                .newRelease(\"1.0.5\")\n+                .quarkusVersion(\"1.0.5\")\n+                // default bom including quarkus-core + essential metadata\n+                .addCoreMember().release()\n+                .newMember(\"acme-zoo-bom\")\n+                .addExtension(\"org.acme\", \"acme-rabbit\", \"1.0.5\")\n+                .addExtension(\"org.acme\", \"acme-giraffe\", \"1.0.5\")\n+                .registry()\n+                .clientBuilder()\n+                .build();\n+\n+        enableRegistryClient();\n+    }\n+\n+    protected String getMainPlatformKey() {\n+        return ACME_PLATFORM_KEY;\n+    }\n+\n+    @Test\n+    public void testLatestRecommendedStream() throws Exception {\n+        final Path projectDir = newProjectDir(\"latest-recommended-stream-selection\");\n+        createProject(projectDir, List.of(\"acme-rabbit\"));\n+\n+        assertModel(projectDir,\n+                toPlatformBomCoords(\"acme-zoo-bom\"),\n+                List.of(ArtifactCoords.jar(\"org.acme\", \"acme-rabbit\", null)),\n+                \"3.0.5\");\n+    }\n+\n+    @Test\n+    public void testLatestRecommendedMatchingStreamRelease() throws Exception {\n+        final Path projectDir = newProjectDir(\"latest-recommended-matching-stream\");\n+        createProject(projectDir, List.of(\"acme-rabbit\", \"acme-giraffe\"));\n+\n+        assertModel(projectDir,\n+                toPlatformBomCoords(\"acme-zoo-bom\"),\n+                List.of(ArtifactCoords.jar(\"org.acme\", \"acme-rabbit\", null),\n+                        ArtifactCoords.jar(\"org.acme\", \"acme-giraffe\", null)),\n+                \"1.0.5\");\n+    }\n+\n+    @Test\n+    public void testArchivedStreamSelection() throws Exception {\n+        final Path projectDir = newProjectDir(\"archived-stream-selection\");\n+        createProject(projectDir, new PlatformStreamCoords(ACME_PLATFORM_KEY, \"2.0\"),\n+                List.of(\"acme-rabbit\"));\n+\n+        assertModel(projectDir,\n+                toPlatformBomCoords(\"acme-zoo-bom\"),\n+                List.of(ArtifactCoords.jar(\"org.acme\", \"acme-rabbit\", null)),\n+                \"2.0.5\");\n+    }\n+\n+    /**\n+     * This one may seem like an edge case. This test makes sure a release that includes an extension\n+     * that was removed in later releases in the same stream still gets selected when that extension\n+     * is requested by a user.\n+     *\n+     * @throws Exception in case of an error\n+     */\n+    @Test\n+    public void testArchivedMatchingStreamRelease() throws Exception {\n+        final Path projectDir = newProjectDir(\"archived-stream-selection\");\n+        createProject(projectDir, new PlatformStreamCoords(ACME_PLATFORM_KEY, \"2.0\"),\n+                List.of(\"acme-rabbit\", \"acme-giraffe\"));\n+\n+        assertModel(projectDir,\n+                toPlatformBomCoords(\"acme-zoo-bom\"),\n+                List.of(ArtifactCoords.jar(\"org.acme\", \"acme-rabbit\", null),\n+                        ArtifactCoords.jar(\"org.acme\", \"acme-giraffe\", null)),\n+                \"2.0.3\");\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-46429",
    "pr_id": 46429,
    "issue_id": 42613,
    "repo": "quarkusio/quarkus",
    "problem_statement": "Conflict between form-based auth logout and quarkus.http.auth.form.new-cookie-interval\n### Describe the bug\r\n\r\nHello. Maybe I'm missing something, but have a look (example project at https://github.com/ksdev-pl/quarkus-logout-conflict):\r\n\r\nLet's say we have a simple form-based authentication with logout method implemented according to the documentation (https://quarkus.io/guides/security-authentication-mechanisms#form-auth):\r\n```java\r\n    @GET\r\n    @Path(\"logout\")\r\n    public Response logout() {\r\n        if (identity.getIdentity().isAnonymous()) {\r\n            throw new UnauthorizedException(\"Not authenticated\");\r\n        }\r\n        final NewCookie removeCookie = new NewCookie.Builder(authCookieName)\r\n            .maxAge(0)\r\n            .expiry(Date.from(Instant.EPOCH))\r\n            .path(\"/\")\r\n            .build();\r\n        return Response.seeOther(URI.create(\"/auth/login\"))\r\n            .cookie(removeCookie)\r\n            .build();\r\n    }\r\n```\r\n\r\nLet's test it:\r\n\r\n1. We login using `POST http://localhost:8080/j_security_check` - this sets the `quarkus-credential` cookie.\r\n2. After successful login we access the protected page.\r\n3. On the protected page we click on \"logout\", which destroys the cookie and redirects us back to the `/login` page.\r\nLogout response headers look like this:\r\n```http\r\nHTTP/1.1 303 See Other\r\nLocation: http://localhost:8080/auth/login\r\nSet-Cookie: quarkus-credential=;Version=1;Path=/;Max-Age=0;Expires=Thu, 01-Jan-1970 00:00:00 GMT\r\ncontent-length: 0\r\n```\r\nEverything is fine and dandy, we're logged out.\r\n\r\nNow let's take the `quarkus.http.auth.form.new-cookie-interval` into consideration, which by default is 1 minute:\r\n\r\n1. We login using `POST http://localhost:8080/j_security_check` - this sets the `quarkus-credential` cookie.\r\n2. After successful login we access the protected page.\r\n3. We wait more than 1 minute.\r\n3. On the protected page we click on \"logout\", which _should_ destroy the cookie and redirects us back to the `/login` page.\r\nLogout response headers look like this:\r\n```http\r\nHTTP/1.1 303 See Other\r\nLocation: http://localhost:8080/auth/login\r\nSet-Cookie: quarkus-credential=;Version=1;Path=/;Max-Age=0;Expires=Thu, 01-Jan-1970 00:00:00 GMT\r\ncontent-length: 0\r\nset-cookie: quarkus-credential=DD0QkzbLhLqcmjoqf6QvrSHRsLZRm0VmXp9ILRCpfMKh4A8dGI9kwHMSo5g89hKt; Path=/; SameSite=Strict\r\n```\r\n\r\nWe see the login screen, job well done, we implemented the logout? Nope, the user is still logged in and protected resources are still accessible (and stays logged in for the duration of `quarkus.http.auth.form.timeout`).\r\n\r\nYou see the issue in the headers - \"destroy\" cookie is overwritten by the \"new-cookie-interval-cookie\", or whatever is its name (at least I guess that it's new-cookie-interval functionality).\r\n\r\nIt looks like using default Quarkus configuration (new-cookie-interval equal to 1 minute) and example from documentation (logout code) we can easily arrive at a not-obviously non-working logout.\r\n\r\n### Expected behavior\r\n\r\nAuth cookie is destroyed during logout.\r\n\r\n### Actual behavior\r\n\r\nAuth cookie is not destroyed during logout if request was made after `new-cookie-interval` time.\r\n\r\n### How to Reproduce?\r\n\r\nSteps in description above. Basic example project: https://github.com/ksdev-pl/quarkus-logout-conflict\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\nLinux fedora 6.10.4-200.fc40.x86_64 #1 SMP PREEMPT_DYNAMIC Sun Aug 11 15:32:50 UTC 2024 x86_64 GNU/Linux\r\n\r\n### Output of `java -version`\r\n\r\nopenjdk 21.0.1 2023-10-17 LTS\r\n\r\n### Quarkus version or git rev\r\n\r\nQuarkus 3.13.2\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\nApache Maven 3.9.6 (Red Hat 3.9.6-6)\r\n\r\n### Additional information\r\n\r\n_No response_",
    "issue_word_count": 548,
    "test_files_count": 1,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "docs/src/main/asciidoc/security-authentication-mechanisms.adoc",
      "extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/FormAuthRedirectTestCase.java",
      "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/FormAuthenticationMechanism.java",
      "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/PersistentLoginManager.java"
    ],
    "pr_changed_test_files": [
      "extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/FormAuthRedirectTestCase.java"
    ],
    "base_commit": "349b9085e1cca7c1879d1741b50ae94f4754c89b",
    "head_commit": "cc73513e21412d82d5a0cace374ae687a9c02c19",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/46429",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/46429",
    "dockerfile": "",
    "pr_merged_at": "2025-02-23T18:11:14.000Z",
    "patch": "diff --git a/docs/src/main/asciidoc/security-authentication-mechanisms.adoc b/docs/src/main/asciidoc/security-authentication-mechanisms.adoc\nindex 05a340047a827..1bc1597a9f68e 100644\n--- a/docs/src/main/asciidoc/security-authentication-mechanisms.adoc\n+++ b/docs/src/main/asciidoc/security-authentication-mechanisms.adoc\n@@ -194,8 +194,10 @@ code to destroy the cookie.\n \n [source,java]\n ----\n-@ConfigProperty(name = \"quarkus.http.auth.form.cookie-name\")\n-String cookieName;\n+import io.quarkus.security.identity.CurrentIdentityAssociation;\n+import io.quarkus.vertx.http.runtime.security.FormAuthenticationMechanism;\n+import jakarta.ws.rs.core.Response;\n+import jakarta.ws.rs.POST;\n \n @Inject\n CurrentIdentityAssociation identity;\n@@ -205,15 +207,11 @@ public Response logout() {\n     if (identity.getIdentity().isAnonymous()) {\n         throw new UnauthorizedException(\"Not authenticated\");\n     }\n-    final NewCookie removeCookie = new NewCookie.Builder(cookieName)\n-            .maxAge(0)\n-            .expiry(Date.from(Instant.EPOCH))\n-            .path(\"/\")\n-            .build();\n-    return Response.noContent().cookie(removeCookie).build();\n+    FormAuthenticationMechanism.logout(identity.getIdentity()); <1>\n+    return Response.noContent().build();\n }\n-\n ----\n+<1> Perform the logout by removing the session cookie.\n \n The following properties can be used to configure form-based authentication:\n \n\ndiff --git a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/FormAuthenticationMechanism.java b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/FormAuthenticationMechanism.java\nindex 8f2ec29f346d2..aafe43e09d308 100644\n--- a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/FormAuthenticationMechanism.java\n+++ b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/FormAuthenticationMechanism.java\n@@ -2,6 +2,7 @@\n \n import static io.quarkus.security.spi.runtime.SecurityEventHelper.fire;\n import static io.quarkus.vertx.http.runtime.security.FormAuthenticationEvent.createLoginEvent;\n+import static io.quarkus.vertx.http.runtime.security.RoutingContextAwareSecurityIdentity.addRoutingCtxToIdentityIfMissing;\n \n import java.net.URI;\n import java.security.SecureRandom;\n@@ -9,9 +10,11 @@\n import java.util.Arrays;\n import java.util.Base64;\n import java.util.HashSet;\n+import java.util.Objects;\n import java.util.Optional;\n import java.util.Set;\n import java.util.function.Consumer;\n+import java.util.function.Function;\n \n import jakarta.enterprise.event.Event;\n import jakarta.enterprise.inject.spi.BeanManager;\n@@ -41,11 +44,13 @@\n import io.vertx.core.http.Cookie;\n import io.vertx.core.http.CookieSameSite;\n import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.impl.CookieImpl;\n import io.vertx.ext.web.RoutingContext;\n \n public class FormAuthenticationMechanism implements HttpAuthenticationMechanism {\n     private static final String FORM = \"form\";\n-\n+    private static final String COOKIE_NAME = \"io.quarkus.vertx.http.runtime.security.form.cookie-name\";\n+    private static final String COOKIE_PATH = \"io.quarkus.vertx.http.runtime.security.form.cookie-path\";\n     private static final Logger log = Logger.getLogger(FormAuthenticationMechanism.class);\n \n     private final String loginPage;\n@@ -261,7 +266,16 @@ public Uni<SecurityIdentity> authenticate(RoutingContext context,\n         if (context.normalizedPath().endsWith(postLocation) && context.request().method().equals(HttpMethod.POST)) {\n             //we always re-auth if it is a post to the auth URL\n             context.put(HttpAuthenticationMechanism.class.getName(), this);\n-            return runFormAuth(context, identityProviderManager);\n+            return runFormAuth(context, identityProviderManager)\n+                    .onItem().ifNotNull().transform(new Function<SecurityIdentity, SecurityIdentity>() {\n+                        @Override\n+                        public SecurityIdentity apply(SecurityIdentity identity) {\n+                            // used for logout\n+                            context.put(COOKIE_NAME, loginManager.getCookieName());\n+                            context.put(COOKIE_PATH, cookiePath);\n+                            return addRoutingCtxToIdentityIfMissing(identity, context);\n+                        }\n+                    });\n         } else {\n             PersistentLoginManager.RestoreResult result = loginManager.restore(context);\n             if (result != null) {\n@@ -274,6 +288,14 @@ public Uni<SecurityIdentity> authenticate(RoutingContext context,\n                     public void accept(SecurityIdentity securityIdentity) {\n                         loginManager.save(securityIdentity, context, result, context.request().isSSL());\n                     }\n+                }).onItem().ifNotNull().transform(new Function<SecurityIdentity, SecurityIdentity>() {\n+                    @Override\n+                    public SecurityIdentity apply(SecurityIdentity identity) {\n+                        // used for logout\n+                        context.put(COOKIE_NAME, loginManager.getCookieName());\n+                        context.put(COOKIE_PATH, cookiePath);\n+                        return addRoutingCtxToIdentityIfMissing(identity, context);\n+                    }\n                 });\n             }\n             return Uni.createFrom().optional(Optional.empty());\n@@ -311,6 +333,21 @@ public Uni<HttpCredentialTransport> getCredentialTransport(RoutingContext contex\n         return Uni.createFrom().item(new HttpCredentialTransport(HttpCredentialTransport.Type.POST, postLocation, FORM));\n     }\n \n+    public static void logout(SecurityIdentity securityIdentity) {\n+        RoutingContext routingContext = HttpSecurityUtils.getRoutingContextAttribute(securityIdentity);\n+        logout(routingContext);\n+    }\n+\n+    public static void logout(RoutingContext routingContext) {\n+        Objects.requireNonNull(routingContext);\n+        String cookieName = Objects.requireNonNull(routingContext.get(COOKIE_NAME));\n+        String cookiePath = Objects.requireNonNull(routingContext.get(COOKIE_PATH));\n+        Cookie cookie = new CookieImpl(cookieName, \"\");\n+        cookie.setMaxAge(0);\n+        cookie.setPath(cookiePath);\n+        routingContext.response().addCookie(cookie);\n+    }\n+\n     private static String startWithSlash(String page) {\n         if (page == null) {\n             return null;\n\ndiff --git a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/PersistentLoginManager.java b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/PersistentLoginManager.java\nindex 4420db3bcc539..0ef05939fb0b6 100644\n--- a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/PersistentLoginManager.java\n+++ b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/PersistentLoginManager.java\n@@ -167,6 +167,10 @@ public void clear(RoutingContext ctx) {\n         ctx.response().removeCookie(cookieName);\n     }\n \n+    String getCookieName() {\n+        return cookieName;\n+    }\n+\n     public static class RestoreResult {\n \n         private final String principal;\n",
    "test_patch": "diff --git a/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/FormAuthRedirectTestCase.java b/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/FormAuthRedirectTestCase.java\nindex 9c15131dbe65b..92c11328ba86f 100644\n--- a/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/FormAuthRedirectTestCase.java\n+++ b/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/FormAuthRedirectTestCase.java\n@@ -1,22 +1,45 @@\n package io.quarkus.resteasy.reactive.server.test.security;\n \n+import static io.restassured.matcher.RestAssuredMatchers.detailedCookie;\n import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.notNullValue;\n import static org.hamcrest.Matchers.nullValue;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n \n+import java.net.URI;\n+import java.time.Duration;\n import java.util.function.Supplier;\n \n+import jakarta.enterprise.context.ApplicationScoped;\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.core.Response;\n+\n import org.jboss.shrinkwrap.api.ShrinkWrap;\n import org.jboss.shrinkwrap.api.asset.StringAsset;\n import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.RegisterExtension;\n \n+import io.quarkus.security.Authenticated;\n+import io.quarkus.security.UnauthorizedException;\n+import io.quarkus.security.identity.AuthenticationRequestContext;\n+import io.quarkus.security.identity.CurrentIdentityAssociation;\n+import io.quarkus.security.identity.IdentityProvider;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import io.quarkus.security.identity.request.TrustedAuthenticationRequest;\n+import io.quarkus.security.runtime.QuarkusPrincipal;\n+import io.quarkus.security.runtime.QuarkusSecurityIdentity;\n import io.quarkus.security.test.utils.TestIdentityController;\n import io.quarkus.security.test.utils.TestIdentityProvider;\n import io.quarkus.test.QuarkusUnitTest;\n+import io.quarkus.vertx.http.runtime.security.FormAuthenticationMechanism;\n import io.restassured.RestAssured;\n import io.restassured.filter.cookie.CookieFilter;\n+import io.smallrye.mutiny.Uni;\n \n public class FormAuthRedirectTestCase {\n \n@@ -25,14 +48,21 @@ public class FormAuthRedirectTestCase {\n         @Override\n         public JavaArchive get() {\n             return ShrinkWrap.create(JavaArchive.class)\n-                    .addClasses(TestIdentityProvider.class, TestIdentityController.class)\n-                    .addAsResource(new StringAsset(\"quarkus.http.auth.form.enabled=true\\n\"), \"application.properties\");\n+                    .addClasses(TestIdentityProvider.class, TestIdentityController.class, FormAuthResource.class,\n+                            TrustedIdentityProvider.class)\n+                    .addAsResource(new StringAsset(\"\"\"\n+                            quarkus.http.auth.form.enabled=true\n+                            quarkus.http.auth.form.landing-page=/hello\n+                            quarkus.http.auth.form.new-cookie-interval=PT1S\n+                            \"\"\"), \"application.properties\");\n         }\n     });\n \n     @BeforeAll\n     public static void setup() {\n-        TestIdentityController.resetRoles().add(\"a d m i n\", \"a d m i n\", \"a d m i n\");\n+        TestIdentityController.resetRoles()\n+                .add(\"a d m i n\", \"a d m i n\", \"a d m i n\")\n+                .add(\"user\", \"user\");\n     }\n \n     @Test\n@@ -53,4 +83,123 @@ public void testFormAuthFailure() {\n                 .header(\"quarkus-credential\", nullValue());\n     }\n \n+    @Test\n+    public void testFormAuthLoginLogout() throws InterruptedException {\n+        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();\n+        CookieFilter cookies = new CookieFilter();\n+        var response = RestAssured\n+                .given()\n+                .filter(cookies)\n+                .redirects().follow(false)\n+                .when()\n+                .get(\"/hello\")\n+                .then()\n+                .assertThat()\n+                .statusCode(302)\n+                .header(\"location\", containsString(\"/login.html\"))\n+                .extract();\n+        assertNull(response.cookie(\"quarkus-credential\"));\n+\n+        RestAssured\n+                .given()\n+                .filter(cookies)\n+                .redirects().follow(false)\n+                .when()\n+                .formParam(\"j_username\", \"user\")\n+                .formParam(\"j_password\", \"user\")\n+                .post(\"/j_security_check\")\n+                .then()\n+                .assertThat()\n+                .statusCode(302)\n+                .header(\"location\", containsString(\"/hello\"))\n+                .cookie(\"quarkus-credential\", detailedCookie().value(notNullValue()).sameSite(\"Strict\").path(\"/\"));\n+\n+        RestAssured\n+                .given()\n+                .filter(cookies)\n+                .redirects().follow(false)\n+                .when()\n+                .get(\"/hello\")\n+                .then()\n+                .assertThat()\n+                .statusCode(200)\n+                .body(equalTo(\"hello user\"));\n+\n+        Thread.sleep(Duration.ofSeconds(2).toMillis());\n+\n+        response = RestAssured\n+                .given()\n+                .filter(cookies)\n+                .redirects().follow(false)\n+                .when()\n+                .get(\"/logout\")\n+                .then()\n+                .assertThat()\n+                .statusCode(303)\n+                .header(\"location\", containsString(\"/\"))\n+                .extract();\n+        String credentialsCookieValue = response.cookie(\"quarkus-credential\");\n+        Assertions.assertTrue(credentialsCookieValue == null || credentialsCookieValue.isEmpty(),\n+                \"Expected credentials cookie was removed, but actual value was \" + credentialsCookieValue);\n+\n+        response = RestAssured\n+                .given()\n+                .filter(cookies)\n+                .redirects().follow(false)\n+                .when()\n+                .get(\"/hello\")\n+                .then()\n+                .assertThat()\n+                .statusCode(302)\n+                .header(\"location\", containsString(\"/login.html\"))\n+                .extract();\n+        credentialsCookieValue = response.cookie(\"quarkus-credential\");\n+        Assertions.assertTrue(credentialsCookieValue == null || credentialsCookieValue.isEmpty());\n+    }\n+\n+    @Path(\"/\")\n+    public static class FormAuthResource {\n+\n+        private final CurrentIdentityAssociation identity;\n+\n+        public FormAuthResource(CurrentIdentityAssociation identity) {\n+            this.identity = identity;\n+        }\n+\n+        @Authenticated\n+        @GET\n+        @Path(\"hello\")\n+        public String hello() {\n+            return \"hello \" + identity.getIdentity().getPrincipal().getName();\n+        }\n+\n+        @GET\n+        @Path(\"logout\")\n+        public Response logout() {\n+            if (identity.getIdentity().isAnonymous()) {\n+                throw new UnauthorizedException(\"Not authenticated\");\n+            }\n+            FormAuthenticationMechanism.logout(identity.getIdentity());\n+            return Response.seeOther(URI.create(\"/\"))\n+                    .build();\n+        }\n+    }\n+\n+    @ApplicationScoped\n+    public static class TrustedIdentityProvider implements IdentityProvider<TrustedAuthenticationRequest> {\n+        @Override\n+        public Class<TrustedAuthenticationRequest> getRequestType() {\n+            return TrustedAuthenticationRequest.class;\n+        }\n+\n+        @Override\n+        public Uni<SecurityIdentity> authenticate(TrustedAuthenticationRequest trustedAuthenticationRequest,\n+                AuthenticationRequestContext authenticationRequestContext) {\n+            if (\"user\".equals(trustedAuthenticationRequest.getPrincipal())) {\n+                return Uni.createFrom()\n+                        .item(QuarkusSecurityIdentity.builder().setPrincipal(new QuarkusPrincipal(\"user\")).build());\n+            }\n+            return Uni.createFrom().nullItem();\n+        }\n+    }\n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-45364",
    "pr_id": 45364,
    "issue_id": 45224,
    "repo": "quarkusio/quarkus",
    "problem_statement": "PermissionChecker does not handle list of permission correctly\n### Describe the bug\n\nWhen method is annotated with `@PermissionsAllowed` with multiple values `PermissionChecker` is not correctly matched.\n\n```java\n@PermissionsAllowed(value = {\"read\", \"read:all\"})\n@Override\npublic CompletionStage<Response> getUserPlatformProducts(String userId) {\n    // ...\n}\n\n@PermissionChecker(\"read\")\nboolean canRead(SecurityIdentity identity, String userId) {\n    return identity.getPrincipal().getName().equals(userId);\n}\n```\n\n### Expected behavior\n\nChecker should be called when request has `write` permission.\n\n### Actual behavior\n\n```\njava.lang.RuntimeException: java.lang.RuntimeException: io.quarkus.builder.BuildException: Build failure: Build failed due to errors\n\t[error]: Build step io.quarkus.security.deployment.SecurityProcessor#gatherSecurityChecks threw an exception: java.lang.RuntimeException: Found @PermissionChecker annotation instance that authorize the 'read' permission, however\nno @PermissionsAllowed annotation instance requires this permission\n```\n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### Quarkus version or git rev\n\n_No response_\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
    "issue_word_count": 156,
    "test_files_count": 3,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "docs/src/main/asciidoc/security-authorize-web-endpoints-reference.adoc",
      "extensions/security/deployment/src/main/java/io/quarkus/security/deployment/PermissionSecurityChecks.java",
      "extensions/security/deployment/src/test/java/io/quarkus/security/test/permissionsallowed/checker/MissingCheckerForInclusivePermsValidationFailureTest.java",
      "extensions/security/deployment/src/test/java/io/quarkus/security/test/permissionsallowed/checker/PermissionCheckerNameWithColonsTest.java",
      "extensions/security/deployment/src/test/java/io/quarkus/security/test/permissionsallowed/checker/UnknownCheckerParamValidationFailureTest.java"
    ],
    "pr_changed_test_files": [
      "extensions/security/deployment/src/test/java/io/quarkus/security/test/permissionsallowed/checker/MissingCheckerForInclusivePermsValidationFailureTest.java",
      "extensions/security/deployment/src/test/java/io/quarkus/security/test/permissionsallowed/checker/PermissionCheckerNameWithColonsTest.java",
      "extensions/security/deployment/src/test/java/io/quarkus/security/test/permissionsallowed/checker/UnknownCheckerParamValidationFailureTest.java"
    ],
    "base_commit": "570857107aa4a6a1ac6ec664795723b2ebeeb4e9",
    "head_commit": "6f52091abc39513b921ded8fbed21cb54188c4c5",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/45364",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/45364",
    "dockerfile": "",
    "pr_merged_at": "2025-01-14T18:17:28.000Z",
    "patch": "diff --git a/docs/src/main/asciidoc/security-authorize-web-endpoints-reference.adoc b/docs/src/main/asciidoc/security-authorize-web-endpoints-reference.adoc\nindex 151064e376e9a..30fe4e03adb6a 100644\n--- a/docs/src/main/asciidoc/security-authorize-web-endpoints-reference.adoc\n+++ b/docs/src/main/asciidoc/security-authorize-web-endpoints-reference.adoc\n@@ -1122,6 +1122,49 @@ public class ProjectPermissionChecker {\n TIP: Permission checks run by default on event loops.\n Annotate a permission checker method with the `io.smallrye.common.annotation.Blocking` annotation if you want to run the check on a worker thread.\n \n+Matching between the `@PermissionsAllowed` values and the `@PermissionChecker` value is based on string equality as shown in the example below:\n+\n+[source,java]\n+----\n+package org.acme.security;\n+\n+import io.quarkus.security.PermissionChecker;\n+import io.quarkus.security.PermissionsAllowed;\n+import jakarta.enterprise.context.ApplicationScoped;\n+\n+@ApplicationScoped\n+public class FileService {\n+\n+    @PermissionsAllowed({ \"delete:all\", \"delete:dir\" }) <1>\n+    void deleteDirectory(Path directoryPath) {\n+        // delete directory\n+    }\n+\n+    @PermissionsAllowed(value = { \"delete:service\", \"delete:file\" }, inclusive = true) <2>\n+    void deleteServiceFile(Path serviceFilePath) {\n+        // delete service file\n+    }\n+\n+    @PermissionChecker(\"delete:all\")\n+    boolean canDeleteAllDirectories(SecurityIdentity identity) {\n+        String filePermissions = identity.getAttribute(\"user-group-file-permissions\");\n+        return filePermissions != null && filePermissions.contains(\"w\");\n+    }\n+\n+    @PermissionChecker(\"delete:service\")\n+    boolean canDeleteService(SecurityIdentity identity) {\n+        return identity.hasRole(\"admin\");\n+    }\n+\n+    @PermissionChecker(\"delete:file\")\n+    boolean canDeleteFile(Path serviceFilePath) {\n+        return serviceFilePath != null && !serviceFilePath.endsWith(\"critical\");\n+    }\n+}\n+----\n+<1> The permission checker method `canDeleteAllDirectories` grants access to the `deleteDirectory` because the `delete:all` values are equal.\n+<2> There must be exactly two permission checker methods, one for the `delete:service` permission and other for the `delete:file` permission.\n+\n [[permission-meta-annotation]]\n ==== Create permission meta-annotations\n \n\ndiff --git a/extensions/security/deployment/src/main/java/io/quarkus/security/deployment/PermissionSecurityChecks.java b/extensions/security/deployment/src/main/java/io/quarkus/security/deployment/PermissionSecurityChecks.java\nindex b48b744f588ea..a8d3629b167d5 100644\n--- a/extensions/security/deployment/src/main/java/io/quarkus/security/deployment/PermissionSecurityChecks.java\n+++ b/extensions/security/deployment/src/main/java/io/quarkus/security/deployment/PermissionSecurityChecks.java\n@@ -134,22 +134,13 @@ private static Map<String, PermissionCheckerMetadata> getPermissionCheckers(Inde\n                             \"supported return types are 'boolean' and 'Uni<Boolean>'. \")\n                             .formatted(toString(checkerMethod), checkerMethod.returnType().name()));\n                 }\n-                var permissionToActions = parsePermissionToActions(annotationInstance.value().asString(), new HashMap<>())\n-                        .entrySet().iterator().next();\n \n-                var permissionName = permissionToActions.getKey();\n+                var permissionName = annotationInstance.value().asString();\n                 if (permissionName.isBlank()) {\n                     throw new IllegalArgumentException(\n                             \"@PermissionChecker annotation placed on the '%s' attribute 'value' must not be blank\"\n                                     .formatted(toString(checkerMethod)));\n                 }\n-                var permissionActions = permissionToActions.getValue();\n-                if (permissionActions != null && !permissionActions.isEmpty()) {\n-                    throw new IllegalArgumentException(\"\"\"\n-                            @PermissionChecker annotation instance placed on the '%s' has attribute 'value' with\n-                            permission name '%s' and actions '%s', however actions are currently not supported\n-                            \"\"\".formatted(toString(checkerMethod), permissionName, permissionActions));\n-                }\n                 boolean isBlocking = checkerMethod.hasDeclaredAnnotation(BLOCKING);\n                 if (isBlocking && isReactive) {\n                     throw new IllegalArgumentException(\"\"\"\n@@ -588,9 +579,47 @@ private <T extends AnnotationTarget> void gatherPermissionKeys(AnnotationInstanc\n                 List<PermissionKey> cache, Map<T, List<List<PermissionKey>>> targetToPermissionKeys) {\n             // @PermissionsAllowed value is in format permission:action, permission2:action, permission:action2, permission3\n             // here we transform it to permission -> actions\n-            final var permissionToActions = new HashMap<String, Set<String>>();\n-            for (String permissionToAction : instance.value().asStringArray()) {\n-                parsePermissionToActions(permissionToAction, permissionToActions);\n+            record PermissionNameAndChecker(String permissionName, PermissionCheckerMetadata checker) {\n+            }\n+            boolean foundPermissionChecker = false;\n+            final var permissionToActions = new HashMap<PermissionNameAndChecker, Set<String>>();\n+            for (String permissionValExpression : instance.value().asStringArray()) {\n+                final PermissionCheckerMetadata checker = permissionNameToChecker.get(permissionValExpression);\n+                if (checker != null) {\n+                    // matched @PermissionAllowed(\"value\") with @PermissionChecker(\"value\")\n+                    foundPermissionChecker = true;\n+                    final var permissionNameKey = new PermissionNameAndChecker(permissionValExpression, checker);\n+                    if (!permissionToActions.containsKey(permissionNameKey)) {\n+                        permissionToActions.put(permissionNameKey, Collections.emptySet());\n+                    }\n+                } else if (permissionValExpression.contains(PERMISSION_TO_ACTION_SEPARATOR)) {\n+\n+                    // expected format: permission:action\n+                    final String[] permissionToActionArr = permissionValExpression.split(PERMISSION_TO_ACTION_SEPARATOR);\n+                    if (permissionToActionArr.length != 2) {\n+                        throw new RuntimeException(String.format(\n+                                \"PermissionsAllowed value '%s' contains more than one separator '%2$s', expected format is 'permissionName%2$saction'\",\n+                                permissionValExpression, PERMISSION_TO_ACTION_SEPARATOR));\n+                    }\n+                    final PermissionNameAndChecker permissionNameKey = new PermissionNameAndChecker(permissionToActionArr[0],\n+                            null);\n+                    final String action = permissionToActionArr[1];\n+                    if (permissionToActions.containsKey(permissionNameKey)) {\n+                        permissionToActions.get(permissionNameKey).add(action);\n+                    } else {\n+                        final Set<String> actions = new HashSet<>();\n+                        actions.add(action);\n+                        permissionToActions.put(permissionNameKey, actions);\n+                    }\n+                } else {\n+\n+                    // expected format: permission\n+                    final PermissionNameAndChecker permissionNameKey = new PermissionNameAndChecker(permissionValExpression,\n+                            null);\n+                    if (!permissionToActions.containsKey(permissionNameKey)) {\n+                        permissionToActions.put(permissionNameKey, new HashSet<>());\n+                    }\n+                }\n             }\n \n             if (permissionToActions.isEmpty()) {\n@@ -611,12 +640,54 @@ private <T extends AnnotationTarget> void gatherPermissionKeys(AnnotationInstanc\n                     : instance.value(\"params\").asStringArray();\n             final Type classType = getPermissionClass(instance);\n             final boolean inclusive = instance.value(\"inclusive\") != null && instance.value(\"inclusive\").asBoolean();\n+\n+            if (inclusive && foundPermissionChecker) {\n+                // @PermissionsAllowed({ \"read\", \"read:all\", \"read:it\", \"write\" } && @PermissionChecker(\"read\")\n+                // require @PermissionChecker for all 'read:action' because determining expected behavior would be too\n+                // complex; similarly for @PermissionChecker(\"read:all\") require 'read' and 'read:it' have checker as well\n+                List<PermissionNameAndChecker> checkerPermissions = permissionToActions.keySet().stream()\n+                        .filter(k -> k.checker != null).toList();\n+                for (PermissionNameAndChecker checkerPermission : checkerPermissions) {\n+                    // read -> read\n+                    // read:all -> read\n+                    String permissionName = checkerPermission.permissionName.contains(PERMISSION_TO_ACTION_SEPARATOR)\n+                            ? checkerPermission.permissionName.split(PERMISSION_TO_ACTION_SEPARATOR)[0]\n+                            : checkerPermission.permissionName;\n+                    for (var e : permissionToActions.entrySet()) {\n+                        PermissionNameAndChecker permissionNameKey = e.getKey();\n+                        // look for permission names that match our permission checker value (before action-to-perm separator)\n+                        // for example: read:it\n+                        if (permissionNameKey.checker == null && permissionNameKey.permissionName.equals(permissionName)) {\n+                            boolean hasActions = e.getValue() != null && !e.getValue().isEmpty();\n+                            final String permissionsJoinedWithActions;\n+                            if (hasActions) {\n+                                permissionsJoinedWithActions = e.getValue()\n+                                        .stream()\n+                                        .map(action -> permissionNameKey.permissionName + PERMISSION_TO_ACTION_SEPARATOR\n+                                                + action)\n+                                        .collect(Collectors.joining(\", \"));\n+                            } else {\n+                                permissionsJoinedWithActions = permissionNameKey.permissionName;\n+                            }\n+                            throw new RuntimeException(\n+                                    \"\"\"\n+                                            @PermissionsAllowed annotation placed on the '%s' has inclusive relation between its permissions.\n+                                            The '%s' permission has been matched with @PermissionChecker '%s', therefore you must also define\n+                                            a @PermissionChecker for '%s' permissions.\n+                                            \"\"\"\n+                                            .formatted(toString(annotationTarget), permissionName,\n+                                                    toString(checkerPermission.checker.checkerMethod),\n+                                                    permissionsJoinedWithActions));\n+                        }\n+                    }\n+                }\n+            }\n+\n             for (var permissionToAction : permissionToActions.entrySet()) {\n-                final var permissionName = permissionToAction.getKey();\n+                final var permissionNameKey = permissionToAction.getKey();\n                 final var permissionActions = permissionToAction.getValue();\n-                final var permissionChecker = findPermissionChecker(permissionName, permissionActions);\n-                final var key = new PermissionKey(permissionName, permissionActions, params, classType, inclusive,\n-                        permissionChecker, annotationTarget);\n+                final var key = new PermissionKey(permissionNameKey.permissionName, permissionActions, params, classType,\n+                        inclusive, permissionNameKey.checker, annotationTarget);\n                 final int i = cache.indexOf(key);\n                 if (i == -1) {\n                     orPermissions.add(key);\n@@ -632,44 +703,6 @@ private <T extends AnnotationTarget> void gatherPermissionKeys(AnnotationInstanc\n                     .add(List.copyOf(orPermissions));\n         }\n \n-        private static HashMap<String, Set<String>> parsePermissionToActions(String permissionToAction,\n-                HashMap<String, Set<String>> permissionToActions) {\n-            if (permissionToAction.contains(PERMISSION_TO_ACTION_SEPARATOR)) {\n-\n-                // expected format: permission:action\n-                final String[] permissionToActionArr = permissionToAction.split(PERMISSION_TO_ACTION_SEPARATOR);\n-                if (permissionToActionArr.length != 2) {\n-                    throw new RuntimeException(String.format(\n-                            \"PermissionsAllowed value '%s' contains more than one separator '%2$s', expected format is 'permissionName%2$saction'\",\n-                            permissionToAction, PERMISSION_TO_ACTION_SEPARATOR));\n-                }\n-                final String permissionName = permissionToActionArr[0];\n-                final String action = permissionToActionArr[1];\n-                if (permissionToActions.containsKey(permissionName)) {\n-                    permissionToActions.get(permissionName).add(action);\n-                } else {\n-                    final Set<String> actions = new HashSet<>();\n-                    actions.add(action);\n-                    permissionToActions.put(permissionName, actions);\n-                }\n-            } else {\n-\n-                // expected format: permission\n-                if (!permissionToActions.containsKey(permissionToAction)) {\n-                    permissionToActions.put(permissionToAction, new HashSet<>());\n-                }\n-            }\n-            return permissionToActions;\n-        }\n-\n-        private PermissionCheckerMetadata findPermissionChecker(String permissionName, Set<String> permissionActions) {\n-            if (permissionActions != null && !permissionActions.isEmpty()) {\n-                // only permission name is supported for now\n-                return null;\n-            }\n-            return permissionNameToChecker.get(permissionName);\n-        }\n-\n         private static Type getPermissionClass(AnnotationInstance instance) {\n             return instance.value(PERMISSION_ATTR) == null ? Type.create(STRING_PERMISSION, Type.Kind.CLASS)\n                     : instance.value(PERMISSION_ATTR).asClass();\n@@ -1361,8 +1394,8 @@ private static SecMethodAndPermCtorIdx[] matchPermCtorParamIdxBasedOnNameMatch(M\n                                 : constructor.declaringClass().name().toString();\n                         throw new RuntimeException(String.format(\n                                 \"No '%s' formal parameter name matches '%s' Permission %s parameter name '%s'\",\n-                                securedMethod.name(), matchTarget, isQuarkusPermission ? \"checker\" : \"constructor\",\n-                                constructorParamName));\n+                                PermissionSecurityChecksBuilder.toString(securedMethod), matchTarget,\n+                                isQuarkusPermission ? \"checker\" : \"constructor\", constructorParamName));\n                     }\n                 }\n                 return matches;\n",
    "test_patch": "diff --git a/extensions/security/deployment/src/test/java/io/quarkus/security/test/permissionsallowed/checker/MissingCheckerForInclusivePermsValidationFailureTest.java b/extensions/security/deployment/src/test/java/io/quarkus/security/test/permissionsallowed/checker/MissingCheckerForInclusivePermsValidationFailureTest.java\nnew file mode 100644\nindex 0000000000000..7371d84e4909c\n--- /dev/null\n+++ b/extensions/security/deployment/src/test/java/io/quarkus/security/test/permissionsallowed/checker/MissingCheckerForInclusivePermsValidationFailureTest.java\n@@ -0,0 +1,45 @@\n+package io.quarkus.security.test.permissionsallowed.checker;\n+\n+import jakarta.inject.Singleton;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.security.PermissionChecker;\n+import io.quarkus.security.PermissionsAllowed;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class MissingCheckerForInclusivePermsValidationFailureTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .assertException(t -> {\n+                Assertions.assertEquals(RuntimeException.class, t.getClass(), t.getMessage());\n+                Assertions.assertTrue(t.getMessage().contains(\"@PermissionsAllowed annotation placed on\"));\n+                Assertions.assertTrue(\n+                        t.getMessage().contains(\"SecuredBean#securedBean' has inclusive relation between its permissions\"));\n+                Assertions.assertTrue(t.getMessage().contains(\"you must also define\"));\n+                Assertions.assertTrue(t.getMessage().contains(\"@PermissionChecker for 'checker:missing' permissions\"));\n+            });\n+\n+    @Test\n+    public void test() {\n+        Assertions.fail();\n+    }\n+\n+    @Singleton\n+    public static class SecuredBean {\n+\n+        @PermissionsAllowed(value = { \"checker\", \"checker:missing\" }, inclusive = true)\n+        public void securedBean() {\n+            // EMPTY\n+        }\n+\n+        @PermissionChecker(\"checker\")\n+        public boolean check(SecurityIdentity identity) {\n+            return false;\n+        }\n+    }\n+}\n\ndiff --git a/extensions/security/deployment/src/test/java/io/quarkus/security/test/permissionsallowed/checker/PermissionCheckerNameWithColonsTest.java b/extensions/security/deployment/src/test/java/io/quarkus/security/test/permissionsallowed/checker/PermissionCheckerNameWithColonsTest.java\nnew file mode 100644\nindex 0000000000000..928b7369ea774\n--- /dev/null\n+++ b/extensions/security/deployment/src/test/java/io/quarkus/security/test/permissionsallowed/checker/PermissionCheckerNameWithColonsTest.java\n@@ -0,0 +1,333 @@\n+package io.quarkus.security.test.permissionsallowed.checker;\n+\n+import static io.quarkus.security.test.utils.IdentityMock.ADMIN;\n+import static io.quarkus.security.test.utils.IdentityMock.USER;\n+import static io.quarkus.security.test.utils.SecurityTestUtils.assertFailureFor;\n+import static io.quarkus.security.test.utils.SecurityTestUtils.assertSuccess;\n+\n+import java.util.Set;\n+\n+import jakarta.enterprise.context.ApplicationScoped;\n+import jakarta.inject.Inject;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.security.ForbiddenException;\n+import io.quarkus.security.PermissionChecker;\n+import io.quarkus.security.PermissionsAllowed;\n+import io.quarkus.security.StringPermission;\n+import io.quarkus.security.UnauthorizedException;\n+import io.quarkus.security.test.utils.AuthData;\n+import io.quarkus.security.test.utils.IdentityMock;\n+import io.quarkus.security.test.utils.SecurityTestUtils;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class PermissionCheckerNameWithColonsTest {\n+\n+    private static final AuthData USER_WITH_AUGMENTORS = new AuthData(USER, true);\n+    private static final AuthData ADMIN_WITH_AUGMENTORS = new AuthData(ADMIN, true);\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .withApplicationRoot((jar) -> jar.addClasses(IdentityMock.class, AuthData.class, SecurityTestUtils.class));\n+\n+    @Inject\n+    SecuredBean bean;\n+\n+    @Test\n+    public void testIdentityPermissionWithActionGrantAccess() {\n+        // @PermissionsAllowed({ \"read\", \"read:all\" }) says one of: either 'read' is granted by permission checker\n+        // or 'read:all' is granted by identity permissions\n+        var userWithReadAll = new AuthData(Set.of(\"user\"), false, \"user\", Set.of(new StringPermission(\"read\", \"all\")), true);\n+        assertSuccess(() -> bean.readAndReadAll(false), \"readAndReadAll\", userWithReadAll);\n+        var userWithReadNothing = new AuthData(Set.of(\"user\"), false, \"user\", Set.of(new StringPermission(\"read\", \"nothing\")),\n+                true);\n+        assertFailureFor(() -> bean.readAndReadAll(false), ForbiddenException.class, userWithReadNothing);\n+        // check 'read' is granted by the checker method\n+        assertSuccess(() -> bean.readAndReadAll(true), \"readAndReadAll\", userWithReadNothing);\n+        // check 'read' can only be granted by the checker method\n+        var userWithRead = new AuthData(Set.of(\"user\"), false, \"user\", Set.of(new StringPermission(\"read\")), true);\n+        assertFailureFor(() -> bean.readAndReadAll(false), ForbiddenException.class, userWithRead);\n+    }\n+\n+    @Test\n+    public void testIdentityPermissionWithMultipleActionsGrantsAccess() {\n+        // @PermissionsAllowed({ \"write:all\", \"write\", \"write:essay\" }) says one of: either 'write' is granted\n+        // by permission checker or 'write:all' or 'write:essay' is granted by identity permissions\n+        var userWithWriteAll = new AuthData(Set.of(\"user\"), false, \"user\", Set.of(new StringPermission(\"write\", \"all\")), true);\n+        assertSuccess(() -> bean.writeAndWriteAllAndEssay(false), \"writeAndWriteAllAndEssay\", userWithWriteAll);\n+        var userWithWriteEssay = new AuthData(Set.of(\"user\"), false, \"user\", Set.of(new StringPermission(\"write\", \"essay\")),\n+                true);\n+        assertSuccess(() -> bean.writeAndWriteAllAndEssay(false), \"writeAndWriteAllAndEssay\", userWithWriteEssay);\n+        var userWithWriteEssayAndAll = new AuthData(Set.of(\"user\"), false, \"user\",\n+                Set.of(new StringPermission(\"write\", \"essay\", \"all\")), true);\n+        assertSuccess(() -> bean.writeAndWriteAllAndEssay(false), \"writeAndWriteAllAndEssay\", userWithWriteEssayAndAll);\n+        var userWithWriteNothing = new AuthData(Set.of(\"user\"), false, \"user\", Set.of(new StringPermission(\"write\", \"nothing\")),\n+                true);\n+        assertFailureFor(() -> bean.writeAndWriteAllAndEssay(false), ForbiddenException.class, userWithWriteNothing);\n+        // check 'write' is granted by the checker method\n+        assertSuccess(() -> bean.writeAndWriteAllAndEssay(true), \"writeAndWriteAllAndEssay\", userWithWriteNothing);\n+        // check 'write' can only be granted by the checker method\n+        var userWithWrite = new AuthData(Set.of(\"user\"), false, \"user\", Set.of(new StringPermission(\"write\")), true);\n+        assertFailureFor(() -> bean.writeAndWriteAllAndEssay(false), ForbiddenException.class, userWithWrite);\n+    }\n+\n+    @Test\n+    public void testInclusivePermsAreOnlyGrantedByChecker() {\n+        // @PermissionsAllowed(value = { \"execute\", \"execute:all\", \"execute:dir\" }, inclusive = true)\n+        // check all \"execute\", \"execute:all\", \"execute:dir\" are granted by the checker,\n+        // and they cannot be granted by the identity permissions at all\n+\n+        // access is denied because permission checkers require 'true'\n+        var userWithExecuteDirAndAll = new AuthData(Set.of(\"user\"), false, \"user\",\n+                Set.of(new StringPermission(\"execute\", \"all\", \"dir\")), true);\n+        assertFailureFor(() -> bean.executeAndAllAndDir(true, true, false), ForbiddenException.class, userWithExecuteDirAndAll);\n+        assertFailureFor(() -> bean.executeAndAllAndDir(true, false, true), ForbiddenException.class, userWithExecuteDirAndAll);\n+        assertFailureFor(() -> bean.executeAndAllAndDir(false, true, true), ForbiddenException.class, userWithExecuteDirAndAll);\n+\n+        // access is granted because all arguments are true\n+        assertSuccess(() -> bean.executeAndAllAndDir(true, true, true), \"executeAndAllAndDir\", userWithExecuteDirAndAll);\n+\n+        // access is denied as anonymous user is not allow access any resources annotated with the @PermissionsAllowed\n+        // because anonymous users can't have permissions\n+        assertFailureFor(() -> bean.executeAndAllAndDir(true, true, true), UnauthorizedException.class,\n+                new AuthData(IdentityMock.ANONYMOUS, true));\n+    }\n+\n+    @Test\n+    public void testInclusivePermsAreOnlyGrantedByCheckerAndExtraPermission() {\n+        // @PermissionsAllowed(value = { \"delete\", \"delete:all\", \"delete:dir\", \"purge\" }, inclusive = true)\n+        // check all \"delete\", \"delete:all\", \"delete:dir\" are granted by the checker,\n+        // and they cannot be granted by the identity permissions at all\n+        // but for the 'purge', identity permission can be used and the checker doesn't need to exist\n+\n+        // access is denied because permission checkers require 'true' even though user has all the identity permissions\n+        var userWithDeleteDirAndAllAndPurge = new AuthData(Set.of(\"user\"), false, \"user\",\n+                Set.of(new StringPermission(\"delete\", \"all\", \"dir\"), new StringPermission(\"purge\")), true);\n+        assertFailureFor(() -> bean.deleteAndAllAndDir(true, true, false), ForbiddenException.class,\n+                userWithDeleteDirAndAllAndPurge);\n+        assertFailureFor(() -> bean.deleteAndAllAndDir(true, false, true), ForbiddenException.class,\n+                userWithDeleteDirAndAllAndPurge);\n+        assertFailureFor(() -> bean.deleteAndAllAndDir(false, true, true), ForbiddenException.class,\n+                userWithDeleteDirAndAllAndPurge);\n+        var userWithPurge = new AuthData(Set.of(\"user\"), false, \"user\", Set.of(new StringPermission(\"purge\")), true);\n+        assertFailureFor(() -> bean.deleteAndAllAndDir(true, true, false), ForbiddenException.class, userWithPurge);\n+        assertFailureFor(() -> bean.deleteAndAllAndDir(true, false, true), ForbiddenException.class, userWithPurge);\n+        assertFailureFor(() -> bean.deleteAndAllAndDir(false, true, true), ForbiddenException.class, userWithPurge);\n+\n+        // access is granted because all arguments are true\n+        assertSuccess(() -> bean.deleteAndAllAndDir(true, true, true), \"deleteAndAllAndDir\", userWithDeleteDirAndAllAndPurge);\n+        assertSuccess(() -> bean.deleteAndAllAndDir(true, true, true), \"deleteAndAllAndDir\", userWithPurge);\n+\n+        // access is not granted because identity doesn't have 'purge' permission\n+        assertFailureFor(() -> bean.deleteAndAllAndDir(true, true, true), ForbiddenException.class, USER_WITH_AUGMENTORS);\n+    }\n+\n+    @Test\n+    public void testPermissionCheckersForNamesWithActionSeparatorsOnly() {\n+        // @PermissionsAllowed({ \"edit:all\", \"edit\", \"edit:essay\" })\n+        // permission checker is defined for: edit:all, edit:essay\n+\n+        // assert that edit:all and edit:essay permission checkers grant access\n+        assertSuccess(() -> bean.editAndEditAllAndEssay(true, false), \"editAndEditAllAndEssay\", USER_WITH_AUGMENTORS);\n+        assertSuccess(() -> bean.editAndEditAllAndEssay(false, true), \"editAndEditAllAndEssay\", USER_WITH_AUGMENTORS);\n+        assertSuccess(() -> bean.editAndEditAllAndEssay(true, true), \"editAndEditAllAndEssay\", USER_WITH_AUGMENTORS);\n+\n+        // assert that 'edit' can be granted by identity permission\n+        var userWithEdit = new AuthData(USER, true, new StringPermission(\"edit\"));\n+        assertSuccess(() -> bean.editAndEditAllAndEssay(false, false), \"editAndEditAllAndEssay\", userWithEdit);\n+\n+        // assert user without either the identity permission or granted access by the checker method cannot access\n+        assertFailureFor(() -> bean.editAndEditAllAndEssay(false, false), ForbiddenException.class, USER_WITH_AUGMENTORS);\n+\n+        // @PermissionsAllowed({ \"list:files\", \"list:dir\" })\n+        // permission checker is defined for 'list:files'\n+\n+        // is allowed because the checker grants access\n+        assertSuccess(() -> bean.listFilesAndDir(true), \"listFilesAndDir\", USER_WITH_AUGMENTORS);\n+\n+        // is not allowed because the checker does not grant access\n+        assertFailureFor(() -> bean.listFilesAndDir(false), ForbiddenException.class, USER_WITH_AUGMENTORS);\n+\n+        // is not allowed because identity permission cannot grant access with the 'list:files' when such checker exists\n+        var userListFiles = new AuthData(USER, true, new StringPermission(\"list\", \"files\"));\n+        assertFailureFor(() -> bean.listFilesAndDir(false), ForbiddenException.class, userListFiles);\n+\n+        // is allowed because identity permission can grant access with the 'list:dir' as no such checker exists\n+        var userListDir = new AuthData(USER, true, new StringPermission(\"list\", \"dir\"));\n+        assertSuccess(() -> bean.listFilesAndDir(false), \"listFilesAndDir\", userListDir);\n+\n+        // @PermissionsAllowed({ \"list:files\", \"list:links\" })\n+        // there is a permission checker for both permissions\n+        assertSuccess(() -> bean.listFilesAndLinks(true, true), \"listFilesAndLinks\", USER_WITH_AUGMENTORS);\n+        assertSuccess(() -> bean.listFilesAndLinks(true, false), \"listFilesAndLinks\", USER_WITH_AUGMENTORS);\n+        assertSuccess(() -> bean.listFilesAndLinks(false, true), \"listFilesAndLinks\", USER_WITH_AUGMENTORS);\n+        assertFailureFor(() -> bean.listFilesAndLinks(false, false), ForbiddenException.class, USER_WITH_AUGMENTORS);\n+        var userWithListFilesAndLinks = new AuthData(USER, true, new StringPermission(\"list\", \"files\", \"links\"));\n+        assertFailureFor(() -> bean.listFilesAndLinks(false, false), ForbiddenException.class, userWithListFilesAndLinks);\n+    }\n+\n+    @Test\n+    public void testInclusivePermissionCheckersAndRepeatedAnnotations() {\n+        // @PermissionsAllowed(\"cut:array\")\n+        // @PermissionsAllowed(value = { \"cut:blob\", \"cut:chars\" }, inclusive = true)\n+        // @PermissionsAllowed(value = { \"cut:text\", \"cut:binary\" }, inclusive = true)\n+        // @PermissionsAllowed({ \"cut:text\", \"cut:binary\" }) - SHOULD be irrelevant\n+        assertSuccess(() -> bean.cutTextAndBinaryAndBlobAndArrayAndChars(true, true, true, true, true),\n+                \"cutTextAndBinaryAndBlobAndArrayAndChars\", USER_WITH_AUGMENTORS);\n+        assertFailureFor(() -> bean.cutTextAndBinaryAndBlobAndArrayAndChars(false, true, true, true, true),\n+                ForbiddenException.class, USER_WITH_AUGMENTORS);\n+        assertFailureFor(() -> bean.cutTextAndBinaryAndBlobAndArrayAndChars(true, false, true, true, true),\n+                ForbiddenException.class, USER_WITH_AUGMENTORS);\n+        assertFailureFor(() -> bean.cutTextAndBinaryAndBlobAndArrayAndChars(true, true, false, true, true),\n+                ForbiddenException.class, USER_WITH_AUGMENTORS);\n+        assertFailureFor(() -> bean.cutTextAndBinaryAndBlobAndArrayAndChars(true, true, true, false, true),\n+                ForbiddenException.class, USER_WITH_AUGMENTORS);\n+        assertFailureFor(() -> bean.cutTextAndBinaryAndBlobAndArrayAndChars(true, true, true, true, false),\n+                ForbiddenException.class, USER_WITH_AUGMENTORS);\n+        var userWithAllCutActions = new AuthData(USER, true,\n+                new StringPermission(\"cut\", \"array\", \"blob\", \"chars\", \"text\", \"binary\"));\n+        // assert failures as only checkers can grant these permissions\n+        assertFailureFor(() -> bean.cutTextAndBinaryAndBlobAndArrayAndChars(false, false, false, false, false),\n+                ForbiddenException.class, userWithAllCutActions);\n+    }\n+\n+    @ApplicationScoped\n+    public static class SecuredBean {\n+\n+        @PermissionsAllowed({ \"read\", \"read:all\" })\n+        String readAndReadAll(boolean read) {\n+            return \"readAndReadAll\";\n+        }\n+\n+        @PermissionsAllowed({ \"write:all\", \"write\", \"write:essay\" })\n+        String writeAndWriteAllAndEssay(boolean write) {\n+            return \"writeAndWriteAllAndEssay\";\n+        }\n+\n+        @PermissionsAllowed(value = { \"execute\", \"execute:all\", \"execute:dir\" }, inclusive = true)\n+        String executeAndAllAndDir(boolean execute, boolean executeAll, boolean executeDir) {\n+            return \"executeAndAllAndDir\";\n+        }\n+\n+        @PermissionsAllowed(value = { \"delete\", \"delete:all\", \"delete:dir\", \"purge\" }, inclusive = true)\n+        String deleteAndAllAndDir(boolean delete, boolean deleteAll, boolean deleteDir) {\n+            return \"deleteAndAllAndDir\";\n+        }\n+\n+        @PermissionsAllowed({ \"edit:all\", \"edit\", \"edit:essay\" })\n+        String editAndEditAllAndEssay(boolean editAll, boolean editEssay) {\n+            return \"editAndEditAllAndEssay\";\n+        }\n+\n+        @PermissionsAllowed({ \"list:files\", \"list:dir\" })\n+        String listFilesAndDir(boolean listFiles) {\n+            return \"listFilesAndDir\";\n+        }\n+\n+        @PermissionsAllowed({ \"list:files\", \"list:links\" })\n+        String listFilesAndLinks(boolean listFiles, boolean listLinks) {\n+            return \"listFilesAndLinks\";\n+        }\n+\n+        @PermissionsAllowed(\"cut:array\")\n+        @PermissionsAllowed(value = { \"cut:blob\", \"cut:chars\" }, inclusive = true)\n+        @PermissionsAllowed(value = { \"cut:text\", \"cut:binary\" }, inclusive = true)\n+        @PermissionsAllowed({ \"cut:text\", \"cut:binary\" }) // this one SHOULD not have effect due to the instance above\n+        String cutTextAndBinaryAndBlobAndArrayAndChars(boolean cutText, boolean cutBinary, boolean cutArray, boolean cutChars,\n+                boolean cutBlob) {\n+            return \"cutTextAndBinaryAndBlobAndArrayAndChars\";\n+        }\n+    }\n+\n+    @ApplicationScoped\n+    public static class PermissionCheckers {\n+\n+        @PermissionChecker(\"read\")\n+        boolean canRead(boolean read) {\n+            return read;\n+        }\n+\n+        @PermissionChecker(\"write\")\n+        boolean canWrite(boolean write) {\n+            return write;\n+        }\n+\n+        @PermissionChecker(\"execute\")\n+        boolean canExecute(boolean execute) {\n+            return execute;\n+        }\n+\n+        @PermissionChecker(\"execute:all\")\n+        boolean canExecuteAll(boolean executeAll) {\n+            return executeAll;\n+        }\n+\n+        @PermissionChecker(\"execute:dir\")\n+        boolean canExecuteDir(boolean executeDir) {\n+            return executeDir;\n+        }\n+\n+        @PermissionChecker(\"delete\")\n+        boolean canDelete(boolean delete) {\n+            return delete;\n+        }\n+\n+        @PermissionChecker(\"delete:all\")\n+        boolean canDeleteAll(boolean deleteAll) {\n+            return deleteAll;\n+        }\n+\n+        @PermissionChecker(\"delete:dir\")\n+        boolean canDeleteDir(boolean deleteDir) {\n+            return deleteDir;\n+        }\n+\n+        @PermissionChecker(\"edit:all\")\n+        boolean canEditAll(boolean editAll) {\n+            return editAll;\n+        }\n+\n+        @PermissionChecker(\"edit:essay\")\n+        boolean canEditEssay(boolean editEssay) {\n+            return editEssay;\n+        }\n+\n+        @PermissionChecker(\"list:files\")\n+        boolean canListFiles(boolean listFiles) {\n+            return listFiles;\n+        }\n+\n+        @PermissionChecker(\"list:links\")\n+        boolean canListLinks(boolean listLinks) {\n+            return listLinks;\n+        }\n+\n+        @PermissionChecker(\"cut:text\")\n+        boolean canCutText(boolean cutText) {\n+            return cutText;\n+        }\n+\n+        @PermissionChecker(\"cut:binary\")\n+        boolean canCutBinary(boolean cutBinary) {\n+            return cutBinary;\n+        }\n+\n+        @PermissionChecker(\"cut:blob\")\n+        boolean canCutBlob(boolean cutBlob) {\n+            return cutBlob;\n+        }\n+\n+        @PermissionChecker(\"cut:array\")\n+        boolean canCutArray(boolean cutArray) {\n+            return cutArray;\n+        }\n+\n+        @PermissionChecker(\"cut:chars\")\n+        boolean canCutChars(boolean cutChars) {\n+            return cutChars;\n+        }\n+\n+    }\n+}\n\ndiff --git a/extensions/security/deployment/src/test/java/io/quarkus/security/test/permissionsallowed/checker/UnknownCheckerParamValidationFailureTest.java b/extensions/security/deployment/src/test/java/io/quarkus/security/test/permissionsallowed/checker/UnknownCheckerParamValidationFailureTest.java\nindex 55fa1603bd4c7..42b81fc04ff4f 100644\n--- a/extensions/security/deployment/src/test/java/io/quarkus/security/test/permissionsallowed/checker/UnknownCheckerParamValidationFailureTest.java\n+++ b/extensions/security/deployment/src/test/java/io/quarkus/security/test/permissionsallowed/checker/UnknownCheckerParamValidationFailureTest.java\n@@ -18,7 +18,8 @@ public class UnknownCheckerParamValidationFailureTest {\n     static final QuarkusUnitTest config = new QuarkusUnitTest()\n             .assertException(t -> {\n                 Assertions.assertEquals(RuntimeException.class, t.getClass(), t.getMessage());\n-                Assertions.assertTrue(t.getMessage().contains(\"No 'securedBean' formal parameter name matches\"));\n+                Assertions.assertTrue(t.getMessage().contains(\"No '\"));\n+                Assertions.assertTrue(t.getMessage().contains(\"SecuredBean#securedBean' formal parameter name matches\"));\n                 Assertions.assertTrue(t.getMessage().contains(\"SecuredBean#check\"));\n                 Assertions.assertTrue(t.getMessage().contains(\"parameter name 'unknownParameter'\"));\n             });\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-45300",
    "pr_id": 45300,
    "issue_id": 36510,
    "repo": "quarkusio/quarkus",
    "problem_statement": "`quarkus.otel.traces.suppress-non-application-uris` not working with `quarkus.management.enabled`\n### Describe the bug\n\nThe default behaviour of `quarkus.otel.traces.suppress-non-application-uris` is to suppress trace collection of non applicative uris, everything is fine with standard confs, but if I enable the management interface through `quarkus.management.enabled=true`suppresion will fail.\n\n### Expected behavior\n\nWith `quarkus.management.enabled` set to true, health check will be redirect to `0.0.0.0:9000/q/health` and trace collection will continue to be suppresed.\n\n### Actual behavior\n\nOtel trace collection is not suppressed and it seems that `quarkus.otel.traces.suppress-non-application-uris` is been ignored.\n\n### How to Reproduce?\n\n```Quarkus platform BOMs:\r\n         io.quarkus.platform:quarkus-bom:pom:3.4.3 ✔\r\n\r\nExtensions from io.quarkus.platform:quarkus-bom:\r\n         io.quarkus:quarkus-resteasy-reactive-jackson ✔\r\n         io.quarkus:quarkus-smallrye-health ✔\r\n         io.quarkus:quarkus-config-yaml ✔\r\n         io.quarkus:quarkus-arc ✔\r\n         io.quarkus:quarkus-rest-client-reactive-jackson ✔\r\n\r\n Extensions from unknown origin:\r\n         io.quarkiverse.opentelemetry.exporter:quarkus-opentelemetry-exporter-gcp:2.0.0.Final\r\n```\r\n\r\n`application.yaml`\r\n```\r\nquarkus:\r\n  otel:\r\n    traces:\r\n      suppress-non-application-uris: true\r\n  management:\r\n    enabled: true\r\n  opentelemetry:\r\n    tracer:\r\n      exporter:\r\n        gcp:\r\n          enabled: false\r\n        otlp:\r\n          enabled: true\r\n```\r\n\r\n1. make call to health api\r\n`curl localhost:9000/q/health`\r\n2. check on Otel receiver (ex. Jaeger)\r\n3. will see a trace for health call\n\n### Output of `uname -a` or `ver`\n\nDarwin *** 23.0.0 Darwin Kernel Version 23.0.0: Fri Sep 15 14:41:43 PDT 2023; root:xnu-10002.1.13~1/RELEASE_ARM64_T6000 arm64\n\n### Output of `java -version`\n\nopenjdk 17.0.6 2023-01-17 OpenJDK Runtime Environment Temurin-17.0.6+10 (build 17.0.6+10) OpenJDK 64-Bit Server VM Temurin-17.0.6+10 (build 17.0.6+10, mixed mode)\n\n### GraalVM version (if different from Java)\n\n_No response_\n\n### Quarkus version or git rev\n\n3.4.3\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nApache Maven 3.9.3\n\n### Additional information\n\n_No response_",
    "issue_word_count": 330,
    "test_files_count": 4,
    "non_test_files_count": 9,
    "pr_changed_files": [
      "extensions/opentelemetry/deployment/pom.xml",
      "extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/OpenTelemetrySuppressNonAppUriManagementInterfaceTest.java",
      "extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/OpenTelemetrySuppressNonAppUriTest.java",
      "extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/common/exporter/TestSpanExporter.java",
      "extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/AutoConfiguredOpenTelemetrySdkBuilderCustomizer.java",
      "extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/tracing/DropTargetsSampler.java",
      "extensions/opentelemetry/runtime/src/test/java/io/quarkus/opentelemetry/runtime/tracing/DropTargetsSamplerTest.java",
      "extensions/vertx-http/deployment-spi/src/main/java/io/quarkus/vertx/http/deployment/spi/FrameworkEndpointsBuildItem.java",
      "extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/NonApplicationRootPathBuildItem.java",
      "extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/RouteBuildItem.java",
      "extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/VertxHttpProcessor.java",
      "extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/devmode/ConfiguredPathInfo.java",
      "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/BasicRoute.java"
    ],
    "pr_changed_test_files": [
      "extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/OpenTelemetrySuppressNonAppUriManagementInterfaceTest.java",
      "extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/OpenTelemetrySuppressNonAppUriTest.java",
      "extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/common/exporter/TestSpanExporter.java",
      "extensions/opentelemetry/runtime/src/test/java/io/quarkus/opentelemetry/runtime/tracing/DropTargetsSamplerTest.java"
    ],
    "base_commit": "e75b0fd4b508240cffe0e9e17389d27bb3b95737",
    "head_commit": "d76ade7630818bbda6fbbc82fd8260960d8968b1",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/45300",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/45300",
    "dockerfile": "",
    "pr_merged_at": "2025-01-17T15:04:15.000Z",
    "patch": "diff --git a/extensions/opentelemetry/deployment/pom.xml b/extensions/opentelemetry/deployment/pom.xml\nindex f0b9e0ef6d2a4..306f138c26fcd 100644\n--- a/extensions/opentelemetry/deployment/pom.xml\n+++ b/extensions/opentelemetry/deployment/pom.xml\n@@ -145,6 +145,11 @@\n             <artifactId>quarkus-security-deployment</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-vertx-http-dev-ui-tests</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n         <dependency>\n             <groupId>io.opentelemetry</groupId>\n             <artifactId>opentelemetry-sdk-testing</artifactId>\n\ndiff --git a/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/AutoConfiguredOpenTelemetrySdkBuilderCustomizer.java b/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/AutoConfiguredOpenTelemetrySdkBuilderCustomizer.java\nindex cbfc7d6e2d79b..3706eb9fd5c73 100644\n--- a/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/AutoConfiguredOpenTelemetrySdkBuilderCustomizer.java\n+++ b/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/AutoConfiguredOpenTelemetrySdkBuilderCustomizer.java\n@@ -5,8 +5,9 @@\n \n import java.net.InetAddress;\n import java.net.UnknownHostException;\n-import java.util.ArrayList;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n import java.util.function.BiFunction;\n import java.util.function.Function;\n import java.util.function.Predicate;\n@@ -171,7 +172,7 @@ public Sampler apply(Sampler existingSampler, ConfigProperties configProperties)\n                                 .orElse(existingSampler);\n \n                         //collect default filtering targets (Needed for all samplers)\n-                        List<String> dropTargets = new ArrayList<>();\n+                        Set<String> dropTargets = new HashSet<>();\n                         if (oTelRuntimeConfig.traces().suppressNonApplicationUris()) {//default is true\n                             dropTargets.addAll(TracerRecorder.dropNonApplicationUriTargets);\n                         }\n\ndiff --git a/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/tracing/DropTargetsSampler.java b/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/tracing/DropTargetsSampler.java\nindex f42b26fbaa9e8..9e4a718dbcda8 100644\n--- a/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/tracing/DropTargetsSampler.java\n+++ b/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/tracing/DropTargetsSampler.java\n@@ -3,7 +3,10 @@\n import static io.opentelemetry.semconv.UrlAttributes.URL_PATH;\n import static io.opentelemetry.semconv.UrlAttributes.URL_QUERY;\n \n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n import io.opentelemetry.api.common.Attributes;\n import io.opentelemetry.api.trace.SpanKind;\n@@ -14,12 +17,18 @@\n \n public class DropTargetsSampler implements Sampler {\n     private final Sampler sampler;\n-    private final List<String> dropTargets;\n+    private final Set<String> dropTargetsExact;\n+    private final Set<String> dropTargetsWildcard;\n \n     public DropTargetsSampler(final Sampler sampler,\n-            final List<String> dropTargets) {\n+            final Set<String> dropTargets) {\n         this.sampler = sampler;\n-        this.dropTargets = dropTargets;\n+        this.dropTargetsExact = dropTargets.stream().filter(s -> !s.endsWith(\"*\"))\n+                .collect(Collectors.toCollection(HashSet::new));\n+        this.dropTargetsWildcard = dropTargets.stream()\n+                .filter(s -> s.endsWith(\"*\"))\n+                .map(s -> s.substring(0, s.length() - 1))\n+                .collect(Collectors.toCollection(HashSet::new));\n     }\n \n     @Override\n@@ -48,26 +57,24 @@ private boolean shouldDrop(String target) {\n         if ((target == null) || target.isEmpty()) {\n             return false;\n         }\n-        if (safeContains(target)) { // check exact match\n+        if (containsExactly(target)) { // check exact match\n             return true;\n         }\n         if (target.charAt(target.length() - 1) == '/') { // check if the path without the ending slash matched\n-            if (safeContains(target.substring(0, target.length() - 1))) {\n+            if (containsExactly(target.substring(0, target.length() - 1))) {\n                 return true;\n             }\n         }\n-        int lastSlashIndex = target.lastIndexOf('/');\n-        if (lastSlashIndex != -1) {\n-            if (safeContains(target.substring(0, lastSlashIndex) + \"*\")\n-                    || safeContains(target.substring(0, lastSlashIndex) + \"/*\")) { // check if a wildcard matches\n+        for (String dropTargetsWildcard : dropTargetsWildcard) {\n+            if (target.startsWith(dropTargetsWildcard)) {\n                 return true;\n             }\n         }\n         return false;\n     }\n \n-    private boolean safeContains(String target) {\n-        return dropTargets.contains(target);\n+    private boolean containsExactly(String target) {\n+        return dropTargetsExact.contains(target);\n     }\n \n     @Override\n\ndiff --git a/extensions/vertx-http/deployment-spi/src/main/java/io/quarkus/vertx/http/deployment/spi/FrameworkEndpointsBuildItem.java b/extensions/vertx-http/deployment-spi/src/main/java/io/quarkus/vertx/http/deployment/spi/FrameworkEndpointsBuildItem.java\nindex 90c140b6d6aad..d13509e196b4a 100644\n--- a/extensions/vertx-http/deployment-spi/src/main/java/io/quarkus/vertx/http/deployment/spi/FrameworkEndpointsBuildItem.java\n+++ b/extensions/vertx-http/deployment-spi/src/main/java/io/quarkus/vertx/http/deployment/spi/FrameworkEndpointsBuildItem.java\n@@ -1,17 +1,17 @@\n package io.quarkus.vertx.http.deployment.spi;\n \n-import java.util.List;\n+import java.util.Set;\n \n import io.quarkus.builder.item.SimpleBuildItem;\n \n public final class FrameworkEndpointsBuildItem extends SimpleBuildItem {\n-    private final List<String> endpoints;\n+    private final Set<String> endpoints;\n \n-    public FrameworkEndpointsBuildItem(final List<String> endpoints) {\n+    public FrameworkEndpointsBuildItem(final Set<String> endpoints) {\n         this.endpoints = endpoints;\n     }\n \n-    public List<String> getEndpoints() {\n+    public Set<String> getEndpoints() {\n         return endpoints;\n     }\n }\n\ndiff --git a/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/NonApplicationRootPathBuildItem.java b/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/NonApplicationRootPathBuildItem.java\nindex 0dc4b5e1f280c..8f0b9f91369a4 100644\n--- a/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/NonApplicationRootPathBuildItem.java\n+++ b/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/NonApplicationRootPathBuildItem.java\n@@ -270,6 +270,7 @@ public static class Builder extends RouteBuildItem.Builder {\n         private final NonApplicationRootPathBuildItem buildItem;\n         private RouteBuildItem.RouteType routeType = RouteBuildItem.RouteType.FRAMEWORK_ROUTE;\n         private RouteBuildItem.RouteType routerType = RouteBuildItem.RouteType.FRAMEWORK_ROUTE;\n+        private String name;\n         private String path;\n \n         Builder(NonApplicationRootPathBuildItem buildItem) {\n@@ -330,7 +331,13 @@ public Builder orderedRoute(String route, Integer order, Consumer<Route> routeFu\n                 this.path = route;\n                 this.routerType = RouteBuildItem.RouteType.ABSOLUTE_ROUTE;\n             }\n-            super.orderedRoute(this.path, order, routeFunction);\n+\n+            // we normalize the route name to remove trailing *, this is to be consistent with the path\n+            // see RouteImpl#setPath()\n+            String routeName = route.charAt(route.length() - 1) == '*' ? route.substring(0, route.length() - 1) : route;\n+\n+            // we pass a route name for proper identification in the metrics\n+            super.orderedRoute(routeName, this.path, order, routeFunction);\n             return this;\n         }\n \n\ndiff --git a/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/RouteBuildItem.java b/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/RouteBuildItem.java\nindex 7156e0db32b43..c4cf342638e4a 100644\n--- a/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/RouteBuildItem.java\n+++ b/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/RouteBuildItem.java\n@@ -176,6 +176,20 @@ public Builder orderedRoute(String route, Integer order, Consumer<Route> routeCu\n             return this;\n         }\n \n+        /**\n+         * @param name The name of the route. It is used to identify the route in the metrics.\n+         * @param route A normalized path used to define a basic route\n+         *        (e.g. use HttpRootPathBuildItem to construct/resolve the path value). This path this is also\n+         *        used on the \"Not Found\" page in dev mode.\n+         * @param order Priority ordering of the route\n+         * @param routeCustomizer Route customizer.\n+         */\n+        public Builder orderedRoute(String name, String route, Integer order, Consumer<Route> routeCustomizer) {\n+            this.routeFunction = new BasicRoute(name, route, order, routeCustomizer);\n+            this.notFoundPagePath = this.routePath = route;\n+            return this;\n+        }\n+\n         public Builder handler(Handler<RoutingContext> handler) {\n             this.handler = handler;\n             return this;\n\ndiff --git a/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/VertxHttpProcessor.java b/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/VertxHttpProcessor.java\nindex 0b6349b91db9a..fc70a7c4eafd3 100644\n--- a/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/VertxHttpProcessor.java\n+++ b/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/VertxHttpProcessor.java\n@@ -8,8 +8,10 @@\n import java.io.UncheckedIOException;\n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n+import java.util.Set;\n import java.util.concurrent.SubmissionPublisher;\n import java.util.logging.Level;\n import java.util.stream.Collectors;\n@@ -131,7 +133,7 @@ NonApplicationRootPathBuildItem frameworkRoot(HttpBuildTimeConfig httpBuildTimeC\n     FrameworkEndpointsBuildItem frameworkEndpoints(NonApplicationRootPathBuildItem nonApplicationRootPath,\n             ManagementInterfaceBuildTimeConfig managementInterfaceBuildTimeConfig, LaunchModeBuildItem launchModeBuildItem,\n             List<RouteBuildItem> routes) {\n-        List<String> frameworkEndpoints = new ArrayList<>();\n+        Set<String> frameworkEndpoints = new HashSet<>();\n         for (RouteBuildItem route : routes) {\n             if (FRAMEWORK_ROUTE.equals(route.getRouteType())) {\n                 if (route.getConfiguredPathInfo() != null) {\n\ndiff --git a/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/devmode/ConfiguredPathInfo.java b/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/devmode/ConfiguredPathInfo.java\nindex a2cceab2f5cee..bb93a19b566b2 100644\n--- a/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/devmode/ConfiguredPathInfo.java\n+++ b/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/devmode/ConfiguredPathInfo.java\n@@ -33,12 +33,12 @@ public String getEndpointPath(HttpRootPathBuildItem httpRoot) {\n \n     public String getEndpointPath(NonApplicationRootPathBuildItem nonAppRoot, ManagementInterfaceBuildTimeConfig mibt,\n             LaunchModeBuildItem mode) {\n+        if (absolutePath) {\n+            return endpointPath;\n+        }\n         if (management && mibt.enabled) {\n             var prefix = NonApplicationRootPathBuildItem.getManagementUrlPrefix(mode);\n             return prefix + endpointPath;\n-        }\n-        if (absolutePath) {\n-            return endpointPath;\n         } else {\n             return TemplateHtmlBuilder.adjustRoot(nonAppRoot.getNormalizedHttpRootPath(), endpointPath);\n         }\n\ndiff --git a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/BasicRoute.java b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/BasicRoute.java\nindex 064145e894d45..bd5ec80d091a8 100644\n--- a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/BasicRoute.java\n+++ b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/BasicRoute.java\n@@ -8,6 +8,8 @@\n \n public class BasicRoute implements Function<Router, Route> {\n \n+    private String name;\n+\n     private String path;\n \n     private Integer order;\n@@ -15,15 +17,29 @@ public class BasicRoute implements Function<Router, Route> {\n     private Consumer<Route> customizer;\n \n     public BasicRoute(String path) {\n-        this(path, null);\n+        this(null, path);\n     }\n \n     public BasicRoute(String path, Integer order) {\n+        this(null, path, order);\n+    }\n+\n+    public BasicRoute(String path, Integer order, Consumer<Route> customizer) {\n+        this(null, path, order, customizer);\n+    }\n+\n+    public BasicRoute(String name, String path) {\n+        this(name, path, null);\n+    }\n+\n+    public BasicRoute(String name, String path, Integer order) {\n+        this.name = name;\n         this.path = path;\n         this.order = order;\n     }\n \n-    public BasicRoute(String path, Integer order, Consumer<Route> customizer) {\n+    public BasicRoute(String name, String path, Integer order, Consumer<Route> customizer) {\n+        this.name = name;\n         this.path = path;\n         this.order = order;\n         this.customizer = customizer;\n@@ -32,6 +48,14 @@ public BasicRoute(String path, Integer order, Consumer<Route> customizer) {\n     public BasicRoute() {\n     }\n \n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n     public String getPath() {\n         return path;\n     }\n@@ -60,6 +84,9 @@ public BasicRoute setCustomizer(Consumer<Route> customizer) {\n     @Override\n     public Route apply(Router router) {\n         Route route = router.route(path);\n+        if (name != null) {\n+            route.setName(name);\n+        }\n         if (order != null) {\n             route.order(order);\n         }\n",
    "test_patch": "diff --git a/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/OpenTelemetrySuppressNonAppUriManagementInterfaceTest.java b/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/OpenTelemetrySuppressNonAppUriManagementInterfaceTest.java\nnew file mode 100644\nindex 0000000000000..f4d2edfeeeded\n--- /dev/null\n+++ b/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/OpenTelemetrySuppressNonAppUriManagementInterfaceTest.java\n@@ -0,0 +1,101 @@\n+package io.quarkus.opentelemetry.deployment;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import jakarta.inject.Inject;\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.quarkus.opentelemetry.deployment.common.exporter.TestSpanExporter;\n+import io.quarkus.opentelemetry.deployment.common.exporter.TestSpanExporterProvider;\n+import io.quarkus.test.QuarkusDevModeTest;\n+import io.restassured.RestAssured;\n+\n+public class OpenTelemetrySuppressNonAppUriManagementInterfaceTest {\n+\n+    @RegisterExtension\n+    final static QuarkusDevModeTest TEST = new QuarkusDevModeTest()\n+            .withApplicationRoot((jar) -> jar\n+                    .addClasses(HelloResource.class, TestSpanExporter.class, TestSpanExporterProvider.class)\n+                    .addAsResource(new StringAsset(TestSpanExporterProvider.class.getCanonicalName()),\n+                            \"META-INF/services/io.opentelemetry.sdk.autoconfigure.spi.traces.ConfigurableSpanExporterProvider\")\n+                    .add(new StringAsset(\n+                            \"\"\"\n+                                    quarkus.otel.traces.exporter=test-span-exporter\n+                                    quarkus.otel.metrics.exporter=none\n+                                    quarkus.otel.bsp.export.timeout=1s\n+                                    quarkus.otel.bsp.schedule.delay=50\n+                                    quarkus.management.enabled=true\n+                                    quarkus.management.port=9001\n+                                    \"\"\"),\n+                            \"application.properties\"));\n+\n+    @Test\n+    void test() {\n+\n+        // Must not be traced\n+        RestAssured.given()\n+                .get(\"http://localhost:9001/q/health/\")\n+                .then()\n+                .statusCode(200);\n+        RestAssured.given()\n+                .get(\"/q/dev-ui/\")\n+                .then()\n+                .statusCode(200);\n+        RestAssured.given()\n+                .get(\"/q/dev-ui/icon/font-awesome.js\")\n+                .then()\n+                .statusCode(200);\n+        // Valid trace\n+        RestAssured.given()\n+                .get(\"/hello\")\n+                .then()\n+                .statusCode(200);\n+        // Get span names\n+        List<String> spans = Arrays.asList(\n+                RestAssured.given()\n+                        .get(\"/hello/spans\")\n+                        .then()\n+                        .statusCode(200)\n+                        .extract().body()\n+                        .asString()\n+                        .split(\";\"));\n+\n+        assertThat(spans).containsExactly(\"GET /hello\");\n+    }\n+\n+    @Path(\"/hello\")\n+    public static class HelloResource {\n+\n+        @Inject\n+        TestSpanExporter spanExporter;\n+\n+        @GET\n+        public String greetings() {\n+            return \"Hello test\";\n+        }\n+\n+        /**\n+         * Gets a string with the received spans names concatenated by ;\n+         *\n+         * @return\n+         */\n+        @GET\n+        @Path(\"/spans\")\n+        public String greetingsInsertAtLeast() {\n+            String spanNames = spanExporter.getFinishedSpanItemsAtLeast(1).stream()\n+                    .map(SpanData::getName)\n+                    .reduce((s1, s2) -> s1 + \";\" + s2).orElse(\"\");\n+            System.out.println(spanNames);\n+            return spanNames;\n+        }\n+    }\n+}\n\ndiff --git a/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/OpenTelemetrySuppressNonAppUriTest.java b/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/OpenTelemetrySuppressNonAppUriTest.java\nnew file mode 100644\nindex 0000000000000..8c685a11b9568\n--- /dev/null\n+++ b/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/OpenTelemetrySuppressNonAppUriTest.java\n@@ -0,0 +1,99 @@\n+package io.quarkus.opentelemetry.deployment;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import jakarta.inject.Inject;\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.quarkus.opentelemetry.deployment.common.exporter.TestSpanExporter;\n+import io.quarkus.opentelemetry.deployment.common.exporter.TestSpanExporterProvider;\n+import io.quarkus.test.QuarkusDevModeTest;\n+import io.restassured.RestAssured;\n+\n+public class OpenTelemetrySuppressNonAppUriTest {\n+\n+    @RegisterExtension\n+    final static QuarkusDevModeTest TEST = new QuarkusDevModeTest()\n+            .withApplicationRoot((jar) -> jar\n+                    .addClasses(HelloResource.class, TestSpanExporter.class, TestSpanExporterProvider.class)\n+                    .addAsResource(new StringAsset(TestSpanExporterProvider.class.getCanonicalName()),\n+                            \"META-INF/services/io.opentelemetry.sdk.autoconfigure.spi.traces.ConfigurableSpanExporterProvider\")\n+                    .add(new StringAsset(\n+                            \"\"\"\n+                                    quarkus.otel.traces.exporter=test-span-exporter\n+                                    quarkus.otel.metrics.exporter=none\n+                                    quarkus.otel.bsp.export.timeout=1s\n+                                    quarkus.otel.bsp.schedule.delay=50\n+                                    \"\"\"),\n+                            \"application.properties\"));\n+\n+    @Test\n+    void test() {\n+\n+        // Must not be traced\n+        RestAssured.given()\n+                .get(\"/q/health/\")\n+                .then()\n+                .statusCode(200);\n+        RestAssured.given()\n+                .get(\"/q/dev-ui/\")\n+                .then()\n+                .statusCode(200);\n+        RestAssured.given()\n+                .get(\"/q/dev-ui/icon/font-awesome.js\")\n+                .then()\n+                .statusCode(200);\n+        // Valid trace\n+        RestAssured.given()\n+                .get(\"/hello\")\n+                .then()\n+                .statusCode(200);\n+        // Get span names\n+        List<String> spans = Arrays.asList(\n+                RestAssured.given()\n+                        .get(\"/hello/spans\")\n+                        .then()\n+                        .statusCode(200)\n+                        .extract().body()\n+                        .asString()\n+                        .split(\";\"));\n+\n+        assertThat(spans).containsExactly(\"GET /hello\");\n+    }\n+\n+    @Path(\"/hello\")\n+    public static class HelloResource {\n+\n+        @Inject\n+        TestSpanExporter spanExporter;\n+\n+        @GET\n+        public String greetings() {\n+            return \"Hello test\";\n+        }\n+\n+        /**\n+         * Gets a string with the received spans names concatenated by ;\n+         *\n+         * @return\n+         */\n+        @GET\n+        @Path(\"/spans\")\n+        public String greetingsInsertAtLeast() {\n+            String spanNames = spanExporter.getFinishedSpanItemsAtLeast(1).stream()\n+                    .map(SpanData::getName)\n+                    .reduce((s1, s2) -> s1 + \";\" + s2).orElse(\"\");\n+            System.out.println(spanNames);\n+            return spanNames;\n+        }\n+    }\n+}\n\ndiff --git a/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/common/exporter/TestSpanExporter.java b/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/common/exporter/TestSpanExporter.java\nindex 573816c3ed9d0..7c0fbf5a3fbb5 100644\n--- a/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/common/exporter/TestSpanExporter.java\n+++ b/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/common/exporter/TestSpanExporter.java\n@@ -4,6 +4,7 @@\n import static java.util.stream.Collectors.toList;\n import static org.awaitility.Awaitility.await;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.Collection;\n import java.util.List;\n@@ -50,11 +51,27 @@ public List<SpanData> getFinishedSpanItems(int spanCount) {\n         return finishedSpanItems.stream().collect(toList());\n     }\n \n+    /**\n+     * Careful when retrieving the list of finished spans. There is a chance when the response is already sent to the\n+     * client and Vert.x still writing the end of the spans. This means that a response is available to assert from the\n+     * test side but not all spans may be available yet. For this reason, this method requires the number of expected\n+     * spans.\n+     */\n+    public List<SpanData> getFinishedSpanItemsAtLeast(int spanCount) {\n+        assertSpanAtLeast(spanCount);\n+        return finishedSpanItems;\n+    }\n+\n     public void assertSpanCount(int spanCount) {\n-        await().atMost(30, SECONDS).untilAsserted(\n+        await().atMost(5, SECONDS).untilAsserted(\n                 () -> assertEquals(spanCount, finishedSpanItems.size(), \"Spans: \" + finishedSpanItems.toString()));\n     }\n \n+    public void assertSpanAtLeast(int spanCount) {\n+        await().atMost(5, SECONDS).untilAsserted(\n+                () -> assertTrue(spanCount <= finishedSpanItems.size(), \"Spans: \" + finishedSpanItems.toString()));\n+    }\n+\n     public void reset() {\n         finishedSpanItems.clear();\n     }\n\ndiff --git a/extensions/opentelemetry/runtime/src/test/java/io/quarkus/opentelemetry/runtime/tracing/DropTargetsSamplerTest.java b/extensions/opentelemetry/runtime/src/test/java/io/quarkus/opentelemetry/runtime/tracing/DropTargetsSamplerTest.java\nindex c2aae5f318f7a..db3896ed7ce2b 100644\n--- a/extensions/opentelemetry/runtime/src/test/java/io/quarkus/opentelemetry/runtime/tracing/DropTargetsSamplerTest.java\n+++ b/extensions/opentelemetry/runtime/src/test/java/io/quarkus/opentelemetry/runtime/tracing/DropTargetsSamplerTest.java\n@@ -1,10 +1,10 @@\n package io.quarkus.opentelemetry.runtime.tracing;\n \n import static io.opentelemetry.semconv.UrlAttributes.URL_PATH;\n-import static io.quarkus.opentelemetry.runtime.OpenTelemetryUtil.*;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n import java.util.List;\n+import java.util.Set;\n import java.util.concurrent.atomic.AtomicLong;\n \n import org.junit.jupiter.api.Test;\n@@ -21,7 +21,7 @@ class DropTargetsSamplerTest {\n     @Test\n     void testDropTargets() {\n         CountingSampler countingSampler = new CountingSampler();\n-        var sut = new DropTargetsSampler(countingSampler, List.of(\"/q/swagger-ui\", \"/q/swagger-ui*\"));\n+        var sut = new DropTargetsSampler(countingSampler, Set.of(\"/q/swagger-ui\", \"/q/swagger-ui*\"));\n \n         assertEquals(SamplingResult.recordAndSample(), getShouldSample(sut, \"/other\"));\n         assertEquals(1, countingSampler.count.get());\n@@ -39,6 +39,33 @@ void testDropTargets() {\n         assertEquals(2, countingSampler.count.get());\n     }\n \n+    @Test\n+    void testDropTargetsWildcards() {\n+        CountingSampler countingSampler = new CountingSampler();\n+        var sut = new DropTargetsSampler(countingSampler, Set.of(\"/q/dev-ui\", \"/q/dev-ui/*\"));\n+\n+        assertEquals(SamplingResult.recordAndSample(), getShouldSample(sut, \"/other\"));\n+        assertEquals(1, countingSampler.count.get());\n+\n+        assertEquals(SamplingResult.recordAndSample(), getShouldSample(sut, \"/q/dev-ui-test\"));\n+        assertEquals(2, countingSampler.count.get());\n+\n+        assertEquals(SamplingResult.drop(), getShouldSample(sut, \"/q/dev-ui\"));\n+        assertEquals(2, countingSampler.count.get());\n+\n+        assertEquals(SamplingResult.drop(), getShouldSample(sut, \"/q/dev-ui/\"));\n+        assertEquals(2, countingSampler.count.get());\n+\n+        assertEquals(SamplingResult.drop(), getShouldSample(sut, \"/q/dev-ui/whatever\"));\n+        assertEquals(2, countingSampler.count.get());\n+\n+        assertEquals(SamplingResult.drop(), getShouldSample(sut, \"/q/dev-ui/whatever/wherever/whenever\"));\n+        assertEquals(2, countingSampler.count.get());\n+\n+        assertEquals(SamplingResult.recordAndSample(), getShouldSample(sut, \"/q/test\"));\n+        assertEquals(3, countingSampler.count.get());\n+    }\n+\n     private static SamplingResult getShouldSample(DropTargetsSampler sut, String target) {\n         return sut.shouldSample(null, null, null, SpanKind.SERVER,\n                 Attributes.of(URL_PATH, target), null);\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "quarkusio__quarkus-45202",
    "pr_id": 45202,
    "issue_id": 45186,
    "repo": "quarkusio/quarkus",
    "problem_statement": "VirtualThreads cannot be used with JAX-RS interfaces\n### Describe the bug\n\nWe are implementing a JAX-RS endpoint, where the API is given by a Java interface (provided by another project). Our implementation consists of an ApplicationScoped bean implementing this interface. We would like to have the implementation execute on virtual threads, but Quarkus fails to recognize the annotation.\n\n### Expected behavior\n\nWe should be able to put \\@RunOnVirtualThread on the class or methods of our bean that implements the JAX-RS interface, to have them execute on a virtual thread.\n\n### Actual behavior\n\nPutting \\@RunOnVirtualThread\n- on the interface itself: ignored\n- on a method of the interface: ignored\n- on the implementing bean itself: ignored\n- on a method of the implementing bean: build time error because the annotation is only allowed on \"entrypoint methods\"\n\nThere seems to be no valid way to get one of the methods to execute on a virtual thread.\nThis behaviour is present in Quarkus 3.17.4 but was already present in 3.8 (with quarkus-resteasy-reactive), so it seems to be general issue with the recognition of \"entrypoints\" in conjunction with Java interfaces.\n\n### How to Reproduce?\n\nI have attached a small reproducer tha shows that \\@RunOnVirtualThread works correctly when put on a JAX-RS bean, but it is being ignored (or leads to an error message) when used in conjunction with interfaces.\n\n### Output of `uname -a` or `ver`\n\nMac OS\n\n### Output of `java -version`\n\nJava 21\n\n### Quarkus version or git rev\n\n3.17.4\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nmvn 3.9.9\n\n### Additional information\n\n[virtual-rest-impl.zip](https://github.com/user-attachments/files/18180635/virtual-rest-impl.zip)\n",
    "issue_word_count": 279,
    "test_files_count": 5,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "extensions/resteasy-reactive/rest-common/deployment/src/main/java/io/quarkus/resteasy/reactive/common/deployment/JaxrsMethodsProcessor.java",
      "independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/EndpointIndexer.java",
      "independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/scanning/ResteasyReactiveScanner.java",
      "integration-tests/virtual-threads/resteasy-reactive-virtual-threads/src/main/java/io/quarkus/virtual/rr/IResource.java",
      "integration-tests/virtual-threads/resteasy-reactive-virtual-threads/src/main/java/io/quarkus/virtual/rr/IResourceOnClass.java",
      "integration-tests/virtual-threads/resteasy-reactive-virtual-threads/src/main/java/io/quarkus/virtual/rr/ResourceImpl.java",
      "integration-tests/virtual-threads/resteasy-reactive-virtual-threads/src/main/java/io/quarkus/virtual/rr/ResourceOnClassImpl.java",
      "integration-tests/virtual-threads/resteasy-reactive-virtual-threads/src/test/java/io/quarkus/virtual/rr/RunOnVirtualThreadTest.java"
    ],
    "pr_changed_test_files": [
      "integration-tests/virtual-threads/resteasy-reactive-virtual-threads/src/main/java/io/quarkus/virtual/rr/IResource.java",
      "integration-tests/virtual-threads/resteasy-reactive-virtual-threads/src/main/java/io/quarkus/virtual/rr/IResourceOnClass.java",
      "integration-tests/virtual-threads/resteasy-reactive-virtual-threads/src/main/java/io/quarkus/virtual/rr/ResourceImpl.java",
      "integration-tests/virtual-threads/resteasy-reactive-virtual-threads/src/main/java/io/quarkus/virtual/rr/ResourceOnClassImpl.java",
      "integration-tests/virtual-threads/resteasy-reactive-virtual-threads/src/test/java/io/quarkus/virtual/rr/RunOnVirtualThreadTest.java"
    ],
    "base_commit": "c7dd25ffe1092de20ffb31ea55d0f2dd923b447f",
    "head_commit": "39e811b51ab50c71151e06cd5ecf6c2982101363",
    "repo_url": "https://github.com/quarkusio/quarkus/pull/45202",
    "swe_url": "https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/45202",
    "dockerfile": "",
    "pr_merged_at": "2025-01-07T12:59:52.000Z",
    "patch": "diff --git a/extensions/resteasy-reactive/rest-common/deployment/src/main/java/io/quarkus/resteasy/reactive/common/deployment/JaxrsMethodsProcessor.java b/extensions/resteasy-reactive/rest-common/deployment/src/main/java/io/quarkus/resteasy/reactive/common/deployment/JaxrsMethodsProcessor.java\nindex 8ec28ced23222..c055709cda97e 100644\n--- a/extensions/resteasy-reactive/rest-common/deployment/src/main/java/io/quarkus/resteasy/reactive/common/deployment/JaxrsMethodsProcessor.java\n+++ b/extensions/resteasy-reactive/rest-common/deployment/src/main/java/io/quarkus/resteasy/reactive/common/deployment/JaxrsMethodsProcessor.java\n@@ -2,15 +2,20 @@\n \n import java.util.function.Predicate;\n \n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.IndexView;\n import org.jboss.jandex.MethodInfo;\n+import org.jboss.jandex.Type;\n import org.jboss.resteasy.reactive.common.processor.ResteasyReactiveDotNames;\n \n+import io.quarkus.arc.deployment.BeanArchiveIndexBuildItem;\n import io.quarkus.deployment.annotations.BuildStep;\n import io.quarkus.deployment.execannotations.ExecutionModelAnnotationsAllowedBuildItem;\n \n public class JaxrsMethodsProcessor {\n     @BuildStep\n-    ExecutionModelAnnotationsAllowedBuildItem jaxrsMethods() {\n+    ExecutionModelAnnotationsAllowedBuildItem jaxrsMethods(BeanArchiveIndexBuildItem beanArchiveIndex) {\n+        IndexView index = beanArchiveIndex.getIndex();\n         return new ExecutionModelAnnotationsAllowedBuildItem(new Predicate<MethodInfo>() {\n             @Override\n             public boolean test(MethodInfo method) {\n@@ -19,7 +24,29 @@ public boolean test(MethodInfo method) {\n                 if (method.declaringClass().hasDeclaredAnnotation(ResteasyReactiveDotNames.PATH)) {\n                     return true;\n                 }\n+                if (isJaxrsResourceMethod(method)) {\n+                    return true;\n+                }\n+\n+                // also look at interfaces implemented by the method's declaringClass\n+                for (Type interfaceType : method.declaringClass().interfaceTypes()) {\n+                    ClassInfo interfaceInfo = index.getClassByName(interfaceType.name());\n+                    if (interfaceInfo != null) {\n+                        if (interfaceInfo.hasDeclaredAnnotation(ResteasyReactiveDotNames.PATH)) {\n+                            return true;\n+                        }\n+                        MethodInfo overriddenMethodInfo = interfaceInfo.method(method.name(),\n+                                method.parameterTypes().toArray(new Type[0]));\n+                        if (overriddenMethodInfo != null && isJaxrsResourceMethod(overriddenMethodInfo)) {\n+                            return true;\n+                        }\n+                    }\n+                }\n+\n+                return false;\n+            }\n \n+            private boolean isJaxrsResourceMethod(MethodInfo method) {\n                 // we currently don't handle custom @HttpMethod annotations, should be fine most of the time\n                 return method.hasDeclaredAnnotation(ResteasyReactiveDotNames.PATH)\n                         || method.hasDeclaredAnnotation(ResteasyReactiveDotNames.GET)\n\ndiff --git a/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/EndpointIndexer.java b/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/EndpointIndexer.java\nindex ae5576b31d7a2..c9e4a537b2139 100644\n--- a/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/EndpointIndexer.java\n+++ b/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/EndpointIndexer.java\n@@ -728,7 +728,7 @@ private ResourceMethod createResourceMethod(ClassInfo currentClassInfo, ClassInf\n             }\n             Set<String> nameBindingNames = nameBindingNames(currentMethodInfo, classNameBindings);\n             boolean blocking = isBlocking(currentMethodInfo, defaultBlocking);\n-            boolean runOnVirtualThread = isRunOnVirtualThread(currentMethodInfo, defaultBlocking);\n+            boolean runOnVirtualThread = isRunOnVirtualThread(currentMethodInfo, blocking, defaultBlocking);\n             // we want to allow \"overriding\" the blocking/non-blocking setting from an implementation class\n             // when the class defining the annotations is an interface\n             if (!actualEndpointInfo.equals(currentClassInfo) && Modifier.isInterface(currentClassInfo.flags())) {\n@@ -739,7 +739,7 @@ private ResourceMethod createResourceMethod(ClassInfo currentClassInfo, ClassInf\n                     //would be reached for a default\n                     blocking = isBlocking(actualMethodInfo,\n                             blocking ? BlockingDefault.BLOCKING : BlockingDefault.NON_BLOCKING);\n-                    runOnVirtualThread = isRunOnVirtualThread(actualMethodInfo,\n+                    runOnVirtualThread = isRunOnVirtualThread(actualMethodInfo, blocking,\n                             blocking ? BlockingDefault.BLOCKING : BlockingDefault.NON_BLOCKING);\n                 }\n             }\n@@ -841,8 +841,7 @@ private String getAnnotationValueAsString(AnnotationTarget target, DotName annot\n         return value;\n     }\n \n-    private boolean isRunOnVirtualThread(MethodInfo info, BlockingDefault defaultValue) {\n-        boolean isRunOnVirtualThread = false;\n+    private boolean isRunOnVirtualThread(MethodInfo info, boolean blocking, BlockingDefault defaultValue) {\n         Map.Entry<AnnotationTarget, AnnotationInstance> runOnVirtualThreadAnnotation = getInheritableAnnotation(info,\n                 RUN_ON_VIRTUAL_THREAD);\n \n@@ -856,28 +855,19 @@ private boolean isRunOnVirtualThread(MethodInfo info, BlockingDefault defaultVal\n                 throw new DeploymentException(\"Method '\" + info.name() + \"' of class '\" + info.declaringClass().name()\n                         + \"' uses @RunOnVirtualThread but the target JDK version doesn't support virtual threads. Please configure your build tool to target Java 19 or above\");\n             }\n-            isRunOnVirtualThread = true;\n-        }\n-\n-        //BlockingDefault.BLOCKING should mean \"block a platform thread\" ? here it does\n-        if (defaultValue == BlockingDefault.BLOCKING) {\n-            return false;\n+            if (!blocking) {\n+                throw new DeploymentException(\n+                        \"Method '\" + info.name() + \"' of class '\" + info.declaringClass().name()\n+                                + \"' is considered a non blocking method. @RunOnVirtualThread can only be used on \" +\n+                                \" methods considered blocking\");\n+            } else {\n+                return true;\n+            }\n         } else if (defaultValue == BlockingDefault.RUN_ON_VIRTUAL_THREAD) {\n-            isRunOnVirtualThread = true;\n-        } else if (defaultValue == BlockingDefault.NON_BLOCKING) {\n-            return false;\n-        }\n-\n-        if (isRunOnVirtualThread && !isBlocking(info, defaultValue)) {\n-            throw new DeploymentException(\n-                    \"Method '\" + info.name() + \"' of class '\" + info.declaringClass().name()\n-                            + \"' is considered a non blocking method. @RunOnVirtualThread can only be used on \" +\n-                            \" methods considered blocking\");\n-        } else if (isRunOnVirtualThread) {\n             return true;\n+        } else {\n+            return false;\n         }\n-\n-        return false;\n     }\n \n     private boolean isBlocking(MethodInfo info, BlockingDefault defaultValue) {\n\ndiff --git a/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/scanning/ResteasyReactiveScanner.java b/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/scanning/ResteasyReactiveScanner.java\nindex 83db410456094..ff8b53878f00f 100644\n--- a/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/scanning/ResteasyReactiveScanner.java\n+++ b/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/scanning/ResteasyReactiveScanner.java\n@@ -105,14 +105,23 @@ public static ApplicationScanningResult scanForApplicationClass(IndexView index,\n                     | InvocationTargetException e) {\n                 throw new RuntimeException(\"Unable to handle class: \" + applicationClass, e);\n             }\n-            if (applicationClassInfo.declaredAnnotation(ResteasyReactiveDotNames.BLOCKING) != null) {\n-                if (applicationClassInfo.declaredAnnotation(ResteasyReactiveDotNames.NON_BLOCKING) != null) {\n-                    throw new DeploymentException(\"JAX-RS Application class '\" + applicationClassInfo.name()\n-                            + \"' contains both @Blocking and @NonBlocking annotations.\");\n-                }\n+            // collect default behaviour, making sure that we don't have multiple contradicting annotations\n+            int numAnnotations = 0;\n+            if (applicationClassInfo.hasDeclaredAnnotation(ResteasyReactiveDotNames.BLOCKING)) {\n                 blocking = BlockingDefault.BLOCKING;\n-            } else if (applicationClassInfo.declaredAnnotation(ResteasyReactiveDotNames.NON_BLOCKING) != null) {\n+                numAnnotations++;\n+            }\n+            if (applicationClassInfo.hasDeclaredAnnotation(ResteasyReactiveDotNames.NON_BLOCKING)) {\n                 blocking = BlockingDefault.NON_BLOCKING;\n+                numAnnotations++;\n+            }\n+            if (applicationClassInfo.hasDeclaredAnnotation(ResteasyReactiveDotNames.RUN_ON_VIRTUAL_THREAD)) {\n+                blocking = BlockingDefault.RUN_ON_VIRTUAL_THREAD;\n+                numAnnotations++;\n+            }\n+            if (numAnnotations > 1) {\n+                throw new DeploymentException(\"JAX-RS Application class '\" + applicationClassInfo.name()\n+                        + \"' contains multiple conflicting @Blocking, @NonBlocking and @RunOnVirtualThread annotations.\");\n             }\n         }\n         if (selectedAppClass != null) {\n",
    "test_patch": "diff --git a/integration-tests/virtual-threads/resteasy-reactive-virtual-threads/src/main/java/io/quarkus/virtual/rr/IResource.java b/integration-tests/virtual-threads/resteasy-reactive-virtual-threads/src/main/java/io/quarkus/virtual/rr/IResource.java\nnew file mode 100644\nindex 0000000000000..75abd9ddedeee\n--- /dev/null\n+++ b/integration-tests/virtual-threads/resteasy-reactive-virtual-threads/src/main/java/io/quarkus/virtual/rr/IResource.java\n@@ -0,0 +1,16 @@\n+package io.quarkus.virtual.rr;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.POST;\n+import jakarta.ws.rs.Path;\n+\n+@Path(\"/itf\")\n+public interface IResource {\n+\n+    @GET\n+    String testGet();\n+\n+    @POST\n+    String testPost(String body);\n+\n+}\n\ndiff --git a/integration-tests/virtual-threads/resteasy-reactive-virtual-threads/src/main/java/io/quarkus/virtual/rr/IResourceOnClass.java b/integration-tests/virtual-threads/resteasy-reactive-virtual-threads/src/main/java/io/quarkus/virtual/rr/IResourceOnClass.java\nnew file mode 100644\nindex 0000000000000..f03baad3bc58f\n--- /dev/null\n+++ b/integration-tests/virtual-threads/resteasy-reactive-virtual-threads/src/main/java/io/quarkus/virtual/rr/IResourceOnClass.java\n@@ -0,0 +1,16 @@\n+package io.quarkus.virtual.rr;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.POST;\n+import jakarta.ws.rs.Path;\n+\n+@Path(\"/itfOnClass\")\n+public interface IResourceOnClass {\n+\n+    @GET\n+    String testGet();\n+\n+    @POST\n+    String testPost(String body);\n+\n+}\n\ndiff --git a/integration-tests/virtual-threads/resteasy-reactive-virtual-threads/src/main/java/io/quarkus/virtual/rr/ResourceImpl.java b/integration-tests/virtual-threads/resteasy-reactive-virtual-threads/src/main/java/io/quarkus/virtual/rr/ResourceImpl.java\nnew file mode 100644\nindex 0000000000000..b2439436526a8\n--- /dev/null\n+++ b/integration-tests/virtual-threads/resteasy-reactive-virtual-threads/src/main/java/io/quarkus/virtual/rr/ResourceImpl.java\n@@ -0,0 +1,29 @@\n+package io.quarkus.virtual.rr;\n+\n+import jakarta.enterprise.context.RequestScoped;\n+\n+import io.quarkus.test.vertx.VirtualThreadsAssertions;\n+import io.smallrye.common.annotation.RunOnVirtualThread;\n+\n+@RequestScoped\n+public class ResourceImpl implements IResource {\n+\n+    private final Counter counter;\n+\n+    ResourceImpl(Counter counter) {\n+        this.counter = counter;\n+    }\n+\n+    @RunOnVirtualThread\n+    public String testGet() {\n+        VirtualThreadsAssertions.assertEverything();\n+        return \"hello-\" + counter.increment();\n+    }\n+\n+    @RunOnVirtualThread\n+    public String testPost(String body) {\n+        VirtualThreadsAssertions.assertEverything();\n+        return body + \"-\" + counter.increment();\n+    }\n+\n+}\n\ndiff --git a/integration-tests/virtual-threads/resteasy-reactive-virtual-threads/src/main/java/io/quarkus/virtual/rr/ResourceOnClassImpl.java b/integration-tests/virtual-threads/resteasy-reactive-virtual-threads/src/main/java/io/quarkus/virtual/rr/ResourceOnClassImpl.java\nnew file mode 100644\nindex 0000000000000..81eabf3de9420\n--- /dev/null\n+++ b/integration-tests/virtual-threads/resteasy-reactive-virtual-threads/src/main/java/io/quarkus/virtual/rr/ResourceOnClassImpl.java\n@@ -0,0 +1,28 @@\n+package io.quarkus.virtual.rr;\n+\n+import jakarta.enterprise.context.RequestScoped;\n+\n+import io.quarkus.test.vertx.VirtualThreadsAssertions;\n+import io.smallrye.common.annotation.RunOnVirtualThread;\n+\n+@RequestScoped\n+@RunOnVirtualThread\n+public class ResourceOnClassImpl implements IResourceOnClass {\n+\n+    private final Counter counter;\n+\n+    ResourceOnClassImpl(Counter counter) {\n+        this.counter = counter;\n+    }\n+\n+    public String testGet() {\n+        VirtualThreadsAssertions.assertEverything();\n+        return \"hello-\" + counter.increment();\n+    }\n+\n+    public String testPost(String body) {\n+        VirtualThreadsAssertions.assertEverything();\n+        return body + \"-\" + counter.increment();\n+    }\n+\n+}\n\ndiff --git a/integration-tests/virtual-threads/resteasy-reactive-virtual-threads/src/test/java/io/quarkus/virtual/rr/RunOnVirtualThreadTest.java b/integration-tests/virtual-threads/resteasy-reactive-virtual-threads/src/test/java/io/quarkus/virtual/rr/RunOnVirtualThreadTest.java\nindex a2af77a6f9be2..1012012b040ff 100644\n--- a/integration-tests/virtual-threads/resteasy-reactive-virtual-threads/src/test/java/io/quarkus/virtual/rr/RunOnVirtualThreadTest.java\n+++ b/integration-tests/virtual-threads/resteasy-reactive-virtual-threads/src/test/java/io/quarkus/virtual/rr/RunOnVirtualThreadTest.java\n@@ -2,6 +2,7 @@\n \n import static org.hamcrest.Matchers.is;\n \n+import java.util.Arrays;\n import java.util.UUID;\n \n import org.junit.jupiter.api.Test;\n@@ -18,30 +19,42 @@ class RunOnVirtualThreadTest {\n \n     @Test\n     void testGet() {\n-        RestAssured.get().then()\n-                .assertThat().statusCode(200)\n-                .body(is(\"hello-1\"));\n-        RestAssured.get().then()\n-                .assertThat().statusCode(200)\n-                // Same value - request scoped bean\n-                .body(is(\"hello-1\"));\n+        // test all variations:\n+        // - MyResource (\"/\"): simple JAX-RS bean\n+        // - ResourceImpl (\"/itf\"): bean implementing a JAX-RS interface with VT annotation on the method\n+        // - ResourceOnClassImpl (\"/itfOnClass\"): bean implementing a JAX-RS interface with VT annotation on the class\n+        for (String url : Arrays.asList(\"/\", \"itf\", \"itfOnClass\")) {\n+            RestAssured.get(url).then()\n+                    .assertThat().statusCode(200)\n+                    .body(is(\"hello-1\"));\n+            RestAssured.get(url).then()\n+                    .assertThat().statusCode(200)\n+                    // Same value - request scoped bean\n+                    .body(is(\"hello-1\"));\n+        }\n     }\n \n     @Test\n     void testPost() {\n-        var body1 = UUID.randomUUID().toString();\n-        var body2 = UUID.randomUUID().toString();\n-        RestAssured\n-                .given().body(body1)\n-                .post().then()\n-                .assertThat().statusCode(200)\n-                .body(is(body1 + \"-1\"));\n-        RestAssured\n-                .given().body(body2)\n-                .post().then()\n-                .assertThat().statusCode(200)\n-                // Same value - request scoped bean\n-                .body(is(body2 + \"-1\"));\n+        // test all variations:\n+        // - MyResource (\"/\"): simple JAX-RS bean\n+        // - ResourceImpl (\"/itf\"): bean implementing a JAX-RS interface with VT annotation on the method\n+        // - ResourceOnClassImpl (\"/itfOnClass\"): bean implementing a JAX-RS interface with VT annotation on the class\n+        for (String url : Arrays.asList(\"/\", \"itf\", \"itfOnClass\")) {\n+            var body1 = UUID.randomUUID().toString();\n+            var body2 = UUID.randomUUID().toString();\n+            RestAssured\n+                    .given().body(body1)\n+                    .post(url).then()\n+                    .assertThat().statusCode(200)\n+                    .body(is(body1 + \"-1\"));\n+            RestAssured\n+                    .given().body(body2)\n+                    .post(url).then()\n+                    .assertThat().statusCode(200)\n+                    // Same value - request scoped bean\n+                    .body(is(body2 + \"-1\"));\n+        }\n     }\n \n     @Test\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  }
]