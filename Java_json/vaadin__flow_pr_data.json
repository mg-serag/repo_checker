[
  {
    "instance_id": "vaadin__flow-21793",
    "pr_id": 21793,
    "issue_id": 21778,
    "repo": "vaadin/flow",
    "problem_statement": "Signal effect does not trigger when value changes to null\nThere seems to be a bug in the change tracking that prevents effects from triggering when the value of a `ValueSignal` changes from a non-null value to `null`.\n\nThis unit test would fail:\n```java\n@Test\nvoid changeTracking_changeValueToNull_effectTriggered() {\n    ValueSignal<String> signal = new ValueSignal<>(\"initial\");\n    ArrayList<String> invocations = new ArrayList<>();\n    \n    Signal.effect(() -> {\n        invocations.add(signal.value());\n    });\n    \n    assertEquals(Arrays.asList(\"initial\"), invocations);\n    \n    signal.value(null);\n    assertEquals(Arrays.asList(\"initial\", null), invocations);\n}\n```",
    "issue_word_count": 79,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "signals/src/main/java/com/vaadin/signals/Signal.java",
      "signals/src/test/java/com/vaadin/signals/impl/EffectTest.java"
    ],
    "pr_changed_test_files": [
      "signals/src/test/java/com/vaadin/signals/impl/EffectTest.java"
    ],
    "base_commit": "f42391c75008e0623b59b7446472db5449cbe835",
    "head_commit": "950dd8c871c3e3a1934e521cedbb758a8584ce97",
    "repo_url": "https://github.com/vaadin/flow/pull/21793",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21793",
    "dockerfile": "",
    "pr_merged_at": "2025-06-27T07:36:04.000Z",
    "patch": "diff --git a/signals/src/main/java/com/vaadin/signals/Signal.java b/signals/src/main/java/com/vaadin/signals/Signal.java\nindex 488aba96476..80d79402428 100644\n--- a/signals/src/main/java/com/vaadin/signals/Signal.java\n+++ b/signals/src/main/java/com/vaadin/signals/Signal.java\n@@ -1,7 +1,6 @@\n package com.vaadin.signals;\n \n import java.util.Objects;\n-import java.util.Optional;\n import java.util.concurrent.Executor;\n import java.util.function.Function;\n import java.util.function.Predicate;\n@@ -220,10 +219,6 @@ protected Predicate<SignalCommand> mergeValidators(\n      */\n     protected abstract Object usageChangeValue(Data data);\n \n-    private Optional<Object> usageChangeValue(Transaction transaction) {\n-        return transaction.read(tree).data(id).map(this::usageChangeValue);\n-    }\n-\n     boolean isValid(SignalCommand command) {\n         if (command instanceof SignalCommand.ConditionCommand) {\n             return true;\n@@ -389,22 +384,22 @@ protected SignalTree tree() {\n      * @return a usage instance, not <code>null</code>\n      */\n     protected Usage createUsage(Transaction transaction) {\n-        Optional<Object> usageChangeValue = usageChangeValue(transaction);\n-        if (usageChangeValue.isEmpty()) {\n+        Data data = data(transaction);\n+        if (data == null) {\n             // Node is removed so no usage to track\n             return UsageTracker.NO_USAGE;\n         }\n \n         // Capture so that we can use it later\n-        Object originalValue = usageChangeValue.get();\n+        Object originalValue = usageChangeValue(data);\n \n         return new Usage() {\n             @Override\n             public boolean hasChanges() {\n-                return usageChangeValue(Transaction.getCurrent())\n-                        .map(changeValue -> !Objects.equals(originalValue,\n-                                changeValue))\n-                        .orElse(Boolean.FALSE);\n+                Data currentData = data(Transaction.getCurrent());\n+\n+                return currentData != null && !Objects.equals(originalValue,\n+                        usageChangeValue(currentData));\n             }\n \n             @Override\n",
    "test_patch": "diff --git a/signals/src/test/java/com/vaadin/signals/impl/EffectTest.java b/signals/src/test/java/com/vaadin/signals/impl/EffectTest.java\nindex 0882397a9d3..ec37cf5b522 100644\n--- a/signals/src/test/java/com/vaadin/signals/impl/EffectTest.java\n+++ b/signals/src/test/java/com/vaadin/signals/impl/EffectTest.java\n@@ -19,6 +19,7 @@\n import static org.junit.jupiter.api.Assertions.assertThrows;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n@@ -288,6 +289,21 @@ void changeTracking_readChildNodes_coveredByNextEffectInvocation() {\n                 invocations);\n     }\n \n+    @Test\n+    void changeTracking_changeValueToNull_effectTriggered() {\n+        ValueSignal<String> signal = new ValueSignal<>(\"initial\");\n+        ArrayList<String> invocations = new ArrayList<>();\n+\n+        Signal.effect(() -> {\n+            invocations.add(signal.value());\n+        });\n+\n+        assertEquals(Arrays.asList(\"initial\"), invocations);\n+\n+        signal.value(null);\n+        assertEquals(Arrays.asList(\"initial\", null), invocations);\n+    }\n+\n     @Test\n     void callback_updateSignal_throws() {\n         ValueSignal<String> signal = new ValueSignal<>(\"value\");\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21770",
    "pr_id": 21770,
    "issue_id": 18524,
    "repo": "vaadin/flow",
    "problem_statement": "BeanPropertySet doesn't find bean properties from interface default method getters & setters\n### Description of the bug\r\n\r\n`BeanPropertySet` is supposed to identify Java bean properties, which are defined by the existence of getter and setter methods.\r\n\r\nHowever, `BeanPropertySet` fails to find getter and setter methods that are inherited as `default` methods from implemented interfaces.\r\n\r\nIf the methods are defined in an `abstract` superclass instead of an interface, everything works as it should... but there should be no difference in behavior in these two scenarios, as they are equally valid.\r\n\r\n\r\n### Expected behavior\r\n\r\n`BeanPropertySet` should find inherited getter and setter methods no matter how they are inherited.\r\n\r\n### Minimal reproducible example\r\n\r\n\r\nThis test program demonstrates the problem:\r\n```java\r\nimport com.vaadin.flow.data.binder.*;\r\nimport java.util.regex.*;\r\n\r\npublic class BeanPropertySetTest {\r\n\r\n    public interface HasName {\r\n\r\n        default String getName() {\r\n            return this.getLastName() + \", \" + this.getFirstName();\r\n        }\r\n        default void setName(String name) {\r\n            final Matcher matcher = Pattern.compile(\"^(.+), (.+)$\").matcher(name);\r\n            this.setLastName(matcher.group(1));\r\n            this.setFirstName(matcher.group(2));\r\n        }\r\n\r\n        String getLastName();\r\n        void setLastName(String lastName);\r\n\r\n        String getFirstName();\r\n        void setFirstName(String firstName);\r\n    }   \r\n\r\n    public class MyClass implements HasName {\r\n\r\n        private String lastName;\r\n        private String firstName;\r\n\r\n        @Override\r\n        public String getLastName() {\r\n            return this.lastName;\r\n        }\r\n        @Override\r\n        public void setLastName(String lastName) {\r\n            this.lastName = lastName;\r\n        }\r\n\r\n        @Override\r\n        public String getFirstName() {\r\n            return this.firstName;\r\n        }\r\n        @Override\r\n        public void setFirstName(String firstName) {\r\n            this.firstName = firstName;\r\n        }\r\n    }\r\n    \r\n    public static void main(String[] args) {\r\n        final PropertySet<MyClass> propertySet = BeanPropertySet.get(MyClass.class);\r\n        for (String propertyName : new String[] { \"lastName\", \"firstName\", \"name\" }) {\r\n            System.out.println(String.format(\"\\\"%s\\\" -> %s\",\r\n              propertyName, propertySet.getProperty(propertyName)));\r\n        }\r\n    }\r\n}\r\n```\r\nThere is a `\"name\"` property defined in the `MyClass` class, but `BeanPropertySet` doesn't find it.\r\n\r\nAs a result the test program above outputs this:\r\n```\r\n\"lastName\" -> Optional[com.vaadin.flow.data.binder.BeanPropertySet$BeanPropertyDefinition@312b1dae]\r\n\"firstName\" -> Optional[com.vaadin.flow.data.binder.BeanPropertySet$BeanPropertyDefinition@7530d0a]\r\n\"name\" -> Optional.empty\r\n```\r\n\r\n### Versions\r\n\r\n- Vaadin / Flow version: 24.3.2\r\n- Java version: 17.0.9\r\n- OS version: Mac OS Sonoma 14.2.1\r\n",
    "issue_word_count": 316,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "flow-data/src/test/java/com/vaadin/flow/data/binder/BeanPropertySetTest.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/BeanUtil.java"
    ],
    "pr_changed_test_files": [
      "flow-data/src/test/java/com/vaadin/flow/data/binder/BeanPropertySetTest.java"
    ],
    "base_commit": "83c2aa6f8945de3441fe3c894d2636c53b06c60b",
    "head_commit": "4822cc9774c6900bbda610f9ca5fd1d442df1261",
    "repo_url": "https://github.com/vaadin/flow/pull/21770",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21770",
    "dockerfile": "",
    "pr_merged_at": "2025-06-26T08:03:26.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/internal/BeanUtil.java b/flow-server/src/main/java/com/vaadin/flow/internal/BeanUtil.java\nindex 437675dd251..a52ffb3531f 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/BeanUtil.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/BeanUtil.java\n@@ -78,23 +78,18 @@ public static List<PropertyDescriptor> getBeanPropertyDescriptors(\n \n             return propertyDescriptors;\n         }\n-        // Oracle bug 4275879: Introspector does not consider superinterfaces of\n-        // an interface\n-        if (beanType.isInterface()) {\n-            List<PropertyDescriptor> propertyDescriptors = new ArrayList<>();\n+        // Introspector does not consider superinterfaces of\n+        // an interface nor does it consider default methods of interfaces.\n+        List<PropertyDescriptor> propertyDescriptors = new ArrayList<>();\n \n-            for (Class<?> cls : beanType.getInterfaces()) {\n-                propertyDescriptors.addAll(getBeanPropertyDescriptors(cls));\n-            }\n+        for (Class<?> cls : beanType.getInterfaces()) {\n+            propertyDescriptors.addAll(getBeanPropertyDescriptors(cls));\n+        }\n \n-            BeanInfo info = Introspector.getBeanInfo(beanType);\n-            propertyDescriptors.addAll(getPropertyDescriptors(info));\n+        BeanInfo info = Introspector.getBeanInfo(beanType);\n+        propertyDescriptors.addAll(getPropertyDescriptors(info));\n \n-            return propertyDescriptors;\n-        } else {\n-            BeanInfo info = Introspector.getBeanInfo(beanType);\n-            return getPropertyDescriptors(info);\n-        }\n+        return propertyDescriptors;\n     }\n \n     /**\n",
    "test_patch": "diff --git a/flow-data/src/test/java/com/vaadin/flow/data/binder/BeanPropertySetTest.java b/flow-data/src/test/java/com/vaadin/flow/data/binder/BeanPropertySetTest.java\nindex f11b2844358..87e46123cff 100644\n--- a/flow-data/src/test/java/com/vaadin/flow/data/binder/BeanPropertySetTest.java\n+++ b/flow-data/src/test/java/com/vaadin/flow/data/binder/BeanPropertySetTest.java\n@@ -28,6 +28,8 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n \n import junit.framework.AssertionFailedError;\n@@ -406,4 +408,81 @@ public void get_beanImplementsGenericInterfaceSubclassWithDefaultMethod_interfac\n         Assert.assertEquals(GenericIface.class, defs.get(2).getType());\n     }\n \n+    public interface HasSomething {\n+        default String getSomething() {\n+            return \"something\";\n+        }\n+\n+        default void setSomething(String something) {\n+            // do nothing\n+        }\n+\n+    }\n+\n+    public interface HasName extends HasSomething {\n+\n+        default String getName() {\n+            return this.getLastName() + \", \" + this.getFirstName();\n+        }\n+\n+        default void setName(String name) {\n+            final Matcher matcher = Pattern.compile(\"^(.+), (.+)$\")\n+                    .matcher(name);\n+            this.setLastName(matcher.group(1));\n+            this.setFirstName(matcher.group(2));\n+        }\n+\n+        String getLastName();\n+\n+        void setLastName(String lastName);\n+\n+        String getFirstName();\n+\n+        void setFirstName(String firstName);\n+    }\n+\n+    public class MyClass implements HasName {\n+\n+        private String lastName;\n+        private String firstName;\n+\n+        @Override\n+        public String getLastName() {\n+            return this.lastName;\n+        }\n+\n+        @Override\n+        public void setLastName(String lastName) {\n+            this.lastName = lastName;\n+        }\n+\n+        @Override\n+        public String getFirstName() {\n+            return this.firstName;\n+        }\n+\n+        @Override\n+        public void setFirstName(String firstName) {\n+            this.firstName = firstName;\n+        }\n+    }\n+\n+    @Test\n+    public void includesDefaultMethodsFromInterfaces() {\n+        PropertySet<MyClass> set = BeanPropertySet.get(MyClass.class);\n+\n+        List<PropertyDefinition<MyClass, ?>> defs = set.getProperties()\n+                .collect(Collectors.toList());\n+\n+        Assert.assertEquals(4, defs.size());\n+        Assert.assertEquals(\"firstName\", defs.get(0).getName());\n+        Assert.assertEquals(String.class, defs.get(0).getType());\n+        Assert.assertEquals(\"lastName\", defs.get(1).getName());\n+        Assert.assertEquals(String.class, defs.get(1).getType());\n+        Assert.assertEquals(\"name\", defs.get(2).getName());\n+        Assert.assertEquals(String.class, defs.get(2).getType());\n+        Assert.assertEquals(\"something\", defs.get(3).getName());\n+        Assert.assertEquals(String.class, defs.get(3).getType());\n+\n+    }\n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21764",
    "pr_id": 21764,
    "issue_id": 21762,
    "repo": "vaadin/flow",
    "problem_statement": "Upgrade Flow to Jakarta EE 11\n- jakarta.platform:jakarta.jakartaee-web-api:11.0.0\n- jakarta.validation:jakarta.validation-api:3.1.1\n- jakarta.servlet:jakarta.servlet-api:6.1.0\n- jakarta.annotation:jakarta.annotation-api:2.1.1\n- jakarta.websocket:jakarta.websocket-api:2.2.0\n- jakarta.websocket:jakarta.websocket-client-api:2.2.0\n- javax.activation:javax.activation-api:1.2.0\n- javax.xml.bind:jaxb-api:4.0",
    "issue_word_count": 71,
    "test_files_count": 1,
    "non_test_files_count": 7,
    "pr_changed_files": [
      "flow-data/pom.xml",
      "flow-html-components/pom.xml",
      "flow-lit-template/pom.xml",
      "flow-polymer-template/pom.xml",
      "flow-server/pom.xml",
      "flow-tests/vaadin-spring-tests/pom.xml",
      "pom.xml",
      "vaadin-dev-server/pom.xml"
    ],
    "pr_changed_test_files": [
      "flow-tests/vaadin-spring-tests/pom.xml"
    ],
    "base_commit": "f214305509c51f0a12a2ec953685f4233f917687",
    "head_commit": "1029e680251839684ab5ed9f546caaa0b6e5c917",
    "repo_url": "https://github.com/vaadin/flow/pull/21764",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21764",
    "dockerfile": "",
    "pr_merged_at": "2025-06-25T12:31:42.000Z",
    "patch": "diff --git a/flow-data/pom.xml b/flow-data/pom.xml\nindex 6adbe933555..0de9ef475fb 100644\n--- a/flow-data/pom.xml\n+++ b/flow-data/pom.xml\n@@ -23,7 +23,6 @@\n         <dependency>\n             <groupId>jakarta.validation</groupId>\n             <artifactId>jakarta.validation-api</artifactId>\n-            <version>${jakarta.validation.version}</version>\n             <scope>provided</scope>\n         </dependency>\n         <dependency>\n@@ -66,7 +65,6 @@\n         <dependency>\n             <groupId>jakarta.annotation</groupId>\n             <artifactId>jakarta.annotation-api</artifactId>\n-            <version>${jakarta.annotation.api.version}</version>\n             <scope>test</scope>\n         </dependency>\n         <dependency>\n\ndiff --git a/flow-html-components/pom.xml b/flow-html-components/pom.xml\nindex 0da8900e5ad..22a07f26350 100644\n--- a/flow-html-components/pom.xml\n+++ b/flow-html-components/pom.xml\n@@ -27,9 +27,11 @@\n             <artifactId>flow-data</artifactId>\n             <version>${project.version}</version>\n         </dependency>\n+\n         <dependency>\n             <groupId>jakarta.platform</groupId>\n             <artifactId>jakarta.jakartaee-web-api</artifactId>\n+            <version>${jakarta.ee.version}</version>\n             <scope>test</scope>\n         </dependency>\n \n\ndiff --git a/flow-lit-template/pom.xml b/flow-lit-template/pom.xml\nindex 600c272fd40..bc3375f730b 100644\n--- a/flow-lit-template/pom.xml\n+++ b/flow-lit-template/pom.xml\n@@ -39,6 +39,7 @@\n         <dependency>\n             <groupId>jakarta.platform</groupId>\n             <artifactId>jakarta.jakartaee-web-api</artifactId>\n+            <version>${jakarta.ee.version}</version>\n             <scope>test</scope>\n         </dependency>\n \n\ndiff --git a/flow-polymer-template/pom.xml b/flow-polymer-template/pom.xml\nindex 4bb74915524..12f23277ef5 100644\n--- a/flow-polymer-template/pom.xml\n+++ b/flow-polymer-template/pom.xml\n@@ -55,6 +55,7 @@\n         <dependency>\n             <groupId>jakarta.platform</groupId>\n             <artifactId>jakarta.jakartaee-web-api</artifactId>\n+            <version>${jakarta.ee.version}</version>\n             <scope>test</scope>\n         </dependency>\n \n\ndiff --git a/flow-server/pom.xml b/flow-server/pom.xml\nindex 73ff3bba2e0..8c31635090b 100644\n--- a/flow-server/pom.xml\n+++ b/flow-server/pom.xml\n@@ -66,7 +66,6 @@\n         <dependency>\n             <groupId>jakarta.annotation</groupId>\n             <artifactId>jakarta.annotation-api</artifactId>\n-            <version>${jakarta.annotation.api.version}</version>\n             <scope>provided</scope>\n         </dependency>\n \n\ndiff --git a/pom.xml b/pom.xml\nindex 326dbdf523f..3ea6ebc17f6 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -86,17 +86,15 @@\n \n         <!-- Dependencies -->\n         <spring.boot.version>4.0.0-SNAPSHOT</spring.boot.version>\n+        <jakarta.ee.version>11.0.0</jakarta.ee.version>\n         <gwt.version>2.9.0</gwt.version>\n         <hibernate.validator.version>9.0.1.Final</hibernate.validator.version>\n         <slf4j.version>2.0.17</slf4j.version>\n         <polymer.version>2.6.1</polymer.version>\n         <jackson.version>2.19.1</jackson.version>\n         <jackson.databind.version>${jackson.version}</jackson.databind.version>\n-        <jakarta.validation.version>3.1.1</jakarta.validation.version>\n-        <jakarta.annotation.api.version>3.0.0</jakarta.annotation.api.version>\n         <jaxb.version>4.0.5</jaxb.version>\n         <guava.version>33.4.8-jre</guava.version>\n-        <jakarta.websocket.version>2.2.0</jakarta.websocket.version>\n         <javassist.version>3.30.2-GA</javassist.version>\n \n         <!-- Plugins -->\n@@ -228,6 +226,14 @@\n \n     <dependencyManagement>\n         <dependencies>\n+            <dependency>\n+                <groupId>jakarta.platform</groupId>\n+                <artifactId>jakarta.jakartaee-bom</artifactId>\n+                <version>${jakarta.ee.version}</version>\n+                <type>pom</type>\n+                <scope>import</scope>\n+            </dependency>\n+\n             <dependency>\n                 <groupId>com.google.jsinterop</groupId>\n                 <artifactId>jsinterop</artifactId>\n@@ -259,18 +265,6 @@\n                 <version>${slf4j.version}</version>\n             </dependency>\n \n-            <dependency>\n-                <groupId>jakarta.servlet</groupId>\n-                <artifactId>jakarta.servlet-api</artifactId>\n-                <version>6.0.0</version>\n-            </dependency>\n-\n-            <dependency>\n-                <groupId>jakarta.platform</groupId>\n-                <artifactId>jakarta.jakartaee-web-api</artifactId>\n-                <version>10.0.0</version>\n-            </dependency>\n-\n             <dependency>\n                 <groupId>net.bytebuddy</groupId>\n                 <artifactId>byte-buddy</artifactId>\n@@ -726,7 +720,7 @@\n                 <module>flow-tests</module>\n             </modules>\n         </profile>\n-        \n+\n         <profile>\n             <id>validation</id>\n             <properties>\n\ndiff --git a/vaadin-dev-server/pom.xml b/vaadin-dev-server/pom.xml\nindex 7155ad370a7..8fec2df4a7c 100644\n--- a/vaadin-dev-server/pom.xml\n+++ b/vaadin-dev-server/pom.xml\n@@ -72,21 +72,19 @@\n         <dependency>\n             <groupId>jakarta.websocket</groupId>\n             <artifactId>jakarta.websocket-api</artifactId>\n-            <version>${jakarta.websocket.version}</version>\n             <scope>provided</scope>\n         </dependency>\n         <dependency>\n             <groupId>jakarta.websocket</groupId>\n             <artifactId>jakarta.websocket-client-api</artifactId>\n-            <version>${jakarta.websocket.version}</version>\n             <scope>provided</scope>\n         </dependency>\n \n         <!-- Test dependencies -->\n-\n         <dependency>\n             <groupId>jakarta.platform</groupId>\n             <artifactId>jakarta.jakartaee-web-api</artifactId>\n+            <version>${jakarta.ee.version}</version>\n             <scope>test</scope>\n         </dependency>\n \n",
    "test_patch": "diff --git a/flow-tests/vaadin-spring-tests/pom.xml b/flow-tests/vaadin-spring-tests/pom.xml\nindex 5d571ebc3f4..07b92d79abf 100644\n--- a/flow-tests/vaadin-spring-tests/pom.xml\n+++ b/flow-tests/vaadin-spring-tests/pom.xml\n@@ -121,7 +121,6 @@\n         <dependency>\n             <groupId>jakarta.annotation</groupId>\n             <artifactId>jakarta.annotation-api</artifactId>\n-            <version>${jakarta.annotation.api.version}</version>\n         </dependency>\n         <dependency>\n             <groupId>jakarta.websocket</groupId>\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21725",
    "pr_id": 21725,
    "issue_id": 21481,
    "repo": "vaadin/flow",
    "problem_statement": "ComboBox with AbstractBackEndDataProvider - Query pageSize always null\n### Description\n\nI have noticed that, when using a `ComboBox` with an `AbstractBackEndDataProvider`, the `Query` object in `fetchFromBackEnd` never has `pageSize` set, which causes it to always default to `limit`.\n\nThis was an issue in my current Project, where my `AbstractBackEndDataProvider` implementation queries a `JpaRepository` with a `Pageable` Object. In order to instantiate this object I need the pageNumber and pageSize, which I can't properly compute without explicitly having a pageSize.\n\nThe issue would namely occur when the DataProvider would fetch the last page. Say we have 27 entries and a pageSize set to 20:\n- The first page would be fetched without a an issue: in Query, `limit` it set to 20 (and therefore `getPage()=20` also). \n- The problem occurs once we scroll down; a second query is executed, this time with `limit` is 7 (and therefore `getPageSize()` returns 7), and so if I try to instantiate the corresponding PageRequest, I am forced to use `pageNumber = offset / pageSize = 20 / 7 = 2` which is wrong, as we are querying for the second page, and not the third. \n\nThis would cause some values in the dropdown to be displayed twice, and some to not be displayed. See image belowm, here we would expect to see \"String 1\" to \"String 27\". This corresponds to the snippet in the \"Minimal reproducible example\" section:\n\n![Image](https://github.com/user-attachments/assets/f78a742c-70c4-45ae-90af-5d9041dce520)\n\nThe workaround I built in our code consisted in extending my implementation of the `AbstractBackEndDataProvider` in order to remember the `pageSize` set in the `ComboBox`. Maybe I am not aware of all details, but it seems to me it would be better to have `DataComunicator#doFetchFromDataProvider` setting the pageSize to the instantiated `Query` object.\n\n![Image](https://github.com/user-attachments/assets/4dc681dc-40ef-4711-a1e9-2f7bae35815f)\n\n### Expected outcome\n\nI would expect the input `Query` parameter of `AbstractBackEndDataProvider#fetchFromBackEnd` to have the pageSize set to the set `pageSize` value in the ComboBox, and not the `limit` of the current query.\n\n### Minimal reproducible example\n\n```\nclass SomeDataProvider extends AbstractBackEndDataProvider<String, String> {\n\n    private final List<String> listOfStrings = new ArrayList<>();\n\n    public SomeDataProvider() {\n        for (int i = 1; i <= 27; i++) {\n            listOfStrings.add(\"String \" + i);\n        }\n    }\n\n    /**\n     * This simulates what a JpaQuery would do.\n     */\n    private Stream<String> fetchPage(int pageNumber, int pageSize) {\n        int calculateOffset = pageNumber * pageSize;\n        return listOfStrings.subList(calculateOffset, Math.min(calculateOffset + pageSize, listOfStrings.size())).stream();\n    }\n\n    @Override\n    protected Stream<String> fetchFromBackEnd(Query<String, String> query) {\n        System.out.println(\"pageSize : \" + query.getPageSize());\n        System.out.println(\"limit : \" + query.getLimit());\n        int pageNumber = query.getOffset() / query.getPageSize();\n        return fetchPage(pageNumber, query.getPageSize());\n    }\n\n    @Override\n    protected int sizeInBackEnd(Query<String, String> query) {\n        return listOfStrings.size();\n    }\n}\n\nComboBox<String> comboBox = new ComboBox<>();\ncomboBox.setPageSize(20);\ncomboBox.setDataProvider(new SomeDataProvider(), SerializableFunction.identity());\n```\n\n### Steps to reproduce\n\n1. Add the ComboBox described above to a view\n2. Open the ComboBox dropdown and scroll to the bottom\n3. The last few elements cannot be seen. Additionally, in the logs see how the following values are logged:\npageSize : 20\nlimit : 20\npageSize : 7\nlimit : 7\n\n### Environment\n\nVaadin version(s): 24.6.7 and 24.7.3\nOS: Windows 10\nSpring-Boot: 3.4.4\n\n### Browsers\n\nFirefox",
    "issue_word_count": 523,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "flow-data/src/main/java/com/vaadin/flow/data/provider/Query.java",
      "flow-data/src/test/java/com/vaadin/flow/data/provider/DataCommunicatorTest.java"
    ],
    "pr_changed_test_files": [
      "flow-data/src/test/java/com/vaadin/flow/data/provider/DataCommunicatorTest.java"
    ],
    "base_commit": "b8580205421a54467f70c6584e95ef5e7c0c8022",
    "head_commit": "d3a06a1c223a7ce38adbebb59fd0e24cfc08ffb0",
    "repo_url": "https://github.com/vaadin/flow/pull/21725",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21725",
    "dockerfile": "",
    "pr_merged_at": "2025-06-19T07:14:35.000Z",
    "patch": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/Query.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/Query.java\nindex e942136d229..10138c74edc 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/Query.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/Query.java\n@@ -116,16 +116,25 @@ public int getLimit() {\n     }\n \n     /**\n-     * Returns a zero-based page index to be retrieved.\n+     * Computes the zero-based page index to be retrieved.\n      * <p>\n      * Vaadin asks data from the backend in paged manner. This shorthand\n      * calculates the page index for backends using paged data access, such as\n      * Spring Data repositories.\n+     * <p>\n+     * If page offset is not evenly divisible with page size raise page size\n+     * until it is. Updates the page size value if it has been raised.\n      *\n      * @return the zero-based page index\n      */\n     public int getPage() {\n         int pageSize = getPageSize();\n+        int pageOffset = getOffset();\n+        pageSize = validateAndCorrectPageSize(pageSize);\n+        return pageOffset / pageSize;\n+    }\n+\n+    private int validateAndCorrectPageSize(int pageSize) {\n         int pageOffset = getOffset();\n         // If page offset is not evenly divisible with pageSize raise\n         // pageSize until it is.\n@@ -136,7 +145,7 @@ public int getPage() {\n             }\n             setPageSize(pageSize);\n         }\n-        return pageOffset / pageSize;\n+        return pageSize;\n     }\n \n     private void setPageSize(Integer pageSize) {\n@@ -144,14 +153,12 @@ private void setPageSize(Integer pageSize) {\n     }\n \n     /**\n-     * Returns the page size that should be returned. The amount of items can be\n-     * smaller if there is no more items available in the backend.\n-     * <p>\n-     * Vaadin asks data from the backend in paged manner.\n+     * Returns the current page size. The amount of items can be smaller if\n+     * there is no more items available in the backend.\n      * <p>\n-     * This is an alias for {@link #getLimit()} if the page offset can be evenly\n-     * divided by the limit. Else the page size will be increased to evenly\n-     * divide offset so the items skip for page will go to the correct item.\n+     * The page size will be increased if it is not evenly divisible with the\n+     * page offset. This will make it so that the page will go to the correct\n+     * item.\n      *\n      * @return the page size used for data access\n      */\n@@ -159,7 +166,7 @@ public int getPageSize() {\n         if (pageSize != null) {\n             return pageSize;\n         }\n-        return getLimit();\n+        return validateAndCorrectPageSize(getLimit());\n     }\n \n     /**\n",
    "test_patch": "diff --git a/flow-data/src/test/java/com/vaadin/flow/data/provider/DataCommunicatorTest.java b/flow-data/src/test/java/com/vaadin/flow/data/provider/DataCommunicatorTest.java\nindex a21db85f7cf..eb35b2debda 100644\n--- a/flow-data/src/test/java/com/vaadin/flow/data/provider/DataCommunicatorTest.java\n+++ b/flow-data/src/test/java/com/vaadin/flow/data/provider/DataCommunicatorTest.java\n@@ -1371,6 +1371,34 @@ public void fetchFromProvider_itemCountLessThanTwoPages_correctItemsReturned() {\n \n     }\n \n+    @Test\n+    public void fetchFromProvider_itemCountLessThanTwoPages_getPageNotUsed_correctItemsReturned() {\n+        List<Item> items = new ArrayList<>();\n+        for (int i = 1; i <= 27; i++) {\n+            items.add(new Item(i));\n+        }\n+\n+        DataProvider<Item, Void> dataProvider = DataProvider\n+                .fromCallbacks(query -> {\n+                    int end = query.getOffset() + query.getPageSize();\n+                    if (end > items.size()) {\n+                        end = items.size();\n+                    }\n+                    return items.subList(query.getOffset(), end).stream();\n+                }, query -> items.size());\n+        dataCommunicator.setDataProvider(dataProvider, null);\n+        dataCommunicator.setPageSize(20);\n+\n+        dataCommunicator.setDataProvider(dataProvider, null);\n+        // request second page with correct db size.\n+        Stream<Item> itemStream = dataCommunicator.fetchFromProvider(20, 7);\n+        List<Item> itemList = itemStream.toList();\n+\n+        Assert.assertEquals(7, itemList.size());\n+        Assert.assertEquals(new Item(21), itemList.get(0));\n+\n+    }\n+\n     @Test\n     public void fetchFromProvider_streamIsClosed() {\n         AtomicBoolean streamIsClosed = new AtomicBoolean();\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21709",
    "pr_id": 21709,
    "issue_id": 9331,
    "repo": "vaadin/flow",
    "problem_statement": "Usage of Class.newInstance()\n`Class.newInstance()` is deprecated since Java 9. \r\n\r\nPer JavaDoc:\r\n> Note that this method propagates any exception thrown by the nullary constructor, including a checked exception. Use of this method effectively bypasses the compile-time exception checking that would otherwise be performed by the compiler.\r\n\r\nProper way to instantiate is to call `Class.getDeclaredConstructor().newInstance()` which wraps any exception in `InvocationTargetException`.\r\n\r\nUsages:\r\n- [ ] `com.vaadin.flow.server.startup.ClassLoaderAwareServletContainerInitializer#onStartup`\r\n- [ ] `com.vaadin.flow.server.frontend.scanner.ThemeWrapper#ThemeWrapper`\r\n- [ ] `com.vaadin.flow.internal.JsonSerializer#toObject(java.lang.Class<T>, java.lang.reflect.Type, elemental.json.JsonValue)`\r\n- [ ] `com.vaadin.flow.internal.JsonSerializer#tryToCreateCollection`",
    "issue_word_count": 103,
    "test_files_count": 17,
    "non_test_files_count": 5,
    "pr_changed_files": [
      "flow-data/src/test/java/com/vaadin/flow/data/binder/Jsr303Test.java",
      "flow-data/src/test/java/com/vaadin/flow/data/binder/NotEmptyTest.java",
      "flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java",
      "flow-html-components/src/test/java/com/vaadin/flow/component/html/ComponentTest.java",
      "flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlComponentSmokeTest.java",
      "flow-html-components/src/test/java/com/vaadin/flow/component/html/InputTest.java",
      "flow-html-components/src/test/java/com/vaadin/flow/component/html/NativeTableTest.java",
      "flow-html-components/src/test/java/com/vaadin/flow/component/html/RangeInputTest.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/JsonSerializer.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FullDependenciesScanner.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/ThemeWrapper.java",
      "flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java",
      "flow-tests/test-frontend/test-bun/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java",
      "flow-tests/test-frontend/test-npm/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java",
      "flow-tests/test-frontend/test-pnpm/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java",
      "flow-tests/test-frontend/vite-test-assets/src/main/java/com/vaadin/viteapp/views/template/TemplateView.java",
      "flow-tests/test-npm-only-features/test-npm-bytecode-scanning/src/main/java/com/vaadin/flow/testnpmonlyfeatures/bytecodescanning/ByteCodeScanningView.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/ui/SerializationTest.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/ui/ToStringTest.java",
      "vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerClassLoaderTest.java"
    ],
    "pr_changed_test_files": [
      "flow-data/src/test/java/com/vaadin/flow/data/binder/Jsr303Test.java",
      "flow-data/src/test/java/com/vaadin/flow/data/binder/NotEmptyTest.java",
      "flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java",
      "flow-html-components/src/test/java/com/vaadin/flow/component/html/ComponentTest.java",
      "flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlComponentSmokeTest.java",
      "flow-html-components/src/test/java/com/vaadin/flow/component/html/InputTest.java",
      "flow-html-components/src/test/java/com/vaadin/flow/component/html/NativeTableTest.java",
      "flow-html-components/src/test/java/com/vaadin/flow/component/html/RangeInputTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java",
      "flow-tests/test-frontend/test-bun/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java",
      "flow-tests/test-frontend/test-npm/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java",
      "flow-tests/test-frontend/test-pnpm/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java",
      "flow-tests/test-frontend/vite-test-assets/src/main/java/com/vaadin/viteapp/views/template/TemplateView.java",
      "flow-tests/test-npm-only-features/test-npm-bytecode-scanning/src/main/java/com/vaadin/flow/testnpmonlyfeatures/bytecodescanning/ByteCodeScanningView.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/ui/SerializationTest.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/ui/ToStringTest.java",
      "vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerClassLoaderTest.java"
    ],
    "base_commit": "0051c335114403c28e097c0b623074afc2104f5a",
    "head_commit": "86b0c388a786fabdd02f795519c1e8df2bfaa72a",
    "repo_url": "https://github.com/vaadin/flow/pull/21709",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21709",
    "dockerfile": "",
    "pr_merged_at": "2025-06-17T12:40:27.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/internal/JsonSerializer.java b/flow-server/src/main/java/com/vaadin/flow/internal/JsonSerializer.java\nindex 8d50d0e4ff9..75156d4d47c 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/JsonSerializer.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/JsonSerializer.java\n@@ -207,7 +207,7 @@ private static <T> T toObject(Class<T> type, Type genericType,\n \n         T instance;\n         try {\n-            instance = type.newInstance();\n+            instance = type.getDeclaredConstructor().newInstance();\n         } catch (Exception e) {\n             throw new IllegalArgumentException(\n                     \"Could not create an instance of type \" + type\n@@ -391,7 +391,8 @@ private static Collection<?> tryToCreateCollection(Class<?> collectionType,\n                             + \"'. Use Lists, Sets or concrete classes that implement java.util.Collection.\");\n         }\n         try {\n-            return (Collection<?>) collectionType.newInstance();\n+            return (Collection<?>) collectionType.getDeclaredConstructor()\n+                    .newInstance();\n         } catch (Exception e) {\n             throw new IllegalArgumentException(\n                     \"Could not create an instance of the collection of type \"\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java\nindex 484308756d7..b91bde33c3b 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java\n@@ -203,7 +203,8 @@ public FrontendDependencies(ClassFinder finder,\n             }\n             throw ex;\n         } catch (ClassNotFoundException | InstantiationException\n-                | IllegalAccessException | IOException e) {\n+                | IllegalAccessException | IOException | NoSuchMethodException\n+                | InvocationTargetException e) {\n             throw new IllegalStateException(\n                     \"Unable to compute frontend dependencies\", e);\n         }\n@@ -611,7 +612,8 @@ private void addEntryPoint(Class<?> entryPointClass, EntryPointType type,\n      * if found in the class-path\n      */\n     private void computeApplicationTheme() throws ClassNotFoundException,\n-            InstantiationException, IllegalAccessException, IOException {\n+            InstantiationException, IllegalAccessException, IOException,\n+            InvocationTargetException, NoSuchMethodException {\n \n         // This really should check entry points and not all classes, but the\n         // old behavior is retained.. for now..\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FullDependenciesScanner.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FullDependenciesScanner.java\nindex 187f6b456ad..6d4b73bd4a0 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FullDependenciesScanner.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FullDependenciesScanner.java\n@@ -386,7 +386,8 @@ private void setupTheme(Class<? extends AbstractTheme> theme,\n             themeDefinition = new ThemeDefinition(theme, variant, name);\n             try {\n                 themeInstance = new ThemeWrapper(theme);\n-            } catch (InstantiationException | IllegalAccessException e) {\n+            } catch (InstantiationException | IllegalAccessException\n+                    | NoSuchMethodException | InvocationTargetException e) {\n                 throw new IllegalStateException(\"Unable to create a new '\"\n                         + theme.getName() + \"' theme instance\", e);\n             }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/ThemeWrapper.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/ThemeWrapper.java\nindex a0283b64739..88974cc62d4 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/ThemeWrapper.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/ThemeWrapper.java\n@@ -37,8 +37,9 @@ class ThemeWrapper implements AbstractTheme, Serializable {\n     private final Serializable instance;\n \n     public ThemeWrapper(Class<? extends AbstractTheme> theme)\n-            throws InstantiationException, IllegalAccessException {\n-        instance = theme.newInstance();\n+            throws InstantiationException, IllegalAccessException,\n+            NoSuchMethodException, InvocationTargetException {\n+        instance = theme.getDeclaredConstructor().newInstance();\n     }\n \n     @Override\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java b/flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java\nindex ddee450e083..97fcb4eb319 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java\n@@ -95,11 +95,12 @@ default void onStartup(Set<Class<?>> set, ServletContext context)\n                 Method operation = Stream.of(initializer.getMethods()).filter(\n                         method -> method.getName().equals(processMethodName))\n                         .findFirst().get();\n-                operation.invoke(initializer.newInstance(),\n+                operation.invoke(\n+                        initializer.getDeclaredConstructor().newInstance(),\n                         new Object[] { set, ctx });\n             } catch (ClassNotFoundException | IllegalAccessException\n                     | IllegalArgumentException | InvocationTargetException\n-                    | InstantiationException e) {\n+                    | InstantiationException | NoSuchMethodException e) {\n                 throw new ServletException(e);\n             }\n         };\n",
    "test_patch": "diff --git a/flow-data/src/test/java/com/vaadin/flow/data/binder/Jsr303Test.java b/flow-data/src/test/java/com/vaadin/flow/data/binder/Jsr303Test.java\nindex 97f3d3f8f76..f0ba8152ad7 100644\n--- a/flow-data/src/test/java/com/vaadin/flow/data/binder/Jsr303Test.java\n+++ b/flow-data/src/test/java/com/vaadin/flow/data/binder/Jsr303Test.java\n@@ -114,13 +114,14 @@ public void execute() {\n     }\n \n     @Test\n-    public void beanBinderWithoutJsr303() throws ClassNotFoundException,\n-            NoSuchMethodException, SecurityException, InstantiationException,\n-            IllegalAccessException, IllegalArgumentException,\n-            InvocationTargetException, IOException, InterruptedException {\n+    public void beanBinderWithoutJsr303()\n+            throws ClassNotFoundException, NoSuchMethodException,\n+            SecurityException, InstantiationException, IllegalAccessException,\n+            IllegalArgumentException, InvocationTargetException, IOException {\n         try (URLClassLoader loader = new TestClassLoader()) {\n             Class<?> clazz = loader.loadClass(Jsr303UnitTest.class.getName());\n-            UnitTest test = (UnitTest) clazz.newInstance();\n+            UnitTest test = (UnitTest) clazz.getDeclaredConstructor()\n+                    .newInstance();\n             test.execute();\n         }\n     }\n\ndiff --git a/flow-data/src/test/java/com/vaadin/flow/data/binder/NotEmptyTest.java b/flow-data/src/test/java/com/vaadin/flow/data/binder/NotEmptyTest.java\nindex 6e0476898d6..fcab39b34d0 100644\n--- a/flow-data/src/test/java/com/vaadin/flow/data/binder/NotEmptyTest.java\n+++ b/flow-data/src/test/java/com/vaadin/flow/data/binder/NotEmptyTest.java\n@@ -106,11 +106,11 @@ public void execute() {\n     public void notEmptyAnnotationIsNotInClasspath()\n             throws ClassNotFoundException, NoSuchMethodException,\n             SecurityException, InstantiationException, IllegalAccessException,\n-            IllegalArgumentException, InvocationTargetException, IOException,\n-            InterruptedException {\n+            IllegalArgumentException, InvocationTargetException, IOException {\n         try (URLClassLoader loader = new TestClassLoader()) {\n             Class<?> clazz = loader.loadClass(NotEmptyUnitTest.class.getName());\n-            UnitTest test = (UnitTest) clazz.newInstance();\n+            UnitTest test = (UnitTest) clazz.getDeclaredConstructor()\n+                    .newInstance();\n             test.execute();\n         }\n     }\n\ndiff --git a/flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java b/flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java\nindex 35ab5d743e3..f344f1b4146 100644\n--- a/flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java\n+++ b/flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java\n@@ -16,6 +16,7 @@\n package com.vaadin.flow.component.html;\n \n import java.beans.IntrospectionException;\n+import java.lang.reflect.InvocationTargetException;\n import java.util.Optional;\n \n import org.junit.After;\n@@ -40,7 +41,8 @@ public void tearDown() {\n \n     @Override\n     public void setup() throws IntrospectionException, InstantiationException,\n-            IllegalAccessException, ClassNotFoundException {\n+            IllegalAccessException, ClassNotFoundException,\n+            InvocationTargetException, NoSuchMethodException {\n         whitelistProperty(\"download\");\n         super.setup();\n     }\n\ndiff --git a/flow-html-components/src/test/java/com/vaadin/flow/component/html/ComponentTest.java b/flow-html-components/src/test/java/com/vaadin/flow/component/html/ComponentTest.java\nindex 9c80fd55d0f..7ca3d2903b9 100644\n--- a/flow-html-components/src/test/java/com/vaadin/flow/component/html/ComponentTest.java\n+++ b/flow-html-components/src/test/java/com/vaadin/flow/component/html/ComponentTest.java\n@@ -48,7 +48,8 @@ public abstract class ComponentTest {\n \n     @Before\n     public void setup() throws IntrospectionException, InstantiationException,\n-            IllegalAccessException, ClassNotFoundException {\n+            IllegalAccessException, ClassNotFoundException,\n+            InvocationTargetException, NoSuchMethodException {\n         component = createComponent();\n         whitelistProperty(\"visible\");\n         addProperties();\n@@ -122,9 +123,11 @@ protected <U> void addProperty(String propertyName, Class<U> propertyType,\n     }\n \n     protected Component createComponent() throws InstantiationException,\n-            IllegalAccessException, ClassNotFoundException {\n+            IllegalAccessException, ClassNotFoundException,\n+            NoSuchMethodException, InvocationTargetException {\n         String componentClass = getClass().getName().replace(\"Test\", \"\");\n-        return (Component) Class.forName(componentClass).newInstance();\n+        return (Component) Class.forName(componentClass)\n+                .getDeclaredConstructor().newInstance();\n     }\n \n     protected Component getComponent() {\n\ndiff --git a/flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlComponentSmokeTest.java b/flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlComponentSmokeTest.java\nindex 7c61c006e47..3caa7436ffa 100644\n--- a/flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlComponentSmokeTest.java\n+++ b/flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlComponentSmokeTest.java\n@@ -138,7 +138,8 @@ private static void smokeTestComponent(\n             // Test that all setters produce a result\n             testSetters(instance);\n         } catch (InstantiationException | IllegalAccessException\n-                | IllegalArgumentException | InvocationTargetException e) {\n+                | IllegalArgumentException | InvocationTargetException\n+                | NoSuchMethodException e) {\n             throw new RuntimeException(e);\n         }\n     }\n@@ -379,12 +380,13 @@ private static Method findGetter(Method setter) {\n \n     private static HtmlComponent createInstance(\n             Class<? extends HtmlComponent> clazz)\n-            throws InstantiationException, IllegalAccessException {\n+            throws InstantiationException, IllegalAccessException,\n+            NoSuchMethodException, InvocationTargetException {\n         Supplier<HtmlComponent> constructor = customConstructors.get(clazz);\n         if (constructor != null) {\n             return constructor.get();\n         } else {\n-            return clazz.newInstance();\n+            return clazz.getDeclaredConstructor().newInstance();\n         }\n     }\n \n\ndiff --git a/flow-html-components/src/test/java/com/vaadin/flow/component/html/InputTest.java b/flow-html-components/src/test/java/com/vaadin/flow/component/html/InputTest.java\nindex 22b5d4eef69..4fbfa65b125 100644\n--- a/flow-html-components/src/test/java/com/vaadin/flow/component/html/InputTest.java\n+++ b/flow-html-components/src/test/java/com/vaadin/flow/component/html/InputTest.java\n@@ -16,6 +16,8 @@\n package com.vaadin.flow.component.html;\n \n import java.beans.IntrospectionException;\n+import java.lang.reflect.InvocationTargetException;\n+\n import org.junit.Test;\n \n public class InputTest extends ComponentTest {\n@@ -24,7 +26,8 @@ public class InputTest extends ComponentTest {\n \n     @Override\n     public void setup() throws IntrospectionException, InstantiationException,\n-            IllegalAccessException, ClassNotFoundException {\n+            IllegalAccessException, ClassNotFoundException,\n+            InvocationTargetException, NoSuchMethodException {\n         whitelistProperty(\"valueChangeMode\");\n         whitelistProperty(\"valueChangeTimeout\");\n         super.setup();\n\ndiff --git a/flow-html-components/src/test/java/com/vaadin/flow/component/html/NativeTableTest.java b/flow-html-components/src/test/java/com/vaadin/flow/component/html/NativeTableTest.java\nindex 54e3b675e90..8e75e559d89 100644\n--- a/flow-html-components/src/test/java/com/vaadin/flow/component/html/NativeTableTest.java\n+++ b/flow-html-components/src/test/java/com/vaadin/flow/component/html/NativeTableTest.java\n@@ -16,6 +16,7 @@\n package com.vaadin.flow.component.html;\n \n import java.beans.IntrospectionException;\n+import java.lang.reflect.InvocationTargetException;\n import java.util.List;\n \n import org.junit.Test;\n@@ -28,7 +29,8 @@ public class NativeTableTest extends ComponentTest {\n \n     @Override\n     public void setup() throws IntrospectionException, InstantiationException,\n-            IllegalAccessException, ClassNotFoundException {\n+            IllegalAccessException, ClassNotFoundException,\n+            InvocationTargetException, NoSuchMethodException {\n         whitelistProperty(\"captionText\");\n         super.setup();\n     }\n\ndiff --git a/flow-html-components/src/test/java/com/vaadin/flow/component/html/RangeInputTest.java b/flow-html-components/src/test/java/com/vaadin/flow/component/html/RangeInputTest.java\nindex 738ee83024c..8eb8de340a7 100644\n--- a/flow-html-components/src/test/java/com/vaadin/flow/component/html/RangeInputTest.java\n+++ b/flow-html-components/src/test/java/com/vaadin/flow/component/html/RangeInputTest.java\n@@ -19,6 +19,7 @@\n import org.junit.Test;\n \n import java.beans.IntrospectionException;\n+import java.lang.reflect.InvocationTargetException;\n \n public class RangeInputTest extends ComponentTest {\n \n@@ -26,7 +27,8 @@ public class RangeInputTest extends ComponentTest {\n \n     @Override\n     public void setup() throws IntrospectionException, InstantiationException,\n-            IllegalAccessException, ClassNotFoundException {\n+            IllegalAccessException, ClassNotFoundException,\n+            InvocationTargetException, NoSuchMethodException {\n         whitelistProperty(\"valueChangeMode\");\n         whitelistProperty(\"valueChangeTimeout\");\n         whitelistProperty(\"enabled\");\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java\nindex 129ee84eb1a..6c2eecb717e 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java\n@@ -15,6 +15,7 @@\n  */\n package com.vaadin.flow.server.frontend.scanner;\n \n+import java.lang.reflect.InvocationTargetException;\n import java.util.Collections;\n import java.util.LinkedHashSet;\n import java.util.Optional;\n@@ -245,7 +246,7 @@ public void extractsAndScansClassesFromMethodReferences() {\n \n     @Test\n     public void defaultThemeIsLoadedForExporters() throws Exception {\n-        FakeLumo.class.newInstance();\n+        FakeLumo.class.getDeclaredConstructor().newInstance();\n         Mockito.when(classFinder.getSubTypesOf(WebComponentExporter.class))\n                 .thenReturn(Stream.of(MyExporter.class)\n                         .collect(Collectors.toSet()));\n@@ -304,9 +305,9 @@ public void layoutClasses_collectedAsEntrypoint() {\n \n     @Test // #9861\n     public void visitedExporter_previousEntryPointsNotOverridden()\n-            throws InstantiationException, IllegalAccessException {\n+            throws Exception {\n \n-        FakeLumo.class.newInstance();\n+        FakeLumo.class.getDeclaredConstructor().newInstance();\n         // Reference found through first entry point\n         Mockito.when(classFinder.getAnnotatedClasses(Route.class))\n                 .thenReturn(Collections.singleton(ReferenceExporter.class));\n\ndiff --git a/flow-tests/test-frontend/test-bun/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java b/flow-tests/test-frontend/test-bun/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java\nindex 9500001334e..e0430306c4f 100644\n--- a/flow-tests/test-frontend/test-bun/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java\n+++ b/flow-tests/test-frontend/test-bun/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java\n@@ -44,7 +44,7 @@ public MissingDependenciesView() {\n         try {\n             Component unreferenced = (Component) Class.forName(\n                     \"com.vaadin.flow.mixedtest.ui.MissingDependenciesView$Unreferenced\")\n-                    .newInstance();\n+                    .getDeclaredConstructor().newInstance();\n \n             // Uncomment to test behavior when the component is referenced\n             // new Unreferenced();\n\ndiff --git a/flow-tests/test-frontend/test-npm/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java b/flow-tests/test-frontend/test-npm/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java\nindex 9500001334e..e0430306c4f 100644\n--- a/flow-tests/test-frontend/test-npm/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java\n+++ b/flow-tests/test-frontend/test-npm/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java\n@@ -44,7 +44,7 @@ public MissingDependenciesView() {\n         try {\n             Component unreferenced = (Component) Class.forName(\n                     \"com.vaadin.flow.mixedtest.ui.MissingDependenciesView$Unreferenced\")\n-                    .newInstance();\n+                    .getDeclaredConstructor().newInstance();\n \n             // Uncomment to test behavior when the component is referenced\n             // new Unreferenced();\n\ndiff --git a/flow-tests/test-frontend/test-pnpm/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java b/flow-tests/test-frontend/test-pnpm/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java\nindex 9500001334e..e0430306c4f 100644\n--- a/flow-tests/test-frontend/test-pnpm/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java\n+++ b/flow-tests/test-frontend/test-pnpm/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java\n@@ -44,7 +44,7 @@ public MissingDependenciesView() {\n         try {\n             Component unreferenced = (Component) Class.forName(\n                     \"com.vaadin.flow.mixedtest.ui.MissingDependenciesView$Unreferenced\")\n-                    .newInstance();\n+                    .getDeclaredConstructor().newInstance();\n \n             // Uncomment to test behavior when the component is referenced\n             // new Unreferenced();\n\ndiff --git a/flow-tests/test-frontend/vite-test-assets/src/main/java/com/vaadin/viteapp/views/template/TemplateView.java b/flow-tests/test-frontend/vite-test-assets/src/main/java/com/vaadin/viteapp/views/template/TemplateView.java\nindex 71008571b04..ef05bd10eae 100644\n--- a/flow-tests/test-frontend/vite-test-assets/src/main/java/com/vaadin/viteapp/views/template/TemplateView.java\n+++ b/flow-tests/test-frontend/vite-test-assets/src/main/java/com/vaadin/viteapp/views/template/TemplateView.java\n@@ -38,7 +38,7 @@ public TemplateView() {\n         try {\n             Class<?> clazz = Class.forName(\n                     \"com.vaadin.viteapp.views.template.ReflectivelyReferencedComponent\");\n-            add((Component) clazz.newInstance());\n+            add((Component) clazz.getDeclaredConstructor().newInstance());\n         } catch (Exception e) {\n             e.printStackTrace();\n         }\n\ndiff --git a/flow-tests/test-npm-only-features/test-npm-bytecode-scanning/src/main/java/com/vaadin/flow/testnpmonlyfeatures/bytecodescanning/ByteCodeScanningView.java b/flow-tests/test-npm-only-features/test-npm-bytecode-scanning/src/main/java/com/vaadin/flow/testnpmonlyfeatures/bytecodescanning/ByteCodeScanningView.java\nindex 09ab1309096..5edf84acd6e 100644\n--- a/flow-tests/test-npm-only-features/test-npm-bytecode-scanning/src/main/java/com/vaadin/flow/testnpmonlyfeatures/bytecodescanning/ByteCodeScanningView.java\n+++ b/flow-tests/test-npm-only-features/test-npm-bytecode-scanning/src/main/java/com/vaadin/flow/testnpmonlyfeatures/bytecodescanning/ByteCodeScanningView.java\n@@ -27,7 +27,8 @@ public class ByteCodeScanningView extends Div {\n     public ByteCodeScanningView() throws Exception {\n         Class<?> clazz = Class.forName(\n                 \"com.vaadin.flow.testnpmonlyfeatures.bytecodescanning.MyButton\");\n-        Component button = (Component) clazz.newInstance();\n+        Component button = (Component) clazz.getDeclaredConstructor()\n+                .newInstance();\n         button.setId(COMPONENT_ID);\n         add(button);\n     }\n\ndiff --git a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/ui/SerializationTest.java b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/ui/SerializationTest.java\nindex 15854e0a1c5..acdc94e3f3f 100644\n--- a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/ui/SerializationTest.java\n+++ b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/ui/SerializationTest.java\n@@ -40,7 +40,8 @@ public void testViewsSerializable() throws Exception {\n             Collection<Class<? extends Component>> viewClasses = new ViewClassLocator(\n                     getClass().getClassLoader()).getAllViewClasses();\n             for (Class<? extends Component> viewClass : viewClasses) {\n-                Component view = viewClass.newInstance();\n+                Component view = viewClass.getDeclaredConstructor()\n+                        .newInstance();\n                 // view.onLocationChange(new LocationChangeEvent(new Router(),\n                 // ui,\n                 // NavigationTrigger.PROGRAMMATIC, new Location(\"\"),\n\ndiff --git a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/ui/ToStringTest.java b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/ui/ToStringTest.java\nindex 03bf658567e..ec228f882a6 100644\n--- a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/ui/ToStringTest.java\n+++ b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/ui/ToStringTest.java\n@@ -29,7 +29,7 @@ public void testViewsElementsStringable() throws Exception {\n         Collection<Class<? extends Component>> viewClasses = new ViewClassLocator(\n                 getClass().getClassLoader()).getAllViewClasses();\n         for (Class<? extends Component> viewClass : viewClasses) {\n-            Component view = viewClass.newInstance();\n+            Component view = viewClass.getDeclaredConstructor().newInstance();\n             String string = view.getElement().toString();\n             Assert.assertNotNull(string);\n             Assert.assertNotEquals(\"\", string);\n\ndiff --git a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerClassLoaderTest.java b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerClassLoaderTest.java\nindex ec1528738f0..8f5911142aa 100644\n--- a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerClassLoaderTest.java\n+++ b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerClassLoaderTest.java\n@@ -35,7 +35,7 @@ public void should_loadResources_from_customClassLoader() throws Exception {\n         // Load the base class with the custom loader\n         Class<?> clz = customLoader\n                 .loadClass(DevModeInitializerTestBase.class.getName());\n-        Object initializer = clz.newInstance();\n+        Object initializer = clz.getDeclaredConstructor().newInstance();\n \n         // Since base class was created using a different classLoader,\n         // its methods and fields need to be called using reflection\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21694",
    "pr_id": 21694,
    "issue_id": 21620,
    "repo": "vaadin/flow",
    "problem_statement": "Upgrade Flow to Spring-Boot 4.0\nUpgrade Spring-Boot version to `4.0.0-SNAPSHOT` in Vaadin Flow and align other dependencies (e.g. hibernate validator, jackson, junit etc. with what is shipped with SB 4.0).\n\nThe list of dependencies to be defined.\n\nShould update to milestone once it's available.\n\nRepositories:\n```xml\n<repositories>\n    <repository>\n      <id>spring-milestones</id>\n      <name>Spring Milestones</name>\n      <url>https://repo.spring.io/milestone</url>\n      <snapshots>\n        <enabled>false</enabled>\n      </snapshots>\n    </repository>\n    <repository>\n      <id>spring-snapshots</id>\n      <name>Spring Snapshots</name>\n      <url>https://repo.spring.io/snapshot</url>\n      <releases>\n        <enabled>false</enabled>\n      </releases>\n    </repository>\n  </repositories>\n  <pluginRepositories>\n    <pluginRepository>\n      <id>spring-milestones</id>\n      <name>Spring Milestones</name>\n      <url>https://repo.spring.io/milestone</url>\n      <snapshots>\n        <enabled>false</enabled>\n      </snapshots>\n    </pluginRepository>\n    <pluginRepository>\n      <id>spring-snapshots</id>\n      <name>Spring Snapshots</name>\n      <url>https://repo.spring.io/snapshot</url>\n      <releases>\n        <enabled>false</enabled>\n      </releases>\n    </pluginRepository>\n  </pluginRepositories>\n```\n",
    "issue_word_count": 147,
    "test_files_count": 1,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "flow-data/src/test/java/com/vaadin/flow/data/binder/NotEmptyTest.java",
      "pom.xml",
      "vaadin-spring/src/main/java/com/vaadin/flow/spring/scopes/VaadinRouteScope.java",
      "vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinAwareSecurityContextHolderStrategy.java"
    ],
    "pr_changed_test_files": [
      "flow-data/src/test/java/com/vaadin/flow/data/binder/NotEmptyTest.java"
    ],
    "base_commit": "8667c65a6fa549abd6d097acb5bf4a8648b51dfa",
    "head_commit": "5a117067a85ec4f175f2a193389c4e0063acd959",
    "repo_url": "https://github.com/vaadin/flow/pull/21694",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21694",
    "dockerfile": "",
    "pr_merged_at": "2025-06-18T09:36:32.000Z",
    "patch": "diff --git a/pom.xml b/pom.xml\nindex 06b4a1a027d..6eeb7c69e1e 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -85,18 +85,18 @@\n         <failOnMissingWebXml>false</failOnMissingWebXml>\n \n         <!-- Dependencies -->\n-        <spring.boot.version>3.5.0</spring.boot.version>\n+        <spring.boot.version>4.0.0-SNAPSHOT</spring.boot.version>\n         <gwt.version>2.9.0</gwt.version>\n-        <hibernate.validator.version>8.0.2.Final</hibernate.validator.version>\n+        <hibernate.validator.version>9.0.0.CR1</hibernate.validator.version>\n         <slf4j.version>2.0.17</slf4j.version>\n         <polymer.version>2.6.1</polymer.version>\n         <jackson.version>2.19.1</jackson.version>\n         <jackson.databind.version>${jackson.version}</jackson.databind.version>\n-        <jakarta.validation.version>3.0.2</jakarta.validation.version>\n-        <jakarta.annotation.api.version>2.1.1</jakarta.annotation.api.version>\n+        <jakarta.validation.version>3.1.1</jakarta.validation.version>\n+        <jakarta.annotation.api.version>3.0.0</jakarta.annotation.api.version>\n         <jaxb.version>4.0.5</jaxb.version>\n         <guava.version>33.4.8-jre</guava.version>\n-        <jakarta.websocket.version>2.1.1</jakarta.websocket.version>\n+        <jakarta.websocket.version>2.2.0</jakarta.websocket.version>\n         <javassist.version>3.30.2-GA</javassist.version>\n \n         <!-- Plugins -->\n@@ -159,6 +159,22 @@\n                 <enabled>false</enabled>\n             </snapshots>\n         </repository>\n+        <repository>\n+            <id>spring-milestones</id>\n+            <name>Spring Milestones</name>\n+            <url>https://repo.spring.io/milestone</url>\n+            <snapshots>\n+                <enabled>false</enabled>\n+            </snapshots>\n+        </repository>\n+        <repository>\n+            <id>spring-snapshots</id>\n+            <name>Spring Snapshots</name>\n+            <url>https://repo.spring.io/snapshot</url>\n+            <releases>\n+                <enabled>false</enabled>\n+            </releases>\n+        </repository>\n         <repository>\n             <id>${flow.release.repo.id}</id>\n             <url>${flow.release.repo.url}</url>\n@@ -185,6 +201,22 @@\n                 <enabled>false</enabled>\n             </snapshots>\n         </pluginRepository>\n+        <pluginRepository>\n+            <id>spring-milestones</id>\n+            <name>Spring Milestones</name>\n+            <url>https://repo.spring.io/milestone</url>\n+            <snapshots>\n+                <enabled>false</enabled>\n+            </snapshots>\n+        </pluginRepository>\n+        <pluginRepository>\n+            <id>spring-snapshots</id>\n+            <name>Spring Snapshots</name>\n+            <url>https://repo.spring.io/snapshot</url>\n+            <releases>\n+                <enabled>false</enabled>\n+            </releases>\n+        </pluginRepository>\n         <pluginRepository>\n             <id>${flow.release.repo.id}</id>\n             <url>${flow.release.repo.url}</url>\n\ndiff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/scopes/VaadinRouteScope.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/scopes/VaadinRouteScope.java\nindex 0be949411a4..86e7d4997ec 100644\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/scopes/VaadinRouteScope.java\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/scopes/VaadinRouteScope.java\n@@ -23,11 +23,11 @@\n import java.util.Map;\n import java.util.Set;\n \n+import org.jspecify.annotations.NonNull;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeansException;\n import org.springframework.beans.factory.ObjectFactory;\n import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n-import org.springframework.lang.NonNull;\n \n import com.vaadin.flow.component.ComponentEventListener;\n import com.vaadin.flow.component.ComponentUtil;\n\ndiff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinAwareSecurityContextHolderStrategy.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinAwareSecurityContextHolderStrategy.java\nindex 2bdaa668e9f..f04bbacbeb3 100644\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinAwareSecurityContextHolderStrategy.java\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinAwareSecurityContextHolderStrategy.java\n@@ -15,14 +15,15 @@\n  */\n package com.vaadin.flow.spring.security;\n \n-import com.vaadin.flow.server.VaadinSession;\n-import org.springframework.lang.NonNull;\n+import java.util.Optional;\n+\n+import org.jspecify.annotations.NonNull;\n import org.springframework.security.core.context.SecurityContext;\n import org.springframework.security.core.context.SecurityContextHolderStrategy;\n import org.springframework.security.core.context.SecurityContextImpl;\n import org.springframework.security.web.context.HttpSessionSecurityContextRepository;\n \n-import java.util.Optional;\n+import com.vaadin.flow.server.VaadinSession;\n \n import static java.util.Objects.requireNonNull;\n \n",
    "test_patch": "diff --git a/flow-data/src/test/java/com/vaadin/flow/data/binder/NotEmptyTest.java b/flow-data/src/test/java/com/vaadin/flow/data/binder/NotEmptyTest.java\nindex fcab39b34d0..e69de29bb2d 100644\n--- a/flow-data/src/test/java/com/vaadin/flow/data/binder/NotEmptyTest.java\n+++ b/flow-data/src/test/java/com/vaadin/flow/data/binder/NotEmptyTest.java\n@@ -1,118 +0,0 @@\n-/*\n- * Copyright 2000-2025 Vaadin Ltd.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n- * use this file except in compliance with the License. You may obtain a copy of\n- * the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package com.vaadin.flow.data.binder;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.lang.reflect.InvocationTargetException;\n-import java.net.URL;\n-import java.net.URLClassLoader;\n-\n-import org.apache.commons.io.IOUtils;\n-import org.hibernate.validator.constraints.NotEmpty;\n-import org.junit.Assert;\n-import org.junit.Test;\n-\n-import com.vaadin.flow.data.binder.testcomponents.TestTextField;\n-import com.vaadin.flow.tests.data.bean.BeanToValidate;\n-\n-/**\n- * @author Vaadin Ltd\n- * @since 1.0\n- *\n- */\n-public class NotEmptyTest {\n-\n-    private static String NOT_EMPTY = \"org.hibernate.validator.constraints.NotEmpty\";\n-\n-    private static class TestClassLoader extends URLClassLoader {\n-\n-        public TestClassLoader() {\n-            super(new URL[0], Thread.currentThread().getContextClassLoader());\n-        }\n-\n-        @Override\n-        public Class<?> loadClass(String name) throws ClassNotFoundException {\n-            String vaadinPackagePrefix = getClass().getPackage().getName();\n-            vaadinPackagePrefix = vaadinPackagePrefix.substring(0,\n-                    vaadinPackagePrefix.lastIndexOf('.'));\n-            if (name.equals(UnitTest.class.getName())) {\n-                super.loadClass(name);\n-            } else if (name.startsWith(NotEmpty.class.getPackage().getName())) {\n-                throw new ClassNotFoundException();\n-            } else if (name.startsWith(vaadinPackagePrefix)) {\n-                String path = name.replace('.', '/').concat(\".class\");\n-                URL resource = Thread.currentThread().getContextClassLoader()\n-                        .getResource(path);\n-                InputStream stream;\n-                try {\n-                    stream = resource.openStream();\n-                    byte[] bytes = IOUtils.toByteArray(stream);\n-                    return defineClass(name, bytes, 0, bytes.length);\n-                } catch (IOException e) {\n-                    throw new RuntimeException(e);\n-                }\n-            }\n-            return super.loadClass(name);\n-        }\n-    }\n-\n-    public interface UnitTest {\n-        void execute();\n-    }\n-\n-    public static class NotEmptyUnitTest implements UnitTest {\n-\n-        private final TestTextField nameField = new TestTextField();\n-\n-        @Override\n-        public void execute() {\n-            try {\n-                Class.forName(NOT_EMPTY);\n-                // The NotEmpty class must not be in the classpath\n-                Assert.fail();\n-            } catch (ClassNotFoundException e) {\n-            }\n-            BeanValidationBinder<BeanToValidate> binder = new BeanValidationBinder<>(\n-                    BeanToValidate.class);\n-\n-            BeanToValidate item = new BeanToValidate();\n-            String name = \"Johannes\";\n-            item.setFirstname(name);\n-            item.setAge(32);\n-\n-            binder.bind(nameField, \"firstname\");\n-            binder.setBean(item);\n-\n-            Assert.assertTrue(nameField.isRequiredIndicatorVisible());\n-        }\n-\n-    }\n-\n-    @Test\n-    public void notEmptyAnnotationIsNotInClasspath()\n-            throws ClassNotFoundException, NoSuchMethodException,\n-            SecurityException, InstantiationException, IllegalAccessException,\n-            IllegalArgumentException, InvocationTargetException, IOException {\n-        try (URLClassLoader loader = new TestClassLoader()) {\n-            Class<?> clazz = loader.loadClass(NotEmptyUnitTest.class.getName());\n-            UnitTest test = (UnitTest) clazz.getDeclaredConstructor()\n-                    .newInstance();\n-            test.execute();\n-        }\n-    }\n-\n-}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21687",
    "pr_id": 21687,
    "issue_id": 21562,
    "repo": "vaadin/flow",
    "problem_statement": "Replace deprecated APIs in vaadin-spring\nSince Spring Boot 3.5, some APIs used in `vaadin-spring` are deprecated and will be removed in the future.\nOne example is `AntPathRequestMatcher` (to be removed in Spring Security 7) used by `VaadinWebSecurity` and `VaadinSecurityConfigurer`, that should be replaced by the new `PathPatternRequestMatcher`.\n\nAll deprecated classes and methods used in `vaadin-spring` should be replaced in Flow 25.",
    "issue_word_count": 65,
    "test_files_count": 8,
    "non_test_files_count": 5,
    "pr_changed_files": [
      "vaadin-spring/src/main/java/com/vaadin/flow/spring/security/RequestUtil.java",
      "vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinDefaultRequestCache.java",
      "vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurer.java",
      "vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinWebSecurity.java",
      "vaadin-spring/src/main/java/com/vaadin/flow/spring/security/stateless/VaadinStatelessSecurityConfigurer.java",
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/SpringViewAccessCheckerTest.java",
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/security/RequestUtilPathAccessTest.java",
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/security/RequestUtilTest.java",
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/security/SpringAccessPathCheckerTest.java",
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/security/UrlMappingSpringAccessPathCheckerTest.java",
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinDefaultRequestCacheTest.java",
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurerTest.java",
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/security/stateless/JwtStatelessAuthenticationTest.java"
    ],
    "pr_changed_test_files": [
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/SpringViewAccessCheckerTest.java",
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/security/RequestUtilPathAccessTest.java",
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/security/RequestUtilTest.java",
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/security/SpringAccessPathCheckerTest.java",
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/security/UrlMappingSpringAccessPathCheckerTest.java",
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinDefaultRequestCacheTest.java",
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurerTest.java",
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/security/stateless/JwtStatelessAuthenticationTest.java"
    ],
    "base_commit": "c70658c27a329b564306401ac24fa2ecd2993ac3",
    "head_commit": "daa33432001ebbf6217c12add8cfa6b88934f446",
    "repo_url": "https://github.com/vaadin/flow/pull/21687",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21687",
    "dockerfile": "",
    "pr_merged_at": "2025-06-18T06:28:27.000Z",
    "patch": "diff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/RequestUtil.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/RequestUtil.java\nindex 227866c643b..3e4add854d0 100644\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/RequestUtil.java\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/RequestUtil.java\n@@ -1,16 +1,16 @@\n package com.vaadin.flow.spring.security;\n \n-import jakarta.servlet.http.HttpServletRequest;\n-\n import java.util.Optional;\n import java.util.stream.Stream;\n \n+import jakarta.servlet.http.HttpServletRequest;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.web.servlet.ServletRegistrationBean;\n import org.springframework.http.HttpMethod;\n+import org.springframework.security.web.servlet.util.matcher.PathPatternRequestMatcher;\n import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n import org.springframework.security.web.util.matcher.RequestMatcher;\n import org.springframework.stereotype.Component;\n@@ -176,12 +176,27 @@ public boolean isCustomWebIcon(HttpServletRequest request) {\n \n     /**\n      * Utility to create {@link RequestMatcher}s from ant patterns.\n+     * <p>\n+     * Since {@link AntPathRequestMatcher} is deprecated and will be removed,\n+     * callers of this method should be updated to use\n+     * {@link PathPatternRequestMatcher} instead.\n+     *\n+     * <pre>\n+     * {@code\n+     *  var matcherBuilder = PathPatternRequestMatcher.withDefaults():\n+     *  var requestMatcher = matcherBuilder.match(path);\n+     * }\n+     * </pre>\n      *\n      * @param patterns\n      *            and patterns\n      * @return an array or {@link RequestMatcher} instances for the given\n      *         patterns.\n+     * @deprecated {@code AntPathRequestMatcher} is deprecated and marked for\n+     *             removal. This method is deprecated without direct\n+     *             replacement; use {@code PathPatternRequestMatcher} instead.\n      */\n+    @Deprecated(since = \"24.8\", forRemoval = true)\n     public static RequestMatcher[] antMatchers(String... patterns) {\n         return Stream.of(patterns).map(AntPathRequestMatcher::new)\n                 .toArray(RequestMatcher[]::new);\n@@ -190,12 +205,27 @@ public static RequestMatcher[] antMatchers(String... patterns) {\n     /**\n      * Utility to create {@link RequestMatcher}s for a Vaadin routes, using ant\n      * patterns and HTTP get method.\n+     * <p>\n+     * Since {@link AntPathRequestMatcher} is deprecated and will be removed,\n+     * callers of this method should be updated to use\n+     * {@link PathPatternRequestMatcher} instead.\n+     *\n+     * <pre>\n+     * {@code\n+     *  var matcherBuilder = PathPatternRequestMatcher.withDefaults():\n+     *  var requestMatcher = matcherBuilder.match(HttpMethod.GET, path);\n+     * }\n+     * </pre>\n      *\n      * @param patterns\n-     *            and patterns\n+     *            ANT patterns\n      * @return an array or {@link RequestMatcher} instances for the given\n      *         patterns.\n+     * @deprecated {@code AntPathRequestMatcher} is deprecated and marked for\n+     *             removal. This method is deprecated without direct\n+     *             replacement; use {@code PathPatternRequestMatcher} instead.\n      */\n+    @Deprecated(since = \"24.8\", forRemoval = true)\n     public static RequestMatcher[] routeMatchers(String... patterns) {\n         return Stream.of(patterns)\n                 .map(p -> AntPathRequestMatcher.antMatcher(HttpMethod.GET, p))\n\ndiff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinDefaultRequestCache.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinDefaultRequestCache.java\nindex 460d13e2d7b..ec76cfbc10b 100644\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinDefaultRequestCache.java\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinDefaultRequestCache.java\n@@ -29,7 +29,7 @@\n import org.springframework.security.web.savedrequest.HttpSessionRequestCache;\n import org.springframework.security.web.savedrequest.RequestCache;\n import org.springframework.security.web.savedrequest.SavedRequest;\n-import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n+import org.springframework.security.web.servlet.util.matcher.PathPatternRequestMatcher;\n import org.springframework.security.web.util.matcher.MediaTypeRequestMatcher;\n import org.springframework.security.web.util.matcher.OrRequestMatcher;\n import org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher;\n@@ -189,9 +189,9 @@ public void ignoreRequests(RequestMatcher requestMatcher) {\n      * Rules adapted from Spring Security's RequestCacheConfigurer\n      */\n     private static RequestMatcher createDefaultIgnoreRules() {\n-        RequestMatcher favIcon = new AntPathRequestMatcher(\"/**/favicon.*\");\n-        RequestMatcher wellKnown = new AntPathRequestMatcher(\n-                \"/**/.well-known/**\");\n+        var matcherBuilder = PathPatternRequestMatcher.withDefaults();\n+        RequestMatcher favIcon = matcherBuilder.matcher(\"/favicon.*\");\n+        RequestMatcher wellKnown = matcherBuilder.matcher(\"/.well-known/**\");\n         RequestMatcher xhrRequestedWith = new RequestHeaderRequestMatcher(\n                 \"X-Requested-With\", \"XMLHttpRequest\");\n         List<RequestMatcher> matchers = new ArrayList<>();\n\ndiff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurer.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurer.java\nindex aa365e3e76c..b9e01f5c978 100644\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurer.java\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurer.java\n@@ -15,14 +15,13 @@\n  */\n package com.vaadin.flow.spring.security;\n \n-import jakarta.servlet.ServletContext;\n-\n import java.util.ArrayList;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Optional;\n import java.util.function.Consumer;\n \n+import jakarta.servlet.ServletContext;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.context.ApplicationContext;\n@@ -53,8 +52,8 @@\n import org.springframework.security.web.authentication.logout.LogoutSuccessHandler;\n import org.springframework.security.web.csrf.CsrfException;\n import org.springframework.security.web.savedrequest.RequestCache;\n+import org.springframework.security.web.servlet.util.matcher.PathPatternRequestMatcher;\n import org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter;\n-import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n import org.springframework.security.web.util.matcher.AnyRequestMatcher;\n import org.springframework.security.web.util.matcher.RequestMatcher;\n import org.springframework.security.web.util.matcher.RequestMatchers;\n@@ -629,8 +628,8 @@ private void customizeCsrf(CsrfConfigurer<HttpSecurity> configurer) {\n                     getRequestUtil()::isFrameworkInternalRequest);\n         }\n         if (formLoginPage != null) {\n-            configurer.ignoringRequestMatchers(\n-                    new AntPathRequestMatcher(formLoginPage));\n+            configurer.ignoringRequestMatchers(PathPatternRequestMatcher\n+                    .withDefaults().matcher(formLoginPage));\n         }\n     }\n \n\ndiff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinWebSecurity.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinWebSecurity.java\nindex 5ee7ae04d6f..5b3f50a4512 100644\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinWebSecurity.java\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinWebSecurity.java\n@@ -15,21 +15,20 @@\n  */\n package com.vaadin.flow.spring.security;\n \n-import jakarta.annotation.PostConstruct;\n-import jakarta.servlet.ServletException;\n-import jakarta.servlet.http.HttpServletRequest;\n-import jakarta.servlet.http.HttpServletResponse;\n-\n import javax.crypto.SecretKey;\n-\n import java.io.IOException;\n+import java.util.ArrayList;\n import java.util.LinkedHashMap;\n+import java.util.List;\n import java.util.Objects;\n import java.util.Optional;\n import java.util.function.Consumer;\n-import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n+import jakarta.annotation.PostConstruct;\n+import jakarta.servlet.ServletException;\n+import jakarta.servlet.http.HttpServletRequest;\n+import jakarta.servlet.http.HttpServletResponse;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -37,6 +36,7 @@\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Import;\n+import org.springframework.http.HttpMethod;\n import org.springframework.http.HttpStatus;\n import org.springframework.security.access.AccessDeniedException;\n import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n@@ -58,7 +58,7 @@\n import org.springframework.security.web.authentication.logout.LogoutSuccessHandler;\n import org.springframework.security.web.csrf.CsrfException;\n import org.springframework.security.web.savedrequest.RequestCache;\n-import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n+import org.springframework.security.web.servlet.util.matcher.PathPatternRequestMatcher;\n import org.springframework.security.web.util.matcher.AnyRequestMatcher;\n import org.springframework.security.web.util.matcher.OrRequestMatcher;\n import org.springframework.security.web.util.matcher.RequestMatcher;\n@@ -295,13 +295,14 @@ public static RequestMatcher getDefaultHttpSecurityPermitMatcher(\n             String urlMapping) {\n         Objects.requireNonNull(urlMapping,\n                 \"Vaadin servlet url mapping is required\");\n-        Stream.Builder<String> paths = Stream.builder();\n-        Stream.of(HandlerHelper.getPublicResourcesRequiringSecurityContext())\n+        PathPatternRequestMatcher.Builder builder = PathPatternRequestMatcher\n+                .withDefaults();\n+        String[] paths = HandlerHelper\n+                .getPublicResourcesRequiringSecurityContext();\n+        assert paths.length > 0;\n+        return new OrRequestMatcher(Stream.of(paths)\n                 .map(path -> RequestUtil.applyUrlMapping(urlMapping, path))\n-                .forEach(paths::add);\n-\n-        return new OrRequestMatcher(paths.build()\n-                .map(AntPathRequestMatcher::new).collect(Collectors.toList()));\n+                .map(builder::matcher).toArray(RequestMatcher[]::new));\n     }\n \n     /**\n@@ -329,14 +330,25 @@ public static RequestMatcher getDefaultWebSecurityIgnoreMatcher(\n             String urlMapping) {\n         Objects.requireNonNull(urlMapping,\n                 \"Vaadin servlet url mapping is required\");\n-        Stream<String> mappingRelativePaths = Stream\n-                .of(HandlerHelper.getPublicResources())\n-                .map(path -> RequestUtil.applyUrlMapping(urlMapping, path));\n-        Stream<String> rootPaths = Stream\n-                .of(HandlerHelper.getPublicResourcesRoot());\n-        return new OrRequestMatcher(Stream\n-                .concat(mappingRelativePaths, rootPaths)\n-                .map(AntPathRequestMatcher::new).collect(Collectors.toList()));\n+\n+        List<RequestMatcher> matchers = new ArrayList<>();\n+        PathPatternRequestMatcher.Builder builder = PathPatternRequestMatcher\n+                .withDefaults();\n+\n+        String[] publicResources = HandlerHelper.getPublicResources();\n+        assert publicResources.length > 0;\n+\n+        Stream.of(publicResources)\n+                .map(path -> RequestUtil.applyUrlMapping(urlMapping, path))\n+                .map(builder::matcher).forEach(matchers::add);\n+\n+        String[] publicResourcesRoot = HandlerHelper.getPublicResourcesRoot();\n+        assert publicResourcesRoot.length > 0;\n+\n+        Stream.of(publicResourcesRoot).map(builder::matcher)\n+                .forEach(matchers::add);\n+\n+        return new OrRequestMatcher(matchers);\n     }\n \n     /**\n@@ -346,7 +358,10 @@ public static RequestMatcher getDefaultWebSecurityIgnoreMatcher(\n      *            ant patterns\n      * @return an array or {@link RequestMatcher} instances for the given\n      *         patterns.\n+     * @deprecated AntPathRequestMatcher is deprecated and will be removed, use\n+     *             {@link #pathMatchers(String...)} instead.\n      */\n+    @Deprecated(since = \"24.8\", forRemoval = true)\n     public RequestMatcher[] antMatchers(String... patterns) {\n         return RequestUtil.antMatchers(patterns);\n     }\n@@ -359,12 +374,54 @@ public RequestMatcher[] antMatchers(String... patterns) {\n      *            ant patterns\n      * @return an array or {@link RequestMatcher} instances for the given\n      *         patterns.\n+     * @deprecated AntPathRequestMatcher is deprecated and will be removed, use\n+     *             {@link #routePathMatchers(String...)} instead.\n      */\n+    @Deprecated(since = \"24.8\", forRemoval = true)\n     public RequestMatcher[] routeMatchers(String... patterns) {\n         return RequestUtil.routeMatchers(Stream.of(patterns)\n                 .map(this::applyUrlMapping).toArray(String[]::new));\n     }\n \n+    /**\n+     * Utility to create {@link RequestMatcher}s from path patterns.\n+     *\n+     * @param patterns\n+     *            path patterns, as described in\n+     *            {@link org.springframework.web.util.pattern.PathPattern}\n+     *            javadoc.\n+     * @return an array or {@link RequestMatcher} instances for the given\n+     *         patterns.\n+     * @see org.springframework.security.web.servlet.util.matcher.PathPatternRequestMatcher#matcher(HttpServletRequest)\n+     * @see org.springframework.web.util.pattern.PathPattern\n+     */\n+    public RequestMatcher[] pathMatchers(String... patterns) {\n+        PathPatternRequestMatcher.Builder builder = PathPatternRequestMatcher\n+                .withDefaults();\n+        return Stream.of(patterns).map(builder::matcher)\n+                .toArray(RequestMatcher[]::new);\n+    }\n+\n+    /**\n+     * Utility to create {@link RequestMatcher}s for a Vaadin routes, using ant\n+     * patterns and HTTP get method.\n+     *\n+     * @param patterns\n+     *            path patterns, as described in\n+     *            {@link org.springframework.web.util.pattern.PathPattern}\n+     *            javadoc.\n+     * @return an array or {@link RequestMatcher} instances for the given\n+     *         patterns.\n+     * @see org.springframework.security.web.servlet.util.matcher.PathPatternRequestMatcher#matcher(HttpServletRequest)\n+     * @see org.springframework.web.util.pattern.PathPattern\n+     */\n+    public RequestMatcher[] routePathMatchers(String... patterns) {\n+        PathPatternRequestMatcher.Builder builder = PathPatternRequestMatcher\n+                .withDefaults();\n+        return Stream.of(patterns).map(p -> builder.matcher(HttpMethod.GET, p))\n+                .toArray(RequestMatcher[]::new);\n+    }\n+\n     /**\n      * Sets up login for the application using form login with the given path\n      * for the login view.\n@@ -489,8 +546,8 @@ protected void setLoginView(HttpSecurity http,\n                     getVaadinSavedRequestAwareAuthenticationSuccessHandler(\n                             http));\n         });\n-        http.csrf(cfg -> cfg.ignoringRequestMatchers(\n-                new AntPathRequestMatcher(completeLoginPath)));\n+        http.csrf(cfg -> cfg.ignoringRequestMatchers(PathPatternRequestMatcher\n+                .withDefaults().matcher(completeLoginPath)));\n         configureLogout(http, logoutSuccessUrl);\n         http.exceptionHandling(cfg -> cfg.defaultAuthenticationEntryPointFor(\n                 new LoginUrlAuthenticationEntryPoint(completeLoginPath),\n@@ -634,7 +691,7 @@ protected void setStatelessAuthentication(HttpSecurity http,\n     protected void setStatelessAuthentication(HttpSecurity http,\n             SecretKey secretKey, String issuer, long expiresIn)\n             throws Exception {\n-        VaadinStatelessSecurityConfigurer.apply(http,\n+        http.with(new VaadinStatelessSecurityConfigurer<>(),\n                 cfg -> cfg.withSecretKey().secretKey(secretKey).and()\n                         .issuer(issuer).expiresIn(expiresIn));\n     }\n\ndiff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/stateless/VaadinStatelessSecurityConfigurer.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/stateless/VaadinStatelessSecurityConfigurer.java\nindex eae01b81d42..03c72eb1808 100644\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/stateless/VaadinStatelessSecurityConfigurer.java\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/stateless/VaadinStatelessSecurityConfigurer.java\n@@ -15,13 +15,7 @@\n  */\n package com.vaadin.flow.spring.security.stateless;\n \n-import jakarta.servlet.FilterChain;\n-import jakarta.servlet.ServletException;\n-import jakarta.servlet.http.HttpServletRequest;\n-import jakarta.servlet.http.HttpServletResponse;\n-\n import javax.crypto.SecretKey;\n-\n import java.io.IOException;\n \n import com.nimbusds.jose.JWSAlgorithm;\n@@ -29,6 +23,10 @@\n import com.nimbusds.jose.jwk.OctetSequenceKey;\n import com.nimbusds.jose.jwk.source.JWKSource;\n import com.nimbusds.jose.proc.SecurityContext;\n+import jakarta.servlet.FilterChain;\n+import jakarta.servlet.ServletException;\n+import jakarta.servlet.http.HttpServletRequest;\n+import jakarta.servlet.http.HttpServletResponse;\n import org.springframework.security.authentication.AuthenticationTrustResolver;\n import org.springframework.security.authentication.AuthenticationTrustResolverImpl;\n import org.springframework.security.config.Customizer;\n@@ -45,7 +43,6 @@\n import org.springframework.security.web.csrf.CookieCsrfTokenRepository;\n import org.springframework.security.web.csrf.CsrfTokenRepository;\n import org.springframework.security.web.csrf.CsrfTokenRequestHandler;\n-import org.springframework.security.web.csrf.LazyCsrfTokenRepository;\n import org.springframework.security.web.csrf.XorCsrfTokenRequestAttributeHandler;\n import org.springframework.security.web.header.HeaderWriterFilter;\n import org.springframework.security.web.savedrequest.CookieRequestCache;\n@@ -67,8 +64,7 @@\n  * <li>{@link SecurityContextRepository} is populated with a\n  * {@link JwtSecurityContextRepository}</li>\n  * <li>{@link CsrfConfigurer#csrfTokenRepository(CsrfTokenRepository)} is used\n- * to set {@link LazyCsrfTokenRepository} that delegates to\n- * {@link CookieCsrfTokenRepository}</li>\n+ * to set {@link CookieCsrfTokenRepository}</li>\n  * </ul>\n  *\n  * <h2>Shared Objects Used</h2>\n@@ -130,29 +126,37 @@ public void setSharedObjects(HttpSecurity http) {\n      * @param customizer\n      *            the {@link Customizer} to provide more options for the\n      *            {@link VaadinStatelessSecurityConfigurer}\n+     * @deprecated use\n+     *             {@code http.with(new VaadinStatelessSecurityConfigurer(), customizer)}\n+     *             instead.\n      */\n+    @Deprecated(since = \"24.8\", forRemoval = true)\n     public static void apply(HttpSecurity http,\n             Customizer<VaadinStatelessSecurityConfigurer<HttpSecurity>> customizer)\n             throws Exception {\n-\n-        JwtSecurityContextRepository jwtSecurityContextRepository = new JwtSecurityContextRepository(\n-                new SerializedJwtSplitCookieRepository());\n-        http.setSharedObject(JwtSecurityContextRepository.class,\n-                jwtSecurityContextRepository);\n-        http.securityContext(cfg -> {\n-            DelegatingSecurityContextRepository repository = new DelegatingSecurityContextRepository(\n-                    jwtSecurityContextRepository,\n-                    new RequestAttributeSecurityContextRepository());\n-            cfg.securityContextRepository(repository);\n-        });\n-\n         VaadinStatelessSecurityConfigurer<HttpSecurity> vaadinStatelessSecurityConfigurer = new VaadinStatelessSecurityConfigurer<>();\n         http.with(vaadinStatelessSecurityConfigurer, customizer);\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public void init(H http) {\n+    public void init(H http) throws Exception {\n+\n+        JwtSecurityContextRepository jwtSecurityContextRepository = new JwtSecurityContextRepository(\n+                new SerializedJwtSplitCookieRepository());\n+        http.setSharedObject(JwtSecurityContextRepository.class,\n+                jwtSecurityContextRepository);\n+        // This class should not be parameterized but only accept HttpSecurity\n+        // It has not been refactored for compatibility reason. The following\n+        // cast is only a hack to work around the generic type definition.\n+        if (http instanceof HttpSecurity httpSecurity) {\n+            httpSecurity.securityContext(cfg -> {\n+                DelegatingSecurityContextRepository repository = new DelegatingSecurityContextRepository(\n+                        jwtSecurityContextRepository,\n+                        new RequestAttributeSecurityContextRepository());\n+                cfg.securityContextRepository(repository);\n+            });\n+        }\n \n         CsrfConfigurer<H> csrf = http.getConfigurer(CsrfConfigurer.class);\n         if (csrf != null) {\n",
    "test_patch": "diff --git a/vaadin-spring/src/test/java/com/vaadin/flow/spring/SpringViewAccessCheckerTest.java b/vaadin-spring/src/test/java/com/vaadin/flow/spring/SpringViewAccessCheckerTest.java\nindex 53cca31405c..311d90dd252 100644\n--- a/vaadin-spring/src/test/java/com/vaadin/flow/spring/SpringViewAccessCheckerTest.java\n+++ b/vaadin-spring/src/test/java/com/vaadin/flow/spring/SpringViewAccessCheckerTest.java\n@@ -7,30 +7,30 @@\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.function.Function;\n \n-import com.vaadin.flow.component.Component;\n-import com.vaadin.flow.router.BeforeEnterEvent;\n-import com.vaadin.flow.server.auth.AccessAnnotationChecker;\n-import com.vaadin.flow.server.auth.ViewAccessChecker;\n-\n import org.junit.Assert;\n import org.junit.jupiter.api.Test;\n import org.mockito.Mockito;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.boot.test.mock.mockito.MockBean;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.core.GrantedAuthority;\n import org.springframework.security.core.authority.SimpleGrantedAuthority;\n import org.springframework.security.core.context.SecurityContext;\n import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.test.context.bean.override.mockito.MockitoBean;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.router.BeforeEnterEvent;\n+import com.vaadin.flow.server.auth.AccessAnnotationChecker;\n+import com.vaadin.flow.server.auth.ViewAccessChecker;\n \n @SpringBootTest(classes = { SpringViewAccessChecker.class })\n @Deprecated(forRemoval = true)\n class SpringViewAccessCheckerTest {\n \n-    @MockBean\n+    @MockitoBean\n     private AccessAnnotationChecker annotationChecker;\n-    @MockBean\n+    @MockitoBean\n     private Authentication authentication;\n \n     @Autowired\n\ndiff --git a/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/RequestUtilPathAccessTest.java b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/RequestUtilPathAccessTest.java\nindex 3eacb90cc70..b4eb7933383 100644\n--- a/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/RequestUtilPathAccessTest.java\n+++ b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/RequestUtilPathAccessTest.java\n@@ -29,11 +29,11 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.boot.test.context.TestConfiguration;\n-import org.springframework.boot.test.mock.mockito.MockBean;\n import org.springframework.boot.web.servlet.ServletRegistrationBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.mock.web.MockHttpServletRequest;\n import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.bean.override.mockito.MockitoBean;\n import org.springframework.test.context.junit4.SpringRunner;\n \n import com.vaadin.flow.component.Component;\n@@ -72,13 +72,13 @@ public class RequestUtilPathAccessTest {\n     @Autowired\n     NavigationAccessControl accessControl;\n \n-    @MockBean\n+    @MockitoBean\n     VaadinConfigurationProperties vaadinConfigurationProperties;\n \n-    @MockBean\n+    @MockitoBean\n     private ServletRegistrationBean<SpringServlet> springServletRegistration;\n \n-    @MockBean\n+    @MockitoBean\n     private AccessPathChecker accessPathChecker;\n \n     @Before\n\ndiff --git a/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/RequestUtilTest.java b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/RequestUtilTest.java\nindex 41ce59cc5a4..6c5450926ef 100644\n--- a/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/RequestUtilTest.java\n+++ b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/RequestUtilTest.java\n@@ -1,11 +1,10 @@\n package com.vaadin.flow.spring.security;\n \n-import jakarta.annotation.security.RolesAllowed;\n-\n import java.util.Collections;\n import java.util.Map;\n import java.util.Optional;\n \n+import jakarta.annotation.security.RolesAllowed;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n@@ -14,10 +13,10 @@\n import org.mockito.Mockito;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.boot.test.mock.mockito.MockBean;\n import org.springframework.boot.web.servlet.ServletRegistrationBean;\n import org.springframework.mock.web.MockHttpServletRequest;\n import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.bean.override.mockito.MockitoBean;\n import org.springframework.test.context.junit4.SpringRunner;\n \n import com.vaadin.flow.component.Component;\n@@ -55,13 +54,13 @@ public class RequestUtilTest {\n     @Autowired\n     NavigationAccessControl accessControl;\n \n-    @MockBean\n+    @MockitoBean\n     VaadinConfigurationProperties vaadinConfigurationProperties;\n \n-    @MockBean\n+    @MockitoBean\n     private RoutePathAccessChecker accessPathChecker;\n \n-    @MockBean\n+    @MockitoBean\n     private ServletRegistrationBean<SpringServlet> springServletRegistration;\n \n     @Before\n\ndiff --git a/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/SpringAccessPathCheckerTest.java b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/SpringAccessPathCheckerTest.java\nindex 39554b731de..63985fe1d89 100644\n--- a/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/SpringAccessPathCheckerTest.java\n+++ b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/SpringAccessPathCheckerTest.java\n@@ -29,8 +29,10 @@\n import org.springframework.security.test.context.support.WithAnonymousUser;\n import org.springframework.security.test.context.support.WithMockUser;\n import org.springframework.security.web.SecurityFilterChain;\n+import org.springframework.security.web.access.AuthorizationManagerWebInvocationPrivilegeEvaluator;\n+import org.springframework.security.web.access.PathPatternRequestTransformer;\n import org.springframework.security.web.access.WebInvocationPrivilegeEvaluator;\n-import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n+import org.springframework.security.web.servlet.util.matcher.PathPatternRequestMatcher;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit.jupiter.web.SpringJUnitWebConfig;\n \n@@ -157,18 +159,24 @@ SpringAccessPathChecker rootPathAccessChecker(\n             return new SpringAccessPathChecker(evaluator);\n         }\n \n+        @Bean\n+        AuthorizationManagerWebInvocationPrivilegeEvaluator.HttpServletRequestTransformer httpServletRequestTransformer() {\n+            return new PathPatternRequestTransformer();\n+        }\n+\n         @Bean\n         public SecurityFilterChain testingFilterChain(HttpSecurity http)\n                 throws Exception {\n             // @formatter:off\n+            var matcherBuilder = PathPatternRequestMatcher.withDefaults();\n             http.authorizeHttpRequests(cfg -> cfg\n-                    .requestMatchers(new AntPathRequestMatcher(\"/\")).anonymous()\n-                    .requestMatchers(new AntPathRequestMatcher(\"/admin/**\")).hasRole(\"ADMIN\")\n-                    .requestMatchers(new AntPathRequestMatcher(\"/guest/**\")).hasRole(\"GUEST\")\n-                    .requestMatchers(new AntPathRequestMatcher(\"/protected/**\")).authenticated()\n-                    .requestMatchers(new AntPathRequestMatcher(\"/anon/**\")).anonymous()\n-                    .requestMatchers(new AntPathRequestMatcher(\"/public/**\")).permitAll()\n-                    .requestMatchers(new AntPathRequestMatcher(\"/forbidden/**\")).denyAll());\n+                    .requestMatchers(matcherBuilder.matcher(\"/\")).anonymous()\n+                    .requestMatchers(matcherBuilder.matcher(\"/admin/**\")).hasRole(\"ADMIN\")\n+                    .requestMatchers(matcherBuilder.matcher(\"/guest/**\")).hasRole(\"GUEST\")\n+                    .requestMatchers(matcherBuilder.matcher(\"/protected/**\")).authenticated()\n+                    .requestMatchers(matcherBuilder.matcher(\"/anon/**\")).anonymous()\n+                    .requestMatchers(matcherBuilder.matcher(\"/public/**\")).permitAll()\n+                    .requestMatchers(matcherBuilder.matcher(\"/forbidden/**\")).denyAll());\n            // @formatter:on\n             return http.build();\n         }\n\ndiff --git a/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/UrlMappingSpringAccessPathCheckerTest.java b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/UrlMappingSpringAccessPathCheckerTest.java\nindex ba925055fa2..0e2d7d969e7 100644\n--- a/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/UrlMappingSpringAccessPathCheckerTest.java\n+++ b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/UrlMappingSpringAccessPathCheckerTest.java\n@@ -29,8 +29,10 @@\n import org.springframework.security.test.context.support.WithAnonymousUser;\n import org.springframework.security.test.context.support.WithMockUser;\n import org.springframework.security.web.SecurityFilterChain;\n+import org.springframework.security.web.access.AuthorizationManagerWebInvocationPrivilegeEvaluator;\n+import org.springframework.security.web.access.PathPatternRequestTransformer;\n import org.springframework.security.web.access.WebInvocationPrivilegeEvaluator;\n-import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n+import org.springframework.security.web.servlet.util.matcher.PathPatternRequestMatcher;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit.jupiter.web.SpringJUnitWebConfig;\n \n@@ -157,18 +159,24 @@ SpringAccessPathChecker urlMappingPpathAccessChecker(\n             return new SpringAccessPathChecker(evaluator, \"/url-mapping/*\");\n         }\n \n+        @Bean\n+        AuthorizationManagerWebInvocationPrivilegeEvaluator.HttpServletRequestTransformer httpServletRequestTransformer() {\n+            return new PathPatternRequestTransformer();\n+        }\n+\n         @Bean\n         public SecurityFilterChain testingFilterChain(HttpSecurity http)\n                 throws Exception {\n             // @formatter:off\n+            var matcherBuilder = PathPatternRequestMatcher.withDefaults();\n             http.authorizeHttpRequests(cfg -> cfg\n-                    .requestMatchers(new AntPathRequestMatcher(\"/url-mapping/\")).anonymous()\n-                    .requestMatchers(new AntPathRequestMatcher(\"/url-mapping/admin/**\")).hasRole(\"ADMIN\")\n-                    .requestMatchers(new AntPathRequestMatcher(\"/url-mapping/guest/**\")).hasRole(\"GUEST\")\n-                    .requestMatchers(new AntPathRequestMatcher(\"/url-mapping/protected/**\")).authenticated()\n-                    .requestMatchers(new AntPathRequestMatcher(\"/url-mapping/anon/**\")).anonymous()\n-                    .requestMatchers(new AntPathRequestMatcher(\"/url-mapping/public/**\")).permitAll()\n-                    .requestMatchers(new AntPathRequestMatcher(\"/url-mapping/forbidden/**\")).denyAll());\n+                    .requestMatchers(matcherBuilder.matcher(\"/url-mapping/\")).anonymous()\n+                    .requestMatchers(matcherBuilder.matcher(\"/url-mapping/admin/**\")).hasRole(\"ADMIN\")\n+                    .requestMatchers(matcherBuilder.matcher(\"/url-mapping/guest/**\")).hasRole(\"GUEST\")\n+                    .requestMatchers(matcherBuilder.matcher(\"/url-mapping/protected/**\")).authenticated()\n+                    .requestMatchers(matcherBuilder.matcher(\"/url-mapping/anon/**\")).anonymous()\n+                    .requestMatchers(matcherBuilder.matcher(\"/url-mapping/public/**\")).permitAll()\n+                    .requestMatchers(matcherBuilder.matcher(\"/url-mapping/forbidden/**\")).denyAll());\n             // @formatter:on\n             return http.build();\n         }\n\ndiff --git a/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinDefaultRequestCacheTest.java b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinDefaultRequestCacheTest.java\nindex b40b29a0474..427747af49e 100644\n--- a/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinDefaultRequestCacheTest.java\n+++ b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinDefaultRequestCacheTest.java\n@@ -15,7 +15,7 @@\n import org.springframework.security.web.savedrequest.HttpSessionRequestCache;\n import org.springframework.security.web.savedrequest.RequestCache;\n import org.springframework.security.web.savedrequest.SavedRequest;\n-import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n+import org.springframework.security.web.servlet.util.matcher.PathPatternRequestMatcher;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit4.SpringRunner;\n \n@@ -135,7 +135,8 @@ public void scriptRequest_requestNotSaved() {\n \n     @Test\n     public void customMatchers_requestNotSaved() {\n-        cache.ignoreRequests(new AntPathRequestMatcher(\"/dont-save/**\"));\n+        cache.ignoreRequests(PathPatternRequestMatcher.withDefaults()\n+                .matcher(\"/dont-save/**\"));\n         HttpServletRequest request = RequestUtilTest\n                 .createRequest(\"/dont-save/me\", null);\n         HttpServletResponse response = createResponse();\n\ndiff --git a/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurerTest.java b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurerTest.java\nindex 0da6506b169..7f5df41abac 100644\n--- a/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurerTest.java\n+++ b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurerTest.java\n@@ -4,7 +4,6 @@\n import java.util.Map;\n \n import jakarta.servlet.FilterChain;\n-import jakarta.servlet.http.HttpServletRequest;\n import jakarta.servlet.http.HttpServletResponse;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n@@ -43,7 +42,7 @@\n import org.springframework.security.web.authentication.logout.LogoutSuccessHandler;\n import org.springframework.security.web.csrf.CsrfFilter;\n import org.springframework.security.web.savedrequest.RequestCacheAwareFilter;\n-import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n+import org.springframework.security.web.servlet.util.matcher.PathPatternRequestMatcher;\n import org.springframework.test.annotation.DirtiesContext;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.bean.override.mockito.MockitoBean;\n@@ -60,7 +59,6 @@\n import static org.assertj.core.api.Assertions.assertThatCode;\n import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n \n @WebAppConfiguration\n @ContextConfiguration(classes = { SpringBootAutoConfiguration.class,\n@@ -80,9 +78,6 @@ class VaadinSecurityConfigurerTest {\n     @MockitoBean\n     private ClientRegistrationRepository clientRegistrationRepository;\n \n-    @Mock\n-    private HttpServletRequest request;\n-\n     @Mock\n     private HttpServletResponse response;\n \n@@ -153,8 +148,8 @@ void logoutSuccessHandler_handlerIsConfigured(\n             @Mock LogoutSuccessHandler handler) throws Exception {\n         var auth = new UsernamePasswordAuthenticationToken(\"user\", \"password\");\n         SecurityContextHolder.getContext().setAuthentication(auth);\n-        when(request.getMethod()).thenReturn(\"POST\");\n-        when(request.getPathInfo()).thenReturn(\"/logout\");\n+        var request = new MockHttpServletRequest(\"POST\", \"/logout\");\n+        request.setPathInfo(\"/logout\");\n \n         var filters = http.with(configurer, c -> {\n             c.logoutSuccessHandler(handler);\n@@ -172,8 +167,8 @@ void addLogoutHandler_handlerIsAdded(@Mock LogoutHandler handler)\n             throws Exception {\n         var auth = new UsernamePasswordAuthenticationToken(\"user\", \"password\");\n         SecurityContextHolder.getContext().setAuthentication(auth);\n-        when(request.getMethod()).thenReturn(\"POST\");\n-        when(request.getPathInfo()).thenReturn(\"/logout\");\n+        var request = new MockHttpServletRequest(\"POST\", \"/logout\");\n+        request.setPathInfo(\"/logout\");\n \n         var filters = http.with(configurer, c -> {\n             c.addLogoutHandler(handler);\n@@ -191,7 +186,8 @@ void anyRequest_authorizeRuleIsConfigured() throws Exception {\n         var auth = new AnonymousAuthenticationToken(\"key\", \"user\",\n                 List.of(new SimpleGrantedAuthority(\"ROLE_ANONYMOUS\")));\n         SecurityContextHolder.getContext().setAuthentication(auth);\n-        when(request.getPathInfo()).thenReturn(\"/any\");\n+        var request = new MockHttpServletRequest(\"GET\", \"/any\");\n+        request.setPathInfo(\"/any\");\n \n         var filters = http.with(configurer, c -> {\n             c.anyRequest(AuthorizedUrl::anonymous);\n@@ -240,11 +236,13 @@ void disableDefaultConfigurers_configurersAreNotApplied() throws Exception {\n     void requestCache_customRulesAreApplied() throws Exception {\n         VaadinDefaultRequestCache requestCache = applicationContext\n                 .getBean(VaadinDefaultRequestCache.class);\n-        requestCache.ignoreRequests(new AntPathRequestMatcher(\"/.my-path/**\"));\n+        requestCache.ignoreRequests(PathPatternRequestMatcher.withDefaults()\n+                .matcher(\"/.my-path/**\"));\n \n         http.with(configurer, Customizer.withDefaults()).build();\n \n-        MockHttpServletRequest request = new MockHttpServletRequest();\n+        MockHttpServletRequest request = new MockHttpServletRequest(\"GET\",\n+                \"/.my-path/foo\");\n         request.setPathInfo(\"/.my-path/foo\");\n         requestCache.saveRequest(request, response);\n         assertNull(requestCache.getRequest(request, response),\n\ndiff --git a/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/stateless/JwtStatelessAuthenticationTest.java b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/stateless/JwtStatelessAuthenticationTest.java\nindex 85f3180c6b4..0d5b4f83d34 100644\n--- a/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/stateless/JwtStatelessAuthenticationTest.java\n+++ b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/stateless/JwtStatelessAuthenticationTest.java\n@@ -16,21 +16,18 @@\n \n package com.vaadin.flow.spring.security.stateless;\n \n-import jakarta.servlet.http.Cookie;\n-import jakarta.servlet.http.HttpServletRequest;\n-\n import javax.crypto.spec.SecretKeySpec;\n-\n import java.util.Arrays;\n import java.util.Base64;\n \n+import jakarta.servlet.http.Cookie;\n+import jakarta.servlet.http.HttpServletRequest;\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;\n import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n import org.springframework.boot.test.context.TestConfiguration;\n import org.springframework.context.annotation.Bean;\n@@ -231,6 +228,7 @@ protected void configure(HttpSecurity http) throws Exception {\n \n         @Bean\n         UserDetailsService userDetailsService() {\n+            @SuppressWarnings(\"deprecation\")\n             UserDetails user = User.withDefaultPasswordEncoder()\n                     .username(\"user\").password(\"password\").roles(\"USER\")\n                     .build();\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21674",
    "pr_id": 21674,
    "issue_id": 21629,
    "repo": "vaadin/flow",
    "problem_statement": "Add helper for using signal effects with components\n### Describe your motivation\n\nWhen configuring a component instance using a signal, you want the signal effect to be deactivated when the target component is detached to avoid leaking memory. For convenience, the effect should be enabled again if the component is attached again. There's also an opportunity for a limited set of helper methods for common cases, e.g. when a single signal value is bound directly to a single component setter or for formatting a string based on one or several signals.\n\n### Describe the solution you'd like\n\nBase functionality for creating a generic effect that is active while a target component is attached.\n\n```java\nComponentEffect.effect(myComponent, () -> {\n  Notification.show(\"Component is attached and signal value is \" + someSignal.value());\n});\n```\n\nBind a single signal to a setter on the component\n\n```java\nComponentEffect.bind(mySpan, stringSignal, Span::setText);\nComponentEffect.bind(mySpan, stringSignal.map(value -> !value.isEmpty(), Span::setVisible);\n```\n\nBind a formatted string based on 1..n signals.\n```java\nComponentEffect.format(mySpan, Span::setText, \"The price of %s is %.2f\", nameSignal, priceSignal);\n```\n\nAll methods return a `Registation` that can be used to close the underlying effect and remove any attach/detach listeners.\n\n### Describe alternatives you've considered\n\nWe might want to eventually integrate this kind of functionality directly in the base `Component` class but that makes sense only after the feature flag is removed.\n\nThe ordering of arguments is inconsistent between the `bind` and the `format` overloads. This is on purpose: `format` takes a list of signals as varargs which forces that to be last whereas `bind` uses the regular \"from, to\" order of parameters. This ordering for `bind` does also keep the door open for adding something like `bind(component, signal, converter, setter)` in the future. In all cases, the component instance is an \"implicit this\" and does therefore always come first.\n",
    "issue_word_count": 310,
    "test_files_count": 2,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/component/ComponentEffect.java",
      "flow-server/src/test/java/com/vaadin/flow/component/ComponentEffectTest.java",
      "flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/component/ComponentEffectTest.java",
      "flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java"
    ],
    "base_commit": "8be728d87068d9dc009a1695f03db46bcee3e7d5",
    "head_commit": "5a3c3a73cf8465b2e7e76133a1829563b73c84b1",
    "repo_url": "https://github.com/vaadin/flow/pull/21674",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21674",
    "dockerfile": "",
    "pr_merged_at": "2025-06-16T11:57:20.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/component/ComponentEffect.java b/flow-server/src/main/java/com/vaadin/flow/component/ComponentEffect.java\nnew file mode 100644\nindex 00000000000..5d7d02078a7\n--- /dev/null\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/ComponentEffect.java\n@@ -0,0 +1,251 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component;\n+\n+import java.io.Serializable;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.function.SerializableBiConsumer;\n+import com.vaadin.flow.internal.LocaleUtil;\n+import com.vaadin.flow.shared.Registration;\n+import com.vaadin.signals.NumberSignal;\n+import com.vaadin.signals.Signal;\n+import com.vaadin.signals.ValueSignal;\n+\n+/**\n+ * The utility class that provides helper methods for using Signal effects in a\n+ * context of a given component's life-cycle.\n+ * <p>\n+ * It ultimately creates a Signal effect, i.e. a call to\n+ * {@link Signal#effect(Runnable)}, that is automatically enabled when a\n+ * component is attached and disabled when the component is detached.\n+ * Additionally it provides methods to bind signals to component according to a\n+ * given value settng function and format strings based on signal values.\n+ *\n+ * @since 24.8\n+ */\n+public final class ComponentEffect {\n+    private final Runnable effectFunction;\n+    private boolean closed = false;\n+    private Runnable effectShutdown = null;\n+\n+    private <C extends Component> ComponentEffect(C owner,\n+            Runnable effectFunction) {\n+        Objects.requireNonNull(owner, \"Owner component cannot be null\");\n+        Objects.requireNonNull(effectFunction,\n+                \"Effect function cannot be null\");\n+        this.effectFunction = effectFunction;\n+        owner.addAttachListener(attach -> {\n+            enableEffect();\n+\n+            owner.addDetachListener(detach -> {\n+                disableEffect();\n+                detach.unregisterListener();\n+            });\n+        });\n+\n+        if (owner.isAttached()) {\n+            enableEffect();\n+        }\n+    }\n+\n+    /**\n+     * Creates a Signal effect that is owned by a given component. The effect is\n+     * enabled when the component is attached and automatically disabled when it\n+     * is detached.\n+     * <p>\n+     * Examle of usage:\n+     *\n+     * <pre>\n+     * Registration effect = ComponentEffect.effect(myComponent, () -> {\n+     *     Notification.show(\"Component is attached and signal value is \"\n+     *             + someSignal.value());\n+     * });\n+     * effect.remove(); // to remove the effect when no longer needed\n+     * </pre>\n+     *\n+     * @see Signal#effect(Runnable)\n+     * @param <C>\n+     *            the type of the component\n+     * @param owner\n+     *            the owner component for which the effect is applied, must not\n+     *            be <code>null</code>\n+     * @param effectFunction\n+     *            the effect function to be executed when any dependency is\n+     *            changed, must not be <code>null</code>\n+     * @return a {@link Registration} that can be used to remove the effect\n+     *         function\n+     */\n+    public static <C extends Component> Registration effect(C owner,\n+            Runnable effectFunction) {\n+        ComponentEffect effect = new ComponentEffect(owner, effectFunction);\n+        return effect::close;\n+    }\n+\n+    /**\n+     * Binds a <code>signal</code>'s value to a given owner component in a way\n+     * defined in <code>setter</code> function and creates a Signal effect\n+     * function executing the setter whenever the signal value changes.\n+     * <p>\n+     * Example of usage:\n+     *\n+     * <pre>\n+     * Registration effect = ComponentEffect.bind(mySpan, stringSignal,\n+     *         Span::setText);\n+     * effect.remove(); // to remove the effect when no longer needed\n+     *\n+     * ComponentEffect.bind(mySpan, stringSignal.map(value -> !value.isEmpty()),\n+     *         Span::setVisible);\n+     * </pre>\n+     *\n+     * @see Signal#effect(Runnable)\n+     * @param owner\n+     *            the owner component for which the effect is applied, must not\n+     *            be <code>null</code>\n+     * @param signal\n+     *            the signal whose value is to be bound to the component, must\n+     *            not be <code>null</code>\n+     * @param setter\n+     *            the setter function that defines how the signal value is\n+     *            applied to the component, must not be <code>null</code>\n+     * @return a {@link Registration} that can be used to remove the effect\n+     *         function\n+     * @param <C>\n+     *            the type of the component\n+     * @param <T>\n+     *            the type of the signal value\n+     */\n+    public static <C extends Component, T> Registration bind(C owner,\n+            Signal<T> signal, SerializableBiConsumer<C, T> setter) {\n+        return effect(owner, () -> {\n+            setter.accept(owner, signal.value());\n+        });\n+    }\n+\n+    /**\n+     * Formats a string using the values of the provided signals and the given\n+     * locale, sets the formatted string on the owner component using the\n+     * provided setter function.\n+     * <p>\n+     * Binds a formatted string using the values of the provided signals to a\n+     * given owner component in a way defined in <code>setter</code> function\n+     * and creates a Signal effect function executing the setter whenever the\n+     * signal value changes.\n+     * <p>\n+     * Example of usage:\n+     *\n+     * <pre>\n+     * ComponentEffect.format(mySpan, Span::setText, \"The price of %s is %.2f\",\n+     *         nameSignal, priceSignal);\n+     * </pre>\n+     *\n+     * @see Signal#effect(Runnable)\n+     * @param owner\n+     *            the owner component for which the effect is applied, must not\n+     *            be <code>null</code>\n+     * @param setter\n+     *            the setter function that defines how the formatted string is\n+     *            applied to the component, must not be <code>null</code>\n+     * @param locale\n+     *            the locale to be used for formatting the string, if\n+     *            <code>null</code>, then no localization is applied\n+     * @param format\n+     *            the format string to be used for formatting the signal values,\n+     *            must not be <code>null</code>\n+     * @param signals\n+     *            the signals whose values are to be used for formatting the\n+     *            string, must not be <code>null</code>\n+     * @return a {@link Registration} that can be used to remove the effect\n+     *         function\n+     * @param <C>\n+     *            the type of the component\n+     */\n+    public static <C extends Component> Registration format(C owner,\n+            SerializableBiConsumer<C, String> setter, Locale locale,\n+            String format, Signal<?>... signals) {\n+        return effect(owner, () -> {\n+            Object[] values = Stream.of(signals).map(Signal::value).toArray();\n+            setter.accept(owner, String.format(locale, format, values));\n+        });\n+    }\n+\n+    /**\n+     * Formats a string using the values of the provided signals and sets it on\n+     * the owner component using the provided setter function.\n+     * <p>\n+     * Binds a formatted string using the values of the provided signals to a\n+     * given owner component in a way defined in <code>setter</code> function\n+     * and creates a Signal effect function executing the setter whenever the\n+     * signal value changes.\n+     * <p>\n+     * Formats using locale from the current UI, I18NProvider or default locale\n+     * depending on what is available.\n+     * <p>\n+     * Example of usage:\n+     *\n+     * <pre>\n+     * ComponentEffect.format(mySpan, Span::setText, \"The price of %s is %.2f\",\n+     *         nameSignal, priceSignal);\n+     * </pre>\n+     *\n+     * @see Signal#effect(Runnable)\n+     * @param owner\n+     *            the owner component for which the effect is applied, must not\n+     *            be <code>null</code>\n+     * @param setter\n+     *            the setter function that defines how the formatted string is\n+     *            applied to the component, must not be <code>null</code>\n+     * @param format\n+     *            the format string to be used for formatting the signal values,\n+     *            must not be <code>null</code>\n+     * @param signals\n+     *            the signals whose values are to be used for formatting the\n+     *            string, must not be <code>null</code>\n+     * @return a {@link Registration} that can be used to remove the effect\n+     *         function\n+     * @param <C>\n+     *            the type of the component\n+     */\n+    public static <C extends Component> Registration format(C owner,\n+            SerializableBiConsumer<C, String> setter, String format,\n+            Signal<?>... signals) {\n+        Locale locale = LocaleUtil.getLocale();\n+        return format(owner, setter, locale, format, signals);\n+    }\n+\n+    private void enableEffect() {\n+        if (closed) {\n+            return;\n+        }\n+\n+        assert effectShutdown == null;\n+        effectShutdown = Signal.effect(effectFunction);\n+    }\n+\n+    private void disableEffect() {\n+        if (effectShutdown != null) {\n+            effectShutdown.run();\n+            effectShutdown = null;\n+        }\n+    }\n+\n+    private void close() {\n+        disableEffect();\n+        closed = true;\n+    }\n+}\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/component/ComponentEffectTest.java b/flow-server/src/test/java/com/vaadin/flow/component/ComponentEffectTest.java\nnew file mode 100644\nindex 00000000000..25c40b51aee\n--- /dev/null\n+++ b/flow-server/src/test/java/com/vaadin/flow/component/ComponentEffectTest.java\n@@ -0,0 +1,251 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.mockStatic;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import com.vaadin.experimental.DisabledFeatureException;\n+import com.vaadin.experimental.FeatureFlags;\n+import com.vaadin.flow.dom.Element;\n+import com.vaadin.flow.function.SerializableBiConsumer;\n+import com.vaadin.flow.server.MockVaadinServletService;\n+import com.vaadin.flow.shared.Registration;\n+import com.vaadin.signals.NumberSignal;\n+import com.vaadin.signals.Signal;\n+import com.vaadin.signals.SignalEnvironment;\n+import com.vaadin.signals.ValueSignal;\n+import com.vaadin.tests.util.MockUI;\n+\n+public class ComponentEffectTest {\n+    private static final Executor executor = Runnable::run;\n+    private static final ObjectMapper objectMapper = new ObjectMapper();\n+\n+    @Test\n+    public void effect_componentAttachedAndDetached_effectEnabledAndDisabled() {\n+        runWithSignalEnvironmentMocks(() -> {\n+            TestComponent component = new TestComponent();\n+            ValueSignal<String> signal = new ValueSignal<>(\"initial\");\n+            AtomicInteger count = new AtomicInteger();\n+            Registration registration = ComponentEffect.effect(component,\n+                    () -> {\n+                        signal.value();\n+                        count.incrementAndGet();\n+                    });\n+\n+            assertEquals(\"Effect should not be run until component is attached\",\n+                    0, count.get());\n+\n+            signal.value(\"test\");\n+            assertEquals(\n+                    \"Effect should not be run until component is attached even after signal value change\",\n+                    0, count.get());\n+\n+            MockUI ui = new MockUI();\n+            ui.add(component);\n+\n+            assertEquals(\"Effect should be run once component is attached\", 1,\n+                    count.get());\n+\n+            signal.value(\"test2\");\n+            assertEquals(\"Effect should be run when signal value is chaged\", 2,\n+                    count.get());\n+\n+            ui.remove(component);\n+\n+            signal.value(\"test3\");\n+            assertEquals(\"Effect should not be run after detach\", 2,\n+                    count.get());\n+\n+            ui.add(component);\n+            assertEquals(\"Effect should be run after attach\", 3, count.get());\n+\n+            registration.remove();\n+            signal.value(\"test4\");\n+            assertEquals(\"Effect should not be run after remove\", 3,\n+                    count.get());\n+        });\n+    }\n+\n+    @Test\n+    public void bind_signalValueChanges_componentUpdated() {\n+        runWithSignalEnvironmentMocks(() -> {\n+            TestComponent component = new TestComponent();\n+            ValueSignal<String> signal = new ValueSignal<>(\"initial\");\n+\n+            MockUI ui = new MockUI();\n+            ui.add(component);\n+\n+            Registration registration = ComponentEffect.bind(component, signal,\n+                    TestComponent::setValue);\n+\n+            assertEquals(\"Initial value should be set\", \"initial\",\n+                    component.getValue());\n+\n+            // Change signal value\n+            signal.value(\"new value\");\n+\n+            assertEquals(\"Component should be updated with new value\",\n+                    \"new value\", component.getValue());\n+\n+            // Change signal value again\n+            signal.value(\"another value\");\n+\n+            assertEquals(\"Component should be updated with another value\",\n+                    \"another value\", component.getValue());\n+\n+            registration.remove();\n+\n+            // Change signal value after registration is removed\n+            signal.value(\"final value\");\n+\n+            assertEquals(\n+                    \"Component should not be updated after registration is removed\",\n+                    \"another value\", component.getValue());\n+        });\n+    }\n+\n+    @Test\n+    public void format_customLocale_signalValuesChange_formattedStringUpdated() {\n+        runWithSignalEnvironmentMocks(() -> {\n+            TestComponent component = new TestComponent();\n+\n+            MockUI ui = new MockUI();\n+            ui.add(component);\n+\n+            ValueSignal<String> stringSignal = new ValueSignal<>(\"test\");\n+            NumberSignal numberSignal = new NumberSignal(42.23456);\n+\n+            Registration registration = ComponentEffect.format(component,\n+                    TestComponent::setValue, Locale.ENGLISH,\n+                    \"The price of %s is %.2f\", stringSignal, numberSignal);\n+\n+            assertEquals(\"Initial formatted value should be set\",\n+                    \"The price of test is 42.23\", component.getValue());\n+\n+            // Change int signal value\n+            numberSignal.value(20.12345);\n+\n+            assertEquals(\n+                    \"Formatted value should be updated with new numeric value\",\n+                    \"The price of test is 20.12\", component.getValue());\n+\n+            // Change string signal value\n+            stringSignal.value(\"updated\");\n+\n+            assertEquals(\n+                    \"Formatted value should be updated with new string value\",\n+                    \"The price of updated is 20.12\", component.getValue());\n+\n+            registration.remove();\n+\n+            numberSignal.value(30.3456);\n+            stringSignal.value(\"final\");\n+\n+            assertEquals(\n+                    \"Formatted value should not be updated after registration is removed\",\n+                    \"The price of updated is 20.12\", component.getValue());\n+        });\n+    }\n+\n+    @Test\n+    public void format_defaultLocale_signalValuesChange_formattedStringUpdated() {\n+        runWithSignalEnvironmentMocks(() -> {\n+            TestComponent component = new TestComponent();\n+\n+            MockUI ui = new MockUI();\n+            ui.add(component);\n+\n+            ValueSignal<String> stringSignal = new ValueSignal<>(\"test\");\n+            ValueSignal<Integer> numberSignal = new ValueSignal<>(42);\n+\n+            ComponentEffect.format(component, TestComponent::setValue,\n+                    \"The price of %s is %d\", stringSignal, numberSignal);\n+\n+            assertEquals(\"Initial formatted value should be set\",\n+                    \"The price of test is 42\", component.getValue());\n+        });\n+    }\n+\n+    /**\n+     * Other tests may already have initialized the environment with the feature\n+     * flag off and executors that would throw an exception, so it's too late\n+     * now to mock the feature flags. Thus we need to \"reinitialize\" the\n+     * environment.\n+     */\n+    private static void runWithSignalEnvironmentMocks(Runnable test) {\n+        try (var environment = mockStatic(SignalEnvironment.class);\n+                var featureFlagStaticMock = mockStatic(FeatureFlags.class)) {\n+            FeatureFlags flags = mock(FeatureFlags.class);\n+            when(flags.isEnabled(FeatureFlags.FLOW_FULLSTACK_SIGNALS.getId()))\n+                    .thenReturn(true);\n+            featureFlagStaticMock.when(() -> FeatureFlags.get(any()))\n+                    .thenReturn(flags);\n+            environment.when(() -> SignalEnvironment.initialized())\n+                    .thenReturn(true);\n+            environment.when(() -> SignalEnvironment.defaultDispatcher())\n+                    .thenReturn(executor);\n+            environment.when(() -> SignalEnvironment.synchronousDispatcher())\n+                    .thenReturn(executor);\n+            environment.when(() -> SignalEnvironment.asynchronousDispatcher())\n+                    .thenReturn(executor);\n+            environment.when(() -> SignalEnvironment.objectMapper())\n+                    .thenReturn(objectMapper);\n+            test.run();\n+        }\n+    }\n+\n+    @Tag(\"div\")\n+    private static class TestComponent extends Component {\n+        String value;\n+\n+        public TestComponent() {\n+            super(new Element(\"div\"));\n+        }\n+\n+        public String getValue() {\n+            return value;\n+        }\n+\n+        public void setValue(String value) {\n+            this.value = value;\n+        }\n+    }\n+}\n\ndiff --git a/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java b/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java\nindex cc2171f3dee..5354556536f 100644\n--- a/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java\n+++ b/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java\n@@ -203,6 +203,7 @@ protected Stream<String> getExcludedPatterns() {\n                 \"com\\\\.vaadin\\\\.flow\\\\.component\\\\.template\\\\.internal\\\\.ParserData\",\n                 \"com\\\\.vaadin\\\\.flow\\\\.component\\\\.internal\\\\.ComponentMetaData(\\\\$.*)?\",\n                 \"com\\\\.vaadin\\\\.flow\\\\.component\\\\.internal\\\\.ComponentTracker\",\n+                \"com\\\\.vaadin\\\\.flow\\\\.component\\\\.ComponentEffect\",\n                 \"com\\\\.vaadin\\\\.flow\\\\.dom\\\\.ElementFactory\",\n                 \"com\\\\.vaadin\\\\.flow\\\\.dom\\\\.NodeVisitor\",\n                 \"com\\\\.vaadin\\\\.flow\\\\.internal\\\\.nodefeature\\\\.NodeList(\\\\$.*)?\",\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21664",
    "pr_id": 21664,
    "issue_id": 18719,
    "repo": "vaadin/flow",
    "problem_statement": "Consider removing ``com.helger:ph-css``\n### Description of the bug / feature\r\n\r\nBackstory: I stumble upon this while searching for ``javax`` usages (which is brought in - among other things - by ``jsr305`` inside ``ph-commons`` inside ``ph-css`` inside ``flow-server`` ...)\r\n\r\nCurrently ``com.helger:ph-css`` is required by ``com.vaadin:flow-server``:\r\n![grafik](https://github.com/vaadin/flow/assets/45384811/693793af-155d-4390-9f1d-e805a82f2afd)\r\n\r\nThis dependency (with transitive dependencies) adds around ~2MB to the final jar, but only seems to be required for a single place:\r\n![grafik](https://github.com/vaadin/flow/assets/45384811/61b5735b-170a-4511-8128-7528e5c53729)\r\n\r\nAlso note the likely invalid imports inside \r\nhttps://github.com/vaadin/flow/blob/8dad559c9f9f0bdaad756018a891c9224dfec472/flow-server/src/main/java/com/vaadin/flow/server/Platform.java#L23  and\r\nhttps://github.com/vaadin/flow/blob/8dad559c9f9f0bdaad756018a891c9224dfec472/flow-server/src/test/java/com/vaadin/flow/server/frontend/FrontendVersionTest.java#L6\r\n\r\nNow about the single usage inside [StyleAttributeHandler](https://github.com/vaadin/flow/blob/8dad559c9f9f0bdaad756018a891c9224dfec472/flow-server/src/main/java/com/vaadin/flow/dom/impl/StyleAttributeHandler.java):\r\nAccording to it's description this class emulates the style attribute.\r\nHowever I checked my complete app and could not find a single piece of code that called ``setAttribute`` (breakpoint never triggered).\r\n\r\nI think it would be much better if ``com.helger:ph-css`` would be optional or not present:\r\n* StyleAttributeHandler should simply not allow setting the ``style`` attribute manually (without using the ``Styles`` class) if ``ph-css`` is not present\r\n* if ``ph-css`` Dependency is present the same logic as currently can be applied\r\n* This would also stop people from accidentally importing stuff from ``com.helger``-packages\r\n\r\n### Versions:\r\n    - Vaadin / Flow version: 24.3.4\r\n",
    "issue_word_count": 277,
    "test_files_count": 2,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "flow-server/pom.xml",
      "flow-server/src/main/java/com/vaadin/flow/dom/impl/StyleAttributeHandler.java",
      "flow-server/src/test/java/com/vaadin/flow/dom/ElementJacksonTest.java",
      "flow-tests/pom.xml"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/dom/ElementJacksonTest.java",
      "flow-tests/pom.xml"
    ],
    "base_commit": "932686dd6360947060d6e1a39d7df56aadafc690",
    "head_commit": "ac52969524979e7d8d705ac60185a5226787c61e",
    "repo_url": "https://github.com/vaadin/flow/pull/21664",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21664",
    "dockerfile": "",
    "pr_merged_at": "2025-06-17T06:40:05.000Z",
    "patch": "diff --git a/flow-server/pom.xml b/flow-server/pom.xml\nindex 96789da2d7b..67eccc7c5ee 100644\n--- a/flow-server/pom.xml\n+++ b/flow-server/pom.xml\n@@ -126,13 +126,6 @@\n             <version>${jsoup.version}</version>\n         </dependency>\n \n-        <!-- ph-css for parsing style attribute in Element API -->\n-        <dependency>\n-            <groupId>com.helger</groupId>\n-            <artifactId>ph-css</artifactId>\n-            <version>7.0.4</version>\n-        </dependency>\n-\n         <!-- Byte code analysis -->\n         <dependency>\n             <groupId>org.ow2.asm</groupId>\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/dom/impl/StyleAttributeHandler.java b/flow-server/src/main/java/com/vaadin/flow/dom/impl/StyleAttributeHandler.java\nindex a47044e29bc..19f702b9184 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/dom/impl/StyleAttributeHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/dom/impl/StyleAttributeHandler.java\n@@ -18,13 +18,6 @@\n import java.util.LinkedHashMap;\n import java.util.stream.Collectors;\n \n-import com.helger.css.ECSSVersion;\n-import com.helger.css.decl.CSSDeclaration;\n-import com.helger.css.decl.CSSDeclarationList;\n-import com.helger.css.reader.CSSReaderDeclarationList;\n-import com.helger.css.reader.errorhandler.CollectingCSSParseErrorHandler;\n-import com.helger.css.writer.CSSWriterSettings;\n-\n import com.vaadin.flow.dom.Element;\n import com.vaadin.flow.dom.Style;\n import com.vaadin.flow.dom.StyleUtil;\n@@ -38,6 +31,7 @@\n  * @since 1.0\n  */\n public class StyleAttributeHandler extends CustomAttribute {\n+\n     private static final String ERROR_PARSING_STYLE = \"Error parsing style '%s': %s\";\n \n     @Override\n@@ -65,6 +59,11 @@ public void setAttribute(Element element, String attributeValue) {\n         parseStyles(attributeValue).forEach(style::set);\n     }\n \n+    private static final char COLON = ':';\n+    private static final char SEMICOLON = ';';\n+    private static final char PARENTHESIS_OPEN = '(';\n+    private static final char PARENTHESIS_CLOSED = ')';\n+\n     /**\n      * Parses the given style string and populates the given style object with\n      * the found styles.\n@@ -75,30 +74,62 @@ public void setAttribute(Element element, String attributeValue) {\n      */\n     public static LinkedHashMap<String, String> parseStyles(\n             String styleString) {\n-        CollectingCSSParseErrorHandler errorCollector = new CollectingCSSParseErrorHandler();\n-        CSSDeclarationList parsed = CSSReaderDeclarationList.readFromString(\n-                styleString, ECSSVersion.LATEST, errorCollector);\n-        if (errorCollector.hasParseErrors()) {\n-            throw new IllegalArgumentException(String\n-                    .format(ERROR_PARSING_STYLE, styleString, errorCollector\n-                            .getAllParseErrors().get(0).getErrorMessage()));\n-        }\n-        if (parsed == null) {\n-            // Did not find any styles\n-            throw new IllegalArgumentException(String.format(\n-                    ERROR_PARSING_STYLE, styleString, \"No styles found\"));\n+        try {\n+            LinkedHashMap<String, String> parsedStyles = new LinkedHashMap<>();\n+            StringBuilder nameBuffer = new StringBuilder();\n+            StringBuilder valueBuffer = new StringBuilder();\n+            boolean nameRead = false;\n+            int parenthesisOpen = 0;\n+            for (int i = 0; i < styleString.length(); i++) {\n+                char c = styleString.charAt(i);\n+                if (nameRead) {\n+                    boolean valueTerminated = false;\n+                    if (c == PARENTHESIS_OPEN) {\n+                        parenthesisOpen++;\n+                    } else if (c == PARENTHESIS_CLOSED) {\n+                        parenthesisOpen--;\n+                    } else if (parenthesisOpen == 0 && c == SEMICOLON) {\n+                        valueTerminated = true;\n+                    }\n+                    if (valueTerminated) {\n+                        addRule(nameBuffer, valueBuffer, parsedStyles);\n+                        nameBuffer = new StringBuilder();\n+                        valueBuffer = new StringBuilder();\n+                        nameRead = false;\n+                    } else {\n+                        valueBuffer.append(c);\n+                    }\n+                } else {\n+                    if (c == COLON) {\n+                        nameRead = true;\n+                    } else {\n+                        nameBuffer.append(c);\n+                    }\n+                }\n+            }\n+            if (nameRead) {\n+                addRule(nameBuffer, valueBuffer, parsedStyles);\n+            } else if (!nameBuffer.isEmpty()) {\n+                throw new IllegalArgumentException(\n+                        \"Value for CSS rule was not found.\");\n+            }\n+            return parsedStyles;\n+        } catch (Exception ex) {\n+            throw new IllegalArgumentException(ex);\n         }\n+    }\n \n-        LinkedHashMap<String, String> parsedStyles = new LinkedHashMap<>();\n-        for (CSSDeclaration declaration : parsed.getAllDeclarations()) {\n-            String key = declaration.getProperty();\n-            String value = declaration.getExpression()\n-                    .getAsCSSString(new CSSWriterSettings(ECSSVersion.LATEST)\n-                            .setOptimizedOutput(true), 0);\n-            parsedStyles.put(StyleUtil.styleAttributeToProperty(key), value);\n+    protected static void addRule(StringBuilder nameBuffer,\n+            StringBuilder valueBuffer,\n+            LinkedHashMap<String, String> parsedStyles)\n+            throws IllegalArgumentException {\n+        var name = nameBuffer.toString().trim();\n+        var value = valueBuffer.toString().trim();\n+        if (name.isEmpty() || value.isEmpty()) {\n+            throw new IllegalArgumentException(\n+                    \"Style rule must contain name and value\");\n         }\n-\n-        return parsedStyles;\n+        parsedStyles.put(name, value);\n     }\n \n     @Override\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/dom/ElementJacksonTest.java b/flow-server/src/test/java/com/vaadin/flow/dom/ElementJacksonTest.java\nindex 8773c7bc0da..a1954e85ba0 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/dom/ElementJacksonTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/dom/ElementJacksonTest.java\n@@ -997,11 +997,15 @@ public void testClassNameProperty_throws() {\n         ElementFactory.createDiv().setProperty(\"className\", \"foo\");\n     }\n \n+    @Test\n     public void setStyle() {\n         Element e = ElementFactory.createDiv();\n         Style s = e.getStyle();\n         s.set(\"foo\", \"bar\");\n         Assert.assertEquals(\"bar\", s.get(\"foo\"));\n+        s.set(\"--lumo-primary-text-color\", \"hsl(12, 12%, 12%)\");\n+        Assert.assertEquals(\"hsl(12, 12%, 12%)\",\n+                s.get(\"--lumo-primary-text-color\"));\n     }\n \n     @Test\n@@ -1096,7 +1100,7 @@ public void setMultipleStylesAsAttribute() {\n         String style = \"width:12em;height:2em\";\n         e.setAttribute(\"style\", style);\n         Assert.assertEquals(style, e.getAttribute(\"style\"));\n-\n+        Assert.assertEquals(\"2em\", e.getStyle().get(\"height\"));\n     }\n \n     @Test\n@@ -1108,14 +1112,31 @@ public void setComplexStylesAsAttribute() {\n         testStyleAttribute(\"width:calc(100% - 80px)\");\n         testStyleAttribute(\"width:var(--widthB)\");\n         testStyleAttribute(\"color:var(--mainColor)\");\n-        // Reduced calc does not work (http://cssnext.io/features/#reduced-calc)\n-        // testStyleAttribute(\"font-size:calc(var(--fontSize) * 2)\");\n+        testStyleAttribute(\"font-size:calc(var(--fontSize) * 2)\");\n+        testStyleAttribute(\"--lumo-primary-text-color:hsl(12, 12%, 12%)\");\n+        testStyleAttribute(\n+                \"background:url(\\\"https://example.com/images/myImg.jpg?q;param\\\")\");\n+        var style = testStyleAttribute(\n+                \"background-image:cross-fade(20% url(first.png?foo;bar&d=3), url(second.png))\");\n+        Assert.assertEquals(\n+                \"cross-fade(20% url(first.png?foo;bar&d=3), url(second.png))\",\n+                style.get(\"background-image\"));\n+        testStyleAttribute(\n+                \"mask-image:image(url(mask.png), skyblue, linear-gradient(rgb(0 0 0 / 100%), transparent))\");\n+        style = testStyleAttribute(\n+                \"width:var(--widthB);color:var(--mainColor);background-image:cross-fade(20% url(first.png?foo;bar&d=3), url(second.png))\");\n+        Assert.assertEquals(\"var(--widthB)\", style.get(\"width\"));\n+        Assert.assertEquals(\"var(--mainColor)\", style.get(\"color\"));\n+        Assert.assertEquals(\n+                \"cross-fade(20% url(first.png?foo;bar&d=3), url(second.png))\",\n+                style.get(\"background-image\"));\n     }\n \n-    private void testStyleAttribute(String style) {\n+    private Style testStyleAttribute(String style) {\n         Element e = ElementFactory.createDiv();\n         e.setAttribute(\"style\", style);\n         Assert.assertEquals(style, e.getAttribute(\"style\"));\n+        return e.getStyle();\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n\ndiff --git a/flow-tests/pom.xml b/flow-tests/pom.xml\nindex 3e5654c4f7d..add1c63c091 100644\n--- a/flow-tests/pom.xml\n+++ b/flow-tests/pom.xml\n@@ -72,6 +72,11 @@\n             <version>${project.version}</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>com.google.code.findbugs</groupId>\n+            <artifactId>jsr305</artifactId>\n+            <version>3.0.2</version>\n+        </dependency>\n         <dependency>\n             <groupId>org.slf4j</groupId>\n             <artifactId>slf4j-simple</artifactId>\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21653",
    "pr_id": 21653,
    "issue_id": 21603,
    "repo": "vaadin/flow",
    "problem_statement": "ConsurrentModificationException when a new entry is added into MapSignal\n### Description of the bug\n\nThis below examples gives me `ConcurrentModificationException` when I add a new person to the list:\n```\njava.util.ConcurrentModificationException: null\n\tat java.base/java.util.HashMap.forEach(HashMap.java:1433) ~[na:na]\n\tat com.vaadin.signals.impl.SignalTree.lambda$notifyObservers$5(SignalTree.java:237) ~[signals-24.8.0.beta1.jar:24.8.0.beta1]\n\tat com.vaadin.signals.impl.SignalTree.runWithLock(SignalTree.java:170) ~[signals-24.8.0.beta1.jar:24.8.0.beta1]\n\tat com.vaadin.signals.impl.SignalTree.notifyObservers(SignalTree.java:236) ~[signals-24.8.0.beta1.jar:24.8.0.beta1]\n\tat com.vaadin.signals.impl.SynchronousSignalTree$1.publishChanges(SynchronousSignalTree.java:73) ~[signals-24.8.0.beta1.jar:24.8.0.beta1]\n\tat com.vaadin.signals.impl.SignalTree.lambda$commitSingleCommand$6(SignalTree.java:298) ~[signals-24.8.0.beta1.jar:24.8.0.beta1]\n\tat com.vaadin.signals.impl.SignalTree.runWithLock(SignalTree.java:170) ~[signals-24.8.0.beta1.jar:24.8.0.beta1]\n\tat com.vaadin.signals.impl.SignalTree.commitSingleCommand(SignalTree.java:294) ~[signals-24.8.0.beta1.jar:24.8.0.beta1]\n```\n\n### Expected behavior\n\nI'm not sure whether I use the API wrong or this shouldn't happen. Framework perhaps should spot these cases and show some tip.\n\n### Minimal reproducible example\n\n```java\nI think this is related use case, when you want to dynamically re-create components based on a state:\n```java\nView extends VerticalLayout {\n    private static final MapSignal<Person> mapSignal =\n            SignalFactory.IN_MEMORY_SHARED.map(\"map\", Person.class);\n    private VerticalLayout persons = new VerticalLayout();\n    static {\n        mapSignal.put(\"Alice\", new Person(\"Alice\", 30));\n        mapSignal.put(\"Bob\", new Person(\"Bob\", 25));\n        mapSignal.put(\"Charlie\", new Person(\"Charlie\", 35));\n    }\n\n    public MapSignalView() {\n        add(persons);\n\n        Signal.effect(() -> {\n            persons.removeAll();\n            mapSignal.value().forEach( (key, value) -> {\n                var name = new TextField(\"Name: \");\n                name.setValue(value.value().getName());\n                name.addValueChangeListener(event ->\n                        value.update(person -> {\n                            person.setName(event.getValue());\n                            return person;\n                        }));\n                var age = new NumberField(\"Age: \");\n                age.setValue((double) value.value().getAge());\n                age.addValueChangeListener(event ->\n                        value.update(person -> {\n                            person.setAge(event.getValue().intValue());\n                            return person;\n                        }));\n                var remove = new Button(\"Remove\", click -> mapSignal.remove(key));\n                persons.add(new HorizontalLayout(name, age, remove));\n            });\n        });\n\n        var newPerson = new TextField(\"Add new person\", event -> {\n            String name = event.getValue();\n            if (!name.isEmpty() && !mapSignal.value().containsKey(name)) {\n                mapSignal.put(name, new Person(name, 0));\n                event.getSource().setValue(\"\");\n            }\n        });\n\n        add(newPerson);\n    }\n\n    public static class Person implements Serializable {\n        private String name;\n        private int age;\n\n        public Person() {\n        }\n\n        public Person(String name, int age) {\n            this.name = name;\n            this.age = age;\n        }\n\n        public String getName() {\n            return name;\n        }\n\n        public int getAge() {\n            return age;\n        }\n\n        public void setName(String name) {\n            this.name = name;\n        }\n\n        public void setAge(int age) {\n            this.age = age;\n        }\n    }\n}\n```\n```\n\n### Versions\n\n- Vaadin / Flow version: 24.8.0.beta1\n",
    "issue_word_count": 448,
    "test_files_count": 2,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "signals/src/main/java/com/vaadin/signals/impl/SignalTree.java",
      "signals/src/test/java/com/vaadin/signals/impl/EffectTest.java",
      "signals/src/test/java/com/vaadin/signals/impl/SynchronousSignalTreeTest.java"
    ],
    "pr_changed_test_files": [
      "signals/src/test/java/com/vaadin/signals/impl/EffectTest.java",
      "signals/src/test/java/com/vaadin/signals/impl/SynchronousSignalTreeTest.java"
    ],
    "base_commit": "69fd8f5053d42aba8080ab6cbd365bc8d038b02c",
    "head_commit": "4947d8f33372ace37700b0c71cbab2608eb32c0e",
    "repo_url": "https://github.com/vaadin/flow/pull/21653",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21653",
    "dockerfile": "",
    "pr_merged_at": "2025-06-06T08:53:22.000Z",
    "patch": "diff --git a/signals/src/main/java/com/vaadin/signals/impl/SignalTree.java b/signals/src/main/java/com/vaadin/signals/impl/SignalTree.java\nindex 09ed77761d5..7227ffaadff 100644\n--- a/signals/src/main/java/com/vaadin/signals/impl/SignalTree.java\n+++ b/signals/src/main/java/com/vaadin/signals/impl/SignalTree.java\n@@ -234,7 +234,7 @@ protected void notifyObservers(Snapshot oldSnapshot, Snapshot newSnapshot) {\n         }\n \n         runWithLock(() -> {\n-            observers.forEach((nodeId, list) -> {\n+            Map.copyOf(observers).forEach((nodeId, list) -> {\n                 Data oldNode = oldSnapshot.data(nodeId).orElse(Node.EMPTY);\n                 Data newNode = newSnapshot.data(nodeId).orElse(Node.EMPTY);\n \n",
    "test_patch": "diff --git a/signals/src/test/java/com/vaadin/signals/impl/EffectTest.java b/signals/src/test/java/com/vaadin/signals/impl/EffectTest.java\nindex a36c56c05a6..0882397a9d3 100644\n--- a/signals/src/test/java/com/vaadin/signals/impl/EffectTest.java\n+++ b/signals/src/test/java/com/vaadin/signals/impl/EffectTest.java\n@@ -267,6 +267,27 @@ void changeTracking_noOpChange_effectNotRunButRemainsActive() {\n         assertEquals(List.of(\"value\", \"update\"), invocations);\n     }\n \n+    @Test\n+    void changeTracking_readChildNodes_coveredByNextEffectInvocation() {\n+        ListSignal<String> signal = new ListSignal<>(String.class);\n+        ArrayList<List<String>> invocations = new ArrayList<>();\n+\n+        Signal.effect(() -> {\n+            List<String> values = signal.value().stream().map(Signal::value)\n+                    .toList();\n+            invocations.add(values);\n+        });\n+\n+        assertEquals(List.of(List.of()), invocations);\n+\n+        signal.insertLast(\"One\");\n+        assertEquals(List.of(List.of(), List.of(\"One\")), invocations);\n+\n+        signal.insertLast(\"Two\");\n+        assertEquals(List.of(List.of(), List.of(\"One\"), List.of(\"One\", \"Two\")),\n+                invocations);\n+    }\n+\n     @Test\n     void callback_updateSignal_throws() {\n         ValueSignal<String> signal = new ValueSignal<>(\"value\");\n\ndiff --git a/signals/src/test/java/com/vaadin/signals/impl/SynchronousSignalTreeTest.java b/signals/src/test/java/com/vaadin/signals/impl/SynchronousSignalTreeTest.java\nindex 6feb78de2f9..b96544ef816 100644\n--- a/signals/src/test/java/com/vaadin/signals/impl/SynchronousSignalTreeTest.java\n+++ b/signals/src/test/java/com/vaadin/signals/impl/SynchronousSignalTreeTest.java\n@@ -350,6 +350,37 @@ void observe_observeInCallback_registeredAgain() {\n         assertEquals(1, count.get());\n     }\n \n+    @Test\n+    void observe_observeAnotherNodeInCallback_observerAdded() {\n+        SynchronousSignalTree tree = new SynchronousSignalTree(false);\n+\n+        Id childId = Id.random();\n+        AtomicInteger count = new AtomicInteger();\n+        tree.observeNextChange(Id.ZERO, () -> {\n+            tree.observeNextChange(childId, () -> {\n+                count.incrementAndGet();\n+                return false;\n+            });\n+            return false;\n+        });\n+\n+        tree.commitSingleCommand(new SignalCommand.InsertCommand(childId,\n+                Id.ZERO, null, new DoubleNode(2), ListPosition.last()));\n+\n+        // Nothing yet since root observer not invoked\n+        assertEquals(0, count.get());\n+\n+        tree.commitSingleCommand(TestUtil.writeRootValueCommand());\n+\n+        // Nothing yet since child observer not invoked\n+        assertEquals(0, count.get());\n+\n+        tree.commitSingleCommand(new SignalCommand.SetCommand(Id.random(),\n+                childId, new DoubleNode(3)));\n+\n+        assertEquals(1, count.get());\n+    }\n+\n     @Test\n     void subscribeToProcessed_noChanges_doesNotReceive() {\n         SynchronousSignalTree tree = new SynchronousSignalTree(false);\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21615",
    "pr_id": 21615,
    "issue_id": 21592,
    "repo": "vaadin/flow",
    "problem_statement": "Application does not startup because of route path collision after file is removed\n### Description of the bug\n\nI had `@index.tsx` and `MyView.java` with `my-view` route path. Then I decided to make MyView.java as the home page. Then I shut down the server, removed `@index.tsx` and replaced the path `my-view` to ``. I realized that application throws `InvalidRouteConfigurationException` on startup even though there are no conflicting paths. \n\nI investigated and realized that `file-routes.ts` is not up-to-date and has `''` configuration with `@index.tsx`.\n\nAfter deleting the generated folder, the application started up fine.\n\n### Expected behavior\n\nThe application should verify the corresponding route file when a conflict arises and should start as expected \n\n### Minimal reproducible example\n\n - Create a full-stack app from the start.vaadin.com\n - Run the application once, so the generated folder gets created\n - Stop the application\n - Create a View with \"\" route.\n - Remove the `@index.tsx`\n - Start the application\nYou will get InvalidRouteConfigurationException \n\n### Versions\n\nHilla: 24.8.0.beta2\nFlow: 24.8.0.beta2\nVaadin: 24.8.0.beta2\nSpring Boot: 3.5.0\nSpring: 6.2.7\nSpring Security: \nSpring Data JPA: \nCopilot: 24.8.0.beta2\nFrontend Hotswap: Enabled ⋅ Vite\nOS: aarch64 Mac OS X 14.7.1\nJava: JetBrains s.r.o. 21.0.5\nBrowser: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36\nJava Hotswap: Java Hotswap is enabled\nIDE Plugin: 1.0-SNAPSHOT IntelliJ",
    "issue_word_count": 252,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/router/internal/RouteUtil.java",
      "flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java",
      "flow-server/src/test/java/com/vaadin/flow/router/internal/RouteUtilTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/router/internal/RouteUtilTest.java"
    ],
    "base_commit": "314639a38753f0385da78a5fda22e6c09a6561f5",
    "head_commit": "44759a07df81dc59361f5e46042ffc78b5a609e4",
    "repo_url": "https://github.com/vaadin/flow/pull/21615",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21615",
    "dockerfile": "",
    "pr_merged_at": "2025-06-04T04:11:14.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/router/internal/RouteUtil.java b/flow-server/src/main/java/com/vaadin/flow/router/internal/RouteUtil.java\nindex 36f633d48f1..374f2cdb354 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/router/internal/RouteUtil.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/router/internal/RouteUtil.java\n@@ -656,8 +656,12 @@ public static void checkForClientRouteCollisions(VaadinService service,\n         if (!collisions.isEmpty()) {\n             String msg = String.format(\n                     \"Invalid route configuration. The following Hilla \"\n-                            + \"route(s) conflict with configured Flow routes: %s\",\n-                    String.join(\", \", collisions));\n+                            + \"route(s) conflict with configured Flow routes: '%s'. \"\n+                            + \"Please double-check the Hilla and Flow routes path and resolve the conflicts. \"\n+                            + \"If the error persists try to delete the %s folder.\",\n+                    String.join(\"', '\", collisions),\n+                    FrontendUtils.getFrontendGeneratedFolder(service\n+                            .getDeploymentConfiguration().getFrontendFolder()));\n             throw new InvalidRouteConfigurationException(msg);\n         }\n     }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java b/flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java\nindex 2233c5d88ce..6e07ee40519 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java\n@@ -346,8 +346,12 @@ public void init() throws ServiceException {\n             UsageStatistics.markAsUsed(\"flow/bun\", null);\n         }\n \n-        RouteUtil.checkForClientRouteCollisions(this,\n-                getRouteRegistry().getRegisteredRoutes());\n+        if (getDeploymentConfiguration().isProductionMode()) {\n+            // Postpone the check until dev-server is fully initialized and\n+            // client routes are computed.\n+            RouteUtil.checkForClientRouteCollisions(this,\n+                    getRouteRegistry().getRegisteredRoutes());\n+        }\n \n         initialized = true;\n     }\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/router/internal/RouteUtilTest.java b/flow-server/src/test/java/com/vaadin/flow/router/internal/RouteUtilTest.java\nindex 53a17e65a0b..23c85a9fb7e 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/router/internal/RouteUtilTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/router/internal/RouteUtilTest.java\n@@ -24,6 +24,7 @@\n import java.util.Map;\n import java.util.function.Consumer;\n \n+import org.hamcrest.CoreMatchers;\n import org.hamcrest.MatcherAssert;\n import org.hamcrest.collection.IsIterableContainingInOrder;\n import org.junit.Assert;\n@@ -39,7 +40,6 @@\n import com.vaadin.flow.internal.ReflectTools;\n import com.vaadin.flow.internal.menu.MenuRegistry;\n import com.vaadin.flow.router.Layout;\n-import com.vaadin.flow.router.Menu;\n import com.vaadin.flow.router.ParentLayout;\n import com.vaadin.flow.router.Route;\n import com.vaadin.flow.router.RouteAlias;\n@@ -52,7 +52,6 @@\n import com.vaadin.flow.server.SessionRouteRegistry;\n import com.vaadin.flow.server.VaadinContext;\n import com.vaadin.flow.server.VaadinService;\n-import com.vaadin.flow.server.frontend.BundleUtils;\n import com.vaadin.flow.server.frontend.FrontendUtils;\n import com.vaadin.flow.server.menu.AvailableViewInfo;\n import com.vaadin.flow.server.startup.ApplicationRouteRegistry;\n@@ -1076,8 +1075,8 @@ public void clientHasMappedLayout_validateNoClientRouteCollisions() {\n     @Test\n     public void clientHasOverlappingTarget_validateClientRouteCollision() {\n         expectedEx.expect(InvalidRouteConfigurationException.class);\n-        expectedEx.expectMessage(\n-                \"Invalid route configuration. The following Hilla route(s) conflict with configured Flow routes: flow\");\n+        expectedEx.expectMessage(CoreMatchers.containsString(\n+                \"Invalid route configuration. The following Hilla route(s) conflict with configured Flow routes: 'flow'\"));\n         Map<String, AvailableViewInfo> clientRoutes = new HashMap<>();\n \n         clientRoutes.put(\"\", new AvailableViewInfo(\"public\", null, false, \"\",\n@@ -1099,7 +1098,7 @@ public void clientHasOverlappingTarget_validateClientRouteCollision() {\n             Mockito.when(service.getDeploymentConfiguration()).thenReturn(conf);\n             Mockito.when(conf.isProductionMode()).thenReturn(false);\n             Mockito.when(conf.getFrontendFolder())\n-                    .thenReturn(Mockito.mock(File.class));\n+                    .thenReturn(new File(\"/tmp/folder\"));\n \n             registry.when(\n                     () -> MenuRegistry.collectClientMenuItems(false, conf))\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21565",
    "pr_id": 21565,
    "issue_id": 21564,
    "repo": "vaadin/flow",
    "problem_statement": "ViteWebsocketConnection never sends any messages to Vite\n### Description of the bug\n\nThe code\n```java\n    public void send(String message)\n            throws InterruptedException, ExecutionException {\n        CompletableFuture<WebSocket> send = clientWebsocket.get()\n                .sendText(message, false);\n        send.get();\n    }\n```\n\nnever actually sends any messages to the client websocket because the `last` parameter is set to `false`: \n```\nParams:\ndata – the data\nlast – true if this invocation completes the message, false otherwise\n```\n\n### Expected behavior\n\nVite communication works\n\n### Minimal reproducible example\n\nOpen an app and look at the websocket traffic. There should be a message like\n```json\n{type: \"custom\", event: \"vite-plugin-checker\", data: {event: \"vite-plugin-checker:reconnect\",…}}\n```\n\nfrom the vite checker plugin\n\n### Versions\n\n- Vaadin / Flow version: 24.8.0.beta1",
    "issue_word_count": 112,
    "test_files_count": 4,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "flow-tests/test-dev-mode/src/main/frontend/vite-communication.ts",
      "flow-tests/test-dev-mode/src/main/java/com/vaadin/flow/uitest/ui/ViteCommunicationView.java",
      "flow-tests/test-dev-mode/src/test/java/com/vaadin/flow/uitest/ui/ViteCommunicationIT.java",
      "flow-tests/test-dev-mode/vite.config.ts",
      "vaadin-dev-server/src/main/java/com/vaadin/base/devserver/viteproxy/ViteWebsocketConnection.java"
    ],
    "pr_changed_test_files": [
      "flow-tests/test-dev-mode/src/main/frontend/vite-communication.ts",
      "flow-tests/test-dev-mode/src/main/java/com/vaadin/flow/uitest/ui/ViteCommunicationView.java",
      "flow-tests/test-dev-mode/src/test/java/com/vaadin/flow/uitest/ui/ViteCommunicationIT.java",
      "flow-tests/test-dev-mode/vite.config.ts"
    ],
    "base_commit": "1a69b90a36a71dc98f060f34d7706e7e6face114",
    "head_commit": "b21092dafa7ae671747c3f842f74a23332b480fc",
    "repo_url": "https://github.com/vaadin/flow/pull/21565",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21565",
    "dockerfile": "",
    "pr_merged_at": "2025-05-30T08:26:08.000Z",
    "patch": "diff --git a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/viteproxy/ViteWebsocketConnection.java b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/viteproxy/ViteWebsocketConnection.java\nindex 05fe7412a2e..8fabfb67bc1 100644\n--- a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/viteproxy/ViteWebsocketConnection.java\n+++ b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/viteproxy/ViteWebsocketConnection.java\n@@ -139,7 +139,7 @@ public CompletionStage<?> onText(WebSocket webSocket, CharSequence data,\n     public void send(String message)\n             throws InterruptedException, ExecutionException {\n         CompletableFuture<WebSocket> send = clientWebsocket.get()\n-                .sendText(message, false);\n+                .sendText(message, true);\n         send.get();\n     }\n \n",
    "test_patch": "diff --git a/flow-tests/test-dev-mode/src/main/frontend/vite-communication.ts b/flow-tests/test-dev-mode/src/main/frontend/vite-communication.ts\nnew file mode 100644\nindex 00000000000..ac88d945f1f\n--- /dev/null\n+++ b/flow-tests/test-dev-mode/src/main/frontend/vite-communication.ts\n@@ -0,0 +1,5 @@\n+// @ts-expect-error\n+if (import.meta.hot) {\n+    // @ts-ignore\n+  window.importmetahot = import.meta.hot;\n+}\n\ndiff --git a/flow-tests/test-dev-mode/src/main/java/com/vaadin/flow/uitest/ui/ViteCommunicationView.java b/flow-tests/test-dev-mode/src/main/java/com/vaadin/flow/uitest/ui/ViteCommunicationView.java\nnew file mode 100644\nindex 00000000000..95d0d1193eb\n--- /dev/null\n+++ b/flow-tests/test-dev-mode/src/main/java/com/vaadin/flow/uitest/ui/ViteCommunicationView.java\n@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.uitest.ui;\n+\n+import com.vaadin.flow.component.AttachEvent;\n+import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.component.dependency.JsModule;\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.component.html.NativeButton;\n+import com.vaadin.flow.component.page.Page;\n+import com.vaadin.flow.router.Route;\n+import com.vaadin.flow.uitest.servlet.ViewTestLayout;\n+\n+@Route(value = \"com.vaadin.flow.uitest.ui.ViteCommunicationView\", layout = ViewTestLayout.class)\n+@JsModule(\"./vite-communication.ts\")\n+public class ViteCommunicationView extends Div {\n+\n+    @Override\n+    protected void onAttach(AttachEvent attachEvent) {\n+        super.onAttach(attachEvent);\n+        UI ui = attachEvent.getUI();\n+        Page page = ui.getPage();\n+        page.executeJs(\n+                \"\"\"\n+                        window.importmetahot.on('test-event-response', (event) => {\n+                            document.querySelector('#response').innerText += 'Got event test-event-response with data ' + JSON.stringify(event) + '';\n+                        });\n+                        \"\"\");\n+\n+        NativeButton sendMessage = new NativeButton(\"Send message\",\n+                e -> ui.getPage().executeJs(\n+                        \"window.importmetahot.send('test-event', {foo: 'bar'});\"));\n+        sendMessage.setId(\"send\");\n+        Div response = new Div();\n+        response.setId(\"response\");\n+\n+        add(sendMessage, response);\n+\n+    }\n+\n+}\n\ndiff --git a/flow-tests/test-dev-mode/src/test/java/com/vaadin/flow/uitest/ui/ViteCommunicationIT.java b/flow-tests/test-dev-mode/src/test/java/com/vaadin/flow/uitest/ui/ViteCommunicationIT.java\nnew file mode 100644\nindex 00000000000..4c7a06de60b\n--- /dev/null\n+++ b/flow-tests/test-dev-mode/src/test/java/com/vaadin/flow/uitest/ui/ViteCommunicationIT.java\n@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.uitest.ui;\n+\n+import org.junit.Test;\n+\n+import com.vaadin.flow.component.html.testbench.DivElement;\n+import com.vaadin.flow.component.html.testbench.NativeButtonElement;\n+import com.vaadin.flow.testutil.ChromeBrowserTest;\n+\n+public class ViteCommunicationIT extends ChromeBrowserTest {\n+\n+    @Test\n+    public void messageSentToViteAndBack() {\n+        open();\n+        $(NativeButtonElement.class).id(\"send\").click();\n+        waitUntil(driver -> $(DivElement.class).id(\"response\").getText().equals(\n+                \"Got event test-event-response with data {\\\"foo\\\":\\\"bar\\\"}\"));\n+    }\n+\n+}\n\ndiff --git a/flow-tests/test-dev-mode/vite.config.ts b/flow-tests/test-dev-mode/vite.config.ts\nnew file mode 100644\nindex 00000000000..8a3dd2091b9\n--- /dev/null\n+++ b/flow-tests/test-dev-mode/vite.config.ts\n@@ -0,0 +1,17 @@\n+import { UserConfigFn } from 'vite';\n+import { overrideVaadinConfig } from './vite.generated';\n+\n+const customConfig: UserConfigFn = (env) => ({\n+  plugins: [\n+    {\n+      name: 'communication-test',\n+      configureServer(server) {\n+        server.ws.on('test-event', (data) => {\n+          server.ws.send('test-event-response', data);\n+        });\n+      }\n+    }\n+  ]\n+});\n+\n+export default overrideVaadinConfig(customConfig);\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21554",
    "pr_id": 21554,
    "issue_id": 21533,
    "repo": "vaadin/flow",
    "problem_statement": "UploadHandler method overrides are ignored by Upload\n### Description of the bug\n\nUpload handler's methods overrides are ignored in Upload, e.g. custom url prefix and other default methods in UploadHandler are not taken into account, e.g. this doesn't use custom postfix:\n```java\n        InMemoryUploadHandler inMemoryUploadHandler = new InMemoryUploadHandler(\n                (uploadMetadata, bytes) -> {\n                    // handle Uploaded data here\n                }) {\n            @Override\n            public String getUrlPostfix() {\n                return \"custom-url-postfix\";\n            }\n\n            // other overrides\n        };\n        upload.setUploadHandler(inMemoryUploadHandler);\n```\nThis is because Upload wraps the original handler with calling component's methods before/after request handling:\n```java\n        UploadHandler newUploadHandler = event -> {\n            try {\n                startUpload();\n                handler.handleUploadRequest(event);\n            } finally {\n                endUpload();\n            }\n        };\n```\n\n### Expected behavior\n\nAll overrides should be taken into account in request handling.\n\n### Minimal reproducible example\n\nSee the example above\n\n### Versions\n\n- Vaadin / Flow version: 24.8.0.alpha8\n",
    "issue_word_count": 123,
    "test_files_count": 1,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/internal/streams/UploadCompleteEvent.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/streams/UploadStartEvent.java",
      "flow-server/src/main/java/com/vaadin/flow/server/streams/TransferUtil.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/UploadHandlerTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/server/communication/UploadHandlerTest.java"
    ],
    "base_commit": "ae81bfa432c6e9be66a25e7912773e7feffd3691",
    "head_commit": "1cbe59d95d59a2236864adad9b0b71b2a64a92d9",
    "repo_url": "https://github.com/vaadin/flow/pull/21554",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21554",
    "dockerfile": "",
    "pr_merged_at": "2025-06-02T11:23:29.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/internal/streams/UploadCompleteEvent.java b/flow-server/src/main/java/com/vaadin/flow/internal/streams/UploadCompleteEvent.java\nnew file mode 100644\nindex 00000000000..32f14f9dc8e\n--- /dev/null\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/streams/UploadCompleteEvent.java\n@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.internal.streams;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.ComponentEvent;\n+\n+/**\n+ * Event notifying the upload component that the upload has been completed.\n+ * <p>\n+ * This event is typically used in conjunction with file upload components and\n+ * {@link com.vaadin.flow.server.streams.UploadHandler} to indicate that the\n+ * upload process has finished. This event is internal and is not intended for\n+ * public use.\n+ * <p>\n+ * For internal use only. May be renamed or removed in a future release.\n+ *\n+ * @since 24.8\n+ */\n+public class UploadCompleteEvent extends ComponentEvent<Component> {\n+    /**\n+     * Creates a new event using the given source. Always fired on the server\n+     * side.\n+     *\n+     * @param source\n+     *            the source component\n+     */\n+    public UploadCompleteEvent(Component source) {\n+        super(source, false);\n+    }\n+}\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/streams/UploadStartEvent.java b/flow-server/src/main/java/com/vaadin/flow/internal/streams/UploadStartEvent.java\nnew file mode 100644\nindex 00000000000..5dee9f8df2c\n--- /dev/null\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/streams/UploadStartEvent.java\n@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.internal.streams;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.ComponentEvent;\n+\n+/**\n+ * Event notifying the upload component that the upload has been started.\n+ * <p>\n+ * This event is typically used in conjunction with file upload components and\n+ * {@link com.vaadin.flow.server.streams.UploadHandler} to indicate that the\n+ * upload process has started. This event is internal and is not intended for\n+ * public use.\n+ * <p>\n+ * For internal use only. May be renamed or removed in a future release.\n+ *\n+ * @since 24.8\n+ */\n+public class UploadStartEvent extends ComponentEvent<Component> {\n+    /**\n+     * Creates a new event using the given source. Always fired on the server\n+     * side.\n+     *\n+     * @param source\n+     *            the source component\n+     */\n+    public UploadStartEvent(Component source) {\n+        super(source, false);\n+    }\n+}\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/streams/TransferUtil.java b/flow-server/src/main/java/com/vaadin/flow/server/streams/TransferUtil.java\nindex 02cc571e18a..3877849d122 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/streams/TransferUtil.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/streams/TransferUtil.java\n@@ -39,7 +39,11 @@\n import org.apache.commons.fileupload2.jakarta.JakartaServletFileUpload;\n import org.slf4j.LoggerFactory;\n \n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.ComponentUtil;\n import com.vaadin.flow.dom.Element;\n+import com.vaadin.flow.internal.streams.UploadCompleteEvent;\n+import com.vaadin.flow.internal.streams.UploadStartEvent;\n import com.vaadin.flow.server.VaadinRequest;\n import com.vaadin.flow.server.VaadinResponse;\n import com.vaadin.flow.server.VaadinSession;\n@@ -123,6 +127,9 @@ public static long transfer(InputStream inputStream,\n      * {@link UploadHandler#handleUploadRequest(UploadEvent)} correctly for xhr\n      * and multipart uploads.\n      * <p>\n+     * Fires internal events for the owner upload component to indicate that the\n+     * upload has started and completed.\n+     * <p>\n      * For internal use only. May be renamed or removed in a future release.\n      *\n      * @param handler\n@@ -160,7 +167,7 @@ static void handleUpload(UploadHandler handler, VaadinRequest request,\n                                 session, part.getSubmittedFileName(),\n                                 part.getSize(), part.getContentType(), owner,\n                                 null, part);\n-                        handler.handleUploadRequest(event);\n+                        handleUploadRequest(handler, event);\n                     }\n                     handler.responseHandled(true, response);\n                 } else {\n@@ -189,7 +196,7 @@ static void handleUpload(UploadHandler handler, VaadinRequest request,\n                                     response, session, item.getName(),\n                                     contentLength, item.getContentType(), owner,\n                                     item, null);\n-                            handler.handleUploadRequest(event);\n+                            handleUploadRequest(handler, event);\n                         }\n                         handler.responseHandled(true, response);\n                     } catch (FileUploadException e) {\n@@ -227,7 +234,7 @@ static void handleUpload(UploadHandler handler, VaadinRequest request,\n                         fileName, request.getContentLengthLong(), contentType,\n                         owner, null, null);\n \n-                handler.handleUploadRequest(event);\n+                handleUploadRequest(handler, event);\n                 handler.responseHandled(true, response);\n             }\n         } catch (Exception e) {\n@@ -236,4 +243,15 @@ static void handleUpload(UploadHandler handler, VaadinRequest request,\n             handler.responseHandled(false, response);\n         }\n     }\n+\n+    private static void handleUploadRequest(UploadHandler handler,\n+            UploadEvent event) throws IOException {\n+        Component owner = event.getOwningComponent();\n+        try {\n+            ComponentUtil.fireEvent(owner, new UploadStartEvent(owner));\n+            handler.handleUploadRequest(event);\n+        } finally {\n+            ComponentUtil.fireEvent(owner, new UploadCompleteEvent(owner));\n+        }\n+    }\n }\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/UploadHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/UploadHandlerTest.java\nindex d5c82e32f02..f29c5e4a8a9 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/UploadHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/UploadHandlerTest.java\n@@ -9,6 +9,7 @@\n import java.nio.file.Files;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n import java.util.concurrent.Future;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n@@ -27,11 +28,18 @@\n import org.junit.Test;\n import org.mockito.Mockito;\n \n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.ComponentEvent;\n+import com.vaadin.flow.component.ComponentEventListener;\n+import com.vaadin.flow.component.ComponentUtil;\n+import com.vaadin.flow.component.Tag;\n import com.vaadin.flow.component.UI;\n import com.vaadin.flow.dom.Element;\n import com.vaadin.flow.function.SerializableBiConsumer;\n import com.vaadin.flow.internal.CurrentInstance;\n import com.vaadin.flow.internal.StateNode;\n+import com.vaadin.flow.internal.streams.UploadCompleteEvent;\n+import com.vaadin.flow.internal.streams.UploadStartEvent;\n import com.vaadin.flow.server.AbstractStreamResource;\n import com.vaadin.flow.server.Command;\n import com.vaadin.flow.server.HttpStatusCode;\n@@ -50,6 +58,7 @@\n import com.vaadin.flow.server.streams.UploadHandler;\n import com.vaadin.flow.server.streams.UploadMetadata;\n import com.vaadin.flow.shared.ApplicationConstants;\n+import com.vaadin.flow.shared.Registration;\n import com.vaadin.tests.util.AlwaysLockedVaadinSession;\n import com.vaadin.tests.util.MockUI;\n \n@@ -82,6 +91,7 @@ public class UploadHandlerTest {\n     private UI ui;\n     private StateNode stateNode;\n     private Element element;\n+    private TestComponent component;\n \n     @Before\n     public void setUp() throws ServletException, ServiceException {\n@@ -114,7 +124,10 @@ public UI getUIById(int uiId) {\n         stateNode = Mockito.mock(StateNode.class);\n         when(stateNode.isAttached()).thenReturn(true);\n         element = Mockito.mock(Element.class);\n+        component = new TestComponent();\n         Mockito.when(element.getNode()).thenReturn(stateNode);\n+        Mockito.when(element.getComponent())\n+                .thenReturn(Optional.of(this.component));\n         response = Mockito.mock(VaadinResponse.class);\n     }\n \n@@ -538,6 +551,106 @@ public void doesNotRequireToCatchIOException() {\n         };\n     }\n \n+    @Test\n+    public void singleUpload_startAndComplete_firesInternalEvents()\n+            throws IOException, ServletException {\n+        AtomicBoolean startFired = new AtomicBoolean(false);\n+        AtomicBoolean completeFired = new AtomicBoolean(false);\n+        component.addListener(UploadStartEvent.class, event -> {\n+            startFired.set(true);\n+        });\n+        component.addListener(UploadCompleteEvent.class, event -> {\n+            completeFired.set(true);\n+        });\n+        UploadHandler handler = (event) -> {\n+        };\n+        handler.handleRequest(request, response, session, element);\n+        Assert.assertTrue(\"Start event was not fired\", startFired.get());\n+        Assert.assertTrue(\"Complete event was not fired\", completeFired.get());\n+\n+        startFired.set(false);\n+        completeFired.set(false);\n+\n+        handler = (event) -> {\n+            throw new RuntimeException(\"Test exception\");\n+        };\n+\n+        try {\n+            handler.handleRequest(request, response, session, element);\n+        } catch (RuntimeException e) {\n+            // expected\n+        }\n+\n+        Assert.assertTrue(\"Start event was not fired before exception\",\n+                startFired.get());\n+        Assert.assertTrue(\"Complete event was not fired after exception\",\n+                completeFired.get());\n+    }\n+\n+    @Test\n+    public void multipartStreamRequest_startAndComplete_firesInternalEvents()\n+            throws IOException, ServletException {\n+        AtomicInteger startFired = new AtomicInteger(0);\n+        AtomicInteger completeFired = new AtomicInteger(0);\n+        component.addListener(UploadStartEvent.class, event -> {\n+            startFired.incrementAndGet();\n+        });\n+        component.addListener(UploadCompleteEvent.class, event -> {\n+            completeFired.incrementAndGet();\n+        });\n+        UploadHandler handler = (event) -> {\n+        };\n+\n+        StreamRegistration streamRegistration = streamResourceRegistry\n+                .registerResource(handler);\n+        AbstractStreamResource res = streamRegistration.getResource();\n+\n+        mockRequest(res, MULTIPART_STREAM_CONTENT);\n+        Mockito.when(request.getContentType())\n+                .thenReturn(MULTIPART_CONTENT_TYPE);\n+\n+        handler.handleRequest(request, response, session, element);\n+        Assert.assertEquals(\"Start event was not fired\", 2, startFired.get());\n+        Assert.assertEquals(\"Complete event was not fired\", 2,\n+                completeFired.get());\n+    }\n+\n+    @Test\n+    public void multipartRequest_startAndComplete_firesInternalEvents()\n+            throws IOException, ServletException {\n+        List<Part> parts = new ArrayList<>();\n+        parts.add(createPart(createInputStream(\"one\"), MULTIPART_CONTENT_TYPE,\n+                \"one.txt\", 3));\n+        parts.add(createPart(createInputStream(\"two\"), MULTIPART_CONTENT_TYPE,\n+                \"two.txt\", 3));\n+\n+        Mockito.when(request.getParts()).thenReturn(parts);\n+\n+        AtomicInteger startFired = new AtomicInteger(0);\n+        AtomicInteger completeFired = new AtomicInteger(0);\n+        component.addListener(UploadStartEvent.class, event -> {\n+            startFired.incrementAndGet();\n+        });\n+        component.addListener(UploadCompleteEvent.class, event -> {\n+            completeFired.incrementAndGet();\n+        });\n+        UploadHandler handler = (event) -> {\n+        };\n+\n+        StreamRegistration streamRegistration = streamResourceRegistry\n+                .registerResource(handler);\n+        AbstractStreamResource res = streamRegistration.getResource();\n+\n+        mockRequest(res, MULTIPART_STREAM_CONTENT);\n+        Mockito.when(request.getContentType())\n+                .thenReturn(MULTIPART_CONTENT_TYPE);\n+\n+        handler.handleRequest(request, response, session, element);\n+        Assert.assertEquals(\"Start event was not fired\", 2, startFired.get());\n+        Assert.assertEquals(\"Complete event was not fired\", 2,\n+                completeFired.get());\n+    }\n+\n     private Part createPart(InputStream inputStream, String contentType,\n             String name, long size) throws IOException {\n         Part part = mock(Part.class);\n@@ -607,4 +720,13 @@ public int read() throws IOException {\n         };\n     }\n \n+    @Tag(\"div\")\n+    private static class TestComponent extends Component {\n+        @Override\n+        public <T extends ComponentEvent<?>> Registration addListener(\n+                Class<T> eventType, ComponentEventListener<T> listener) {\n+            return super.addListener(eventType, listener);\n+        }\n+    }\n+\n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21542",
    "pr_id": 21542,
    "issue_id": 21535,
    "repo": "vaadin/flow",
    "problem_statement": "Improve executor lookup for Spring VaadinService\nAt application startup Spring VaadinService tries to detect a proper `TaskExecutor` to be used for Vaadin tasks.\nIt usually ends up finding a bean named `applicationTaskExecutor`, directly provided by Spring.\n\nIf there are more candidates, the application startup is stopped with an exception, explaining how to mark the bean that Vaadin should use.\n\nThe above instructions are good if the additional executors are defined in the application itself, but if the beans are provided by other means, for example, by using `@EnableScheduling`.\n\nVaadin should apply some strategy to detect the best candidate instead of immediately failing.\n\nA proper strategy could be to:\n\n* prefer beans of type `TaskExecutor` over `TaskScheduler`\n* prefer beans named  `applicationTaskExecutor` (`TaskExecutionAutoConfiguration.APPLICATION_TASK_EXECUTOR_BEAN_NAME`) or `taskExecutor`  `AsyncAnnotationBeanPostProcessor.DEFAULT_TASK_EXECUTOR_BEAN_NAME`)\n\n",
    "issue_word_count": 125,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringVaadinServletService.java",
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/service/SpringVaadinServiceExecutorTest.java"
    ],
    "pr_changed_test_files": [
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/service/SpringVaadinServiceExecutorTest.java"
    ],
    "base_commit": "b39dafeb3058a9110fa6cae8c9561ff5a436a18b",
    "head_commit": "d01b1da0961bf862067c1002a0d6cfe37bcc40ae",
    "repo_url": "https://github.com/vaadin/flow/pull/21542",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21542",
    "dockerfile": "",
    "pr_merged_at": "2025-05-28T14:16:58.000Z",
    "patch": "diff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringVaadinServletService.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringVaadinServletService.java\nindex eae4c01712b..843ad63cf43 100644\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringVaadinServletService.java\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringVaadinServletService.java\n@@ -31,6 +31,7 @@\n import org.springframework.context.ApplicationContext;\n import org.springframework.core.io.Resource;\n import org.springframework.core.task.TaskExecutor;\n+import org.springframework.scheduling.TaskScheduler;\n \n import com.vaadin.flow.di.Instantiator;\n import com.vaadin.flow.function.DeploymentConfiguration;\n@@ -130,6 +131,24 @@ protected Executor createDefaultExecutor() {\n             candidates.removeIf(name -> !annotatedBeans.contains(name)\n                     && !name.equals(VaadinTaskExecutor.NAME));\n         }\n+\n+        if (candidates.size() > 1) {\n+            // Gives preference to regular executors over schedulers when both\n+            // types are present.\n+            Map<Boolean, List<String>> byType = candidates.stream()\n+                    .collect(Collectors.partitioningBy(name -> context\n+                            .isTypeMatch(name, TaskScheduler.class)));\n+            if (!byType.get(true).isEmpty() && !byType.get(false).isEmpty()) {\n+                // Remove TaskScheduler's from candidates list\n+                byType.get(true).forEach(candidates::remove);\n+            }\n+        }\n+\n+        if (candidates.size() > 1) {\n+            // Remove Spring default executor to select an application defined\n+            // bean\n+            candidates.remove(\"applicationTaskExecutor\");\n+        }\n         if (candidates.size() == 1) {\n             return context.getBean(candidates.iterator().next(),\n                     TaskExecutor.class);\n",
    "test_patch": "diff --git a/vaadin-spring/src/test/java/com/vaadin/flow/spring/service/SpringVaadinServiceExecutorTest.java b/vaadin-spring/src/test/java/com/vaadin/flow/spring/service/SpringVaadinServiceExecutorTest.java\nindex 5a6108f96d1..98e0117dfa4 100644\n--- a/vaadin-spring/src/test/java/com/vaadin/flow/spring/service/SpringVaadinServiceExecutorTest.java\n+++ b/vaadin-spring/src/test/java/com/vaadin/flow/spring/service/SpringVaadinServiceExecutorTest.java\n@@ -23,12 +23,16 @@\n import org.junit.jupiter.api.Test;\n import org.springframework.boot.autoconfigure.AutoConfigurations;\n import org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration;\n+import org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration;\n import org.springframework.boot.test.context.TestConfiguration;\n import org.springframework.boot.test.context.runner.WebApplicationContextRunner;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Import;\n import org.springframework.core.task.TaskExecutor;\n+import org.springframework.scheduling.TaskScheduler;\n import org.springframework.scheduling.annotation.EnableAsync;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.scheduling.concurrent.SimpleAsyncTaskScheduler;\n \n import com.vaadin.flow.server.VaadinService;\n import com.vaadin.flow.server.VaadinServiceInitListener;\n@@ -48,6 +52,7 @@ public class SpringVaadinServiceExecutorTest {\n     static final String CUSTOM_EXECUTOR_VIA_INIT_LISTENER = \"CUSTOM_EXECUTOR_VIA_INIT_LISTENER\";\n     static final String CUSTOM_NAMED_EXECUTOR = \"CUSTOM_NAMED_EXECUTOR\";\n     static final String CUSTOM_EXECUTOR = \"CUSTOM_EXECUTOR\";\n+    static final String CUSTOM_SCHEDULER = \"CUSTOM_SCHEDULER\";\n \n     private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner()\n             .withConfiguration(\n@@ -96,6 +101,26 @@ static class AsyncConfig {\n \n     @TestConfiguration\n     @EnableAsync\n+    @EnableScheduling\n+    @Import({ TaskExecutionAutoConfiguration.class,\n+            TaskSchedulingAutoConfiguration.class })\n+    static class AsyncAndSchedulingConfig {\n+    }\n+\n+    @TestConfiguration\n+    @EnableAsync\n+    @Import({ TaskExecutionAutoConfiguration.class })\n+    static class AsyncConfigWithCustomExecutorConfig {\n+\n+        @Bean\n+        TaskExecutor myTaskExecutor() {\n+            return new TestTaskExecutor(CUSTOM_EXECUTOR);\n+        }\n+    }\n+\n+    @TestConfiguration\n+    @EnableAsync\n+    @Import({ TaskExecutionAutoConfiguration.class })\n     static class AsyncConfigWithNamedExecutorConfig {\n         @Bean(\"VaadinTaskExecutor\")\n         TaskExecutor taskExecutor() {\n@@ -103,6 +128,16 @@ TaskExecutor taskExecutor() {\n         }\n     }\n \n+    @TestConfiguration\n+    @EnableAsync\n+    @Import({ TaskExecutionAutoConfiguration.class })\n+    static class AsyncConfigWithAnnotatedExecutorConfig {\n+        @Bean(\"VaadinTaskExecutor\")\n+        TaskExecutor taskExecutor() {\n+            return new TestTaskExecutor(CUSTOM_EXECUTOR);\n+        }\n+    }\n+\n     @TestConfiguration\n     static class MultipleExecutorsConfig {\n         @Bean\n@@ -116,6 +151,27 @@ TaskExecutor anotherCustomTaskExecutor() {\n         }\n     }\n \n+    @TestConfiguration\n+    static class CustomExecutorAndSchedulerConfig {\n+        @Bean\n+        TaskExecutor myCustomTaskExecutor() {\n+            return new TestTaskExecutor(CUSTOM_EXECUTOR);\n+        }\n+\n+        @Bean\n+        TaskScheduler myCustomTaskScheduler() {\n+            return new TestTaskScheduler(CUSTOM_SCHEDULER);\n+        }\n+    }\n+\n+    @TestConfiguration\n+    static class CustomSchedulerConfig {\n+        @Bean\n+        TaskScheduler myCustomTaskScheduler() {\n+            return new TestTaskScheduler(CUSTOM_SCHEDULER);\n+        }\n+    }\n+\n     @TestConfiguration\n     static class MultipleNamedExecutorsConfig {\n \n@@ -177,6 +233,63 @@ public void getExecutor_springAsyncEnabled_returnsSpringDefaultExecutor() {\n         });\n     }\n \n+    @Test\n+    public void getExecutor_multipleSpringExecutors_returnsSpringDefaultApplicationTaskExecutor() {\n+        contextRunner.withUserConfiguration(AsyncAndSchedulingConfig.class)\n+                .run(context -> {\n+                    VaadinService service = SpringInstantiatorTest\n+                            .getService(context, new Properties());\n+                    assertInstanceOf(TaskExecutor.class, service.getExecutor(),\n+                            \"Expected a Spring TaskExecutor\");\n+                    assertFalse(service.getExecutor() instanceof TaskScheduler,\n+                            \"Expected a Spring TaskExecutor, but got a TaskScheduler\");\n+                });\n+    }\n+\n+    @Test\n+    public void getExecutor_springDefaultAndCustomNamedExecutorBean_returnsCustomTaskExecutor() {\n+        contextRunner\n+                .withUserConfiguration(AsyncConfigWithNamedExecutorConfig.class)\n+                .run(context -> {\n+                    VaadinService service = SpringInstantiatorTest\n+                            .getService(context, new Properties());\n+                    TestTaskExecutor executor = assertInstanceOf(\n+                            TestTaskExecutor.class, service.getExecutor(),\n+                            \"Expected VaadinService.getExecutor() to return an instance of custom TaskExecutor\");\n+                    assertEquals(CUSTOM_NAMED_EXECUTOR, executor.name);\n+                });\n+    }\n+\n+    @Test\n+    public void getExecutor_springDefaultAndCustomAnnotatedExecutorBean_returnsCustomTaskExecutor() {\n+        contextRunner\n+                .withUserConfiguration(\n+                        AsyncConfigWithAnnotatedExecutorConfig.class)\n+                .run(context -> {\n+                    VaadinService service = SpringInstantiatorTest\n+                            .getService(context, new Properties());\n+                    TestTaskExecutor executor = assertInstanceOf(\n+                            TestTaskExecutor.class, service.getExecutor(),\n+                            \"Expected VaadinService.getExecutor() to return an instance of custom TaskExecutor\");\n+                    assertEquals(CUSTOM_EXECUTOR, executor.name);\n+                });\n+    }\n+\n+    @Test\n+    public void getExecutor_springDefaultAndCustomExecutorBean_returnsCustomTaskExecutor() {\n+        contextRunner\n+                .withUserConfiguration(\n+                        AsyncConfigWithCustomExecutorConfig.class)\n+                .run(context -> {\n+                    VaadinService service = SpringInstantiatorTest\n+                            .getService(context, new Properties());\n+                    TestTaskExecutor executor = assertInstanceOf(\n+                            TestTaskExecutor.class, service.getExecutor(),\n+                            \"Expected VaadinService.getExecutor() to return an instance of custom TaskExecutor\");\n+                    assertEquals(CUSTOM_EXECUTOR, executor.name);\n+                });\n+    }\n+\n     @Test\n     public void getExecutor_customExecutorBean_returnsCustomTaskExecutor() {\n         contextRunner.withUserConfiguration(CustomExecutorBeanConfig.class)\n@@ -190,6 +303,33 @@ public void getExecutor_customExecutorBean_returnsCustomTaskExecutor() {\n                 });\n     }\n \n+    @Test\n+    public void getExecutor_customSchedulerBean_returnsCustomTaskScheduler() {\n+        contextRunner.withUserConfiguration(CustomSchedulerConfig.class)\n+                .run(context -> {\n+                    VaadinService service = SpringInstantiatorTest\n+                            .getService(context, new Properties());\n+                    TestTaskScheduler executor = assertInstanceOf(\n+                            TestTaskScheduler.class, service.getExecutor(),\n+                            \"Expected VaadinService.getExecutor() to return an instance of custom TaskExecutor\");\n+                    assertEquals(CUSTOM_SCHEDULER, executor.name);\n+                });\n+    }\n+\n+    @Test\n+    public void getExecutor_customExecutorAndSchedulerBeans_returnsCustomTaskExecutor() {\n+        contextRunner\n+                .withUserConfiguration(CustomExecutorAndSchedulerConfig.class)\n+                .run(context -> {\n+                    VaadinService service = SpringInstantiatorTest\n+                            .getService(context, new Properties());\n+                    TestTaskExecutor executor = assertInstanceOf(\n+                            TestTaskExecutor.class, service.getExecutor(),\n+                            \"Expected VaadinService.getExecutor() to return an instance of custom TaskExecutor\");\n+                    assertEquals(CUSTOM_EXECUTOR, executor.name);\n+                });\n+    }\n+\n     @Test\n     public void getExecutor_customExecutorNamedBean_returnsCustomTaskExecutorNamedInstance() {\n         contextRunner.withUserConfiguration(CustomExecutorBeanConfig.class,\n@@ -313,4 +453,17 @@ public void execute(Runnable task) {\n             task.run();\n         }\n     }\n+\n+    /**\n+     * Simple TaskScheduler implementation for testing.\n+     */\n+    static class TestTaskScheduler extends SimpleAsyncTaskScheduler {\n+\n+        final String name;\n+\n+        public TestTaskScheduler(String name) {\n+            this.name = name;\n+        }\n+\n+    }\n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21522",
    "pr_id": 21522,
    "issue_id": 21509,
    "repo": "vaadin/flow",
    "problem_statement": "Build Parameter projectFileExtensions is evaluated differently\n### Description of the bug\n\nI noticed and sadly couldn't reliable reproduce in simple projects that our `vite.generated.ts` file is constantly updated because of the \"newly\" released property `projectFileExtensions`. (We don't use the property)\n\nIf we run `mvn clean install` the `.` gets removed from the generated file resulting in a git diff because we have commited this file to keep track on any changes. \n\nIf we run / execute our application the `.` gets added again. (Start is done via spring-boot:run)\n\n![Image](https://github.com/user-attachments/assets/484bb618-6a30-403e-839c-d2ebf72e6e55)\n\n### Expected behavior\n\nThe property `projectFileExtensions` should only be added if it is != null AND is not empty. Empty default list should not result in a difference in the vite.generated.ts file.\n\n\n\n### Minimal reproducible example\n\n.\n\n### Versions\n\n- Vaadin / Flow version: 24.6?++",
    "issue_word_count": 143,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "vaadin-dev-server/src/main/java/com/vaadin/base/devserver/startup/DevModeInitializer.java",
      "vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerTest.java"
    ],
    "pr_changed_test_files": [
      "vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerTest.java"
    ],
    "base_commit": "31b9edb2eefc2e8cb850c0f94abf753a51af7131",
    "head_commit": "c0b19eac3fd2f0d07b80a4c2e074ad03ce4303f0",
    "repo_url": "https://github.com/vaadin/flow/pull/21522",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21522",
    "dockerfile": "",
    "pr_merged_at": "2025-05-26T11:35:34.000Z",
    "patch": "diff --git a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/startup/DevModeInitializer.java b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/startup/DevModeInitializer.java\nindex 9cedf0cdc71..ecd1b2bee94 100644\n--- a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/startup/DevModeInitializer.java\n+++ b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/startup/DevModeInitializer.java\n@@ -370,12 +370,12 @@ public static DevModeHandler initDevModeHandler(Set<Class<?>> classes,\n         }\n     }\n \n-    private static List<String> getFrontendExtraFileExtensions(\n+    static List<String> getFrontendExtraFileExtensions(\n             ApplicationConfiguration config) {\n-        List<String> stringProperty = Arrays.asList(config\n+        List<String> stringProperty = Arrays.stream(config\n                 .getStringProperty(InitParameters.FRONTEND_EXTRA_EXTENSIONS, \"\")\n-                .split(\",\"));\n-        return stringProperty;\n+                .split(\",\")).filter(input -> !input.isBlank()).toList();\n+        return stringProperty.isEmpty() ? null : stringProperty;\n     }\n \n     private static Logger log() {\n",
    "test_patch": "diff --git a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerTest.java b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerTest.java\nindex b142e5d8a77..ce4812738ea 100644\n--- a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerTest.java\n+++ b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerTest.java\n@@ -539,6 +539,27 @@ public void onStartup_fallbackBaseDirIsGradleProjectDirectory_isAccepted()\n         }\n     }\n \n+    @Test\n+    public void getFrontendExtraExtensions_noExtensionsSet_returnsNull() {\n+        Mockito.when(appConfig.getStringProperty(\n+                InitParameters.FRONTEND_EXTRA_EXTENSIONS, \"\")).thenReturn(\"\");\n+\n+        List<String> frontendExtraFileExtensions = DevModeInitializer\n+                .getFrontendExtraFileExtensions(appConfig);\n+        Assert.assertNull(frontendExtraFileExtensions);\n+    }\n+\n+    @Test\n+    public void getFrontendExtraExtensions_extensionsSet_returnsExtensionsList() {\n+        Mockito.when(appConfig.getStringProperty(\n+                InitParameters.FRONTEND_EXTRA_EXTENSIONS, \"\"))\n+                .thenReturn(\".svg,.ico,png\");\n+\n+        List<String> frontendExtraFileExtensions = DevModeInitializer\n+                .getFrontendExtraFileExtensions(appConfig);\n+        Assert.assertEquals(3, frontendExtraFileExtensions.size());\n+    }\n+\n     private void loadingJars_allFilesExist(String resourcesFolder)\n             throws IOException, VaadinInitializerException {\n         loadingJarsWithProtocol_allFilesExist(resourcesFolder,\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21512",
    "pr_id": 21512,
    "issue_id": 21487,
    "repo": "vaadin/flow",
    "problem_statement": "UI is not updated by transfer progress logic in Firefox\n### Description of the bug\n\nI want to update my UI while download is ongoing:\n```java\nDownloadHandler.fromInputStream(event -> new DownloadResponse(\n                        getSlowInputStream(), \"slow-download.bin\", \"application/octet-stream\", SLOW_CONTENT_SIZE))\n                .whenStart(() -> {\n                    Notification.show(\"Download started\", 3000, Notification.Position.BOTTOM_START);\n                    progressBar.setVisible(true);\n                })\n                .onProgress((transferred, total) -> progressBar.setValue((double) transferred / SLOW_CONTENT_SIZE))\n                .whenComplete(success -> {\n                    progressBar.setVisible(false);\n                    if (success) {\n                        Notification.show(\"Download completed\", 3000, Notification.Position.BOTTOM_START).addThemeVariants(\n                                NotificationVariant.LUMO_SUCCESS);\n                    } else {\n                        Notification.show(\"Download failed\", 3000, Notification.Position.BOTTOM_START)\n                                .addThemeVariants(NotificationVariant.LUMO_ERROR);\n                    }\n                });\n```\n\nThis works as expected in Chrome and Safari, but not in Firefox.\nServer shows errors related to Push/Atmosphere/WebSockets:\n```\n2025-05-21T17:11:29.190+03:00 ERROR 12901 --- [phere-Shared-37] c.v.f.s.c.PushAtmosphereHandler          : Exception in push connection\n\njava.io.IOException: Connection remotely closed for 310fcb66-7cfc-4de3-afa2-2a2d8aab6c7c\n        at org.atmosphere.websocket.WebSocket.write(WebSocket.java:237) ~[atmosphere-runtime-3.0.5.slf4jvaadin1.jar:3.0.5.slf4jvaadin1]\n        at org.atmosphere.websocket.WebSocket.write(WebSocket.java:227) ~[atmosphere-runtime-3.0.5.slf4jvaadin1.jar:3.0.5.slf4jvaadin1]\n        at org.atmosphere.websocket.WebSocket.write(WebSocket.java:48) ~[atmosphere-runtime-3.0.5.slf4jvaadin1.jar:3.0.5.slf4jvaadin1]\n        at org.atmosphere.cpr.AtmosphereResponseImpl$Stream.write(AtmosphereResponseImpl.java:955) ~[atmosphere-runtime-3.0.5.slf4jvaadin1.jar:3.0.5.slf4jvaadin1]\n        at org.atmosphere.handler.AbstractReflectorAtmosphereHandler.onStateChange(AbstractReflectorAtmosphereHandler.java:154) ~[atmosphere-runtime-3.0.5.slf4jvaadin1.jar:3.0.5.slf4jvaadin1]\n        at com.vaadin.flow.server.communication.PushAtmosphereHandler.onStateChange(PushAtmosphereHandler.java:54) ~[flow-server-24.8.0.alpha13.jar:24.8.0.alpha13]\n        at org.atmosphere.cpr.DefaultBroadcaster.invokeOnStateChange(DefaultBroadcaster.java:1036) ~[atmosphere-runtime-3.0.5.slf4jvaadin1.jar:3.0.5.slf4jvaadin1]\n        at org.atmosphere.cpr.DefaultBroadcaster.prepareInvokeOnStateChange(DefaultBroadcaster.java:1056) ~[atmosphere-runtime-3.0.5.slf4jvaadin1.jar:3.0.5.slf4jvaadin1]\n        at org.atmosphere.cpr.DefaultBroadcaster.executeAsyncWrite(DefaultBroadcaster.java:870) ~[atmosphere-runtime-3.0.5.slf4jvaadin1.jar:3.0.5.slf4jvaadin1]\n        at org.atmosphere.cpr.DefaultBroadcaster$2.run(DefaultBroadcaster.java:477) ~[atmosphere-runtime-3.0.5.slf4jvaadin1.jar:3.0.5.slf4jvaadin1]\n        at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572) ~[na:na]\n        at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317) ~[na:na]\n        at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144) ~[na:na]\n        at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642) ~[na:na]\n        at java.base/java.lang.Thread.run(Thread.java:1575) ~[na:na]\n```\nAlso I can see in the Firefox dev console that the WS connection is closed just after I click on a download link. As WS is closed unexpectedly, Push apparently doesn't work, the progress bar isn't shown and I get notifications only when the download is completed.\n\nThis is not directly related to download/upload but likely to Firefox and WebSockets.\n\n### Expected behavior\n\nGot UI updates during download.\n\n### Minimal reproducible example\n\nCan be reproduced with this [example](https://github.com/mshabarov/downloads-and-uploads/blob/0a99804ffe0f6dd18bc84a5f642b10217de52815/src/main/java/com/vaadin/example/taskmanagement/ui/view/DownloadsListenersView.java#L66).\n\nDownload, start the project and trigger a download on \"Download Listeners\" view in Firefox.\n\n### Versions\n\nFirefox 138.0.4 (64-bit)\nVaadin 24.8.0.alpha7\n",
    "issue_word_count": 539,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "flow-html-components/src/main/java/com/vaadin/flow/component/html/Anchor.java",
      "flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java"
    ],
    "pr_changed_test_files": [
      "flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java"
    ],
    "base_commit": "54f513952cee7adbf8bb2699b5b65689af29c64f",
    "head_commit": "7d6739111d2cc9acc6dcade122fc408f5cbd2095",
    "repo_url": "https://github.com/vaadin/flow/pull/21512",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21512",
    "dockerfile": "",
    "pr_merged_at": "2025-05-26T06:10:56.000Z",
    "patch": "diff --git a/flow-html-components/src/main/java/com/vaadin/flow/component/html/Anchor.java b/flow-html-components/src/main/java/com/vaadin/flow/component/html/Anchor.java\nindex 7582176a86a..96dbadb8ea0 100644\n--- a/flow-html-components/src/main/java/com/vaadin/flow/component/html/Anchor.java\n+++ b/flow-html-components/src/main/java/com/vaadin/flow/component/html/Anchor.java\n@@ -27,6 +27,7 @@\n import com.vaadin.flow.component.PropertyDescriptors;\n import com.vaadin.flow.component.Tag;\n import com.vaadin.flow.server.AbstractStreamResource;\n+import com.vaadin.flow.server.streams.AbstractDownloadHandler;\n import com.vaadin.flow.server.streams.DownloadHandler;\n import com.vaadin.flow.server.StreamResource;\n import com.vaadin.flow.server.StreamResourceRegistry;\n@@ -118,6 +119,9 @@ public Anchor(AbstractStreamResource href, String text) {\n      * Creates an anchor component with the given text content and a callback\n      * that handles data download from the server to the client when clicking an\n      * anchor.\n+     * <p>\n+     * Sets the 'download' attribute for link when given a non-inline handler\n+     * implementing AbstractDownloadHandler.\n      *\n      * @see #setHref(DownloadHandler)\n      * @see #setText(String)\n@@ -202,6 +206,9 @@ public void setHref(AbstractStreamResource href) {\n      * Sets the URL that this anchor links to and that is bound to a given\n      * {@link DownloadHandler} callback on the server for handling data download\n      * from the server to the client when clicking an anchor.\n+     * <p>\n+     * Sets the 'download' attribute for link when given a non-inline handler\n+     * implementing AbstractDownloadHandler.\n      *\n      * @param downloadHandler\n      *            the callback that handles data download, not null\n@@ -211,6 +218,10 @@ public void setHref(DownloadHandler downloadHandler) {\n                 downloadHandler, this.getElement());\n         setRouterIgnore(true);\n         assignHrefAttribute();\n+        if (downloadHandler instanceof AbstractDownloadHandler<?> abstractDownloadHandler\n+                && !abstractDownloadHandler.isInline()) {\n+            getElement().setAttribute(\"download\", true);\n+        }\n     }\n \n     /**\n",
    "test_patch": "diff --git a/flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java b/flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java\nindex 81f3173f0e2..3ca802c10fe 100644\n--- a/flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java\n+++ b/flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java\n@@ -310,6 +310,30 @@ public String getName() {\n         Assert.assertNotEquals(href, anchor.getHref());\n     }\n \n+    @Test\n+    public void anchorWithDownloadHandler_downloadAttributeIsSet() {\n+        mockUI();\n+        DownloadHandler downloadHandler = DownloadHandler\n+                .forServletResource(\"null/path\");\n+        Anchor anchor = new Anchor(downloadHandler, \"bar\");\n+\n+        Assert.assertTrue(\n+                \"Pre-built download handlers should set download attribute\",\n+                anchor.getElement().hasAttribute(\"download\"));\n+    }\n+\n+    @Test\n+    public void anchorWithDownloadHandler_inlineSet_downloadAttributeIsNotSet() {\n+        mockUI();\n+        DownloadHandler downloadHandler = DownloadHandler\n+                .forServletResource(\"null/path\").inline();\n+        Anchor anchor = new Anchor(downloadHandler, \"bar\");\n+\n+        Assert.assertFalse(\n+                \"Inline download handlers should not add download attribute\",\n+                anchor.getElement().hasAttribute(\"download\"));\n+    }\n+\n     private void mockUI() {\n         ui = new UI();\n         UI.setCurrent(ui);\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21440",
    "pr_id": 21440,
    "issue_id": 67,
    "repo": "vaadin/flow",
    "problem_statement": "<br> is duplicated in prerendered HTML\nThis happens because Element.toString for a `<br>` becomes `<br></br>` which Jsoup parses and outputs as two consecutive `<br>` tags.\n",
    "issue_word_count": 27,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java",
      "flow-server/src/test/java/com/vaadin/flow/component/internal/JavaScriptBootstrapUITest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/component/internal/JavaScriptBootstrapUITest.java"
    ],
    "base_commit": "e99b2cb2125e8460b533e66a6d40b2b1d6baf275",
    "head_commit": "cec48a98e979d9e342b8a2e6a3dfb134f8879542",
    "repo_url": "https://github.com/vaadin/flow/pull/21440",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21440",
    "dockerfile": "",
    "pr_merged_at": "2025-05-19T11:35:36.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java b/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java\nindex 7c03e8d8470..0f21a772133 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java\n@@ -1097,9 +1097,11 @@ private static void checkForDuplicates(\n \n     private static void updatePageTitle(NavigationEvent navigationEvent,\n             Component routeTarget, String route) {\n-\n+        Instantiator instantiator = navigationEvent.getUI().getSession()\n+                .getService().getInstantiator();\n         Supplier<String> lookForTitleInTarget = () -> lookForTitleInTarget(\n-                routeTarget).map(PageTitle::value).orElse(\"\");\n+                instantiator.getApplicationClass(routeTarget))\n+                .map(PageTitle::value).orElse(\"\");\n \n         // check for HasDynamicTitle in current router targets chain\n         String title = RouteUtil.getDynamicTitle(navigationEvent.getUI())\n@@ -1113,9 +1115,8 @@ private static void updatePageTitle(NavigationEvent navigationEvent,\n     }\n \n     private static Optional<PageTitle> lookForTitleInTarget(\n-            Component routeTarget) {\n-        return Optional.ofNullable(\n-                routeTarget.getClass().getAnnotation(PageTitle.class));\n+            Class<?> routeTarget) {\n+        return Optional.ofNullable(routeTarget.getAnnotation(PageTitle.class));\n     }\n \n     private static boolean isPreserveOnRefreshTarget(\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/component/internal/JavaScriptBootstrapUITest.java b/flow-server/src/test/java/com/vaadin/flow/component/internal/JavaScriptBootstrapUITest.java\nindex c7c2b780224..12d08f657ed 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/component/internal/JavaScriptBootstrapUITest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/component/internal/JavaScriptBootstrapUITest.java\n@@ -5,6 +5,10 @@\n import java.util.Optional;\n import java.util.UUID;\n \n+import net.bytebuddy.ByteBuddy;\n+import net.bytebuddy.description.modifier.SyntheticState;\n+import net.bytebuddy.description.modifier.Visibility;\n+import net.bytebuddy.dynamic.loading.ClassLoadingStrategy;\n import org.junit.After;\n import org.junit.Assert;\n import org.junit.Before;\n@@ -39,6 +43,7 @@\n import com.vaadin.flow.router.Route;\n import com.vaadin.flow.router.Router;\n import com.vaadin.flow.router.RouterLink;\n+import com.vaadin.flow.router.internal.NavigationStateRendererTest;\n import com.vaadin.flow.server.MockServletServiceSessionSetup;\n import com.vaadin.flow.server.VaadinService;\n import com.vaadin.flow.server.VaadinSession;\n@@ -176,6 +181,16 @@ public void setup() throws Exception {\n                 Dirty.class, Collections.emptyList());\n         mocks.getService().getRouter().getRegistry().setRoute(\"product\",\n                 ProductView.class, Collections.emptyList());\n+\n+        Class<? extends ProductView> routeProxyClass = new ByteBuddy()\n+                .subclass(ProductView.class)\n+                .modifiers(Visibility.PUBLIC, SyntheticState.SYNTHETIC).make()\n+                .load(ProductView.class.getClassLoader(),\n+                        ClassLoadingStrategy.Default.WRAPPER)\n+                .getLoaded();\n+        mocks.getService().getRouter().getRegistry().setRoute(\"proxy-product\",\n+                routeProxyClass, Collections.emptyList());\n+\n         mocks.getService().getRouter().getRegistry().setRoute(\"exception\",\n                 FailOnException.class, Collections.emptyList());\n         mocks.getService().getRouter().getRegistry().setRoute(\n@@ -525,6 +540,14 @@ public void should_updatePageTitle_when_serverNavigation() {\n         assertEquals(\"my-product\", ui.getInternals().getTitle());\n     }\n \n+    @Test\n+    public void should_updatePageTitle_when_serverNavigationToProxyViewClass() {\n+        ui.navigate(\"empty\");\n+        assertNull(ui.getInternals().getTitle());\n+        ui.navigate(\"proxy-product\");\n+        assertEquals(\"my-product\", ui.getInternals().getTitle());\n+    }\n+\n     @Test\n     public void should_removeTitle_when_noAppShellTitle() {\n         ui.navigate(\"empty\");\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21424",
    "pr_id": 21424,
    "issue_id": 21366,
    "repo": "vaadin/flow",
    "problem_statement": "Make an Executor available through VaadinService\n### Describe your motivation\n\nOccasionally, there's a need to dispatch some task asynchronously. The specific case on my mind is for the new signals library where we want to invoke effect callbacks asynchronously so that the user posting a message to a chat room don't have to wait until all subscribers have been notified since that might take a while if there are e.g. 1000 of them.\n\n### Describe the solution you'd like\n\nAdd `public Executor getExecutor()` to `VaadinService`.\n\nThe application developer can implement a service init listener that sets a custom executor through the init event (so there should not be any setter in `VaadinService` to allow setting an executor after initialization). In that case, the developer is responsible for shutting down the executor.\n\nIf no executor is provided by the application developer, then a default is chosen based on what's available in the environment:\n* When running in a Spring environment and a `TaskExecutor` bean is available, then it is used.\n* When running in a CDI environment and a `ManagedExecutorService` bean is available, then it is used.\n* If no appropriate bean is available, then Vaadin creates a single thread executor with a thread factory that sets an appropriate thread name. The executor is configured to be shut down when the Vaadin service is destroyed. If this executor is used, then a warning should be logged the first time the executor is used. The purpose of the warning is to inform the developer that the application uses a default implementation that might not be tuned for production use.\n\n### Describe alternatives you've considered\n\nWe could consider further simplifying configuration for Spring and CDI environments by defining a custom bean name, e.g. `vaadinExecutor` that will be checked for and used in case the application defines a bean with that name.",
    "issue_word_count": 309,
    "test_files_count": 5,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/server/ServiceInitEvent.java",
      "flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java",
      "flow-server/src/test/java/com/vaadin/flow/server/MockVaadinServletService.java",
      "flow-server/src/test/java/com/vaadin/flow/server/VaadinServiceTest.java",
      "flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java",
      "vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringVaadinServletService.java",
      "vaadin-spring/src/main/java/com/vaadin/flow/spring/annotation/VaadinTaskExecutor.java",
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/service/SpringVaadinServiceExecutorTest.java",
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/service/TestServletConfiguration.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/server/MockVaadinServletService.java",
      "flow-server/src/test/java/com/vaadin/flow/server/VaadinServiceTest.java",
      "flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java",
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/service/SpringVaadinServiceExecutorTest.java",
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/service/TestServletConfiguration.java"
    ],
    "base_commit": "ef98ac9f700ba5a23ae3b542748a563b9c1e245a",
    "head_commit": "6616a62805a35487bd528a25c91b359f0ec9eef8",
    "repo_url": "https://github.com/vaadin/flow/pull/21424",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21424",
    "dockerfile": "",
    "pr_merged_at": "2025-05-16T10:28:37.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/ServiceInitEvent.java b/flow-server/src/main/java/com/vaadin/flow/server/ServiceInitEvent.java\nindex bac989ce79f..e0c4d5e5bae 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/ServiceInitEvent.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/ServiceInitEvent.java\n@@ -15,14 +15,16 @@\n  */\n package com.vaadin.flow.server;\n \n-import com.vaadin.flow.server.communication.IndexHtmlRequestListener;\n-\n import java.util.ArrayList;\n import java.util.EventObject;\n import java.util.List;\n import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.Executor;\n import java.util.stream.Stream;\n \n+import com.vaadin.flow.server.communication.IndexHtmlRequestListener;\n+\n /**\n  * Event fired to {@link VaadinServiceInitListener} when a {@link VaadinService}\n  * is being initialized.\n@@ -39,6 +41,7 @@ public class ServiceInitEvent extends EventObject {\n     private List<IndexHtmlRequestListener> addedIndexHtmlRequestListeners = new ArrayList<>();\n     private List<DependencyFilter> addedDependencyFilters = new ArrayList<>();\n     private List<VaadinRequestInterceptor> addedVaadinRequestInterceptors = new ArrayList<>();\n+    private Executor executor;\n \n     /**\n      * Creates a new service init event for a given {@link VaadinService} and\n@@ -107,6 +110,27 @@ public void addVaadinRequestInterceptor(\n         addedVaadinRequestInterceptors.add(vaadinRequestInterceptor);\n     }\n \n+    /**\n+     * Sets the {@link Executor} to be used by Vaadin for running asynchronous\n+     * tasks.\n+     * <p>\n+     * The application can also benefit from this executor to submit its own\n+     * asynchronous tasks.\n+     * <p>\n+     * The developer is responsible for managing the executor's lifecycle, for\n+     * example, by registering a {@link VaadinService} destroy listener to shut\n+     * it down.\n+     * <p>\n+     * A {@literal null} value can be given to switch back to the Vaadin default\n+     * executor.\n+     *\n+     * @param executor\n+     *            the executor to set.\n+     */\n+    public void setExecutor(Executor executor) {\n+        this.executor = executor;\n+    }\n+\n     /**\n      * Gets a stream of all custom request handlers that have been added for the\n      * service.\n@@ -147,6 +171,17 @@ public Stream<VaadinRequestInterceptor> getAddedVaadinRequestInterceptor() {\n         return addedVaadinRequestInterceptors.stream();\n     }\n \n+    /**\n+     * Gets the optional {@link Executor} that is currently set to be used by\n+     * Vaadin for running asynchronous tasks.\n+     *\n+     * @return an {@link Optional} containing the {@link Executor}, or an empty\n+     *         {@link Optional} if no executor is set.\n+     */\n+    public Optional<Executor> getExecutor() {\n+        return Optional.ofNullable(executor);\n+    }\n+\n     @Override\n     public VaadinService getSource() {\n         return (VaadinService) super.getSource();\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java b/flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java\nindex ef5afdf8be0..9a8f9849f7a 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java\n@@ -41,8 +41,14 @@\n import java.util.concurrent.CancellationException;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Future;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.ThreadPoolExecutor;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.locks.Lock;\n import java.util.concurrent.locks.ReentrantLock;\n import java.util.stream.Collectors;\n@@ -184,6 +190,10 @@ public abstract class VaadinService implements Serializable {\n \n     private Instantiator instantiator;\n \n+    private Executor executor;\n+\n+    private boolean defaultExecutorInUse;\n+\n     private VaadinContext vaadinContext;\n \n     private Iterable<VaadinRequestInterceptor> vaadinRequestInterceptors;\n@@ -267,6 +277,9 @@ public void init() throws ServiceException {\n             instantiator.getServiceInitListeners()\n                     .forEach(listener -> listener.serviceInit(event));\n \n+            this.executor = event.getExecutor()\n+                    .orElseGet(this::createDefaultExecutor);\n+\n             event.getAddedRequestHandlers().forEach(handlers::add);\n \n             Collections.reverse(handlers);\n@@ -293,6 +306,18 @@ public void init() throws ServiceException {\n                     .collect(Collectors.toList());\n         });\n \n+        if (this.executor == null) {\n+            throw new ServiceException(\n+                    \"Unable to create the default Executor for \"\n+                            + getClass().getName()\n+                            + \". This is most likely a bug in a custom VaadinService implementation \"\n+                            + \"that overrides the createDefaultExecutor() method \"\n+                            + \"but returns a null Executor instance. \"\n+                            + \"As a workaround, you can register a \"\n+                            + VaadinServiceInitListener.class.getSimpleName()\n+                            + \" providing a custom Executor instance.\");\n+        }\n+\n         DeploymentConfiguration configuration = getDeploymentConfiguration();\n         if (!configuration.isProductionMode()) {\n             Logger logger = getLogger();\n@@ -503,6 +528,98 @@ public Instantiator getInstantiator() {\n         return instantiator;\n     }\n \n+    /**\n+     * Creates a default executor instance to use with this service.\n+     * <p>\n+     * This default implementation creates a thread pool executor with a custom\n+     * thread factory to generate daemon threads. It uses a core pool size of 8,\n+     * an unbounded maximum pool size, and a keep-alive time of 60 seconds for\n+     * idle threads. The thread pool grows dynamically as required, and idle\n+     * core threads are allowed to time out.\n+     * <p>\n+     * A custom {@link VaadinService} implementation can override this method to\n+     * provide its own ad-hoc executor tailored to specific environments like\n+     * CDI or Spring.\n+     * <p>\n+     * Implementors should never return {@literal null}; if an executor instance\n+     * cannot be provided, the method should call\n+     * {@code super.createDefaultExecutor()}.\n+     * <p>\n+     * The application can provide a more appropriate executor implementation\n+     * through a {@link VaadinServiceInitListener} and calling\n+     * {@link ServiceInitEvent#setExecutor(Executor)}.\n+     *\n+     * @return a default executor instance to use, never {@literal null}.\n+     * @see VaadinServiceInitListener\n+     * @see ServiceInitEvent#setExecutor(Executor)\n+     */\n+    protected Executor createDefaultExecutor() {\n+        this.defaultExecutorInUse = true;\n+        int corePoolSize = 8;\n+        int keepAliveTimeSec = 60;\n+\n+        class VaadinThreadFactory implements ThreadFactory {\n+            private final AtomicInteger threadNumber = new AtomicInteger(0);\n+\n+            @Override\n+            public Thread newThread(Runnable runnable) {\n+                int threadNumber = this.threadNumber.incrementAndGet();\n+                if (threadNumber == 1) {\n+                    getLogger().info(\n+                            \"The application is using Vaadin's default ThreadPoolExecutor \"\n+                                    + \"(pool size = {}, keep alive time = {} seconds). \"\n+                                    + \"A custom executor with an appropriate thread pool \"\n+                                    + \"can be provided registering a {}.\",\n+                            corePoolSize, keepAliveTimeSec,\n+                            VaadinServiceInitListener.class.getSimpleName());\n+                }\n+                Thread thread = new Thread(runnable,\n+                        \"VaadinTaskExecutor-thread-\" + threadNumber);\n+                // Thread marked as daemon to prevent task execution to block\n+                // JVM shutdown\n+                thread.setDaemon(true);\n+                thread.setPriority(Thread.NORM_PRIORITY);\n+                return thread;\n+            }\n+        }\n+        // Defaults taken from Spring Boot configuration\n+        // org.springframework.boot.autoconfigure.task.TaskExecutionProperties.Pool\n+        ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(\n+                corePoolSize, Integer.MAX_VALUE, keepAliveTimeSec,\n+                TimeUnit.SECONDS, new LinkedBlockingQueue<>(),\n+                new VaadinThreadFactory());\n+        // Enables dynamic growing and shrinking of the pool.\n+        threadPoolExecutor.allowCoreThreadTimeOut(true);\n+        return threadPoolExecutor;\n+    }\n+\n+    /**\n+     * Gets the executor instance used by Vaadin for managing concurrent tasks.\n+     * <p>\n+     * By default, a thread pool executor with a custom with core pool size of\n+     * 8, an unbounded maximum pool size, and a keep-alive time of 60 seconds\n+     * for idle threads is provided. The thread pool grows dynamically as\n+     * required, and idle core threads are allowed to time out.\n+     * <p>\n+     * {@link VaadinService} implementations for specific environments like CDI\n+     * or Spring might provide their own ad-hoc Executors tailored to those\n+     * environments.\n+     * <p>\n+     * A custom executor can be configured by registering a\n+     * {@link VaadinServiceInitListener} and providing the executor instance to\n+     * the {@link ServiceInitEvent}.\n+     * <p>\n+     * A Vaadin application can also benefit from this executor to submit\n+     * asynchronous tasks.\n+     *\n+     * @return the Executor instance, never {@literal null}.\n+     * @see VaadinServiceInitListener\n+     * @see ServiceInitEvent#setExecutor(Executor)\n+     */\n+    public Executor getExecutor() {\n+        return executor;\n+    }\n+\n     /**\n      * Gets the class loader to use for loading classes loaded by name, e.g.\n      * custom UI classes. This is by default the class loader that was used to\n@@ -2216,6 +2333,10 @@ public Registration addServiceDestroyListener(\n      */\n     public void destroy() {\n         ServiceDestroyEvent event = new ServiceDestroyEvent(this);\n+        if (defaultExecutorInUse && executor instanceof ExecutorService cast) {\n+            cast.shutdownNow();\n+            this.executor = null;\n+        }\n         RuntimeException exception = null;\n         for (ServiceDestroyListener listener : serviceDestroyListeners) {\n             try {\n\ndiff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringVaadinServletService.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringVaadinServletService.java\nindex f36a7434ec9..eae4c01712b 100644\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringVaadinServletService.java\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringVaadinServletService.java\n@@ -18,24 +18,29 @@\n import java.io.IOException;\n import java.net.URI;\n import java.net.URL;\n+import java.util.Arrays;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.Executor;\n import java.util.stream.Collectors;\n \n+import org.slf4j.LoggerFactory;\n import org.springframework.context.ApplicationContext;\n import org.springframework.core.io.Resource;\n+import org.springframework.core.task.TaskExecutor;\n \n import com.vaadin.flow.di.Instantiator;\n import com.vaadin.flow.function.DeploymentConfiguration;\n import com.vaadin.flow.server.ServiceException;\n-import com.vaadin.flow.server.SessionDestroyListener;\n import com.vaadin.flow.server.UIInitListener;\n import com.vaadin.flow.server.VaadinRequest;\n import com.vaadin.flow.server.VaadinServlet;\n import com.vaadin.flow.server.VaadinServletService;\n import com.vaadin.flow.server.VaadinSession;\n-import com.vaadin.flow.shared.Registration;\n+import com.vaadin.flow.spring.annotation.VaadinTaskExecutor;\n \n /**\n  * Spring application context aware Vaadin servlet service implementation.\n@@ -90,6 +95,59 @@ protected Optional<Instantiator> loadInstantiators()\n                 : springInstantiators.stream().findFirst();\n     }\n \n+    @Override\n+    protected Executor createDefaultExecutor() {\n+        Set<String> candidates = Arrays\n+                .stream(context.getBeanNamesForType(TaskExecutor.class))\n+                .collect(Collectors.toCollection(HashSet::new));\n+\n+        // No executor beans defined, fallback to Vaadin's default\n+        if (candidates.isEmpty()) {\n+            return super.createDefaultExecutor();\n+        }\n+\n+        // Check for @VaadinTaskExecutor annotated beans, filter for\n+        // TaskExecutors types, and warn if the annotated bean is of an\n+        // unexpected type.\n+        Set<String> annotatedBeans = new HashSet<>(Set.of(\n+                context.getBeanNamesForAnnotation(VaadinTaskExecutor.class)));\n+        Set<String> invalidAnnotatedTypes = annotatedBeans.stream()\n+                .filter(beanName -> !candidates.contains(beanName))\n+                .collect(Collectors.toSet());\n+        if (!invalidAnnotatedTypes.isEmpty()) {\n+            LoggerFactory.getLogger(SpringVaadinServletService.class.getName())\n+                    .warn(\"Found beans with @{} annotation but not of type {}: {}. \"\n+                            + \"Remove the annotation from the bean definition.\",\n+                            VaadinTaskExecutor.class.getSimpleName(),\n+                            TaskExecutor.class.getSimpleName(),\n+                            invalidAnnotatedTypes);\n+            annotatedBeans.removeAll(invalidAnnotatedTypes);\n+        }\n+\n+        // Retain only the Vaadin specific executors if they are defined\n+        if (candidates.contains(VaadinTaskExecutor.NAME)\n+                || !annotatedBeans.isEmpty()) {\n+            candidates.removeIf(name -> !annotatedBeans.contains(name)\n+                    && !name.equals(VaadinTaskExecutor.NAME));\n+        }\n+        if (candidates.size() == 1) {\n+            return context.getBean(candidates.iterator().next(),\n+                    TaskExecutor.class);\n+        }\n+\n+        String message = String.format(\"Multiple TaskExecutor beans found: %s. \"\n+                + \"Please resolve this conflict by either: \"\n+                + \"(1) Providing a single TaskExecutor bean, or \"\n+                + \"(2) Marking the bean to use with Vaadin by: \"\n+                + \"naming it '%s' (e.g. @Bean(\\\"%s\\\")), or \"\n+                + \"applying the @%s qualifier annotation to the bean definition. \"\n+                + \"Note: To prevent an Executor bean from replacing the default one \"\n+                + \"provided by Spring, consider setting '@Bean(defaultCandidate=false)' on its definition.\",\n+                candidates, VaadinTaskExecutor.NAME, VaadinTaskExecutor.NAME,\n+                VaadinTaskExecutor.class.getSimpleName());\n+        throw new IllegalStateException(message);\n+    }\n+\n     @Override\n     public void init() throws ServiceException {\n         super.init();\n\ndiff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/annotation/VaadinTaskExecutor.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/annotation/VaadinTaskExecutor.java\nnew file mode 100644\nindex 00000000000..0daf6cfb4c7\n--- /dev/null\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/annotation/VaadinTaskExecutor.java\n@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package com.vaadin.flow.spring.annotation;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.springframework.beans.factory.annotation.Qualifier;\n+\n+/**\n+ * Qualifier annotation for marking a\n+ * {@link org.springframework.core.task.TaskExecutor} bean as a Vaadin-specific\n+ * Executor.\n+ * <p>\n+ * The bean annotated with this qualifier will function as the primary\n+ * {@link org.springframework.core.task.TaskExecutor} for Vaadin-specific\n+ * asynchronous operations.\n+ * <p>\n+ * Alternatively, a {@link org.springframework.core.task.TaskExecutor} bean can\n+ * be declared with the name {@code VaadinTaskExecutor}.\n+ * <p>\n+ * Constraints:\n+ * <ul>\n+ * <li>There should be at most one\n+ * {@link org.springframework.core.task.TaskExecutor} bean annotated with\n+ * {@code @VaadinTaskExecutor}.</li>\n+ * <li>Both an annotated bean and a bean with the name\n+ * {@code VaadinTaskExecutor} cannot exist simultaneously.</li>\n+ * </ul>\n+ * <p>\n+ * To prevent a custom executor from replacing the default one, consider setting\n+ * {@code @Bean(defaultCandidate=false)} on your bean definition.\n+ */\n+@Target({ ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER,\n+        ElementType.TYPE, ElementType.ANNOTATION_TYPE })\n+@Retention(RetentionPolicy.RUNTIME)\n+@Documented\n+@Inherited\n+@Qualifier\n+public @interface VaadinTaskExecutor {\n+    /**\n+     * The name of the {@link org.springframework.core.task.TaskExecutor} bean\n+     * specifically used for Vaadin-related asynchronous tasks. This constant\n+     * can be used as a bean name to designate a single\n+     * {@link org.springframework.core.task.TaskExecutor} implementation as the\n+     * primary executor for handling Vaadin-specific task execution.\n+     */\n+    String NAME = \"VaadinTaskExecutor\";\n+}\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/MockVaadinServletService.java b/flow-server/src/test/java/com/vaadin/flow/server/MockVaadinServletService.java\nindex 9ba56cc5fa4..a32e26fd980 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/MockVaadinServletService.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/MockVaadinServletService.java\n@@ -15,11 +15,11 @@\n  */\n package com.vaadin.flow.server;\n \n-import jakarta.servlet.ServletException;\n-\n import java.util.Collections;\n import java.util.List;\n \n+import jakarta.servlet.ServletException;\n+\n import com.vaadin.flow.di.Instantiator;\n import com.vaadin.flow.function.DeploymentConfiguration;\n import com.vaadin.flow.router.Router;\n@@ -67,11 +67,22 @@ public MockVaadinServletService() {\n         this(new MockDeploymentConfiguration());\n     }\n \n+    public MockVaadinServletService(boolean init) {\n+        this(new MockDeploymentConfiguration(), init);\n+    }\n+\n     public MockVaadinServletService(\n             DeploymentConfiguration deploymentConfiguration) {\n+        this(deploymentConfiguration, true);\n+    }\n+\n+    public MockVaadinServletService(\n+            DeploymentConfiguration deploymentConfiguration, boolean init) {\n         super(new MockVaadinServlet(deploymentConfiguration),\n                 deploymentConfiguration);\n-        init();\n+        if (init) {\n+            init();\n+        }\n     }\n \n     public void setRouter(Router router) {\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/VaadinServiceTest.java b/flow-server/src/test/java/com/vaadin/flow/server/VaadinServiceTest.java\nindex 89aefe7b5df..8ed1568d966 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/VaadinServiceTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/VaadinServiceTest.java\n@@ -15,10 +15,6 @@\n  */\n package com.vaadin.flow.server;\n \n-import jakarta.servlet.ServletConfig;\n-import jakarta.servlet.ServletException;\n-import jakarta.servlet.http.HttpSessionBindingEvent;\n-\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -28,13 +24,22 @@\n import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.stream.Collectors;\n \n+import jakarta.servlet.ServletConfig;\n+import jakarta.servlet.ServletException;\n+import jakarta.servlet.http.HttpSessionBindingEvent;\n import net.jcip.annotations.NotThreadSafe;\n+import org.junit.After;\n import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Test;\n import org.mockito.MockedStatic;\n import org.mockito.Mockito;\n@@ -150,6 +155,12 @@ protected List<RequestHandler> createRequestHandlers()\n         }\n     }\n \n+    @Before\n+    @After\n+    public void clearCurrentInstances() {\n+        CurrentInstance.clearAll();\n+    }\n+\n     @Test\n     public void requestEnd_serviceFailure_threadLocalsCleared() {\n         MockVaadinServletService service = new MockVaadinServletService() {\n@@ -801,6 +812,123 @@ public void reinitializeSession_setVaadinSessionAttriuteWithLock() {\n         Mockito.verify(vaadinSession, Mockito.times(2)).unlock();\n     }\n \n+    @Test\n+    public void getExecutor_getsDefaultVaadinExecutor()\n+            throws InterruptedException {\n+        VaadinService service = createService();\n+        Executor executor = service.getExecutor();\n+        AtomicReference<String> threadName = new AtomicReference<>();\n+        Assert.assertNotNull(executor);\n+        CountDownLatch latch = new CountDownLatch(1);\n+        executor.execute(() -> {\n+            threadName.set(Thread.currentThread().getName());\n+            latch.countDown();\n+        });\n+        latch.await();\n+        Assert.assertNotNull(\"Task has not been not executed\",\n+                threadName.get());\n+        Assert.assertTrue(\"Task was not executed by Vaadin default executor\",\n+                threadName.get().startsWith(\"VaadinTaskExecutor-\"));\n+    }\n+\n+    @Test\n+    public void serviceDestroy_defaultExecutor_executorStopped() {\n+        VaadinService service = createService();\n+        Executor executor = service.getExecutor();\n+        Assert.assertTrue(\n+                \"Expected the default executor to be an ExecutorService instance\",\n+                executor instanceof ExecutorService);\n+        Assert.assertFalse(\"Expected executor service to be started\",\n+                ((ExecutorService) executor).isShutdown());\n+        service.destroy();\n+        Assert.assertTrue(\"Expected executor service to be stopped\",\n+                ((ExecutorService) executor).isShutdown());\n+    }\n+\n+    @Test\n+    public void getExecutor_customExecutorProvided_getsCustomExecutor()\n+            throws InterruptedException {\n+        AtomicBoolean taskSubmitted = new AtomicBoolean(false);\n+        Executor executor = command -> {\n+            taskSubmitted.set(true);\n+            command.run();\n+        };\n+        VaadinServiceInitListener initListener = event -> {\n+            event.setExecutor(executor);\n+        };\n+        CountDownLatch latch = new CountDownLatch(1);\n+        MockInstantiator instantiator = new MockInstantiator(initListener);\n+        MockVaadinServletService service = new MockVaadinServletService(false);\n+        service.init(instantiator);\n+        Assert.assertSame(\n+                \"Expected VaadinService to return the custom executor\",\n+                executor, service.getExecutor());\n+        service.getExecutor().execute(latch::countDown);\n+        latch.await();\n+        Assert.assertTrue(\n+                \"Task should have been submitted to the custom executor\",\n+                taskSubmitted.get());\n+    }\n+\n+    @Test\n+    public void serviceDestroy_customExecutorProvided_executorNotStopped() {\n+        ExecutorService executor = Executors.newSingleThreadExecutor();\n+        VaadinServiceInitListener initListener = event -> {\n+            event.setExecutor(executor);\n+        };\n+        MockInstantiator instantiator = new MockInstantiator(initListener);\n+        MockVaadinServletService service = new MockVaadinServletService(false);\n+        service.init(instantiator);\n+\n+        Assert.assertSame(\n+                \"Expected VaadinService to return the custom executor\",\n+                executor, service.getExecutor());\n+\n+        service.destroy();\n+        Assert.assertFalse(\"Expected custom executor not to be stopped\",\n+                executor.isShutdown());\n+\n+    }\n+\n+    @Test\n+    public void getExecutor_nullExecutorProvided_resetsToDefaultVaadinExecutor() {\n+        Executor executor = command -> {\n+        };\n+        VaadinServiceInitListener setExecutorInitListener = event -> {\n+            event.setExecutor(executor);\n+        };\n+        VaadinServiceInitListener resetExecutorInitListener = event -> {\n+            event.setExecutor(null);\n+        };\n+        MockInstantiator instantiator = new MockInstantiator(\n+                setExecutorInitListener, resetExecutorInitListener);\n+        MockVaadinServletService service = new MockVaadinServletService(false);\n+        service.init(instantiator);\n+        Assert.assertNotSame(\"Custom executor should not be used\", executor,\n+                service.getExecutor());\n+    }\n+\n+    @Test\n+    public void init_nullExecutor_throws() {\n+        RuntimeException error = assertThrows(RuntimeException.class, () -> {\n+            // init method is called by the mock service constructor\n+            new MockVaadinServletService() {\n+                @Override\n+                protected Executor createDefaultExecutor() {\n+                    return null;\n+                }\n+            };\n+        });\n+        if (error.getCause() instanceof ServiceException serviceException) {\n+            Assert.assertTrue(\n+                    \"Expected VaadinService initialization to fail with null executor\",\n+                    serviceException.getMessage()\n+                            .contains(\"Unable to create the default Executor\"));\n+        } else {\n+            Assert.fail(\"Expected ServiceException to be thrown\");\n+        }\n+    }\n+\n     private WrappedSession mockSession(VaadinRequest request,\n             VaadinSession vaadinSession, String attributeName) {\n         WrappedSession session = Mockito.mock(WrappedSession.class);\n\ndiff --git a/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java b/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java\nindex 0f1ea9b1baf..df9fdd11c6b 100644\n--- a/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java\n+++ b/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java\n@@ -217,6 +217,7 @@ protected Stream<String> getExcludedPatterns() {\n                 \"com\\\\.vaadin\\\\.flow\\\\.data\\\\.osgi\\\\..*\",\n                 \"com\\\\.vaadin\\\\.flow\\\\.push\\\\.osgi\\\\.PushOsgiStaticResource\",\n                 \"com\\\\.vaadin\\\\.flow\\\\.component\\\\.internal\\\\.HtmlImportParser\",\n+                \"com\\\\.vaadin\\\\.flow\\\\.server\\\\.VaadinService\\\\$.*VaadinThreadFactory\",\n                 \"com\\\\.vaadin\\\\.flow\\\\.server\\\\.webcomponent\\\\.WebComponentGenerator\",\n                 \"com\\\\.vaadin\\\\.flow\\\\.server\\\\.communication\\\\.WebComponentBootstrapHandler(\\\\$.*)?\",\n                 \"com\\\\.vaadin\\\\.flow\\\\.server\\\\.streams\\\\.TransferContext\",\n\ndiff --git a/vaadin-spring/src/test/java/com/vaadin/flow/spring/service/SpringVaadinServiceExecutorTest.java b/vaadin-spring/src/test/java/com/vaadin/flow/spring/service/SpringVaadinServiceExecutorTest.java\nnew file mode 100644\nindex 00000000000..5a6108f96d1\n--- /dev/null\n+++ b/vaadin-spring/src/test/java/com/vaadin/flow/spring/service/SpringVaadinServiceExecutorTest.java\n@@ -0,0 +1,316 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package com.vaadin.flow.spring.service;\n+\n+import java.util.Properties;\n+import java.util.concurrent.Executor;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.context.runner.WebApplicationContextRunner;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.core.task.TaskExecutor;\n+import org.springframework.scheduling.annotation.EnableAsync;\n+\n+import com.vaadin.flow.server.VaadinService;\n+import com.vaadin.flow.server.VaadinServiceInitListener;\n+import com.vaadin.flow.spring.SpringBootAutoConfiguration;\n+import com.vaadin.flow.spring.annotation.VaadinTaskExecutor;\n+import com.vaadin.flow.spring.instantiator.SpringInstantiatorTest;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertInstanceOf;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class SpringVaadinServiceExecutorTest {\n+\n+    static final String CUSTOM_EXECUTOR_VIA_INIT_LISTENER = \"CUSTOM_EXECUTOR_VIA_INIT_LISTENER\";\n+    static final String CUSTOM_NAMED_EXECUTOR = \"CUSTOM_NAMED_EXECUTOR\";\n+    static final String CUSTOM_EXECUTOR = \"CUSTOM_EXECUTOR\";\n+\n+    private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner()\n+            .withConfiguration(\n+                    AutoConfigurations.of(SpringBootAutoConfiguration.class));\n+\n+    @TestConfiguration\n+    static class CustomExecutorViaInitListenerConfig {\n+        @Bean\n+        VaadinServiceInitListener taskExecutorServiceInitListener() {\n+            return event -> event.setExecutor(\n+                    new TestTaskExecutor(CUSTOM_EXECUTOR_VIA_INIT_LISTENER));\n+        }\n+    }\n+\n+    @TestConfiguration\n+    static class CustomExecutorBeanConfig {\n+        @Bean\n+        TaskExecutor myCustomTaskExecutor() {\n+            return new TestTaskExecutor(CUSTOM_EXECUTOR);\n+        }\n+    }\n+\n+    @TestConfiguration\n+    static class CustomExecutorNamedBeanConfig {\n+        @Bean(\"VaadinTaskExecutor\")\n+        TaskExecutor taskExecutor() {\n+            return new TestTaskExecutor(CUSTOM_NAMED_EXECUTOR);\n+        }\n+    }\n+\n+    @TestConfiguration\n+    static class CustomExecutorAnnotatedBeanConfig {\n+\n+        @Bean\n+        @VaadinTaskExecutor\n+        TaskExecutor taskExecutor() {\n+            return new TestTaskExecutor(CUSTOM_NAMED_EXECUTOR);\n+        }\n+    }\n+\n+    @TestConfiguration\n+    @EnableAsync\n+    @Import(TaskExecutionAutoConfiguration.class)\n+    static class AsyncConfig {\n+    }\n+\n+    @TestConfiguration\n+    @EnableAsync\n+    static class AsyncConfigWithNamedExecutorConfig {\n+        @Bean(\"VaadinTaskExecutor\")\n+        TaskExecutor taskExecutor() {\n+            return new TestTaskExecutor(CUSTOM_NAMED_EXECUTOR);\n+        }\n+    }\n+\n+    @TestConfiguration\n+    static class MultipleExecutorsConfig {\n+        @Bean\n+        TaskExecutor myCustomTaskExecutor() {\n+            return new TestTaskExecutor(CUSTOM_EXECUTOR);\n+        }\n+\n+        @Bean\n+        TaskExecutor anotherCustomTaskExecutor() {\n+            return new TestTaskExecutor(CUSTOM_EXECUTOR);\n+        }\n+    }\n+\n+    @TestConfiguration\n+    static class MultipleNamedExecutorsConfig {\n+\n+        @VaadinTaskExecutor\n+        @Bean\n+        TaskExecutor taskExecutor2() {\n+            return new TestTaskExecutor(\"2\");\n+        }\n+\n+        @Bean(\"VaadinTaskExecutor1\")\n+        TaskExecutor taskExecutor1() {\n+            return new TestTaskExecutor(\"1\");\n+        }\n+\n+        @VaadinTaskExecutor\n+        @Bean\n+        TaskExecutor taskExecutor3() {\n+            return new TestTaskExecutor(\"3\");\n+        }\n+    }\n+\n+    @TestConfiguration\n+    static class InvalidTypeAnnodatedConfig {\n+\n+        @VaadinTaskExecutor\n+        @Bean\n+        Executor invalidTaskExecutor() {\n+            return command -> {\n+                throw new UnsupportedOperationException(\"BOOM!\");\n+            };\n+        }\n+\n+        @Bean\n+        TaskExecutor taskExecutor() {\n+            return new TestTaskExecutor(CUSTOM_EXECUTOR);\n+        }\n+    }\n+\n+    @Test\n+    public void getExecutor_noSpringExecutor_returnsDefaultExecutor() {\n+        contextRunner.run(context -> {\n+            VaadinService service = SpringInstantiatorTest.getService(context,\n+                    new Properties());\n+            Executor executor = service.getExecutor();\n+            assertNotNull(executor,\n+                    \"Should provide a default executor even if TaskExecutor bean is not defined\");\n+            assertFalse(executor instanceof TaskExecutor,\n+                    \"Should not return an instance of TaskExecutor\");\n+        });\n+    }\n+\n+    @Test\n+    public void getExecutor_springAsyncEnabled_returnsSpringDefaultExecutor() {\n+        contextRunner.withUserConfiguration(AsyncConfig.class).run(context -> {\n+            VaadinService service = SpringInstantiatorTest.getService(context,\n+                    new Properties());\n+            assertInstanceOf(TaskExecutor.class, service.getExecutor(),\n+                    \"Expected a Spring TaskExecutor\");\n+        });\n+    }\n+\n+    @Test\n+    public void getExecutor_customExecutorBean_returnsCustomTaskExecutor() {\n+        contextRunner.withUserConfiguration(CustomExecutorBeanConfig.class)\n+                .run(context -> {\n+                    VaadinService service = SpringInstantiatorTest\n+                            .getService(context, new Properties());\n+                    TestTaskExecutor executor = assertInstanceOf(\n+                            TestTaskExecutor.class, service.getExecutor(),\n+                            \"Expected VaadinService.getExecutor() to return an instance of custom TaskExecutor\");\n+                    assertEquals(CUSTOM_EXECUTOR, executor.name);\n+                });\n+    }\n+\n+    @Test\n+    public void getExecutor_customExecutorNamedBean_returnsCustomTaskExecutorNamedInstance() {\n+        contextRunner.withUserConfiguration(CustomExecutorBeanConfig.class,\n+                CustomExecutorNamedBeanConfig.class).run(context -> {\n+                    VaadinService service = SpringInstantiatorTest\n+                            .getService(context, new Properties());\n+                    TestTaskExecutor executor = assertInstanceOf(\n+                            TestTaskExecutor.class, service.getExecutor(),\n+                            \"VaadinService.getExecutor() should return an instance of custom TaskExecutor\");\n+                    assertEquals(CUSTOM_NAMED_EXECUTOR, executor.name,\n+                            \"Expected the named bean executor to be used\");\n+                });\n+    }\n+\n+    @Test\n+    public void getExecutor_customExecutorAnnotatedBean_returnsCustomTaskExecutorNamedInstance() {\n+        contextRunner\n+                .withUserConfiguration(CustomExecutorBeanConfig.class,\n+                        CustomExecutorAnnotatedBeanConfig.class)\n+                .run(context -> {\n+                    VaadinService service = SpringInstantiatorTest\n+                            .getService(context, new Properties());\n+                    TestTaskExecutor executor = assertInstanceOf(\n+                            TestTaskExecutor.class, service.getExecutor(),\n+                            \"VaadinService.getExecutor() should return an instance of custom TaskExecutor\");\n+                    assertEquals(CUSTOM_NAMED_EXECUTOR, executor.name,\n+                            \"Expected the named bean executor to be used\");\n+                });\n+    }\n+\n+    @Test\n+    public void getExecutor_asyncEnabledAndCustomExecutorNamedBean_returnsCustomTaskExecutorNamedInstance() {\n+        contextRunner.withUserConfiguration(AsyncConfig.class,\n+                CustomExecutorNamedBeanConfig.class).run(context -> {\n+                    VaadinService service = SpringInstantiatorTest\n+                            .getService(context, new Properties());\n+                    TestTaskExecutor executor = assertInstanceOf(\n+                            TestTaskExecutor.class, service.getExecutor(),\n+                            \"VaadinService.getExecutor() should return an instance of custom TaskExecutor\");\n+                    assertEquals(CUSTOM_NAMED_EXECUTOR, executor.name,\n+                            \"Expected the named bean executor to be used\");\n+                });\n+    }\n+\n+    @Test\n+    public void getExecutor_customExecutorViaInitListener_returnsCustomTaskExecutor() {\n+        contextRunner\n+                .withUserConfiguration(\n+                        CustomExecutorViaInitListenerConfig.class)\n+                .run(context -> {\n+                    VaadinService service = SpringInstantiatorTest\n+                            .getService(context, new Properties());\n+                    TestTaskExecutor executor = assertInstanceOf(\n+                            TestTaskExecutor.class, service.getExecutor(),\n+                            \"Expected VaadinService.getExecutor() to return an instance of custom TaskExecutor\");\n+                    assertEquals(CUSTOM_EXECUTOR_VIA_INIT_LISTENER,\n+                            executor.name);\n+                });\n+    }\n+\n+    @Test\n+    public void init_multipleUnnamedTaskExecutors_throws() {\n+        contextRunner.withUserConfiguration(MultipleExecutorsConfig.class)\n+                .run(context -> {\n+                    IllegalStateException error = assertThrows(\n+                            IllegalStateException.class,\n+                            () -> SpringInstantiatorTest.getService(context,\n+                                    new Properties()));\n+                    assertTrue(error.getMessage()\n+                            .contains(\"Multiple TaskExecutor beans found\"));\n+                    assertTrue(error.getMessage()\n+                            .contains(\"@Bean(\\\"VaadinTaskExecutor\\\")\"));\n+                    assertTrue(\n+                            error.getMessage().contains(\"@VaadinTaskExecutor\"));\n+                });\n+    }\n+\n+    @Test\n+    public void init_multipleNamedTaskExecutors_throws() {\n+        contextRunner.withUserConfiguration(MultipleNamedExecutorsConfig.class)\n+                .run(context -> {\n+                    IllegalStateException error = assertThrows(\n+                            IllegalStateException.class,\n+                            () -> SpringInstantiatorTest.getService(context,\n+                                    new Properties()));\n+                    assertTrue(error.getMessage()\n+                            .contains(\"Multiple TaskExecutor beans found\"));\n+                    assertTrue(error.getMessage()\n+                            .contains(\"@Bean(\\\"VaadinTaskExecutor\\\")\"));\n+                    assertTrue(\n+                            error.getMessage().contains(\"@VaadinTaskExecutor\"));\n+                });\n+    }\n+\n+    @Test\n+    public void getExecutor_invalidAnnotatedType_doesNotThrow() {\n+        contextRunner.withUserConfiguration(InvalidTypeAnnodatedConfig.class)\n+                .run(context -> {\n+                    VaadinService service = SpringInstantiatorTest\n+                            .getService(context, new Properties());\n+                    TestTaskExecutor executor = assertInstanceOf(\n+                            TestTaskExecutor.class, service.getExecutor(),\n+                            \"Expected VaadinService.getExecutor() to return an instance of custom TaskExecutor\");\n+                    assertEquals(CUSTOM_EXECUTOR, executor.name);\n+                });\n+    }\n+\n+    /**\n+     * Simple TaskExecutor implementation for testing.\n+     */\n+    static class TestTaskExecutor implements TaskExecutor {\n+\n+        final String name;\n+\n+        public TestTaskExecutor(String name) {\n+            this.name = name;\n+        }\n+\n+        @Override\n+        public void execute(Runnable task) {\n+            task.run();\n+        }\n+    }\n+}\n\ndiff --git a/vaadin-spring/src/test/java/com/vaadin/flow/spring/service/TestServletConfiguration.java b/vaadin-spring/src/test/java/com/vaadin/flow/spring/service/TestServletConfiguration.java\nindex a9b53f6040e..03690929f1a 100644\n--- a/vaadin-spring/src/test/java/com/vaadin/flow/spring/service/TestServletConfiguration.java\n+++ b/vaadin-spring/src/test/java/com/vaadin/flow/spring/service/TestServletConfiguration.java\n@@ -15,17 +15,19 @@\n  */\n package com.vaadin.flow.spring.service;\n \n-import com.vaadin.flow.server.VaadinRequest;\n-import com.vaadin.flow.server.VaadinRequestInterceptor;\n-import com.vaadin.flow.server.VaadinResponse;\n-import com.vaadin.flow.server.VaadinSession;\n import org.springframework.boot.SpringBootConfiguration;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.ComponentScan;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.FilterType;\n+\n+import com.vaadin.flow.server.VaadinRequest;\n+import com.vaadin.flow.server.VaadinRequestInterceptor;\n+import com.vaadin.flow.server.VaadinResponse;\n+import com.vaadin.flow.server.VaadinSession;\n \n @Configuration\n-@ComponentScan\n+@ComponentScan(excludeFilters = @ComponentScan.Filter(type = FilterType.REGEX, pattern = \".*\\\\.SpringVaadinServiceExecutorTest.*\"))\n @SpringBootConfiguration\n public class TestServletConfiguration {\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21409",
    "pr_id": 21409,
    "issue_id": 21167,
    "repo": "vaadin/flow",
    "problem_statement": "Transfer progress listener\n### Describe your motivation\n\nVaadin `Upload` component has a list of upload progress listeners, but downloads have no ways to hook into download process, neither success nor failure hooks.\nThere should be a standard way for UI logic to react to progress, completion and premature termination of an upload or download. \n\n### Describe the solution you'd like\n\nThis is in the form of a `TransferProgressListener` that can be used directly from a handler or passed as an optional parameter to the handler factory methods. Methods related to observing progress in `Upload` that are based on `StreamVariable` callbacks are deprecated in favor of this new universal mechanism.\n\n```java\npublic interface TransferProgressListener {\n  void onComplete(TransferContext context);\n  void onTerminate(TransferContext context, IOException reason);\n  long onProgress(TransferContext context, long transferredBytes, long totalBytes);\n  long progressReportInterval(); // -1 to not report progress\n}\n```\n\nThe context object gives access to relevant common parts from the upload and download event types. In particular, there's access to the target element to deal with things like re-enabling a download button with `disableOnClick` enabled. We should probably define a shared base type for the events to make it easier to create a context object.\n\nNobody likes implementing interfaces with multiple methods since you cannot use lambdas. That's why we enhance the `UploadHandler` and `DownloadHandler` factory methods to return builders that allow chaining on progress listeners as lambdas.\n\n```java\n// (should consider a shorter name)\n// (same for DownloadHandler)\npublic interface UploadHandlerWithProgressSupport extends UploadHandler {\n  static UploadHandlerWithProgressSupport whenComplete(\n    Consumer<Boolean> completeOrTerminateHandler);\n  static UploadHandlerWithProgressSupport onProgress(\n    Consumer<Boolean> completeOrTerminateHandler,\n    BiConsumer<Long, Long> progressHandler, long progressIntervalInBytes);\n}\n```\n\nThe boolean value is true if the transfer was successfully completed and false if terminated. We should maybe probably separate functional interfaces for these even though the shapes would be similar to the Consumer types shown here.\n\nThe easiest way of triggering the listener methods is through a helper method that transfers bytes from an `InputStream` to an `OutputStream` while reporting progress.\n\n```java\nTransferProgressListener.transfer(inputStream, outputStream, uploadOrDownloadEvent, progressListener);\n```\n",
    "issue_word_count": 330,
    "test_files_count": 1,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/server/streams/AbstractFileUploadHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/streams/InMemoryUploadHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/streams/UploadEvent.java",
      "flow-server/src/test/java/com/vaadin/flow/server/streams/UploadTransferProgressTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/server/streams/UploadTransferProgressTest.java"
    ],
    "base_commit": "c17d9cb452bde21882d5aa749a623603f81b6e64",
    "head_commit": "c677fa9243408e06bfafd1aa444f1210c016a844",
    "repo_url": "https://github.com/vaadin/flow/pull/21409",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21409",
    "dockerfile": "",
    "pr_merged_at": "2025-05-12T03:54:19.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/streams/AbstractFileUploadHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/streams/AbstractFileUploadHandler.java\nindex e4cda59c02e..6aa99bb8040 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/streams/AbstractFileUploadHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/streams/AbstractFileUploadHandler.java\n@@ -78,8 +78,7 @@ public void handleUploadRequest(UploadEvent event) {\n     protected TransferContext getTransferContext(UploadEvent transferEvent) {\n         return new TransferContext(transferEvent.getRequest(),\n                 transferEvent.getResponse(), transferEvent.getSession(),\n-                transferEvent.getFileName(),\n-                transferEvent.getOwningComponent().getElement(),\n+                transferEvent.getFileName(), transferEvent.getOwningElement(),\n                 transferEvent.getFileSize());\n     }\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/streams/InMemoryUploadHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/streams/InMemoryUploadHandler.java\nindex 442209d2833..049a58e769b 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/streams/InMemoryUploadHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/streams/InMemoryUploadHandler.java\n@@ -62,8 +62,7 @@ public void handleUploadRequest(UploadEvent event) {\n     protected TransferContext getTransferContext(UploadEvent transferEvent) {\n         return new TransferContext(transferEvent.getRequest(),\n                 transferEvent.getResponse(), transferEvent.getSession(),\n-                transferEvent.getFileName(),\n-                transferEvent.getOwningComponent().getElement(),\n+                transferEvent.getFileName(), transferEvent.getOwningElement(),\n                 transferEvent.getFileSize());\n     }\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/streams/UploadEvent.java b/flow-server/src/main/java/com/vaadin/flow/server/streams/UploadEvent.java\nindex 4f7154a405d..329e09f29f2 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/streams/UploadEvent.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/streams/UploadEvent.java\n@@ -205,6 +205,15 @@ public Component getOwningComponent() {\n         return owningElement.getComponent().orElse(null);\n     }\n \n+    /**\n+     * Get the owning element for the upload related to this event.\n+     *\n+     * @return owning element\n+     */\n+    public Element getOwningElement() {\n+        return owningElement;\n+    }\n+\n     /**\n      * Return the UI for this upload event.\n      *\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/streams/UploadTransferProgressTest.java b/flow-server/src/test/java/com/vaadin/flow/server/streams/UploadTransferProgressTest.java\nnew file mode 100644\nindex 00000000000..328b4391946\n--- /dev/null\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/streams/UploadTransferProgressTest.java\n@@ -0,0 +1,333 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.streams;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.StringReader;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import jakarta.servlet.ReadListener;\n+import jakarta.servlet.ServletContext;\n+import jakarta.servlet.ServletException;\n+import jakarta.servlet.ServletInputStream;\n+import jakarta.servlet.ServletOutputStream;\n+import jakarta.servlet.http.Part;\n+import org.apache.commons.io.IOUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mockito;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.dom.Element;\n+import com.vaadin.flow.function.SerializableBiConsumer;\n+import com.vaadin.flow.internal.CurrentInstance;\n+import com.vaadin.flow.internal.StateNode;\n+import com.vaadin.flow.server.AbstractStreamResource;\n+import com.vaadin.flow.server.Command;\n+import com.vaadin.flow.server.HttpStatusCode;\n+import com.vaadin.flow.server.MockVaadinServletService;\n+import com.vaadin.flow.server.MockVaadinSession;\n+import com.vaadin.flow.server.ServiceException;\n+import com.vaadin.flow.server.StreamRegistration;\n+import com.vaadin.flow.server.StreamResourceRegistry;\n+import com.vaadin.flow.server.TransferProgressListener;\n+import com.vaadin.flow.server.VaadinResponse;\n+import com.vaadin.flow.server.VaadinService;\n+import com.vaadin.flow.server.VaadinServletRequest;\n+import com.vaadin.flow.server.communication.StreamRequestHandler;\n+import com.vaadin.flow.shared.ApplicationConstants;\n+import com.vaadin.tests.util.AlwaysLockedVaadinSession;\n+import com.vaadin.tests.util.MockUI;\n+\n+import static com.vaadin.flow.server.communication.StreamRequestHandler.DYN_RES_PREFIX;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class UploadTransferProgressTest {\n+    private static final int DUMMY_CONTENT_LENGTH = 160000;\n+    public static final String DUMMY_FILE_NAME = \"test.tmp\";\n+\n+    private MockVaadinSession session;\n+    private VaadinServletRequest request;\n+    private VaadinResponse response;\n+    private StreamResourceRegistry streamResourceRegistry;\n+    private UI ui;\n+    private Element element;\n+    private UploadEvent uploadEvent;\n+\n+    @Rule\n+    public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+    @Before\n+    public void setUp() throws ServletException, ServiceException {\n+        VaadinService service = new MockVaadinServletService();\n+        session = new AlwaysLockedVaadinSession(service) {\n+            @Override\n+            public StreamResourceRegistry getResourceRegistry() {\n+                return streamResourceRegistry;\n+            }\n+        };\n+        streamResourceRegistry = new StreamResourceRegistry(session);\n+        request = Mockito.mock(VaadinServletRequest.class);\n+        ServletContext servletContext = Mockito.mock(ServletContext.class);\n+        Mockito.when(servletContext.getMimeType(Mockito.anyString()))\n+                .thenReturn(null);\n+        Mockito.when(request.getServletContext()).thenReturn(servletContext);\n+        element = Mockito.mock(Element.class);\n+        response = Mockito.mock(VaadinResponse.class);\n+        uploadEvent = Mockito.mock(UploadEvent.class);\n+        Mockito.doReturn(DUMMY_FILE_NAME).when(uploadEvent).getFileName();\n+        Mockito.when(uploadEvent.getContentType())\n+                .thenReturn(\"application/octet-stream\");\n+        Mockito.when(uploadEvent.getFileSize())\n+                .thenReturn((long) DUMMY_CONTENT_LENGTH);\n+        Mockito.when(uploadEvent.getInputStream())\n+                .thenReturn(createRandomBytes(DUMMY_CONTENT_LENGTH));\n+        Mockito.when(uploadEvent.getResponse()).thenReturn(response);\n+        Mockito.when(uploadEvent.getSession()).thenReturn(session);\n+        Mockito.when(uploadEvent.getOwningElement()).thenReturn(element);\n+        Mockito.when(uploadEvent.getRequest()).thenReturn(request);\n+        Component componentOwner = Mockito.mock(Component.class);\n+        Mockito.when(element.getComponent())\n+                .thenReturn(Optional.of(componentOwner));\n+        ui = Mockito.mock(UI.class);\n+        // run the command immediately\n+        Mockito.doAnswer(invocation -> {\n+            Command command = invocation.getArgument(0);\n+            command.execute();\n+            return null;\n+        }).when(ui).access(Mockito.any(Command.class));\n+\n+        Mockito.when(componentOwner.getUI()).thenReturn(Optional.of(ui));\n+        Mockito.when(uploadEvent.getOwningComponent())\n+                .thenReturn(componentOwner);\n+    }\n+\n+    @Test\n+    public void transferProgressListener_toFile_addListener_listenersInvoked()\n+            throws URISyntaxException, IOException {\n+        AtomicReference<File> actualFile = new AtomicReference<>();\n+        AtomicReference<File> expectedFile = new AtomicReference<>();\n+        List<String> invocations = new ArrayList<>();\n+        List<Long> transferredBytesRecords = new ArrayList<>();\n+        UploadHandler handler = UploadHandler\n+                .toFile((meta, file) -> actualFile.set(file), (fileName) -> {\n+                    try {\n+                        File file = temporaryFolder.newFile(DUMMY_FILE_NAME);\n+                        expectedFile.set(file);\n+                        return file;\n+                    } catch (IOException e) {\n+                        Assert.fail(\"Failed to create temp file: \"\n+                                + e.getMessage());\n+                    }\n+                    return null;\n+                }, createTransferProgressListener(invocations,\n+                        transferredBytesRecords));\n+\n+        handler.handleUploadRequest(uploadEvent);\n+\n+        assertListenersInvoked(invocations, transferredBytesRecords);\n+        Assert.assertEquals(expectedFile.get(), actualFile.get());\n+    }\n+\n+    @Test\n+    public void transferProgressListener_toFile_addListener_errorOccured_errorlistenerInvoked()\n+            throws URISyntaxException {\n+        List<String> invocations = new ArrayList<>();\n+        UploadHandler handler = UploadHandler.toFile((meta, file) -> {\n+        }, (fileName) -> {\n+            throw new IOException(\"Test exception\");\n+        }, createErrorTransferProgressListener(invocations));\n+\n+        try {\n+            handler.handleUploadRequest(uploadEvent);\n+            Assert.fail(\"Expected an IOException to be thrown\");\n+        } catch (Exception e) {\n+        }\n+        Assert.assertEquals(List.of(\"onError\"), invocations);\n+    }\n+\n+    @Test\n+    public void transferProgressListener_toTempFile_addListener_listenersInvoked()\n+            throws URISyntaxException, IOException {\n+        List<String> invocations = new ArrayList<>();\n+        List<Long> transferredBytesRecords = new ArrayList<>();\n+        UploadHandler handler = UploadHandler.toTempFile((meta, file) -> {\n+        }, createTransferProgressListener(invocations,\n+                transferredBytesRecords));\n+\n+        handler.handleUploadRequest(uploadEvent);\n+\n+        // Two invocations with interval of 65536 bytes for total size 165000\n+        assertListenersInvoked(invocations, transferredBytesRecords);\n+    }\n+\n+    @Test\n+    public void transferProgressListener_toTempFile_addListener_errorOccured_errorlistenerInvoked()\n+            throws URISyntaxException, IOException {\n+        List<String> invocations = new ArrayList<>();\n+\n+        InputStream inputStream = mock(InputStream.class);\n+        Mockito.doThrow(new IOException(\"Test exception\")).when(inputStream)\n+                .read(Mockito.any(byte[].class), Mockito.anyInt(),\n+                        Mockito.anyInt());\n+        Mockito.when(uploadEvent.getInputStream()).thenReturn(inputStream);\n+\n+        UploadHandler handler = UploadHandler.toTempFile((meta, file) -> {\n+        }, createErrorTransferProgressListener(invocations));\n+\n+        try {\n+            handler.handleUploadRequest(uploadEvent);\n+            Assert.fail(\"Expected an IOException to be thrown\");\n+        } catch (Exception e) {\n+        }\n+        Assert.assertEquals(List.of(\"onStart\", \"onError\"), invocations);\n+    }\n+\n+    @Test\n+    public void transferProgressListener_inMemory_addListener_listenersInvoked()\n+            throws URISyntaxException, IOException {\n+        List<String> invocations = new ArrayList<>();\n+        List<Long> transferredBytesRecords = new ArrayList<>();\n+        UploadHandler handler = UploadHandler.inMemory((meta, bytes) -> {\n+        }, createTransferProgressListener(invocations,\n+                transferredBytesRecords));\n+\n+        handler.handleUploadRequest(uploadEvent);\n+\n+        // Two invocations with interval of 65536 bytes for total size 165000\n+        assertListenersInvoked(invocations, transferredBytesRecords);\n+    }\n+\n+    @Test\n+    public void transferProgressListener_inMemory_addListener_errorOccured_errorlistenerInvoked()\n+            throws URISyntaxException, IOException {\n+        List<String> invocations = new ArrayList<>();\n+\n+        InputStream inputStream = mock(InputStream.class);\n+        Mockito.doThrow(new IOException(\"Test exception\")).when(inputStream)\n+                .read(Mockito.any(byte[].class), Mockito.anyInt(),\n+                        Mockito.anyInt());\n+        Mockito.when(uploadEvent.getInputStream()).thenReturn(inputStream);\n+\n+        UploadHandler handler = UploadHandler.inMemory((meta, bytes) -> {\n+        }, createErrorTransferProgressListener(invocations));\n+\n+        try {\n+            handler.handleUploadRequest(uploadEvent);\n+            Assert.fail(\"Expected an IOException to be thrown\");\n+        } catch (Exception e) {\n+        }\n+        Assert.assertEquals(List.of(\"onStart\", \"onError\"), invocations);\n+    }\n+\n+    private ByteArrayInputStream createRandomBytes(int size) {\n+        byte[] bytes = new byte[size];\n+        new Random().nextBytes(bytes);\n+        return new ByteArrayInputStream(bytes);\n+    }\n+\n+    private static TransferProgressListener createTransferProgressListener(\n+            List<String> invocations, List<Long> transferredBytesRecords) {\n+        return new TransferProgressListener() {\n+            @Override\n+            public void onStart(TransferContext context) {\n+                Assert.assertEquals(DUMMY_CONTENT_LENGTH, context.totalBytes());\n+                Assert.assertEquals(DUMMY_FILE_NAME, context.fileName());\n+                invocations.add(\"onStart\");\n+            }\n+\n+            @Override\n+            public void onProgress(TransferContext context,\n+                    long transferredBytes, long totalBytes) {\n+                transferredBytesRecords.add(transferredBytes);\n+                Assert.assertEquals(DUMMY_CONTENT_LENGTH, totalBytes);\n+                Assert.assertEquals(DUMMY_FILE_NAME, context.fileName());\n+                invocations.add(\"onProgress\");\n+            }\n+\n+            @Override\n+            public void onComplete(TransferContext context,\n+                    long transferredBytes) {\n+                Assert.assertEquals(DUMMY_CONTENT_LENGTH, context.totalBytes());\n+                Assert.assertEquals(DUMMY_CONTENT_LENGTH, transferredBytes);\n+                Assert.assertEquals(DUMMY_FILE_NAME, context.fileName());\n+                invocations.add(\"onComplete\");\n+            }\n+\n+            @Override\n+            public void onError(TransferContext context, IOException reason) {\n+                invocations.add(\"onError\");\n+            }\n+        };\n+    }\n+\n+    private static TransferProgressListener createErrorTransferProgressListener(\n+            List<String> invocations) {\n+        return new TransferProgressListener() {\n+            @Override\n+            public void onStart(TransferContext context) {\n+                invocations.add(\"onStart\");\n+            }\n+\n+            @Override\n+            public void onProgress(TransferContext context,\n+                    long transferredBytes, long totalBytes) {\n+                invocations.add(\"onProgress\");\n+            }\n+\n+            @Override\n+            public void onComplete(TransferContext context,\n+                    long transferredBytes) {\n+                invocations.add(\"onComplete\");\n+            }\n+\n+            @Override\n+            public void onError(TransferContext context, IOException reason) {\n+                invocations.add(\"onError\");\n+                Assert.assertEquals(\"Test exception\", reason.getMessage());\n+            }\n+        };\n+    }\n+\n+    private static void assertListenersInvoked(List<String> invocations,\n+            List<Long> transferredBytesRecords) {\n+        // Two invocations with interval of 65536 bytes for total size 165000\n+        Assert.assertEquals(\n+                List.of(\"onStart\", \"onProgress\", \"onProgress\", \"onComplete\"),\n+                invocations);\n+        Assert.assertArrayEquals(new long[] { 65536, 131072 },\n+                transferredBytesRecords.stream().mapToLong(Long::longValue)\n+                        .toArray());\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21406",
    "pr_id": 21406,
    "issue_id": 21396,
    "repo": "vaadin/flow",
    "problem_statement": "Remove deprecated API in Vaadin 25.0\nThe following classes/methods/feature flags have to be removed in Vaadin 25.0:\n\n## Deprecated Classes\n\n1. **HTML Components**\n   - [x] `Label` class in `com.vaadin.flow.component.html` (marked for removal in version 24.1)\n   - [x] `LabelElement` class in `com.vaadin.flow.component.html.testbench` (marked for removal in version 24.1)\n\n2. **Router Related**\n   - [x] `ClientRoutesProvider` interface in `com.vaadin.flow.router.internal` (marked for removal)\n\n3. **Security Related**\n   - [x] `ViewAccessChecker` class in `com.vaadin.flow.server.auth` (marked for removal in version 24.3) and `ViewAccessCheckerTest`\n   - [x] `SpringViewAccessChecker` class in `com.vaadin.flow.spring` (marked for removal in version 24.3) and related test class `SpringViewAccessCheckerTest`\n   - [x] `ViewAccessCheckerInitializer` class in `com.vaadin.flow.spring.security` (marked for removal in version 24.3)\n   - [x] `setSharedObjects` method in `VaadinStatelessSecurityConfigurer`\n\n4. **Spring Related**\n   - [x] `SpringVaadinSession` class in `com.vaadin.flow.spring` (marked for removal)\n\n5. **Maven Plugin Related**\n   - [x] `Fragment` class in `com.vaadin.flow.plugin.maven` (marked for removal)\n\n## Deprecated Methods\n\n1. **UI Class Methods**\n   - Methods in `com.vaadin.flow.component.UI`:\n     - [x] `doInit(VaadinRequest)` (replaced by `doInit(VaadinRequest, int, String)`)\n     - [x] Methods marked with `@deprecated(forRemoval=true)` as \"not enabled for client side\"\n\n2. **ValueContext Methods**\n   - [x] Multiple constructors and methods in `com.vaadin.flow.data.binder.ValueContext` (replaced by versions with binder reference)\n\n3. **ReactAdapterComponent Methods**\n   - [x] `readFromJson(String, Class)` (replaced by `readFromJson(JsonNode, Class)`)\n   - [x] `readFromJson(String, TypeReference)` (replaced by `readFromJson(JsonNode, TypeReference)`)\n   - [x] `writeToString(Object)` (replaced by `writeToJson(Object)`)\n\n4. **Router Methods**\n   - [x] Methods in `com.vaadin.flow.router.Router`\n   - [x] Methods in `com.vaadin.flow.router.NavigationEvent`\n   - [x] Methods in `com.vaadin.flow.router.ErrorNavigationEvent`\n   - [x] `parsePathToSegments(String)` in `com.vaadin.flow.router.LocationUtil` (replaced by `parsePathToSegments(String, boolean)`)\n   - [x] Constructor in `com.vaadin.flow.router.MenuData` (replaced by a different constructor)\n\n5. **Configuration Methods**\n   - [x] Methods in `com.vaadin.flow.spring.VaadinConfigurationProperties`:\n     - [x] `getBlacklistedPackages()` (replaced by `getBlockedPackages()`)\n     - [x] `setBlacklistedPackages(List)` (replaced by `setBlockedPackages(List)`)\n     - [x] `getWhitelistedPackages()` (replaced by `getAllowedPackages()`)\n     - [x] `setWhitelistedPackages(List)` (replaced by `setAllowedPackages(List)`)\n   - [x] Method in `com.vaadin.flow.server.AbstractConfiguration`\n\n~~6. **PolymerUtils Methods**~~\n   ~~- Multiple methods in `com.vaadin.client.PolymerUtils` marked as \"not in use anywhere and can be removed\"~~\n\n7. **BuildFrontendUtil Methods**\n   - [x] `updateBuildFile(File, boolean)` in `com.vaadin.flow.plugin.base.BuildFrontendUtil` (replaced by `updateBuildFile(PluginAdapterBuild, boolean)`)\n   - [x] `getClasspathElements(MavenProject)` in `BuildDevBundleMojo` and in `FlowModeAbstractMojo`.\n\n8. **Security Methods**\n   - [x] Method `getViewAccessChecker` in `com.vaadin.flow.spring.security.VaadinWebSecurity` related to ViewAccessChecker (marked for removal in version 24.3) \n   \n9. **Options**  \n   - [x] `withWebpack` in `Options`\n   - [x] `isEnableWebpackConfigUpdate` in `Options`\n   \n10. **UI**\n   - [x] `connectClient` method\n   - [x] `leaveNavigation` method\n    \n11. **Feature Flags**\n   - [x] `SYSTEM_PROPERTY_PREFIX` variable\n   - [x] `FORM_FILLER_ADDON` flag\n    \n12. **Other Methods**   - [ ] Method in `com.vaadin.flow.dom.ElementConstants` (replaced by `ARIA_LABEL_ATTRIBUTE_NAME`)   - [ ] Constructor in `com.vaadin.flow.server.menu.AvailableViewInfo` (marked for removal)\n   - [x] Method in `com.vaadin.flow.server.InitParameters`\n   - [x] Method `initDevModeHandler` in `DevModeInitializer`\n   - [x] Method `getOwner` in `ShortcutRegistration`\n   - [x] Methods in `TypeScriptBootstrapModifier`\n   - [x] Methods in `FrontendDependenciesScannerFactory`\n   - [x] Method `inlineImports` in `CssBundler`\n  \n**NOTE** Polymer API is already deprecated, but we have to keep it as we still support Polymer.\nThe list above can be supplemented with other findings.",
    "issue_word_count": 525,
    "test_files_count": 47,
    "non_test_files_count": 49,
    "pr_changed_files": [
      "flow-data/src/main/java/com/vaadin/flow/data/binder/ValueContext.java",
      "flow-data/src/test/java/com/vaadin/flow/data/binder/ValidatorTest.java",
      "flow-data/src/test/java/com/vaadin/flow/data/binder/ValueContextTest.java",
      "flow-data/src/test/java/com/vaadin/flow/data/validator/NotEmptyValidatorTest.java",
      "flow-data/src/test/java/com/vaadin/flow/data/validator/ValidatorTestBase.java",
      "flow-html-components-testbench/src/main/java/com/vaadin/flow/component/html/testbench/LabelElement.java",
      "flow-html-components/src/main/java/com/vaadin/flow/component/html/Label.java",
      "flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlComponentSmokeTest.java",
      "flow-html-components/src/test/java/com/vaadin/flow/component/html/LabelTest.java",
      "flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildDevBundleMojo.java",
      "flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/FlowModeAbstractMojo.java",
      "flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/Fragment.java",
      "flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/BuildFrontendUtil.java",
      "flow-react/src/main/java/com/vaadin/flow/component/react/ReactAdapterComponent.java",
      "flow-server/src/main/java/com/vaadin/experimental/FeatureFlags.java",
      "flow-server/src/main/java/com/vaadin/flow/component/Component.java",
      "flow-server/src/main/java/com/vaadin/flow/component/ShortcutRegistration.java",
      "flow-server/src/main/java/com/vaadin/flow/component/UI.java",
      "flow-server/src/main/java/com/vaadin/flow/component/internal/ComponentTracker.java",
      "flow-server/src/main/java/com/vaadin/flow/dom/ElementConstants.java",
      "flow-server/src/main/java/com/vaadin/flow/router/ErrorNavigationEvent.java",
      "flow-server/src/main/java/com/vaadin/flow/router/LocationUtil.java",
      "flow-server/src/main/java/com/vaadin/flow/router/MenuData.java",
      "flow-server/src/main/java/com/vaadin/flow/router/NavigationEvent.java",
      "flow-server/src/main/java/com/vaadin/flow/router/Router.java",
      "flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractRouteRegistry.java",
      "flow-server/src/main/java/com/vaadin/flow/router/internal/ClientRoutesProvider.java",
      "flow-server/src/main/java/com/vaadin/flow/server/AbstractConfiguration.java",
      "flow-server/src/main/java/com/vaadin/flow/server/DefaultDeploymentConfiguration.java",
      "flow-server/src/main/java/com/vaadin/flow/server/InitParameters.java",
      "flow-server/src/main/java/com/vaadin/flow/server/PropertyDeploymentConfiguration.java",
      "flow-server/src/main/java/com/vaadin/flow/server/PwaRegistry.java",
      "flow-server/src/main/java/com/vaadin/flow/server/VaadinServlet.java",
      "flow-server/src/main/java/com/vaadin/flow/server/auth/ViewAccessChecker.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/CssBundler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendTools.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/Options.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallFrontendBuildPlugins.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunNpmInstall.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/TypeScriptBootstrapModifier.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesScanner.java",
      "flow-server/src/main/java/com/vaadin/flow/server/menu/AvailableViewInfo.java",
      "flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java",
      "flow-server/src/main/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactory.java",
      "flow-server/src/test/java/com/vaadin/experimental/FeatureFlagsTest.java",
      "flow-server/src/test/java/com/vaadin/flow/component/ComponentTest.java",
      "flow-server/src/test/java/com/vaadin/flow/component/InvalidUrlTest.java",
      "flow-server/src/test/java/com/vaadin/flow/component/ShortcutRegistrationTest.java",
      "flow-server/src/test/java/com/vaadin/flow/component/UITest.java",
      "flow-server/src/test/java/com/vaadin/flow/router/RouterTest.java",
      "flow-server/src/test/java/com/vaadin/flow/router/internal/ErrorStateRendererTest.java",
      "flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/DefaultDeploymentConfigurationTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/DeploymentConfigurationFactoryTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/MockServletServiceSessionSetup.java",
      "flow-server/src/test/java/com/vaadin/flow/server/PropertyDeploymentConfigurationTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/StaticFileServerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/VaadinSessionTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/auth/ViewAccessCheckerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/UidlWriterTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandlerViteTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/AbstractNodeUpdateImportsTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/AbstractUpdateImportsTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/CssBundlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdateTestUtil.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdateSettingsFileTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/startup/RouteRegistryMenuAccessTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/startup/VaadinAppShellInitializerTest.java",
      "flow-server/src/test/java/com/vaadin/tests/server/SerializationTest.java",
      "flow-server/src/test/java/com/vaadin/tests/util/MockDeploymentConfiguration.java",
      "flow-tests/test-application-theme/test-theme-component-live-reload/src/test/java/com/vaadin/flow/uitest/ui/ComponentThemeLiveReloadIT.java",
      "flow-tests/test-application-theme/test-theme-live-reload/src/test/java/com/vaadin/flow/uitest/ui/ThemeLiveReloadIT.java",
      "flow-tests/test-embedding/test-embedding-application-theme/src/test/java/com/vaadin/flow/webcomponent/ApplicationThemeComponentIT.java",
      "flow-tests/test-frontend/vite-basics/src/main/java/com/vaadin/viteapp/BootstrapModifier.java",
      "flow-tests/test-live-reload/src/test/java/com/vaadin/flow/uitest/ui/FrontendLiveReloadIT.java",
      "flow-tests/vaadin-spring-tests/test-spring-boot-only-prepare/src/main/java/com/vaadin/flow/spring/test/TestServletInitializer.java",
      "vaadin-dev-server/src/main/java/com/vaadin/base/devserver/startup/DevModeInitializer.java",
      "vaadin-dev-server/src/test/java/com/vaadin/base/devserver/DevModeEndpointTest.java",
      "vaadin-dev-server/src/test/java/com/vaadin/base/devserver/MockDeploymentConfiguration.java",
      "vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/AbstractDevModeTest.java",
      "vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringVaadinServletService.java",
      "vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringVaadinSession.java",
      "vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringViewAccessChecker.java",
      "vaadin-spring/src/main/java/com/vaadin/flow/spring/VaadinConfigurationProperties.java",
      "vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinSavedRequestAwareAuthenticationSuccessHandler.java",
      "vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinWebSecurity.java",
      "vaadin-spring/src/main/java/com/vaadin/flow/spring/security/ViewAccessCheckerInitializer.java",
      "vaadin-spring/src/main/java/com/vaadin/flow/spring/security/stateless/VaadinStatelessSecurityConfigurer.java",
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/SpringViewAccessCheckerTest.java",
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/VaadinServletContextInitializerTest.java",
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/scopes/AbstractUIScopedTest.java"
    ],
    "pr_changed_test_files": [
      "flow-data/src/test/java/com/vaadin/flow/data/binder/ValidatorTest.java",
      "flow-data/src/test/java/com/vaadin/flow/data/binder/ValueContextTest.java",
      "flow-data/src/test/java/com/vaadin/flow/data/validator/NotEmptyValidatorTest.java",
      "flow-data/src/test/java/com/vaadin/flow/data/validator/ValidatorTestBase.java",
      "flow-html-components-testbench/src/main/java/com/vaadin/flow/component/html/testbench/LabelElement.java",
      "flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlComponentSmokeTest.java",
      "flow-html-components/src/test/java/com/vaadin/flow/component/html/LabelTest.java",
      "flow-server/src/test/java/com/vaadin/experimental/FeatureFlagsTest.java",
      "flow-server/src/test/java/com/vaadin/flow/component/ComponentTest.java",
      "flow-server/src/test/java/com/vaadin/flow/component/InvalidUrlTest.java",
      "flow-server/src/test/java/com/vaadin/flow/component/ShortcutRegistrationTest.java",
      "flow-server/src/test/java/com/vaadin/flow/component/UITest.java",
      "flow-server/src/test/java/com/vaadin/flow/router/RouterTest.java",
      "flow-server/src/test/java/com/vaadin/flow/router/internal/ErrorStateRendererTest.java",
      "flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/DefaultDeploymentConfigurationTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/DeploymentConfigurationFactoryTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/MockServletServiceSessionSetup.java",
      "flow-server/src/test/java/com/vaadin/flow/server/PropertyDeploymentConfigurationTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/StaticFileServerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/VaadinSessionTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/auth/ViewAccessCheckerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/UidlWriterTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandlerViteTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/AbstractNodeUpdateImportsTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/AbstractUpdateImportsTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/CssBundlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdateTestUtil.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdateSettingsFileTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/startup/RouteRegistryMenuAccessTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/startup/VaadinAppShellInitializerTest.java",
      "flow-server/src/test/java/com/vaadin/tests/server/SerializationTest.java",
      "flow-server/src/test/java/com/vaadin/tests/util/MockDeploymentConfiguration.java",
      "flow-tests/test-application-theme/test-theme-component-live-reload/src/test/java/com/vaadin/flow/uitest/ui/ComponentThemeLiveReloadIT.java",
      "flow-tests/test-application-theme/test-theme-live-reload/src/test/java/com/vaadin/flow/uitest/ui/ThemeLiveReloadIT.java",
      "flow-tests/test-embedding/test-embedding-application-theme/src/test/java/com/vaadin/flow/webcomponent/ApplicationThemeComponentIT.java",
      "flow-tests/test-frontend/vite-basics/src/main/java/com/vaadin/viteapp/BootstrapModifier.java",
      "flow-tests/test-live-reload/src/test/java/com/vaadin/flow/uitest/ui/FrontendLiveReloadIT.java",
      "flow-tests/vaadin-spring-tests/test-spring-boot-only-prepare/src/main/java/com/vaadin/flow/spring/test/TestServletInitializer.java",
      "vaadin-dev-server/src/test/java/com/vaadin/base/devserver/DevModeEndpointTest.java",
      "vaadin-dev-server/src/test/java/com/vaadin/base/devserver/MockDeploymentConfiguration.java",
      "vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/AbstractDevModeTest.java",
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/SpringViewAccessCheckerTest.java",
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/VaadinServletContextInitializerTest.java",
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/scopes/AbstractUIScopedTest.java"
    ],
    "base_commit": "dfd9d25032d707dddf0a09f153fc7fd5ba822687",
    "head_commit": "a8ae14a94623e091a6dfd06104415248acf0c2fd",
    "repo_url": "https://github.com/vaadin/flow/pull/21406",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21406",
    "dockerfile": "",
    "pr_merged_at": "2025-06-19T11:47:45.000Z",
    "patch": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/binder/ValueContext.java b/flow-data/src/main/java/com/vaadin/flow/data/binder/ValueContext.java\nindex d9d516622c0..a6f11a2cd9c 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/binder/ValueContext.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/binder/ValueContext.java\n@@ -125,93 +125,6 @@ public ValueContext(Binder binder, Component component,\n         this.locale = locale;\n     }\n \n-    /**\n-     * Constructor for {@code ValueContext} without a {@code Locale}.\n-     *\n-     * @deprecated Use the version with binder reference instead\n-     */\n-    @Deprecated\n-    public ValueContext() {\n-        this.binder = null;\n-        component = null;\n-        hasValue = null;\n-        locale = findLocale(component);\n-    }\n-\n-    /**\n-     * Constructor for {@code ValueContext} without a {@code Component}.\n-     *\n-     * @param locale\n-     *            The locale used with conversion. Can be null.\n-     * @deprecated Use the version with binder reference instead\n-     */\n-    @Deprecated\n-    public ValueContext(Locale locale) {\n-        this.binder = null;\n-        component = null;\n-        this.locale = locale;\n-        hasValue = null;\n-    }\n-\n-    /**\n-     * Constructor for {@code ValueContext}.\n-     *\n-     * @param component\n-     *            The component related to current value. Can be null. If the\n-     *            component implements {@link HasValue}, it will be returned by\n-     *            {@link #getHasValue()} as well.\n-     * @deprecated Use the version with binder reference instead\n-     */\n-    @Deprecated\n-    public ValueContext(Component component) {\n-        this.binder = null;\n-        this.component = component;\n-        if (component instanceof HasValue) {\n-            hasValue = (HasValue<?, ?>) component;\n-        } else {\n-            hasValue = null;\n-        }\n-        locale = findLocale(component);\n-    }\n-\n-    /**\n-     * Constructor for {@code ValueContext}.\n-     *\n-     * @param component\n-     *            The component related to current value. Can be null.\n-     * @param hasValue\n-     *            The value source related to current value. Can be null.\n-     * @deprecated Use the version with binder reference instead\n-     */\n-    @Deprecated\n-    public ValueContext(Component component, HasValue<?, ?> hasValue) {\n-        this.binder = null;\n-        this.component = component;\n-        this.hasValue = hasValue;\n-        locale = findLocale(component);\n-    }\n-\n-    /**\n-     * Constructor for {@code ValueContext}.\n-     *\n-     * @param component\n-     *            The component can be {@code null}.\n-     * @param locale\n-     *            The locale used with conversion. Can be {@code null}.\n-     * @param hasValue\n-     *            The value source related to current value. Can be\n-     *            {@code null}.\n-     * @deprecated Use the version with binder reference instead\n-     */\n-    @Deprecated\n-    public ValueContext(Component component, HasValue<?, ?> hasValue,\n-            Locale locale) {\n-        this.binder = null;\n-        this.component = component;\n-        this.hasValue = hasValue;\n-        this.locale = locale;\n-    }\n-\n     private Locale findLocale(Component component) {\n         UI ui = null;\n         if (component != null) {\n\ndiff --git a/flow-html-components/src/main/java/com/vaadin/flow/component/html/Label.java b/flow-html-components/src/main/java/com/vaadin/flow/component/html/Label.java\ndeleted file mode 100644\nindex eb83ae80156..00000000000\n--- a/flow-html-components/src/main/java/com/vaadin/flow/component/html/Label.java\n+++ /dev/null\n@@ -1,199 +0,0 @@\n-/*\n- * Copyright 2000-2025 Vaadin Ltd.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n- * use this file except in compliance with the License. You may obtain a copy of\n- * the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package com.vaadin.flow.component.html;\n-\n-import java.util.Objects;\n-import java.util.Optional;\n-\n-import com.vaadin.flow.component.AttachEvent;\n-import com.vaadin.flow.component.Component;\n-import com.vaadin.flow.component.Html;\n-import com.vaadin.flow.component.HtmlContainer;\n-import com.vaadin.flow.component.PropertyDescriptor;\n-import com.vaadin.flow.component.PropertyDescriptors;\n-import com.vaadin.flow.component.Tag;\n-import com.vaadin.flow.server.VaadinService;\n-import com.vaadin.flow.shared.Registration;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * Component for a <code>&lt;label&gt;</code> element, which represents a\n- * caption for an item in a user interface.\n- * <p>\n- * Clicking on a label automatically transfers the focus to the associated\n- * component. This is especially helpful when building forms with\n- * {@link Input}s.\n- * <p>\n- * For adding texts to the page without linking them to other components,\n- * consider using a {@link Span} or a {@link Div} instead. If the text should be\n- * interpreted as HTML, use a {@link Html} (but remember to guard against\n- * cross-site scripting attacks).\n- *\n- * @author Vaadin Ltd\n- * @see <a href=\n- *      \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label\">https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label</a>\n- * @since 1.0\n- * @deprecated Use {@link NativeLabel} instead, if you need the HTML\n- *             <code>&lt;label&gt;</code> element, which is normally not needed\n- *             within a Vaadin Flow application's high-level components. To use\n- *             a Label that works in the older style of Vaadin 8 or Java Swing,\n- *             and can be used both to label a component and to display loose\n- *             text, an alternative is the Label available in\n- *             <a href=\"https://vaadin.com/classic-components\">Classic\n- *             Components</a>. This {@link Label} component /\n- *             <code>&lt;label&gt;</code> element is not meant for loose text in\n- *             the page - it should only be coupled with another component by\n- *             using the {@link #setFor(Component)} or by adding them to it with\n- *             the {@link #add(Component...)} method, for example if you use\n- *             {@link Input}.\n- *\n- */\n-@Tag(Tag.LABEL)\n-@Deprecated(since = \"24.1\", forRemoval = true)\n-public class Label extends HtmlContainer {\n-    private static final PropertyDescriptor<String, Optional<String>> forDescriptor = PropertyDescriptors\n-            .optionalAttributeWithDefault(\"for\", \"\");\n-\n-    private static Boolean productionMode = null;\n-\n-    private Registration checkForAttributeOnAttach;\n-\n-    /**\n-     * Creates a new empty label.\n-     */\n-    public Label() {\n-        super();\n-    }\n-\n-    /**\n-     * Creates a new label with the given text content.\n-     *\n-     * @param text\n-     *            the text content\n-     */\n-    public Label(String text) {\n-        this();\n-        setText(text);\n-    }\n-\n-    /**\n-     * Sets the component that this label describes. The component (or its id)\n-     * should be defined in case the described component is not an ancestor of\n-     * the label.\n-     * <p>\n-     * The provided component must have an id set. This component will still use\n-     * the old id if the id of the provided component is changed after this\n-     * method has been called.\n-     *\n-     * @param forComponent\n-     *            the component that this label describes, not <code>null</code>\n-     *            , must have an id\n-     * @throws IllegalArgumentException\n-     *             if the provided component has no id\n-     */\n-    public void setFor(Component forComponent) {\n-        if (forComponent == null) {\n-            throw new IllegalArgumentException(\n-                    \"The provided component cannot be null\");\n-        }\n-        setFor(forComponent.getId()\n-                .orElseThrow(() -> new IllegalArgumentException(\n-                        \"The provided component must have an id\")));\n-    }\n-\n-    /**\n-     * Sets the id of the component that this label describes. The id should be\n-     * defined in case the described component is not an ancestor of the label.\n-     *\n-     * @param forId\n-     *            the id of the described component, or <code>null</code> if\n-     *            there is no value\n-     */\n-    public void setFor(String forId) {\n-        set(forDescriptor, forId);\n-    }\n-\n-    /**\n-     * Gets the id of the component that this label describes.\n-     *\n-     * @see #setFor(String)\n-     *\n-     * @return an optional id of the described component, or an empty optional\n-     *         if the attribute has not been set\n-     */\n-    public Optional<String> getFor() {\n-        return get(forDescriptor);\n-    }\n-\n-    @Override\n-    protected void onAttach(AttachEvent attachEvent) {\n-        super.onAttach(attachEvent);\n-        if (skipForAttributeCheck() || !attachEvent.isInitialAttach()) {\n-            return; // skip check in production so that customer / clients /\n-            // ops-teams are not complaining about this warning to the\n-            // devs. This should be dealt with by devs in development\n-            // mode.\n-        }\n-        if (checkForAttributeOnAttach == null) {\n-            checkForAttributeOnAttach = attachEvent.getUI()\n-                    .beforeClientResponse(this, ctx -> {\n-                        // Label was not associated with a for-attribute\n-                        // AND\n-                        // Label was not associated by adding a nested component\n-                        // AND\n-                        // Label has no attribute slot=label\n-                        // (used e.g. in flow-components/FormLayout)\n-                        if (getFor().isEmpty()\n-                                && getChildren().findAny().isEmpty()\n-                                && !Objects.equals(\n-                                        getElement().getAttribute(\"slot\"),\n-                                        \"label\")) {\n-                            LoggerFactory.getLogger(Label.class.getName()).warn(\n-                                    \"The Label '{}' was not associated with a component. \"\n-                                            + \"Labels should not be used for loose text on the page. \"\n-                                            + \"Consider alternatives like Text, Paragraph, Span or Div. \"\n-                                            + \"See the JavaDocs and Deprecation Warning for more Information.\",\n-                                    getText());\n-                        }\n-                        checkForAttributeOnAttach.remove();\n-                    });\n-        }\n-    }\n-\n-    /**\n-     * Checks if the application is running in production mode.\n-     * <p>\n-     * When unsure, reports that production mode is true so spam-like logging\n-     * does not take place in production.\n-     *\n-     * @return true if in production mode or the mode is unclear, false if in\n-     *         development mode\n-     **/\n-    private static boolean skipForAttributeCheck() {\n-        if (productionMode != null) {\n-            return productionMode;\n-        }\n-\n-        var service = VaadinService.getCurrent();\n-        if (service == null) {\n-            return true;\n-        }\n-\n-        productionMode = service.getDeploymentConfiguration()\n-                .isProductionMode();\n-        return productionMode;\n-    }\n-}\n\ndiff --git a/flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildDevBundleMojo.java b/flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildDevBundleMojo.java\nindex 80649fbc418..90eee25263b 100644\n--- a/flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildDevBundleMojo.java\n+++ b/flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildDevBundleMojo.java\n@@ -308,34 +308,6 @@ public boolean compressBundle() {\n         return false;\n     }\n \n-    /**\n-     * Generates a List of ClasspathElements (Run and CompileTime) from a\n-     * MavenProject.\n-     *\n-     * @param project\n-     *            a given MavenProject\n-     * @return List of ClasspathElements\n-     * @deprecated will be removed without replacement.\n-     */\n-    @Deprecated(forRemoval = true)\n-    public static List<String> getClasspathElements(MavenProject project) {\n-\n-        try {\n-            final Stream<String> classpathElements = Stream\n-                    .of(project.getRuntimeClasspathElements().stream(),\n-                            project.getSystemClasspathElements().stream(),\n-                            project.getCompileClasspathElements().stream()\n-                                    .filter(s -> s.matches(\n-                                            INCLUDE_FROM_COMPILE_DEPS_REGEX)))\n-                    .flatMap(Function.identity());\n-            return classpathElements.collect(Collectors.toList());\n-        } catch (DependencyResolutionRequiredException e) {\n-            throw new IllegalStateException(String.format(\n-                    \"Failed to retrieve runtime classpath elements from project '%s'\",\n-                    project), e);\n-        }\n-    }\n-\n     @Override\n     public File applicationProperties() {\n         return new File(projectBasedir,\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/FlowModeAbstractMojo.java b/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/FlowModeAbstractMojo.java\nindex 7123f21f533..1b1154b8746 100644\n--- a/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/FlowModeAbstractMojo.java\n+++ b/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/FlowModeAbstractMojo.java\n@@ -394,34 +394,6 @@ protected void triggerRefresh(File file) {\n         }\n     }\n \n-    /**\n-     * Generates a List of ClasspathElements (Run and CompileTime) from a\n-     * MavenProject.\n-     *\n-     * @param project\n-     *            a given MavenProject\n-     * @return List of ClasspathElements\n-     * @deprecated will be removed without replacement.\n-     */\n-    @Deprecated(forRemoval = true)\n-    public static List<String> getClasspathElements(MavenProject project) {\n-\n-        try {\n-            final Stream<String> classpathElements = Stream\n-                    .of(project.getRuntimeClasspathElements().stream(),\n-                            project.getSystemClasspathElements().stream(),\n-                            project.getCompileClasspathElements().stream()\n-                                    .filter(s -> s.matches(\n-                                            INCLUDE_FROM_COMPILE_DEPS_REGEX)))\n-                    .flatMap(Function.identity());\n-            return classpathElements.collect(Collectors.toList());\n-        } catch (DependencyResolutionRequiredException e) {\n-            throw new IllegalStateException(String.format(\n-                    \"Failed to retrieve runtime classpath elements from project '%s'\",\n-                    project), e);\n-        }\n-    }\n-\n     /**\n      * Checks if Hilla is available based on the Maven project's classpath.\n      *\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/Fragment.java b/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/Fragment.java\ndeleted file mode 100644\nindex 4839d987264..00000000000\n--- a/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/Fragment.java\n+++ /dev/null\n@@ -1,55 +0,0 @@\n-/*\n- * Copyright 2000-2025 Vaadin Ltd.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n- * use this file except in compliance with the License. You may obtain a copy of\n- * the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package com.vaadin.flow.plugin.maven;\n-\n-import java.util.HashSet;\n-import java.util.Set;\n-\n-/**\n- * Intended to be used by Maven to specify fragments.\n- *\n- * @author Vaadin Ltd\n- * @since 1.0.\n- * @deprecated unused, will be removed without replacement.\n- */\n-@Deprecated(forRemoval = true)\n-public class Fragment {\n-    private String name;\n-    private final Set<String> files = new HashSet<>();\n-\n-    /**\n-     * Gets the name of a fragment.\n-     *\n-     * @return the name of a fragment, may be {@code null}\n-     */\n-    public String getName() {\n-        return name;\n-    }\n-\n-    /**\n-     * Gets the files that belong to the fragment.\n-     *\n-     * @return the files that belong to a fragment\n-     */\n-    public Set<String> getFiles() {\n-        return files;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"Fragment{name='\" + name + \"\\', files=\" + files + '}';\n-    }\n-}\n\ndiff --git a/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/BuildFrontendUtil.java b/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/BuildFrontendUtil.java\nindex 1c84920ea6e..95e4f926ecc 100644\n--- a/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/BuildFrontendUtil.java\n+++ b/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/BuildFrontendUtil.java\n@@ -738,21 +738,6 @@ static List<Product> findCommercialJavaComponents(\n         return components;\n     }\n \n-    /**\n-     * Updates the build info after the bundle has been built by build-frontend.\n-     * <p>\n-     * Removes the abstract folder paths as they should not be used for prebuilt\n-     * bundles and ensures production mode is set to true.\n-     *\n-     * @param adapter\n-     *            - the PluginAdapterBase.\n-     * @deprecated use {@link #updateBuildFile(PluginAdapterBuild, boolean)}\n-     */\n-    @Deprecated\n-    public static void updateBuildFile(PluginAdapterBuild adapter) {\n-        updateBuildFile(adapter, false);\n-    }\n-\n     /**\n      * Updates the build info after the bundle has been built by build-frontend.\n      * <p>\n\ndiff --git a/flow-react/src/main/java/com/vaadin/flow/component/react/ReactAdapterComponent.java b/flow-react/src/main/java/com/vaadin/flow/component/react/ReactAdapterComponent.java\nindex 00bf9576685..21a8b3ddceb 100644\n--- a/flow-react/src/main/java/com/vaadin/flow/component/react/ReactAdapterComponent.java\n+++ b/flow-react/src/main/java/com/vaadin/flow/component/react/ReactAdapterComponent.java\n@@ -144,24 +144,6 @@ protected <T> T getState(String stateName, TypeReference<T> typeReference) {\n         return readFromJson(getPropertyJson(stateName), typeReference);\n     }\n \n-    /**\n-     * Converts JsonValue into Java object of given type.\n-     *\n-     * @param jsonValue\n-     *            JSON value to convert, not {@code null}\n-     * @param typeClass\n-     *            type class of converted object instance\n-     * @return converted object instance\n-     * @param <T>\n-     *            type of result instance\n-     * @deprecated use {@link #readFromJson(JsonNode, Class)} instead\n-     */\n-    @Deprecated\n-    protected static <T> T readFromJson(JsonValue jsonValue,\n-            Class<T> typeClass) {\n-        return JsonUtils.readValue(jsonValue, typeClass);\n-    }\n-\n     /**\n      * Converts JsonValue into Java object of given type.\n      *\n@@ -178,24 +160,6 @@ protected static <T> T readFromJson(JsonNode jsonValue,\n         return JacksonUtils.readValue(jsonValue, typeClass);\n     }\n \n-    /**\n-     * Converts JsonValue into Java object of given type.\n-     *\n-     * @param jsonValue\n-     *            JSON value to convert, not {@code null}\n-     * @param typeReference\n-     *            type reference of converted object instance\n-     * @return converted object instance\n-     * @param <T>\n-     *            type of result instance\n-     * @deprecated use {@link #readFromJson(JsonNode, TypeReference)} instead\n-     */\n-    @Deprecated\n-    protected static <T> T readFromJson(JsonValue jsonValue,\n-            TypeReference<T> typeReference) {\n-        return JsonUtils.readValue(jsonValue, typeReference);\n-    }\n-\n     /**\n      * Converts JsonValue into Java object of given type.\n      *\n@@ -212,19 +176,6 @@ protected static <T> T readFromJson(JsonNode jsonValue,\n         return JacksonUtils.readValue(jsonValue, typeReference);\n     }\n \n-    /**\n-     * Converts Java object into JsonValue.\n-     *\n-     * @param object\n-     *            Java object to convert\n-     * @return converted JSON value\n-     * @deprecated use {@link #writeToJson(Object)}\n-     */\n-    @Deprecated\n-    protected static JsonValue writeAsJson(Object object) {\n-        return JsonUtils.writeValue(object);\n-    }\n-\n     /**\n      * Converts Java object into JsonValue.\n      *\n\ndiff --git a/flow-server/src/main/java/com/vaadin/experimental/FeatureFlags.java b/flow-server/src/main/java/com/vaadin/experimental/FeatureFlags.java\nindex 702f3706e0e..a01abd42f64 100644\n--- a/flow-server/src/main/java/com/vaadin/experimental/FeatureFlags.java\n+++ b/flow-server/src/main/java/com/vaadin/experimental/FeatureFlags.java\n@@ -49,12 +49,6 @@ public class FeatureFlags implements Serializable {\n \n     public static final String PROPERTIES_FILENAME = \"vaadin-featureflags.properties\";\n \n-    /**\n-     * @deprecated Use {@link #SYSTEM_PROPERTY_PREFIX_EXPERIMENTAL} instead.\n-     */\n-    @Deprecated\n-    public static final String SYSTEM_PROPERTY_PREFIX = \"vaadin.\";\n-\n     public static final String SYSTEM_PROPERTY_PREFIX_EXPERIMENTAL = \"vaadin.experimental.\";\n \n     public static final Feature EXAMPLE = new Feature(\n@@ -67,11 +61,6 @@ public class FeatureFlags implements Serializable {\n             \"collaborationEngineBackend\",\n             \"https://github.com/vaadin/platform/issues/1988\", true, null);\n \n-    public static final Feature FORM_FILLER_ADDON = new Feature(\n-            \"Form Filler Add-on\", \"formFillerAddon\",\n-            \"https://github.com/vaadin/form-filler-addon\", true,\n-            \"com.vaadin.flow.ai.formfiller.FormFiller\");\n-\n     public static final Feature COPILOT_EXPERIMENTAL = new Feature(\n             \"Copilot experimental features\", \"copilotExperimentalFeatures\",\n             \"https://vaadin.com/docs/latest/tools/copilot\", false, null);\n@@ -130,7 +119,6 @@ public FeatureFlags(Lookup lookup) {\n         this.lookup = lookup;\n         features.add(new Feature(EXAMPLE));\n         features.add(new Feature(COLLABORATION_ENGINE_BACKEND));\n-        features.add(new Feature(FORM_FILLER_ADDON));\n         features.add(new Feature(HILLA_FULLSTACK_SIGNALS));\n         features.add(new Feature(FLOW_FULLSTACK_SIGNALS));\n         features.add(new Feature(COPILOT_EXPERIMENTAL));\n@@ -234,11 +222,8 @@ public void loadProperties() {\n \n             // Disable all features if no file exists\n             for (Feature f : features) {\n-                f.setEnabled(\n-                        Boolean.getBoolean(SYSTEM_PROPERTY_PREFIX + f.getId())\n-                                || Boolean.getBoolean(\n-                                        SYSTEM_PROPERTY_PREFIX_EXPERIMENTAL\n-                                                + f.getId()));\n+                f.setEnabled(Boolean.getBoolean(\n+                        SYSTEM_PROPERTY_PREFIX_EXPERIMENTAL + f.getId()));\n             }\n         } else {\n             try (FileInputStream propertiesStream = new FileInputStream(\n@@ -269,9 +254,7 @@ void loadProperties(InputStream propertiesStream) {\n                 // Allow users to override a feature flag with a system property\n                 String propertyValue = System.getProperty(\n                         SYSTEM_PROPERTY_PREFIX_EXPERIMENTAL + f.getId(),\n-                        System.getProperty(SYSTEM_PROPERTY_PREFIX + f.getId(),\n-                                props.getProperty(\n-                                        getFilePropertyName(f.getId()))));\n+                        props.getProperty(getFilePropertyName(f.getId())));\n                 f.setEnabled(Boolean.parseBoolean(propertyValue));\n             }\n \n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/component/Component.java b/flow-server/src/main/java/com/vaadin/flow/component/Component.java\nindex 103820faa59..6aceb0bbd0d 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/Component.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/Component.java\n@@ -687,6 +687,13 @@ public String getTranslation(Object key, Object... params) {\n      * The method never returns a null. If there is no {@link I18NProvider}\n      * available or no translation for the {@code key} it returns an exception\n      * string e.g. '!{key}!'.\n+     * <p>\n+     * For the maintainers: this method will remain deprecated but should not be\n+     * removed. Removing it would cause silent runtime issues where\n+     * {@link #getTranslation(String, Object...)} might be invoked instead of\n+     * the correct method. By keeping this deprecated method, developers will\n+     * receive deprecation warnings rather than encountering subtle runtime\n+     * problems.\n      *\n      * @param key\n      *            translation key\n@@ -709,6 +716,13 @@ public String getTranslation(String key, Locale locale, Object... params) {\n      * The method never returns a null. If there is no {@link I18NProvider}\n      * available or no translation for the {@code key} it returns an exception\n      * string e.g. '!{key}!'.\n+     * <p>\n+     * For the maintainers: this method will remain deprecated but should not be\n+     * removed. Removing it would cause silent runtime issues where\n+     * {@link #getTranslation(String, Object...)} might be invoked instead of\n+     * the correct method. By keeping this deprecated method, developers will\n+     * receive deprecation warnings rather than encountering subtle runtime\n+     * problems.\n      *\n      * @param key\n      *            translation key\n@@ -867,4 +881,4 @@ private void readObject(ObjectInputStream in)\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/component/ShortcutRegistration.java b/flow-server/src/main/java/com/vaadin/flow/component/ShortcutRegistration.java\nindex 8c232e51cc0..ca6454328d9 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/ShortcutRegistration.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/ShortcutRegistration.java\n@@ -478,25 +478,6 @@ public void setResetFocusOnActiveElement(\n         }\n     }\n \n-    /**\n-     * {@link Component} which owns the first shortcuts key event listener.\n-     *\n-     * @return Component\n-     * @deprecated This component has now multiple owners so this method has\n-     *             been replaced by #getOwners().\n-     */\n-    @Deprecated\n-    public Component getOwner() {\n-        if (listenOnComponents == null) {\n-            return null;\n-        }\n-        if (listenOnComponents.length <= 0 || listenOnComponents[0] == null) {\n-            throw new IllegalStateException(\n-                    \"listenOnComponents must not be empty!\");\n-        }\n-        return listenOnComponents[0];\n-    }\n-\n     /**\n      * The {@link Component}s which own the shortcuts key event listeners.\n      *\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/component/UI.java b/flow-server/src/main/java/com/vaadin/flow/component/UI.java\nindex 502997243f6..5220403fb14 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/UI.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/UI.java\n@@ -45,7 +45,6 @@\n import com.vaadin.flow.i18n.LocaleChangeEvent;\n import com.vaadin.flow.internal.CurrentInstance;\n import com.vaadin.flow.internal.ExecutionContext;\n-import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.internal.StateTree.ExecutionRegistration;\n import com.vaadin.flow.internal.nodefeature.ElementData;\n@@ -91,7 +90,6 @@\n \n import elemental.json.Json;\n import elemental.json.JsonObject;\n-import elemental.json.JsonValue;\n \n /**\n  * The topmost component in any component hierarchy. There is one UI for every\n@@ -217,25 +215,9 @@ public int getUIId() {\n      * Internal initialization method, should not be overridden. This method is\n      * not declared as final because that would break compatibility with e.g.\n      * CDI.\n-     *\n-     * @param request\n-     *            the initialization request\n-     * @param uiId\n-     *            the id of the new ui\n-     *\n-     * @see #getUIId()\n-     * @deprecated Use {@link #doInit(VaadinRequest, int, String)} instead\n-     */\n-    @Deprecated\n-    public void doInit(VaadinRequest request, int uiId) {\n-        doInit(request, uiId,\n-                getSession().getService().getMainDivId(getSession(), request));\n-    }\n-\n-    /**\n-     * Internal initialization method, should not be overridden. This method is\n-     * not declared as final because that would break compatibility with e.g.\n-     * CDI.\n+     * <p>\n+     * {@code appId} can be obtained by calling\n+     * {@code getService().getMainDivId(getSession(), getRequest())}.\n      *\n      * @param request\n      *            the initialization request\n@@ -1305,18 +1287,6 @@ public Component getCurrentView() {\n         return (Component) getInternals().getActiveRouterTargetsChain().get(0);\n     }\n \n-    /**\n-     * Gets the router used for navigating in this UI.\n-     *\n-     * @return a router\n-     *\n-     * @deprecated For internal use only. Will be removed in the future.\n-     */\n-    @Deprecated\n-    public Router getRouter() {\n-        return internals.getRouter();\n-    }\n-\n     /**\n      * Registers a task to be executed before the response is sent to the\n      * client. The tasks are executed in order of registration. If tasks\n@@ -1822,33 +1792,6 @@ public BrowserRefreshEvent(UI source, boolean fromClient,\n         }\n     }\n \n-    /**\n-     * Connect a client with the server side UI. This method is invoked each\n-     * time client router navigates to a server route.\n-     *\n-     * @param flowRoutePath\n-     *            flow route path that should be attached to the client element\n-     * @param flowRouteQuery\n-     *            flow route query string\n-     * @param appShellTitle\n-     *            client side title of the application shell\n-     * @param historyState\n-     *            client side history state value\n-     * @param trigger\n-     *            navigation trigger\n-     *\n-     * @deprecated(forRemoval=true) method is not enabled for client side\n-     *                              anymore and connectClient is triggered by\n-     *                              DOM event, to be removed in next major 25\n-     */\n-    @Deprecated\n-    public void connectClient(String flowRoutePath, String flowRouteQuery,\n-            String appShellTitle, JsonValue historyState, String trigger) {\n-        browserNavigate(new BrowserNavigateEvent(this, false, flowRoutePath,\n-                flowRouteQuery, appShellTitle,\n-                JacksonUtils.mapElemental(historyState), trigger));\n-    }\n-\n     /**\n      * Connect a client with the server side UI. This method is invoked each\n      * time client router navigates to a server route.\n@@ -1932,28 +1875,6 @@ private void replaceStateIfDiffersAndNoReplacePending(String route,\n         }\n     }\n \n-    /**\n-     * Check that the view can be leave. This method is invoked when the client\n-     * router tries to navigate to a client route while the current route is a\n-     * server route.\n-     * <p>\n-     * This is only called when client route navigates from a server to a client\n-     * view.\n-     *\n-     * @param route\n-     *            the route that is navigating to.\n-     * @param query\n-     *            route query string\n-     * @deprecated(forRemoval=true) method is not enabled for client side\n-     *                              anymore and leave navigation is triggered by\n-     *                              DOM event, to be removed in next major 25\n-     */\n-    @Deprecated\n-    public void leaveNavigation(String route, String query) {\n-        leaveNavigation(\n-                new BrowserLeaveNavigationEvent(this, false, route, query));\n-    }\n-\n     /**\n      * Check that the view can be leave. This method is invoked when the client\n      * router tries to navigate to a client route while the current route is a\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/component/internal/ComponentTracker.java b/flow-server/src/main/java/com/vaadin/flow/component/internal/ComponentTracker.java\nindex 7bf22943cf4..a4ccfdc0de5 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/internal/ComponentTracker.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/internal/ComponentTracker.java\n@@ -164,19 +164,6 @@ public File findSourceFile(AbstractConfiguration configuration) {\n             return javaFile;\n         }\n \n-        /**\n-         * Finds the Java file this location refers to.\n-         *\n-         * @param configuration\n-         *            the application configuration\n-         * @return the Java file the location refers to, or {@code null}\n-         * @deprecated use findSourceFile\n-         */\n-        @Deprecated\n-        public File findJavaFile(AbstractConfiguration configuration) {\n-            return findSourceFile(configuration);\n-        }\n-\n         @Override\n         public String toString() {\n             return \"Component '\" + className + \"' at '\" + filename + \"' (\"\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/dom/ElementConstants.java b/flow-server/src/main/java/com/vaadin/flow/dom/ElementConstants.java\nindex 5512540e5b8..0c367bf1015 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/dom/ElementConstants.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/dom/ElementConstants.java\n@@ -300,12 +300,6 @@ public class ElementConstants {\n      * The label property.\n      */\n     public static final String LABEL_PROPERTY_NAME = \"label\";\n-    /**\n-     * The aria-label property.\n-     *\n-     * @deprecated use {@link #ARIA_LABEL_ATTRIBUTE_NAME} instead\n-     */\n-    public static final String ARIA_LABEL_PROPERTY_NAME = \"aria-label\";\n     /**\n      * The aria-label attribute.\n      */\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/router/ErrorNavigationEvent.java b/flow-server/src/main/java/com/vaadin/flow/router/ErrorNavigationEvent.java\nindex a5b8cf406b5..b22dfd35a71 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/router/ErrorNavigationEvent.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/router/ErrorNavigationEvent.java\n@@ -53,33 +53,6 @@ public ErrorNavigationEvent(Router router, Location location, UI ui,\n         this.errorParameter = errorParameter;\n     }\n \n-    /**\n-     * Creates a new navigation event.\n-     *\n-     * @param router\n-     *            the router handling the navigation, not {@code null}\n-     * @param location\n-     *            the new location, not {@code null}\n-     * @param ui\n-     *            the UI in which the navigation occurs, not {@code null}\n-     * @param trigger\n-     *            the type of user action that triggered this navigation event,\n-     *            not {@code null}\n-     * @param errorParameter\n-     *            parameter containing navigation error information\n-     * @param state\n-     *            includes navigation state info including for example the\n-     *            scroll position and the complete href of the RouterLink\n-     */\n-    @Deprecated\n-    public ErrorNavigationEvent(Router router, Location location, UI ui,\n-            NavigationTrigger trigger, ErrorParameter<?> errorParameter,\n-            JsonValue state) {\n-        super(router, location, ui, trigger, state, false);\n-\n-        this.errorParameter = errorParameter;\n-    }\n-\n     /**\n      * Creates a new navigation event.\n      *\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/router/LocationUtil.java b/flow-server/src/main/java/com/vaadin/flow/router/LocationUtil.java\nindex 1acc8c4be55..c4c7c02fae6 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/router/LocationUtil.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/router/LocationUtil.java\n@@ -73,21 +73,6 @@ public static void verifyRelativePath(String path) {\n         // All is OK if we get here\n     }\n \n-    /**\n-     * Parses the given path to parts split by the path separator, ignoring the\n-     * query string and fragment if either present. The path is verified with\n-     * {@link #verifyRelativePath(String)}.\n-     *\n-     * @param path\n-     *            the path to parse\n-     * @return tha path split into parts\n-     * @deprecated use {@link #parsePathToSegments(String, boolean)}\n-     */\n-    @Deprecated\n-    public static List<String> parsePathToSegments(String path) {\n-        return parsePathToSegments(path, true);\n-    }\n-\n     /**\n      * Parses the given path to parts split by the path separator.\n      * <p>\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/router/MenuData.java b/flow-server/src/main/java/com/vaadin/flow/router/MenuData.java\nindex dbac21d1627..5dd98b72262 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/router/MenuData.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/router/MenuData.java\n@@ -29,26 +29,6 @@\n public record MenuData(String title, Double order, boolean exclude, String icon,\n         Class<? extends Component> menuClass) implements Serializable {\n \n-    /**\n-     * MenuData constructor.\n-     *\n-     * @param title\n-     *            title of the menu item\n-     * @param order\n-     *            order of the menu item\n-     * @param exclude\n-     *            whether the menu item should be excluded\n-     * @param icon\n-     *            the icon of the menu item\n-     *\n-     * @deprecated Use {@link #MenuData(String, Double, boolean, String, Class)}\n-     *             instead.\n-     */\n-    @Deprecated(forRemoval = true)\n-    public MenuData(String title, Double order, boolean exclude, String icon) {\n-        this(title, order, exclude, icon, null);\n-    }\n-\n     /**\n      * Gets the title of the menu item.\n      *\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/router/NavigationEvent.java b/flow-server/src/main/java/com/vaadin/flow/router/NavigationEvent.java\nindex 85482f1b1b1..eef32da25f5 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/router/NavigationEvent.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/router/NavigationEvent.java\n@@ -66,72 +66,6 @@ public NavigationEvent(Router router, Location location, UI ui,\n         this.trigger = trigger;\n     }\n \n-    /**\n-     * Creates a new navigation event.\n-     *\n-     * @param router\n-     *            the router handling the navigation, not {@code null}\n-     * @param location\n-     *            the new location, not {@code null}\n-     * @param ui\n-     *            the UI in which the navigation occurs, not {@code null}\n-     * @param trigger\n-     *            the type of user action that triggered this navigation event,\n-     *            not {@code null}\n-     * @param state\n-     *            includes navigation state info including for example the\n-     *            scroll position and the complete href of the RouterLink\n-     * @param forwardTo\n-     *            indicates if this event is created as a result of\n-     *            {@link BeforeEvent#forwardTo} or not\n-     */\n-    @Deprecated\n-    public NavigationEvent(Router router, Location location, UI ui,\n-            NavigationTrigger trigger, JsonValue state, boolean forwardTo) {\n-        this(router, location, ui, trigger);\n-\n-        this.state = JacksonUtils.mapElemental(state);\n-        this.forwardTo = forwardTo;\n-    }\n-\n-    /**\n-     * Creates a new navigation event.\n-     *\n-     * @param router\n-     *            the router handling the navigation, not {@code null}\n-     * @param location\n-     *            the new location, not {@code null}\n-     * @param ui\n-     *            the UI in which the navigation occurs, not {@code null}\n-     * @param trigger\n-     *            the type of user action that triggered this navigation event,\n-     *            not {@code null}\n-     * @param state\n-     *            includes navigation state info including for example the\n-     *            scroll position and the complete href of the RouterLink\n-     * @param forwardTo\n-     *            indicates if this event is created as a result of\n-     *            {@link BeforeEvent#forwardTo} or not\n-     * @param forceInstantiation\n-     *            if set to {@code true}, the navigation target will always be\n-     *            instantiated\n-     * @param recreateLayoutChain\n-     *            if set to {@code true}, the complete layout chain up to the\n-     *            navigation target will be re-instantiated. Requires\n-     *            {@code forceInstantiation} to be true to have an effect.\n-     */\n-    @Deprecated\n-    public NavigationEvent(Router router, Location location, UI ui,\n-            NavigationTrigger trigger, JsonValue state, boolean forwardTo,\n-            boolean forceInstantiation, boolean recreateLayoutChain) {\n-        this(router, location, ui, trigger);\n-\n-        this.state = JacksonUtils.mapElemental(state);\n-        this.forwardTo = forwardTo;\n-        this.forceInstantiation = forceInstantiation;\n-        this.recreateLayoutChain = recreateLayoutChain;\n-    }\n-\n     /**\n      * Creates a new navigation event.\n      *\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/router/Router.java b/flow-server/src/main/java/com/vaadin/flow/router/Router.java\nindex 78a8fb87aea..d68c6c924be 100755\n--- a/flow-server/src/main/java/com/vaadin/flow/router/Router.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/router/Router.java\n@@ -248,69 +248,6 @@ public int navigate(UI ui, Location location, NavigationTrigger trigger,\n         return HttpStatusCode.NOT_MODIFIED.getCode();\n     }\n \n-    /**\n-     * Navigates the given UI to the given location. For internal use only.\n-     * <p>\n-     * This method pushes to the browser history if the <code>trigger</code> is\n-     * {@link NavigationTrigger#ROUTER_LINK} or\n-     * {@link NavigationTrigger#UI_NAVIGATE}.\n-     *\n-     * @param ui\n-     *            the UI to update, not <code>null</code>\n-     * @param location\n-     *            the location to navigate to, not <code>null</code>\n-     * @param trigger\n-     *            the type of user action that triggered this navigation, not\n-     *            <code>null</code>\n-     * @param state\n-     *            includes navigation state info including for example the\n-     *            scroll position and the complete href of the RouterLink\n-     * @return the HTTP status code resulting from the navigation\n-     * @see UI#navigate(String)\n-     * @see UI#navigate(String, QueryParameters)\n-     */\n-    @Deprecated\n-    public int navigate(UI ui, Location location, NavigationTrigger trigger,\n-            JsonValue state) {\n-        return navigate(ui, location, trigger, state, false, false);\n-    }\n-\n-    /**\n-     * Navigates the given UI to the given location. For internal use only.\n-     * <p>\n-     * This method pushes to the browser history if the <code>trigger</code> is\n-     * {@link NavigationTrigger#ROUTER_LINK} or\n-     * {@link NavigationTrigger#UI_NAVIGATE}.\n-     *\n-     * @param ui\n-     *            the UI to update, not <code>null</code>\n-     * @param location\n-     *            the location to navigate to, not <code>null</code>\n-     * @param trigger\n-     *            the type of user action that triggered this navigation, not\n-     *            <code>null</code>\n-     * @param state\n-     *            includes navigation state info including for example the\n-     *            scroll position and the complete href of the RouterLink\n-     * @param forceInstantiation\n-     *            if set to {@code true}, the navigation target will always be\n-     *            instantiated\n-     * @param recreateLayoutChain\n-     *            if set to {@code true}, the complete layout chain up to the\n-     *            navigation target will be re-instantiated. Requires\n-     *            {@code forceInstantiation} to be true to have an effect.\n-     * @return the HTTP status code resulting from the navigation\n-     * @see UI#navigate(String)\n-     * @see UI#navigate(String, QueryParameters)\n-     */\n-    @Deprecated\n-    public int navigate(UI ui, Location location, NavigationTrigger trigger,\n-            JsonValue state, boolean forceInstantiation,\n-            boolean recreateLayoutChain) {\n-        return navigate(ui, location, trigger, JacksonUtils.mapElemental(state),\n-                forceInstantiation, recreateLayoutChain);\n-    }\n-\n     private boolean handleNavigationForLocation(UI ui, Location location) {\n         if (ui.getInternals().hasLastHandledLocation()) {\n             return !location.getPathWithQueryParameters()\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractRouteRegistry.java b/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractRouteRegistry.java\nindex 2972e9b1f4c..5c7c6e9ee83 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractRouteRegistry.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractRouteRegistry.java\n@@ -34,6 +34,7 @@\n import com.vaadin.flow.function.SerializableBiConsumer;\n import com.vaadin.flow.internal.AnnotationReader;\n import com.vaadin.flow.internal.ReflectTools;\n+import com.vaadin.flow.internal.menu.MenuRegistry;\n import com.vaadin.flow.router.BeforeEnterListener;\n import com.vaadin.flow.router.HasErrorParameter;\n import com.vaadin.flow.router.Layout;\n@@ -56,8 +57,6 @@\n import com.vaadin.flow.server.auth.MenuAccessControl;\n import com.vaadin.flow.server.auth.NavigationAccessControl;\n import com.vaadin.flow.server.auth.NavigationContext;\n-import com.vaadin.flow.server.auth.ViewAccessChecker;\n-import com.vaadin.flow.internal.menu.MenuRegistry;\n import com.vaadin.flow.shared.Registration;\n \n import static java.util.stream.Collectors.toList;\n@@ -234,10 +233,7 @@ public List<RouteData> getRegisteredAccessibleMenuRoutes(\n \n         List<NavigationAccessControl> navigationAccessControls = findListOf(\n                 NavigationAccessControl.class, accessControls);\n-        List<ViewAccessChecker> legacyViewAccessCheckers = findListOf(\n-                ViewAccessChecker.class, accessControls);\n-        if (navigationAccessControls.isEmpty()\n-                && legacyViewAccessCheckers.isEmpty()) {\n+        if (navigationAccessControls.isEmpty()) {\n             return getMenuRouteCandidates().toList();\n         }\n         return getMenuRouteCandidates().filter(route -> navigationAccessControls\n@@ -249,18 +245,7 @@ public List<RouteData> getRegisteredAccessibleMenuRoutes(\n                                     vaadinRequest);\n                     return accessControl.checkAccess(navigationContext, true)\n                             .decision() == AccessCheckDecision.ALLOW;\n-                })).filter(route -> legacyViewAccessCheckers.stream()\n-                        .allMatch(legacyAccessChecker -> {\n-                            NavigationContext navigationContext = legacyAccessChecker\n-                                    .createNavigationContext(\n-                                            route.getNavigationTarget(),\n-                                            route.getTemplate(), vaadinService,\n-                                            vaadinRequest);\n-                            return legacyAccessChecker\n-                                    .checkAccess(navigationContext)\n-                                    .decision() == AccessCheckDecision.ALLOW;\n-                        }))\n-                .toList();\n+                })).toList();\n     }\n \n     private Stream<RouteData> getMenuRouteCandidates() {\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/router/internal/ClientRoutesProvider.java b/flow-server/src/main/java/com/vaadin/flow/router/internal/ClientRoutesProvider.java\ndeleted file mode 100644\nindex d8fbd19cd24..00000000000\n--- a/flow-server/src/main/java/com/vaadin/flow/router/internal/ClientRoutesProvider.java\n+++ /dev/null\n@@ -1,40 +0,0 @@\n-/*\n- * Copyright 2000-2025 Vaadin Ltd.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n- * use this file except in compliance with the License. You may obtain a copy of\n- * the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-\n-package com.vaadin.flow.router.internal;\n-\n-import java.io.Serializable;\n-import java.util.List;\n-\n-import com.vaadin.flow.function.DeploymentConfiguration;\n-import com.vaadin.flow.server.frontend.FrontendUtils;\n-\n-/**\n- * Interface for providing client side routes.\n- *\n- * @deprecated Provider is deprecated, use\n- *             {@link FrontendUtils#getClientRoutes()} instead.\n- */\n-@Deprecated(forRemoval = true)\n-public interface ClientRoutesProvider extends Serializable {\n-\n-    /**\n-     * Get a list of client side routes.\n-     *\n-     * @return a list of client side routes. Not null.\n-     */\n-    List<String> getClientRoutes();\n-}\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/AbstractConfiguration.java b/flow-server/src/main/java/com/vaadin/flow/server/AbstractConfiguration.java\nindex 20a043e38d6..8e281b4cf04 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/AbstractConfiguration.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/AbstractConfiguration.java\n@@ -42,22 +42,6 @@ public interface AbstractConfiguration extends Serializable {\n      */\n     boolean isProductionMode();\n \n-    /**\n-     * Get if the dev server should be enabled. false by default as a\n-     * development bundle is used.\n-     *\n-     * @return true if dev server should be used\n-     * @deprecated Use {@link #getMode()} instead\n-     */\n-    @Deprecated\n-    default boolean frontendHotdeploy() {\n-        if (isProductionMode()) {\n-            return false;\n-        }\n-        return getBooleanProperty(InitParameters.FRONTEND_HOTDEPLOY,\n-                FrontendUtils.isHillaUsed(getFrontendFolder()));\n-    }\n-\n     default File getFrontendFolder() {\n         String frontendFolderPath = getStringProperty(\n                 FrontendUtils.PARAM_FRONTEND_DIR,\n@@ -83,7 +67,8 @@ default Mode getMode() {\n             return BundleUtils.isPreCompiledProductionBundle()\n                     ? Mode.PRODUCTION_PRECOMPILED_BUNDLE\n                     : Mode.PRODUCTION_CUSTOM;\n-        } else if (frontendHotdeploy()) {\n+        } else if (getBooleanProperty(InitParameters.FRONTEND_HOTDEPLOY,\n+                FrontendUtils.isHillaUsed(getFrontendFolder()))) {\n             return Mode.DEVELOPMENT_FRONTEND_LIVERELOAD;\n         } else {\n             return Mode.DEVELOPMENT_BUNDLE;\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/DefaultDeploymentConfiguration.java b/flow-server/src/main/java/com/vaadin/flow/server/DefaultDeploymentConfiguration.java\nindex 526f7d30b55..dac5f7cbe92 100755\n--- a/flow-server/src/main/java/com/vaadin/flow/server/DefaultDeploymentConfiguration.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/DefaultDeploymentConfiguration.java\n@@ -273,11 +273,6 @@ public String getPushServletMapping() {\n         return pushServletMapping;\n     }\n \n-    @Override\n-    public boolean frontendHotdeploy() {\n-        return frontendHotdeploy;\n-    }\n-\n     @Override\n     public SessionLockCheckStrategy getSessionLockCheckStrategy() {\n         return sessionLockCheckStrategy;\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/InitParameters.java b/flow-server/src/main/java/com/vaadin/flow/server/InitParameters.java\nindex 54fde822216..c381c627501 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/InitParameters.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/InitParameters.java\n@@ -42,11 +42,6 @@ public class InitParameters implements Serializable {\n     public static final String SERVLET_PARAMETER_PRODUCTION_MODE = \"productionMode\";\n \n     public static final String SERVLET_PARAMETER_INITIAL_UIDL = \"eagerServerLoad\";\n-    /**\n-     * Enable dev server is deprecated. use {@link #FRONTEND_HOTDEPLOY}\n-     */\n-    @Deprecated\n-    public static final String SERVLET_PARAMETER_ENABLE_DEV_SERVER = \"enableDevServer\";\n     public static final String SERVLET_PARAMETER_REUSE_DEV_SERVER = \"reuseDevServer\";\n     public static final String SERVLET_PARAMETER_REQUEST_TIMING = \"requestTiming\";\n     // Javadocs for VaadinService should be updated if this value is changed\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/PropertyDeploymentConfiguration.java b/flow-server/src/main/java/com/vaadin/flow/server/PropertyDeploymentConfiguration.java\nindex 4d6f3765370..9ae896c7cbd 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/PropertyDeploymentConfiguration.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/PropertyDeploymentConfiguration.java\n@@ -149,15 +149,6 @@ public boolean isProductionMode() {\n         return parentConfig.isProductionMode();\n     }\n \n-    @Override\n-    public boolean frontendHotdeploy() {\n-        if (isOwnProperty(FRONTEND_HOTDEPLOY)) {\n-            return getBooleanProperty(FRONTEND_HOTDEPLOY,\n-                    FrontendUtils.isHillaUsed(getFrontendFolder()));\n-        }\n-        return parentConfig.frontendHotdeploy();\n-    }\n-\n     @Override\n     public File getFrontendFolder() {\n         return parentConfig.getFrontendFolder();\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/PwaRegistry.java b/flow-server/src/main/java/com/vaadin/flow/server/PwaRegistry.java\nindex d5966d08626..b1561e9c54e 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/PwaRegistry.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/PwaRegistry.java\n@@ -279,7 +279,7 @@ private String initializeRuntimeServiceWorker(\n         // Add manifest to precache\n         filesToCache.add(manifestCache());\n \n-        // Add user defined resources. Do not serve these via Webpack, as the\n+        // Add user defined resources. Do not serve these via dev-server, as the\n         // file system location from which a resource is served depends on\n         // the (configurable) web app logic (#8996).\n         for (String resource : pwaConfiguration.getOfflineResources()) {\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/VaadinServlet.java b/flow-server/src/main/java/com/vaadin/flow/server/VaadinServlet.java\nindex d3015565492..f8f66a79e82 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/VaadinServlet.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/VaadinServlet.java\n@@ -15,6 +15,14 @@\n  */\n package com.vaadin.flow.server;\n \n+import jakarta.servlet.ServletConfig;\n+import jakarta.servlet.ServletContext;\n+import jakarta.servlet.ServletException;\n+import jakarta.servlet.ServletRegistration;\n+import jakarta.servlet.http.HttpServlet;\n+import jakarta.servlet.http.HttpServletRequest;\n+import jakarta.servlet.http.HttpServletResponse;\n+\n import java.io.IOException;\n import java.net.MalformedURLException;\n import java.net.URL;\n@@ -38,14 +46,6 @@\n import com.vaadin.flow.server.startup.ApplicationConfiguration;\n import com.vaadin.flow.shared.JsonConstants;\n \n-import jakarta.servlet.ServletConfig;\n-import jakarta.servlet.ServletContext;\n-import jakarta.servlet.ServletException;\n-import jakarta.servlet.ServletRegistration;\n-import jakarta.servlet.http.HttpServlet;\n-import jakarta.servlet.http.HttpServletRequest;\n-import jakarta.servlet.http.HttpServletResponse;\n-\n /**\n  * The main servlet, which handles all incoming requests to the application.\n  * <p>\n@@ -403,9 +403,8 @@ protected void service(HttpServletRequest request,\n     }\n \n     /**\n-     * Handles a request by serving a static file from Webpack when in\n-     * npm-dev-mode, or from a WebJar when in bower-dev-mode or from the\n-     * file-system when in production.\n+     * Handles a request by serving a static file from the dev server or from\n+     * the file-system.\n      *\n      * It's not done via {@link VaadinService} handlers because static requests\n      * do not need a established session.\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/auth/ViewAccessChecker.java b/flow-server/src/main/java/com/vaadin/flow/server/auth/ViewAccessChecker.java\ndeleted file mode 100644\nindex ce96e6e3ee4..00000000000\n--- a/flow-server/src/main/java/com/vaadin/flow/server/auth/ViewAccessChecker.java\n+++ /dev/null\n@@ -1,340 +0,0 @@\n-/*\n- * Copyright 2000-2025 Vaadin Ltd.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n- * use this file except in compliance with the License. You may obtain a copy of\n- * the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package com.vaadin.flow.server.auth;\n-\n-import jakarta.annotation.security.DenyAll;\n-import jakarta.annotation.security.PermitAll;\n-import jakarta.annotation.security.RolesAllowed;\n-import jakarta.servlet.http.HttpSession;\n-\n-import java.lang.reflect.AnnotatedElement;\n-import java.security.Principal;\n-import java.util.Objects;\n-import java.util.function.Function;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import com.vaadin.flow.component.Component;\n-import com.vaadin.flow.router.AccessDeniedException;\n-import com.vaadin.flow.router.BeforeEnterEvent;\n-import com.vaadin.flow.router.BeforeEnterListener;\n-import com.vaadin.flow.router.Location;\n-import com.vaadin.flow.router.NotFoundException;\n-import com.vaadin.flow.router.RouteParameters;\n-import com.vaadin.flow.server.VaadinRequest;\n-import com.vaadin.flow.server.VaadinService;\n-import com.vaadin.flow.server.VaadinServletRequest;\n-\n-/**\n- * Checks access to views using an {@link AccessAnnotationChecker}.\n- * <p>\n- * An instance of this class should be added as a {@link BeforeEnterListener} to\n- * the {@link com.vaadin.flow.component.UI} of interest.\n- *\n- * @deprecated for annotation based view security use\n- *             {@link NavigationAccessControl} with\n- *             {@link AnnotatedViewAccessChecker}.\n- */\n-@Deprecated(forRemoval = true, since = \"24.3\")\n-public class ViewAccessChecker implements BeforeEnterListener {\n-\n-    public static final String SESSION_STORED_REDIRECT = ViewAccessChecker.class\n-            .getName() + \".redirect\";\n-    public static final String SESSION_STORED_REDIRECT_ABSOLUTE = ViewAccessChecker.class\n-            .getName() + \".redirectAbsolute\";\n-    private final AccessAnnotationChecker accessAnnotationChecker;\n-    private Class<? extends Component> loginView;\n-    private String loginUrl;\n-    private boolean enabled = false;\n-\n-    /**\n-     * Creates an instance.\n-     * <p>\n-     * Note that the access checker is enabled by default. If this isn't\n-     * desired, one can use {@link #ViewAccessChecker(boolean)} with {@code\n-     * enabled=false} and call {@link #enable()} later on whenever appropriate.\n-     */\n-    public ViewAccessChecker() {\n-        this(true);\n-    }\n-\n-    /**\n-     * Creates an instance and enables access checker depending on the given\n-     * flag.\n-     *\n-     * @param enabled\n-     *            {@code false} for disabling the access checker, {@code\n-     * true} for enabling the access checker.\n-     */\n-    public ViewAccessChecker(boolean enabled) {\n-        this(new AccessAnnotationChecker());\n-        this.enabled = enabled;\n-    }\n-\n-    /**\n-     * Creates an instance using the given checker.\n-     * <p>\n-     * Note that the access checker is disabled by default and can be enabled\n-     * using {@link #enable()}. You should also set the login view to use using\n-     * {@link #setLoginView(Class)} or {@link #setLoginView(String)}\n-     *\n-     * @param accessAnnotationChecker\n-     *            the checker to use\n-     */\n-    protected ViewAccessChecker(\n-            AccessAnnotationChecker accessAnnotationChecker) {\n-        this.accessAnnotationChecker = accessAnnotationChecker;\n-    }\n-\n-    /**\n-     * Enables the access checker.\n-     * <p>\n-     * This must be called for the access checker to perform any checks. By\n-     * default the access checker is disabled.\n-     */\n-    public void enable() {\n-        this.enabled = true;\n-    }\n-\n-    /**\n-     * Sets the Flow login view to use.\n-     * <p>\n-     * The login view can only be set once and cannot be changed afterwards.\n-     * <p>\n-     * Note that the access checker needs to be separately enabled using\n-     * {@link #enable()}\n-     *\n-     * @param loginView\n-     *            the Flow view to use as login view\n-     */\n-    public void setLoginView(Class<? extends Component> loginView) {\n-        throwIfLoginViewSet();\n-        this.loginView = loginView;\n-    }\n-\n-    /**\n-     * Sets the frontend login view to use.\n-     * <p>\n-     * The login view can only be set once and cannot be changed afterwards.\n-     * <p>\n-     * Note that the access checker needs to be separately enabled using\n-     * {@link #enable()}\n-     *\n-     * @param loginUrl\n-     *            the frontend view to use as login view\n-     */\n-    public void setLoginView(String loginUrl) {\n-        throwIfLoginViewSet();\n-        this.loginUrl = loginUrl;\n-    }\n-\n-    private void throwIfLoginViewSet() {\n-        if (this.loginUrl != null) {\n-            throw new IllegalStateException(\n-                    \"Already using \" + this.loginUrl + \" as the login view\");\n-        }\n-        if (this.loginView != null) {\n-            throw new IllegalStateException(\"Already using \"\n-                    + this.loginView.getName() + \" as the login view\");\n-        }\n-    }\n-\n-    @Override\n-    public void beforeEnter(BeforeEnterEvent beforeEnterEvent) {\n-        if (!enabled) {\n-            return;\n-        }\n-        Class<?> targetView = beforeEnterEvent.getNavigationTarget();\n-        VaadinRequest request = VaadinRequest.getCurrent();\n-\n-        Principal principal = getPrincipal(request);\n-        Function<String, Boolean> rolesChecker = getRolesChecker(request);\n-\n-        getLogger().debug(\"Checking access for view {}\", targetView.getName());\n-        if (loginView != null && targetView == loginView) {\n-            getLogger().debug(\"Allowing access for login view {}\",\n-                    targetView.getName());\n-            return;\n-        }\n-\n-        boolean hasAccess = accessAnnotationChecker.hasAccess(targetView,\n-                principal, rolesChecker);\n-\n-        if (hasAccess) {\n-            getLogger().debug(\"Allowed access to view {}\",\n-                    targetView.getName());\n-            return;\n-        }\n-\n-        getLogger().debug(\"Denied access to view {}\", targetView.getName());\n-        if (principal == null) {\n-            HttpSession session = (request instanceof VaadinServletRequest)\n-                    ? ((VaadinServletRequest) request).getSession()\n-                    : null;\n-            if (session != null) {\n-                VaadinServletRequest servletRequest = (VaadinServletRequest) request;\n-                String servletHostAndPath = servletRequest.getRequestURL()\n-                        .toString();\n-                String viewPathAndParameters = beforeEnterEvent.getLocation()\n-                        .getPathWithQueryParameters();\n-                session.setAttribute(SESSION_STORED_REDIRECT,\n-                        viewPathAndParameters);\n-                session.setAttribute(SESSION_STORED_REDIRECT_ABSOLUTE,\n-                        servletHostAndPath + viewPathAndParameters);\n-            } else {\n-                if (request == null) {\n-                    getLogger().debug(\n-                            \"Unable to store redirect in session because no request is available\");\n-                } else {\n-                    getLogger().debug(\n-                            \"Unable to store redirect in session because request is of type {}\",\n-                            request.getClass().getName());\n-                }\n-            }\n-            if (loginView != null) {\n-                beforeEnterEvent.forwardTo(loginView, true);\n-            } else {\n-                if (loginUrl != null) {\n-                    beforeEnterEvent.forwardToUrl(loginUrl);\n-                } else {\n-                    beforeEnterEvent.rerouteToError(NotFoundException.class);\n-                }\n-            }\n-        } else if (isProductionMode(beforeEnterEvent)) {\n-            // Intentionally does not reveal if the route exists\n-            beforeEnterEvent.rerouteToError(getAccessDeniedException(\n-                    accessAnnotationChecker.getSecurityTarget(targetView)));\n-        } else {\n-            String errorMsg = \"Access denied\";\n-            if (isImplicitlyDenyAllAnnotated(targetView)) {\n-                errorMsg += \". Consider adding one of the following annotations \"\n-                        + \"to make the view accessible: @AnonymousAllowed, \"\n-                        + \"@PermitAll, @RolesAllowed.\";\n-            }\n-            beforeEnterEvent.rerouteToError(getAccessDeniedException(\n-                    accessAnnotationChecker.getSecurityTarget(targetView)),\n-                    errorMsg);\n-        }\n-    }\n-\n-    protected Class<? extends RuntimeException> getAccessDeniedException(\n-            AnnotatedElement securedClass) {\n-        if (securedClass.isAnnotationPresent(AccessDeniedErrorRouter.class)) {\n-            return securedClass.getAnnotation(AccessDeniedErrorRouter.class)\n-                    .rerouteToError();\n-        }\n-        return AccessDeniedException.class;\n-    }\n-\n-    /**\n-     * Gets a function for checking roles for the currently logged in user.\n-     *\n-     * @param request\n-     *            the current request or {@code null} if no request is in\n-     *            progress (e.g. in a background thread)\n-     * @return a function which takes a role name and returns {@code true} if\n-     *         the user is included in that role\n-     */\n-    protected Function<String, Boolean> getRolesChecker(VaadinRequest request) {\n-        if (request == null) {\n-            return role -> false;\n-        }\n-\n-        return request::isUserInRole;\n-    }\n-\n-    /**\n-     * Gets the principal for the currently logged in user.\n-     *\n-     * @param request\n-     *            the current request or {@code null} if no request is in\n-     *            progress (e.g. in a background thread)\n-     * @return a representation of the currently logged in user or {@code null}\n-     *         if no user is currently logged in\n-     *\n-     */\n-    protected Principal getPrincipal(VaadinRequest request) {\n-        if (request == null) {\n-            return null;\n-        }\n-        return request.getUserPrincipal();\n-    }\n-\n-    private boolean isProductionMode(BeforeEnterEvent beforeEnterEvent) {\n-        return beforeEnterEvent.getUI().getSession().getConfiguration()\n-                .isProductionMode();\n-    }\n-\n-    private boolean isImplicitlyDenyAllAnnotated(Class<?> targetView) {\n-        return !(targetView.isAnnotationPresent(DenyAll.class)\n-                || targetView.isAnnotationPresent(PermitAll.class)\n-                || targetView.isAnnotationPresent(RolesAllowed.class));\n-    }\n-\n-    private Logger getLogger() {\n-        return LoggerFactory.getLogger(getClass());\n-    }\n-\n-    /**\n-     * Checks access to the given navigation target.\n-     *\n-     * @param context\n-     *            the navigation context\n-     * @return the result of the access check\n-     */\n-    public AccessCheckResult checkAccess(NavigationContext context) {\n-        if (!enabled) {\n-            return context.allow();\n-        }\n-        if (loginView != null && context.getNavigationTarget() == loginView) {\n-            getLogger().debug(\"Allowing access for login view {}\",\n-                    context.getNavigationTarget().getName());\n-            return context.allow();\n-        }\n-        if (accessAnnotationChecker.hasAccess(context.getNavigationTarget(),\n-                context.getPrincipal(), context::hasRole)) {\n-            return context.allow();\n-        }\n-        return context.deny(\"\");\n-    }\n-\n-    /**\n-     * Creates a new {@link NavigationContext} instance based on the given route\n-     * data and Vaadin service and request.\n-     *\n-     * @param navigationTarget\n-     *            the navigation target class. Not null.\n-     * @param path\n-     *            the path to the navigation target. Not null.\n-     * @param vaadinService\n-     *            the Vaadin service. Not null.\n-     * @param vaadinRequest\n-     *            the Vaadin request.\n-     * @return a new navigation context instance.\n-     */\n-    public NavigationContext createNavigationContext(Class<?> navigationTarget,\n-            String path, VaadinService vaadinService,\n-            VaadinRequest vaadinRequest) {\n-        Objects.requireNonNull(navigationTarget);\n-        Objects.requireNonNull(path);\n-        Objects.requireNonNull(vaadinService);\n-        return new NavigationContext(vaadinService.getRouter(),\n-                navigationTarget, new Location(path), RouteParameters.empty(),\n-                vaadinRequest.getUserPrincipal(),\n-                str -> getRolesChecker(vaadinRequest).apply(str), false);\n-    }\n-}\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java\nindex 74c9233a4fc..8d89716b334 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java\n@@ -129,7 +129,8 @@ public Document getBootstrapPage(BootstrapContext context) {\n                 if (deploymentConfiguration.isProductionMode()) {\n                     // The web-component.html is fetched from the bundle so it\n                     // includes the entry point javascripts\n-                } else if (!deploymentConfiguration.frontendHotdeploy()) {\n+                } else if (deploymentConfiguration\n+                        .getMode() != Mode.DEVELOPMENT_FRONTEND_LIVERELOAD) {\n                     // When running without a frontend server, the\n                     // web-component.html comes\n                     // directly from the frontend folder and the JS\n@@ -451,7 +452,7 @@ private static String getVaadinFilenameIfVaadinScript(Element element) {\n         if (!\"script\".equalsIgnoreCase(element.tagName())) {\n             return null;\n         }\n-        // Injecting a webpack bundle twice can never work.\n+        // Injecting a frontend bundle twice can never work.\n         // The bundle contains web components that register\n         // themselves and loading twice will always cause\n         // custom element conflicts\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/CssBundler.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/CssBundler.java\nindex 95423356a85..9c9f15cd26f 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/CssBundler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/CssBundler.java\n@@ -65,36 +65,6 @@ public class CssBundler {\n \n     private static Pattern urlPattern = Pattern.compile(URL);\n \n-    /**\n-     * Recurse over CSS import and inlines all ot them into a single CSS block.\n-     * <p>\n-     * </p>\n-     * Unresolvable imports are put on the top of the resulting code, because\n-     * {@code @import} statements must come before any other CSS instruction,\n-     * otherwise the import is ignored by the browser.\n-     * <p>\n-     * </p>\n-     * Along with import resolution and code inline, URLs\n-     * ({@code url('image.png')} referencing theme resources rewritten to be\n-     * correctly served by Vaadin at runtime.\n-     *\n-     * @param themeFolder\n-     *            location of theme folder on the filesystem.\n-     * @param cssFile\n-     *            the CSS file to process.\n-     * @return the processed stylesheet content, with inlined imports and\n-     *         rewritten URLs.\n-     * @throws IOException\n-     *             if filesystem resources can not be read.\n-     * @deprecated this method does not resolve theme assets, use\n-     *             {@link #inlineImports(File, File, JsonNode)} instead.\n-     */\n-    @Deprecated\n-    public static String inlineImports(File themeFolder, File cssFile)\n-            throws IOException {\n-        return inlineImports(themeFolder, cssFile, Set.of());\n-    }\n-\n     /**\n      * Recurse over CSS import and inlines all ot them into a single CSS block.\n      * <p>\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendTools.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendTools.java\nindex bef586af1e5..db4c28bf155 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendTools.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendTools.java\n@@ -217,114 +217,6 @@ public FrontendTools(ApplicationConfiguration applicationConfiguration,\n         this(createSettings(applicationConfiguration, projectRoot));\n     }\n \n-    /**\n-     * Creates an instance of the class using the {@code baseDir} as a base\n-     * directory to locate the tools and the directory returned by the\n-     * {@code alternativeDirGetter} as a directory to install tools if they are\n-     * not found and use it as an alternative tools location.\n-     * <p>\n-     * If {@code alternativeDir} is {@code null} tools won't be installed.\n-     *\n-     *\n-     * @param baseDir\n-     *            the base directory to locate the tools, not {@code null}\n-     * @param alternativeDirGetter\n-     *            the getter for a directory where tools will be installed if\n-     *            they are not found globally or in the {@code baseDir}, may be\n-     *            {@code null}\n-     * @param forceAlternativeNode\n-     *            force usage of node executable from alternative directory\n-     * @deprecated use\n-     *             {@link FrontendTools#FrontendTools(FrontendToolsSettings)}\n-     *             instead, as it simplifies configuring the frontend tools and\n-     *             gives the default values to configuration parameters.\n-     */\n-    @Deprecated\n-    public FrontendTools(String baseDir, Supplier<String> alternativeDirGetter,\n-            boolean forceAlternativeNode) {\n-        this(baseDir, alternativeDirGetter, DEFAULT_NODE_VERSION,\n-                URI.create(Platform.guess().getNodeDownloadRoot()),\n-                forceAlternativeNode, false);\n-    }\n-\n-    /**\n-     * Creates an instance of the class using the {@code baseDir} as a base\n-     * directory to locate the tools and the directory returned by the\n-     * {@code alternativeDirGetter} as a directory to install tools if they are\n-     * not found and use it as an alternative tools location.\n-     * <p>\n-     * If {@code alternativeDir} is {@code null} tools won't be installed.\n-     *\n-     *\n-     * @param baseDir\n-     *            the base directory to locate the tools, not {@code null}\n-     * @param alternativeDirGetter\n-     *            the getter for a directory where tools will be installed if\n-     *            they are not found globally or in the {@code baseDir}, may be\n-     *            {@code null}\n-     * @param nodeVersion\n-     *            The Node.js version to be used when Node.js is installed\n-     *            automatically by Vaadin, for example <code>\"v16.0.0\"</code>.\n-     *            Use {@value #DEFAULT_NODE_VERSION} by default.\n-     * @param nodeDownloadRoot\n-     *            Download Node.js from this URL. Handy in heavily firewalled\n-     *            corporate environments where the Node.js download can be\n-     *            provided from an intranet mirror. Use\n-     *            {@link NodeInstaller#DEFAULT_NODEJS_DOWNLOAD_ROOT} by default.\n-     * @deprecated use\n-     *             {@link FrontendTools#FrontendTools(FrontendToolsSettings)}\n-     *             instead, as it simplifies configuring the frontend tools and\n-     *             gives the default values to configuration parameters.\n-     */\n-    @Deprecated\n-    public FrontendTools(String baseDir, Supplier<String> alternativeDirGetter,\n-            String nodeVersion, URI nodeDownloadRoot) {\n-        this(baseDir, alternativeDirGetter, nodeVersion, nodeDownloadRoot,\n-                false, false);\n-    }\n-\n-    /**\n-     * Creates an instance of the class using the {@code baseDir} as a base\n-     * directory to locate the tools and the directory returned by the\n-     * {@code alternativeDirGetter} as a directory to install tools if they are\n-     * not found and use it as an alternative tools location.\n-     * <p>\n-     * If {@code alternativeDir} is {@code null} tools won't be installed.\n-     *\n-     *\n-     * @param baseDir\n-     *            the base directory to locate the tools, not {@code null}\n-     * @param alternativeDirGetter\n-     *            the getter for a directory where tools will be installed if\n-     *            they are not found globally or in the {@code baseDir}, may be\n-     *            {@code null}\n-     * @param nodeVersion\n-     *            The Node.js version to be used when Node.js is installed\n-     *            automatically by Vaadin, for example <code>\"v16.0.0\"</code>.\n-     *            Use {@value #DEFAULT_NODE_VERSION} by default.\n-     * @param nodeDownloadRoot\n-     *            Download Node.js from this URL. Handy in heavily firewalled\n-     *            corporate environments where the Node.js download can be\n-     *            provided from an intranet mirror. Use\n-     *            {@link NodeInstaller#DEFAULT_NODEJS_DOWNLOAD_ROOT} by default.\n-     * @param forceAlternativeNode\n-     *            force usage of node executable from alternative directory\n-     * @param useGlobalPnpm\n-     *            use globally installed pnpm instead of the default one (see\n-     *            {@link #DEFAULT_PNPM_VERSION})\n-     * @deprecated use\n-     *             {@link FrontendTools#FrontendTools(FrontendToolsSettings)}\n-     *             instead, as it simplifies configuring the frontend tools and\n-     *             gives the default values to configuration parameters.\n-     */\n-    @Deprecated\n-    public FrontendTools(String baseDir, Supplier<String> alternativeDirGetter,\n-            String nodeVersion, URI nodeDownloadRoot,\n-            boolean forceAlternativeNode, boolean useGlobalPnpm) {\n-        this(baseDir, alternativeDirGetter, nodeVersion, nodeDownloadRoot,\n-                forceAlternativeNode, useGlobalPnpm, false);\n-    }\n-\n     /**\n      * Creates an instance of the class using the {@code baseDir} as a base\n      * directory to locate the tools and the directory returned by the\n@@ -830,7 +722,10 @@ public Path getNpmPackageExecutable(String packageName, String binName,\n      * https://github.com/vaadin/flow/issues/12649\n      *\n      * @return the flags\n+     * @deprecated Webpack is not used anymore, this method is obsolete and have\n+     *             no replacements.\n      */\n+    @Deprecated(forRemoval = true, since = \"24.8\")\n     public Map<String, String> getWebpackNodeEnvironment() {\n         Map<String, String> environment = new HashMap<>();\n         ProcessBuilder processBuilder = new ProcessBuilder()\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java\nindex eefd3cd216c..e3c6cb14815 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java\n@@ -32,7 +32,6 @@\n import java.util.function.Supplier;\n import java.util.stream.Collectors;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.FileUtils;\n@@ -219,7 +218,7 @@ ObjectNode getPackageJson() throws IOException {\n \n         addDefaultObjects(packageJson);\n         addVaadinDefaultsToJson(packageJson);\n-        removeWebpackPlugins(packageJson);\n+        removePlugins(packageJson);\n \n         return packageJson;\n     }\n@@ -229,7 +228,7 @@ private void addDefaultObjects(ObjectNode json) {\n         computeIfAbsent(json, DEV_DEPENDENCIES, JacksonUtils::createObjectNode);\n     }\n \n-    private void removeWebpackPlugins(ObjectNode packageJson) {\n+    private void removePlugins(ObjectNode packageJson) {\n         Path targetFolder = Paths.get(options.getNpmFolder().toString(),\n                 options.getBuildDirectoryName(),\n                 FrontendPluginsUtil.PLUGIN_TARGET);\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/Options.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/Options.java\nindex ac4f4f16cff..aaadc37d5e5 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/Options.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/Options.java\n@@ -216,27 +216,6 @@ public Options withBuildResultFolders(File webappResourcesDirectory,\n         return this;\n     }\n \n-    /**\n-     * Sets the webpack related properties.\n-     *\n-     * @param webappResourcesDirectory\n-     *            the directory to set for webpack to output its build results,\n-     *            meant for serving from context root.\n-     * @param resourceOutputDirectory\n-     *            the directory to output generated non-served resources, such\n-     *            as the \"config/stats.json\" stats file, and the\n-     *            \"config/flow-build-info.json\" token file.\n-     * @return this builder\n-     * @deprecated to be removed, use\n-     *             {@link #withBuildResultFolders(File, File)} instead.\n-     */\n-    @Deprecated(since = \"24.4\", forRemoval = true)\n-    public Options withWebpack(File webappResourcesDirectory,\n-            File resourceOutputDirectory) {\n-        return withBuildResultFolders(webappResourcesDirectory,\n-                resourceOutputDirectory);\n-    }\n-\n     /**\n      * Sets whether to enable packages and frontend file updates. Default is\n      * <code>true</code>.\n@@ -251,20 +230,8 @@ public Options enablePackagesUpdate(boolean enablePackagesUpdate) {\n         return this;\n     }\n \n-    /**\n-     * Sets whether to perform always perform clean up procedure. Default is\n-     * <code>false</code>. When the value is false, npm related files will only\n-     * be removed when a platform version update is detected.\n-     *\n-     * This method is only for tests.\n-     *\n-     * @param forceClean\n-     *            <code>true</code> to clean npm files always, otherwise\n-     *            <code>false</code>\n-     * @return this builder\n-     */\n-    @Deprecated\n-    public Options enableNpmFileCleaning(boolean forceClean) {\n+    // Visible only for tests\n+    Options enableNpmFileCleaning(boolean forceClean) {\n         this.cleanNpmFiles = forceClean;\n         return this;\n     }\n@@ -787,14 +754,6 @@ public boolean isEnableConfigUpdate() {\n         return enableConfigUpdate;\n     }\n \n-    /**\n-     * @deprecated use {@link #isEnableConfigUpdate()}\n-     */\n-    @Deprecated(since = \"24.4\", forRemoval = true)\n-    public boolean isEnableWebpackConfigUpdate() {\n-        return isEnableConfigUpdate();\n-    }\n-\n     public boolean isRunNpmInstall() {\n         return runNpmInstall;\n     }\n@@ -807,6 +766,11 @@ public boolean isGenerateEmbeddableWebComponents() {\n         return generateEmbeddableWebComponents;\n     }\n \n+    /**\n+     * @deprecated used internally only for testing, to be removed without a\n+     *             replacement.\n+     */\n+    @Deprecated(since = \"25.0\", forRemoval = true)\n     public boolean isCleanNpmFiles() {\n         return cleanNpmFiles;\n     }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallFrontendBuildPlugins.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallFrontendBuildPlugins.java\nindex 171e471b672..0590f2a1b6b 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallFrontendBuildPlugins.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallFrontendBuildPlugins.java\n@@ -32,8 +32,8 @@\n import static com.vaadin.flow.server.frontend.FrontendPluginsUtil.PLUGIN_TARGET;\n \n /**\n- * Task that installs any Flow webpack plugins into node_modules/@vaadin for use\n- * with webpack compilation.\n+ * Task that installs any Flow frontend plugins into node_modules/@vaadin for\n+ * use with frontend compilation.\n  * <p>\n  * Plugins are copied to <code>{build directory}/plugins</code> and linked to\n  * <code>@vaadin/{plugin name}</code> in node_modules by using (p)npm install.\n@@ -44,11 +44,11 @@\n  */\n public class TaskInstallFrontendBuildPlugins implements FallibleCommand {\n \n-    private File targetFolder;\n+    private final File targetFolder;\n \n     /**\n-     * Copy Flow webpack plugins into <code>PLUGIN_TARGET</code> under the build\n-     * directory.\n+     * Copy Flow frontend plugins into <code>PLUGIN_TARGET</code> under the\n+     * build directory.\n      *\n      * @param options\n      *            the task options\n@@ -64,7 +64,7 @@ public void execute() {\n                 generatePluginFiles(plugin);\n             } catch (IOException ioe) {\n                 throw new UncheckedIOException(\n-                        \"Installation of Flow webpack plugin '\" + plugin\n+                        \"Installation of Flow frontend plugin '\" + plugin\n                                 + \"' failed\",\n                         ioe);\n             }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunNpmInstall.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunNpmInstall.java\nindex 5cc4b4b66d7..dce93029a8e 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunNpmInstall.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunNpmInstall.java\n@@ -70,7 +70,7 @@ public class TaskRunNpmInstall implements FallibleCommand {\n             + \"%n 2) Manually installing a newer version of npx: npm install -g npx\"\n             + \"%n 3) Manually installing a newer version of pnpm: npm install -g pnpm\"\n             + \"%n 4) Deleting the following files from your Vaadin project's folder (if present):\"\n-            + \"%n        node_modules, package-lock.json, webpack.generated.js, pnpm-lock.yaml\"\n+            + \"%n        node_modules, package-lock.json, vite.generated.ts, webpack.generated.js, pnpm-lock.yaml\"\n             + \"%n======================================================================================================%n\";\n \n     private final NodeUpdater packageUpdater;\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TypeScriptBootstrapModifier.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TypeScriptBootstrapModifier.java\nindex a9c1ce3d607..d1fd056ac0d 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TypeScriptBootstrapModifier.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TypeScriptBootstrapModifier.java\n@@ -11,37 +11,6 @@\n  */\n public interface TypeScriptBootstrapModifier extends Serializable {\n \n-    /**\n-     * Modifies the bootstrap typescript by mutating the parameter.\n-     *\n-     * @param bootstrapTypeScript\n-     *            the input typescript split into lines\n-     * @param productionMode\n-     *            true if building for production, false otherwise\n-     * @deprecated use {@link #modify(List, boolean, ThemeDefinition)} instead\n-     */\n-    @Deprecated\n-    default void modify(List<String> bootstrapTypeScript,\n-            boolean productionMode) {\n-\n-    }\n-\n-    /**\n-     * Modifies the bootstrap typescript by mutating the parameter.\n-     *\n-     * @param bootstrapTypeScript\n-     *            the input typescript split into lines\n-     * @param productionMode\n-     *            true if building for production, false otherwise\n-     * @param themeDefinition\n-     *            the theme used by the application\n-     */\n-    @Deprecated\n-    default void modify(List<String> bootstrapTypeScript,\n-            boolean productionMode, ThemeDefinition themeDefinition) {\n-        modify(bootstrapTypeScript, productionMode);\n-    }\n-\n     /**\n      * Modifies the bootstrap typescript by mutating the parameter.\n      *\n@@ -54,8 +23,6 @@ default void modify(List<String> bootstrapTypeScript,\n      */\n     default void modify(List<String> bootstrapTypeScript, Options options,\n             FrontendDependenciesScanner frontendDependenciesScanner) {\n-        modify(bootstrapTypeScript, options.isProductionMode(),\n-                frontendDependenciesScanner.getThemeDefinition());\n     }\n \n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java\nindex b91bde33c3b..f5b12b8544f 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java\n@@ -102,65 +102,6 @@ public class FrontendDependencies extends AbstractDependenciesScanner {\n     private Class<? extends Annotation> routeClass;\n     private Set<String> eagerRoutes = null;\n \n-    /**\n-     * Default Constructor.\n-     *\n-     * @param finder\n-     *            the class finder\n-     * @deprecated Use\n-     *             {@link FrontendDependencies#FrontendDependencies(ClassFinder, boolean, FeatureFlags, boolean)}\n-     *             instead.\n-     */\n-    @Deprecated\n-    public FrontendDependencies(ClassFinder finder) {\n-        this(finder, true, null);\n-    }\n-\n-    /**\n-     * Secondary constructor, which allows declaring whether embeddable web\n-     * components should be checked for resource dependencies.\n-     *\n-     * @param finder\n-     *            the class finder\n-     * @param generateEmbeddableWebComponents\n-     *            {@code true} checks the\n-     *            {@link com.vaadin.flow.component.WebComponentExporter} classes\n-     *            for dependencies. {@code true} is default for\n-     *            {@link FrontendDependencies#FrontendDependencies(ClassFinder)}\n-     * @deprecated Use\n-     *             {@link FrontendDependencies#FrontendDependencies(ClassFinder, boolean, FeatureFlags, boolean)}\n-     *             instead.\n-     */\n-    @Deprecated\n-    public FrontendDependencies(ClassFinder finder,\n-            boolean generateEmbeddableWebComponents) {\n-        this(finder, generateEmbeddableWebComponents, null);\n-    }\n-\n-    /**\n-     * Tertiary constructor, which allows declaring whether embeddable web\n-     * components should be checked for resource dependencies.\n-     *\n-     * @param finder\n-     *            the class finder\n-     * @param generateEmbeddableWebComponents\n-     *            {@code true} checks the\n-     *            {@link com.vaadin.flow.component.WebComponentExporter} classes\n-     *            for dependencies. {@code true} is default for\n-     *            {@link FrontendDependencies#FrontendDependencies(ClassFinder)}\n-     * @param featureFlags\n-     *            available feature flags and their status\n-     * @deprecated Use\n-     *             {@link FrontendDependencies#FrontendDependencies(ClassFinder, boolean, FeatureFlags, boolean)}\n-     *             instead.\n-     */\n-    @Deprecated\n-    public FrontendDependencies(ClassFinder finder,\n-            boolean generateEmbeddableWebComponents,\n-            FeatureFlags featureFlags) {\n-        this(finder, generateEmbeddableWebComponents, featureFlags, true);\n-    }\n-\n     public FrontendDependencies(ClassFinder finder,\n             boolean generateEmbeddableWebComponents, FeatureFlags featureFlags,\n             boolean reactEnabled) {\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesScanner.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesScanner.java\nindex 79bc5eb3602..573f014d7a5 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesScanner.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesScanner.java\n@@ -45,62 +45,6 @@ public interface FrontendDependenciesScanner extends Serializable {\n      */\n     class FrontendDependenciesScannerFactory {\n \n-        /**\n-         * Produces scanner implementation based on {@code allDependenciesScan}\n-         * value.\n-         * <p>\n-         *\n-         * @param allDependenciesScan\n-         *            if {@code true} then full classpath scanning strategy is\n-         *            used, otherwise byte scanning strategy is produced\n-         * @param finder\n-         *            a class finder\n-         * @param generateEmbeddableWebComponents\n-         *            checks {@code WebComponentExporter} classes for\n-         *            dependencies if {@code true}, doesn't check otherwise\n-         * @return a scanner implementation strategy\n-         * @deprecated Use\n-         *             {@link FrontendDependenciesScannerFactory#createScanner(boolean, ClassFinder, boolean, FeatureFlags, boolean)}\n-         *             instead.\n-         */\n-        @Deprecated\n-        public FrontendDependenciesScanner createScanner(\n-                boolean allDependenciesScan, ClassFinder finder,\n-                boolean generateEmbeddableWebComponents) {\n-            return createScanner(allDependenciesScan, finder,\n-                    generateEmbeddableWebComponents, null);\n-        }\n-\n-        /**\n-         * Produces scanner implementation based on {@code allDependenciesScan}\n-         * value.\n-         * <p>\n-         *\n-         * @param allDependenciesScan\n-         *            if {@code true} then full classpath scanning strategy is\n-         *            used, otherwise byte scanning strategy is produced\n-         * @param finder\n-         *            a class finder\n-         * @param generateEmbeddableWebComponents\n-         *            checks {@code WebComponentExporter} classes for\n-         *            dependencies if {@code true}, doesn't check otherwise\n-         * @param featureFlags\n-         *            available feature flags and their status\n-         * @return a scanner implementation strategy\n-         *\n-         * @deprecated Use\n-         *             {@link FrontendDependenciesScannerFactory#createScanner(boolean, ClassFinder, boolean, FeatureFlags, boolean)}\n-         *             instead.\n-         */\n-        @Deprecated\n-        public FrontendDependenciesScanner createScanner(\n-                boolean allDependenciesScan, ClassFinder finder,\n-                boolean generateEmbeddableWebComponents,\n-                FeatureFlags featureFlags) {\n-            return createScanner(allDependenciesScan, finder,\n-                    generateEmbeddableWebComponents, featureFlags, true);\n-        }\n-\n         /**\n          * Produces scanner implementation based on {@code allDependenciesScan}\n          * value.\n@@ -136,25 +80,6 @@ public FrontendDependenciesScanner createScanner(\n             }\n         }\n \n-        /**\n-         * Produces scanner implementation based on the given Options object.\n-         *\n-         * @param options\n-         *            Options to build the scanner from\n-         * @return a scanner implementation strategy\n-         * @deprecated Use\n-         *             {@link FrontendDependenciesScannerFactory#createScanner(boolean, ClassFinder, boolean, FeatureFlags, boolean)}\n-         *             instead.\n-         */\n-        @Deprecated\n-        public FrontendDependenciesScanner createScanner(Options options) {\n-            boolean reactEnabled = options.isReactEnabled() && FrontendUtils\n-                    .isReactRouterRequired(options.getFrontendDirectory());\n-            return createScanner(!options.isUseByteCodeScanner(),\n-                    options.getClassFinder(),\n-                    options.isGenerateEmbeddableWebComponents(),\n-                    options.getFeatureFlags(), reactEnabled);\n-        }\n     }\n \n     /**\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/menu/AvailableViewInfo.java b/flow-server/src/main/java/com/vaadin/flow/server/menu/AvailableViewInfo.java\nindex 4a02481d124..5800f283011 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/menu/AvailableViewInfo.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/menu/AvailableViewInfo.java\n@@ -73,16 +73,6 @@ public record AvailableViewInfo(String title, String[] rolesAllowed,\n         implements\n             Serializable {\n \n-    @Deprecated(forRemoval = true)\n-    public AvailableViewInfo(String title, String[] rolesAllowed,\n-            boolean loginRequired, String route, boolean lazy, boolean register,\n-            MenuData menu, List<AvailableViewInfo> children,\n-            @JsonProperty(\"params\") Map<String, RouteParamType> routeParameters,\n-            boolean flowLayout) {\n-        this(title, rolesAllowed, loginRequired, route, lazy, register, menu,\n-                children, routeParameters, flowLayout, null);\n-    }\n-\n     @Override\n     public boolean equals(final Object o) {\n         if (this == o) {\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java b/flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java\nindex 9e99b154f23..bb5a3244b78 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java\n@@ -53,7 +53,6 @@\n import static com.vaadin.flow.server.InitParameters.NODE_VERSION;\n import static com.vaadin.flow.server.InitParameters.NPM_EXCLUDE_WEB_COMPONENTS;\n import static com.vaadin.flow.server.InitParameters.REACT_ENABLE;\n-import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_ENABLE_DEV_SERVER;\n import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_INITIAL_UIDL;\n import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_PRODUCTION_MODE;\n import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_REUSE_DEV_SERVER;\n@@ -138,9 +137,6 @@ protected Map<String, String> getConfigParametersUsingTokenData(\n         if (buildInfo.has(FRONTEND_HOTDEPLOY)) {\n             params.put(FRONTEND_HOTDEPLOY, String\n                     .valueOf(buildInfo.get(FRONTEND_HOTDEPLOY).booleanValue()));\n-        } else if (buildInfo.has(SERVLET_PARAMETER_ENABLE_DEV_SERVER)) {\n-            params.put(FRONTEND_HOTDEPLOY, String.valueOf(buildInfo\n-                    .get(SERVLET_PARAMETER_ENABLE_DEV_SERVER).booleanValue()));\n         }\n         if (buildInfo.has(SERVLET_PARAMETER_REUSE_DEV_SERVER)) {\n             params.put(SERVLET_PARAMETER_REUSE_DEV_SERVER,\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactory.java b/flow-server/src/main/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactory.java\nindex afab3552a52..65f7980f201 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactory.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactory.java\n@@ -178,7 +178,7 @@ protected String getTokenFileFromClassloader(VaadinContext context)\n     }\n \n     /**\n-     * Check if the webpack.generated.js resources is inside 2 jars\n+     * Check if the vite.generated.ts resources is inside 2 jars\n      * (flow-server.jar and application.jar) if this is the case then we can\n      * accept a build info file from inside jar with a single jar in the path.\n      * <p>\n\ndiff --git a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/startup/DevModeInitializer.java b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/startup/DevModeInitializer.java\nindex ecd1b2bee94..fb38710b311 100644\n--- a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/startup/DevModeInitializer.java\n+++ b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/startup/DevModeInitializer.java\n@@ -167,34 +167,6 @@ private static Set<String> calculateApplicableClassNames() {\n                     + Constants.COMPATIBILITY_RESOURCES_FRONTEND_DEFAULT\n                     + \"/?$\");\n \n-    /**\n-     * Initialize the devmode server if not in production mode or compatibility\n-     * mode.\n-     * <p>\n-     * </p>\n-     * Uses common ForkJoin pool to execute asynchronous tasks. It is\n-     * recommended to use\n-     * {@link #initDevModeHandler(Set, VaadinContext, Executor)} and provide a a\n-     * custom executor if initialization starts long-running tasks.\n-     *\n-     * @param classes\n-     *            classes to check for npm- and js modules\n-     * @param context\n-     *            VaadinContext we are running in\n-     * @return the initialized dev mode handler or {@code null} if none was\n-     *         created\n-     *\n-     * @throws VaadinInitializerException\n-     *             if dev mode can't be initialized\n-     * @deprecated use {@link #initDevModeHandler(Set, VaadinContext, Executor)}\n-     *             providing a custom executor.\n-     */\n-    @Deprecated(forRemoval = true)\n-    public static DevModeHandler initDevModeHandler(Set<Class<?>> classes,\n-            VaadinContext context) throws VaadinInitializerException {\n-        return initDevModeHandler(classes, context, ForkJoinPool.commonPool());\n-    }\n-\n     /**\n      * Initialize the devmode server if not in production mode or compatibility\n      * mode.\n\ndiff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringVaadinServletService.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringVaadinServletService.java\nindex 843ad63cf43..8149b3991e9 100644\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringVaadinServletService.java\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringVaadinServletService.java\n@@ -37,10 +37,8 @@\n import com.vaadin.flow.function.DeploymentConfiguration;\n import com.vaadin.flow.server.ServiceException;\n import com.vaadin.flow.server.UIInitListener;\n-import com.vaadin.flow.server.VaadinRequest;\n import com.vaadin.flow.server.VaadinServlet;\n import com.vaadin.flow.server.VaadinServletService;\n-import com.vaadin.flow.server.VaadinSession;\n import com.vaadin.flow.spring.annotation.VaadinTaskExecutor;\n \n /**\n@@ -175,13 +173,6 @@ public void init() throws ServiceException {\n         uiInitListeners.values().forEach(this::addUIInitListener);\n     }\n \n-    // This method should be removed when the deprecated class\n-    // SpringVaadinSession is removed\n-    @Override\n-    protected VaadinSession createVaadinSession(VaadinRequest request) {\n-        return new SpringVaadinSession(this);\n-    }\n-\n     @Override\n     public URL getStaticResource(String path) {\n         URL resource = super.getStaticResource(path);\n\ndiff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringVaadinSession.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringVaadinSession.java\ndeleted file mode 100644\nindex 0826770600b..00000000000\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringVaadinSession.java\n+++ /dev/null\n@@ -1,67 +0,0 @@\n-/*\n- * Copyright 2000-2025 Vaadin Ltd.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n- * use this file except in compliance with the License. You may obtain a copy of\n- * the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package com.vaadin.flow.spring;\n-\n-import com.vaadin.flow.server.SessionDestroyListener;\n-import com.vaadin.flow.server.VaadinService;\n-import com.vaadin.flow.server.VaadinSession;\n-\n-/**\n- * Vaadin session implementation for Spring.\n- *\n- * @author Vaadin Ltd\n- * @deprecated No replacement planned\n- */\n-@Deprecated(forRemoval = true)\n-public class SpringVaadinSession extends VaadinSession {\n-\n-    /**\n-     * Creates a new SpringVaadinSession tied to a VaadinService.\n-     *\n-     * @param service\n-     *            the Vaadin service for the new session\n-     */\n-    public SpringVaadinSession(VaadinService service) {\n-        super(service);\n-    }\n-\n-    /**\n-     * Handles destruction of the session.\n-     */\n-    public void fireSessionDestroy() {\n-        getService().fireSessionDestroy(this);\n-    }\n-\n-    /**\n-     * Adds a listener that gets notified when the Vaadin service session is\n-     * destroyed.\n-     * <p>\n-     * No need to remove the listener since all listeners are removed\n-     * automatically once session is destroyed\n-     * <p>\n-     * The session being destroyed is locked and its UIs have been removed when\n-     * the listeners are called.\n-     *\n-     * @see VaadinService#addSessionInitListener(SessionInitListener)\n-     *\n-     * @param listener\n-     *            the vaadin service session destroy listener\n-     */\n-    public void addDestroyListener(SessionDestroyListener listener) {\n-        this.addSessionDestroyListener(listener);\n-    }\n-\n-}\n\ndiff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringViewAccessChecker.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringViewAccessChecker.java\ndeleted file mode 100644\nindex 2b85c827a32..00000000000\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringViewAccessChecker.java\n+++ /dev/null\n@@ -1,70 +0,0 @@\n-package com.vaadin.flow.spring;\n-\n-import java.security.Principal;\n-import java.util.Optional;\n-import java.util.function.Function;\n-\n-import com.vaadin.flow.di.Lookup;\n-import com.vaadin.flow.server.VaadinRequest;\n-import com.vaadin.flow.server.VaadinService;\n-import com.vaadin.flow.server.auth.AccessAnnotationChecker;\n-import com.vaadin.flow.server.auth.ViewAccessChecker;\n-import com.vaadin.flow.spring.security.VaadinRolePrefixHolder;\n-\n-/**\n- * A Spring specific view access checker that falls back to Spring mechanisms\n- * when the generic mechanisms do not work.\n- *\n- * @deprecated ViewAccessChecker has been replaced by\n- *             {@link com.vaadin.flow.server.auth.NavigationAccessControl}.\n- */\n-@Deprecated(forRemoval = true, since = \"24.3\")\n-public class SpringViewAccessChecker extends ViewAccessChecker {\n-\n-    /**\n-     * Creates an instance with the given annotation checker.\n-     *\n-     * The created instance is disabled by default.\n-     *\n-     * @param accessAnnotationChecker\n-     *            the annotation checker to use\n-     *\n-     * @see #enable()\n-     */\n-    public SpringViewAccessChecker(\n-            AccessAnnotationChecker accessAnnotationChecker) {\n-        super(accessAnnotationChecker);\n-    }\n-\n-    @Override\n-    protected Principal getPrincipal(VaadinRequest request) {\n-        if (request == null) {\n-            return AuthenticationUtil.getSecurityHolderAuthentication();\n-        }\n-        return super.getPrincipal(request);\n-    }\n-\n-    @Override\n-    protected Function<String, Boolean> getRolesChecker(VaadinRequest request) {\n-        if (request == null) {\n-            return Optional.ofNullable(VaadinService.getCurrent())\n-                    .map(service -> service.getContext()\n-                            .getAttribute(Lookup.class))\n-                    .map(lookup -> lookup.lookup(VaadinRolePrefixHolder.class))\n-                    .map(VaadinRolePrefixHolder::getRolePrefix)\n-                    .map(AuthenticationUtil::getSecurityHolderRoleChecker)\n-                    .orElseGet(\n-                            AuthenticationUtil::getSecurityHolderRoleChecker);\n-        }\n-\n-        // Update active role prefix if it's not set yet.\n-        Optional.ofNullable(VaadinService.getCurrent())\n-                .map(service -> service.getContext().getAttribute(Lookup.class))\n-                .map(lookup -> lookup.lookup(VaadinRolePrefixHolder.class))\n-                .filter(prefixHolder -> !prefixHolder.isSet()).ifPresent(\n-                        prefixHolder -> prefixHolder.resetRolePrefix(request));\n-\n-        return super.getRolesChecker(request);\n-    }\n-\n-}\n\ndiff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/VaadinConfigurationProperties.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/VaadinConfigurationProperties.java\nindex 7608ec40628..dca3eb2a914 100644\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/VaadinConfigurationProperties.java\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/VaadinConfigurationProperties.java\n@@ -471,29 +471,6 @@ public void setBlockedPackages(List<String> blockedPackages) {\n         this.blockedPackages = blockedPackages;\n     }\n \n-    /**\n-     * Get a list of packages that are blocked for class scanning.\n-     *\n-     * @return blocked packages\n-     * @deprecated use {@link #getBlockedPackages()}\n-     */\n-    @Deprecated(forRemoval = true)\n-    public List<String> getBlacklistedPackages() {\n-        return Collections.unmodifiableList(blockedPackages);\n-    }\n-\n-    /**\n-     * Set list of packages to ignore for class scanning.\n-     *\n-     * @param blockedPackages\n-     *            list of packages to ignore\n-     * @deprecated use {@link #setBlockedPackages(List)}\n-     */\n-    @Deprecated(forRemoval = true)\n-    public void setBlacklistedPackages(List<String> blockedPackages) {\n-        this.blockedPackages = new ArrayList<>(blockedPackages);\n-    }\n-\n     /**\n      * Get a list of packages that are allowed for class scanning.\n      *\n@@ -514,30 +491,6 @@ public void setAllowedPackages(List<String> allowedPackages) {\n         this.allowedPackages = allowedPackages;\n     }\n \n-    /**\n-     * Get a list of packages that are allowed for class scanning.\n-     *\n-     * @return allowed packages\n-     * @deprecated use {@link #getAllowedPackages()}\n-     */\n-    @Deprecated(forRemoval = true)\n-    public List<String> getWhitelistedPackages() {\n-        return Collections.unmodifiableList(allowedPackages);\n-    }\n-\n-    /**\n-     * Set list of packages to be scanned. If <code>allowedPackages</code> is\n-     * set then <code>blockedPackages</code> is ignored.\n-     *\n-     * @param allowedPackages\n-     *            list of packages to be scanned\n-     * @deprecated use {@link #setAllowedPackages(List)}\n-     */\n-    @Deprecated(forRemoval = true)\n-    public void setWhitelistedPackages(List<String> allowedPackages) {\n-        this.allowedPackages = new ArrayList<>(allowedPackages);\n-    }\n-\n     /**\n      * Get a list of URL patterns that are not handled by the Vaadin servlet\n      * when it is mapped to the context root.\n\ndiff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinSavedRequestAwareAuthenticationSuccessHandler.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinSavedRequestAwareAuthenticationSuccessHandler.java\nindex eb56454c78c..a0274975c01 100644\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinSavedRequestAwareAuthenticationSuccessHandler.java\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinSavedRequestAwareAuthenticationSuccessHandler.java\n@@ -19,7 +19,6 @@\n import jakarta.servlet.http.HttpServletRequest;\n import jakarta.servlet.http.HttpServletResponse;\n import jakarta.servlet.http.HttpSession;\n-\n import java.io.IOException;\n \n import org.springframework.core.log.LogMessage;\n@@ -35,7 +34,6 @@\n \n import com.vaadin.flow.router.BeforeEnterEvent;\n import com.vaadin.flow.server.auth.NavigationAccessControl;\n-import com.vaadin.flow.server.auth.ViewAccessChecker;\n \n /**\n  * A version of {@link SavedRequestAwareAuthenticationSuccessHandler} that\n\ndiff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinWebSecurity.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinWebSecurity.java\nindex 5b3f50a4512..70cdd0d87d7 100644\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinWebSecurity.java\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinWebSecurity.java\n@@ -15,6 +15,10 @@\n  */\n package com.vaadin.flow.spring.security;\n \n+import jakarta.annotation.PostConstruct;\n+import jakarta.servlet.ServletException;\n+import jakarta.servlet.http.HttpServletRequest;\n+import jakarta.servlet.http.HttpServletResponse;\n import javax.crypto.SecretKey;\n import java.io.IOException;\n import java.util.ArrayList;\n@@ -25,10 +29,6 @@\n import java.util.function.Consumer;\n import java.util.stream.Stream;\n \n-import jakarta.annotation.PostConstruct;\n-import jakarta.servlet.ServletException;\n-import jakarta.servlet.http.HttpServletRequest;\n-import jakarta.servlet.http.HttpServletResponse;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -66,13 +66,11 @@\n \n import com.vaadin.flow.component.Component;\n import com.vaadin.flow.internal.AnnotationReader;\n-import com.vaadin.flow.router.BeforeEnterEvent;\n import com.vaadin.flow.router.Route;\n import com.vaadin.flow.router.internal.RouteUtil;\n import com.vaadin.flow.server.HandlerHelper;\n import com.vaadin.flow.server.VaadinServletContext;\n import com.vaadin.flow.server.auth.NavigationAccessControl;\n-import com.vaadin.flow.server.auth.ViewAccessChecker;\n import com.vaadin.flow.spring.security.stateless.VaadinStatelessSecurityConfigurer;\n \n /**\n@@ -710,34 +708,6 @@ protected String applyUrlMapping(String path) {\n         return requestUtil.applyUrlMapping(path);\n     }\n \n-    /**\n-     * Vaadin views access checker bean.\n-     * <p>\n-     * This getter can be used in implementing class to override logic of\n-     * <code>VaadinWebSecurity.setLoginView</code> methods and call\n-     * {@link ViewAccessChecker} methods explicitly.\n-     * <p>\n-     * Note that this bean is a field-autowired, thus this getter returns\n-     * <code>null</code> when called from the constructor of implementing class.\n-     *\n-     * @return {@link ViewAccessChecker} bean used by this VaadinWebSecurity\n-     *         configuration.\n-     * @deprecated ViewAccessChecker is not used anymore by VaadinWebSecurity,\n-     *             and has been replaced by {@link NavigationAccessControl}.\n-     *             Calling this method will get a stub implementation that\n-     *             delegates to the {@link NavigationAccessControl} instance.\n-     */\n-    @Deprecated(forRemoval = true, since = \"24.3\")\n-    protected ViewAccessChecker getViewAccessChecker() {\n-        LoggerFactory.getLogger(getClass()).warn(\n-                \"ViewAccessChecker is not used anymore by VaadinWebSecurity \"\n-                        + \"and has been replaced by NavigationAccessControl. \"\n-                        + \"'VaadinWebSecurity.getViewAccessChecker()' returns a stub instance that \"\n-                        + \"delegates calls to NavigationAccessControl. \"\n-                        + \"Usages of 'getViewAccessChecker()' should be replaced by calls to 'getNavigationAccessControl()'.\");\n-        return new DeprecateViewAccessCheckerDelegator(accessControl);\n-    }\n-\n     /**\n      * Vaadin navigation access control bean.\n      * <p>\n@@ -822,36 +792,4 @@ public void handle(HttpServletRequest request,\n             response.setStatus(HttpStatus.UNAUTHORIZED.value());\n         }\n     }\n-\n-    private static class DeprecateViewAccessCheckerDelegator\n-            extends ViewAccessChecker {\n-\n-        private final NavigationAccessControl accessControl;\n-\n-        public DeprecateViewAccessCheckerDelegator(\n-                NavigationAccessControl acc) {\n-            this.accessControl = acc;\n-        }\n-\n-        @Override\n-        public void enable() {\n-            accessControl.setEnabled(true);\n-        }\n-\n-        @Override\n-        public void setLoginView(Class<? extends Component> loginView) {\n-            accessControl.setLoginView(loginView);\n-        }\n-\n-        @Override\n-        public void setLoginView(String loginUrl) {\n-            accessControl.setLoginView(loginUrl);\n-        }\n-\n-        @Override\n-        public void beforeEnter(BeforeEnterEvent beforeEnterEvent) {\n-            accessControl.beforeEnter(beforeEnterEvent);\n-        }\n-    }\n-\n }\n\ndiff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/ViewAccessCheckerInitializer.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/ViewAccessCheckerInitializer.java\ndeleted file mode 100644\nindex 760f4c200d8..00000000000\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/ViewAccessCheckerInitializer.java\n+++ /dev/null\n@@ -1,43 +0,0 @@\n-/*\n- * Copyright 2000-2025 Vaadin Ltd.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n- * use this file except in compliance with the License. You may obtain a copy of\n- * the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package com.vaadin.flow.spring.security;\n-\n-import org.springframework.beans.factory.annotation.Autowired;\n-\n-import com.vaadin.flow.server.ServiceInitEvent;\n-import com.vaadin.flow.server.VaadinServiceInitListener;\n-import com.vaadin.flow.server.auth.ViewAccessChecker;\n-\n-/**\n- * Helper for checking access to views.\n- *\n- * @deprecated ViewAccessChecker has been replaced by\n- *             {@link com.vaadin.flow.server.auth.NavigationAccessControl}.\n- */\n-@Deprecated(forRemoval = true, since = \"24.3\")\n-public class ViewAccessCheckerInitializer implements VaadinServiceInitListener {\n-\n-    @Autowired\n-    private ViewAccessChecker viewAccessChecker;\n-\n-    @Override\n-    public void serviceInit(ServiceInitEvent serviceInitEvent) {\n-        serviceInitEvent.getSource()\n-                .addUIInitListener(uiInitEvent -> uiInitEvent.getUI()\n-                        .addBeforeEnterListener(viewAccessChecker));\n-    }\n-\n-}\n\ndiff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/stateless/VaadinStatelessSecurityConfigurer.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/stateless/VaadinStatelessSecurityConfigurer.java\nindex 03c72eb1808..7ac2784ea46 100644\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/stateless/VaadinStatelessSecurityConfigurer.java\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/stateless/VaadinStatelessSecurityConfigurer.java\n@@ -93,26 +93,6 @@ public final class VaadinStatelessSecurityConfigurer<H extends HttpSecurityBuild\n \n     private SecretKeyConfigurer secretKeyConfigurer;\n \n-    /**\n-     * Sets {@link JwtSecurityContextRepository} as a shared object to be used\n-     * by multiple {@code SecurityConfigurer}.\n-     *\n-     * @param http\n-     *            the http security builder to store the shared object.\n-     * @deprecated to be removed. There is no direct replacement for this\n-     *             method. Shared object setup must be done along with other\n-     *             required configurations by calling\n-     *             {@link #apply(HttpSecurity, Customizer)}.\n-     * @see #apply(HttpSecurity, Customizer)\n-     */\n-    @Deprecated(since = \"24.4\", forRemoval = true)\n-    public void setSharedObjects(HttpSecurity http) {\n-        JwtSecurityContextRepository jwtSecurityContextRepository = new JwtSecurityContextRepository(\n-                new SerializedJwtSplitCookieRepository());\n-        http.setSharedObject(SecurityContextRepository.class,\n-                jwtSecurityContextRepository);\n-    }\n-\n     /**\n      * Applies configuration required to enable stateless security for a Vaadin\n      * application.\n",
    "test_patch": "diff --git a/flow-data/src/test/java/com/vaadin/flow/data/binder/ValidatorTest.java b/flow-data/src/test/java/com/vaadin/flow/data/binder/ValidatorTest.java\nindex f0a777b46e1..8c5eff08010 100644\n--- a/flow-data/src/test/java/com/vaadin/flow/data/binder/ValidatorTest.java\n+++ b/flow-data/src/test/java/com/vaadin/flow/data/binder/ValidatorTest.java\n@@ -33,7 +33,8 @@ public class ValidatorTest extends ValidatorTestBase {\n     @Test\n     public void alwaysPass() {\n         Validator<String> alwaysPass = Validator.alwaysPass();\n-        ValidationResult result = alwaysPass.apply(\"foo\", new ValueContext());\n+        ValidationResult result = alwaysPass.apply(\"foo\",\n+                new ValueContext(new Binder()));\n         Assert.assertFalse(result.isError());\n     }\n \n@@ -41,10 +42,11 @@ public void alwaysPass() {\n     public void from() {\n         Validator<String> validator = Validator.from(Objects::nonNull,\n                 \"Cannot be null\");\n-        ValidationResult result = validator.apply(null, new ValueContext());\n+        ValidationResult result = validator.apply(null,\n+                new ValueContext(new Binder()));\n         Assert.assertTrue(result.isError());\n \n-        result = validator.apply(\"\", new ValueContext());\n+        result = validator.apply(\"\", new ValueContext(new Binder()));\n         Assert.assertFalse(result.isError());\n     }\n \n\ndiff --git a/flow-data/src/test/java/com/vaadin/flow/data/binder/ValueContextTest.java b/flow-data/src/test/java/com/vaadin/flow/data/binder/ValueContextTest.java\nindex 60af047b979..e1e454751d5 100644\n--- a/flow-data/src/test/java/com/vaadin/flow/data/binder/ValueContextTest.java\n+++ b/flow-data/src/test/java/com/vaadin/flow/data/binder/ValueContextTest.java\n@@ -43,7 +43,7 @@ public class ValueContextTest extends UI {\n     @Test\n     public void locale_from_component() {\n         setLocale(COMPONENT_LOCALE);\n-        ValueContext fromComponent = new ValueContext(textField);\n+        ValueContext fromComponent = new ValueContext(new Binder(), textField);\n         Locale locale = fromComponent.getLocale().orElse(null);\n         Objects.requireNonNull(locale);\n         Assert.assertEquals(\"Unexpected locale from component\",\n@@ -52,7 +52,7 @@ public void locale_from_component() {\n \n     @Test\n     public void locale_from_ui() {\n-        ValueContext fromComponent = new ValueContext(textField);\n+        ValueContext fromComponent = new ValueContext(new Binder(), textField);\n         Locale locale = fromComponent.getLocale().orElse(null);\n         Objects.requireNonNull(locale);\n         Assert.assertEquals(\"Unexpected locale from component\", UI_LOCALE,\n@@ -62,7 +62,7 @@ public void locale_from_ui() {\n     @Test\n     public void default_locale() {\n         setLocale(Locale.getDefault());\n-        ValueContext fromComponent = new ValueContext(textField);\n+        ValueContext fromComponent = new ValueContext(new Binder(), textField);\n         Locale locale = fromComponent.getLocale().orElse(null);\n         Objects.requireNonNull(locale);\n         Assert.assertEquals(\"Unexpected locale from component\",\n@@ -72,23 +72,23 @@ public void default_locale() {\n     @Test\n     public void testHasValue1() {\n         setLocale(Locale.getDefault());\n-        ValueContext fromComponent = new ValueContext(textField);\n+        ValueContext fromComponent = new ValueContext(new Binder(), textField);\n         Assert.assertEquals(textField, fromComponent.getHasValue().get());\n     }\n \n     @Test\n     public void testHasValue2() {\n         setLocale(Locale.getDefault());\n-        ValueContext fromComponent = new ValueContext(new TestDatePicker(),\n-                textField);\n+        ValueContext fromComponent = new ValueContext(new Binder(),\n+                new TestDatePicker(), textField);\n         Assert.assertEquals(textField, fromComponent.getHasValue().get());\n     }\n \n     @Test\n     public void testHasValue3() {\n         setLocale(Locale.getDefault());\n-        ValueContext fromComponent = new ValueContext(new TestDatePicker(),\n-                textField, Locale.CANADA);\n+        ValueContext fromComponent = new ValueContext(new Binder(),\n+                new TestDatePicker(), textField, Locale.CANADA);\n         Assert.assertEquals(textField, fromComponent.getHasValue().get());\n         Assert.assertEquals(Locale.CANADA, fromComponent.getLocale().get());\n     }\n@@ -102,7 +102,7 @@ public void getLocale_localeComesFromComponentUI() {\n \n         Text text = new Text(\"\");\n         ui.add(text);\n-        ValueContext context = new ValueContext(text);\n+        ValueContext context = new ValueContext(new Binder(), text);\n \n         Assert.assertEquals(Locale.GERMAN, context.getLocale().get());\n     }\n\ndiff --git a/flow-data/src/test/java/com/vaadin/flow/data/validator/NotEmptyValidatorTest.java b/flow-data/src/test/java/com/vaadin/flow/data/validator/NotEmptyValidatorTest.java\nindex 7c41926d762..6cbfcdf9d9c 100644\n--- a/flow-data/src/test/java/com/vaadin/flow/data/validator/NotEmptyValidatorTest.java\n+++ b/flow-data/src/test/java/com/vaadin/flow/data/validator/NotEmptyValidatorTest.java\n@@ -18,6 +18,7 @@\n import org.junit.Assert;\n import org.junit.Test;\n \n+import com.vaadin.flow.data.binder.Binder;\n import com.vaadin.flow.data.binder.ValidationResult;\n import com.vaadin.flow.data.binder.ValueContext;\n \n@@ -31,7 +32,8 @@ public class NotEmptyValidatorTest {\n     @Test\n     public void nullValueIsDisallowed() {\n         NotEmptyValidator<String> validator = new NotEmptyValidator<>(\"foo\");\n-        ValidationResult result = validator.apply(null, new ValueContext());\n+        ValidationResult result = validator.apply(null,\n+                new ValueContext(new Binder()));\n         Assert.assertTrue(result.isError());\n         Assert.assertEquals(\"foo\", result.getErrorMessage());\n     }\n@@ -39,7 +41,8 @@ public void nullValueIsDisallowed() {\n     @Test\n     public void emptyValueIsDisallowed() {\n         NotEmptyValidator<String> validator = new NotEmptyValidator<>(\"foo\");\n-        ValidationResult result = validator.apply(\"\", new ValueContext());\n+        ValidationResult result = validator.apply(\"\",\n+                new ValueContext(new Binder()));\n         Assert.assertTrue(result.isError());\n         Assert.assertEquals(\"foo\", result.getErrorMessage());\n     }\n@@ -48,7 +51,8 @@ public void emptyValueIsDisallowed() {\n     public void nonNullValueIsAllowed() {\n         NotEmptyValidator<Object> validator = new NotEmptyValidator<>(\"foo\");\n         Object value = new Object();\n-        ValidationResult result = validator.apply(value, new ValueContext());\n+        ValidationResult result = validator.apply(value,\n+                new ValueContext(new Binder()));\n         Assert.assertFalse(result.isError());\n         Assert.assertFalse(result.isError());\n     }\n\ndiff --git a/flow-data/src/test/java/com/vaadin/flow/data/validator/ValidatorTestBase.java b/flow-data/src/test/java/com/vaadin/flow/data/validator/ValidatorTestBase.java\nindex 3b8a2440751..bc8768e9225 100644\n--- a/flow-data/src/test/java/com/vaadin/flow/data/validator/ValidatorTestBase.java\n+++ b/flow-data/src/test/java/com/vaadin/flow/data/validator/ValidatorTestBase.java\n@@ -17,6 +17,7 @@\n \n import java.util.Locale;\n \n+import com.vaadin.flow.data.binder.Binder;\n import com.vaadin.flow.data.binder.testcomponents.TestLabel;\n import org.junit.Assert;\n import org.junit.Before;\n@@ -45,7 +46,8 @@ public Locale getLocale() {\n     }\n \n     protected <T> void assertPasses(T value, Validator<? super T> validator) {\n-        ValidationResult result = validator.apply(value, new ValueContext());\n+        ValidationResult result = validator.apply(value,\n+                new ValueContext(new Binder()));\n         if (result.isError()) {\n             Assert.fail(value + \" should pass \" + validator + \" but got \"\n                     + result.getErrorMessage());\n@@ -55,7 +57,7 @@ protected <T> void assertPasses(T value, Validator<? super T> validator) {\n     protected <T> void assertFails(T value, String errorMessage,\n             Validator<? super T> validator) {\n         ValidationResult result = validator.apply(value,\n-                new ValueContext(localeContext));\n+                new ValueContext(new Binder(), localeContext));\n         Assert.assertTrue(result.isError());\n         Assert.assertEquals(errorMessage, result.getErrorMessage());\n     }\n\ndiff --git a/flow-html-components-testbench/src/main/java/com/vaadin/flow/component/html/testbench/LabelElement.java b/flow-html-components-testbench/src/main/java/com/vaadin/flow/component/html/testbench/LabelElement.java\ndeleted file mode 100644\nindex 1bd92665956..00000000000\n--- a/flow-html-components-testbench/src/main/java/com/vaadin/flow/component/html/testbench/LabelElement.java\n+++ /dev/null\n@@ -1,31 +0,0 @@\n-/*\n- * Copyright 2000-2025 Vaadin Ltd.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n- * use this file except in compliance with the License. You may obtain a copy of\n- * the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package com.vaadin.flow.component.html.testbench;\n-\n-import com.vaadin.testbench.TestBenchElement;\n-import com.vaadin.testbench.elementsbase.Element;\n-\n-/**\n- * A TestBench element representing a <code>&lt;label&gt;</code> element.\n- *\n- * @since 1.0\n- * @deprecated Use {@link NativeLabelElement} instead.\n- */\n-@Element(\"label\")\n-@Deprecated(since = \"24.1\", forRemoval = true)\n-public class LabelElement extends TestBenchElement {\n-\n-}\n\ndiff --git a/flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlComponentSmokeTest.java b/flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlComponentSmokeTest.java\nindex 3caa7436ffa..ee46ae2e6f1 100644\n--- a/flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlComponentSmokeTest.java\n+++ b/flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlComponentSmokeTest.java\n@@ -203,12 +203,6 @@ private static boolean isSetter(Method method) {\n     }\n \n     private static boolean isSpecialSetter(Method method) {\n-        // Shorthand for Label.setFor(String)\n-        if (method.getDeclaringClass() == Label.class\n-                && method.getName().equals(\"setFor\")\n-                && method.getParameterTypes()[0] == Component.class) {\n-            return true;\n-        }\n         if (method.getDeclaringClass() == NativeLabel.class\n                 && method.getName().equals(\"setFor\")\n                 && method.getParameterTypes()[0] == Component.class) {\n\ndiff --git a/flow-html-components/src/test/java/com/vaadin/flow/component/html/LabelTest.java b/flow-html-components/src/test/java/com/vaadin/flow/component/html/LabelTest.java\ndeleted file mode 100644\nindex 96a3f0928c9..00000000000\n--- a/flow-html-components/src/test/java/com/vaadin/flow/component/html/LabelTest.java\n+++ /dev/null\n@@ -1,39 +0,0 @@\n-/*\n- * Copyright 2000-2025 Vaadin Ltd.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n- * use this file except in compliance with the License. You may obtain a copy of\n- * the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package com.vaadin.flow.component.html;\n-\n-import org.junit.Assert;\n-import org.junit.Test;\n-\n-public class LabelTest extends ComponentTest {\n-\n-    // Actual test methods in super class\n-\n-    @Override\n-    protected void addProperties() {\n-        addOptionalStringProperty(\"for\");\n-    }\n-\n-    @Test\n-    public void setForComponent() {\n-        Label otherComponent = new Label();\n-        otherComponent.setId(\"otherC\");\n-        Label l = (Label) getComponent();\n-        l.setFor(otherComponent);\n-        Assert.assertEquals(otherComponent.getId().get(), l.getFor().get());\n-    }\n-\n-}\n\ndiff --git a/flow-server/src/test/java/com/vaadin/experimental/FeatureFlagsTest.java b/flow-server/src/test/java/com/vaadin/experimental/FeatureFlagsTest.java\nindex 98ce110856c..f1d7edb8b0f 100644\n--- a/flow-server/src/test/java/com/vaadin/experimental/FeatureFlagsTest.java\n+++ b/flow-server/src/test/java/com/vaadin/experimental/FeatureFlagsTest.java\n@@ -209,7 +209,8 @@ public void enabledFeatureFlagsMarkedInStatsWhenToggled()\n     public void featureFlagShouldBeOverridableWithSystemProperty()\n             throws IOException {\n         var feature = \"exampleFeatureFlag\";\n-        var propertyName = FeatureFlags.SYSTEM_PROPERTY_PREFIX + feature;\n+        var propertyName = FeatureFlags.SYSTEM_PROPERTY_PREFIX_EXPERIMENTAL\n+                + feature;\n         var previousValue = System.getProperty(propertyName);\n \n         try {\n@@ -236,7 +237,8 @@ public void featureFlagShouldBeOverridableWithSystemProperty()\n     public void featureFlagLoadedByResourceProviderShouldBeOverridableWithSystemProperty()\n             throws IOException {\n         var feature = \"exampleFeatureFlag\";\n-        var propertyName = FeatureFlags.SYSTEM_PROPERTY_PREFIX + feature;\n+        var propertyName = FeatureFlags.SYSTEM_PROPERTY_PREFIX_EXPERIMENTAL\n+                + feature;\n         var previousValue = System.getProperty(propertyName);\n \n         File flagsFile = new File(propertiesDir,\n@@ -275,7 +277,8 @@ public void featureFlagLoadedByResourceProviderShouldBeOverridableWithSystemProp\n     public void noFeatureFlagFile_systemPropertyProvided_featureEnabled()\n             throws IOException {\n         var feature = \"exampleFeatureFlag\";\n-        var propertyName = FeatureFlags.SYSTEM_PROPERTY_PREFIX + feature;\n+        var propertyName = FeatureFlags.SYSTEM_PROPERTY_PREFIX_EXPERIMENTAL\n+                + feature;\n         var previousValue = System.getProperty(propertyName);\n \n         try {\n@@ -300,7 +303,8 @@ public void noFeatureFlagFile_systemPropertyProvided_featureEnabled()\n     public void noFeatureFlagFile_noSystemPropertyProvided_allFeatureDisabled()\n             throws IOException {\n         var feature = \"exampleFeatureFlag\";\n-        var propertyName = FeatureFlags.SYSTEM_PROPERTY_PREFIX + feature;\n+        var propertyName = FeatureFlags.SYSTEM_PROPERTY_PREFIX_EXPERIMENTAL\n+                + feature;\n         var previousValue = System.getProperty(propertyName);\n \n         try {\n@@ -455,12 +459,8 @@ public void propertiesFileCheckForUnsupportedFeatureFlagsRanOnlyOnce()\n     @Test\n     public void systemPropertiesCheckedForUnsupportedFeatureFlags() {\n         Logger mockedLogger = Mockito.mock(Logger.class);\n-        String examplePropertyDeprecatedFormat = FeatureFlags.SYSTEM_PROPERTY_PREFIX\n-                + \"exampleFeatureFlag\";\n         String exampleProperty = FeatureFlags.SYSTEM_PROPERTY_PREFIX_EXPERIMENTAL\n                 + \"exampleFeatureFlag\";\n-        String unsupportedDeprecatedFormatProperty = FeatureFlags.SYSTEM_PROPERTY_PREFIX\n-                + \"unsupportedFeature\";\n         String unsupportedProperty = FeatureFlags.SYSTEM_PROPERTY_PREFIX_EXPERIMENTAL\n                 + \"unsupportedFeature\";\n         var previousValue = System.getProperty(exampleProperty);\n@@ -471,9 +471,7 @@ public void systemPropertiesCheckedForUnsupportedFeatureFlags() {\n                     .when(() -> LoggerFactory.getLogger(FeatureFlags.class))\n                     .thenReturn(mockedLogger);\n \n-            System.setProperty(examplePropertyDeprecatedFormat, \"true\");\n             System.setProperty(exampleProperty, \"true\");\n-            System.setProperty(unsupportedDeprecatedFormatProperty, \"true\");\n             System.setProperty(unsupportedProperty, \"true\");\n             // resetting feature flags to manually retry check (because it was\n             // run in @Before block)\n@@ -484,13 +482,6 @@ public void systemPropertiesCheckedForUnsupportedFeatureFlags() {\n             // prefix\n             Mockito.verify(mockedLogger, Mockito.never()).warn(\n                     \"Unsupported feature flag is present: {}\", exampleProperty);\n-            Mockito.verify(mockedLogger, Mockito.never()).warn(\n-                    \"Unsupported feature flag is present: {}\",\n-                    examplePropertyDeprecatedFormat);\n-            // We do not want warning message for vaadin.unsupportedFeature\n-            Mockito.verify(mockedLogger, Mockito.never()).warn(\n-                    \"Unsupported feature flag is present: {}\",\n-                    unsupportedDeprecatedFormatProperty);\n             // We do want warning message for\n             // vaadin.experimental.unsupportedFeature\n             Mockito.verify(mockedLogger, Mockito.times(1)).warn(\n@@ -499,11 +490,9 @@ public void systemPropertiesCheckedForUnsupportedFeatureFlags() {\n         } finally {\n             if (previousValue == null) {\n                 System.clearProperty(exampleProperty);\n-                System.clearProperty(examplePropertyDeprecatedFormat);\n             } else {\n                 System.setProperty(exampleProperty, previousValue);\n             }\n-            System.clearProperty(unsupportedDeprecatedFormatProperty);\n             System.clearProperty(unsupportedProperty);\n         }\n     }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/component/ComponentTest.java b/flow-server/src/test/java/com/vaadin/flow/component/ComponentTest.java\nindex 38df32daafd..44cc107d6c5 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/component/ComponentTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/component/ComponentTest.java\n@@ -1830,18 +1830,6 @@ public void add_componentIsAttachedToAnotherUI_throwsIllegalStateException() {\n         ui2.add(child);\n     }\n \n-    @Test\n-    public void getTranslation_deprecated_delegatesToActualImplementation() {\n-        Component component = Mockito.mock(Component.class);\n-        Mockito.doCallRealMethod().when(component).getTranslation(\n-                Mockito.anyString(), Mockito.any(Locale.class),\n-                Mockito.any(Object[].class));\n-\n-        component.getTranslation(\"foo\", Locale.GERMAN);\n-\n-        Mockito.verify(component).getTranslation(Locale.GERMAN, \"foo\");\n-    }\n-\n     @Test\n     public void findAncestorTest() {\n         UI ui = new UI();\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/component/InvalidUrlTest.java b/flow-server/src/test/java/com/vaadin/flow/component/InvalidUrlTest.java\nindex 3e8f3215fb1..0d0e1b38394 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/component/InvalidUrlTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/component/InvalidUrlTest.java\n@@ -102,7 +102,7 @@ public VaadinContext getContext() {\n         ui.getInternals().setSession(session);\n \n         RouteConfiguration routeConfiguration = RouteConfiguration\n-                .forRegistry(ui.getRouter().getRegistry());\n+                .forRegistry(ui.getInternals().getRouter().getRegistry());\n         routeConfiguration.update(() -> {\n             routeConfiguration.getHandledRegistry().clean();\n             Arrays.asList(UITest.RootNavigationTarget.class,\n@@ -110,8 +110,9 @@ public VaadinContext getContext() {\n                     .forEach(routeConfiguration::setAnnotatedRoute);\n         });\n \n-        ui.doInit(request, 0);\n-        ui.getRouter().initializeUI(ui, UITest.requestToLocation(request));\n+        ui.doInit(request, 0, \"foo\");\n+        ui.getInternals().getRouter().initializeUI(ui,\n+                UITest.requestToLocation(request));\n \n         session.unlock();\n \n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/component/ShortcutRegistrationTest.java b/flow-server/src/test/java/com/vaadin/flow/component/ShortcutRegistrationTest.java\nindex 5ca99cb1f4c..027bc5a92fa 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/component/ShortcutRegistrationTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/component/ShortcutRegistrationTest.java\n@@ -224,7 +224,6 @@ public void listenOnChangesTheComponentThatOwnsTheListener() {\n         clientResponse();\n \n         // listenOn component should be set after client response\n-        assertEquals(listenOn[0], registration.getOwner());\n         assertArrayEquals(listenOn, registration.getOwners());\n \n         // Change the listenOn component\n@@ -237,7 +236,6 @@ public void listenOnChangesTheComponentThatOwnsTheListener() {\n         clientResponse(newListenOn);\n \n         // listenOn component should be set to the new component\n-        assertEquals(newListenOn[0], registration.getOwner());\n         assertArrayEquals(newListenOn, registration.getOwners());\n     }\n \n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/component/UITest.java b/flow-server/src/test/java/com/vaadin/flow/component/UITest.java\nindex 51dad1ae848..cbb31b65a70 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/component/UITest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/component/UITest.java\n@@ -263,7 +263,7 @@ public VaadinContext getContext() {\n                     .forEach(routeConfiguration::setAnnotatedRoute);\n         });\n \n-        ui.doInit(request, 0);\n+        ui.doInit(request, 0, \"foo\");\n         ui.getInternals().getRouter().initializeUI(ui,\n                 requestToLocation(request));\n \n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/router/RouterTest.java b/flow-server/src/test/java/com/vaadin/flow/router/RouterTest.java\nindex d51bba60e41..32a261ebf07 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/router/RouterTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/router/RouterTest.java\n@@ -31,6 +31,8 @@\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import net.jcip.annotations.NotThreadSafe;\n import org.hamcrest.MatcherAssert;\n import org.junit.After;\n@@ -3538,7 +3540,7 @@ public void exception_event_should_keep_original_trigger() {\n         Assert.assertEquals(NavigationTrigger.PROGRAMMATIC,\n                 FileNotFound.trigger);\n \n-        JsonObject state = Json.createObject();\n+        ObjectNode state = new ObjectMapper().createObjectNode();\n         state.put(\"href\", \"router_link\");\n         state.put(\"scrollPositionX\", 0d);\n         state.put(\"scrollPositionY\", 0d);\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/router/internal/ErrorStateRendererTest.java b/flow-server/src/test/java/com/vaadin/flow/router/internal/ErrorStateRendererTest.java\nindex 050f72e5373..9a7e9962233 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/router/internal/ErrorStateRendererTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/router/internal/ErrorStateRendererTest.java\n@@ -18,6 +18,8 @@\n import java.util.Collections;\n import java.util.List;\n \n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.junit.Assert;\n import org.junit.Test;\n \n@@ -173,7 +175,7 @@ public void handle_openNPEView_infiniteReroute_noStackOverflow_throws() {\n         // which reroute to ErrorTarget and this is an infinite loop\n         renderer.handle(event);\n \n-        JsonObject routerLinkState = Json.createObject();\n+        ObjectNode routerLinkState = new ObjectMapper().createObjectNode();\n         routerLinkState.put(\"href\", \"router_link\");\n         routerLinkState.put(\"scrollPositionX\", 0d);\n         routerLinkState.put(\"scrollPositionY\", 0d);\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java b/flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java\nindex e527855fa14..bb8a9cb8da0 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java\n@@ -28,6 +28,7 @@\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.stream.Collectors;\n \n+import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.node.BaseJsonNode;\n import net.bytebuddy.ByteBuddy;\n import net.bytebuddy.description.modifier.SyntheticState;\n@@ -646,7 +647,8 @@ public void handle_preserveOnRefresh_sameUI_uiIsNotClosed_childrenAreNotRemoved(\n                 new Location(path,\n                         new QueryParameters(Collections.singletonMap(\"b\",\n                                 Collections.emptyList()))),\n-                ui, NavigationTrigger.ROUTER_LINK, Json.createObject(), false);\n+                ui, NavigationTrigger.ROUTER_LINK,\n+                new ObjectMapper().createObjectNode(), false);\n         renderer.handle(event);\n \n         Assert.assertFalse(ui.isClosing());\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/DefaultDeploymentConfigurationTest.java b/flow-server/src/test/java/com/vaadin/flow/server/DefaultDeploymentConfigurationTest.java\nindex 6822b833659..379a270ebbe 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/DefaultDeploymentConfigurationTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/DefaultDeploymentConfigurationTest.java\n@@ -251,17 +251,17 @@ public void isXsrfProtectionEnabled_valueIsSetViaParentOnlyAndViaParent_valueIsT\n     }\n \n     @Test\n-    public void frontendHotdeployParameter_expressBuildFeatureFlagIsON_resetsFrontendHotdeployToFalse() {\n+    public void frontendHotdeployParameter_developmentBundle_resetsFrontendHotdeployToFalse() {\n         DefaultDeploymentConfiguration config = createDeploymentConfig(\n                 new Properties());\n-        Assert.assertFalse(\"Expected dev server to be disabled by default\",\n-                config.frontendHotdeploy());\n+        Assert.assertEquals(\"Expected dev server to be disabled by default\",\n+                Mode.DEVELOPMENT_BUNDLE, config.getMode());\n \n         Properties init = new Properties();\n         init.put(InitParameters.FRONTEND_HOTDEPLOY, \"true\");\n         config = createDeploymentConfig(init);\n-        Assert.assertTrue(\"Expected dev server to be enabled when set true\",\n-                config.frontendHotdeploy());\n+        Assert.assertEquals(\"Expected dev server to be enabled when set true\",\n+                Mode.DEVELOPMENT_FRONTEND_LIVERELOAD, config.getMode());\n     }\n \n     @Test\n@@ -294,9 +294,6 @@ public void productionModeTrue_frontendHotdeployTrue_frontendHotdeployReturnsFal\n \n         Assert.assertTrue(\"ProductionMode should be enabled\",\n                 config.isProductionMode());\n-        Assert.assertFalse(\n-                \"Frontend hotdeploy should return false in production mode\",\n-                config.frontendHotdeploy());\n     }\n \n     @Test\n@@ -324,9 +321,8 @@ public void frontendHotDeploy_hillaInLegacyFrontendFolderExists_usesLegacyAndHot\n                     projectRoot.getAbsolutePath());\n             DefaultDeploymentConfiguration config = createDeploymentConfig(\n                     init);\n-            boolean hotdeploy = config.frontendHotdeploy();\n-            Assert.assertTrue(\"Should use the legacy frontend folder\",\n-                    hotdeploy);\n+            Assert.assertEquals(\"Should use the legacy frontend folder\",\n+                    Mode.DEVELOPMENT_FRONTEND_LIVERELOAD, config.getMode());\n         }\n     }\n \n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/DeploymentConfigurationFactoryTest.java b/flow-server/src/test/java/com/vaadin/flow/server/DeploymentConfigurationFactoryTest.java\nindex b77a5495dd9..f6800c3e6c0 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/DeploymentConfigurationFactoryTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/DeploymentConfigurationFactoryTest.java\n@@ -561,8 +561,6 @@ public void externalStatsFileTrue_predefinedValuesAreNotOverridden_productionMod\n                 .singletonMap(PARAM_TOKEN_FILE, tokenFile.getPath()));\n \n         assertTrue(config.isProductionMode());\n-        assertFalse(\"Dev server should be default false due to stats\",\n-                config.frontendHotdeploy());\n         assertTrue(config.isStatsExternal());\n         assertEquals(Constants.DEFAULT_EXTERNAL_STATS_URL,\n                 config.getExternalStatsUrl());\n@@ -628,7 +626,6 @@ private ApplicationConfiguration mockApplicationConfiguration() {\n         VaadinContext context = new MockVaadinContext();\n         ApplicationConfiguration configuration = Mockito\n                 .mock(ApplicationConfiguration.class);\n-        Mockito.when(configuration.frontendHotdeploy()).thenReturn(true);\n         Mockito.when(configuration.isProductionMode()).thenReturn(true);\n         Mockito.when(configuration.getContext()).thenReturn(context);\n         Mockito.when(configuration.getStringProperty(Mockito.anyString(),\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/MockServletServiceSessionSetup.java b/flow-server/src/test/java/com/vaadin/flow/server/MockServletServiceSessionSetup.java\nindex 664568caa73..01a7b562222 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/MockServletServiceSessionSetup.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/MockServletServiceSessionSetup.java\n@@ -329,7 +329,6 @@ public MockServletServiceSessionSetup(boolean sessionAvailable)\n                 .when(servletContext).getClassLoader();\n         Mockito.when(servletConfig.getServletContext())\n                 .thenReturn(servletContext);\n-        deploymentConfiguration.setFrontendHotdeploy(false);\n \n         Mockito.when(servletContext.getAttribute(Lookup.class.getName()))\n                 .thenReturn(lookup);\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/PropertyDeploymentConfigurationTest.java b/flow-server/src/test/java/com/vaadin/flow/server/PropertyDeploymentConfigurationTest.java\nindex 54d6dd68897..3391b525a9a 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/PropertyDeploymentConfigurationTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/PropertyDeploymentConfigurationTest.java\n@@ -63,17 +63,6 @@ public void isProductionMode_modeIsProvidedViaPropertiesAndParent_valueFromPrope\n         Assert.assertEquals(properties, config.getInitParameters());\n     }\n \n-    @Test\n-    public void frontendHotdeploy_valueIsProvidedViaParentOnly_valueFromParentIsReturned() {\n-        ApplicationConfiguration appConfig = mockAppConfig();\n-        Mockito.when(appConfig.frontendHotdeploy()).thenReturn(true);\n-        PropertyDeploymentConfiguration config = createConfiguration(appConfig,\n-                new Properties());\n-        Assert.assertTrue(config.frontendHotdeploy());\n-        // there is no any property\n-        Assert.assertTrue(config.getInitParameters().isEmpty());\n-    }\n-\n     @Test\n     public void reuseDevServer_valueIsProvidedViaPropertiesAndParent_valueFromPropertiesIsReturned() {\n         ApplicationConfiguration appConfig = mockAppConfig();\n@@ -99,20 +88,6 @@ public void reuseDevServer_valueIsProvidedViaParentOnly_valueFromParentIsReturne\n         Assert.assertTrue(config.getInitParameters().isEmpty());\n     }\n \n-    @Test\n-    public void frontendHotdeploy_valueIsProvidedViaPropertiesAndParent_valueIsAlwaysTrueIfExpressBuildIsOFF() {\n-        ApplicationConfiguration appConfig = mockAppConfig();\n-        Mockito.when(appConfig.frontendHotdeploy()).thenReturn(false);\n-\n-        Properties properties = new Properties();\n-        properties.put(InitParameters.FRONTEND_HOTDEPLOY,\n-                Boolean.TRUE.toString());\n-        PropertyDeploymentConfiguration config = createConfiguration(appConfig,\n-                properties);\n-        Assert.assertTrue(config.frontendHotdeploy());\n-        Assert.assertEquals(properties, config.getInitParameters());\n-    }\n-\n     @Test\n     public void isPnpmEnabled_valueIsProvidedViaParentOnly_valueFromParentIsReturned() {\n         ApplicationConfiguration appConfig = mockAppConfig();\n@@ -223,34 +198,6 @@ public void isProductionMode_modeIsProvidedViaParentOnly_propertyIsSetToAnotherV\n                 .containsKey(InitParameters.SERVLET_PARAMETER_PRODUCTION_MODE));\n     }\n \n-    @Test\n-    public void frontendHotdeploy_valueIsProvidedViaParentOnly_propertyIsSetToAnotherValue_valueFromParentIsReturnedViaAPI() {\n-        ApplicationConfiguration appConfig = mockAppConfig();\n-\n-        // The property value is provided via API\n-        Mockito.when(appConfig.frontendHotdeploy()).thenReturn(true);\n-\n-        // The property whose value is overridden above via API is different\n-        Mockito.when(appConfig.getPropertyNames())\n-                .thenReturn(Collections.enumeration(Collections\n-                        .singleton(InitParameters.FRONTEND_HOTDEPLOY)));\n-\n-        Mockito.when(appConfig\n-                .getStringProperty(InitParameters.FRONTEND_HOTDEPLOY, null))\n-                .thenReturn(Boolean.FALSE.toString());\n-\n-        PropertyDeploymentConfiguration config = createConfiguration(appConfig,\n-                new Properties());\n-        // Several things are checked: the value from parent is used via API and\n-        // deployment configuration doesn't read the property directly even\n-        // though its \"getInitParameters\" method returns the property. Also\n-        // \"getApplicationProperty\" method checks the parent properties which\n-        // should not be taken into account here\n-        Assert.assertTrue(config.frontendHotdeploy());\n-        Assert.assertTrue(config.getInitParameters()\n-                .containsKey(InitParameters.FRONTEND_HOTDEPLOY));\n-    }\n-\n     @Test\n     public void isPnpmEnabled_valueIsProvidedViaParentOnly_propertyIsSetToAnotherValue_valueFromParentIsReturnedViaAPI() {\n         ApplicationConfiguration appConfig = mockAppConfig();\n@@ -382,71 +329,6 @@ public void allDefaultAbstractConfigurationMethodsAreOverridden() {\n         }\n     }\n \n-    @Test\n-    public void frontendHotDeploy_hillaInLegacyFrontendFolderExists_usesLegacyAndHotdeploy()\n-            throws IOException {\n-        File projectRoot = tempFolder.getRoot();\n-        File legacyFrontend = tempFolder\n-                .newFolder(FrontendUtils.LEGACY_FRONTEND_DIR);\n-\n-        File legacyFrontendViews = new File(legacyFrontend,\n-                FrontendUtils.HILLA_VIEWS_PATH);\n-        if (!legacyFrontendViews.mkdir()) {\n-            Assert.fail(\"Failed to generate legacy frontend views folder\");\n-        }\n-\n-        File viewFile = new File(legacyFrontendViews, \"MyView.tsx\");\n-        org.apache.commons.io.FileUtils.writeStringToFile(viewFile,\n-                \"export default function MyView(){}\", \"UTF-8\");\n-\n-        ApplicationConfiguration appConfig = new ApplicationConfiguration() {\n-\n-            @Override\n-            public File getProjectFolder() {\n-                return projectRoot;\n-            }\n-\n-            @Override\n-            public Enumeration<String> getPropertyNames() {\n-                return Collections.emptyEnumeration();\n-            }\n-\n-            @Override\n-            public VaadinContext getContext() {\n-                return null;\n-            }\n-\n-            @Override\n-            public boolean isDevModeSessionSerializationEnabled() {\n-                return false;\n-            }\n-\n-            @Override\n-            public boolean isProductionMode() {\n-                return false;\n-            }\n-\n-            @Override\n-            public String getStringProperty(String name, String defaultValue) {\n-                return defaultValue;\n-            }\n-\n-            @Override\n-            public boolean getBooleanProperty(String name,\n-                    boolean defaultValue) {\n-                return defaultValue;\n-            }\n-        };\n-\n-        try (MockedStatic<EndpointRequestUtil> util = Mockito\n-                .mockStatic(EndpointRequestUtil.class)) {\n-            util.when(EndpointRequestUtil::isHillaAvailable).thenReturn(true);\n-            boolean hotdeploy = appConfig.frontendHotdeploy();\n-            Assert.assertTrue(\"Should use the legacy frontend folder\",\n-                    hotdeploy);\n-        }\n-    }\n-\n     private ApplicationConfiguration mockAppConfig() {\n         ApplicationConfiguration appConfig = Mockito\n                 .mock(ApplicationConfiguration.class);\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/StaticFileServerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/StaticFileServerTest.java\nindex 5f9f01f48b0..43ea9bb8bce 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/StaticFileServerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/StaticFileServerTest.java\n@@ -176,8 +176,6 @@ public void setUp() throws IOException {\n         Mockito.when(configuration.getMode()).thenAnswer(q -> {\n             if (configuration.isProductionMode()) {\n                 return Mode.PRODUCTION_CUSTOM;\n-            } else if (configuration.frontendHotdeploy()) {\n-                return Mode.DEVELOPMENT_FRONTEND_LIVERELOAD;\n             } else {\n                 return Mode.DEVELOPMENT_BUNDLE;\n             }\n@@ -1205,7 +1203,6 @@ public void serveStaticResource_projectThemeResourceRequest_serveFromFrontend()\n         TestUtil.createStyleCssStubInFrontend(projectRootFolder, \"my-theme\",\n                 styles);\n \n-        Mockito.when(configuration.frontendHotdeploy()).thenReturn(false);\n         Mockito.when(configuration.isProductionMode()).thenReturn(false);\n         Mockito.when(configuration.getProjectFolder())\n                 .thenReturn(projectRootFolder);\n@@ -1226,7 +1223,6 @@ public void serveStaticResource_externalThemeResourceRequest_serveFromBundle()\n         TestUtil.createStylesCssStubInBundle(projectRootFolder, \"my-theme\",\n                 styles);\n \n-        Mockito.when(configuration.frontendHotdeploy()).thenReturn(false);\n         Mockito.when(configuration.isProductionMode()).thenReturn(false);\n         Mockito.when(configuration.getProjectFolder())\n                 .thenReturn(projectRootFolder);\n@@ -1247,7 +1243,6 @@ public void serveStaticResource_themeResourceRequest_productionMode_notServeFrom\n         TestUtil.createStylesCssStubInBundle(projectRootFolder, \"my-theme\",\n                 styles);\n \n-        Mockito.when(configuration.frontendHotdeploy()).thenReturn(false);\n         Mockito.when(configuration.isProductionMode()).thenReturn(true);\n         Mockito.when(configuration.getProjectFolder())\n                 .thenReturn(projectRootFolder);\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/VaadinSessionTest.java b/flow-server/src/test/java/com/vaadin/flow/server/VaadinSessionTest.java\nindex 30ec55d1778..b73d6d3bdd7 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/VaadinSessionTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/VaadinSessionTest.java\n@@ -186,7 +186,7 @@ public Map<String, String[]> getParameterMap() {\n \n         ui.getInternals().setSession(session);\n \n-        ui.doInit(vaadinRequest, session.getNextUIid());\n+        ui.doInit(vaadinRequest, session.getNextUIid(), \"foo\");\n \n         session.addUI(ui);\n \n@@ -428,7 +428,7 @@ public void setLocale_setLocaleForAllUIs() {\n \n         anotherUI.getInternals().setSession(session);\n \n-        anotherUI.doInit(vaadinRequest, session.getNextUIid());\n+        anotherUI.doInit(vaadinRequest, session.getNextUIid(), \"foo\");\n \n         session.addUI(anotherUI);\n \n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/auth/ViewAccessCheckerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/auth/ViewAccessCheckerTest.java\ndeleted file mode 100644\nindex 9ceaa36dde8..00000000000\n--- a/flow-server/src/test/java/com/vaadin/flow/server/auth/ViewAccessCheckerTest.java\n+++ /dev/null\n@@ -1,777 +0,0 @@\n-/*\n- * Copyright 2000-2025 Vaadin Ltd.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n- * use this file except in compliance with the License. You may obtain a copy of\n- * the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-\n-package com.vaadin.flow.server.auth;\n-\n-import jakarta.servlet.http.HttpServletRequest;\n-import jakarta.servlet.http.HttpSession;\n-\n-import java.lang.reflect.Field;\n-import java.security.Principal;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Optional;\n-\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.mockito.Mockito;\n-\n-import com.vaadin.flow.component.UI;\n-import com.vaadin.flow.component.internal.UIInternals;\n-import com.vaadin.flow.component.page.Page;\n-import com.vaadin.flow.function.DeploymentConfiguration;\n-import com.vaadin.flow.internal.AnnotationReader;\n-import com.vaadin.flow.internal.CurrentInstance;\n-import com.vaadin.flow.router.AccessDeniedException;\n-import com.vaadin.flow.router.BeforeEnterEvent;\n-import com.vaadin.flow.router.Location;\n-import com.vaadin.flow.router.NavigationEvent;\n-import com.vaadin.flow.router.NavigationTrigger;\n-import com.vaadin.flow.router.NotFoundException;\n-import com.vaadin.flow.router.Route;\n-import com.vaadin.flow.router.RouteAccessDeniedError;\n-import com.vaadin.flow.router.RouteNotFoundError;\n-import com.vaadin.flow.router.Router;\n-import com.vaadin.flow.router.internal.ErrorTargetEntry;\n-import com.vaadin.flow.router.internal.RouteUtil;\n-import com.vaadin.flow.server.MockVaadinContext;\n-import com.vaadin.flow.server.RouteRegistry;\n-import com.vaadin.flow.server.VaadinRequest;\n-import com.vaadin.flow.server.VaadinServletRequest;\n-import com.vaadin.flow.server.VaadinSession;\n-import com.vaadin.flow.server.auth.AccessControlTestClasses.AnonymousAllowedView;\n-import com.vaadin.flow.server.auth.AccessControlTestClasses.CustomAccessDeniedView;\n-import com.vaadin.flow.server.auth.AccessControlTestClasses.DenyAllView;\n-import com.vaadin.flow.server.auth.AccessControlTestClasses.NoAnnotationAnonymousAllowedByGrandParentView;\n-import com.vaadin.flow.server.auth.AccessControlTestClasses.NoAnnotationAnonymousAllowedByParentView;\n-import com.vaadin.flow.server.auth.AccessControlTestClasses.NoAnnotationDenyAllAsInterfacesIgnoredView;\n-import com.vaadin.flow.server.auth.AccessControlTestClasses.NoAnnotationDenyAllByGrandParentView;\n-import com.vaadin.flow.server.auth.AccessControlTestClasses.NoAnnotationPermitAllByGrandParentAsInterfacesIgnoredView;\n-import com.vaadin.flow.server.auth.AccessControlTestClasses.NoAnnotationPermitAllByGrandParentView;\n-import com.vaadin.flow.server.auth.AccessControlTestClasses.NoAnnotationRolesAllowedAdminByGrandParentView;\n-import com.vaadin.flow.server.auth.AccessControlTestClasses.NoAnnotationRolesAllowedUserByGrandParentView;\n-import com.vaadin.flow.server.auth.AccessControlTestClasses.NoAnnotationView;\n-import com.vaadin.flow.server.auth.AccessControlTestClasses.PermitAllView;\n-import com.vaadin.flow.server.auth.AccessControlTestClasses.RolesAllowedAdminView;\n-import com.vaadin.flow.server.auth.AccessControlTestClasses.RolesAllowedUserView;\n-import com.vaadin.flow.server.auth.AccessControlTestClasses.TestLoginView;\n-\n-import static org.mockito.ArgumentMatchers.anyBoolean;\n-\n-@Deprecated(forRemoval = true)\n-public class ViewAccessCheckerTest {\n-\n-    enum User {\n-        USER_NO_ROLES, NORMAL_USER, ADMIN\n-    }\n-\n-    private ViewAccessChecker viewAccessChecker;\n-\n-    @Before\n-    public void init() {\n-        this.viewAccessChecker = new ViewAccessChecker();\n-        this.viewAccessChecker.setLoginView(TestLoginView.class);\n-    }\n-\n-    @Test\n-    public void anonymousAccessToAnonymousViewAllowed() {\n-        TestNavigationResult result = checkAccess(AnonymousAllowedView.class,\n-                null);\n-        Assert.assertTrue(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void anonymousAccessToNoAnnotationViewDenied() {\n-        TestNavigationResult result = checkAccess(NoAnnotationView.class, null);\n-        Assert.assertFalse(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void anonymousAccessToPermitAllViewDenied() {\n-        TestNavigationResult result = checkAccess(PermitAllView.class, null);\n-        Assert.assertFalse(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void anonymousAccessToDenyAllViewDenied() {\n-        TestNavigationResult result = checkAccess(DenyAllView.class, null);\n-        Assert.assertFalse(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void anonymousAccessToRolesAllowedUserViewDenied() {\n-        TestNavigationResult result = checkAccess(RolesAllowedUserView.class,\n-                null);\n-        Assert.assertFalse(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void anonymousAccessToRolesAllowedAdminViewDenied() {\n-        TestNavigationResult result = checkAccess(RolesAllowedAdminView.class,\n-                null);\n-        Assert.assertFalse(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void loggedInNoRolesAccessToAnonymousViewAllowed() {\n-        TestNavigationResult result = checkAccess(AnonymousAllowedView.class,\n-                User.USER_NO_ROLES);\n-        Assert.assertTrue(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void loggedInNoRolesAccessToNoAnnotationViewDenied() {\n-        TestNavigationResult result = checkAccess(NoAnnotationView.class,\n-                User.USER_NO_ROLES);\n-        Assert.assertFalse(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void loggedInNoRolesAccessToPermitAllViewAllowed() {\n-        TestNavigationResult result = checkAccess(PermitAllView.class,\n-                User.USER_NO_ROLES);\n-        Assert.assertTrue(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void loggedInNoRolesAccessToDenyAllViewDenied() {\n-        TestNavigationResult result = checkAccess(DenyAllView.class,\n-                User.USER_NO_ROLES);\n-        Assert.assertFalse(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void loggedInNoRolesAccessToRolesAllowedUserViewDenied() {\n-        TestNavigationResult result = checkAccess(RolesAllowedUserView.class,\n-                User.USER_NO_ROLES);\n-        Assert.assertFalse(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void loggedInNoRolesAccessToRolesAllowedAdminViewDenied() {\n-        TestNavigationResult result = checkAccess(RolesAllowedAdminView.class,\n-                User.USER_NO_ROLES);\n-        Assert.assertFalse(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void loggedInUserRoleAccessToAnonymousViewAllowed() {\n-        TestNavigationResult result = checkAccess(AnonymousAllowedView.class,\n-                User.NORMAL_USER);\n-        Assert.assertTrue(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void loggedInUserRoleAccessToNoAnnotationViewDenied() {\n-        TestNavigationResult result = checkAccess(NoAnnotationView.class,\n-                User.NORMAL_USER);\n-        Assert.assertFalse(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void loggedInUserRoleAccessToPermitAllViewAllowed() {\n-        TestNavigationResult result = checkAccess(PermitAllView.class,\n-                User.NORMAL_USER);\n-        Assert.assertTrue(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void loggedInUserRoleAccessToDenyAllViewDenied() {\n-        TestNavigationResult result = checkAccess(DenyAllView.class,\n-                User.NORMAL_USER);\n-        Assert.assertFalse(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void loggedInUserRoleAccessToRolesAllowedUserViewAllowed() {\n-        TestNavigationResult result = checkAccess(RolesAllowedUserView.class,\n-                User.NORMAL_USER);\n-        Assert.assertTrue(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void loggedInUserRoleAccessToRolesAllowedAdminViewDenied() {\n-        TestNavigationResult result = checkAccess(RolesAllowedAdminView.class,\n-                User.NORMAL_USER);\n-        Assert.assertFalse(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void loggedInAdminRoleAccessToAnonymousViewAllowed() {\n-        TestNavigationResult result = checkAccess(AnonymousAllowedView.class,\n-                User.ADMIN);\n-        Assert.assertTrue(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void loggedInAdminRoleAccessToNoAnnotationViewDenied() {\n-        TestNavigationResult result = checkAccess(NoAnnotationView.class,\n-                User.ADMIN);\n-        Assert.assertFalse(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void loggedInAdminRoleAccessToPermitAllViewAllowed() {\n-        TestNavigationResult result = checkAccess(PermitAllView.class,\n-                User.ADMIN);\n-        Assert.assertTrue(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void loggedInAdminRoleAccessToDenyAllViewDenied() {\n-        TestNavigationResult result = checkAccess(DenyAllView.class,\n-                User.ADMIN);\n-        Assert.assertFalse(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void loggedInAdminRoleAccessToRolesAllowedUserViewDenied() {\n-        TestNavigationResult result = checkAccess(RolesAllowedUserView.class,\n-                User.ADMIN);\n-        Assert.assertFalse(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void loggedInAdminRoleAccessToRolesAllowedAdminViewAllowed() {\n-        TestNavigationResult result = checkAccess(RolesAllowedAdminView.class,\n-                User.ADMIN);\n-        Assert.assertTrue(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void loginViewAccessAlwaysAllowed() {\n-        Assert.assertTrue(\n-                checkAccess(TestLoginView.class, null).wasTargetViewRendered());\n-        Assert.assertTrue(checkAccess(TestLoginView.class, User.NORMAL_USER)\n-                .wasTargetViewRendered());\n-        Assert.assertTrue(checkAccess(TestLoginView.class, User.USER_NO_ROLES)\n-                .wasTargetViewRendered());\n-        Assert.assertTrue(checkAccess(TestLoginView.class, User.ADMIN)\n-                .wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void redirectUrlStoredForAnonymousUsers() {\n-        TestNavigationResult result = checkAccess(RolesAllowedAdminView.class,\n-                null);\n-        Assert.assertFalse(result.wasTargetViewRendered());\n-        Assert.assertEquals(\n-                AccessAnnotationCheckerTest.REQUEST_URL\n-                        + getRoute(RolesAllowedAdminView.class),\n-                result.sessionAttributes.get(\n-                        ViewAccessChecker.SESSION_STORED_REDIRECT_ABSOLUTE));\n-        Assert.assertEquals(getRoute(RolesAllowedAdminView.class),\n-                result.sessionAttributes\n-                        .get(ViewAccessChecker.SESSION_STORED_REDIRECT));\n-    }\n-\n-    @Test\n-    public void redirectUrlNotStoredForLoggedInUsers() {\n-        TestNavigationResult result = checkAccess(RolesAllowedAdminView.class,\n-                User.NORMAL_USER);\n-        Assert.assertFalse(result.wasTargetViewRendered());\n-        Assert.assertNull(result.sessionAttributes\n-                .get(ViewAccessChecker.SESSION_STORED_REDIRECT));\n-        Assert.assertNull(result.sessionAttributes\n-                .get(ViewAccessChecker.SESSION_STORED_REDIRECT_ABSOLUTE));\n-    }\n-\n-    @Test\n-    public void disabledAccessCheckerAlwaysPasses_rejectsWhenEnabled() {\n-        viewAccessChecker = new ViewAccessChecker(false);\n-        Assert.assertTrue(\n-                \"Expected admin view to be accessible for non \"\n-                        + \"authenticated users when access checker is disabled\",\n-                checkAccess(RolesAllowedAdminView.class, null)\n-                        .wasTargetViewRendered());\n-        viewAccessChecker.enable();\n-        Assert.assertFalse(\n-                \"Expected admin view to be not accessible for non \"\n-                        + \"authenticated users when access checker is enabled\",\n-                checkAccess(RolesAllowedAdminView.class, null)\n-                        .wasTargetViewRendered());\n-    }\n-\n-    @Test(expected = IllegalStateException.class)\n-    public void setLoginViewStringCannotBeCalledAfterSettingClass()\n-            throws Exception {\n-        resetLoginView();\n-        this.viewAccessChecker.setLoginView(TestLoginView.class);\n-        this.viewAccessChecker.setLoginView(\"/foo\");\n-    }\n-\n-    @Test(expected = IllegalStateException.class)\n-    public void setLoginViewClassCannotBeCalledAfterSettingClass()\n-            throws Exception {\n-        resetLoginView();\n-        this.viewAccessChecker.setLoginView(TestLoginView.class);\n-        this.viewAccessChecker.setLoginView(TestLoginView.class);\n-    }\n-\n-    @Test(expected = IllegalStateException.class)\n-    public void setLoginViewStringCannotBeCalledAfterSettingString()\n-            throws Exception {\n-        resetLoginView();\n-        this.viewAccessChecker.setLoginView(\"/foo\");\n-        this.viewAccessChecker.setLoginView(\"/foo\");\n-    }\n-\n-    @Test(expected = IllegalStateException.class)\n-    public void setLoginViewClassCannotBeCalledAfterSettingString()\n-            throws Exception {\n-        resetLoginView();\n-        this.viewAccessChecker.setLoginView(\"/foo\");\n-        this.viewAccessChecker.setLoginView(TestLoginView.class);\n-    }\n-\n-    @Test\n-    public void openingRestrictedViewRedirectsAnonymousUserToLogin() {\n-        TestNavigationResult result = checkAccess(RolesAllowedAdminView.class,\n-                null);\n-        Assert.assertEquals(TestLoginView.class, result.getForwardedTo());\n-    }\n-\n-    @Test\n-    public void openingRestrictedViewRedirectsAnonymousUserToLogin_whenUsingLoginPath()\n-            throws Exception {\n-        resetLoginView();\n-        viewAccessChecker.setLoginView(\"/log-in\");\n-        TestNavigationResult result = checkAccess(RolesAllowedAdminView.class,\n-                null);\n-        Assert.assertFalse(result.wasTargetViewRendered());\n-        Assert.assertEquals(\"/log-in\", result.getExternalForwardUrl());\n-    }\n-\n-    @Test\n-    public void openingRestrictedViewShowsNotFoundForLoggedInUser() {\n-        TestNavigationResult result = checkAccess(RolesAllowedAdminView.class,\n-                User.NORMAL_USER);\n-        Assert.assertEquals(AccessDeniedException.class,\n-                result.getRerouteError());\n-        Assert.assertEquals(\"\", result.getRerouteErrorMessage());\n-    }\n-\n-    @Test\n-    public void openingRestrictedViewShowsReasonInDevelopmentMode() {\n-        TestNavigationResult result = checkAccess(RolesAllowedAdminView.class,\n-                User.NORMAL_USER, false);\n-        Assert.assertEquals(AccessDeniedException.class,\n-                result.getRerouteError());\n-        Assert.assertEquals(\"Access denied\", result.getRerouteErrorMessage());\n-    }\n-\n-    @Test\n-    public void openingNoAnnotationViewShowsReasonAndHintInDevelopmentMode() {\n-        TestNavigationResult result = checkAccess(NoAnnotationView.class,\n-                User.NORMAL_USER, false);\n-        Assert.assertEquals(AccessDeniedException.class,\n-                result.getRerouteError());\n-        Assert.assertEquals(\n-                \"Access denied. Consider adding one of the following annotations \"\n-                        + \"to make the view accessible: @AnonymousAllowed, \"\n-                        + \"@PermitAll, @RolesAllowed.\",\n-                result.getRerouteErrorMessage());\n-    }\n-\n-    @Test\n-    public void openingCustomAccessDeniedViewShowsReasonAndHintInDevelopmentMode() {\n-        TestNavigationResult result = checkAccess(CustomAccessDeniedView.class,\n-                User.NORMAL_USER, false);\n-        Assert.assertEquals(NotFoundException.class, result.getRerouteError());\n-        Assert.assertEquals(\n-                \"Access denied. Consider adding one of the following annotations \"\n-                        + \"to make the view accessible: @AnonymousAllowed, \"\n-                        + \"@PermitAll, @RolesAllowed.\",\n-                result.getRerouteErrorMessage());\n-    }\n-\n-    @Test\n-    public void openingNoAnnotationViewDoesNotShowAnyReasonAndHintInProductionMode() {\n-        TestNavigationResult result = checkAccess(NoAnnotationView.class,\n-                User.NORMAL_USER, true);\n-        Assert.assertEquals(AccessDeniedException.class,\n-                result.getRerouteError());\n-        Assert.assertEquals(\"\", result.getRerouteErrorMessage());\n-    }\n-\n-    @Test\n-    public void openingCustomAccessDeniedViewDoesNotShowAnyReasonAndHintInProductionMode() {\n-        TestNavigationResult result = checkAccess(CustomAccessDeniedView.class,\n-                User.NORMAL_USER, true);\n-        Assert.assertEquals(NotFoundException.class, result.getRerouteError());\n-        Assert.assertEquals(\"\", result.getRerouteErrorMessage());\n-    }\n-\n-    @Test\n-    public void redirectWhenNoLoginSet() throws Exception {\n-        resetLoginView();\n-        TestNavigationResult result = checkAccess(RolesAllowedAdminView.class,\n-                null);\n-        Assert.assertFalse(result.wasTargetViewRendered());\n-        Assert.assertEquals(NotFoundException.class, result.getRerouteError());\n-    }\n-\n-    @Test\n-    public void anonymousAccess_to_noAnnotationAnonymousAllowedByParent_allowed() {\n-        TestNavigationResult result = checkAccess(\n-                NoAnnotationAnonymousAllowedByParentView.class, null);\n-        Assert.assertTrue(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void anonymousAccess_to_noAnnotationAnonymousAllowedByGrandParent_allowed() {\n-        TestNavigationResult result = checkAccess(\n-                NoAnnotationAnonymousAllowedByGrandParentView.class, null);\n-        Assert.assertTrue(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void anonymousAccess_to_noAnnotationPermitAllByGrandParentView_denied() {\n-        TestNavigationResult result = checkAccess(\n-                NoAnnotationPermitAllByGrandParentView.class, null);\n-        Assert.assertFalse(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void anonymousAccess_to_noAnnotationDenyAllByGrandParentView_denied() {\n-        TestNavigationResult result = checkAccess(\n-                NoAnnotationDenyAllByGrandParentView.class, null);\n-        Assert.assertFalse(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void anonymousAccess_to_noAnnotationRolesAllowedUserByGrandParentView_denied() {\n-        TestNavigationResult result = checkAccess(\n-                NoAnnotationRolesAllowedUserByGrandParentView.class, null);\n-        Assert.assertFalse(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void anonymousAccess_to_noAnnotationRolesAllowedAdminByGrandParentView_denied() {\n-        TestNavigationResult result = checkAccess(\n-                NoAnnotationRolesAllowedAdminByGrandParentView.class, null);\n-        Assert.assertFalse(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void loggedInNoRolesAccess_to_noAnnotationAnonymousAllowedByGrandParentView_allowed() {\n-        TestNavigationResult result = checkAccess(\n-                NoAnnotationAnonymousAllowedByGrandParentView.class,\n-                User.USER_NO_ROLES);\n-        Assert.assertTrue(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void loggedInNoRolesAccess_to_noAnnotationPermitAllByGrandParentView_allowed() {\n-        TestNavigationResult result = checkAccess(\n-                NoAnnotationPermitAllByGrandParentView.class,\n-                User.USER_NO_ROLES);\n-        Assert.assertTrue(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void loggedInNoRolesAccess_to_noAnnotationDenyAllByGrandParentView_denied() {\n-        TestNavigationResult result = checkAccess(\n-                NoAnnotationDenyAllByGrandParentView.class, User.USER_NO_ROLES);\n-        Assert.assertFalse(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void loggedInNoRolesAccess_to_noAnnotationRolesAllowedUserByGrandParentView_denied() {\n-        TestNavigationResult result = checkAccess(\n-                NoAnnotationRolesAllowedUserByGrandParentView.class,\n-                User.USER_NO_ROLES);\n-        Assert.assertFalse(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void loggedInNoRolesAccess_to_noAnnotationRolesAllowedAdminByGrandParentView_denied() {\n-        TestNavigationResult result = checkAccess(\n-                NoAnnotationRolesAllowedAdminByGrandParentView.class,\n-                User.USER_NO_ROLES);\n-        Assert.assertFalse(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void loggedInUserRoleAccess_to_noAnnotationAnonymousAllowedByGrandParentView_allowed() {\n-        TestNavigationResult result = checkAccess(\n-                NoAnnotationAnonymousAllowedByGrandParentView.class,\n-                User.NORMAL_USER);\n-        Assert.assertTrue(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void loggedInUserRoleAccess_to_noAnnotationPermitAllByGrandParentView_allowed() {\n-        TestNavigationResult result = checkAccess(\n-                NoAnnotationPermitAllByGrandParentView.class, User.NORMAL_USER);\n-        Assert.assertTrue(\"Target view should have been rendered\",\n-                result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void loggedInUserRoleAccess_to_noAnnotationDenyAllByGrandParentView_denied() {\n-        TestNavigationResult result = checkAccess(\n-                NoAnnotationDenyAllByGrandParentView.class, User.NORMAL_USER);\n-        Assert.assertFalse(result.wasTargetViewRendered());\n-        Assert.assertEquals(AccessDeniedException.class,\n-                result.getRerouteError());\n-    }\n-\n-    @Test\n-    public void loggedInUserRoleAccess_to_noAnnotationRolesAllowedUserByGrandParentView_allowed() {\n-        TestNavigationResult result = checkAccess(\n-                NoAnnotationRolesAllowedUserByGrandParentView.class,\n-                User.NORMAL_USER);\n-        Assert.assertTrue(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void loggedInUserRoleAccess_to_noAnnotationRolesAllowedAdminByGrandParentView_denied() {\n-        TestNavigationResult result = checkAccess(\n-                NoAnnotationRolesAllowedAdminByGrandParentView.class,\n-                User.NORMAL_USER);\n-        Assert.assertFalse(result.wasTargetViewRendered());\n-        Assert.assertEquals(AccessDeniedException.class,\n-                result.getRerouteError());\n-    }\n-\n-    @Test\n-    public void loggedInAdminRoleAccess_to_noAnnotationAnonymousAllowedByGrandParentView_allowed() {\n-        TestNavigationResult result = checkAccess(\n-                NoAnnotationAnonymousAllowedByGrandParentView.class,\n-                User.ADMIN);\n-        Assert.assertTrue(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void loggedInAdminRoleAccess_to_noAnnotationPermitAllByGrandParentView_allowed() {\n-        TestNavigationResult result = checkAccess(\n-                NoAnnotationPermitAllByGrandParentView.class, User.ADMIN);\n-        Assert.assertTrue(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void loggedInAdminRoleAccess_to_noAnnotationDenyAllByGrandParentView_denied() {\n-        TestNavigationResult result = checkAccess(\n-                NoAnnotationDenyAllByGrandParentView.class, User.ADMIN);\n-        Assert.assertFalse(result.wasTargetViewRendered());\n-        Assert.assertEquals(AccessDeniedException.class,\n-                result.getRerouteError());\n-    }\n-\n-    @Test\n-    public void loggedInAdminRoleAccess_to_noAnnotationRolesAllowedUserByGrandParentView_denied() {\n-        TestNavigationResult result = checkAccess(\n-                NoAnnotationRolesAllowedUserByGrandParentView.class,\n-                User.ADMIN);\n-        Assert.assertFalse(result.wasTargetViewRendered());\n-        Assert.assertEquals(NotFoundException.class, result.getRerouteError());\n-    }\n-\n-    @Test\n-    public void loggedInAdminRoleAccess_To_noAnnotationRolesAllowedAdminByGrandParentView_allowed() {\n-        TestNavigationResult result = checkAccess(\n-                NoAnnotationRolesAllowedAdminByGrandParentView.class,\n-                User.ADMIN);\n-        Assert.assertTrue(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void anyAccess_to_noAnnotationDenyAllAsInterfacesIgnoredView_denied() {\n-        Assert.assertFalse(\n-                checkAccess(NoAnnotationDenyAllAsInterfacesIgnoredView.class,\n-                        null).wasTargetViewRendered());\n-\n-        Assert.assertFalse(\n-                checkAccess(NoAnnotationDenyAllAsInterfacesIgnoredView.class,\n-                        User.USER_NO_ROLES).wasTargetViewRendered());\n-\n-        Assert.assertFalse(\n-                checkAccess(NoAnnotationDenyAllAsInterfacesIgnoredView.class,\n-                        User.NORMAL_USER).wasTargetViewRendered());\n-\n-        Assert.assertFalse(\n-                checkAccess(NoAnnotationDenyAllAsInterfacesIgnoredView.class,\n-                        User.ADMIN).wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void anonymousAccess_to_noAnnotationPermitAllByGrandParentAsInterfacesIgnoredView_denied() {\n-        TestNavigationResult result = checkAccess(\n-                NoAnnotationPermitAllByGrandParentAsInterfacesIgnoredView.class,\n-                null);\n-        Assert.assertFalse(result.wasTargetViewRendered());\n-    }\n-\n-    @Test\n-    public void loggedInNoRolesAccess_to_noAnnotationPermitAllByGrandParentAsInterfacesIgnoredView_allowed() {\n-        TestNavigationResult result = checkAccess(\n-                NoAnnotationPermitAllByGrandParentAsInterfacesIgnoredView.class,\n-                User.USER_NO_ROLES);\n-        Assert.assertTrue(result.wasTargetViewRendered());\n-    }\n-\n-    private void resetLoginView()\n-            throws NoSuchFieldException, IllegalAccessException {\n-        Field f = ViewAccessChecker.class.getDeclaredField(\"loginView\");\n-        f.setAccessible(true);\n-        f.set(this.viewAccessChecker, null);\n-    }\n-\n-    private TestNavigationResult checkAccess(Class<?> viewClass, User user) {\n-        return checkAccess(viewClass, user, true);\n-    }\n-\n-    private TestNavigationResult checkAccess(Class<?> viewClass, User user,\n-            boolean productionMode) {\n-        TestNavigationResult result = setupRequest(viewClass, user,\n-                productionMode);\n-        BeforeEnterEvent event = result.event;\n-\n-        this.viewAccessChecker.beforeEnter(event);\n-        return result;\n-    }\n-\n-    static TestNavigationResult setupRequest(Class navigationTarget, User user,\n-            boolean productionMode) {\n-        CurrentInstance.clearAll();\n-\n-        Principal principal;\n-        String[] roles;\n-\n-        if (user == User.USER_NO_ROLES) {\n-            principal = AccessAnnotationCheckerTest.USER_PRINCIPAL;\n-            roles = new String[0];\n-        } else if (user == User.NORMAL_USER) {\n-            principal = AccessAnnotationCheckerTest.USER_PRINCIPAL;\n-            roles = new String[] { \"user\" };\n-        } else if (user == User.ADMIN) {\n-            principal = AccessAnnotationCheckerTest.USER_PRINCIPAL;\n-            roles = new String[] { \"admin\" };\n-        } else {\n-            principal = null;\n-            roles = new String[0];\n-        }\n-\n-        VaadinServletRequest vaadinServletRequest = Mockito\n-                .mock(VaadinServletRequest.class);\n-        HttpServletRequest httpServletRequest = AccessAnnotationCheckerTest\n-                .createRequest(principal, roles);\n-        Mockito.when(vaadinServletRequest.getHttpServletRequest())\n-                .thenReturn(httpServletRequest);\n-        Mockito.when(vaadinServletRequest.getUserPrincipal())\n-                .thenAnswer(answer -> httpServletRequest.getUserPrincipal());\n-        Mockito.when(vaadinServletRequest.getSession())\n-                .thenAnswer(answer -> httpServletRequest.getSession());\n-        Mockito.when(vaadinServletRequest.getSession(anyBoolean())).thenAnswer(\n-                answer -> httpServletRequest.getSession(answer.getArgument(0)));\n-        Mockito.when(vaadinServletRequest.isUserInRole(Mockito.any()))\n-                .thenAnswer(answer -> httpServletRequest\n-                        .isUserInRole(answer.getArgument(0)));\n-        Mockito.when(vaadinServletRequest.getRequestURL()).thenReturn(\n-                new StringBuffer(AccessAnnotationCheckerTest.REQUEST_URL));\n-\n-        Mockito.when(vaadinServletRequest.getWrappedSession())\n-                .thenCallRealMethod();\n-        Mockito.when(vaadinServletRequest.getWrappedSession(anyBoolean()))\n-                .thenCallRealMethod();\n-\n-        CurrentInstance.set(VaadinRequest.class, vaadinServletRequest);\n-\n-        Router router = Mockito.mock(Router.class);\n-        UI ui = Mockito.mock(UI.class);\n-        Page page = Mockito.mock(Page.class);\n-        Mockito.when(ui.getPage()).thenReturn(page);\n-        VaadinSession vaadinSession = Mockito.mock(VaadinSession.class);\n-        Mockito.when(ui.getSession()).thenReturn(vaadinSession);\n-        DeploymentConfiguration configuration = Mockito\n-                .mock(DeploymentConfiguration.class);\n-        Mockito.when(vaadinSession.getConfiguration())\n-                .thenReturn(configuration);\n-        Mockito.when(configuration.isProductionMode())\n-                .thenReturn(productionMode);\n-\n-        UIInternals uiInternals = Mockito.mock(UIInternals.class);\n-        Mockito.when(ui.getInternals()).thenReturn(uiInternals);\n-        Mockito.when(uiInternals.getRouter()).thenReturn(router);\n-\n-        Mockito.when(router.getErrorNavigationTarget(Mockito.any()))\n-                .thenAnswer(invocation -> {\n-                    Class<?> exceptionClass = invocation.getArguments()[0]\n-                            .getClass();\n-                    if (exceptionClass == NotFoundException.class) {\n-                        return Optional.of(\n-                                new ErrorTargetEntry(RouteNotFoundError.class,\n-                                        NotFoundException.class));\n-                    } else if (exceptionClass == AccessDeniedException.class) {\n-                        return Optional.of(new ErrorTargetEntry(\n-                                RouteAccessDeniedError.class,\n-                                AccessDeniedException.class));\n-                    } else {\n-                        return Optional.empty();\n-                    }\n-\n-                });\n-        Location location = new Location(getRoute(navigationTarget));\n-        NavigationEvent navigationEvent = new NavigationEvent(router, location,\n-                ui, NavigationTrigger.ROUTER_LINK);\n-        BeforeEnterEvent event = new BeforeEnterEvent(navigationEvent,\n-                navigationTarget, new ArrayList<>());\n-\n-        RouteRegistry routeRegistry = Mockito.mock(RouteRegistry.class);\n-        Mockito.when(router.getRegistry()).thenReturn(routeRegistry);\n-        Mockito.when(routeRegistry.getNavigationTarget(Mockito.anyString()))\n-                .thenAnswer(invocation -> {\n-                    String url = (String) invocation.getArguments()[0];\n-                    if (location.getPath().equals(url)) {\n-                        return Optional.of(navigationTarget);\n-                    } else {\n-                        return Optional.empty();\n-                    }\n-                });\n-\n-        HttpSession session = Mockito.mock(HttpSession.class);\n-        Map<String, Object> sessionAttributes = new HashMap<>();\n-        Mockito.when(httpServletRequest.getSession()).thenReturn(session);\n-        Mockito.when(httpServletRequest.getSession(anyBoolean()))\n-                .thenReturn(session);\n-        Mockito.doAnswer(invocation -> {\n-            String key = (String) invocation.getArguments()[0];\n-            Object value = invocation.getArguments()[1];\n-\n-            sessionAttributes.put(key, value);\n-\n-            return null;\n-        }).when(session).setAttribute(Mockito.anyString(), Mockito.any());\n-\n-        TestNavigationResult info = new TestNavigationResult();\n-        info.event = event;\n-        info.sessionAttributes = sessionAttributes;\n-\n-        return info;\n-    }\n-\n-    static String getRoute(Class<?> navigationTarget) {\n-        Optional<Route> route = AnnotationReader\n-                .getAnnotationFor(navigationTarget, Route.class);\n-\n-        return RouteUtil.getRoutePath(new MockVaadinContext(),\n-                navigationTarget);\n-    }\n-\n-}\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandlerTest.java\nindex 5ecb8c65edd..eab004dc553 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandlerTest.java\n@@ -117,7 +117,6 @@ public void setUp() throws Exception {\n         responseOutput = new ByteArrayOutputStream();\n         Mockito.when(response.getOutputStream()).thenReturn(responseOutput);\n         deploymentConfiguration = mocks.getDeploymentConfiguration();\n-        deploymentConfiguration.setFrontendHotdeploy(false);\n         deploymentConfiguration.setProductionMode(true);\n         indexHtmlRequestHandler = new IndexHtmlRequestHandler();\n         context = service.getContext();\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlWriterTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlWriterTest.java\nindex 77d27ba6f45..72e66eb68c9 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlWriterTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlWriterTest.java\n@@ -446,7 +446,7 @@ private UI initializeUIForDependenciesTest(UI ui) throws Exception {\n         when(vaadinRequestMock.getHttpServletRequest())\n                 .thenReturn(servletRequestMock);\n \n-        ui.doInit(vaadinRequestMock, 1);\n+        ui.doInit(vaadinRequestMock, 1, \"foo\");\n         ui.getInternals().getRouter().initializeUI(ui,\n                 UITest.requestToLocation(vaadinRequestMock));\n \n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandlerViteTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandlerViteTest.java\nindex 6fd692cd03b..d81709a1415 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandlerViteTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandlerViteTest.java\n@@ -72,8 +72,6 @@ public class WebComponentBootstrapHandlerViteTest {\n \n     private DeploymentConfiguration deploymentConfiguration;\n \n-    private VaadinService vaadinService;\n-\n     @Before\n     public void init() throws IOException {\n         projectRootFolder = temporaryFolder.newFolder();\n@@ -208,7 +206,6 @@ protected void instrumentMockLookup(Lookup lookup) {\n         session.setConfiguration(service.getDeploymentConfiguration());\n         MockDeploymentConfiguration config = (MockDeploymentConfiguration) service\n                 .getDeploymentConfiguration();\n-        config.setFrontendHotdeploy(false);\n         config.setProjectFolder(projectRootFolder);\n \n         VaadinServletRequest request = Mockito.mock(VaadinServletRequest.class);\n@@ -247,7 +244,6 @@ protected void instrumentMockLookup(Lookup lookup) {\n         session.setConfiguration(service.getDeploymentConfiguration());\n         MockDeploymentConfiguration config = (MockDeploymentConfiguration) service\n                 .getDeploymentConfiguration();\n-        config.setFrontendHotdeploy(false);\n         config.setProjectFolder(projectRootFolder);\n \n         VaadinServletRequest request = Mockito.mock(VaadinServletRequest.class);\n@@ -316,7 +312,6 @@ protected void instrumentMockLookup(Lookup lookup) {\n         session.setConfiguration(service.getDeploymentConfiguration());\n         MockDeploymentConfiguration config = (MockDeploymentConfiguration) service\n                 .getDeploymentConfiguration();\n-        config.setFrontendHotdeploy(false);\n         config.setProjectFolder(projectRootFolder);\n \n         VaadinServletRequest request = Mockito.mock(VaadinServletRequest.class);\n@@ -355,7 +350,6 @@ protected void instrumentMockLookup(Lookup lookup) {\n                 .getDeploymentConfiguration();\n         config.setApplicationOrSystemProperty(SERVLET_PARAMETER_STATISTICS_JSON,\n                 VAADIN_SERVLET_RESOURCES + \"config/stats_no_export.json\");\n-        config.setFrontendHotdeploy(false);\n         config.setProjectFolder(projectRootFolder);\n \n         VaadinServletRequest request = Mockito.mock(VaadinServletRequest.class);\n@@ -383,7 +377,6 @@ public void usageStatistics() throws IOException {\n         session.setConfiguration(service.getDeploymentConfiguration());\n         MockDeploymentConfiguration config = (MockDeploymentConfiguration) service\n                 .getDeploymentConfiguration();\n-        config.setFrontendHotdeploy(false);\n         config.setProjectFolder(projectRootFolder);\n \n         VaadinServletRequest request = Mockito.mock(VaadinServletRequest.class);\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/AbstractNodeUpdateImportsTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/AbstractNodeUpdateImportsTest.java\nindex ffad57aeb0f..efcb6181b00 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/AbstractNodeUpdateImportsTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/AbstractNodeUpdateImportsTest.java\n@@ -38,7 +38,6 @@\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n import org.junit.rules.TemporaryFolder;\n-import org.mockito.Mockito;\n import org.slf4j.Logger;\n \n import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n@@ -227,7 +226,7 @@ private void assertContainsImports(boolean contains, String... imports)\n                 Charset.defaultCharset());\n \n         for (String line : imports) {\n-            assertContains(content, contains, addWebpackPrefix(line));\n+            assertContains(content, contains, addFrontendAlias(line));\n         }\n     }\n \n@@ -250,7 +249,7 @@ private void assertImportOrder(String... imports) throws IOException {\n                 Charset.defaultCharset());\n         int curIndex = -1;\n         for (String line : imports) {\n-            String prefixed = addWebpackPrefix(line);\n+            String prefixed = addFrontendAlias(line);\n             int nextIndex = content.indexOf(prefixed);\n             assertTrue(\"import '\" + prefixed + \"' not found\", nextIndex != -1);\n             assertTrue(\"import '\" + prefixed + \"' appears in the wrong order\",\n@@ -267,7 +266,7 @@ private void removeImports(String... imports) throws IOException {\n \n         Set<String> removed = current\n                 .stream().filter(line -> importsList.stream()\n-                        .map(this::addWebpackPrefix).anyMatch(line::contains))\n+                        .map(this::addFrontendAlias).anyMatch(line::contains))\n                 .collect(Collectors.toSet());\n \n         current.removeAll(removed);\n@@ -278,7 +277,7 @@ private void removeImports(String... imports) throws IOException {\n     }\n \n     private void addImports(String... imports) throws IOException {\n-        String content = Arrays.stream(imports).map(this::addWebpackPrefix)\n+        String content = Arrays.stream(imports).map(this::addFrontendAlias)\n                 .map(s -> \"import '\" + s + \"';\")\n                 .collect(Collectors.joining(\"\\n\"));\n \n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/AbstractUpdateImportsTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/AbstractUpdateImportsTest.java\nindex de501da0f9d..8486bdefea0 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/AbstractUpdateImportsTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/AbstractUpdateImportsTest.java\n@@ -313,7 +313,7 @@ public void generateLines_resultingLinesContainsThemeLinesAndExpectedImportsAndC\n         List<String> expectedLines = new ArrayList<>();\n         getExpectedImports().stream().filter(imp -> imp.equals(\"/foo.css\"))\n                 .forEach(imp -> expectedLines\n-                        .add(\"import '\" + addWebpackPrefix(imp) + \"';\"));\n+                        .add(\"import '\" + addFrontendAlias(imp) + \"';\"));\n \n         // An import without `.js` extension\n         expectedLines.add(\n@@ -781,7 +781,7 @@ private String updateToImport(String value) {\n     private void assertContainsImports(boolean contains, String... imports) {\n         for (String line : imports) {\n             boolean result = updater.getMergedOutput()\n-                    .contains(\"import '\" + addWebpackPrefix(line) + \"';\");\n+                    .contains(\"import '\" + addFrontendAlias(line) + \"';\");\n             String message = \"\\n  \" + (contains ? \"NOT \" : \"\") + \"FOUND '\"\n                     + line + \" IN: \\n\" + updater.getMergedOutput();\n             if (contains) {\n@@ -795,7 +795,7 @@ private void assertContainsImports(boolean contains, String... imports) {\n     private void assertImportOrder(String... imports) {\n         int curIndex = -1;\n         for (String line : imports) {\n-            String prefixed = addWebpackPrefix(line);\n+            String prefixed = addFrontendAlias(line);\n             int nextIndex = updater.getMergedOutput()\n                     .indexOf(\"import '\" + prefixed + \"';\");\n             assertTrue(\"import '\" + prefixed + \"' not found\", nextIndex != -1);\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/CssBundlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/CssBundlerTest.java\nindex 0bd26b04921..7ede194d6a1 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/CssBundlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/CssBundlerTest.java\n@@ -6,6 +6,7 @@\n import java.nio.file.Files;\n \n import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n import org.apache.commons.io.FileUtils;\n import org.junit.Assert;\n import org.junit.Before;\n@@ -285,14 +286,15 @@ private File getThemeFile(String filename) {\n     private void assertImportWorks(String importCss) throws IOException {\n         File f = writeFileWithImport(importCss, \"foo.css\");\n         Assert.assertEquals(importCss, TEST_CSS.trim(),\n-                CssBundler.inlineImports(f.getParentFile(), f).trim());\n+                CssBundler.inlineImports(f.getParentFile(), f,\n+                        new ObjectMapper().createArrayNode()).trim());\n \n     }\n \n     private void assertImportNotHandled(String importCss) throws IOException {\n         File f = writeFileWithImport(importCss, \"foo.css\");\n-        Assert.assertEquals(importCss,\n-                CssBundler.inlineImports(f.getParentFile(), f));\n+        Assert.assertEquals(importCss, CssBundler.inlineImports(\n+                f.getParentFile(), f, new ObjectMapper().createArrayNode()));\n \n     }\n \n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdateTestUtil.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdateTestUtil.java\nindex eb45301f177..fa46b864826 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdateTestUtil.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdateTestUtil.java\n@@ -137,7 +137,7 @@ File resolveImportFile(File directoryWithImportsJs, File nodeModulesPath,\n         return new File(root, jsImport);\n     }\n \n-    String addWebpackPrefix(String s) {\n+    String addFrontendAlias(String s) {\n         if (s.startsWith(\"./\")) {\n             return FRONTEND_FOLDER_ALIAS + s.substring(2);\n         }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java\nindex 093a6ab8ef0..87a57afc9b2 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java\n@@ -30,6 +30,7 @@\n import org.hamcrest.core.StringContains;\n import org.junit.Assert;\n import org.junit.Before;\n+import org.junit.Ignore;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.TemporaryFolder;\n@@ -348,6 +349,7 @@ public void getJsonFileContent_incorrectPackageJsonContent_throwsExceptionWithFi\n     }\n \n     @Test\n+    @Ignore(\"Can be removed if we agree on ignoring potential issues in [23 + webpack] -> [25] upgrades\")\n     public void removedAllOldAndExistingPlugins() throws IOException {\n         File packageJson = new File(npmFolder, \"package.json\");\n         FileWriter packageJsonWriter = new FileWriter(packageJson);\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdateSettingsFileTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdateSettingsFileTest.java\nindex 07ea80c0e84..197dbbe571a 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdateSettingsFileTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdateSettingsFileTest.java\n@@ -70,7 +70,7 @@ public void setUp() throws IOException {\n     public void execute_withWebappResourcesDirectory_useAbsolutePaths()\n             throws IOException {\n \n-        options.withWebpack(\n+        options.withBuildResultFolders(\n                 Paths.get(buildDirectory.getPath(), \"classes\",\n                         VAADIN_WEBAPP_RESOURCES).toFile(),\n                 Paths.get(buildDirectory.getPath(), \"classes\",\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/startup/RouteRegistryMenuAccessTest.java b/flow-server/src/test/java/com/vaadin/flow/server/startup/RouteRegistryMenuAccessTest.java\nindex cb953f91d50..23e2464239d 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/startup/RouteRegistryMenuAccessTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/startup/RouteRegistryMenuAccessTest.java\n@@ -19,7 +19,6 @@\n import jakarta.annotation.security.PermitAll;\n import jakarta.annotation.security.RolesAllowed;\n import jakarta.servlet.ServletContext;\n-\n import java.security.Principal;\n import java.util.Collections;\n import java.util.List;\n@@ -44,11 +43,10 @@\n import com.vaadin.flow.server.auth.AnonymousAllowed;\n import com.vaadin.flow.server.auth.MenuAccessControl;\n import com.vaadin.flow.server.auth.NavigationAccessControl;\n-import com.vaadin.flow.server.auth.ViewAccessChecker;\n \n import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.Mockito.when;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n public class RouteRegistryMenuAccessTest {\n \n@@ -158,40 +156,6 @@ public void getRegisteredAccessibleMenuRoutes_withNavAccessControl_admin() {\n         testAsAdmin(new NavigationAccessControl());\n     }\n \n-    @Test\n-    public void getRegisteredAccessibleMenuRoutes_withViewAccessChecker_anonymous() {\n-        testAsAnonymous(new ViewAccessChecker());\n-    }\n-\n-    @Test\n-    public void getRegisteredAccessibleMenuRoutes_withViewAccessChecker_admin() {\n-        testAsAdmin(new ViewAccessChecker());\n-    }\n-\n-    @Test\n-    public void getRegisteredAccessibleMenuRoutes_withNavAccessControlAndViewAccessChecker_admin() {\n-        testAsAdmin(new NavigationAccessControl(), new ViewAccessChecker());\n-    }\n-\n-    @Test\n-    public void getRegisteredAccessibleMenuRoutes_withDisabledNavAccessControlAndViewAccessChecker_anonymous() {\n-        setupForAnonymous();\n-        var navAccessControl = new NavigationAccessControl();\n-        navAccessControl.setEnabled(false);\n-        var viewAccessControl = new ViewAccessChecker(false);\n-        List<BeforeEnterListener> accessControls = List.of(navAccessControl,\n-                viewAccessControl);\n-\n-        registry.clean();\n-        registry.setRoute(\"hasmenu\", MyMenuRoute.class,\n-                Collections.emptyList());\n-        Assert.assertEquals(\"One route should be registered.\", 1,\n-                registry.getRegisteredRoutes().size());\n-        Assert.assertEquals(\"One accessible menu routes should be available.\",\n-                1, registry.getRegisteredAccessibleMenuRoutes(vaadinRequest,\n-                        accessControls).size());\n-    }\n-\n     private void setupForAnonymous() {\n         mockInstantiator(MenuAccessControl.PopulateClientMenu.ALWAYS);\n     }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/startup/VaadinAppShellInitializerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/startup/VaadinAppShellInitializerTest.java\nindex 57e28777ce1..ce809527de5 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/startup/VaadinAppShellInitializerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/startup/VaadinAppShellInitializerTest.java\n@@ -506,7 +506,6 @@ private ApplicationConfiguration mockApplicationConfiguration() {\n         ApplicationConfiguration config = Mockito\n                 .mock(ApplicationConfiguration.class);\n         Mockito.when(config.isProductionMode()).thenReturn(false);\n-        Mockito.when(config.frontendHotdeploy()).thenReturn(true);\n \n         Mockito.when(config.getStringProperty(Mockito.anyString(),\n                 Mockito.anyString()))\n\ndiff --git a/flow-server/src/test/java/com/vaadin/tests/server/SerializationTest.java b/flow-server/src/test/java/com/vaadin/tests/server/SerializationTest.java\nindex e646a5d3b3f..91f4bb7155f 100644\n--- a/flow-server/src/test/java/com/vaadin/tests/server/SerializationTest.java\n+++ b/flow-server/src/test/java/com/vaadin/tests/server/SerializationTest.java\n@@ -101,7 +101,7 @@ public void testSerializeVaadinSession_notProductionMode_disableDevModeSerializa\n         session.setConfiguration(Mockito.mock(DeploymentConfiguration.class,\n                 Mockito.withSettings().serializable()));\n         MockUI ui = new MockUI(session);\n-        ui.doInit(null, 42);\n+        ui.doInit(null, 42, \"foo\");\n         session.addUI(ui);\n \n         session.lock();\n@@ -279,7 +279,7 @@ private static VaadinSession serializeAndDeserializeWithUI(\n         session.setConfiguration(Mockito.mock(DeploymentConfiguration.class,\n                 withSettings().serializable()));\n         MockUI ui = new MockUI(session);\n-        ui.doInit(null, 42);\n+        ui.doInit(null, 42, \"foo\");\n         session.addUI(ui);\n         uiConsumer.accept(ui);\n \n\ndiff --git a/flow-server/src/test/java/com/vaadin/tests/util/MockDeploymentConfiguration.java b/flow-server/src/test/java/com/vaadin/tests/util/MockDeploymentConfiguration.java\nindex 2b776b28fc2..a3327d93e5c 100644\n--- a/flow-server/src/test/java/com/vaadin/tests/util/MockDeploymentConfiguration.java\n+++ b/flow-server/src/test/java/com/vaadin/tests/util/MockDeploymentConfiguration.java\n@@ -15,7 +15,6 @@ public class MockDeploymentConfiguration\n         extends AbstractDeploymentConfiguration {\n \n     private boolean productionMode = false;\n-    private boolean frontendHotdeploy = false;\n     private boolean reuseDevServer = true;\n     private boolean xsrfProtectionEnabled = true;\n     private int heartbeatInterval = 300;\n@@ -55,15 +54,6 @@ public void setProductionMode(boolean productionMode) {\n         this.productionMode = productionMode;\n     }\n \n-    public void setFrontendHotdeploy(boolean frontendHotdeploy) {\n-        this.frontendHotdeploy = frontendHotdeploy;\n-    }\n-\n-    @Override\n-    public boolean frontendHotdeploy() {\n-        return frontendHotdeploy;\n-    }\n-\n     public void setReuseDevServer(boolean reuseDevServer) {\n         this.reuseDevServer = reuseDevServer;\n     }\n\ndiff --git a/flow-tests/test-application-theme/test-theme-component-live-reload/src/test/java/com/vaadin/flow/uitest/ui/ComponentThemeLiveReloadIT.java b/flow-tests/test-application-theme/test-theme-component-live-reload/src/test/java/com/vaadin/flow/uitest/ui/ComponentThemeLiveReloadIT.java\nindex 6af8f44e5be..0d1c29ddf2c 100644\n--- a/flow-tests/test-application-theme/test-theme-component-live-reload/src/test/java/com/vaadin/flow/uitest/ui/ComponentThemeLiveReloadIT.java\n+++ b/flow-tests/test-application-theme/test-theme-component-live-reload/src/test/java/com/vaadin/flow/uitest/ui/ComponentThemeLiveReloadIT.java\n@@ -103,13 +103,13 @@ public void cleanUp() {\n     }\n \n     @Test\n-    public void webpackLiveReload_newComponentStylesCreatedAndDeleted_stylesUpdatedOnFly() {\n+    public void frontendLiveReload_newComponentStylesCreatedAndDeleted_stylesUpdatedOnFly() {\n         open();\n \n         /*\n          * Access browser logs in order to clear them to avoid to check entries\n-         * from a previous run if the test is flaky due to webpack file change\n-         * detection during parent css deletion\n+         * from a previous run if the test is flaky due to dev frontend file\n+         * change detection during parent css deletion\n          */\n         getLogEntries(java.util.logging.Level.ALL);\n \n@@ -138,7 +138,7 @@ public void webpackLiveReload_newComponentStylesCreatedAndDeleted_stylesUpdatedO\n                 this::deleteCurrentThemeComponentStyles);\n         waitUntilComponentInitialStyle(\n                 \"Wait for current theme component initial styles timeout\");\n-        checkNoWebpackErrors(CURRENT_THEME);\n+        checkNoFrontendErrors(CURRENT_THEME);\n \n         // Test parent theme live reload:\n \n@@ -153,7 +153,7 @@ public void webpackLiveReload_newComponentStylesCreatedAndDeleted_stylesUpdatedO\n                 this::deleteParentThemeComponentStyles);\n         waitUntilComponentInitialStyle(\n                 \"Wait for parent theme component initial styles timeout\");\n-        checkNoWebpackErrors(PARENT_THEME);\n+        checkNoFrontendErrors(PARENT_THEME);\n     }\n \n     private void waitUntilComponentInitialStyle(String errMessage) {\n@@ -270,11 +270,11 @@ private void waitUntilWithMessage(ExpectedCondition<?> condition,\n         }\n     }\n \n-    private void checkNoWebpackErrors(String theme) {\n+    private void checkNoFrontendErrors(String theme) {\n         getLogEntries(java.util.logging.Level.ALL).forEach(logEntry -> {\n             if (logEntry.getMessage().contains(\"Module build failed\")) {\n                 Assert.fail(String.format(\n-                        \"Webpack error detected in the browser console after \"\n+                        \"Frontend error detected in the browser console after \"\n                                 + \"deleting '%s' component style sheet: %s\\n\\n\",\n                         theme, logEntry.getMessage()));\n             }\n@@ -286,7 +286,7 @@ private void checkNoWebpackErrors(String theme) {\n         } catch (TimeoutException e) {\n             WebElement error = findElement(byErrorOverlayClass);\n             Assert.fail(String.format(\n-                    \"Webpack error overlay detected after deleting '%s' \"\n+                    \"Frontend error overlay detected after deleting '%s' \"\n                             + \"component style sheet: %s\\n\\n\",\n                     theme, error.getText()));\n         }\n\ndiff --git a/flow-tests/test-application-theme/test-theme-live-reload/src/test/java/com/vaadin/flow/uitest/ui/ThemeLiveReloadIT.java b/flow-tests/test-application-theme/test-theme-live-reload/src/test/java/com/vaadin/flow/uitest/ui/ThemeLiveReloadIT.java\nindex c2ac3e59e87..dda47aea679 100644\n--- a/flow-tests/test-application-theme/test-theme-live-reload/src/test/java/com/vaadin/flow/uitest/ui/ThemeLiveReloadIT.java\n+++ b/flow-tests/test-application-theme/test-theme-live-reload/src/test/java/com/vaadin/flow/uitest/ui/ThemeLiveReloadIT.java\n@@ -75,7 +75,7 @@ private void removeGeneratedFiles() {\n     }\n \n     @Test\n-    public void webpackLiveReload_newCssAndFontCreatedAndDeleted_stylesUpdatedOnFly() {\n+    public void frontendLiveReload_newCssAndFontCreatedAndDeleted_stylesUpdatedOnFly() {\n         open();\n         Assert.assertFalse(\n                 \"Red background is not expected before applying the styles\",\n\ndiff --git a/flow-tests/test-embedding/test-embedding-application-theme/src/test/java/com/vaadin/flow/webcomponent/ApplicationThemeComponentIT.java b/flow-tests/test-embedding/test-embedding-application-theme/src/test/java/com/vaadin/flow/webcomponent/ApplicationThemeComponentIT.java\nindex 5d7fabe14ce..19be6bd23fb 100644\n--- a/flow-tests/test-embedding/test-embedding-application-theme/src/test/java/com/vaadin/flow/webcomponent/ApplicationThemeComponentIT.java\n+++ b/flow-tests/test-embedding/test-embedding-application-theme/src/test/java/com/vaadin/flow/webcomponent/ApplicationThemeComponentIT.java\n@@ -195,7 +195,7 @@ public void documentCssImport_onlyExternalAddedToHeadAsLink() {\n                 .contains(\"https://fonts.googleapis.com/css?family=Poppins\"));\n         Assert.assertTrue(\"Link with media query was not found\", linkUrls\n                 .contains(\"https://fonts.googleapis.com/css?family=Oswald\"));\n-        Assert.assertFalse(\"Found import that webpack should have resolved\",\n+        Assert.assertFalse(\"Found import that Vite should have resolved\",\n                 linkUrls.contains(\"docImport.css\"));\n \n         final List<WebElement> mediaLinks = links.stream()\n\ndiff --git a/flow-tests/test-frontend/vite-basics/src/main/java/com/vaadin/viteapp/BootstrapModifier.java b/flow-tests/test-frontend/vite-basics/src/main/java/com/vaadin/viteapp/BootstrapModifier.java\nindex 5cc75564b28..a6b31168d7d 100644\n--- a/flow-tests/test-frontend/vite-basics/src/main/java/com/vaadin/viteapp/BootstrapModifier.java\n+++ b/flow-tests/test-frontend/vite-basics/src/main/java/com/vaadin/viteapp/BootstrapModifier.java\n@@ -2,13 +2,14 @@\n \n import java.util.List;\n \n+import com.vaadin.flow.server.frontend.Options;\n import com.vaadin.flow.server.frontend.TypeScriptBootstrapModifier;\n+import com.vaadin.flow.server.frontend.scanner.FrontendDependenciesScanner;\n \n public class BootstrapModifier implements TypeScriptBootstrapModifier {\n \n-    @Override\n-    public void modify(List<String> bootstrapTypeScript,\n-            boolean productionMode) {\n+    public void modify(List<String> bootstrapTypeScript, Options options,\n+            FrontendDependenciesScanner frontendDependenciesScanner) {\n         bootstrapTypeScript.add(\"(window as any).bootstrapMod=1;\");\n     }\n \n\ndiff --git a/flow-tests/test-live-reload/src/test/java/com/vaadin/flow/uitest/ui/FrontendLiveReloadIT.java b/flow-tests/test-live-reload/src/test/java/com/vaadin/flow/uitest/ui/FrontendLiveReloadIT.java\nindex c3cae2233b4..707ef48b272 100644\n--- a/flow-tests/test-live-reload/src/test/java/com/vaadin/flow/uitest/ui/FrontendLiveReloadIT.java\n+++ b/flow-tests/test-live-reload/src/test/java/com/vaadin/flow/uitest/ui/FrontendLiveReloadIT.java\n@@ -63,19 +63,19 @@ public void liveReloadOnTouchedFrontendFile() {\n     }\n \n     @Test\n-    public void webpackErrorIsShownAfterReloadAndHiddenAfterFix() {\n+    public void frontendErrorIsShownAfterReloadAndHiddenAfterFix() {\n         open();\n \n-        // when: a webpack error occurs during frontend file edit\n+        // when: a frontend compilation error occurs during frontend file edit\n         WebElement codeField = findElement(\n                 By.id(FrontendLiveReloadView.FRONTEND_CODE_TEXT));\n         String oldCode = getValue(codeField);\n         String erroneousCode = \"{\" + oldCode;\n         codeField.clear();\n         codeField.sendKeys(erroneousCode); // illegal TS\n-        WebElement insertWebpackError = findElement(\n+        WebElement insertFrontendError = findElement(\n                 By.id(FrontendLiveReloadView.FRONTEND_CODE_UPDATE_BUTTON));\n-        insertWebpackError.click();\n+        insertFrontendError.click();\n \n         // then: an error box is shown\n         testBench().disableWaitForVaadin();\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-boot-only-prepare/src/main/java/com/vaadin/flow/spring/test/TestServletInitializer.java b/flow-tests/vaadin-spring-tests/test-spring-boot-only-prepare/src/main/java/com/vaadin/flow/spring/test/TestServletInitializer.java\nindex 919c32a80e4..aff18197d4b 100644\n--- a/flow-tests/vaadin-spring-tests/test-spring-boot-only-prepare/src/main/java/com/vaadin/flow/spring/test/TestServletInitializer.java\n+++ b/flow-tests/vaadin-spring-tests/test-spring-boot-only-prepare/src/main/java/com/vaadin/flow/spring/test/TestServletInitializer.java\n@@ -15,17 +15,12 @@\n  */\n package com.vaadin.flow.spring.test;\n \n-import java.util.List;\n-\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n-import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n \n-import com.vaadin.flow.router.internal.ClientRoutesProvider;\n-\n @SpringBootApplication\n @Configuration\n @EnableWebSecurity\n\ndiff --git a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/DevModeEndpointTest.java b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/DevModeEndpointTest.java\nindex 8f5ba6fa5b9..8bcda945755 100644\n--- a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/DevModeEndpointTest.java\n+++ b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/DevModeEndpointTest.java\n@@ -1,12 +1,6 @@\n package com.vaadin.base.devserver;\n \n-import static com.vaadin.flow.server.Constants.CONNECT_JAVA_SOURCE_FOLDER_TOKEN;\n-import static com.vaadin.flow.server.Constants.TARGET;\n-import static com.vaadin.flow.server.frontend.FrontendUtils.DEFAULT_PROJECT_FRONTEND_GENERATED_DIR;\n-import static com.vaadin.flow.testutil.FrontendStubs.createStubNode;\n-import static com.vaadin.flow.testutil.FrontendStubs.createStubViteServer;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import jakarta.servlet.ServletRegistration;\n \n import java.io.File;\n import java.nio.file.Paths;\n@@ -16,7 +10,13 @@\n import java.util.Map;\n import java.util.Set;\n \n-import jakarta.servlet.ServletRegistration;\n+import net.jcip.annotations.NotThreadSafe;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.MockedStatic;\n+import org.mockito.Mockito;\n \n import com.vaadin.base.devserver.startup.AbstractDevModeTest;\n import com.vaadin.base.devserver.startup.DevModeStartupListener;\n@@ -27,14 +27,13 @@\n import com.vaadin.flow.server.frontend.EndpointGeneratorTaskFactory;\n import com.vaadin.flow.server.frontend.FrontendUtils;\n \n-import org.apache.commons.io.FileUtils;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.mockito.MockedStatic;\n-import org.mockito.Mockito;\n-\n-import net.jcip.annotations.NotThreadSafe;\n+import static com.vaadin.flow.server.Constants.CONNECT_JAVA_SOURCE_FOLDER_TOKEN;\n+import static com.vaadin.flow.server.Constants.TARGET;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.DEFAULT_PROJECT_FRONTEND_GENERATED_DIR;\n+import static com.vaadin.flow.testutil.FrontendStubs.createStubNode;\n+import static com.vaadin.flow.testutil.FrontendStubs.createStubViteServer;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n \n @NotThreadSafe\n public class DevModeEndpointTest extends AbstractDevModeTest {\n@@ -109,6 +108,8 @@ public void should_generateOpenApi() throws Exception {\n         Assert.assertFalse(generatedOpenApiJson.exists());\n         try (MockedStatic<FrontendUtils> util = Mockito\n                 .mockStatic(FrontendUtils.class, Mockito.CALLS_REAL_METHODS)) {\n+            util.when(() -> FrontendUtils.isHillaUsed(Mockito.any()))\n+                    .thenReturn(true);\n             util.when(() -> FrontendUtils.isHillaUsed(Mockito.any(),\n                     Mockito.any())).thenReturn(true);\n             devModeStartupListener.onStartup(classes, servletContext);\n@@ -141,6 +142,8 @@ public void should_generateTs_files() throws Exception {\n         assertFalse(ts2.exists());\n         try (MockedStatic<FrontendUtils> util = Mockito\n                 .mockStatic(FrontendUtils.class, Mockito.CALLS_REAL_METHODS)) {\n+            util.when(() -> FrontendUtils.isHillaUsed(Mockito.any()))\n+                    .thenReturn(true);\n             util.when(() -> FrontendUtils.isHillaUsed(Mockito.any(),\n                     Mockito.any())).thenReturn(true);\n             devModeStartupListener.onStartup(classes, servletContext);\n\ndiff --git a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/MockDeploymentConfiguration.java b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/MockDeploymentConfiguration.java\nindex 0d21d68d064..2290d95620f 100644\n--- a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/MockDeploymentConfiguration.java\n+++ b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/MockDeploymentConfiguration.java\n@@ -14,7 +14,6 @@ public class MockDeploymentConfiguration\n         extends AbstractDeploymentConfiguration {\n \n     private boolean productionMode = false;\n-    private boolean frontendHotdeploy = true;\n     private boolean reuseDevServer = true;\n     private boolean xsrfProtectionEnabled = true;\n     private int heartbeatInterval = 300;\n@@ -51,15 +50,6 @@ public void setProductionMode(boolean productionMode) {\n         this.productionMode = productionMode;\n     }\n \n-    public void setFrontendHotdeploy(boolean frontendHotdeploy) {\n-        this.frontendHotdeploy = frontendHotdeploy;\n-    }\n-\n-    @Override\n-    public boolean frontendHotdeploy() {\n-        return frontendHotdeploy;\n-    }\n-\n     public void setReuseDevServer(boolean reuseDevServer) {\n         this.reuseDevServer = reuseDevServer;\n     }\n\ndiff --git a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/AbstractDevModeTest.java b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/AbstractDevModeTest.java\nindex 6db03af5d1c..ce73274015d 100644\n--- a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/AbstractDevModeTest.java\n+++ b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/AbstractDevModeTest.java\n@@ -1,5 +1,7 @@\n package com.vaadin.base.devserver.startup;\n \n+import jakarta.servlet.ServletContext;\n+\n import java.io.File;\n import java.io.IOException;\n import java.lang.reflect.Field;\n@@ -11,7 +13,6 @@\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.rules.TemporaryFolder;\n-import org.mockito.MockedStatic;\n import org.mockito.Mockito;\n \n import com.vaadin.base.devserver.AbstractDevServerRunner;\n@@ -23,6 +24,7 @@\n import com.vaadin.flow.internal.DevModeHandler;\n import com.vaadin.flow.internal.DevModeHandlerManager;\n import com.vaadin.flow.server.Constants;\n+import com.vaadin.flow.server.Mode;\n import com.vaadin.flow.server.StaticFileHandlerFactory;\n import com.vaadin.flow.server.StaticFileServer;\n import com.vaadin.flow.server.VaadinService;\n@@ -31,8 +33,6 @@\n import com.vaadin.flow.server.frontend.FrontendUtils;\n import com.vaadin.flow.server.startup.ApplicationConfiguration;\n \n-import jakarta.servlet.ServletContext;\n-\n public abstract class AbstractDevModeTest {\n \n     @Rule\n@@ -121,12 +121,8 @@ private void mockApplicationConfiguration(\n                 Mockito.anyString()))\n                 .thenAnswer(invocation -> invocation.getArgument(1));\n         Mockito.when(appConfig.isProductionMode()).thenReturn(false);\n-        try (MockedStatic<FrontendUtils> util = Mockito\n-                .mockStatic(FrontendUtils.class)) {\n-            util.when(() -> FrontendUtils.isHillaUsed(Mockito.any()))\n-                    .thenReturn(false);\n-            Mockito.when(appConfig.frontendHotdeploy()).thenReturn(true);\n-        }\n+        Mockito.when(appConfig.getMode())\n+                .thenReturn(Mode.DEVELOPMENT_FRONTEND_LIVERELOAD);\n         Mockito.when(appConfig.isPnpmEnabled()).thenReturn(enablePnpm);\n \n         Mockito.when(appConfig.getBooleanProperty(Mockito.anyString(),\n\ndiff --git a/vaadin-spring/src/test/java/com/vaadin/flow/spring/SpringViewAccessCheckerTest.java b/vaadin-spring/src/test/java/com/vaadin/flow/spring/SpringViewAccessCheckerTest.java\ndeleted file mode 100644\nindex 311d90dd252..00000000000\n--- a/vaadin-spring/src/test/java/com/vaadin/flow/spring/SpringViewAccessCheckerTest.java\n+++ /dev/null\n@@ -1,93 +0,0 @@\n-package com.vaadin.flow.spring;\n-\n-import java.security.Principal;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.function.Function;\n-\n-import org.junit.Assert;\n-import org.junit.jupiter.api.Test;\n-import org.mockito.Mockito;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.security.core.Authentication;\n-import org.springframework.security.core.GrantedAuthority;\n-import org.springframework.security.core.authority.SimpleGrantedAuthority;\n-import org.springframework.security.core.context.SecurityContext;\n-import org.springframework.security.core.context.SecurityContextHolder;\n-import org.springframework.test.context.bean.override.mockito.MockitoBean;\n-\n-import com.vaadin.flow.component.Component;\n-import com.vaadin.flow.router.BeforeEnterEvent;\n-import com.vaadin.flow.server.auth.AccessAnnotationChecker;\n-import com.vaadin.flow.server.auth.ViewAccessChecker;\n-\n-@SpringBootTest(classes = { SpringViewAccessChecker.class })\n-@Deprecated(forRemoval = true)\n-class SpringViewAccessCheckerTest {\n-\n-    @MockitoBean\n-    private AccessAnnotationChecker annotationChecker;\n-    @MockitoBean\n-    private Authentication authentication;\n-\n-    @Autowired\n-    private ViewAccessChecker checker;\n-\n-    public static class TestView extends Component {\n-\n-    }\n-\n-    @Test\n-    void viewAccessControlWorksWithoutRequest() {\n-        checker.enable();\n-        AtomicBoolean accessChecked = new AtomicBoolean(false);\n-\n-        List<GrantedAuthority> grantedAuthorities = new ArrayList<>();\n-        grantedAuthorities.add(new SimpleGrantedAuthority(\"ROLE_fake\"));\n-\n-        Mockito.when(authentication.getAuthorities())\n-                .thenReturn((Collection) grantedAuthorities);\n-        SecurityContextHolder.setContext(new SecurityContext() {\n-\n-            @Override\n-            public Authentication getAuthentication() {\n-                return authentication;\n-            }\n-\n-            @Override\n-            public void setAuthentication(Authentication authentication) {\n-            }\n-\n-        });\n-        Mockito.when(annotationChecker.hasAccess(Mockito.any(Class.class),\n-                Mockito.any(), Mockito.any())).thenAnswer(answer -> {\n-                    Principal principal = answer.getArgument(1);\n-                    Function<String, Boolean> roleChecker = answer\n-                            .getArgument(2);\n-\n-                    Assert.assertEquals(\n-                            \"Principal from security context should have been passed to checker\",\n-                            authentication, principal);\n-\n-                    Assert.assertTrue(\n-                            \"Role should have been checked from the context holder\",\n-                            roleChecker.apply(\"fake\"));\n-                    Assert.assertFalse(\n-                            \"Role should have been checked from the context holder\",\n-                            roleChecker.apply(\"fake2\"));\n-                    accessChecked.set(true);\n-                    return true;\n-                });\n-\n-        BeforeEnterEvent beforeEnterEvent = Mockito\n-                .mock(BeforeEnterEvent.class);\n-        Mockito.when(beforeEnterEvent.getNavigationTarget())\n-                .thenReturn((Class) TestView.class);\n-        checker.beforeEnter(beforeEnterEvent);\n-        Assert.assertTrue(\"Annotation checker should have been invoked\",\n-                accessChecked.get());\n-    }\n-}\n\ndiff --git a/vaadin-spring/src/test/java/com/vaadin/flow/spring/VaadinServletContextInitializerTest.java b/vaadin-spring/src/test/java/com/vaadin/flow/spring/VaadinServletContextInitializerTest.java\nindex 5ab4e3ca3d6..7e7f669bb20 100644\n--- a/vaadin-spring/src/test/java/com/vaadin/flow/spring/VaadinServletContextInitializerTest.java\n+++ b/vaadin-spring/src/test/java/com/vaadin/flow/spring/VaadinServletContextInitializerTest.java\n@@ -99,8 +99,6 @@ public void onStartup_devModeNotInitialized_devModeInitialized()\n         Mockito.when(devModeHandlerManager.getHandlesTypes())\n                 .thenReturn(new Class<?>[0]);\n \n-        Mockito.when(appConfig.frontendHotdeploy()).thenReturn(true);\n-\n         VaadinServletContextInitializer vaadinServletContextInitializer = getStubbedVaadinServletContextInitializer();\n \n         // Simulate Spring context start only\n@@ -124,8 +122,6 @@ public void onStartup_devModeAlreadyInitialized_devModeInitializationSkipped()\n         Mockito.when(devModeHandlerManager.getHandlesTypes())\n                 .thenReturn(new Class<?>[0]);\n \n-        Mockito.when(appConfig.frontendHotdeploy()).thenReturn(true);\n-\n         VaadinServletContextInitializer vaadinServletContextInitializer = getStubbedVaadinServletContextInitializer();\n \n         // Simulate Spring context start only\n@@ -299,8 +295,6 @@ private void mockEnvironment() {\n     private void mockDeploymentConfiguration() {\n         Mockito.when(deploymentConfiguration.isProductionMode())\n                 .thenReturn(false);\n-        Mockito.when(deploymentConfiguration.frontendHotdeploy())\n-                .thenReturn(true);\n     }\n \n     private void mockApplicationContext() {\n\ndiff --git a/vaadin-spring/src/test/java/com/vaadin/flow/spring/scopes/AbstractUIScopedTest.java b/vaadin-spring/src/test/java/com/vaadin/flow/spring/scopes/AbstractUIScopedTest.java\nindex 3db045501cf..46f78f67a1d 100644\n--- a/vaadin-spring/src/test/java/com/vaadin/flow/spring/scopes/AbstractUIScopedTest.java\n+++ b/vaadin-spring/src/test/java/com/vaadin/flow/spring/scopes/AbstractUIScopedTest.java\n@@ -93,7 +93,7 @@ protected UI mockUI() {\n \n         ui = new UI();\n         ui.getInternals().setSession(session);\n-        ui.doInit(null, 1);\n+        ui.doInit(null, 1, \"foo\");\n \n         UI.setCurrent(ui);\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21402",
    "pr_id": 21402,
    "issue_id": 21370,
    "repo": "vaadin/flow",
    "problem_statement": "[Signals] Provide a way of subscribing to changes / events\n### Describe your motivation\n\nHilla emits signal instances from the endpoints, which behind the scene is translated to a Flux connection that could be subscribed to, and get notified asynchronously about the changes applied to the server-side signal instance. \n\nSignal instance should have public API to enable Hilla's Full-stack Signals library subscribing to the details of submitted commands and their results. \n\n### Describe the solution you'd like\n\nSome background:\nThe client-side implementation sends updates in form of commands via `POST` requests that optimistically assumed as successful as long as it reaches the server, since it is not awaiting for a response. Actual updates are received though a Flux (websocket subscription) asynchronously. Each received update is either the result of a command that is sent by an instance of the client-side signal itself, or the commands sent by other clients. As the result, a client-side signal instance should be able to distinguish between the command sent itself, and whether it was applied successfully or got rejected. This enables a client-side signal to ignore, accept, or retry a command based on the received update. Previous implementation of the Full-stack Signals in Hilla was using the same unique ID of the client command also for the asynchronous responses (sent through websocket).\n\nThis feature request is about a public API that enables subscribing to the signal changes in a way that the received updates are identifiable.\n\n",
    "issue_word_count": 248,
    "test_files_count": 3,
    "non_test_files_count": 5,
    "pr_changed_files": [
      "signals/src/main/java/com/vaadin/signals/Signal.java",
      "signals/src/main/java/com/vaadin/signals/SignalUtils.java",
      "signals/src/main/java/com/vaadin/signals/impl/AsynchronousSignalTree.java",
      "signals/src/main/java/com/vaadin/signals/impl/SignalTree.java",
      "signals/src/main/java/com/vaadin/signals/impl/SynchronousSignalTree.java",
      "signals/src/test/java/com/vaadin/signals/SignalUtilsTest.java",
      "signals/src/test/java/com/vaadin/signals/impl/AsynchronousSignalTreeTest.java",
      "signals/src/test/java/com/vaadin/signals/impl/SynchronousSignalTreeTest.java"
    ],
    "pr_changed_test_files": [
      "signals/src/test/java/com/vaadin/signals/SignalUtilsTest.java",
      "signals/src/test/java/com/vaadin/signals/impl/AsynchronousSignalTreeTest.java",
      "signals/src/test/java/com/vaadin/signals/impl/SynchronousSignalTreeTest.java"
    ],
    "base_commit": "86a66269c6cd76914e929091f2cd84b9a921cab1",
    "head_commit": "e50fb78dd98400d1b6d16ecbdc06a513321c2ccc",
    "repo_url": "https://github.com/vaadin/flow/pull/21402",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21402",
    "dockerfile": "",
    "pr_merged_at": "2025-05-28T06:56:58.000Z",
    "patch": "diff --git a/signals/src/main/java/com/vaadin/signals/Signal.java b/signals/src/main/java/com/vaadin/signals/Signal.java\nindex 75380be3bab..62d3574a559 100644\n--- a/signals/src/main/java/com/vaadin/signals/Signal.java\n+++ b/signals/src/main/java/com/vaadin/signals/Signal.java\n@@ -219,7 +219,7 @@ protected Predicate<SignalCommand> mergeValidators(\n      */\n     protected abstract Object usageChangeValue(Data data);\n \n-    private boolean isValid(SignalCommand command) {\n+    boolean isValid(SignalCommand command) {\n         if (command instanceof SignalCommand.ConditionCommand) {\n             return true;\n         } else if (command instanceof SignalCommand.TransactionCommand tx) {\n\ndiff --git a/signals/src/main/java/com/vaadin/signals/SignalUtils.java b/signals/src/main/java/com/vaadin/signals/SignalUtils.java\nnew file mode 100644\nindex 00000000000..81b62dcef7a\n--- /dev/null\n+++ b/signals/src/main/java/com/vaadin/signals/SignalUtils.java\n@@ -0,0 +1,45 @@\n+package com.vaadin.signals;\n+\n+import com.vaadin.signals.impl.SignalTree;\n+\n+/**\n+ * Utility class for accessing/using signals internal API.\n+ * <p>\n+ * <strong>Note</strong>: This is internal API for Vaadin platform's internal\n+ * usages. It is not intended for public use and may change or be removed in\n+ * future releases.\n+ */\n+public class SignalUtils {\n+\n+    /**\n+     * Returns the underlying <code>SignalTree</code> instance of the given\n+     * signal.\n+     *\n+     * @param signal\n+     *            the signal to get the tree of, not <code>null</code>\n+     * @return the signal tree instance, not <code>null</code>\n+     */\n+    public static SignalTree treeOf(Signal<?> signal) {\n+        return signal.tree();\n+    }\n+\n+    /**\n+     * Checks whether the given command is considered valid by the validator\n+     * instance of the provided signal. In case of composite commands such as\n+     * transactions, this method will recursively check the validity of all\n+     * commands in the transaction.\n+     * <p>\n+     * <strong>Note</strong>: This only checks the validity of the commands that\n+     * might make changes to the data.\n+     *\n+     * @param signal\n+     *            the signal to check the command against, not<code>null</code>\n+     * @param command\n+     *            the command to check, not <code>null</code>\n+     * @return <code>true</code> if the command is valid, <code>false</code>\n+     *         otherwise\n+     */\n+    public static boolean isValid(Signal<?> signal, SignalCommand command) {\n+        return signal.isValid(command);\n+    }\n+}\n\ndiff --git a/signals/src/main/java/com/vaadin/signals/impl/AsynchronousSignalTree.java b/signals/src/main/java/com/vaadin/signals/impl/AsynchronousSignalTree.java\nindex d4488ca40ad..744f9c15f1e 100644\n--- a/signals/src/main/java/com/vaadin/signals/impl/AsynchronousSignalTree.java\n+++ b/signals/src/main/java/com/vaadin/signals/impl/AsynchronousSignalTree.java\n@@ -77,6 +77,8 @@ public void confirm(List<SignalCommand> commands) {\n             notifyObservers(oldSubmitted, submitted);\n \n             unconfirmedCommands.notifyResultHandlers(results, commands);\n+\n+            notifyProcessedCommandSubscribers(commands, results);\n         });\n     }\n \n\ndiff --git a/signals/src/main/java/com/vaadin/signals/impl/SignalTree.java b/signals/src/main/java/com/vaadin/signals/impl/SignalTree.java\nindex 94ea13f1c49..09ed77761d5 100644\n--- a/signals/src/main/java/com/vaadin/signals/impl/SignalTree.java\n+++ b/signals/src/main/java/com/vaadin/signals/impl/SignalTree.java\n@@ -5,6 +5,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.locks.ReentrantLock;\n+import java.util.function.BiConsumer;\n import java.util.function.Consumer;\n import java.util.function.Supplier;\n \n@@ -90,6 +91,8 @@ public enum Type {\n \n     private final Type type;\n \n+    private final List<BiConsumer<SignalCommand, CommandResult>> subscribers = new ArrayList<>();\n+\n     /**\n      * Creates a new signal tree with the given type.\n      *\n@@ -334,4 +337,46 @@ public void commitSingleCommand(SignalCommand command) {\n     public Type type() {\n         return type;\n     }\n+\n+    /**\n+     * Registers a callback that is executed after commands are processed\n+     * (regardless of acceptance or rejection). It is guaranteed that the\n+     * callback is invoked in the order the commands are processed. Contrary to\n+     * the observers that are attached to a specific node by calling\n+     * {@link #observeNextChange}, the <code>subscriber</code> remains active\n+     * indefinitely until it is removed by executing the returned callback.\n+     *\n+     * @param subscriber\n+     *            the callback to run when a command is confirmed, not\n+     *            <code>null</code>\n+     * @return a callback that can be used to remove the subscriber, not\n+     *         <code>null</code>\n+     */\n+    public Runnable subscribeToProcessed(\n+            BiConsumer<SignalCommand, CommandResult> subscriber) {\n+        assert subscriber != null;\n+        return getWithLock(() -> {\n+            subscribers.add(subscriber);\n+            return wrapWithLock(() -> subscribers.remove(subscriber));\n+        });\n+    }\n+\n+    /**\n+     * Notifies all subscribers after a command is processed. This method must\n+     * be called from a code block that holds the tree lock.\n+     *\n+     * @param commands\n+     *            the list of processed commands, not <code>null</code>\n+     * @param results\n+     *            the map of results for the commands, not <code>null</code>\n+     */\n+    protected void notifyProcessedCommandSubscribers(\n+            List<SignalCommand> commands, Map<Id, CommandResult> results) {\n+        assert hasLock();\n+        for (var command : commands) {\n+            for (var subscriber : subscribers) {\n+                subscriber.accept(command, results.get(command.commandId()));\n+            }\n+        }\n+    }\n }\n\ndiff --git a/signals/src/main/java/com/vaadin/signals/impl/SynchronousSignalTree.java b/signals/src/main/java/com/vaadin/signals/impl/SynchronousSignalTree.java\nindex 879f8d90945..36be531c129 100644\n--- a/signals/src/main/java/com/vaadin/signals/impl/SynchronousSignalTree.java\n+++ b/signals/src/main/java/com/vaadin/signals/impl/SynchronousSignalTree.java\n@@ -72,12 +72,19 @@ public void publishChanges() {\n \n                 notifyObservers(oldSnapshot, snapshot);\n                 changes.notifyResultHandlers(results);\n+\n+                notifyProcessedCommandSubscribers(changes.getCommands(),\n+                        results);\n             }\n \n             @Override\n             public void markAsAborted() {\n-                changes.notifyResultHandlers(CommandResult.rejectAll(results,\n-                        \"Transaction aborted\"));\n+                var rejected = CommandResult.rejectAll(results,\n+                        \"Transaction aborted\");\n+                changes.notifyResultHandlers(rejected);\n+\n+                notifyProcessedCommandSubscribers(changes.getCommands(),\n+                        rejected);\n             }\n         };\n     }\n",
    "test_patch": "diff --git a/signals/src/test/java/com/vaadin/signals/SignalUtilsTest.java b/signals/src/test/java/com/vaadin/signals/SignalUtilsTest.java\nnew file mode 100644\nindex 00000000000..693ee2b42e9\n--- /dev/null\n+++ b/signals/src/test/java/com/vaadin/signals/SignalUtilsTest.java\n@@ -0,0 +1,32 @@\n+package com.vaadin.signals;\n+\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import com.vaadin.signals.impl.SignalTree;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.ArgumentMatchers.any;\n+\n+public class SignalUtilsTest {\n+\n+    @Test\n+    void treeOf_returnsSignalsUnderlyingTree() {\n+        SignalTree tree = Mockito.mock(SignalTree.class);\n+        Signal<?> signal = Mockito.mock(Signal.class);\n+        Mockito.when(signal.tree()).thenReturn(tree);\n+        assertSame(tree, SignalUtils.treeOf(signal));\n+        Mockito.verify(signal, Mockito.times(1)).tree();\n+\n+    }\n+\n+    @Test\n+    void isValid_callsSignalsIsValid() {\n+        Signal<?> signal = Mockito.mock(Signal.class);\n+        SignalCommand command = TestUtil.writeRootValueCommand();\n+        Mockito.when(signal.isValid(any())).thenReturn(true);\n+        assertTrue(SignalUtils.isValid(signal, command));\n+        Mockito.verify(signal, Mockito.times(1)).isValid(command);\n+    }\n+}\n\ndiff --git a/signals/src/test/java/com/vaadin/signals/impl/AsynchronousSignalTreeTest.java b/signals/src/test/java/com/vaadin/signals/impl/AsynchronousSignalTreeTest.java\nindex 46a6eeb6d2f..b2ea46ca23e 100644\n--- a/signals/src/test/java/com/vaadin/signals/impl/AsynchronousSignalTreeTest.java\n+++ b/signals/src/test/java/com/vaadin/signals/impl/AsynchronousSignalTreeTest.java\n@@ -7,6 +7,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Map;\n import java.util.concurrent.atomic.AtomicReference;\n \n import org.junit.jupiter.api.Test;\n@@ -117,4 +118,65 @@ void confirm_overwritingSubmitted_submittedWins() {\n         assertEquals(new TextNode(\"Submitted\"),\n                 TestUtil.readConfirmedRootValue(tree));\n     }\n+\n+    @Test\n+    void subscribeToProcessed_noChanges_doesNotReceive() {\n+        AsyncTestTree tree = new AsyncTestTree();\n+        AtomicReference<Map.Entry<SignalCommand, CommandResult>> resultContainer = new AtomicReference<>();\n+\n+        tree.subscribeToProcessed((event, result) -> resultContainer\n+                .set(Map.entry(event, result)));\n+\n+        assertNull(resultContainer.get());\n+    }\n+\n+    @Test\n+    void subscribeToProcessed_changesConfirmed_receives() {\n+        AsyncTestTree tree = new AsyncTestTree();\n+        AtomicReference<Map.Entry<SignalCommand, CommandResult>> resultContainer = new AtomicReference<>();\n+\n+        tree.subscribeToProcessed((event, result) -> resultContainer\n+                .set(Map.entry(event, result)));\n+\n+        SignalCommand command = TestUtil.writeRootValueCommand(\"submitted\");\n+        tree.commitSingleCommand(command);\n+\n+        assertNull(resultContainer.get());\n+\n+        // Directly confirm another command:\n+        tree.confirm(List.of(TestUtil.writeRootValueCommand(\"confirmed\")));\n+\n+        assertEquals(new TextNode(\"confirmed\"),\n+                ((SignalCommand.SetCommand) resultContainer.get().getKey())\n+                        .value());\n+\n+        tree.confirmSubmitted();\n+        assertEquals(new TextNode(\"submitted\"),\n+                ((SignalCommand.SetCommand) resultContainer.get().getKey())\n+                        .value());\n+\n+        resultContainer.set(null);\n+\n+        // No new things to confirm, no events to publish:\n+        tree.confirmSubmitted();\n+        assertNull(resultContainer.get());\n+    }\n+\n+    @Test\n+    void subscribeToProcessed_failingCommandConfirmed_receives() {\n+        AsyncTestTree tree = new AsyncTestTree();\n+        AtomicReference<Map.Entry<SignalCommand, CommandResult>> resultContainer = new AtomicReference<>();\n+\n+        tree.subscribeToProcessed((event, result) -> resultContainer\n+                .set(Map.entry(event, result)));\n+\n+        SignalCommand command = TestUtil.failingCommand();\n+        tree.commitSingleCommand(command);\n+\n+        assertNull(resultContainer.get());\n+\n+        tree.confirmSubmitted();\n+\n+        assertEquals(command, resultContainer.get().getKey());\n+    }\n }\n\ndiff --git a/signals/src/test/java/com/vaadin/signals/impl/SynchronousSignalTreeTest.java b/signals/src/test/java/com/vaadin/signals/impl/SynchronousSignalTreeTest.java\nindex a4bea5bfdce..6feb78de2f9 100644\n--- a/signals/src/test/java/com/vaadin/signals/impl/SynchronousSignalTreeTest.java\n+++ b/signals/src/test/java/com/vaadin/signals/impl/SynchronousSignalTreeTest.java\n@@ -350,4 +350,103 @@ void observe_observeInCallback_registeredAgain() {\n         assertEquals(1, count.get());\n     }\n \n+    @Test\n+    void subscribeToProcessed_noChanges_doesNotReceive() {\n+        SynchronousSignalTree tree = new SynchronousSignalTree(false);\n+        AtomicReference<Map.Entry<SignalCommand, CommandResult>> resultContainer = new AtomicReference<>();\n+\n+        tree.subscribeToProcessed((event, result) -> resultContainer\n+                .set(Map.entry(event, result)));\n+\n+        assertNull(resultContainer.get());\n+    }\n+\n+    @Test\n+    void subscribeToProcessed_receivesProcessed_bothAcceptedAndFailed() {\n+        SynchronousSignalTree tree = new SynchronousSignalTree(false);\n+        AtomicReference<Map.Entry<SignalCommand, CommandResult>> resultContainer = new AtomicReference<>();\n+\n+        tree.subscribeToProcessed((event, result) -> resultContainer\n+                .set(Map.entry(event, result)));\n+\n+        var id1 = Id.random();\n+        tree.commitSingleCommand(\n+                new SignalCommand.SetCommand(id1, Id.ZERO, new DoubleNode(2)));\n+\n+        assertEquals(id1, resultContainer.get().getKey().commandId());\n+        assertTrue(resultContainer.get().getValue().accepted());\n+\n+        var id2 = Id.random();\n+        tree.commitSingleCommand(\n+                new SignalCommand.RemoveByKeyCommand(id2, Id.ZERO, \"3\"));\n+\n+        assertEquals(id2, resultContainer.get().getKey().commandId());\n+        assertFalse(resultContainer.get().getValue().accepted());\n+    }\n+\n+    @Test\n+    void subscribeToProcessed_transactionCommand_receives() {\n+        SynchronousSignalTree tree = new SynchronousSignalTree(false);\n+        AtomicReference<Map.Entry<SignalCommand, CommandResult>> resultContainer = new AtomicReference<>();\n+\n+        AtomicInteger count = new AtomicInteger();\n+        tree.subscribeToProcessed((event, result) -> {\n+            count.incrementAndGet();\n+            resultContainer.set(Map.entry(event, result));\n+        });\n+\n+        var conditionId = Id.random();\n+        var conditionCommand = new SignalCommand.ValueCondition(conditionId,\n+                Id.ZERO, null);\n+        var setCommandId = Id.random();\n+        var setCommand = new SignalCommand.SetCommand(setCommandId, Id.ZERO,\n+                new DoubleNode(2));\n+        var txCommandID = Id.random();\n+        var transactionCommand = new SignalCommand.TransactionCommand(\n+                txCommandID, List.of(conditionCommand, setCommand));\n+\n+        tree.commitSingleCommand(transactionCommand);\n+\n+        assertEquals(1, count.get());\n+        assertEquals(txCommandID, resultContainer.get().getKey().commandId());\n+    }\n+\n+    @Test\n+    void subscribeToProcessed_subscriberRemoved_doesNotReceiveAnymore() {\n+        SynchronousSignalTree tree = new SynchronousSignalTree(false);\n+        AtomicReference<Map.Entry<SignalCommand, CommandResult>> resultContainer1 = new AtomicReference<>();\n+        AtomicReference<Map.Entry<SignalCommand, CommandResult>> resultContainer2 = new AtomicReference<>();\n+\n+        var canceler1 = tree.subscribeToProcessed((event,\n+                result) -> resultContainer1.set(Map.entry(event, result)));\n+\n+        var canceler2 = tree.subscribeToProcessed((event,\n+                result) -> resultContainer2.set(Map.entry(event, result)));\n+\n+        var id1 = Id.random();\n+        tree.commitSingleCommand(\n+                new SignalCommand.SetCommand(id1, Id.ZERO, new DoubleNode(2)));\n+\n+        assertEquals(id1, resultContainer1.get().getKey().commandId());\n+        assertEquals(id1, resultContainer2.get().getKey().commandId());\n+\n+        canceler1.run(); // removes the first subscriber\n+\n+        resultContainer1.set(null);\n+        resultContainer2.set(null);\n+\n+        tree.commitSingleCommand(\n+                new SignalCommand.SetCommand(id1, Id.ZERO, new DoubleNode(3)));\n+        assertNull(resultContainer1.get());\n+        assertEquals(id1, resultContainer2.get().getKey().commandId());\n+\n+        canceler2.run();\n+        resultContainer2.set(null);\n+\n+        tree.commitSingleCommand(\n+                new SignalCommand.SetCommand(id1, Id.ZERO, new DoubleNode(4)));\n+\n+        assertNull(resultContainer1.get());\n+        assertNull(resultContainer2.get());\n+    }\n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21400",
    "pr_id": 21400,
    "issue_id": 21235,
    "repo": "vaadin/flow",
    "problem_statement": "UploadHandler Factory methods\n### Describe your motivation\n\nA part of UploadHandler that can be done with a split efforts.\n\n### Describe the solution you'd like\n\nAdd factory methods that create a UploadHandler callbacks for commons use cases, e.g. to upload to a temp dir.\n",
    "issue_word_count": 44,
    "test_files_count": 2,
    "non_test_files_count": 8,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/server/streams/AbstractFileUploadHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/streams/FileFactory.java",
      "flow-server/src/main/java/com/vaadin/flow/server/streams/FileUploadHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/streams/InMemoryUploadHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/streams/TemporaryFileFactory.java",
      "flow-server/src/main/java/com/vaadin/flow/server/streams/TemporaryFileUploadHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/streams/UploadHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/streams/UploadMetadata.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/UploadHandlerTest.java",
      "flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/server/communication/UploadHandlerTest.java",
      "flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java"
    ],
    "base_commit": "cdaa75825fb8490ee3cdafc1979733304593b3ac",
    "head_commit": "f3c52cfbf5cee941dc8703624f297c940110cb90",
    "repo_url": "https://github.com/vaadin/flow/pull/21400",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21400",
    "dockerfile": "",
    "pr_merged_at": "2025-05-09T07:46:15.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/streams/AbstractFileUploadHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/streams/AbstractFileUploadHandler.java\nnew file mode 100644\nindex 00000000000..e4cda59c02e\n--- /dev/null\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/streams/AbstractFileUploadHandler.java\n@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.server.streams;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+\n+import com.vaadin.flow.function.SerializableBiConsumer;\n+import com.vaadin.flow.server.TransferProgressListener;\n+\n+/**\n+ * Abstract class for file upload handler.\n+ *\n+ * @param <R>\n+ *            type of file upload handler\n+ *\n+ * @since 24.8\n+ */\n+public abstract class AbstractFileUploadHandler<R extends AbstractFileUploadHandler>\n+        extends TransferProgressAwareHandler<UploadEvent, R>\n+        implements UploadHandler {\n+    private final SerializableBiConsumer<UploadMetadata, File> successHandler;\n+    private final FileFactory fileFactory;\n+\n+    /**\n+     * Creates an upload handler that stores the incoming stream into a\n+     * {@link File} that is generated by the given {@link FileFactory}.\n+     *\n+     * @param successHandler\n+     *            consumer to be called for successful upload\n+     * @param fileFactory\n+     *            factory that generates the {@link File} to store data\n+     */\n+    public AbstractFileUploadHandler(\n+            SerializableBiConsumer<UploadMetadata, File> successHandler,\n+            FileFactory fileFactory) {\n+        this.successHandler = successHandler;\n+        this.fileFactory = fileFactory;\n+    }\n+\n+    @Override\n+    public void handleUploadRequest(UploadEvent event) {\n+        File file;\n+        try {\n+            file = fileFactory.createFile(event.getFileName());\n+            try (InputStream inputStream = event.getInputStream();\n+                    FileOutputStream outputStream = new FileOutputStream(\n+                            file)) {\n+                TransferProgressListener.transfer(inputStream, outputStream,\n+                        getTransferContext(event), getListeners());\n+            }\n+        } catch (IOException e) {\n+            notifyError(event, e);\n+            throw new UncheckedIOException(e);\n+        }\n+        successHandler.accept(new UploadMetadata(event.getFileName(),\n+                event.getContentType(), event.getFileSize()), file);\n+    }\n+\n+    @Override\n+    protected TransferContext getTransferContext(UploadEvent transferEvent) {\n+        return new TransferContext(transferEvent.getRequest(),\n+                transferEvent.getResponse(), transferEvent.getSession(),\n+                transferEvent.getFileName(),\n+                transferEvent.getOwningComponent().getElement(),\n+                transferEvent.getFileSize());\n+    }\n+}\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/streams/FileFactory.java b/flow-server/src/main/java/com/vaadin/flow/server/streams/FileFactory.java\nnew file mode 100644\nindex 00000000000..c073ae9572a\n--- /dev/null\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/streams/FileFactory.java\n@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.server.streams;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+/**\n+ * File factory interface for generating file to store the uploaded data into.\n+ *\n+ * @since 24.8\n+ */\n+@FunctionalInterface\n+public interface FileFactory extends Serializable {\n+\n+    /**\n+     * Create a new file for given file name.\n+     *\n+     * @param fileName\n+     *            file name to create file for\n+     * @return {@link File} that should be used\n+     */\n+    File createFile(String fileName) throws IOException;\n+}\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/streams/FileUploadHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/streams/FileUploadHandler.java\nnew file mode 100644\nindex 00000000000..a5c6ccc6f2c\n--- /dev/null\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/streams/FileUploadHandler.java\n@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.server.streams;\n+\n+import java.io.File;\n+\n+import com.vaadin.flow.function.SerializableBiConsumer;\n+\n+/**\n+ * Upload handler that stores the data into a file generated by the given\n+ * {@link FileFactory}.\n+ *\n+ * @since 24.8\n+ */\n+public class FileUploadHandler\n+        extends AbstractFileUploadHandler<FileUploadHandler> {\n+\n+    /**\n+     * Constructor for file upload handler.\n+     *\n+     * @param successHandler\n+     *            consumer to be called when upload successfully completes\n+     * @param fileFactory\n+     *            factory for generating file to write to\n+     */\n+    public FileUploadHandler(\n+            SerializableBiConsumer<UploadMetadata, File> successHandler,\n+            FileFactory fileFactory) {\n+        super(successHandler, fileFactory);\n+    }\n+}\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/streams/InMemoryUploadHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/streams/InMemoryUploadHandler.java\nnew file mode 100644\nindex 00000000000..442209d2833\n--- /dev/null\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/streams/InMemoryUploadHandler.java\n@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.server.streams;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+\n+import com.vaadin.flow.function.SerializableBiConsumer;\n+import com.vaadin.flow.server.TransferProgressListener;\n+\n+/**\n+ * Upload handler for storing the upload in-memory. Data is returned as a\n+ * {@code byte[]} to the given successHandler.\n+ *\n+ * @since 24.8\n+ */\n+public class InMemoryUploadHandler\n+        extends TransferProgressAwareHandler<UploadEvent, InMemoryUploadHandler>\n+        implements UploadHandler {\n+    private final SerializableBiConsumer<UploadMetadata, byte[]> successHandler;\n+\n+    public InMemoryUploadHandler(\n+            SerializableBiConsumer<UploadMetadata, byte[]> successHandler) {\n+        this.successHandler = successHandler;\n+    }\n+\n+    @Override\n+    public void handleUploadRequest(UploadEvent event) {\n+        byte[] data;\n+        try {\n+            try (InputStream inputStream = event.getInputStream();\n+                    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();) {\n+                TransferProgressListener.transfer(inputStream, outputStream,\n+                        getTransferContext(event), getListeners());\n+                data = outputStream.toByteArray();\n+            }\n+        } catch (IOException e) {\n+            notifyError(event, e);\n+            throw new UncheckedIOException(e);\n+        }\n+        successHandler.accept(new UploadMetadata(event.getFileName(),\n+                event.getContentType(), event.getFileSize()), data);\n+    }\n+\n+    @Override\n+    protected TransferContext getTransferContext(UploadEvent transferEvent) {\n+        return new TransferContext(transferEvent.getRequest(),\n+                transferEvent.getResponse(), transferEvent.getSession(),\n+                transferEvent.getFileName(),\n+                transferEvent.getOwningComponent().getElement(),\n+                transferEvent.getFileSize());\n+    }\n+}\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/streams/TemporaryFileFactory.java b/flow-server/src/main/java/com/vaadin/flow/server/streams/TemporaryFileFactory.java\nnew file mode 100644\nindex 00000000000..7b62f423da2\n--- /dev/null\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/streams/TemporaryFileFactory.java\n@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.server.streams;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+/**\n+ * File factory to generate a temporary file for given file name\n+ *\n+ * @since 24.8\n+ */\n+public class TemporaryFileFactory implements FileFactory {\n+\n+    /**\n+     * Create a new temporary file for filename. Adds the suffix {@code .tmp}\n+     */\n+    @Override\n+    public File createFile(String fileName) throws IOException {\n+\n+        Path tempDirPath;\n+        try {\n+            tempDirPath = Files.createTempDirectory(\"temp_dir\");\n+        } catch (IOException e) {\n+            throw new IOException(\"Failed to create temp directory\", e);\n+        }\n+\n+        return Files.createTempFile(tempDirPath, fileName, \".tmp\").toFile();\n+    }\n+}\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/streams/TemporaryFileUploadHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/streams/TemporaryFileUploadHandler.java\nnew file mode 100644\nindex 00000000000..9332c87c69b\n--- /dev/null\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/streams/TemporaryFileUploadHandler.java\n@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.server.streams;\n+\n+import java.io.File;\n+\n+import com.vaadin.flow.function.SerializableBiConsumer;\n+\n+/**\n+ * Upload handler that stores the data into a temporary file. Stored temporary\n+ * file is returned in the successHandler for further use.\n+ *\n+ * @since 24.8\n+ */\n+public class TemporaryFileUploadHandler\n+        extends AbstractFileUploadHandler<TemporaryFileUploadHandler> {\n+\n+    public TemporaryFileUploadHandler(\n+            SerializableBiConsumer<UploadMetadata, File> successHandler) {\n+        super(successHandler, new TemporaryFileFactory());\n+    }\n+}\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/streams/UploadHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/streams/UploadHandler.java\nindex 7d2987d5fc7..054b803b1c0 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/streams/UploadHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/streams/UploadHandler.java\n@@ -16,12 +16,12 @@\n \n package com.vaadin.flow.server.streams;\n \n+import java.io.File;\n import java.io.IOException;\n import java.io.UncheckedIOException;\n import java.nio.charset.StandardCharsets;\n import java.util.Collection;\n import java.util.Collections;\n-import java.util.Iterator;\n \n import jakarta.servlet.ServletException;\n import jakarta.servlet.http.HttpServletRequest;\n@@ -36,11 +36,10 @@\n import org.slf4j.LoggerFactory;\n \n import com.vaadin.flow.dom.Element;\n-import com.vaadin.flow.internal.StateNode;\n+import com.vaadin.flow.function.SerializableBiConsumer;\n import com.vaadin.flow.server.ElementRequestHandler;\n-import com.vaadin.flow.server.ErrorEvent;\n import com.vaadin.flow.server.HttpStatusCode;\n-import com.vaadin.flow.server.UploadException;\n+import com.vaadin.flow.server.TransferProgressListener;\n import com.vaadin.flow.server.VaadinRequest;\n import com.vaadin.flow.server.VaadinResponse;\n import com.vaadin.flow.server.VaadinSession;\n@@ -228,9 +227,106 @@ default long getFileSizeMax() {\n      * <p>\n      * Default is 10000.\n      *\n-     * @return the maxiumum numner of files allowed, -1 means no limit\n+     * @return the maximum number of files allowed, -1 means no limit\n      */\n     default long getFileCountMax() {\n         return DEFAULT_FILE_COUNT_MAX;\n     }\n+\n+    /**\n+     * Generate a upload handler for storing upload stream into a file.\n+     *\n+     * @param successHandler\n+     *            consumer to be called when upload successfully completes\n+     * @param fileFactory\n+     *            factory for generating file to write to\n+     * @return file upload handler\n+     */\n+    static FileUploadHandler toFile(\n+            SerializableBiConsumer<UploadMetadata, File> successHandler,\n+            FileFactory fileFactory) {\n+        return new FileUploadHandler(successHandler, fileFactory);\n+    }\n+\n+    /**\n+     * Generate a upload handler for storing upload stream into a file.\n+     *\n+     * @param successHandler\n+     *            consumer to be called when upload successfully completes\n+     * @param fileFactory\n+     *            factory for generating file to write to\n+     * @param listener\n+     *            listener for transfer progress events\n+     * @return file upload handler instance with progress listener\n+     */\n+    static FileUploadHandler toFile(\n+            SerializableBiConsumer<UploadMetadata, File> successHandler,\n+            FileFactory fileFactory, TransferProgressListener listener) {\n+        FileUploadHandler fileUploadHandler = new FileUploadHandler(\n+                successHandler, fileFactory);\n+        fileUploadHandler.addTransferProgressListener(listener);\n+        return fileUploadHandler;\n+    }\n+\n+    /**\n+     * Generate upload handler for storing upload stream into a temporary file.\n+     *\n+     * @param successHandler\n+     *            consumer to be called when upload successfully completes\n+     * @return temporary file upload handler instance\n+     */\n+    static TemporaryFileUploadHandler toTempFile(\n+            SerializableBiConsumer<UploadMetadata, File> successHandler) {\n+        return new TemporaryFileUploadHandler(successHandler);\n+    }\n+\n+    /**\n+     * Generate upload handler for storing upload stream into a temporary file.\n+     *\n+     * @param successHandler\n+     *            consumer to be called when upload successfully completes\n+     * @param listener\n+     *            listener for transfer progress events\n+     * @return temporary file upload handler instance with progress listener\n+     */\n+    static TemporaryFileUploadHandler toTempFile(\n+            SerializableBiConsumer<UploadMetadata, File> successHandler,\n+            TransferProgressListener listener) {\n+        TemporaryFileUploadHandler temporaryFileUploadHandler = new TemporaryFileUploadHandler(\n+                successHandler);\n+        temporaryFileUploadHandler.addTransferProgressListener(listener);\n+        return temporaryFileUploadHandler;\n+    }\n+\n+    /**\n+     * Generate upload handler for storing download into in-memory\n+     * {@code byte[]}.\n+     *\n+     * @param successHandler\n+     *            consumer to be called when upload successfully completes\n+     * @return in-memory upoload handler\n+     */\n+    static InMemoryUploadHandler inMemory(\n+            SerializableBiConsumer<UploadMetadata, byte[]> successHandler) {\n+        return new InMemoryUploadHandler(successHandler);\n+    }\n+\n+    /**\n+     * Generate upload handler for storing download into in-memory\n+     * {@code byte[]}.\n+     *\n+     * @param successHandler\n+     *            consumer to be called when upload successfully completes\n+     * @param listener\n+     *            listener for transfer progress events\n+     * @return in-memory upoload handler with progress listener\n+     */\n+    static InMemoryUploadHandler inMemory(\n+            SerializableBiConsumer<UploadMetadata, byte[]> successHandler,\n+            TransferProgressListener listener) {\n+        InMemoryUploadHandler inMemoryUploadHandler = new InMemoryUploadHandler(\n+                successHandler);\n+        inMemoryUploadHandler.addTransferProgressListener(listener);\n+        return inMemoryUploadHandler;\n+    }\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/streams/UploadMetadata.java b/flow-server/src/main/java/com/vaadin/flow/server/streams/UploadMetadata.java\nnew file mode 100644\nindex 00000000000..2a70d3c4d34\n--- /dev/null\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/streams/UploadMetadata.java\n@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.server.streams;\n+\n+/**\n+ * Metadata for successful upload.\n+ */\n+public record UploadMetadata(String fileName, String contentType,\n+        long contentLength) {\n+}\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/UploadHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/UploadHandlerTest.java\nindex f239eef297c..e85c41f0fe2 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/UploadHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/UploadHandlerTest.java\n@@ -1,9 +1,11 @@\n package com.vaadin.flow.server.communication;\n \n+import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.StringReader;\n import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.concurrent.atomic.AtomicBoolean;\n@@ -25,6 +27,7 @@\n \n import com.vaadin.flow.component.UI;\n import com.vaadin.flow.dom.Element;\n+import com.vaadin.flow.function.SerializableBiConsumer;\n import com.vaadin.flow.internal.CurrentInstance;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.server.AbstractStreamResource;\n@@ -37,8 +40,12 @@\n import com.vaadin.flow.server.VaadinResponse;\n import com.vaadin.flow.server.VaadinService;\n import com.vaadin.flow.server.VaadinServletRequest;\n+import com.vaadin.flow.server.streams.FileUploadHandler;\n+import com.vaadin.flow.server.streams.InMemoryUploadHandler;\n+import com.vaadin.flow.server.streams.TemporaryFileUploadHandler;\n import com.vaadin.flow.server.streams.UploadEvent;\n import com.vaadin.flow.server.streams.UploadHandler;\n+import com.vaadin.flow.server.streams.UploadMetadata;\n import com.vaadin.flow.shared.ApplicationConstants;\n import com.vaadin.tests.util.AlwaysLockedVaadinSession;\n import com.vaadin.tests.util.MockUI;\n@@ -162,6 +169,110 @@ public void createUploadHandlerToCopyStream_streamMatchesInput()\n         Assert.assertEquals(\"\", testBytes.length, amount.get());\n     }\n \n+    @Test\n+    public void createInMemoryUploadHandler_streamMatchesInput()\n+            throws IOException {\n+        String testString = \"Test string for upload\";\n+\n+        final byte[] testBytes = testString.getBytes();\n+\n+        final byte[] output = new byte[testBytes.length];\n+\n+        // No lambda as that would require strange things from output\n+        InMemoryUploadHandler uploadHandler = UploadHandler\n+                .inMemory(new SerializableBiConsumer<UploadMetadata, byte[]>() {\n+                    @Override\n+                    public void accept(UploadMetadata uploadMetadata,\n+                            byte[] bytes) {\n+                        Assert.assertEquals(output.length, bytes.length);\n+                        System.arraycopy(bytes, 0, output, 0, bytes.length);\n+                    }\n+                });\n+\n+        StreamRegistration streamRegistration = streamResourceRegistry\n+                .registerResource(uploadHandler);\n+        AbstractStreamResource res = streamRegistration.getResource();\n+\n+        mockRequest(res, testString);\n+\n+        handler.handleRequest(session, request, response);\n+\n+        Assert.assertArrayEquals(\"Output differed from expected\", testBytes,\n+                output);\n+    }\n+\n+    @Test\n+    public void createTempFileUploadHandler_streamMatchesInput()\n+            throws IOException {\n+        String testString = \"Test string for upload\";\n+\n+        final byte[] testBytes = testString.getBytes();\n+\n+        List<File> outputFiles = new ArrayList<>(1);\n+\n+        TemporaryFileUploadHandler uploadHandler = UploadHandler\n+                .toTempFile((uploadMetadata, file) -> outputFiles.add(file));\n+\n+        StreamRegistration streamRegistration = streamResourceRegistry\n+                .registerResource(uploadHandler);\n+        AbstractStreamResource res = streamRegistration.getResource();\n+\n+        mockRequest(res, testString);\n+\n+        try {\n+            handler.handleRequest(session, request, response);\n+\n+            Assert.assertEquals(\"Only one uploaded file expected.\", 1,\n+                    outputFiles.size());\n+            System.out.println(outputFiles.get(0).getPath());\n+\n+            Assert.assertArrayEquals(\"Output differed from expected\", testBytes,\n+                    Files.readAllBytes(outputFiles.get(0).toPath()));\n+        } finally {\n+            // Cleanup temp file after test\n+            for (File file : outputFiles) {\n+                file.delete();\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void createFileUploadHandler_streamMatchesInput()\n+            throws IOException {\n+        String testString = \"Test string for upload\";\n+\n+        final byte[] testBytes = testString.getBytes();\n+\n+        List<File> outputFiles = new ArrayList<>(1);\n+\n+        FileUploadHandler uploadHandler = UploadHandler.toFile(\n+                (uploadMetadata, file) -> outputFiles.add(file),\n+                (fileName) -> new File(System.getProperty(\"java.io.tmpdir\"),\n+                        fileName));\n+\n+        StreamRegistration streamRegistration = streamResourceRegistry\n+                .registerResource(uploadHandler);\n+        AbstractStreamResource res = streamRegistration.getResource();\n+\n+        mockRequest(res, testString);\n+\n+        try {\n+            handler.handleRequest(session, request, response);\n+\n+            Assert.assertEquals(\"Only one uploaded file expected.\", 1,\n+                    outputFiles.size());\n+            System.out.println(outputFiles.get(0).getPath());\n+\n+            Assert.assertArrayEquals(\"Output differed from expected\", testBytes,\n+                    Files.readAllBytes(outputFiles.get(0).toPath()));\n+        } finally {\n+            // Cleanup temp file after test\n+            for (File file : outputFiles) {\n+                file.delete();\n+            }\n+        }\n+    }\n+\n     @Test\n     public void mulitpartData_forInputIterator_dataIsGottenCorrectly()\n             throws IOException {\n\ndiff --git a/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java b/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java\nindex 46a3c216f81..fed48ef0a0b 100644\n--- a/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java\n+++ b/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java\n@@ -223,6 +223,7 @@ protected Stream<String> getExcludedPatterns() {\n                 \"com\\\\.vaadin\\\\.flow\\\\.server\\\\.DownloadEvent\",\n                 \"com\\\\.vaadin\\\\.flow\\\\.server\\\\.communication\\\\.StreamRequestHandler\\\\$PathData\",\n                 \"com\\\\.vaadin\\\\.flow\\\\.server\\\\.streams\\\\.UploadEvent\",\n+                \"com\\\\.vaadin\\\\.flow\\\\.server\\\\.streams\\\\.UploadMetadata\",\n \n                 \"com\\\\.vaadin\\\\.flow\\\\.server\\\\.DevModeHandler(\\\\$.*)?\",\n                 // Frontend tasks classes which are not stored anywhere but used\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21393",
    "pr_id": 21393,
    "issue_id": 21337,
    "repo": "vaadin/flow",
    "problem_statement": "ElementRequestHandler doesn't check enable and attached state of an element\n### Description of the bug\n\n`StreamResourceHandler` should check whether an owner element is attached and it's disabled mode allows to handle the request, see [this place](https://github.com/vaadin/flow/blob/8903acb3b59982d25e45605ebfddeaac31ab3ebf/flow-server/src/main/java/com/vaadin/flow/server/communication/StreamRequestHandler.java#L114).\n\nI think no matter whether it's a download or upload request, it should be checked in the low level handler, because a request can be crafted bypassing the normal way of clicking on UI.\n\n### Expected behavior\n\n`ElementRequestHandler` should not be invoked when an element is disabled or detached.\n\n### Minimal reproducible example\n\nCan be reproduced with something like this:\n```java\n        StreamRegistration streamRegistration = VaadinSession.getCurrent()\n                .getResourceRegistry().registerResource(elementRequestHandler);\n\n        Anchor handlerDownload = new Anchor(\"\", \"Textual DownloadHandler\");\n        handlerDownload.setHref(streamRegistration.getResource());\n        handlerDownload.setEnabled(false);\n        // and sending a request manually\n```\n\n### Versions\n\nFlow version: 24.8.0.alpha9\n",
    "issue_word_count": 149,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/server/communication/StreamRequestHandler.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/StreamRequestHandlerTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/server/communication/StreamRequestHandlerTest.java"
    ],
    "base_commit": "a553b6bf47cd6ea0d28c2a1bb049fe65ebd10cbc",
    "head_commit": "916779fc4a97488d7222b0263911a5b34eb8f445",
    "repo_url": "https://github.com/vaadin/flow/pull/21393",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21393",
    "dockerfile": "",
    "pr_merged_at": "2025-05-06T13:38:38.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/StreamRequestHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/StreamRequestHandler.java\nindex 0861371b623..d790c0b3c45 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/StreamRequestHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/StreamRequestHandler.java\n@@ -25,6 +25,7 @@\n \n import com.vaadin.flow.component.UI;\n import com.vaadin.flow.dom.Element;\n+import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.internal.UrlUtil;\n import com.vaadin.flow.server.AbstractStreamResource;\n import com.vaadin.flow.server.HttpStatusCode;\n@@ -35,7 +36,6 @@\n import com.vaadin.flow.server.VaadinRequest;\n import com.vaadin.flow.server.VaadinResponse;\n import com.vaadin.flow.server.VaadinSession;\n-import com.vaadin.flow.server.frontend.FrontendUtils;\n \n import static com.vaadin.flow.server.communication.StreamReceiverHandler.DEFAULT_FILE_COUNT_MAX;\n import static com.vaadin.flow.server.communication.StreamReceiverHandler.DEFAULT_FILE_SIZE_MAX;\n@@ -98,7 +98,7 @@ public boolean handleRequest(VaadinSession session, VaadinRequest request,\n         try {\n             abstractStreamResource = StreamRequestHandler.getPathUri(pathInfo)\n                     .flatMap(session.getResourceRegistry()::getResource);\n-            if (!abstractStreamResource.isPresent()) {\n+            if (abstractStreamResource.isEmpty()) {\n                 response.sendError(HttpStatusCode.NOT_FOUND.getCode(),\n                         \"Resource is not found for path=\" + pathInfo);\n                 return true;\n@@ -107,31 +107,31 @@ public boolean handleRequest(VaadinSession session, VaadinRequest request,\n             session.unlock();\n         }\n \n-        if (abstractStreamResource.isPresent()) {\n-            AbstractStreamResource resource = abstractStreamResource.get();\n-            if (resource instanceof StreamResourceRegistry.ElementStreamResource elementRequest) {\n-                Element owner = elementRequest.getOwner();\n-                if (owner.getNode().isInert() && !elementRequest\n-                        .getElementRequestHandler().allowInert()) {\n-                    response.sendError(HttpStatusCode.FORBIDDEN.getCode(),\n-                            \"Resource not available\");\n-                    return true;\n-                } else {\n-                    elementRequest.getElementRequestHandler().handleRequest(\n-                            request, response, session,\n-                            elementRequest.getOwner());\n-                }\n-            } else if (resource instanceof StreamResource) {\n-                resourceHandler.handleRequest(session, request, response,\n-                        (StreamResource) resource);\n-            } else if (resource instanceof StreamReceiver streamReceiver) {\n-                String[] parts = parsePath(pathInfo);\n-\n-                receiverHandler.handleRequest(session, request, response,\n-                        streamReceiver, parts[0], parts[1]);\n+        AbstractStreamResource resource = abstractStreamResource.get();\n+        if (resource instanceof StreamResourceRegistry.ElementStreamResource elementRequest) {\n+            Element owner = elementRequest.getOwner();\n+            StateNode node = owner.getNode();\n+\n+            if ((node.isInert()\n+                    && !elementRequest.getElementRequestHandler().allowInert())\n+                    || !node.isAttached() || !node.isEnabled()) {\n+                response.sendError(HttpStatusCode.FORBIDDEN.getCode(),\n+                        \"Resource not available\");\n+                return true;\n             } else {\n-                getLogger().warn(\"Received unknown stream resource.\");\n+                elementRequest.getElementRequestHandler().handleRequest(request,\n+                        response, session, elementRequest.getOwner());\n             }\n+        } else if (resource instanceof StreamResource) {\n+            resourceHandler.handleRequest(session, request, response,\n+                    (StreamResource) resource);\n+        } else if (resource instanceof StreamReceiver streamReceiver) {\n+            String[] parts = parsePath(pathInfo);\n+\n+            receiverHandler.handleRequest(session, request, response,\n+                    streamReceiver, parts[0], parts[1]);\n+        } else {\n+            getLogger().warn(\"Received unknown stream resource.\");\n         }\n         return true;\n     }\n@@ -164,12 +164,8 @@ private String[] parsePath(String pathInfo) {\n      * @return generated URI string\n      */\n     public static String generateURI(String name, String id) {\n-        StringBuilder builder = new StringBuilder(DYN_RES_PREFIX);\n-\n-        builder.append(UI.getCurrent().getUIId()).append(PATH_SEPARATOR);\n-        builder.append(id).append(PATH_SEPARATOR);\n-        builder.append(UrlUtil.encodeURIComponent(name));\n-        return builder.toString();\n+        return DYN_RES_PREFIX + UI.getCurrent().getUIId() + PATH_SEPARATOR + id\n+                + PATH_SEPARATOR + UrlUtil.encodeURIComponent(name);\n     }\n \n     private static Optional<URI> getPathUri(String path) {\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/StreamRequestHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/StreamRequestHandlerTest.java\nindex d5c1ab93bd0..f0240dbd0ea 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/StreamRequestHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/StreamRequestHandlerTest.java\n@@ -15,7 +15,10 @@\n import org.mockito.Mockito;\n \n import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.dom.Element;\n import com.vaadin.flow.internal.CurrentInstance;\n+import com.vaadin.flow.internal.StateNode;\n+import com.vaadin.flow.server.ElementRequestHandler;\n import com.vaadin.flow.server.MockVaadinServletService;\n import com.vaadin.flow.server.MockVaadinSession;\n import com.vaadin.flow.server.ServiceException;\n@@ -133,6 +136,58 @@ public void streamResourceNameContainsPlusAndSpaces_resourceWriter_resourceIsStr\n                 \"readme + mine.md\");\n     }\n \n+    @Test\n+    public void stateNodeStates_handlerMustNotReplyWhenNodeDisabled()\n+            throws IOException {\n+        stateNodeStatesTestInternal(false, true);\n+        Mockito.verify(response).sendError(403, \"Resource not available\");\n+    }\n+\n+    @Test\n+    public void stateNodeStates_handlerMustNotReplyWhenNodeDetached()\n+            throws IOException {\n+        stateNodeStatesTestInternal(true, false);\n+        Mockito.verify(response).sendError(403, \"Resource not available\");\n+    }\n+\n+    @Test\n+    public void stateNodeStates_handlerMustReplyWhenNodeAttachedAndEnabled()\n+            throws IOException {\n+        stateNodeStatesTestInternal(true, true);\n+        Mockito.verify(response, Mockito.never()).sendError(Mockito.anyInt(),\n+                Mockito.anyString());\n+    }\n+\n+    private VaadinResponse stateNodeStatesTestInternal(boolean enabled,\n+            boolean attached) throws IOException {\n+        ElementRequestHandler stateHandler = (request, response, session,\n+                owner) -> {\n+        };\n+\n+        Element owner = Mockito.mock(Element.class);\n+        StateNode stateNode = Mockito.mock(StateNode.class);\n+        Mockito.when(owner.getNode()).thenReturn(stateNode);\n+\n+        Mockito.when(stateNode.isEnabled()).thenReturn(enabled);\n+        Mockito.when(stateNode.isAttached()).thenReturn(attached);\n+\n+        StreamResourceRegistry.ElementStreamResource res = new StreamResourceRegistry.ElementStreamResource(\n+                stateHandler, owner);\n+\n+        streamResourceRegistry.registerResource(res);\n+\n+        ServletOutputStream outputStream = Mockito\n+                .mock(ServletOutputStream.class);\n+        Mockito.when(response.getOutputStream()).thenReturn(outputStream);\n+        Mockito.when(request.getPathInfo())\n+                .thenReturn(String.format(\"/%s%s/%s/%s\", DYN_RES_PREFIX,\n+                        ui.getId().orElse(\"-1\"), res.getId(), res.getName()));\n+\n+        handler.handleRequest(session, request, response);\n+\n+        return response;\n+    }\n+\n     private void testStreamResourceInputStreamFactory(String testString,\n             String fileName) throws IOException {\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21375",
    "pr_id": 21375,
    "issue_id": 21334,
    "repo": "vaadin/flow",
    "problem_statement": "Upgrade webpack to version 5\n### Describe your motivation\n\nWebpack 4 is out of maintenance, we should upgrade webpack to version 5 in Flow 2 and 23 (Vaadin 14 and 23) to keep getting patches to it and to keep Vaadin dependencies up-to-date.\n\n### Additional context\n\nAs a starting point, we could use this branch https://github.com/vaadin/flow/tree/feature/webpack5.\nTarget Vaadin versions are the new minors - 14.13 and 23.6.\n",
    "issue_word_count": 75,
    "test_files_count": 8,
    "non_test_files_count": 7,
    "pr_changed_files": [
      "flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/PrepareFrontendMojoTest.java",
      "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdateWebpack.java",
      "flow-server/src/main/resources/plugins/stats-plugin/stats-plugin.js",
      "flow-server/src/main/resources/plugins/theme-loader/theme-loader.js",
      "flow-server/src/main/resources/webpack.config.js",
      "flow-server/src/main/resources/webpack.generated.js",
      "flow-server/src/test/java/com/vaadin/flow/server/DevModeHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdateWebpackTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/startup/DevModeInitializerTestBase.java",
      "flow-tests/test-live-reload/src/test/java/com/vaadin/flow/uitest/ui/LiveReloadIT.java",
      "flow-tests/test-mixed/pom.xml",
      "flow-tests/test-pwa/src/test/java/com/vaadin/flow/pwatest/ui/PwaTestIT.java"
    ],
    "pr_changed_test_files": [
      "flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/PrepareFrontendMojoTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/DevModeHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdateWebpackTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/startup/DevModeInitializerTestBase.java",
      "flow-tests/test-live-reload/src/test/java/com/vaadin/flow/uitest/ui/LiveReloadIT.java",
      "flow-tests/test-mixed/pom.xml",
      "flow-tests/test-pwa/src/test/java/com/vaadin/flow/pwatest/ui/PwaTestIT.java"
    ],
    "base_commit": "9f483a93523d1557fe4916cb79b5161a15d340c8",
    "head_commit": "8d93f14c3346280f137c663f2d18b4438a1b27bf",
    "repo_url": "https://github.com/vaadin/flow/pull/21375",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21375",
    "dockerfile": "",
    "pr_merged_at": "2025-05-22T07:59:40.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java\nindex 7fdd53c953b..0cd0ce76192 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java\n@@ -93,10 +93,15 @@ public final class DevModeHandler implements RequestHandler {\n     private static final Pattern WEBPACK_ILLEGAL_CHAR_PATTERN = Pattern\n             .compile(\"\\\"|%22\");\n     // It's not possible to know whether webpack is ready unless reading output\n-    // messages. When webpack finishes, it writes either a `Compiled` or a\n-    // `Failed` in the last line\n-    private static final String DEFAULT_OUTPUT_PATTERN = \": Compiled.\";\n-    private static final String DEFAULT_ERROR_PATTERN = \": Failed to compile.\";\n+    // messages. When webpack finishes, it writes either a `compiled` or a\n+    // `compiled with error` in the last line\n+    // Webpack output can be\n+    // webpack 5.51.1 compiled successfully in 27409ms\n+    // webpack 5.51.1 compiled with 34 errors in 42936ms\n+    // webpack 5.51.1 compiled with 2 warnings in 1233ms\n+    // webpack 5.51.1 compiled with 1 error and 1 warning in 7110 ms\n+    private static final String DEFAULT_OUTPUT_PATTERN = \"webpack .* compiled .* in .*ms\";\n+    private static final String DEFAULT_ERROR_PATTERN = \"webpack .* compiled with .* error.* in .* ms\";\n     private static final String FAILED_MSG = \"\\n------------------ Frontend compilation failed. -----------------\";\n     private static final String SUCCEED_MSG = \"\\n----------------- Frontend compiled successfully. -----------------\";\n     private static final String START = \"\\n------------------ Starting Frontend compilation. ------------------\\n\";\n@@ -686,11 +691,10 @@ private boolean doStartWebpack(DeploymentConfiguration config,\n                         SERVLET_PARAMETER_DEVMODE_WEBPACK_TIMEOUT,\n                         DEFAULT_TIMEOUT_FOR_PATTERN)));\n             }\n-\n             if (!webpackProcess.get().isAlive()) {\n-                getLogger().error(\n-                        String.format(\"Webpack failed with the exception:%n%s\",\n-                                cumulativeOutput.toString()));\n+                getLogger().error(\"Webpack failed ({}) with the exception:\\n{}\",\n+                        webpackProcess.get().exitValue(),\n+                        cumulativeOutput.toString());\n                 throw new IllegalStateException(\"Webpack exited prematurely\");\n             }\n \n@@ -724,13 +728,12 @@ private List<String> makeCommands(DeploymentConfiguration config,\n         command.add(webpackConfig.getAbsolutePath());\n         command.add(\"--port\");\n         command.add(String.valueOf(port));\n-        // Workaround for issue with Node 17 webpack dev server denying\n-        // request to localhost. See https://github.com/vaadin/flow/issues/12546\n-        command.add(\"--host=127.0.0.1\");\n+        // Tell wds to stop even if watchDog fail\n+        command.add(\"--watch-options-stdin\");\n \n         command.addAll(Arrays.asList(config\n                 .getStringProperty(SERVLET_PARAMETER_DEVMODE_WEBPACK_OPTIONS,\n-                        \"-d --inline=false\")\n+                        \"--devtool=eval-source-map\")\n                 .split(\" +\")));\n         return command;\n     }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java\nindex badd00a45b0..3588675ce67 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java\n@@ -317,32 +317,30 @@ static Map<String, String> getDefaultDependencies() {\n     static Map<String, String> getDefaultDevDependencies() {\n         Map<String, String> defaults = new HashMap<>();\n \n-        defaults.put(\"webpack\", \"4.47.0\");\n-        defaults.put(\"webpack-cli\", \"3.3.11\");\n-        defaults.put(\"webpack-dev-server\", \"3.11.0\");\n-        defaults.put(\"webpack-babel-multi-target-plugin\", \"2.5.0\");\n+        defaults.put(\"webpack\", \"5.99.6\");\n+        defaults.put(\"webpack-cli\", \"6.0.1\");\n+        defaults.put(\"webpack-dev-server\", \"5.2.1\");\n         // Defining loader until a resolution exists to issue\n         // https://github.com/DanielSchaffer/webpack-babel-multi-target-plugin/issues/94\n-        defaults.put(\"babel-loader\", \"8.2.2\");\n+        defaults.put(\"babel-loader\", \"10.0.0\");\n+        defaults.put(\"@babel/preset-env\", \"7.27.1\");\n         // Defining html-webpack-plugin due to same issue as babel-loader\n-        defaults.put(\"html-webpack-plugin\", \"4.5.2\");\n-        defaults.put(\"copy-webpack-plugin\", \"5.1.2\");\n-        defaults.put(\"compression-webpack-plugin\", \"4.0.1\");\n+        defaults.put(\"html-webpack-plugin\", \"5.6.3\");\n+        defaults.put(\"copy-webpack-plugin\", \"13.0.0\");\n+        defaults.put(\"compression-webpack-plugin\", \"11.1.0\");\n         defaults.put(\"extra-watch-webpack-plugin\", \"1.0.3\");\n-        defaults.put(\"webpack-merge\", \"4.2.2\");\n-        defaults.put(\"raw-loader\", \"3.1.0\");\n-        defaults.put(\"css-loader\", \"5.2.7\");\n+        defaults.put(\"webpack-merge\", \"6.0.1\");\n+        defaults.put(\"css-loader\", \"7.1.2\");\n \n-        defaults.put(\"typescript\", \"4.0.3\");\n-        defaults.put(\"ts-loader\", \"8.0.12\");\n-        defaults.put(\"file-loader\", \"6.1.0\");\n-        defaults.put(\"extract-loader\", \"5.1.0\");\n-        defaults.put(\"lit-css-loader\", \"0.0.4\");\n-        defaults.put(\"loader-utils\", \"2.0.4\");\n+        defaults.put(\"typescript\", \"4.9.5\");\n+        defaults.put(\"ts-loader\", \"9.5.2\");\n+        defaults.put(\"lit-css-loader\", \"3.0.1\");\n+        defaults.put(\"loader-utils\", \"3.3.1\");\n \n         // Forcing chokidar version for now until new babel version is available\n         // check out https://github.com/babel/babel/issues/11488\n         defaults.put(\"chokidar\", \"^3.5.0\");\n+        defaults.put(\"mkdirp\", \"3.0.1\");\n \n         defaults.put(\"@types/node\", \"18.14.0\");\n         return defaults;\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdateWebpack.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdateWebpack.java\nindex eac3a783a49..28557784ec4 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdateWebpack.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdateWebpack.java\n@@ -13,6 +13,7 @@\n import java.io.IOException;\n import java.io.UncheckedIOException;\n import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n import java.nio.file.Path;\n import java.util.List;\n \n@@ -108,6 +109,18 @@ private void createWebpackConfig() throws IOException {\n                                 + \"in the merge or remove the file to generate a new one.\",\n                         configFile);\n             }\n+            // webpack-merge-plugin 5 changes the import format\n+            String contents = FileUtils.readFileToString(configFile,\n+                    StandardCharsets.UTF_8);\n+            if (contents.contains(\"const merge = require('webpack-merge');\")) {\n+                log().debug(\"Updating \" + configFile.getName()\n+                        + \" to new webpack-merge syntax\");\n+                contents = contents.replace(\n+                        \"const merge = require('webpack-merge');\",\n+                        \"const { merge } = require('webpack-merge');\");\n+                FileUtils.write(configFile, contents, StandardCharsets.UTF_8);\n+            }\n+\n         } else {\n             URL resource = this.getClass().getClassLoader()\n                     .getResource(webpackTemplate);\n\ndiff --git a/flow-server/src/main/resources/plugins/stats-plugin/stats-plugin.js b/flow-server/src/main/resources/plugins/stats-plugin/stats-plugin.js\nindex 9092444db9f..793c725b505 100644\n--- a/flow-server/src/main/resources/plugins/stats-plugin/stats-plugin.js\n+++ b/flow-server/src/main/resources/plugins/stats-plugin/stats-plugin.js\n@@ -7,7 +7,7 @@\n  * license.\n  */\n const fs = require('fs');\n-const mkdirp = require('mkdirp');\n+const { mkdirp } = require('mkdirp');\n const path = require('path');\n \n /**\n@@ -27,7 +27,7 @@ class StatsPlugin {\n     const logger = compiler.getInfrastructureLogger(\"FlowIdPlugin\");\n \n     compiler.hooks.afterEmit.tapAsync(\"FlowIdPlugin\", (compilation, done) => {\n-      let statsJson = compilation.getStats().toJson();\n+      let statsJson = compilation.getStats().toJson({source:true});\n       // Get bundles as accepted keys\n       let acceptedKeys = statsJson.assets.filter(asset => asset.chunks.length > 0)\n         .map(asset => asset.chunks).reduce((acc, val) => acc.concat(val), []);\n\ndiff --git a/flow-server/src/main/resources/plugins/theme-loader/theme-loader.js b/flow-server/src/main/resources/plugins/theme-loader/theme-loader.js\nindex 1c23778c137..b73b43c85d7 100644\n--- a/flow-server/src/main/resources/plugins/theme-loader/theme-loader.js\n+++ b/flow-server/src/main/resources/plugins/theme-loader/theme-loader.js\n@@ -14,7 +14,7 @@ const urlMatcher = /(url\\()(\\'|\\\")?(\\.\\/|\\.\\.\\/)(\\S*)(\\2\\))/g;\n  * @param map source map for file\n  */\n module.exports = function (source, map) {\n-  const options = loaderUtils.getOptions(this);\n+  const options = this.getOptions();\n   const handledResourceFolder = path.dirname(this._module.resource);\n   const logger = this.getLogger(\"theme-loader\");\n \n\ndiff --git a/flow-server/src/main/resources/webpack.config.js b/flow-server/src/main/resources/webpack.config.js\nindex ac369e9fe22..00332979a43 100644\n--- a/flow-server/src/main/resources/webpack.config.js\n+++ b/flow-server/src/main/resources/webpack.config.js\n@@ -6,7 +6,7 @@\n  * Defaults are provided in an autogenerated webpack.generated.js file and used by this file. \n  * The webpack.generated.js file is overwritten on each build and no customization can be done there.\n  */\n-const merge = require('webpack-merge');\n+const { merge } = require('webpack-merge');\n const flowDefaults = require('./webpack.generated.js');\n \n module.exports = merge(flowDefaults, {\n\ndiff --git a/flow-server/src/main/resources/webpack.generated.js b/flow-server/src/main/resources/webpack.generated.js\nindex addfc9b8a65..220d102569e 100644\n--- a/flow-server/src/main/resources/webpack.generated.js\n+++ b/flow-server/src/main/resources/webpack.generated.js\n@@ -7,8 +7,8 @@\n const fs = require('fs');\n const CopyWebpackPlugin = require('copy-webpack-plugin');\n const CompressionPlugin = require('compression-webpack-plugin');\n-const {BabelMultiTargetPlugin} = require('webpack-babel-multi-target-plugin');\n const ExtraWatchWebpackPlugin = require('extra-watch-webpack-plugin');\n+const TerserPlugin = require(\"terser-webpack-plugin\");\n \n // Flow plugins\n const StatsPlugin = require('@vaadin/stats-plugin');\n@@ -59,7 +59,7 @@ const themeProjectFolders = projectStaticAssetsFolders.map((folder) =>\n const flowFrontendFolder = '[to-be-generated-by-flow]';\n \n // make sure that build folder exists before outputting anything\n-const mkdirp = require('mkdirp');\n+const { mkdirp } = require('mkdirp');\n \n const devMode = process.argv.find(v => v.indexOf('webpack-dev-server') >= 0);\n \n@@ -159,64 +159,94 @@ module.exports = {\n   },\n \n   devServer: {\n+    hot: false, // disable HMR\n     // webpack-dev-server serves ./ ,  webpack-generated,  and java webapp\n-    contentBase: [mavenOutputFolderForFlowBundledFiles, 'src/main/webapp'],\n-    after: function(app, server) {\n-      app.get(`/stats.json`, function(req, res) {\n+    static: [mavenOutputFolderForFlowBundledFiles, path.resolve(__dirname, 'src', 'main', 'webapp')],\n+    devMiddleware: {\n+      publicPath: '/VAADIN'\n+    },\n+    setupMiddlewares: function(middlewares, devServer) {\n+      devServer.app.get(`/stats.json`, function(req, res) {\n         res.json(stats);\n       });\n-      app.get(`/stats.hash`, function(req, res) {\n+      devServer.app.get(`/stats.hash`, function(req, res) {\n         res.json(stats.hash.toString());\n       });\n-      app.get(`/assetsByChunkName`, function(req, res) {\n+      devServer.app.get(`/assetsByChunkName`, function(req, res) {\n         res.json(stats.assetsByChunkName);\n       });\n-      app.get(`/stop`, function(req, res) {\n+      devServer.app.get(`/stop`, function(req, res) {\n         // eslint-disable-next-line no-console\n         console.log(\"Stopped 'webpack-dev-server'\");\n         process.exit(0);\n       });\n+      return middlewares;\n     }\n   },\n \n+  optimization: {\n+    minimizer: [new TerserPlugin({ extractComments: false })],\n+  },\n   module: {\n     rules: [\n-      ...(transpile ? [\n-        {\n-        test: /\\.tsx?$/,\n-        use: [ BabelMultiTargetPlugin.loader(), 'ts-loader' ],\n+      ...(transpile ? [{\n+        test: /\\.[jt]sx?$/,\n+        exclude: /node_modules/,\n+        use: [\n+          {\n+            loader: 'babel-loader',\n+            options: {\n+              plugins: [\n+                // workaround for Safari 10 scope issue (https://bugs.webkit.org/show_bug.cgi?id=159270)\n+                \"@babel/plugin-transform-block-scoping\",\n+              ],\n+              presets: [\n+                [\n+                  '@babel/preset-env',\n+                  {\n+                    useBuiltIns: false,\n+                    targets: {\n+                      browsers: 'last 1 Chrome major versions'\n+                    },\n+                    modules: false,\n+                  }\n+                ]\n+              ],\n+            }\n+          },\n+        ]\n       }\n-      ] : [{\n+      ] : []),\n+      {\n         test: /\\.tsx?$/,\n         use: ['ts-loader']\n-      }]),\n-      ...(transpile ? [{ // Files that Babel has to transpile\n-        test: /\\.js$/,\n-        use: [BabelMultiTargetPlugin.loader()]\n-      }] : []),\n+      },\n       {\n         test: /\\.css$/i,\n         use: [\n           {\n             loader: 'css-loader',\n             options: {\n-              url: (url, resourcePath) => {\n-                // css urls may contain query string or fragment identifiers\n-                // that should removed before resolving real path\n-                // e.g\n-                //  ../webfonts/fa-solid-900.svg#fontawesome\n-                //  ../webfonts/fa-brands-400.eot?#iefix\n-                if(url.includes('?'))\n+              url: {\n+                filter: (url, resourcePath) => {\n+                  // css urls may contain query string or fragment identifiers\n+                  // that should removed before resolving real path\n+                  // e.g\n+                  //  ../webfonts/fa-solid-900.svg#fontawesome\n+                  //  ../webfonts/fa-brands-400.eot?#iefix\n+                  if (url.includes('?'))\n                     url = url.substring(0, url.indexOf('?'));\n-                if(url.includes('#'))\n+                  if (url.includes('#'))\n                     url = url.substring(0, url.indexOf('#'));\n \n-                // Only translate files from node_modules\n-                const resolve = resourcePath.match(/(\\\\|\\/)node_modules\\1/)\n-                  && fs.existsSync(path.resolve(path.dirname(resourcePath), url));\n-                const themeResource = resourcePath.match(themePartRegex) && url.match(/^themes\\/[\\s\\S]*?\\//);\n-                return resolve || themeResource;\n+                  // Only translate files from node_modules\n+                  const resolve = resourcePath.match(/(\\\\|\\/)node_modules\\1/)\n+                      && fs.existsSync(path.resolve(path.dirname(resourcePath), url));\n+                  const themeResource = resourcePath.match(themePartRegex) && url.match(/^themes\\/[\\s\\S]*?\\//);\n+                  return resolve || themeResource;\n+                }\n               },\n+              esModule: false,\n               // use theme-loader to also handle any imports in css files\n               importLoaders: 1\n             },\n@@ -234,21 +264,28 @@ module.exports = {\n       {\n         // File-loader only copies files used as imports in .js files or handled by css-loader\n         test: /\\.(png|gif|jpg|jpeg|svg|eot|woff|woff2|otf|ttf)$/,\n-        use: [{\n-          loader: 'file-loader',\n-          options: {\n-            outputPath: 'static/',\n-            name(resourcePath, resourceQuery) {\n-              if (resourcePath.match(/(\\\\|\\/)node_modules\\1/)) {\n-                return /(\\\\|\\/)node_modules\\1(?!.*node_modules)([\\S]+)/.exec(resourcePath)[2].replace(/\\\\/g, \"/\");\n+        type: 'asset/resource',\n+        generator: {\n+          filename(pathData) {\n+            const resourcePath = pathData.filename;\n+            const prefix = 'static/';\n+\n+            if (resourcePath.includes('node_modules')) {\n+              const match = /([\\\\/])node_modules\\1(?!.*node_modules)(\\S+)/.exec(resourcePath);\n+              if (match && match[2]) {\n+                return prefix + match[2].replace(/\\\\/g, '/');\n               }\n-              if (resourcePath.match(/(\\\\|\\/)frontend\\1/)) {\n-                return /(\\\\|\\/)frontend\\1(?!.*frontend)([\\S]+)/.exec(resourcePath)[2].replace(/\\\\/g, \"/\");\n+            }\n+\n+            if (resourcePath.match(/(^|[\\\\/])frontend[\\\\/]/)) {\n+              const match = /(?:^|[\\\\/])frontend([\\\\/])(?!.*frontend)(\\S+)/.exec(resourcePath);\n+              if (match && match[2]) {\n+                  return prefix + match[2].replace(/\\\\/g, \"/\");\n               }\n-              return '[path][name].[ext]';\n             }\n+            return prefix +'[path][name][ext]';\n           }\n-        }],\n+        },\n       },\n     ]\n   },\n@@ -260,36 +297,6 @@ module.exports = {\n     // Generate compressed bundles when not devMode\n     ...(devMode ? [] : [new CompressionPlugin()]),\n \n-    // Transpile with babel, and produce different bundles per browser\n-    ...(transpile ? [new BabelMultiTargetPlugin({\n-      babel: {\n-        plugins: [\n-          // workaround for Safari 10 scope issue (https://bugs.webkit.org/show_bug.cgi?id=159270)\n-          \"@babel/plugin-transform-block-scoping\",\n-        ],\n-\n-        presetOptions: {\n-          useBuiltIns: false // polyfills are provided from webcomponents-loader.js\n-        }\n-      },\n-      targets: {\n-        'es6': { // Evergreen browsers\n-          browsers: [\n-            // It guarantees that babel outputs pure es6 in bundle and in stats.json\n-            // In the case of browsers no supporting certain feature it will be\n-            // covered by the webcomponents-loader.js\n-            'last 1 Chrome major versions'\n-          ],\n-        },\n-        'es5': { // IE11\n-          browsers: [\n-            'ie 11'\n-          ],\n-          tagAssetsWithKey: true, // append a suffix to the file name\n-        }\n-      }\n-    })] : []),\n-\n     new ApplicationThemePlugin(themeOptions),\n \n     ...(devMode && themeName ? [new ExtraWatchWebpackPlugin({\n@@ -318,10 +325,14 @@ module.exports = {\n \n     // Copy webcomponents polyfills. They are not bundled because they\n     // have its own loader based on browser quirks.\n-    new CopyWebpackPlugin([{\n-      from: `${baseDir}/node_modules/@webcomponents/webcomponentsjs`,\n-      to: `${build}/webcomponentsjs/`,\n-      ignore: ['*.md', '*.json']\n-    }]),\n+    new CopyWebpackPlugin({\n+      patterns: [{\n+        from: `${baseDir}/node_modules/@webcomponents/webcomponentsjs`,\n+        to: `${build}/webcomponentsjs/`,\n+        globOptions: {\n+          ignore: ['*.md', '*.json']\n+        }\n+      }]\n+    }),\n   ]\n };\n",
    "test_patch": "diff --git a/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/PrepareFrontendMojoTest.java b/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/PrepareFrontendMojoTest.java\nindex 9235903b886..2f4c33c5b8e 100644\n--- a/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/PrepareFrontendMojoTest.java\n+++ b/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/PrepareFrontendMojoTest.java\n@@ -7,8 +7,6 @@\n import java.util.Collections;\n import java.util.List;\n \n-import com.vaadin.flow.server.frontend.FrontendTools;\n-import com.vaadin.flow.server.frontend.installer.NodeInstaller;\n import org.apache.maven.plugin.MojoExecutionException;\n import org.apache.maven.plugin.MojoFailureException;\n import org.apache.maven.project.MavenProject;\n@@ -24,10 +22,13 @@\n \n import com.vaadin.flow.plugin.TestUtils;\n import com.vaadin.flow.server.Constants;\n+import com.vaadin.flow.server.frontend.FrontendTools;\n+import com.vaadin.flow.server.frontend.installer.NodeInstaller;\n \n import elemental.json.Json;\n import elemental.json.JsonObject;\n import elemental.json.impl.JsonUtil;\n+\n import static com.vaadin.flow.plugin.maven.BuildFrontendMojoTest.assertContainsPackage;\n import static com.vaadin.flow.plugin.maven.BuildFrontendMojoTest.getPackageJson;\n import static com.vaadin.flow.plugin.maven.BuildFrontendMojoTest.setProject;\n@@ -212,8 +213,8 @@ private void assertPackageJsonContent() throws IOException {\n                 \"@webcomponents/webcomponentsjs\", \"@polymer/polymer\");\n \n         assertContainsPackage(packageJsonObject.getObject(\"devDependencies\"),\n-                \"webpack\", \"webpack-cli\", \"webpack-dev-server\",\n-                \"webpack-babel-multi-target-plugin\", \"copy-webpack-plugin\");\n+                \"webpack\", \"webpack-cli\", \"webpack-dev-server\", \"mkdirp\",\n+                \"copy-webpack-plugin\");\n     }\n \n     private List<File> gatherFiles(File root) {\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/DevModeHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/DevModeHandlerTest.java\nindex d675d745ac8..33dfac8cd0e 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/DevModeHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/DevModeHandlerTest.java\n@@ -14,6 +14,7 @@\n import javax.servlet.ServletOutputStream;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+\n import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.IOException;\n@@ -69,6 +70,9 @@\n @SuppressWarnings(\"restriction\")\n public class DevModeHandlerTest {\n \n+    public static final String COMPILE_OK_OUTPUT = \"webpack 5.16.0 compiled successfully in 12300 ms\";\n+    public static final String COMPILE_ERROR_OUTPUT = \"webpack 5.16.0 compiled with 2 errors in 27203 ms\";\n+\n     private MockDeploymentConfiguration configuration;\n \n     private HttpServer httpServer;\n@@ -97,7 +101,7 @@ public void setup() throws Exception {\n         configuration.setProductionMode(false);\n \n         new File(baseDir, FrontendUtils.WEBPACK_CONFIG).createNewFile();\n-        createStubWebpackServer(\"Compiled\", 100, baseDir);\n+        createStubWebpackServer(COMPILE_OK_OUTPUT, 100, baseDir);\n     }\n \n     @After\n@@ -205,8 +209,8 @@ public void should_Fail_When_WebpackPrematurelyExit() throws Exception {\n     @Test\n     public void should_CaptureWebpackOutput_When_Failed() throws Exception {\n         configuration.setApplicationOrSystemProperty(\n-                SERVLET_PARAMETER_DEVMODE_WEBPACK_TIMEOUT, \"100\");\n-        createStubWebpackServer(\"Failed to compile\", 300, baseDir);\n+                SERVLET_PARAMETER_DEVMODE_WEBPACK_TIMEOUT, \"400\");\n+        createStubWebpackServer(COMPILE_ERROR_OUTPUT, 300, baseDir);\n         DevModeHandler handler = DevModeHandler.start(configuration, npmFolder,\n                 CompletableFuture.completedFuture(null));\n         assertNotNull(handler);\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java\nindex 6288dbd0e72..d4c5adf31e2 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java\n@@ -167,7 +167,7 @@ public void updateDefaultDependencies_olderVersionsAreUpdated()\n         Assert.assertEquals(\"^2.2.10\",\n                 packageJson.getObject(NodeUpdater.DEPENDENCIES)\n                         .getString(\"@webcomponents/webcomponentsjs\"));\n-        Assert.assertEquals(\"4.47.0\", packageJson\n+        Assert.assertEquals(\"5.99.6\", packageJson\n                 .getObject(NodeUpdater.DEV_DEPENDENCIES).getString(\"webpack\"));\n     }\n \n@@ -180,13 +180,13 @@ public void updateDefaultDependencies_newerVersionsAreNotChanged()\n         packageJson.getObject(NodeUpdater.DEPENDENCIES)\n                 .put(\"@webcomponents/webcomponentsjs\", \"2.3.1\");\n         packageJson.getObject(NodeUpdater.DEV_DEPENDENCIES).put(\"webpack\",\n-                \"5.0.1\");\n+                \"5.100.1\");\n         nodeUpdater.updateDefaultDependencies(packageJson);\n \n         Assert.assertEquals(\"2.3.1\",\n                 packageJson.getObject(NodeUpdater.DEPENDENCIES)\n                         .getString(\"@webcomponents/webcomponentsjs\"));\n-        Assert.assertEquals(\"5.0.1\", packageJson\n+        Assert.assertEquals(\"5.100.1\", packageJson\n                 .getObject(NodeUpdater.DEV_DEPENDENCIES).getString(\"webpack\"));\n     }\n \n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdateWebpackTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdateWebpackTest.java\nindex 00f3b498bee..42e4933d80f 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdateWebpackTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdateWebpackTest.java\n@@ -20,6 +20,7 @@\n import java.io.File;\n import java.io.IOException;\n import java.nio.file.Files;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.Objects;\n import java.util.Set;\n@@ -159,6 +160,19 @@ baseDir, new File(baseDir, \"foo\"), WEBPACK_CONFIG,\n \n     }\n \n+    @Test\n+    public void should_updateMergeImportOnOldGeneratedWebpackConfig()\n+            throws Exception {\n+        Assert.assertFalse(\"No webpack config file should be present.\",\n+                webpackConfig.exists());\n+        FileUtils.writeLines(webpackConfig, Arrays.asList(\n+                \"const merge = require('webpack-merge');\",\n+                \"const flowDefaults = require('./webpack.generated.js');\",\n+                \"module.exports = merge(flowDefaults, {\", \"});\"));\n+        webpackUpdater.execute();\n+        assertWebpackConfigContent();\n+    }\n+\n     private void assertWebpackGeneratedConfigContent(String entryPoint,\n             String outputFolder) throws IOException {\n \n@@ -180,7 +194,7 @@ private void assertWebpackConfigContent() throws IOException {\n                 .collect(Collectors.toList());\n \n         Assert.assertTrue(\"No webpack-merge imported.\", webpackContents\n-                .contains(\"const merge = require('webpack-merge');\"));\n+                .contains(\"const { merge } = require('webpack-merge');\"));\n         Assert.assertTrue(\"No flowDefaults imported.\", webpackContents.contains(\n                 \"const flowDefaults = require('./webpack.generated.js');\"));\n \n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/startup/DevModeInitializerTestBase.java b/flow-server/src/test/java/com/vaadin/flow/server/startup/DevModeInitializerTestBase.java\nindex aebc3f48846..e512f02458c 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/startup/DevModeInitializerTestBase.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/startup/DevModeInitializerTestBase.java\n@@ -74,7 +74,8 @@ public void setup() throws Exception {\n         Boolean enablePnpm = Boolean.TRUE;\n \n         createStubNode(false, true, baseDir);\n-        createStubWebpackServer(\"Compiled\", 0, baseDir);\n+        createStubWebpackServer(DevModeHandlerTest.COMPILE_OK_OUTPUT, 0,\n+                baseDir);\n \n         // Prevent TaskRunNpmInstall#cleanUp from deleting node_modules\n         new File(baseDir, \"node_modules/.modules.yaml\").createNewFile();\n@@ -148,14 +149,12 @@ private JsonObject getInitalPackageJson() {\n \n         vaadinPackages.put(\"devDependencies\", Json.createObject());\n         defaults = vaadinPackages.getObject(\"devDependencies\");\n-        defaults.put(\"webpack\", \"4.30.0\");\n-        defaults.put(\"webpack-cli\", \"3.3.0\");\n-        defaults.put(\"webpack-dev-server\", \"3.3.0\");\n-        defaults.put(\"webpack-babel-multi-target-plugin\", \"2.3.1\");\n-        defaults.put(\"copy-webpack-plugin\", \"5.0.3\");\n-        defaults.put(\"compression-webpack-plugin\", \"3.0.0\");\n-        defaults.put(\"webpack-merge\", \"4.2.1\");\n-        defaults.put(\"raw-loader\", \"3.0.0\");\n+        defaults.put(\"webpack\", \"5.99.0\");\n+        defaults.put(\"webpack-cli\", \"6.0.0\");\n+        defaults.put(\"webpack-dev-server\", \"5.2.0\");\n+        defaults.put(\"copy-webpack-plugin\", \"13.0.0\");\n+        defaults.put(\"compression-webpack-plugin\", \"11.1.0\");\n+        defaults.put(\"webpack-merge\", \"6.0.0\");\n \n         vaadinPackages.put(\"hash\", \"\");\n \n\ndiff --git a/flow-tests/test-live-reload/src/test/java/com/vaadin/flow/uitest/ui/LiveReloadIT.java b/flow-tests/test-live-reload/src/test/java/com/vaadin/flow/uitest/ui/LiveReloadIT.java\nindex 76724e8e50f..258eefa3269 100644\n--- a/flow-tests/test-live-reload/src/test/java/com/vaadin/flow/uitest/ui/LiveReloadIT.java\n+++ b/flow-tests/test-live-reload/src/test/java/com/vaadin/flow/uitest/ui/LiveReloadIT.java\n@@ -8,18 +8,43 @@\n  */\n package com.vaadin.flow.uitest.ui;\n \n+import java.io.File;\n+import java.io.IOException;\n import java.util.List;\n \n-import com.vaadin.testbench.TestBenchElement;\n import net.jcip.annotations.NotThreadSafe;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.After;\n import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n import org.openqa.selenium.By;\n import org.openqa.selenium.WebElement;\n \n+import com.vaadin.testbench.TestBenchElement;\n+\n @NotThreadSafe\n public class LiveReloadIT extends AbstractLiveReloadIT {\n \n+    @Rule\n+    public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+    @Before\n+    public void backupFrontendResources() throws IOException {\n+        // Save original frontend resources. They will be restored after test\n+        // execution to avoid failures or false positives on later runs\n+        FileUtils.copyDirectory(new File(\"./frontend\"),\n+                temporaryFolder.getRoot());\n+    }\n+\n+    @After\n+    public void restoreFrontendResources() throws IOException {\n+        FileUtils.copyDirectory(temporaryFolder.getRoot(),\n+                new File(\"./frontend\"));\n+    }\n+\n     @Test\n     public void overlayShouldRender() {\n         open();\n\ndiff --git a/flow-tests/test-mixed/pom.xml b/flow-tests/test-mixed/pom.xml\nindex c37317e0a68..4c23c68e4fc 100644\n--- a/flow-tests/test-mixed/pom.xml\n+++ b/flow-tests/test-mixed/pom.xml\n@@ -70,7 +70,7 @@\n                             <!-- this avoids an issue in chrome not loading\n                                 the components randomly when webpack dev server is not in debug mode -->\n                             <name>vaadin.devmode.webpack.options</name>\n-                            <value>--debug</value>\n+                            <value>--mode=development</value>\n                         </systemProperty>\n                         <systemProperty>\n                             <!-- make sure we do not leave webpack-dev-server\n\ndiff --git a/flow-tests/test-pwa/src/test/java/com/vaadin/flow/pwatest/ui/PwaTestIT.java b/flow-tests/test-pwa/src/test/java/com/vaadin/flow/pwatest/ui/PwaTestIT.java\nindex 491cad4fc14..16a185151d4 100644\n--- a/flow-tests/test-pwa/src/test/java/com/vaadin/flow/pwatest/ui/PwaTestIT.java\n+++ b/flow-tests/test-pwa/src/test/java/com/vaadin/flow/pwatest/ui/PwaTestIT.java\n@@ -31,6 +31,11 @@\n \n public class PwaTestIT extends ChromeBrowserTest {\n \n+    @Override\n+    protected String getTestPath() {\n+        return \"\";\n+    }\n+\n     @Test\n     public void testPwaResources() throws IOException, JSONException {\n         open();\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21373",
    "pr_id": 21373,
    "issue_id": 21356,
    "repo": "vaadin/flow",
    "problem_statement": "Support modular security customization of VaadinWebSecurity\n### Describe your motivation\n\nCurrently, `VaadinWebSecurity` is the single entry point for customizing the `HttpSecurity` configuration in Vaadin applications. However, in multi-module projects and library development, it is often necessary to modularize security customizations without forcing users to subclass or directly modify `VaadinWebSecurity`.  \nHaving a standard extension mechanism would allow libraries and application modules to provide security configurations independently, while still preserving the flexibility for users to override or extend their own application security setup.\n\n### Describe the solution you'd like\n\nIntroduce a `VaadinWebSecurityCustomizer` interface.  Spring beans implementing this interface would be automatically detected and applied by `VaadinWebSecurity` during the `configure(HttpSecurity http)` phase. The customizers should be invoked in a well-defined order, e.g., respecting `@Order` annotations or implementing `Ordered`.\n\nThis mechanism would enable security customizations to be contributed from multiple modules and libraries in a non-breaking and additive way, while still allowing users to subclass `VaadinWebSecurity` if they need full control.\n\nExample:\n\n~~~java\npublic interface VaadinWebSecurityCustomizer {\n    void customize(HttpSecurity http) throws Exception;\n}\n~~~\n\nThen inside `VaadinWebSecurity`:\n\n~~~java\n@Autowired(required = false)\nprivate List<VaadinWebSecurityCustomizer> customizers = Collections.emptyList();\n\n// In the configure method\nfor (VaadinWebSecurityCustomizer customizer : customizers) {\n    customizer.customize(http);\n}\n~~~\n\n### Describe alternatives you've considered\n\n- **Direct subclassing of `VaadinWebSecurity`**: This approach is limiting when security logic is spread across modules. It can lead to tight coupling and does not scale well for larger applications or reusable libraries.\n- **Using application-specific configuration classes**: While additional `@Configuration` classes could configure `HttpSecurity`, they often need to replicate the Vaadin-specific configuration steps to avoid breaking Vaadin internals, increasing the risk of misconfiguration.\n- **Custom `SecurityFilterChain` beans**: Defining separate `SecurityFilterChain` beans bypasses the Vaadin-specific conventions and could lead to unexpected behavior if Vaadin's needs are not fully respected.\n\n### Additional context\n\n- This pattern would align Vaadin Flow security customization with other Spring extensibility patterns (like `WebMvcConfigurer`, `SecurityConfigurerAdapter`).\n- This change would be fully backward compatible: users extending `VaadinWebSecurity` would continue to work as before.\n- It would also encourage best practices for modular development and library support in the Vaadin ecosystem.\n",
    "issue_word_count": 341,
    "test_files_count": 13,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "flow-tests/vaadin-spring-tests/test-spring-security-flow-contextpath/pom.xml",
      "flow-tests/vaadin-spring-tests/test-spring-security-flow-methodsecurity/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java",
      "flow-tests/vaadin-spring-tests/test-spring-security-flow-methodsecurity/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java",
      "flow-tests/vaadin-spring-tests/test-spring-security-flow-standalone-routepathaccesschecker/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java",
      "flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java",
      "flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java",
      "flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityUtils.java",
      "flow-tests/vaadin-spring-tests/test-spring-security-webicons-urlmapping/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java",
      "flow-tests/vaadin-spring-tests/test-spring-security-webicons-urlmapping/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java",
      "flow-tests/vaadin-spring-tests/test-spring-security-webicons/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java",
      "flow-tests/vaadin-spring-tests/test-spring-security-webicons/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java",
      "vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringSecurityAutoConfiguration.java",
      "vaadin-spring/src/main/java/com/vaadin/flow/spring/security/RequestUtil.java",
      "vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinRolePrefixHolder.java",
      "vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurer.java",
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/SpringClassesSerializableTest.java",
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurerTest.java"
    ],
    "pr_changed_test_files": [
      "flow-tests/vaadin-spring-tests/test-spring-security-flow-contextpath/pom.xml",
      "flow-tests/vaadin-spring-tests/test-spring-security-flow-methodsecurity/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java",
      "flow-tests/vaadin-spring-tests/test-spring-security-flow-methodsecurity/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java",
      "flow-tests/vaadin-spring-tests/test-spring-security-flow-standalone-routepathaccesschecker/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java",
      "flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java",
      "flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java",
      "flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityUtils.java",
      "flow-tests/vaadin-spring-tests/test-spring-security-webicons-urlmapping/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java",
      "flow-tests/vaadin-spring-tests/test-spring-security-webicons-urlmapping/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java",
      "flow-tests/vaadin-spring-tests/test-spring-security-webicons/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java",
      "flow-tests/vaadin-spring-tests/test-spring-security-webicons/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java",
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/SpringClassesSerializableTest.java",
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurerTest.java"
    ],
    "base_commit": "c17d9cb452bde21882d5aa749a623603f81b6e64",
    "head_commit": "0f0728446a81507b92a52fb17a7028dac36c481c",
    "repo_url": "https://github.com/vaadin/flow/pull/21373",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21373",
    "dockerfile": "",
    "pr_merged_at": "2025-05-09T10:52:29.000Z",
    "patch": "diff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringSecurityAutoConfiguration.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringSecurityAutoConfiguration.java\nindex deaa45c24f3..cadbab456f0 100644\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringSecurityAutoConfiguration.java\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringSecurityAutoConfiguration.java\n@@ -34,6 +34,7 @@\n import com.vaadin.flow.server.auth.NavigationAccessChecker;\n import com.vaadin.flow.server.auth.NavigationAccessControl;\n import com.vaadin.flow.server.auth.RoutePathAccessChecker;\n+import com.vaadin.flow.spring.security.AuthenticationContext;\n import com.vaadin.flow.spring.security.NavigationAccessControlConfigurer;\n import com.vaadin.flow.spring.security.NavigationAccessControlInitializer;\n import com.vaadin.flow.spring.security.RequestUtil;\n@@ -197,4 +198,9 @@ public VaadinRolePrefixHolder vaadinRolePrefixHolder(\n                 .map(GrantedAuthorityDefaults::getRolePrefix).orElse(null));\n     }\n \n+    @Bean\n+    @ConditionalOnMissingBean\n+    AuthenticationContext authenticationContext() {\n+        return new AuthenticationContext();\n+    }\n }\n\ndiff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/RequestUtil.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/RequestUtil.java\nindex e4c4f66b27f..227866c643b 100644\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/RequestUtil.java\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/RequestUtil.java\n@@ -289,7 +289,7 @@ String getUrlMapping() {\n      * @return the path with prepended url mapping.\n      * @see VaadinConfigurationProperties#getUrlMapping()\n      */\n-    String applyUrlMapping(String path) {\n+    public String applyUrlMapping(String path) {\n         return applyUrlMapping(configurationProperties.getUrlMapping(), path);\n     }\n \n\ndiff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinRolePrefixHolder.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinRolePrefixHolder.java\nindex f6c18f3578a..66723e6de74 100644\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinRolePrefixHolder.java\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinRolePrefixHolder.java\n@@ -109,19 +109,19 @@ public void resetRolePrefix(\n                 .findFirst().ifPresent(this::resetRolePrefix);\n     }\n \n-    private void resetRolePrefix(\n+    void resetRolePrefix(\n             SecurityContextHolderAwareRequestFilter securityContextHolderAwareRequestFilter) {\n         resetRolePrefix(securityContextHolderAwareRequestFilter,\n                 SecurityContextHolderAwareRequestFilter.class);\n     }\n \n-    private void resetRolePrefix(\n+    void resetRolePrefix(\n             SecurityContextHolderAwareRequestWrapper securityContextHolderAwareRequestWrapper) {\n         resetRolePrefix(securityContextHolderAwareRequestWrapper,\n                 SecurityContextHolderAwareRequestWrapper.class);\n     }\n \n-    private void resetRolePrefix(Object source, Class<?> type) {\n+    void resetRolePrefix(Object source, Class<?> type) {\n         if (source != null) {\n             try {\n                 Field field = FieldUtils.getField(type, \"rolePrefix\");\n\ndiff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurer.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurer.java\nnew file mode 100644\nindex 00000000000..aa365e3e76c\n--- /dev/null\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurer.java\n@@ -0,0 +1,763 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.spring.security;\n+\n+import jakarta.servlet.ServletContext;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.config.ObjectPostProcessor;\n+import org.springframework.security.config.annotation.SecurityConfigurer;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;\n+import org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer;\n+import org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.AuthorizedUrl;\n+import org.springframework.security.config.annotation.web.configurers.CsrfConfigurer;\n+import org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer;\n+import org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer;\n+import org.springframework.security.config.annotation.web.configurers.LogoutConfigurer;\n+import org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer;\n+import org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer;\n+import org.springframework.security.oauth2.client.oidc.web.logout.OidcClientInitiatedLogoutSuccessHandler;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.web.access.AccessDeniedHandler;\n+import org.springframework.security.web.access.AccessDeniedHandlerImpl;\n+import org.springframework.security.web.access.DelegatingAccessDeniedHandler;\n+import org.springframework.security.web.access.RequestMatcherDelegatingAccessDeniedHandler;\n+import org.springframework.security.web.authentication.HttpStatusEntryPoint;\n+import org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint;\n+import org.springframework.security.web.authentication.logout.LogoutFilter;\n+import org.springframework.security.web.authentication.logout.LogoutHandler;\n+import org.springframework.security.web.authentication.logout.LogoutSuccessHandler;\n+import org.springframework.security.web.csrf.CsrfException;\n+import org.springframework.security.web.savedrequest.RequestCache;\n+import org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter;\n+import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n+import org.springframework.security.web.util.matcher.AnyRequestMatcher;\n+import org.springframework.security.web.util.matcher.RequestMatcher;\n+import org.springframework.security.web.util.matcher.RequestMatchers;\n+import org.springframework.web.context.WebApplicationContext;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.internal.AnnotationReader;\n+import com.vaadin.flow.internal.hilla.EndpointRequestUtil;\n+import com.vaadin.flow.router.Route;\n+import com.vaadin.flow.router.internal.RouteUtil;\n+import com.vaadin.flow.server.VaadinServletContext;\n+import com.vaadin.flow.server.auth.NavigationAccessControl;\n+\n+import static com.vaadin.flow.spring.security.VaadinWebSecurity.getDefaultHttpSecurityPermitMatcher;\n+import static com.vaadin.flow.spring.security.VaadinWebSecurity.getDefaultWebSecurityIgnoreMatcher;\n+\n+/**\n+ * A {@link SecurityConfigurer} specifically designed for Vaadin applications.\n+ * <p>\n+ * Provides built-in customizers to configure the security settings for Flow and\n+ * Hilla by integrating with Spring Security and specialized methods to handle\n+ * view access control and default security workflows in Vaadin applications.\n+ * <p>\n+ * Usage example:\n+ *\n+ * <pre>\n+ * <code>\n+ * &#64;Configuration\n+ * &#64;EnableWebSecurity\n+ * public class MyWebSecurity {\n+ *\n+ *     &#64;Bean\n+ *     SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n+ *         return http.with(VaadinSecurityConfigurer.vaadin(), configurer -&gt; {\n+ *             configurer.loginView(MyLoginView.class);\n+ *         }).build();\n+ *     }\n+ * }\n+ * </code>\n+ * </pre>\n+ *\n+ * <h2>Configurers</h2>\n+ * <p>\n+ * This configurer applies other configurers to set up the security filter chain\n+ * properly for Vaadin applications. The following configurers may be applied:\n+ * <ul>\n+ * <li>{@link FormLoginConfigurer} if a login view is set with\n+ * {@link #loginView(Class)} (or overloads)</li>\n+ * <li>{@link OAuth2LoginConfigurer} if a login page for OAuth2 authentication\n+ * is set with {@link #oauth2LoginPage(String)} (or overloads)</li>\n+ * <li>{@link CsrfConfigurer} to allow internal framework requests (can be\n+ * disabled with {@link #enableCsrfConfiguration(boolean)})</li>\n+ * <li>{@link LogoutConfigurer} to configure logout handlers for Vaadin\n+ * applications (can be disabled with\n+ * {@link #enableLogoutConfiguration(boolean)})</li>\n+ * <li>{@link RequestCacheConfigurer} to set a request cache designed for Vaadin\n+ * applications (can be disabled with\n+ * {@link #enableRequestCacheConfiguration(boolean)})</li>\n+ * <li>{@link ExceptionHandlingConfigurer} to configure proper exception\n+ * handling for Vaadin applications (can be disabled with\n+ * {@link #enableExceptionHandlingConfiguration(boolean)})</li>\n+ * <li>{@link AuthorizeHttpRequestsConfigurer} to permit internal framework\n+ * requests and other public endpoints (can be disabled with\n+ * {@link #enableAuthorizedRequestsConfiguration(boolean)})</li>\n+ * </ul>\n+ *\n+ * <h2>Shared Objects</h2>\n+ * <p>\n+ * The following beans are shared by this configurer (if not already shared):\n+ * <ul>\n+ * <li>{@link RequestUtil}</li>\n+ * <li>{@link AuthenticationContext}</li>\n+ * <li>{@link NavigationAccessControl}</li>\n+ * <li>{@link VaadinRolePrefixHolder}</li>\n+ * <li>{@link VaadinDefaultRequestCache}</li>\n+ * <li>{@link VaadinSavedRequestAwareAuthenticationSuccessHandler}</li>\n+ * <li>{@link ClientRegistrationRepository}</li>\n+ * </ul>\n+ */\n+public final class VaadinSecurityConfigurer\n+        extends AbstractHttpConfigurer<VaadinSecurityConfigurer, HttpSecurity> {\n+\n+    private static final Logger LOGGER = LoggerFactory\n+            .getLogger(VaadinSecurityConfigurer.class);\n+\n+    private final List<LogoutHandler> logoutHandlers = new ArrayList<>();\n+\n+    private Class<? extends Component> loginView;\n+\n+    private String formLoginPage;\n+\n+    private String oauth2LoginPage;\n+\n+    private String logoutSuccessUrl;\n+\n+    private String postLogoutRedirectUri;\n+\n+    private boolean enableCsrfConfiguration = true;\n+\n+    private boolean enableLogoutConfiguration = true;\n+\n+    private boolean enableRequestCacheConfiguration = true;\n+\n+    private boolean enableExceptionHandlingConfiguration = true;\n+\n+    private boolean enableAuthorizedRequestsConfiguration = true;\n+\n+    private Consumer<AuthorizeHttpRequestsConfigurer<HttpSecurity>.AuthorizedUrl> anyRequestAuthorizeRule = AuthorizedUrl::authenticated;\n+\n+    private boolean enableNavigationAccessControl = true;\n+\n+    private boolean alreadyInitializedOnce = false;\n+\n+    /**\n+     * Creates a new instance the {@code VaadinSecurityConfigurer} that can be\n+     * used to configure security settings for Vaadin applications.\n+     *\n+     * @return a new instance of {@code VaadinSecurityConfigurer}\n+     */\n+    public static VaadinSecurityConfigurer vaadin() {\n+        return new VaadinSecurityConfigurer();\n+    }\n+\n+    private VaadinSecurityConfigurer() {\n+        // Instance creation is handled by the static factory method.\n+    }\n+\n+    /**\n+     * Configures the login view for use in a Flow application.\n+     * <p>\n+     * This method ensures that the provided login view class is annotated with\n+     * {@code @Route}, retrieves the route path for the login view, and sets up\n+     * the necessary configurations for login and logout paths.\n+     *\n+     * @param loginView\n+     *            the component class to be used as the login view\n+     * @return the current configurer instance for method chaining\n+     * @throws IllegalArgumentException\n+     *             if the provided class is not annotated with {@code @Route}\n+     */\n+    public VaadinSecurityConfigurer loginView(\n+            Class<? extends Component> loginView) {\n+        return loginView(loginView, getDefaultLogoutSuccessUrl());\n+    }\n+\n+    /**\n+     * Configures the login view for use in a Flow application and the logout\n+     * success URL.\n+     * <p>\n+     * This method ensures that the provided login view class is annotated with\n+     * {@code @Route}, retrieves the route path for the login view, and sets up\n+     * the necessary configurations for login and logout paths.\n+     *\n+     * @param loginView\n+     *            the component class to be used as the login view\n+     * @param logoutSuccessUrl\n+     *            the URL to redirect to upon a successful logout\n+     * @return the current configurer instance for method chaining\n+     * @throws IllegalArgumentException\n+     *             if the provided class is not annotated with {@code @Route}\n+     */\n+    public VaadinSecurityConfigurer loginView(\n+            Class<? extends Component> loginView, String logoutSuccessUrl) {\n+        this.loginView = loginView;\n+        var loginViewPath = getLoginViewPath(loginView);\n+        this.formLoginPage = getRequestUtil().applyUrlMapping(loginViewPath);\n+        this.logoutSuccessUrl = logoutSuccessUrl;\n+        return this;\n+    }\n+\n+    /**\n+     * Configures the login view for use in a Hilla application.\n+     * <p>\n+     * This is used when your application uses a Hilla-based login view that is\n+     * available at the given path.\n+     * <p>\n+     * If the path points to a Flow view, the corresponding Java class must be\n+     * annotated with {@link com.vaadin.flow.server.auth.AnonymousAllowed} to\n+     * ensure that the view is always accessible.\n+     *\n+     * @param loginView\n+     *            the path to the login view\n+     * @return the current configurer instance for method chaining\n+     */\n+    public VaadinSecurityConfigurer loginView(String loginView) {\n+        return loginView(loginView, getDefaultLogoutSuccessUrl());\n+    }\n+\n+    /**\n+     * Configures the login view for use in a Hilla application and the logout\n+     * success URL.\n+     * <p>\n+     * This is used when your application uses a Hilla-based login view that is\n+     * available at the given path.\n+     * <p>\n+     * If the path points to a Flow view, the corresponding Java class must be\n+     * annotated with {@link com.vaadin.flow.server.auth.AnonymousAllowed} to\n+     * ensure that the view is always accessible.\n+     *\n+     * @param loginView\n+     *            the path to the login view\n+     * @param logoutSuccessUrl\n+     *            the URL to redirect to upon a successful logout\n+     * @return the current configurer instance for method chaining\n+     */\n+    public VaadinSecurityConfigurer loginView(String loginView,\n+            String logoutSuccessUrl) {\n+        this.formLoginPage = getRequestUtil().applyUrlMapping(loginView);\n+        this.logoutSuccessUrl = logoutSuccessUrl;\n+        return this;\n+    }\n+\n+    /**\n+     * Configures the login page for OAuth2 authentication.\n+     * <p>\n+     * If using Spring's OAuth2 client, this should be set to Spring's internal\n+     * redirect endpoint {@code /oauth2/authorization/{registrationId}} where\n+     * {@code registrationId} is the ID of the OAuth2 client registration.\n+     * <p>\n+     * This method also configures a logout success handler that redirects to\n+     * the application base URL after logout.\n+     *\n+     * @param oauth2LoginPage\n+     *            the login page for OAuth2 authentication\n+     * @return the current configurer instance for method chaining\n+     */\n+    public VaadinSecurityConfigurer oauth2LoginPage(String oauth2LoginPage) {\n+        return oauth2LoginPage(oauth2LoginPage, \"{baseUrl}\");\n+    }\n+\n+    /**\n+     * Configures the login page for OAuth2 authentication and the post-logout\n+     * redirect URI.\n+     * <p>\n+     * If using Spring's OAuth2 client, this should be set to Spring's internal\n+     * redirect endpoint {@code /oauth2/authorization/{registrationId}} where\n+     * {@code registrationId} is the ID of the OAuth2 client registration.\n+     * <p>\n+     * The {@code {baseUrl}} placeholder is also supported, which is the same as\n+     * {@code {baseScheme}://{baseHost}{basePort}{basePath}}.\n+     *\n+     * @param oauth2LoginPage\n+     *            the login page for OAuth2 authentication\n+     * @param postLogoutRedirectUri\n+     *            the URI to redirect to after the user logs out\n+     * @return the current configurer instance for method chaining\n+     */\n+    public VaadinSecurityConfigurer oauth2LoginPage(String oauth2LoginPage,\n+            String postLogoutRedirectUri) {\n+        this.oauth2LoginPage = oauth2LoginPage;\n+        this.postLogoutRedirectUri = postLogoutRedirectUri;\n+        return this;\n+    }\n+\n+    /**\n+     * Configures the handler for a successful logout.\n+     * <p>\n+     * This overrides the default handler configured automatically with either\n+     * {@link #loginView(Class)} or {@link #oauth2LoginPage(String)} (and their\n+     * overloads).\n+     *\n+     * @param logoutSuccessHandler\n+     *            the logout success handler\n+     * @return the current configurer instance for method chaining\n+     */\n+    public VaadinSecurityConfigurer logoutSuccessHandler(\n+            LogoutSuccessHandler logoutSuccessHandler) {\n+        setSharedObject(LogoutSuccessHandler.class, logoutSuccessHandler);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds a {@link LogoutHandler} to the list of logout handlers.\n+     *\n+     * @param logoutHandler\n+     *            the logout handler to be added\n+     * @return the current configurer instance for method chaining\n+     */\n+    public VaadinSecurityConfigurer addLogoutHandler(\n+            LogoutHandler logoutHandler) {\n+        logoutHandlers.add(logoutHandler);\n+        return this;\n+    }\n+\n+    /**\n+     * Enables or disables automatic CSRF configuration (enabled by default).\n+     * <p>\n+     * This configurer will automatically configure Spring's CSRF filter to\n+     * allow Vaadin internal framework requests to be properly processed.\n+     *\n+     * @param enableCsrfConfiguration\n+     *            whether CSRF configuration should be enabled\n+     * @return the current configurer instance for method chaining\n+     */\n+    public VaadinSecurityConfigurer enableCsrfConfiguration(\n+            boolean enableCsrfConfiguration) {\n+        this.enableCsrfConfiguration = enableCsrfConfiguration;\n+        return this;\n+    }\n+\n+    /**\n+     * Enables or disables automatic logout configuration (enabled by default).\n+     * <p>\n+     * This configurer will automatically configure logout behavior to work\n+     * properly with Flow and Hilla.\n+     *\n+     * @param enableLogoutConfiguration\n+     *            whether logout configuration should be enabled\n+     * @return the current configurer instance for method chaining\n+     */\n+    public VaadinSecurityConfigurer enableLogoutConfiguration(\n+            boolean enableLogoutConfiguration) {\n+        this.enableLogoutConfiguration = enableLogoutConfiguration;\n+        return this;\n+    }\n+\n+    /**\n+     * Enables or disables automatic configuration of the request cache (enabled\n+     * by default).\n+     * <p>\n+     * This configurer will automatically configure the request cache to work\n+     * properly with Vaadin's internal framework requests.\n+     *\n+     * @param enableRequestCacheConfiguration\n+     *            whether configuration of the request cache should be enabled\n+     * @return the current configurer instance for method chaining\n+     */\n+    public VaadinSecurityConfigurer enableRequestCacheConfiguration(\n+            boolean enableRequestCacheConfiguration) {\n+        this.enableRequestCacheConfiguration = enableRequestCacheConfiguration;\n+        return this;\n+    }\n+\n+    /**\n+     * Enables or disables automatic configuration of exception handling\n+     * (enabled by default).\n+     * <p>\n+     * This configurer will automatically configure exception handling to work\n+     * properly with Flow and Hilla.\n+     *\n+     * @param enableExceptionHandlingConfiguration\n+     *            whether configuration of exception handling should be enabled\n+     * @return the current configurer instance for method chaining\n+     */\n+    public VaadinSecurityConfigurer enableExceptionHandlingConfiguration(\n+            boolean enableExceptionHandlingConfiguration) {\n+        this.enableExceptionHandlingConfiguration = enableExceptionHandlingConfiguration;\n+        return this;\n+    }\n+\n+    /**\n+     * Enables or disables automatic configuration of authorized requests\n+     * (enabled by default).\n+     * <p>\n+     * This configurer will automatically configure authorized requests to\n+     * permit requests to anonymous Flow and Hilla views, and static assets.\n+     *\n+     * @param enableAuthorizedRequestsConfiguration\n+     *            whether configuration of authorized requests should be enabled\n+     * @return the current configurer instance for method chaining\n+     * @see #defaultPermitMatcher()\n+     */\n+    public VaadinSecurityConfigurer enableAuthorizedRequestsConfiguration(\n+            boolean enableAuthorizedRequestsConfiguration) {\n+        this.enableAuthorizedRequestsConfiguration = enableAuthorizedRequestsConfiguration;\n+        return this;\n+    }\n+\n+    /**\n+     * Configures the access rule for any request not matching other configured\n+     * rules.\n+     * <p>\n+     * The default rule is to require authentication, which is the equivalent of\n+     * passing {@link AuthorizedUrl#authenticated()} to this method.\n+     *\n+     * @param anyRequestAuthorizeRule\n+     *            the access rule for any request not matching other rules, or\n+     *            {@code null} to disable automatic configuration\n+     * @return the current configurer instance for method chaining\n+     */\n+    public VaadinSecurityConfigurer anyRequest(\n+            Consumer<AuthorizeHttpRequestsConfigurer<HttpSecurity>.AuthorizedUrl> anyRequestAuthorizeRule) {\n+        this.anyRequestAuthorizeRule = anyRequestAuthorizeRule;\n+        return this;\n+    }\n+\n+    /**\n+     * Enables or disables configuration of {@link NavigationAccessControl}.\n+     * <p>\n+     * {@link NavigationAccessControl} is enabled by default.\n+     *\n+     * @param enableNavigationAccessControl\n+     *            a boolean flag indicating whether\n+     *            {@link NavigationAccessControl} should be enabled or disabled\n+     * @return the current configurer instance for method chaining\n+     */\n+    public VaadinSecurityConfigurer enableNavigationAccessControl(\n+            boolean enableNavigationAccessControl) {\n+        this.enableNavigationAccessControl = enableNavigationAccessControl;\n+        return this;\n+    }\n+\n+    /**\n+     * Creates and returns a composite {@link RequestMatcher} for identifying\n+     * requests that should be permitted without authentication within a Vaadin\n+     * application.\n+     * <p>\n+     * This matcher combines multiple specific matchers, including those for\n+     * framework internal requests, anonymous endpoints, allowed Hilla views,\n+     * anonymous routes, custom web icons, and default security configurations.\n+     *\n+     * @return a {@link RequestMatcher} that matches requests to be allowed\n+     *         without authentication\n+     */\n+    public RequestMatcher defaultPermitMatcher() {\n+        var urlMapping = getRequestUtil().getUrlMapping();\n+        var baseMatcher = RequestMatchers.anyOf(\n+                // Vaadin internal requests must always be permitted to allow\n+                // public Flow assets and/or the Flow login view\n+                getRequestUtil()::isFrameworkInternalRequest,\n+                // Public routes are permitted\n+                getRequestUtil()::isAnonymousRoute,\n+                // Custom web icons (and favicons) are permitted\n+                getRequestUtil()::isCustomWebIcon,\n+                // Matchers for Vaadin static resources\n+                getDefaultHttpSecurityPermitMatcher(urlMapping),\n+                getDefaultWebSecurityIgnoreMatcher(urlMapping));\n+        if (EndpointRequestUtil.isHillaAvailable()) {\n+            return RequestMatchers.anyOf(baseMatcher,\n+                    // Matchers for known Hilla views\n+                    getRequestUtil()::isAllowedHillaView,\n+                    // Matcher for public Hilla endpoints\n+                    getRequestUtil()::isAnonymousEndpoint);\n+        }\n+        return baseMatcher;\n+    }\n+\n+    @Override\n+    public void init(HttpSecurity http) throws Exception {\n+        if (formLoginPage != null) {\n+            http.formLogin(configurer -> {\n+                configurer.loginPage(formLoginPage).permitAll();\n+                configurer.successHandler(getAuthenticationSuccessHandler());\n+            });\n+        } else if (oauth2LoginPage != null) {\n+            http.oauth2Login(configurer -> {\n+                configurer.loginPage(oauth2LoginPage).permitAll();\n+                configurer.successHandler(getAuthenticationSuccessHandler());\n+            });\n+        }\n+        if (enableCsrfConfiguration) {\n+            http.csrf(this::customizeCsrf);\n+        }\n+        if (enableLogoutConfiguration) {\n+            http.logout(this::customizeLogout);\n+        }\n+        if (enableRequestCacheConfiguration) {\n+            http.requestCache(this::customizeRequestCache);\n+        }\n+        if (enableExceptionHandlingConfiguration) {\n+            http.exceptionHandling(this::customizeExceptionHandling);\n+        }\n+        if (enableAuthorizedRequestsConfiguration && !alreadyInitializedOnce) {\n+            http.authorizeHttpRequests(this::customizeAuthorizeHttpRequests);\n+        }\n+        // The init method might be called multiple times if the configurer is\n+        // added during initialization of another configurer. This flag allows\n+        // tracking whether initialization has already happened once to avoid\n+        // redundant configuration (e.g., adding request matchers twice).\n+        alreadyInitializedOnce = true;\n+    }\n+\n+    @Override\n+    public void configure(HttpSecurity http) throws Exception {\n+        var rolePrefixHolder = getVaadinRolePrefixHolder();\n+        if (rolePrefixHolder != null) {\n+            getAuthenticationContext().setRolePrefixHolder(rolePrefixHolder);\n+            getSharedObject(SecurityContextHolderAwareRequestFilter.class)\n+                    .ifPresent(rolePrefixHolder::resetRolePrefix);\n+        }\n+        getNavigationAccessControl().setEnabled(enableNavigationAccessControl);\n+        if (enableNavigationAccessControl) {\n+            if (loginView != null) {\n+                getNavigationAccessControl().setLoginView(loginView);\n+            } else if (formLoginPage != null) {\n+                getNavigationAccessControl().setLoginView(formLoginPage);\n+            } else if (oauth2LoginPage != null) {\n+                getNavigationAccessControl().setLoginView(oauth2LoginPage);\n+            }\n+        }\n+        // Configuring the authorized requests here allows other configurers to\n+        // customize the authorized requests during their own initialization.\n+        // Also, it ensures that the anyRequest authorize-rule is configured as\n+        // late as possible, since it must be the last authorize-rule to be set.\n+        if (enableAuthorizedRequestsConfiguration\n+                && anyRequestAuthorizeRule != null) {\n+            http.authorizeHttpRequests(registry -> {\n+                anyRequestAuthorizeRule.accept(registry.anyRequest());\n+            });\n+        }\n+    }\n+\n+    private String getLoginViewPath(Class<? extends Component> loginView) {\n+        var route = AnnotationReader.getAnnotationFor(loginView, Route.class);\n+        if (route.isEmpty()) {\n+            throw new IllegalArgumentException(\"Unable find a @Route annotation\"\n+                    + \" on the login view \" + loginView.getName());\n+        }\n+        if (getApplicationContext() instanceof WebApplicationContext wac) {\n+            var vaadinCtx = new VaadinServletContext(wac.getServletContext());\n+            var loginPath = RouteUtil.getRoutePath(vaadinCtx, loginView);\n+            if (!loginPath.startsWith(\"/\")) {\n+                loginPath = \"/\" + loginPath;\n+            }\n+            return loginPath;\n+        }\n+        throw new IllegalStateException(\"VaadinWebSecurityConfigurer cannot be \"\n+                + \"used without WebApplicationContext.\");\n+    }\n+\n+    private String getServletContextPath() {\n+        return getSharedObjectOrBean(ServletContext.class).getContextPath();\n+    }\n+\n+    private String getDefaultLogoutSuccessUrl() {\n+        var servletContextPath = getServletContextPath();\n+        if (!servletContextPath.startsWith(\"/\")) {\n+            servletContextPath = \"/\" + servletContextPath;\n+        }\n+        return servletContextPath;\n+    }\n+\n+    private RequestUtil getRequestUtil() {\n+        return getSharedObjectOrBean(RequestUtil.class);\n+    }\n+\n+    private AuthenticationContext getAuthenticationContext() {\n+        return getSharedObjectOrBean(AuthenticationContext.class);\n+    }\n+\n+    private NavigationAccessControl getNavigationAccessControl() {\n+        return getSharedObjectOrBean(NavigationAccessControl.class);\n+    }\n+\n+    private VaadinRolePrefixHolder getVaadinRolePrefixHolder() {\n+        return getSharedObjectOrBean(VaadinRolePrefixHolder.class);\n+    }\n+\n+    private VaadinDefaultRequestCache getVaadinDefaultRequestCache() {\n+        return getSharedObjectOrBean(VaadinDefaultRequestCache.class);\n+    }\n+\n+    private VaadinSavedRequestAwareAuthenticationSuccessHandler getAuthenticationSuccessHandler() {\n+        return getSharedObject(\n+                VaadinSavedRequestAwareAuthenticationSuccessHandler.class)\n+                .orElseGet(this::createAuthenticationSuccessHandler);\n+    }\n+\n+    private VaadinSavedRequestAwareAuthenticationSuccessHandler createAuthenticationSuccessHandler() {\n+        var handler = new VaadinSavedRequestAwareAuthenticationSuccessHandler();\n+        handler.setDefaultTargetUrl(getRequestUtil().applyUrlMapping(\"\"));\n+        getSharedObject(RequestCache.class).ifPresent(handler::setRequestCache);\n+        getBuilder().setSharedObject(\n+                VaadinSavedRequestAwareAuthenticationSuccessHandler.class,\n+                handler);\n+        return handler;\n+    }\n+\n+    private void customizeCsrf(CsrfConfigurer<HttpSecurity> configurer) {\n+        if (!alreadyInitializedOnce) {\n+            configurer.ignoringRequestMatchers(\n+                    getRequestUtil()::isFrameworkInternalRequest);\n+        }\n+        if (formLoginPage != null) {\n+            configurer.ignoringRequestMatchers(\n+                    new AntPathRequestMatcher(formLoginPage));\n+        }\n+    }\n+\n+    private void customizeLogout(LogoutConfigurer<HttpSecurity> configurer) {\n+        getSharedObject(LogoutSuccessHandler.class).or(() -> {\n+            if (logoutSuccessUrl != null) {\n+                return createSimpleUrlLogoutSuccessHandler(logoutSuccessUrl);\n+            } else if (postLogoutRedirectUri != null) {\n+                return createOidcLogoutSuccessHandler(postLogoutRedirectUri);\n+            }\n+            return Optional.empty();\n+        }).ifPresent(configurer::logoutSuccessHandler);\n+        var existingHandlers = configurer.getLogoutHandlers();\n+        logoutHandlers.stream()\n+                .filter(handler -> !existingHandlers.contains(handler))\n+                .forEach(configurer::addLogoutHandler);\n+        if (!alreadyInitializedOnce) {\n+            // Allows setting logout handlers on the AuthenticationContext at\n+            // the right time, i.e., during the logout configuration phase.\n+            var postProcessor = new ObjectPostProcessor<LogoutFilter>() {\n+                @Override\n+                public <O extends LogoutFilter> O postProcess(O filter) {\n+                    getAuthenticationContext().setLogoutHandlers(\n+                            configurer.getLogoutSuccessHandler(),\n+                            configurer.getLogoutHandlers());\n+                    return filter;\n+                }\n+            };\n+            configurer.withObjectPostProcessor(postProcessor);\n+        }\n+    }\n+\n+    private Optional<LogoutSuccessHandler> createSimpleUrlLogoutSuccessHandler(\n+            String logoutSuccessUrl) {\n+        var handler = new VaadinSimpleUrlLogoutSuccessHandler();\n+        handler.setRedirectStrategy(new UidlRedirectStrategy());\n+        handler.setDefaultTargetUrl(logoutSuccessUrl);\n+        return Optional.of(handler);\n+    }\n+\n+    private Optional<LogoutSuccessHandler> createOidcLogoutSuccessHandler(\n+            String postLogoutRedirectUri) {\n+        var crr = getSharedObjectOrBean(ClientRegistrationRepository.class);\n+        if (crr != null) {\n+            var handler = new OidcClientInitiatedLogoutSuccessHandler(crr);\n+            handler.setRedirectStrategy(new UidlRedirectStrategy());\n+            handler.setPostLogoutRedirectUri(postLogoutRedirectUri);\n+            return Optional.of(handler);\n+        }\n+        LOGGER.warn(\"Cannot create OidcClientInitiatedLogoutSuccessHandler \"\n+                + \"because ClientRegistrationRepository bean is not available.\");\n+        return Optional.empty();\n+    }\n+\n+    private void customizeRequestCache(\n+            RequestCacheConfigurer<HttpSecurity> configurer) {\n+        var vaadinDefaultRequestCache = getVaadinDefaultRequestCache();\n+        if (vaadinDefaultRequestCache == null) {\n+            throw new IllegalStateException(\"No VaadinDefaultRequestCache bean \"\n+                    + \"or shared object found. Please make sure that either a \"\n+                    + \"bean or shared object of type VaadinDefaultRequestCache \"\n+                    + \"is available.\");\n+        }\n+        // If there is an existing RequestCache shared object, use that as the\n+        // delegate cache for requests not saved by VaadinDefaultRequestCache.\n+        getSharedObject(RequestCache.class)\n+                .filter(cache -> !(cache instanceof VaadinDefaultRequestCache))\n+                .ifPresent(vaadinDefaultRequestCache::setDelegateRequestCache);\n+        configurer.requestCache(vaadinDefaultRequestCache);\n+    }\n+\n+    private void customizeExceptionHandling(\n+            ExceptionHandlingConfigurer<HttpSecurity> configurer) {\n+        if (EndpointRequestUtil.isHillaAvailable()) {\n+            // Respond with 401 Unauthorized HTTP status code for unauthorized\n+            // requests for protected Hilla endpoints, so that the response\n+            // could be handled on the client side using, for example, Hilla's\n+            // `InvalidSessionMiddleware`.\n+            configurer.accessDeniedHandler(createAccessDeniedHandler())\n+                    .defaultAuthenticationEntryPointFor(\n+                            new HttpStatusEntryPoint(HttpStatus.UNAUTHORIZED),\n+                            getRequestUtil()::isEndpointRequest);\n+        }\n+        if (formLoginPage != null) {\n+            configurer.defaultAuthenticationEntryPointFor(\n+                    new LoginUrlAuthenticationEntryPoint(formLoginPage),\n+                    AnyRequestMatcher.INSTANCE);\n+        }\n+    }\n+\n+    private AccessDeniedHandler createAccessDeniedHandler() {\n+        var exceptionHandlers = new LinkedHashMap<Class<? extends AccessDeniedException>, AccessDeniedHandler>();\n+        exceptionHandlers.put(CsrfException.class, (req, res, exc) -> res\n+                .setStatus(HttpStatus.UNAUTHORIZED.value()));\n+        var requestHandlers = new LinkedHashMap<RequestMatcher, AccessDeniedHandler>();\n+        requestHandlers.put(getRequestUtil()::isEndpointRequest,\n+                new DelegatingAccessDeniedHandler(exceptionHandlers,\n+                        new AccessDeniedHandlerImpl()));\n+        return new RequestMatcherDelegatingAccessDeniedHandler(requestHandlers,\n+                new AccessDeniedHandlerImpl());\n+    }\n+\n+    private void customizeAuthorizeHttpRequests(\n+            AuthorizeHttpRequestsConfigurer<HttpSecurity>.AuthorizationManagerRequestMatcherRegistry registry) {\n+        registry.requestMatchers(defaultPermitMatcher()).permitAll();\n+    }\n+\n+    private ApplicationContext getApplicationContext() {\n+        return getBuilder().getSharedObject(ApplicationContext.class);\n+    }\n+\n+    private <T> void setSharedObject(Class<T> type, T object) {\n+        getBuilder().setSharedObject(type, object);\n+    }\n+\n+    private <T> Optional<T> getSharedObject(Class<T> type) {\n+        return Optional.ofNullable(getBuilder().getSharedObject(type));\n+    }\n+\n+    private <T> T getSharedObjectOrBean(Class<T> type) {\n+        return getSharedObject(type).orElseGet(() -> {\n+            var provider = getApplicationContext().getBeanProvider(type);\n+            T bean = provider.getIfAvailable();\n+            if (bean != null) {\n+                getBuilder().setSharedObject(type, bean);\n+            }\n+            return bean;\n+        });\n+    }\n+}\n",
    "test_patch": "diff --git a/flow-tests/vaadin-spring-tests/test-spring-security-flow-contextpath/pom.xml b/flow-tests/vaadin-spring-tests/test-spring-security-flow-contextpath/pom.xml\nindex 17d6d3963fa..7e33710d9ec 100644\n--- a/flow-tests/vaadin-spring-tests/test-spring-security-flow-contextpath/pom.xml\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-flow-contextpath/pom.xml\n@@ -47,6 +47,7 @@\n             <groupId>com.vaadin</groupId>\n             <artifactId>test-spring-security-flow</artifactId>\n             <version>${project.version}</version>\n+            <classifier>tests</classifier>\n             <type>test-jar</type>\n             <scope>test</scope>\n         </dependency>\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-security-flow-methodsecurity/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java b/flow-tests/vaadin-spring-tests/test-spring-security-flow-methodsecurity/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java\nnew file mode 100644\nindex 00000000000..c3cd87b68f5\n--- /dev/null\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-flow-methodsecurity/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java\n@@ -0,0 +1,114 @@\n+package com.vaadin.flow.spring.flowsecurity;\n+\n+import jakarta.servlet.ServletContext;\n+\n+import java.util.stream.Collectors;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler;\n+import org.springframework.security.access.expression.method.MethodSecurityExpressionHandler;\n+import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.core.authority.SimpleGrantedAuthority;\n+import org.springframework.security.core.userdetails.User;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.security.core.userdetails.UsernameNotFoundException;\n+import org.springframework.security.provisioning.InMemoryUserDetailsManager;\n+import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n+\n+import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.internal.UrlUtil;\n+import com.vaadin.flow.spring.RootMappedCondition;\n+import com.vaadin.flow.spring.VaadinConfigurationProperties;\n+import com.vaadin.flow.spring.flowsecurity.data.UserInfo;\n+import com.vaadin.flow.spring.flowsecurity.service.UserInfoService;\n+import com.vaadin.flow.spring.flowsecurity.views.LoginView;\n+import com.vaadin.flow.spring.security.VaadinWebSecurity;\n+\n+import static com.vaadin.flow.spring.flowsecurity.service.UserInfoService.ROLE_ADMIN;\n+\n+@EnableWebSecurity\n+@EnableMethodSecurity(prePostEnabled = false, jsr250Enabled = true, securedEnabled = true)\n+@Configuration\n+@Profile(\"legacy-vaadin-web-security\")\n+public class LegacySecurityConfig extends VaadinWebSecurity {\n+\n+    @Autowired\n+    private UserInfoService userInfoService;\n+\n+    @Autowired\n+    private ServletContext servletContext;\n+\n+    @Autowired\n+    private VaadinConfigurationProperties vaadinConfigurationProperties;\n+\n+    public String getLogoutSuccessUrl() {\n+        String logoutSuccessUrl;\n+        String mapping = vaadinConfigurationProperties.getUrlMapping();\n+        if (RootMappedCondition.isRootMapping(mapping)) {\n+            logoutSuccessUrl = \"/\";\n+        } else {\n+            logoutSuccessUrl = mapping.replaceFirst(\"/\\\\*$\", \"/\");\n+        }\n+        String contextPath = servletContext.getContextPath();\n+        if (!\"\".equals(contextPath)) {\n+            logoutSuccessUrl = contextPath + logoutSuccessUrl;\n+        }\n+        return logoutSuccessUrl;\n+    }\n+\n+    @Override\n+    public void configure(HttpSecurity http) throws Exception {\n+        http.authorizeHttpRequests(auth -> auth\n+                .requestMatchers(new AntPathRequestMatcher(\"/admin-only/**\"))\n+                .hasAnyRole(ROLE_ADMIN)\n+                .requestMatchers(new AntPathRequestMatcher(\"/public/**\"))\n+                .permitAll());\n+        super.configure(http);\n+        if (getLogoutSuccessUrl().equals(\"/\")) {\n+            // Test the default url with empty context path\n+            setLoginView(http, LoginView.class);\n+        } else {\n+            setLoginView(http, LoginView.class, getLogoutSuccessUrl());\n+        }\n+        http.logout(cfg -> cfg\n+                .addLogoutHandler((request, response, authentication) -> {\n+                    UI ui = UI.getCurrent();\n+                    ui.accessSynchronously(() -> ui.getPage()\n+                            .setLocation(UrlUtil.getServletPathRelative(\n+                                    getLogoutSuccessUrl(), request)));\n+                }));\n+    }\n+\n+    @Bean\n+    public InMemoryUserDetailsManager userDetailsService() {\n+        return new InMemoryUserDetailsManager() {\n+            @Override\n+            public UserDetails loadUserByUsername(String username)\n+                    throws UsernameNotFoundException {\n+                UserInfo userInfo = userInfoService.findByUsername(username);\n+                if (userInfo == null) {\n+                    throw new UsernameNotFoundException(\n+                            \"No user present with username: \" + username);\n+                } else {\n+                    return new User(userInfo.getUsername(),\n+                            userInfo.getEncodedPassword(),\n+                            userInfo.getRoles().stream()\n+                                    .map(role -> new SimpleGrantedAuthority(\n+                                            \"ROLE_\" + role))\n+                                    .collect(Collectors.toList()));\n+                }\n+            }\n+        };\n+    }\n+\n+    @Bean\n+    protected MethodSecurityExpressionHandler createExpressionHandler() {\n+        return new DefaultMethodSecurityExpressionHandler();\n+    }\n+\n+}\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-security-flow-methodsecurity/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java b/flow-tests/vaadin-spring-tests/test-spring-security-flow-methodsecurity/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java\nindex db97e4b7e35..9faba439de3 100644\n--- a/flow-tests/vaadin-spring-tests/test-spring-security-flow-methodsecurity/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-flow-methodsecurity/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java\n@@ -4,9 +4,10 @@\n \n import java.util.stream.Collectors;\n \n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Profile;\n import org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler;\n import org.springframework.security.access.expression.method.MethodSecurityExpressionHandler;\n import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\n@@ -17,6 +18,7 @@\n import org.springframework.security.core.userdetails.UserDetails;\n import org.springframework.security.core.userdetails.UsernameNotFoundException;\n import org.springframework.security.provisioning.InMemoryUserDetailsManager;\n+import org.springframework.security.web.SecurityFilterChain;\n import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n \n import com.vaadin.flow.component.UI;\n@@ -26,23 +28,31 @@\n import com.vaadin.flow.spring.flowsecurity.data.UserInfo;\n import com.vaadin.flow.spring.flowsecurity.service.UserInfoService;\n import com.vaadin.flow.spring.flowsecurity.views.LoginView;\n-import com.vaadin.flow.spring.security.VaadinWebSecurity;\n+import com.vaadin.flow.spring.security.VaadinAwareSecurityContextHolderStrategyConfiguration;\n \n import static com.vaadin.flow.spring.flowsecurity.service.UserInfoService.ROLE_ADMIN;\n+import static com.vaadin.flow.spring.security.VaadinSecurityConfigurer.vaadin;\n \n @EnableWebSecurity\n @EnableMethodSecurity(prePostEnabled = false, jsr250Enabled = true, securedEnabled = true)\n @Configuration\n-public class SecurityConfig extends VaadinWebSecurity {\n+@Profile(\"default\")\n+@Import(VaadinAwareSecurityContextHolderStrategyConfiguration.class)\n+public class SecurityConfig {\n \n-    @Autowired\n-    private UserInfoService userInfoService;\n+    private final UserInfoService userInfoService;\n \n-    @Autowired\n-    private ServletContext servletContext;\n+    private final ServletContext servletContext;\n \n-    @Autowired\n-    private VaadinConfigurationProperties vaadinConfigurationProperties;\n+    private final VaadinConfigurationProperties vaadinConfigurationProperties;\n+\n+    public SecurityConfig(UserInfoService userInfoService,\n+            ServletContext servletContext,\n+            VaadinConfigurationProperties vaadinConfigurationProperties) {\n+        this.userInfoService = userInfoService;\n+        this.servletContext = servletContext;\n+        this.vaadinConfigurationProperties = vaadinConfigurationProperties;\n+    }\n \n     public String getLogoutSuccessUrl() {\n         String logoutSuccessUrl;\n@@ -59,27 +69,29 @@ public String getLogoutSuccessUrl() {\n         return logoutSuccessUrl;\n     }\n \n-    @Override\n-    public void configure(HttpSecurity http) throws Exception {\n+    @Bean\n+    SecurityFilterChain vaadinSecurityFilterChain(HttpSecurity http)\n+            throws Exception {\n         http.authorizeHttpRequests(auth -> auth\n                 .requestMatchers(new AntPathRequestMatcher(\"/admin-only/**\"))\n                 .hasAnyRole(ROLE_ADMIN)\n                 .requestMatchers(new AntPathRequestMatcher(\"/public/**\"))\n                 .permitAll());\n-        super.configure(http);\n-        if (getLogoutSuccessUrl().equals(\"/\")) {\n-            // Test the default url with empty context path\n-            setLoginView(http, LoginView.class);\n-        } else {\n-            setLoginView(http, LoginView.class, getLogoutSuccessUrl());\n-        }\n-        http.logout(cfg -> cfg\n-                .addLogoutHandler((request, response, authentication) -> {\n-                    UI ui = UI.getCurrent();\n-                    ui.accessSynchronously(() -> ui.getPage()\n-                            .setLocation(UrlUtil.getServletPathRelative(\n-                                    getLogoutSuccessUrl(), request)));\n-                }));\n+        http.with(vaadin(), cfg -> {\n+            String logoutSuccessUrl = getLogoutSuccessUrl();\n+            if (logoutSuccessUrl.equals(\"/\")) {\n+                cfg.loginView(LoginView.class);\n+            } else {\n+                cfg.loginView(LoginView.class, logoutSuccessUrl);\n+            }\n+            cfg.addLogoutHandler((request, response, authentication) -> {\n+                UI ui = UI.getCurrent();\n+                ui.accessSynchronously(() -> ui.getPage().setLocation(\n+                        UrlUtil.getServletPathRelative(getLogoutSuccessUrl(),\n+                                request)));\n+            });\n+        });\n+        return http.build();\n     }\n \n     @Bean\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-security-flow-standalone-routepathaccesschecker/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java b/flow-tests/vaadin-spring-tests/test-spring-security-flow-standalone-routepathaccesschecker/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java\nindex 4fa81610d0d..c746b682d25 100644\n--- a/flow-tests/vaadin-spring-tests/test-spring-security-flow-standalone-routepathaccesschecker/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-flow-standalone-routepathaccesschecker/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java\n@@ -16,15 +16,11 @@\n import org.springframework.security.core.userdetails.UserDetails;\n import org.springframework.security.core.userdetails.UsernameNotFoundException;\n import org.springframework.security.provisioning.InMemoryUserDetailsManager;\n-import org.springframework.security.web.DefaultSecurityFilterChain;\n import org.springframework.security.web.SecurityFilterChain;\n-import org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler;\n import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n \n import com.vaadin.flow.component.UI;\n import com.vaadin.flow.internal.UrlUtil;\n-import com.vaadin.flow.server.HandlerHelper;\n-import com.vaadin.flow.server.auth.NavigationAccessControl;\n import com.vaadin.flow.spring.RootMappedCondition;\n import com.vaadin.flow.spring.VaadinConfigurationProperties;\n import com.vaadin.flow.spring.flowsecurity.data.UserInfo;\n@@ -33,10 +29,10 @@\n import com.vaadin.flow.spring.security.AuthenticationContext;\n import com.vaadin.flow.spring.security.NavigationAccessControlConfigurer;\n import com.vaadin.flow.spring.security.RequestUtil;\n-import com.vaadin.flow.spring.security.UidlRedirectStrategy;\n \n import static com.vaadin.flow.spring.flowsecurity.service.UserInfoService.ROLE_ADMIN;\n import static com.vaadin.flow.spring.security.RequestUtil.antMatchers;\n+import static com.vaadin.flow.spring.security.VaadinSecurityConfigurer.vaadin;\n \n @EnableWebSecurity\n @Configuration\n@@ -64,7 +60,7 @@ public AuthenticationContext authenticationContext() {\n     @Bean\n     static NavigationAccessControlConfigurer navigationAccessControlConfigurer() {\n         return new NavigationAccessControlConfigurer()\n-                .withRoutePathAccessChecker().withLoginView(LoginView.class);\n+                .withRoutePathAccessChecker();\n     }\n \n     @Bean\n@@ -81,17 +77,6 @@ public SecurityFilterChain webFilterChain(HttpSecurity http,\n                 // Permit access to static resources\n                 .requestMatchers(PathRequest.toStaticResources().atCommonLocations())\n                     .permitAll()\n-                // Permit access to vaadin's internal communication\n-                .requestMatchers(request -> HandlerHelper\n-                        .isFrameworkInternalRequest(\"/*\", request))\n-                    .permitAll()\n-                .requestMatchers(requestUtil::isAnonymousRoute)\n-                    .permitAll()\n-                // Permit technical access to vaadin's static files\n-                .requestMatchers(new AntPathRequestMatcher(\"/VAADIN/**\"))\n-                    .permitAll()\n-                // custom request matchers. using 'routeAwareAntMatcher' to\n-                // allow checking route and alias paths against patterns\n                 .requestMatchers(antMatchers(\"/admin-only/**\", \"/admin\"))\n                     .hasAnyRole(ROLE_ADMIN)\n                 .requestMatchers(antMatchers(\"/private\"))\n@@ -105,34 +90,21 @@ public SecurityFilterChain webFilterChain(HttpSecurity http,\n                     .hasAnyRole(ROLE_ADMIN)\n                 .requestMatchers(antMatchers(\"/home\", \"/hey/**\"))\n                     .permitAll()\n-                // Secure everything else\n-                .anyRequest().authenticated()\n-        );\n+                );\n         // @formatter:on\n-\n-        http.logout(cfg -> {\n-            SimpleUrlLogoutSuccessHandler logoutSuccessHandler = new SimpleUrlLogoutSuccessHandler();\n-            logoutSuccessHandler.setDefaultTargetUrl(getLogoutSuccessUrl());\n-            logoutSuccessHandler\n-                    .setRedirectStrategy(new UidlRedirectStrategy());\n-            cfg.logoutSuccessHandler(logoutSuccessHandler);\n-            cfg.addLogoutHandler((request, response, authentication) -> {\n-                UI ui = UI.getCurrent();\n-                ui.accessSynchronously(() -> ui.getPage().setLocation(\n-                        UrlUtil.getServletPathRelative(getLogoutSuccessUrl(),\n-                                request)));\n-            });\n-        });\n-        // Custom login page with form authentication\n-        http.formLogin(cfg -> cfg.loginPage(\"/my/login/page\").permitAll());\n-        DefaultSecurityFilterChain filterChain = http.build();\n-\n-        // Test application uses AuthenticationContext, configure it with\n-        // the logout handlers\n-        AuthenticationContext.applySecurityConfiguration(http,\n-                authenticationContext);\n-\n-        return filterChain;\n+        http.with(vaadin(),\n+                cfg -> cfg.loginView(LoginView.class, getLogoutSuccessUrl())\n+                        .addLogoutHandler(\n+                                (request, response, authentication) -> {\n+                                    UI ui = UI.getCurrent();\n+                                    ui.accessSynchronously(() -> ui.getPage()\n+                                            .setLocation(UrlUtil\n+                                                    .getServletPathRelative(\n+                                                            getLogoutSuccessUrl(),\n+                                                            request)));\n+                                }));\n+\n+        return http.build();\n     }\n \n     public String getLogoutSuccessUrl() {\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java b/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java\nnew file mode 100644\nindex 00000000000..05b5f3f28ca\n--- /dev/null\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java\n@@ -0,0 +1,167 @@\n+package com.vaadin.flow.spring.flowsecurity;\n+\n+import jakarta.servlet.ServletContext;\n+import jakarta.servlet.ServletException;\n+import jakarta.servlet.http.HttpServletRequest;\n+import jakarta.servlet.http.HttpServletResponse;\n+\n+import java.io.IOException;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.DependsOn;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.authority.SimpleGrantedAuthority;\n+import org.springframework.security.core.userdetails.User;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.security.core.userdetails.UsernameNotFoundException;\n+import org.springframework.security.provisioning.InMemoryUserDetailsManager;\n+import org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler;\n+import org.springframework.security.web.authentication.switchuser.SwitchUserFilter;\n+import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n+\n+import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.internal.UrlUtil;\n+import com.vaadin.flow.spring.RootMappedCondition;\n+import com.vaadin.flow.spring.VaadinConfigurationProperties;\n+import com.vaadin.flow.spring.flowsecurity.data.UserInfo;\n+import com.vaadin.flow.spring.flowsecurity.service.UserInfoService;\n+import com.vaadin.flow.spring.flowsecurity.views.LoginView;\n+import com.vaadin.flow.spring.security.UidlRedirectStrategy;\n+import com.vaadin.flow.spring.security.VaadinWebSecurity;\n+\n+import static com.vaadin.flow.spring.flowsecurity.service.UserInfoService.ROLE_ADMIN;\n+import static org.springframework.security.web.util.matcher.AntPathRequestMatcher.antMatcher;\n+\n+@EnableWebSecurity\n+@Configuration\n+@Profile(\"legacy-vaadin-web-security\")\n+public class LegacySecurityConfig extends VaadinWebSecurity {\n+\n+    @Autowired\n+    private UserInfoService userInfoService;\n+\n+    @Autowired\n+    private ServletContext servletContext;\n+\n+    @Autowired\n+    private VaadinConfigurationProperties vaadinConfigurationProperties;\n+\n+    public String getRootUrl() {\n+        return getRootUrl(true);\n+    }\n+\n+    public String getRootUrl(boolean includeContextPath) {\n+        String rootUrl;\n+        String mapping = vaadinConfigurationProperties.getUrlMapping();\n+        if (RootMappedCondition.isRootMapping(mapping)) {\n+            rootUrl = \"/\";\n+        } else {\n+            rootUrl = mapping.replaceFirst(\"/\\\\*$\", \"/\");\n+        }\n+        String contextPath = servletContext.getContextPath();\n+        if (includeContextPath && !\"\".equals(contextPath)) {\n+            rootUrl = contextPath + rootUrl;\n+        }\n+        return rootUrl;\n+    }\n+\n+    public String getLogoutSuccessUrl() {\n+        return getRootUrl();\n+    }\n+\n+    @Override\n+    public void configure(HttpSecurity http) throws Exception {\n+        // @formatter:off\n+        http.authorizeHttpRequests(auth -> auth\n+                .requestMatchers(new AntPathRequestMatcher(\"/admin-only/**\"))\n+                    .hasAnyRole(ROLE_ADMIN)\n+                .requestMatchers(antMatchers(\"/public/**\", \"/error\"))\n+                    .permitAll());\n+\n+        http.authorizeHttpRequests(auth -> auth.requestMatchers(new AntPathRequestMatcher(\"/switchUser\")).hasAnyRole(\"ADMIN\", \"PREVIOUS_ADMINISTRATOR\"));\n+        http.authorizeHttpRequests(auth -> auth.requestMatchers(new AntPathRequestMatcher(\"/impersonate/exit\")).hasRole(\"PREVIOUS_ADMINISTRATOR\"));\n+\n+        // @formatter:on\n+        super.configure(http);\n+        if (getLogoutSuccessUrl().equals(\"/\")) {\n+            // Test the default url with empty context path\n+            setLoginView(http, LoginView.class);\n+        } else {\n+            setLoginView(http, LoginView.class, getLogoutSuccessUrl());\n+        }\n+\n+        http.logout(cfg -> cfg\n+                .logoutRequestMatcher(new AntPathRequestMatcher(\n+                        getRootUrl(false) + \"doLogout\", \"GET\"))\n+                .addLogoutHandler((request, response, authentication) -> {\n+                    if (!request.getRequestURI().endsWith(\"doLogout\")) {\n+                        UI ui = UI.getCurrent();\n+                        ui.accessSynchronously(() -> ui.getPage()\n+                                .setLocation(UrlUtil.getServletPathRelative(\n+                                        getLogoutSuccessUrl(), request)));\n+                    }\n+                }).logoutSuccessHandler(this::onLogoutOnNonVaadinUrl)\n+                .permitAll());\n+    }\n+\n+    public void onLogoutOnNonVaadinUrl(HttpServletRequest request,\n+            HttpServletResponse response, Authentication authentication)\n+            throws IOException, ServletException {\n+        if (!request.getRequestURI().endsWith(\"doLogout\")) {\n+            return;\n+        }\n+        try {\n+            // Simulate long processing time\n+            Thread.currentThread().sleep(3000);\n+        } catch (InterruptedException e) {\n+            e.printStackTrace();\n+        }\n+        SimpleUrlLogoutSuccessHandler urlLogoutHandler = new SimpleUrlLogoutSuccessHandler();\n+        urlLogoutHandler.setDefaultTargetUrl(getRootUrl(false) + \"logout\");\n+        urlLogoutHandler.setRedirectStrategy(new UidlRedirectStrategy());\n+        urlLogoutHandler.onLogoutSuccess(request, response, authentication);\n+    }\n+\n+    @Bean\n+    public InMemoryUserDetailsManager userDetailsService() {\n+        return new InMemoryUserDetailsManager() {\n+            @Override\n+            public UserDetails loadUserByUsername(String username)\n+                    throws UsernameNotFoundException {\n+                UserInfo userInfo = userInfoService.findByUsername(username);\n+                if (userInfo == null) {\n+                    throw new UsernameNotFoundException(\n+                            \"No user present with username: \" + username);\n+                } else {\n+                    return new User(userInfo.getUsername(),\n+                            userInfo.getEncodedPassword(),\n+                            userInfo.getRoles().stream()\n+                                    .map(role -> new SimpleGrantedAuthority(\n+                                            \"ROLE_\" + role))\n+                                    .collect(Collectors.toList()));\n+                }\n+            }\n+        };\n+    }\n+\n+    @Bean\n+    @DependsOn(\"VaadinSecurityContextHolderStrategy\")\n+    public SwitchUserFilter switchUserFilter() {\n+        SwitchUserFilter filter = new SwitchUserFilter();\n+        filter.setUserDetailsService(userDetailsService());\n+        filter.setSwitchUserMatcher(antMatcher(HttpMethod.GET, \"/impersonate\"));\n+        filter.setSwitchFailureUrl(\"/switchUser\");\n+        filter.setExitUserMatcher(\n+                antMatcher(HttpMethod.GET, \"/impersonate/exit\"));\n+        filter.setTargetUrl(\"/\");\n+        return filter;\n+    }\n+\n+}\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java b/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java\nindex a32deec960e..1d15524e628 100644\n--- a/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java\n@@ -8,10 +8,11 @@\n import java.io.IOException;\n import java.util.stream.Collectors;\n \n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.DependsOn;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Profile;\n import org.springframework.http.HttpMethod;\n import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n@@ -21,6 +22,7 @@\n import org.springframework.security.core.userdetails.UserDetails;\n import org.springframework.security.core.userdetails.UsernameNotFoundException;\n import org.springframework.security.provisioning.InMemoryUserDetailsManager;\n+import org.springframework.security.web.SecurityFilterChain;\n import org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler;\n import org.springframework.security.web.authentication.switchuser.SwitchUserFilter;\n import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n@@ -32,24 +34,33 @@\n import com.vaadin.flow.spring.flowsecurity.data.UserInfo;\n import com.vaadin.flow.spring.flowsecurity.service.UserInfoService;\n import com.vaadin.flow.spring.flowsecurity.views.LoginView;\n+import com.vaadin.flow.spring.security.RequestUtil;\n import com.vaadin.flow.spring.security.UidlRedirectStrategy;\n-import com.vaadin.flow.spring.security.VaadinWebSecurity;\n+import com.vaadin.flow.spring.security.VaadinAwareSecurityContextHolderStrategyConfiguration;\n \n import static com.vaadin.flow.spring.flowsecurity.service.UserInfoService.ROLE_ADMIN;\n+import static com.vaadin.flow.spring.security.VaadinSecurityConfigurer.vaadin;\n import static org.springframework.security.web.util.matcher.AntPathRequestMatcher.antMatcher;\n \n @EnableWebSecurity\n @Configuration\n-public class SecurityConfig extends VaadinWebSecurity {\n+@Profile(\"default\")\n+@Import(VaadinAwareSecurityContextHolderStrategyConfiguration.class)\n+public class SecurityConfig {\n \n-    @Autowired\n-    private UserInfoService userInfoService;\n+    private final UserInfoService userInfoService;\n \n-    @Autowired\n-    private ServletContext servletContext;\n+    private final ServletContext servletContext;\n \n-    @Autowired\n-    private VaadinConfigurationProperties vaadinConfigurationProperties;\n+    private final VaadinConfigurationProperties vaadinConfigurationProperties;\n+\n+    public SecurityConfig(UserInfoService userInfoService,\n+            ServletContext servletContext,\n+            VaadinConfigurationProperties vaadinConfigurationProperties) {\n+        this.userInfoService = userInfoService;\n+        this.servletContext = servletContext;\n+        this.vaadinConfigurationProperties = vaadinConfigurationProperties;\n+    }\n \n     public String getRootUrl() {\n         return getRootUrl(true);\n@@ -74,39 +85,37 @@ public String getLogoutSuccessUrl() {\n         return getRootUrl();\n     }\n \n-    @Override\n-    public void configure(HttpSecurity http) throws Exception {\n-        // @formatter:off\n+    @Bean\n+    SecurityFilterChain vaadinSecurityFilterChain(HttpSecurity http)\n+            throws Exception {\n         http.authorizeHttpRequests(auth -> auth\n                 .requestMatchers(new AntPathRequestMatcher(\"/admin-only/**\"))\n-                    .hasAnyRole(ROLE_ADMIN)\n-                .requestMatchers(antMatchers(\"/public/**\", \"/error\"))\n-                    .permitAll());\n-\n-        http.authorizeHttpRequests(auth -> auth.requestMatchers(new AntPathRequestMatcher(\"/switchUser\")).hasAnyRole(\"ADMIN\", \"PREVIOUS_ADMINISTRATOR\"));\n-        http.authorizeHttpRequests(auth -> auth.requestMatchers(new AntPathRequestMatcher(\"/impersonate/exit\")).hasRole(\"PREVIOUS_ADMINISTRATOR\"));\n-\n-        // @formatter:on\n-        super.configure(http);\n-        if (getLogoutSuccessUrl().equals(\"/\")) {\n-            // Test the default url with empty context path\n-            setLoginView(http, LoginView.class);\n-        } else {\n-            setLoginView(http, LoginView.class, getLogoutSuccessUrl());\n-        }\n-\n-        http.logout(cfg -> cfg\n-                .logoutRequestMatcher(new AntPathRequestMatcher(\n-                        getRootUrl(false) + \"doLogout\", \"GET\"))\n-                .addLogoutHandler((request, response, authentication) -> {\n-                    if (!request.getRequestURI().endsWith(\"doLogout\")) {\n-                        UI ui = UI.getCurrent();\n-                        ui.accessSynchronously(() -> ui.getPage()\n-                                .setLocation(UrlUtil.getServletPathRelative(\n-                                        getLogoutSuccessUrl(), request)));\n-                    }\n-                }).logoutSuccessHandler(this::onLogoutOnNonVaadinUrl)\n+                .hasAnyRole(ROLE_ADMIN)\n+                .requestMatchers(\n+                        RequestUtil.antMatchers(\"/public/**\", \"/error\"))\n                 .permitAll());\n+\n+        http.authorizeHttpRequests(auth -> auth\n+                .requestMatchers(new AntPathRequestMatcher(\"/switchUser\"))\n+                .hasAnyRole(\"ADMIN\", \"PREVIOUS_ADMINISTRATOR\"));\n+        http.authorizeHttpRequests(auth -> auth\n+                .requestMatchers(new AntPathRequestMatcher(\"/impersonate/exit\"))\n+                .hasRole(\"PREVIOUS_ADMINISTRATOR\"));\n+        http.logout(cfg -> cfg.logoutRequestMatcher(new AntPathRequestMatcher(\n+                getRootUrl(false) + \"doLogout\", \"GET\")));\n+        http.with(vaadin(), cfg -> {\n+            cfg.loginView(LoginView.class)\n+                    .logoutSuccessHandler(this::onLogoutOnNonVaadinUrl)\n+                    .addLogoutHandler((request, response, authentication) -> {\n+                        if (!request.getRequestURI().endsWith(\"doLogout\")) {\n+                            UI ui = UI.getCurrent();\n+                            ui.accessSynchronously(() -> ui.getPage()\n+                                    .setLocation(UrlUtil.getServletPathRelative(\n+                                            getLogoutSuccessUrl(), request)));\n+                        }\n+                    });\n+        });\n+        return http.build();\n     }\n \n     public void onLogoutOnNonVaadinUrl(HttpServletRequest request,\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityUtils.java b/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityUtils.java\nindex f9b3e8622e0..014080d5ea1 100644\n--- a/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityUtils.java\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityUtils.java\n@@ -16,8 +16,6 @@ public class SecurityUtils {\n     @Autowired\n     private UserInfoService userInfoService;\n     @Autowired\n-    private SecurityConfig securityConfig;\n-    @Autowired\n     private AuthenticationContext authenticationContext;\n \n     public UserInfo getAuthenticatedUserInfo() {\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-security-webicons-urlmapping/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java b/flow-tests/vaadin-spring-tests/test-spring-security-webicons-urlmapping/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java\nnew file mode 100644\nindex 00000000000..5fc6888517a\n--- /dev/null\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-webicons-urlmapping/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java\n@@ -0,0 +1,20 @@\n+package com.vaadin.flow.spring.flowsecurity;\n+\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+\n+import com.vaadin.flow.spring.security.VaadinWebSecurity;\n+\n+@EnableWebSecurity\n+@Configuration\n+@Profile(\"legacy-vaadin-web-security\")\n+public class LegacySecurityConfig extends VaadinWebSecurity {\n+\n+    @Override\n+    protected void configure(HttpSecurity http) throws Exception {\n+        super.configure(http);\n+        setLoginView(http, LoginView.class);\n+    }\n+}\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-security-webicons-urlmapping/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java b/flow-tests/vaadin-spring-tests/test-spring-security-webicons-urlmapping/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java\nindex 0a7b9724531..0972c985b98 100644\n--- a/flow-tests/vaadin-spring-tests/test-spring-security-webicons-urlmapping/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-webicons-urlmapping/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java\n@@ -1,18 +1,27 @@\n package com.vaadin.flow.spring.flowsecurity;\n \n+import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Profile;\n import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.web.SecurityFilterChain;\n \n-import com.vaadin.flow.spring.security.VaadinWebSecurity;\n+import com.vaadin.flow.spring.security.VaadinAwareSecurityContextHolderStrategyConfiguration;\n+\n+import static com.vaadin.flow.spring.security.VaadinSecurityConfigurer.vaadin;\n \n @EnableWebSecurity\n @Configuration\n-public class SecurityConfig extends VaadinWebSecurity {\n+@Profile(\"default\")\n+@Import(VaadinAwareSecurityContextHolderStrategyConfiguration.class)\n+public class SecurityConfig {\n \n-    @Override\n-    protected void configure(HttpSecurity http) throws Exception {\n-        super.configure(http);\n-        setLoginView(http, LoginView.class);\n+    @Bean\n+    SecurityFilterChain vaadinSecurityFilterChain(HttpSecurity http)\n+            throws Exception {\n+        http.with(vaadin(), cfg -> cfg.loginView(LoginView.class));\n+        return http.build();\n     }\n }\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-security-webicons/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java b/flow-tests/vaadin-spring-tests/test-spring-security-webicons/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java\nnew file mode 100644\nindex 00000000000..5fc6888517a\n--- /dev/null\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-webicons/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java\n@@ -0,0 +1,20 @@\n+package com.vaadin.flow.spring.flowsecurity;\n+\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+\n+import com.vaadin.flow.spring.security.VaadinWebSecurity;\n+\n+@EnableWebSecurity\n+@Configuration\n+@Profile(\"legacy-vaadin-web-security\")\n+public class LegacySecurityConfig extends VaadinWebSecurity {\n+\n+    @Override\n+    protected void configure(HttpSecurity http) throws Exception {\n+        super.configure(http);\n+        setLoginView(http, LoginView.class);\n+    }\n+}\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-security-webicons/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java b/flow-tests/vaadin-spring-tests/test-spring-security-webicons/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java\nindex 0a7b9724531..484d9e074f6 100644\n--- a/flow-tests/vaadin-spring-tests/test-spring-security-webicons/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-webicons/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java\n@@ -1,18 +1,28 @@\n package com.vaadin.flow.spring.flowsecurity;\n \n+import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Profile;\n import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.web.SecurityFilterChain;\n \n-import com.vaadin.flow.spring.security.VaadinWebSecurity;\n+import com.vaadin.flow.spring.security.VaadinAwareSecurityContextHolderStrategyConfiguration;\n+import com.vaadin.flow.spring.security.VaadinSecurityConfigurer;\n+\n+import static com.vaadin.flow.spring.security.VaadinSecurityConfigurer.vaadin;\n \n @EnableWebSecurity\n @Configuration\n-public class SecurityConfig extends VaadinWebSecurity {\n+@Profile(\"default\")\n+@Import(VaadinAwareSecurityContextHolderStrategyConfiguration.class)\n+public class SecurityConfig {\n \n-    @Override\n-    protected void configure(HttpSecurity http) throws Exception {\n-        super.configure(http);\n-        setLoginView(http, LoginView.class);\n+    @Bean\n+    SecurityFilterChain vaadinSecurityFilterChain(HttpSecurity http)\n+            throws Exception {\n+        http.with(vaadin(), cfg -> cfg.loginView(LoginView.class));\n+        return http.build();\n     }\n }\n\ndiff --git a/vaadin-spring/src/test/java/com/vaadin/flow/spring/SpringClassesSerializableTest.java b/vaadin-spring/src/test/java/com/vaadin/flow/spring/SpringClassesSerializableTest.java\nindex 935e85a7100..cbf58ef7f71 100644\n--- a/vaadin-spring/src/test/java/com/vaadin/flow/spring/SpringClassesSerializableTest.java\n+++ b/vaadin-spring/src/test/java/com/vaadin/flow/spring/SpringClassesSerializableTest.java\n@@ -105,6 +105,8 @@ protected Stream<String> getExcludedPatterns() {\n                 \"com\\\\.vaadin\\\\.flow\\\\.spring\\\\.security\\\\.NavigationAccessControlConfigurer\",\n                 \"com\\\\.vaadin\\\\.flow\\\\.spring\\\\.security\\\\.VaadinAwareSecurityContextHolderStrategy\",\n                 \"com\\\\.vaadin\\\\.flow\\\\.spring\\\\.security\\\\.VaadinAwareSecurityContextHolderStrategyConfiguration\",\n+                \"com\\\\.vaadin\\\\.flow\\\\.spring\\\\.security\\\\.VaadinSecurityConfigurer\",\n+                \"com\\\\.vaadin\\\\.flow\\\\.spring\\\\.security\\\\.VaadinSecurityConfigurer(\\\\$.*)?\",\n                 \"com\\\\.vaadin\\\\.flow\\\\.spring\\\\.security\\\\.VaadinWebSecurity\",\n                 \"com\\\\.vaadin\\\\.flow\\\\.spring\\\\.security\\\\.VaadinWebSecurity\\\\$Http401UnauthorizedAccessDeniedHandler\",\n                 \"com\\\\.vaadin\\\\.flow\\\\.spring\\\\.security\\\\.VaadinDefaultRequestCache\",\n\ndiff --git a/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurerTest.java b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurerTest.java\nnew file mode 100644\nindex 00000000000..256e9784845\n--- /dev/null\n+++ b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurerTest.java\n@@ -0,0 +1,240 @@\n+package com.vaadin.flow.spring.security;\n+\n+import jakarta.servlet.FilterChain;\n+import jakarta.servlet.http.HttpServletRequest;\n+import jakarta.servlet.http.HttpServletResponse;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.security.authentication.AnonymousAuthenticationToken;\n+import org.springframework.security.authentication.TestingAuthenticationProvider;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.config.Customizer;\n+import org.springframework.security.config.ObjectPostProcessor;\n+import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\n+import org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer;\n+import org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.AuthorizedUrl;\n+import org.springframework.security.config.annotation.web.configurers.CsrfConfigurer;\n+import org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer;\n+import org.springframework.security.config.annotation.web.configurers.LogoutConfigurer;\n+import org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer;\n+import org.springframework.security.core.authority.SimpleGrantedAuthority;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;\n+import org.springframework.security.web.access.ExceptionTranslationFilter;\n+import org.springframework.security.web.access.intercept.AuthorizationFilter;\n+import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\n+import org.springframework.security.web.authentication.logout.LogoutFilter;\n+import org.springframework.security.web.authentication.logout.LogoutHandler;\n+import org.springframework.security.web.authentication.logout.LogoutSuccessHandler;\n+import org.springframework.security.web.csrf.CsrfFilter;\n+import org.springframework.security.web.savedrequest.RequestCacheAwareFilter;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.bean.override.mockito.MockitoBean;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.router.Route;\n+import com.vaadin.flow.server.auth.NavigationAccessControl;\n+import com.vaadin.flow.spring.SpringBootAutoConfiguration;\n+import com.vaadin.flow.spring.SpringSecurityAutoConfiguration;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatCode;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@WebAppConfiguration\n+@ContextConfiguration(classes = { SpringBootAutoConfiguration.class,\n+        SpringSecurityAutoConfiguration.class,\n+        ObjectPostProcessorConfiguration.class })\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)\n+@ExtendWith(SpringExtension.class)\n+@ExtendWith(MockitoExtension.class)\n+class VaadinSecurityConfigurerTest {\n+\n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Autowired\n+    private ObjectPostProcessor<Object> postProcessor;\n+\n+    @MockitoBean\n+    private ClientRegistrationRepository clientRegistrationRepository;\n+\n+    @Mock\n+    private HttpServletRequest request;\n+\n+    @Mock\n+    private HttpServletResponse response;\n+\n+    @Mock\n+    private FilterChain chain;\n+\n+    private HttpSecurity http;\n+\n+    private VaadinSecurityConfigurer configurer;\n+\n+    @BeforeEach\n+    void setUp() {\n+        var authManagerBuilder = new AuthenticationManagerBuilder(postProcessor)\n+                .authenticationProvider(new TestingAuthenticationProvider());\n+        http = new HttpSecurity(postProcessor, authManagerBuilder,\n+                Map.of(ApplicationContext.class, applicationContext));\n+        configurer = VaadinSecurityConfigurer.vaadin();\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        SecurityContextHolder.clearContext();\n+    }\n+\n+    @Test\n+    void withDefaults_chainHasDefaultFilters() throws Exception {\n+        var filters = http.with(configurer, Customizer.withDefaults()).build()\n+                .getFilters();\n+\n+        assertThat(filters).hasOnlyElementsOfTypes(CsrfFilter.class,\n+                LogoutFilter.class, AuthorizationFilter.class,\n+                RequestCacheAwareFilter.class,\n+                ExceptionTranslationFilter.class);\n+    }\n+\n+    @Test\n+    void loginViewClass_chainHasAuthenticationFilter() throws Exception {\n+        var filters = http.with(configurer, c -> {\n+            c.loginView(TestLoginView.class);\n+        }).build().getFilters();\n+\n+        assertThat(filters).hasAtLeastOneElementOfType(\n+                UsernamePasswordAuthenticationFilter.class);\n+    }\n+\n+    @Test\n+    void loginViewString_chainHasAuthenticationFilter() throws Exception {\n+        var filters = http.with(configurer, c -> {\n+            c.loginView(\"/login\");\n+        }).build().getFilters();\n+\n+        assertThat(filters).hasAtLeastOneElementOfType(\n+                UsernamePasswordAuthenticationFilter.class);\n+    }\n+\n+    @Test\n+    void oauth2LoginPage_chainHasAuthenticationFilter() throws Exception {\n+        var filters = http.with(configurer, c -> {\n+            c.oauth2LoginPage(\"/oauth2/login\");\n+        }).build().getFilters();\n+\n+        assertThat(filters).hasAtLeastOneElementOfType(\n+                OAuth2LoginAuthenticationFilter.class);\n+    }\n+\n+    @Test\n+    void logoutSuccessHandler_handlerIsConfigured(\n+            @Mock LogoutSuccessHandler handler) throws Exception {\n+        var auth = new UsernamePasswordAuthenticationToken(\"user\", \"password\");\n+        SecurityContextHolder.getContext().setAuthentication(auth);\n+        when(request.getMethod()).thenReturn(\"POST\");\n+        when(request.getPathInfo()).thenReturn(\"/logout\");\n+\n+        var filters = http.with(configurer, c -> {\n+            c.logoutSuccessHandler(handler);\n+        }).build().getFilters();\n+\n+        assertThat(filters).filteredOn(LogoutFilter.class::isInstance)\n+                .singleElement().satisfies(filter -> {\n+                    filter.doFilter(request, response, chain);\n+                    verify(handler).onLogoutSuccess(request, response, auth);\n+                });\n+    }\n+\n+    @Test\n+    void addLogoutHandler_handlerIsAdded(@Mock LogoutHandler handler)\n+            throws Exception {\n+        var auth = new UsernamePasswordAuthenticationToken(\"user\", \"password\");\n+        SecurityContextHolder.getContext().setAuthentication(auth);\n+        when(request.getMethod()).thenReturn(\"POST\");\n+        when(request.getPathInfo()).thenReturn(\"/logout\");\n+\n+        var filters = http.with(configurer, c -> {\n+            c.addLogoutHandler(handler);\n+        }).build().getFilters();\n+\n+        assertThat(filters).filteredOn(LogoutFilter.class::isInstance)\n+                .singleElement().satisfies(filter -> {\n+                    filter.doFilter(request, response, chain);\n+                    verify(handler).logout(request, response, auth);\n+                });\n+    }\n+\n+    @Test\n+    void anyRequest_authorizeRuleIsConfigured() throws Exception {\n+        var auth = new AnonymousAuthenticationToken(\"key\", \"user\",\n+                List.of(new SimpleGrantedAuthority(\"ROLE_ANONYMOUS\")));\n+        SecurityContextHolder.getContext().setAuthentication(auth);\n+        when(request.getPathInfo()).thenReturn(\"/any\");\n+\n+        var filters = http.with(configurer, c -> {\n+            c.anyRequest(AuthorizedUrl::anonymous);\n+        }).build().getFilters();\n+\n+        assertThat(filters).filteredOn(AuthorizationFilter.class::isInstance)\n+                .singleElement()\n+                .satisfies(filter -> assertThatCode(\n+                        () -> filter.doFilter(request, response, chain))\n+                        .doesNotThrowAnyException());\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void enableNavigationAccessControl_navigationAccessControlIsConfigured(\n+            boolean enableNavigationAccessControl) throws Exception {\n+        http.with(configurer, c -> {\n+            c.enableNavigationAccessControl(enableNavigationAccessControl);\n+        }).build();\n+\n+        var nac = http.getSharedObject(NavigationAccessControl.class);\n+        assertThat(nac.isEnabled()).isEqualTo(enableNavigationAccessControl);\n+    }\n+\n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    void disableDefaultConfigurers_configurersAreNotApplied() throws Exception {\n+        http.with(configurer, c -> {\n+            c.enableCsrfConfiguration(false);\n+            c.enableLogoutConfiguration(false);\n+            c.enableRequestCacheConfiguration(false);\n+            c.enableExceptionHandlingConfiguration(false);\n+            c.enableAuthorizedRequestsConfiguration(false);\n+        }).build();\n+\n+        assertThat(http.getConfigurer(CsrfConfigurer.class)).isNull();\n+        assertThat(http.getConfigurer(LogoutConfigurer.class)).isNull();\n+        assertThat(http.getConfigurer(RequestCacheConfigurer.class)).isNull();\n+        assertThat(http.getConfigurer(ExceptionHandlingConfigurer.class))\n+                .isNull();\n+        assertThat(http.getConfigurer(AuthorizeHttpRequestsConfigurer.class))\n+                .isNull();\n+    }\n+\n+    @Route\n+    static class TestLoginView extends Component {\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21360",
    "pr_id": 21360,
    "issue_id": 21334,
    "repo": "vaadin/flow",
    "problem_statement": "Upgrade webpack to version 5\n### Describe your motivation\n\nWebpack 4 is out of maintenance, we should upgrade webpack to version 5 in Flow 2 and 23 (Vaadin 14 and 23) to keep getting patches to it and to keep Vaadin dependencies up-to-date.\n\n### Additional context\n\nAs a starting point, we could use this branch https://github.com/vaadin/flow/tree/feature/webpack5.\nTarget Vaadin versions are the new minors - 14.13 and 23.6.\n",
    "issue_word_count": 75,
    "test_files_count": 4,
    "non_test_files_count": 13,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateTsConfig.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskNotifyWebpackConfExistenceWhileUsingVite.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdateWebpack.java",
      "flow-server/src/main/resources/com/vaadin/flow/server/frontend/dependencies/vite/package.json",
      "flow-server/src/main/resources/com/vaadin/flow/server/frontend/dependencies/webpack/package.json",
      "flow-server/src/main/resources/com/vaadin/flow/server/frontend/tsconfig.json",
      "flow-server/src/main/resources/plugins/application-theme-plugin/package.json",
      "flow-server/src/main/resources/plugins/application-theme-plugin/theme-copy.js",
      "flow-server/src/main/resources/plugins/theme-live-reload-plugin/theme-live-reload-plugin.js",
      "flow-server/src/main/resources/plugins/theme-loader/theme-loader.js",
      "flow-server/src/main/resources/webpack.config.js",
      "flow-server/src/main/resources/webpack.generated.js",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateTsConfigTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskNotifyWebpackConfExistenceWhileUsingViteTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdateWebpackTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateTsConfigTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskNotifyWebpackConfExistenceWhileUsingViteTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdateWebpackTest.java"
    ],
    "base_commit": "6dbb035094aa715adf7bec3f3c7a3aa1acb3e893",
    "head_commit": "91e179faa63af955f45f819d3a56fa878d312964",
    "repo_url": "https://github.com/vaadin/flow/pull/21360",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21360",
    "dockerfile": "",
    "pr_merged_at": "2025-04-29T09:24:21.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java\nindex 54bba0343ed..6cee88f4936 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java\n@@ -276,7 +276,8 @@ private void addBootstrapTasks(Options builder) {\n \n     private void addGenerateTsConfigTask(Options builder) {\n         TaskGenerateTsConfig taskGenerateTsConfig = new TaskGenerateTsConfig(\n-                builder.npmFolder, builder.getFeatureFlags());\n+                builder.npmFolder, builder.frontendDirectory,\n+                builder.getFeatureFlags());\n         commands.add(taskGenerateTsConfig);\n \n         TaskGenerateTsDefinitions taskGenerateTsDefinitions = new TaskGenerateTsDefinitions(\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateTsConfig.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateTsConfig.java\nindex 5da01da1204..7a50341f3e8 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateTsConfig.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateTsConfig.java\n@@ -8,8 +8,6 @@\n  */\n package com.vaadin.flow.server.frontend;\n \n-import static java.nio.charset.StandardCharsets.UTF_8;\n-\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n@@ -25,6 +23,8 @@\n import elemental.json.Json;\n import elemental.json.JsonObject;\n \n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n /**\n  * Generate <code>tsconfig.json</code> if it is missing in project folder.\n  * <p>\n@@ -55,6 +55,7 @@ public class TaskGenerateTsConfig extends AbstractTaskClientGenerator {\n     //@formatter:on\n \n     private final File projectRootDir;\n+    private final File frontendDirectory;\n     private final FeatureFlags featureFlags;\n \n     /**\n@@ -62,11 +63,15 @@ public class TaskGenerateTsConfig extends AbstractTaskClientGenerator {\n      *\n      * @param projectRootDir\n      *            project folder where the file will be generated.\n+     * @param projectRootDir\n+     *            project folder where the frontend sources are stored.\n      * @param featureFlags\n      *            available feature flags and their status\n      */\n-    TaskGenerateTsConfig(File projectRootDir, FeatureFlags featureFlags) {\n+    TaskGenerateTsConfig(File projectRootDir, File frontendDirectory,\n+            FeatureFlags featureFlags) {\n         this.projectRootDir = projectRootDir;\n+        this.frontendDirectory = frontendDirectory;\n         this.featureFlags = featureFlags;\n     }\n \n@@ -92,6 +97,10 @@ private String getFileContentForVersion(String vaadinVersion)\n                 config = config.replaceFirst(\"\\\"target\\\".*\",\n                         \"\\\"target\\\": \\\"es2019\\\",\");\n             }\n+            config = config.replaceAll(\"%FRONTEND%\",\n+                    projectRootDir.toPath()\n+                            .relativize(frontendDirectory.toPath()).toString()\n+                            .replaceAll(\"\\\\\\\\\", \"/\"));\n             return config;\n         }\n     }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskNotifyWebpackConfExistenceWhileUsingVite.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskNotifyWebpackConfExistenceWhileUsingVite.java\nindex 9bf19511824..3f2c4e276aa 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskNotifyWebpackConfExistenceWhileUsingVite.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskNotifyWebpackConfExistenceWhileUsingVite.java\n@@ -18,12 +18,12 @@\n import java.nio.file.Paths;\n import java.util.Objects;\n \n-import com.vaadin.flow.server.ExecutionFailedException;\n-\n import org.apache.commons.io.IOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.vaadin.flow.server.ExecutionFailedException;\n+\n import static com.vaadin.flow.server.frontend.FrontendUtils.WEBPACK_CONFIG;\n \n /**\n@@ -141,6 +141,7 @@ private long computeHashCode(String content) {\n \n     private String removeDefaults(String content) {\n         return content.replace(\"constmerge=require('webpack-merge');\", \"\")\n+                .replace(\"const{merge}=require('webpack-merge');\", \"\")\n                 .replace(\"constflowDefaults=require('./webpack.generated.js');\",\n                         \"\")\n                 .replace(\"module.exports=merge(flowDefaults,);\", \"\");\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdateWebpack.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdateWebpack.java\nindex e188c81e78d..f210fab8735 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdateWebpack.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdateWebpack.java\n@@ -115,6 +115,18 @@ private void createWebpackConfig() throws IOException {\n                                 + \"in the merge or remove the file to generate a new one.\",\n                         configFile);\n             }\n+\n+            // webpack-merge-plugin 5 changes the import format\n+            String contents = FileUtils.readFileToString(configFile,\n+                    StandardCharsets.UTF_8);\n+            if (contents.contains(\"const merge = require('webpack-merge');\")) {\n+                log().debug(\"Updating \" + configFile.getName()\n+                        + \" to new webpack-merge syntax\");\n+                contents = contents.replace(\n+                        \"const merge = require('webpack-merge');\",\n+                        \"const { merge } = require('webpack-merge');\");\n+                FileUtils.write(configFile, contents, StandardCharsets.UTF_8);\n+            }\n         } else {\n             URL resource = this.getClass().getClassLoader()\n                     .getResource(FrontendUtils.WEBPACK_CONFIG);\n\ndiff --git a/flow-server/src/main/resources/com/vaadin/flow/server/frontend/dependencies/vite/package.json b/flow-server/src/main/resources/com/vaadin/flow/server/frontend/dependencies/vite/package.json\nindex 835d8e69e8e..9978329000a 100644\n--- a/flow-server/src/main/resources/com/vaadin/flow/server/frontend/dependencies/vite/package.json\n+++ b/flow-server/src/main/resources/com/vaadin/flow/server/frontend/dependencies/vite/package.json\n@@ -13,7 +13,7 @@\n     \"@rollup/plugin-replace\": \"3.1.0\",\n     \"rollup-plugin-brotli\": \"3.1.0\",\n     \"vite-plugin-checker\": \"0.6.4\",\n-    \"mkdirp\": \"1.0.4\",\n+    \"mkdirp\": \"3.0.1\",\n     \"workbox-build\": \"6.5.4\",\n     \"@rollup/pluginutils\": \"4.1.0\",\n     \"transform-ast\": \"2.4.4\"\n\ndiff --git a/flow-server/src/main/resources/com/vaadin/flow/server/frontend/dependencies/webpack/package.json b/flow-server/src/main/resources/com/vaadin/flow/server/frontend/dependencies/webpack/package.json\nindex 04367aff3af..1801a01cb2d 100644\n--- a/flow-server/src/main/resources/com/vaadin/flow/server/frontend/dependencies/webpack/package.json\n+++ b/flow-server/src/main/resources/com/vaadin/flow/server/frontend/dependencies/webpack/package.json\n@@ -9,21 +9,21 @@\n   \"license\": \"Apache-2.0\",\n   \"dependencies\": {},\n   \"devDependencies\": {\n-    \"esbuild-loader\": \"2.19.0\",\n-    \"html-webpack-plugin\": \"4.5.1\",\n-    \"fork-ts-checker-webpack-plugin\": \"6.2.1\",\n-    \"webpack\": \"4.47.0\",\n-    \"webpack-cli\": \"4.10.0\",\n-    \"webpack-dev-server\": \"4.10.0\",\n-    \"compression-webpack-plugin\": \"4.0.1\",\n+    \"esbuild-loader\": \"4.3.0\",\n+    \"html-webpack-plugin\": \"5.6.3\",\n+    \"fork-ts-checker-webpack-plugin\": \"9.1.0\",\n+    \"webpack\": \"5.99.6\",\n+    \"webpack-cli\": \"6.0.1\",\n+    \"webpack-dev-server\": \"5.2.1\",\n+    \"compression-webpack-plugin\": \"11.1.0\",\n     \"extra-watch-webpack-plugin\": \"1.0.3\",\n-    \"webpack-merge\": \"4.2.2\",\n-    \"css-loader\": \"5.2.7\",\n-    \"extract-loader\": \"5.1.0\",\n-    \"lit-css-loader\": \"0.1.0\",\n-    \"file-loader\": \"6.2.0\",\n-    \"loader-utils\": \"2.0.4\",\n-    \"workbox-webpack-plugin\": \"6.5.0\",\n+    \"webpack-merge\": \"6.0.1\",\n+    \"css-loader\": \"7.1.2\",\n+    \"extract-loader-5\": \"1.0.1\",\n+    \"lit-css-loader\": \"3.0.1\",\n+    \"loader-utils\": \"3.3.1\",\n+    \"workbox-webpack-plugin\": \"7.3.0\",\n+    \"mkdirp\": \"3.0.1\",\n     \"chokidar\": \"^3.5.0\"\n   }\n }\n\ndiff --git a/flow-server/src/main/resources/com/vaadin/flow/server/frontend/tsconfig.json b/flow-server/src/main/resources/com/vaadin/flow/server/frontend/tsconfig.json\nindex 37f32e77e3e..8403be43496 100644\n--- a/flow-server/src/main/resources/com/vaadin/flow/server/frontend/tsconfig.json\n+++ b/flow-server/src/main/resources/com/vaadin/flow/server/frontend/tsconfig.json\n@@ -22,7 +22,7 @@\n     \"noUnusedParameters\": false,\n     \"experimentalDecorators\": true,\n     \"useDefineForClassFields\": false,\n-    \"baseUrl\": \"frontend\",\n+    \"baseUrl\": \"%FRONTEND%\",\n     \"paths\": {\n       \"@vaadin/flow-frontend\": [\"generated/jar-resources\"],\n       \"@vaadin/flow-frontend/*\": [\"generated/jar-resources/*\"],\n@@ -30,10 +30,10 @@\n     }\n   },\n   \"include\": [\n-    \"frontend/**/*\",\n+    \"%FRONTEND%/**/*\",\n     \"types.d.ts\"\n   ],\n   \"exclude\": [\n-    \"frontend/generated/jar-resources/**\"\n+    \"%FRONTEND%/generated/jar-resources/**\"\n   ]\n }\n\ndiff --git a/flow-server/src/main/resources/plugins/application-theme-plugin/package.json b/flow-server/src/main/resources/plugins/application-theme-plugin/package.json\nindex 0e900e7e564..1ba40f6c420 100644\n--- a/flow-server/src/main/resources/plugins/application-theme-plugin/package.json\n+++ b/flow-server/src/main/resources/plugins/application-theme-plugin/package.json\n@@ -14,7 +14,7 @@\n     \"url\": \"https://github.com/vaadin/flow/issues\"\n   },\n   \"dependencies\": {\n-    \"mkdirp\": \"0.5.6\",\n+    \"mkdirp\": \"3.0.1\",\n     \"glob\": \"7.2.3\"\n   },\n   \"files\": [\n\ndiff --git a/flow-server/src/main/resources/plugins/application-theme-plugin/theme-copy.js b/flow-server/src/main/resources/plugins/application-theme-plugin/theme-copy.js\nindex 0fb43ff7216..4fa060f6853 100644\n--- a/flow-server/src/main/resources/plugins/application-theme-plugin/theme-copy.js\n+++ b/flow-server/src/main/resources/plugins/application-theme-plugin/theme-copy.js\n@@ -13,7 +13,7 @@\n const fs = require('fs');\n const path = require('path');\n const glob = require('glob');\n-const mkdirp = require('mkdirp');\n+const { mkdirp } = require('mkdirp');\n \n const ignoredFileExtensions = ['.css', '.js', '.json'];\n \n\ndiff --git a/flow-server/src/main/resources/plugins/theme-live-reload-plugin/theme-live-reload-plugin.js b/flow-server/src/main/resources/plugins/theme-live-reload-plugin/theme-live-reload-plugin.js\nindex 423debfbb67..c19c0ec8e2e 100644\n--- a/flow-server/src/main/resources/plugins/theme-live-reload-plugin/theme-live-reload-plugin.js\n+++ b/flow-server/src/main/resources/plugins/theme-live-reload-plugin/theme-live-reload-plugin.js\n@@ -40,34 +40,38 @@ class ThemeLiveReloadPlugin {\n     // Adds a hook for theme files change event\n     compiler.hooks.watchRun.tapAsync('ThemeLiveReloadPlugin', (compilation, callback) => {\n       const logger = compiler.getInfrastructureLogger('ThemeLiveReloadPlugin');\n-      const changedFilesMap = compiler.watchFileSystem.watcher.mtimes;\n-      if (changedFilesMap !== {}) {\n+      const changedFilesPaths = compiler.modifiedFiles;\n+      const removedFilesPaths = compiler.removedFiles;\n+      if (changedFilesPaths && changedFilesPaths.length > 0) {\n         let themeName = undefined;\n         let themeGeneratedFileChanged = false;\n         let themeGeneratedFileDeleted = false;\n         let deletedComponentStyleFile = undefined;\n-        const changedFilesPaths = Object.keys(changedFilesMap);\n+\n         logger.debug('Detected changes in the following files ' + changedFilesPaths);\n         changedFilesPaths.forEach((changedFilePath) => {\n-          const file = `${changedFilePath}`;\n-          const themeGeneratedFileChangedNow = file.match(this.themeGeneratedFileRegexp);\n-          const timestamp = changedFilesMap[changedFilePath];\n-          // null or negative timestamp means file delete\n-          const fileRemoved = timestamp === null || timestamp < 0;\n+          const themeGeneratedFileChangedNow = changedFilePath.match(this.themeGeneratedFileRegexp);\n \n           if (themeGeneratedFileChangedNow) {\n             themeGeneratedFileChanged = true;\n-            if (fileRemoved) {\n-              themeGeneratedFileDeleted = true;\n-            }\n-          } else if (fileRemoved) {\n-            const matchResult = file.match(this.componentStyleFileRegexp);\n-            if (matchResult) {\n-              themeName = matchResult[2];\n-              deletedComponentStyleFile = file;\n-            }\n           }\n         });\n+\n+        if (removedFilesPaths && removedFilesPaths.length > 0) {\n+          removedFilesPaths.forEach(removedFilePath => {\n+            const themeGeneratedFileChangedNow = removedFilePath.match(this.themeGeneratedFileRegexp);\n+            if (themeGeneratedFileChangedNow) {\n+              themeGeneratedFileDeleted = true;\n+            } else {\n+              const matchResult = removedFilePath.match(this.componentStyleFileRegexp);\n+              if (matchResult) {\n+                themeName = matchResult[2];\n+                deletedComponentStyleFile = file;\n+              }\n+            }\n+          });\n+        }\n+\n         // This is considered as a workaround for\n         // https://github.com/vaadin/flow/issues/9948: delete component\n         // styles and theme generated file in one run to not have webpack\n\ndiff --git a/flow-server/src/main/resources/plugins/theme-loader/theme-loader.js b/flow-server/src/main/resources/plugins/theme-loader/theme-loader.js\nindex 0950a8b023c..1519dd768cf 100644\n--- a/flow-server/src/main/resources/plugins/theme-loader/theme-loader.js\n+++ b/flow-server/src/main/resources/plugins/theme-loader/theme-loader.js\n@@ -6,8 +6,6 @@\n  * See <https://vaadin.com/commercial-license-and-service-terms> for the full\n  * license.\n  */\n-const loaderUtils = require('loader-utils');\n-const fs = require('fs');\n const path = require('path');\n const { rewriteCssUrls } = require('./theme-loader-utils');\n \n@@ -20,7 +18,7 @@ const { rewriteCssUrls } = require('./theme-loader-utils');\n  * @param map source map for file\n  */\n module.exports = function (source, map) {\n-  const options = loaderUtils.getOptions(this);\n+  const options = this.getOptions();\n   const handledResourceFolder = path.dirname(this._module.resource);\n   const logger = this.getLogger('theme-loader');\n \n\ndiff --git a/flow-server/src/main/resources/webpack.config.js b/flow-server/src/main/resources/webpack.config.js\nindex 13314929f5f..bc7a0f5d98f 100644\n--- a/flow-server/src/main/resources/webpack.config.js\n+++ b/flow-server/src/main/resources/webpack.config.js\n@@ -6,7 +6,7 @@\n  * Defaults are provided in an autogenerated webpack.generated.js file and used by this file.\n  * The webpack.generated.js file is overwritten on each build and no customization can be done there.\n  */\n-const merge = require('webpack-merge');\n+const { merge } = require('webpack-merge');\n const flowDefaults = require('./webpack.generated.js');\n \n /**\n\ndiff --git a/flow-server/src/main/resources/webpack.generated.js b/flow-server/src/main/resources/webpack.generated.js\nindex 0691ba9a668..4650d97a5ef 100644\n--- a/flow-server/src/main/resources/webpack.generated.js\n+++ b/flow-server/src/main/resources/webpack.generated.js\n@@ -11,6 +11,7 @@ const { InjectManifest } = require('workbox-webpack-plugin');\n const { DefinePlugin } = require('webpack');\n const ExtraWatchWebpackPlugin = require('extra-watch-webpack-plugin');\n const ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin');\n+const TerserPlugin = require(\"terser-webpack-plugin\");\n \n const path = require('path');\n \n@@ -52,7 +53,12 @@ const buildDirectory = '[to-be-generated-by-flow]';\n // Flow plugins\n const BuildStatusPlugin = require(buildDirectory + '/plugins/build-status-plugin');\n const ThemeLiveReloadPlugin = require(buildDirectory + '/plugins/theme-live-reload-plugin');\n-const { ApplicationThemePlugin, processThemeResources, extractThemeName, findParentThemes } = require(buildDirectory +\n+const {\n+  ApplicationThemePlugin,\n+  processThemeResources,\n+  extractThemeName,\n+  findParentThemes\n+} = require(buildDirectory +\n   '/plugins/application-theme-plugin');\n const themeLoader = buildDirectory + '/plugins/theme-loader';\n \n@@ -78,7 +84,7 @@ const statsSetViaCLI = process.argv.find((v) => v.indexOf('--stats') >= 0);\n const devMode = process.argv.find((v) => v.indexOf('webpack-dev-server') >= 0);\n if (!devMode) {\n   // make sure that build folder exists before outputting anything\n-  const mkdirp = require('mkdirp');\n+  const { mkdirp } = require('mkdirp');\n   mkdirp(buildFolder);\n   mkdirp(confFolder);\n }\n@@ -93,12 +99,12 @@ if (watchDogPort) {\n   const runWatchDog = () => {\n     const client = new require('net').Socket();\n     client.setEncoding('utf8');\n-    client.on('error', function (err) {\n+    client.on('error', function(err) {\n       console.log('Watchdog connection error. Terminating webpack process...', err);\n       client.destroy();\n       process.exit(0);\n     });\n-    client.on('close', function () {\n+    client.on('close', function() {\n       client.destroy();\n       runWatchDog();\n     });\n@@ -150,7 +156,7 @@ const swManifestTransform = (manifestEntries) => {\n   return { manifest, warnings };\n };\n \n-const createServiceWorkerPlugin = function () {\n+const createServiceWorkerPlugin = function() {\n   return new InjectManifest({\n     swSrc: clientServiceWorkerEntryPoint,\n     swDest: serviceWorkerPath,\n@@ -216,7 +222,11 @@ module.exports = {\n \n   output: {\n     filename: `${VAADIN}/${build}/vaadin-[name]-[contenthash].cache.js`,\n-    path: outputFolder\n+    path: outputFolder,\n+    publicPath: ''\n+  },\n+  optimization: {\n+    minimizer: [new TerserPlugin({ extractComments: false })],\n   },\n \n   resolve: {\n@@ -235,13 +245,13 @@ module.exports = {\n     client: false, // disable wds client as we handle reloads and errors better\n     // webpack-dev-server serves ./, webpack-generated, and java webapp\n     static: [outputFolder, path.resolve(__dirname, 'src', 'main', 'webapp')],\n-    setupMiddlewares: function (middlewares, devServer) {\n-      devServer.app.get(`/assetsByChunkName`, function (req, res) {\n+    setupMiddlewares: function(middlewares, devServer) {\n+      devServer.app.get(`/assetsByChunkName`, function(req, res) {\n         res.json(stats.assetsByChunkName);\n       });\n-      devServer.app.get(`/stop`, function (req, res) {\n+      devServer.app.get(`/stop`, function(req, res) {\n         // eslint-disable-next-line no-console\n-        console.log(\"Stopped 'webpack-dev-server'\");\n+        console.log('Stopped \\'webpack-dev-server\\'');\n         process.exit(0);\n       });\n       return middlewares;\n@@ -263,22 +273,22 @@ module.exports = {\n         use: [\n           {\n             loader: 'lit-css-loader',\n-            options: {\n-              import: 'lit'\n-            }\n           },\n           {\n-            loader: 'extract-loader'\n+            loader: 'extract-loader-5'\n           },\n           {\n             loader: 'css-loader',\n             options: {\n-              url: (url, resourcePath) => {\n-                // Only translate files from node_modules\n-                const resolve = resourcePath.match(/(\\\\|\\/)node_modules\\1/);\n-                const themeResource = resourcePath.match(themePartRegex) && url.match(/^themes\\/[\\s\\S]*?\\//);\n-                return resolve || themeResource;\n+              url: {\n+                filter: (url, resourcePath) => {\n+                  // Only translate files from node_modules\n+                  const resolve = resourcePath.match(/(\\\\|\\/)node_modules\\1/);\n+                  const themeResource = resourcePath.match(themePartRegex) && url.match(/^themes\\/[\\s\\S]*?\\//);\n+                  return resolve || themeResource;\n+                }\n               },\n+              esModule: false,\n               // use theme-loader to also handle any imports in css files\n               importLoaders: 1\n             }\n@@ -294,25 +304,31 @@ module.exports = {\n         ]\n       },\n       {\n-        // File-loader only copies files used as imports in .js files or handled by css-loader\n         test: /\\.(png|gif|jpg|jpeg|svg|eot|woff|woff2|otf|ttf)$/,\n-        use: [\n-          {\n-            loader: 'file-loader',\n-            options: {\n-              outputPath: 'VAADIN/static/',\n-              name(resourcePath, resourceQuery) {\n-                if (resourcePath.match(/(\\\\|\\/)node_modules\\1/)) {\n-                  return /(\\\\|\\/)node_modules\\1(?!.*node_modules)([\\S]+)/.exec(resourcePath)[2].replace(/\\\\/g, '/');\n-                }\n-                if (resourcePath.match(/(\\\\|\\/)generated\\1jar-resources\\1/)) {\n-                  return /(\\\\|\\/)generated\\1jar-resources\\1(?!.*jar-resources)([\\S]+)/.exec(resourcePath)[2].replace(/\\\\/g, '/');\n-                }\n-                return '[path][name].[ext]';\n+        type: 'asset/resource',\n+        generator: {\n+          filename: (pathData) => {\n+            const filepath = pathData.filename;\n+            const prefix = 'VAADIN/static/';\n+\n+            if (filepath.includes('node_modules')) {\n+              const match = /([\\\\/])node_modules\\1(?!.*node_modules)(\\S+)/.exec(filepath);\n+              if (match && match[2]) {\n+                return `${prefix}${match[2].replace(/\\\\/g, '/')}`;\n               }\n             }\n+            if (filepath.includes('generated') && filepath.includes('jar-resources')) {\n+              // file path can be relative, so detect the path separator from\n+              // the well-known generated/jar-resources segment\n+              const match = /(?:^|[\\\\/])generated([\\\\/])jar-resources\\1(?!.*jar-resources)(\\S+)/.exec(filepath);\n+              if (match && match[2]) {\n+                return `${prefix}${match[2].replace(/\\\\/g, '/')}`;\n+              }\n+            }\n+\n+            return `${prefix}[path][name][ext]`;\n           }\n-        ]\n+        }\n       }\n     ].filter(Boolean)\n   },\n@@ -325,15 +341,15 @@ module.exports = {\n \n     ...(devMode && themeName\n       ? [\n-          new ExtraWatchWebpackPlugin({\n-            files: [],\n-            dirs: themeWatchFolders\n-          }),\n-          new ThemeLiveReloadPlugin(processThemeResourcesCallback)\n-        ]\n+        new ExtraWatchWebpackPlugin({\n+          files: [],\n+          dirs: themeWatchFolders\n+        }),\n+        new ThemeLiveReloadPlugin(processThemeResourcesCallback)\n+      ]\n       : []),\n \n-    function (compiler) {\n+    function(compiler) {\n       // V14 bootstrapping needs the bundle names\n       compiler.hooks.afterEmit.tapAsync('FlowStatsHelper', (compilation, done) => {\n         const st = compilation.getStats().toJson();\n@@ -370,13 +386,13 @@ module.exports = {\n \n     // Includes JS output bundles into \"index.html\"\n     useClientSideIndexFileForBootstrapping &&\n-      new HtmlWebpackPlugin({\n-        template: clientSideIndexHTML,\n-        filename: indexHtmlPath,\n-        inject: 'head',\n-        scriptLoading: 'defer',\n-        chunks: ['bundle']\n-      }),\n+    new HtmlWebpackPlugin({\n+      template: clientSideIndexHTML,\n+      filename: indexHtmlPath,\n+      inject: 'head',\n+      scriptLoading: 'defer',\n+      chunks: ['bundle']\n+    }),\n \n     // Service worker for offline\n     offlineEnabled && createServiceWorkerPlugin(),\n@@ -385,11 +401,11 @@ module.exports = {\n     !devMode && new CompressionPlugin(),\n \n     enableTypeScript &&\n-      new ForkTsCheckerWebpackPlugin({\n-        typescript: {\n-          configFile: tsconfigJsonFile\n-        }\n-      }),\n+    new ForkTsCheckerWebpackPlugin({\n+      typescript: {\n+        configFile: tsconfigJsonFile\n+      }\n+    }),\n \n     new BuildStatusPlugin()\n   ].filter(Boolean)\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java\nindex 69214596397..49d36796d69 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java\n@@ -164,11 +164,11 @@ public void getDefaultDevDependencies_includesAllDependencies_whenUsingWebpack()\n         expectedDependencies.add(\"extra-watch-webpack-plugin\");\n         expectedDependencies.add(\"webpack-merge\");\n         expectedDependencies.add(\"css-loader\");\n-        expectedDependencies.add(\"extract-loader\");\n+        expectedDependencies.add(\"extract-loader-5\");\n         expectedDependencies.add(\"lit-css-loader\");\n-        expectedDependencies.add(\"file-loader\");\n         expectedDependencies.add(\"loader-utils\");\n         expectedDependencies.add(\"workbox-webpack-plugin\");\n+        expectedDependencies.add(\"mkdirp\");\n         expectedDependencies.add(\"chokidar\");\n         expectedDependencies.add(\"strip-css-comments\");\n \n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateTsConfigTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateTsConfigTest.java\nindex 52dfcddb49f..07054e4ba58 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateTsConfigTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateTsConfigTest.java\n@@ -8,8 +8,6 @@\n  */\n package com.vaadin.flow.server.frontend;\n \n-import static java.nio.charset.StandardCharsets.UTF_8;\n-\n import java.io.File;\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n@@ -30,6 +28,8 @@\n import com.vaadin.experimental.FeatureFlags;\n import com.vaadin.flow.server.ExecutionFailedException;\n \n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n public class TaskGenerateTsConfigTest {\n     static private String LATEST_VERSION = \"23.3.4\";\n \n@@ -44,9 +44,10 @@ public class TaskGenerateTsConfigTest {\n     @Before\n     public void setUp() throws IOException {\n         npmFolder = temporaryFolder.newFolder();\n+        File frontendFolder = new File(npmFolder, \"frontend\");\n         featureFlags = Mockito.mock(FeatureFlags.class);\n         taskGenerateTsConfig = new TaskGenerateTsConfig(npmFolder,\n-                featureFlags);\n+                frontendFolder, featureFlags);\n     }\n \n     @Test\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskNotifyWebpackConfExistenceWhileUsingViteTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskNotifyWebpackConfExistenceWhileUsingViteTest.java\nindex a5d5472dd84..5efa2941a05 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskNotifyWebpackConfExistenceWhileUsingViteTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskNotifyWebpackConfExistenceWhileUsingViteTest.java\n@@ -14,8 +14,6 @@\n import java.nio.file.Path;\n import java.nio.file.Paths;\n \n-import com.vaadin.flow.server.ExecutionFailedException;\n-\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n@@ -25,8 +23,11 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.vaadin.flow.server.ExecutionFailedException;\n+\n import static com.vaadin.flow.server.Constants.TARGET;\n-import static com.vaadin.flow.server.frontend.FrontendUtils.*;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.DEFAULT_GENERATED_DIR;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.WEBPACK_CONFIG;\n import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.times;\n \n@@ -45,6 +46,17 @@ public void setup() {\n     @Test\n     public void should_logWarnMessageAboutWebpackConfigExistence_when_defaultWebpackConfigFileExist()\n             throws IOException, ExecutionFailedException {\n+        assertLogMessageIsShown(false);\n+    }\n+\n+    @Test\n+    public void should_logWarnMessageAboutWebpackConfigExistence_when_legacyWebpackConfigFileExist()\n+            throws IOException, ExecutionFailedException {\n+        assertLogMessageIsShown(true);\n+    }\n+\n+    private void assertLogMessageIsShown(boolean legacyWebpackConfig)\n+            throws IOException, ExecutionFailedException {\n         try (MockedStatic<Paths> paths = Mockito.mockStatic(Paths.class);\n                 MockedStatic<LoggerFactory> loggerFactory = Mockito\n                         .mockStatic(LoggerFactory.class)) {\n@@ -72,7 +84,10 @@ public void should_logWarnMessageAboutWebpackConfigExistence_when_defaultWebpack\n                     \" * Defaults are provided in an autogenerated webpack.generated.js file and used by this file.\\n\" +\n                     \" * The webpack.generated.js file is overwritten on each build and no customization can be done there.\\n\" +\n                     \" */\\n\" +\n-                    \"const merge = require('webpack-merge');\\n\" +\n+                    (legacyWebpackConfig ?\n+                    \"const merge = require('webpack-merge');\\n\" :\n+                    \"const { merge } = require('webpack-merge');\\n\"\n+                    ) +\n                     \"/**random comment1*/\" +\n                     \"/** random comment2 */\" +\n                     \"/*random comment3*/\" +\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdateWebpackTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdateWebpackTest.java\nindex 6b394db2655..ed9535d6325 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdateWebpackTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdateWebpackTest.java\n@@ -32,7 +32,6 @@\n \n import static com.vaadin.flow.server.Constants.TARGET;\n import static com.vaadin.flow.server.frontend.FrontendUtils.DEFAULT_GENERATED_DIR;\n-import static com.vaadin.flow.server.frontend.FrontendUtils.DEFAULT_PROJECT_FRONTEND_GENERATED_DIR;\n import static com.vaadin.flow.server.frontend.FrontendUtils.IMPORTS_NAME;\n import static com.vaadin.flow.server.frontend.FrontendUtils.SERVICE_WORKER_SRC;\n import static com.vaadin.flow.server.frontend.FrontendUtils.SERVICE_WORKER_SRC_JS;\n@@ -106,6 +105,26 @@ public void should_CreateWebpackConfigAndGeneratedConfig()\n                 \"target/classes\");\n     }\n \n+    @Test\n+    public void should_updateWebpackConfig() throws Exception {\n+        Files.write(webpackConfig.toPath(), List.of(\n+                \"const { merge } = require('webpack-merge');\",\n+                \"const flowDefaults = require('./webpack.generated.js');\",\n+                \"module.exports = merge(flowDefaults,\", \");\"));\n+        Assert.assertFalse(\"No generated config file should be present.\",\n+                webpackGenerated.exists());\n+        webpackUpdater.execute();\n+\n+        Assert.assertTrue(\"webpack.config.js was deleted.\",\n+                webpackConfig.exists());\n+        Assert.assertTrue(\"webpack.generated.js was not created.\",\n+                webpackGenerated.exists());\n+        assertWebpackConfigContent();\n+        assertWebpackGeneratedConfigContent(\n+                \"target/frontend/generated-flow-imports.js\", \"target/webapp\",\n+                \"target/classes\");\n+    }\n+\n     @Test\n     public void execute_webpackGeneratedConfigContainsCustomFrontendDir()\n             throws Exception {\n@@ -351,7 +370,7 @@ private void assertWebpackConfigContent() throws IOException {\n                 .collect(Collectors.toList());\n \n         Assert.assertTrue(\"No webpack-merge imported.\", webpackContents\n-                .contains(\"const merge = require('webpack-merge');\"));\n+                .contains(\"const { merge } = require('webpack-merge');\"));\n         Assert.assertTrue(\"No flowDefaults imported.\", webpackContents.contains(\n                 \"const flowDefaults = require('./webpack.generated.js');\"));\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21343",
    "pr_id": 21343,
    "issue_id": 21167,
    "repo": "vaadin/flow",
    "problem_statement": "Transfer progress listener\n### Describe your motivation\n\nVaadin `Upload` component has a list of upload progress listeners, but downloads have no ways to hook into download process, neither success nor failure hooks.\nThere should be a standard way for UI logic to react to progress, completion and premature termination of an upload or download. \n\n### Describe the solution you'd like\n\nThis is in the form of a `TransferProgressListener` that can be used directly from a handler or passed as an optional parameter to the handler factory methods. Methods related to observing progress in `Upload` that are based on `StreamVariable` callbacks are deprecated in favor of this new universal mechanism.\n\n```java\npublic interface TransferProgressListener {\n  void onComplete(TransferContext context);\n  void onTerminate(TransferContext context, IOException reason);\n  long onProgress(TransferContext context, long transferredBytes, long totalBytes);\n  long progressReportInterval(); // -1 to not report progress\n}\n```\n\nThe context object gives access to relevant common parts from the upload and download event types. In particular, there's access to the target element to deal with things like re-enabling a download button with `disableOnClick` enabled. We should probably define a shared base type for the events to make it easier to create a context object.\n\nNobody likes implementing interfaces with multiple methods since you cannot use lambdas. That's why we enhance the `UploadHandler` and `DownloadHandler` factory methods to return builders that allow chaining on progress listeners as lambdas.\n\n```java\n// (should consider a shorter name)\n// (same for DownloadHandler)\npublic interface UploadHandlerWithProgressSupport extends UploadHandler {\n  static UploadHandlerWithProgressSupport whenComplete(\n    Consumer<Boolean> completeOrTerminateHandler);\n  static UploadHandlerWithProgressSupport onProgress(\n    Consumer<Boolean> completeOrTerminateHandler,\n    BiConsumer<Long, Long> progressHandler, long progressIntervalInBytes);\n}\n```\n\nThe boolean value is true if the transfer was successfully completed and false if terminated. We should maybe probably separate functional interfaces for these even though the shapes would be similar to the Consumer types shown here.\n\nThe easiest way of triggering the listener methods is through a helper method that transfers bytes from an `InputStream` to an `OutputStream` while reporting progress.\n\n```java\nTransferProgressListener.transfer(inputStream, outputStream, uploadOrDownloadEvent, progressListener);\n```\n",
    "issue_word_count": 330,
    "test_files_count": 11,
    "non_test_files_count": 10,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/server/DownloadEvent.java",
      "flow-server/src/main/java/com/vaadin/flow/server/DownloadHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/TransferProgressListener.java",
      "flow-server/src/main/java/com/vaadin/flow/server/streams/AbstractDownloadHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/streams/ClassDownloadHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/streams/FileDownloadHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/streams/InputStreamDownloadHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/streams/ServletResourceDownloadHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/streams/TransferContext.java",
      "flow-server/src/main/java/com/vaadin/flow/server/streams/TransferProgressAwareHandler.java",
      "flow-server/src/test/java/com/vaadin/flow/server/streams/AbstractDownloadHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/streams/ClassDownloadHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/streams/FileDownloadHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/streams/InputStreamDownloadHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/streams/ServletResourceDownloadHandlerTest.java",
      "flow-server/src/test/resources/com/vaadin/flow/server/streams/downloads/generated_binary_file.bin",
      "flow-server/src/test/resources/downloads/generated_binary_file.bin",
      "flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java",
      "flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/DownloadHandlerView.java",
      "flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/TransferProgressListenerView.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/TransferProgressListenerIT.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/server/streams/AbstractDownloadHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/streams/ClassDownloadHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/streams/FileDownloadHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/streams/InputStreamDownloadHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/streams/ServletResourceDownloadHandlerTest.java",
      "flow-server/src/test/resources/com/vaadin/flow/server/streams/downloads/generated_binary_file.bin",
      "flow-server/src/test/resources/downloads/generated_binary_file.bin",
      "flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java",
      "flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/DownloadHandlerView.java",
      "flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/TransferProgressListenerView.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/TransferProgressListenerIT.java"
    ],
    "base_commit": "7a51e5b8e01673338ba6e9783a66546b9a5f2ddc",
    "head_commit": "e2c7644ff2a0bb553760a7c25fc0cacbde4fd9cd",
    "repo_url": "https://github.com/vaadin/flow/pull/21343",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21343",
    "dockerfile": "",
    "pr_merged_at": "2025-05-07T09:38:43.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/DownloadRequest.java b/flow-server/src/main/java/com/vaadin/flow/server/DownloadEvent.java\nsimilarity index 89%\nrename from flow-server/src/main/java/com/vaadin/flow/server/DownloadRequest.java\nrename to flow-server/src/main/java/com/vaadin/flow/server/DownloadEvent.java\nindex 72b0f160a8f..b2738cde2ef 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/DownloadRequest.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/DownloadEvent.java\n@@ -19,7 +19,6 @@\n import java.io.IOException;\n import java.io.OutputStream;\n import java.io.PrintWriter;\n-import java.io.Serializable;\n import java.io.UncheckedIOException;\n import java.util.Optional;\n \n@@ -34,9 +33,9 @@\n  *\n  * @since 24.8\n  */\n-public record DownloadRequest(VaadinRequest request, VaadinResponse response,\n+public record DownloadEvent(VaadinRequest request, VaadinResponse response,\n         VaadinSession session, String fileName, String contentType,\n-        Element owningElement) implements Serializable {\n+        Element owningElement) {\n \n     /**\n      * Returns a <code>OutputStream</code> for writing binary data in the\n@@ -45,14 +44,15 @@ public record DownloadRequest(VaadinRequest request, VaadinResponse response,\n      * Either this method or getWriter() may be called to write the response,\n      * not both.\n      *\n-     * @return a <code>OutputStream</code> for writing binary data or empty\n-     *         optional if an error happened\n+     * @return a <code>OutputStream</code> for writing binary data\n+     * @throws UncheckedIOException\n+     *             if an I/O error occurred while getting the output stream\n      */\n     public OutputStream getOutputStream() {\n         try {\n             return response.getOutputStream();\n         } catch (IOException e) {\n-            LoggerFactory.getLogger(DownloadRequest.class)\n+            LoggerFactory.getLogger(DownloadEvent.class)\n                     .error(\"Error getting output stream\", e);\n             throw new UncheckedIOException(\"Error getting output stream\", e);\n         }\n@@ -66,14 +66,15 @@ public OutputStream getOutputStream() {\n      * Either this method or getOutputStream() may be called to write the\n      * response, not both.\n      *\n-     * @return a <code>PrintWriter</code> for writing character text or empty\n-     *         optional if an error happened\n+     * @return a <code>PrintWriter</code> for writing character text\n+     * @throws UncheckedIOException\n+     *             if an I/O error occurred while getting the writer\n      */\n     public PrintWriter getWriter() {\n         try {\n             return response.getWriter();\n         } catch (IOException e) {\n-            LoggerFactory.getLogger(DownloadRequest.class)\n+            LoggerFactory.getLogger(DownloadEvent.class)\n                     .error(\"Error getting print writer\");\n             throw new UncheckedIOException(\"Error getting writer\", e);\n         }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/DownloadHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/DownloadHandler.java\nindex da3a4b92edd..51ed3e36f35 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/DownloadHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/DownloadHandler.java\n@@ -17,15 +17,21 @@\n package com.vaadin.flow.server;\n \n import java.io.File;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collection;\n import java.util.Optional;\n \n import com.vaadin.flow.dom.Element;\n+import com.vaadin.flow.function.SerializableConsumer;\n import com.vaadin.flow.function.SerializableFunction;\n+import com.vaadin.flow.server.streams.AbstractDownloadHandler;\n import com.vaadin.flow.server.streams.ClassDownloadHandler;\n import com.vaadin.flow.server.streams.DownloadResponse;\n import com.vaadin.flow.server.streams.FileDownloadHandler;\n import com.vaadin.flow.server.streams.InputStreamDownloadHandler;\n import com.vaadin.flow.server.streams.ServletResourceDownloadHandler;\n+import com.vaadin.flow.server.streams.TransferContext;\n \n /**\n  * Interface for handling download of data from the server to the client.\n@@ -43,19 +49,19 @@ public interface DownloadHandler extends ElementRequestHandler {\n      *            download event containing the necessary data for writing the\n      *            response\n      */\n-    void handleDownloadRequest(DownloadRequest event);\n+    void handleDownloadRequest(DownloadEvent event);\n \n     default void handleRequest(VaadinRequest request, VaadinResponse response,\n             VaadinSession session, Element owner) {\n         String fileName = getUrlPostfix() == null ? \"\" : getUrlPostfix();\n \n-        DownloadRequest event = new DownloadRequest(request, response, session,\n-                fileName,\n+        DownloadEvent downloadEvent = new DownloadEvent(request, response,\n+                session, fileName,\n                 Optional.ofNullable(response.getService().getMimeType(fileName))\n                         .orElse(\"application/octet-stream\"),\n                 owner);\n \n-        handleDownloadRequest(event);\n+        handleDownloadRequest(downloadEvent);\n     }\n \n     /**\n@@ -63,9 +69,9 @@ default void handleRequest(VaadinRequest request, VaadinResponse response,\n      *\n      * @param file\n      *            file to server for download\n-     * @return DownloadHandler instance for file\n+     * @return DownloadHandler implementation for download a file\n      */\n-    static DownloadHandler forFile(File file) {\n+    static FileDownloadHandler forFile(File file) {\n         return new FileDownloadHandler(file);\n     }\n \n@@ -76,12 +82,31 @@ static DownloadHandler forFile(File file) {\n      *            file to server for download\n      * @param name\n      *            download name to use\n-     * @return DownloadHandler instance for file\n+     * @return DownloadHandler implementation for download a file\n      */\n-    static DownloadHandler forFile(File file, String name) {\n+    static FileDownloadHandler forFile(File file, String name) {\n         return new FileDownloadHandler(file, name);\n     }\n \n+    /**\n+     * Get a download handler for serving given {@link File} with the given\n+     * download name and progress listener.\n+     *\n+     * @param file\n+     *            file to server for download\n+     * @param name\n+     *            download name to use\n+     * @param listener\n+     *            listener for transfer progress events\n+     * @return DownloadHandler implementation for download a file\n+     */\n+    static FileDownloadHandler forFile(File file, String name,\n+            TransferProgressListener listener) {\n+        FileDownloadHandler handler = new FileDownloadHandler(file, name);\n+        handler.addTransferProgressListener(listener);\n+        return handler;\n+    }\n+\n     /**\n      * Generate a download handler for class resource.\n      * <p>\n@@ -93,9 +118,9 @@ static DownloadHandler forFile(File file, String name) {\n      *            class for resource module\n      * @param resourceName\n      *            name of class resource\n-     * @return DownloadHandler instance for class resource\n+     * @return DownloadHandler implementation for download a class resource\n      */\n-    static DownloadHandler forClassResource(Class<?> clazz,\n+    static ClassDownloadHandler forClassResource(Class<?> clazz,\n             String resourceName) {\n         return new ClassDownloadHandler(clazz, resourceName);\n     }\n@@ -113,13 +138,40 @@ static DownloadHandler forClassResource(Class<?> clazz,\n      *            name of class resource\n      * @param fileName\n      *            download resourceName to use\n-     * @return DownloadHandler instance for class resource\n+     * @return DownloadHandler implementation for download a class resource\n      */\n-    static DownloadHandler forClassResource(Class<?> clazz, String resourceName,\n-            String fileName) {\n+    static ClassDownloadHandler forClassResource(Class<?> clazz,\n+            String resourceName, String fileName) {\n         return new ClassDownloadHandler(clazz, resourceName, fileName);\n     }\n \n+    /**\n+     * Generate a download handler for class resource with the given download\n+     * name and progress listener.\n+     * <p>\n+     * For instance for the file {@code resources/com/example/ui/MyData.json}\n+     * and class {@code com.example.ui.MyData} the definition would be\n+     * {@code forClassResource(MyData.class, \"MyData.json\", \"Data.json\")}\n+     *\n+     * @param clazz\n+     *            class for resource module\n+     * @param resourceName\n+     *            name of class resource\n+     * @param fileName\n+     *            download resourceName to use\n+     * @param listener\n+     *            listener for transfer progress events\n+     * @return DownloadHandler implementation for download a class resource\n+     */\n+    static ClassDownloadHandler forClassResource(Class<?> clazz,\n+            String resourceName, String fileName,\n+            TransferProgressListener listener) {\n+        ClassDownloadHandler handler = new ClassDownloadHandler(clazz,\n+                resourceName, fileName);\n+        handler.addTransferProgressListener(listener);\n+        return handler;\n+    }\n+\n     /**\n      * Generate a download handler for a servlet resource.\n      * <p>\n@@ -128,9 +180,9 @@ static DownloadHandler forClassResource(Class<?> clazz, String resourceName,\n      *\n      * @param path\n      *            the servlet path to the file\n-     * @return DownloadHandler instance for servlet resource\n+     * @return DownloadHandler implementation for downloading a servlet resource\n      */\n-    static DownloadHandler forServletResource(String path) {\n+    static ServletResourceDownloadHandler forServletResource(String path) {\n         return new ServletResourceDownloadHandler(path);\n     }\n \n@@ -147,21 +199,47 @@ static DownloadHandler forServletResource(String path) {\n      *            the servlet path to the file\n      * @param name\n      *            resource name\n-     * @return DownloadHandler instance for servlet resource\n+     * @return DownloadHandler implementation for downloading a servlet resource\n      */\n-    static DownloadHandler forServletResource(String path, String name) {\n+    static ServletResourceDownloadHandler forServletResource(String path,\n+            String name) {\n         return new ServletResourceDownloadHandler(path, name);\n     }\n \n+    /**\n+     * Generate a download handler for a servlet resource.\n+     * <p>\n+     * For instance for the file {@code webapp/WEB-INF/servlet.json} the path\n+     * would be {@code /WEB-INF/servlet.json}\n+     * <p>\n+     * Name is appended to the download url as the logical name of the target\n+     * file.\n+     *\n+     * @param path\n+     *            the servlet path to the file\n+     * @param name\n+     *            resource name\n+     * @param listener\n+     *            listener for transfer progress events\n+     * @return DownloadHandler implementation for downloading a servlet resource\n+     */\n+    static ServletResourceDownloadHandler forServletResource(String path,\n+            String name, TransferProgressListener listener) {\n+        ServletResourceDownloadHandler handler = new ServletResourceDownloadHandler(\n+                path, name);\n+        handler.addTransferProgressListener(listener);\n+        return handler;\n+    }\n+\n     /**\n      * Generate a function for downloading from a generated inputStream.\n      *\n      * @param handler\n      *            handler function that will be called on download\n-     * @return DownloadHandler instance for inputStream\n+     * @return DownloadHandler implementation for download from an input stream\n      */\n-    static DownloadHandler fromInputStream(\n-            SerializableFunction<DownloadRequest, DownloadResponse> handler) {\n+    static InputStreamDownloadHandler fromInputStream(\n+            SerializableFunction<DownloadEvent, DownloadResponse> handler) {\n         return new InputStreamDownloadHandler(handler);\n     }\n \n@@ -172,11 +250,31 @@ static DownloadHandler fromInputStream(\n      *            handler function that will be called on download\n      * @param name\n      *            resource name\n-     * @return DownloadHandler instance for inputStream\n+     * @return DownloadHandler implementation for download from an input stream\n      */\n-    static DownloadHandler fromInputStream(\n-            SerializableFunction<DownloadRequest, DownloadResponse> handler,\n+    static InputStreamDownloadHandler fromInputStream(\n+            SerializableFunction<DownloadEvent, DownloadResponse> handler,\n             String name) {\n         return new InputStreamDownloadHandler(handler, name);\n     }\n+\n+    /**\n+     * Generate a function for downloading from a generated inputStream.\n+     *\n+     * @param handler\n+     *            handler function that will be called on download\n+     * @param name\n+     *            resource name\n+     * @param listener\n+     *            listener for transfer progress events\n+     * @return DownloadHandler implementation for download from an input stream\n+     */\n+    static InputStreamDownloadHandler fromInputStream(\n+            SerializableFunction<DownloadEvent, DownloadResponse> handler,\n+            String name, TransferProgressListener listener) {\n+        InputStreamDownloadHandler downloadHandler = new InputStreamDownloadHandler(\n+                handler, name);\n+        downloadHandler.addTransferProgressListener(listener);\n+        return downloadHandler;\n+    }\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/TransferProgressListener.java b/flow-server/src/main/java/com/vaadin/flow/server/TransferProgressListener.java\nnew file mode 100644\nindex 00000000000..ef3c8edfacb\n--- /dev/null\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/TransferProgressListener.java\n@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.server;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.Serializable;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import com.vaadin.flow.server.streams.TransferContext;\n+\n+/**\n+ * Interface for listening to transfer progress events.\n+ * <p>\n+ * Implementations of this interface can be used to monitor the progress of file\n+ * transfers, such as downloads or uploads.\n+ * <p>\n+ * It uses {@link com.vaadin.flow.component.UI#access} to send UI changes from\n+ * progress listeners when the download or upload request is being handled.\n+ * Thus, it needs {@link com.vaadin.flow.component.page.Push} to be enabled in\n+ * the application.\n+ *\n+ * @since 24.8\n+ */\n+public interface TransferProgressListener extends Serializable {\n+    /**\n+     * Default data transfer progress report interval in bytes.\n+     * <p>\n+     * Chosen as a reasonable default for file sizes > 1 MB - 10-20% of the\n+     * total size.\n+     */\n+    long DEFAULT_PROGRESS_REPORT_INTERVAL_IN_BYTES = 65536;\n+\n+    /**\n+     * Default buffer size for reading data from the input stream.\n+     * <p>\n+     * Follows the default buffer size of the Java\n+     * {@link InputStream#transferTo(OutputStream)}.\n+     */\n+    int DEFAULT_BUFFER_SIZE = 16384;\n+\n+    /**\n+     * Called when the data transfer is started.\n+     * <p>\n+     * The call of this method is wrapped by the\n+     * {@link com.vaadin.flow.component.UI#access} to send UI changes defined\n+     * here when the download or upload request is being handled. Thus, no need\n+     * to call {@link com.vaadin.flow.component.UI#access} in the implementation\n+     * of this method. This needs {@link com.vaadin.flow.component.page.Push} to\n+     * be enabled in the application to properly send the UI changes to client.\n+     *\n+     * @param context\n+     *            the context of the transfer\n+     */\n+    default void onStart(TransferContext context) {\n+        // Default implementation does nothing\n+    }\n+\n+    /**\n+     * Called periodically during the transfer to report progress.\n+     * <p>\n+     * The call of this method is wrapped by the\n+     * {@link com.vaadin.flow.component.UI#access} to send UI changes defined\n+     * here when the download or upload request is being handled. Thus, no need\n+     * to call {@link com.vaadin.flow.component.UI#access} in the implementation\n+     * of this method. This needs {@link com.vaadin.flow.component.page.Push} to\n+     * be enabled in the application to properly send the UI changes to client.\n+     *\n+     * @param context\n+     *            the context of the transfer\n+     * @param transferredBytes\n+     *            the number of bytes transferred so far\n+     * @param totalBytes\n+     *            the total number of bytes to be transferred or <code>-1</code>\n+     *            if total number is unknown in advance, e.g. when reading from\n+     *            an input stream\n+     */\n+    default void onProgress(TransferContext context, long transferredBytes,\n+            long totalBytes) {\n+        // Default implementation does nothing\n+    }\n+\n+    /**\n+     * Called when the transfer is failed.\n+     * <p>\n+     * The call of this method is wrapped by the\n+     * {@link com.vaadin.flow.component.UI#access} to send UI changes defined\n+     * here when the download or upload request is being handled. Thus, no need\n+     * to call {@link com.vaadin.flow.component.UI#access} in the implementation\n+     * of this method. This needs {@link com.vaadin.flow.component.page.Push} to\n+     * be enabled in the application to properly send the UI changes to client.\n+     *\n+     * @param context\n+     *            the context of the transfer\n+     * @param reason\n+     *            the origin I/O exception that terminated the transfer\n+     */\n+    default void onError(TransferContext context, IOException reason) {\n+        // Default implementation does nothing\n+    }\n+\n+    /**\n+     * Called when the transfer is started.\n+     * <p>\n+     * The call of this method is wrapped by the\n+     * {@link com.vaadin.flow.component.UI#access} to send UI changes defined\n+     * here when the download or upload request is being handled. Thus, no need\n+     * to call {@link com.vaadin.flow.component.UI#access} in the implementation\n+     * of this method. This needs {@link com.vaadin.flow.component.page.Push} to\n+     * be enabled in the application to properly send the UI changes to client.\n+     *\n+     * @param context\n+     *            the context of the transfer\n+     */\n+    default void onComplete(TransferContext context, long transferredBytes) {\n+        // Default implementation does nothing\n+    }\n+\n+    /**\n+     * Returns the interval in bytes for reporting progress.\n+     * <p>\n+     * <code>-1</code> to not report progress.\n+     *\n+     * @return the interval in bytes\n+     */\n+    default long progressReportInterval() {\n+        return DEFAULT_PROGRESS_REPORT_INTERVAL_IN_BYTES;\n+    }\n+\n+    /**\n+     * Transfers data from the given input stream to the output stream while\n+     * notifying the progress to the given listeners.\n+     *\n+     * @param inputStream\n+     *            the input stream to read from\n+     * @param outputStream\n+     *            the output stream to write to\n+     * @param transferContext\n+     *            the transfer request containing metadata about the transfer\n+     * @param listeners\n+     *            collection of listeners to notify about progress\n+     * @return the number of bytes transferred\n+     * @throws IOException\n+     *             if an I/O error occurs during the transfer\n+     */\n+    static long transfer(InputStream inputStream, OutputStream outputStream,\n+            TransferContext transferContext,\n+            Collection<TransferProgressListener> listeners) throws IOException {\n+        Objects.requireNonNull(inputStream, \"InputStream cannot be null\");\n+        Objects.requireNonNull(outputStream, \"OutputStream cannot be null\");\n+        Objects.requireNonNull(transferContext,\n+                \"TransferRequest cannot be null\");\n+        Objects.requireNonNull(listeners,\n+                \"TransferProgressListener cannot be null\");\n+        listeners.forEach(listener -> listener.onStart(transferContext));\n+        long transferred = 0;\n+        Map<TransferProgressListener, Long> lastNotified = new HashMap<>(\n+                listeners.size());\n+        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n+        int read;\n+        while ((read = read(transferContext.session(), inputStream,\n+                buffer)) >= 0) {\n+            outputStream.write(buffer, 0, read);\n+            if (transferred < Long.MAX_VALUE) {\n+                try {\n+                    transferred = Math.addExact(transferred, read);\n+                } catch (ArithmeticException ignore) {\n+                    transferred = Long.MAX_VALUE;\n+                }\n+                for (TransferProgressListener listener : listeners) {\n+                    Long lastNotifiedLong = lastNotified.getOrDefault(listener,\n+                            0L);\n+                    long progressReportInterval = listener\n+                            .progressReportInterval();\n+                    if (progressReportInterval > -1 && transferred\n+                            - lastNotifiedLong >= progressReportInterval) {\n+                        long finalTransferred = transferred;\n+                        listener.onProgress(transferContext, finalTransferred,\n+                                transferContext.totalBytes());\n+                        lastNotified.put(listener, transferred);\n+                    }\n+                }\n+            }\n+        }\n+        long finalTransferred = transferred;\n+        listeners.forEach(listener -> listener.onComplete(transferContext,\n+                finalTransferred));\n+        return transferred;\n+    }\n+\n+    /**\n+     * Read buffer amount of bytes from the input stream.\n+     *\n+     * @param session\n+     *            vaadin session in use\n+     * @param source\n+     *            input stream source\n+     * @param buffer\n+     *            byte buffer to read into\n+     * @return amount of bytes read into buffer\n+     * @throws IOException\n+     *             If the first byte cannot be read for any reason other than\n+     *             the end of the file, if the input stream has been closed, or\n+     *             if some other I/O error occurs.\n+     */\n+    static int read(VaadinSession session, InputStream source, byte[] buffer)\n+            throws IOException {\n+        session.lock();\n+        try {\n+            return source.read(buffer, 0, DEFAULT_BUFFER_SIZE);\n+        } finally {\n+            session.unlock();\n+        }\n+    }\n+}\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/streams/AbstractDownloadHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/streams/AbstractDownloadHandler.java\nindex 498fc3dac17..6385eb2b1ec 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/streams/AbstractDownloadHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/streams/AbstractDownloadHandler.java\n@@ -16,42 +16,21 @@\n \n package com.vaadin.flow.server.streams;\n \n-import java.io.IOException;\n-import java.io.InputStream;\n-\n import com.vaadin.flow.server.DownloadHandler;\n-import com.vaadin.flow.server.VaadinSession;\n+import com.vaadin.flow.server.DownloadEvent;\n \n /**\n  * Abstract class for common methods used in pre-made download handlers.\n  *\n  * @since 24.8\n  */\n-public abstract class AbstractDownloadHandler implements DownloadHandler {\n+public abstract class AbstractDownloadHandler extends\n+        TransferProgressAwareHandler<DownloadEvent> implements DownloadHandler {\n \n-    /**\n-     * Read buffer amount of bytes from the input stream.\n-     *\n-     * @param session\n-     *            vaadin session in use\n-     * @param source\n-     *            input stream source\n-     * @param buffer\n-     *            byte buffer to read into\n-     * @return amount of bytes read into buffer\n-     * @throws IOException\n-     *             If the first byte cannot be read for any reason other than\n-     *             the end of the file, if the input stream has been closed, or\n-     *             if some other I/O error occurs.\n-     */\n-    protected int read(VaadinSession session, InputStream source, byte[] buffer)\n-            throws IOException {\n-        session.lock();\n-        try {\n-            return source.read(buffer);\n-        } finally {\n-            session.unlock();\n-        }\n+    @Override\n+    protected TransferContext getTransferContext(DownloadEvent transferEvent) {\n+        return new TransferContext(transferEvent.getRequest(),\n+                transferEvent.getResponse(), transferEvent.getSession(),\n+                transferEvent.getFileName(), transferEvent.owningElement(), -1);\n     }\n-\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/streams/ClassDownloadHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/streams/ClassDownloadHandler.java\nindex 46f6c4e5925..f6cfcf7266b 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/streams/ClassDownloadHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/streams/ClassDownloadHandler.java\n@@ -19,11 +19,13 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.io.UncheckedIOException;\n \n import org.slf4j.LoggerFactory;\n \n-import com.vaadin.flow.server.DownloadRequest;\n+import com.vaadin.flow.server.DownloadEvent;\n import com.vaadin.flow.server.HttpStatusCode;\n+import com.vaadin.flow.server.TransferProgressListener;\n \n /**\n  * Download handler for serving a class resource.\n@@ -78,28 +80,29 @@ public ClassDownloadHandler(Class<?> clazz, String resourceName,\n     }\n \n     @Override\n-    public void handleDownloadRequest(DownloadRequest event) {\n+    public void handleDownloadRequest(DownloadEvent downloadEvent) {\n         if (clazz.getResource(resourceName) == null) {\n-            event.getResponse().setStatus(HttpStatusCode.NOT_FOUND.getCode());\n+            LoggerFactory.getLogger(ClassDownloadHandler.class)\n+                    .warn(\"No resource found for '{}'\", resourceName);\n+            downloadEvent.getResponse()\n+                    .setStatus(HttpStatusCode.NOT_FOUND.getCode());\n             return;\n         }\n-        final int BUFFER_SIZE = 1024;\n-        try (OutputStream outputStream = event.getOutputStream();\n+        try (OutputStream outputStream = downloadEvent.getOutputStream();\n                 InputStream inputStream = clazz\n                         .getResourceAsStream(resourceName)) {\n-            byte[] buf = new byte[BUFFER_SIZE];\n-            int n;\n-            while ((n = read(event.getSession(), inputStream, buf)) >= 0) {\n-                outputStream.write(buf, 0, n);\n-            }\n+            TransferProgressListener.transfer(inputStream, outputStream,\n+                    getTransferContext(downloadEvent), getListeners());\n         } catch (IOException ioe) {\n             // Set status before output is closed (see #8740)\n-            event.getResponse()\n+            downloadEvent.getResponse()\n                     .setStatus(HttpStatusCode.INTERNAL_SERVER_ERROR.getCode());\n-            throw new RuntimeException(ioe);\n+            notifyError(downloadEvent, ioe);\n+            throw new UncheckedIOException(ioe);\n         }\n \n-        event.getResponse().setContentType(event.getContentType());\n+        downloadEvent.getResponse()\n+                .setContentType(downloadEvent.getContentType());\n     }\n \n     @Override\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/streams/FileDownloadHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/streams/FileDownloadHandler.java\nindex 5f88983b9a7..dc39cc085cb 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/streams/FileDownloadHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/streams/FileDownloadHandler.java\n@@ -20,11 +20,12 @@\n import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.OutputStream;\n+import java.io.UncheckedIOException;\n \n-import com.vaadin.flow.server.DownloadRequest;\n+import com.vaadin.flow.server.DownloadEvent;\n import com.vaadin.flow.server.HttpStatusCode;\n+import com.vaadin.flow.server.TransferProgressListener;\n import com.vaadin.flow.server.VaadinResponse;\n-import com.vaadin.flow.server.VaadinSession;\n \n /**\n  * Download handler for use with a given File that will be read and written as\n@@ -62,24 +63,19 @@ public FileDownloadHandler(File file, String name) {\n     }\n \n     @Override\n-    public void handleDownloadRequest(DownloadRequest event) {\n-        VaadinSession session = event.getSession();\n-        VaadinResponse response = event.getResponse();\n-\n-        final int BUFFER_SIZE = 1024;\n-        try (OutputStream outputStream = event.getOutputStream();\n+    public void handleDownloadRequest(DownloadEvent downloadEvent) {\n+        VaadinResponse response = downloadEvent.getResponse();\n+        try (OutputStream outputStream = downloadEvent.getOutputStream();\n                 FileInputStream inputStream = new FileInputStream(file)) {\n-            byte[] buf = new byte[BUFFER_SIZE];\n-            int n;\n-            while ((n = read(session, inputStream, buf)) >= 0) {\n-                outputStream.write(buf, 0, n);\n-            }\n+            TransferProgressListener.transfer(inputStream, outputStream,\n+                    getTransferContext(downloadEvent), getListeners());\n         } catch (IOException ioe) {\n             // Set status before output is closed (see #8740)\n             response.setStatus(HttpStatusCode.INTERNAL_SERVER_ERROR.getCode());\n-            throw new RuntimeException(ioe);\n+            notifyError(downloadEvent, ioe);\n+            throw new UncheckedIOException(ioe);\n         }\n-        response.setContentType(event.getContentType());\n+        response.setContentType(downloadEvent.getContentType());\n         response.setContentLength(Math.toIntExact(file.length()));\n     }\n \n@@ -90,4 +86,12 @@ public String getUrlPostfix() {\n         }\n         return file.getName();\n     }\n+\n+    @Override\n+    protected TransferContext getTransferContext(DownloadEvent transferEvent) {\n+        return new TransferContext(transferEvent.getRequest(),\n+                transferEvent.getResponse(), transferEvent.session(),\n+                transferEvent.fileName(), transferEvent.owningElement(),\n+                file.length());\n+    }\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/streams/InputStreamDownloadHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/streams/InputStreamDownloadHandler.java\nindex 6a77bfc2b7d..5ce255afa0d 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/streams/InputStreamDownloadHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/streams/InputStreamDownloadHandler.java\n@@ -19,10 +19,12 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.io.UncheckedIOException;\n \n import com.vaadin.flow.function.SerializableFunction;\n-import com.vaadin.flow.server.DownloadRequest;\n+import com.vaadin.flow.server.DownloadEvent;\n import com.vaadin.flow.server.HttpStatusCode;\n+import com.vaadin.flow.server.TransferProgressListener;\n import com.vaadin.flow.server.VaadinResponse;\n \n /**\n@@ -32,7 +34,7 @@\n  */\n public class InputStreamDownloadHandler extends AbstractDownloadHandler {\n \n-    private final SerializableFunction<DownloadRequest, DownloadResponse> handler;\n+    private final SerializableFunction<DownloadEvent, DownloadResponse> handler;\n     private final String name;\n \n     /**\n@@ -43,7 +45,7 @@ public class InputStreamDownloadHandler extends AbstractDownloadHandler {\n      *            serializable function for handling download\n      */\n     public InputStreamDownloadHandler(\n-            SerializableFunction<DownloadRequest, DownloadResponse> handler) {\n+            SerializableFunction<DownloadEvent, DownloadResponse> handler) {\n         this(handler, null);\n     }\n \n@@ -58,33 +60,30 @@ public InputStreamDownloadHandler(\n      *            generated before postfix\n      */\n     public InputStreamDownloadHandler(\n-            SerializableFunction<DownloadRequest, DownloadResponse> handler,\n+            SerializableFunction<DownloadEvent, DownloadResponse> handler,\n             String name) {\n         this.handler = handler;\n         this.name = name;\n     }\n \n     @Override\n-    public void handleDownloadRequest(DownloadRequest event) {\n-        DownloadResponse download = handler.apply(event);\n-        VaadinResponse response = event.getResponse();\n+    public void handleDownloadRequest(DownloadEvent downloadEvent) {\n+        DownloadResponse download = handler.apply(downloadEvent);\n+        VaadinResponse response = downloadEvent.getResponse();\n         if (download.hasError()) {\n             response.setStatus(download.getError());\n             return;\n         }\n \n-        final int BUFFER_SIZE = 1024;\n-        try (OutputStream outputStream = event.getOutputStream();\n+        try (OutputStream outputStream = downloadEvent.getOutputStream();\n                 InputStream inputStream = download.getInputStream()) {\n-            byte[] buf = new byte[BUFFER_SIZE];\n-            int n;\n-            while ((n = read(event.getSession(), inputStream, buf)) >= 0) {\n-                outputStream.write(buf, 0, n);\n-            }\n+            TransferProgressListener.transfer(inputStream, outputStream,\n+                    getTransferContext(downloadEvent), getListeners());\n         } catch (IOException ioe) {\n             // Set status before output is closed (see #8740)\n             response.setStatus(HttpStatusCode.INTERNAL_SERVER_ERROR.getCode());\n-            throw new RuntimeException(ioe);\n+            notifyError(downloadEvent, ioe);\n+            throw new UncheckedIOException(ioe);\n         }\n \n         response.setContentType(download.getContentType());\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/streams/ServletResourceDownloadHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/streams/ServletResourceDownloadHandler.java\nindex 12da97d88f1..2efb27ba73f 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/streams/ServletResourceDownloadHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/streams/ServletResourceDownloadHandler.java\n@@ -19,9 +19,11 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.io.UncheckedIOException;\n \n-import com.vaadin.flow.server.DownloadRequest;\n+import com.vaadin.flow.server.DownloadEvent;\n import com.vaadin.flow.server.HttpStatusCode;\n+import com.vaadin.flow.server.TransferProgressListener;\n import com.vaadin.flow.server.VaadinService;\n import com.vaadin.flow.server.VaadinServletService;\n \n@@ -63,26 +65,24 @@ public ServletResourceDownloadHandler(String path, String name) {\n     }\n \n     @Override\n-    public void handleDownloadRequest(DownloadRequest event) {\n-        VaadinService service = event.getRequest().getService();\n+    public void handleDownloadRequest(DownloadEvent downloadEvent) {\n+        VaadinService service = downloadEvent.getRequest().getService();\n         if (service instanceof VaadinServletService servletService) {\n-            final int BUFFER_SIZE = 1024;\n-            try (OutputStream outputStream = event.getOutputStream();\n+            try (OutputStream outputStream = downloadEvent.getOutputStream();\n                     InputStream inputStream = servletService.getServlet()\n                             .getServletContext().getResourceAsStream(path)) {\n-                byte[] buf = new byte[BUFFER_SIZE];\n-                int n;\n-                while ((n = read(event.getSession(), inputStream, buf)) >= 0) {\n-                    outputStream.write(buf, 0, n);\n-                }\n+                TransferProgressListener.transfer(inputStream, outputStream,\n+                        getTransferContext(downloadEvent), getListeners());\n             } catch (IOException ioe) {\n                 // Set status before output is closed (see #8740)\n-                event.getResponse().setStatus(\n+                downloadEvent.getResponse().setStatus(\n                         HttpStatusCode.INTERNAL_SERVER_ERROR.getCode());\n-                throw new RuntimeException(ioe);\n+                notifyError(downloadEvent, ioe);\n+                throw new UncheckedIOException(ioe);\n             }\n \n-            event.getResponse().setContentType(event.getContentType());\n+            downloadEvent.getResponse()\n+                    .setContentType(downloadEvent.getContentType());\n         }\n     }\n \n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/streams/TransferContext.java b/flow-server/src/main/java/com/vaadin/flow/server/streams/TransferContext.java\nnew file mode 100644\nindex 00000000000..1f83826c85c\n--- /dev/null\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/streams/TransferContext.java\n@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.streams;\n+\n+import java.io.Serializable;\n+import java.util.Optional;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.dom.Element;\n+import com.vaadin.flow.server.VaadinRequest;\n+import com.vaadin.flow.server.VaadinResponse;\n+import com.vaadin.flow.server.VaadinSession;\n+\n+/**\n+ * A context that is given to all data transfer progress listeners. Holds the\n+ * references that may be needed for UI updates in listeners, e.g. showing a\n+ * data transfer progress or a notification.\n+ *\n+ * @param request\n+ *            current Vaadin request instance\n+ * @param response\n+ *            current Vaadin response instance\n+ * @param session\n+ *            current Vaadin session instance\n+ * @param fileName\n+ *            name of the file being transferred\n+ * @param owningElement\n+ *            the element that initiated the transfer\n+ * @param totalBytes\n+ *            the total number of bytes to be transferred or <code>-1</code> if\n+ *            total number is unknown in advance, e.g. when reading from an\n+ *            input stream\n+ */\n+public record TransferContext(VaadinRequest request, VaadinResponse response,\n+        VaadinSession session, String fileName, Element owningElement,\n+        long totalBytes) {\n+\n+    /**\n+     * Get owner {@link Component} for this event.\n+     *\n+     * @return owning component or null in none defined\n+     */\n+    public Component getOwningComponent() {\n+        return owningElement.getComponent().orElse(null);\n+    }\n+\n+    /**\n+     * Get the UI instance for this request.\n+     *\n+     * @return Current UI\n+     */\n+    public UI getUI() {\n+        Optional<Component> component = owningElement.getComponent();\n+        return component.map(value -> value.getUI().orElseGet(UI::getCurrent))\n+                .orElseGet(UI::getCurrent);\n+    }\n+}\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/streams/TransferProgressAwareHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/streams/TransferProgressAwareHandler.java\nnew file mode 100644\nindex 00000000000..5d4871b61bf\n--- /dev/null\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/streams/TransferProgressAwareHandler.java\n@@ -0,0 +1,309 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.server.streams;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import com.vaadin.flow.dom.Element;\n+import com.vaadin.flow.function.SerializableBiConsumer;\n+import com.vaadin.flow.function.SerializableConsumer;\n+import com.vaadin.flow.function.SerializableRunnable;\n+import com.vaadin.flow.server.DownloadEvent;\n+import com.vaadin.flow.server.TransferProgressListener;\n+import com.vaadin.flow.shared.Registration;\n+\n+import elemental.json.JsonValue;\n+\n+/**\n+ * Abstract class for common methods used in pre-made transfer progress\n+ * handlers.\n+ *\n+ * @param <T>\n+ *            type of transfer event, e.g.\n+ *            {@link com.vaadin.flow.server.DownloadHandler}\n+ */\n+public abstract class TransferProgressAwareHandler<T> implements Serializable {\n+\n+    private List<TransferProgressListener> listeners;\n+\n+    /**\n+     * This method is used to get the transfer context from the transfer events\n+     * (e.g. {@link DownloadEvent}).\n+     *\n+     * @param transferEvent\n+     *            the transfer event\n+     * @return the transfer context\n+     */\n+    protected abstract TransferContext getTransferContext(T transferEvent);\n+\n+    /**\n+     * Adds a listener to be notified of data transfer progress events, such as:\n+     * <ul>\n+     * <li>{@link TransferProgressListener#onStart(TransferContext)}</li>\n+     * <li>{@link TransferProgressListener#onProgress(TransferContext, long, long)}</li>\n+     * <li>{@link TransferProgressListener#onError(TransferContext, IOException)}</li>\n+     * <li>{@link TransferProgressListener#onComplete(TransferContext, long)}</li>\n+     * </ul>\n+     * <p>\n+     * The calls of the given listener's methods are wrapped by the\n+     * {@link com.vaadin.flow.component.UI#access} to send UI changes defined\n+     * here when the download or upload request is being handled. Thus, no need\n+     * to call {@link com.vaadin.flow.component.UI#access} in the implementation\n+     * of the given listener. This needs\n+     * {@link com.vaadin.flow.component.page.Push} to be enabled in the\n+     * application to properly send the UI changes to client.\n+     *\n+     * @param listener\n+     *            progress listener to be added to this handler\n+     * @return a {@link Registration} object that can be used to remove the\n+     *         added listener\n+     */\n+    public Registration addTransferProgressListener(\n+            TransferProgressListener listener) {\n+        Objects.requireNonNull(listener, \"Listener cannot be null\");\n+        TransferProgressListener wrapper = new TransferProgressListenerWrapper(\n+                listener);\n+        return addTransferProgressListenerInternal(wrapper);\n+    }\n+\n+    /**\n+     * Adds a listener to be notified when the transfer starts.\n+     * <p>\n+     * The call of the given callback is wrapped by the\n+     * {@link com.vaadin.flow.component.UI#access} to send UI changes defined\n+     * here when the download or upload request is being handled. Thus, no need\n+     * to call {@link com.vaadin.flow.component.UI#access} in the implementation\n+     * of the given handler. This needs\n+     * {@link com.vaadin.flow.component.page.Push} to be enabled in the\n+     * application to properly send the UI changes to client.\n+     *\n+     * @param startHandler\n+     *            the handler to be called when the transfer starts\n+     * @return this instance for method chaining\n+     * @param <R>\n+     *            the type of this transfer progress aware handler\n+     */\n+    public <R extends TransferProgressAwareHandler<T>> R whenStart(\n+            SerializableRunnable startHandler) {\n+        Objects.requireNonNull(startHandler, \"Start handler cannot be null\");\n+        addTransferProgressListenerInternal(new TransferProgressListener() {\n+            @Override\n+            public void onStart(TransferContext context) {\n+                context.getUI().access(() -> {\n+                    startHandler.run();\n+                });\n+            }\n+        });\n+        return (R) this;\n+    }\n+\n+    /**\n+     * Adds a listener to be notified of transfer progress.\n+     * <p>\n+     * The call of the given callback is wrapped by the\n+     * {@link com.vaadin.flow.component.UI#access} to send UI changes defined\n+     * here when the download or upload request is being handled. Thus, no need\n+     * to call {@link com.vaadin.flow.component.UI#access} in the implementation\n+     * of the given handler. This needs\n+     * {@link com.vaadin.flow.component.page.Push} to be enabled in the\n+     * application to properly send the UI changes to client.\n+     *\n+     * @param progressHandler\n+     *            the handler to be called with the current and total bytes\n+     * @param progressIntervalInBytes\n+     *            the interval in bytes for reporting progress\n+     * @return this instance for method chaining\n+     * @param <R>\n+     *            the type of this transfer progress aware handler\n+     */\n+    public <R extends TransferProgressAwareHandler<T>> R onProgress(\n+            SerializableBiConsumer<Long, Long> progressHandler,\n+            long progressIntervalInBytes) {\n+        Objects.requireNonNull(progressHandler,\n+                \"Progress handler cannot be null\");\n+        addTransferProgressListenerInternal(new TransferProgressListener() {\n+            @Override\n+            public void onProgress(TransferContext context,\n+                    long transferredBytes, long totalBytes) {\n+                context.getUI().access(() -> {\n+                    progressHandler.accept(transferredBytes, totalBytes);\n+                });\n+            }\n+\n+            @Override\n+            public long progressReportInterval() {\n+                return progressIntervalInBytes;\n+            }\n+        });\n+        return (R) this;\n+    }\n+\n+    /**\n+     * Adds a listener to be notified of transfer progress with a default\n+     * interval.\n+     * <p>\n+     * The first long parameter is the current number of bytes transferred, and\n+     * the second is the total number of bytes.\n+     * <p>\n+     * The call of the given callback is wrapped by the\n+     * {@link com.vaadin.flow.component.UI#access} to send UI changes defined\n+     * here when the download or upload request is being handled. Thus, no need\n+     * to call {@link com.vaadin.flow.component.UI#access} in the implementation\n+     * of the given handler. This needs\n+     * {@link com.vaadin.flow.component.page.Push} to be enabled in the\n+     * application to properly send the UI changes to client.\n+     *\n+     * @param progressHandler\n+     *            the handler to be called with the current and total bytes\n+     * @return this instance for method chaining\n+     * @param <R>\n+     *            the type of this transfer progress aware handler\n+     */\n+    public <R extends TransferProgressAwareHandler<T>> R onProgress(\n+            SerializableBiConsumer<Long, Long> progressHandler) {\n+        return onProgress(progressHandler,\n+                TransferProgressListener.DEFAULT_PROGRESS_REPORT_INTERVAL_IN_BYTES);\n+    }\n+\n+    /**\n+     * Adds a listener to be notified when the transfer is completed\n+     * successfully or with an error. Gives a <code>Boolean</code> indicating\n+     * whether the transfer was completed successfully (true) or not (false).\n+     * <p>\n+     * The call of the given callback is wrapped by the\n+     * {@link com.vaadin.flow.component.UI#access} to send UI changes defined\n+     * here when the download or upload request is being handled. Thus, no need\n+     * to call {@link com.vaadin.flow.component.UI#access} in the implementation\n+     * of the given handler. This needs\n+     * {@link com.vaadin.flow.component.page.Push} to be enabled in the\n+     * application to properly send the UI changes to client.\n+     *\n+     * @param completeOrTerminateHandler\n+     *            the handler to be called when the transfer is completed\n+     * @return this instance for method chaining\n+     * @param <R>\n+     *            the type of this transfer progress aware handler\n+     */\n+    public <R extends TransferProgressAwareHandler<T>> R whenComplete(\n+            SerializableConsumer<Boolean> completeOrTerminateHandler) {\n+        Objects.requireNonNull(completeOrTerminateHandler,\n+                \"Complete or terminate handler cannot be null\");\n+        addTransferProgressListenerInternal(new TransferProgressListener() {\n+            @Override\n+            public void onError(TransferContext context, IOException reason) {\n+                context.getUI().access(() -> {\n+                    completeOrTerminateHandler.accept(false);\n+                });\n+            }\n+\n+            @Override\n+            public void onComplete(TransferContext context,\n+                    long transferredBytes) {\n+                context.getUI().access(() -> {\n+                    completeOrTerminateHandler.accept(true);\n+                });\n+            }\n+        });\n+        return (R) this;\n+    }\n+\n+    /**\n+     * Get the listeners that are registered to this handler.\n+     * <p>\n+     * For the custom data transfer implementation, one may need to notify\n+     * listeners manualy. This method can be used like\n+     * <code>getListeners().forEach(listener -> listener.onStart(getTransferContext(event)))</code>.\n+     * <p>\n+     * The listeners are kept in order of registration.\n+     *\n+     * @return a list of listeners that are registered to this handler\n+     */\n+    protected List<TransferProgressListener> getListeners() {\n+        return listeners == null ? Collections.emptyList()\n+                : Collections.unmodifiableList(listeners);\n+    }\n+\n+    void notifyError(T transferEvent, IOException ioe) {\n+        TransferContext transferContext = getTransferContext(transferEvent);\n+        getListeners()\n+                .forEach(listener -> listener.onError(transferContext, ioe));\n+    }\n+\n+    private Registration addTransferProgressListenerInternal(\n+            TransferProgressListener listener) {\n+        if (listeners == null) {\n+            // four listeners added with shortcuts is a good default size\n+            listeners = new ArrayList<>(4);\n+        }\n+        return Registration.addAndRemove(listeners, listener);\n+    }\n+\n+    /**\n+     * A wrapper for {@link TransferProgressListener} that ensures that UI\n+     * updates in transfer progress listeners are pushed to client\n+     * asynchronously.\n+     */\n+    private final class TransferProgressListenerWrapper\n+            implements TransferProgressListener {\n+        private TransferProgressListener delegate;\n+\n+        public TransferProgressListenerWrapper(\n+                TransferProgressListener delegate) {\n+            this.delegate = delegate;\n+        }\n+\n+        @Override\n+        public void onStart(TransferContext context) {\n+            context.getUI().access(() -> {\n+                delegate.onStart(context);\n+            });\n+        }\n+\n+        @Override\n+        public void onProgress(TransferContext context, long transferredBytes,\n+                long totalBytes) {\n+            context.getUI().access(() -> {\n+                delegate.onProgress(context, transferredBytes, totalBytes);\n+            });\n+        }\n+\n+        @Override\n+        public void onError(TransferContext context, IOException reason) {\n+            context.getUI().access(() -> {\n+                delegate.onError(context, reason);\n+            });\n+        }\n+\n+        @Override\n+        public void onComplete(TransferContext context, long transferredBytes) {\n+            context.getUI().access(() -> {\n+                delegate.onComplete(context, transferredBytes);\n+            });\n+        }\n+\n+        @Override\n+        public long progressReportInterval() {\n+            return delegate.progressReportInterval();\n+        }\n+    }\n+}\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/streams/AbstractDownloadHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/streams/AbstractDownloadHandlerTest.java\nnew file mode 100644\nindex 00000000000..fe8ab8b692b\n--- /dev/null\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/streams/AbstractDownloadHandlerTest.java\n@@ -0,0 +1,199 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.server.streams;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.dom.Element;\n+import com.vaadin.flow.function.SerializableBiConsumer;\n+import com.vaadin.flow.function.SerializableConsumer;\n+import com.vaadin.flow.function.SerializableRunnable;\n+import com.vaadin.flow.server.Command;\n+import com.vaadin.flow.server.DownloadEvent;\n+import com.vaadin.flow.server.TransferProgressListener;\n+import com.vaadin.flow.server.VaadinRequest;\n+import com.vaadin.flow.server.VaadinResponse;\n+import com.vaadin.flow.server.VaadinSession;\n+import com.vaadin.flow.shared.Registration;\n+\n+public class AbstractDownloadHandlerTest {\n+    private static final long TOTAL_BYTES = 100L;\n+    private static final long TRANSFERRED_BYTES = 42L;\n+    private static final IOException EXCEPTION = new IOException(\"Test error\");\n+\n+    private AbstractDownloadHandler handler;\n+    private TransferContext mockContext;\n+    private TransferProgressListener listener;\n+\n+    private VaadinRequest request;\n+    private VaadinResponse response;\n+    private VaadinSession session;\n+    private DownloadEvent downloadEvent;\n+    private ByteArrayOutputStream outputStream;\n+    private Element owner;\n+\n+    @Before\n+    public void setUp() throws IOException {\n+        request = Mockito.mock(VaadinRequest.class);\n+        response = Mockito.mock(VaadinResponse.class);\n+        session = Mockito.mock(VaadinSession.class);\n+\n+        UI ui = Mockito.mock(UI.class);\n+        // run the command immediately\n+        Mockito.doAnswer(invocation -> {\n+            Command command = invocation.getArgument(0);\n+            command.execute();\n+            return null;\n+        }).when(ui).access(Mockito.any(Command.class));\n+\n+        owner = Mockito.mock(Element.class);\n+        Component componentOwner = Mockito.mock(Component.class);\n+        Mockito.when(owner.getComponent())\n+                .thenReturn(Optional.of(componentOwner));\n+        Mockito.when(componentOwner.getUI()).thenReturn(Optional.of(ui));\n+\n+        downloadEvent = new DownloadEvent(request, response, session,\n+                \"download\", \"application/octet-stream\", owner);\n+\n+        handler = new AbstractDownloadHandler() {\n+            @Override\n+            public void handleDownloadRequest(DownloadEvent event) {\n+            }\n+        };\n+        mockContext = Mockito.mock(TransferContext.class);\n+        Mockito.when(mockContext.totalBytes()).thenReturn(TOTAL_BYTES);\n+        listener = Mockito.mock(TransferProgressListener.class);\n+\n+        Mockito.when(mockContext.owningElement()).thenReturn(owner);\n+        Mockito.when(mockContext.getUI()).thenReturn(ui);\n+\n+        outputStream = new ByteArrayOutputStream();\n+        Mockito.when(response.getOutputStream()).thenReturn(outputStream);\n+    }\n+\n+    @Test\n+    public void addTransferProgressListener_listenerAdded_listenerInvoked_listenerRemoved_listenerNotInvoked() {\n+        Registration registration = handler\n+                .addTransferProgressListener(listener);\n+        handler.getListeners().forEach(l -> l.onStart(mockContext));\n+        Mockito.verify(listener).onStart(mockContext);\n+\n+        Mockito.reset(listener);\n+        registration.remove();\n+        handler.getListeners().forEach(l -> l.onStart(mockContext));\n+        Mockito.verify(listener, Mockito.times(0)).onStart(mockContext);\n+    }\n+\n+    @Test\n+    public void whenStart_onStartCalled() {\n+        SerializableRunnable startHandler = Mockito\n+                .mock(SerializableRunnable.class);\n+        handler.whenStart(startHandler);\n+        handler.getListeners()\n+                .forEach(listener -> listener.onStart(mockContext));\n+        Mockito.verify(startHandler).run();\n+    }\n+\n+    @Test\n+    public void whenProgress_onProgressCalled() {\n+        SerializableBiConsumer<Long, Long> onProgressHandler = Mockito\n+                .mock(SerializableBiConsumer.class);\n+        handler.onProgress(onProgressHandler);\n+        handler.getListeners().forEach(listener -> listener\n+                .onProgress(mockContext, TRANSFERRED_BYTES, TOTAL_BYTES));\n+        Mockito.verify(onProgressHandler).accept(TRANSFERRED_BYTES,\n+                TOTAL_BYTES);\n+    }\n+\n+    @Test\n+    public void multipleHooks_multipleListenersAdded_InvokedInOrder() {\n+        List<String> executionOrder = new ArrayList<>();\n+        handler.whenStart(() -> executionOrder.add(\"first\"));\n+        handler.whenStart(() -> executionOrder.add(\"second\"));\n+        handler.getListeners()\n+                .forEach(listener -> listener.onStart(mockContext));\n+        List<String> expectedOrder = List.of(\"first\", \"second\");\n+        Assert.assertEquals(expectedOrder, executionOrder);\n+    }\n+\n+    @Test\n+    public void whenComplete() {\n+        SerializableConsumer<Boolean> completeHandler = Mockito\n+                .mock(SerializableConsumer.class);\n+        handler.whenComplete(completeHandler);\n+        handler.getListeners().forEach(listener -> {\n+            listener.onComplete(mockContext, TRANSFERRED_BYTES);\n+            listener.onError(mockContext, EXCEPTION);\n+        });\n+        Mockito.verify(completeHandler).accept(true);\n+        Mockito.verify(completeHandler).accept(false);\n+    }\n+\n+    @Test\n+    public void customHandlerWithShorthandCompleteListener_noErrorInTransfer_success_errorInTransfer_failure()\n+            throws IOException {\n+        AtomicBoolean successAtomic = new AtomicBoolean(false);\n+        AbstractDownloadHandler customHandler = new AbstractDownloadHandler() {\n+            @Override\n+            public void handleDownloadRequest(DownloadEvent event) {\n+                ByteArrayInputStream inputStream = new ByteArrayInputStream(\n+                        \"Hello\".getBytes(StandardCharsets.UTF_8));\n+                TransferContext context = getTransferContext(event);\n+                try {\n+                    TransferProgressListener.transfer(inputStream,\n+                            event.getOutputStream(), context, getListeners());\n+                } catch (IOException e) {\n+                    getListeners()\n+                            .forEach(listener -> listener.onError(context, e));\n+                }\n+            }\n+        }.whenComplete(success -> {\n+            successAtomic.set(success);\n+        });\n+\n+        customHandler.handleDownloadRequest(downloadEvent);\n+\n+        Assert.assertTrue(successAtomic.get());\n+        Assert.assertEquals(\"Hello\",\n+                outputStream.toString(StandardCharsets.UTF_8));\n+\n+        OutputStream outputStreamError = Mockito.mock(OutputStream.class);\n+        Mockito.doThrow(new IOException(\"Test error\")).when(outputStreamError)\n+                .write(Mockito.any(byte[].class), Mockito.anyInt(),\n+                        Mockito.anyInt());\n+        Mockito.when(downloadEvent.getOutputStream())\n+                .thenReturn(outputStreamError);\n+\n+        customHandler.handleDownloadRequest(downloadEvent);\n+        Assert.assertFalse(successAtomic.get());\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/streams/ClassDownloadHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/streams/ClassDownloadHandlerTest.java\nnew file mode 100644\nindex 00000000000..45a39c82f21\n--- /dev/null\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/streams/ClassDownloadHandlerTest.java\n@@ -0,0 +1,180 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.server.streams;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.dom.Element;\n+import com.vaadin.flow.server.Command;\n+import com.vaadin.flow.server.DownloadHandler;\n+import com.vaadin.flow.server.DownloadEvent;\n+import com.vaadin.flow.server.TransferProgressListener;\n+import com.vaadin.flow.server.VaadinRequest;\n+import com.vaadin.flow.server.VaadinResponse;\n+import com.vaadin.flow.server.VaadinSession;\n+\n+public class ClassDownloadHandlerTest {\n+    private static final String PATH_TO_FILE = \"downloads/generated_binary_file.bin\";\n+\n+    private VaadinRequest request;\n+    private VaadinResponse response;\n+    private VaadinSession session;\n+    private DownloadEvent downloadEvent;\n+    private OutputStream outputStream;\n+    private Element owner;\n+\n+    @Before\n+    public void setUp() throws IOException {\n+        request = Mockito.mock(VaadinRequest.class);\n+        response = Mockito.mock(VaadinResponse.class);\n+        session = Mockito.mock(VaadinSession.class);\n+\n+        UI ui = Mockito.mock(UI.class);\n+        // run the command immediately\n+        Mockito.doAnswer(invocation -> {\n+            Command command = invocation.getArgument(0);\n+            command.execute();\n+            return null;\n+        }).when(ui).access(Mockito.any(Command.class));\n+\n+        owner = Mockito.mock(Element.class);\n+        Component componentOwner = Mockito.mock(Component.class);\n+        Mockito.when(owner.getComponent())\n+                .thenReturn(Optional.of(componentOwner));\n+        Mockito.when(componentOwner.getUI()).thenReturn(Optional.of(ui));\n+\n+        downloadEvent = new DownloadEvent(request, response, session,\n+                \"download\", \"application/octet-stream\", owner);\n+        outputStream = new ByteArrayOutputStream();\n+        Mockito.when(response.getOutputStream()).thenReturn(outputStream);\n+    }\n+\n+    @Test\n+    public void transferProgressListener_addListener_listenersInvoked()\n+            throws URISyntaxException {\n+        List<String> invocations = new ArrayList<>();\n+        List<Long> transferredBytesRecords = new ArrayList<>();\n+        DownloadHandler handler = DownloadHandler.forClassResource(\n+                this.getClass(), PATH_TO_FILE, \"download\",\n+                new TransferProgressListener() {\n+                    @Override\n+                    public void onStart(TransferContext context) {\n+                        Assert.assertEquals(-1, context.totalBytes());\n+                        Assert.assertEquals(\"download\", context.fileName());\n+                        invocations.add(\"onStart\");\n+                    }\n+\n+                    @Override\n+                    public void onProgress(TransferContext context,\n+                            long transferredBytes, long totalBytes) {\n+                        transferredBytesRecords.add(transferredBytes);\n+                        Assert.assertEquals(-1, totalBytes);\n+                        Assert.assertEquals(\"download\", context.fileName());\n+                        invocations.add(\"onProgress\");\n+                    }\n+\n+                    @Override\n+                    public void onComplete(TransferContext context,\n+                            long transferredBytes) {\n+                        Assert.assertEquals(-1, context.totalBytes());\n+                        Assert.assertEquals(165000, transferredBytes);\n+                        Assert.assertEquals(\"download\", context.fileName());\n+                        invocations.add(\"onComplete\");\n+                    }\n+\n+                    @Override\n+                    public void onError(TransferContext context,\n+                            IOException reason) {\n+                        invocations.add(\"onError\");\n+                    }\n+                });\n+\n+        handler.handleDownloadRequest(downloadEvent);\n+\n+        // Two invocations with interval of 65536 bytes for total size 165000\n+        Assert.assertEquals(\n+                List.of(\"onStart\", \"onProgress\", \"onProgress\", \"onComplete\"),\n+                invocations);\n+        Assert.assertArrayEquals(new long[] { 65536, 131072 },\n+                transferredBytesRecords.stream().mapToLong(Long::longValue)\n+                        .toArray());\n+        Mockito.verify(response).setContentType(\"application/octet-stream\");\n+    }\n+\n+    @Test\n+    public void transferProgressListener_addListener_errorOccured_errorlistenerInvoked()\n+            throws URISyntaxException, IOException {\n+        DownloadEvent event = Mockito.mock(DownloadEvent.class);\n+        Mockito.when(event.getSession()).thenReturn(session);\n+        Mockito.when(event.getResponse()).thenReturn(response);\n+        Mockito.when(event.owningElement()).thenReturn(owner);\n+        OutputStream outputStreamMock = Mockito.mock(OutputStream.class);\n+        Mockito.doThrow(new IOException(\"I/O exception\")).when(outputStreamMock)\n+                .write(Mockito.any(byte[].class), Mockito.anyInt(),\n+                        Mockito.anyInt());\n+        Mockito.when(event.getOutputStream()).thenReturn(outputStreamMock);\n+        List<String> invocations = new ArrayList<>();\n+        DownloadHandler handler = DownloadHandler.forClassResource(\n+                this.getClass(), PATH_TO_FILE, \"download\",\n+                new TransferProgressListener() {\n+                    @Override\n+                    public void onStart(TransferContext context) {\n+                        invocations.add(\"onStart\");\n+                    }\n+\n+                    @Override\n+                    public void onProgress(TransferContext context,\n+                            long transferredBytes, long totalBytes) {\n+                        invocations.add(\"onProgress\");\n+                    }\n+\n+                    @Override\n+                    public void onComplete(TransferContext context,\n+                            long transferredBytes) {\n+                        invocations.add(\"onComplete\");\n+                    }\n+\n+                    @Override\n+                    public void onError(TransferContext context,\n+                            IOException reason) {\n+                        invocations.add(\"onError\");\n+                        Assert.assertEquals(\"I/O exception\",\n+                                reason.getMessage());\n+                    }\n+                });\n+\n+        try {\n+            handler.handleDownloadRequest(event);\n+            Assert.fail(\"Expected an IOException to be thrown\");\n+        } catch (Exception e) {\n+        }\n+        Assert.assertEquals(List.of(\"onStart\", \"onError\"), invocations);\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/streams/FileDownloadHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/streams/FileDownloadHandlerTest.java\nnew file mode 100644\nindex 00000000000..926cc49386c\n--- /dev/null\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/streams/FileDownloadHandlerTest.java\n@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.server.streams;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.dom.Element;\n+import com.vaadin.flow.server.Command;\n+import com.vaadin.flow.server.DownloadHandler;\n+import com.vaadin.flow.server.DownloadEvent;\n+import com.vaadin.flow.server.TransferProgressListener;\n+import com.vaadin.flow.server.VaadinRequest;\n+import com.vaadin.flow.server.VaadinResponse;\n+import com.vaadin.flow.server.VaadinSession;\n+\n+public class FileDownloadHandlerTest {\n+\n+    private static final String PATH_TO_FILE = \"downloads/generated_binary_file.bin\";\n+\n+    private VaadinRequest request;\n+    private VaadinResponse response;\n+    private VaadinSession session;\n+    private DownloadEvent downloadEvent;\n+    private OutputStream outputStream;\n+    private Element owner;\n+\n+    @Before\n+    public void setUp() throws IOException {\n+        request = Mockito.mock(VaadinRequest.class);\n+        response = Mockito.mock(VaadinResponse.class);\n+        session = Mockito.mock(VaadinSession.class);\n+\n+        UI ui = Mockito.mock(UI.class);\n+        // run the command immediately\n+        Mockito.doAnswer(invocation -> {\n+            Command command = invocation.getArgument(0);\n+            command.execute();\n+            return null;\n+        }).when(ui).access(Mockito.any(Command.class));\n+\n+        owner = Mockito.mock(Element.class);\n+        Component componentOwner = Mockito.mock(Component.class);\n+        Mockito.when(owner.getComponent())\n+                .thenReturn(Optional.of(componentOwner));\n+        Mockito.when(componentOwner.getUI()).thenReturn(Optional.of(ui));\n+\n+        downloadEvent = new DownloadEvent(request, response, session,\n+                \"download\", \"application/octet-stream\", owner);\n+        outputStream = new ByteArrayOutputStream();\n+        Mockito.when(response.getOutputStream()).thenReturn(outputStream);\n+    }\n+\n+    @Test\n+    public void transferProgressListener_addListener_listenersInvoked()\n+            throws URISyntaxException {\n+        List<String> invocations = new ArrayList<>();\n+        List<Long> transferredBytesRecords = new ArrayList<>();\n+        URL resource = getClass().getClassLoader().getResource(PATH_TO_FILE);\n+        DownloadHandler handler = DownloadHandler.forFile(\n+                new File(resource.toURI()), \"download\",\n+                new TransferProgressListener() {\n+                    @Override\n+                    public void onStart(TransferContext context) {\n+                        Assert.assertEquals(165000, context.totalBytes());\n+                        Assert.assertEquals(\"download\", context.fileName());\n+                        invocations.add(\"onStart\");\n+                    }\n+\n+                    @Override\n+                    public void onProgress(TransferContext context,\n+                            long transferredBytes, long totalBytes) {\n+                        transferredBytesRecords.add(transferredBytes);\n+                        Assert.assertEquals(165000, totalBytes);\n+                        Assert.assertEquals(\"download\", context.fileName());\n+                        invocations.add(\"onProgress\");\n+                    }\n+\n+                    @Override\n+                    public void onComplete(TransferContext context,\n+                            long transferredBytes) {\n+                        Assert.assertEquals(165000, context.totalBytes());\n+                        Assert.assertEquals(165000, transferredBytes);\n+                        Assert.assertEquals(\"download\", context.fileName());\n+                        invocations.add(\"onComplete\");\n+                    }\n+\n+                    @Override\n+                    public void onError(TransferContext context,\n+                            IOException reason) {\n+                        invocations.add(\"onError\");\n+                    }\n+                });\n+\n+        handler.handleDownloadRequest(downloadEvent);\n+\n+        // Two invocations with interval of 65536 bytes for total size 165000\n+        Assert.assertEquals(\n+                List.of(\"onStart\", \"onProgress\", \"onProgress\", \"onComplete\"),\n+                invocations);\n+        Assert.assertArrayEquals(new long[] { 65536, 131072 },\n+                transferredBytesRecords.stream().mapToLong(Long::longValue)\n+                        .toArray());\n+        Mockito.verify(response).setContentType(\"application/octet-stream\");\n+        Mockito.verify(response).setContentLength(165000);\n+    }\n+\n+    @Test\n+    public void transferProgressListener_addListener_errorOccured_errorlistenerInvoked()\n+            throws URISyntaxException {\n+        List<String> invocations = new ArrayList<>();\n+        DownloadHandler handler = DownloadHandler.forFile(\n+                new File(\"non-existing-file\"), \"download\",\n+                new TransferProgressListener() {\n+                    @Override\n+                    public void onStart(TransferContext context) {\n+                        invocations.add(\"onStart\");\n+                    }\n+\n+                    @Override\n+                    public void onProgress(TransferContext context,\n+                            long transferredBytes, long totalBytes) {\n+                        invocations.add(\"onProgress\");\n+                    }\n+\n+                    @Override\n+                    public void onComplete(TransferContext context,\n+                            long transferredBytes) {\n+                        invocations.add(\"onComplete\");\n+                    }\n+\n+                    @Override\n+                    public void onError(TransferContext context,\n+                            IOException reason) {\n+                        invocations.add(\"onError\");\n+                        Assert.assertEquals(\n+                                \"non-existing-file (No such file or directory)\",\n+                                reason.getMessage());\n+                    }\n+                });\n+\n+        try {\n+            handler.handleDownloadRequest(downloadEvent);\n+            Assert.fail(\"Expected an IOException to be thrown\");\n+        } catch (Exception e) {\n+        }\n+        Assert.assertEquals(List.of(\"onError\"), invocations);\n+        Mockito.verify(response).setStatus(500);\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/streams/InputStreamDownloadHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/streams/InputStreamDownloadHandlerTest.java\nnew file mode 100644\nindex 00000000000..9b63525b458\n--- /dev/null\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/streams/InputStreamDownloadHandlerTest.java\n@@ -0,0 +1,192 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.server.streams;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.dom.Element;\n+import com.vaadin.flow.server.Command;\n+import com.vaadin.flow.server.DownloadHandler;\n+import com.vaadin.flow.server.DownloadEvent;\n+import com.vaadin.flow.server.TransferProgressListener;\n+import com.vaadin.flow.server.VaadinRequest;\n+import com.vaadin.flow.server.VaadinResponse;\n+import com.vaadin.flow.server.VaadinSession;\n+\n+public class InputStreamDownloadHandlerTest {\n+    private VaadinRequest request;\n+    private VaadinResponse response;\n+    private VaadinSession session;\n+    private DownloadEvent downloadEvent;\n+    private OutputStream outputStream;\n+    private Element owner;\n+\n+    @Before\n+    public void setUp() throws IOException {\n+        request = Mockito.mock(VaadinRequest.class);\n+        response = Mockito.mock(VaadinResponse.class);\n+        session = Mockito.mock(VaadinSession.class);\n+\n+        UI ui = Mockito.mock(UI.class);\n+        // run the command immediately\n+        Mockito.doAnswer(invocation -> {\n+            Command command = invocation.getArgument(0);\n+            command.execute();\n+            return null;\n+        }).when(ui).access(Mockito.any(Command.class));\n+\n+        owner = Mockito.mock(Element.class);\n+        Component componentOwner = Mockito.mock(Component.class);\n+        Mockito.when(owner.getComponent())\n+                .thenReturn(Optional.of(componentOwner));\n+        Mockito.when(componentOwner.getUI()).thenReturn(Optional.of(ui));\n+\n+        downloadEvent = new DownloadEvent(request, response, session,\n+                \"download\", \"application/octet-stream\", owner);\n+        outputStream = new ByteArrayOutputStream();\n+        Mockito.when(response.getOutputStream()).thenReturn(outputStream);\n+    }\n+\n+    @Test\n+    public void transferProgressListener_addListener_listenersInvoked()\n+            throws URISyntaxException {\n+        List<String> invocations = new ArrayList<>();\n+        List<Long> transferredBytesRecords = new ArrayList<>();\n+        DownloadHandler handler = DownloadHandler.fromInputStream(request -> {\n+            byte[] data = getBytes();\n+            ByteArrayInputStream inputStream = new ByteArrayInputStream(data);\n+            return new DownloadResponse(inputStream, \"download\",\n+                    \"application/octet-stream\", data.length);\n+        }, \"download\", new TransferProgressListener() {\n+            @Override\n+            public void onStart(TransferContext context) {\n+                Assert.assertEquals(-1, context.totalBytes());\n+                Assert.assertEquals(\"download\", context.fileName());\n+                invocations.add(\"onStart\");\n+            }\n+\n+            @Override\n+            public void onProgress(TransferContext context,\n+                    long transferredBytes, long totalBytes) {\n+                transferredBytesRecords.add(transferredBytes);\n+                Assert.assertEquals(-1, totalBytes);\n+                Assert.assertEquals(\"download\", context.fileName());\n+                invocations.add(\"onProgress\");\n+            }\n+\n+            @Override\n+            public void onComplete(TransferContext context,\n+                    long transferredBytes) {\n+                Assert.assertEquals(-1, context.totalBytes());\n+                Assert.assertEquals(165000, transferredBytes);\n+                Assert.assertEquals(\"download\", context.fileName());\n+                invocations.add(\"onComplete\");\n+            }\n+\n+            @Override\n+            public void onError(TransferContext context, IOException reason) {\n+                invocations.add(\"onError\");\n+            }\n+        });\n+\n+        handler.handleDownloadRequest(downloadEvent);\n+\n+        // Two invocations with interval of 65536 bytes for total size 165000\n+        Assert.assertEquals(\n+                List.of(\"onStart\", \"onProgress\", \"onProgress\", \"onComplete\"),\n+                invocations);\n+        Assert.assertArrayEquals(new long[] { 65536, 131072 },\n+                transferredBytesRecords.stream().mapToLong(Long::longValue)\n+                        .toArray());\n+        Mockito.verify(response).setContentType(\"application/octet-stream\");\n+    }\n+\n+    @Test\n+    public void transferProgressListener_addListener_errorOccured_errorlistenerInvoked()\n+            throws URISyntaxException, IOException {\n+        DownloadEvent event = Mockito.mock(DownloadEvent.class);\n+        Mockito.when(event.getSession()).thenReturn(session);\n+        Mockito.when(event.getResponse()).thenReturn(response);\n+        Mockito.when(event.owningElement()).thenReturn(owner);\n+        OutputStream outputStreamMock = Mockito.mock(OutputStream.class);\n+        Mockito.doThrow(new IOException(\"I/O exception\")).when(outputStreamMock)\n+                .write(Mockito.any(byte[].class), Mockito.anyInt(),\n+                        Mockito.anyInt());\n+        Mockito.when(event.getOutputStream()).thenReturn(outputStreamMock);\n+        List<String> invocations = new ArrayList<>();\n+        DownloadHandler handler = DownloadHandler.fromInputStream(req -> {\n+            // Simulate a download of 165000 bytes\n+            byte[] data = getBytes();\n+            ByteArrayInputStream inputStream = new ByteArrayInputStream(data);\n+            return new DownloadResponse(inputStream, \"download\",\n+                    \"application/octet-stream\", data.length);\n+        }, \"download\", new TransferProgressListener() {\n+            @Override\n+            public void onStart(TransferContext context) {\n+                invocations.add(\"onStart\");\n+            }\n+\n+            @Override\n+            public void onProgress(TransferContext context,\n+                    long transferredBytes, long totalBytes) {\n+                invocations.add(\"onProgress\");\n+            }\n+\n+            @Override\n+            public void onComplete(TransferContext context,\n+                    long transferredBytes) {\n+                invocations.add(\"onComplete\");\n+            }\n+\n+            @Override\n+            public void onError(TransferContext context, IOException reason) {\n+                invocations.add(\"onError\");\n+                Assert.assertEquals(\"I/O exception\", reason.getMessage());\n+            }\n+        });\n+\n+        try {\n+            handler.handleDownloadRequest(event);\n+            Assert.fail(\"Expected an IOException to be thrown\");\n+        } catch (Exception e) {\n+        }\n+        Assert.assertEquals(List.of(\"onStart\", \"onError\"), invocations);\n+    }\n+\n+    private static byte[] getBytes() {\n+        // Simulate a download of 165000 bytes\n+        byte[] data = new byte[165000];\n+        for (int i = 0; i < data.length; i++) {\n+            data[i] = (byte) (i % 256);\n+        }\n+        return data;\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/streams/ServletResourceDownloadHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/streams/ServletResourceDownloadHandlerTest.java\nnew file mode 100644\nindex 00000000000..2076ab50f3d\n--- /dev/null\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/streams/ServletResourceDownloadHandlerTest.java\n@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.server.streams;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import jakarta.servlet.ServletContext;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.dom.Element;\n+import com.vaadin.flow.server.Command;\n+import com.vaadin.flow.server.DownloadHandler;\n+import com.vaadin.flow.server.DownloadEvent;\n+import com.vaadin.flow.server.TransferProgressListener;\n+import com.vaadin.flow.server.VaadinRequest;\n+import com.vaadin.flow.server.VaadinResponse;\n+import com.vaadin.flow.server.VaadinServlet;\n+import com.vaadin.flow.server.VaadinServletService;\n+import com.vaadin.flow.server.VaadinSession;\n+\n+public class ServletResourceDownloadHandlerTest {\n+    private static final String PATH_TO_FILE = \"downloads/generated_binary_file.bin\";\n+\n+    private VaadinRequest request;\n+    private VaadinResponse response;\n+    private VaadinSession session;\n+    private DownloadEvent downloadEvent;\n+    private OutputStream outputStream;\n+    private Element owner;\n+\n+    @Before\n+    public void setUp() throws IOException, URISyntaxException {\n+        request = Mockito.mock(VaadinRequest.class);\n+        response = Mockito.mock(VaadinResponse.class);\n+        session = Mockito.mock(VaadinSession.class);\n+        ServletContext servletContext = Mockito.mock(ServletContext.class);\n+        VaadinServlet vaadinServlet = Mockito.mock(VaadinServlet.class);\n+        VaadinServletService vaadinService = Mockito\n+                .mock(VaadinServletService.class);\n+        Mockito.when(request.getService()).thenReturn(vaadinService);\n+        Mockito.when(vaadinService.getServlet()).thenReturn(vaadinServlet);\n+        Mockito.when(vaadinServlet.getServletContext())\n+                .thenReturn(servletContext);\n+        InputStream stream = getClass().getClassLoader()\n+                .getResourceAsStream(PATH_TO_FILE);\n+        Mockito.when(servletContext.getResourceAsStream(Mockito.anyString()))\n+                .thenReturn(stream);\n+\n+        UI ui = Mockito.mock(UI.class);\n+        // run the command immediately\n+        Mockito.doAnswer(invocation -> {\n+            Command command = invocation.getArgument(0);\n+            command.execute();\n+            return null;\n+        }).when(ui).access(Mockito.any(Command.class));\n+\n+        owner = Mockito.mock(Element.class);\n+        Component componentOwner = Mockito.mock(Component.class);\n+        Mockito.when(owner.getComponent())\n+                .thenReturn(Optional.of(componentOwner));\n+        Mockito.when(componentOwner.getUI()).thenReturn(Optional.of(ui));\n+\n+        downloadEvent = new DownloadEvent(request, response, session,\n+                \"download\", \"application/octet-stream\", owner);\n+        outputStream = new ByteArrayOutputStream();\n+        Mockito.when(response.getOutputStream()).thenReturn(outputStream);\n+    }\n+\n+    @Test\n+    public void transferProgressListener_addListener_listenersInvoked()\n+            throws URISyntaxException {\n+        List<String> invocations = new ArrayList<>();\n+        List<Long> transferredBytesRecords = new ArrayList<>();\n+        DownloadHandler handler = DownloadHandler.forServletResource(\n+                PATH_TO_FILE, \"download\", new TransferProgressListener() {\n+                    @Override\n+                    public void onStart(TransferContext context) {\n+                        Assert.assertEquals(-1, context.totalBytes());\n+                        Assert.assertEquals(\"download\", context.fileName());\n+                        invocations.add(\"onStart\");\n+                    }\n+\n+                    @Override\n+                    public void onProgress(TransferContext context,\n+                            long transferredBytes, long totalBytes) {\n+                        transferredBytesRecords.add(transferredBytes);\n+                        Assert.assertEquals(-1, totalBytes);\n+                        Assert.assertEquals(\"download\", context.fileName());\n+                        invocations.add(\"onProgress\");\n+                    }\n+\n+                    @Override\n+                    public void onComplete(TransferContext context,\n+                            long transferredBytes) {\n+                        Assert.assertEquals(-1, context.totalBytes());\n+                        Assert.assertEquals(165000, transferredBytes);\n+                        Assert.assertEquals(\"download\", context.fileName());\n+                        invocations.add(\"onComplete\");\n+                    }\n+\n+                    @Override\n+                    public void onError(TransferContext context,\n+                            IOException reason) {\n+                        invocations.add(\"onError\");\n+                    }\n+                });\n+\n+        handler.handleDownloadRequest(downloadEvent);\n+\n+        // Two invocations with interval of 65536 bytes for total size 165000\n+        Assert.assertEquals(\n+                List.of(\"onStart\", \"onProgress\", \"onProgress\", \"onComplete\"),\n+                invocations);\n+        Assert.assertArrayEquals(new long[] { 65536, 131072 },\n+                transferredBytesRecords.stream().mapToLong(Long::longValue)\n+                        .toArray());\n+        Mockito.verify(response).setContentType(\"application/octet-stream\");\n+    }\n+\n+    @Test\n+    public void transferProgressListener_addListener_errorOccured_errorlistenerInvoked()\n+            throws URISyntaxException, IOException {\n+        DownloadEvent downloadEvent = Mockito.mock(DownloadEvent.class);\n+        Mockito.when(downloadEvent.getRequest()).thenReturn(request);\n+        Mockito.when(downloadEvent.getSession()).thenReturn(session);\n+        Mockito.when(downloadEvent.getResponse()).thenReturn(response);\n+        Mockito.when(downloadEvent.owningElement()).thenReturn(owner);\n+        OutputStream outputStreamMock = Mockito.mock(OutputStream.class);\n+        Mockito.doThrow(new IOException(\"I/O exception\")).when(outputStreamMock)\n+                .write(Mockito.any(byte[].class), Mockito.anyInt(),\n+                        Mockito.anyInt());\n+        Mockito.when(downloadEvent.getOutputStream())\n+                .thenReturn(outputStreamMock);\n+        List<String> invocations = new ArrayList<>();\n+        DownloadHandler handler = DownloadHandler.forServletResource(\n+                PATH_TO_FILE, \"download\", new TransferProgressListener() {\n+                    @Override\n+                    public void onStart(TransferContext context) {\n+                        invocations.add(\"onStart\");\n+                    }\n+\n+                    @Override\n+                    public void onProgress(TransferContext context,\n+                            long transferredBytes, long totalBytes) {\n+                        invocations.add(\"onProgress\");\n+                    }\n+\n+                    @Override\n+                    public void onComplete(TransferContext context,\n+                            long transferredBytes) {\n+                        invocations.add(\"onComplete\");\n+                    }\n+\n+                    @Override\n+                    public void onError(TransferContext context,\n+                            IOException reason) {\n+                        invocations.add(\"onError\");\n+                        Assert.assertEquals(\"I/O exception\",\n+                                reason.getMessage());\n+                    }\n+                });\n+\n+        try {\n+            handler.handleDownloadRequest(downloadEvent);\n+            Assert.fail(\"Expected an IOException to be thrown\");\n+        } catch (Exception e) {\n+        }\n+        Assert.assertEquals(List.of(\"onStart\", \"onError\"), invocations);\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/flow-server/src/test/resources/com/vaadin/flow/server/streams/downloads/generated_binary_file.bin b/flow-server/src/test/resources/com/vaadin/flow/server/streams/downloads/generated_binary_file.bin\nnew file mode 100644\nindex 00000000000..435618465eb\nBinary files /dev/null and b/flow-server/src/test/resources/com/vaadin/flow/server/streams/downloads/generated_binary_file.bin differ\n\ndiff --git a/flow-server/src/test/resources/downloads/generated_binary_file.bin b/flow-server/src/test/resources/downloads/generated_binary_file.bin\nnew file mode 100644\nindex 00000000000..435618465eb\nBinary files /dev/null and b/flow-server/src/test/resources/downloads/generated_binary_file.bin differ\n\ndiff --git a/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java b/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java\nindex 418b8ed3d77..46a3c216f81 100644\n--- a/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java\n+++ b/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java\n@@ -219,6 +219,8 @@ protected Stream<String> getExcludedPatterns() {\n                 \"com\\\\.vaadin\\\\.flow\\\\.component\\\\.internal\\\\.HtmlImportParser\",\n                 \"com\\\\.vaadin\\\\.flow\\\\.server\\\\.webcomponent\\\\.WebComponentGenerator\",\n                 \"com\\\\.vaadin\\\\.flow\\\\.server\\\\.communication\\\\.WebComponentBootstrapHandler(\\\\$.*)?\",\n+                \"com\\\\.vaadin\\\\.flow\\\\.server\\\\.streams\\\\.TransferContext\",\n+                \"com\\\\.vaadin\\\\.flow\\\\.server\\\\.DownloadEvent\",\n                 \"com\\\\.vaadin\\\\.flow\\\\.server\\\\.communication\\\\.StreamRequestHandler\\\\$PathData\",\n                 \"com\\\\.vaadin\\\\.flow\\\\.server\\\\.streams\\\\.UploadEvent\",\n \n\ndiff --git a/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/DownloadHandlerView.java b/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/DownloadHandlerView.java\nindex 130b584ebb9..577c9e7e9d6 100644\n--- a/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/DownloadHandlerView.java\n+++ b/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/DownloadHandlerView.java\n@@ -26,7 +26,7 @@\n import com.vaadin.flow.component.html.Div;\n import com.vaadin.flow.component.html.NativeButton;\n import com.vaadin.flow.router.Route;\n-import com.vaadin.flow.server.DownloadRequest;\n+import com.vaadin.flow.server.DownloadEvent;\n import com.vaadin.flow.server.DownloadHandler;\n import com.vaadin.flow.server.HttpStatusCode;\n import com.vaadin.flow.server.StreamRegistration;\n@@ -43,7 +43,7 @@ public DownloadHandlerView() {\n \n         DownloadHandler downloadHandler = new DownloadHandler() {\n             @Override\n-            public void handleDownloadRequest(DownloadRequest event) {\n+            public void handleDownloadRequest(DownloadEvent event) {\n                 event.getWriter().print(\"foo\");\n             }\n \n\ndiff --git a/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/TransferProgressListenerView.java b/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/TransferProgressListenerView.java\nnew file mode 100644\nindex 00000000000..7db511665e8\n--- /dev/null\n+++ b/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/TransferProgressListenerView.java\n@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.uitest.ui;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+\n+import com.vaadin.flow.component.html.Anchor;\n+import com.vaadin.flow.component.html.AnchorTarget;\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.component.html.Image;\n+import com.vaadin.flow.component.html.Paragraph;\n+import com.vaadin.flow.component.page.Push;\n+import com.vaadin.flow.router.Route;\n+import com.vaadin.flow.server.DownloadHandler;\n+import com.vaadin.flow.server.HttpStatusCode;\n+import com.vaadin.flow.server.VaadinSession;\n+import com.vaadin.flow.server.streams.DownloadResponse;\n+import com.vaadin.flow.uitest.servlet.ViewTestLayout;\n+\n+@Push\n+@Route(value = \"com.vaadin.flow.uitest.ui.TransferProgressListenerView\")\n+public class TransferProgressListenerView extends Div {\n+\n+    static final String WHEN_START_ID = \"for-servlet-resource-when-start\";\n+    static final String ON_PROGRESS_ID = \"for-servlet-resource-on-progress\";\n+    static final String ON_ERROR_ID = \"for-servlet-resource-on-error\";\n+    static final String ON_COMPLETE_ID = \"for-servlet-resource-when-complete\";\n+\n+    public TransferProgressListenerView() {\n+        Div forServletResourceWhenStart = new Div(\n+                \"File download whenStart status...\");\n+        forServletResourceWhenStart.setId(WHEN_START_ID);\n+        Div forServletResourceOnProgress = new Div(\n+                \"File download onProgress status...\");\n+        forServletResourceOnProgress.setId(ON_PROGRESS_ID);\n+        Div forServletResourceOnComplete = new Div(\n+                \"File download whenComplete status...\");\n+        forServletResourceOnComplete.setId(ON_COMPLETE_ID);\n+        DownloadHandler forFileDownloadHandler = DownloadHandler\n+                .forServletResource(\"/images/gift.png\").whenStart(() -> {\n+                    forServletResourceWhenStart\n+                            .setText(\"File download whenStart status: started\");\n+                }).onProgress((transfered, total) -> {\n+                    forServletResourceOnProgress\n+                            .setText(\"File download onProgress status: \"\n+                                    + transfered + \"/\" + total);\n+                }, 10).whenComplete(success -> {\n+                    if (success) {\n+                        forServletResourceOnComplete.setText(\n+                                \"File download whenComplete status: completed\");\n+                    }\n+                });\n+\n+        Image image = new Image(forFileDownloadHandler, \"no-image\");\n+\n+        add(image);\n+        add(new Div(\"Progress:\"));\n+        add(forServletResourceWhenStart, forServletResourceOnProgress,\n+                forServletResourceOnComplete);\n+\n+        Div forServletResourceOnError = new Div(\n+                \"File download onError status...\");\n+        forServletResourceOnError.setId(ON_ERROR_ID);\n+        DownloadHandler errorDownloadHandler = DownloadHandler\n+                .fromInputStream(req -> {\n+                    InputStream inputStream = new InputStream() {\n+\n+                        @Override\n+                        public int read(byte[] b, int off, int len)\n+                                throws IOException {\n+                            throw new IOException(\"Simulated error\");\n+                        }\n+\n+                        @Override\n+                        public int read() throws IOException {\n+                            return 0;\n+                        }\n+                    };\n+                    return new DownloadResponse(inputStream, \"error.txt\",\n+                            \"text/plain\", -1);\n+                }).whenComplete(success -> {\n+                    if (!success) {\n+                        forServletResourceOnError\n+                                .setText(\"File download onError status: error\");\n+                    }\n+                });\n+\n+        Image imageError = new Image(errorDownloadHandler, \"no-image\");\n+\n+        add(imageError);\n+        add(new Div(\"Error:\"));\n+        add(forServletResourceOnError);\n+    }\n+}\n\ndiff --git a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/TransferProgressListenerIT.java b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/TransferProgressListenerIT.java\nnew file mode 100644\nindex 00000000000..bf70d52576d\n--- /dev/null\n+++ b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/TransferProgressListenerIT.java\n@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.uitest.ui;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.commons.io.FilenameUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebElement;\n+\n+import static java.time.temporal.ChronoUnit.SECONDS;\n+\n+public class TransferProgressListenerIT extends AbstractStreamResourceIT {\n+\n+    @Test\n+    public void downloadServletResource_listenersAdded_listenersInvoked()\n+            throws IOException {\n+        open();\n+        waitForStatus(TransferProgressListenerView.WHEN_START_ID,\n+                \"File download whenStart status: started\");\n+        waitForStatus(TransferProgressListenerView.ON_PROGRESS_ID,\n+                \"File download onProgress status: 294/-1\");\n+        waitForStatus(TransferProgressListenerView.ON_COMPLETE_ID,\n+                \"File download whenComplete status: completed\");\n+        waitForStatus(TransferProgressListenerView.ON_ERROR_ID,\n+                \"File download onError status: error\");\n+    }\n+\n+    private void waitForStatus(String id, String status) {\n+        waitUntil(driver -> {\n+            WebElement element = findElement(By.id(id));\n+            return element.getText().equals(status);\n+        });\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21338",
    "pr_id": 21338,
    "issue_id": 21255,
    "repo": "vaadin/flow",
    "problem_statement": "Add DownloadHandler to components API\nAdd `DownloadHandler` callback to the constructors and separate methods of the components:\n- [x] `Anchor` \n- [x] `Image`, \n- [x] `IFrame`\n- [x] `Avatar`\n- [x] `Icon`\n",
    "issue_word_count": 27,
    "test_files_count": 3,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "flow-html-components/src/main/java/com/vaadin/flow/component/html/Anchor.java",
      "flow-html-components/src/main/java/com/vaadin/flow/component/html/HtmlObject.java",
      "flow-html-components/src/main/java/com/vaadin/flow/component/html/IFrame.java",
      "flow-html-components/src/main/java/com/vaadin/flow/component/html/Image.java",
      "flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java",
      "flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlComponentSmokeTest.java",
      "flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlObjectTest.java"
    ],
    "pr_changed_test_files": [
      "flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java",
      "flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlComponentSmokeTest.java",
      "flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlObjectTest.java"
    ],
    "base_commit": "ce57f79c798d44520740b4bec0ed254d70914699",
    "head_commit": "7d4e8c58394dcac8e49bdb9c1d744b96d283fd57",
    "repo_url": "https://github.com/vaadin/flow/pull/21338",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21338",
    "dockerfile": "",
    "pr_merged_at": "2025-04-28T07:07:16.000Z",
    "patch": "diff --git a/flow-html-components/src/main/java/com/vaadin/flow/component/html/Anchor.java b/flow-html-components/src/main/java/com/vaadin/flow/component/html/Anchor.java\nindex 1935bf50547..63f76ec606a 100644\n--- a/flow-html-components/src/main/java/com/vaadin/flow/component/html/Anchor.java\n+++ b/flow-html-components/src/main/java/com/vaadin/flow/component/html/Anchor.java\n@@ -27,6 +27,8 @@\n import com.vaadin.flow.component.PropertyDescriptors;\n import com.vaadin.flow.component.Tag;\n import com.vaadin.flow.server.AbstractStreamResource;\n+import com.vaadin.flow.server.DownloadHandler;\n+import com.vaadin.flow.server.ElementRequestHandler;\n import com.vaadin.flow.server.StreamResource;\n import com.vaadin.flow.server.StreamResourceRegistry;\n \n@@ -110,6 +112,24 @@ public Anchor(AbstractStreamResource href, String text) {\n         setText(text);\n     }\n \n+    /**\n+     * Creates an anchor component with the given text content and a callback\n+     * that handles data download from the server to the client when clicking an\n+     * anchor.\n+     *\n+     * @see #setHref(DownloadHandler)\n+     * @see #setText(String)\n+     *\n+     * @param downloadHandler\n+     *            the callback that handles data download, not null\n+     * @param text\n+     *            the text content to set\n+     */\n+    public Anchor(DownloadHandler downloadHandler, String text) {\n+        setHref(downloadHandler);\n+        setText(text);\n+    }\n+\n     /**\n      * Creates an anchor component with the given href and components as\n      * children of this component.\n@@ -174,6 +194,21 @@ public void setHref(AbstractStreamResource href) {\n         assignHrefAttribute();\n     }\n \n+    /**\n+     * Sets the URL that this anchor links to and that is bound to a given\n+     * {@link DownloadHandler} callback on the server for handling data download\n+     * from the server to the client when clicking an anchor.\n+     *\n+     * @param downloadHandler\n+     *            the callback that handles data download, not null\n+     */\n+    public void setHref(DownloadHandler downloadHandler) {\n+        this.href = new StreamResourceRegistry.ElementStreamResource(\n+                downloadHandler, this.getElement());\n+        setRouterIgnore(true);\n+        assignHrefAttribute();\n+    }\n+\n     /**\n      * The routing mechanism in Vaadin by default intercepts all anchor elements\n      * with relative URL. This method can be used make the router ignore this\n\ndiff --git a/flow-html-components/src/main/java/com/vaadin/flow/component/html/HtmlObject.java b/flow-html-components/src/main/java/com/vaadin/flow/component/html/HtmlObject.java\nindex 5b280bbb61b..469fa968a4f 100644\n--- a/flow-html-components/src/main/java/com/vaadin/flow/component/html/HtmlObject.java\n+++ b/flow-html-components/src/main/java/com/vaadin/flow/component/html/HtmlObject.java\n@@ -26,7 +26,9 @@\n import com.vaadin.flow.component.PropertyDescriptors;\n import com.vaadin.flow.component.Tag;\n import com.vaadin.flow.server.AbstractStreamResource;\n+import com.vaadin.flow.server.DownloadHandler;\n import com.vaadin.flow.server.StreamResource;\n+import com.vaadin.flow.server.StreamResourceRegistry;\n \n /**\n  * Component representing a <code>&lt;object&gt;</code> element.\n@@ -131,6 +133,47 @@ public HtmlObject(AbstractStreamResource data, String type,\n         add(params);\n     }\n \n+    /**\n+     * Creates a new <code>&lt;object&gt;</code> component with given\n+     * {@link DownloadHandler} callback for providing an object data and type\n+     * value.\n+     *\n+     * @see #setData(AbstractStreamResource)\n+     * @see #setType(String)\n+     *\n+     * @param data\n+     *            the callback for providing resource data, not null\n+     * @param type\n+     *            a type attribute value\n+     */\n+    public HtmlObject(DownloadHandler data, String type) {\n+        setData(data);\n+        setType(type);\n+    }\n+\n+    /**\n+     * Creates a new <code>&lt;object&gt;</code> component with given data\n+     * resource, type value and \"param\" components.\n+     *\n+     * @see #setData(String)\n+     * @see #setType(String)\n+     * @see #add(Component...)\n+     *\n+     *\n+     * @param data\n+     *            a data attribute value\n+     * @param type\n+     *            a type attribute value\n+     * @param params\n+     *            parameter components\n+     */\n+    public HtmlObject(DownloadHandler data, String type, Param... params) {\n+        setData(new StreamResourceRegistry.ElementStreamResource(data,\n+                this.getElement()));\n+        setType(type);\n+        add(params);\n+    }\n+\n     /**\n      * Creates a new <code>&lt;object&gt;</code> component with given data and\n      * \"param\" components.\n@@ -199,6 +242,19 @@ public void setData(AbstractStreamResource data) {\n         getElement().setAttribute(\"data\", data);\n     }\n \n+    /**\n+     * Sets the URL for {@link DownloadHandler} callback as \"data\" attribute\n+     * value .\n+     *\n+     * @param data\n+     *            a \"data\" attribute value,, not {@code null}\n+     */\n+    public void setData(DownloadHandler data) {\n+        getElement().setAttribute(\"data\",\n+                new StreamResourceRegistry.ElementStreamResource(data,\n+                        this.getElement()));\n+    }\n+\n     /**\n      * Gets the \"data\" attribute value.\n      *\n\ndiff --git a/flow-html-components/src/main/java/com/vaadin/flow/component/html/IFrame.java b/flow-html-components/src/main/java/com/vaadin/flow/component/html/IFrame.java\nindex 2d376b24ef6..84074c217d9 100644\n--- a/flow-html-components/src/main/java/com/vaadin/flow/component/html/IFrame.java\n+++ b/flow-html-components/src/main/java/com/vaadin/flow/component/html/IFrame.java\n@@ -21,7 +21,9 @@\n import com.vaadin.flow.component.PropertyDescriptors;\n import com.vaadin.flow.component.Tag;\n import com.vaadin.flow.server.AbstractStreamResource;\n+import com.vaadin.flow.server.DownloadHandler;\n import com.vaadin.flow.server.StreamResource;\n+import com.vaadin.flow.server.StreamResourceRegistry;\n \n import java.util.Optional;\n import java.util.stream.Collectors;\n@@ -134,6 +136,18 @@ public IFrame(String src) {\n         setSrc(src);\n     }\n \n+    /**\n+     * Creates a new iframe with download handler callback that provides a\n+     * resource from server.\n+     *\n+     * @param downloadHandler\n+     *            the download handler callback that provides a resource from\n+     *            server, not null\n+     */\n+    public IFrame(DownloadHandler downloadHandler) {\n+        setSrc(downloadHandler);\n+    }\n+\n     /**\n      * Sets the source of the iframe. If the contents at the src of the IFrame\n      * has changed and you want to refresh it in the user's browser, the src\n@@ -159,6 +173,21 @@ public void setSrc(AbstractStreamResource src) {\n         getElement().setAttribute(\"src\", src);\n     }\n \n+    /**\n+     * Sets the source of the iframe with a source URL with the URL of the given\n+     * {@link DownloadHandler} callback.\n+     *\n+     * @see #setSrc(String)\n+     *\n+     * @param downloadHandler\n+     *            the download handler resource, not null\n+     */\n+    public void setSrc(DownloadHandler downloadHandler) {\n+        getElement().setAttribute(\"src\",\n+                new StreamResourceRegistry.ElementStreamResource(\n+                        downloadHandler, this.getElement()));\n+    }\n+\n     /**\n      * Gets the source of the iframe.\n      *\n\ndiff --git a/flow-html-components/src/main/java/com/vaadin/flow/component/html/Image.java b/flow-html-components/src/main/java/com/vaadin/flow/component/html/Image.java\nindex f7d30536995..99eadd4df3b 100644\n--- a/flow-html-components/src/main/java/com/vaadin/flow/component/html/Image.java\n+++ b/flow-html-components/src/main/java/com/vaadin/flow/component/html/Image.java\n@@ -24,7 +24,9 @@\n import com.vaadin.flow.component.PropertyDescriptors;\n import com.vaadin.flow.component.Tag;\n import com.vaadin.flow.server.AbstractStreamResource;\n+import com.vaadin.flow.server.DownloadHandler;\n import com.vaadin.flow.server.StreamResource;\n+import com.vaadin.flow.server.StreamResourceRegistry;\n \n /**\n  * Component representing a <code>&lt;img&gt;</code> element.\n@@ -85,6 +87,27 @@ public Image(AbstractStreamResource src, String alt) {\n         setAlt(alt);\n     }\n \n+    /**\n+     * Creates an image with the given download handler callback for providing\n+     * an image data and an alternative text.\n+     * <p>\n+     * The alternative text given to constructor is always set even if it is the\n+     * default empty string which is not retained with {@link #setAlt(String)}.\n+     *\n+     * @param downloadHandler\n+     *            the download handler callback that provides an image data, not\n+     *            null\n+     * @param alt\n+     *            the alternate text\n+     *\n+     * @see #setSrc(AbstractStreamResource)\n+     * @see #setAlt(String)\n+     */\n+    public Image(DownloadHandler downloadHandler, String alt) {\n+        setSrc(downloadHandler);\n+        setAlt(alt);\n+    }\n+\n     /**\n      * Gets the image URL.\n      *\n@@ -114,6 +137,19 @@ public void setSrc(AbstractStreamResource src) {\n         getElement().setAttribute(\"src\", src);\n     }\n \n+    /**\n+     * Sets the image URL with the URL of the given {@link DownloadHandler}\n+     * callback.\n+     *\n+     * @param downloadHandler\n+     *            the download handler resource, not null\n+     */\n+    public void setSrc(DownloadHandler downloadHandler) {\n+        getElement().setAttribute(\"src\",\n+                new StreamResourceRegistry.ElementStreamResource(\n+                        downloadHandler, this.getElement()));\n+    }\n+\n     /**\n      * Sets the alternate text for the image.\n      *\n",
    "test_patch": "diff --git a/flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java b/flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java\nindex ba229c7204a..250019e434f 100644\n--- a/flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java\n+++ b/flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java\n@@ -24,6 +24,7 @@\n import com.vaadin.flow.component.Text;\n import com.vaadin.flow.component.UI;\n import com.vaadin.flow.server.AbstractStreamResource;\n+import com.vaadin.flow.server.DownloadHandler;\n \n public class AnchorTest extends ComponentTest {\n \n@@ -270,6 +271,45 @@ public String getName() {\n         Assert.assertNotEquals(href, anchor.getHref());\n     }\n \n+    @Test\n+    public void disabledAnchor_setDownload_hrefIsRemoved_enableAnchor_hrefIsRestored() {\n+        mockUI();\n+        DownloadHandler downloadHandler = event -> event.getWriter()\n+                .write(\"foo\");\n+        Anchor anchor = new Anchor(downloadHandler, \"bar\");\n+        String href = anchor.getHref();\n+        anchor.setEnabled(false);\n+\n+        Assert.assertFalse(anchor.getElement().hasAttribute(\"href\"));\n+        Assert.assertEquals(href, anchor.getHref());\n+\n+        anchor.setEnabled(true);\n+        Assert.assertEquals(href, anchor.getHref());\n+    }\n+\n+    @Test\n+    public void disabledAnchor_setDownloadWhenDisabled_hrefIsPreserved() {\n+        mockUI();\n+        DownloadHandler downloadHandler = event -> event.getWriter()\n+                .write(\"foo\");\n+        Anchor anchor = new Anchor(downloadHandler, \"bar\");\n+        String href = anchor.getHref();\n+        anchor.setEnabled(false);\n+\n+        anchor.setHref(new AbstractStreamResource() {\n+\n+            @Override\n+            public String getName() {\n+                return \"baz\";\n+            }\n+        });\n+\n+        anchor.setEnabled(true);\n+\n+        Assert.assertTrue(anchor.getElement().hasAttribute(\"href\"));\n+        Assert.assertNotEquals(href, anchor.getHref());\n+    }\n+\n     private void mockUI() {\n         ui = new UI();\n         UI.setCurrent(ui);\n\ndiff --git a/flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlComponentSmokeTest.java b/flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlComponentSmokeTest.java\nindex 7e0aed1f72c..32994479f67 100644\n--- a/flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlComponentSmokeTest.java\n+++ b/flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlComponentSmokeTest.java\n@@ -49,6 +49,7 @@\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.internal.change.NodeChange;\n import com.vaadin.flow.server.AbstractStreamResource;\n+import com.vaadin.flow.server.DownloadHandler;\n \n public class HtmlComponentSmokeTest {\n \n@@ -248,6 +249,29 @@ private static boolean isSpecialSetter(Method method) {\n             return true;\n         }\n \n+        if (method.getDeclaringClass() == IFrame.class\n+                && method.getName().startsWith(\"setSrc\")) {\n+            return true;\n+        }\n+\n+        if (method.getDeclaringClass() == HtmlObject.class\n+                && method.getName().startsWith(\"setData\")\n+                && method.getParameterTypes()[0] == DownloadHandler.class) {\n+            return true;\n+        }\n+\n+        if (method.getDeclaringClass() == Anchor.class\n+                && method.getName().startsWith(\"setHref\")\n+                && method.getParameterTypes()[0] == DownloadHandler.class) {\n+            return true;\n+        }\n+\n+        if (method.getDeclaringClass() == Image.class\n+                && method.getName().startsWith(\"setSrc\")\n+                && method.getParameterTypes()[0] == DownloadHandler.class) {\n+            return true;\n+        }\n+\n         return false;\n     }\n \n\ndiff --git a/flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlObjectTest.java b/flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlObjectTest.java\nindex bf55e312910..c5c4365ffb7 100644\n--- a/flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlObjectTest.java\n+++ b/flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlObjectTest.java\n@@ -15,6 +15,7 @@\n  */\n package com.vaadin.flow.component.html;\n \n+import java.io.IOException;\n import java.net.URI;\n \n import org.junit.After;\n@@ -76,4 +77,29 @@ public void setData_dataAsAResourceinCTOR() {\n         Assert.assertEquals(uri.toASCIIString(),\n                 object.getElement().getAttribute(\"data\"));\n     }\n+\n+    @Test\n+    public void setDownloadHandlerData_dataAsAResource() {\n+        UI ui = new UI();\n+        UI.setCurrent(ui);\n+        HtmlObject object = new HtmlObject();\n+        object.setData(event -> event.getWriter().write(\"foo\"));\n+\n+        Assert.assertTrue(\"Data should be set as dynamic resource.\",\n+                object.getElement().getAttribute(\"data\")\n+                        .startsWith(\"VAADIN/dynamic/resource/-1/\"));\n+    }\n+\n+    @Test\n+    public void setDownloadHandlerData_dataAsAResourceinCTOR() {\n+        UI ui = new UI();\n+        UI.setCurrent(ui);\n+\n+        HtmlObject object = new HtmlObject(\n+                event -> event.getWriter().write(\"foo\"), \"foo\");\n+\n+        Assert.assertTrue(\"Data should be set as dynamic resource.\",\n+                object.getElement().getAttribute(\"data\")\n+                        .startsWith(\"VAADIN/dynamic/resource/-1/\"));\n+    }\n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21333",
    "pr_id": 21333,
    "issue_id": 21331,
    "repo": "vaadin/flow",
    "problem_statement": "Cannot instatiate view with type parameter (again)\n### Description of the bug\n\nSeems like [this bug](https://github.com/vaadin/flow/issues/8371) has reappeared.\n\nWhen my route has a generic type it results in this error on startup.  Removal of the HasUrlParameter interface, or the type T parameter, will eliminate the issue.\n\nWe use version 24.6.6\n```\nCaused by: java.lang.IllegalArgumentException: Parameter type of the given navigationTarget 'com.idexx.medicalaffairs.admin.web.tests.antibiotic.AntibioticPage' could not be resolved.\nat com.vaadin.flow.router.ParameterDeserializer.getClassType(ParameterDeserializer.java:186)\nat com.vaadin.flow.router.internal.HasUrlParameterFormat.getTemplate(HasUrlParameterFormat.java:85)\n```\n\n\n### Expected behavior\n\nI should be able to use a generic type in my route\n\n### Minimal reproducible example\n\n\n```\n@PageTitle(\"Hello World\")\n@Route(\"\")\npublic class HelloWorldView<T> extends HorizontalLayout implements HasUrlParameter<String> {\npublic HelloWorldView() {\nadd(new Span(\"Hello\"));\n}\n\nprivate String urlParameter;\n@Override\npublic void setParameter(BeforeEvent beforeEvent, @WildcardParameter String parameter) {\nurlParameter = parameter;\n}\n}\n```\n\n### Versions\n\n- Vaadin / Flow version:\n- Java version:\n- OS version:\n- Browser version (if applicable):\n- Application Server (if applicable):\n- IDE (if applicable):\n",
    "issue_word_count": 171,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/router/ParameterDeserializer.java",
      "flow-server/src/test/java/com/vaadin/flow/router/ParameterDeserializerTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/router/ParameterDeserializerTest.java"
    ],
    "base_commit": "91177737e16d9ea9e256dd878ece6ab5d0cbb15b",
    "head_commit": "0b2b56c066736c47320278a074fb25521f7333b4",
    "repo_url": "https://github.com/vaadin/flow/pull/21333",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21333",
    "dockerfile": "",
    "pr_merged_at": "2025-04-23T07:02:22.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/router/ParameterDeserializer.java b/flow-server/src/main/java/com/vaadin/flow/router/ParameterDeserializer.java\nindex 050d3dfdaa1..b2241fa8a1d 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/router/ParameterDeserializer.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/router/ParameterDeserializer.java\n@@ -180,8 +180,7 @@ public static boolean verifyParameters(Class<?> navigationTarget,\n      * @return parameter type class\n      */\n     public static Class<?> getClassType(Class<?> navigationTarget) {\n-        Type type = GenericTypeReflector.getTypeParameter(navigationTarget,\n-                HasUrlParameter.class.getTypeParameters()[0]);\n+        Type type = findParameterType(navigationTarget);\n         if (!(type instanceof Class<?>)) {\n             throw new IllegalArgumentException(String.format(\n                     \"Parameter type of the given navigationTarget '%s' could not be resolved.\",\n@@ -209,6 +208,18 @@ public static boolean isAnnotatedParameter(Class<?> navigationTarget,\n                 .getFunctionalMethod(HasUrlParameter.class).getName());\n \n         // Raw method has no parameter annotations if compiled by Eclipse\n+        Type parameterType = findParameterType(navigationTarget);\n+        Class<?> parameterClass = GenericTypeReflector.erase(parameterType);\n+\n+        return Stream.of(navigationTarget.getMethods())\n+                .filter(method -> methodName.equals(method.getName()))\n+                .filter(method -> hasValidParameterTypes(method,\n+                        parameterClass))\n+                .anyMatch(method -> method.getParameters()[1]\n+                        .isAnnotationPresent(parameterAnnotation));\n+    }\n+\n+    private static Type findParameterType(Class<?> navigationTarget) {\n         Type parameterType = GenericTypeReflector.getTypeParameter(\n                 navigationTarget, HasUrlParameter.class.getTypeParameters()[0]);\n         if (parameterType == null) {\n@@ -225,14 +236,7 @@ public static boolean isAnnotatedParameter(Class<?> navigationTarget,\n                 }\n             }\n         }\n-        Class<?> parameterClass = GenericTypeReflector.erase(parameterType);\n-\n-        return Stream.of(navigationTarget.getMethods())\n-                .filter(method -> methodName.equals(method.getName()))\n-                .filter(method -> hasValidParameterTypes(method,\n-                        parameterClass))\n-                .anyMatch(method -> method.getParameters()[1]\n-                        .isAnnotationPresent(parameterAnnotation));\n+        return parameterType;\n     }\n \n     private static boolean hasValidParameterTypes(Method method,\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/router/ParameterDeserializerTest.java b/flow-server/src/test/java/com/vaadin/flow/router/ParameterDeserializerTest.java\nindex c9d36e811a2..acbcb02fdd5 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/router/ParameterDeserializerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/router/ParameterDeserializerTest.java\n@@ -17,6 +17,7 @@\n \n import org.junit.Test;\n \n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n \n@@ -63,6 +64,50 @@ public void testGenericInterface() {\n                 GenericAnnotated.class, OptionalParameter.class));\n     }\n \n+    @Test\n+    public void getClassType_concreteClass_parameterFromInterface() {\n+        Class<?> type = ParameterDeserializer.getClassType(Simple.class);\n+        assertEquals(String.class, type);\n+        type = ParameterDeserializer.getClassType(SimpleAnnotated.class);\n+        assertEquals(String.class, type);\n+    }\n+\n+    @Test\n+    public void getClassType_concreteClass_parameterFromExtendedInterface() {\n+        Class<?> type = ParameterDeserializer.getClassType(Normal.class);\n+        assertEquals(String.class, type);\n+        type = ParameterDeserializer.getClassType(NormalAnnotated.class);\n+        assertEquals(String.class, type);\n+    }\n+\n+    @Test\n+    public void getClassType_concreteClass_parameterFromSuperclass() {\n+        Class<?> type = ParameterDeserializer\n+                .getClassType(ParameterizedViaSuperClass.class);\n+        assertEquals(String.class, type);\n+        type = ParameterDeserializer\n+                .getClassType(ParameterizedAnnotatedClass.class);\n+        assertEquals(String.class, type);\n+    }\n+\n+    @Test\n+    public void getClassType_parameterizedClass_parameterFromInterface() {\n+        Class<?> type = ParameterDeserializer\n+                .getClassType(ParameterizedClass.class);\n+        assertEquals(String.class, type);\n+        type = ParameterDeserializer\n+                .getClassType(ParameterizedAnnotatedClass.class);\n+        assertEquals(String.class, type);\n+    }\n+\n+    @Test\n+    public void getClassType_parameterizedClass_parameterFromParameterizedInterface() {\n+        Class<?> type = ParameterDeserializer.getClassType(Generic.class);\n+        assertEquals(String.class, type);\n+        type = ParameterDeserializer.getClassType(GenericAnnotated.class);\n+        assertEquals(String.class, type);\n+    }\n+\n     public static class Simple implements HasUrlParameter<String> {\n \n         @Override\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21314",
    "pr_id": 21314,
    "issue_id": 21266,
    "repo": "vaadin/flow",
    "problem_statement": "Push messages during resync lead to resync loop\n### Description of the bug\n\nRelated to #14147\n\nIn our app, we have a \"resync\" button which deliberately triggers a resync for testing. On some views, the app always goes into a resync loop, where every resync cycle triggers another.\n\nHere is an excerpt of the console logs:\n\n![Image](https://github.com/user-attachments/assets/9047e25c-54c5-4739-93fb-ac443deef1e5)\n\nNote that for each resync, there is an additional `Ignoring message from the server as a resync request is ongoing.` And indeed, some `onAttach` hook in this view starts a background process which eventually pushes a message to the client. When I disable that, the app recovers after the first resync without going into a loop.\n\nMy strong suspicion is that the client ignores the push message during resync, and when resync completes, it waits for a message of a missing id, because that would be the exact message that was ignored previously. In the above example, that would be message 17, and indeed that was a push message. I've attached the full console and network logs: [resyncloop.zip](https://github.com/user-attachments/files/19669426/resyncloop.zip)\n\nI understand the idea behind ignoring push messages during resync, but that inevitably leads to this problem. I'm not sure whether it would be better to defer it until after resync completes, or to just adjust the syncId while ignoring the message itself, but something along those lines should be done here.\n\nIn my case, the push message comes from the `onAttach` hook that was triggered by resync and somehow managed to reach the client faster than the resync response. Therefore, it would be \"more correct\" to defer it and then execute it, because it is part of the resync itself, not something else that happened before. Still, this probably doesn't apply to every case.\n\n### Expected behavior\n\nThe application should recover from resync without going into a loop, regardless of whether push messages are also sent or not.\n\n### Minimal reproducible example\n\nI tried to reproduce it with the following approach, but only managed to do so once:\n\n```java\npublic class ResyncLoop extends VerticalLayout {\n\n    private final ExecutorService executor = Executors.newCachedThreadPool();\n    private final Faker faker = new Faker();\n    private final Grid<Person> grid;\n\n    public ResyncLoop() {\n        UI ui = UI.getCurrent();\n        add(new Button(\"resync\", clickEvent -> ui.getInternals().incrementServerId()));\n        grid = new Grid<>();\n        grid.setItems(fakePeople());\n        grid.setSizeFull();\n        grid.addColumnReorderListener(e -> executor.execute(() -> {\n            ui.accessSynchronously(() -> ui.getElement().setAttribute(\"bogus-attr\", UUID.randomUUID().toString()));\n        }));\n        addAndExpand(grid);\n    }\n\n    @Override\n    protected void onAttach(AttachEvent attachEvent) {\n        super.onAttach(attachEvent);\n        grid.removeAllColumns();\n        var columns = List.of(\n            grid.addColumn(Person::firstName).setHeader(\"Firstname\"),\n            grid.addColumn(Person::lastName).setHeader(\"Lastname\")\n        );\n        grid.setColumnOrder(columns);\n        grid.getDataProvider().refreshAll();\n    }\n\n    private List<Person> fakePeople() {\n        return Stream.generate(this::fakePerson)\n            .limit(100)\n            .toList();\n    }\n\n    private Person fakePerson() {\n        return new Person(faker.name().firstName(), faker.name().lastName());\n    }\n\n    record Person(String firstName, String lastName) {}\n}\n```\n\nIt uses [JavaFaker](https://github.com/DiUS/java-faker) to generate a Grid of reasonable size.\nThe `onAttach` hook sets the columns order, which fires a listener, which in turn starts a background process that sets some attribute in the DOM.\n\nThis is also very similar in principle to what happens in our production code, where I can reproduce every time. I just can't figure out how to reliably make the push message arrive during resync.\n\nIt's probably also possible to simplify this reproducer, e.g. by dropping JavaFaker and/or the Grid. But this is very close to our production environment, and it's the only thing that showed the problem at least once.\n\n### Versions\n\n- Vaadin / Flow version: 24.7.1\n- Java version: OpenJDK 64-Bit Server VM Temurin-21.0.6+7 (build 21.0.6+7-LTS, mixed mode, sharing)\n- OS version: Windows 11\n",
    "issue_word_count": 629,
    "test_files_count": 4,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "flow-client/src/main/java/com/vaadin/client/communication/MessageHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/component/UI.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/StateTree.java",
      "flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/AppConfig.java",
      "flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/CustomServlet.java",
      "flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/ResyncLoopView.java",
      "flow-tests/test-client-queue/src/test/java/com/vaadin/flow/misc/ui/ResyncLoopIT.java"
    ],
    "pr_changed_test_files": [
      "flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/AppConfig.java",
      "flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/CustomServlet.java",
      "flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/ResyncLoopView.java",
      "flow-tests/test-client-queue/src/test/java/com/vaadin/flow/misc/ui/ResyncLoopIT.java"
    ],
    "base_commit": "bef84136e6553d28ef8c1efdceb5ad742f28daef",
    "head_commit": "963fb6f8643a2b863d7789eaa256952709e681fb",
    "repo_url": "https://github.com/vaadin/flow/pull/21314",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21314",
    "dockerfile": "",
    "pr_merged_at": "2025-04-22T09:55:39.000Z",
    "patch": "diff --git a/flow-client/src/main/java/com/vaadin/client/communication/MessageHandler.java b/flow-client/src/main/java/com/vaadin/client/communication/MessageHandler.java\nindex ec33544698e..b7be26da7aa 100644\n--- a/flow-client/src/main/java/com/vaadin/client/communication/MessageHandler.java\n+++ b/flow-client/src/main/java/com/vaadin/client/communication/MessageHandler.java\n@@ -240,8 +240,17 @@ protected void handleJSON(final ValueMap valueMap) {\n                 }\n             }\n \n+            // A resync is in progress (WAITING_FOR_RESPONSE state). The\n+            // incoming message could have been generated by a background thread\n+            // during server-side resync process and pushed to the client, so\n+            // it's a potentially valid message that should be processed after\n+            // resynchronization completes. We queue this message now and will\n+            // handle it later.\n+            // Note: If its id is older than the resync request, it will be\n+            // discarded during subsequent processing.\n             Console.warn(\n-                    \"Ignoring message from the server as a resync request is ongoing.\");\n+                    \"Queueing message from the server as a resync request is ongoing.\");\n+            pendingUIDLMessages.push(new PendingUIDLMessage(valueMap));\n             return;\n         }\n \n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/component/UI.java b/flow-server/src/main/java/com/vaadin/flow/component/UI.java\nindex 253df3d344b..502997243f6 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/UI.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/UI.java\n@@ -754,8 +754,11 @@ public void push() {\n          */\n         session.getService().runPendingAccessTasks(session);\n \n-        if (!getInternals().isDirty()) {\n-            // Do not push if there is nothing to push\n+        if (!getInternals().isDirty()\n+                || getInternals().getStateTree().isPreparingForResync()) {\n+            // Do not push: there is nothing to push, or UI is preparing for\n+            // resync and should not asynchronously dispatch messages to the\n+            // client until the process is completed\n             return;\n         }\n \n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/StateTree.java b/flow-server/src/main/java/com/vaadin/flow/internal/StateTree.java\nindex c0b504ad657..fcb3cc33a86 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/StateTree.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/StateTree.java\n@@ -176,6 +176,8 @@ public interface ExecutionRegistration extends Registration {\n     // initialization is done.\n     private boolean isRootAttached = true;\n \n+    private boolean preparingForResync;\n+\n     /**\n      * Creates a new state tree with a set of features defined for the root\n      * node.\n@@ -479,7 +481,26 @@ private Set<StateNode> doCollectDirtyNodes(boolean reset) {\n      * attached, so that it can build the DOM tree from scratch.\n      */\n     public void prepareForResync() {\n-        rootNode.prepareForResync();\n+        preparingForResync = true;\n+        try {\n+            rootNode.prepareForResync();\n+        } finally {\n+            preparingForResync = false;\n+        }\n     }\n \n+    /**\n+     * Checks whether the state tree is in the process of preparing for\n+     * resynchronization.\n+     *\n+     * Resynchronization involves sending the same changes to the client as when\n+     * the component tree was initially attached, enabling the client to rebuild\n+     * the DOM tree from scratch.\n+     *\n+     * @return {@code true} if the tree is preparing for resynchronization,\n+     *         {@code false} otherwise\n+     */\n+    public boolean isPreparingForResync() {\n+        return preparingForResync;\n+    }\n }\n",
    "test_patch": "diff --git a/flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/AppConfig.java b/flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/AppConfig.java\nnew file mode 100644\nindex 00000000000..10f5f3099b8\n--- /dev/null\n+++ b/flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/AppConfig.java\n@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.misc.ui;\n+\n+import com.vaadin.flow.component.page.AppShellConfigurator;\n+import com.vaadin.flow.component.page.Push;\n+\n+@Push\n+public class AppConfig implements AppShellConfigurator {\n+}\n\ndiff --git a/flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/CustomServlet.java b/flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/CustomServlet.java\nindex 7e9075c5d15..982836e7aad 100644\n--- a/flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/CustomServlet.java\n+++ b/flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/CustomServlet.java\n@@ -15,9 +15,17 @@\n  */\n package com.vaadin.flow.misc.ui;\n \n+import jakarta.servlet.ServletException;\n+import jakarta.servlet.ServletOutputStream;\n import jakarta.servlet.annotation.WebServlet;\n+import jakarta.servlet.http.HttpServletRequest;\n+import jakarta.servlet.http.HttpServletResponse;\n+import jakarta.servlet.http.HttpServletResponseWrapper;\n+\n+import java.io.IOException;\n \n import com.vaadin.flow.function.DeploymentConfiguration;\n+import com.vaadin.flow.internal.CurrentInstance;\n import com.vaadin.flow.server.ServiceException;\n import com.vaadin.flow.server.VaadinServlet;\n import com.vaadin.flow.server.VaadinServletService;\n@@ -34,4 +42,38 @@ protected VaadinServletService createServletService(\n         service.init();\n         return service;\n     }\n+\n+    @Override\n+    protected void service(HttpServletRequest request,\n+            HttpServletResponse response) throws ServletException, IOException {\n+        super.service(request, new SlowResponse(response));\n+    }\n+\n+    public static void slowDownResponse() {\n+        CurrentInstance.set(SlowResponseFlag.class, new SlowResponseFlag(500));\n+    }\n+\n+    private record SlowResponseFlag(int timeout) {\n+    }\n+\n+    private static class SlowResponse extends HttpServletResponseWrapper {\n+\n+        public SlowResponse(HttpServletResponse response) {\n+            super(response);\n+        }\n+\n+        @Override\n+        public ServletOutputStream getOutputStream() throws IOException {\n+            var slowResponseFlag = CurrentInstance.get(SlowResponseFlag.class);\n+            if (slowResponseFlag != null) {\n+                try {\n+                    Thread.sleep(slowResponseFlag.timeout);\n+                } catch (InterruptedException e) {\n+                    Thread.currentThread().interrupt();\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+            return super.getOutputStream();\n+        }\n+    }\n }\n\ndiff --git a/flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/ResyncLoopView.java b/flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/ResyncLoopView.java\nnew file mode 100644\nindex 00000000000..4961c4be6cd\n--- /dev/null\n+++ b/flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/ResyncLoopView.java\n@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.misc.ui;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.vaadin.flow.component.AttachEvent;\n+import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.component.html.NativeButton;\n+import com.vaadin.flow.component.html.Span;\n+import com.vaadin.flow.dom.Style;\n+import com.vaadin.flow.router.Route;\n+import com.vaadin.flow.server.Command;\n+\n+@Route(\"resync-loop\")\n+public class ResyncLoopView extends Div {\n+\n+    public static final String ACCESS_MODE = \"accessMode\";\n+    public static final String ACCESS_MODE_ACCESS = \"accessModeAccess\";\n+    public static final String ACCESS_MODE_ACCESS_SYNC = \"accessModeAccessSync\";\n+    public static final String FORCE_RESYNC = \"forceResync\";\n+    public static final String USELESS_BUTTON = \"uselessButton\";\n+    public static final String JS_CALLBACK = \"jsCallback\";\n+    public static final String BG_CALLBACK = \"bgCallback\";\n+    private final Span jsCallbackSpan;\n+    private final Span bgCallbackSpan;\n+    private final Span accessModeSpan;\n+    private final AtomicInteger jsCallbackCounter = new AtomicInteger();\n+    private final AtomicInteger bgCallbackCounter = new AtomicInteger();\n+    ExecutorService executorService = Executors.newCachedThreadPool();\n+    AccessMode accessMode = AccessMode.accessSynchronously;\n+\n+    public ResyncLoopView() {\n+        getStyle().setDisplay(Style.Display.FLEX);\n+        getStyle().setFlexDirection(Style.FlexDirection.COLUMN);\n+        getStyle().setAlignItems(Style.AlignItems.FLEX_START);\n+        UI ui = UI.getCurrent();\n+        jsCallbackSpan = new Span();\n+        jsCallbackSpan.setId(JS_CALLBACK);\n+        bgCallbackSpan = new Span();\n+        bgCallbackSpan.setId(BG_CALLBACK);\n+        accessModeSpan = new Span();\n+        accessModeSpan.setId(ACCESS_MODE);\n+        updateAccessMode(accessMode);\n+        NativeButton accessModeAccessButton = new NativeButton(\n+                \"Set access mode to \" + AccessMode.access,\n+                ev -> updateAccessMode(AccessMode.access));\n+        accessModeAccessButton.setId(ACCESS_MODE_ACCESS);\n+        NativeButton accessModeAccessSyncButton = new NativeButton(\n+                \"Set access mode to \" + AccessMode.accessSynchronously,\n+                ev -> updateAccessMode(AccessMode.accessSynchronously));\n+        accessModeAccessSyncButton.setId(ACCESS_MODE_ACCESS_SYNC);\n+        NativeButton forceResyncButton = new NativeButton(\"Force resync\",\n+                ev -> {\n+                    jsCallbackSpan.setVisible(true);\n+                    ui.getInternals().incrementServerId();\n+                });\n+        forceResyncButton.setId(FORCE_RESYNC);\n+        NativeButton uselessButton = new NativeButton(\"Useless button\", ev -> {\n+        });\n+\n+        uselessButton.setId(USELESS_BUTTON);\n+        add(accessModeSpan, accessModeAccessButton, accessModeAccessSyncButton,\n+                forceResyncButton, uselessButton, jsCallbackSpan,\n+                bgCallbackSpan);\n+    }\n+\n+    @Override\n+    protected void onAttach(AttachEvent attachEvent) {\n+        super.onAttach(attachEvent);\n+        CustomServlet.slowDownResponse();\n+        UI ui = attachEvent.getUI();\n+\n+        executorService.execute(() -> {\n+            Command action = () -> bgCallbackSpan\n+                    .setText(\"Background update completed: \"\n+                            + bgCallbackCounter.incrementAndGet());\n+            if (accessMode == AccessMode.access) {\n+                ui.access(action);\n+            } else {\n+                ui.accessSynchronously(action);\n+            }\n+        });\n+        ui.getElement().executeJs(\"return true;\")\n+                .then(val -> jsCallbackSpan.setText(\"JS Callback completed: \"\n+                        + jsCallbackCounter.incrementAndGet()));\n+    }\n+\n+    private void updateAccessMode(AccessMode accessMode) {\n+        this.accessMode = accessMode;\n+        this.accessModeSpan.setText(\"Access mode: \" + accessMode);\n+    }\n+\n+    private enum AccessMode {\n+        access, accessSynchronously\n+    }\n+}\n\ndiff --git a/flow-tests/test-client-queue/src/test/java/com/vaadin/flow/misc/ui/ResyncLoopIT.java b/flow-tests/test-client-queue/src/test/java/com/vaadin/flow/misc/ui/ResyncLoopIT.java\nnew file mode 100644\nindex 00000000000..c124073b0d8\n--- /dev/null\n+++ b/flow-tests/test-client-queue/src/test/java/com/vaadin/flow/misc/ui/ResyncLoopIT.java\n@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.misc.ui;\n+\n+import java.util.List;\n+import java.util.logging.Level;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.logging.LogEntry;\n+\n+import com.vaadin.flow.component.html.testbench.NativeButtonElement;\n+import com.vaadin.flow.component.html.testbench.SpanElement;\n+import com.vaadin.flow.testutil.ChromeBrowserTest;\n+\n+public class ResyncLoopIT extends ChromeBrowserTest {\n+\n+    @Override\n+    protected String getTestPath() {\n+        return \"/resync-loop\";\n+    }\n+\n+    @Test\n+    public void backgroundAccessSynchronouslyOnAttach_pushMessageOnResync_resyncSucceed() {\n+        open();\n+        waitForViewFullyLoaded();\n+\n+        $(NativeButtonElement.class).id(ResyncLoopView.FORCE_RESYNC).click();\n+\n+        assertThatResyncSucceed();\n+    }\n+\n+    @Test\n+    public void backgroundAccessSynchronouslyOnAttach_interactDuringResync_resyncSucceed() {\n+        open();\n+        waitForViewFullyLoaded();\n+\n+        $(NativeButtonElement.class).id(ResyncLoopView.FORCE_RESYNC).click();\n+\n+        NativeButtonElement uselessButton = $(NativeButtonElement.class)\n+                .id(ResyncLoopView.USELESS_BUTTON);\n+        uselessButton.click();\n+        uselessButton.click();\n+        uselessButton.click();\n+        uselessButton.click();\n+\n+        assertThatResyncSucceed();\n+    }\n+\n+    @Test\n+    public void backgroundAccessOnAttach_pushMessageOnResync_resyncSucceed() {\n+        open();\n+        waitForViewFullyLoaded();\n+\n+        $(NativeButtonElement.class).id(ResyncLoopView.ACCESS_MODE_ACCESS)\n+                .click();\n+        waitUntil(d -> $(SpanElement.class).id(ResyncLoopView.ACCESS_MODE)\n+                .getText().endsWith(\": access\"));\n+\n+        $(NativeButtonElement.class).id(ResyncLoopView.FORCE_RESYNC).click();\n+\n+        assertThatResyncSucceed();\n+    }\n+\n+    @Test\n+    public void backgroundAccessOnAttach_interactDuringResync_resyncSucceed() {\n+        open();\n+        waitForViewFullyLoaded();\n+\n+        $(NativeButtonElement.class).id(ResyncLoopView.ACCESS_MODE_ACCESS)\n+                .click();\n+        waitUntil(d -> $(SpanElement.class).id(ResyncLoopView.ACCESS_MODE)\n+                .getText().endsWith(\": access\"));\n+\n+        $(NativeButtonElement.class).id(ResyncLoopView.FORCE_RESYNC).click();\n+\n+        NativeButtonElement uselessButton = $(NativeButtonElement.class)\n+                .id(ResyncLoopView.USELESS_BUTTON);\n+        uselessButton.click();\n+        uselessButton.click();\n+        uselessButton.click();\n+        uselessButton.click();\n+\n+        assertThatResyncSucceed();\n+    }\n+\n+    private void waitForViewFullyLoaded() {\n+        waitUntil(driver -> $(SpanElement.class).id(ResyncLoopView.JS_CALLBACK)\n+                .getText().endsWith(\": 1\"));\n+        waitUntil(driver -> $(SpanElement.class).id(ResyncLoopView.BG_CALLBACK)\n+                .getText().endsWith(\": 1\"));\n+    }\n+\n+    private void assertThatResyncSucceed() {\n+\n+        waitUntil(driver -> $(SpanElement.class).id(ResyncLoopView.JS_CALLBACK)\n+                .getText().endsWith(\": 2\"));\n+        waitUntil(driver -> $(SpanElement.class).id(ResyncLoopView.BG_CALLBACK)\n+                .getText().endsWith(\": 2\"));\n+\n+        List<String> logEntries = getLogEntries(Level.WARNING).stream()\n+                .map(LogEntry::getMessage).toList();\n+        Assert.assertTrue(\"Expecting lost message, but was not reported\",\n+                logEntries.stream().anyMatch(message -> message.matches(\n+                        \".*Gave up waiting for message \\\\d+ from the server.*\")));\n+        Assert.assertTrue(\n+                \"Expecting resynchronizing from server message, but was not reported\",\n+                logEntries.stream().anyMatch(message -> message\n+                        .matches(\".*Resynchronizing from server.*\")));\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21274",
    "pr_id": 21274,
    "issue_id": 21273,
    "repo": "vaadin/flow",
    "problem_statement": "Hotswapper.forcePageReload(VaadinService.getCurrent(), true); makes page reload randomly\n### Description of the bug\n\nWhen ONLY navigating in the page, opening dialogs, go to pages etc, the page reload randomly. Cannot find a pattern when, but hope the developer can! By reverting to my CustomVaadinHotswapper hack, the random refresh works.\n\n```\npublic class CustomVaadinHotswapper implements VaadinHotswapper {\n    public static boolean fullPageReload = true;\n\n    @Override\n    public boolean onClassLoadEvent(VaadinService vaadinService, Set<Class<?>> classes, boolean redefined) {\n        return fullPageReload ? redefined : VaadinHotswapper.super.onClassLoadEvent(vaadinService, classes, redefined);\n    }\n}\n```\n\n### Expected behavior\n\nNo random refresh\n\n### Minimal reproducible example\n\n-\n\n### Versions\n\nHilla: 24.7.1\nFlow: 24.7.1\nVaadin: 24.7.1\nSpring Boot: 3.4.4\nSpring: 6.2.5\nSpring Security: ☑\nSpring Data JPA: ☑\nCopilot: 24.7.1\nFrontend Hotswap: Disabled, using pre-built bundle\nOS: amd64 Windows 11 10.0\nJava: JetBrains s.r.o. 21.0.5\nBrowser: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36\nJava Hotswap: Java Hotswap is enabled\nIDE Plugin: 1.4.9 IntelliJ\n",
    "issue_word_count": 175,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java",
      "flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java"
    ],
    "base_commit": "dec783a04700ad25b57e8f7d4a9abbc0ebf8adee",
    "head_commit": "375bbe38fd39a74941c4d6bedf57b6aabec94052",
    "repo_url": "https://github.com/vaadin/flow/pull/21274",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21274",
    "dockerfile": "",
    "pr_merged_at": "2025-04-11T06:37:56.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java b/flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java\nindex 551daef984e..e922edd140a 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java\n@@ -277,7 +277,8 @@ private void onHotswapInternal(HashSet<Class<?>> classes,\n             }\n         }\n         forceBrowserReload = forceBrowserReload\n-                || getForceReloadHolder(vaadinService).shouldReloadPage();\n+                || (getForceReloadHolder(vaadinService).shouldReloadPage()\n+                        && redefined);\n \n         boolean uiTreeNeedsRefresh = false;\n         EnumMap<UIRefreshStrategy, List<UI>> refreshActions = null;\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java b/flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java\nindex a434ef50899..b7af94b6b5c 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java\n@@ -944,7 +944,7 @@ public void onHotswap_mixedPushState_classInUITreeChanged_liveReloadTriggered()\n     }\n \n     @Test\n-    public void onHotswap_pushDisabled_forcePageReload_fullReloadTriggered()\n+    public void onHotswap_pushDisabled_forcePageReload_redefinedClass_fullReloadTriggered()\n             throws ServiceException {\n         VaadinSession session = createMockVaadinSession();\n         hotswapper.sessionInit(new SessionInitEvent(service, session, null));\n@@ -959,6 +959,22 @@ public void onHotswap_pushDisabled_forcePageReload_fullReloadTriggered()\n         Mockito.verify(liveReload).reload();\n     }\n \n+    @Test\n+    public void onHotswap_pushDisabled_forcePageReload_loadedClass_notReload()\n+            throws ServiceException {\n+        VaadinSession session = createMockVaadinSession();\n+        hotswapper.sessionInit(new SessionInitEvent(service, session, null));\n+\n+        RefreshTestingUI ui = initUIAndNavigateTo(session, MyRoute.class);\n+\n+        Hotswapper.forcePageReload(service, true);\n+        hotswapper.onHotswap(new String[] { MyRoute.class.getName() }, false);\n+\n+        ui.assertNotRefreshed();\n+        Mockito.verify(liveReload, never()).refresh(anyBoolean());\n+        Mockito.verify(liveReload, never()).reload();\n+    }\n+\n     @Test\n     public void onHotswap_pushDisabled_forcePageReloadWithSystemProperty_fullReloadTriggered()\n             throws ServiceException {\n@@ -986,7 +1002,7 @@ public void onHotswap_pushDisabled_forcePageReloadWithSystemProperty_fullReloadT\n     }\n \n     @Test\n-    public void onHotswap_pushEnabled_forcePageReload_fullReloadTriggered()\n+    public void onHotswap_pushEnabled_forcePageReload_redefinedClass_fullReloadTriggered()\n             throws ServiceException {\n         VaadinSession session = createMockVaadinSession();\n         hotswapper.sessionInit(new SessionInitEvent(service, session, null));\n@@ -1002,6 +1018,23 @@ public void onHotswap_pushEnabled_forcePageReload_fullReloadTriggered()\n         Mockito.verify(liveReload).reload();\n     }\n \n+    @Test\n+    public void onHotswap_pushEnabled_forcePageReload_loadedClass_noReload()\n+            throws ServiceException {\n+        VaadinSession session = createMockVaadinSession();\n+        hotswapper.sessionInit(new SessionInitEvent(service, session, null));\n+\n+        RefreshTestingUI ui = initUIAndNavigateTo(session, MyRoute.class);\n+        ui.enablePush();\n+\n+        Hotswapper.forcePageReload(service, true);\n+        hotswapper.onHotswap(new String[] { MyRoute.class.getName() }, false);\n+\n+        ui.assertNotRefreshed();\n+        Mockito.verify(liveReload, never()).refresh(anyBoolean());\n+        Mockito.verify(liveReload, never()).reload();\n+    }\n+\n     @Test\n     public void onHotswap_pushEnabled_forcePageReloadWithSystemProperty_fullReloadTriggered()\n             throws ServiceException {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21251",
    "pr_id": 21251,
    "issue_id": 21192,
    "repo": "vaadin/flow",
    "problem_statement": "Include provided scoped dependencies in Flow maven plugin class scanning\nCurrently, the Flow maven plugin ignores dependencies with provided scope during frontend class scanning, except for portlet and `javax.servlet` API artifacts.\nThis filter comes probably from the initial plugin implementation and is most likely not required anymore.\n\nAlso, having artifacts in provided scope referencing frontend resources could potentially be a valid use case, for example if the dependency is not packaged with the application but provided at runtime. ",
    "issue_word_count": 79,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java",
      "flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java",
      "flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/ReflectorTest.java"
    ],
    "pr_changed_test_files": [
      "flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/ReflectorTest.java"
    ],
    "base_commit": "f1e7d30a5e0893d6030c318986ba05352883d625",
    "head_commit": "584b7c9b42f20c57a021e4f0b535159b52ae8c70",
    "repo_url": "https://github.com/vaadin/flow/pull/21251",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21251",
    "dockerfile": "",
    "pr_merged_at": "2025-04-11T06:39:15.000Z",
    "patch": "diff --git a/flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java b/flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java\nindex 73fb485d024..2af2744c7c9 100644\n--- a/flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java\n+++ b/flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java\n@@ -33,6 +33,7 @@\n import java.util.stream.Collectors;\n \n import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.resolver.filter.ScopeArtifactFilter;\n import org.apache.maven.plugin.Mojo;\n import org.apache.maven.plugin.MojoExecution;\n import org.apache.maven.project.MavenProject;\n@@ -57,6 +58,8 @@ public final class Reflector {\n     private static final Set<String> REQUIRED_PLUGIN_DEPENDENCIES = Set.of(\n             \"org.reflections:reflections:jar\",\n             \"org.zeroturnaround:zt-exec:jar\");\n+    private static final ScopeArtifactFilter PRODUCTION_SCOPE_FILTER = new ScopeArtifactFilter(\n+            Artifact.SCOPE_COMPILE_PLUS_RUNTIME);\n \n     private final URLClassLoader isolatedClassLoader;\n     private List<String> dependenciesIncompatibility;\n@@ -269,15 +272,7 @@ private static URLClassLoader createIsolatedClassLoader(\n                         .contains(artifact.getGroupId()))\n                 .filter(artifact -> artifact.getFile() != null\n                         && artifact.getArtifactHandler().isAddedToClasspath()\n-                        && (Artifact.SCOPE_COMPILE.equals(artifact.getScope())\n-                                || Artifact.SCOPE_RUNTIME\n-                                        .equals(artifact.getScope())\n-                                || Artifact.SCOPE_SYSTEM\n-                                        .equals(artifact.getScope())\n-                                || (Artifact.SCOPE_PROVIDED\n-                                        .equals(artifact.getScope())\n-                                        && artifact.getFile().getPath().matches(\n-                                                INCLUDE_FROM_COMPILE_DEPS_REGEX))))\n+                        && PRODUCTION_SCOPE_FILTER.include(artifact))\n                 .collect(Collectors.toMap(keyMapper, Function.identity())));\n \n         if (mojoExecution != null) {\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java b/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java\nindex 78f04c89fe5..c80fa18bf73 100644\n--- a/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java\n+++ b/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java\n@@ -41,6 +41,7 @@\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.resolver.filter.ScopeArtifactFilter;\n import org.apache.maven.plugin.Mojo;\n import org.apache.maven.plugin.MojoExecution;\n import org.apache.maven.project.MavenProject;\n@@ -70,6 +71,8 @@ public final class Reflector {\n     private static final Set<String> REQUIRED_PLUGIN_DEPENDENCIES = Set.of(\n             \"org.reflections:reflections:jar\",\n             \"org.zeroturnaround:zt-exec:jar\");\n+    private static final ScopeArtifactFilter PRODUCTION_SCOPE_FILTER = new ScopeArtifactFilter(\n+            Artifact.SCOPE_COMPILE_PLUS_RUNTIME);\n     private static final Logger log = LoggerFactory.getLogger(Reflector.class);\n \n     private final URLClassLoader isolatedClassLoader;\n@@ -413,16 +416,10 @@ record FilterableArtifact(Artifact artifact, boolean scan) {\n                 filteredUrls.toArray(new URL[0]), mavenApiClassLoader);\n     }\n \n-    // TODO: include also provided scope\n     private static boolean isProductionDependency(Artifact artifact) {\n         return artifact.getFile() != null\n                 && artifact.getArtifactHandler().isAddedToClasspath()\n-                && (Artifact.SCOPE_COMPILE.equals(artifact.getScope())\n-                        || Artifact.SCOPE_RUNTIME.equals(artifact.getScope())\n-                        || Artifact.SCOPE_SYSTEM.equals(artifact.getScope())\n-                        || (Artifact.SCOPE_PROVIDED.equals(artifact.getScope())\n-                                && artifact.getFile().getPath().matches(\n-                                        INCLUDE_FROM_COMPILE_DEPS_REGEX)));\n+                && PRODUCTION_SCOPE_FILTER.include(artifact);\n     }\n \n     /**\n",
    "test_patch": "diff --git a/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/ReflectorTest.java b/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/ReflectorTest.java\nindex 8362518e1c4..ab526537f2b 100644\n--- a/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/ReflectorTest.java\n+++ b/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/ReflectorTest.java\n@@ -199,10 +199,12 @@ public void reflector_fromProject_getsIsolatedClassLoader()\n \n         Set<String> urlSet = Arrays.stream(isolatedClassLoader.getURLs())\n                 .map(URL::toExternalForm).collect(Collectors.toSet());\n-        Assert.assertEquals(4, urlSet.size());\n+        Assert.assertEquals(5, urlSet.size());\n         Assert.assertTrue(urlSet.contains(toURLExternalForm(outputDirectory)));\n         Assert.assertTrue(urlSet.contains(\n                 toURLExternalForm(\"com.vaadin.test-compile-1.0.jar\")));\n+        Assert.assertTrue(urlSet.contains(\n+                toURLExternalForm(\"com.vaadin.test-provided-1.0.jar\")));\n         Assert.assertTrue(urlSet\n                 .contains(toURLExternalForm(\"com.vaadin.test-system-1.0.jar\")));\n         Assert.assertTrue(urlSet\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21246",
    "pr_id": 21246,
    "issue_id": 21229,
    "repo": "vaadin/flow",
    "problem_statement": "DownloadHandler core part\n### Describe your motivation\n\nA decomposed part for DownloadHandler for easier efforts split.\n\n### Describe the solution you'd like\n\nAdd the `DownloadHandler` interface, `DownloadEvent` class and implementation that is based on `ElementRequestHandler`.\n",
    "issue_word_count": 34,
    "test_files_count": 5,
    "non_test_files_count": 9,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/server/DownloadHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/DownloadRequest.java",
      "flow-server/src/main/java/com/vaadin/flow/server/StreamResourceRegistry.java",
      "flow-server/src/main/java/com/vaadin/flow/server/streams/AbstractDownloadHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/streams/ClassDownloadHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/streams/DownloadResponse.java",
      "flow-server/src/main/java/com/vaadin/flow/server/streams/FileDownloadHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/streams/InputStreamDownloadHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/streams/ServletResourceDownloadHandler.java",
      "flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/DownloadHandlerView.java",
      "flow-tests/test-root-context/src/main/resources/com/vaadin/flow/uitest/ui/class-file.json",
      "flow-tests/test-root-context/src/main/resources/download.json",
      "flow-tests/test-root-context/src/main/webapp/WEB-INF/servlet.json",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/DownloadHandlerIT.java"
    ],
    "pr_changed_test_files": [
      "flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/DownloadHandlerView.java",
      "flow-tests/test-root-context/src/main/resources/com/vaadin/flow/uitest/ui/class-file.json",
      "flow-tests/test-root-context/src/main/resources/download.json",
      "flow-tests/test-root-context/src/main/webapp/WEB-INF/servlet.json",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/DownloadHandlerIT.java"
    ],
    "base_commit": "8903acb3b59982d25e45605ebfddeaac31ab3ebf",
    "head_commit": "f8f097b72526878fea0be2f46a4cb12d5ba4aa4f",
    "repo_url": "https://github.com/vaadin/flow/pull/21246",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21246",
    "dockerfile": "",
    "pr_merged_at": "2025-04-24T08:02:16.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/DownloadHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/DownloadHandler.java\nnew file mode 100644\nindex 00000000000..5ef2edf71be\n--- /dev/null\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/DownloadHandler.java\n@@ -0,0 +1,183 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.server;\n+\n+import java.io.File;\n+import java.util.Optional;\n+\n+import com.vaadin.flow.dom.Element;\n+import com.vaadin.flow.function.SerializableFunction;\n+import com.vaadin.flow.server.streams.ClassDownloadHandler;\n+import com.vaadin.flow.server.streams.DownloadResponse;\n+import com.vaadin.flow.server.streams.FileDownloadHandler;\n+import com.vaadin.flow.server.streams.InputStreamDownloadHandler;\n+import com.vaadin.flow.server.streams.ServletResourceDownloadHandler;\n+\n+/**\n+ * Interface for handling download of data from the server to the client.\n+ *\n+ * @since 24.8\n+ */\n+@FunctionalInterface\n+public interface DownloadHandler extends ElementRequestHandler {\n+\n+    /**\n+     * Method that is called when the client wants to download from the url\n+     * stored for this specific handler registration.\n+     *\n+     * @param event\n+     *            download event containing the necessary data for writing the\n+     *            response\n+     */\n+    void handleDownloadRequest(DownloadRequest event);\n+\n+    default void handleRequest(VaadinRequest request, VaadinResponse response,\n+            VaadinSession session, Element owner) {\n+        String fileName = getUrlPostfix() == null ? \"\" : getUrlPostfix();\n+\n+        DownloadRequest event = new DownloadRequest(request, response, session,\n+                fileName);\n+        event.withOwningComponent(owner)\n+                .withContentType(Optional\n+                        .ofNullable(response.getService().getMimeType(fileName))\n+                        .orElse(\"application/octet-stream\"));\n+\n+        handleDownloadRequest(event);\n+    }\n+\n+    /**\n+     * Get a download handler for serving given {@link File}.\n+     *\n+     * @param file\n+     *            file to server for download\n+     * @return DownloadHandler instance for file\n+     */\n+    static DownloadHandler forFile(File file) {\n+        return new FileDownloadHandler(file);\n+    }\n+\n+    /**\n+     * Get a download handler for serving given {@link File}.\n+     *\n+     * @param file\n+     *            file to server for download\n+     * @param name\n+     *            download name to use\n+     * @return DownloadHandler instance for file\n+     */\n+    static DownloadHandler forFile(File file, String name) {\n+        return new FileDownloadHandler(file, name);\n+    }\n+\n+    /**\n+     * Generate a download handler for class resource.\n+     * <p>\n+     * For instance for the file {@code resources/com/example/ui/MyData.json}\n+     * and class {@code com.example.ui.MyData} the definition would be\n+     * {@code forClassResource(MyData.class, \"MyData.json\")}\n+     *\n+     * @param clazz\n+     *            class for resource module\n+     * @param resourceName\n+     *            name of class resource\n+     * @return DownloadHandler instance for class resource\n+     */\n+    static DownloadHandler forClassResource(Class<?> clazz,\n+            String resourceName) {\n+        return new ClassDownloadHandler(clazz, resourceName);\n+    }\n+\n+    /**\n+     * Generate a download handler for class resource.\n+     * <p>\n+     * For instance for the file {@code resources/com/example/ui/MyData.json}\n+     * and class {@code com.example.ui.MyData} the definition would be\n+     * {@code forClassResource(MyData.class, \"MyData.json\", \"Data.json\")}\n+     *\n+     * @param clazz\n+     *            class for resource module\n+     * @param resourceName\n+     *            name of class resource\n+     * @param fileName\n+     *            download resourceName to use\n+     * @return DownloadHandler instance for class resource\n+     */\n+    static DownloadHandler forClassResource(Class<?> clazz, String resourceName,\n+            String fileName) {\n+        return new ClassDownloadHandler(clazz, resourceName, fileName);\n+    }\n+\n+    /**\n+     * Generate a download handler for a servlet resource.\n+     * <p>\n+     * For instance for the file {@code webapp/WEB-INF/servlet.json} the path\n+     * would be {@code /WEB-INF/servlet.json}\n+     *\n+     * @param path\n+     *            the servlet path to the file\n+     * @return DownloadHandler instance for servlet resource\n+     */\n+    static DownloadHandler forServletResource(String path) {\n+        return new ServletResourceDownloadHandler(path);\n+    }\n+\n+    /**\n+     * Generate a download handler for a servlet resource.\n+     * <p>\n+     * For instance for the file {@code webapp/WEB-INF/servlet.json} the path\n+     * would be {@code /WEB-INF/servlet.json}\n+     * <p>\n+     * Name is appended to the download url as the logical name of the target\n+     * file.\n+     *\n+     * @param path\n+     *            the servlet path to the file\n+     * @param name\n+     *            resource name\n+     * @return DownloadHandler instance for servlet resource\n+     */\n+    static DownloadHandler forServletResource(String path, String name) {\n+        return new ServletResourceDownloadHandler(path, name);\n+    }\n+\n+    /**\n+     * Generate a function for downloading from a generated inputStream.\n+     *\n+     * @param handler\n+     *            handler function that will be called on download\n+     * @return DownloadHandler instance for inputStream\n+     */\n+    static DownloadHandler fromInputStream(\n+            SerializableFunction<DownloadRequest, DownloadResponse> handler) {\n+        return new InputStreamDownloadHandler(handler);\n+    }\n+\n+    /**\n+     * Generate a function for downloading from a generated inputStream.\n+     *\n+     * @param handler\n+     *            handler function that will be called on download\n+     * @param name\n+     *            resource name\n+     * @return DownloadHandler instance for inputStream\n+     */\n+    static DownloadHandler fromInputStream(\n+            SerializableFunction<DownloadRequest, DownloadResponse> handler,\n+            String name) {\n+        return new InputStreamDownloadHandler(handler, name);\n+    }\n+}\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/DownloadRequest.java b/flow-server/src/main/java/com/vaadin/flow/server/DownloadRequest.java\nnew file mode 100644\nindex 00000000000..c057e7cd6d7\n--- /dev/null\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/DownloadRequest.java\n@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.server;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.PrintWriter;\n+import java.io.Serializable;\n+import java.io.UncheckedIOException;\n+import java.util.Optional;\n+\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.dom.Element;\n+\n+/**\n+ * Class containing data on requested client download.\n+ *\n+ * @since 24.8\n+ */\n+public class DownloadRequest implements Serializable {\n+\n+    private final VaadinRequest request;\n+    private final VaadinResponse response;\n+    private final VaadinSession session;\n+\n+    private final String fileName;\n+    private String contentType;\n+\n+    private Component owningComponent;\n+\n+    /**\n+     * Create a new download event with required data.\n+     *\n+     * @param request\n+     *            current request\n+     * @param response\n+     *            current response to write response data to\n+     * @param session\n+     *            current session\n+     * @param fileName\n+     *            defined download file name\n+     */\n+    public DownloadRequest(VaadinRequest request, VaadinResponse response,\n+            VaadinSession session, String fileName) {\n+        this.request = request;\n+        this.response = response;\n+        this.session = session;\n+        this.fileName = fileName;\n+    }\n+\n+    /**\n+     * Set the owning component for the download event from the element instance\n+     * if a component is available.\n+     *\n+     * @param owningElement\n+     *            owning element for the event\n+     * @return this Event instance\n+     */\n+    DownloadRequest withOwningComponent(Element owningElement) {\n+        if (owningElement != null) {\n+            Optional<Component> component = owningElement.getComponent();\n+            component.ifPresent(this::withOwningComponent);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Set the owning component for the download event.\n+     *\n+     * @param owningComponent\n+     *            owning component for the event\n+     * @return this Event instance\n+     */\n+    DownloadRequest withOwningComponent(Component owningComponent) {\n+        this.owningComponent = owningComponent;\n+        return this;\n+    }\n+\n+    /**\n+     * Set the DownloadEvent content type.\n+     *\n+     * @param contentType\n+     *            content type of the event content\n+     * @return this Event instance\n+     */\n+    DownloadRequest withContentType(String contentType) {\n+        this.contentType = contentType;\n+        return this;\n+    }\n+\n+    /**\n+     * Returns a <code>OutputStream</code> for writing binary data in the\n+     * response.\n+     * <p>\n+     * Either this method or getWriter() may be called to write the response,\n+     * not both.\n+     *\n+     * @return a <code>OutputStream</code> for writing binary data or empty\n+     *         optional if an error happened\n+     */\n+    public OutputStream getOutputStream() {\n+        try {\n+            return response.getOutputStream();\n+        } catch (IOException e) {\n+            LoggerFactory.getLogger(DownloadRequest.class)\n+                    .error(\"Error getting output stream\", e);\n+            throw new UncheckedIOException(\"Error getting output stream\", e);\n+        }\n+    }\n+\n+    /**\n+     * Returns a <code>PrintWriter</code> object that can send character text to\n+     * the client. The PrintWriter uses the character encoding defined using\n+     * setContentType.\n+     * <p>\n+     * Either this method or getOutputStream() may be called to write the\n+     * response, not both.\n+     *\n+     * @return a <code>PrintWriter</code> for writing character text or empty\n+     *         optional if an error happened\n+     */\n+    public PrintWriter getWriter() {\n+        try {\n+            return response.getWriter();\n+        } catch (IOException e) {\n+            LoggerFactory.getLogger(DownloadRequest.class)\n+                    .error(\"Error getting print writer\");\n+            throw new UncheckedIOException(\"Error getting writer\", e);\n+        }\n+    }\n+\n+    /**\n+     * Get {@link VaadinRequest} for download event.\n+     *\n+     * @return vaadin request\n+     */\n+    public VaadinRequest getRequest() {\n+        return request;\n+    }\n+\n+    /**\n+     * Get {@link VaadinResponse} for download event.\n+     *\n+     * @return vaadin response\n+     */\n+    public VaadinResponse getResponse() {\n+        return response;\n+    }\n+\n+    /**\n+     * Get {@link VaadinSession} for download event.\n+     *\n+     * @return vaadin session\n+     */\n+    public VaadinSession getSession() {\n+        return session;\n+    }\n+\n+    /**\n+     * Get the set file name.\n+     *\n+     * @return file name\n+     */\n+    public String getFileName() {\n+        return fileName == null ? \"\" : fileName;\n+    }\n+\n+    /**\n+     * Get the content type for the data to download.\n+     *\n+     * @return set content type\n+     */\n+    public String getContentType() {\n+        return contentType;\n+    }\n+\n+    /**\n+     * Get owner {@link Component} for this event.\n+     *\n+     * @return owning component or null in none defined\n+     */\n+    public Component getOwningComponent() {\n+        return owningComponent;\n+    }\n+}\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/StreamResourceRegistry.java b/flow-server/src/main/java/com/vaadin/flow/server/StreamResourceRegistry.java\nindex 1606b82711d..192e427ae14 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/StreamResourceRegistry.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/StreamResourceRegistry.java\n@@ -22,6 +22,7 @@\n import java.util.Map;\n import java.util.Optional;\n \n+import com.vaadin.flow.component.UI;\n import com.vaadin.flow.dom.Element;\n import com.vaadin.flow.server.communication.StreamRequestHandler;\n \n@@ -85,7 +86,7 @@ public StreamResourceRegistry(VaadinSession session) {\n      * attribute value or property value) via the registration handler. The\n      * registration handler should be used to unregister resource when it's not\n      * needed anymore. Note that it is the developer's responsibility to\n-     * unregister resources. Otherwise resources won't be garbage collected\n+     * unregister resources. Otherwise, resources won't be garbage collected\n      * until the session expires which causes memory leak.\n      *\n      * @param resource\n@@ -102,6 +103,29 @@ public StreamRegistration registerResource(\n         return registration;\n     }\n \n+    /**\n+     * Registers a stream resource in the session and returns registration\n+     * handler. Registration is done without a specific owner element and thus\n+     * bound to UI element.\n+     * <p>\n+     * You can get resource URI to use it in the application (e.g. set an\n+     * attribute value or property value) via the registration handler. The\n+     * registration handler should be used to unregister the resource when it's\n+     * not needed anymore. Note that it is the developer's responsibility to\n+     * unregister resources. Otherwise, resources won't be garbage collected\n+     * until the session expires which causes memory leak.\n+     *\n+     * @param elementRequestHandler\n+     *            element request handler to register\n+     *\n+     * @return registration handler\n+     */\n+    public StreamRegistration registerResource(\n+            ElementRequestHandler elementRequestHandler) {\n+        return registerResource(elementRequestHandler,\n+                UI.getCurrent().getElement());\n+    }\n+\n     /**\n      * Registers a stream resource in the session and returns registration\n      * handler.\n@@ -110,7 +134,7 @@ public StreamRegistration registerResource(\n      * attribute value or property value) via the registration handler. The\n      * registration handler should be used to unregister the resource when it's\n      * not needed anymore. Note that it is the developer's responsibility to\n-     * unregister resources. Otherwise resources won't be garbage collected\n+     * unregister resources. Otherwise, resources won't be garbage collected\n      * until the session expires which causes memory leak.\n      *\n      * @param elementRequestHandler\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/streams/AbstractDownloadHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/streams/AbstractDownloadHandler.java\nnew file mode 100644\nindex 00000000000..498fc3dac17\n--- /dev/null\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/streams/AbstractDownloadHandler.java\n@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.server.streams;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import com.vaadin.flow.server.DownloadHandler;\n+import com.vaadin.flow.server.VaadinSession;\n+\n+/**\n+ * Abstract class for common methods used in pre-made download handlers.\n+ *\n+ * @since 24.8\n+ */\n+public abstract class AbstractDownloadHandler implements DownloadHandler {\n+\n+    /**\n+     * Read buffer amount of bytes from the input stream.\n+     *\n+     * @param session\n+     *            vaadin session in use\n+     * @param source\n+     *            input stream source\n+     * @param buffer\n+     *            byte buffer to read into\n+     * @return amount of bytes read into buffer\n+     * @throws IOException\n+     *             If the first byte cannot be read for any reason other than\n+     *             the end of the file, if the input stream has been closed, or\n+     *             if some other I/O error occurs.\n+     */\n+    protected int read(VaadinSession session, InputStream source, byte[] buffer)\n+            throws IOException {\n+        session.lock();\n+        try {\n+            return source.read(buffer);\n+        } finally {\n+            session.unlock();\n+        }\n+    }\n+\n+}\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/streams/ClassDownloadHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/streams/ClassDownloadHandler.java\nnew file mode 100644\nindex 00000000000..46f6c4e5925\n--- /dev/null\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/streams/ClassDownloadHandler.java\n@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.server.streams;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.server.DownloadRequest;\n+import com.vaadin.flow.server.HttpStatusCode;\n+\n+/**\n+ * Download handler for serving a class resource.\n+ * <p>\n+ * For instance for the file {@code resources/com/example/ui/MyData.json} and\n+ * class {@code com.example.ui.MyData} the definition would be\n+ * {@code forClassResource(MyData.class, \"MyData.json\")}\n+ *\n+ * @since 24.8\n+ */\n+public class ClassDownloadHandler extends AbstractDownloadHandler {\n+\n+    private final Class<?> clazz;\n+    private final String resourceName;\n+    private String fileName;\n+\n+    /**\n+     * Create a class resource download handler with the resource name as the\n+     * url postfix (file name).\n+     *\n+     * @param clazz\n+     *            class to use for getting resource\n+     * @param resourceName\n+     *            resource to get\n+     */\n+    public ClassDownloadHandler(Class<?> clazz, String resourceName) {\n+        this(clazz, resourceName, null);\n+    }\n+\n+    /**\n+     * Create a class resource download handler with the given file name as the\n+     * url postfix.\n+     *\n+     * @param clazz\n+     *            class to use for getting resource\n+     * @param resourceName\n+     *            resource to get\n+     * @param fileName\n+     *            name to use as url postfix\n+     */\n+    public ClassDownloadHandler(Class<?> clazz, String resourceName,\n+            String fileName) {\n+        this.clazz = clazz;\n+        this.resourceName = resourceName;\n+        this.fileName = fileName;\n+\n+        if (clazz.getResource(resourceName) == null) {\n+            LoggerFactory.getLogger(ClassDownloadHandler.class).warn(\n+                    \"No resource found for '{}'. The resource will receive a 404 not found response.\",\n+                    resourceName);\n+        }\n+    }\n+\n+    @Override\n+    public void handleDownloadRequest(DownloadRequest event) {\n+        if (clazz.getResource(resourceName) == null) {\n+            event.getResponse().setStatus(HttpStatusCode.NOT_FOUND.getCode());\n+            return;\n+        }\n+        final int BUFFER_SIZE = 1024;\n+        try (OutputStream outputStream = event.getOutputStream();\n+                InputStream inputStream = clazz\n+                        .getResourceAsStream(resourceName)) {\n+            byte[] buf = new byte[BUFFER_SIZE];\n+            int n;\n+            while ((n = read(event.getSession(), inputStream, buf)) >= 0) {\n+                outputStream.write(buf, 0, n);\n+            }\n+        } catch (IOException ioe) {\n+            // Set status before output is closed (see #8740)\n+            event.getResponse()\n+                    .setStatus(HttpStatusCode.INTERNAL_SERVER_ERROR.getCode());\n+            throw new RuntimeException(ioe);\n+        }\n+\n+        event.getResponse().setContentType(event.getContentType());\n+    }\n+\n+    @Override\n+    public String getUrlPostfix() {\n+        if (fileName != null) {\n+            return fileName;\n+        }\n+        if (resourceName.contains(\"/\")) {\n+            return resourceName.substring(resourceName.lastIndexOf('/') + 1);\n+        }\n+        return resourceName;\n+    }\n+}\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/streams/DownloadResponse.java b/flow-server/src/main/java/com/vaadin/flow/server/streams/DownloadResponse.java\nnew file mode 100644\nindex 00000000000..24be735c366\n--- /dev/null\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/streams/DownloadResponse.java\n@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.server.streams;\n+\n+import java.io.InputStream;\n+import java.io.Serializable;\n+\n+import com.vaadin.flow.server.HttpStatusCode;\n+\n+/**\n+ * Data class containing required information for sending the given input stream\n+ * to the client.\n+ *\n+ * @since 24.8\n+ */\n+public class DownloadResponse implements Serializable {\n+\n+    private final InputStream inputStream;\n+\n+    private final String fileName;\n+    private final String contentType;\n+    private final int size;\n+\n+    private Integer error;\n+\n+    /**\n+     * Create a download response with content stream and content data.\n+     *\n+     * @param inputStream\n+     *            data stream for data to send to client\n+     * @param fileName\n+     *            file name of download\n+     * @param contentType\n+     *            content type\n+     * @param size\n+     *            byte size of stream\n+     */\n+    public DownloadResponse(InputStream inputStream, String fileName,\n+            String contentType, int size) {\n+        this.inputStream = inputStream;\n+        this.fileName = fileName;\n+        this.contentType = contentType;\n+        this.size = size;\n+    }\n+\n+    /**\n+     * Get the InputStream to read the content data from.\n+     *\n+     * @return content InputStream\n+     */\n+    public InputStream getInputStream() {\n+        return inputStream;\n+    }\n+\n+    /**\n+     * Get the defined file name.\n+     *\n+     * @return file name\n+     */\n+    public String getFileName() {\n+        return fileName;\n+    }\n+\n+    /**\n+     * Get the content type.\n+     *\n+     * @return content type\n+     */\n+    public String getContentType() {\n+        return contentType;\n+    }\n+\n+    /**\n+     * Get the defined size for the content\n+     *\n+     * @return content size\n+     */\n+    public int getSize() {\n+        return size;\n+    }\n+\n+    /**\n+     * Generate an error response for download.\n+     *\n+     * @param statusCode\n+     *            error status code\n+     * @return DownloadResponse for request\n+     */\n+    public static DownloadResponse error(int statusCode) {\n+        DownloadResponse downloadResponse = new DownloadResponse(null, null,\n+                null, -1);\n+        downloadResponse.setError(statusCode);\n+        return downloadResponse;\n+    }\n+\n+    /**\n+     * Generate an error response for download.\n+     *\n+     * @param statusCode\n+     *            error status code\n+     * @return DownloadResponse for request\n+     */\n+    public static DownloadResponse error(HttpStatusCode statusCode) {\n+        DownloadResponse downloadResponse = new DownloadResponse(null, null,\n+                null, -1);\n+        downloadResponse.setError(statusCode);\n+        return downloadResponse;\n+    }\n+\n+    /**\n+     * Check if response has an error code.\n+     *\n+     * @return {@code true} is error code has been set\n+     */\n+    public boolean hasError() {\n+        return error != null;\n+    }\n+\n+    /**\n+     * Set http error code.\n+     *\n+     * @param error\n+     *            error code\n+     */\n+    public void setError(int error) {\n+        this.error = error;\n+    }\n+\n+    /**\n+     * Set http error code.\n+     *\n+     * @param error\n+     *            error code\n+     */\n+    public void setError(HttpStatusCode error) {\n+        this.error = error.getCode();\n+    }\n+\n+    /**\n+     * Get the set error code.\n+     *\n+     * @return error code or -1 if not set\n+     */\n+    public int getError() {\n+        if (error == null) {\n+            return -1;\n+        }\n+        return error;\n+    }\n+}\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/streams/FileDownloadHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/streams/FileDownloadHandler.java\nnew file mode 100644\nindex 00000000000..5f88983b9a7\n--- /dev/null\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/streams/FileDownloadHandler.java\n@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.server.streams;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+\n+import com.vaadin.flow.server.DownloadRequest;\n+import com.vaadin.flow.server.HttpStatusCode;\n+import com.vaadin.flow.server.VaadinResponse;\n+import com.vaadin.flow.server.VaadinSession;\n+\n+/**\n+ * Download handler for use with a given File that will be read and written as\n+ * binary data to the response.\n+ *\n+ * @since 24.8\n+ */\n+public class FileDownloadHandler extends AbstractDownloadHandler {\n+\n+    private final File file;\n+    private final String name;\n+\n+    /**\n+     * Create a download handler for given file. Url postfix will be used as\n+     * {@code file.getName()}\n+     *\n+     * @param file\n+     *            file to download\n+     */\n+    public FileDownloadHandler(File file) {\n+        this(file, null);\n+    }\n+\n+    /**\n+     * Create a download handler for given file.\n+     *\n+     * @param file\n+     *            file to download\n+     * @param name\n+     *            url postfix name to use instead of file name\n+     */\n+    public FileDownloadHandler(File file, String name) {\n+        this.file = file;\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public void handleDownloadRequest(DownloadRequest event) {\n+        VaadinSession session = event.getSession();\n+        VaadinResponse response = event.getResponse();\n+\n+        final int BUFFER_SIZE = 1024;\n+        try (OutputStream outputStream = event.getOutputStream();\n+                FileInputStream inputStream = new FileInputStream(file)) {\n+            byte[] buf = new byte[BUFFER_SIZE];\n+            int n;\n+            while ((n = read(session, inputStream, buf)) >= 0) {\n+                outputStream.write(buf, 0, n);\n+            }\n+        } catch (IOException ioe) {\n+            // Set status before output is closed (see #8740)\n+            response.setStatus(HttpStatusCode.INTERNAL_SERVER_ERROR.getCode());\n+            throw new RuntimeException(ioe);\n+        }\n+        response.setContentType(event.getContentType());\n+        response.setContentLength(Math.toIntExact(file.length()));\n+    }\n+\n+    @Override\n+    public String getUrlPostfix() {\n+        if (name != null) {\n+            return name;\n+        }\n+        return file.getName();\n+    }\n+}\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/streams/InputStreamDownloadHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/streams/InputStreamDownloadHandler.java\nnew file mode 100644\nindex 00000000000..6a77bfc2b7d\n--- /dev/null\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/streams/InputStreamDownloadHandler.java\n@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.server.streams;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+import com.vaadin.flow.function.SerializableFunction;\n+import com.vaadin.flow.server.DownloadRequest;\n+import com.vaadin.flow.server.HttpStatusCode;\n+import com.vaadin.flow.server.VaadinResponse;\n+\n+/**\n+ * Download handler for serving an input stream for client download.\n+ *\n+ * @since 24.8\n+ */\n+public class InputStreamDownloadHandler extends AbstractDownloadHandler {\n+\n+    private final SerializableFunction<DownloadRequest, DownloadResponse> handler;\n+    private final String name;\n+\n+    /**\n+     * Create a input stream download handler for given event -> response\n+     * function.\n+     *\n+     * @param handler\n+     *            serializable function for handling download\n+     */\n+    public InputStreamDownloadHandler(\n+            SerializableFunction<DownloadRequest, DownloadResponse> handler) {\n+        this(handler, null);\n+    }\n+\n+    /**\n+     * Create a input stream download handler for given event -> response\n+     * function.\n+     *\n+     * @param handler\n+     *            serializable function for handling download\n+     * @param name\n+     *            name to use as the url postfix as download response is not\n+     *            generated before postfix\n+     */\n+    public InputStreamDownloadHandler(\n+            SerializableFunction<DownloadRequest, DownloadResponse> handler,\n+            String name) {\n+        this.handler = handler;\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public void handleDownloadRequest(DownloadRequest event) {\n+        DownloadResponse download = handler.apply(event);\n+        VaadinResponse response = event.getResponse();\n+        if (download.hasError()) {\n+            response.setStatus(download.getError());\n+            return;\n+        }\n+\n+        final int BUFFER_SIZE = 1024;\n+        try (OutputStream outputStream = event.getOutputStream();\n+                InputStream inputStream = download.getInputStream()) {\n+            byte[] buf = new byte[BUFFER_SIZE];\n+            int n;\n+            while ((n = read(event.getSession(), inputStream, buf)) >= 0) {\n+                outputStream.write(buf, 0, n);\n+            }\n+        } catch (IOException ioe) {\n+            // Set status before output is closed (see #8740)\n+            response.setStatus(HttpStatusCode.INTERNAL_SERVER_ERROR.getCode());\n+            throw new RuntimeException(ioe);\n+        }\n+\n+        response.setContentType(download.getContentType());\n+        response.setContentLength(download.getSize());\n+        response.setHeader(\"Content-Disposition\",\n+                \"attachment;filename=\" + download.getFileName());\n+    }\n+\n+    @Override\n+    public String getUrlPostfix() {\n+        return name;\n+    }\n+}\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/streams/ServletResourceDownloadHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/streams/ServletResourceDownloadHandler.java\nnew file mode 100644\nindex 00000000000..12da97d88f1\n--- /dev/null\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/streams/ServletResourceDownloadHandler.java\n@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.server.streams;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+import com.vaadin.flow.server.DownloadRequest;\n+import com.vaadin.flow.server.HttpStatusCode;\n+import com.vaadin.flow.server.VaadinService;\n+import com.vaadin.flow.server.VaadinServletService;\n+\n+/**\n+ * Download handler for serving a servlet resource for client download.\n+ * <p>\n+ * For instance for the file {@code webapp/WEB-INF/servlet.json} the path would\n+ * be {@code /WEB-INF/servlet.json}\n+ *\n+ * @since 24.8\n+ */\n+public class ServletResourceDownloadHandler extends AbstractDownloadHandler {\n+\n+    private final String path;\n+    private final String name;\n+\n+    /**\n+     * Create download handler for servlet resource. Uses url postfix as file\n+     * name from path\n+     *\n+     * @param path\n+     *            path of servlet resource\n+     */\n+    public ServletResourceDownloadHandler(String path) {\n+        this(path, null);\n+    }\n+\n+    /**\n+     * Create download handler for servlet resource.\n+     *\n+     * @param path\n+     *            path of servlet resource\n+     * @param name\n+     *            name to use as url postfix (can be given as empty string)\n+     */\n+    public ServletResourceDownloadHandler(String path, String name) {\n+        this.path = path;\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public void handleDownloadRequest(DownloadRequest event) {\n+        VaadinService service = event.getRequest().getService();\n+        if (service instanceof VaadinServletService servletService) {\n+            final int BUFFER_SIZE = 1024;\n+            try (OutputStream outputStream = event.getOutputStream();\n+                    InputStream inputStream = servletService.getServlet()\n+                            .getServletContext().getResourceAsStream(path)) {\n+                byte[] buf = new byte[BUFFER_SIZE];\n+                int n;\n+                while ((n = read(event.getSession(), inputStream, buf)) >= 0) {\n+                    outputStream.write(buf, 0, n);\n+                }\n+            } catch (IOException ioe) {\n+                // Set status before output is closed (see #8740)\n+                event.getResponse().setStatus(\n+                        HttpStatusCode.INTERNAL_SERVER_ERROR.getCode());\n+                throw new RuntimeException(ioe);\n+            }\n+\n+            event.getResponse().setContentType(event.getContentType());\n+        }\n+    }\n+\n+    @Override\n+    public String getUrlPostfix() {\n+        if (name != null) {\n+            return name;\n+        }\n+        if (path.contains(\"/\")) {\n+            return path.substring(path.lastIndexOf('/') + 1);\n+        }\n+        return path;\n+    }\n+}\n",
    "test_patch": "diff --git a/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/DownloadHandlerView.java b/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/DownloadHandlerView.java\nnew file mode 100644\nindex 00000000000..130b584ebb9\n--- /dev/null\n+++ b/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/DownloadHandlerView.java\n@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.uitest.ui;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.vaadin.flow.component.DetachEvent;\n+import com.vaadin.flow.component.html.Anchor;\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.component.html.NativeButton;\n+import com.vaadin.flow.router.Route;\n+import com.vaadin.flow.server.DownloadRequest;\n+import com.vaadin.flow.server.DownloadHandler;\n+import com.vaadin.flow.server.HttpStatusCode;\n+import com.vaadin.flow.server.StreamRegistration;\n+import com.vaadin.flow.server.VaadinSession;\n+import com.vaadin.flow.server.streams.DownloadResponse;\n+import com.vaadin.flow.uitest.servlet.ViewTestLayout;\n+\n+@Route(value = \"com.vaadin.flow.uitest.ui.DownloadHandlerView\", layout = ViewTestLayout.class)\n+public class DownloadHandlerView extends Div {\n+\n+    List<StreamRegistration> registrations = new ArrayList<>();\n+\n+    public DownloadHandlerView() {\n+\n+        DownloadHandler downloadHandler = new DownloadHandler() {\n+            @Override\n+            public void handleDownloadRequest(DownloadRequest event) {\n+                event.getWriter().print(\"foo\");\n+            }\n+\n+            @Override\n+            public String getUrlPostfix() {\n+                return \"file+.jpg\";\n+            }\n+        };\n+\n+        StreamRegistration streamRegistration = VaadinSession.getCurrent()\n+                .getResourceRegistry().registerResource(downloadHandler);\n+        registrations.add(streamRegistration);\n+\n+        Anchor handlerDownload = new Anchor(\"\", \"Textual DownloadHandler\");\n+        handlerDownload.setHref(streamRegistration.getResource());\n+        handlerDownload.setId(\"download-handler-text\");\n+\n+        File jsonFile = new File(getClass().getClassLoader()\n+                .getResource(\"download.json\").getFile());\n+        streamRegistration = VaadinSession.getCurrent().getResourceRegistry()\n+                .registerResource(DownloadHandler.forFile(jsonFile));\n+        registrations.add(streamRegistration);\n+\n+        Anchor fileDownload = new Anchor(\"\", \"File DownloadHandler shorthand\");\n+        fileDownload.setHref(streamRegistration.getResource());\n+        fileDownload.setId(\"download-handler-file\");\n+\n+        streamRegistration = VaadinSession.getCurrent().getResourceRegistry()\n+                .registerResource(DownloadHandler\n+                        .forClassResource(this.getClass(), \"class-file.json\"));\n+        registrations.add(streamRegistration);\n+\n+        Anchor classDownload = new Anchor(\"\",\n+                \"Class resource DownloadHandler shorthand\");\n+        classDownload.setHref(streamRegistration.getResource());\n+        classDownload.setId(\"download-handler-class\");\n+\n+        streamRegistration = VaadinSession.getCurrent().getResourceRegistry()\n+                .registerResource(DownloadHandler\n+                        .forServletResource(\"/WEB-INF/servlet.json\"));\n+        registrations.add(streamRegistration);\n+\n+        Anchor servletDownload = new Anchor(\"\",\n+                \"Servlet resource DownloadHandler shorthand\");\n+        servletDownload.setHref(streamRegistration.getResource());\n+        servletDownload.setId(\"download-handler-servlet\");\n+\n+        DownloadHandler inputStream = DownloadHandler\n+                .fromInputStream(downloadEvent -> new DownloadResponse(\n+                        new ByteArrayInputStream(\n+                                \"foo\".getBytes(StandardCharsets.UTF_8)),\n+                        \"file+.jpg\", \"text/plain\",\n+                        \"foo\".getBytes(StandardCharsets.UTF_8).length));\n+        streamRegistration = VaadinSession.getCurrent().getResourceRegistry()\n+                .registerResource(inputStream);\n+        registrations.add(streamRegistration);\n+\n+        Anchor inputStreamDownload = new Anchor(\"\",\n+                \"InputStream DownloadHandler shorthand\");\n+        inputStreamDownload.setHref(streamRegistration.getResource());\n+        inputStreamDownload.setId(\"download-handler-input-stream\");\n+\n+        streamRegistration = VaadinSession.getCurrent().getResourceRegistry()\n+                .registerResource(DownloadHandler\n+                        .fromInputStream(downloadEvent -> DownloadResponse\n+                                .error(HttpStatusCode.INTERNAL_SERVER_ERROR)));\n+        registrations.add(streamRegistration);\n+\n+        Anchor inputStreamErrorDownload = new Anchor(\"\",\n+                \"InputStream DownloadHandler shorthand\");\n+        inputStreamErrorDownload.setHref(streamRegistration.getResource());\n+        inputStreamErrorDownload.setId(\"download-handler-input-stream-error\");\n+\n+        add(handlerDownload, fileDownload, classDownload, servletDownload,\n+                inputStreamDownload, inputStreamErrorDownload);\n+\n+        NativeButton reattach = new NativeButton(\"Remove and add back\",\n+                event -> {\n+                    remove(handlerDownload);\n+                    add(handlerDownload);\n+                });\n+        reattach.setId(\"detach-attach\");\n+\n+        add(reattach);\n+    }\n+\n+    @Override\n+    protected void onDetach(DetachEvent detachEvent) {\n+        registrations.forEach(StreamRegistration::unregister);\n+    }\n+}\n\ndiff --git a/flow-tests/test-root-context/src/main/resources/com/vaadin/flow/uitest/ui/class-file.json b/flow-tests/test-root-context/src/main/resources/com/vaadin/flow/uitest/ui/class-file.json\nnew file mode 100644\nindex 00000000000..7bbb307bc7e\n--- /dev/null\n+++ b/flow-tests/test-root-context/src/main/resources/com/vaadin/flow/uitest/ui/class-file.json\n@@ -0,0 +1,3 @@\n+{\n+  \"class\": \"resource\"\n+}\n\\ No newline at end of file\n\ndiff --git a/flow-tests/test-root-context/src/main/resources/download.json b/flow-tests/test-root-context/src/main/resources/download.json\nnew file mode 100644\nindex 00000000000..b9e8b519db2\n--- /dev/null\n+++ b/flow-tests/test-root-context/src/main/resources/download.json\n@@ -0,0 +1,3 @@\n+{\n+  \"download\": true\n+}\n\\ No newline at end of file\n\ndiff --git a/flow-tests/test-root-context/src/main/webapp/WEB-INF/servlet.json b/flow-tests/test-root-context/src/main/webapp/WEB-INF/servlet.json\nnew file mode 100644\nindex 00000000000..c2ddaf62a2f\n--- /dev/null\n+++ b/flow-tests/test-root-context/src/main/webapp/WEB-INF/servlet.json\n@@ -0,0 +1,3 @@\n+{\n+  \"servlet\": \"resource\"\n+}\n\\ No newline at end of file\n\ndiff --git a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/DownloadHandlerIT.java b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/DownloadHandlerIT.java\nnew file mode 100644\nindex 00000000000..0925608af2f\n--- /dev/null\n+++ b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/DownloadHandlerIT.java\n@@ -0,0 +1,165 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.uitest.ui;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.commons.io.FilenameUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebElement;\n+\n+import static java.time.temporal.ChronoUnit.SECONDS;\n+\n+public class DownloadHandlerIT extends AbstractStreamResourceIT {\n+\n+    @Test\n+    public void getDynamicDownloadHandlerResource() throws IOException {\n+        open();\n+\n+        assertDownloadedContent(\"download-handler-text\", \"file%2B.jpg\");\n+    }\n+\n+    @Test\n+    public void getDynamicDownloadHandlerFileResource() throws IOException {\n+        open();\n+\n+        WebElement link = findElement(By.id(\"download-handler-file\"));\n+        Assert.assertEquals(\n+                \"Anchor element should have router-ignore \" + \"attribute\", \"\",\n+                link.getAttribute(\"router-ignore\"));\n+        String url = link.getAttribute(\"href\");\n+\n+        getDriver().manage().timeouts().setScriptTimeout(15, TimeUnit.SECONDS);\n+\n+        try (InputStream stream = download(url)) {\n+            List<String> lines = IOUtils.readLines(stream,\n+                    StandardCharsets.UTF_8);\n+            Assert.assertEquals(\"\"\"\n+                    {\n+                      \"download\": true\n+                    }\"\"\", String.join(\"\\n\", lines));\n+        }\n+\n+        Assert.assertEquals(\"download.json\", FilenameUtils.getName(url));\n+    }\n+\n+    @Test\n+    public void getDynamicDownloadHandlerClassResource() throws IOException {\n+        open();\n+\n+        WebElement link = findElement(By.id(\"download-handler-class\"));\n+        Assert.assertEquals(\n+                \"Anchor element should have router-ignore \" + \"attribute\", \"\",\n+                link.getAttribute(\"router-ignore\"));\n+        String url = link.getAttribute(\"href\");\n+\n+        getDriver().manage().timeouts().setScriptTimeout(15, TimeUnit.SECONDS);\n+\n+        try (InputStream stream = download(url)) {\n+            List<String> lines = IOUtils.readLines(stream,\n+                    StandardCharsets.UTF_8);\n+            Assert.assertEquals(\"\"\"\n+                    {\n+                      \"class\": \"resource\"\n+                    }\"\"\", String.join(\"\\n\", lines));\n+        }\n+\n+        Assert.assertEquals(\"class-file.json\", FilenameUtils.getName(url));\n+    }\n+\n+    @Test\n+    public void getDynamicDownloadHandlerServletResource() throws IOException {\n+        open();\n+\n+        WebElement link = findElement(By.id(\"download-handler-servlet\"));\n+        Assert.assertEquals(\n+                \"Anchor element should have router-ignore \" + \"attribute\", \"\",\n+                link.getAttribute(\"router-ignore\"));\n+        String url = link.getAttribute(\"href\");\n+\n+        getDriver().manage().timeouts().setScriptTimeout(15, TimeUnit.SECONDS);\n+\n+        try (InputStream stream = download(url)) {\n+            List<String> lines = IOUtils.readLines(stream,\n+                    StandardCharsets.UTF_8);\n+            Assert.assertEquals(\"\"\"\n+                    {\n+                      \"servlet\": \"resource\"\n+                    }\"\"\", String.join(\"\\n\", lines));\n+        }\n+\n+        Assert.assertEquals(\"servlet.json\", FilenameUtils.getName(url));\n+    }\n+\n+    @Test\n+    public void getDynamicDownloadHandlerInputStream() throws IOException {\n+        open();\n+\n+        assertDownloadedContent(\"download-handler-input-stream\", \"\");\n+    }\n+\n+    @Test\n+    public void getDynamicDownloadHandlerFailingInputStream_errorIsReceived() {\n+        open();\n+\n+        WebElement link = findElement(\n+                By.id(\"download-handler-input-stream-error\"));\n+        link.click();\n+\n+        getDriver().manage().timeouts().scriptTimeout(Duration.of(15, SECONDS));\n+\n+        Assert.assertEquals(\"HTTP ERROR 500\",\n+                findElement(By.className(\"error-code\")).getText());\n+    }\n+\n+    @Test\n+    public void detach_attachALink_getDynamicVaadinResource()\n+            throws IOException {\n+        open();\n+\n+        findElement(By.id(\"detach-attach\")).click();\n+\n+        assertDownloadedContent(\"download-handler-text\", \"file%2B.jpg\");\n+    }\n+\n+    private void assertDownloadedContent(String downloadId, String filename)\n+            throws IOException {\n+        WebElement link = findElement(By.id(downloadId));\n+        Assert.assertEquals(\n+                \"Anchor element should have router-ignore \" + \"attribute\", \"\",\n+                link.getDomAttribute(\"router-ignore\"));\n+        String url = link.getDomAttribute(\"href\");\n+\n+        getDriver().manage().timeouts().scriptTimeout(Duration.of(15, SECONDS));\n+\n+        try (InputStream stream = download(url)) {\n+            List<String> lines = IOUtils.readLines(stream,\n+                    StandardCharsets.UTF_8);\n+            Assert.assertEquals(\"foo\", String.join(\"\", lines));\n+        }\n+\n+        Assert.assertEquals(filename, FilenameUtils.getName(url));\n+    }\n+\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21228",
    "pr_id": 21228,
    "issue_id": 21164,
    "repo": "vaadin/flow",
    "problem_statement": "Element-scoped request handlers\n### Describe your motivation\n\nA low-level API for handling any kind of request from an element without any assumptions about what the request does and, whenever the owner element is still attached, the checks for disabled and inert elements pass, Vaadin Flow invokes this handler automatically. \n\nVaadin Flow uses it as a building block for higher-level API - [DownloadHandler](https://github.com/vaadin/flow/issues/21166) and [UploadHandler](https://github.com/vaadin/flow/issues/21165), but also can be used for a completely custom upload or download mechanism (e.g. for handling a multipart file upload in a special way) relying on basic request, response, session and owner element objects passed to a handler. \n\nAbstraction levels like `StreamReceiver`, `StreamResource` and `StreamVariable` are not used in this new API.\n\n### Describe the solution you'd like\n\nThe idea is to reuse the mechanism from `AbstractStreamResource` for generating a URL that is set as the client-side value of an element attribute and keep that URL active while that element is attached. Implementation re-uses also how a resource is registered in `StreamResourceRegistry` and how it being transferred to client.\n\nIn contrast to the two existing `AbstractStreamResource` cases, `StreamReceiver` for handling uploads and `StreamResource` for handling downloads, this new mechanism would be designed for any kind of request handling without any assumptions about what the request does.\n\nUsage could look like this:\n\n***Downloads***\n```java\n// Dynamic File Download\nAnchor downloadLink = new Anchor();\ndownloadLink.setText(\"Download File\");\n\n// 1. Factory method for shorter handler variant\n// 2. Can also be used with arbitrary element, e.g. imageElement.setAttribute(\"src\", elementRequestHandler);\ndownloadLink.setHref((request, response, session, element) -> {\n            if (request.getHeader(\"foo\") == null) {\n                response.setStatus(400);\n            }\n\n            String content = \"Hello, this is a dynamically generated file.\";\n            byte[] fileBytes = content.getBytes(StandardCharsets.UTF_8);\n\n            response.setStatus(200);\n            response.setContentType(\"text/plain\");\n            response.setHeader(\"Content-Disposition\", \"attachment; filename=\\\"generated-file.txt\\\"\");\n            \n            try (OutputStream out = response.getOutputStream()) {\n                out.write(fileBytes);\n            }\n}));\n```\n\n***Uploads***\n```java\n// hypothetical <input type=\"file\"> custom element\n// that has a method or CTOR that takes ElementRequestHandler\nInput upload = new Input();\nupload.setType(\"file\");\nupload.setHandler((request, response, session, element) -> {\n            String method = request.getMethod();\n            // Request validation ...\n            \n            try (InputStream inputStream = request.getInputStream()) {\n                String fileName = getFileName(request);\n                \n                // Save the file to the file system\n                Files.copy(inputStream, getDestinationFile(request), StandardCopyOption.REPLACE_EXISTING);\n\n                // Respond with success message\n                response.setStatus(200);\n                response.getWriter().write(\"File uploaded successfully: \" + fileName);\n            } catch (IOException e) {\n                response.setStatus(500); // Internal Server Error\n                response.getWriter().write(\"File upload failed: \" + e.getMessage());\n            }\n}));\n```\n\n`ElementRequestHandler` is a functional interface and could look like:\n\n```java\n@FunctionalInterface\npublic interface ElementRequestHandler {\n  void handleRequest(VaadinRequest request, VaadinReponse response, VaadinSession session, Element owner);\n\n  default String getUrlPostfix() {\n    return null;\n  }\n\n  default boolean allowInert() {\n    return false;\n  }\n\n  default DisabledUpdateMode getDisabledUpdateMode() {\n    return DisabledUpdateMode.ONLY_WHEN_ENABLED;\n  }\n}\n```\n\n1. `UrlPostfix` - The optional URL postfix allows appending an application-controlled string, e.g. the logical name of the target file, to the end of the otherwise random-looking download URL. If defined, requests that would otherwise be routable are still rejected if the postfix is missing or invalid. Postfix changes the last segment in the resource url:\n    - with no postfix - `http://localhost:8080/VAADIN/dynamic/resource/2/10e46acd-0ec1-4b95-b9ea-9be151139a96/image.png`\n    - with empty (\"\") postfix - `http://localhost:8080/VAADIN/dynamic/resource/2/10e46acd-0ec1-4b95-b9ea-9be151139a96/`\n2. `AllowInert` - invoke request handler even though the owner element is inert. An example could be an image carousel on the front page which is being updated in a background with the new images, and the opened modal dialog shouldn't prevent this carousel to work / give 404 response for image requests because of inert curtain.\n3. DisabledUpdateMode - controls whether request handler is invoked when the owner element is disabled.",
    "issue_word_count": 610,
    "test_files_count": 5,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java",
      "flow-server/src/main/java/com/vaadin/flow/server/ElementRequestHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/StreamResourceRegistry.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/StreamRequestHandler.java",
      "flow-server/src/test/java/com/vaadin/flow/server/StreamResourceRegistryTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/StreamRequestHandlerTest.java",
      "flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/StreamResourceView.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/StreamResourceIT.java"
    ],
    "pr_changed_test_files": [
      "flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/StreamResourceRegistryTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/StreamRequestHandlerTest.java",
      "flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/StreamResourceView.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/StreamResourceIT.java"
    ],
    "base_commit": "97aa4590f3d601d73ae22fd833091809149ac1c1",
    "head_commit": "b968932b612927fd72793cf2249acf65081d579d",
    "repo_url": "https://github.com/vaadin/flow/pull/21228",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21228",
    "dockerfile": "",
    "pr_merged_at": "2025-04-17T10:42:45.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/ElementRequestHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/ElementRequestHandler.java\nnew file mode 100644\nindex 00000000000..530f80985ca\n--- /dev/null\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/ElementRequestHandler.java\n@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server;\n+\n+import java.io.Serializable;\n+\n+import com.vaadin.flow.dom.DisabledUpdateMode;\n+import com.vaadin.flow.dom.Element;\n+\n+/**\n+ * Request handler callback for handing client-server or server-client data\n+ * transfer scoped to a specific (owner) element.\n+ */\n+@FunctionalInterface\n+public interface ElementRequestHandler extends Serializable {\n+\n+    /**\n+     * Request handler callback for handing client-server or server-client data\n+     * transfer scoped to a specific (owner) element.\n+     *\n+     * Note: when handling requests via this API, you need to take care of\n+     * typical stream handling issues, e.g. exceptions yourself. However, you do\n+     * not need to close the stream yourself, Flow will handle that for you when\n+     * needed.\n+     *\n+     * @param request\n+     *            VaadinRequest request to handle\n+     * @param response\n+     *            VaadinResponse response to handle\n+     * @param session\n+     *            VaadinSession current VaadinSession\n+     * @param owner\n+     *            Element owner element\n+     */\n+    void handleRequest(VaadinRequest request, VaadinResponse response,\n+            VaadinSession session, Element owner);\n+\n+    /**\n+     * Optional URL postfix allows appending an application-controlled string,\n+     * e.g. the logical name of the target file, to the end of the otherwise\n+     * random-looking download URL. If defined, requests that would otherwise be\n+     * routable are still rejected if the postfix is missing or invalid. Postfix\n+     * changes the last segment in the resource url.\n+     *\n+     * @return String optional URL postfix, or {@code null} for \"\".\n+     */\n+    default String getUrlPostfix() {\n+        return null;\n+    }\n+\n+    /**\n+     * Whether to invoke this request handler even if the owning element is\n+     * currently inert.\n+     *\n+     * @return {@code true} to invoke for inert elements, {@code false}\n+     *         otherwise. Defaults to {@code false}.\n+     */\n+    default boolean allowInert() {\n+        return false;\n+    }\n+\n+    /**\n+     * Controls whether request handler is invoked when the owner element is\n+     * disabled.\n+     *\n+     * @return the currently set DisabledUpdateMode for this request handler.\n+     *         Defaults to {@literal ONLY_WHEN_ENABLED}.\n+     */\n+    default DisabledUpdateMode getDisabledUpdateMode() {\n+        return DisabledUpdateMode.ONLY_WHEN_ENABLED;\n+    }\n+}\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/StreamResourceRegistry.java b/flow-server/src/main/java/com/vaadin/flow/server/StreamResourceRegistry.java\nindex 41d7152a88e..1606b82711d 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/StreamResourceRegistry.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/StreamResourceRegistry.java\n@@ -22,6 +22,7 @@\n import java.util.Map;\n import java.util.Optional;\n \n+import com.vaadin.flow.dom.Element;\n import com.vaadin.flow.server.communication.StreamRequestHandler;\n \n /**\n@@ -101,6 +102,67 @@ public StreamRegistration registerResource(\n         return registration;\n     }\n \n+    /**\n+     * Registers a stream resource in the session and returns registration\n+     * handler.\n+     * <p>\n+     * You can get resource URI to use it in the application (e.g. set an\n+     * attribute value or property value) via the registration handler. The\n+     * registration handler should be used to unregister the resource when it's\n+     * not needed anymore. Note that it is the developer's responsibility to\n+     * unregister resources. Otherwise resources won't be garbage collected\n+     * until the session expires which causes memory leak.\n+     *\n+     * @param elementRequestHandler\n+     *            element request handler to register\n+     * @param owner\n+     *            owner element this request handler is scoped to\n+     *\n+     * @return registration handler\n+     */\n+    public StreamRegistration registerResource(\n+            ElementRequestHandler elementRequestHandler, Element owner) {\n+        AbstractStreamResource wrappedResource = new ElementStreamResource(\n+                elementRequestHandler, owner);\n+        session.checkHasLock(\n+                \"Session needs to be locked when registering stream resources.\");\n+        StreamRegistration registration = new Registration(this,\n+                wrappedResource.getId(), wrappedResource.getName());\n+        res.put(registration.getResourceUri(), wrappedResource);\n+        return registration;\n+    }\n+\n+    /**\n+     * Internal wrapper class for wrapping {@link ElementRequestHandler}\n+     * instances as {@link AbstractStreamResource} compatible instances.\n+     *\n+     * For internal use only. May be renamed or removed in a future release.\n+     */\n+    public static class ElementStreamResource extends AbstractStreamResource {\n+        private final ElementRequestHandler elementRequestHandler;\n+        private final Element owner;\n+\n+        public ElementStreamResource(\n+                ElementRequestHandler elementRequestHandler, Element owner) {\n+            this.elementRequestHandler = elementRequestHandler;\n+            this.owner = owner;\n+        }\n+\n+        public ElementRequestHandler getElementRequestHandler() {\n+            return elementRequestHandler;\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return elementRequestHandler.getUrlPostfix() == null ? \"\"\n+                    : elementRequestHandler.getUrlPostfix();\n+        }\n+\n+        public Element getOwner() {\n+            return owner;\n+        }\n+    }\n+\n     /**\n      * Unregister a stream receiver resource.\n      *\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/StreamRequestHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/StreamRequestHandler.java\nindex 343f3d49f59..0861371b623 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/StreamRequestHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/StreamRequestHandler.java\n@@ -24,12 +24,14 @@\n import org.slf4j.LoggerFactory;\n \n import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.dom.Element;\n import com.vaadin.flow.internal.UrlUtil;\n import com.vaadin.flow.server.AbstractStreamResource;\n import com.vaadin.flow.server.HttpStatusCode;\n import com.vaadin.flow.server.RequestHandler;\n import com.vaadin.flow.server.StreamReceiver;\n import com.vaadin.flow.server.StreamResource;\n+import com.vaadin.flow.server.StreamResourceRegistry;\n import com.vaadin.flow.server.VaadinRequest;\n import com.vaadin.flow.server.VaadinResponse;\n import com.vaadin.flow.server.VaadinSession;\n@@ -107,11 +109,22 @@ public boolean handleRequest(VaadinSession session, VaadinRequest request,\n \n         if (abstractStreamResource.isPresent()) {\n             AbstractStreamResource resource = abstractStreamResource.get();\n-            if (resource instanceof StreamResource) {\n+            if (resource instanceof StreamResourceRegistry.ElementStreamResource elementRequest) {\n+                Element owner = elementRequest.getOwner();\n+                if (owner.getNode().isInert() && !elementRequest\n+                        .getElementRequestHandler().allowInert()) {\n+                    response.sendError(HttpStatusCode.FORBIDDEN.getCode(),\n+                            \"Resource not available\");\n+                    return true;\n+                } else {\n+                    elementRequest.getElementRequestHandler().handleRequest(\n+                            request, response, session,\n+                            elementRequest.getOwner());\n+                }\n+            } else if (resource instanceof StreamResource) {\n                 resourceHandler.handleRequest(session, request, response,\n                         (StreamResource) resource);\n-            } else if (resource instanceof StreamReceiver) {\n-                StreamReceiver streamReceiver = (StreamReceiver) resource;\n+            } else if (resource instanceof StreamReceiver streamReceiver) {\n                 String[] parts = parsePath(pathInfo);\n \n                 receiverHandler.handleRequest(session, request, response,\n",
    "test_patch": "diff --git a/flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java b/flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java\nindex 61e93e7b538..ba229c7204a 100644\n--- a/flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java\n+++ b/flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java\n@@ -17,13 +17,13 @@\n \n import java.util.Optional;\n \n-import com.vaadin.flow.component.UI;\n-import com.vaadin.flow.server.AbstractStreamResource;\n import org.junit.After;\n import org.junit.Assert;\n import org.junit.Test;\n \n import com.vaadin.flow.component.Text;\n+import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.server.AbstractStreamResource;\n \n public class AnchorTest extends ComponentTest {\n \n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/StreamResourceRegistryTest.java b/flow-server/src/test/java/com/vaadin/flow/server/StreamResourceRegistryTest.java\nindex be34c2e3406..baf9e6f461f 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/StreamResourceRegistryTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/StreamResourceRegistryTest.java\n@@ -29,6 +29,7 @@\n import org.mockito.Mockito;\n \n import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.dom.Element;\n import com.vaadin.flow.internal.CurrentInstance;\n \n public class StreamResourceRegistryTest {\n@@ -79,6 +80,27 @@ public void registerResource_registrationResultCanBeFound() {\n                 resource, registration.getResource());\n     }\n \n+    @Test\n+    public void registerElementResourceHandler_registrationResultCanBeFound() {\n+        StreamResourceRegistry registry = new StreamResourceRegistry(session);\n+\n+        ElementRequestHandler handler = (request, response, session, owner) -> {\n+            // nop\n+        };\n+        Element owner = Mockito.mock(Element.class);\n+        StreamRegistration registration = registry.registerResource(handler,\n+                owner);\n+        Assert.assertNotNull(registration);\n+\n+        URI uri = registration.getResourceUri();\n+        AbstractStreamResource generatedResource = registration.getResource();\n+\n+        Optional<AbstractStreamResource> stored = registry.getResource(uri);\n+        Assert.assertSame(\n+                \"Unexpected stored resource is returned for registered URI\",\n+                generatedResource, stored.get());\n+    }\n+\n     @Test\n     public void unregisterResource_resourceIsRemoved() {\n         StreamResourceRegistry registry = new StreamResourceRegistry(session);\n@@ -97,9 +119,35 @@ public void unregisterResource_resourceIsRemoved() {\n         Assert.assertFalse(\n                 \"Unexpected stored resource is found after unregister()\",\n                 stored.isPresent());\n+        Assert.assertNull(\n+                \"Unexpected resource is returned by the registration instance\",\n+                registration.getResource());\n+    }\n+\n+    @Test\n+    public void unregisterElementResourceHandler_resourceIsRemoved() {\n+        StreamResourceRegistry registry = new StreamResourceRegistry(session);\n+\n+        ElementRequestHandler handler = (request, response, session, owner) -> {\n+            // nop\n+        };\n+        Element owner = Mockito.mock(Element.class);\n+        StreamRegistration registration = registry.registerResource(handler,\n+                owner);\n+\n+        Assert.assertNotNull(registration);\n+\n+        URI uri = registration.getResourceUri();\n+\n+        registration.unregister();\n+\n+        Optional<AbstractStreamResource> stored = registry.getResource(uri);\n         Assert.assertFalse(\n+                \"Unexpected stored resource is found after unregister()\",\n+                stored.isPresent());\n+        Assert.assertNull(\n                 \"Unexpected resource is returned by the registration instance\",\n-                registration.getResource() != null);\n+                registration.getResource());\n     }\n \n     @Test\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/StreamRequestHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/StreamRequestHandlerTest.java\nindex 5281c22cac7..d5c1ab93bd0 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/StreamRequestHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/StreamRequestHandlerTest.java\n@@ -3,7 +3,6 @@\n import jakarta.servlet.ServletContext;\n import jakarta.servlet.ServletException;\n import jakarta.servlet.ServletOutputStream;\n-\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n \n\ndiff --git a/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/StreamResourceView.java b/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/StreamResourceView.java\nindex 70c3a81e821..95e377e1426 100644\n--- a/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/StreamResourceView.java\n+++ b/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/StreamResourceView.java\n@@ -16,19 +16,51 @@\n package com.vaadin.flow.uitest.ui;\n \n import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n \n import com.vaadin.flow.component.html.Anchor;\n import com.vaadin.flow.component.html.Div;\n import com.vaadin.flow.component.html.NativeButton;\n+import com.vaadin.flow.dom.Element;\n import com.vaadin.flow.router.Route;\n+import com.vaadin.flow.server.ElementRequestHandler;\n import com.vaadin.flow.server.StreamResource;\n+import com.vaadin.flow.server.StreamResourceRegistry;\n+import com.vaadin.flow.server.VaadinRequest;\n+import com.vaadin.flow.server.VaadinResponse;\n+import com.vaadin.flow.server.VaadinSession;\n import com.vaadin.flow.uitest.servlet.ViewTestLayout;\n \n @Route(value = \"com.vaadin.flow.uitest.ui.StreamResourceView\", layout = ViewTestLayout.class)\n public class StreamResourceView extends Div {\n \n     public StreamResourceView() {\n+        Anchor esrAnchor = new Anchor();\n+        esrAnchor.setText(\"esr anchor\");\n+        esrAnchor.setId(\"esrAnchor\");\n+        StreamResourceRegistry.ElementStreamResource elementStreamResource = new StreamResourceRegistry.ElementStreamResource(\n+                new ElementRequestHandler() {\n+                    @Override\n+                    public void handleRequest(VaadinRequest request,\n+                            VaadinResponse response, VaadinSession session,\n+                            Element owner) {\n+                        response.setContentType(\"text/plain\");\n+                        try {\n+                            response.getOutputStream().write(\n+                                    \"foo\".getBytes(StandardCharsets.UTF_8));\n+                        } catch (IOException e) {\n+                            throw new RuntimeException(e);\n+                        }\n+                    }\n+\n+                    @Override\n+                    public String getUrlPostfix() {\n+                        return \"esr-filename.txt\";\n+                    }\n+                }, esrAnchor.getElement());\n+        esrAnchor.setHref(elementStreamResource);\n+\n         StreamResource resource = new StreamResource(\"file name\",\n                 () -> new ByteArrayInputStream(\n                         \"foo\".getBytes(StandardCharsets.UTF_8)));\n@@ -50,7 +82,7 @@ public StreamResourceView() {\n         percentDownload.setHref(percentResource);\n         percentDownload.setId(\"percent-link\");\n \n-        add(download, plusDownload, percentDownload);\n+        add(esrAnchor, download, plusDownload, percentDownload);\n \n         NativeButton reattach = new NativeButton(\"Remove and add back\",\n                 event -> {\n\ndiff --git a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/StreamResourceIT.java b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/StreamResourceIT.java\nindex a251e8d2b37..e8440c816bf 100644\n--- a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/StreamResourceIT.java\n+++ b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/StreamResourceIT.java\n@@ -32,6 +32,13 @@\n \n public class StreamResourceIT extends AbstractStreamResourceIT {\n \n+    @Test\n+    public void getElementStreamResource() throws IOException {\n+        open();\n+\n+        assertDownloadedContent(\"esrAnchor\", \"esr-filename.txt\");\n+    }\n+\n     @Test\n     public void getDynamicVaadinResource() throws IOException {\n         open();\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21219",
    "pr_id": 21219,
    "issue_id": 21158,
    "repo": "vaadin/flow",
    "problem_statement": "Init request takes 1s after full page reload\n### Description of the bug\n\nWhen our application initially starts, or when the user performs a browser reload, then almost always the initial Vaadin XHR GET request with `v_r=init` takes minimum 1000ms.\n\n![Image](https://github.com/user-attachments/assets/79fa66e4-59a0-4d20-af9a-8dfa2f1383ed)\n\nI tracked this down to this piece of code in [`com.vaadin.flow.server.communication.AtmospherePushConnection`](https://github.com/vaadin/flow/blob/main/flow-server/src/main/java/com/vaadin/flow/server/communication/AtmospherePushConnection.java#L354):\n```java\n    @Override\n    public void disconnect() {\n        ...\n        synchronized (lock) {\n            ...\n            try {\n                disconnecting = true;\n                if (resource.isResumed()) {\n                    // This can happen for long polling because of\n                    // http://dev.vaadin.com/ticket/16919\n                    // Once that is fixed, this should never happen\n                    connectionLost();\n                    return;\n                }\n                if (outgoingMessage != null) {\n                    // Wait for the last message to be sent before closing the\n                    // connection (assumes that futures are completed in order)\n                    try {\n                        outgoingMessage.get(1000, TimeUnit.MILLISECONDS);\n                    } catch (TimeoutException e) {\n                        if (ui.isClosing()) {\n                            getLogger().debug(\n                                    \"Something was not sent to client on an UI that was already closed by beacon request or similar. This seems to happen with Safari occassionally when navigating away from a UI.\");\n```\nThe runtime reaches this last line, so we're getting the TimeoutException, and the UI is closing.\n\nSo it seems that during the init request a new Vaadin session gets created, and in the `requestEnd` phase the request handler tries to cleanup some old UIs, perhaps the one that was instantiated before the browser reloads. And during the `disconnect` to this old UI we get a timeout when trying to get the response from its latest outgoing message.\n\nThe log statement indicates that this situation can happen with Safari, but we're using Microsoft Edge here.\n\nIt is _very seldom_ that we do _not_ run into this line. In those cases the init request gets answered in <20ms, so apart from that everything is fine.\n\nThe full stack trace to this line:\n```\n\tat com.vaadin.flow.server.communication.AtmospherePushConnection.disconnect(AtmospherePushConnection.java:347)\n\tat com.vaadin.flow.component.internal.UIInternals.setPushConnection(UIInternals.java:465)\n\tat com.vaadin.flow.component.internal.UIInternals.setSession(UIInternals.java:417)\n\tat com.vaadin.flow.server.VaadinSession.removeUI(VaadinSession.java:613)\n\tat com.vaadin.flow.server.VaadinService.lambda$removeClosedUIs$20ed7015$1(VaadinService.java:1318)\n\tat com.vaadin.flow.server.VaadinService$$Lambda$16884/0x00000292203a0478.execute(Unknown Source:-1)\n\tat com.vaadin.flow.component.UI.accessSynchronously(UI.java:458)\n\tat com.vaadin.flow.component.UI.accessSynchronously(UI.java:419)\n\tat com.vaadin.flow.server.VaadinService.removeClosedUIs(VaadinService.java:1316)\n\tat com.vaadin.flow.server.VaadinService.cleanupSession(VaadinService.java:1279)\n\tat com.vaadin.flow.server.VaadinService.requestEnd(VaadinService.java:1483)\n\tat com.vaadin.flow.server.VaadinService.handleRequest(VaadinService.java:1566)\n\tat com.vaadin.flow.server.VaadinServlet.service(VaadinServlet.java:365)\n\tat com.vaadin.cdi.CdiVaadinServlet.service(CdiVaadinServlet.java:67)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:590)\n\tat io.undertow.servlet.handlers.ServletHandler.handleRequest(ServletHandler.java:74)\n\tat io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:129)\n\tat io.undertow.websockets.jsr.JsrWebSocketFilter.doFilter(JsrWebSocketFilter.java:173)\n\tat io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:67)\n\tat io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)\n\tat io.undertow.servlet.handlers.FilterHandler.handleRequest(FilterHandler.java:84)\n\tat io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:62)\n\tat io.undertow.servlet.handlers.ServletChain$1.handleRequest(ServletChain.java:68)\n\tat io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:36)\n\tat org.wildfly.elytron.web.undertow.server.ElytronRunAsHandler.lambda$handleRequest$1(ElytronRunAsHandler.java:68)\n\tat org.wildfly.elytron.web.undertow.server.ElytronRunAsHandler$$Lambda$6808/0x000002921c798000.call(Unknown Source:-1)\n\tat org.wildfly.security.auth.server.Scoped$$Lambda$6809/0x000002921de1ba08.apply(Unknown Source:-1)\n\tat org.wildfly.security.auth.server.Scoped$$Lambda$4631/0x000002921de19148.apply(Unknown Source:-1)\n\tat org.wildfly.security.auth.server.FlexibleIdentityAssociation.runAsFunctionEx(FlexibleIdentityAssociation.java:103)\n\tat org.wildfly.security.auth.server.Scoped.runAsFunctionEx(Scoped.java:161)\n\tat org.wildfly.security.auth.server.Scoped.runAs(Scoped.java:73)\n\tat org.wildfly.elytron.web.undertow.server.ElytronRunAsHandler.handleRequest(ElytronRunAsHandler.java:67)\n\tat io.undertow.servlet.handlers.RedirectDirHandler.handleRequest(RedirectDirHandler.java:68)\n\tat io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(SSLInformationAssociationHandler.java:117)\n\tat io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(ServletAuthenticationCallHandler.java:57)\n\tat io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)\n\tat io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(AbstractConfidentialityHandler.java:46)\n\tat io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(ServletConfidentialityConstraintHandler.java:64)\n\tat io.undertow.security.handlers.AbstractSecurityContextAssociationHandler.handleRequest(AbstractSecurityContextAssociationHandler.java:43)\n\tat org.wildfly.elytron.web.undertow.server.servlet.CleanUpHandler.handleRequest(CleanUpHandler.java:38)\n\tat io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)\n\tat org.wildfly.extension.undertow.security.jacc.JACCContextIdHandler.handleRequest(JACCContextIdHandler.java:61)\n\tat io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)\n\tat org.wildfly.extension.undertow.deployment.GlobalRequestControllerHandler.handleRequest(GlobalRequestControllerHandler.java:68)\n\tat io.undertow.servlet.handlers.SendErrorPageHandler.handleRequest(SendErrorPageHandler.java:52)\n\tat io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)\n\tat io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:275)\n\tat io.undertow.servlet.handlers.ServletInitialHandler.access$100(ServletInitialHandler.java:79)\n\tat io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:134)\n\tat io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:131)\n\tat io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1.call(ServletRequestContextThreadSetupAction.java:48)\n\tat io.undertow.servlet.core.ContextClassLoaderSetupAction$1.call(ContextClassLoaderSetupAction.java:43)\n\tat org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1555)\n\tat org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction$$Lambda$2650/0x000002921ae8bbf8.call(Unknown Source:-1)\n\tat org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1555)\n\tat org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction$$Lambda$2650/0x000002921ae8bbf8.call(Unknown Source:-1)\n\tat org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1555)\n\tat org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction$$Lambda$2650/0x000002921ae8bbf8.call(Unknown Source:-1)\n\tat org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1555)\n\tat org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction$$Lambda$2650/0x000002921ae8bbf8.call(Unknown Source:-1)\n\tat org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1555)\n\tat org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction$$Lambda$2650/0x000002921ae8bbf8.call(Unknown Source:-1)\n\tat io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:255)\n\tat io.undertow.servlet.handlers.ServletInitialHandler.access$000(ServletInitialHandler.java:79)\n\tat io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:100)\n\tat io.undertow.server.Connectors.executeRootHandler(Connectors.java:395)\n\tat io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:889)\n\tat org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35)\n\tat org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:1990)\n\tat org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1486)\n\tat org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1377)\n\tat org.xnio.XnioWorker$WorkerThreadFactory$1$1.run(XnioWorker.java:1282)\n\tat java.lang.Thread.run(Thread.java:840)\n```\n\n*Further details*\n\nVaadin is running in production mode, with CDI enabled. \nPush mode is set to MANUAL.\n\nWe derived from `CdiVaadinServlet` with the following init parameters:\n```java\n@WebServlet(\n        urlPatterns = {\"/*\"},\n        name = \"platformservlet\",\n        asyncSupported = true,\n        initParams = {\n                @WebInitParam(name = \"frontend.url.es6\", value = \"context://frontend-es6/\"),\n                @WebInitParam(name = \"frontend.url.es5\", value = \"context://frontend-es5/\"),\n                @WebInitParam(name = SERVLET_PARAMETER_PRODUCTION_MODE, value = \"true\"),\n                @WebInitParam(name = SERVLET_PARAMETER_HEARTBEAT_INTERVAL, value = \"20\"),\n                @WebInitParam(name = SERVLET_PARAMETER_CLOSE_IDLE_SESSIONS, value = \"true\"),\n                @WebInitParam(name = SERVLET_PARAMETER_MAX_MESSAGE_SUSPEND_TIMEOUT, value = \"60000\"),\n                @WebInitParam(name = SERVLET_PARAMETER_PUSH_SUSPEND_TIMEOUT_LONGPOLLING, value = \"1000\")\n        }\n)\npublic class PlatformServlet extends CdiVaadinServlet { ... }\n```\n\n\n### Expected behavior\n\nThe init request should not wait 1s for closing of another UI.\n\n### Minimal reproducible example\n\nDifficult to reproduce since this happens in a fat JBoss EAP 7.x. It's not easy for us to extract a minimal application.\n\n### Versions\n\n- Vaadin / Flow version: 23.5.12\n- Java version: OpenJDK Runtime Environment (Red_Hat-17.0.12.0+7-1) (build 17.0.12+7-LTS)\n- OS version: Windows 11 Enterprise\n- Browser version (if applicable): Microsoft Edge 134.0.3124.72 64bit\n- Application Server (if applicable): RedHat JBoss EAP 7.4.20 GA\n- IDE (if applicable): n/a\n",
    "issue_word_count": 1324,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/ServerRpcHandlerTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/server/communication/ServerRpcHandlerTest.java"
    ],
    "base_commit": "56da01f395cb58e1602ec9d06af6d02189fbb7de",
    "head_commit": "56b8524eaa7a5a601b6c007cc9655b1df3fe1397",
    "repo_url": "https://github.com/vaadin/flow/pull/21219",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21219",
    "dockerfile": "",
    "pr_merged_at": "2025-04-04T07:27:43.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java\nindex 107222bbbcd..ccaf2805b12 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java\n@@ -349,6 +349,14 @@ public void handleRpc(UI ui, Reader reader, VaadinRequest request)\n                 getLogger().debug(\n                         \"Eager UI close ignored for @PreserveOnRefresh view\");\n             } else {\n+                PushConnection pushConnection = ui.getInternals()\n+                        .getPushConnection();\n+                if (pushConnection != null) {\n+                    // Disconnect push before closing ui to not generate\n+                    // empty request that blocks close as client is already\n+                    // closed at this time.\n+                    pushConnection.disconnect();\n+                }\n                 ui.close();\n                 getLogger().debug(\"UI closed with a beacon request\");\n             }\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/ServerRpcHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/ServerRpcHandlerTest.java\nindex bc86f6029ed..eb2b0f52e87 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/ServerRpcHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/ServerRpcHandlerTest.java\n@@ -11,12 +11,16 @@\n import java.io.IOException;\n import java.io.Reader;\n import java.io.StringReader;\n+import java.util.concurrent.CompletableFuture;\n \n+import org.atmosphere.cpr.AtmosphereResource;\n+import org.atmosphere.cpr.Broadcaster;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n+import org.mockito.ArgumentMatchers;\n import org.mockito.Mockito;\n \n import com.vaadin.flow.component.UI;\n@@ -134,4 +138,45 @@ protected String getMessage(Reader reader) throws IOException {\n \n         handler.handleRpc(ui, Mockito.mock(Reader.class), request);\n     }\n+\n+    @Test\n+    public void handleRpc_pushEnabled_unloadBeacon_doNoGeneratePayload()\n+            throws InvalidUIDLSecurityKeyException, IOException {\n+\n+        Broadcaster broadcaster = Mockito.mock(Broadcaster.class);\n+        AtmosphereResource resource = Mockito.mock(AtmosphereResource.class);\n+\n+        Mockito.doAnswer(i -> {\n+            // Introduce a small delay to hold the lock during disconnect\n+            Thread.sleep(30);\n+            return null;\n+        }).when(resource).close();\n+        Mockito.doAnswer(i -> {\n+            // Introduce a small delay to hold the lock during message push\n+            Thread.sleep(30);\n+            return CompletableFuture.completedFuture(null);\n+        }).when(broadcaster).broadcast(ArgumentMatchers.any(),\n+                ArgumentMatchers.any(AtmosphereResource.class));\n+\n+        AtmospherePushConnection pushConnection = new AtmospherePushConnection(\n+                ui);\n+        pushConnection.connect(resource);\n+        Mockito.when(uiInternals.getPushConnection())\n+                .thenReturn(pushConnection);\n+\n+        StringReader reader = new StringReader(\"{\\\"csrfToken\\\": \\\"\" + csrfToken\n+                + \"\\\", \\\"rpc\\\":[{\\\"type\\\": \\\"event\\\", \\\"node\\\" : 1, \\\"event\\\": \\\"click\\\" }], \\\"UNLOAD\\\": true, \\\"clientId\\\":0}\");\n+        ServerRpcHandler handler = new ServerRpcHandler();\n+\n+        Assert.assertEquals(\"Push should be connected\",\n+                AtmospherePushConnection.State.CONNECTED,\n+                pushConnection.getState());\n+\n+        handler.handleRpc(ui, reader, request);\n+\n+        Assert.assertEquals(\"Push should be disconnected after beacon unload\",\n+                AtmospherePushConnection.State.DISCONNECTED,\n+                pushConnection.getState());\n+        Mockito.verifyNoInteractions(broadcaster);\n+    }\n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21216",
    "pr_id": 21216,
    "issue_id": 21188,
    "repo": "vaadin/flow",
    "problem_statement": "Lingering progress indicator after slow request\n### Description of the bug\n\nAfter a long-running request (threshold seems to be somewhere between 5 and 6 seconds), there will be an extra request progress indicator at the top of the application for a couple of seconds in association with a _subsequent_ request, even though that request completes almost immediately.\n\nThis seems like a regression in Vaadin 24.7 since I couldn't reproduce with Vaadin 24.6.7. This might be related to the additional retry of the original request that is sent after around 5.5 seconds if there hasn't yet been any response to that request.\n\nhttps://github.com/user-attachments/assets/fc06f960-360c-4ee4-8735-827854120d29\n\n\n### Expected behavior\n\nExpected there to be no additional request progress indicator.\n\nThe additional retry request also seems redundant in a case like this. On the other hand, I realize that it might be necessary to be able to recover from cases where a request for some reason fails without getting any direct error from the browser. Though I guess such requests will anyways lead to an error once the browser's timeout is triggered so I'm not sure if we need this at all since I assume the most common case is that requests fail in a way that the browser immediately triggers an error.\n\n### Minimal reproducible example\n\n1. Get an app with a Hello World view for Flow from start.vaadin.com\n2. Change the click listener to sleep for 6 seconds.\n3. Run application, click the button\n4. Observe that there's an expected progress indicator due to the slow request\n5. Observe that there's an additional copy of the request sent after around 5.5 seconds.\n6. Observe that the notification shows up once the initial request is handled.\n7. Wait until the notification disappears and observe that the progress indicator is shown for a around 4 seconds even though the request telling the server that the notification was closed is completed in around 10ms.\n\n### Versions\n\n- Vaadin / Flow version: Vaadin 24.7.0\n- Java version: 17\n- OS version: macOS 15\n- Browser version: Tested in latest versions of Chrome, Firefox and Safari\n",
    "issue_word_count": 364,
    "test_files_count": 3,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "flow-client/src/main/java/com/vaadin/client/communication/DefaultConnectionStateHandler.java",
      "flow-client/src/main/java/com/vaadin/client/communication/MessageSender.java",
      "flow-client/src/main/java/com/vaadin/client/communication/ReconnectionAttemptEvent.java",
      "flow-client/src/main/java/com/vaadin/client/communication/RequestResponseTracker.java",
      "flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/SlowResponseView.java",
      "flow-tests/test-client-queue/src/test/java/com/vaadin/flow/misc/ui/SlowResponseIT.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/faulttolerance/NetworkInterruptionIT.java"
    ],
    "pr_changed_test_files": [
      "flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/SlowResponseView.java",
      "flow-tests/test-client-queue/src/test/java/com/vaadin/flow/misc/ui/SlowResponseIT.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/faulttolerance/NetworkInterruptionIT.java"
    ],
    "base_commit": "0ea9cf24ef543f28dc7f965e57d93975883915d9",
    "head_commit": "a700e1b470672b1adba7e5e8ed8b722672f10aeb",
    "repo_url": "https://github.com/vaadin/flow/pull/21216",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21216",
    "dockerfile": "",
    "pr_merged_at": "2025-04-04T05:37:12.000Z",
    "patch": "diff --git a/flow-client/src/main/java/com/vaadin/client/communication/DefaultConnectionStateHandler.java b/flow-client/src/main/java/com/vaadin/client/communication/DefaultConnectionStateHandler.java\nindex 89360db8c1a..6c1d9fb1c99 100644\n--- a/flow-client/src/main/java/com/vaadin/client/communication/DefaultConnectionStateHandler.java\n+++ b/flow-client/src/main/java/com/vaadin/client/communication/DefaultConnectionStateHandler.java\n@@ -22,8 +22,8 @@\n import com.google.gwt.user.client.Timer;\n import com.google.gwt.xhr.client.XMLHttpRequest;\n \n-import com.vaadin.client.Console;\n import com.vaadin.client.ConnectionIndicator;\n+import com.vaadin.client.Console;\n import com.vaadin.client.Registry;\n import com.vaadin.client.UILifecycle;\n import com.vaadin.client.UILifecycle.UIState;\n@@ -228,12 +228,18 @@ protected void scheduleReconnect(final JsonObject payload) {\n         // do not need to start a new one\n         if (reconnectAttempt == 1) {\n             // Try once immediately\n+            Console.debug(\"Immediate reconnect attempt for \" + payload);\n             doReconnect(payload);\n         } else {\n             scheduledReconnect = new Timer() {\n                 @Override\n                 public void run() {\n+                    if (scheduledReconnect != null) {\n+                        scheduledReconnect.cancel();\n+                    }\n                     scheduledReconnect = null;\n+                    Console.debug(\"Scheduled reconnect attempt \"\n+                            + reconnectAttempt + \" for \" + payload);\n                     doReconnect(payload);\n                 }\n             };\n@@ -259,11 +265,13 @@ protected void doReconnect(JsonObject payload) {\n             return;\n         }\n         if (payload != null) {\n-            Console.debug(\"Re-sending last message to the server...\");\n-            registry.getMessageSender().send(payload);\n+            Console.debug(\"Trying to re-establish server connection (UIDL)...\");\n+            registry.getRequestResponseTracker()\n+                    .fireEvent(new ReconnectionAttemptEvent(reconnectAttempt));\n         } else {\n             // Use heartbeat\n-            Console.debug(\"Trying to re-establish server connection...\");\n+            Console.debug(\n+                    \"Trying to re-establish server connection (heartbeat)...\");\n             registry.getHeartbeat().send();\n         }\n     }\n@@ -448,6 +456,10 @@ private void resolveTemporaryError(Type type) {\n \n         reconnectionCause = null;\n         reconnectAttempt = 0;\n+        if (scheduledReconnect != null) {\n+            scheduledReconnect.cancel();\n+            scheduledReconnect = null;\n+        }\n         ConnectionIndicator.setState(ConnectionIndicator.CONNECTED);\n \n         Console.debug(\"Re-established connection to server\");\n\ndiff --git a/flow-client/src/main/java/com/vaadin/client/communication/MessageSender.java b/flow-client/src/main/java/com/vaadin/client/communication/MessageSender.java\nindex c5664cdea05..e2376e8cfd0 100644\n--- a/flow-client/src/main/java/com/vaadin/client/communication/MessageSender.java\n+++ b/flow-client/src/main/java/com/vaadin/client/communication/MessageSender.java\n@@ -20,6 +20,7 @@\n \n import com.google.gwt.core.client.GWT;\n import com.google.gwt.user.client.Timer;\n+\n import com.vaadin.client.ConnectionIndicator;\n import com.vaadin.client.Console;\n import com.vaadin.client.Registry;\n@@ -83,6 +84,17 @@ public enum ResynchronizationState {\n     public MessageSender(Registry registry) {\n         this.registry = registry;\n         this.pushConnectionFactory = GWT.create(PushConnectionFactory.class);\n+        this.registry.getRequestResponseTracker()\n+                .addReconnectionAttemptHandler(ev -> {\n+                    Console.debug(\n+                            \"Re-sending queued messages to the server (attempt \"\n+                                    + ev.getAttempt() + \") ...\");\n+                    // Try to reconnect by sending queued messages.\n+                    // Stops the resend timer, since it will anyway not make any\n+                    // request during reconnection process.\n+                    resetTimer();\n+                    doSendInvocationsToServer();\n+                });\n     }\n \n     /**\n@@ -128,7 +140,12 @@ private void doSendInvocationsToServer() {\n             registry.getRequestResponseTracker().startRequest();\n             sendPayload(payload);\n             return;\n-        } else if (hasQueuedMessages() && resendMessageTimer == null) {\n+        } else if (hasQueuedMessages()) {\n+            Console.debug(\"Sending queued messages to server\");\n+            if (resendMessageTimer != null) {\n+                // Stopping resend timer and re-send immediately\n+                resetTimer();\n+            }\n             sendPayload(messageQueue.get(0));\n             return;\n         }\n@@ -212,6 +229,12 @@ public void send(final JsonObject payload) {\n             // been already sent and enqueued.\n             if (!payload.hasKey(ApplicationConstants.SERVER_SYNC_ID)) {\n                 messageQueue.add(payload);\n+                Console.debug(\n+                        \"Message not sent because other messages are pending. Added to the queue: \"\n+                                + payload.toJson());\n+            } else {\n+                Console.debug(\"Message not sent because already queued: \"\n+                        + payload.toJson());\n             }\n             return;\n         }\n@@ -255,7 +278,6 @@ private void sendPayload(final JsonObject payload) {\n         } else {\n             Console.debug(\"send XHR\");\n             registry.getXhrConnection().send(payload);\n-\n             resetTimer();\n             // resend last payload if response hasn't come in.\n             resendMessageTimer = new Timer() {\n@@ -264,11 +286,16 @@ public void run() {\n                     resendMessageTimer\n                             .schedule(registry.getApplicationConfiguration()\n                                     .getMaxMessageSuspendTimeout() + 500);\n+                    // Avoid re-sending the message if a request is still in\n+                    // progress.\n+                    // If the response to the message has not yet been processed\n+                    // the reconnection attempt listener takes care of resending\n+                    // the queued message.\n                     if (!registry.getRequestResponseTracker()\n                             .hasActiveRequest()) {\n                         registry.getRequestResponseTracker().startRequest();\n+                        registry.getXhrConnection().send(payload);\n                     }\n-                    registry.getXhrConnection().send(payload);\n                 }\n             };\n             resendMessageTimer.schedule(registry.getApplicationConfiguration()\n\ndiff --git a/flow-client/src/main/java/com/vaadin/client/communication/ReconnectionAttemptEvent.java b/flow-client/src/main/java/com/vaadin/client/communication/ReconnectionAttemptEvent.java\nnew file mode 100644\nindex 00000000000..8a62eec5ffc\n--- /dev/null\n+++ b/flow-client/src/main/java/com/vaadin/client/communication/ReconnectionAttemptEvent.java\n@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.client.communication;\n+\n+import com.google.web.bindery.event.shared.Event;\n+\n+import com.google.gwt.event.shared.EventHandler;\n+\n+/**\n+ * Event fired when a reconnection attempt is requested.\n+ *\n+ * @author Vaadin Ltd\n+ * @since 24.7\n+ */\n+public class ReconnectionAttemptEvent\n+        extends Event<ReconnectionAttemptEvent.Handler> {\n+\n+    /**\n+     * Handler for {@link ReconnectionAttemptEvent}s.\n+     */\n+    @FunctionalInterface\n+    public interface Handler extends EventHandler {\n+        /**\n+         * Called when handling of a reconnection attempt starts.\n+         *\n+         * @param event\n+         *            the event object\n+         */\n+        void onReconnectionAttempt(ReconnectionAttemptEvent event);\n+    }\n+\n+    private static Type<Handler> type = null;\n+\n+    private final int attempt;\n+\n+    /**\n+     * Creates an event object.\n+     */\n+    public ReconnectionAttemptEvent(int attempt) {\n+        this.attempt = attempt;\n+    }\n+\n+    /**\n+     * Gets the number of the current reconnection attempt.\n+     *\n+     * @return the number of the current reconnection attempt.\n+     */\n+    public int getAttempt() {\n+        return attempt;\n+    }\n+\n+    /**\n+     * Gets the type of the event after ensuring the type has been created.\n+     *\n+     * @return the type for the event\n+     */\n+    public static Type<Handler> getType() {\n+        if (type == null) {\n+            type = new Type<>();\n+        }\n+        return type;\n+    }\n+\n+    @Override\n+    public Type<Handler> getAssociatedType() {\n+        return type;\n+    }\n+\n+    @Override\n+    protected void dispatch(Handler handler) {\n+        handler.onReconnectionAttempt(this);\n+    }\n+\n+}\n\ndiff --git a/flow-client/src/main/java/com/vaadin/client/communication/RequestResponseTracker.java b/flow-client/src/main/java/com/vaadin/client/communication/RequestResponseTracker.java\nindex 4ee908dc204..a8918fcf50e 100644\n--- a/flow-client/src/main/java/com/vaadin/client/communication/RequestResponseTracker.java\n+++ b/flow-client/src/main/java/com/vaadin/client/communication/RequestResponseTracker.java\n@@ -15,14 +15,15 @@\n  */\n package com.vaadin.client.communication;\n \n-import com.google.gwt.core.client.Scheduler;\n import com.google.web.bindery.event.shared.Event;\n import com.google.web.bindery.event.shared.EventBus;\n import com.google.web.bindery.event.shared.HandlerRegistration;\n \n-import com.vaadin.client.communication.MessageSender.ResynchronizationState;\n+import com.google.gwt.core.client.Scheduler;\n+\n import com.vaadin.client.ConnectionIndicator;\n import com.vaadin.client.Registry;\n+import com.vaadin.client.communication.MessageSender.ResynchronizationState;\n import com.vaadin.client.gwt.com.google.web.bindery.event.shared.SimpleEventBus;\n \n /**\n@@ -174,4 +175,16 @@ public HandlerRegistration addResponseHandlingEndedHandler(\n                 handler);\n     }\n \n+    /**\n+     * Adds a handler for {@link ReconnectionAttemptEvent}s.\n+     *\n+     * @param handler\n+     *            the handler to add\n+     * @return a registration object which can be used to remove the handler\n+     */\n+    public HandlerRegistration addReconnectionAttemptHandler(\n+            ReconnectionAttemptEvent.Handler handler) {\n+        return eventBus.addHandler(ReconnectionAttemptEvent.getType(), handler);\n+    }\n+\n }\n",
    "test_patch": "diff --git a/flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/SlowResponseView.java b/flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/SlowResponseView.java\nnew file mode 100644\nindex 00000000000..843646b25df\n--- /dev/null\n+++ b/flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/SlowResponseView.java\n@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.misc.ui;\n+\n+import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.component.html.NativeButton;\n+import com.vaadin.flow.component.html.Span;\n+import com.vaadin.flow.router.Route;\n+\n+@Route(\"slow-response\")\n+public class SlowResponseView extends Div {\n+\n+    public static final String SLOW_ADD = \"slowAdd\";\n+    public static final String ADD = \"add\";\n+    public static final String ADDED_PREDICATE = \"added_\";\n+\n+    private int elements = 0;\n+\n+    public SlowResponseView() {\n+        int messageTimeoutMillis = UI.getCurrent().getSession().getService()\n+                .getDeploymentConfiguration().getMaxMessageSuspendTimeout();\n+        add(new Span(\"Max message suspend timeout: \" + messageTimeoutMillis));\n+        NativeButton slowAddElement = new NativeButton(\n+                \"Add element (slow response)\", event -> {\n+                    slowAddElement(messageTimeoutMillis + 1000);\n+                });\n+        slowAddElement.setId(SLOW_ADD);\n+\n+        NativeButton addElement = new NativeButton(\"Add element\", event -> {\n+            addElement();\n+        });\n+        addElement.setId(ADD);\n+\n+        add(slowAddElement, addElement);\n+    }\n+\n+    private void addElement() {\n+        Div addedElement = new Div(\"Added element\");\n+        addedElement.setId(ADDED_PREDICATE + elements++);\n+        add(addedElement);\n+    }\n+\n+    private void slowAddElement(long delayMillis) {\n+        try {\n+            Thread.sleep(delayMillis);\n+        } catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n+            throw new RuntimeException(e);\n+        }\n+        addElement();\n+    }\n+}\n\ndiff --git a/flow-tests/test-client-queue/src/test/java/com/vaadin/flow/misc/ui/SlowResponseIT.java b/flow-tests/test-client-queue/src/test/java/com/vaadin/flow/misc/ui/SlowResponseIT.java\nnew file mode 100644\nindex 00000000000..8b4672d6bdb\n--- /dev/null\n+++ b/flow-tests/test-client-queue/src/test/java/com/vaadin/flow/misc/ui/SlowResponseIT.java\n@@ -0,0 +1,111 @@\n+package com.vaadin.flow.misc.ui;\n+\n+import java.util.function.Predicate;\n+import java.util.logging.Level;\n+import java.util.regex.Pattern;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.TimeoutException;\n+\n+import com.vaadin.flow.component.html.testbench.DivElement;\n+import com.vaadin.flow.component.html.testbench.NativeButtonElement;\n+import com.vaadin.flow.testutil.ChromeBrowserTest;\n+\n+import static com.vaadin.flow.misc.ui.SlowResponseView.ADD;\n+import static com.vaadin.flow.misc.ui.SlowResponseView.ADDED_PREDICATE;\n+import static com.vaadin.flow.misc.ui.SlowResponseView.SLOW_ADD;\n+\n+public class SlowResponseIT extends ChromeBrowserTest {\n+\n+    private static final Predicate<String> DUPLICATE_RESPONSE_LOG_MESSAGE_PREDICATE = Pattern\n+            .compile(\n+                    \".*Received message with server id \\\\d but have already seen \\\\d. Ignoring it.*\")\n+            .asMatchPredicate();\n+\n+    @Override\n+    protected String getTestPath() {\n+        return \"/slow-response\";\n+    }\n+\n+    @Test\n+    public void slowResponseForRequest_clientDontResendsRequest_serverAnswersCorrectly() {\n+        open();\n+\n+        try {\n+            waitUntil(driver -> $(NativeButtonElement.class).withId(SLOW_ADD)\n+                    .exists());\n+        } catch (TimeoutException te) {\n+            Assert.fail(\"Expected 'slow add element' button wasn't found\");\n+        }\n+        // Add element normally\n+        $(NativeButtonElement.class).id(ADD).click();\n+        Assert.assertTrue(\n+                $(DivElement.class).id(ADDED_PREDICATE + 0).isDisplayed());\n+\n+        // Request null response for next add\n+        $(NativeButtonElement.class).id(SLOW_ADD).click();\n+\n+        $(NativeButtonElement.class).id(ADD).click();\n+\n+        try {\n+            waitUntil(driver -> $(DivElement.class).withId(ADDED_PREDICATE + 1)\n+                    .exists());\n+        } catch (TimeoutException te) {\n+            Assert.fail(\n+                    \"New element was not added though client should re-send request.\");\n+        }\n+\n+        Assert.assertTrue(\n+                \"Slow response click message sent multiple times and got duplicate response\",\n+                getLogEntries(Level.WARNING).stream().noneMatch(\n+                        logEntry -> DUPLICATE_RESPONSE_LOG_MESSAGE_PREDICATE\n+                                .test(logEntry.getMessage())));\n+    }\n+\n+    @Test\n+    public void clickWhileRequestPending_clientQueuesRequests_messagesSentCorrectly() {\n+        open();\n+\n+        try {\n+            waitUntil(driver -> $(NativeButtonElement.class).withId(SLOW_ADD)\n+                    .exists());\n+        } catch (TimeoutException te) {\n+            Assert.fail(\"Expected 'slow add element' button wasn't found\");\n+        }\n+\n+        // Add element normally\n+        $(NativeButtonElement.class).id(ADD).click();\n+        Assert.assertTrue(\n+                $(DivElement.class).id(ADDED_PREDICATE + 0).isDisplayed());\n+\n+        // Request null response for next add\n+        $(NativeButtonElement.class).id(SLOW_ADD).click();\n+\n+        $(NativeButtonElement.class).id(ADD).click();\n+        $(NativeButtonElement.class).id(ADD).click();\n+\n+        try {\n+            waitUntil(driver -> $(DivElement.class).withId(ADDED_PREDICATE + 1)\n+                    .exists());\n+        } catch (TimeoutException te) {\n+            Assert.fail(\n+                    \"New element was not added though client should re-send request.\");\n+        }\n+\n+        try {\n+            waitUntil(driver -> $(DivElement.class).withId(ADDED_PREDICATE + 2)\n+                    .exists());\n+        } catch (TimeoutException te) {\n+            Assert.fail(\n+                    \"Second new element was not added though client should queue request.\");\n+        }\n+\n+        Assert.assertTrue(\n+                \"Slow response click message sent multiple times and got duplicate response\",\n+                getLogEntries(Level.WARNING).stream().noneMatch(\n+                        logEntry -> DUPLICATE_RESPONSE_LOG_MESSAGE_PREDICATE\n+                                .test(logEntry.getMessage())));\n+\n+    }\n+}\n\ndiff --git a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/faulttolerance/NetworkInterruptionIT.java b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/faulttolerance/NetworkInterruptionIT.java\nindex 3a5583aea70..6ff9a9ff1c8 100644\n--- a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/faulttolerance/NetworkInterruptionIT.java\n+++ b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/faulttolerance/NetworkInterruptionIT.java\n@@ -129,7 +129,7 @@ public void networkInterruption_dropProxyBeforeResponse_serverMessageCachedAndRe\n     }\n \n     private void waitForReconnectAttempts() {\n-        waitForLogMessage(\"Reconnect attempt 2 for XHR\");\n+        waitForLogMessage(\"Reconnect attempt 4 for XHR\");\n     }\n \n     private void ensureNoSystemErrorFromServer() {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21189",
    "pr_id": 21189,
    "issue_id": 21139,
    "repo": "vaadin/flow",
    "problem_statement": "Allow PreserveOnRefresh when there's only a partial match to the preserved route chain\n### Description of the bug\n\nI have an app with a `MainLayout` annotated with `@PreserveAndRefresh` and two views, both annotated with `@Route @RouteScope @RouteScopeOwner(MainLayout.class) @SpringComponent`. I'm hoping to achieve browser-tab-scoped routes. All works okay when I navigate around the app via clicking on router links; also browser refresh is handled correctly.\n\nHowever, when I type in the URL manually into browser's address bar, the `MainLayout` suddenly gets re-created, which then breaks the tab scope and causes new instances of all routes to be created.\n\nThis behavior is really strange since the `window.name` isn't changed (in Firefox). Note that the choice of the browser is extremely important - Safari, when you enter URL manually, changes the `window.name`, and in such case it's understandable to have new instances of `MainLayout` and the routes. However, the same issue is reproducible with Firefox as well, which doesn't change the `window.name`.\n\nThis issue can be reproduced as follows:\n1. Click a link on browser's bookmark toolbar.\n2. TestBench: call `getDriver().get(\"url\")`.\n\nThe TestBench case is the most problematic in particular: if your app depends on tab scope to work properly, this bug prevents the app to be tested via `getDriver().get(\"url\")` and you need to tell the TestBench-controlled browser to navigate via other means instead (e.g. via clicking links in a nav bar).\n\n### Expected behavior\n\nThe `MainLayout` instance should be reused.\n\n### Minimal reproducible example\n\nCheck out the https://github.com/vaadin/skeleton-starter-flow-spring example app for Vaadin 23.5.15. Then create the following classes:\n```java\n@PreserveOnRefresh\npublic class MainLayout extends Div implements RouterLayout {\n    public MainLayout() {\n        System.out.println(this + \": constructor\");\n    }\n\n    @Override\n    public void showRouterLayoutContent(HasElement content) {\n        content.getElement().removeFromTree();\n        RouterLayout.super.showRouterLayoutContent(content);\n    }\n}\n@Route(layout = MainLayout.class)\n@RouteScope\n@RouteScopeOwner(MainLayout.class)\n@SpringComponent\npublic class MainView extends VerticalLayout {\n    public MainView() {\n        System.out.println(this + \": constructor\");\n        UI.getCurrent().getPage().retrieveExtendedClientDetails(e -> System.out.println(e.getWindowName()));\n        add(new RouterLink(\"Navigate to second view - this works correctly\", SecondView.class));\n    }\n}\n@Route(value = \"second\", layout = MainLayout.class)\n@RouteScope\n@RouteScopeOwner(MainLayout.class)\n@SpringComponent\npublic class SecondView extends VerticalLayout {\n    public SecondView() {\n        System.out.println(this + \": constructor\");\n        UI.getCurrent().getPage().retrieveExtendedClientDetails(e -> System.out.println(e.getWindowName()));\n    }\n}\n```\nRun the app; the browser opens and navigates to http://localhost:8080 and the following is printed to Java stdout:\n```\norg.vaadin.example.MainLayout@26a9aa3e: constructor\norg.vaadin.example.MainView@1cee63e2: constructor\nROOT-2521314-0.937907358684621\n```\nAll good so far. Now enter the following into the browser's address bar manually, via keyboard: `http://localhost:8080/second`. This navigates to `SecondView`, however you can see in Java stdout that a new instance of `MainLayout` got instantiated, while the `window.name` stayed the same:\n```\norg.vaadin.example.MainLayout@4b4a7429: constructor\norg.vaadin.example.SecondView@23d28536: constructor\nROOT-2521314-0.937907358684621\n```\n\n\n### Versions\n\n- Vaadin / Flow version: 23.5.15\n- Java version: 17 (doesn't matter)\n- OS version: Ubuntu 24.10 (doesn't matter)\n- Browser version (if applicable): Firefox 136.0.1\n",
    "issue_word_count": 515,
    "test_files_count": 10,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java",
      "flow-server/src/main/java/com/vaadin/flow/router/PreserveOnRefresh.java",
      "flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java",
      "flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/MainLayout.java",
      "flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/MainView.java",
      "flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/RootLayout.java",
      "flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/SecondView.java",
      "flow-tests/test-misc/src/test/java/com/vaadin/flow/misc/ui/PartialMatchRefreshIT.java",
      "flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/MainLayout.java",
      "flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/MainView.java",
      "flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/RootLayout.java",
      "flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/SecondView.java",
      "flow-tests/vaadin-spring-tests/test-spring-boot/src/test/java/com/vaadin/flow/spring/test/partial/PartialMatchRefreshIT.java"
    ],
    "pr_changed_test_files": [
      "flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/MainLayout.java",
      "flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/MainView.java",
      "flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/RootLayout.java",
      "flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/SecondView.java",
      "flow-tests/test-misc/src/test/java/com/vaadin/flow/misc/ui/PartialMatchRefreshIT.java",
      "flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/MainLayout.java",
      "flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/MainView.java",
      "flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/RootLayout.java",
      "flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/SecondView.java",
      "flow-tests/vaadin-spring-tests/test-spring-boot/src/test/java/com/vaadin/flow/spring/test/partial/PartialMatchRefreshIT.java"
    ],
    "base_commit": "05a3ac4bc3b3b4e791c4b62fea503ca65f5db385",
    "head_commit": "3efdb2f76c658a705b888f5ca7f3ac5ad5039739",
    "repo_url": "https://github.com/vaadin/flow/pull/21189",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21189",
    "dockerfile": "",
    "pr_merged_at": "2025-04-03T04:53:39.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java b/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java\nindex c9cabe553e3..fbc90c1fb3a 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java\n@@ -807,6 +807,19 @@ public boolean cancelPendingTitleUpdate() {\n         return result;\n     }\n \n+    /**\n+     * Populate the routerTargetChain with RouterLayouts, but only if the target\n+     * chain is empty. If the chain contains elements the given list is ignored.\n+     *\n+     * @param layouts\n+     *            stored router target chain to set as last navigated chain\n+     */\n+    public void setRouterTargetChain(List<RouterLayout> layouts) {\n+        if (routerTargetChain.isEmpty()) {\n+            routerTargetChain.addAll(layouts);\n+        }\n+    }\n+\n     /**\n      * Shows a route target in the related UI. This method is intended for\n      * framework use only. Use {@link UI#navigate(String)} to change the route\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/router/PreserveOnRefresh.java b/flow-server/src/main/java/com/vaadin/flow/router/PreserveOnRefresh.java\nindex 0b77e87357b..fe37103cecf 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/router/PreserveOnRefresh.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/router/PreserveOnRefresh.java\n@@ -45,4 +45,19 @@\n @Inherited\n @Documented\n public @interface PreserveOnRefresh {\n+\n+    /**\n+     * Set to true if refresh should also reuse partial chain components of\n+     * stored view chain.\n+     * <p>\n+     * This means that when navigating from a preserve on refresh target to a\n+     * new url in the same client window context, where windowName matches, the\n+     * router layouts that have been preserved will be reused without\n+     * re-creation for the new route.\n+     * <p>\n+     * Default is {@code false} so only url match is repopulated.\n+     *\n+     * @return {@code true} if partial chain match should be checked and used\n+     */\n+    boolean partialMatch() default false;\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java b/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java\nindex 8d23b7125a9..ab71c262f02 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java\n@@ -129,7 +129,7 @@ public NavigationState getNavigationState() {\n      */\n     @SuppressWarnings(\"unchecked\")\n     // Non-private for testing purposes\n-    static <T extends HasElement> T getRouteTarget(Class<T> routeTargetType,\n+    <T extends HasElement> T getRouteTarget(Class<T> routeTargetType,\n             NavigationEvent event, boolean lastElement) {\n         UI ui = event.getUI();\n         Instantiator instantiator = Instantiator.get(ui);\n@@ -267,6 +267,48 @@ private boolean populateChain(ArrayList<HasElement> chain,\n                 return true;\n             }\n             chain.addAll(maybeChain.get());\n+\n+            // If partialMatch is set to true check if the cache contains a\n+            // chain and possibly request extended details to get window name\n+            // to select cached chain.\n+            if (chain.isEmpty() && isPreservePartialTarget(\n+                    navigationState.getNavigationTarget(), routeLayoutTypes)) {\n+                UI ui = event.getUI();\n+                if (ui.getInternals().getExtendedClientDetails() == null) {\n+                    PreservedComponentCache cache = ui.getSession()\n+                            .getAttribute(PreservedComponentCache.class);\n+                    if (cache != null && !cache.isEmpty()) {\n+                        // As there is a cached chain we get the client details\n+                        // to get the window name so we can determine if the\n+                        // cache contains a chain for us to use.\n+                        ui.getPage().retrieveExtendedClientDetails(\n+                                details -> handle(event));\n+                        return true;\n+                    }\n+                } else {\n+                    Optional<List<HasElement>> partialChain = getWindowPreservedChain(\n+                            ui.getSession(),\n+                            ui.getInternals().getExtendedClientDetails()\n+                                    .getWindowName());\n+                    if (partialChain.isPresent()) {\n+                        List<HasElement> oldChain = partialChain.get();\n+                        disconnectElements(oldChain, ui);\n+\n+                        List<RouterLayout> routerLayouts = new ArrayList<>();\n+\n+                        for (HasElement hasElement : oldChain) {\n+                            if (hasElement instanceof RouterLayout) {\n+                                routerLayouts.add((RouterLayout) hasElement);\n+                            } else {\n+                                // Remove any non element from their parent to\n+                                // not get old or duplicate route content\n+                                hasElement.getElement().removeFromParent();\n+                            }\n+                        }\n+                        ui.getInternals().setRouterTargetChain(routerLayouts);\n+                    }\n+                }\n+            }\n         } else {\n             // Create an empty chain which gets populated later in\n             // `createChainIfEmptyAndExecuteBeforeEnterNavigation`.\n@@ -966,23 +1008,7 @@ private Optional<ArrayList<HasElement>> getPreservedChain(\n             if (maybePreserved.isPresent()) {\n                 // Re-use preserved chain for this route\n                 ArrayList<HasElement> chain = maybePreserved.get();\n-                final HasElement root = chain.get(chain.size() - 1);\n-                final Component component = (Component) chain.get(0);\n-                final Optional<UI> maybePrevUI = component.getUI();\n-\n-                if (maybePrevUI.isPresent() && maybePrevUI.get().equals(ui)) {\n-                    return Optional.of(chain);\n-                }\n-\n-                // Remove the top-level component from the tree\n-                root.getElement().removeFromTree(false);\n-\n-                // Transfer all remaining UI child elements (typically dialogs\n-                // and notifications) to the new UI\n-                maybePrevUI.ifPresent(prevUi -> {\n-                    ui.getInternals().moveElementsFrom(prevUi);\n-                    prevUi.close();\n-                });\n+                disconnectElements(chain, ui);\n \n                 return Optional.of(chain);\n             }\n@@ -991,6 +1017,26 @@ private Optional<ArrayList<HasElement>> getPreservedChain(\n         return Optional.of(new ArrayList<>(0));\n     }\n \n+    private static void disconnectElements(List<HasElement> chain, UI ui) {\n+        final HasElement root = chain.get(chain.size() - 1);\n+        final Component component = (Component) chain.get(0);\n+        final Optional<UI> maybePrevUI = component.getUI();\n+\n+        if (maybePrevUI.isPresent() && maybePrevUI.get().equals(ui)) {\n+            return;\n+        }\n+\n+        // Remove the top-level component from the tree\n+        root.getElement().removeFromTree(false);\n+\n+        // Transfer all remaining UI child elements (typically dialogs\n+        // and notifications) to the new UI\n+        maybePrevUI.ifPresent(prevUi -> {\n+            ui.getInternals().moveElementsFrom(prevUi);\n+            prevUi.close();\n+        });\n+    }\n+\n     /**\n      * Invoke this method with the chain that needs to be preserved after\n      * {@link #handle(NavigationEvent)} method created it.\n@@ -1079,6 +1125,18 @@ private static boolean isPreserveOnRefreshTarget(\n                         .isAnnotationPresent(PreserveOnRefresh.class));\n     }\n \n+    private static boolean isPreservePartialTarget(\n+            Class<? extends Component> routeTargetType,\n+            List<Class<? extends RouterLayout>> routeLayoutTypes) {\n+        return (routeTargetType.isAnnotationPresent(PreserveOnRefresh.class)\n+                && routeTargetType.getAnnotation(PreserveOnRefresh.class)\n+                        .partialMatch())\n+                || routeLayoutTypes.stream().anyMatch(layoutType -> layoutType\n+                        .isAnnotationPresent(PreserveOnRefresh.class)\n+                        && layoutType.getAnnotation(PreserveOnRefresh.class)\n+                                .partialMatch());\n+    }\n+\n     // maps window.name to (location, chain)\n     private static class PreservedComponentCache\n             extends HashMap<String, Pair<String, ArrayList<HasElement>>> {\n@@ -1105,9 +1163,27 @@ static Optional<ArrayList<HasElement>> getPreservedChain(\n         if (cache != null && cache.containsKey(windowName) && cache\n                 .get(windowName).getFirst().equals(location.getPath())) {\n             return Optional.of(cache.get(windowName).getSecond());\n-        } else {\n-            return Optional.empty();\n         }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Get a preserved chain by window name only ignoring location path.\n+     *\n+     * @param session\n+     *            current session\n+     * @param windowName\n+     *            window name to get cached view stack for\n+     * @return view stack cache if available for window name\n+     */\n+    static Optional<List<HasElement>> getWindowPreservedChain(\n+            VaadinSession session, String windowName) {\n+        final PreservedComponentCache cache = session\n+                .getAttribute(PreservedComponentCache.class);\n+        if (cache != null && cache.containsKey(windowName)) {\n+            return Optional.of(cache.get(windowName).getSecond());\n+        }\n+        return Optional.empty();\n     }\n \n     static void setPreservedChain(VaadinSession session, String windowName,\n",
    "test_patch": "diff --git a/flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/MainLayout.java b/flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/MainLayout.java\nnew file mode 100644\nindex 00000000000..241d076287b\n--- /dev/null\n+++ b/flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/MainLayout.java\n@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.misc.ui.partial;\n+\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.component.html.NativeButton;\n+import com.vaadin.flow.router.ParentLayout;\n+import com.vaadin.flow.router.RouterLayout;\n+\n+@ParentLayout(RootLayout.class)\n+public class MainLayout extends Div implements RouterLayout {\n+\n+    public static final String EVENT_LOG_ID = \"event-log\";\n+    public static final String RESET_ID = \"reset-log\";\n+\n+    private static int eventCounter = 0;\n+\n+    private final Div log = new Div();\n+\n+    public MainLayout() {\n+        log.setText(++eventCounter + \": \" + getClass().getSimpleName()\n+                + \": constructor\");\n+        log.setId(EVENT_LOG_ID);\n+        NativeButton reset = new NativeButton(\"Reset count\",\n+                e -> eventCounter = 0);\n+        reset.setId(RESET_ID);\n+        add(log, reset);\n+    }\n+}\n\ndiff --git a/flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/MainView.java b/flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/MainView.java\nnew file mode 100644\nindex 00000000000..055030f0fab\n--- /dev/null\n+++ b/flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/MainView.java\n@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.misc.ui.partial;\n+\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.router.Route;\n+import com.vaadin.flow.router.RouterLink;\n+\n+@Route(value = \"main\", layout = MainLayout.class)\n+public class MainView extends Div {\n+\n+    public MainView() {\n+\n+        add(new RouterLink(\"Navigate to second view - this works correctly\",\n+                SecondView.class));\n+    }\n+}\n\ndiff --git a/flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/RootLayout.java b/flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/RootLayout.java\nnew file mode 100644\nindex 00000000000..062c7bb0265\n--- /dev/null\n+++ b/flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/RootLayout.java\n@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.misc.ui.partial;\n+\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.component.html.NativeButton;\n+import com.vaadin.flow.router.PreserveOnRefresh;\n+import com.vaadin.flow.router.RouterLayout;\n+\n+@PreserveOnRefresh(partialMatch = true)\n+public class RootLayout extends Div implements RouterLayout {\n+\n+    public static final String ROOT_EVENT_LOG_ID = \"root-event-log\";\n+    public static final String ROOT_RESET_ID = \"root-reset-log\";\n+\n+    private static int eventCounter = 0;\n+\n+    private final Div log = new Div();\n+\n+    public RootLayout() {\n+        log.setText(++eventCounter + \": \" + getClass().getSimpleName()\n+                + \": constructor\");\n+        log.setId(ROOT_EVENT_LOG_ID);\n+        NativeButton reset = new NativeButton(\"Reset count\",\n+                e -> eventCounter = 0);\n+        reset.setId(ROOT_RESET_ID);\n+        add(log, reset);\n+    }\n+}\n\ndiff --git a/flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/SecondView.java b/flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/SecondView.java\nnew file mode 100644\nindex 00000000000..c7b8f583bda\n--- /dev/null\n+++ b/flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/SecondView.java\n@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.misc.ui.partial;\n+\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.router.Route;\n+\n+@Route(value = \"second\", layout = MainLayout.class)\n+public class SecondView extends Div {\n+    public static final String SECOND_ID = \"hello-second\";\n+\n+    public SecondView() {\n+        Div helloSecond = new Div(\"Hello second\");\n+        helloSecond.setId(SECOND_ID);\n+        add(helloSecond);\n+    }\n+}\n\ndiff --git a/flow-tests/test-misc/src/test/java/com/vaadin/flow/misc/ui/PartialMatchRefreshIT.java b/flow-tests/test-misc/src/test/java/com/vaadin/flow/misc/ui/PartialMatchRefreshIT.java\nnew file mode 100644\nindex 00000000000..8fb83b6cc85\n--- /dev/null\n+++ b/flow-tests/test-misc/src/test/java/com/vaadin/flow/misc/ui/PartialMatchRefreshIT.java\n@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.misc.ui;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import com.vaadin.flow.component.html.testbench.AnchorElement;\n+import com.vaadin.flow.component.html.testbench.DivElement;\n+import com.vaadin.flow.component.html.testbench.NativeButtonElement;\n+import com.vaadin.flow.testutil.ChromeBrowserTest;\n+\n+import static com.vaadin.flow.misc.ui.partial.MainLayout.EVENT_LOG_ID;\n+import static com.vaadin.flow.misc.ui.partial.MainLayout.RESET_ID;\n+import static com.vaadin.flow.misc.ui.partial.RootLayout.ROOT_EVENT_LOG_ID;\n+import static com.vaadin.flow.misc.ui.partial.SecondView.SECOND_ID;\n+\n+@NotThreadSafe\n+public class PartialMatchRefreshIT extends ChromeBrowserTest {\n+\n+    @Test\n+    public void whenUpdatingUrl_parentChainShouldBeReused() {\n+        open();\n+\n+        Assert.assertEquals(\"1: RootLayout: constructor\",\n+                $(DivElement.class).id(ROOT_EVENT_LOG_ID).getText());\n+\n+        Assert.assertEquals(\"1: MainLayout: constructor\",\n+                $(DivElement.class).id(EVENT_LOG_ID).getText());\n+        Assert.assertEquals(\"Main navigation link should be available\", 1,\n+                $(AnchorElement.class).all().size());\n+\n+        getDriver().get(getRootURL() + \"/second\");\n+\n+        Assert.assertTrue(\"Couldn't find second view text div\",\n+                $(DivElement.class).id(SECOND_ID).isDisplayed());\n+\n+        Assert.assertEquals(\"1: RootLayout: constructor\",\n+                $(DivElement.class).id(ROOT_EVENT_LOG_ID).getText());\n+        Assert.assertEquals(\"1: MainLayout: constructor\",\n+                $(DivElement.class).id(EVENT_LOG_ID).getText());\n+\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        $(NativeButtonElement.class).id(RESET_ID).click();\n+    }\n+\n+    @Override\n+    protected String getTestPath() {\n+        return \"/main\";\n+    }\n+\n+}\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/MainLayout.java b/flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/MainLayout.java\nnew file mode 100644\nindex 00000000000..ec2f4933ef6\n--- /dev/null\n+++ b/flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/MainLayout.java\n@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.spring.test.partial;\n+\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.component.html.NativeButton;\n+import com.vaadin.flow.router.ParentLayout;\n+import com.vaadin.flow.router.RouterLayout;\n+\n+@ParentLayout(RootLayout.class)\n+public class MainLayout extends Div implements RouterLayout {\n+\n+    public static final String EVENT_LOG_ID = \"event-log\";\n+    public static final String RESET_ID = \"reset-log\";\n+\n+    private static int eventCounter = 0;\n+\n+    private final Div log = new Div();\n+\n+    public MainLayout() {\n+        log.setText(++eventCounter + \": \" + getClass().getSimpleName()\n+                + \": constructor\");\n+        log.setId(EVENT_LOG_ID);\n+        NativeButton reset = new NativeButton(\"Reset count\",\n+                e -> eventCounter = 0);\n+        reset.setId(RESET_ID);\n+        add(log, reset);\n+    }\n+}\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/MainView.java b/flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/MainView.java\nnew file mode 100644\nindex 00000000000..eda2706922b\n--- /dev/null\n+++ b/flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/MainView.java\n@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.spring.test.partial;\n+\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.router.Route;\n+import com.vaadin.flow.router.RouterLink;\n+import com.vaadin.flow.spring.annotation.RouteScope;\n+import com.vaadin.flow.spring.annotation.RouteScopeOwner;\n+import com.vaadin.flow.spring.annotation.SpringComponent;\n+\n+@Route(value = \"main\", layout = MainLayout.class)\n+@RouteScope\n+@RouteScopeOwner(MainLayout.class)\n+@SpringComponent\n+public class MainView extends Div {\n+\n+    public MainView() {\n+\n+        add(new RouterLink(\"Navigate to second view - this works correctly\",\n+                SecondView.class));\n+    }\n+}\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/RootLayout.java b/flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/RootLayout.java\nnew file mode 100644\nindex 00000000000..4f2713a32d6\n--- /dev/null\n+++ b/flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/RootLayout.java\n@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.spring.test.partial;\n+\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.component.html.NativeButton;\n+import com.vaadin.flow.router.PreserveOnRefresh;\n+import com.vaadin.flow.router.RouterLayout;\n+\n+@PreserveOnRefresh(partialMatch = true)\n+public class RootLayout extends Div implements RouterLayout {\n+\n+    public static final String ROOT_EVENT_LOG_ID = \"root-event-log\";\n+    public static final String ROOT_RESET_ID = \"root-reset-log\";\n+\n+    private static int eventCounter = 0;\n+\n+    private final Div log = new Div();\n+\n+    public RootLayout() {\n+        log.setText(++eventCounter + \": \" + getClass().getSimpleName()\n+                + \": constructor\");\n+        log.setId(ROOT_EVENT_LOG_ID);\n+        NativeButton reset = new NativeButton(\"Reset count\",\n+                e -> eventCounter = 0);\n+        reset.setId(ROOT_RESET_ID);\n+        add(log, reset);\n+    }\n+}\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/SecondView.java b/flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/SecondView.java\nnew file mode 100644\nindex 00000000000..a1b63c0bc9a\n--- /dev/null\n+++ b/flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/SecondView.java\n@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.spring.test.partial;\n+\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.router.Route;\n+import com.vaadin.flow.spring.annotation.RouteScope;\n+import com.vaadin.flow.spring.annotation.RouteScopeOwner;\n+import com.vaadin.flow.spring.annotation.SpringComponent;\n+\n+@Route(value = \"second\", layout = MainLayout.class)\n+@RouteScope\n+@RouteScopeOwner(MainLayout.class)\n+@SpringComponent\n+public class SecondView extends Div {\n+    public static final String SECOND_ID = \"hello-second\";\n+\n+    public SecondView() {\n+        Div helloSecond = new Div(\"Hello second\");\n+        helloSecond.setId(SECOND_ID);\n+        add(helloSecond);\n+    }\n+}\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-boot/src/test/java/com/vaadin/flow/spring/test/partial/PartialMatchRefreshIT.java b/flow-tests/vaadin-spring-tests/test-spring-boot/src/test/java/com/vaadin/flow/spring/test/partial/PartialMatchRefreshIT.java\nnew file mode 100644\nindex 00000000000..34f8f22ec6e\n--- /dev/null\n+++ b/flow-tests/vaadin-spring-tests/test-spring-boot/src/test/java/com/vaadin/flow/spring/test/partial/PartialMatchRefreshIT.java\n@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.spring.test.partial;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import com.vaadin.flow.component.html.testbench.AnchorElement;\n+import com.vaadin.flow.component.html.testbench.DivElement;\n+import com.vaadin.flow.component.html.testbench.NativeButtonElement;\n+import com.vaadin.flow.testutil.ChromeBrowserTest;\n+\n+import static com.vaadin.flow.spring.test.partial.MainLayout.RESET_ID;\n+import static com.vaadin.flow.spring.test.partial.MainLayout.EVENT_LOG_ID;\n+import static com.vaadin.flow.spring.test.partial.RootLayout.ROOT_EVENT_LOG_ID;\n+import static com.vaadin.flow.spring.test.partial.SecondView.SECOND_ID;\n+\n+@NotThreadSafe\n+public class PartialMatchRefreshIT extends ChromeBrowserTest {\n+\n+    @Test\n+    public void whenUpdatingUrl_parentChainShouldBeReused() {\n+        open();\n+\n+        Assert.assertEquals(\"1: RootLayout: constructor\",\n+                $(DivElement.class).id(ROOT_EVENT_LOG_ID).getText());\n+        Assert.assertEquals(\"1: MainLayout: constructor\",\n+                $(DivElement.class).id(EVENT_LOG_ID).getText());\n+        Assert.assertEquals(\"Main navigation link should be available\", 1,\n+                $(AnchorElement.class).all().size());\n+\n+        getDriver().get(getRootURL() + \"/second\");\n+\n+        Assert.assertTrue(\"Couldn't find second view text div\",\n+                $(DivElement.class).id(SECOND_ID).isDisplayed());\n+\n+        Assert.assertEquals(\"1: MainLayout: constructor\",\n+                $(DivElement.class).id(EVENT_LOG_ID).getText());\n+        Assert.assertEquals(\"1: RootLayout: constructor\",\n+                $(DivElement.class).id(ROOT_EVENT_LOG_ID).getText());\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        $(NativeButtonElement.class).id(RESET_ID).click();\n+    }\n+\n+    @Override\n+    protected String getTestPath() {\n+        return \"/main\";\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21176",
    "pr_id": 21176,
    "issue_id": 16984,
    "repo": "vaadin/flow",
    "problem_statement": "Navigating to the same Route does not work after using BeforeLeaveEvent.postpone\n### Description of the bug\n\nWhen navigating to a route using ContinueNavigationAction.proceed, the route can not be navigated to again. This is due to UIIntenals.lastHandledNavigation not being cleared, which skips navigation in [UI.navigate](https://github.com/vaadin/flow/blob/24.1/flow-server/src/main/java/com/vaadin/flow/component/UI.java#L1199).\r\n\r\nA simple example of this is a page that shows a confirmation dialog when leaving and that can be navigated to from itself (e.g. a header button present in the RouterLayout). After the first navigation the confirmation dialog is not shown anymore (and the navigation is not performed).\n\n### Expected behavior\n\nNavigation to the same page is not prevented (the behaviour should be the same as when not using BeforeLeaveEvent.postpone).\r\nDuring this navigation, observers like beforeLeave should be triggered.\n\n### Minimal reproducible example\n\nPressing the button has no effect after the first navigation:\r\n```\r\n@Route(\"sample\")\r\npublic class Sample extends Div implements BeforeLeaveObserver {\r\n\r\n    private static final long serialVersionUID = 1L;\r\n\r\n    public Sample() {\r\n        add(new Button(\"Navigate\", e -> UI.getCurrent().navigate(\"sample\")));\r\n    }\r\n\r\n    @Override\r\n    public void beforeLeave(BeforeLeaveEvent event) {\r\n        var action = event.postpone();\r\n        var dialog = new Dialog();\r\n        dialog.add(new Button(\"Proceed\", e -> {\r\n            action.proceed();\r\n            dialog.close();\r\n        }));\r\n        dialog.open();\r\n    }\r\n}\r\n```\r\n\r\nManually clearing the last handled navigation in afterNavigation fixes the issue:\r\n```\r\n@Route(\"sample\")\r\npublic class Sample extends Div implements BeforeLeaveObserver, AfterNavigationObserver {\r\n\r\n    private static final long serialVersionUID = 1L;\r\n\r\n    public Sample() {\r\n        add(new Button(\"Navigate\", e -> UI.getCurrent().navigate(\"sample\")));\r\n    }\r\n\r\n    @Override\r\n    public void beforeLeave(BeforeLeaveEvent event) {\r\n        var action = event.postpone();\r\n        var dialog = new Dialog();\r\n        dialog.add(new Button(\"Proceed\", e -> {\r\n            action.proceed();\r\n            dialog.close();\r\n        }));\r\n        dialog.open();\r\n    }\r\n\r\n    @Override\r\n    public void afterNavigation(AfterNavigationEvent event) {\r\n        UI.getCurrent().getInternals().clearLastHandledNavigation();\r\n    }\r\n}\r\n```\r\n\n\n### Versions\n\nVaadin: 24.1.0.rc2\r\nFlow: 24.1.0.rc2\r\nJava: Eclipse Adoptium 17.0.6\r\nOS: amd64 Windows 10 10.0\r\n",
    "issue_word_count": 309,
    "test_files_count": 1,
    "non_test_files_count": 5,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/component/UI.java",
      "flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java",
      "flow-server/src/main/java/com/vaadin/flow/router/BeforeLeaveEvent.java",
      "flow-server/src/main/java/com/vaadin/flow/router/Router.java",
      "flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java",
      "flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java"
    ],
    "base_commit": "8501ace9e33c573cbe38271ac699e62ed4d0a2b4",
    "head_commit": "42f6ba6f1cb7bb1a40da89fdda007747c1e1e208",
    "repo_url": "https://github.com/vaadin/flow/pull/21176",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21176",
    "dockerfile": "",
    "pr_merged_at": "2025-03-24T07:01:06.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/component/UI.java b/flow-server/src/main/java/com/vaadin/flow/component/UI.java\nindex 707bb9a694f..3830c861993 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/UI.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/UI.java\n@@ -2040,6 +2040,7 @@ private boolean sameLocation(Location oldLocation, Location newLocation) {\n     private void handleNavigation(Location location,\n             NavigationState navigationState, NavigationTrigger trigger) {\n         try {\n+            getInternals().setLastHandledNavigation(location);\n             NavigationEvent navigationEvent = new NavigationEvent(\n                     getInternals().getRouter(), location, this, trigger);\n \n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java b/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java\nindex a341e56d5a2..c01a6dc9993 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java\n@@ -1086,10 +1086,20 @@ public Location getLastHandledLocation() {\n     public void setLastHandledNavigation(Location location) {\n         lastHandledNavigation = location;\n         if (location != null) {\n-            locationForRefresh = location;\n+            setLocationForRefresh(location);\n         }\n     }\n \n+    /**\n+     * Store refresh location for refreshCurrentRoute.\n+     *\n+     * @param location\n+     *            current location.\n+     */\n+    public void setLocationForRefresh(Location location) {\n+        locationForRefresh = location;\n+    }\n+\n     /**\n      * Re-navigates to the current route. Also re-instantiates the route target\n      * component, and optionally all layouts in the route chain.\n@@ -1129,7 +1139,7 @@ public boolean hasLastHandledLocation() {\n      * Clear latest handled navigation location.\n      */\n     public void clearLastHandledNavigation() {\n-        setLastHandledNavigation(null);\n+        lastHandledNavigation = null;\n     }\n \n     /**\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/router/BeforeLeaveEvent.java b/flow-server/src/main/java/com/vaadin/flow/router/BeforeLeaveEvent.java\nindex 6349fceb201..6384a6024e6 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/router/BeforeLeaveEvent.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/router/BeforeLeaveEvent.java\n@@ -96,11 +96,7 @@ public void proceed() {\n                             NavigationTrigger.PROGRAMMATIC);\n                 }\n \n-                final UI ui = event.getUI();\n                 handler.handle(event);\n-                if (ui.getSession().getConfiguration().isReactEnabled()) {\n-                    ui.getInternals().clearLastHandledNavigation();\n-                }\n                 setReferences(null, null);\n             }\n         }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/router/Router.java b/flow-server/src/main/java/com/vaadin/flow/router/Router.java\nindex e2295cca1b5..338547a7b77 100755\n--- a/flow-server/src/main/java/com/vaadin/flow/router/Router.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/router/Router.java\n@@ -230,6 +230,7 @@ public int navigate(UI ui, Location location, NavigationTrigger trigger,\n         ui.getSession().checkHasLock();\n \n         if (handleNavigationForLocation(ui, location)) {\n+            ui.getInternals().setLastHandledNavigation(location);\n             try {\n                 return handleNavigation(ui, location, trigger, state,\n                         forceInstantiation, recreateLayoutChain);\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java b/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java\nindex 86092096d7f..ba732177930 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java\n@@ -149,6 +149,7 @@ static <T extends HasElement> T getRouteTarget(Class<T> routeTargetType,\n     @Override\n     public int handle(NavigationEvent event) {\n         UI ui = event.getUI();\n+        ui.getInternals().setLocationForRefresh(event.getLocation());\n \n         final Class<? extends Component> routeTargetType = navigationState\n                 .getNavigationTarget();\n@@ -325,17 +326,14 @@ private void pushHistoryStateIfNeeded(NavigationEvent event, UI ui) {\n             }\n         } else if (NavigationTrigger.REFRESH != event.getTrigger()\n                 && !event.isForwardTo()\n-                && (!ui.getInternals().hasLastHandledLocation()\n+                && (event.getUI().getInternals().getActiveViewLocation() == null\n                         || !event.getLocation().getPathWithQueryParameters()\n-                                .equals(ui.getInternals()\n-                                        .getLastHandledLocation()\n+                                .equals(event.getUI().getInternals()\n+                                        .getActiveViewLocation()\n                                         .getPathWithQueryParameters()))) {\n-\n             if (shouldPushHistoryState(event)) {\n                 pushHistoryState(event);\n             }\n-\n-            ui.getInternals().setLastHandledNavigation(event.getLocation());\n         } else if (ui.getInternals().getSession().getService()\n                 .getDeploymentConfiguration().isReactEnabled()) {\n             if (shouldPushHistoryState(event)) {\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java b/flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java\nindex 41aa569bd41..5cf32bb86db 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java\n@@ -976,15 +976,6 @@ public Page getPage() {\n         pushStateLocations.clear();\n         ui.getInternals().clearLastHandledNavigation();\n \n-        renderer.handle(new NavigationEvent(new Router(new TestRouteRegistry()),\n-                new Location(\"regular\"), ui, NavigationTrigger.UI_NAVIGATE));\n-        Assert.assertTrue(\"pushState invocation is expected.\",\n-                pushStateCalled.get());\n-        Assert.assertTrue(pushStateLocations.stream()\n-                .anyMatch(location -> location.getPath().equals(\"regular\")));\n-\n-        pushStateCalled.set(false);\n-\n         renderer.handle(new NavigationEvent(new Router(new TestRouteRegistry()),\n                 new Location(\"regular\"), ui, NavigationTrigger.UI_NAVIGATE));\n         Assert.assertFalse(\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21175",
    "pr_id": 21175,
    "issue_id": 16984,
    "repo": "vaadin/flow",
    "problem_statement": "Navigating to the same Route does not work after using BeforeLeaveEvent.postpone\n### Description of the bug\n\nWhen navigating to a route using ContinueNavigationAction.proceed, the route can not be navigated to again. This is due to UIIntenals.lastHandledNavigation not being cleared, which skips navigation in [UI.navigate](https://github.com/vaadin/flow/blob/24.1/flow-server/src/main/java/com/vaadin/flow/component/UI.java#L1199).\r\n\r\nA simple example of this is a page that shows a confirmation dialog when leaving and that can be navigated to from itself (e.g. a header button present in the RouterLayout). After the first navigation the confirmation dialog is not shown anymore (and the navigation is not performed).\n\n### Expected behavior\n\nNavigation to the same page is not prevented (the behaviour should be the same as when not using BeforeLeaveEvent.postpone).\r\nDuring this navigation, observers like beforeLeave should be triggered.\n\n### Minimal reproducible example\n\nPressing the button has no effect after the first navigation:\r\n```\r\n@Route(\"sample\")\r\npublic class Sample extends Div implements BeforeLeaveObserver {\r\n\r\n    private static final long serialVersionUID = 1L;\r\n\r\n    public Sample() {\r\n        add(new Button(\"Navigate\", e -> UI.getCurrent().navigate(\"sample\")));\r\n    }\r\n\r\n    @Override\r\n    public void beforeLeave(BeforeLeaveEvent event) {\r\n        var action = event.postpone();\r\n        var dialog = new Dialog();\r\n        dialog.add(new Button(\"Proceed\", e -> {\r\n            action.proceed();\r\n            dialog.close();\r\n        }));\r\n        dialog.open();\r\n    }\r\n}\r\n```\r\n\r\nManually clearing the last handled navigation in afterNavigation fixes the issue:\r\n```\r\n@Route(\"sample\")\r\npublic class Sample extends Div implements BeforeLeaveObserver, AfterNavigationObserver {\r\n\r\n    private static final long serialVersionUID = 1L;\r\n\r\n    public Sample() {\r\n        add(new Button(\"Navigate\", e -> UI.getCurrent().navigate(\"sample\")));\r\n    }\r\n\r\n    @Override\r\n    public void beforeLeave(BeforeLeaveEvent event) {\r\n        var action = event.postpone();\r\n        var dialog = new Dialog();\r\n        dialog.add(new Button(\"Proceed\", e -> {\r\n            action.proceed();\r\n            dialog.close();\r\n        }));\r\n        dialog.open();\r\n    }\r\n\r\n    @Override\r\n    public void afterNavigation(AfterNavigationEvent event) {\r\n        UI.getCurrent().getInternals().clearLastHandledNavigation();\r\n    }\r\n}\r\n```\r\n\n\n### Versions\n\nVaadin: 24.1.0.rc2\r\nFlow: 24.1.0.rc2\r\nJava: Eclipse Adoptium 17.0.6\r\nOS: amd64 Windows 10 10.0\r\n",
    "issue_word_count": 309,
    "test_files_count": 1,
    "non_test_files_count": 5,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/component/UI.java",
      "flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java",
      "flow-server/src/main/java/com/vaadin/flow/router/BeforeLeaveEvent.java",
      "flow-server/src/main/java/com/vaadin/flow/router/Router.java",
      "flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java",
      "flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java"
    ],
    "base_commit": "3d0ae78fb8ab012a97c5c10589877db68dfe3d74",
    "head_commit": "dc3bc489113c36b2b4ff9d7ce4289db49767696e",
    "repo_url": "https://github.com/vaadin/flow/pull/21175",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21175",
    "dockerfile": "",
    "pr_merged_at": "2025-03-24T07:00:55.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/component/UI.java b/flow-server/src/main/java/com/vaadin/flow/component/UI.java\nindex 5f1dd534204..9d0bbc0058a 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/UI.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/UI.java\n@@ -2040,6 +2040,7 @@ private boolean sameLocation(Location oldLocation, Location newLocation) {\n     private void handleNavigation(Location location,\n             NavigationState navigationState, NavigationTrigger trigger) {\n         try {\n+            getInternals().setLastHandledNavigation(location);\n             NavigationEvent navigationEvent = new NavigationEvent(\n                     getInternals().getRouter(), location, this, trigger);\n \n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java b/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java\nindex fbe7433ccb7..23eac2ffe0f 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java\n@@ -1107,10 +1107,20 @@ public Location getLastHandledLocation() {\n     public void setLastHandledNavigation(Location location) {\n         lastHandledNavigation = location;\n         if (location != null) {\n-            locationForRefresh = location;\n+            setLocationForRefresh(location);\n         }\n     }\n \n+    /**\n+     * Store refresh location for refreshCurrentRoute.\n+     *\n+     * @param location\n+     *            current location.\n+     */\n+    public void setLocationForRefresh(Location location) {\n+        locationForRefresh = location;\n+    }\n+\n     /**\n      * Re-navigates to the current route. Also re-instantiates the route target\n      * component, and optionally all layouts in the route chain.\n@@ -1150,7 +1160,7 @@ public boolean hasLastHandledLocation() {\n      * Clear latest handled navigation location.\n      */\n     public void clearLastHandledNavigation() {\n-        setLastHandledNavigation(null);\n+        lastHandledNavigation = null;\n     }\n \n     /**\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/router/BeforeLeaveEvent.java b/flow-server/src/main/java/com/vaadin/flow/router/BeforeLeaveEvent.java\nindex 88756e3e1d5..58d4afe1f60 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/router/BeforeLeaveEvent.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/router/BeforeLeaveEvent.java\n@@ -96,11 +96,7 @@ public void proceed() {\n                             NavigationTrigger.PROGRAMMATIC);\n                 }\n \n-                final UI ui = event.getUI();\n                 handler.handle(event);\n-                if (ui.getSession().getConfiguration().isReactEnabled()) {\n-                    ui.getInternals().clearLastHandledNavigation();\n-                }\n                 setReferences(null, null);\n             }\n         }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/router/Router.java b/flow-server/src/main/java/com/vaadin/flow/router/Router.java\nindex e7d83d68fd2..9c4843133e1 100755\n--- a/flow-server/src/main/java/com/vaadin/flow/router/Router.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/router/Router.java\n@@ -230,6 +230,7 @@ public int navigate(UI ui, Location location, NavigationTrigger trigger,\n         ui.getSession().checkHasLock();\n \n         if (handleNavigationForLocation(ui, location)) {\n+            ui.getInternals().setLastHandledNavigation(location);\n             try {\n                 return handleNavigation(ui, location, trigger, state,\n                         forceInstantiation, recreateLayoutChain);\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java b/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java\nindex 26ef5261833..2ae3c9ded08 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java\n@@ -149,6 +149,7 @@ static <T extends HasElement> T getRouteTarget(Class<T> routeTargetType,\n     @Override\n     public int handle(NavigationEvent event) {\n         UI ui = event.getUI();\n+        ui.getInternals().setLocationForRefresh(event.getLocation());\n \n         final Class<? extends Component> routeTargetType = navigationState\n                 .getNavigationTarget();\n@@ -408,17 +409,14 @@ private void pushHistoryStateIfNeeded(NavigationEvent event, UI ui) {\n             }\n         } else if (NavigationTrigger.REFRESH != event.getTrigger()\n                 && !event.isForwardTo()\n-                && (!ui.getInternals().hasLastHandledLocation()\n+                && (event.getUI().getInternals().getActiveViewLocation() == null\n                         || !event.getLocation().getPathWithQueryParameters()\n-                                .equals(ui.getInternals()\n-                                        .getLastHandledLocation()\n+                                .equals(event.getUI().getInternals()\n+                                        .getActiveViewLocation()\n                                         .getPathWithQueryParameters()))) {\n-\n             if (shouldPushHistoryState(event)) {\n                 pushHistoryState(event);\n             }\n-\n-            ui.getInternals().setLastHandledNavigation(event.getLocation());\n         } else if (ui.getInternals().getSession().getService()\n                 .getDeploymentConfiguration().isReactEnabled()) {\n             if (shouldPushHistoryState(event)) {\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java b/flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java\nindex 938af2eb8c6..162c0dfbd0c 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java\n@@ -973,15 +973,6 @@ public Page getPage() {\n         pushStateLocations.clear();\n         ui.getInternals().clearLastHandledNavigation();\n \n-        renderer.handle(new NavigationEvent(new Router(new TestRouteRegistry()),\n-                new Location(\"regular\"), ui, NavigationTrigger.UI_NAVIGATE));\n-        Assert.assertTrue(\"pushState invocation is expected.\",\n-                pushStateCalled.get());\n-        Assert.assertTrue(pushStateLocations.stream()\n-                .anyMatch(location -> location.getPath().equals(\"regular\")));\n-\n-        pushStateCalled.set(false);\n-\n         renderer.handle(new NavigationEvent(new Router(new TestRouteRegistry()),\n                 new Location(\"regular\"), ui, NavigationTrigger.UI_NAVIGATE));\n         Assert.assertFalse(\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21170",
    "pr_id": 21170,
    "issue_id": 16984,
    "repo": "vaadin/flow",
    "problem_statement": "Navigating to the same Route does not work after using BeforeLeaveEvent.postpone\n### Description of the bug\n\nWhen navigating to a route using ContinueNavigationAction.proceed, the route can not be navigated to again. This is due to UIIntenals.lastHandledNavigation not being cleared, which skips navigation in [UI.navigate](https://github.com/vaadin/flow/blob/24.1/flow-server/src/main/java/com/vaadin/flow/component/UI.java#L1199).\r\n\r\nA simple example of this is a page that shows a confirmation dialog when leaving and that can be navigated to from itself (e.g. a header button present in the RouterLayout). After the first navigation the confirmation dialog is not shown anymore (and the navigation is not performed).\n\n### Expected behavior\n\nNavigation to the same page is not prevented (the behaviour should be the same as when not using BeforeLeaveEvent.postpone).\r\nDuring this navigation, observers like beforeLeave should be triggered.\n\n### Minimal reproducible example\n\nPressing the button has no effect after the first navigation:\r\n```\r\n@Route(\"sample\")\r\npublic class Sample extends Div implements BeforeLeaveObserver {\r\n\r\n    private static final long serialVersionUID = 1L;\r\n\r\n    public Sample() {\r\n        add(new Button(\"Navigate\", e -> UI.getCurrent().navigate(\"sample\")));\r\n    }\r\n\r\n    @Override\r\n    public void beforeLeave(BeforeLeaveEvent event) {\r\n        var action = event.postpone();\r\n        var dialog = new Dialog();\r\n        dialog.add(new Button(\"Proceed\", e -> {\r\n            action.proceed();\r\n            dialog.close();\r\n        }));\r\n        dialog.open();\r\n    }\r\n}\r\n```\r\n\r\nManually clearing the last handled navigation in afterNavigation fixes the issue:\r\n```\r\n@Route(\"sample\")\r\npublic class Sample extends Div implements BeforeLeaveObserver, AfterNavigationObserver {\r\n\r\n    private static final long serialVersionUID = 1L;\r\n\r\n    public Sample() {\r\n        add(new Button(\"Navigate\", e -> UI.getCurrent().navigate(\"sample\")));\r\n    }\r\n\r\n    @Override\r\n    public void beforeLeave(BeforeLeaveEvent event) {\r\n        var action = event.postpone();\r\n        var dialog = new Dialog();\r\n        dialog.add(new Button(\"Proceed\", e -> {\r\n            action.proceed();\r\n            dialog.close();\r\n        }));\r\n        dialog.open();\r\n    }\r\n\r\n    @Override\r\n    public void afterNavigation(AfterNavigationEvent event) {\r\n        UI.getCurrent().getInternals().clearLastHandledNavigation();\r\n    }\r\n}\r\n```\r\n\n\n### Versions\n\nVaadin: 24.1.0.rc2\r\nFlow: 24.1.0.rc2\r\nJava: Eclipse Adoptium 17.0.6\r\nOS: amd64 Windows 10 10.0\r\n",
    "issue_word_count": 309,
    "test_files_count": 1,
    "non_test_files_count": 5,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/component/UI.java",
      "flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java",
      "flow-server/src/main/java/com/vaadin/flow/router/BeforeLeaveEvent.java",
      "flow-server/src/main/java/com/vaadin/flow/router/Router.java",
      "flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java",
      "flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java"
    ],
    "base_commit": "a7a181c70e754ddc89a5603569964d83e608d66c",
    "head_commit": "06f99f03440f21a9de21a483a23aa0e94b203a45",
    "repo_url": "https://github.com/vaadin/flow/pull/21170",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21170",
    "dockerfile": "",
    "pr_merged_at": "2025-03-21T12:15:11.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/component/UI.java b/flow-server/src/main/java/com/vaadin/flow/component/UI.java\nindex 8b04a54b49a..253df3d344b 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/UI.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/UI.java\n@@ -2047,6 +2047,7 @@ private boolean sameLocation(Location oldLocation, Location newLocation) {\n     private void handleNavigation(Location location,\n             NavigationState navigationState, NavigationTrigger trigger) {\n         try {\n+            getInternals().setLastHandledNavigation(location);\n             NavigationEvent navigationEvent = new NavigationEvent(\n                     getInternals().getRouter(), location, this, trigger);\n \n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java b/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java\nindex f8f69681b7f..c9cabe553e3 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java\n@@ -1115,10 +1115,20 @@ public Location getLastHandledLocation() {\n     public void setLastHandledNavigation(Location location) {\n         lastHandledNavigation = location;\n         if (location != null) {\n-            locationForRefresh = location;\n+            setLocationForRefresh(location);\n         }\n     }\n \n+    /**\n+     * Store refresh location for refreshCurrentRoute.\n+     *\n+     * @param location\n+     *            current location.\n+     */\n+    public void setLocationForRefresh(Location location) {\n+        locationForRefresh = location;\n+    }\n+\n     /**\n      * Re-navigates to the current route. Also re-instantiates the route target\n      * component, and optionally all layouts in the route chain.\n@@ -1158,7 +1168,7 @@ public boolean hasLastHandledLocation() {\n      * Clear latest handled navigation location.\n      */\n     public void clearLastHandledNavigation() {\n-        setLastHandledNavigation(null);\n+        lastHandledNavigation = null;\n     }\n \n     /**\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/router/BeforeLeaveEvent.java b/flow-server/src/main/java/com/vaadin/flow/router/BeforeLeaveEvent.java\nindex 88756e3e1d5..58d4afe1f60 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/router/BeforeLeaveEvent.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/router/BeforeLeaveEvent.java\n@@ -96,11 +96,7 @@ public void proceed() {\n                             NavigationTrigger.PROGRAMMATIC);\n                 }\n \n-                final UI ui = event.getUI();\n                 handler.handle(event);\n-                if (ui.getSession().getConfiguration().isReactEnabled()) {\n-                    ui.getInternals().clearLastHandledNavigation();\n-                }\n                 setReferences(null, null);\n             }\n         }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/router/Router.java b/flow-server/src/main/java/com/vaadin/flow/router/Router.java\nindex 15cf6da4006..78a8fb87aea 100755\n--- a/flow-server/src/main/java/com/vaadin/flow/router/Router.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/router/Router.java\n@@ -234,6 +234,7 @@ public int navigate(UI ui, Location location, NavigationTrigger trigger,\n         ui.getSession().checkHasLock();\n \n         if (handleNavigationForLocation(ui, location)) {\n+            ui.getInternals().setLastHandledNavigation(location);\n             try {\n                 return handleNavigation(ui, location, trigger, state,\n                         forceInstantiation, recreateLayoutChain);\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java b/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java\nindex 31e021f43a8..8d23b7125a9 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java\n@@ -150,6 +150,7 @@ static <T extends HasElement> T getRouteTarget(Class<T> routeTargetType,\n     @Override\n     public int handle(NavigationEvent event) {\n         UI ui = event.getUI();\n+        ui.getInternals().setLocationForRefresh(event.getLocation());\n \n         final Class<? extends Component> routeTargetType = navigationState\n                 .getNavigationTarget();\n@@ -409,17 +410,14 @@ private void pushHistoryStateIfNeeded(NavigationEvent event, UI ui) {\n             }\n         } else if (NavigationTrigger.REFRESH != event.getTrigger()\n                 && !event.isForwardTo()\n-                && (!ui.getInternals().hasLastHandledLocation()\n+                && (event.getUI().getInternals().getActiveViewLocation() == null\n                         || !event.getLocation().getPathWithQueryParameters()\n-                                .equals(ui.getInternals()\n-                                        .getLastHandledLocation()\n+                                .equals(event.getUI().getInternals()\n+                                        .getActiveViewLocation()\n                                         .getPathWithQueryParameters()))) {\n-\n             if (shouldPushHistoryState(event)) {\n                 pushHistoryState(event);\n             }\n-\n-            ui.getInternals().setLastHandledNavigation(event.getLocation());\n         } else if (ui.getInternals().getSession().getService()\n                 .getDeploymentConfiguration().isReactEnabled()) {\n             if (shouldPushHistoryState(event)) {\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java b/flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java\nindex a46bce81dd8..130fa7dcc07 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java\n@@ -975,15 +975,6 @@ public Page getPage() {\n         pushStateLocations.clear();\n         ui.getInternals().clearLastHandledNavigation();\n \n-        renderer.handle(new NavigationEvent(new Router(new TestRouteRegistry()),\n-                new Location(\"regular\"), ui, NavigationTrigger.UI_NAVIGATE));\n-        Assert.assertTrue(\"pushState invocation is expected.\",\n-                pushStateCalled.get());\n-        Assert.assertTrue(pushStateLocations.stream()\n-                .anyMatch(location -> location.getPath().equals(\"regular\")));\n-\n-        pushStateCalled.set(false);\n-\n         renderer.handle(new NavigationEvent(new Router(new TestRouteRegistry()),\n                 new Location(\"regular\"), ui, NavigationTrigger.UI_NAVIGATE));\n         Assert.assertFalse(\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21161",
    "pr_id": 21161,
    "issue_id": 21144,
    "repo": "vaadin/flow",
    "problem_statement": "[PiT 24.7]: Cleanup when uninstalling File Router\n### Description of the bug\n\nThe `src/main/frontend/generated/file-routes.ts` file is retained when Flow disables and uninstalls Hilla File Router. Even though the imports in `routes.tsx` are updated to not use the file, the presence of the file with imports from no longer installed `@vaadin/hilla-file-router` npm package results in TypeScript compiler errors in production build.\n\n### Expected behavior\n\nEither `file-routes.ts` is removed by Flow, or, alternatively, `@vaadin/hilla-file-router` is not uninstalled.\n\n### Minimal reproducible example\n\n```\n## generate project\ncurl -s 'https://start.spring.io/starter.zip?type=maven-project&language=java&bootVersion=3.4.3&baseDir=initializer-vaadin-maven-react&groupId=com.vaadin.initializer&artifactId=initializer-vaadin-maven-react&name=initializer-vaadin-maven-react&description=initializer-vaadin-maven-react&packageName=com.vaadin.initializer&packaging=jar&javaVersion=21&dependencies=vaadin,devtools' --output initializer-vaadin-maven-react.zip\n\nunzip -q 'initializer-vaadin-maven-react.zip'\ncd 'initializer-vaadin-maven-react'\n\n## downgrade to java 17\nperl -pi -e 's|<java.version>21</java.version>|<java.version>17</java.version>|' pom.xml\n## run in dev mode\n./mvnw -ntp -B spring-boot:run\n<generate the view using hilla and react>\n\n##upgrade to vaadin 24.7\n perl -pi -e 's|(\\s*<'vaadin.version'>)[^\\s]+(</'vaadin.version'>)|${1}24.7.0.rc2${2}|g' pom.xml\nperl -pi -e 's|(\\s*)(</project>)|$1$1<repositories><repository><id>v</id><url>https://maven.vaadin.com/vaadin-prereleases</url></repository></repositories>\\n$1$2|' pom.xml\n perl -pi -e 's|(\\s*)(</project>)|$1$1<pluginRepositories><pluginRepository><id>v</id><url>https://maven.vaadin.com/vaadin-prereleases</url></pluginRepository></pluginRepositories>\\n$1$2|' pom.xml\nperl -pi -e 's|<java.version>21</java.version>|<java.version>17</java.version>|' pom.xml\n\n ## run in dev mode\n./mvnw -ntp -B spring-boot:run\n\n## remove the Hilla view\nrm src/main/frontend/views/@index.tsx\n\n## run in production mode\n./mvnw -ntp -B -Pproduction clean package -Dmaven.compiler.showDeprecation\n```\n\n### Versions\n\n- Vaadin / Flow version: Vaadin 24.7.0.rc2\n- Java version:\n- OS version:\n- Browser version (if applicable):\n- Application Server (if applicable):\n- IDE (if applicable):\n",
    "issue_word_count": 355,
    "test_files_count": 1,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinBuildFrontendTask.kt",
      "flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildFrontendMojo.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskCleanFrontendFiles.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskCleanFrontendFilesTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskCleanFrontendFilesTest.java"
    ],
    "base_commit": "6f444abc049728329b1264e63baeedee6f3995c2",
    "head_commit": "cf1df11a1f6375ccd7d8be3a18a91bd9217476cf",
    "repo_url": "https://github.com/vaadin/flow/pull/21161",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21161",
    "dockerfile": "",
    "pr_merged_at": "2025-03-20T19:59:00.000Z",
    "patch": "diff --git a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinBuildFrontendTask.kt b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinBuildFrontendTask.kt\nindex aff895f7359..8ce65728ebf 100644\n--- a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinBuildFrontendTask.kt\n+++ b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinBuildFrontendTask.kt\n@@ -19,6 +19,7 @@ import com.vaadin.flow.plugin.base.BuildFrontendUtil\n import com.vaadin.flow.server.Constants\n import com.vaadin.flow.server.frontend.BundleValidationUtil\n import com.vaadin.flow.server.frontend.FrontendUtils\n+import com.vaadin.flow.server.frontend.Options\n import com.vaadin.flow.server.frontend.TaskCleanFrontendFiles\n import com.vaadin.pro.licensechecker.LicenseChecker\n import org.gradle.api.DefaultTask\n@@ -72,9 +73,10 @@ public open class VaadinBuildFrontendTask : DefaultTask() {\n         val tokenFile = BuildFrontendUtil.getTokenFile(adapter)\n         check(tokenFile.exists()) { \"token file $tokenFile doesn't exist!\" }\n \n-        val cleanTask = TaskCleanFrontendFiles(config.npmFolder.get(),\n-                BuildFrontendUtil.getGeneratedFrontendDirectory(adapter), adapter.classFinder\n-        )\n+        val options = Options(null, adapter.classFinder, config.npmFolder.get())\n+            .withFrontendDirectory(config.frontendDirectory.get())\n+            .withFrontendGeneratedFolder(config.generatedTsFolder.get())\n+        val cleanTask = TaskCleanFrontendFiles(options)\n         BuildFrontendUtil.runNodeUpdater(adapter)\n \n         if (adapter.generateBundle() && BundleValidationUtil.needsBundleBuild\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildFrontendMojo.java b/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildFrontendMojo.java\nindex 7ab4211579c..cd5753466b6 100644\n--- a/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildFrontendMojo.java\n+++ b/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildFrontendMojo.java\n@@ -40,6 +40,7 @@\n import com.vaadin.flow.server.InitParameters;\n import com.vaadin.flow.server.frontend.BundleValidationUtil;\n import com.vaadin.flow.server.frontend.FrontendUtils;\n+import com.vaadin.flow.server.frontend.Options;\n import com.vaadin.flow.server.frontend.TaskCleanFrontendFiles;\n import com.vaadin.flow.theme.Theme;\n import com.vaadin.pro.licensechecker.LicenseChecker;\n@@ -137,8 +138,10 @@ protected void executeInternal()\n             throws MojoExecutionException, MojoFailureException {\n         long start = System.nanoTime();\n \n-        TaskCleanFrontendFiles cleanTask = new TaskCleanFrontendFiles(\n-                npmFolder(), frontendDirectory(), getClassFinder());\n+        Options options = new Options(null, getClassFinder(), npmFolder())\n+                .withFrontendDirectory(frontendDirectory())\n+                .withFrontendGeneratedFolder(generatedTsFolder());\n+        TaskCleanFrontendFiles cleanTask = new TaskCleanFrontendFiles(options);\n         try {\n             BuildFrontendUtil.runNodeUpdater(this);\n         } catch (ExecutionFailedException | URISyntaxException exception) {\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java\nindex 3c9e38a2522..777ad5ca3c3 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java\n@@ -150,9 +150,7 @@ public NodeTasks(Options options) {\n                 // and no update tasks are executed before it.\n                 if (BundleValidationUtil.needsBuild(options,\n                         frontendDependencies, Mode.DEVELOPMENT_BUNDLE)) {\n-                    commands.add(new TaskCleanFrontendFiles(\n-                            options.getNpmFolder(),\n-                            options.getFrontendDirectory(), classFinder));\n+                    commands.add(new TaskCleanFrontendFiles(options));\n                     options.withRunNpmInstall(true);\n                     options.withCopyTemplates(true);\n                     BundleUtils.copyPackageLockFromBundle(options);\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskCleanFrontendFiles.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskCleanFrontendFiles.java\nindex fd94c9185a9..0ee6fcb0450 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskCleanFrontendFiles.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskCleanFrontendFiles.java\n@@ -56,17 +56,17 @@ public class TaskCleanFrontendFiles implements FallibleCommand {\n             FrontendUtils.VITE_GENERATED_CONFIG, FrontendUtils.VITE_CONFIG);\n     private Set<File> existingFiles = new HashSet<>();\n \n+    private List<String> hillaGenerated = List.of(\"file-routes.ts\",\n+            \"file-routes.json\");\n+\n     /**\n      * Scans the jar files given defined by {@code resourcesToScan}.\n      *\n-     * @param projectRoot\n-     *            project root folder\n-     * @param frontendDirectory\n-     *            frontend directory\n+     * @param options\n+     *            options containing file paths and classfinder\n      */\n-    public TaskCleanFrontendFiles(File projectRoot, File frontendDirectory,\n-            ClassFinder classFinder) {\n-        this.projectRoot = projectRoot;\n+    public TaskCleanFrontendFiles(Options options) {\n+        this.projectRoot = options.getNpmFolder();\n \n         Arrays.stream(projectRoot\n                 .listFiles(file -> generatedFiles.contains(file.getName())))\n@@ -74,11 +74,18 @@ public TaskCleanFrontendFiles(File projectRoot, File frontendDirectory,\n \n         // If we have an existing package.json or run Hilla, do not remove\n         // node_modules\n-        if (existingFiles\n-                .contains(new File(projectRoot, Constants.PACKAGE_JSON))\n-                || FrontendUtils.isHillaUsed(frontendDirectory, classFinder)) {\n+        boolean hillaUsed = FrontendUtils.isHillaUsed(\n+                options.getFrontendDirectory(), options.getClassFinder());\n+        if (existingFiles.contains(\n+                new File(projectRoot, Constants.PACKAGE_JSON)) || hillaUsed) {\n             existingFiles.add(new File(projectRoot, NODE_MODULES));\n         }\n+        // If hilla is not used clean generated hilla files.\n+        if (!hillaUsed) {\n+            hillaGenerated.forEach(\n+                    file -> new File(options.getFrontendGeneratedFolder(), file)\n+                            .delete());\n+        }\n     }\n \n     @Override\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskCleanFrontendFilesTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskCleanFrontendFilesTest.java\nindex 5393305d6e9..87fabf1895a 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskCleanFrontendFilesTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskCleanFrontendFilesTest.java\n@@ -4,6 +4,7 @@\n import java.io.IOException;\n import java.util.Collections;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n@@ -28,19 +29,23 @@ public class TaskCleanFrontendFilesTest {\n     private File projectRoot;\n     private File frontendDirectory;\n     private ClassFinder classFinder;\n+    private Options options;\n \n     @Before\n     public void init() {\n         projectRoot = rootFolder.getRoot();\n         frontendDirectory = new File(projectRoot, \"target/frontend\");\n         classFinder = Mockito.mock(ClassFinder.class);\n+        options = new Options(null, classFinder, projectRoot)\n+                .withFrontendDirectory(frontendDirectory)\n+                .withFrontendGeneratedFolder(\n+                        new File(frontendDirectory, \"generated\"));\n     }\n \n     @Test\n     public void createdFileAreRemoved()\n             throws IOException, ExecutionFailedException {\n-        TaskCleanFrontendFiles clean = new TaskCleanFrontendFiles(projectRoot,\n-                frontendDirectory, classFinder);\n+        TaskCleanFrontendFiles clean = new TaskCleanFrontendFiles(options);\n \n         final Set<String> generatedFiles = Stream\n                 .of(FrontendUtils.VITE_CONFIG,\n@@ -65,8 +70,7 @@ public void existingFrontendFiles_onlyCreatedFileAreRemoved()\n                 .collect(Collectors.toSet());\n         createFiles(existingfiles);\n \n-        TaskCleanFrontendFiles clean = new TaskCleanFrontendFiles(projectRoot,\n-                frontendDirectory, classFinder);\n+        TaskCleanFrontendFiles clean = new TaskCleanFrontendFiles(options);\n \n         final Set<String> generatedFiles = Stream\n                 .of(FrontendUtils.VITE_GENERATED_CONFIG,\n@@ -84,8 +88,7 @@ public void existingFrontendFiles_onlyCreatedFileAreRemoved()\n     @Test\n     public void nodeModulesFolderIsCleared()\n             throws IOException, ExecutionFailedException {\n-        TaskCleanFrontendFiles clean = new TaskCleanFrontendFiles(projectRoot,\n-                frontendDirectory, classFinder);\n+        TaskCleanFrontendFiles clean = new TaskCleanFrontendFiles(options);\n \n         final File nodeModules = rootFolder.newFolder(\"node_modules\");\n         new File(nodeModules, \"file\").createNewFile();\n@@ -102,8 +105,7 @@ public void nodeModulesFolderIsCleared()\n     public void packageJsonExists_nodeModulesFolderIsKept()\n             throws IOException, ExecutionFailedException {\n         createFiles(Collections.singleton(Constants.PACKAGE_JSON));\n-        TaskCleanFrontendFiles clean = new TaskCleanFrontendFiles(projectRoot,\n-                frontendDirectory, classFinder);\n+        TaskCleanFrontendFiles clean = new TaskCleanFrontendFiles(options);\n \n         final File nodeModules = rootFolder.newFolder(\"node_modules\");\n         new File(nodeModules, \"file\").createNewFile();\n@@ -124,8 +126,7 @@ public void hillaIsUsed_nodeModulesFolderIsKept()\n                 .mockStatic(FrontendUtils.class)) {\n             util.when(() -> FrontendUtils.isHillaUsed(Mockito.any(),\n                     Mockito.any(ClassFinder.class))).thenReturn(true);\n-            clean = new TaskCleanFrontendFiles(projectRoot, frontendDirectory,\n-                    classFinder);\n+            clean = new TaskCleanFrontendFiles(options);\n         }\n \n         final File nodeModules = rootFolder.newFolder(\"node_modules\");\n@@ -139,6 +140,26 @@ public void hillaIsUsed_nodeModulesFolderIsKept()\n         assertFilesExist(Collections.singleton(\"node_modules\"));\n     }\n \n+    @Test\n+    public void hillaIsNotUsed_fileRoutesExists_fileRoutesClearedEagerly()\n+            throws IOException, ExecutionFailedException {\n+        TaskCleanFrontendFiles clean;\n+        final File nodeModules = rootFolder\n+                .newFolder(\"target/frontend/generated\");\n+        new File(nodeModules, \"file-routes.ts\").createNewFile();\n+        new File(nodeModules, \"file-routes.json\").createNewFile();\n+\n+        try (MockedStatic<FrontendUtils> util = Mockito\n+                .mockStatic(FrontendUtils.class)) {\n+            util.when(() -> FrontendUtils.isHillaUsed(Mockito.any(),\n+                    Mockito.any(ClassFinder.class))).thenReturn(false);\n+            new TaskCleanFrontendFiles(options);\n+        }\n+\n+        assertFilesNotExist(Set.of(\"target/frontend/generated/file-routes.ts\",\n+                \"target/frontend/generated/file-routes.json\"));\n+    }\n+\n     private void createFiles(Set<String> filesToCreate) throws IOException {\n         for (String file : filesToCreate) {\n             rootFolder.newFile(file);\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21157",
    "pr_id": 21157,
    "issue_id": 20844,
    "repo": "vaadin/flow",
    "problem_statement": "Add a system property -Dvaadin.hotswap.fullPageReload=true\n### Describe your motivation\n\nWhen using HotSwapAgent 2.0.1 the new page merge/update has led to multiple problems/bugs. It is fine for some tasks when changing margins, padding, color, etc - and for Vaadin Copilot.\n\nHotSwapAgent 1.4.2 will do a full refresh. It is always working, and every part of the page is run. It is safe and acts like a real situation when a user loads the page. The page reload also \"flash\" the page, make me sure it is fresh loaded. I use to add helpers, so I don't need to click on every reload. They will not always work in the new mode. E.g. `element.executeJs(\"setTimeout(()=>{$0.click()},100)\", btn.element)`\n\nhotswap.fullPageReload default to false\n\nToday I have a duplicate of my SDK, one with HotSwapAgent 2.0.1, the other with HotSwapAgent 1.4.2. Not sure if 1.4.2 will work on newer JDK.\n\n### Describe the solution you'd like\n\nWith a system property `-Dvaadin.hotswap.fullPageReload=true` it's easy to switch mode\n\nAlso doing the switch in Vaadin Copilot in runtime would be nice, but not necessary \n",
    "issue_word_count": 200,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java",
      "flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java"
    ],
    "base_commit": "6a075c896412d91f840bca128ff9774ef2bd7dbc",
    "head_commit": "183c450b1ba1ed3efcf21ebe3a6cb3f1a5536700",
    "repo_url": "https://github.com/vaadin/flow/pull/21157",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21157",
    "dockerfile": "",
    "pr_merged_at": "2025-03-20T08:27:06.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java b/flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java\nindex 953bcea5b70..551daef984e 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java\n@@ -16,6 +16,7 @@\n \n package com.vaadin.flow.hotswap;\n \n+import java.io.Serializable;\n import java.net.URI;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -29,6 +30,7 @@\n import java.util.ResourceBundle;\n import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.function.Consumer;\n import java.util.stream.Collectors;\n \n@@ -84,6 +86,13 @@\n  * {@link VaadinHotswapper} interface.\n  * <p>\n  * </p>\n+ * By default, Hotswapper determines the best browser page refresh strategy, but\n+ * a full page reload can be forced by setting the\n+ * {@code vaadin.hotswap.forcePageReload} system property. Hotswap tools can\n+ * alter the behavior at runtime by calling\n+ * {@link #forcePageReload(VaadinService, boolean)}\n+ * <p>\n+ * </p>\n  * For internal use only. May be renamed or removed in a future release.\n  *\n  * @author Vaadin Ltd\n@@ -92,6 +101,14 @@\n  */\n public class Hotswapper implements ServiceDestroyListener, SessionInitListener,\n         SessionDestroyListener, UIInitListener {\n+\n+    /**\n+     * Configuration name for the system parameter that determines whether\n+     * Hotswapper should always trigger a full page reload instead of computing\n+     * an appropriate UI refresh strategy.\n+     */\n+    public static final String FORCE_RELOAD_PROPERTY = \"vaadin.hotswap.forcePageReload\";\n+\n     private static final Logger LOGGER = LoggerFactory\n             .getLogger(Hotswapper.class);\n     private final Set<VaadinSession> sessions = ConcurrentHashMap.newKeySet();\n@@ -259,9 +276,18 @@ private void onHotswapInternal(HashSet<Class<?>> classes,\n                 vaadinSession.getLockInstance().unlock();\n             }\n         }\n-        EnumMap<UIRefreshStrategy, List<UI>> refreshActions = computeRefreshStrategies(\n-                classes, redefined);\n-        boolean uiTreeNeedsRefresh = !refreshActions.isEmpty();\n+        forceBrowserReload = forceBrowserReload\n+                || getForceReloadHolder(vaadinService).shouldReloadPage();\n+\n+        boolean uiTreeNeedsRefresh = false;\n+        EnumMap<UIRefreshStrategy, List<UI>> refreshActions = null;\n+\n+        // When a full page reload is requested it does not make sense to\n+        // compute refresh strategy\n+        if (!forceBrowserReload) {\n+            refreshActions = computeRefreshStrategies(classes, redefined);\n+            uiTreeNeedsRefresh = !refreshActions.isEmpty();\n+        }\n         if (forceBrowserReload || uiTreeNeedsRefresh) {\n             triggerClientUpdate(refreshActions, forceBrowserReload);\n         }\n@@ -447,8 +473,8 @@ private void triggerClientUpdate(\n             EnumMap<UIRefreshStrategy, List<UI>> uisToRefresh,\n             boolean forceReload) {\n \n-        boolean refreshRequested = uisToRefresh\n-                .containsKey(UIRefreshStrategy.REFRESH);\n+        boolean refreshRequested = !forceReload\n+                && uisToRefresh.containsKey(UIRefreshStrategy.REFRESH);\n \n         // If some UI has push not enabled, BrowserLiveReload should be used to\n         // trigger a client update. However, BrowserLiveReload broadcasts the\n@@ -548,4 +574,57 @@ public static Optional<Hotswapper> register(VaadinService vaadinService) {\n         return Optional.empty();\n     }\n \n+    /**\n+     * Instructs the {@link Hotswapper} if a full page reload should always be\n+     * triggered instead of detecting the best UI refresh strategy.\n+     *\n+     * @param vaadinService\n+     *            the {@link VaadinService} instance.\n+     * @param forceReload\n+     *            {@literal true} to always force a page reload,\n+     *            {@literal false} to let the {@link Hotswapper} decide the\n+     *            refresh strategy.\n+     */\n+    public static void forcePageReload(VaadinService vaadinService,\n+            boolean forceReload) {\n+        Objects.requireNonNull(vaadinService, \"VaadinService cannot be null\");\n+        getForceReloadHolder(vaadinService).activate(forceReload);\n+    }\n+\n+    /**\n+     * Gets whether a forced full page reload is triggered on class changes.\n+     *\n+     * @param vaadinService\n+     *            the {@link VaadinService} instance.\n+     * @return {@literal true} if full page reload if forced, otherwise\n+     *         {@literal false}.\n+     */\n+    public static boolean isForcedPageReload(VaadinService vaadinService) {\n+        return getForceReloadHolder(vaadinService).isActive();\n+    }\n+\n+    private static ForcePageReloadHolder getForceReloadHolder(\n+            VaadinService vaadinService) {\n+        return vaadinService.getContext().getAttribute(\n+                ForcePageReloadHolder.class, ForcePageReloadHolder::new);\n+    }\n+\n+    private static class ForcePageReloadHolder implements Serializable {\n+\n+        private final AtomicBoolean forceReload = new AtomicBoolean(false);\n+\n+        void activate(boolean active) {\n+            forceReload.set(active);\n+        }\n+\n+        boolean isActive() {\n+            return forceReload.get();\n+        }\n+\n+        boolean shouldReloadPage() {\n+            return forceReload.get()\n+                    || Boolean.getBoolean(FORCE_RELOAD_PROPERTY);\n+        }\n+    }\n+\n }\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java b/flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java\nindex bc62443c3a4..a434ef50899 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java\n@@ -943,6 +943,92 @@ public void onHotswap_mixedPushState_classInUITreeChanged_liveReloadTriggered()\n         Mockito.verify(liveReload).refresh(anyBoolean());\n     }\n \n+    @Test\n+    public void onHotswap_pushDisabled_forcePageReload_fullReloadTriggered()\n+            throws ServiceException {\n+        VaadinSession session = createMockVaadinSession();\n+        hotswapper.sessionInit(new SessionInitEvent(service, session, null));\n+\n+        RefreshTestingUI ui = initUIAndNavigateTo(session, MyRoute.class);\n+\n+        Hotswapper.forcePageReload(service, true);\n+        hotswapper.onHotswap(new String[] { MyRoute.class.getName() }, true);\n+\n+        ui.assertNotRefreshed();\n+        Mockito.verify(liveReload, never()).refresh(anyBoolean());\n+        Mockito.verify(liveReload).reload();\n+    }\n+\n+    @Test\n+    public void onHotswap_pushDisabled_forcePageReloadWithSystemProperty_fullReloadTriggered()\n+            throws ServiceException {\n+        VaadinSession session = createMockVaadinSession();\n+        hotswapper.sessionInit(new SessionInitEvent(service, session, null));\n+\n+        RefreshTestingUI ui = initUIAndNavigateTo(session, MyRoute.class);\n+\n+        String reload = System.getProperty(Hotswapper.FORCE_RELOAD_PROPERTY);\n+        System.setProperty(Hotswapper.FORCE_RELOAD_PROPERTY, \"true\");\n+        try {\n+            hotswapper.onHotswap(new String[] { MyRoute.class.getName() },\n+                    true);\n+        } finally {\n+            if (reload != null) {\n+                System.setProperty(Hotswapper.FORCE_RELOAD_PROPERTY, reload);\n+            } else {\n+                System.clearProperty(Hotswapper.FORCE_RELOAD_PROPERTY);\n+            }\n+        }\n+\n+        ui.assertNotRefreshed();\n+        Mockito.verify(liveReload, never()).refresh(anyBoolean());\n+        Mockito.verify(liveReload).reload();\n+    }\n+\n+    @Test\n+    public void onHotswap_pushEnabled_forcePageReload_fullReloadTriggered()\n+            throws ServiceException {\n+        VaadinSession session = createMockVaadinSession();\n+        hotswapper.sessionInit(new SessionInitEvent(service, session, null));\n+\n+        RefreshTestingUI ui = initUIAndNavigateTo(session, MyRoute.class);\n+        ui.enablePush();\n+\n+        Hotswapper.forcePageReload(service, true);\n+        hotswapper.onHotswap(new String[] { MyRoute.class.getName() }, true);\n+\n+        ui.assertNotRefreshed();\n+        Mockito.verify(liveReload, never()).refresh(anyBoolean());\n+        Mockito.verify(liveReload).reload();\n+    }\n+\n+    @Test\n+    public void onHotswap_pushEnabled_forcePageReloadWithSystemProperty_fullReloadTriggered()\n+            throws ServiceException {\n+        VaadinSession session = createMockVaadinSession();\n+        hotswapper.sessionInit(new SessionInitEvent(service, session, null));\n+\n+        RefreshTestingUI ui = initUIAndNavigateTo(session, MyRoute.class);\n+        ui.enablePush();\n+\n+        String reload = System.getProperty(Hotswapper.FORCE_RELOAD_PROPERTY);\n+        System.setProperty(Hotswapper.FORCE_RELOAD_PROPERTY, \"true\");\n+        try {\n+            hotswapper.onHotswap(new String[] { MyRoute.class.getName() },\n+                    true);\n+        } finally {\n+            if (reload != null) {\n+                System.setProperty(Hotswapper.FORCE_RELOAD_PROPERTY, reload);\n+            } else {\n+                System.clearProperty(Hotswapper.FORCE_RELOAD_PROPERTY);\n+            }\n+        }\n+\n+        ui.assertNotRefreshed();\n+        Mockito.verify(liveReload, never()).refresh(anyBoolean());\n+        Mockito.verify(liveReload).reload();\n+    }\n+\n     @Test\n     public void register_developmentMode_trackingListenerInstalled() {\n         AtomicBoolean sessionInitInstalled = new AtomicBoolean();\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21155",
    "pr_id": 21155,
    "issue_id": 21144,
    "repo": "vaadin/flow",
    "problem_statement": "[PiT 24.7]: Cleanup when uninstalling File Router\n### Description of the bug\n\nThe `src/main/frontend/generated/file-routes.ts` file is retained when Flow disables and uninstalls Hilla File Router. Even though the imports in `routes.tsx` are updated to not use the file, the presence of the file with imports from no longer installed `@vaadin/hilla-file-router` npm package results in TypeScript compiler errors in production build.\n\n### Expected behavior\n\nEither `file-routes.ts` is removed by Flow, or, alternatively, `@vaadin/hilla-file-router` is not uninstalled.\n\n### Minimal reproducible example\n\n```\n## generate project\ncurl -s 'https://start.spring.io/starter.zip?type=maven-project&language=java&bootVersion=3.4.3&baseDir=initializer-vaadin-maven-react&groupId=com.vaadin.initializer&artifactId=initializer-vaadin-maven-react&name=initializer-vaadin-maven-react&description=initializer-vaadin-maven-react&packageName=com.vaadin.initializer&packaging=jar&javaVersion=21&dependencies=vaadin,devtools' --output initializer-vaadin-maven-react.zip\n\nunzip -q 'initializer-vaadin-maven-react.zip'\ncd 'initializer-vaadin-maven-react'\n\n## downgrade to java 17\nperl -pi -e 's|<java.version>21</java.version>|<java.version>17</java.version>|' pom.xml\n## run in dev mode\n./mvnw -ntp -B spring-boot:run\n<generate the view using hilla and react>\n\n##upgrade to vaadin 24.7\n perl -pi -e 's|(\\s*<'vaadin.version'>)[^\\s]+(</'vaadin.version'>)|${1}24.7.0.rc2${2}|g' pom.xml\nperl -pi -e 's|(\\s*)(</project>)|$1$1<repositories><repository><id>v</id><url>https://maven.vaadin.com/vaadin-prereleases</url></repository></repositories>\\n$1$2|' pom.xml\n perl -pi -e 's|(\\s*)(</project>)|$1$1<pluginRepositories><pluginRepository><id>v</id><url>https://maven.vaadin.com/vaadin-prereleases</url></pluginRepository></pluginRepositories>\\n$1$2|' pom.xml\nperl -pi -e 's|<java.version>21</java.version>|<java.version>17</java.version>|' pom.xml\n\n ## run in dev mode\n./mvnw -ntp -B spring-boot:run\n\n## remove the Hilla view\nrm src/main/frontend/views/@index.tsx\n\n## run in production mode\n./mvnw -ntp -B -Pproduction clean package -Dmaven.compiler.showDeprecation\n```\n\n### Versions\n\n- Vaadin / Flow version: Vaadin 24.7.0.rc2\n- Java version:\n- OS version:\n- Browser version (if applicable):\n- Application Server (if applicable):\n- IDE (if applicable):\n",
    "issue_word_count": 355,
    "test_files_count": 1,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinBuildFrontendTask.kt",
      "flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildFrontendMojo.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskCleanFrontendFiles.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskCleanFrontendFilesTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskCleanFrontendFilesTest.java"
    ],
    "base_commit": "6a075c896412d91f840bca128ff9774ef2bd7dbc",
    "head_commit": "44a5600a85ffb83de24861690a1441aa5146ef37",
    "repo_url": "https://github.com/vaadin/flow/pull/21155",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21155",
    "dockerfile": "",
    "pr_merged_at": "2025-03-20T08:30:37.000Z",
    "patch": "diff --git a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinBuildFrontendTask.kt b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinBuildFrontendTask.kt\nindex 5cbf9af25cd..9a0091c471f 100644\n--- a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinBuildFrontendTask.kt\n+++ b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinBuildFrontendTask.kt\n@@ -20,6 +20,7 @@ import com.vaadin.flow.plugin.base.BuildFrontendUtil\n import com.vaadin.flow.server.Constants\n import com.vaadin.flow.server.frontend.BundleValidationUtil\n import com.vaadin.flow.server.frontend.FrontendUtils\n+import com.vaadin.flow.server.frontend.Options\n import com.vaadin.flow.server.frontend.TaskCleanFrontendFiles\n import com.vaadin.flow.server.frontend.scanner.ClassFinder\n import com.vaadin.flow.server.frontend.scanner.FrontendDependenciesScanner\n@@ -83,8 +84,10 @@ public abstract class VaadinBuildFrontendTask : DefaultTask() {\n         val tokenFile = BuildFrontendUtil.getTokenFile(adapter.get())\n         check(tokenFile.exists()) { \"token file $tokenFile doesn't exist!\" }\n \n-        val cleanTask = TaskCleanFrontendFiles(config.npmFolder.get(),\n-                BuildFrontendUtil.getGeneratedFrontendDirectory(adapter.get()), adapter.get().classFinder)\n+        val options = Options(null, adapter.get().classFinder, config.npmFolder.get())\n+            .withFrontendDirectory(BuildFrontendUtil.getGeneratedFrontendDirectory(adapter.get()))\n+            .withFrontendGeneratedFolder(config.generatedTsFolder.get())\n+        val cleanTask = TaskCleanFrontendFiles(options)\n \n         val reactEnabled: Boolean = adapter.get().isReactEnabled()\n                 && FrontendUtils.isReactRouterRequired(\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildFrontendMojo.java b/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildFrontendMojo.java\nindex 35b76b0530e..4dafc96a7e4 100644\n--- a/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildFrontendMojo.java\n+++ b/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildFrontendMojo.java\n@@ -41,6 +41,7 @@\n import com.vaadin.flow.server.InitParameters;\n import com.vaadin.flow.server.frontend.BundleValidationUtil;\n import com.vaadin.flow.server.frontend.FrontendUtils;\n+import com.vaadin.flow.server.frontend.Options;\n import com.vaadin.flow.server.frontend.TaskCleanFrontendFiles;\n import com.vaadin.flow.server.frontend.scanner.FrontendDependenciesScanner;\n import com.vaadin.flow.theme.Theme;\n@@ -139,8 +140,10 @@ protected void executeInternal()\n             throws MojoExecutionException, MojoFailureException {\n         long start = System.nanoTime();\n \n-        TaskCleanFrontendFiles cleanTask = new TaskCleanFrontendFiles(\n-                npmFolder(), frontendDirectory(), getClassFinder());\n+        Options options = new Options(null, getClassFinder(), npmFolder())\n+                .withFrontendDirectory(frontendDirectory())\n+                .withFrontendGeneratedFolder(generatedTsFolder());\n+        TaskCleanFrontendFiles cleanTask = new TaskCleanFrontendFiles(options);\n \n         boolean reactEnabled = isReactEnabled()\n                 && FrontendUtils.isReactRouterRequired(\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java\nindex 9096714ec96..d0e883a03bc 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java\n@@ -149,9 +149,7 @@ public NodeTasks(Options options) {\n                 // and no update tasks are executed before it.\n                 if (BundleValidationUtil.needsBuild(options,\n                         frontendDependencies, Mode.DEVELOPMENT_BUNDLE)) {\n-                    commands.add(new TaskCleanFrontendFiles(\n-                            options.getNpmFolder(),\n-                            options.getFrontendDirectory(), classFinder));\n+                    commands.add(new TaskCleanFrontendFiles(options));\n                     options.withRunNpmInstall(true);\n                     options.withCopyTemplates(true);\n                     BundleUtils.copyPackageLockFromBundle(options);\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskCleanFrontendFiles.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskCleanFrontendFiles.java\nindex fd94c9185a9..bd98c3cd5e3 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskCleanFrontendFiles.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskCleanFrontendFiles.java\n@@ -56,17 +56,17 @@ public class TaskCleanFrontendFiles implements FallibleCommand {\n             FrontendUtils.VITE_GENERATED_CONFIG, FrontendUtils.VITE_CONFIG);\n     private Set<File> existingFiles = new HashSet<>();\n \n+    private List<String> hillaGenerated = List.of(\"file-routes.ts\",\n+            \"file-routes.json\");\n+\n     /**\n      * Scans the jar files given defined by {@code resourcesToScan}.\n      *\n-     * @param projectRoot\n-     *            project root folder\n-     * @param frontendDirectory\n-     *            frontend directory\n+     * @param options\n+     *            options containing file paths and classfinder\n      */\n-    public TaskCleanFrontendFiles(File projectRoot, File frontendDirectory,\n-            ClassFinder classFinder) {\n-        this.projectRoot = projectRoot;\n+    public TaskCleanFrontendFiles(Options options) {\n+        this.projectRoot = options.getNpmFolder();\n \n         Arrays.stream(projectRoot\n                 .listFiles(file -> generatedFiles.contains(file.getName())))\n@@ -74,11 +74,19 @@ public TaskCleanFrontendFiles(File projectRoot, File frontendDirectory,\n \n         // If we have an existing package.json or run Hilla, do not remove\n         // node_modules\n-        if (existingFiles\n-                .contains(new File(projectRoot, Constants.PACKAGE_JSON))\n-                || FrontendUtils.isHillaUsed(frontendDirectory, classFinder)) {\n+        boolean hillaUsed = FrontendUtils.isHillaUsed(\n+                options.getFrontendDirectory(), options.getClassFinder());\n+\n+        if (existingFiles.contains(\n+                new File(projectRoot, Constants.PACKAGE_JSON)) || hillaUsed) {\n             existingFiles.add(new File(projectRoot, NODE_MODULES));\n         }\n+        // If hilla is not used clean generated hilla files.\n+        if (!hillaUsed) {\n+            hillaGenerated.forEach(\n+                    file -> new File(options.getFrontendGeneratedFolder(), file)\n+                            .delete());\n+        }\n     }\n \n     @Override\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskCleanFrontendFilesTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskCleanFrontendFilesTest.java\nindex 5393305d6e9..87fabf1895a 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskCleanFrontendFilesTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskCleanFrontendFilesTest.java\n@@ -4,6 +4,7 @@\n import java.io.IOException;\n import java.util.Collections;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n@@ -28,19 +29,23 @@ public class TaskCleanFrontendFilesTest {\n     private File projectRoot;\n     private File frontendDirectory;\n     private ClassFinder classFinder;\n+    private Options options;\n \n     @Before\n     public void init() {\n         projectRoot = rootFolder.getRoot();\n         frontendDirectory = new File(projectRoot, \"target/frontend\");\n         classFinder = Mockito.mock(ClassFinder.class);\n+        options = new Options(null, classFinder, projectRoot)\n+                .withFrontendDirectory(frontendDirectory)\n+                .withFrontendGeneratedFolder(\n+                        new File(frontendDirectory, \"generated\"));\n     }\n \n     @Test\n     public void createdFileAreRemoved()\n             throws IOException, ExecutionFailedException {\n-        TaskCleanFrontendFiles clean = new TaskCleanFrontendFiles(projectRoot,\n-                frontendDirectory, classFinder);\n+        TaskCleanFrontendFiles clean = new TaskCleanFrontendFiles(options);\n \n         final Set<String> generatedFiles = Stream\n                 .of(FrontendUtils.VITE_CONFIG,\n@@ -65,8 +70,7 @@ public void existingFrontendFiles_onlyCreatedFileAreRemoved()\n                 .collect(Collectors.toSet());\n         createFiles(existingfiles);\n \n-        TaskCleanFrontendFiles clean = new TaskCleanFrontendFiles(projectRoot,\n-                frontendDirectory, classFinder);\n+        TaskCleanFrontendFiles clean = new TaskCleanFrontendFiles(options);\n \n         final Set<String> generatedFiles = Stream\n                 .of(FrontendUtils.VITE_GENERATED_CONFIG,\n@@ -84,8 +88,7 @@ public void existingFrontendFiles_onlyCreatedFileAreRemoved()\n     @Test\n     public void nodeModulesFolderIsCleared()\n             throws IOException, ExecutionFailedException {\n-        TaskCleanFrontendFiles clean = new TaskCleanFrontendFiles(projectRoot,\n-                frontendDirectory, classFinder);\n+        TaskCleanFrontendFiles clean = new TaskCleanFrontendFiles(options);\n \n         final File nodeModules = rootFolder.newFolder(\"node_modules\");\n         new File(nodeModules, \"file\").createNewFile();\n@@ -102,8 +105,7 @@ public void nodeModulesFolderIsCleared()\n     public void packageJsonExists_nodeModulesFolderIsKept()\n             throws IOException, ExecutionFailedException {\n         createFiles(Collections.singleton(Constants.PACKAGE_JSON));\n-        TaskCleanFrontendFiles clean = new TaskCleanFrontendFiles(projectRoot,\n-                frontendDirectory, classFinder);\n+        TaskCleanFrontendFiles clean = new TaskCleanFrontendFiles(options);\n \n         final File nodeModules = rootFolder.newFolder(\"node_modules\");\n         new File(nodeModules, \"file\").createNewFile();\n@@ -124,8 +126,7 @@ public void hillaIsUsed_nodeModulesFolderIsKept()\n                 .mockStatic(FrontendUtils.class)) {\n             util.when(() -> FrontendUtils.isHillaUsed(Mockito.any(),\n                     Mockito.any(ClassFinder.class))).thenReturn(true);\n-            clean = new TaskCleanFrontendFiles(projectRoot, frontendDirectory,\n-                    classFinder);\n+            clean = new TaskCleanFrontendFiles(options);\n         }\n \n         final File nodeModules = rootFolder.newFolder(\"node_modules\");\n@@ -139,6 +140,26 @@ public void hillaIsUsed_nodeModulesFolderIsKept()\n         assertFilesExist(Collections.singleton(\"node_modules\"));\n     }\n \n+    @Test\n+    public void hillaIsNotUsed_fileRoutesExists_fileRoutesClearedEagerly()\n+            throws IOException, ExecutionFailedException {\n+        TaskCleanFrontendFiles clean;\n+        final File nodeModules = rootFolder\n+                .newFolder(\"target/frontend/generated\");\n+        new File(nodeModules, \"file-routes.ts\").createNewFile();\n+        new File(nodeModules, \"file-routes.json\").createNewFile();\n+\n+        try (MockedStatic<FrontendUtils> util = Mockito\n+                .mockStatic(FrontendUtils.class)) {\n+            util.when(() -> FrontendUtils.isHillaUsed(Mockito.any(),\n+                    Mockito.any(ClassFinder.class))).thenReturn(false);\n+            new TaskCleanFrontendFiles(options);\n+        }\n+\n+        assertFilesNotExist(Set.of(\"target/frontend/generated/file-routes.ts\",\n+                \"target/frontend/generated/file-routes.json\"));\n+    }\n+\n     private void createFiles(Set<String> filesToCreate) throws IOException {\n         for (String file : filesToCreate) {\n             rootFolder.newFile(file);\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21125",
    "pr_id": 21125,
    "issue_id": 21052,
    "repo": "vaadin/flow",
    "problem_statement": "Configurable class scanning in Flow Maven plugin\n### Describe your motivation\n\nFlow Maven plugin scans all classes across the entire project. While this might be acceptable for a small Vaadin application, it becomes a significant bottleneck in larger projects with hundreds of dependencies, drastically increasing build times.\n\nThe improvement can be to provide the XML-based configurable API for fine-tuning the frontend build process in Vaadin Flow Maven plugin. Users have the flexibility to customise the class scanning process by specifying which dependencies Vaadin's `prepare-frontend` and `build-frontend` goals should consider during the scanning.\n\n### Describe the solution you'd like\n\nExample configuration:\n```xml\n<configuration>\n    <frontendScanner>\n           <!-- Applicable for cases when you have a main project with no Vaadin annotations, -->\n           <!-- like Route, JsModule, etc, so you don't want to spend time on scanning the project's classes -->\n\t   <includesTargetDirectory>false</includesTargetDirectory>\n\t   <includes>\n                <include>\n\t            <groupId>...</groupId>\n\t\t    <artifactId>web...*</artifactId>\n\t        </include>\n           </includes>\n           <excludes>\n               <exclude>\n\t            <groupId>...</groupId>\n\t\t    <artifactId>logger-...</artifactId>\n\t       </exclude>\n           </excludes>\n    </frontendScanner>\n</configuration>\n```\n\n### Additional context\n\nSee this pull request https://github.com/vaadin/flow/pull/20695.\n\nThe configuration should be possible through the `<configuration>` tag in XML, inheritance of mojo class or reflector classes are not wanted.\n\n**Notes for development:**\n\n- Excluding the JARs from the Reflector class loader perhaps isn't the correct thing to do. Doing so will work fine when using the `FullDependenciesScanner`, but could miserably (and potentially silently) fail with the `FrontendDependencies` scanner, that analyses the byte-code. For the second scanner, we should probably use the configuration in the `boolean shouldVisit(String className)` method. To be taken into account and investigated during development.\n\n- Most likely we cannot \"reduce\" the classpath provided to the custom class-loader (used by `ClassFinder`) otherwise we may break a lot of functionalities. For example, let's say you have a Hilla application, but include only the application code for the scanner. Then the Hilla tasks will not be executed because `ClassFinder` cannot find them.\n",
    "issue_word_count": 321,
    "test_files_count": 7,
    "non_test_files_count": 23,
    "pr_changed_files": [
      "flow-plugins/flow-maven-plugin/pom.xml",
      "flow-plugins/flow-maven-plugin/src/it/flow-addon/invoker.properties",
      "flow-plugins/flow-maven-plugin/src/it/flow-addon/pom.xml",
      "flow-plugins/flow-maven-plugin/src/it/flow-addon/src/main/alpha-addon/java/com/vaadin/addon/alpha/AlphaComponent.java",
      "flow-plugins/flow-maven-plugin/src/it/flow-addon/src/main/alpha-addon/java/com/vaadin/addon/alpha/AlphaRoute.java",
      "flow-plugins/flow-maven-plugin/src/it/flow-addon/src/main/alpha-addon/java/com/vaadin/addon/alpha/UnusedComponent.java",
      "flow-plugins/flow-maven-plugin/src/it/flow-addon/src/main/alpha-addon/resources/META-INF/resources/frontend/alpha.js",
      "flow-plugins/flow-maven-plugin/src/it/flow-addon/src/main/alpha-addon/resources/META-INF/resources/frontend/not-used.js",
      "flow-plugins/flow-maven-plugin/src/it/flow-addon/src/main/beta-addon/java/com/vaadin/addon/beta/BetaComponent.java",
      "flow-plugins/flow-maven-plugin/src/it/flow-addon/src/main/beta-addon/java/com/vaadin/addon/beta/BetaRoute.java",
      "flow-plugins/flow-maven-plugin/src/it/flow-addon/src/main/beta-addon/resources/META-INF/resources/frontend/beta.js",
      "flow-plugins/flow-maven-plugin/src/it/frontend-scanner-tuning-project/invoker.properties",
      "flow-plugins/flow-maven-plugin/src/it/frontend-scanner-tuning-project/pom.xml",
      "flow-plugins/flow-maven-plugin/src/it/frontend-scanner-tuning-project/src/main/frontend/project-component.js",
      "flow-plugins/flow-maven-plugin/src/it/frontend-scanner-tuning-project/src/main/java/com/vaadin/test/ProjectComponent.java",
      "flow-plugins/flow-maven-plugin/src/it/frontend-scanner-tuning-project/src/main/java/com/vaadin/test/ProjectRoot.java",
      "flow-plugins/flow-maven-plugin/src/it/frontend-scanner-tuning-project/verify.bsh",
      "flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/FlowModeAbstractMojo.java",
      "flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/FrontendScannerConfig.java",
      "flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java",
      "flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/ArtifactMatcherTest.java",
      "flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/FrontendScannerConfigTest.java",
      "flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/ReflectorTest.java",
      "flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/it/IntegrationTestHelper.java",
      "flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/server/scanner/ReflectionsClassFinder.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/AbstractDependenciesScanner.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/ClassFinder.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FullDependenciesScanner.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java"
    ],
    "pr_changed_test_files": [
      "flow-plugins/flow-maven-plugin/src/it/frontend-scanner-tuning-project/src/main/java/com/vaadin/test/ProjectComponent.java",
      "flow-plugins/flow-maven-plugin/src/it/frontend-scanner-tuning-project/src/main/java/com/vaadin/test/ProjectRoot.java",
      "flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/ArtifactMatcherTest.java",
      "flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/FrontendScannerConfigTest.java",
      "flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/ReflectorTest.java",
      "flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/it/IntegrationTestHelper.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java"
    ],
    "base_commit": "6ddb5224d3ff1ae88bfc7a782e41db336ca0541c",
    "head_commit": "aa2cba23cb5cd9d84578e729bcfa3f0d7ec67c08",
    "repo_url": "https://github.com/vaadin/flow/pull/21125",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21125",
    "dockerfile": "",
    "pr_merged_at": "2025-03-28T12:51:03.000Z",
    "patch": "diff --git a/flow-plugins/flow-maven-plugin/pom.xml b/flow-plugins/flow-maven-plugin/pom.xml\nindex 760813140de..3c97f2b1b62 100644\n--- a/flow-plugins/flow-maven-plugin/pom.xml\n+++ b/flow-plugins/flow-maven-plugin/pom.xml\n@@ -107,6 +107,7 @@\n                     <localRepositoryPath>target/local-repo</localRepositoryPath>\n                     <extraArtifacts>\n                         <artifact>com.vaadin:flow-client:${project.version}</artifact>\n+                        <artifact>com.vaadin:flow-react:${project.version}</artifact>\n                     </extraArtifacts>\n                     <streamLogsOnFailures>true</streamLogsOnFailures>\n                     <settingsFile>src/it/settings.xml</settingsFile>\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/it/flow-addon/invoker.properties b/flow-plugins/flow-maven-plugin/src/it/flow-addon/invoker.properties\nindex 2c356687518..c24a600b689 100644\n--- a/flow-plugins/flow-maven-plugin/src/it/flow-addon/invoker.properties\n+++ b/flow-plugins/flow-maven-plugin/src/it/flow-addon/invoker.properties\n@@ -21,3 +21,5 @@ invoker.goals=package\n invoker.profiles.1=\n invoker.profiles.2=fake-flow-resources\n invoker.profiles.3=fake-flow-plugin-resources\n+invoker.profiles.4=alpha-addon\n+invoker.profiles.5=beta-addon\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/it/flow-addon/pom.xml b/flow-plugins/flow-maven-plugin/src/it/flow-addon/pom.xml\nindex 163310e8b76..0c34dc11bca 100644\n--- a/flow-plugins/flow-maven-plugin/src/it/flow-addon/pom.xml\n+++ b/flow-plugins/flow-maven-plugin/src/it/flow-addon/pom.xml\n@@ -21,8 +21,31 @@\n         <maven.compiler.source>${maven.compiler.release}</maven.compiler.source>\n         <maven.compiler.target>${maven.compiler.release}</maven.compiler.target>\n         <maven.test.skip>true</maven.test.skip>\n+        <custom.source.directory>src/main/java</custom.source.directory>\n     </properties>\n \n+    <build>\n+        <sourceDirectory>${custom.source.directory}</sourceDirectory>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-clean-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>clean-only-classes</id>\n+                        <goals>\n+                            <goal>clean</goal>\n+                        </goals>\n+                        <phase>initialize</phase>\n+                        <configuration>\n+                            <directory>${project.build.outputDirectory}</directory>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n     <dependencies>\n         <dependency>\n             <groupId>com.vaadin</groupId>\n@@ -59,6 +82,34 @@\n                 </resources>\n             </build>\n         </profile>\n+        <profile>\n+            <id>alpha-addon</id>\n+            <properties>\n+                <custom.source.directory>src/main/alpha-addon/java</custom.source.directory>\n+            </properties>\n+            <build>\n+                <finalName>alpha-addon-${project.version}</finalName>\n+                <resources>\n+                    <resource>\n+                        <directory>${project.basedir}/src/main/alpha-addon/resources</directory>\n+                    </resource>\n+                </resources>\n+            </build>\n+        </profile>\n+        <profile>\n+            <id>beta-addon</id>\n+            <properties>\n+                <custom.source.directory>src/main/beta-addon/java</custom.source.directory>\n+            </properties>\n+            <build>\n+                <finalName>beta-addon-${project.version}</finalName>\n+                <resources>\n+                    <resource>\n+                        <directory>${project.basedir}/src/main/beta-addon/resources</directory>\n+                    </resource>\n+                </resources>\n+            </build>\n+        </profile>\n     </profiles>\n \n </project>\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/it/flow-addon/src/main/alpha-addon/java/com/vaadin/addon/alpha/AlphaComponent.java b/flow-plugins/flow-maven-plugin/src/it/flow-addon/src/main/alpha-addon/java/com/vaadin/addon/alpha/AlphaComponent.java\nnew file mode 100644\nindex 00000000000..1b03d487499\n--- /dev/null\n+++ b/flow-plugins/flow-maven-plugin/src/it/flow-addon/src/main/alpha-addon/java/com/vaadin/addon/alpha/AlphaComponent.java\n@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.addon.alpha;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.Tag;\n+import com.vaadin.flow.component.dependency.JsModule;\n+\n+@Tag(\"alpha-addon\")\n+@JsModule(\"./alpha.js\")\n+public class AlphaComponent extends Component {\n+}\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/it/flow-addon/src/main/alpha-addon/java/com/vaadin/addon/alpha/AlphaRoute.java b/flow-plugins/flow-maven-plugin/src/it/flow-addon/src/main/alpha-addon/java/com/vaadin/addon/alpha/AlphaRoute.java\nnew file mode 100644\nindex 00000000000..c8c1b2dc513\n--- /dev/null\n+++ b/flow-plugins/flow-maven-plugin/src/it/flow-addon/src/main/alpha-addon/java/com/vaadin/addon/alpha/AlphaRoute.java\n@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.addon.alpha;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.HasComponents;\n+import com.vaadin.flow.component.Tag;\n+import com.vaadin.flow.router.Route;\n+\n+@Route(\"alpha-addon\")\n+@Tag(\"div\")\n+public class AlphaRoute extends Component implements HasComponents {\n+\n+    public AlphaRoute() {\n+        add(new AlphaComponent());\n+    }\n+}\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/it/flow-addon/src/main/alpha-addon/java/com/vaadin/addon/alpha/UnusedComponent.java b/flow-plugins/flow-maven-plugin/src/it/flow-addon/src/main/alpha-addon/java/com/vaadin/addon/alpha/UnusedComponent.java\nnew file mode 100644\nindex 00000000000..710cb6f2c0c\n--- /dev/null\n+++ b/flow-plugins/flow-maven-plugin/src/it/flow-addon/src/main/alpha-addon/java/com/vaadin/addon/alpha/UnusedComponent.java\n@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.addon.alpha;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.Tag;\n+import com.vaadin.flow.component.dependency.JsModule;\n+\n+@Tag(\"alpha-addon\")\n+@JsModule(\"./not-used.js\")\n+public class UnusedComponent extends Component {\n+}\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/it/flow-addon/src/main/alpha-addon/resources/META-INF/resources/frontend/alpha.js b/flow-plugins/flow-maven-plugin/src/it/flow-addon/src/main/alpha-addon/resources/META-INF/resources/frontend/alpha.js\nnew file mode 100644\nindex 00000000000..b2b01b83964\n--- /dev/null\n+++ b/flow-plugins/flow-maven-plugin/src/it/flow-addon/src/main/alpha-addon/resources/META-INF/resources/frontend/alpha.js\n@@ -0,0 +1 @@\n+window.alpha = 1;\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/it/flow-addon/src/main/alpha-addon/resources/META-INF/resources/frontend/not-used.js b/flow-plugins/flow-maven-plugin/src/it/flow-addon/src/main/alpha-addon/resources/META-INF/resources/frontend/not-used.js\nnew file mode 100644\nindex 00000000000..0c299c7eb9c\n--- /dev/null\n+++ b/flow-plugins/flow-maven-plugin/src/it/flow-addon/src/main/alpha-addon/resources/META-INF/resources/frontend/not-used.js\n@@ -0,0 +1 @@\n+console.log(\"never imported\");\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/it/flow-addon/src/main/beta-addon/java/com/vaadin/addon/beta/BetaComponent.java b/flow-plugins/flow-maven-plugin/src/it/flow-addon/src/main/beta-addon/java/com/vaadin/addon/beta/BetaComponent.java\nnew file mode 100644\nindex 00000000000..f902835be07\n--- /dev/null\n+++ b/flow-plugins/flow-maven-plugin/src/it/flow-addon/src/main/beta-addon/java/com/vaadin/addon/beta/BetaComponent.java\n@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.addon.beta;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.Tag;\n+import com.vaadin.flow.component.dependency.JsModule;\n+\n+@Tag(\"beta-addon\")\n+@JsModule(\"./beta.js\")\n+public class BetaComponent extends Component {\n+}\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/it/flow-addon/src/main/beta-addon/java/com/vaadin/addon/beta/BetaRoute.java b/flow-plugins/flow-maven-plugin/src/it/flow-addon/src/main/beta-addon/java/com/vaadin/addon/beta/BetaRoute.java\nnew file mode 100644\nindex 00000000000..7d3d496e57a\n--- /dev/null\n+++ b/flow-plugins/flow-maven-plugin/src/it/flow-addon/src/main/beta-addon/java/com/vaadin/addon/beta/BetaRoute.java\n@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.addon.beta;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.HasComponents;\n+import com.vaadin.flow.component.Tag;\n+import com.vaadin.flow.router.Route;\n+\n+@Route(\"beta-addon\")\n+@Tag(\"div\")\n+public class BetaRoute extends Component implements HasComponents {\n+\n+    public BetaRoute() {\n+        add(new BetaComponent());\n+    }\n+}\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/it/flow-addon/src/main/beta-addon/resources/META-INF/resources/frontend/beta.js b/flow-plugins/flow-maven-plugin/src/it/flow-addon/src/main/beta-addon/resources/META-INF/resources/frontend/beta.js\nnew file mode 100644\nindex 00000000000..4d63514aa84\n--- /dev/null\n+++ b/flow-plugins/flow-maven-plugin/src/it/flow-addon/src/main/beta-addon/resources/META-INF/resources/frontend/beta.js\n@@ -0,0 +1 @@\n+window.beta = 1;\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/it/frontend-scanner-tuning-project/invoker.properties b/flow-plugins/flow-maven-plugin/src/it/frontend-scanner-tuning-project/invoker.properties\nnew file mode 100644\nindex 00000000000..108ed6eb060\n--- /dev/null\n+++ b/flow-plugins/flow-maven-plugin/src/it/frontend-scanner-tuning-project/invoker.properties\n@@ -0,0 +1,29 @@\n+#\n+# Copyright 2000-2025 Vaadin Ltd.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+# use this file except in compliance with the License. You may obtain a copy of\n+# the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+# License for the specific language governing permissions and limitations under\n+# the License.\n+#\n+\n+invoker.goals=clean verify -DskipTests\n+invoker.profiles.1=\n+invoker.profiles.2=disable-optimized-bundle\n+invoker.profiles.3=exclude\n+invoker.profiles.4=exclude,disable-optimized-bundle\n+invoker.profiles.5=include\n+invoker.profiles.6=include,disable-optimized-bundle\n+invoker.profiles.7=exclude-all\n+invoker.profiles.8=exclude-all,disable-optimized-bundle\n+invoker.profiles.9=disabled-scan-config\n+invoker.profiles.10=disabled-scan-config,disable-optimized-bundle\n+invoker.profiles.11=exclude-target\n+invoker.profiles.12=exclude-target,disable-optimized-bundle\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/it/frontend-scanner-tuning-project/pom.xml b/flow-plugins/flow-maven-plugin/src/it/frontend-scanner-tuning-project/pom.xml\nnew file mode 100644\nindex 00000000000..000c982cdd8\n--- /dev/null\n+++ b/flow-plugins/flow-maven-plugin/src/it/frontend-scanner-tuning-project/pom.xml\n@@ -0,0 +1,267 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <groupId>com.vaadin.test.maven</groupId>\n+    <artifactId>frontend-scanner-tuning-project</artifactId>\n+    <version>1.0</version>\n+    <packaging>jar</packaging>\n+\n+    <description>\n+        Tests that frontend scanner configuration is applied.\n+    </description>\n+\n+    <properties>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <maven.compiler.release>17</maven.compiler.release>\n+        <maven.compiler.source>${maven.compiler.release}</maven.compiler.source>\n+        <maven.compiler.target>${maven.compiler.release}</maven.compiler.target>\n+        <maven.test.skip>true</maven.test.skip>\n+\n+        <flow.version>@project.version@</flow.version>\n+\n+        <verificationSet>all-deps</verificationSet>\n+        <bundleMode>optimized</bundleMode>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.vaadin</groupId>\n+            <artifactId>flow-server</artifactId>\n+            <version>${flow.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.vaadin</groupId>\n+            <artifactId>flow-client</artifactId>\n+            <version>${flow.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.vaadin</groupId>\n+            <artifactId>flow-react</artifactId>\n+            <version>${flow.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.vaadin.test</groupId>\n+            <artifactId>fake-flow-resources</artifactId>\n+            <version>1.0.0</version>\n+            <scope>system</scope>\n+            <systemPath>${project.basedir}/../flow-addon/target/fake-resources-1.0.0.jar</systemPath>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.vaadin.addon</groupId>\n+            <artifactId>alpha-addon</artifactId>\n+            <version>1.0.0</version>\n+            <scope>system</scope>\n+            <systemPath>${project.basedir}/../flow-addon/target/alpha-addon-1.0.0.jar</systemPath>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.vaadin.addon</groupId>\n+            <artifactId>beta-addon</artifactId>\n+            <version>1.0.0</version>\n+            <scope>system</scope>\n+            <systemPath>${project.basedir}/../flow-addon/target/beta-addon-1.0.0.jar</systemPath>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <version>3.13.0</version>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-clean-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>delete-bundles</id>\n+                        <goals>\n+                            <goal>clean</goal>\n+                        </goals>\n+                        <phase>initialize</phase>\n+                        <configuration>\n+                            <directory>${project.basedir}/src/main/bundles</directory>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>com.vaadin</groupId>\n+                <artifactId>flow-maven-plugin</artifactId>\n+                <version>${flow.version}</version>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>prepare-frontend</goal>\n+                            <goal>build-frontend</goal>\n+                        </goals>\n+                        <phase>compile</phase>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-resources-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>copy-frontend-files</id>\n+                        <goals>\n+                            <goal>copy-resources</goal>\n+                        </goals>\n+                        <phase>verify</phase>\n+                        <configuration>\n+                            <outputDirectory>${project.basedir}/generated-imports/${bundleMode}/${verificationSet}</outputDirectory>\n+                            <resources>\n+                                <resource>\n+                                    <directory>${project.basedir}/src/main/frontend/generated/flow</directory>\n+                                    <includes>\n+                                        <include>chunks/**</include>\n+                                        <include>generated-flow-imports.js</include>\n+                                    </includes>\n+                                </resource>\n+                            </resources>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <profiles>\n+        <profile>\n+            <id>exclude</id>\n+            <properties>\n+                <verificationSet>exclude-alpha</verificationSet>\n+            </properties>\n+            <build>\n+                <plugins>\n+                    <plugin>\n+                        <groupId>com.vaadin</groupId>\n+                        <artifactId>flow-maven-plugin</artifactId>\n+                        <configuration>\n+                            <frontendScanner>\n+                                <excludes>\n+                                    <exclude>\n+                                        <groupId>com.vaadin.addon</groupId>\n+                                        <artifactId>alpha-addon</artifactId>\n+                                    </exclude>\n+                                </excludes>\n+                            </frontendScanner>\n+                        </configuration>\n+                    </plugin>\n+                </plugins>\n+            </build>\n+        </profile>\n+        <profile>\n+            <id>include</id>\n+            <properties>\n+                <verificationSet>include-alpha</verificationSet>\n+            </properties>\n+            <build>\n+                <plugins>\n+                    <plugin>\n+                        <groupId>com.vaadin</groupId>\n+                        <artifactId>flow-maven-plugin</artifactId>\n+                        <configuration>\n+                            <frontendScanner>\n+                                <includes>\n+                                    <include>\n+                                        <groupId>com.vaadin.addon</groupId>\n+                                        <artifactId>alpha-addon</artifactId>\n+                                    </include>\n+                                </includes>\n+                            </frontendScanner>\n+                        </configuration>\n+                    </plugin>\n+                </plugins>\n+            </build>\n+        </profile>\n+        <profile>\n+            <id>exclude-all</id>\n+            <properties>\n+                <verificationSet>exclude-all</verificationSet>\n+            </properties>\n+            <build>\n+                <plugins>\n+                    <plugin>\n+                        <groupId>com.vaadin</groupId>\n+                        <artifactId>flow-maven-plugin</artifactId>\n+                        <configuration>\n+                            <frontendScanner>\n+                                <excludes>\n+                                    <exclude>\n+                                        <groupId>*</groupId>\n+                                        <artifactId>*</artifactId>\n+                                    </exclude>\n+                                </excludes>\n+                            </frontendScanner>\n+                        </configuration>\n+                    </plugin>\n+                </plugins>\n+            </build>\n+        </profile>\n+        <profile>\n+            <id>exclude-target</id>\n+            <properties>\n+                <verificationSet>exclude-target</verificationSet>\n+            </properties>\n+            <build>\n+                <plugins>\n+                    <plugin>\n+                        <groupId>com.vaadin</groupId>\n+                        <artifactId>flow-maven-plugin</artifactId>\n+                        <configuration>\n+                            <frontendScanner>\n+                                <includeOutputDirectory>false</includeOutputDirectory>\n+                            </frontendScanner>\n+                        </configuration>\n+                    </plugin>\n+                </plugins>\n+            </build>\n+        </profile>\n+        <profile>\n+            <id>disabled-scan-config</id>\n+            <properties>\n+                <verificationSet>disabled-scan-config</verificationSet>\n+            </properties>\n+            <build>\n+                <plugins>\n+                    <plugin>\n+                        <groupId>com.vaadin</groupId>\n+                        <artifactId>flow-maven-plugin</artifactId>\n+                        <configuration>\n+                            <frontendScanner>\n+                                <enabled>false</enabled>\n+                                <excludes>\n+                                    <exclude>\n+                                        <groupId>*</groupId>\n+                                        <artifactId>*</artifactId>\n+                                    </exclude>\n+                                </excludes>\n+                            </frontendScanner>\n+                        </configuration>\n+                    </plugin>\n+                </plugins>\n+            </build>\n+        </profile>\n+        <profile>\n+            <id>disable-optimized-bundle</id>\n+            <properties>\n+                <bundleMode>not-optimized</bundleMode>\n+            </properties>\n+            <build>\n+                <plugins>\n+                    <plugin>\n+                        <groupId>com.vaadin</groupId>\n+                        <artifactId>flow-maven-plugin</artifactId>\n+                        <configuration>\n+                            <optimizeBundle>false</optimizeBundle>\n+                        </configuration>\n+                    </plugin>\n+                </plugins>\n+            </build>\n+        </profile>\n+    </profiles>\n+</project>\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/it/frontend-scanner-tuning-project/src/main/frontend/project-component.js b/flow-plugins/flow-maven-plugin/src/it/frontend-scanner-tuning-project/src/main/frontend/project-component.js\nnew file mode 100644\nindex 00000000000..904067f8419\n--- /dev/null\n+++ b/flow-plugins/flow-maven-plugin/src/it/frontend-scanner-tuning-project/src/main/frontend/project-component.js\n@@ -0,0 +1 @@\n+console.log(\"A project resource\");\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/it/frontend-scanner-tuning-project/verify.bsh b/flow-plugins/flow-maven-plugin/src/it/frontend-scanner-tuning-project/verify.bsh\nnew file mode 100644\nindex 00000000000..46c3965e703\n--- /dev/null\n+++ b/flow-plugins/flow-maven-plugin/src/it/frontend-scanner-tuning-project/verify.bsh\n@@ -0,0 +1,53 @@\n+// Verifies that only artifacts matching the frontend scanner configuration\n+// has been included in the bundle, by checking the Javascript generated imports.\n+// Every project execution copies the generated imports into the 'generated-imports'\n+// folder, categorized by bundle mode (optimized, not optimized) and invocation\n+// profile, as in the following example.\n+// Vaadin resources should always be present.\n+// See com.vaadin.flow.plugin.maven.it.IntegrationTestHelper\n+\n+import com.vaadin.flow.plugin.maven.it.IntegrationTestHelper;\n+\n+verifications = new LinkedHashMap();\n+verifications.put(\"all-deps\", List.of(\n+    \"@vaadin/common-frontend/ConnectionIndicator.js\",\n+    \"Frontend/generated/jar-resources/ReactRouterOutletElement.tsx\",\n+    \"Frontend/project-component.js\",\n+    \"Frontend/generated/jar-resources/alpha.js\",\n+    \"Frontend/generated/jar-resources/beta.js\"\n+));\n+verifications.put(\"exclude-alpha\", List.of(\n+    \"@vaadin/common-frontend/ConnectionIndicator.js\",\n+    \"Frontend/generated/jar-resources/ReactRouterOutletElement.tsx\",\n+    \"Frontend/project-component.js\",\n+    \"!Frontend/generated/jar-resources/alpha.js\",\n+    \"Frontend/generated/jar-resources/beta.js\"\n+));\n+verifications.put(\"include-alpha\", List.of(\n+    \"@vaadin/common-frontend/ConnectionIndicator.js\",\n+    \"Frontend/generated/jar-resources/ReactRouterOutletElement.tsx\",\n+    \"Frontend/project-component.js\",\n+    \"Frontend/generated/jar-resources/alpha.js\",\n+    \"!Frontend/generated/jar-resources/beta.js\"\n+));\n+verifications.put(\"exclude-all\", List.of(\n+    \"@vaadin/common-frontend/ConnectionIndicator.js\",\n+    \"Frontend/generated/jar-resources/ReactRouterOutletElement.tsx\",\n+    \"Frontend/project-component.js\",\n+    \"!Frontend/generated/jar-resources/alpha.js\",\n+    \"!Frontend/generated/jar-resources/beta.js\"\n+));\n+verifications.put(\"exclude-target\", List.of(\n+    \"@vaadin/common-frontend/ConnectionIndicator.js\",\n+    \"Frontend/generated/jar-resources/ReactRouterOutletElement.tsx\",\n+    \"!Frontend/project-component.js\",\n+    \"Frontend/generated/jar-resources/alpha.js\",\n+    \"Frontend/generated/jar-resources/beta.js\"\n+));\n+verifications.put(\"disabled-scan-config\", verifications.get(\"all-deps\"));\n+\n+path = basedir.toPath().resolve(\"generated-imports\");\n+System.out.println(\"Checking imports in \" + path);\n+IntegrationTestHelper.verifyImports(path, verifications);\n+\n+\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/FlowModeAbstractMojo.java b/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/FlowModeAbstractMojo.java\nindex c0ead303698..067858fa1c6 100644\n--- a/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/FlowModeAbstractMojo.java\n+++ b/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/FlowModeAbstractMojo.java\n@@ -16,6 +16,7 @@\n package com.vaadin.flow.plugin.maven;\n \n import javax.inject.Inject;\n+\n import java.io.File;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n@@ -290,6 +291,14 @@ public abstract class FlowModeAbstractMojo extends AbstractMojo\n     @Parameter(property = FrontendUtils.PARAM_IGNORE_VERSION_CHECKS, defaultValue = \"false\")\n     private boolean frontendIgnoreVersionChecks;\n \n+    /**\n+     * Allows to fine tune frontend resources detection by defining which\n+     * artifacts should be included or excluded during the class scanning\n+     * process.\n+     */\n+    @Parameter\n+    private FrontendScannerConfig frontendScanner;\n+\n     static final String CLASSFINDER_FIELD_NAME = \"classFinder\";\n     private ClassFinder classFinder;\n \n@@ -421,7 +430,7 @@ public boolean isHillaAvailable() {\n      * @return true if Hilla is available, false otherwise\n      */\n     public static boolean isHillaAvailable(MavenProject mavenProject) {\n-        return Reflector.of(mavenProject, null).getResource(\n+        return Reflector.of(mavenProject, null, null).getResource(\n                 \"com/vaadin/hilla/EndpointController.class\") != null;\n     }\n \n@@ -770,7 +779,8 @@ private Reflector getOrCreateReflector() {\n                     + \" and phase \" + mojoExecution.getLifecyclePhase());\n             return Reflector.adapt(pluginContext.get(reflectorKey));\n         }\n-        Reflector reflector = Reflector.of(project, mojoExecution);\n+        Reflector reflector = Reflector.of(project, mojoExecution,\n+                frontendScanner);\n         if (pluginContext != null) {\n             pluginContext.put(reflectorKey, reflector);\n             getLog().debug(\"Cached Reflector for plugin \" + pluginKey\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/FrontendScannerConfig.java b/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/FrontendScannerConfig.java\nnew file mode 100644\nindex 00000000000..8ae236ee0ac\n--- /dev/null\n+++ b/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/FrontendScannerConfig.java\n@@ -0,0 +1,390 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.plugin.maven;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.Predicate;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Configuration class for filtering Maven artifacts to be scanned by the\n+ * plugin. This class allows enabling or disabling the scanner and defining\n+ * inclusion and exclusion rules.\n+ * <p>\n+ * </p>\n+ * Exclusions have higher priority and are checked first. If an artifact matches\n+ * an exclusion rule, it is not scanned. If no exclusion rule applies, inclusion\n+ * rules are evaluated. If the artifact doesn't even match the inclusion rule,\n+ * it is not scanned.\n+ */\n+@Reflector.Cloneable\n+public class FrontendScannerConfig {\n+\n+    private static final Logger LOGGER = LoggerFactory\n+            .getLogger(FrontendScannerConfig.class);\n+\n+    static final Predicate<Artifact> DEFAULT_FILTER = withDefaults()::shouldScan;\n+\n+    private final boolean silent;\n+\n+    private boolean enabled = true;\n+\n+    private boolean includeOutputDirectory = true;\n+\n+    private final List<ArtifactMatcher> includes = new ArrayList<>();\n+\n+    private final List<ArtifactMatcher> excludes = new ArrayList<>();\n+\n+    /**\n+     * Creates a new empty configuration, accepting all artifacts.\n+     */\n+    public FrontendScannerConfig() {\n+        this.silent = false;\n+    }\n+\n+    private FrontendScannerConfig(boolean silent) {\n+        this.silent = silent;\n+    }\n+\n+    /**\n+     * Sets whether the frontend scanner is enabled or not.\n+     *\n+     * @param enabled\n+     *            {@code true} to enable frontend scan filtering, otherwise\n+     *            {@code false}.\n+     */\n+    public void setEnabled(boolean enabled) {\n+        this.enabled = enabled;\n+    }\n+\n+    /**\n+     * Indicates whether the frontend scanning filtering is enabled. Default is\n+     * {@code true}.\n+     *\n+     * @return {@code true} if frontend scanning filtering is enabled, otherwise\n+     *         {@code false}.\n+     */\n+    public boolean isEnabled() {\n+        return enabled;\n+    }\n+\n+    /**\n+     * Sets if the output directory should be included in the scan.\n+     * <p>\n+     * </p>\n+     * Can be turned on to make scanning faster if the maven module itself does\n+     * not have classes referencing frontend resources or Vaadin components or\n+     * add-ons.\n+     *\n+     * @param includeOutputDirectory\n+     *            {@code true} to scan output directory, otherwise\n+     *            {@code false}.\n+     */\n+    public void setIncludeOutputDirectory(boolean includeOutputDirectory) {\n+        this.includeOutputDirectory = includeOutputDirectory;\n+    }\n+\n+    /**\n+     * Determines if the output directory should be included in the scan.\n+     * Default is {@code true}.\n+     *\n+     * @return {@code true} if output directory should be included in the scan,\n+     *         otherwise {@code false}.\n+     */\n+    public boolean isIncludeOutputDirectory() {\n+        return includeOutputDirectory;\n+    }\n+\n+    /**\n+     * Gets the list of artifact matchers specifying which artifacts should be\n+     * excluded from the scan.\n+     *\n+     * @return the list of artifact exclusions.\n+     */\n+    public List<ArtifactMatcher> getExcludes() {\n+        return List.copyOf(excludes);\n+    }\n+\n+    /**\n+     * Adds an artifact matcher to the exclude list.\n+     *\n+     * @param artifactMatcher\n+     *            the artifact matcher to be excluded, not {@literal null}.\n+     */\n+    public void addExclude(ArtifactMatcher artifactMatcher) {\n+        excludes.add(Objects.requireNonNull(artifactMatcher,\n+                \"Artifact matcher must not be null\"));\n+    }\n+\n+    /**\n+     * Gets the ist of artifact matchers specifying which artifacts should be\n+     * included in the scan.\n+     *\n+     * @return the list of artifact inclusions.\n+     */\n+    public List<ArtifactMatcher> getIncludes() {\n+        return List.copyOf(includes);\n+    }\n+\n+    /**\n+     * Adds an artifact matcher to the include list.\n+     *\n+     * @param artifactMatcher\n+     *            the artifact matcher to be included, not {@literal null}.\n+     */\n+    public void addInclude(ArtifactMatcher artifactMatcher) {\n+        includes.add(Objects.requireNonNull(artifactMatcher,\n+                \"Artifact matcher must not be null\"));\n+    }\n+\n+    /**\n+     * Determines whether the given artifact should be analyzed by the frontend\n+     * scanner.\n+     * <p>\n+     * </p>\n+     * Exclusions have higher priority and are checked first. If an artifact\n+     * matches an exclusion rule, it is not scanned. If no exclusion rule\n+     * applies, inclusion rules are evaluated.\n+     *\n+     * @param artifact\n+     *            the artifact to be evaluated\n+     * @return {@code true} if the configuration is disabled or there are no\n+     *         rules to evaluate or if the artifact matches all applicable\n+     *         rules, otherwise {@code false}\n+     */\n+    boolean shouldScan(Artifact artifact) {\n+        if (!enabled) {\n+            return true;\n+        }\n+        if (!excludes.isEmpty() && excludes.stream()\n+                .anyMatch(matcher -> matcher.matches(artifact))) {\n+            log(\"Artifact {} rejected by exclusion rules\", artifact.getId());\n+            return false;\n+        }\n+        if (!includes.isEmpty() && includes.stream()\n+                .noneMatch(matcher -> matcher.matches(artifact))) {\n+            log(\"Artifact {} rejected because not matching inclusion rules\",\n+                    artifact.getId());\n+            return false;\n+        }\n+        log(\"Artifact {} accepted\", artifact.getId());\n+        return true;\n+    }\n+\n+    private void log(String message, Object... args) {\n+        if (!silent && LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(message, args);\n+        }\n+    }\n+\n+    // Vaadin artifact should always be scanned to prevent the user ignoring\n+    // them by mistake; however, well know Vaadin artifact that do not contain\n+    // any frontend reference can be safely excluded.\n+    // In addition, logging is turned off to prevent confusion with user\n+    // configured scanning rules.\n+    private static FrontendScannerConfig withDefaults() {\n+        FrontendScannerConfig out = new FrontendScannerConfig(true);\n+        out.addInclude(\n+                new FrontendScannerConfig.ArtifactMatcher(\"com.vaadin\", \"*\"));\n+        out.addExclude(new FrontendScannerConfig.ArtifactMatcher(\n+                \"com.vaadin.external.gw\", \"*\"));\n+        out.addExclude(new FrontendScannerConfig.ArtifactMatcher(\n+                \"com.vaadin.servletdetector\", \"*\"));\n+        out.addExclude(new FrontendScannerConfig.ArtifactMatcher(\"com.vaadin\",\n+                \"open\"));\n+        out.addExclude(new FrontendScannerConfig.ArtifactMatcher(\"com.vaadin\",\n+                \"license-checker\"));\n+        return out;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"FrontendScannerConfig { enabled=\" + enabled\n+                + \", includeOutputDirectory=\" + includeOutputDirectory\n+                + \", includes=\" + includes + \", excludes=\" + excludes + '}';\n+    }\n+\n+    /**\n+     * Represents a pattern-based matcher for Maven artifacts.\n+     * <p>\n+     * </p>\n+     * Patterns can use the wildcard {@code *}, but only at the beginning or end\n+     * of the rule. Examples of valid patterns:\n+     * <ul>\n+     * <li>{@code com.vaadin*}</li>\n+     * <li>{@code *.vaadin}</li>\n+     * <li>{@code *.vaadin.*}</li>\n+     * <li>{@code *}</li>\n+     * </ul>\n+     * Invalid example: {@code com.*.vaadin}\n+     */\n+    public static class ArtifactMatcher {\n+        // setters do not exactly match field names to prevent Maven field\n+        // injection, so validation rules can be applied by setters\n+        private String groupIdPattern;\n+        private String artifactPattern;\n+\n+        /**\n+         * Creates an undefined instance that matches everything.\n+         */\n+        public ArtifactMatcher() {\n+        }\n+\n+        /**\n+         * Creates a matcher for the given {@code group} and\n+         * {@code artifact name} patterns.\n+         *\n+         * @param groupId\n+         *            the pattern for matching the artifact's group ID; can be\n+         *            {@literal null}.\n+         * @param artifactId\n+         *            the pattern for matching the artifact's artifact ID; can\n+         *            be {@literal null}.\n+         */\n+        public ArtifactMatcher(String groupId, String artifactId) {\n+            this.groupIdPattern = groupId;\n+            this.artifactPattern = artifactId;\n+        }\n+\n+        /**\n+         * Gets the pattern for matching the artifact's group ID.\n+         *\n+         * @return the pattern for matching the artifact's group ID; can be\n+         *         {@literal null}.\n+         */\n+        public String getGroupId() {\n+            return groupIdPattern;\n+        }\n+\n+        /**\n+         * Sets the pattern for matching the artifact's group ID.\n+         * <p>\n+         * </p>\n+         * The argument must be a valid pattern as describe in the class\n+         * Javadoc. {@literal null} is and allowed and value, and it acts like\n+         * setting {@code *}, meaning every group ID is allowed.\n+         *\n+         * @param groupId\n+         *            the pattern for matching the artifact's group ID; can be\n+         *            {@literal null}.\n+         */\n+        public void setGroupId(String groupId) {\n+            validatePattern(groupId);\n+            this.groupIdPattern = groupId;\n+        }\n+\n+        /**\n+         * Gets the pattern for matching the artifact's artifact ID.\n+         *\n+         * @return the pattern for matching the artifact's artifact ID; can be\n+         *         {@literal null}.\n+         */\n+        public String getArtifactId() {\n+            return artifactPattern;\n+        }\n+\n+        /**\n+         * Sets the pattern for matching the artifact's artifact ID.\n+         * <p>\n+         * </p>\n+         * The argument must be a valid pattern as describe in the class\n+         * Javadoc. {@literal null} is and allowed and value, and it acts like\n+         * setting {@code *}, meaning every artifact ID is allowed.\n+         *\n+         * @param artifactId\n+         *            the pattern for matching the artifact's artifact ID; can\n+         *            be {@literal null}.\n+         */\n+        public void setArtifactId(String artifactId) {\n+            validatePattern(artifactId);\n+            this.artifactPattern = artifactId;\n+        }\n+\n+        /**\n+         * Evaluates whether a given artifact matches the configured patterns.\n+         *\n+         * @param artifact\n+         *            the artifact to be checked.\n+         * @return {@code true} if the artifact matches the patterns,\n+         *         {@code false} otherwise.\n+         */\n+        public boolean matches(Artifact artifact) {\n+            if (artifact == null) {\n+                return false;\n+            }\n+            boolean allGroups = groupIdPattern == null\n+                    || groupIdPattern.isBlank() || \"*\".equals(groupIdPattern);\n+            boolean allArtifacts = artifactPattern == null\n+                    || artifactPattern.isBlank() || \"*\".equals(artifactPattern);\n+            if (allGroups && allArtifacts) {\n+                return true;\n+            }\n+            if (!allGroups\n+                    && !matchesPattern(groupIdPattern, artifact.getGroupId())) {\n+                return false;\n+            }\n+            return allArtifacts || matchesPattern(artifactPattern,\n+                    artifact.getArtifactId());\n+        }\n+\n+        private static boolean matchesPattern(String pattern, String value) {\n+            boolean startWildcard = pattern.charAt(0) == '*';\n+            int patternLength = pattern.length();\n+            boolean endWildcard = pattern.charAt(patternLength - 1) == '*';\n+            if (startWildcard && endWildcard) {\n+                return value.contains(pattern.substring(1, patternLength - 1));\n+            } else if (startWildcard) {\n+                return value.endsWith(pattern.substring(1));\n+            } else if (endWildcard) {\n+                return value\n+                        .startsWith(pattern.substring(0, patternLength - 1));\n+            }\n+            return value.equals(pattern);\n+        }\n+\n+        private static void validatePattern(String pattern) {\n+            if (pattern != null) {\n+                long wildcards = pattern.chars().filter(c -> c == '*').count();\n+                int idx = pattern.indexOf('*');\n+                int lastIdx = pattern.lastIndexOf('*');\n+                if (wildcards > 2 || (idx > 0 && idx < pattern.length() - 1)\n+                        || (lastIdx > 0 && lastIdx < pattern.length() - 1)) {\n+                    throw new IllegalArgumentException(\"Invalid pattern: '\"\n+                            + pattern\n+                            + \"'. * can be only at the begin and the end of the pattern\");\n+                }\n+            }\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return (this.groupIdPattern != null\n+                    && !this.groupIdPattern.isBlank() ? this.groupIdPattern\n+                            : \"*\")\n+                    + ':'\n+                    + (this.artifactPattern != null\n+                            && !this.artifactPattern.isBlank()\n+                                    ? this.artifactPattern\n+                                    : \"*\");\n+        }\n+    }\n+}\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java b/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java\nindex e629197d88c..78f04c89fe5 100644\n--- a/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java\n+++ b/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java\n@@ -18,6 +18,11 @@\n \n import java.io.File;\n import java.io.IOException;\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n import java.net.URL;\n@@ -30,15 +35,23 @@\n import java.util.Set;\n import java.util.function.Consumer;\n import java.util.function.Function;\n+import java.util.function.Predicate;\n import java.util.stream.Collectors;\n \n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n import org.apache.maven.artifact.Artifact;\n import org.apache.maven.plugin.Mojo;\n import org.apache.maven.plugin.MojoExecution;\n import org.apache.maven.project.MavenProject;\n import org.codehaus.plexus.classworlds.realm.ClassRealm;\n import org.codehaus.plexus.classworlds.realm.NoSuchRealmException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n+import com.vaadin.flow.internal.JacksonUtils;\n+import com.vaadin.flow.internal.JsonDecodingException;\n+import com.vaadin.flow.internal.JsonEncodingException;\n import com.vaadin.flow.internal.ReflectTools;\n import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n import com.vaadin.flow.server.scanner.ReflectionsClassFinder;\n@@ -57,6 +70,7 @@ public final class Reflector {\n     private static final Set<String> REQUIRED_PLUGIN_DEPENDENCIES = Set.of(\n             \"org.reflections:reflections:jar\",\n             \"org.zeroturnaround:zt-exec:jar\");\n+    private static final Logger log = LoggerFactory.getLogger(Reflector.class);\n \n     private final URLClassLoader isolatedClassLoader;\n     private List<String> dependenciesIncompatibility;\n@@ -68,7 +82,7 @@ public final class Reflector {\n      * @param isolatedClassLoader\n      *            class loader to be used to create mojo instances.\n      */\n-    public Reflector(URLClassLoader isolatedClassLoader) {\n+    Reflector(URLClassLoader isolatedClassLoader) {\n         this.isolatedClassLoader = isolatedClassLoader;\n     }\n \n@@ -167,8 +181,7 @@ public URL getResource(String name) {\n     /**\n      * Creates a copy of the given Flow mojo, loading classes the isolated\n      * classloader.\n-     * <p>\n-     * </p>\n+     *\n      * Loads the given mojo class from the isolated class loader and then\n      * creates a new instance for it and fills all field copying values from the\n      * original mojo. The input mojo must have a public no-args constructor.\n@@ -207,13 +220,15 @@ public Mojo createMojo(FlowModeAbstractMojo sourceMojo) throws Exception {\n      *            the maven project.\n      * @param mojoExecution\n      *            the current mojo execution.\n+     * @param scannerConfig\n+     *            the frontend scanner filtering configuration.\n      * @return a Reflector instance for the current maven execution.\n      */\n     public static Reflector of(MavenProject project,\n-            MojoExecution mojoExecution) {\n+            MojoExecution mojoExecution, FrontendScannerConfig scannerConfig) {\n         List<String> dependenciesIncompatibility = new ArrayList<>();\n-        URLClassLoader classLoader = createIsolatedClassLoader(project,\n-                mojoExecution, dependenciesIncompatibility);\n+        ReflectorClassLoader classLoader = createIsolatedClassLoader(project,\n+                mojoExecution, scannerConfig, dependenciesIncompatibility);\n         Reflector reflector = new Reflector(classLoader);\n         reflector.dependenciesIncompatibility = dependenciesIncompatibility;\n         return reflector;\n@@ -239,46 +254,71 @@ private synchronized Object getOrCreateClassFinder() throws Exception {\n         if (classFinder == null) {\n             Class<?> classFinderImplClass = loadClass(\n                     ReflectionsClassFinder.class.getName());\n+            URL[] scanURLs = ReflectTools\n+                    .getGetter(isolatedClassLoader.getClass(), \"urlsToScan\")\n+                    .map(m -> {\n+                        try {\n+                            return (URL[]) m.invoke(isolatedClassLoader);\n+                        } catch (Exception e) {\n+                            log.debug(\n+                                    \"Cannot get scan URLs from Reflector classloader. Fallback to full URL set.\");\n+                        }\n+                        return null;\n+                    }).orElseGet(isolatedClassLoader::getURLs);\n             classFinder = classFinderImplClass\n-                    .getConstructor(ClassLoader.class, URL[].class).newInstance(\n-                            isolatedClassLoader, isolatedClassLoader.getURLs());\n+                    .getConstructor(ClassLoader.class, URL[].class)\n+                    .newInstance(isolatedClassLoader, scanURLs);\n         }\n         return classFinder;\n     }\n \n-    private static URLClassLoader createIsolatedClassLoader(\n+    private static ReflectorClassLoader createIsolatedClassLoader(\n             MavenProject project, MojoExecution mojoExecution,\n+            FrontendScannerConfig scannerConfig,\n             List<String> dependenciesIncompatibility) {\n         List<URL> urls = new ArrayList<>();\n+        List<URL> filteredUrls = new ArrayList<>();\n         String outputDirectory = project.getBuild().getOutputDirectory();\n         if (outputDirectory != null) {\n-            urls.add(FlowFileUtils.convertToUrl(new File(outputDirectory)));\n+            URL outputDirURL = FlowFileUtils\n+                    .convertToUrl(new File(outputDirectory));\n+            urls.add(outputDirURL);\n+            if (scannerConfig == null\n+                    || scannerConfig.isIncludeOutputDirectory()) {\n+                filteredUrls.add(outputDirURL);\n+            }\n         }\n-\n         Function<Artifact, String> keyMapper = artifact -> artifact.getGroupId()\n                 + \":\" + artifact.getArtifactId() + \":\" + artifact.getType()\n                 + ((artifact.getClassifier() != null)\n                         ? \":\" + artifact.getClassifier()\n                         : \"\");\n \n-        Map<String, Artifact> projectDependencies = new HashMap<>(project\n-                .getArtifacts().stream()\n-                // Exclude all maven artifacts to prevent class loading clash\n-                // with maven.api class realm\n-                .filter(artifact -> !DEPENDENCIES_GROUP_EXCLUSIONS\n-                        .contains(artifact.getGroupId()))\n-                .filter(artifact -> artifact.getFile() != null\n-                        && artifact.getArtifactHandler().isAddedToClasspath()\n-                        && (Artifact.SCOPE_COMPILE.equals(artifact.getScope())\n-                                || Artifact.SCOPE_RUNTIME\n-                                        .equals(artifact.getScope())\n-                                || Artifact.SCOPE_SYSTEM\n-                                        .equals(artifact.getScope())\n-                                || (Artifact.SCOPE_PROVIDED\n-                                        .equals(artifact.getScope())\n-                                        && artifact.getFile().getPath().matches(\n-                                                INCLUDE_FROM_COMPILE_DEPS_REGEX))))\n-                .collect(Collectors.toMap(keyMapper, Function.identity())));\n+        if (scannerConfig != null && scannerConfig.isEnabled()) {\n+            log.debug(\"Frontend scanner configuration enabled: {}\",\n+                    scannerConfig);\n+        }\n+        Predicate<Artifact> shouldScan = scannerConfig == null\n+                ? artifact -> true\n+                : FrontendScannerConfig.DEFAULT_FILTER\n+                        .or(scannerConfig::shouldScan);\n+\n+        record FilterableArtifact(Artifact artifact, boolean scan) {\n+        }\n+\n+        Map<String, FilterableArtifact> projectDependencies = new HashMap<>(\n+                project.getArtifacts().stream()\n+                        // Exclude all maven artifacts to prevent class loading\n+                        // clash\n+                        // with maven.api class realm\n+                        .filter(artifact -> !DEPENDENCIES_GROUP_EXCLUSIONS\n+                                .contains(artifact.getGroupId()))\n+                        .filter(Reflector::isProductionDependency)\n+                        .map(artifact -> new FilterableArtifact(artifact,\n+                                shouldScan.test(artifact)))\n+                        .collect(Collectors.toMap(\n+                                item -> keyMapper.apply(item.artifact),\n+                                Function.identity())));\n \n         if (mojoExecution != null) {\n \n@@ -306,11 +346,11 @@ private static URLClassLoader createIsolatedClassLoader(\n             // 1: dependency defined by the plugin only\n             Map<Integer, List<Artifact>> potentialDuplicates = pluginDependencies\n                     .stream().collect(Collectors.groupingBy(pluginArtifact -> {\n-                        Artifact projectArtifact = projectDependencies\n+                        FilterableArtifact projectArtifact = projectDependencies\n                                 .get(keyMapper.apply(pluginArtifact));\n                         if (projectArtifact == null) {\n                             return 1;\n-                        } else if (projectArtifact.getId()\n+                        } else if (projectArtifact.artifact.getId()\n                                 .equals(pluginArtifact.getId())) {\n                             return 0;\n                         }\n@@ -323,7 +363,9 @@ private static URLClassLoader createIsolatedClassLoader(\n                     String key = keyMapper.apply(pluginArtifact);\n                     return String.format(\n                             \"%s: project version [%s], plugin version [%s]\",\n-                            key, projectDependencies.get(key).getBaseVersion(),\n+                            key,\n+                            projectDependencies.get(key).artifact\n+                                    .getBaseVersion(),\n                             pluginArtifact.getBaseVersion());\n                 }).forEach(dependenciesIncompatibility::add);\n             }\n@@ -331,14 +373,20 @@ private static URLClassLoader createIsolatedClassLoader(\n             // Add dependencies defined only by the plugin\n             if (potentialDuplicates.containsKey(1)) {\n                 potentialDuplicates.get(1)\n-                        .forEach(artifact -> projectDependencies\n-                                .put(keyMapper.apply(artifact), artifact));\n+                        .forEach(artifact -> projectDependencies.put(\n+                                keyMapper.apply(artifact),\n+                                new FilterableArtifact(artifact, false)));\n             }\n         }\n \n-        projectDependencies.values().stream()\n-                .map(artifact -> FlowFileUtils.convertToUrl(artifact.getFile()))\n-                .forEach(urls::add);\n+        for (FilterableArtifact item : projectDependencies.values()) {\n+            URL url = FlowFileUtils.convertToUrl(item.artifact.getFile());\n+            if (item.scan) {\n+                filteredUrls.add(url);\n+            }\n+            urls.add(url);\n+        }\n+\n         ClassLoader mavenApiClassLoader;\n         if (mojoExecution != null) {\n             ClassRealm pluginClassRealm = mojoExecution.getMojoDescriptor()\n@@ -361,17 +409,39 @@ private static URLClassLoader createIsolatedClassLoader(\n                 }\n             }\n         }\n-        return new CombinedClassLoader(urls.toArray(new URL[0]),\n-                mavenApiClassLoader);\n+        return new ReflectorClassLoader(urls.toArray(new URL[0]),\n+                filteredUrls.toArray(new URL[0]), mavenApiClassLoader);\n+    }\n+\n+    // TODO: include also provided scope\n+    private static boolean isProductionDependency(Artifact artifact) {\n+        return artifact.getFile() != null\n+                && artifact.getArtifactHandler().isAddedToClasspath()\n+                && (Artifact.SCOPE_COMPILE.equals(artifact.getScope())\n+                        || Artifact.SCOPE_RUNTIME.equals(artifact.getScope())\n+                        || Artifact.SCOPE_SYSTEM.equals(artifact.getScope())\n+                        || (Artifact.SCOPE_PROVIDED.equals(artifact.getScope())\n+                                && artifact.getFile().getPath().matches(\n+                                        INCLUDE_FROM_COMPILE_DEPS_REGEX)));\n     }\n \n-    // Tries to load class from the give class loader and fallbacks\n-    // to Platform class loader in case of failure.\n-    private static class CombinedClassLoader extends URLClassLoader {\n+    /**\n+     * A URL class loader implementation with delegation to a provided class\n+     * loader and Platform class loader.\n+     * <p>\n+     * </p>\n+     * If the class or resource cannot be resolved against the given URLs, it\n+     * tries to load them from a provided class loader and lastly fallbacks to\n+     * Platform class loader in case of failure.\n+     */\n+    static final class ReflectorClassLoader extends URLClassLoader {\n         private final ClassLoader delegate;\n+        private final URL[] urlsToScan;\n \n-        private CombinedClassLoader(URL[] urls, ClassLoader delegate) {\n+        private ReflectorClassLoader(URL[] urls, URL[] urlsToScan,\n+                ClassLoader delegate) {\n             super(urls, null);\n+            this.urlsToScan = urlsToScan;\n             this.delegate = delegate;\n         }\n \n@@ -416,6 +486,15 @@ public Enumeration<URL> getResources(String name) throws IOException {\n             }\n             return resources;\n         }\n+\n+        /**\n+         * Returns the search path of URLs for frontend dependency scan.\n+         *\n+         * @return the search path of URLs for frontend dependency scan.\n+         */\n+        public URL[] getUrlsToScan() {\n+            return urlsToScan;\n+        }\n     }\n \n     private void copyFields(FlowModeAbstractMojo sourceMojo, Object targetMojo)\n@@ -455,20 +534,45 @@ private static void copyField(FlowModeAbstractMojo sourceMojo,\n             throw ex;\n         }\n \n+        Class<?> sourceFieldType = sourceField.getType();\n         Class<?> targetFieldType = targetField.getType();\n-        if (!targetFieldType.isAssignableFrom(sourceField.getType())) {\n-            String message = \"Field \" + targetFieldType.getName() + \" in class \"\n-                    + targetClass.getName() + \" of type \"\n-                    + targetFieldType.getName()\n-                    + \" is loaded from different class loaders.\"\n-                    + \" Source class loader: \"\n-                    + sourceField.getType().getClassLoader()\n-                    + \", Target class loader: \"\n-                    + targetFieldType.getClassLoader()\n-                    + \". This is likely a bug in the Vaadin Maven plugin.\"\n-                    + \" Please, report the error on the issue tracker.\";\n-            sourceMojo.logError(message);\n-            throw new NoSuchFieldException(message);\n+        if (!targetFieldType.isAssignableFrom(sourceFieldType)) {\n+            if (sourceField.isAnnotationPresent(Cloneable.class)\n+                    || sourceFieldType.isAnnotationPresent(Cloneable.class)) {\n+                try {\n+                    value = cloneWithTargetClassloader(value, targetFieldType);\n+                } catch (JsonEncodingException | JsonDecodingException e) {\n+                    String message = \"Field \" + targetField.getName()\n+                            + \" in class \" + targetClass.getName() + \" of type \"\n+                            + targetFieldType.getName()\n+                            + \" is loaded from different class loaders. \"\n+                            + \" Source class is annotated with @\"\n+                            + Cloneable.class.getName() + \" but the JSON \"\n+                            + ((e instanceof JsonEncodingException) ? \"encoding\"\n+                                    : \"decoding\")\n+                            + \" operation failed. Source class loader: \"\n+                            + sourceFieldType.getClassLoader()\n+                            + \", Target class loader: \"\n+                            + targetFieldType.getClassLoader()\n+                            + \". This is likely a bug in the Vaadin Maven plugin.\"\n+                            + \" Please, report the error on the issue tracker.\";\n+                    sourceMojo.logError(message);\n+                    throw e;\n+                }\n+            } else {\n+                String message = \"Field \" + targetField.getName() + \" in class \"\n+                        + targetClass.getName() + \" of type \"\n+                        + targetFieldType.getName()\n+                        + \" is loaded from different class loaders.\"\n+                        + \" Source class loader: \"\n+                        + sourceFieldType.getClassLoader()\n+                        + \", Target class loader: \"\n+                        + targetFieldType.getClassLoader()\n+                        + \". This is likely a bug in the Vaadin Maven plugin.\"\n+                        + \" Please, report the error on the issue tracker.\";\n+                sourceMojo.logError(message);\n+                throw new NoSuchFieldException(message);\n+            }\n         }\n         targetField.setAccessible(true);\n         targetField.set(targetMojo, value);\n@@ -486,4 +590,41 @@ private static Field findField(Class<?> clazz, String fieldName)\n         throw new NoSuchFieldException(fieldName);\n     }\n \n-}\n\\ No newline at end of file\n+    /*\n+     * To simplify \"transferring\" Mojo configuration instances from one\n+     * classloader to another, the easiest and safest way is to serialize them\n+     * to JSON and deserialized into the target classloader.\n+     */\n+    private static Object cloneWithTargetClassloader(Object source,\n+            Class<?> targetClass)\n+            throws JsonEncodingException, JsonDecodingException {\n+        ObjectMapper mapper = JacksonUtils.getMapper();\n+        String json;\n+        try {\n+            json = mapper.writeValueAsString(source);\n+        } catch (JsonProcessingException e) {\n+            throw new JsonEncodingException(\"Cannot encode \"\n+                    + targetClass.getName() + \" object to JSON\", e);\n+        }\n+        try {\n+            return mapper.readValue(json, targetClass);\n+        } catch (JsonProcessingException e) {\n+            throw new JsonDecodingException(\"Cannot decode JSON to \"\n+                    + targetClass.getName() + \" object\", e);\n+        }\n+    }\n+\n+    /**\n+     * Marks a type as cloneable by Reflector into a different classloader.\n+     * <p>\n+     * </p>\n+     * Annotated class must be serializable and deserializable into JSON.\n+     */\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Target({ ElementType.TYPE, ElementType.FIELD })\n+    @Documented\n+    public @interface Cloneable {\n+\n+    }\n+\n+}\n\ndiff --git a/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/server/scanner/ReflectionsClassFinder.java b/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/server/scanner/ReflectionsClassFinder.java\nindex 58ea7a28f5f..dd9f2ab1b94 100644\n--- a/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/server/scanner/ReflectionsClassFinder.java\n+++ b/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/server/scanner/ReflectionsClassFinder.java\n@@ -24,13 +24,18 @@\n import java.util.Comparator;\n import java.util.LinkedHashSet;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n \n+import javassist.bytecode.ClassFile;\n import org.reflections.Configuration;\n import org.reflections.Reflections;\n+import org.reflections.scanners.Scanner;\n import org.reflections.util.ClasspathHelper;\n import org.reflections.util.ConfigurationBuilder;\n+import org.reflections.util.NameHelper;\n+import org.reflections.util.QueryBuilder;\n import org.reflections.vfs.Vfs;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -66,6 +71,9 @@ public ReflectionsClassFinder(ClassLoader classLoader, URL... urls) {\n                 .addClassLoaders(classLoader).setExpandSuperTypes(false)\n                 .addUrls(urls);\n \n+        ConfigurationBuilder.DEFAULT_SCANNERS\n+                .forEach(configurationBuilder::addScanners);\n+        configurationBuilder.addScanners(PackageScanner.INSTANCE);\n         configurationBuilder\n                 .setInputsFilter(resourceName -> resourceName.endsWith(\".class\")\n                         && !resourceName.endsWith(\"module-info.class\"));\n@@ -110,6 +118,18 @@ public URL getResource(String name) {\n         return classLoader.getResource(name);\n     }\n \n+    @Override\n+    public boolean shouldInspectClass(String className) {\n+        if (!reflections\n+                .get(PackageScanner.INSTANCE\n+                        .of(PackageScanner.extractPackageName(className)))\n+                .isEmpty()) {\n+            return classLoader.getResource(\n+                    className.replace('.', '/') + \".class\") != null;\n+        }\n+        return false;\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T> Class<T> loadClass(String name) throws ClassNotFoundException {\n@@ -210,4 +230,31 @@ public Iterable<Vfs.File> getFiles() {\n         }\n     };\n \n+    private static class PackageScanner\n+            implements Scanner, QueryBuilder, NameHelper {\n+\n+        private final static PackageScanner INSTANCE = new PackageScanner();\n+\n+        @Override\n+        public List<Map.Entry<String, String>> scan(ClassFile classFile) {\n+            String packageName = extractPackageName(classFile.getName());\n+            if (!packageName.isEmpty()) {\n+                return List.of(entry(packageName, packageName));\n+            }\n+            return List.of();\n+        }\n+\n+        @Override\n+        public String index() {\n+            return \"PackageScanner\";\n+        }\n+\n+        static String extractPackageName(String className) {\n+            int dot = className.lastIndexOf('.');\n+            if (dot != -1) {\n+                return className.substring(0, dot);\n+            }\n+            return \"\";\n+        }\n+    }\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/AbstractDependenciesScanner.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/AbstractDependenciesScanner.java\nindex b7a99eca48f..2edb99a90ff 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/AbstractDependenciesScanner.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/AbstractDependenciesScanner.java\n@@ -53,7 +53,7 @@ protected final ClassFinder getFinder() {\n         return finder;\n     }\n \n-    protected final boolean isExperimental(String className) {\n+    protected final boolean isDisabledExperimentalClass(String className) {\n         return featureFlags != null && featureFlags.getFeatures().stream()\n                 .anyMatch(f -> !f.isEnabled()\n                         && className.equals(f.getComponentClassName()));\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/ClassFinder.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/ClassFinder.java\nindex c548c428e3c..74d07e672f4 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/ClassFinder.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/ClassFinder.java\n@@ -174,6 +174,7 @@ public <T> Set<Class<? extends T>> getSubTypesOf(Class<T> type) {\n         public ClassLoader getClassLoader() {\n             return classFinder.getClassLoader();\n         }\n+\n     }\n \n     /**\n@@ -253,4 +254,23 @@ default <T> Set<Class<? extends T>> getSubTypesOf(final String name)\n         Class<T> parent = loadClass(name);\n         return getSubTypesOf(parent);\n     }\n+\n+    /**\n+     * Determines whether the specified class should be inspected for\n+     * Vaadin-related resources.\n+     * <p>\n+     * </p>\n+     * The default implementation always returns {@code true}, meaning all\n+     * classes are considered inspectable. Implementations may override this\n+     * method to provide custom filtering logic.\n+     *\n+     * @param className\n+     *            the fully qualified name of the class\n+     * @return {@code true} if the class should be inspected, otherwise\n+     *         {@code false}\n+     */\n+    default boolean shouldInspectClass(String className) {\n+        return true;\n+    }\n+\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java\nindex 3f23208fb8f..484308756d7 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java\n@@ -158,7 +158,7 @@ public FrontendDependencies(ClassFinder finder,\n     public FrontendDependencies(ClassFinder finder,\n             boolean generateEmbeddableWebComponents,\n             FeatureFlags featureFlags) {\n-        this(finder, generateEmbeddableWebComponents, null, true);\n+        this(finder, generateEmbeddableWebComponents, featureFlags, true);\n     }\n \n     public FrontendDependencies(ClassFinder finder,\n@@ -916,7 +916,8 @@ protected boolean shouldVisit(String className) {\n         // factories. This is the reason of having just a blacklist of some\n         // common name-spaces that would not have components.\n         // We also exclude Feature-Flag classes\n-        return className != null && !isExperimental(className)\n+        return className != null && getFinder().shouldInspectClass(className)\n+                && !isDisabledExperimentalClass(className)\n                 && !NOT_VISITABLE_CLASS_PATTERN.matcher(className).matches();\n     }\n \n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FullDependenciesScanner.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FullDependenciesScanner.java\nindex e4dab78e40a..187f6b456ad 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FullDependenciesScanner.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FullDependenciesScanner.java\n@@ -313,7 +313,8 @@ private <T extends Annotation> void collectScripts(\n             Set<Class<?>> annotatedClasses = getFinder()\n                     .getAnnotatedClasses(loadedAnnotation);\n \n-            annotatedClasses.stream().filter(c -> !isExperimental(c.getName()))\n+            annotatedClasses.stream()\n+                    .filter(c -> !isDisabledExperimentalClass(c.getName()))\n                     .forEach(clazz -> annotationFinder\n                             .apply(clazz, loadedAnnotation).forEach(ann -> {\n                                 String value = getAnnotationValueAsString(ann,\n",
    "test_patch": "diff --git a/flow-plugins/flow-maven-plugin/src/it/frontend-scanner-tuning-project/src/main/java/com/vaadin/test/ProjectComponent.java b/flow-plugins/flow-maven-plugin/src/it/frontend-scanner-tuning-project/src/main/java/com/vaadin/test/ProjectComponent.java\nnew file mode 100644\nindex 00000000000..4c050eeef9d\n--- /dev/null\n+++ b/flow-plugins/flow-maven-plugin/src/it/frontend-scanner-tuning-project/src/main/java/com/vaadin/test/ProjectComponent.java\n@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.test;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.Tag;\n+import com.vaadin.flow.component.dependency.JsModule;\n+\n+@Tag(\"project-component\")\n+@JsModule(\"./project-component.js\")\n+public class ProjectComponent extends Component {\n+}\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/it/frontend-scanner-tuning-project/src/main/java/com/vaadin/test/ProjectRoot.java b/flow-plugins/flow-maven-plugin/src/it/frontend-scanner-tuning-project/src/main/java/com/vaadin/test/ProjectRoot.java\nnew file mode 100644\nindex 00000000000..3a3b966c587\n--- /dev/null\n+++ b/flow-plugins/flow-maven-plugin/src/it/frontend-scanner-tuning-project/src/main/java/com/vaadin/test/ProjectRoot.java\n@@ -0,0 +1,15 @@\n+package com.vaadin.test;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.HasComponents;\n+import com.vaadin.flow.component.Tag;\n+import com.vaadin.flow.router.Route;\n+\n+@Route(\"project-route\")\n+@Tag(\"div\")\n+public class ProjectRoot extends Component implements HasComponents {\n+\n+    public ProjectRoot() {\n+        add(new ProjectComponent());\n+    }\n+}\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/ArtifactMatcherTest.java b/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/ArtifactMatcherTest.java\nnew file mode 100644\nindex 00000000000..b900ae6f24f\n--- /dev/null\n+++ b/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/ArtifactMatcherTest.java\n@@ -0,0 +1,319 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.plugin.maven;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.DefaultArtifact;\n+import org.apache.maven.artifact.handler.DefaultArtifactHandler;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class ArtifactMatcherTest {\n+\n+    @Test\n+    public void setGroupId_wildcard_throwIfInInvalidPosition() {\n+        FrontendScannerConfig.ArtifactMatcher matcher = new FrontendScannerConfig.ArtifactMatcher();\n+        matcher.setGroupId(null);\n+        matcher.setGroupId(\"\");\n+        matcher.setGroupId(\"*\");\n+        matcher.setGroupId(\"com.vaadin\");\n+        matcher.setGroupId(\"*.vaadin\");\n+        matcher.setGroupId(\"com.vaadin.*\");\n+        matcher.setGroupId(\"*.vaadin.*\");\n+        Assert.assertThrows(IllegalArgumentException.class,\n+                () -> matcher.setGroupId(\"com.*.vaadin\"));\n+        Assert.assertThrows(IllegalArgumentException.class,\n+                () -> matcher.setGroupId(\"c*.vaadi*n\"));\n+        Assert.assertThrows(IllegalArgumentException.class,\n+                () -> matcher.setGroupId(\"*.vaa*din.*\"));\n+        Assert.assertThrows(IllegalArgumentException.class,\n+                () -> matcher.setGroupId(\"*.vaa*din\"));\n+        Assert.assertThrows(IllegalArgumentException.class,\n+                () -> matcher.setGroupId(\"**.vaadin\"));\n+        Assert.assertThrows(IllegalArgumentException.class,\n+                () -> matcher.setGroupId(\"com.vaa*din*\"));\n+        Assert.assertThrows(IllegalArgumentException.class,\n+                () -> matcher.setGroupId(\"com.vaadi**\"));\n+    }\n+\n+    @Test\n+    public void setArtifactId_wildcard_throwIfInInvalidPosition() {\n+        FrontendScannerConfig.ArtifactMatcher matcher = new FrontendScannerConfig.ArtifactMatcher();\n+        matcher.setArtifactId(null);\n+        matcher.setArtifactId(\"\");\n+        matcher.setArtifactId(\"*\");\n+        matcher.setArtifactId(\"vaadin\");\n+        matcher.setArtifactId(\"*vaadin\");\n+        matcher.setArtifactId(\"vaadin*\");\n+        matcher.setArtifactId(\"*vaadin*\");\n+        Assert.assertThrows(IllegalArgumentException.class,\n+                () -> matcher.setGroupId(\"va*din\"));\n+        Assert.assertThrows(IllegalArgumentException.class,\n+                () -> matcher.setGroupId(\"v*di*n\"));\n+        Assert.assertThrows(IllegalArgumentException.class,\n+                () -> matcher.setGroupId(\"v*d*i*n\"));\n+        Assert.assertThrows(IllegalArgumentException.class,\n+                () -> matcher.setGroupId(\"*di*n\"));\n+        Assert.assertThrows(IllegalArgumentException.class,\n+                () -> matcher.setGroupId(\"**din\"));\n+        Assert.assertThrows(IllegalArgumentException.class,\n+                () -> matcher.setGroupId(\"vadi**\"));\n+        Assert.assertThrows(IllegalArgumentException.class,\n+                () -> matcher.setGroupId(\"vadi*n*\"));\n+    }\n+\n+    @Test\n+    public void matches_matchEverything_returnsTrue() {\n+        Artifact artifact = fromString(\n+                \"com.vaadin:vaadin:jar:24.8-SNAPSHOT:compile\");\n+        Assert.assertTrue(\"Unspecified groups and artifacts\",\n+                new FrontendScannerConfig.ArtifactMatcher().matches(artifact));\n+        Assert.assertTrue(\"Empty groups and artifacts\",\n+                new FrontendScannerConfig.ArtifactMatcher(\"\", \"\")\n+                        .matches(artifact));\n+        Assert.assertTrue(\"All groups and artifacts\",\n+                new FrontendScannerConfig.ArtifactMatcher(\"*\", \"*\")\n+                        .matches(artifact));\n+        Assert.assertTrue(\"All groups, unspecified artifacts\",\n+                new FrontendScannerConfig.ArtifactMatcher(\"*\", null)\n+                        .matches(artifact));\n+        Assert.assertTrue(\"Unspecified groups, all artifacts\",\n+                new FrontendScannerConfig.ArtifactMatcher(null, \"*\")\n+                        .matches(artifact));\n+        Assert.assertTrue(\"Blank groups, all artifacts\",\n+                new FrontendScannerConfig.ArtifactMatcher(\"\", \"*\")\n+                        .matches(artifact));\n+        Assert.assertTrue(\"All groups, unspecified artifacts\",\n+                new FrontendScannerConfig.ArtifactMatcher(\"*\", null)\n+                        .matches(artifact));\n+        Assert.assertTrue(\"Unspecified groups, all artifacts\",\n+                new FrontendScannerConfig.ArtifactMatcher(null, \"*\")\n+                        .matches(artifact));\n+        Assert.assertTrue(\"Unspecified groups, blank artifacts\",\n+                new FrontendScannerConfig.ArtifactMatcher(null, \"\")\n+                        .matches(artifact));\n+    }\n+\n+    @Test\n+    public void matches_exactGroup() {\n+        FrontendScannerConfig.ArtifactMatcher matcher = new FrontendScannerConfig.ArtifactMatcher(\n+                \"com.vaadin\", null);\n+        Assert.assertTrue(matcher.matches(\n+                fromString(\"com.vaadin:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertTrue(matcher.matches(fromString(\n+                \"com.vaadin:flow-server:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertFalse(matcher.matches(fromString(\n+                \"com.vaadin.demo:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertFalse(matcher.matches(fromString(\n+                \"org.com.vaadin.demo:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertFalse(matcher.matches(\n+                fromString(\"com.vaadindemo:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertFalse(matcher.matches(\n+                fromString(\"org.example:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+    }\n+\n+    @Test\n+    public void matches_wildcardGroup() {\n+        FrontendScannerConfig.ArtifactMatcher matcher = new FrontendScannerConfig.ArtifactMatcher(\n+                \"com.vaadin.*\", null);\n+        Assert.assertTrue(matcher.matches(fromString(\n+                \"com.vaadin.example:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertTrue(matcher.matches(fromString(\n+                \"com.vaadin.demo:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertTrue(matcher.matches(fromString(\n+                \"com.vaadin.demo.a:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertFalse(matcher.matches(\n+                fromString(\"com.vaadin:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+\n+        matcher.setGroupId(\"*.vaadin\");\n+        Assert.assertTrue(matcher.matches(\n+                fromString(\"com.vaadin:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertTrue(matcher.matches(fromString(\n+                \"com.example.vaadin:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertTrue(matcher.matches(\n+                fromString(\".vaadin:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertFalse(matcher.matches(\n+                fromString(\"vaadin:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertFalse(matcher.matches(\n+                fromString(\"com.vaadindemo:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertFalse(matcher.matches(fromString(\n+                \"com.vaadin.example:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+\n+        matcher.setGroupId(\"*vaadin*\");\n+        Assert.assertTrue(matcher.matches(fromString(\n+                \"com.vaadin.example:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertTrue(matcher.matches(fromString(\n+                \"com.vaadin.demo:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertTrue(matcher.matches(fromString(\n+                \"com.vaadin.demo.a:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertTrue(matcher.matches(\n+                fromString(\"com.vaadin:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertTrue(matcher.matches(\n+                fromString(\"com.vaadin:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertTrue(matcher.matches(fromString(\n+                \"com.example.vaadin:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertTrue(matcher.matches(\n+                fromString(\".vaadin:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertTrue(matcher.matches(\n+                fromString(\"vaadin:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertTrue(matcher.matches(\n+                fromString(\"com.vaadindemo:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertTrue(matcher.matches(fromString(\n+                \"com.vaadin.example:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertFalse(matcher.matches(\n+                fromString(\"com.example:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+    }\n+\n+    @Test\n+    public void matches_wildcardArtifact() {\n+        FrontendScannerConfig.ArtifactMatcher matcher = new FrontendScannerConfig.ArtifactMatcher(\n+                null, \"vaadin*\");\n+        Assert.assertTrue(matcher.matches(fromString(\n+                \"com.vaadin.example:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertTrue(matcher.matches(fromString(\n+                \"com.vaadin.demo:vaadin-demo:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertTrue(matcher.matches(fromString(\n+                \"com.vaadin.demo.a:vaadindemo:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertFalse(matcher.matches(\n+                fromString(\"com.vaadin:demovaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertFalse(matcher.matches(\n+                fromString(\"com.vaadin:example:jar:24.8-SNAPSHOT:compile\")));\n+\n+        matcher.setArtifactId(\"*vaadin\");\n+        Assert.assertTrue(matcher.matches(fromString(\n+                \"com.vaadin.example:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertTrue(matcher.matches(fromString(\n+                \"com.vaadin.demo:demo-vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertTrue(matcher.matches(fromString(\n+                \"com.vaadin.demo.a:demovaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertFalse(matcher.matches(\n+                fromString(\"com.vaadin:vaadindemo:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertFalse(matcher.matches(fromString(\n+                \"com.vaadin:vaadin-demo:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertFalse(matcher.matches(\n+                fromString(\"com.vaadin:example:jar:24.8-SNAPSHOT:compile\")));\n+\n+        matcher.setArtifactId(\"*vaadin*\");\n+        Assert.assertTrue(matcher.matches(fromString(\n+                \"com.vaadin.example:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertTrue(matcher.matches(fromString(\n+                \"com.vaadin.demo:vaadin-demo:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertTrue(matcher.matches(fromString(\n+                \"com.vaadin.demo.a:vaadindemo:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertTrue(matcher.matches(fromString(\n+                \"com.vaadin.demo:demo-vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertTrue(matcher.matches(fromString(\n+                \"com.vaadin.demo.a:demovaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertFalse(matcher.matches(\n+                fromString(\"com.vaadin:example:jar:24.8-SNAPSHOT:compile\")));\n+    }\n+\n+    @Test\n+    public void matches_exactArtifact() {\n+        FrontendScannerConfig.ArtifactMatcher matcher = new FrontendScannerConfig.ArtifactMatcher(\n+                null, \"vaadin\");\n+        Assert.assertTrue(matcher.matches(\n+                fromString(\"com.vaadin:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertTrue(matcher.matches(\n+                fromString(\"org.example:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertFalse(matcher.matches(\n+                fromString(\"com.vaadin:vaadindemo:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertFalse(matcher.matches(\n+                fromString(\"com.vaadin:demovaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertFalse(matcher.matches(fromString(\n+                \"com.vaadin:demovaadindemo:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertFalse(matcher.matches(\n+                fromString(\"com.vaadin:example:jar:24.8-SNAPSHOT:compile\")));\n+\n+    }\n+\n+    @Test\n+    public void matches_exactGroupAndArtifact() {\n+        FrontendScannerConfig.ArtifactMatcher matcher = new FrontendScannerConfig.ArtifactMatcher(\n+                \"com.vaadin\", \"vaadin\");\n+        Assert.assertTrue(matcher.matches(\n+                fromString(\"com.vaadin:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertFalse(matcher.matches(fromString(\n+                \"com.vaadin:flow-server:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertFalse(matcher.matches(fromString(\n+                \"com.vaadin.demo:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertFalse(matcher.matches(fromString(\n+                \"org.com.vaadin.demo:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertFalse(matcher.matches(\n+                fromString(\"com.vaadindemo:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertFalse(matcher.matches(\n+                fromString(\"org.example:vaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertFalse(matcher.matches(\n+                fromString(\"com.vaadin:vaadindemo:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertFalse(matcher.matches(\n+                fromString(\"com.vaadin:demovaadin:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertFalse(matcher.matches(fromString(\n+                \"com.vaadin:demovaadindemo:jar:24.8-SNAPSHOT:compile\")));\n+        Assert.assertFalse(matcher.matches(\n+                fromString(\"com.vaadin:example:jar:24.8-SNAPSHOT:compile\")));\n+    }\n+\n+    @Test\n+    public void matches_nullArtifact_returnsFalse() {\n+        FrontendScannerConfig.ArtifactMatcher matcher = new FrontendScannerConfig.ArtifactMatcher();\n+        Assert.assertFalse(matcher.matches(null));\n+        matcher.setGroupId(\"com.vaadin\");\n+        Assert.assertFalse(matcher.matches(null));\n+        matcher.setArtifactId(\"vaadin\");\n+        Assert.assertFalse(matcher.matches(null));\n+    }\n+\n+    /**\n+     * Creates an Artifact instance based on the give coordinates.\n+     * <p>\n+     * </p>\n+     *\n+     * Allowed syntaxes:\n+     *\n+     * <pre>\n+     * {@code\n+     * <groupId>:<artifactId>:<type>:<version>:<scope>[(optional)]\n+     * <groupId>:<artifactId>:<type>:<classifier>:<version>:<scope>[ (optional)]\n+     * }\n+     * </pre>\n+     *\n+     * @param coordinates\n+     *            artifact coordinates.\n+     * @return an Artifact instance based on the give coordinates.\n+     */\n+    static Artifact fromString(String coordinates) {\n+        String[] tokens = coordinates.split(\":\");\n+        boolean hasClassifier = tokens.length > 5;\n+        String groupId = tokens[0];\n+        String artifactId = tokens[1];\n+        String type = tokens[2];\n+        String classifier = hasClassifier ? tokens[5] : null;\n+        String version = hasClassifier ? tokens[4] : tokens[3];\n+        String scope = hasClassifier ? tokens[5] : tokens[4];\n+        boolean optional = scope.contains(\" (optional)\");\n+        if (optional) {\n+            scope = scope.replace(\" (optional)\", \"\");\n+        }\n+        DefaultArtifactHandler handler = new DefaultArtifactHandler(type);\n+        handler.setAddedToClasspath(true);\n+        DefaultArtifact artifact = new DefaultArtifact(groupId, artifactId,\n+                version, scope, type, classifier, handler);\n+        artifact.setOptional(optional);\n+        return artifact;\n+    }\n+\n+}\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/FrontendScannerConfigTest.java b/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/FrontendScannerConfigTest.java\nnew file mode 100644\nindex 00000000000..0711c3f6ec8\n--- /dev/null\n+++ b/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/FrontendScannerConfigTest.java\n@@ -0,0 +1,203 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.plugin.maven;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class FrontendScannerConfigTest {\n+\n+    @Test\n+    public void shouldScan_noRules_allArtifactsAccepted() {\n+        FrontendScannerConfig config = new FrontendScannerConfig();\n+        Assert.assertTrue(artifacts().allMatch(config::shouldScan));\n+    }\n+\n+    @Test\n+    public void shouldScan_includes_ruleApplied() {\n+        FrontendScannerConfig config = new FrontendScannerConfig();\n+        config.addInclude(\n+                new FrontendScannerConfig.ArtifactMatcher(\"com.vaadin\", null));\n+        Assert.assertTrue(artifacts().filter(config::shouldScan)\n+                .allMatch(a -> a.getGroupId().equals(\"com.vaadin\")));\n+\n+        config.addInclude(new FrontendScannerConfig.ArtifactMatcher(\n+                \"com.fasterxml.jackson*\", null));\n+        Assert.assertTrue(artifacts().filter(config::shouldScan)\n+                .allMatch(a -> a.getGroupId().equals(\"com.vaadin\")\n+                        || a.getGroupId().startsWith(\"com.fasterxml.jackson\")));\n+\n+        config.addInclude(\n+                new FrontendScannerConfig.ArtifactMatcher(null, \"flow-server\"));\n+        Assert.assertTrue(artifacts().filter(config::shouldScan)\n+                .allMatch(a -> a.getGroupId().equals(\"com.vaadin\")\n+                        || a.getGroupId().startsWith(\"com.fasterxml.jackson\")\n+                        || a.getArtifactId().equals(\"flow-server\")));\n+\n+        config.addInclude(\n+                new FrontendScannerConfig.ArtifactMatcher(\"vaadin-*\", null));\n+        Assert.assertTrue(artifacts().filter(config::shouldScan)\n+                .allMatch(a -> a.getGroupId().equals(\"com.vaadin\")\n+                        || a.getGroupId().startsWith(\"com.fasterxml.jackson\")\n+                        || a.getArtifactId().equals(\"flow-server\")\n+                        || a.getArtifactId().startsWith(\"vaadin-\")));\n+    }\n+\n+    @Test\n+    public void shouldScan_excludes_ruleApplied() {\n+        FrontendScannerConfig config = new FrontendScannerConfig();\n+        config.addExclude(\n+                new FrontendScannerConfig.ArtifactMatcher(\"com.vaadin\", null));\n+        Assert.assertTrue(artifacts().filter(config::shouldScan)\n+                .noneMatch(a -> a.getGroupId().equals(\"com.vaadin\")));\n+\n+        config.addExclude(new FrontendScannerConfig.ArtifactMatcher(\n+                \"com.fasterxml.jackson*\", null));\n+        Assert.assertTrue(artifacts().filter(config::shouldScan)\n+                .noneMatch(a -> a.getGroupId().equals(\"com.vaadin\")\n+                        || a.getGroupId().startsWith(\"com.fasterxml.jackson\")));\n+\n+        config.addExclude(\n+                new FrontendScannerConfig.ArtifactMatcher(null, \"flow-server\"));\n+        Assert.assertTrue(artifacts().filter(config::shouldScan)\n+                .noneMatch(a -> a.getGroupId().equals(\"com.vaadin\")\n+                        || a.getGroupId().startsWith(\"com.fasterxml.jackson\")\n+                        || a.getArtifactId().equals(\"flow-server\")));\n+\n+        config.addExclude(\n+                new FrontendScannerConfig.ArtifactMatcher(\"vaadin-*\", null));\n+        Assert.assertTrue(artifacts().filter(config::shouldScan)\n+                .noneMatch(a -> a.getGroupId().equals(\"com.vaadin\")\n+                        || a.getGroupId().startsWith(\"com.fasterxml.jackson\")\n+                        || a.getArtifactId().equals(\"flow-server\")\n+                        || a.getArtifactId().startsWith(\"vaadin-\")));\n+    }\n+\n+    @Test\n+    public void shouldScan_excludeAndIncludeRules_exclusionsHaveHigherPriority() {\n+        FrontendScannerConfig config = new FrontendScannerConfig();\n+        config.addExclude(new FrontendScannerConfig.ArtifactMatcher(\"*\", \"*\"));\n+        config.addInclude(new FrontendScannerConfig.ArtifactMatcher(\"*\", \"*\"));\n+        Assert.assertTrue(artifacts().noneMatch(config::shouldScan));\n+\n+        config = new FrontendScannerConfig();\n+        config.addExclude(new FrontendScannerConfig.ArtifactMatcher(\n+                \"com.vaadin\", \"vaadin-*\"));\n+        config.addInclude(\n+                new FrontendScannerConfig.ArtifactMatcher(\"com.vaadin\", \"*\"));\n+\n+        List<Artifact> artifacts = artifacts().filter(config::shouldScan)\n+                .toList();\n+        Assert.assertFalse(artifacts.isEmpty());\n+        Assert.assertTrue(artifacts.stream()\n+                .allMatch(a -> a.getGroupId().equals(\"com.vaadin\")\n+                        && !a.getArtifactId().startsWith(\"vaadin-\")));\n+\n+    }\n+\n+    @Test\n+    public void shouldScan_disabled_alwaysTrue() {\n+        FrontendScannerConfig config = new FrontendScannerConfig();\n+        config.addExclude(new FrontendScannerConfig.ArtifactMatcher(\"*\", \"*\"));\n+        config.addInclude(new FrontendScannerConfig.ArtifactMatcher(\"*\", \"*\"));\n+        config.setEnabled(false);\n+        Assert.assertTrue(artifacts().allMatch(config::shouldScan));\n+    }\n+\n+    private Stream<Artifact> artifacts() {\n+        return Arrays.stream(TEST_DEPENDENCIES_LIST.split(\"\\n\"))\n+                .map(ArtifactMatcherTest::fromString);\n+    }\n+\n+    //\n+    // List of dependency dumped from a Maven project with\n+    // mvn -B -q dependency:list -DoutputFile=deps.txt\n+    // and then processed with\n+    // grep -E \"^\\\\s+\\\\w+\" deps.txt | sed -E 's/\\s+(\\w.*) -- .*/\\1/g'\n+    // Possible formats are:\n+    // <groupId>:<artifactId>:<type>:<version>:<scope> (optional)\n+    // <groupId>:<artifactId>:<type>:<classifier>:<version>:<scope> (optional)\n+    //\n+    private static final String TEST_DEPENDENCIES_LIST = \"\"\"\n+            com.vaadin:vaadin:jar:24.8-SNAPSHOT:compile\n+            com.vaadin:vaadin-internal:jar:24.8-SNAPSHOT:compile\n+            com.vaadin:vaadin-core-internal:jar:24.8-SNAPSHOT:compile\n+            com.vaadin:vaadin-accordion-flow:jar:24.8-SNAPSHOT:compile\n+            com.vaadin:vaadin-avatar-flow:jar:24.8-SNAPSHOT:compile\n+            com.vaadin:vaadin-checkbox-flow:jar:24.8-SNAPSHOT:compile\n+            com.vaadin:flow-server:jar:24.8-SNAPSHOT:compile\n+            com.vaadin:flow-push:jar:24.8-SNAPSHOT:compile\n+            com.vaadin.external.atmosphere:atmosphere-runtime:jar:3.0.5.slf4jvaadin1:compile\n+            com.vaadin.servletdetector:throw-if-servlet3:jar:1.0.2:compile\n+            org.jspecify:jspecify:jar:1.0.0:compile\n+            org.slf4j:slf4j-api:jar:2.0.17:compile\n+            com.vaadin.external.gwt:gwt-elemental:jar:2.8.2.vaadin2:compile\n+            org.apache.commons:commons-fileupload2-jakarta:jar:2.0.0-M1:compile\n+            org.apache.commons:commons-fileupload2-core:jar:2.0.0-M1:compile\n+            commons-io:commons-io:jar:2.18.0:compile\n+            com.fasterxml.jackson.core:jackson-core:jar:2.18.3:compile\n+            com.fasterxml.jackson.core:jackson-databind:jar:2.18.3:compile\n+            com.fasterxml.jackson.core:jackson-annotations:jar:2.18.3:compile\n+            com.fasterxml.jackson.datatype:jackson-datatype-jsr310:jar:2.18.3:compile\n+            org.jsoup:jsoup:jar:1.19.1:compile\n+            com.helger:ph-css:jar:7.0.4:compile\n+            com.helger.commons:ph-commons:jar:11.2.0:compile\n+            com.google.code.findbugs:jsr305:jar:3.0.2:compile\n+            org.ow2.asm:asm:jar:9.7.1:compile\n+            com.vaadin.external:gentyref:jar:1.2.0.vaadin1:compile\n+            org.apache.commons:commons-compress:jar:1.27.1:compile\n+            commons-codec:commons-codec:jar:1.17.1:compile\n+            org.apache.commons:commons-lang3:jar:3.16.0:compile\n+            com.vaadin:flow-client:jar:24.8-SNAPSHOT:compile\n+            org.yaml:snakeyaml:jar:2.2:compile\n+            org.yaml:snakeyaml:jar:android:1.23:compile\n+            org.springframework.boot:spring-boot-autoconfigure:jar:3.4.3:compile\n+            org.springframework.boot:spring-boot-devtools:jar:3.4.3:compile (optional)\n+            org.springframework.boot:spring-boot:jar:3.4.3:compile\n+            org.springframework.boot:spring-boot-starter:jar:3.4.3:compile\n+            org.springframework.boot:spring-boot-starter-json:jar:3.4.3:compile\n+            org.springframework.boot:spring-boot-starter-logging:jar:3.4.3:compile\n+            org.springframework.boot:spring-boot-starter-tomcat:jar:3.4.3:compile\n+            org.springframework.boot:spring-boot-starter-validation:jar:3.4.3:compile\n+            org.springframework.boot:spring-boot-starter-web:jar:3.4.3:compile\n+            org.springframework.boot:spring-boot-test-autoconfigure:jar:3.4.3:test\n+            org.springframework.boot:spring-boot-test:jar:3.4.3:test\n+            org.springframework.data:spring-data-commons:jar:3.4.3:compile\n+            org.springframework.security:spring-security-core:jar:6.4.3:compile\n+            org.springframework.security:spring-security-crypto:jar:6.4.3:compile\n+            org.springframework:spring-aop:jar:6.2.3:compile\n+            org.springframework:spring-beans:jar:6.2.3:compile\n+            org.springframework:spring-context:jar:6.2.3:compile\n+            org.springframework:spring-core:jar:6.2.3:compile\n+            org.springframework:spring-expression:jar:6.2.3:compile\n+            org.springframework:spring-jcl:jar:6.2.3:compile\n+            org.springframework:spring-test:jar:6.2.3:test\n+            org.springframework:spring-web:jar:6.2.3:compile\n+            org.springframework:spring-webmvc:jar:6.2.3:compile\n+            org.springframework:spring-websocket:jar:6.2.3:compile\n+            com.jayway.jsonpath:json-path:jar:2.9.0:test\n+            org.slf4j:slf4j-api:jar:2.0.16:compile\n+            jakarta.xml.bind:jakarta.xml.bind-api:jar:4.0.2:compile\n+            jakarta.activation:jakarta.activation-api:jar:2.1.3:compile\n+            net.minidev:json-smart:jar:2.5.2:test\n+            \"\"\";\n+}\n\\ No newline at end of file\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/ReflectorTest.java b/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/ReflectorTest.java\nindex 88707f3f3ba..8362518e1c4 100644\n--- a/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/ReflectorTest.java\n+++ b/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/ReflectorTest.java\n@@ -22,8 +22,10 @@\n import java.net.URL;\n import java.net.URLClassLoader;\n import java.nio.file.Path;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.Set;\n+import java.util.stream.Collectors;\n \n import org.apache.maven.artifact.Artifact;\n import org.apache.maven.artifact.DefaultArtifact;\n@@ -49,6 +51,9 @@\n \n public class ReflectorTest {\n \n+    private static final String FLAT_MAVEN_REPO_PATH = \"/some/flat/maven-repo/\";\n+    public static final String PROJECT_TARGET_FOLDER = \"/my/project/target\";\n+\n     Reflector reflector;\n \n     @Before\n@@ -130,10 +135,28 @@ public void createMojo_incompatibleFields_fails() {\n                         .contains(\"loaded from different class loaders\"));\n     }\n \n+    @Test\n+    public void createMojo_cloneableFields_createInstanceAndCopyFields()\n+            throws Exception {\n+        CloneableFieldsMojo source = new CloneableFieldsMojo();\n+        source.fillFields();\n+        Mojo target = reflector.createMojo(source);\n+        MatcherAssert.assertThat(\"cloneable field\", target, Matchers\n+                .hasProperty(\"cloneableField\", Matchers.notNullValue()));\n+        MatcherAssert.assertThat(\"cloneable field value\", target,\n+                Matchers.hasProperty(\"cloneableField\",\n+                        Matchers.hasToString(\"TEST-CLONEABLE-FIELD\")));\n+        MatcherAssert.assertThat(\"cloneable type\", target,\n+                Matchers.hasProperty(\"cloneableType\", Matchers.notNullValue()));\n+        MatcherAssert.assertThat(\"cloneable type value\", target,\n+                Matchers.hasProperty(\"cloneableType\",\n+                        Matchers.hasToString(\"TEST-CLONEABLE-TYPE\")));\n+    }\n+\n     @Test\n     public void reflector_fromProject_getsIsolatedClassLoader()\n             throws Exception {\n-        String outputDirectory = \"/my/project/target\";\n+        String outputDirectory = PROJECT_TARGET_FOLDER;\n \n         MavenProject project = new MavenProject();\n         project.setGroupId(\"com.vaadin.test\");\n@@ -167,24 +190,23 @@ public void reflector_fromProject_getsIsolatedClassLoader()\n                         .of(\"src\", \"test\", \"resources\",\n                                 \"jar-without-frontend-resources.jar\")\n                         .toUri().toURL());\n-        // .addURL(new URL(\"file:///some/flat/maven-repo/maven-api.jar\"));\n         pluginDescriptor.setClassRealm(classWorld.newRealm(\"maven-plugin\"));\n \n-        Reflector execReflector = Reflector.of(project, mojoExecution);\n+        Reflector execReflector = Reflector.of(project, mojoExecution, null);\n \n         URLClassLoader isolatedClassLoader = execReflector\n                 .getIsolatedClassLoader();\n \n-        Set<URL> urlSet = Set.of(isolatedClassLoader.getURLs());\n+        Set<String> urlSet = Arrays.stream(isolatedClassLoader.getURLs())\n+                .map(URL::toExternalForm).collect(Collectors.toSet());\n         Assert.assertEquals(4, urlSet.size());\n-        Assert.assertTrue(\n-                urlSet.contains(convertToUrl(new File(outputDirectory))));\n-        Assert.assertTrue(urlSet.contains(convertToUrl(new File(\n-                \"/some/flat/maven-repo/com.vaadin.test-compile-1.0.jar\"))));\n-        Assert.assertTrue(urlSet.contains(convertToUrl(new File(\n-                \"/some/flat/maven-repo/com.vaadin.test-system-1.0.jar\"))));\n-        Assert.assertTrue(urlSet.contains(convertToUrl(new File(\n-                \"/some/flat/maven-repo/com.vaadin.test-plugin-1.0.jar\"))));\n+        Assert.assertTrue(urlSet.contains(toURLExternalForm(outputDirectory)));\n+        Assert.assertTrue(urlSet.contains(\n+                toURLExternalForm(\"com.vaadin.test-compile-1.0.jar\")));\n+        Assert.assertTrue(urlSet\n+                .contains(toURLExternalForm(\"com.vaadin.test-system-1.0.jar\")));\n+        Assert.assertTrue(urlSet\n+                .contains(toURLExternalForm(\"com.vaadin.test-plugin-1.0.jar\")));\n \n         // from platform class loader\n         Assert.assertNotNull(\n@@ -196,6 +218,202 @@ public void reflector_fromProject_getsIsolatedClassLoader()\n                 isolatedClassLoader.loadClass(\"org.json.CookieList\"));\n     }\n \n+    @Test\n+    public void reflector_frontendScannerConfigExclusions_getsFilteredIsolatedClassLoader()\n+            throws Exception {\n+        FrontendScannerConfig scanner = new FrontendScannerConfig();\n+        scanner.addExclude(\n+                new FrontendScannerConfig.ArtifactMatcher(\"org.spring*\", null));\n+        scanner.addExclude(new FrontendScannerConfig.ArtifactMatcher(\n+                \"com.example.addon\", null));\n+\n+        Set<String> expectedArtifacts = Set.of(PROJECT_TARGET_FOLDER,\n+                \"com.vaadin-vaadin-core-1.0.jar\",\n+                \"com.vaadin-flow-server-1.0.jar\", \"org.test-alpha-1.0.jar\",\n+                \"org.test-beta-1.0.jar\");\n+        assertThatIsolatedClassLoaderHasFilteredScanUrls(scanner,\n+                expectedArtifacts);\n+    }\n+\n+    @Test\n+    public void reflector_frontendScannerConfigInclusions_getsFilteredIsolatedClassLoader()\n+            throws Exception {\n+        FrontendScannerConfig scanner = new FrontendScannerConfig();\n+        scanner.addInclude(\n+                new FrontendScannerConfig.ArtifactMatcher(\"org.test\", null));\n+\n+        Set<String> expectedArtifacts = Set.of(PROJECT_TARGET_FOLDER,\n+                \"com.vaadin-vaadin-core-1.0.jar\",\n+                \"com.vaadin-flow-server-1.0.jar\", \"org.test-alpha-1.0.jar\",\n+                \"org.test-beta-1.0.jar\");\n+        assertThatIsolatedClassLoaderHasFilteredScanUrls(scanner,\n+                expectedArtifacts);\n+    }\n+\n+    @Test\n+    public void reflector_frontendScannerConfigExclusionHigherPriority_getsFilteredIsolatedClassLoader()\n+            throws Exception {\n+        FrontendScannerConfig scanner = new FrontendScannerConfig();\n+        scanner.addExclude(\n+                new FrontendScannerConfig.ArtifactMatcher(\"org.test\", \"*\"));\n+        scanner.addInclude(\n+                new FrontendScannerConfig.ArtifactMatcher(\"org.test\", \"alpha\"));\n+\n+        Set<String> expectedArtifacts = Set.of(PROJECT_TARGET_FOLDER,\n+                \"com.vaadin-vaadin-core-1.0.jar\",\n+                \"com.vaadin-flow-server-1.0.jar\");\n+        assertThatIsolatedClassLoaderHasFilteredScanUrls(scanner,\n+                expectedArtifacts);\n+\n+        scanner = new FrontendScannerConfig();\n+        scanner.addExclude(\n+                new FrontendScannerConfig.ArtifactMatcher(\"org.test\", \"alpha\"));\n+        scanner.addInclude(\n+                new FrontendScannerConfig.ArtifactMatcher(\"org.test\", \"*\"));\n+\n+        expectedArtifacts = Set.of(PROJECT_TARGET_FOLDER,\n+                \"com.vaadin-vaadin-core-1.0.jar\",\n+                \"com.vaadin-flow-server-1.0.jar\", \"org.test-beta-1.0.jar\");\n+        assertThatIsolatedClassLoaderHasFilteredScanUrls(scanner,\n+                expectedArtifacts);\n+    }\n+\n+    @Test\n+    public void reflector_frontendScannerConfig_vaadinArtifactAlwaysIncluded()\n+            throws Exception {\n+        FrontendScannerConfig scanner = new FrontendScannerConfig();\n+        scanner.addExclude(new FrontendScannerConfig.ArtifactMatcher(\"*\", \"*\"));\n+\n+        Set<String> expectedArtifacts = Set.of(PROJECT_TARGET_FOLDER,\n+                \"com.vaadin-vaadin-core-1.0.jar\",\n+                \"com.vaadin-flow-server-1.0.jar\");\n+        assertThatIsolatedClassLoaderHasFilteredScanUrls(scanner,\n+                expectedArtifacts);\n+    }\n+\n+    @Test\n+    public void reflector_disabledFrontendScannerConfig_getsFullIsolatedClassLoader()\n+            throws Exception {\n+        FrontendScannerConfig scanner = new FrontendScannerConfig();\n+        scanner.addExclude(\n+                new FrontendScannerConfig.ArtifactMatcher(\"org.spring*\", null));\n+        scanner.addExclude(new FrontendScannerConfig.ArtifactMatcher(\n+                \"com.example.addon\", null));\n+        scanner.setEnabled(false);\n+\n+        Set<String> expectedArtifacts = Set.of(PROJECT_TARGET_FOLDER,\n+                \"com.vaadin-vaadin-core-1.0.jar\",\n+                \"com.vaadin-flow-server-1.0.jar\",\n+                \"org.springframework.boot-spring-boot-1.0.jar\",\n+                \"com.example.addon-alpha-1.0.jar\",\n+                \"com.example.addon-beta-1.0.jar\", \"org.test-alpha-1.0.jar\",\n+                \"org.test-beta-1.0.jar\");\n+        assertThatIsolatedClassLoaderHasFilteredScanUrls(scanner,\n+                expectedArtifacts);\n+    }\n+\n+    @Test\n+    public void reflector_excludeTargetFolder_targetFolderExcluded()\n+            throws Exception {\n+        FrontendScannerConfig scanner = new FrontendScannerConfig();\n+        scanner.setIncludeOutputDirectory(false);\n+\n+        Set<String> expectedArtifacts = Set.of(\"com.vaadin-vaadin-core-1.0.jar\",\n+                \"com.vaadin-flow-server-1.0.jar\",\n+                \"org.springframework.boot-spring-boot-1.0.jar\",\n+                \"com.example.addon-alpha-1.0.jar\",\n+                \"com.example.addon-beta-1.0.jar\", \"org.test-alpha-1.0.jar\",\n+                \"org.test-beta-1.0.jar\");\n+        assertThatIsolatedClassLoaderHasFilteredScanUrls(scanner,\n+                expectedArtifacts);\n+    }\n+\n+    private void assertThatIsolatedClassLoaderHasFilteredScanUrls(\n+            FrontendScannerConfig scannerConfig, Set<String> expectedScanURLs)\n+            throws Exception {\n+        String outputDirectory = PROJECT_TARGET_FOLDER;\n+\n+        MavenProject project = new MavenProject();\n+        project.setGroupId(\"com.vaadin.test\");\n+        project.setArtifactId(\"reflector-tests\");\n+        project.setBuild(new Build());\n+        project.getBuild().setOutputDirectory(outputDirectory);\n+        project.setArtifacts(Set.of(\n+                createArtifact(\"com.vaadin\", \"vaadin-core\", \"1.0\", \"compile\",\n+                        true),\n+                createArtifact(\"com.vaadin\", \"flow-server\", \"1.0\", \"compile\",\n+                        true),\n+                createArtifact(\"org.springframework.boot\", \"spring-boot\", \"1.0\",\n+                        \"compile\", true),\n+                createArtifact(\"com.example.addon\", \"alpha\", \"1.0\", \"compile\",\n+                        true),\n+                createArtifact(\"com.example.addon\", \"beta\", \"1.0\", \"compile\",\n+                        true),\n+                createArtifact(\"org.test\", \"alpha\", \"1.0\", \"compile\", true),\n+                createArtifact(\"org.test\", \"beta\", \"1.0\", \"compile\", true)\n+\n+        ));\n+\n+        MojoExecution mojoExecution = new MojoExecution(new MojoDescriptor());\n+        PluginDescriptor pluginDescriptor = new PluginDescriptor();\n+        mojoExecution.getMojoDescriptor().setPluginDescriptor(pluginDescriptor);\n+        pluginDescriptor.setGroupId(\"com.vaadin.test\");\n+        pluginDescriptor.setArtifactId(\"test-plugin\");\n+        pluginDescriptor\n+                .setArtifacts(List.of(createArtifact(\"com.example.plugin\",\n+                        \"plugin-dep\", \"1.0\", \"compile\", true)));\n+        ClassWorld classWorld = new ClassWorld(\"maven.api\", null);\n+        classWorld.getRealm(\"maven.api\")\n+                .addURL(Path\n+                        .of(\"src\", \"test\", \"resources\",\n+                                \"jar-without-frontend-resources.jar\")\n+                        .toUri().toURL());\n+        pluginDescriptor.setClassRealm(classWorld.newRealm(\"maven-plugin\"));\n+\n+        Reflector execReflector = Reflector.of(project, mojoExecution,\n+                scannerConfig);\n+\n+        Reflector.ReflectorClassLoader isolatedClassLoader = (Reflector.ReflectorClassLoader) execReflector\n+                .getIsolatedClassLoader();\n+\n+        // Ensure the classloader references all dependencies\n+        Set<String> urlSet = Arrays.stream(isolatedClassLoader.getURLs())\n+                .map(URL::toExternalForm).collect(Collectors.toSet());\n+        Assert.assertEquals(9, urlSet.size());\n+        Assert.assertTrue(urlSet.contains(toURLExternalForm(outputDirectory)));\n+        Assert.assertTrue(urlSet\n+                .contains(toURLExternalForm(\"com.vaadin-vaadin-core-1.0.jar\")));\n+        Assert.assertTrue(urlSet.contains(toURLExternalForm(\n+                \"org.springframework.boot-spring-boot-1.0.jar\")));\n+        Assert.assertTrue(urlSet.contains(\n+                toURLExternalForm(\"com.example.addon-alpha-1.0.jar\")));\n+        Assert.assertTrue(urlSet\n+                .contains(toURLExternalForm(\"com.example.addon-beta-1.0.jar\")));\n+        Assert.assertTrue(\n+                urlSet.contains(toURLExternalForm(\"org.test-alpha-1.0.jar\")));\n+        Assert.assertTrue(\n+                urlSet.contains(toURLExternalForm(\"org.test-beta-1.0.jar\")));\n+        Assert.assertTrue(urlSet.contains(\n+                toURLExternalForm(\"com.example.plugin-plugin-dep-1.0.jar\")));\n+\n+        // Verify scan URLs\n+        urlSet = Arrays.stream(isolatedClassLoader.getUrlsToScan())\n+                .map(URL::toExternalForm).collect(Collectors.toSet());\n+        Assert.assertEquals(expectedScanURLs.size(), urlSet.size());\n+        for (String expectedUrl : expectedScanURLs) {\n+            Assert.assertTrue(\"Scan URL missing in Reflector: \" + expectedUrl,\n+                    urlSet.contains(toURLExternalForm(expectedUrl)));\n+        }\n+\n+    }\n+\n+    private static String toURLExternalForm(String path) {\n+        if (!path.startsWith(\"/\")) {\n+            path = FLAT_MAVEN_REPO_PATH + path;\n+        }\n+        return convertToUrl(new File(path)).toExternalForm();\n+    }\n+\n     private Artifact createArtifact(String groupId, String artifactId,\n             String version, String scope, boolean addedToClasspath) {\n         DefaultArtifactHandler artifactHandler = new DefaultArtifactHandler();\n@@ -203,7 +421,7 @@ private Artifact createArtifact(String groupId, String artifactId,\n         DefaultArtifact artifact = new DefaultArtifact(groupId, artifactId,\n                 version, scope, \"jar\", null, artifactHandler);\n         artifact.setFile(\n-                new File(String.format(\"/some/flat/maven-repo/%s-%s-%s.jar\",\n+                new File(String.format(FLAT_MAVEN_REPO_PATH + \"%s-%s-%s.jar\",\n                         groupId, artifactId, version)));\n         return artifact;\n     }\n@@ -292,4 +510,48 @@ public FakeMavenComponent getBuildContext() {\n         }\n     }\n \n+    public static class CloneableFieldsMojo extends MyMojo {\n+\n+        @Parameter\n+        @Reflector.Cloneable\n+        private CloneableObject cloneableField;\n+\n+        @Parameter\n+        private CloneableTypeObject cloneableType;\n+\n+        @Override\n+        void fillFields() {\n+            cloneableField = new CloneableTypeObject();\n+            cloneableField.value = \"TEST-CLONEABLE-FIELD\";\n+            cloneableType = new CloneableTypeObject();\n+            cloneableType.value = \"TEST-CLONEABLE-TYPE\";\n+            super.fillFields();\n+        }\n+\n+        public CloneableObject getCloneableField() {\n+            return cloneableField;\n+        }\n+\n+        public CloneableTypeObject getCloneableType() {\n+            return cloneableType;\n+        }\n+    }\n+\n+    private static class CloneableObject {\n+        String value;\n+\n+        @Override\n+        public String toString() {\n+            return value;\n+        }\n+\n+        public String getValue() {\n+            return value;\n+        }\n+    }\n+\n+    @Reflector.Cloneable\n+    private static class CloneableTypeObject extends CloneableObject {\n+    }\n+\n }\n\\ No newline at end of file\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/it/IntegrationTestHelper.java b/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/it/IntegrationTestHelper.java\nnew file mode 100644\nindex 00000000000..8da136cb220\n--- /dev/null\n+++ b/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/it/IntegrationTestHelper.java\n@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.plugin.maven.it;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Support class to be uses in verification scripts executed by maven invoker\n+ * plugin when running integration tests.\n+ */\n+public class IntegrationTestHelper {\n+\n+    private static final String IMPORT_TEMPLATE = \"import '%s';\";\n+\n+    /**\n+     * Checks that javascript modules has been found during production build and\n+     * correctly imported into the generated bundle.\n+     * <p>\n+     * </p>\n+     * Helper for {@literal src/it/frontend-scanner-tuning-project} test. It\n+     * expects that the test projects copies frontend generated import file and\n+     * chunks into {@code importsDir} folder, and checks if the import statement\n+     * for javascript modules in {@code expectations} are present. The\n+     * expectations are grouped by the profile used to execute the build. The js\n+     * module should be a path relative to 'Frontend/generated/jar-resources'.\n+     * Prepend the js module with an exclamation mark, to invert the check and\n+     * ensure the module is NOT imported (e.g. {@code !my-module.js}).\n+     *\n+     * <pre>\n+     * generated-imports/\n+     * ├── all-deps\n+     * │ ├── chunks\n+     * │ ├── chunk-92e7c77c450ec2b4897a66279506d76cfbbba9edd8ac2fddb2d50decf23a5089.js\n+     * │ │ └── chunk-b87575f9f7d0e4bad37bd5e479c4bac0bec6cb0baca59ae6c1dd366799ece23f.js\n+     * │ └── generated-flow-imports.js\n+     * ├── exclude-alpha\n+     * │ ├── chunks\n+     * │ │ └── chunk-b87575f9f7d0e4bad37bd5e479c4bac0bec6cb0baca59ae6c1dd366799ece23f.js\n+     * │ └── generated-flow-imports.js\n+     * ├── not-optimized\n+     * │ └── all-deps\n+     * │     └── generated-flow-imports.js\n+     * └── optimized\n+     *     └── all-deps\n+     *         ├── chunks\n+     *         │ ├── chunk-92e7c77c450ec2b4897a66279506d76cfbbba9edd8ac2fddb2d50decf23a5089.js\n+     *         │ └── chunk-b87575f9f7d0e4bad37bd5e479c4bac0bec6cb0baca59ae6c1dd366799ece23f.js\n+     *         └── generated-flow-imports.js\n+     * </pre>\n+     * <p>\n+     * </p>\n+     *\n+     * Example invocation:\n+     *\n+     * <pre>\n+     * {@code\n+     * Map<String, List<String>> verifications = new HashMap<>();\n+     * verifications.put(\"all-deps\", List.of(\"alpha.js\", \"beta.js\"));\n+     * verifications.put(\"exclude-alpha\", List.of(\"!alpha.js\", \"beta.js\"));\n+     *\n+     * Path path = Paths.get(\"generated-imports\");\n+     * System.out.println(\"Checking imports in \" + path.toAbsolutePath());\n+     * IntegrationTestHelper.verifyImports(path, verifications);\n+     * }\n+     * </pre>\n+     *\n+     * @param importsDir\n+     *            path to folder where generated imports are stored.\n+     * @param expectations\n+     *            js modules to check.\n+     */\n+    public static void verifyImports(Path importsDir,\n+            Map<String, List<String>> expectations) {\n+        try {\n+            for (Map.Entry<String, List<String>> check : expectations\n+                    .entrySet()) {\n+                String profile = check.getKey();\n+                List<String> jsModules = check.getValue();\n+\n+                // Concat all import\n+                // Not optimized bundle\n+                Path importFile = importsDir.resolve(Path.of(\"not-optimized\",\n+                        profile, \"generated-flow-imports.js\"));\n+                try {\n+                    verifyImports(readFile(importFile), jsModules);\n+                } catch (AssertionError e) {\n+                    throw new AssertionError(e.getMessage()\n+                            + \" in not optimized bundle generated by profile '\"\n+                            + profile + \"' (\" + importFile + \")\");\n+                }\n+\n+                // Optimize bundle\n+                importFile = importsDir.resolve(Path.of(\"optimized\", profile,\n+                        \"generated-flow-imports.js\"));\n+                String allImports = readFile(importFile);\n+                Path chunksDir = importsDir\n+                        .resolve(Path.of(\"optimized\", profile, \"chunks\"));\n+                if (Files.exists(chunksDir)) {\n+                    allImports += \"\\n\" + Files.list(chunksDir)\n+                            .filter(file -> file.getFileName().toString()\n+                                    .startsWith(\"chunk-\"))\n+                            .map(IntegrationTestHelper::readFile)\n+                            .collect(Collectors.joining(\"\\n\"));\n+                }\n+                try {\n+                    verifyImports(allImports, jsModules);\n+                } catch (AssertionError e) {\n+                    throw new AssertionError(e.getMessage()\n+                            + \" in optimized bundle generated by profile '\"\n+                            + profile + \"' (\" + importFile + \" and \" + chunksDir\n+                            + \"/*)\");\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    private static void verifyImport(String source, String jsModule) {\n+        boolean negate = jsModule.startsWith(\"!\");\n+        if (negate) {\n+            jsModule = jsModule.substring(1);\n+        }\n+        boolean hasImport = source\n+                .contains(IMPORT_TEMPLATE.formatted(jsModule));\n+        if (hasImport && negate) {\n+            throw new AssertionError(\n+                    \"Import of '\" + jsModule + \"' should not be present\");\n+        } else if (!hasImport && !negate) {\n+            throw new AssertionError(\n+                    \"Import of '\" + jsModule + \"' is expected but not present\");\n+        }\n+    }\n+\n+    private static void verifyImports(String source, List<String> jsModules)\n+            throws IOException {\n+        for (String jsModule : jsModules) {\n+            verifyImport(source, jsModule);\n+        }\n+    }\n+\n+    private static String readFile(Path path) {\n+        try {\n+            return Files.readString(path);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+}\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java\nindex 91c1f227622..129ee84eb1a 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java\n@@ -72,6 +72,8 @@ public void setUp() throws ClassNotFoundException {\n         Mockito.doAnswer(invocation -> FrontendDependenciesTest.class\n                 .getClassLoader().getResource(invocation.getArgument(0)))\n                 .when(classFinder).getResource(Mockito.anyString());\n+        Mockito.when(classFinder.shouldInspectClass(Mockito.anyString()))\n+                .thenReturn(true);\n \n         Mockito.when(classFinder.loadClass(UI.class.getName()))\n                 .thenReturn((Class) UI.class);\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21119",
    "pr_id": 21119,
    "issue_id": 21085,
    "repo": "vaadin/flow",
    "problem_statement": "Notification opened-changed event spam while using modal dialog\n### Description of the bug\n\nWhen I have a notification and a modal dialog my log is bombarded with log messages.. making me wonder.. is my application broken? \n\nLog from a single button click.\n```log\n2025-02-27T11:45:48.985+01:00  INFO 43060 --- [] [nio-8080-exec-6] c.v.f.i.nodefeature.ElementListenerMap   : Ignored listener invocation for opened-changed event from the client side for an inert vaadin-notification element\n2025-02-27T11:45:48.985+01:00  INFO 43060 --- [] [nio-8080-exec-6] c.v.f.i.nodefeature.ElementListenerMap   : Ignored listener invocation for opened-changed event from the client side for an inert vaadin-notification element\n2025-02-27T11:45:53.976+01:00  INFO 43060 --- [] [nio-8080-exec-4] c.v.f.s.c.r.AbstractRpcInvocationHandler : Ignored RPC for invocation handler 'com.vaadin.flow.server.communication.rpc.MapSyncRpcHandler' from the client side for an inert node id='604'\n2025-02-27T11:45:53.976+01:00  INFO 43060 --- [] [nio-8080-exec-4] c.v.f.i.nodefeature.ElementListenerMap   : Ignored listener invocation for opened-changed event from the client side for an inert vaadin-notification element\n2025-02-27T11:45:53.976+01:00  INFO 43060 --- [] [nio-8080-exec-4] c.v.f.i.nodefeature.ElementListenerMap   : Ignored listener invocation for opened-changed event from the client side for an inert vaadin-notification element\n```\n\n### Expected behavior\n\nNo log message is provided. Notification works even with a modal dialog - automatical exclusion for server side modal feature?\n\n### Minimal reproducible example\n\n```java\n\n    var btn = new Button(\"Click Me\", e -> {\n      Notification.show(\"Hi. I'm a notification.\");\n\n      var dialog = new Dialog();\n      dialog.setModal(true);\n      dialog.add(new Paragraph(\"Lorem Ipsum. Let this stay open until Notification disappears.\"));\n      dialog.open();\n    });\n\n\n\n```\n\n### Versions\n\n- Vaadin / Flow version: latest\n- Java version: latest\n",
    "issue_word_count": 303,
    "test_files_count": 2,
    "non_test_files_count": 7,
    "pr_changed_files": [
      "flow-html-components/src/main/java/com/vaadin/flow/component/html/NativeDetails.java",
      "flow-server/src/main/java/com/vaadin/flow/component/Component.java",
      "flow-server/src/main/java/com/vaadin/flow/component/Synchronize.java",
      "flow-server/src/main/java/com/vaadin/flow/component/internal/ComponentMetaData.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementListenerMap.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/AbstractRpcInvocationHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/MapSyncRpcHandler.java",
      "flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/AllowInertSynchronizedPropertyView.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/AllowInertSynchronizedPropertyIT.java"
    ],
    "pr_changed_test_files": [
      "flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/AllowInertSynchronizedPropertyView.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/AllowInertSynchronizedPropertyIT.java"
    ],
    "base_commit": "ee26a2296254bd83eb857166b7307016efc2ebd2",
    "head_commit": "15fe1b276b7b9daf8f6170ebb800fb0130959e2b",
    "repo_url": "https://github.com/vaadin/flow/pull/21119",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21119",
    "dockerfile": "",
    "pr_merged_at": "2025-03-17T07:42:28.000Z",
    "patch": "diff --git a/flow-html-components/src/main/java/com/vaadin/flow/component/html/NativeDetails.java b/flow-html-components/src/main/java/com/vaadin/flow/component/html/NativeDetails.java\nindex 5b9aac0b622..baeb7d538ff 100644\n--- a/flow-html-components/src/main/java/com/vaadin/flow/component/html/NativeDetails.java\n+++ b/flow-html-components/src/main/java/com/vaadin/flow/component/html/NativeDetails.java\n@@ -193,7 +193,7 @@ public void setContent(Component content) {\n      *\n      * @return whether details are expanded or collapsed\n      */\n-    @Synchronize(property = \"open\", value = \"toggle\")\n+    @Synchronize(property = \"open\", value = \"toggle\", allowInert = true)\n     public boolean isOpen() {\n         return getElement().getProperty(\"open\", false);\n     }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/component/Component.java b/flow-server/src/main/java/com/vaadin/flow/component/Component.java\nindex 93085cbd908..815373606cf 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/Component.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/Component.java\n@@ -31,6 +31,7 @@\n import com.vaadin.flow.component.internal.ComponentMetaData;\n import com.vaadin.flow.component.internal.ComponentTracker;\n import com.vaadin.flow.component.template.Id;\n+import com.vaadin.flow.dom.DomListenerRegistration;\n import com.vaadin.flow.dom.Element;\n import com.vaadin.flow.dom.ElementUtil;\n import com.vaadin.flow.dom.PropertyChangeListener;\n@@ -178,9 +179,13 @@ private void addSynchronizedProperty(\n                 throw new IllegalArgumentException(getClass().getName()\n                         + \": event type must not be null for @Synchronize annotation\");\n             }\n-            element.addPropertyChangeListener(info.getProperty(), eventType,\n-                    NOOP_PROPERTY_LISTENER)\n+            DomListenerRegistration propertyListener = element\n+                    .addPropertyChangeListener(info.getProperty(), eventType,\n+                            NOOP_PROPERTY_LISTENER)\n                     .setDisabledUpdateMode(info.getUpdateMode());\n+            if (info.getAllowInert()) {\n+                propertyListener.allowInert();\n+            }\n         });\n     }\n \n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/component/Synchronize.java b/flow-server/src/main/java/com/vaadin/flow/component/Synchronize.java\nindex 204ed9a09d7..838ef9c7f1c 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/Synchronize.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/Synchronize.java\n@@ -71,4 +71,13 @@\n      * @return the property update mode for disabled element\n      */\n     DisabledUpdateMode allowUpdates() default DisabledUpdateMode.ONLY_WHEN_ENABLED;\n+\n+    /**\n+     * Makes this property able to synchronize even when the related node is\n+     * inert.\n+     *\n+     * @return {@code true} to allow inert synchronization, {@code false} to\n+     *         disallow. Defaults to {@code false}.\n+     */\n+    boolean allowInert() default false;\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/component/internal/ComponentMetaData.java b/flow-server/src/main/java/com/vaadin/flow/component/internal/ComponentMetaData.java\nindex 328f2f5ac38..f53ce492566 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/internal/ComponentMetaData.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/internal/ComponentMetaData.java\n@@ -90,13 +90,15 @@ public boolean isEmpty() {\n     public static class SynchronizedPropertyInfo {\n         private final String property;\n         private final DisabledUpdateMode mode;\n+        private final boolean allowInert;\n         private final String[] eventNames;\n \n         SynchronizedPropertyInfo(String property, String[] eventNames,\n-                DisabledUpdateMode mode) {\n+                DisabledUpdateMode mode, boolean allowInert) {\n             this.property = property;\n             this.eventNames = eventNames;\n             this.mode = mode;\n+            this.allowInert = allowInert;\n         }\n \n         public String getProperty() {\n@@ -110,6 +112,10 @@ public Stream<String> getEventNames() {\n         public DisabledUpdateMode getUpdateMode() {\n             return mode;\n         }\n+\n+        public boolean getAllowInert() {\n+            return allowInert;\n+        }\n     }\n \n     private final Collection<SynchronizedPropertyInfo> synchronizedProperties;\n@@ -262,8 +268,10 @@ private static void doCollectSynchronizedProperties(Class<?> clazz,\n             }\n \n             String[] eventNames = annotation.value();\n-            infos.put(method.getName(), new SynchronizedPropertyInfo(\n-                    propertyName, eventNames, annotation.allowUpdates()));\n+            infos.put(method.getName(),\n+                    new SynchronizedPropertyInfo(propertyName, eventNames,\n+                            annotation.allowUpdates(),\n+                            annotation.allowInert()));\n         }\n     }\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementListenerMap.java b/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementListenerMap.java\nindex 1d6400bd715..de0d5a4d3b9 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementListenerMap.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementListenerMap.java\n@@ -512,4 +512,25 @@ public DisabledUpdateMode getPropertySynchronizationMode(\n                 .reduce(DisabledUpdateMode::mostPermissive).orElse(null);\n     }\n \n+    /**\n+     * Returns {@code true} if any listener for the given property has\n+     * allowInert enabled. Note that this means that enabling allowInert for any\n+     * listener for a certain property will effectively allow it for all\n+     * listeners for said property.\n+     *\n+     * @param propertyName\n+     *            the property name to check, not <code>null</code>\n+     * @return {@code true} if allowInert is enabled for any listener for the\n+     *         given property, {@code false otherwise}\n+     */\n+    public boolean hasAllowInertForProperty(String propertyName) {\n+        assert propertyName != null;\n+\n+        if (listeners == null) {\n+            return false;\n+        }\n+        return listeners.values().stream().flatMap(List::stream)\n+                .filter(wrapper -> wrapper.isPropertySynchronized(propertyName))\n+                .anyMatch(wrapper -> wrapper.allowInert);\n+    }\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/AbstractRpcInvocationHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/AbstractRpcInvocationHandler.java\nindex 63bdd7dacbc..ffad1be9237 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/AbstractRpcInvocationHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/AbstractRpcInvocationHandler.java\n@@ -66,9 +66,15 @@ public Optional<Runnable> handle(UI ui, JsonObject invocationJson) {\n         if (node.isInactive()) {\n             logHandlingIgnoredMessage(node, \"inactive (disabled or invisible)\");\n             return Optional.empty();\n-        } else if (!allowInert(ui, invocationJson) && node.isInert()) {\n-            logHandlingIgnoredMessage(node, \"inert\");\n-            return Optional.empty();\n+        } else if (node.isInert()) {\n+            if (allowInert(ui, invocationJson)) {\n+                // Allow handling of RPC request if any listener for the event\n+                // type or the synchronized property have enabled allowInert.\n+                return handleNode(node, invocationJson);\n+            } else {\n+                logHandlingIgnoredMessage(node, \"inert\");\n+                return Optional.empty();\n+            }\n         } else {\n             return handleNode(node, invocationJson);\n         }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/MapSyncRpcHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/MapSyncRpcHandler.java\nindex e2c9a7dabbf..29ee62d7093 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/MapSyncRpcHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/MapSyncRpcHandler.java\n@@ -24,6 +24,7 @@\n import org.slf4j.LoggerFactory;\n \n import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.UI;\n import com.vaadin.flow.dom.DisabledUpdateMode;\n import com.vaadin.flow.dom.Element;\n import com.vaadin.flow.internal.JsonCodec;\n@@ -121,6 +122,21 @@ protected Optional<Runnable> handleNode(StateNode node,\n         return Optional.empty();\n     }\n \n+    @Override\n+    protected boolean allowInert(UI ui, JsonObject invocationJson) {\n+        StateNode node = ui.getInternals().getStateTree()\n+                .getNodeById(getNodeId(invocationJson));\n+        if (node != null && node.hasFeature(ElementListenerMap.class)) {\n+            ElementListenerMap listenerMap = node\n+                    .getFeature(ElementListenerMap.class);\n+            return invocationJson.hasKey(JsonConstants.RPC_PROPERTY)\n+                    && listenerMap.hasAllowInertForProperty(invocationJson\n+                            .getString(JsonConstants.RPC_PROPERTY));\n+        } else {\n+            return super.allowInert(ui, invocationJson);\n+        }\n+    }\n+\n     private Optional<Runnable> enqueuePropertyUpdate(StateNode node,\n             JsonObject invocationJson, String property) {\n         Serializable value = JsonCodec.decodeWithoutTypeInfo(\n",
    "test_patch": "diff --git a/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/AllowInertSynchronizedPropertyView.java b/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/AllowInertSynchronizedPropertyView.java\nnew file mode 100644\nindex 00000000000..1207cf18f00\n--- /dev/null\n+++ b/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/AllowInertSynchronizedPropertyView.java\n@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.uitest.ui;\n+\n+import com.vaadin.flow.component.ClickEvent;\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.ComponentEventListener;\n+import com.vaadin.flow.component.Text;\n+import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.component.html.NativeButton;\n+import com.vaadin.flow.component.html.NativeDetails;\n+import com.vaadin.flow.component.html.Span;\n+import com.vaadin.flow.router.Route;\n+\n+@Route(value = \"com.vaadin.flow.uitest.ui.AllowInertSynchronizedPropertyView\")\n+public class AllowInertSynchronizedPropertyView extends AbstractDivView {\n+\n+    public static final String OPEN_MODAL_BUTTON = \"modal-dialog-button\";\n+    public static final String READ_NATIVE_DETAILS_STATE_BUTTON = \"read-native-details-state-button\";\n+    public static final String NATIVE_DETAILS_STATE = \"native-details-state\";\n+    public static final String NATIVE_DETAILS_SUMMARY = \"native-details-summary\";\n+\n+    private NativeDetails nativeDetails;\n+    private Span state;\n+\n+    @Override\n+    protected void onShow() {\n+        add(createOpenDialogButton(OPEN_MODAL_BUTTON));\n+\n+        nativeDetails = new NativeDetails();\n+        add(nativeDetails);\n+\n+        Span summary = new Span(\"Native details summary\");\n+        summary.setId(NATIVE_DETAILS_SUMMARY);\n+        nativeDetails.setSummary(summary);\n+\n+        state = new Span(\"unknown\");\n+        state.setId(NATIVE_DETAILS_STATE);\n+        add(state);\n+    }\n+\n+    private Component createOpenDialogButton(String id) {\n+        final NativeButton button = createButton(\"Open modal dialog\",\n+                event -> new Dialog().open());\n+        button.setId(id);\n+        return button;\n+    }\n+\n+    private NativeButton createButton(String caption,\n+            ComponentEventListener<ClickEvent<NativeButton>> listener) {\n+        final NativeButton button = new NativeButton();\n+        button.setText(caption);\n+        button.addClickListener(listener);\n+        button.getStyle().set(\"border\", \"1px solid black\");\n+        button.setWidth(\"100px\");\n+        return button;\n+    }\n+\n+    public class Dialog extends Div {\n+\n+        public Dialog() {\n+            final NativeButton readNativeDetailsStateButton = new NativeButton(\n+                    \"Read Native Details State\", event -> {\n+                        if (nativeDetails.isOpen()) {\n+                            state.setText(\"opened\");\n+                        } else {\n+                            state.setText(\"closed\");\n+                        }\n+                    });\n+            readNativeDetailsStateButton\n+                    .setId(READ_NATIVE_DETAILS_STATE_BUTTON);\n+\n+            add(new Text(\"A modal dialog\"), readNativeDetailsStateButton);\n+\n+            getStyle().set(\"position\", \"fixed\").set(\"inset\", \"50% 50%\")\n+                    .set(\"border\", \"1px solid black\");\n+        }\n+\n+        public void open() {\n+            final UI ui = UI.getCurrent();\n+            ui.addModal(this);\n+        }\n+    }\n+}\n\ndiff --git a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/AllowInertSynchronizedPropertyIT.java b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/AllowInertSynchronizedPropertyIT.java\nnew file mode 100644\nindex 00000000000..ac7d8bf6628\n--- /dev/null\n+++ b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/AllowInertSynchronizedPropertyIT.java\n@@ -0,0 +1,51 @@\n+package com.vaadin.flow.uitest.ui;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+\n+import com.vaadin.flow.component.html.testbench.NativeButtonElement;\n+import com.vaadin.flow.component.html.testbench.NativeDetailsElement;\n+import com.vaadin.flow.component.html.testbench.SpanElement;\n+import com.vaadin.flow.testutil.ChromeBrowserTest;\n+import com.vaadin.testbench.TestBenchElement;\n+\n+public class AllowInertSynchronizedPropertyIT extends ChromeBrowserTest {\n+\n+    private TestBenchElement modalDialogButton;\n+\n+    @Override\n+    protected void open(String... parameters) {\n+        super.open(parameters);\n+        modalDialogButton = $(NativeButtonElement.class)\n+                .id(ModalDialogView.OPEN_MODAL_BUTTON);\n+    }\n+\n+    @Test\n+    public void modalDialogOpened_toggleNativeDetailsVisibility_allowInertSynchronizedPropertyShouldChange() {\n+        open();\n+\n+        modalDialogButton.click();\n+\n+        $(NativeButtonElement.class).id(\n+                AllowInertSynchronizedPropertyView.READ_NATIVE_DETAILS_STATE_BUTTON)\n+                .click();\n+\n+        Assert.assertEquals(\"closed\", getStateText());\n+\n+        $(NativeDetailsElement.class).first().findElement(By\n+                .id(AllowInertSynchronizedPropertyView.NATIVE_DETAILS_SUMMARY))\n+                .click();\n+        $(NativeButtonElement.class).id(\n+                AllowInertSynchronizedPropertyView.READ_NATIVE_DETAILS_STATE_BUTTON)\n+                .click();\n+\n+        Assert.assertEquals(\"opened\", getStateText());\n+    }\n+\n+    private String getStateText() {\n+        return $(SpanElement.class)\n+                .id(AllowInertSynchronizedPropertyView.NATIVE_DETAILS_STATE)\n+                .getText();\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21111",
    "pr_id": 21111,
    "issue_id": 20741,
    "repo": "vaadin/flow",
    "problem_statement": "Use Jackson for public API and implementation instead of Elemental JSON\n### Describe your motivation\n\nJackson library (`com.fasterxml.jackson`) is more popular than Elemental JSON (`elemental.json`), thus Vaadin should better use it in public API.\n\n### Describe the solution you'd like\n\n0. Analyse and list the usage of Elemental in Flow: how many publicly using cases do we have and how many are used internally. I expect the main usage in `Element` class, but there may be more, e.g. in util classes.\n1. Add an adapter code that converts Jackson to/from Elemental, if it's problematic to replace it in implementation right away, else go to step 2.\n2. Change Flow internal implementation to use Jackson\n3. Add same public methods found in (0), but that use Jackson for arguments and return values\n4. Deprecate existing public method with Elemental\n5. Remove Elemental variants in next major version.\n",
    "issue_word_count": 151,
    "test_files_count": 3,
    "non_test_files_count": 13,
    "pr_changed_files": [
      "flow-react/src/main/java/com/vaadin/flow/component/react/ReactAdapterComponent.java",
      "flow-react/src/main/java/com/vaadin/flow/component/react/ReactRouterOutlet.java",
      "flow-server/src/main/java/com/vaadin/flow/component/AbstractSinglePropertyField.java",
      "flow-server/src/main/java/com/vaadin/flow/component/ComponentEventBus.java",
      "flow-server/src/main/java/com/vaadin/flow/component/ScrollOptions.java",
      "flow-server/src/main/java/com/vaadin/flow/component/UI.java",
      "flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponentUI.java",
      "flow-server/src/main/java/com/vaadin/flow/dom/Element.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/JavaScriptSemantics.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/change/MapPutChange.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/AbstractPropertyMap.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/DefaultRpcDecoder.java",
      "flow-server/src/test/java/com/vaadin/flow/component/AbstractSinglePropertyFieldTest.java",
      "flow-server/src/test/java/com/vaadin/flow/dom/ElementJacksonTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandlerTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/component/AbstractSinglePropertyFieldTest.java",
      "flow-server/src/test/java/com/vaadin/flow/dom/ElementJacksonTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandlerTest.java"
    ],
    "base_commit": "0528f4f2a67f989a589cc8b9650a3eac55439159",
    "head_commit": "7dcf321857c9f417a01c79ec2291ea6ac3b9d7bb",
    "repo_url": "https://github.com/vaadin/flow/pull/21111",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21111",
    "dockerfile": "",
    "pr_merged_at": "2025-03-17T12:36:45.000Z",
    "patch": "diff --git a/flow-react/src/main/java/com/vaadin/flow/component/react/ReactAdapterComponent.java b/flow-react/src/main/java/com/vaadin/flow/component/react/ReactAdapterComponent.java\nindex b38902b2337..00bf9576685 100644\n--- a/flow-react/src/main/java/com/vaadin/flow/component/react/ReactAdapterComponent.java\n+++ b/flow-react/src/main/java/com/vaadin/flow/component/react/ReactAdapterComponent.java\n@@ -16,24 +16,25 @@\n package com.vaadin.flow.component.react;\n \n import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.BaseJsonNode;\n \n import com.vaadin.flow.component.Component;\n import com.vaadin.flow.dom.DomListenerRegistration;\n import com.vaadin.flow.dom.Element;\n import com.vaadin.flow.function.SerializableConsumer;\n import com.vaadin.flow.function.SerializableFunction;\n-import com.vaadin.flow.internal.JsonCodec;\n-import com.vaadin.flow.internal.JsonUtils;\n+import com.vaadin.flow.internal.JacksonCodec;\n+import com.vaadin.flow.internal.JacksonUtils;\n \n-import com.vaadin.flow.internal.StateNode;\n+import com.vaadin.flow.internal.JsonUtils;\n import com.vaadin.flow.internal.nodefeature.NodeProperties;\n \n-import elemental.json.Json;\n-import elemental.json.JsonValue;\n-\n import java.util.HashMap;\n import java.util.Map;\n \n+import elemental.json.JsonValue;\n+\n /**\n  * An abstract implementation of an adapter for integrating with React\n  * components. To be used together with a React adapter Web Component that\n@@ -110,7 +111,7 @@ protected <T> DomListenerRegistration addStateChangeListener(\n      *            value to assign\n      */\n     protected void setState(String stateName, Object value) {\n-        getElement().setPropertyJson(stateName, writeAsJson(value));\n+        getElement().setPropertyJson(stateName, writeToJson(value));\n     }\n \n     /**\n@@ -153,12 +154,30 @@ protected <T> T getState(String stateName, TypeReference<T> typeReference) {\n      * @return converted object instance\n      * @param <T>\n      *            type of result instance\n+     * @deprecated use {@link #readFromJson(JsonNode, Class)} instead\n      */\n+    @Deprecated\n     protected static <T> T readFromJson(JsonValue jsonValue,\n             Class<T> typeClass) {\n         return JsonUtils.readValue(jsonValue, typeClass);\n     }\n \n+    /**\n+     * Converts JsonValue into Java object of given type.\n+     *\n+     * @param jsonValue\n+     *            JSON value to convert, not {@code null}\n+     * @param typeClass\n+     *            type class of converted object instance\n+     * @return converted object instance\n+     * @param <T>\n+     *            type of result instance\n+     */\n+    protected static <T> T readFromJson(JsonNode jsonValue,\n+            Class<T> typeClass) {\n+        return JacksonUtils.readValue(jsonValue, typeClass);\n+    }\n+\n     /**\n      * Converts JsonValue into Java object of given type.\n      *\n@@ -169,23 +188,54 @@ protected static <T> T readFromJson(JsonValue jsonValue,\n      * @return converted object instance\n      * @param <T>\n      *            type of result instance\n+     * @deprecated use {@link #readFromJson(JsonNode, TypeReference)} instead\n      */\n+    @Deprecated\n     protected static <T> T readFromJson(JsonValue jsonValue,\n             TypeReference<T> typeReference) {\n         return JsonUtils.readValue(jsonValue, typeReference);\n     }\n \n+    /**\n+     * Converts JsonValue into Java object of given type.\n+     *\n+     * @param jsonValue\n+     *            JSON value to convert, not {@code null}\n+     * @param typeReference\n+     *            type reference of converted object instance\n+     * @return converted object instance\n+     * @param <T>\n+     *            type of result instance\n+     */\n+    protected static <T> T readFromJson(JsonNode jsonValue,\n+            TypeReference<T> typeReference) {\n+        return JacksonUtils.readValue(jsonValue, typeReference);\n+    }\n+\n     /**\n      * Converts Java object into JsonValue.\n      *\n      * @param object\n      *            Java object to convert\n      * @return converted JSON value\n+     * @deprecated use {@link #writeToJson(Object)}\n      */\n+    @Deprecated\n     protected static JsonValue writeAsJson(Object object) {\n         return JsonUtils.writeValue(object);\n     }\n \n+    /**\n+     * Converts Java object into JsonValue.\n+     *\n+     * @param object\n+     *            Java object to convert\n+     * @return converted JSON value\n+     */\n+    protected static BaseJsonNode writeToJson(Object object) {\n+        return JacksonUtils.writeValue(object);\n+    }\n+\n     /**\n      * Get the Flow container element that is set up in React template for given\n      * name attribute.\n@@ -210,29 +260,32 @@ protected Element getContentElement(String name) {\n         return contentMap.get(name);\n     }\n \n-    private JsonValue getPropertyJson(String propertyName) {\n+    private JsonNode getPropertyJson(String propertyName) {\n         var rawValue = getElement().getPropertyRaw(propertyName);\n         if (rawValue == null) {\n-            return Json.createNull();\n-        } else if (rawValue instanceof JsonValue jsonValue) {\n-            return jsonValue;\n+            return JacksonUtils.nullNode();\n+        } else if (rawValue instanceof JsonNode jsonNode) {\n+            return jsonNode;\n         } else if (rawValue instanceof String stringValue) {\n-            return Json.create(stringValue);\n+            return JacksonUtils.createNode(stringValue);\n         } else if (rawValue instanceof Double doubleValue) {\n-            return Json.create(doubleValue);\n+            return JacksonUtils.createNode(doubleValue);\n         } else if (rawValue instanceof Boolean booleanValue) {\n-            return Json.create(booleanValue);\n+            return JacksonUtils.createNode(booleanValue);\n+        } else if (rawValue instanceof JsonValue jsonValue) {\n+            // TODO: remove when elemental dropped\n+            return JacksonUtils.mapElemental(jsonValue);\n         } else {\n-            return Json.create(rawValue.toString());\n+            return JacksonUtils.createNode(rawValue.toString());\n         }\n     }\n \n     private <T> DomListenerRegistration addJsonReaderStateChangeListener(\n-            String stateName, SerializableFunction<JsonValue, T> jsonReader,\n+            String stateName, SerializableFunction<JsonNode, T> jsonReader,\n             SerializableConsumer<T> listener) {\n         return getElement().addPropertyChangeListener(stateName,\n                 stateName + \"-changed\", (event -> {\n-                    JsonValue newStateJson = JsonCodec\n+                    JsonNode newStateJson = JacksonCodec\n                             .encodeWithoutTypeInfo(event.getValue());\n                     T newState = jsonReader.apply(newStateJson);\n                     listener.accept(newState);\n\ndiff --git a/flow-react/src/main/java/com/vaadin/flow/component/react/ReactRouterOutlet.java b/flow-react/src/main/java/com/vaadin/flow/component/react/ReactRouterOutlet.java\nindex a8ed0608944..9f6e76fc00d 100644\n--- a/flow-react/src/main/java/com/vaadin/flow/component/react/ReactRouterOutlet.java\n+++ b/flow-react/src/main/java/com/vaadin/flow/component/react/ReactRouterOutlet.java\n@@ -18,8 +18,6 @@\n \n import com.vaadin.flow.component.Tag;\n import com.vaadin.flow.component.dependency.JsModule;\n-import com.vaadin.flow.component.react.ReactAdapterComponent;\n-import com.vaadin.flow.router.Route;\n \n /**\n  * Component used to create a React {@code Outlet} element for binding a Hilla\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/component/AbstractSinglePropertyField.java b/flow-server/src/main/java/com/vaadin/flow/component/AbstractSinglePropertyField.java\nindex 2f172071299..62fdcb62953 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/AbstractSinglePropertyField.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/AbstractSinglePropertyField.java\n@@ -21,6 +21,7 @@\n import java.util.Objects;\n import java.util.stream.Collectors;\n \n+import com.fasterxml.jackson.databind.node.BaseJsonNode;\n import com.googlecode.gentyref.GenericTypeReflector;\n import com.vaadin.flow.dom.DomListenerRegistration;\n import com.vaadin.flow.dom.Element;\n@@ -29,6 +30,7 @@\n import com.vaadin.flow.function.SerializableBiConsumer;\n import com.vaadin.flow.function.SerializableBiFunction;\n import com.vaadin.flow.function.SerializableFunction;\n+import com.vaadin.flow.internal.JacksonCodec;\n import com.vaadin.flow.internal.JsonCodec;\n import com.vaadin.flow.shared.util.SharedUtil;\n \n@@ -128,6 +130,8 @@ private <C extends AbstractField<C, V>, V> SerializableBiConsumer<C, V> createWr\n                 Boolean.FALSE);\n         addHandler(Element::setProperty, Element::getProperty, Integer.class,\n                 Integer.valueOf(0));\n+        typeHandlers.put(BaseJsonNode.class,\n+                getJsonHandler(BaseJsonNode.class));\n         typeHandlers.put(JsonValue.class, getHandler(JsonValue.class));\n     }\n \n@@ -254,7 +258,10 @@ public <P> AbstractSinglePropertyField(String propertyName, T defaultValue,\n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     private <P> TypeHandler<P> findHandler(Class<P> clazz) {\n         TypeHandler<P> typeHandler = (TypeHandler<P>) typeHandlers.get(clazz);\n-        if (typeHandler == null && JsonValue.class.isAssignableFrom(clazz)) {\n+        if (typeHandler == null && BaseJsonNode.class.isAssignableFrom(clazz)) {\n+            typeHandler = getJsonHandler((Class) clazz);\n+        } else if (typeHandler == null\n+                && JsonValue.class.isAssignableFrom(clazz)) {\n             typeHandler = getHandler((Class) clazz);\n         }\n         if (typeHandler == null) {\n@@ -366,6 +373,7 @@ protected void setPresentationValue(T newPresentationValue) {\n         propertyWriter.accept((C) this, newPresentationValue);\n     }\n \n+    @Deprecated\n     private static <P extends JsonValue> TypeHandler<P> getHandler(\n             Class<P> type) {\n         ElementGetter<P> getter = (element, property, defaultValue) -> {\n@@ -379,6 +387,18 @@ private static <P extends JsonValue> TypeHandler<P> getHandler(\n         return new TypeHandler<P>(setter, getter, null);\n     }\n \n+    private static <P extends BaseJsonNode> TypeHandler<P> getJsonHandler(\n+            Class<P> type) {\n+        ElementGetter<P> getter = (element, property, defaultValue) -> {\n+            Serializable value = element.getPropertyRaw(property);\n+            // JsonValue is passed straight through, other primitive\n+            // values are jsonified\n+            return type.cast(JacksonCodec.encodeWithoutTypeInfo(value));\n+        };\n+        ElementSetter<P> setter = Element::setPropertyJson;\n+        return new TypeHandler<P>(setter, getter, null);\n+    }\n+\n     private static <T> void addHandler(ElementSetter<T> setter,\n             ElementGetter<T> getter, Class<T> type, T typeDefaultValue) {\n         typeHandlers.put(type,\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/component/ComponentEventBus.java b/flow-server/src/main/java/com/vaadin/flow/component/ComponentEventBus.java\nindex 0f2b650706d..46761c3e8e1 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/ComponentEventBus.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/ComponentEventBus.java\n@@ -28,16 +28,21 @@\n import java.util.Optional;\n import java.util.function.Consumer;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+\n import com.vaadin.flow.dom.DebouncePhase;\n import com.vaadin.flow.dom.DisabledUpdateMode;\n import com.vaadin.flow.dom.DomEvent;\n import com.vaadin.flow.dom.DomListenerRegistration;\n import com.vaadin.flow.dom.Element;\n import com.vaadin.flow.internal.AnnotationReader;\n+import com.vaadin.flow.internal.JacksonCodec;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.JsonCodec;\n import com.vaadin.flow.shared.Registration;\n \n import elemental.json.Json;\n+import elemental.json.JsonNull;\n import elemental.json.JsonValue;\n \n /**\n@@ -361,6 +366,14 @@ private List<Object> createEventDataObjects(DomEvent domEvent,\n                     || type == Element.class) {\n                 eventDataObjects.add(parseStateNodeIdToComponentReference(\n                         domEvent, type, expression));\n+            } else if (JsonNode.class.isAssignableFrom(type)) {\n+                // TODO: Decode and remove if when domEvent uses jackson.\n+                JsonValue eventValue = domEvent.getEventData().get(expression);\n+                if (eventValue == null || eventValue instanceof JsonNull) {\n+                    eventDataObjects.add(null);\n+                } else {\n+                    eventDataObjects.add(JacksonUtils.mapElemental(eventValue));\n+                }\n             } else {\n                 JsonValue jsonValue = domEvent.getEventData().get(expression);\n                 if (jsonValue == null) {\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/component/ScrollOptions.java b/flow-server/src/main/java/com/vaadin/flow/component/ScrollOptions.java\nindex db5fc18e964..18a5d193087 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/ScrollOptions.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/ScrollOptions.java\n@@ -3,8 +3,9 @@\n import java.io.Serializable;\n import java.util.Locale;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+import com.vaadin.flow.internal.JacksonUtils;\n \n /**\n  * Options for scrollIntoView.\n@@ -123,7 +124,7 @@ public Alignment getInline() {\n      * @return a json object as a string\n      */\n     public String toJson() {\n-        JsonObject json = Json.createObject();\n+        ObjectNode json = JacksonUtils.createObjectNode();\n         if (behavior != Behavior.AUTO) {\n             json.put(\"behavior\", behavior.name().toLowerCase(Locale.ENGLISH));\n         }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/component/UI.java b/flow-server/src/main/java/com/vaadin/flow/component/UI.java\nindex 5f1dd534204..8b04a54b49a 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/UI.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/UI.java\n@@ -27,6 +27,7 @@\n import java.util.concurrent.Future;\n import java.util.stream.Stream;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -44,6 +45,7 @@\n import com.vaadin.flow.i18n.LocaleChangeEvent;\n import com.vaadin.flow.internal.CurrentInstance;\n import com.vaadin.flow.internal.ExecutionContext;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.internal.StateTree.ExecutionRegistration;\n import com.vaadin.flow.internal.nodefeature.ElementData;\n@@ -87,6 +89,8 @@\n import com.vaadin.flow.server.communication.PushConnection;\n import com.vaadin.flow.shared.Registration;\n \n+import elemental.json.Json;\n+import elemental.json.JsonObject;\n import elemental.json.JsonValue;\n \n /**\n@@ -1743,7 +1747,7 @@ public static class BrowserNavigateEvent extends ComponentEvent<UI> {\n         private final String route;\n         private final String query;\n         private final String appShellTitle;\n-        private final JsonValue historyState;\n+        private final JsonNode historyState;\n         private final String trigger;\n \n         /**\n@@ -1766,7 +1770,7 @@ public BrowserNavigateEvent(UI source, boolean fromClient,\n                 @EventData(\"route\") String route,\n                 @EventData(\"query\") String query,\n                 @EventData(\"appShellTitle\") String appShellTitle,\n-                @EventData(\"historyState\") JsonValue historyState,\n+                @EventData(\"historyState\") JsonNode historyState,\n                 @EventData(\"trigger\") String trigger) {\n             super(source, true);\n             this.route = route;\n@@ -1838,7 +1842,8 @@ public BrowserRefreshEvent(UI source, boolean fromClient,\n     public void connectClient(String flowRoutePath, String flowRouteQuery,\n             String appShellTitle, JsonValue historyState, String trigger) {\n         browserNavigate(new BrowserNavigateEvent(this, false, flowRoutePath,\n-                flowRouteQuery, appShellTitle, historyState, trigger));\n+                flowRouteQuery, appShellTitle,\n+                JacksonUtils.mapElemental(historyState), trigger));\n     }\n \n     /**\n@@ -1879,9 +1884,11 @@ public void browserNavigate(BrowserNavigateEvent event) {\n         } else {\n             History.HistoryStateChangeHandler handler = getPage().getHistory()\n                     .getHistoryStateChangeHandler();\n+            JsonObject state = event.historyState == null ? null\n+                    : Json.parse(event.historyState.toString());\n             handler.onHistoryStateChange(\n                     new History.HistoryStateChangeEvent(getPage().getHistory(),\n-                            event.historyState, location, navigationTrigger));\n+                            state, location, navigationTrigger));\n         }\n \n         // true if the target is client-view and the push mode is disable\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponentUI.java b/flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponentUI.java\nindex 0d6fd6e300c..91b5f27f4fe 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponentUI.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponentUI.java\n@@ -22,6 +22,7 @@\n import java.util.Optional;\n import java.util.concurrent.ConcurrentHashMap;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.slf4j.LoggerFactory;\n \n import com.vaadin.flow.component.Component;\n@@ -45,8 +46,6 @@\n import com.vaadin.flow.theme.Theme;\n import com.vaadin.flow.theme.ThemeDefinition;\n \n-import elemental.json.JsonObject;\n-\n /**\n  * Custom UI for use with WebComponents served from the server.\n  * <p>\n@@ -77,7 +76,7 @@ public static class WebComponentConnectEvent extends ComponentEvent<UI> {\n         private String tag;\n         private String userAssignedId;\n         private String webComponentElementId;\n-        private JsonObject attributeValues;\n+        private JsonNode attributeValues;\n \n         /**\n          * Creates a new web component connection event.\n@@ -104,7 +103,7 @@ public WebComponentConnectEvent(UI source, boolean fromClient,\n                 @EventData(\"tag\") String tag,\n                 @EventData(\"id\") String webComponentElementId,\n                 @EventData(\"userAssignedId\") String userAssignedId,\n-                @EventData(\"attributeValues\") JsonObject attributeValues) {\n+                @EventData(\"attributeValues\") JsonNode attributeValues) {\n             super(source, true);\n             this.tag = tag;\n             this.userAssignedId = userAssignedId;\n@@ -144,7 +143,7 @@ public String getWebComponentUserAssignedId() {\n          *\n          * @return the initial attribute values\n          */\n-        public JsonObject getAttributeJson() {\n+        public JsonNode getAttributeJson() {\n             return attributeValues;\n         }\n     }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/dom/Element.java b/flow-server/src/main/java/com/vaadin/flow/dom/Element.java\nindex a547478443f..c5b77395db0 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/dom/Element.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/dom/Element.java\n@@ -27,6 +27,13 @@\n import java.util.stream.IntStream;\n import java.util.stream.Stream;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.BaseJsonNode;\n+import com.fasterxml.jackson.databind.node.BooleanNode;\n+import com.fasterxml.jackson.databind.node.NullNode;\n+import com.fasterxml.jackson.databind.node.NumericNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import com.fasterxml.jackson.databind.node.ValueNode;\n import org.jsoup.nodes.Document;\n \n import com.vaadin.flow.component.Component;\n@@ -68,6 +75,7 @@ public class Element extends Node<Element> {\n     static final String ATTRIBUTE_NAME_CANNOT_BE_NULL = \"The attribute name cannot be null\";\n \n     private static final String USE_SET_PROPERTY_WITH_JSON_NULL = \"setProperty(name, Json.createNull()) must be used to set a property to null\";\n+    private static final String USE_SET_PROPERTY_WITH_JACKSON_NULL = \"setProperty(name, JacksonUtils.nullNode()) must be used to set a property to null\";\n \n     // Can't set $name as a property, use $replacement instead.\n     private static final Map<String, String> illegalPropertyReplacements = new HashMap<>();\n@@ -682,6 +690,36 @@ public Element setPropertyJson(String name, JsonValue value) {\n         return this;\n     }\n \n+    /**\n+     * Sets the given property to the given JSON value.\n+     * <p>\n+     * Please note that this method does not accept <code>null</code> as a\n+     * value, since {@link com.vaadin.flow.internal.JacksonUtils#nullNode()}\n+     * should be used instead for JSON values.\n+     * <p>\n+     * Note that properties changed on the server are updated on the client but\n+     * changes made on the client side are not reflected back to the server\n+     * unless configured using\n+     * {@link #addPropertyChangeListener(String, String, PropertyChangeListener)}\n+     * or {@link DomListenerRegistration#synchronizeProperty(String)}.\n+     *\n+     * @param name\n+     *            the property name, not <code>null</code>\n+     * @param value\n+     *            the property value, not <code>null</code>\n+     * @return this element\n+     */\n+    // Distinct name so setProperty(\"foo\", null) is not ambiguous\n+    public Element setPropertyJson(String name, BaseJsonNode value) {\n+        if (value == null) {\n+            throw new IllegalArgumentException(\n+                    USE_SET_PROPERTY_WITH_JACKSON_NULL);\n+        }\n+\n+        setRawProperty(name, value);\n+        return this;\n+    }\n+\n     /**\n      * Sets the given property to the given bean, converted to a JSON object.\n      * <p>\n@@ -856,6 +894,8 @@ public String getProperty(String name, String defaultValue) {\n             return defaultValue;\n         } else if (value instanceof JsonValue) {\n             return ((JsonValue) value).toJson();\n+        } else if (value instanceof NullNode) {\n+            return defaultValue;\n         } else if (value instanceof Number) {\n             double doubleValue = ((Number) value).doubleValue();\n             int intValue = (int) doubleValue;\n@@ -954,6 +994,10 @@ public double getProperty(String name, double defaultValue) {\n                     return Double.NaN;\n                 }\n             }\n+        } else if (value instanceof BooleanNode) {\n+            return ((BooleanNode) value).booleanValue() ? 1 : 0;\n+        } else if (value instanceof JsonNode) {\n+            return ((JsonNode) value).asDouble(Double.NaN);\n         } else {\n             throw new IllegalStateException(\n                     \"Unsupported property type: \" + value.getClass());\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java b/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\nindex 5b87e86b656..f7793a1b263 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\n@@ -158,6 +158,9 @@ public static BaseJsonNode mapElemental(JsonValue jsonValue) {\n         if (jsonValue instanceof JsonObject) {\n             return mapElemental((JsonObject) jsonValue);\n         }\n+        if (jsonValue instanceof JsonArray) {\n+            return mapElemental((JsonArray) jsonValue);\n+        }\n         if (jsonValue instanceof JsonNumber) {\n             return objectMapper.valueToTree(jsonValue.asNumber());\n         }\n@@ -554,7 +557,7 @@ public static ObjectNode mapToJson(Map<String, ?> map) {\n      * @param <T>\n      *            type of result instance\n      */\n-    public static <T> T readToObject(ObjectNode jsonObject, Class<T> tClass) {\n+    public static <T> T readToObject(JsonNode jsonObject, Class<T> tClass) {\n         Objects.requireNonNull(jsonObject, CANNOT_CONVERT_NULL_TO_OBJECT);\n         try {\n             return objectMapper.treeToValue(jsonObject, tClass);\n@@ -575,7 +578,7 @@ public static <T> T readToObject(ObjectNode jsonObject, Class<T> tClass) {\n      * @param <T>\n      *            type of result instance\n      */\n-    public static <T> T readValue(ObjectNode jsonValue, Class<T> tClass) {\n+    public static <T> T readValue(JsonNode jsonValue, Class<T> tClass) {\n         return readToObject(jsonValue, tClass);\n     }\n \n@@ -590,7 +593,7 @@ public static <T> T readValue(ObjectNode jsonValue, Class<T> tClass) {\n      * @param <T>\n      *            type of result instance\n      */\n-    public static <T> T readValue(ObjectNode jsonValue,\n+    public static <T> T readValue(JsonNode jsonValue,\n             TypeReference<T> typeReference) {\n         Objects.requireNonNull(jsonValue, CANNOT_CONVERT_NULL_TO_OBJECT);\n         try {\n@@ -608,7 +611,7 @@ public static <T> T readValue(ObjectNode jsonValue,\n      *            Java object to convert\n      * @return converted JSON value\n      */\n-    public static ObjectNode writeValue(Object object) {\n+    public static BaseJsonNode writeValue(Object object) {\n         return objectMapper.valueToTree(object);\n     }\n \n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/JavaScriptSemantics.java b/flow-server/src/main/java/com/vaadin/flow/internal/JavaScriptSemantics.java\nindex e1200c3f7e7..4519f8027d5 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/JavaScriptSemantics.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/JavaScriptSemantics.java\n@@ -15,6 +15,10 @@\n  */\n package com.vaadin.flow.internal;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.NullNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n import elemental.json.JsonValue;\n \n /**\n@@ -46,12 +50,16 @@ private JavaScriptSemantics() {\n      *         JavaScript semantics, otherwise <code>false</code>\n      */\n     public static boolean isTrueish(Object value) {\n-        if (value == null) {\n+        if (value == null || value instanceof NullNode) {\n             return false;\n         } else if (value instanceof Boolean) {\n             return ((Boolean) value).booleanValue();\n         } else if (value instanceof JsonValue) {\n             return ((JsonValue) value).asBoolean();\n+        } else if (value instanceof ObjectNode) {\n+            return ((JsonNode) value).asBoolean(true);\n+        } else if (value instanceof JsonNode) {\n+            return ((JsonNode) value).asBoolean();\n         } else if (value instanceof Number) {\n             double number = ((Number) value).doubleValue();\n             // Special comparison to keep sonarqube happy\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/change/MapPutChange.java b/flow-server/src/main/java/com/vaadin/flow/internal/change/MapPutChange.java\nindex 11feb2edc52..1fe7696a210 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/change/MapPutChange.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/change/MapPutChange.java\n@@ -17,6 +17,11 @@\n package com.vaadin.flow.internal.change;\n \n import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.BooleanNode;\n+import com.fasterxml.jackson.databind.node.NumericNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import com.fasterxml.jackson.databind.node.ValueNode;\n \n import com.vaadin.flow.internal.ConstantPool;\n import com.vaadin.flow.internal.JacksonCodec;\n@@ -90,9 +95,23 @@ protected void populateJson(JsonObject json, ConstantPool constantPool) {\n         if (value instanceof StateNode node) {\n             json.put(JsonConstants.CHANGE_PUT_NODE_VALUE,\n                     Json.create(node.getId()));\n-        } else if (value instanceof JsonNode node) {\n+        } else if (value instanceof ObjectNode node) {\n             json.put(JsonConstants.CHANGE_PUT_VALUE, Json.parse(JacksonCodec\n                     .encodeWithConstantPool(node, constantPool).toString()));\n+        } else if (value instanceof NumericNode node) {\n+            json.put(JsonConstants.CHANGE_PUT_VALUE, Json.create(JacksonCodec\n+                    .encodeWithConstantPool(node, constantPool).doubleValue()));\n+        } else if (value instanceof BooleanNode node) {\n+            json.put(JsonConstants.CHANGE_PUT_VALUE,\n+                    Json.create(JacksonCodec\n+                            .encodeWithConstantPool(node, constantPool)\n+                            .booleanValue()));\n+        } else if (value instanceof TextNode node) {\n+            json.put(JsonConstants.CHANGE_PUT_VALUE, Json.create(JacksonCodec\n+                    .encodeWithConstantPool(node, constantPool).textValue()));\n+        } else if (value instanceof ValueNode node) {\n+            json.put(JsonConstants.CHANGE_PUT_VALUE, Json.create(JacksonCodec\n+                    .encodeWithConstantPool(node, constantPool).toString()));\n         } else {\n             json.put(JsonConstants.CHANGE_PUT_VALUE,\n                     JsonCodec.encodeWithConstantPool(value, constantPool));\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/AbstractPropertyMap.java b/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/AbstractPropertyMap.java\nindex 89023905974..c99e8a96e17 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/AbstractPropertyMap.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/AbstractPropertyMap.java\n@@ -18,6 +18,7 @@\n import java.io.Serializable;\n import java.util.stream.Stream;\n \n+import com.vaadin.flow.internal.JacksonCodec;\n import com.vaadin.flow.internal.JsonCodec;\n import com.vaadin.flow.internal.ReflectTools;\n import com.vaadin.flow.internal.StateNode;\n@@ -127,6 +128,7 @@ public static boolean isValidValueType(Serializable value) {\n         }\n         Class<?> type = ReflectTools.convertPrimitiveType(value.getClass());\n         return JsonCodec.canEncodeWithoutTypeInfo(type)\n+                || JacksonCodec.canEncodeWithoutTypeInfo(type)\n                 || StateNode.class.isAssignableFrom(type);\n     }\n \n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/DefaultRpcDecoder.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/DefaultRpcDecoder.java\nindex 47675a6c805..f235f084ef7 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/DefaultRpcDecoder.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/DefaultRpcDecoder.java\n@@ -15,6 +15,10 @@\n  */\n package com.vaadin.flow.server.communication.rpc;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import com.vaadin.flow.internal.JacksonCodec;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.JsonCodec;\n \n import elemental.json.JsonValue;\n@@ -37,12 +41,17 @@ public class DefaultRpcDecoder implements RpcDecoder {\n \n     @Override\n     public boolean isApplicable(JsonValue value, Class<?> type) {\n-        return JsonCodec.canEncodeWithoutTypeInfo(type);\n+        return JsonCodec.canEncodeWithoutTypeInfo(type)\n+                || JacksonCodec.canEncodeWithoutTypeInfo(type);\n     }\n \n     @Override\n     public <T> T decode(JsonValue value, Class<T> type)\n             throws RpcDecodeException {\n+        if (type.isAssignableFrom(JsonNode.class)) {\n+            return JacksonCodec.decodeAs(JacksonUtils.mapElemental(value),\n+                    type);\n+        }\n         return JsonCodec.decodeAs(value, type);\n     }\n \n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/component/AbstractSinglePropertyFieldTest.java b/flow-server/src/test/java/com/vaadin/flow/component/AbstractSinglePropertyFieldTest.java\nindex 12a380668b9..b81917bdc52 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/component/AbstractSinglePropertyFieldTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/component/AbstractSinglePropertyFieldTest.java\n@@ -21,6 +21,9 @@\n import java.util.List;\n import java.util.stream.Collectors;\n \n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.BaseJsonNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeType;\n import org.apache.commons.lang3.SerializationUtils;\n import org.junit.Assert;\n import org.junit.Rule;\n@@ -32,10 +35,8 @@\n import com.vaadin.flow.dom.DomListenerRegistration;\n import com.vaadin.flow.dom.Element;\n import com.vaadin.flow.function.SerializableRunnable;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.JsonUtils;\n-import com.vaadin.flow.server.VaadinService;\n-import com.vaadin.flow.server.VaadinSession;\n-import com.vaadin.flow.server.MockServletServiceSessionSetup.TestVaadinServlet;\n import com.vaadin.flow.server.MockServletServiceSessionSetup.TestVaadinServletService;\n import com.vaadin.tests.PublicApiAnalyzer;\n import com.vaadin.tests.util.MockUI;\n@@ -538,4 +539,67 @@ public void getValue_wrapExistingElement_elementHasProperty_valueIsThePropertyVa\n         Assert.assertEquals(\"foo\", field.getValue());\n     }\n \n+    /** Jackson tests **/\n+\n+    @Tag(\"tag\")\n+    private static class JacksonField\n+            extends AbstractSinglePropertyField<JacksonField, BaseJsonNode> {\n+        public JacksonField() {\n+            super(\"property\", JacksonUtils.nullNode(), false);\n+        }\n+    }\n+\n+    @Tag(\"tag\")\n+    private static class JacksonArrayField\n+            extends AbstractSinglePropertyField<JacksonArrayField, ArrayNode> {\n+        public JacksonArrayField() {\n+            super(\"property\", JacksonUtils.createArray(), false);\n+        }\n+    }\n+\n+    @Test\n+    public void jacksonField() {\n+        JacksonField field = new JacksonField();\n+        ValueChangeMonitor<BaseJsonNode> monitor = new ValueChangeMonitor<>(\n+                field);\n+\n+        Assert.assertEquals(JsonNodeType.NULL, field.getValue().getNodeType());\n+        monitor.assertNoEvent();\n+\n+        field.setValue(JacksonUtils.createArray(JacksonUtils.createNode(\"foo\"),\n+                JacksonUtils.createNode(42)));\n+        monitor.discard();\n+        Assert.assertEquals(\"[\\\"foo\\\",42]\",\n+                field.getElement().getPropertyRaw(\"property\").toString());\n+\n+        field.getElement().setPropertyJson(\"property\",\n+                JacksonUtils.createObjectNode());\n+        monitor.discard();\n+        Assert.assertEquals(\"{}\", field.getValue().toString());\n+\n+        field.getElement().setProperty(\"property\", \"text\");\n+        monitor.discard();\n+        Assert.assertEquals(\"\\\"text\\\"\", field.getValue().toString());\n+    }\n+\n+    @Test\n+    public void jacksonArrayField() {\n+        JacksonArrayField field = new JacksonArrayField();\n+        ValueChangeMonitor<ArrayNode> monitor = new ValueChangeMonitor<>(field);\n+\n+        Assert.assertEquals(JsonNodeType.ARRAY, field.getValue().getNodeType());\n+        Assert.assertEquals(0, field.getValue().size());\n+        monitor.assertNoEvent();\n+\n+        field.setValue(JacksonUtils.createArray(JacksonUtils.createNode(\"foo\"),\n+                JacksonUtils.createNode(42)));\n+        monitor.discard();\n+        Assert.assertEquals(\"[\\\"foo\\\",42]\",\n+                field.getElement().getPropertyRaw(\"property\").toString());\n+\n+        field.getElement().setPropertyJson(\"property\", JacksonUtils.createArray(\n+                JacksonUtils.createNode(37), JacksonUtils.createNode(\"bar\")));\n+        monitor.discard();\n+        Assert.assertEquals(\"[37,\\\"bar\\\"]\", field.getValue().toString());\n+    }\n }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/dom/ElementJacksonTest.java b/flow-server/src/test/java/com/vaadin/flow/dom/ElementJacksonTest.java\nnew file mode 100644\nindex 00000000000..63ed1271e30\n--- /dev/null\n+++ b/flow-server/src/test/java/com/vaadin/flow/dom/ElementJacksonTest.java\n@@ -0,0 +1,2642 @@\n+package com.vaadin.flow.dom;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.Serializable;\n+import java.lang.ref.WeakReference;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.time.Duration;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+import java.util.stream.DoubleStream;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.BaseJsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import net.jcip.annotations.NotThreadSafe;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import com.vaadin.flow.component.Html;\n+import com.vaadin.flow.component.Tag;\n+import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.component.internal.PendingJavaScriptInvocation;\n+import com.vaadin.flow.component.internal.UIInternals.JavaScriptInvocation;\n+import com.vaadin.flow.component.page.PendingJavaScriptResult;\n+import com.vaadin.flow.dom.impl.BasicElementStateProvider;\n+import com.vaadin.flow.internal.JacksonUtils;\n+import com.vaadin.flow.internal.JsonUtils;\n+import com.vaadin.flow.internal.NullOwner;\n+import com.vaadin.flow.internal.StateNode;\n+import com.vaadin.flow.internal.nodefeature.ComponentMapping;\n+import com.vaadin.flow.internal.nodefeature.ElementAttributeMap;\n+import com.vaadin.flow.internal.nodefeature.ElementListenerMap;\n+import com.vaadin.flow.internal.nodefeature.ElementListenersTest;\n+import com.vaadin.flow.internal.nodefeature.ElementPropertyMap;\n+import com.vaadin.flow.internal.nodefeature.ElementStylePropertyMap;\n+import com.vaadin.flow.internal.nodefeature.VirtualChildrenList;\n+import com.vaadin.flow.server.MockVaadinServletService;\n+import com.vaadin.flow.server.StreamResource;\n+import com.vaadin.flow.server.VaadinSession;\n+import com.vaadin.flow.shared.JsonConstants;\n+import com.vaadin.flow.shared.Registration;\n+import com.vaadin.tests.util.AlwaysLockedVaadinSession;\n+import com.vaadin.tests.util.MockUI;\n+import com.vaadin.tests.util.TestUtil;\n+\n+@NotThreadSafe\n+public class ElementJacksonTest extends AbstractNodeTest {\n+\n+    @Test\n+    public void createElementWithTag() {\n+        Element e = ElementFactory.createDiv();\n+        Assert.assertEquals(Tag.DIV, e.getTag());\n+        Assert.assertFalse(e.hasAttribute(\"is\"));\n+        Assert.assertFalse(e.isTextNode());\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void createElementWithInvalidTag() {\n+        new Element(\"<div>\");\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void createElementWithEmptyTag() {\n+        new Element(\"\");\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void createElementWithNullTag() {\n+        new Element(null);\n+    }\n+\n+    @Test\n+    public void elementsUpdateSameData() {\n+        Element te = new Element(\"testelem\");\n+        Element e = Element.get(te.getNode());\n+\n+        // Elements must be equal but not necessarily the same\n+        Assert.assertEquals(te, e);\n+\n+        te.setAttribute(\"foo\", \"bar\");\n+        Assert.assertEquals(\"bar\", e.getAttribute(\"foo\"));\n+\n+        e.setAttribute(\"baz\", \"123\");\n+        Assert.assertEquals(\"123\", te.getAttribute(\"baz\"));\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void getElementFromInvalidNode() {\n+        StateNode node = new StateNode(ElementPropertyMap.class);\n+        Element.get(node);\n+    }\n+\n+    @Test\n+    public void publicElementMethodsShouldReturnElement() {\n+        Set<String> ignore = new HashSet<>();\n+        ignore.add(\"toString\");\n+        ignore.add(\"hashCode\");\n+        ignore.add(\"equals\");\n+\n+        // Returns EventRegistrationHandle\n+        ignore.add(\"addEventListener\");\n+        ignore.add(\"addAttachListener\");\n+        ignore.add(\"addDetachListener\");\n+        ignore.add(\"addPropertyChangeListener\");\n+\n+        // Returns index of child element\n+        ignore.add(\"indexOfChild\");\n+        // Component wrapper\n+        ignore.add(\"as\");\n+        // Possibly returns a remover or a wrapped return value in the future\n+        ignore.add(\"callFunction\");\n+        ignore.add(\"executeJavaScript\");\n+        // Returns a future-ish thing with access to the return value\n+        ignore.add(\"callJsFunction\");\n+        ignore.add(\"executeJs\");\n+\n+        // ignore shadow root methods\n+        ignore.add(\"attachShadow\");\n+        ignore.add(\"getShadowRoot\");\n+\n+        assertMethodsReturnType(Element.class, ignore);\n+    }\n+\n+    @Test\n+    public void publicElementStyleMethodsShouldReturnElement() {\n+        Set<String> ignore = new HashSet<>();\n+        ignore.add(\"toString\");\n+        ignore.add(\"hashCode\");\n+        ignore.add(\"equals\");\n+\n+        for (Method m : Style.class.getDeclaredMethods()) {\n+            if (!Modifier.isPublic(m.getModifiers())) {\n+                continue;\n+            }\n+            if (Modifier.isStatic(m.getModifiers())) {\n+                continue;\n+            }\n+            if (m.getName().startsWith(\"get\") || m.getName().startsWith(\"has\")\n+                    || m.getName().startsWith(\"is\")\n+                    || ignore.contains(m.getName())) {\n+                // Ignore\n+            } else {\n+                // Setters and such\n+                Class<?> returnType = m.getReturnType();\n+                Assert.assertEquals(\n+                        \"Method \" + m.getName() + \" has invalid return type\",\n+                        Style.class, returnType);\n+            }\n+        }\n+\n+    }\n+\n+    @Test\n+    public void stringAttribute() {\n+        Element e = ElementFactory.createDiv();\n+        e.setAttribute(\"foo\", \"bar\");\n+        Assert.assertEquals(\"bar\", e.getAttribute(\"foo\"));\n+    }\n+\n+    @Test\n+    public void setEmptyAttribute() {\n+        Element e = ElementFactory.createDiv();\n+        e.setAttribute(\"foo\", \"\");\n+        Assert.assertEquals(\"\", e.getAttribute(\"foo\"));\n+    }\n+\n+    @Test\n+    public void setBooleanAttribute() {\n+        Element e = ElementFactory.createDiv();\n+\n+        e.setAttribute(\"foo\", true);\n+        Assert.assertEquals(\"\", e.getAttribute(\"foo\"));\n+        Assert.assertTrue(e.hasAttribute(\"foo\"));\n+\n+        e.setAttribute(\"foo\", false);\n+        Assert.assertEquals(null, e.getAttribute(\"foo\"));\n+        Assert.assertFalse(e.hasAttribute(\"foo\"));\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void setNullAttribute() {\n+        Element e = ElementFactory.createDiv();\n+        e.setAttribute(\"foo\", (String) null);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void getNullAttribute() {\n+        Element e = ElementFactory.createDiv();\n+        e.getAttribute(null);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void hasNullAttribute() {\n+        Element e = ElementFactory.createDiv();\n+        e.hasAttribute(null);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void removeNullAttribute() {\n+        Element e = ElementFactory.createDiv();\n+        e.removeAttribute(null);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void setInvalidAttribute() {\n+        Element e = ElementFactory.createDiv();\n+        e.setAttribute(\"\\\"foo\\\"\", \"bar\");\n+    }\n+\n+    @Test\n+    public void hasDefinedAttribute() {\n+        Element e = ElementFactory.createDiv();\n+        e.setAttribute(\"foo\", \"bar\");\n+        Assert.assertTrue(e.hasAttribute(\"foo\"));\n+    }\n+\n+    @Test\n+    public void doesNotHaveUndefinedAttribute() {\n+        Element e = ElementFactory.createDiv();\n+        Assert.assertFalse(e.hasAttribute(\"foo\"));\n+    }\n+\n+    @Test\n+    public void doesNotHaveRemovedAttribute() {\n+        Element e = ElementFactory.createDiv();\n+        e.setAttribute(\"foo\", \"bar\");\n+        e.removeAttribute(\"foo\");\n+        Assert.assertFalse(e.hasAttribute(\"foo\"));\n+    }\n+\n+    @Test\n+    public void removeNonExistingAttributeIsNoOp() {\n+        Element e = ElementFactory.createDiv();\n+        Assert.assertFalse(e.hasAttribute(\"foo\"));\n+        e.removeAttribute(\"foo\");\n+        Assert.assertFalse(e.hasAttribute(\"foo\"));\n+    }\n+\n+    @Test\n+    public void attributesWhenNoneDefined() {\n+        Element e = ElementFactory.createDiv();\n+        Assert.assertEquals(0, e.getAttributeNames().count());\n+    }\n+\n+    @Test\n+    public void attributesNames() {\n+        Element e = ElementFactory.createDiv();\n+        e.setAttribute(\"foo\", \"bar\");\n+        Assert.assertArrayEquals(new String[] { \"foo\" },\n+                e.getAttributeNames().toArray());\n+    }\n+\n+    @Test\n+    public void attributesNamesAfterRemoved() {\n+        Element e = ElementFactory.createDiv();\n+        e.setAttribute(\"foo\", \"bar\");\n+        e.setAttribute(\"bar\", \"baz\");\n+        e.removeAttribute(\"foo\");\n+        Assert.assertArrayEquals(new String[] { \"bar\" },\n+                e.getAttributeNames().toArray());\n+    }\n+\n+    @Test\n+    public void setGetAttributeValueCaseSensitive() {\n+        Element e = new Element(Tag.SPAN);\n+        e.setAttribute(\"foo\", \"bAr\");\n+        Assert.assertEquals(\"bAr\", e.getAttribute(\"foo\"));\n+        e.setAttribute(\"foo\", \"BAR\");\n+        Assert.assertEquals(\"BAR\", e.getAttribute(\"foo\"));\n+    }\n+\n+    @Test\n+    public void setGetAttributeNameCaseInsensitive() {\n+        Element e = new Element(Tag.SPAN);\n+        e.setAttribute(\"foo\", \"bar\");\n+        e.setAttribute(\"FOO\", \"baz\");\n+\n+        Assert.assertEquals(\"baz\", e.getAttribute(\"foo\"));\n+        Assert.assertEquals(\"baz\", e.getAttribute(\"FOO\"));\n+    }\n+\n+    @Test\n+    public void hasAttributeNamesCaseInsensitive() {\n+        Element e = new Element(Tag.SPAN);\n+        e.setAttribute(\"fooo\", \"bar\");\n+        Assert.assertTrue(e.hasAttribute(\"fOoO\"));\n+    }\n+\n+    @Test\n+    public void getAttributeNamesLowerCase() {\n+        Element e = new Element(Tag.SPAN);\n+        e.setAttribute(\"FOO\", \"bar\");\n+        e.setAttribute(\"Baz\", \"bar\");\n+\n+        Set<String> attributeNames = e.getAttributeNames()\n+                .collect(Collectors.toSet());\n+        Assert.assertTrue(attributeNames.contains(\"foo\"));\n+        Assert.assertFalse(attributeNames.contains(\"FOO\"));\n+        Assert.assertTrue(attributeNames.contains(\"baz\"));\n+        Assert.assertFalse(attributeNames.contains(\"Baz\"));\n+    }\n+\n+    @Test\n+    public void removeDetachedFromParent() {\n+        Element otherElement = new Element(\"other\");\n+        Assert.assertNull(otherElement.getParent());\n+        otherElement.removeFromParent(); // No op\n+        Assert.assertNull(otherElement.getParent());\n+    }\n+\n+    @Test\n+    public void getDetachedParent() {\n+        Element otherElement = new Element(\"other\");\n+        Assert.assertNull(otherElement.getParent());\n+        Assert.assertNull(otherElement.getParentNode());\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void addNullEventListener() {\n+        Element e = ElementFactory.createDiv();\n+        e.addEventListener(\"foo\", null);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void addEventListenerForNullType() {\n+        Element e = ElementFactory.createDiv();\n+        e.addEventListener(null, ignore -> {\n+        });\n+    }\n+\n+    @Test\n+    public void equalsSelf() {\n+        Element e = ElementFactory.createDiv();\n+        Assert.assertTrue(e.equals(e));\n+    }\n+\n+    @Test\n+    public void notEqualsNull() {\n+        Element e = ElementFactory.createDiv();\n+        Assert.assertFalse(e.equals(null));\n+    }\n+\n+    @Test\n+    public void notEqualsString() {\n+        Element e = ElementFactory.createDiv();\n+        Assert.assertFalse(e.equals(Tag.DIV));\n+    }\n+\n+    // @Test\n+    // public void listenerReceivesEvents() {\n+    // Element e = ElementFactory.createDiv();\n+    // AtomicInteger listenerCalls = new AtomicInteger(0);\n+    // DomEventListener myListener = event -> listenerCalls.incrementAndGet();\n+    //\n+    // e.addEventListener(\"click\", myListener);\n+    // Assert.assertEquals(0, listenerCalls.get());\n+    // e.getNode().getFeature(ElementListenerMap.class)\n+    // .fireEvent(new DomEvent(e, \"click\", JacksonUtils.createObjectNode()));\n+    // Assert.assertEquals(1, listenerCalls.get());\n+    // }\n+    //\n+    // @Test\n+    // public void listenerReceivesEventsWithAllowInert() {\n+    // Element e = ElementFactory.createDiv();\n+    // // Inert the node, verify events no more passed through\n+    // InertData inertData = e.getNode().getFeature(InertData.class);\n+    // inertData.setInertSelf(true);\n+    // inertData.generateChangesFromEmpty();\n+    //\n+    // AtomicInteger listenerCalls = new AtomicInteger(0);\n+    // DomEventListener myListener = event -> listenerCalls.incrementAndGet();\n+    //\n+    // DomListenerRegistration domListenerRegistration = e\n+    // .addEventListener(\"click\", myListener);\n+    // Assert.assertEquals(0, listenerCalls.get());\n+    // e.getNode().getFeature(ElementListenerMap.class)\n+    // .fireEvent(new DomEvent(e, \"click\", JacksonUtils.createObjectNode()));\n+    // // Event should not go through\n+    // Assert.assertEquals(0, listenerCalls.get());\n+    //\n+    // // Now should pass inert check and get notified\n+    // domListenerRegistration.allowInert();\n+    // e.getNode().getFeature(ElementListenerMap.class)\n+    // .fireEvent(new DomEvent(e, \"click\", JacksonUtils.createObjectNode()));\n+    // Assert.assertEquals(1, listenerCalls.get());\n+    //\n+    // }\n+\n+    @Test\n+    public void getPropertyDefaults() {\n+        Element element = ElementFactory.createDiv();\n+\n+        element.setProperty(\"null\", null);\n+        element.setProperty(\"empty\", \"\");\n+\n+        Assert.assertEquals(\"d\", element.getProperty(\"null\", \"d\"));\n+        Assert.assertEquals(\"d\", element.getProperty(\"notThere\", \"d\"));\n+        Assert.assertNotEquals(\"d\", element.getProperty(\"empty\", \"d\"));\n+\n+        Assert.assertTrue(element.getProperty(\"null\", true));\n+        Assert.assertFalse(element.getProperty(\"null\", false));\n+        Assert.assertTrue(element.getProperty(\"notThere\", true));\n+        Assert.assertFalse(element.getProperty(\"notThere\", false));\n+        Assert.assertFalse(element.getProperty(\"empty\", true));\n+        Assert.assertFalse(element.getProperty(\"empty\", false));\n+\n+        Assert.assertEquals(0.1, element.getProperty(\"null\", 0.1), 0);\n+        Assert.assertEquals(0.1, element.getProperty(\"notThere\", 0.1), 0);\n+        Assert.assertNotEquals(0.1, element.getProperty(\"empty\", 0.1), 0);\n+\n+        Assert.assertEquals(42, element.getProperty(\"null\", 42));\n+        Assert.assertEquals(42, element.getProperty(\"notThere\", 42));\n+        Assert.assertNotEquals(42, element.getProperty(\"empty\", 42));\n+    }\n+\n+    @Test\n+    public void getPropertyStringConversions() {\n+        assertPropertyString(null, null);\n+        assertPropertyString(\"foo\", \"foo\");\n+        assertPropertyString(\"\", \"\");\n+        assertPropertyString(\"45.6e1\", \"45.6e1\");\n+        assertPropertyString(\"true\", Boolean.TRUE);\n+        assertPropertyString(\"false\", Boolean.FALSE);\n+        assertPropertyString(String.valueOf(143534123423.243e23),\n+                Double.valueOf(143534123423.243e23));\n+        assertPropertyString(\"42\", Double.valueOf(42));\n+\n+        assertPropertyString(null, JacksonUtils.nullNode());\n+        assertPropertyString(\"{}\", JacksonUtils.createObjectNode());\n+    }\n+\n+    private static void assertPropertyString(String expected, Object value) {\n+        Element element = createPropertyAssertElement(value);\n+\n+        Assert.assertEquals(expected, element.getProperty(\"property\"));\n+    }\n+\n+    @Test\n+    public void testPropertyBooleanConversions() {\n+        assertPropertyBoolean(true, Boolean.TRUE);\n+        assertPropertyBoolean(false, Boolean.FALSE);\n+\n+        assertPropertyBoolean(true, \"true\");\n+        assertPropertyBoolean(true, \"false\");\n+        assertPropertyBoolean(false, \"\");\n+\n+        assertPropertyBoolean(true, Double.valueOf(1));\n+        assertPropertyBoolean(true, Double.valueOf(3.14));\n+        assertPropertyBoolean(false, Double.valueOf(0));\n+        assertPropertyBoolean(false, Double.valueOf(Double.NaN));\n+\n+        assertPropertyBoolean(false, JacksonUtils.nullNode());\n+        assertPropertyBoolean(false, JacksonUtils.createNode(false));\n+        assertPropertyBoolean(true, JacksonUtils.createNode(true));\n+        assertPropertyBoolean(true, JacksonUtils.createObjectNode());\n+    }\n+\n+    private static void assertPropertyBoolean(boolean expected, Object value) {\n+        Element element = createPropertyAssertElement(value);\n+\n+        // !expected -> default value will always fail\n+        boolean actual = element.getProperty(\"property\", !expected);\n+\n+        if (expected) {\n+            Assert.assertTrue(actual);\n+        } else {\n+            Assert.assertFalse(actual);\n+        }\n+    }\n+\n+    @Test\n+    public void testPropertyDoubleConversions() {\n+        assertPropertyDouble(1, Double.valueOf(1));\n+        assertPropertyDouble(.1, Double.valueOf(.1));\n+        assertPropertyDouble(Double.NaN, Double.valueOf(Double.NaN));\n+\n+        assertPropertyDouble(1, \"1\");\n+        assertPropertyDouble(.1, \".1\");\n+        assertPropertyDouble(12.34e56, \"12.34e56\");\n+        assertPropertyDouble(Double.NaN, \"foo\");\n+\n+        assertPropertyDouble(1, Boolean.TRUE);\n+        assertPropertyDouble(0, Boolean.FALSE);\n+\n+        assertPropertyDouble(.1, JacksonUtils.createNode(.1));\n+        assertPropertyDouble(1, JacksonUtils.createNode(true));\n+        assertPropertyDouble(0, JacksonUtils.createNode(false));\n+        assertPropertyDouble(.1, JacksonUtils.createNode(\".1\"));\n+        assertPropertyDouble(Double.NaN, JacksonUtils.createNode(\"foo\"));\n+        assertPropertyDouble(Double.NaN, JacksonUtils.createObjectNode());\n+    }\n+\n+    private static void assertPropertyDouble(double expected, Object value) {\n+        Element element = createPropertyAssertElement(value);\n+\n+        int delta = 0;\n+        double defaultValue = 1234d;\n+\n+        if (defaultValue == expected) {\n+            throw new IllegalArgumentException(\n+                    \"Expecting the default value might cause unintended results\");\n+        }\n+\n+        Assert.assertEquals(expected,\n+                element.getProperty(\"property\", defaultValue), delta);\n+    }\n+\n+    @Test\n+    public void testPropertyIntConversions() {\n+        assertPropertyInt(1, Double.valueOf(1));\n+        assertPropertyInt(1, Double.valueOf(1.9));\n+        assertPropertyInt(0, Double.valueOf(Double.NaN));\n+        assertPropertyInt(Integer.MAX_VALUE, Double.valueOf(12.34e56));\n+\n+        assertPropertyInt(1, \"1\");\n+        assertPropertyInt(1, \"1.9\");\n+        assertPropertyInt(Integer.MAX_VALUE, \"12.34e56\");\n+        assertPropertyInt(0, \"foo\");\n+\n+        assertPropertyInt(1, Boolean.TRUE);\n+        assertPropertyInt(0, Boolean.FALSE);\n+\n+        assertPropertyInt(1, JacksonUtils.createNode(1));\n+        assertPropertyInt(1, JacksonUtils.createNode(1.9));\n+        assertPropertyInt(1, JacksonUtils.createNode(true));\n+        assertPropertyInt(0, JacksonUtils.createNode(false));\n+        assertPropertyInt(1, JacksonUtils.createNode(\"1\"));\n+        assertPropertyInt(0, JacksonUtils.createNode(\"foo\"));\n+        assertPropertyInt(0, JacksonUtils.createObjectNode());\n+    }\n+\n+    private static void assertPropertyInt(int expected, Object value) {\n+        Element element = createPropertyAssertElement(value);\n+\n+        int defaultValue = 1234;\n+\n+        if (defaultValue == expected) {\n+            throw new IllegalArgumentException(\n+                    \"Expecting the default value might cause unintended results\");\n+        }\n+\n+        Assert.assertEquals(expected,\n+                element.getProperty(\"property\", defaultValue));\n+    }\n+\n+    public static class SimpleBean {\n+        private String string = \"value\";\n+        private int number = 1;\n+        private float flt = 2.3f;\n+        private double dbl = 4.56;\n+\n+        public String getString() {\n+            return string;\n+        }\n+\n+        public int getNumber() {\n+            return number;\n+        }\n+\n+        public float getFlt() {\n+            return flt;\n+        }\n+\n+        public double getDbl() {\n+            return dbl;\n+        }\n+    }\n+\n+    public static class BeanWithTemporalFields {\n+\n+        public LocalTime localTime = LocalTime.of(10, 23, 55);\n+\n+        public LocalDate localDate = LocalDate.of(2024, 6, 26);\n+\n+        public LocalDateTime localDateTime = localDate.atTime(localTime);\n+\n+        public java.sql.Date sqlDate = java.sql.Date.valueOf(localDate);\n+\n+        public Date date = new Date(sqlDate.getTime());\n+\n+        public ZonedDateTime zonedDateTime = ZonedDateTime.of(localDateTime,\n+                ZoneId.of(\"Europe/Rome\"));\n+\n+        public Duration duration = Duration.ofSeconds(10);\n+    }\n+\n+    @Test\n+    public void propertyRawValues() {\n+        Element element = ElementFactory.createDiv();\n+\n+        element.setProperty(\"p\", \"v\");\n+        Assert.assertEquals(\"v\", element.getPropertyRaw(\"p\"));\n+\n+        element.setProperty(\"p\", true);\n+        Assert.assertEquals(Boolean.TRUE, element.getPropertyRaw(\"p\"));\n+\n+        element.setProperty(\"p\", 3.14);\n+        Assert.assertEquals(Double.valueOf(3.14), element.getPropertyRaw(\"p\"));\n+\n+        element.setPropertyJson(\"p\", JacksonUtils.createObjectNode());\n+        Assert.assertEquals(ObjectNode.class,\n+                element.getPropertyRaw(\"p\").getClass());\n+\n+        // TODO: Use setPropertyBean when updated to jackson\n+        element.setPropertyJson(\"p\", JacksonUtils.beanToJson(new SimpleBean()));\n+        JsonNode json = (JsonNode) element.getPropertyRaw(\"p\");\n+        Assert.assertEquals(\"value\", json.get(\"string\").textValue());\n+        Assert.assertEquals(1.0, json.get(\"number\").doubleValue(), 0.0);\n+        Assert.assertEquals(2.3f, json.get(\"flt\").floatValue(), 0.0);\n+        Assert.assertEquals(4.56, json.get(\"dbl\").doubleValue(), 0.0);\n+\n+        List<SimpleBean> list = new ArrayList<>();\n+        SimpleBean bean1 = new SimpleBean();\n+        bean1.string = \"bean1\";\n+        SimpleBean bean2 = new SimpleBean();\n+        bean2.string = \"bean2\";\n+        list.add(bean1);\n+        list.add(bean2);\n+\n+        // TODO: Use setPropertyList when updated to jackson\n+        element.setPropertyJson(\"p\", JacksonUtils.listToJson(list));\n+        ArrayNode jsonArray = (ArrayNode) element.getPropertyRaw(\"p\");\n+        Assert.assertEquals(\"bean1\",\n+                jsonArray.get(0).get(\"string\").textValue());\n+        Assert.assertEquals(\"bean2\",\n+                jsonArray.get(1).get(\"string\").textValue());\n+\n+        Map<String, SimpleBean> map = new HashMap<>();\n+        map.put(\"one\", bean1);\n+        map.put(\"two\", bean2);\n+        // TODO: Use setPropertyMap when updated to jackson\n+        element.setPropertyJson(\"p\", JacksonUtils.mapToJson(map));\n+        JsonNode jsonObject = (JsonNode) element.getPropertyRaw(\"p\");\n+        Assert.assertEquals(\"bean1\",\n+                jsonObject.get(\"one\").get(\"string\").textValue());\n+        Assert.assertEquals(\"bean2\",\n+                jsonObject.get(\"two\").get(\"string\").textValue());\n+    }\n+\n+    @Test\n+    public void addAndRemoveProperty() {\n+        Element element = ElementFactory.createDiv();\n+\n+        Assert.assertFalse(element.hasProperty(\"foo\"));\n+        element.removeProperty(\"foo\");\n+        Assert.assertFalse(element.hasProperty(\"foo\"));\n+\n+        element.setProperty(\"foo\", \"bar\");\n+        Assert.assertTrue(element.hasProperty(\"foo\"));\n+        element.setProperty(\"foo\", null);\n+        Assert.assertTrue(element.hasProperty(\"foo\"));\n+\n+        element.removeProperty(\"foo\");\n+        Assert.assertFalse(element.hasProperty(\"foo\"));\n+    }\n+\n+    @Test\n+    public void propertyNames() {\n+        Element element = ElementFactory.createDiv();\n+\n+        Assert.assertEquals(0, element.getPropertyNames().count());\n+\n+        element.setProperty(\"foo\", \"bar\");\n+        Assert.assertEquals(Collections.singleton(\"foo\"),\n+                element.getPropertyNames().collect(Collectors.toSet()));\n+\n+        element.removeProperty(\"foo\");\n+        Assert.assertEquals(0, element.getPropertyNames().count());\n+    }\n+\n+    @Test\n+    public void setProperty_javaTimeObject() {\n+        BeanWithTemporalFields bean = new BeanWithTemporalFields();\n+        Element element = ElementFactory.createDiv();\n+\n+        // TODO: Use setPropertyBean when updated to jackson\n+        element.setPropertyJson(\"bean\", JacksonUtils.beanToJson(bean));\n+        ObjectNode json = (ObjectNode) element.getPropertyRaw(\"bean\");\n+\n+        Assert.assertTrue(\"LocalTime not serialized as expected\",\n+                JacksonUtils.jsonEquals(createNumberArray(10, 23, 55),\n+                        json.get(\"localTime\")));\n+        Assert.assertTrue(\"LocalDate not serialized as expected\",\n+                JacksonUtils.jsonEquals(createNumberArray(2024, 6, 26),\n+                        json.get(\"localDate\")));\n+        Assert.assertTrue(\"LocalDateTime not serialized as expected\",\n+                JacksonUtils.jsonEquals(\n+                        createNumberArray(2024, 6, 26, 10, 23, 55),\n+                        json.get(\"localDateTime\")));\n+        Assert.assertEquals(\"ZonedDateTime not serialized as expected\",\n+                bean.zonedDateTime.toEpochSecond(),\n+                json.get(\"zonedDateTime\").longValue(), 0);\n+        Assert.assertEquals(\"ZonedDateTime not serialized as expected\",\n+                bean.sqlDate.getTime(), json.get(\"sqlDate\").longValue(), 0);\n+        Assert.assertEquals(\"ZonedDateTime not serialized as expected\",\n+                bean.date.getTime(), json.get(\"date\").longValue(), 0);\n+        Assert.assertEquals(10.0, json.get(\"duration\").doubleValue(), 0);\n+    }\n+\n+    private static Element createPropertyAssertElement(Object value) {\n+        Element element = ElementFactory.createDiv();\n+\n+        if (value instanceof Number && !(value instanceof Double)) {\n+            throw new IllegalArgumentException(\n+                    \"Double is the only accepted numeric type\");\n+        }\n+\n+        if (value instanceof BaseJsonNode) {\n+            element.setPropertyJson(\"property\", (BaseJsonNode) value);\n+        } else if (value instanceof Serializable) {\n+            BasicElementStateProvider.get().setProperty(element.getNode(),\n+                    \"property\", (Serializable) value, true);\n+        } else if (value == null) {\n+            element.setProperty(\"property\", null);\n+        } else {\n+            throw new IllegalArgumentException(\n+                    \"Invalid value type: \" + value.getClass());\n+        }\n+\n+        return element;\n+    }\n+\n+    @Test\n+    public void testGetTextContent() {\n+        Element child = new Element(\"child\");\n+        child.appendChild(Element.createText(\"bar\"));\n+\n+        Element element = ElementFactory.createDiv();\n+\n+        element.appendChild(Element.createText(\"foo\"));\n+        element.appendChild(child);\n+\n+        Assert.assertEquals(\"foobar\", element.getTextRecursively());\n+    }\n+\n+    @Test\n+    public void testSetTextContent() {\n+        Element element = ElementFactory.createDiv();\n+        element.setText(\"foo\");\n+\n+        Assert.assertEquals(\"foo\", element.getTextRecursively());\n+        Assert.assertEquals(1, element.getChildCount());\n+        Assert.assertTrue(element.getChild(0).isTextNode());\n+    }\n+\n+    @Test\n+    public void testSetTextContentRemovesOldContent() {\n+        Element child = new Element(\"child\");\n+        Element element = ElementFactory.createDiv();\n+        element.appendChild(child);\n+\n+        element.setText(\"foo\");\n+\n+        Assert.assertNull(child.getParent());\n+        Assert.assertEquals(\"foo\", element.getTextRecursively());\n+    }\n+\n+    @Test\n+    public void testSetTextReplacesOldTextNode() {\n+        Element element = ElementFactory.createDiv();\n+        Element text = Element.createText(\"foo\");\n+        element.appendChild(text);\n+\n+        element.setText(\"bar\");\n+\n+        Assert.assertEquals(element, text.getParent());\n+        Assert.assertEquals(\"bar\", text.getTextRecursively());\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testSetTextContentPropertyThrows() {\n+        Element element = new Element(\"element\");\n+        element.setProperty(\"textContent\", \"foo\");\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void setOuterHtmlProperty_throws() {\n+        Element element = new Element(\"element\");\n+        element.setProperty(\"outerHTML\", \"<br>\");\n+    }\n+\n+    @Test\n+    public void setInnerHtmlProeprty_setValueAndRemoveAllChildren() {\n+        Element element = new Element(\"element\");\n+        element.appendChild(ElementFactory.createAnchor(),\n+                ElementFactory.createDiv());\n+        element.setProperty(\"innerHTML\", \"<br>\");\n+\n+        Assert.assertEquals(0, element.getChildCount());\n+        Assert.assertEquals(\"<br>\", element.getProperty(\"innerHTML\"));\n+    }\n+\n+    @Test\n+    public void testGetTextContentProperty() {\n+        Element element = ElementFactory.createDiv();\n+        element.setText(\"foo\");\n+\n+        Assert.assertFalse(element.hasProperty(\"textContent\"));\n+        Assert.assertNull(element.getProperty(\"textContent\"));\n+    }\n+\n+    @Test\n+    // Because that's how it works in browsers\n+    public void clearTextContentRemovesChild() {\n+        Element element = ElementFactory.createDiv();\n+        element.setText(\"foo\");\n+\n+        Assert.assertEquals(1, element.getChildCount());\n+\n+        element.setText(\"\");\n+\n+        Assert.assertEquals(0, element.getChildCount());\n+    }\n+\n+    @Test\n+    public void newElementClasses() {\n+        Element element = ElementFactory.createDiv();\n+\n+        Assert.assertFalse(element.hasAttribute(\"class\"));\n+        Assert.assertEquals(Collections.emptySet(), element.getClassList());\n+    }\n+\n+    @Test\n+    public void addElementClasses() {\n+        Element element = ElementFactory.createDiv();\n+\n+        element.getClassList().add(\"foo\");\n+\n+        Assert.assertEquals(Collections.singleton(\"foo\"),\n+                element.getClassList());\n+        Assert.assertTrue(element.hasAttribute(\"class\"));\n+\n+        Assert.assertEquals(Collections.singleton(\"class\"),\n+                element.getAttributeNames().collect(Collectors.toSet()));\n+        Assert.assertTrue(element.hasAttribute(\"class\"));\n+        Assert.assertEquals(\"foo\", element.getAttribute(\"class\"));\n+\n+        element.getClassList().add(\"bar\");\n+\n+        Assert.assertEquals(\"foo bar\", element.getAttribute(\"class\"));\n+    }\n+\n+    @Test\n+    public void testSetClassAttribute() {\n+        Element element = ElementFactory.createDiv();\n+\n+        // Get instance right away to see that changes are live\n+        Set<String> classList = element.getClassList();\n+\n+        element.setAttribute(\"class\", \"       foo bar \");\n+\n+        Assert.assertEquals(2, classList.size());\n+        Assert.assertTrue(classList.contains(\"foo\"));\n+        Assert.assertTrue(classList.contains(\"bar\"));\n+\n+        Assert.assertNull(\"class should not be stored as a regular attribute\",\n+                element.getNode().getFeature(ElementAttributeMap.class)\n+                        .get(\"class\"));\n+    }\n+\n+    @Test\n+    public void testSetEmptyClassAttribute() {\n+        Element element = new Element(Tag.DIV);\n+\n+        // Get instance right away to see that changes are live\n+        Set<String> classList = element.getClassList();\n+\n+        element.setAttribute(\"class\", \"\");\n+\n+        Assert.assertEquals(0, classList.size());\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testAddEmptyClassname() {\n+        Element element = new Element(Tag.DIV);\n+\n+        // Get instance right away to see that changes are live\n+        Set<String> classList = element.getClassList();\n+\n+        classList.add(\"\");\n+    }\n+\n+    @Test\n+    public void testRemoveClassName() {\n+        Element element = ElementFactory.createDiv();\n+\n+        element.setAttribute(\"class\", \"foo bar\");\n+\n+        element.getClassList().remove(\"foo\");\n+\n+        Assert.assertEquals(\"bar\", element.getAttribute(\"class\"));\n+\n+        element.getClassList().remove(\"bar\");\n+\n+        Assert.assertNull(element.getAttribute(\"class\"));\n+        Assert.assertFalse(element.hasAttribute(\"class\"));\n+\n+        Assert.assertEquals(0, element.getAttributeNames().count());\n+    }\n+\n+    @Test\n+    public void testRemoveClassAttribute() {\n+        Element element = ElementFactory.createDiv();\n+\n+        Set<String> classList = element.getClassList();\n+\n+        classList.add(\"foo\");\n+\n+        element.removeAttribute(\"class\");\n+\n+        Assert.assertEquals(Collections.emptySet(), classList);\n+    }\n+\n+    @Test\n+    public void addExistingClass_noop() {\n+        Element element = ElementFactory.createDiv();\n+\n+        element.setAttribute(\"class\", \"foo\");\n+\n+        element.getClassList().add(\"foo\");\n+\n+        Assert.assertEquals(Collections.singleton(\"foo\"),\n+                element.getClassList());\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testAddClassWithSpaces_throws() {\n+        ElementFactory.createDiv().getClassList().add(\"foo bar\");\n+    }\n+\n+    @Test\n+    public void testRemoveClassWithSpaces() {\n+        ClassList cl = ElementFactory.createDiv().getClassList();\n+        cl.add(\"foo\");\n+        cl.add(\"bar\");\n+        cl.remove(\"foo bar\");\n+        Assert.assertEquals(2, cl.size());\n+    }\n+\n+    @Test\n+    public void testContainsClassWithSpaces() {\n+        ClassList cl = ElementFactory.createDiv().getClassList();\n+        cl.add(\"foo\");\n+        cl.add(\"bar\");\n+\n+        Assert.assertFalse(cl.contains(\"foo bar\"));\n+    }\n+\n+    @Test\n+    public void classListSetAdd() {\n+        Element e = new Element(Tag.DIV);\n+        Assert.assertTrue(e.getClassList().set(\"foo\", true));\n+        Assert.assertEquals(\"foo\", e.getAttribute(\"class\"));\n+        Assert.assertFalse(e.getClassList().set(\"foo\", true));\n+        Assert.assertEquals(\"foo\", e.getAttribute(\"class\"));\n+    }\n+\n+    @Test\n+    public void classListSetRemove() {\n+        Element e = new Element(Tag.DIV);\n+        e.setAttribute(\"class\", \"foo bar\");\n+        Assert.assertTrue(e.getClassList().set(\"foo\", false));\n+        Assert.assertEquals(\"bar\", e.getAttribute(\"class\"));\n+        Assert.assertFalse(e.getClassList().set(\"foo\", false));\n+        Assert.assertEquals(\"bar\", e.getAttribute(\"class\"));\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testClassListProperty_throws() {\n+        ElementFactory.createDiv().setProperty(\"classList\", \"foo\");\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testClassNameProperty_throws() {\n+        ElementFactory.createDiv().setProperty(\"className\", \"foo\");\n+    }\n+\n+    public void setStyle() {\n+        Element e = ElementFactory.createDiv();\n+        Style s = e.getStyle();\n+        s.set(\"foo\", \"bar\");\n+        Assert.assertEquals(\"bar\", s.get(\"foo\"));\n+    }\n+\n+    @Test\n+    public void getUnsetStyle() {\n+        Element e = ElementFactory.createDiv();\n+        Style s = e.getStyle();\n+        Assert.assertNull(s.get(\"foo\"));\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void getNullStyle() {\n+        Element e = ElementFactory.createDiv();\n+        Style s = e.getStyle();\n+        s.get(null);\n+    }\n+\n+    @Test\n+    public void replaceStyle() {\n+        Element e = ElementFactory.createDiv();\n+        Style s = e.getStyle();\n+        s.set(\"foo\", \"bar\");\n+        s.set(\"foo\", \"baz\");\n+        Assert.assertEquals(\"baz\", s.get(\"foo\"));\n+    }\n+\n+    @Test\n+    public void removeSingleStyle() {\n+        Element e = ElementFactory.createDiv();\n+        Style s = e.getStyle();\n+        s.set(\"foo\", \"bar\");\n+        s.remove(\"foo\");\n+        Assert.assertEquals(null, s.get(\"foo\"));\n+    }\n+\n+    @Test\n+    public void emptyStyleAsAttribute() {\n+        Element e = ElementFactory.createDiv();\n+        Assert.assertFalse(e.hasAttribute(\"style\"));\n+        Assert.assertNull(e.getAttribute(\"style\"));\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void semicolonInStyle() {\n+        Element e = ElementFactory.createDiv();\n+        Style s = e.getStyle();\n+        s.set(\"border\", \"1 px solid black;\");\n+    }\n+\n+    @Test\n+    public void getSingleStyleAsAttribute() {\n+        Element e = ElementFactory.createDiv();\n+        Style s = e.getStyle();\n+        s.setBorder(\"1px solid black\");\n+        Assert.assertTrue(e.hasAttribute(\"style\"));\n+        Assert.assertEquals(\"border:1px solid black\", e.getAttribute(\"style\"));\n+    }\n+\n+    @Test\n+    public void getMultipleStylesAsAttribute() {\n+        Element e = ElementFactory.createDiv();\n+        Style s = e.getStyle();\n+        s.set(\"border\", \"1px solid black\");\n+        s.setMargin(\"1em\");\n+        Assert.assertTrue(e.hasAttribute(\"style\"));\n+        assertEqualsOne(\n+                new String[] { \"border:1px solid black;margin:1em\",\n+                        \"margin:1em;border:1px solid black\" },\n+                e.getAttribute(\"style\"));\n+    }\n+\n+    @Test\n+    public void setSingleStyleAsAttribute() {\n+        Element e = ElementFactory.createDiv();\n+        String style = \"width:12em\";\n+        e.setAttribute(\"style\", style);\n+        Assert.assertEquals(style, e.getAttribute(\"style\"));\n+\n+    }\n+\n+    @Test\n+    public void setStyleAttributeMultipleTimes() {\n+        Element e = ElementFactory.createDiv();\n+        e.setAttribute(\"style\", \"width:12em\");\n+        e.setAttribute(\"style\", \"height:12em\");\n+        Assert.assertEquals(\"height:12em\", e.getAttribute(\"style\"));\n+\n+    }\n+\n+    @Test\n+    public void setMultipleStylesAsAttribute() {\n+        Element e = ElementFactory.createDiv();\n+        String style = \"width:12em;height:2em\";\n+        e.setAttribute(\"style\", style);\n+        Assert.assertEquals(style, e.getAttribute(\"style\"));\n+\n+    }\n+\n+    @Test\n+    public void setComplexStylesAsAttribute() {\n+        testStyleAttribute(\n+                \"background:rgb(0,255,0) url(http://foo.bar/smiley.gif) no-repeat fixed center\");\n+        testStyleAttribute(\"content:\\\"content: bar\\\"\");\n+        testStyleAttribute(\"width:12px;content:\\\"content: bar\\\";height:12px\");\n+        testStyleAttribute(\"width:calc(100% - 80px)\");\n+        testStyleAttribute(\"width:var(--widthB)\");\n+        testStyleAttribute(\"color:var(--mainColor)\");\n+        // Reduced calc does not work (http://cssnext.io/features/#reduced-calc)\n+        // testStyleAttribute(\"font-size:calc(var(--fontSize) * 2)\");\n+    }\n+\n+    private void testStyleAttribute(String style) {\n+        Element e = ElementFactory.createDiv();\n+        e.setAttribute(\"style\", style);\n+        Assert.assertEquals(style, e.getAttribute(\"style\"));\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void setInvalidStyleAsAttribute() {\n+        Element e = ElementFactory.createDiv();\n+        e.setAttribute(\"style\", \"width:\");\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void setInvalidStyleAsAttribute2() {\n+        Element e = ElementFactory.createDiv();\n+        e.setAttribute(\"style\", \"width\");\n+    }\n+\n+    @Test\n+    public void setVendorSpecificStylesProperty() {\n+        Element e = ElementFactory.createDiv();\n+        String style = \"-moz-user-input:inherit\";\n+        e.setAttribute(\"style\", style);\n+        Assert.assertEquals(\"inherit\", e.getStyle().get(\"mozUserInput\"));\n+        Assert.assertEquals(style, e.getAttribute(\"style\"));\n+    }\n+\n+    @Test\n+    public void setVendorSpecificStylesValue() {\n+        Element e = ElementFactory.createDiv();\n+        String style = \"display:-moz-box\";\n+        e.setAttribute(\"style\", style);\n+        Assert.assertEquals(\"-moz-box\", e.getStyle().get(\"display\"));\n+        Assert.assertEquals(style, e.getAttribute(\"style\"));\n+\n+    }\n+\n+    @Test\n+    public void setStyleAttributeTrailingSemicolon() {\n+        Element e = ElementFactory.createDiv();\n+        String style = \"width:12em\";\n+        e.setAttribute(\"style\", style + \";\");\n+        Assert.assertEquals(style, e.getAttribute(\"style\"));\n+    }\n+\n+    private void assertEqualsOne(String[] expected, String actual) {\n+        for (String string : expected) {\n+            if (string.equals(actual)) {\n+                return;\n+            }\n+        }\n+        String expectedString = Arrays.stream(expected)\n+                .collect(Collectors.joining(\"> or <\"));\n+        Assert.fail(\n+                \"expected: <\" + expectedString + \"> but was <\" + actual + \">\");\n+\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void setEmptyStyleName() {\n+        Element e = ElementFactory.createDiv();\n+        e.getStyle().set(\"\", \"foo\");\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void setStyleNameExtraWhitespace() {\n+        Element e = ElementFactory.createDiv();\n+        e.getStyle().set(\"   color\", \"red\");\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void setStyleNameColon() {\n+        Element e = ElementFactory.createDiv();\n+        e.getStyle().set(\"color:\", \"red\");\n+    }\n+\n+    @Test\n+    public void setStyleValueExtraWhitespace() {\n+        Element e = ElementFactory.createDiv();\n+        e.getStyle().setColor(\"red   \");\n+        Assert.assertEquals(\"color:red\", e.getAttribute(\"style\"));\n+        Assert.assertEquals(\"red\", e.getStyle().get(\"color\"));\n+    }\n+\n+    @Test\n+    public void removeStyles() {\n+        Element element = ElementFactory.createDiv();\n+\n+        element.getStyle().setZIndex(12);\n+        element.getStyle().set(\"background\", \"blue\");\n+\n+        element.getStyle().remove(\"background\");\n+\n+        Assert.assertEquals(\"z-index:12\", element.getAttribute(\"style\"));\n+\n+        element.getStyle().setZIndex(null);\n+\n+        Assert.assertNull(element.getAttribute(\"style\"));\n+        Assert.assertFalse(element.hasAttribute(\"style\"));\n+\n+        Assert.assertEquals(0, element.getStyle().getNames().count());\n+    }\n+\n+    @Test\n+    public void removeStyleAttribute() {\n+        Element element = ElementFactory.createDiv();\n+\n+        Style style = element.getStyle();\n+\n+        style.setBorder(\"1px solid green\");\n+\n+        element.removeAttribute(\"style\");\n+\n+        Assert.assertEquals(0, style.getNames().count());\n+    }\n+\n+    @Test\n+    public void validStyleWithSemicolon() {\n+        Element element = ElementFactory.createDiv();\n+        String validStyle = \"background: url('foo;bar')\";\n+        Style style = element.getStyle();\n+        style.setBackground(validStyle);\n+        Assert.assertEquals(validStyle, style.get(\"background\"));\n+    }\n+\n+    @Test\n+    public void dashSeparatedSetStyle() {\n+        Element element = ElementFactory.createDiv();\n+\n+        Style style = element.getStyle();\n+        style.set(\"border-color\", \"blue\");\n+        Assert.assertEquals(\"blue\", style.get(\"border-color\"));\n+    }\n+\n+    @Test\n+    public void dashSeparatedGetStyle() {\n+        Element element = ElementFactory.createDiv();\n+\n+        Style style = element.getStyle();\n+        style.set(\"borderColor\", \"blue\");\n+        style.set(\"border-foo\", \"bar\");\n+        Assert.assertEquals(\"blue\", style.get(\"border-color\"));\n+        Assert.assertEquals(\"bar\", style.get(\"border-foo\"));\n+    }\n+\n+    @Test\n+    public void dashSeparatedHasStyle() {\n+        Element element = ElementFactory.createDiv();\n+\n+        Style style = element.getStyle();\n+        style.set(\"borderColor\", \"blue\");\n+        style.set(\"border-foo\", \"bar\");\n+        Assert.assertTrue(style.has(\"border-color\"));\n+        Assert.assertTrue(style.has(\"border-foo\"));\n+    }\n+\n+    @Test\n+    public void dashSeparatedRemoveStyle() {\n+        Element element = ElementFactory.createDiv();\n+\n+        Style style = element.getStyle();\n+        style.set(\"borderColor\", \"blue\");\n+        style.set(\"border-foo\", \"bar\");\n+        style.remove(\"border-color\");\n+        style.remove(\"border-foo\");\n+\n+        Assert.assertFalse(style.has(\"border-color\"));\n+        Assert.assertFalse(style.has(\"border-foo\"));\n+    }\n+\n+    @Test\n+    public void styleGetNamesDashAndCamelCase() {\n+        Element element = ElementFactory.createDiv();\n+\n+        Style style = element.getStyle();\n+        style.set(\"borderColor\", \"blue\");\n+        style.set(\"border-foo\", \"bar\");\n+\n+        List<String> styles = style.getNames().collect(Collectors.toList());\n+        Assert.assertEquals(2, styles.size());\n+        Assert.assertTrue(styles.contains(\"border-color\"));\n+        Assert.assertTrue(styles.contains(\"border-foo\"));\n+    }\n+\n+    @Test\n+    public void nullStyleValue() {\n+        Element element = ElementFactory.createDiv();\n+\n+        Style style = element.getStyle();\n+        style.set(\"borderColor\", \"blue\");\n+        style.set(\"borderColor\", null);\n+        List<String> styles = style.getNames().collect(Collectors.toList());\n+        Assert.assertFalse(styles.contains(\"borderColor\"));\n+    }\n+\n+    @Test\n+    public void sendPropertyInCorrectFormatToClient() {\n+        assertClientStyleKey(\"--some-variable\", \"--some-variable\");\n+        assertClientStyleKey(\"-webkit-border\", \"-webkit-border\");\n+        assertClientStyleKey(\"background-color\", \"background-color\");\n+        assertClientStyleKey(\"color\", \"color\");\n+\n+        assertClientStyleKey(\"-webkit-border\", \"webkitBorder\");\n+        assertClientStyleKey(\"background-color\", \"backgroundColor\");\n+    }\n+\n+    private void assertClientStyleKey(String sentToClient,\n+            String setUsingStyleApi) {\n+        Element element = ElementFactory.createDiv();\n+        StateNode stateNode = element.getNode();\n+        ElementStylePropertyMap map = stateNode\n+                .getFeature(ElementStylePropertyMap.class);\n+\n+        Style style = element.getStyle();\n+        style.set(setUsingStyleApi, \"foo\");\n+        Assert.assertEquals(\"foo\", style.get(setUsingStyleApi));\n+        Assert.assertEquals(sentToClient, map.getPropertyNames().toArray()[0]);\n+        Assert.assertEquals(\"foo\", map.getProperty(sentToClient));\n+\n+    }\n+\n+    @Test\n+    public void customPropertyStyle() {\n+        Element element = ElementFactory.createDiv();\n+        Style style = element.getStyle();\n+        style.set(\"--some-variable\", \"foo\");\n+        Assert.assertEquals(\"foo\", style.get(\"--some-variable\"));\n+    }\n+\n+    @Test\n+    public void useCustomPropertyStyle() {\n+        Element element = ElementFactory.createDiv();\n+\n+        Style style = element.getStyle();\n+        style.setColor(\"var(--some-var)\");\n+        Assert.assertEquals(\"var(--some-var)\", style.get(\"color\"));\n+    }\n+\n+    // TODO: enable when DomEvent uses jackson\n+    // @Test\n+    // public void listenersFiredInRegisteredOrder() {\n+    // Element element = ElementFactory.createDiv();\n+    // List<Integer> eventOrder = new ArrayList<>();\n+    //\n+    // for (int i = 0; i < 10; i++) {\n+    // final int j = i;\n+    // element.addEventListener(\"click\", e -> {\n+    // eventOrder.add(j);\n+    // });\n+    // }\n+    // fireEvent(element, \"click\");\n+    // Assert.assertArrayEquals(new Object[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 },\n+    // eventOrder.toArray());\n+    // }\n+    //\n+    // private void fireEvent(Element element, String eventType) {\n+    // element.getNode().getFeature(ElementListenerMap.class).fireEvent(\n+    // new DomEvent(element, eventType, JacksonUtils.createObjectNode()));\n+    //\n+    // }\n+    //\n+    // @Test\n+    // public void eventsWhenListenerIsRegisteredManyTimes() {\n+    // AtomicInteger invocations = new AtomicInteger(0);\n+    //\n+    // DomEventListener listener = e -> {\n+    // invocations.incrementAndGet();\n+    // };\n+    // Element element = ElementFactory.createDiv();\n+    // element.addEventListener(\"click\", listener);\n+    // element.addEventListener(\"click\", listener);\n+    //\n+    // fireEvent(element, \"click\");\n+    //\n+    // Assert.assertEquals(2, invocations.get());\n+    // }\n+\n+    @Test(expected = IllegalStateException.class)\n+    public void addAsOwnChild() {\n+        Element element = ElementFactory.createDiv();\n+        element.appendChild(element);\n+    }\n+\n+    @Test(expected = IllegalStateException.class)\n+    public void addAsChildOfChild() {\n+        Element parent = ElementFactory.createDiv();\n+        Element child = ElementFactory.createDiv();\n+        parent.appendChild(child);\n+\n+        child.appendChild(parent);\n+    }\n+\n+    @Override\n+    protected void checkIsNotChild(Node<?> parent, Element child) {\n+        Assert.assertNotEquals(child.getParent(), parent);\n+\n+        super.checkIsNotChild(parent, child);\n+    }\n+\n+    @Test\n+    public void testGetOwnTextContent() {\n+        Element element = ElementFactory.createDiv();\n+        element.setText(\"foo\");\n+        element.appendChild(ElementFactory.createDiv()\n+                .appendChild(ElementFactory.createSpan(\"span contents\")));\n+        element.appendChild(ElementFactory.createStrong(\"strong contents\"));\n+        element.appendChild(Element.createText(\"Another text node\"));\n+\n+        Assert.assertEquals(\"fooAnother text node\", element.getText());\n+        Assert.assertEquals(\"foospan contentsstrong contentsAnother text node\",\n+                element.getTextRecursively());\n+    }\n+\n+    @Test\n+    public void setResourceAttribute_elementIsNotAttached_elementHasAttribute() {\n+        UI.setCurrent(createUI());\n+        Element element = ElementFactory.createDiv();\n+        String resName = \"resource\";\n+        StreamResource resource = createEmptyResource(resName);\n+        element.setAttribute(\"foo\", resource);\n+\n+        Assert.assertTrue(element.hasAttribute(\"foo\"));\n+\n+        Assert.assertTrue(element.getAttribute(\"foo\").endsWith(resName));\n+    }\n+\n+    @Test\n+    public void setResourceAttribute_elementIsNotAttachedAndHasAttribute_elementHasAttribute() {\n+        UI.setCurrent(createUI());\n+        Element element = ElementFactory.createDiv();\n+        element.setAttribute(\"foo\", \"bar\");\n+\n+        String resName = \"resource\";\n+        StreamResource resource = createEmptyResource(resName);\n+        element.setAttribute(\"foo\", resource);\n+\n+        Assert.assertTrue(element.hasAttribute(\"foo\"));\n+\n+        Assert.assertTrue(element.getAttribute(\"foo\").endsWith(resName));\n+    }\n+\n+    @Test\n+    public void setResourceAttributeSeveralTimes_elementIsNotAttached_elementHasAttribute() {\n+        UI.setCurrent(createUI());\n+        Element element = ElementFactory.createDiv();\n+        String resName = \"resource\";\n+        StreamResource resource = createEmptyResource(resName);\n+        element.setAttribute(\"foo\", resource);\n+\n+        Assert.assertTrue(element.hasAttribute(\"foo\"));\n+\n+        resName = \"resource1\";\n+        resource = createEmptyResource(resName);\n+        element.setAttribute(\"foo\", resource);\n+\n+        Assert.assertTrue(element.hasAttribute(\"foo\"));\n+\n+        Assert.assertTrue(element.getAttribute(\"foo\").endsWith(resName));\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void setResourceAttribute_nullValue() {\n+        Element element = ElementFactory.createDiv();\n+        element.setAttribute(\"foo\", (StreamResource) null);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void setResourceAttribute_classAttribute() {\n+        Element element = ElementFactory.createDiv();\n+        element.setAttribute(\"class\", Mockito.mock(StreamResource.class));\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void setResourceAttribute_nullAttribute() {\n+        Element element = ElementFactory.createDiv();\n+        element.setAttribute(null, Mockito.mock(StreamResource.class));\n+    }\n+\n+    @Test\n+    public void setResourceAttribute_elementIsAttached_elementHasAttribute() {\n+        UI ui = createUI();\n+        UI.setCurrent(ui);\n+        String resName = \"resource\";\n+        StreamResource resource = createEmptyResource(resName);\n+        ui.getElement().setAttribute(\"foo\", resource);\n+\n+        Assert.assertTrue(ui.getElement().hasAttribute(\"foo\"));\n+        Assert.assertTrue(\n+                ui.getElement().getAttribute(\"foo\").endsWith(resName));\n+    }\n+\n+    @Test\n+    public void setResourceAttribute_elementIsAttached_setAnotherResource()\n+            throws URISyntaxException {\n+        UI ui = createUI();\n+        UI.setCurrent(ui);\n+        StreamResource resource = createEmptyResource(\"resource1\");\n+        ui.getElement().setAttribute(\"foo\", resource);\n+\n+        String uri = ui.getElement().getAttribute(\"foo\");\n+        Optional<StreamResource> res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, new URI(uri));\n+        Assert.assertTrue(res.isPresent());\n+\n+        String resName = \"resource2\";\n+        ui.getElement().setAttribute(\"foo\", createEmptyResource(resName));\n+        res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, new URI(uri));\n+        Assert.assertFalse(res.isPresent());\n+\n+        Assert.assertTrue(ui.getElement().hasAttribute(\"foo\"));\n+        Assert.assertTrue(\n+                ui.getElement().getAttribute(\"foo\").endsWith(resName));\n+    }\n+\n+    @Test\n+    public void setResourceAttribute_elementIsAttached_setRawAttribute()\n+            throws URISyntaxException, InterruptedException {\n+        UI ui = createUI();\n+        UI.setCurrent(ui);\n+        StreamResource resource = createEmptyResource(\"resource\");\n+        ui.getElement().setAttribute(\"foo\", resource);\n+\n+        String uri = ui.getElement().getAttribute(\"foo\");\n+        Optional<StreamResource> res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, new URI(uri));\n+        Assert.assertTrue(res.isPresent());\n+        res = null;\n+\n+        WeakReference<StreamResource> ref = new WeakReference<>(resource);\n+        resource = null;\n+\n+        ui.getElement().setAttribute(\"foo\", \"bar\");\n+\n+        TestUtil.isGarbageCollected(ref);\n+        res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, new URI(uri));\n+\n+        Assert.assertFalse(res.isPresent());\n+        Assert.assertTrue(ui.getElement().hasAttribute(\"foo\"));\n+        Assert.assertTrue(ui.getElement().getAttribute(\"foo\").equals(\"bar\"));\n+    }\n+\n+    @Test\n+    public void setResourceAttribute_elementIsAttached_removeAttribute()\n+            throws URISyntaxException, InterruptedException {\n+        UI ui = createUI();\n+        UI.setCurrent(ui);\n+        StreamResource resource = createEmptyResource(\"resource\");\n+        ui.getElement().setAttribute(\"foo\", resource);\n+\n+        String uri = ui.getElement().getAttribute(\"foo\");\n+        Optional<StreamResource> res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, new URI(uri));\n+        Assert.assertTrue(res.isPresent());\n+        res = null;\n+\n+        WeakReference<StreamResource> ref = new WeakReference<>(resource);\n+        resource = null;\n+\n+        ui.getElement().removeAttribute(\"foo\");\n+        TestUtil.isGarbageCollected(ref);\n+\n+        res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, new URI(uri));\n+        Assert.assertFalse(res.isPresent());\n+        Assert.assertFalse(ui.getElement().hasAttribute(\"foo\"));\n+        Assert.assertNull(ui.getElement().getAttribute(\"foo\"));\n+    }\n+\n+    @Test\n+    public void setResourceAttribute_attachElement_resourceIsRegistered()\n+            throws URISyntaxException {\n+        UI ui = createUI();\n+        UI.setCurrent(ui);\n+\n+        StreamResource resource = createEmptyResource(\"resource\");\n+        Element element = ElementFactory.createDiv();\n+        element.setAttribute(\"foo\", resource);\n+\n+        ui.getElement().appendChild(element);\n+\n+        Assert.assertTrue(element.hasAttribute(\"foo\"));\n+\n+        String uri = element.getAttribute(\"foo\");\n+        Optional<StreamResource> res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, new URI(uri));\n+        Assert.assertTrue(res.isPresent());\n+    }\n+\n+    @Test\n+    public void setResourceAttribute_attachElement_setAnotherResource()\n+            throws URISyntaxException, InterruptedException {\n+        UI ui = createUI();\n+        UI.setCurrent(ui);\n+\n+        StreamResource resource = createEmptyResource(\"resource1\");\n+        Element element = ElementFactory.createDiv();\n+        element.setAttribute(\"foo\", resource);\n+\n+        WeakReference<StreamResource> ref = new WeakReference<>(resource);\n+        resource = null;\n+\n+        String resName = \"resource2\";\n+        element.setAttribute(\"foo\", createEmptyResource(resName));\n+\n+        ui.getElement().appendChild(element);\n+\n+        Assert.assertTrue(element.hasAttribute(\"foo\"));\n+\n+        String uri = element.getAttribute(\"foo\");\n+        Optional<StreamResource> res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, new URI(uri));\n+        Assert.assertTrue(res.isPresent());\n+        Assert.assertTrue(uri.endsWith(resName));\n+\n+        // allow GC to collect element and all its (detach) listeners\n+        element = null;\n+\n+        TestUtil.isGarbageCollected(ref);\n+    }\n+\n+    @Test\n+    public void setResourceAttribute_attachElement_setRawAttribute()\n+            throws URISyntaxException, InterruptedException {\n+        UI ui = createUI();\n+        UI.setCurrent(ui);\n+\n+        StreamResource resource = createEmptyResource(\"resource\");\n+        Element element = ElementFactory.createDiv();\n+        element.setAttribute(\"foo\", resource);\n+\n+        WeakReference<StreamResource> ref = new WeakReference<>(resource);\n+        resource = null;\n+\n+        element.setAttribute(\"foo\", \"bar\");\n+\n+        TestUtil.isGarbageCollected(ref);\n+\n+        ui.getElement().appendChild(element);\n+\n+        Assert.assertTrue(element.hasAttribute(\"foo\"));\n+        Assert.assertEquals(\"bar\", element.getAttribute(\"foo\"));\n+    }\n+\n+    @Test\n+    public void setResourceAttribute_attachElement_removeAttribute()\n+            throws URISyntaxException, InterruptedException {\n+        UI ui = createUI();\n+        UI.setCurrent(ui);\n+\n+        StreamResource resource = createEmptyResource(\"resource\");\n+        Element element = ElementFactory.createDiv();\n+        element.setAttribute(\"foo\", resource);\n+\n+        WeakReference<StreamResource> ref = new WeakReference<>(resource);\n+        resource = null;\n+\n+        element.removeAttribute(\"foo\");\n+\n+        ui.getElement().appendChild(element);\n+\n+        TestUtil.isGarbageCollected(ref);\n+\n+        Assert.assertFalse(element.hasAttribute(\"foo\"));\n+\n+        Assert.assertNull(element.getAttribute(\"foo\"));\n+    }\n+\n+    @Test\n+    public void setResourceAttribute_attachElement_setAnotherResourceAfterAttaching()\n+            throws URISyntaxException, InterruptedException {\n+        UI ui = createUI();\n+        UI.setCurrent(ui);\n+\n+        StreamResource resource = createEmptyResource(\"resource1\");\n+        Element element = ElementFactory.createDiv();\n+        element.setAttribute(\"foo\", resource);\n+\n+        WeakReference<StreamResource> ref = new WeakReference<>(resource);\n+        resource = null;\n+\n+        ui.getElement().appendChild(element);\n+\n+        String resName = \"resource2\";\n+        element.setAttribute(\"foo\", createEmptyResource(resName));\n+\n+        Assert.assertTrue(element.hasAttribute(\"foo\"));\n+\n+        TestUtil.isGarbageCollected(ref);\n+\n+        Assert.assertNull(ref.get());\n+\n+        String uri = element.getAttribute(\"foo\");\n+        Optional<StreamResource> res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, new URI(uri));\n+        Assert.assertTrue(res.isPresent());\n+        Assert.assertTrue(uri.endsWith(resName));\n+    }\n+\n+    @Test\n+    public void setResourceAttribute_attachElement_setRawAttributeAfterAttaching()\n+            throws URISyntaxException, InterruptedException {\n+        UI ui = createUI();\n+        UI.setCurrent(ui);\n+\n+        StreamResource resource = createEmptyResource(\"resource\");\n+        Element element = ElementFactory.createDiv();\n+        element.setAttribute(\"foo\", resource);\n+\n+        WeakReference<StreamResource> ref = new WeakReference<>(resource);\n+        resource = null;\n+\n+        ui.getElement().appendChild(element);\n+\n+        element.setAttribute(\"foo\", \"bar\");\n+\n+        TestUtil.isGarbageCollected(ref);\n+\n+        Assert.assertNull(ref.get());\n+\n+        Assert.assertTrue(element.hasAttribute(\"foo\"));\n+\n+        Assert.assertEquals(\"bar\", element.getAttribute(\"foo\"));\n+    }\n+\n+    @Test\n+    public void setResourceAttribute_attachElement_removeAttributeAfterAttaching()\n+            throws URISyntaxException, InterruptedException {\n+        UI ui = createUI();\n+        UI.setCurrent(ui);\n+\n+        StreamResource resource = createEmptyResource(\"resource\");\n+        Element element = ElementFactory.createDiv();\n+        element.setAttribute(\"foo\", resource);\n+\n+        WeakReference<StreamResource> ref = new WeakReference<>(resource);\n+        resource = null;\n+\n+        ui.getElement().appendChild(element);\n+\n+        element.removeAttribute(\"foo\");\n+\n+        TestUtil.isGarbageCollected(ref);\n+\n+        Assert.assertNull(ref.get());\n+\n+        Assert.assertFalse(element.hasAttribute(\"foo\"));\n+\n+        Assert.assertNull(element.getAttribute(\"foo\"));\n+    }\n+\n+    @Test\n+    public void setResourceAttribute_detachElement_resourceIsUnregistered()\n+            throws URISyntaxException, InterruptedException {\n+        UI ui = createUI();\n+        UI.setCurrent(ui);\n+        Element element = ElementFactory.createDiv();\n+        ui.getElement().appendChild(element);\n+\n+        String resName = \"resource\";\n+        StreamResource resource = createEmptyResource(resName);\n+        element.setAttribute(\"foo\", resource);\n+        String attribute = element.getAttribute(\"foo\");\n+\n+        WeakReference<StreamResource> ref = new WeakReference<>(resource);\n+        resource = null;\n+\n+        URI uri = new URI(attribute);\n+        Optional<StreamResource> res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, uri);\n+        Assert.assertTrue(res.isPresent());\n+\n+        ui.getElement().removeAllChildren();\n+\n+        res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, uri);\n+        Assert.assertFalse(res.isPresent());\n+\n+        Assert.assertTrue(element.hasAttribute(\"foo\"));\n+        Assert.assertNotNull(element.getAttribute(\"foo\"));\n+        Assert.assertTrue(element.getAttribute(\"foo\").endsWith(resName));\n+\n+        element.setAttribute(\"foo\", \"bar\");\n+        Assert.assertTrue(element.hasAttribute(\"foo\"));\n+        Assert.assertEquals(\"bar\", element.getAttribute(\"foo\"));\n+\n+        TestUtil.isGarbageCollected(ref);\n+    }\n+\n+    @Test\n+    public void setResourceAttribute_detachAndReattachElement_resourceReregistered()\n+            throws URISyntaxException {\n+        UI ui = createUI();\n+        UI.setCurrent(ui);\n+        Element element = ElementFactory.createDiv();\n+        ui.getElement().appendChild(element);\n+\n+        String resName = \"resource\";\n+        StreamResource resource = createEmptyResource(resName);\n+        element.setAttribute(\"foo\", resource);\n+        String attribute = element.getAttribute(\"foo\");\n+\n+        URI uri = new URI(attribute);\n+        Optional<StreamResource> res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, uri);\n+        Assert.assertTrue(res.isPresent());\n+\n+        ui.getElement().removeAllChildren();\n+\n+        res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, uri);\n+        Assert.assertFalse(res.isPresent());\n+\n+        ui.getElement().appendChild(element);\n+\n+        res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, uri);\n+        Assert.assertTrue(res.isPresent());\n+    }\n+\n+    @Test\n+    public void setResourceAttribute_attachAndDetachAndReattachElement_resourceReregistered()\n+            throws URISyntaxException {\n+        UI ui = createUI();\n+        UI.setCurrent(ui);\n+        Element element = ElementFactory.createDiv();\n+\n+        String resName = \"resource\";\n+        StreamResource resource = createEmptyResource(resName);\n+        element.setAttribute(\"foo\", resource);\n+        String attribute = element.getAttribute(\"foo\");\n+\n+        ui.getElement().appendChild(element);\n+\n+        URI uri = new URI(attribute);\n+        Optional<StreamResource> res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, uri);\n+        Assert.assertTrue(res.isPresent());\n+\n+        ui.getElement().removeAllChildren();\n+\n+        res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, uri);\n+        Assert.assertFalse(res.isPresent());\n+\n+        ui.getElement().appendChild(element);\n+\n+        res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, uri);\n+        Assert.assertTrue(res.isPresent());\n+    }\n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void setResourceAttribute_elementIsText_operationIsNotSupported() {\n+        Element.createText(\"\").setAttribute(\"foo\",\n+                Mockito.mock(StreamResource.class));\n+    }\n+\n+    @Test\n+    public void testAttachListener_parentAttach_childListenersTriggered() {\n+        Element body = new UI().getElement();\n+        Element parent = ElementFactory.createDiv();\n+        Element child = ElementFactory.createDiv();\n+        Element grandChild = ElementFactory.createDiv();\n+\n+        AtomicInteger childTriggered = new AtomicInteger();\n+        AtomicInteger grandChildTriggered = new AtomicInteger();\n+\n+        Registration registrationHandle = child.addAttachListener(event -> {\n+            childTriggered.addAndGet(1);\n+        });\n+        child.addAttachListener(event -> {\n+            Assert.assertEquals(child, event.getSource());\n+        });\n+        grandChild.addAttachListener(event -> {\n+            grandChildTriggered.addAndGet(1);\n+        });\n+        grandChild.addAttachListener(event -> {\n+            Assert.assertEquals(grandChild, event.getSource());\n+        });\n+\n+        parent.appendChild(child);\n+        child.appendChild(grandChild);\n+\n+        Assert.assertEquals(childTriggered.get(), 0);\n+        Assert.assertEquals(grandChildTriggered.get(), 0);\n+\n+        body.appendChild(parent);\n+\n+        Assert.assertEquals(childTriggered.get(), 1);\n+        Assert.assertEquals(grandChildTriggered.get(), 1);\n+\n+        body.removeAllChildren();\n+        parent.removeAllChildren();\n+\n+        body.appendChild(parent);\n+        parent.appendChild(child);\n+\n+        Assert.assertEquals(childTriggered.get(), 2);\n+        Assert.assertEquals(grandChildTriggered.get(), 2);\n+\n+        registrationHandle.remove();\n+\n+        body.removeAllChildren();\n+        body.appendChild(child);\n+\n+        Assert.assertEquals(childTriggered.get(), 2);\n+        Assert.assertEquals(grandChildTriggered.get(), 3);\n+    }\n+\n+    @Test\n+    public void testDetachListener_parentDetach_childListenersTriggered() {\n+        Element body = new UI().getElement();\n+        Element parent = ElementFactory.createDiv();\n+        Element child = ElementFactory.createDiv();\n+        Element grandChild = ElementFactory.createDiv();\n+\n+        AtomicInteger triggered = new AtomicInteger();\n+\n+        Registration registrationHandle = child.addDetachListener(event -> {\n+            triggered.addAndGet(1);\n+            Assert.assertEquals(child, event.getSource());\n+        });\n+\n+        grandChild.addDetachListener(event -> {\n+            triggered.addAndGet(1);\n+            Assert.assertEquals(grandChild, event.getSource());\n+        });\n+\n+        child.appendChild(grandChild);\n+        parent.appendChild(child);\n+        body.appendChild(parent);\n+\n+        Assert.assertEquals(triggered.get(), 0);\n+\n+        body.removeAllChildren();\n+        Assert.assertEquals(triggered.get(), 2);\n+\n+        body.appendChild(parent);\n+        body.removeAllChildren();\n+\n+        Assert.assertEquals(triggered.get(), 4);\n+\n+        body.appendChild(parent);\n+        registrationHandle.remove();\n+\n+        body.removeAllChildren();\n+\n+        Assert.assertEquals(triggered.get(), 5);\n+    }\n+\n+    @Test\n+    public void testAttachListener_eventOrder_childFirst() {\n+        Element body = new UI().getElement();\n+        Element parent = ElementFactory.createDiv();\n+        Element child = ElementFactory.createDiv();\n+        parent.appendChild(child);\n+\n+        AtomicBoolean parentAttached = new AtomicBoolean();\n+        AtomicBoolean childAttached = new AtomicBoolean();\n+\n+        child.addAttachListener(event -> {\n+            childAttached.set(true);\n+            Assert.assertFalse(parentAttached.get());\n+        });\n+        parent.addAttachListener(event -> {\n+            parentAttached.set(true);\n+            Assert.assertTrue(childAttached.get());\n+        });\n+\n+        body.appendChild(parent);\n+\n+        Assert.assertTrue(parentAttached.get());\n+        Assert.assertTrue(childAttached.get());\n+    }\n+\n+    @Test\n+    public void testDetachListener_eventOrder_childFirst() {\n+        Element body = new UI().getElement();\n+        Element parent = ElementFactory.createDiv();\n+        Element child = ElementFactory.createDiv();\n+        parent.appendChild(child);\n+        body.appendChild(parent);\n+\n+        AtomicBoolean parentDetached = new AtomicBoolean();\n+        AtomicBoolean childDetached = new AtomicBoolean();\n+\n+        child.addDetachListener(event -> {\n+            childDetached.set(true);\n+            Assert.assertFalse(parentDetached.get());\n+        });\n+        parent.addDetachListener(event -> {\n+            parentDetached.set(true);\n+            Assert.assertTrue(childDetached.get());\n+        });\n+\n+        body.removeAllChildren();\n+\n+        Assert.assertTrue(parentDetached.get());\n+        Assert.assertTrue(childDetached.get());\n+    }\n+\n+    @Test\n+    public void testAttachDetach_elementMoved_bothEventsTriggered() {\n+        Element body = new UI().getElement();\n+        Element parent = ElementFactory.createDiv();\n+        Element child = ElementFactory.createDiv();\n+\n+        parent.appendChild(child);\n+        body.appendChild(parent);\n+\n+        AtomicBoolean attached = new AtomicBoolean();\n+        AtomicBoolean detached = new AtomicBoolean();\n+\n+        child.addAttachListener(event -> {\n+            attached.set(true);\n+            Assert.assertTrue(detached.get());\n+        });\n+        child.addDetachListener(event -> {\n+            detached.set(true);\n+            Assert.assertFalse(attached.get());\n+        });\n+\n+        body.appendChild(child);\n+\n+        Assert.assertTrue(attached.get());\n+        Assert.assertTrue(detached.get());\n+    }\n+\n+    @Test\n+    public void testAttachEvent_stateTreeCanFound() {\n+        Element body = new UI().getElement();\n+        Element child = ElementFactory.createDiv();\n+\n+        AtomicInteger attached = new AtomicInteger();\n+\n+        child.addAttachListener(event -> {\n+            Assert.assertNotNull(event.getSource().getNode().getOwner());\n+            Assert.assertNotEquals(NullOwner.get(),\n+                    event.getSource().getNode().getOwner());\n+        });\n+        child.addAttachListener(event -> attached.incrementAndGet());\n+\n+        body.appendChild(child);\n+        Assert.assertEquals(1, attached.get());\n+    }\n+\n+    @Test\n+    public void testDetachEvent_stateTreeCanFound() {\n+        Element body = new UI().getElement();\n+        Element child = ElementFactory.createDiv();\n+        body.appendChild(child);\n+\n+        AtomicInteger detached = new AtomicInteger();\n+\n+        child.addDetachListener(event -> {\n+            Assert.assertNotNull(event.getSource().getNode().getOwner());\n+            Assert.assertNotEquals(NullOwner.get(),\n+                    event.getSource().getNode().getOwner());\n+        });\n+        child.addDetachListener(event -> detached.incrementAndGet());\n+\n+        body.removeAllChildren();\n+\n+        Assert.assertEquals(1, detached.get());\n+    }\n+\n+    @Test\n+    public void testMoveFromUiToUi_doesNotThrow() {\n+        Element body = new UI().getElement();\n+        Element child = ElementFactory.createDiv();\n+        body.appendChild(child);\n+\n+        child.removeFromTree();\n+\n+        body = new UI().getElement();\n+        body.appendChild(child);\n+        Assert.assertEquals(body, child.getParent());\n+    }\n+\n+    @Test\n+    public void testRemoveFromTree_inDetachListener_removedFromParent() {\n+        Element body = new UI().getElement();\n+        Element child = ElementFactory.createDiv();\n+        body.appendChild(child);\n+\n+        child.addDetachListener(event -> child.removeFromTree());\n+\n+        body.removeAllChildren();\n+\n+        Assert.assertEquals(null, child.getParent());\n+    }\n+\n+    @Test\n+    public void testRemoveFromTree_isVirtualChild_removedFromParent() {\n+        Element body = new UI().getElement();\n+        Element child = ElementFactory.createDiv();\n+\n+        body.getNode().getFeature(VirtualChildrenList.class)\n+                .append(child.getNode(), \"\");\n+\n+        Assert.assertTrue(child.isVirtualChild());\n+\n+        child.removeFromTree();\n+\n+        Assert.assertFalse(child.isVirtualChild());\n+        Assert.assertEquals(0,\n+                body.getNode().getFeature(VirtualChildrenList.class).size());\n+    }\n+\n+    private StreamResource createEmptyResource(String resName) {\n+        return new StreamResource(resName,\n+                () -> new ByteArrayInputStream(new byte[0]));\n+    }\n+\n+    @SuppressWarnings(\"serial\")\n+    private UI createUI() {\n+        VaadinSession session = new AlwaysLockedVaadinSession(\n+                new MockVaadinServletService());\n+        UI ui = new UI() {\n+            @Override\n+            public VaadinSession getSession() {\n+                return session;\n+            }\n+        };\n+        return ui;\n+    }\n+\n+    @Test\n+    public void insertAtCurrentPositionNoOp() {\n+        // Must have an UI to get attach events\n+        UI ui = new UI();\n+        Element parent = ui.getElement();\n+        Element child = ElementFactory.createDiv();\n+\n+        parent.appendChild(child);\n+\n+        child.addDetachListener(\n+                e -> Assert.fail(\"Child should not be detached\"));\n+        parent.insertChild(0, child);\n+    }\n+\n+    @Test\n+    public void textNodeTransformsNullToEmptyAndDoesNotThrowException() {\n+        Element e = Element.createText(null);\n+        Assert.assertEquals(\"\", e.getText());\n+    }\n+\n+    @Test\n+    public void textNodeOuterHtml() {\n+        Element e = Element.createText(\"foobar\");\n+        Assert.assertEquals(\"foobar\", e.getOuterHTML());\n+    }\n+\n+    @Test\n+    public void singleElementOuterHtml() {\n+        Element e = ElementFactory.createAnchor();\n+        Assert.assertEquals(\"<a></a>\", e.getOuterHTML());\n+    }\n+\n+    @Test\n+    public void elementTreeOuterHtml() {\n+        Element div = ElementFactory.createDiv();\n+        Element span = ElementFactory.createSpan();\n+        Element button = ElementFactory.createButton(\"hello\");\n+\n+        div.appendChild(span);\n+        span.appendChild(button);\n+\n+        Assert.assertEquals(\"<div>\\n\"\n+                + \" <span>\\n  <button>hello</button></span>\\n\" + \"</div>\",\n+                div.getOuterHTML());\n+    }\n+\n+    @Test\n+    public void elementAttributesOuterHtml() {\n+        Element div = ElementFactory.createDiv();\n+        div.setAttribute(\"foo\", \"bar\");\n+        div.getStyle().setWidth(\"20px\");\n+        div.getClassList().add(\"cls\");\n+        div.setAttribute(\"pin\", \"\");\n+\n+        Assert.assertEquals(\n+                \"<div pin foo=\\\"bar\\\" style=\\\"width:20px\\\" class=\\\"cls\\\"></div>\",\n+                div.getOuterHTML());\n+    }\n+\n+    @Test\n+    public void elementAttributeSpecialCharactersOuterHtml() {\n+        Element div = ElementFactory.createDiv();\n+        div.setAttribute(\"foo\", \"bar\\\"'&quot;\");\n+\n+        Assert.assertEquals(\"<div foo=\\\"bar&quot;'&amp;quot;\\\"></div>\",\n+                div.getOuterHTML());\n+    }\n+\n+    @Test\n+    public void htmlComponentOuterHtml() {\n+        Html html = new Html(\n+                \"<div style='background:green'><span><button>hello</button></span></div>\");\n+        Assert.assertEquals(\"<div style=\\\"background:green\\\">\\n\"\n+                + \" <span>\\n  <button>hello</button></span>\\n\" + \"</div>\",\n+                html.getElement().getOuterHTML());\n+    }\n+\n+    @Test\n+    public void callFunctionBeforeAttach() {\n+        UI ui = new MockUI();\n+        Element element = ElementFactory.createDiv();\n+        element.callJsFunction(\"noArgsMethod\");\n+        ui.getElement().appendChild(element);\n+        ui.getInternals().getStateTree().runExecutionsBeforeClientResponse();\n+\n+        assertPendingJs(ui, \"return $0.noArgsMethod()\", element);\n+    }\n+\n+    @Test\n+    public void callFunctionAfterAttach() {\n+        UI ui = new MockUI();\n+        Element element = ElementFactory.createDiv();\n+        ui.getElement().appendChild(element);\n+        element.callJsFunction(\"noArgsMethod\");\n+        ui.getInternals().getStateTree().runExecutionsBeforeClientResponse();\n+\n+        assertPendingJs(ui, \"return $0.noArgsMethod()\", element);\n+    }\n+\n+    @Test\n+    public void callFunctionBeforeDetach() {\n+        UI ui = new MockUI();\n+        Element element = ElementFactory.createDiv();\n+        ui.getElement().appendChild(element);\n+        element.callJsFunction(\"noArgsMethod\");\n+        ui.getElement().removeAllChildren();\n+        ui.getInternals().getStateTree().runExecutionsBeforeClientResponse();\n+\n+        List<PendingJavaScriptInvocation> invocations = ui.getInternals()\n+                .dumpPendingJavaScriptInvocations();\n+        Assert.assertTrue(invocations.isEmpty());\n+    }\n+\n+    @Test\n+    public void callFunctionBeforeReAttach() {\n+        UI ui = new MockUI();\n+        Element element = ElementFactory.createDiv();\n+        ui.getElement().appendChild(element);\n+        element.callJsFunction(\"noArgsMethod\");\n+\n+        Element div = ElementFactory.createDiv();\n+        ui.getElement().appendChild(div);\n+        div.appendChild(element);\n+\n+        ui.getInternals().getStateTree().runExecutionsBeforeClientResponse();\n+\n+        assertPendingJs(ui, \"return $0.noArgsMethod()\", element);\n+    }\n+\n+    @Test\n+    public void callFunctionOneParam() {\n+        UI ui = new MockUI();\n+        Element element = ElementFactory.createDiv();\n+        element.callJsFunction(\"method\", \"foo\");\n+        ui.getElement().appendChild(element);\n+\n+        ui.getInternals().getStateTree().runExecutionsBeforeClientResponse();\n+        assertPendingJs(ui, \"return $0.method($1)\", element, \"foo\");\n+\n+    }\n+\n+    @Test\n+    public void callFunctionTwoParams() {\n+        UI ui = new MockUI();\n+        Element element = ElementFactory.createDiv();\n+        element.callJsFunction(\"method\", \"foo\", 123);\n+        ui.getElement().appendChild(element);\n+        ui.getInternals().getStateTree().runExecutionsBeforeClientResponse();\n+\n+        assertPendingJs(ui, \"return $0.method($1,$2)\", element, \"foo\", 123);\n+    }\n+\n+    @Test\n+    public void callFunctionOnProperty() {\n+        UI ui = new MockUI();\n+        Element element = ElementFactory.createDiv();\n+        element.callJsFunction(\"property.method\");\n+        ui.getElement().appendChild(element);\n+        ui.getInternals().getStateTree().runExecutionsBeforeClientResponse();\n+\n+        assertPendingJs(ui, \"return $0.property.method()\", element);\n+    }\n+\n+    @Test\n+    public void callFunctionOnSubProperty() {\n+        UI ui = new MockUI();\n+        Element element = ElementFactory.createDiv();\n+        element.callJsFunction(\"property.other.method\");\n+        ui.getElement().appendChild(element);\n+        ui.getInternals().getStateTree().runExecutionsBeforeClientResponse();\n+\n+        assertPendingJs(ui, \"return $0.property.other.method()\", element);\n+    }\n+\n+    @Test\n+    public void attachShadowRoot_shadowRootCreatedAndChildrenArePreserved() {\n+        Element element = ElementFactory.createDiv();\n+        Element button = ElementFactory.createButton();\n+        Element emphasis = ElementFactory.createEmphasis();\n+        element.appendChild(button, emphasis);\n+\n+        ShadowRoot shadow = element.attachShadow();\n+        Assert.assertNotNull(shadow);\n+        Assert.assertEquals(element, shadow.getHost());\n+        Assert.assertEquals(shadow, element.getShadowRoot().get());\n+        Assert.assertEquals(2, element.getChildCount());\n+        Assert.assertEquals(2, element.getChildren().count());\n+        Assert.assertEquals(button, element.getChild(0));\n+        Assert.assertEquals(emphasis, element.getChild(1));\n+    }\n+\n+    @Test\n+    public void getShadowRoot_shadowRootIsEmpty() {\n+        Element element = ElementFactory.createDiv();\n+        Assert.assertFalse(element.getShadowRoot().isPresent());\n+    }\n+\n+    @Test\n+    public void getParentNode_parentNodeIsTheSameAsParent() {\n+        Element element = ElementFactory.createDiv();\n+        Element child = ElementFactory.createDiv();\n+\n+        element.appendChild(child);\n+\n+        Assert.assertEquals(child.getParent(), child.getParentNode());\n+    }\n+\n+    @Test\n+    public void getParentNode_elementInShadowRoot_parentIsNull() {\n+        ShadowRoot element = ElementFactory.createDiv().attachShadow();\n+        Element child = ElementFactory.createDiv();\n+\n+        element.appendChild(child);\n+\n+        Assert.assertNull(child.getParent());\n+        Assert.assertEquals(element, child.getParentNode());\n+    }\n+\n+    @Test\n+    public void parentIsDisabled_childIsDisabled() {\n+        Element parent = ElementFactory.createDiv();\n+        Element child = ElementFactory.createDiv();\n+\n+        parent.appendChild(child);\n+\n+        Assert.assertTrue(\"Parent should be enabled\", parent.isEnabled());\n+        Assert.assertTrue(\"Child should be enabled\", child.isEnabled());\n+\n+        parent.setEnabled(false);\n+\n+        Assert.assertFalse(\"Parent should be disabled\", parent.isEnabled());\n+        Assert.assertFalse(\"Child should be disabled\", child.isEnabled());\n+\n+        child.removeFromParent();\n+\n+        Assert.assertTrue(\"Child should be enabled\", child.isEnabled());\n+    }\n+\n+    @Test\n+    public void emptyElement_setDisabled_noChildFeatures() {\n+        Element element = ElementFactory.createDiv();\n+\n+        element.setEnabled(false);\n+\n+        BasicElementStateProviderTest.assertNoChildFeatures(element);\n+    }\n+\n+    @Test\n+    public void emptyElement_isVirtualChild_noChildFeatures() {\n+        Element element = ElementFactory.createDiv();\n+\n+        element.isVirtualChild();\n+\n+        BasicElementStateProviderTest.assertNoChildFeatures(element);\n+    }\n+\n+    @Test\n+    public void elementWithoutComponent_getComponentFeature() {\n+        Element element = ElementFactory.createDiv();\n+        element.appendChild(ElementFactory.createDiv());\n+\n+        element.getComponent();\n+\n+        Assert.assertFalse(\n+                \"getComponent() shouldn't initialize a component mapping feature\",\n+                element.getNode()\n+                        .getFeatureIfInitialized(ComponentMapping.class)\n+                        .isPresent());\n+    }\n+\n+    @Test\n+    public void readMissingProperty_noFeatureInitialized() {\n+        Element element = ElementFactory.createDiv();\n+\n+        element.getProperty(\"foo\");\n+        element.hasProperty(\"foo\");\n+        element.removeProperty(\"foo\");\n+        element.getPropertyNames().collect(Collectors.toList());\n+\n+        Assert.assertFalse(\n+                \"reading a property value shouldn't initialize a property map feature\",\n+                element.getNode()\n+                        .getFeatureIfInitialized(ElementPropertyMap.class)\n+                        .isPresent());\n+    }\n+\n+    @Test\n+    public void readMissingAttribute_noFeatureInitialized() {\n+        Element element = ElementFactory.createDiv();\n+\n+        element.getAttribute(\"foo\");\n+        element.hasAttribute(\"foo\");\n+        element.removeAttribute(\"foo\");\n+        element.getAttributeNames().collect(Collectors.toList());\n+\n+        Assert.assertFalse(\n+                \"reading an attribute value shouldn't initialize an attribute map feature\",\n+                element.getNode()\n+                        .getFeatureIfInitialized(ElementAttributeMap.class)\n+                        .isPresent());\n+    }\n+\n+    @Test\n+    public void virtualChildren_areIdentifiedAsSuch() {\n+        Element parent = ElementFactory.createDiv();\n+        Element child = ElementFactory.createDiv();\n+        Element virtualChild = ElementFactory.createDiv();\n+        Element grandVirtualChild = ElementFactory.createDiv();\n+\n+        parent.appendChild(child);\n+        parent.appendVirtualChild(virtualChild);\n+        virtualChild.appendChild(grandVirtualChild);\n+\n+        Assert.assertFalse(parent.isVirtualChild());\n+        Assert.assertFalse(child.isVirtualChild());\n+        Assert.assertTrue(virtualChild.isVirtualChild());\n+        Assert.assertFalse(grandVirtualChild.isVirtualChild());\n+    }\n+\n+    @Test\n+    public void domPropertyListener_registersListenerAndDomTrigger() {\n+        Element element = ElementFactory.createDiv();\n+\n+        AtomicReference<Serializable> listenerValue = new AtomicReference<>();\n+\n+        element.addPropertyChangeListener(\"property\", \"event\", event -> {\n+            if (listenerValue.getAndSet(event.getValue()) != null) {\n+                Assert.fail(\"Unexpected event\");\n+            }\n+        });\n+\n+        Assert.assertEquals(\"The property should be synchronized\",\n+                DisabledUpdateMode.ONLY_WHEN_ENABLED,\n+                element.getNode().getFeature(ElementListenerMap.class)\n+                        .getPropertySynchronizationMode(\"property\"));\n+\n+        ElementListenerMap listenerMap = element.getNode()\n+                .getFeature(ElementListenerMap.class);\n+\n+        Assert.assertEquals(\"A DOM event synchronization should be defined\",\n+                Collections.singleton(\n+                        JsonConstants.SYNCHRONIZE_PROPERTY_TOKEN + \"property\"),\n+                ElementListenersTest.getExpressions(listenerMap, \"event\"));\n+\n+        element.setProperty(\"property\", \"value\");\n+        Assert.assertEquals(\"Listener shold be registered\", listenerValue.get(),\n+                \"value\");\n+    }\n+\n+    @Test\n+    public void domPropertyListener_unregisterCleansEverything() {\n+        Element element = ElementFactory.createDiv();\n+\n+        DomListenerRegistration registration = element\n+                .addPropertyChangeListener(\"property\", \"event\", event -> {\n+                    Assert.fail(\"Unexpected event\");\n+                });\n+        registration.remove();\n+\n+        Assert.assertNull(\"The property should not be synchronized\",\n+                element.getNode().getFeature(ElementListenerMap.class)\n+                        .getPropertySynchronizationMode(\"property\"));\n+\n+        ElementListenerMap listenerMap = element.getNode()\n+                .getFeature(ElementListenerMap.class);\n+\n+        Assert.assertEquals(\"There should be no DOM listener\",\n+                Collections.emptySet(),\n+                ElementListenersTest.getExpressions(listenerMap, \"event\"));\n+\n+        // Should not trigger assert in the listener\n+        element.setProperty(\"property\", \"value\");\n+    }\n+\n+    @Test\n+    public void removingVirtualChildrenIsPossible() {\n+        Element parent = new Element(\"root\");\n+        Element child1 = new Element(\"main\");\n+        Element child2 = new Element(\"menu\");\n+\n+        parent.appendVirtualChild(child1, child2);\n+\n+        parent.removeVirtualChild(child2, child1);\n+\n+        Assert.assertNull(child1.getParent());\n+        Assert.assertFalse(child1.isVirtualChild());\n+\n+        Assert.assertNull(child2.getParent());\n+        Assert.assertFalse(child2.isVirtualChild());\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void removeVirtualChildren_notVirtualChild_fails() {\n+        Element parent = new Element(\"root\");\n+        Element child1 = new Element(\"main\");\n+\n+        parent.appendChild(child1);\n+\n+        parent.removeVirtualChild(child1);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void removeFromParent_virtualChild_fails() {\n+        Element parent = new Element(\"root\");\n+        Element child1 = new Element(\"main\");\n+\n+        parent.appendVirtualChild(child1);\n+\n+        child1.removeFromParent();\n+    }\n+\n+    @Test\n+    public void executeJavaScript_delegatesToExecJs() {\n+        AtomicReference<String> invokedExpression = new AtomicReference<>();\n+        AtomicReference<Serializable[]> invokedParams = new AtomicReference<>();\n+\n+        Element element = new Element(\"div\") {\n+            @Override\n+            public PendingJavaScriptResult executeJs(String expression,\n+                    Serializable... parameters) {\n+                String oldExpression = invokedExpression.getAndSet(expression);\n+                Assert.assertNull(\"There should be no old expression\",\n+                        oldExpression);\n+\n+                Serializable[] oldParams = invokedParams.getAndSet(parameters);\n+                Assert.assertNull(\"There should be no old params\", oldParams);\n+\n+                return null;\n+            }\n+        };\n+\n+        element.executeJs(\"foo\", 1, true);\n+\n+        Assert.assertEquals(\"foo\", invokedExpression.get());\n+        Assert.assertEquals(Integer.valueOf(1), invokedParams.get()[0]);\n+        Assert.assertEquals(Boolean.TRUE, invokedParams.get()[1]);\n+    }\n+\n+    @Test\n+    public void callFunction_delegatesToCallJsFunction() {\n+        AtomicReference<String> invokedFuction = new AtomicReference<>();\n+        AtomicReference<Serializable[]> invokedParams = new AtomicReference<>();\n+\n+        Element element = new Element(\"div\") {\n+            @Override\n+            public PendingJavaScriptResult callJsFunction(String functionName,\n+                    Serializable... arguments) {\n+                String oldExpression = invokedFuction.getAndSet(functionName);\n+                Assert.assertNull(\"There should be no old function name\",\n+                        oldExpression);\n+\n+                Serializable[] oldParams = invokedParams.getAndSet(arguments);\n+                Assert.assertNull(\"There should be no old params\", oldParams);\n+\n+                return null;\n+            }\n+        };\n+\n+        element.callJsFunction(\"foo\", 1, true);\n+\n+        Assert.assertEquals(\"foo\", invokedFuction.get());\n+        Assert.assertEquals(Integer.valueOf(1), invokedParams.get()[0]);\n+        Assert.assertEquals(Boolean.TRUE, invokedParams.get()[1]);\n+    }\n+\n+    @Override\n+    protected Element createParentNode() {\n+        return ElementFactory.createDiv();\n+    }\n+\n+    @Override\n+    protected void assertChild(Node<?> parent, int index, Element child) {\n+        Assert.assertEquals(parent, child.getParent());\n+        Assert.assertEquals(child, parent.getChild(index));\n+    }\n+\n+    private void assertPendingJs(UI ui, String js, Serializable... arguments) {\n+        List<PendingJavaScriptInvocation> pendingJs = ui.getInternals()\n+                .dumpPendingJavaScriptInvocations();\n+        JavaScriptInvocation expected = new JavaScriptInvocation(js, arguments);\n+        Assert.assertEquals(1, pendingJs.size());\n+        assertEquals(expected, pendingJs.get(0).getInvocation());\n+\n+    }\n+\n+    private void assertEquals(JavaScriptInvocation expected,\n+            JavaScriptInvocation actual) {\n+        Assert.assertEquals(expected.getExpression(), actual.getExpression());\n+        Assert.assertArrayEquals(expected.getParameters().toArray(),\n+                actual.getParameters().toArray());\n+\n+    }\n+\n+    private static ArrayNode createNumberArray(double... items) {\n+        return DoubleStream.of(items).mapToObj(JacksonUtils::createNode)\n+                .collect(JacksonUtils.asArray());\n+    }\n+\n+}\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandlerTest.java\nindex f5d711402f7..b2161748733 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandlerTest.java\n@@ -17,11 +17,13 @@\n \n import java.util.List;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import net.jcip.annotations.NotThreadSafe;\n import org.junit.After;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n+import org.mockito.Mock;\n import org.mockito.Mockito;\n \n import com.vaadin.flow.component.ClientCallable;\n@@ -35,11 +37,13 @@\n import com.vaadin.flow.component.internal.UIInternals.JavaScriptInvocation;\n import com.vaadin.flow.component.polymertemplate.EventHandler;\n import com.vaadin.flow.dom.DisabledUpdateMode;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.MockServletServiceSessionSetup;\n import com.vaadin.flow.server.VaadinService;\n import com.vaadin.flow.server.VaadinSession;\n import com.vaadin.flow.shared.JsonConstants;\n import com.vaadin.tests.util.MockDeploymentConfiguration;\n+import com.vaadin.tests.util.MockUI;\n \n import elemental.json.Json;\n import elemental.json.JsonArray;\n@@ -149,6 +153,7 @@ public static class MethodWithParameters extends ComponentWithCompute {\n         private Integer[] varArg;\n         private int[][] doubleArray;\n         private JsonValue jsonValue;\n+        private JsonNode jsonNode;\n \n         @Override\n         @ClientCallable\n@@ -184,6 +189,11 @@ protected void method3(@EventData(\"foo\") int[][] array) {\n         protected void method4(@EventData(\"foo\") JsonValue value) {\n             jsonValue = value;\n         }\n+\n+        @ClientCallable\n+        protected void method5(@EventData(\"foo\") JsonNode value) {\n+            jsonNode = value;\n+        }\n     }\n \n     @Before\n@@ -399,6 +409,41 @@ public void methodWithVarArg_acceptNoValues() {\n         Assert.assertEquals(0, component.varArg.length);\n     }\n \n+    @Test\n+    public void methodWithJsonValueIsInvoked() {\n+        JsonArray array = Json.createArray();\n+\n+        JsonObject json = Json.createObject();\n+        json.put(\"foo\", \"bar\");\n+        array.set(0, json);\n+\n+        MethodWithParameters component = new MethodWithParameters();\n+        UI ui = new MockUI();\n+        ui.add(component);\n+        PublishedServerEventHandlerRpcHandler.invokeMethod(component,\n+                component.getClass(), \"method4\", array, -1);\n+\n+        Assert.assertEquals(component.jsonValue, json);\n+    }\n+\n+    @Test\n+    public void methodWithJacksonJsonValueIsInvoked() {\n+        JsonArray array = Json.createArray();\n+\n+        JsonObject json = Json.createObject();\n+        json.put(\"foo\", \"bar\");\n+        array.set(0, json);\n+\n+        MethodWithParameters component = new MethodWithParameters();\n+        UI ui = new MockUI();\n+        ui.add(component);\n+        PublishedServerEventHandlerRpcHandler.invokeMethod(component,\n+                component.getClass(), \"method5\", array, -1);\n+\n+        Assert.assertEquals(component.jsonNode,\n+                JacksonUtils.mapElemental(json));\n+    }\n+\n     @Test\n     public void methodWithSeveralArgsAndVarArg_acceptNoValues() {\n         JsonArray array = Json.createArray();\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21107",
    "pr_id": 21107,
    "issue_id": 21016,
    "repo": "vaadin/flow",
    "problem_statement": "vaadin-maven-plugin scans twice\n### Description of the bug\n\nA fresh app from start.vaadin.com gives this output:\n\n```\nmvn clean install -Pproduction\n....\n[INFO] >>> vaadin:24.6.5:prepare-frontend (default) > :configure @ my-app >>>\n[INFO] \n[INFO] --- vaadin:24.6.5:configure (configure) @ my-app ---\n[INFO] \n[INFO] <<< vaadin:24.6.5:prepare-frontend (default) < :configure @ my-app <<<\n[INFO] \n[INFO] \n[INFO] --- vaadin:24.6.5:prepare-frontend (default) @ my-app ---\n[INFO] Reflections took 1605 ms to scan 200 urls, producing 11676 keys and 60256 values\n[INFO] The globally installed Node.js version 14.18.0 is older than the required minimum version 18.12.0. Using Node.js from /home/user/.vaadin.\n[INFO] Visited 115 classes. Took 150 ms.\n[INFO] Copying frontend resources from jar files ...\n[INFO] Visited 178 resources. Took 143 ms.\n[INFO] \n[INFO] >>> vaadin:24.6.5:build-frontend (default) > :configure @ my-app >>>\n[INFO] \n[INFO] --- vaadin:24.6.5:configure (configure) @ my-app ---\n[INFO] \n[INFO] <<< vaadin:24.6.5:build-frontend (default) < :configure @ my-app <<<\n[INFO] \n[INFO] \n[INFO] --- vaadin:24.6.5:build-frontend (default) @ my-app ---\n**[INFO] Scanning classes to find frontend configurations and dependencies...**\n**[INFO] Visited 6509 classes. Took 3874 ms.**\n[INFO] Checking if a production mode bundle build is needed\n[INFO] A production mode bundle build is not needed\n[INFO] Copying frontend resources from jar files ...\n[INFO] Visited 178 resources. Took 76 ms.\n**[INFO] Scanning classes to find frontend configurations and dependencies...**\n**[INFO] Visited 6509 classes. Took 2704 ms.**\n[INFO] Build frontend completed in 7080 ms.\n\n```\n\n-->\n`**[INFO] Visited 6509 classes. Took 3874 ms.**`\n`**[INFO] Visited 6509 classes. Took 2704 ms.**`\n\nThis was addressed in https://github.com/vaadin/flow/issues/19874 , but it seems to have come back?\n\n### Expected behavior\n\nClass scanning occurs only once.\n\n### Minimal reproducible example\n\nHelloworld from start.vaadin.com, with the streamlined vaadin-flow fixes https://vaadin.com/blog/streamlined-vaadin-flow-setup-for-v24.4 \n\n\n\n### Versions\n\nLatest helloworld from start.vaadin.com, Vaadin 24.6.5, spring-boot 3.4.2",
    "issue_word_count": 329,
    "test_files_count": 14,
    "non_test_files_count": 7,
    "pr_changed_files": [
      "flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinBuildFrontendTask.kt",
      "flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildFrontendMojo.java",
      "flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/BuildFrontendUtil.java",
      "flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/Options.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesScanner.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/ComponentFlagsTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdateImportsWithByteCodeScannerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdateImportsWithFullCPScannerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdatePackagesWithByteCodeScannerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdatePackagesWithFullCPCodeScannerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateBootstrapTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/UpdateImportsWithByteCodeScannerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/UpdateImportsWithFullCPScannerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/UpdateThemedImportsTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendScannerPwaTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/ScannerDependenciesTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/ScannerThemeTest.java"
    ],
    "pr_changed_test_files": [
      "flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/ComponentFlagsTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdateImportsWithByteCodeScannerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdateImportsWithFullCPScannerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdatePackagesWithByteCodeScannerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdatePackagesWithFullCPCodeScannerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateBootstrapTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/UpdateImportsWithByteCodeScannerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/UpdateImportsWithFullCPScannerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/UpdateThemedImportsTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendScannerPwaTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/ScannerDependenciesTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/ScannerThemeTest.java"
    ],
    "base_commit": "f530f76f84599bbf5064a9c460179a822aece4ed",
    "head_commit": "a148da49be4955e29f012cdb9ea031b4175fd380",
    "repo_url": "https://github.com/vaadin/flow/pull/21107",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21107",
    "dockerfile": "",
    "pr_merged_at": "2025-03-11T08:50:32.000Z",
    "patch": "diff --git a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinBuildFrontendTask.kt b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinBuildFrontendTask.kt\nindex 8df74c8cf40..5cbf9af25cd 100644\n--- a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinBuildFrontendTask.kt\n+++ b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinBuildFrontendTask.kt\n@@ -15,11 +15,15 @@\n  */\n package com.vaadin.gradle\n \n+import com.vaadin.experimental.FeatureFlags\n import com.vaadin.flow.plugin.base.BuildFrontendUtil\n import com.vaadin.flow.server.Constants\n import com.vaadin.flow.server.frontend.BundleValidationUtil\n import com.vaadin.flow.server.frontend.FrontendUtils\n import com.vaadin.flow.server.frontend.TaskCleanFrontendFiles\n+import com.vaadin.flow.server.frontend.scanner.ClassFinder\n+import com.vaadin.flow.server.frontend.scanner.FrontendDependenciesScanner\n+import com.vaadin.flow.server.frontend.scanner.FrontendDependenciesScanner.FrontendDependenciesScannerFactory\n import com.vaadin.pro.licensechecker.LicenseChecker\n import org.gradle.api.DefaultTask\n import org.gradle.api.provider.Property\n@@ -80,9 +84,26 @@ public abstract class VaadinBuildFrontendTask : DefaultTask() {\n         check(tokenFile.exists()) { \"token file $tokenFile doesn't exist!\" }\n \n         val cleanTask = TaskCleanFrontendFiles(config.npmFolder.get(),\n-                BuildFrontendUtil.getGeneratedFrontendDirectory(adapter.get()), adapter.get().classFinder\n+                BuildFrontendUtil.getGeneratedFrontendDirectory(adapter.get()), adapter.get().classFinder)\n+\n+        val reactEnabled: Boolean = adapter.get().isReactEnabled()\n+                && FrontendUtils.isReactRouterRequired(\n+            BuildFrontendUtil.getFrontendDirectory(adapter.get())\n+        )\n+        val featureFlags: FeatureFlags = FeatureFlags(\n+            adapter.get().createLookup(adapter.get().getClassFinder())\n         )\n-        BuildFrontendUtil.runNodeUpdater(adapter.get())\n+        if (adapter.get().javaResourceFolder() != null) {\n+            featureFlags.setPropertiesLocation(adapter.get().javaResourceFolder())\n+        }\n+        val frontendDependencies: FrontendDependenciesScanner = FrontendDependenciesScannerFactory()\n+            .createScanner(\n+                !adapter.get().optimizeBundle(),  adapter.get().getClassFinder(),\n+                adapter.get().generateEmbeddableWebComponents(), featureFlags,\n+                reactEnabled\n+            )\n+\n+        BuildFrontendUtil.runNodeUpdater(adapter.get(), frontendDependencies)\n \n         if (adapter.get().generateBundle() && BundleValidationUtil.needsBundleBuild\n                 (adapter.get().servletResourceOutputDirectory())) {\n@@ -92,7 +113,7 @@ public abstract class VaadinBuildFrontendTask : DefaultTask() {\n             }\n         }\n         LicenseChecker.setStrictOffline(true)\n-        val licenseRequired = BuildFrontendUtil.validateLicenses(adapter.get())\n+        val licenseRequired = BuildFrontendUtil.validateLicenses(adapter.get(), frontendDependencies)\n \n         BuildFrontendUtil.updateBuildFile(adapter.get(), licenseRequired)\n     }\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildFrontendMojo.java b/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildFrontendMojo.java\nindex 7ab4211579c..35b76b0530e 100644\n--- a/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildFrontendMojo.java\n+++ b/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildFrontendMojo.java\n@@ -30,6 +30,7 @@\n import org.apache.maven.plugins.annotations.Parameter;\n import org.apache.maven.plugins.annotations.ResolutionScope;\n \n+import com.vaadin.experimental.FeatureFlags;\n import com.vaadin.flow.component.dependency.JavaScript;\n import com.vaadin.flow.component.dependency.JsModule;\n import com.vaadin.flow.component.dependency.NpmPackage;\n@@ -41,6 +42,7 @@\n import com.vaadin.flow.server.frontend.BundleValidationUtil;\n import com.vaadin.flow.server.frontend.FrontendUtils;\n import com.vaadin.flow.server.frontend.TaskCleanFrontendFiles;\n+import com.vaadin.flow.server.frontend.scanner.FrontendDependenciesScanner;\n import com.vaadin.flow.theme.Theme;\n import com.vaadin.pro.licensechecker.LicenseChecker;\n \n@@ -139,8 +141,22 @@ protected void executeInternal()\n \n         TaskCleanFrontendFiles cleanTask = new TaskCleanFrontendFiles(\n                 npmFolder(), frontendDirectory(), getClassFinder());\n+\n+        boolean reactEnabled = isReactEnabled()\n+                && FrontendUtils.isReactRouterRequired(\n+                        BuildFrontendUtil.getFrontendDirectory(this));\n+        FeatureFlags featureFlags = new FeatureFlags(\n+                createLookup(getClassFinder()));\n+        if (javaResourceFolder() != null) {\n+            featureFlags.setPropertiesLocation(javaResourceFolder());\n+        }\n+        FrontendDependenciesScanner frontendDependencies = new FrontendDependenciesScanner.FrontendDependenciesScannerFactory()\n+                .createScanner(!optimizeBundle, getClassFinder(),\n+                        generateEmbeddableWebComponents, featureFlags,\n+                        reactEnabled);\n+\n         try {\n-            BuildFrontendUtil.runNodeUpdater(this);\n+            BuildFrontendUtil.runNodeUpdater(this, frontendDependencies);\n         } catch (ExecutionFailedException | URISyntaxException exception) {\n             throw new MojoFailureException(\n                     \"Could not execute build-frontend goal\", exception);\n@@ -160,7 +176,8 @@ protected void executeInternal()\n             }\n         }\n         LicenseChecker.setStrictOffline(true);\n-        boolean licenseRequired = BuildFrontendUtil.validateLicenses(this);\n+        boolean licenseRequired = BuildFrontendUtil.validateLicenses(this,\n+                frontendDependencies);\n \n         BuildFrontendUtil.updateBuildFile(this, licenseRequired);\n \n\ndiff --git a/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/BuildFrontendUtil.java b/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/BuildFrontendUtil.java\nindex 4c4a2f1de89..a1b5f577046 100644\n--- a/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/BuildFrontendUtil.java\n+++ b/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/BuildFrontendUtil.java\n@@ -311,12 +311,16 @@ public static File propagateBuildInfo(PluginAdapterBase adapter) {\n      *\n      * @param adapter\n      *            - the PluginAdapterBase.\n+     * @param frontendDependencies\n+     *            Frontend dependencies scanner to use. If not set, one will be\n+     *            initialized by {@link Options} class later.\n      * @throws ExecutionFailedException\n      *             - a ExecutionFailedException.\n      * @throws URISyntaxException\n      *             - - Could not build an URI from nodeDownloadRoot().\n      */\n-    public static void runNodeUpdater(PluginAdapterBuild adapter)\n+    public static void runNodeUpdater(PluginAdapterBuild adapter,\n+            FrontendDependenciesScanner frontendDependencies)\n             throws ExecutionFailedException, URISyntaxException {\n \n         Set<File> jarFiles = adapter.getJarFiles();\n@@ -365,7 +369,8 @@ public static void runNodeUpdater(PluginAdapterBuild adapter)\n                     .withFrontendExtraFileExtensions(\n                             adapter.frontendExtraFileExtensions())\n                     .withFrontendIgnoreVersionChecks(\n-                            adapter.isFrontendIgnoreVersionChecks());\n+                            adapter.isFrontendIgnoreVersionChecks())\n+                    .withFrontendDependenciesScanner(frontendDependencies);\n             new NodeTasks(options).execute();\n         } catch (ExecutionFailedException exception) {\n             throw exception;\n@@ -577,10 +582,12 @@ private static void runFrontendBuildTool(PluginAdapterBase adapter,\n      *\n      * @param adapter\n      *            the PluginAdapterBase\n+     * @param frontendDependencies\n      * @return {@literal true} if license validation is required because of the\n      *         presence of commercial components, otherwise {@literal false}.\n      */\n-    public static boolean validateLicenses(PluginAdapterBase adapter) {\n+    public static boolean validateLicenses(PluginAdapterBase adapter,\n+            FrontendDependenciesScanner frontendDependencies) {\n         File outputFolder = adapter.webpackOutputDirectory();\n \n         String statsJsonContent = null;\n@@ -609,11 +616,8 @@ public static boolean validateLicenses(PluginAdapterBase adapter) {\n             statsJsonContent = \"{}\";\n         }\n \n-        FrontendDependenciesScanner scanner = new FrontendDependenciesScanner.FrontendDependenciesScannerFactory()\n-                .createScanner(false, adapter.getClassFinder(), true, null,\n-                        adapter.isReactEnabled());\n         List<Product> commercialComponents = findCommercialFrontendComponents(\n-                scanner, statsJsonContent);\n+                frontendDependencies, statsJsonContent);\n         commercialComponents.addAll(findCommercialJavaComponents(adapter));\n \n         for (Product component : commercialComponents) {\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java\nindex 3c9e38a2522..9096714ec96 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java\n@@ -103,13 +103,15 @@ public class NodeTasks implements FallibleCommand {\n      *            the options\n      */\n     public NodeTasks(Options options) {\n+        FrontendDependenciesScanner frontendDependencies = options\n+                .getFrontendDependenciesScanner();\n+\n         // Lock file is created in the project root folder and not in target/ so\n         // that Maven does not remove it\n         lockFile = new File(options.getNpmFolder(), \".vaadin-node-tasks.lock\")\n                 .toPath();\n \n         ClassFinder classFinder = options.getClassFinder();\n-        FrontendDependenciesScanner frontendDependencies = null;\n \n         Set<String> webComponentTags = new HashSet<>();\n \n@@ -119,9 +121,6 @@ public NodeTasks(Options options) {\n \n         if (options.isEnablePackagesUpdate() || options.isEnableImportsUpdate()\n                 || options.isEnableConfigUpdate()) {\n-            frontendDependencies = new FrontendDependenciesScanner.FrontendDependenciesScannerFactory()\n-                    .createScanner(options);\n-\n             if (options.isProductionMode()) {\n                 boolean needBuild = BundleValidationUtil.needsBuild(options,\n                         frontendDependencies,\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/Options.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/Options.java\nindex b0074de9612..ac4f4f16cff 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/Options.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/Options.java\n@@ -17,6 +17,7 @@\n import com.vaadin.flow.server.frontend.installer.NodeInstaller;\n import com.vaadin.flow.server.frontend.installer.Platform;\n import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n+import com.vaadin.flow.server.frontend.scanner.FrontendDependenciesScanner;\n \n /**\n  * Build a <code>NodeExecutor</code> instance.\n@@ -85,6 +86,8 @@ public class Options implements Serializable {\n \n     private List<String> frontendExtraFileExtensions = null;\n \n+    private FrontendDependenciesScanner frontendDependenciesScanner;\n+\n     /**\n      * The node.js version to be used when node.js is installed automatically by\n      * Vaadin, for example <code>\"v16.0.0\"</code>. Defaults to\n@@ -1037,4 +1040,35 @@ public Options withNpmExcludeWebComponents(boolean exclude) {\n     public boolean isFrontendIgnoreVersionChecks() {\n         return frontendIgnoreVersionChecks;\n     }\n+\n+    /**\n+     * Sets the frontend dependencies scanner to use.\n+     *\n+     * @param frontendDependenciesScanner\n+     *            frontend dependencies scanner\n+     * @return this builder\n+     */\n+    public Options withFrontendDependenciesScanner(\n+            FrontendDependenciesScanner frontendDependenciesScanner) {\n+        this.frontendDependenciesScanner = frontendDependenciesScanner;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the frontend dependencies scanner to use. If not is not pre-set,\n+     * this initializes a new one based on the Options set.\n+     *\n+     * @return frontend dependencies scanner\n+     */\n+    public FrontendDependenciesScanner getFrontendDependenciesScanner() {\n+        if (frontendDependenciesScanner == null) {\n+            boolean reactEnabled = isReactEnabled() && FrontendUtils\n+                    .isReactRouterRequired(getFrontendDirectory());\n+            frontendDependenciesScanner = new FrontendDependenciesScanner.FrontendDependenciesScannerFactory()\n+                    .createScanner(!isUseByteCodeScanner(), getClassFinder(),\n+                            isGenerateEmbeddableWebComponents(),\n+                            getFeatureFlags(), reactEnabled);\n+        }\n+        return frontendDependenciesScanner;\n+    }\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java\nindex 1db37c82479..3f23208fb8f 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java\n@@ -107,7 +107,11 @@ public class FrontendDependencies extends AbstractDependenciesScanner {\n      *\n      * @param finder\n      *            the class finder\n+     * @deprecated Use\n+     *             {@link FrontendDependencies#FrontendDependencies(ClassFinder, boolean, FeatureFlags, boolean)}\n+     *             instead.\n      */\n+    @Deprecated\n     public FrontendDependencies(ClassFinder finder) {\n         this(finder, true, null);\n     }\n@@ -123,7 +127,11 @@ public FrontendDependencies(ClassFinder finder) {\n      *            {@link com.vaadin.flow.component.WebComponentExporter} classes\n      *            for dependencies. {@code true} is default for\n      *            {@link FrontendDependencies#FrontendDependencies(ClassFinder)}\n+     * @deprecated Use\n+     *             {@link FrontendDependencies#FrontendDependencies(ClassFinder, boolean, FeatureFlags, boolean)}\n+     *             instead.\n      */\n+    @Deprecated\n     public FrontendDependencies(ClassFinder finder,\n             boolean generateEmbeddableWebComponents) {\n         this(finder, generateEmbeddableWebComponents, null);\n@@ -142,7 +150,11 @@ public FrontendDependencies(ClassFinder finder,\n      *            {@link FrontendDependencies#FrontendDependencies(ClassFinder)}\n      * @param featureFlags\n      *            available feature flags and their status\n+     * @deprecated Use\n+     *             {@link FrontendDependencies#FrontendDependencies(ClassFinder, boolean, FeatureFlags, boolean)}\n+     *             instead.\n      */\n+    @Deprecated\n     public FrontendDependencies(ClassFinder finder,\n             boolean generateEmbeddableWebComponents,\n             FeatureFlags featureFlags) {\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesScanner.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesScanner.java\nindex ea81b686840..79bc5eb3602 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesScanner.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesScanner.java\n@@ -59,7 +59,11 @@ class FrontendDependenciesScannerFactory {\n          *            checks {@code WebComponentExporter} classes for\n          *            dependencies if {@code true}, doesn't check otherwise\n          * @return a scanner implementation strategy\n+         * @deprecated Use\n+         *             {@link FrontendDependenciesScannerFactory#createScanner(boolean, ClassFinder, boolean, FeatureFlags, boolean)}\n+         *             instead.\n          */\n+        @Deprecated\n         public FrontendDependenciesScanner createScanner(\n                 boolean allDependenciesScan, ClassFinder finder,\n                 boolean generateEmbeddableWebComponents) {\n@@ -84,7 +88,11 @@ public FrontendDependenciesScanner createScanner(\n          *            available feature flags and their status\n          * @return a scanner implementation strategy\n          *\n+         * @deprecated Use\n+         *             {@link FrontendDependenciesScannerFactory#createScanner(boolean, ClassFinder, boolean, FeatureFlags, boolean)}\n+         *             instead.\n          */\n+        @Deprecated\n         public FrontendDependenciesScanner createScanner(\n                 boolean allDependenciesScan, ClassFinder finder,\n                 boolean generateEmbeddableWebComponents,\n@@ -93,6 +101,25 @@ public FrontendDependenciesScanner createScanner(\n                     generateEmbeddableWebComponents, featureFlags, true);\n         }\n \n+        /**\n+         * Produces scanner implementation based on {@code allDependenciesScan}\n+         * value.\n+         * <p>\n+         *\n+         * @param allDependenciesScan\n+         *            if {@code true} then full classpath scanning strategy is\n+         *            used, otherwise byte scanning strategy is produced\n+         * @param finder\n+         *            a class finder\n+         * @param generateEmbeddableWebComponents\n+         *            checks {@code WebComponentExporter} classes for\n+         *            dependencies if {@code true}, doesn't check otherwise\n+         * @param featureFlags\n+         *            available feature flags and their status\n+         * @param reactEnabled\n+         *            {@code true} if react is enabled, {@code true otherwise}\n+         * @return a scanner implementation strategy\n+         */\n         public FrontendDependenciesScanner createScanner(\n                 boolean allDependenciesScan, ClassFinder finder,\n                 boolean generateEmbeddableWebComponents,\n@@ -109,6 +136,17 @@ public FrontendDependenciesScanner createScanner(\n             }\n         }\n \n+        /**\n+         * Produces scanner implementation based on the given Options object.\n+         *\n+         * @param options\n+         *            Options to build the scanner from\n+         * @return a scanner implementation strategy\n+         * @deprecated Use\n+         *             {@link FrontendDependenciesScannerFactory#createScanner(boolean, ClassFinder, boolean, FeatureFlags, boolean)}\n+         *             instead.\n+         */\n+        @Deprecated\n         public FrontendDependenciesScanner createScanner(Options options) {\n             boolean reactEnabled = options.isReactEnabled() && FrontendUtils\n                     .isReactRouterRequired(options.getFrontendDirectory());\n",
    "test_patch": "diff --git a/flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java b/flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java\nindex b2ed6598621..a4b9ce98c8d 100644\n--- a/flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java\n+++ b/flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java\n@@ -12,7 +12,6 @@\n import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n@@ -41,6 +40,7 @@\n import com.vaadin.flow.server.Constants;\n import com.vaadin.flow.server.ExecutionFailedException;\n import com.vaadin.flow.server.InitParameters;\n+import com.vaadin.flow.server.PwaConfiguration;\n import com.vaadin.flow.server.frontend.EndpointGeneratorTaskFactory;\n import com.vaadin.flow.server.frontend.FileIOUtils;\n import com.vaadin.flow.server.frontend.FrontendTools;\n@@ -150,11 +150,15 @@ public void should_useHillaEngine_withNodeUpdater()\n                 .when(endpointGeneratorTaskFactory)\n                 .createTaskGenerateEndpoint(Mockito.any());\n \n+        FrontendDependenciesScanner frontendDependencies = Mockito\n+                .mock(FrontendDependenciesScanner.class);\n+        Mockito.when(frontendDependencies.getPwaConfiguration())\n+                .thenReturn(new PwaConfiguration());\n         try (MockedStatic<FrontendUtils> util = Mockito\n                 .mockStatic(FrontendUtils.class, Mockito.CALLS_REAL_METHODS)) {\n             util.when(() -> FrontendUtils.isHillaUsed(Mockito.any(),\n                     Mockito.any())).thenReturn(true);\n-            BuildFrontendUtil.runNodeUpdater(adapter);\n+            BuildFrontendUtil.runNodeUpdater(adapter, frontendDependencies);\n         }\n \n         Mockito.verify(lookup).lookup(EndpointGeneratorTaskFactory.class);\n@@ -524,7 +528,11 @@ public void runNodeUpdater_generateFeatureFlagsJsFile() throws Exception {\n         Mockito.when(adapter.createLookup(Mockito.any())).thenReturn(lookup);\n         Mockito.doReturn(classFinder).when(lookup).lookup(ClassFinder.class);\n \n-        BuildFrontendUtil.runNodeUpdater(adapter);\n+        FrontendDependenciesScanner frontendDependencies = Mockito\n+                .mock(FrontendDependenciesScanner.class);\n+        Mockito.when(frontendDependencies.getPwaConfiguration())\n+                .thenReturn(new PwaConfiguration());\n+        BuildFrontendUtil.runNodeUpdater(adapter, frontendDependencies);\n \n         File generatedFeatureFlagsFile = new File(adapter.generatedTsFolder(),\n                 FEATURE_FLAGS_FILE_NAME);\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/ComponentFlagsTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/ComponentFlagsTest.java\nindex b30add6fffd..51e39174517 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/ComponentFlagsTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/ComponentFlagsTest.java\n@@ -79,7 +79,7 @@ public void before() throws IOException {\n     protected FrontendDependenciesScanner getScanner(ClassFinder finder,\n             FeatureFlags featureFlags) {\n         return new FrontendDependenciesScanner.FrontendDependenciesScannerFactory()\n-                .createScanner(false, finder, true, featureFlags);\n+                .createScanner(false, finder, true, featureFlags, true);\n     }\n \n     @Test\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdateImportsWithByteCodeScannerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdateImportsWithByteCodeScannerTest.java\nindex c47e838f6cf..5e9fcc18860 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdateImportsWithByteCodeScannerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdateImportsWithByteCodeScannerTest.java\n@@ -24,6 +24,6 @@ public class NodeUpdateImportsWithByteCodeScannerTest\n     @Override\n     protected FrontendDependenciesScanner getScanner(ClassFinder finder) {\n         return new FrontendDependenciesScanner.FrontendDependenciesScannerFactory()\n-                .createScanner(false, finder, true);\n+                .createScanner(false, finder, true, null, true);\n     }\n }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdateImportsWithFullCPScannerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdateImportsWithFullCPScannerTest.java\nindex b5b6130721a..d48e54a64b2 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdateImportsWithFullCPScannerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdateImportsWithFullCPScannerTest.java\n@@ -24,6 +24,6 @@ public class NodeUpdateImportsWithFullCPScannerTest\n     @Override\n     protected FrontendDependenciesScanner getScanner(ClassFinder finder) {\n         return new FrontendDependenciesScanner.FrontendDependenciesScannerFactory()\n-                .createScanner(true, finder, true);\n+                .createScanner(true, finder, true, null, true);\n     }\n }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdatePackagesWithByteCodeScannerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdatePackagesWithByteCodeScannerTest.java\nindex d08ef53e74c..e347581ecf3 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdatePackagesWithByteCodeScannerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdatePackagesWithByteCodeScannerTest.java\n@@ -24,7 +24,7 @@ public class NodeUpdatePackagesWithByteCodeScannerTest\n     @Override\n     protected FrontendDependenciesScanner getScanner(ClassFinder finder) {\n         return new FrontendDependenciesScanner.FrontendDependenciesScannerFactory()\n-                .createScanner(false, finder, true);\n+                .createScanner(false, finder, true, null, true);\n     }\n \n }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdatePackagesWithFullCPCodeScannerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdatePackagesWithFullCPCodeScannerTest.java\nindex 0e1ff3d2cb0..7046ff4621c 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdatePackagesWithFullCPCodeScannerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdatePackagesWithFullCPCodeScannerTest.java\n@@ -24,7 +24,7 @@ public class NodeUpdatePackagesWithFullCPCodeScannerTest\n     @Override\n     protected FrontendDependenciesScanner getScanner(ClassFinder finder) {\n         return new FrontendDependenciesScanner.FrontendDependenciesScannerFactory()\n-                .createScanner(true, finder, true);\n+                .createScanner(true, finder, true, null, true);\n     }\n \n }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateBootstrapTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateBootstrapTest.java\nindex 249369d2800..830624e479f 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateBootstrapTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateBootstrapTest.java\n@@ -64,7 +64,7 @@ public void setUp() throws Exception {\n         ClassFinder.DefaultClassFinder finder = new ClassFinder.DefaultClassFinder(\n                 Collections.singleton(this.getClass()));\n         frontDeps = new FrontendDependenciesScanner.FrontendDependenciesScannerFactory()\n-                .createScanner(false, finder, false);\n+                .createScanner(false, finder, false, null, true);\n \n         frontendFolder = temporaryFolder.newFolder(FRONTEND);\n         options = new MockOptions(finder, null)\n@@ -151,7 +151,7 @@ public void should_load_AppTheme()\n     private FrontendDependencies getThemedDependency()\n             throws MalformedURLException {\n         ClassFinder finder = getClassFinder();\n-        return new FrontendDependencies(finder) {\n+        return new FrontendDependencies(finder, true, null, true) {\n \n             @Override\n             public Map<ChunkInfo, List<String>> getModules() {\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/UpdateImportsWithByteCodeScannerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/UpdateImportsWithByteCodeScannerTest.java\nindex 9aac4da560f..e29f9dfd418 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/UpdateImportsWithByteCodeScannerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/UpdateImportsWithByteCodeScannerTest.java\n@@ -53,7 +53,7 @@ public class UpdateImportsWithByteCodeScannerTest\n     @Override\n     protected FrontendDependenciesScanner getScanner(ClassFinder finder) {\n         return new FrontendDependenciesScanner.FrontendDependenciesScannerFactory()\n-                .createScanner(false, finder, true);\n+                .createScanner(false, finder, true, null, true);\n     }\n \n     @Test\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/UpdateImportsWithFullCPScannerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/UpdateImportsWithFullCPScannerTest.java\nindex 77f76756edf..89085fcafd9 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/UpdateImportsWithFullCPScannerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/UpdateImportsWithFullCPScannerTest.java\n@@ -31,7 +31,7 @@ public class UpdateImportsWithFullCPScannerTest\n     @Override\n     protected FrontendDependenciesScanner getScanner(ClassFinder finder) {\n         return new FrontendDependenciesScanner.FrontendDependenciesScannerFactory()\n-                .createScanner(true, finder, true);\n+                .createScanner(true, finder, true, null, true);\n     }\n \n     @Test\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/UpdateThemedImportsTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/UpdateThemedImportsTest.java\nindex 07d4b9f742d..a6804d60971 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/UpdateThemedImportsTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/UpdateThemedImportsTest.java\n@@ -118,7 +118,8 @@ public void setup() throws Exception {\n                 \"\");\n \n         ClassFinder finder = getClassFinder();\n-        FrontendDependencies deps = new FrontendDependencies(finder) {\n+        FrontendDependencies deps = new FrontendDependencies(finder, true, null,\n+                true) {\n \n             @Override\n             public Map<ChunkInfo, List<String>> getModules() {\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java\nindex db331e1825e..91c1f227622 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java\n@@ -82,7 +82,7 @@ public void routedComponent_entryPointsAreCollected() {\n         Mockito.when(classFinder.getAnnotatedClasses(Route.class))\n                 .thenReturn(Collections.singleton(RouteComponent.class));\n         FrontendDependencies dependencies = new FrontendDependencies(\n-                classFinder, false);\n+                classFinder, false, null, true);\n \n         DepsTests.assertImportsExcludingUI(dependencies.getModules(), \"foo.js\");\n         DepsTests.assertImports(dependencies.getScripts(), \"bar.js\");\n@@ -97,7 +97,7 @@ public void appShellConfigurator_collectedAsEntryPoint()\n                 .thenReturn((Class) FakeLumo.class);\n \n         FrontendDependencies dependencies = new FrontendDependencies(\n-                classFinder, false);\n+                classFinder, false, null, true);\n \n         Assert.assertEquals(\"UI, AppShell should be found\", 2,\n                 dependencies.getEntryPoints().size());\n@@ -120,7 +120,7 @@ public void themeDefiningClassAndName_throwsException()\n \n         IllegalStateException exception = Assert.assertThrows(\n                 IllegalStateException.class,\n-                () -> new FrontendDependencies(classFinder, false));\n+                () -> new FrontendDependencies(classFinder, false, null, true));\n \n         Assert.assertEquals(\"Unexpected message for the thrown exception\",\n                 \"Theme name and theme class can not both be specified. \"\n@@ -138,7 +138,7 @@ public void noDefaultThemeAvailable_throwsException()\n \n         IllegalStateException exception = Assert.assertThrows(\n                 IllegalStateException.class,\n-                () -> new FrontendDependencies(classFinder, false));\n+                () -> new FrontendDependencies(classFinder, false, null, true));\n \n         Assert.assertEquals(\"Thrown exception didn't contain correct message\",\n                 \"Lumo dependency needs to be available on the classpath when using a theme name.\",\n@@ -151,7 +151,7 @@ public void appThemeDefined_getsLumoAsTheme() {\n                 .thenReturn(Collections.singleton(MyAppThemeShell.class));\n \n         FrontendDependencies dependencies = new FrontendDependencies(\n-                classFinder, false);\n+                classFinder, false, null, true);\n \n         Assert.assertEquals(\"Faulty default theme received\", FakeLumo.class,\n                 dependencies.getThemeDefinition().getTheme());\n@@ -164,7 +164,7 @@ public void onlyThemeVariantDefined_getsLumoAsTheme_preserveVariant() {\n                 .thenReturn(Collections.singleton(ThemeVariantOnly.class));\n \n         FrontendDependencies dependencies = new FrontendDependencies(\n-                classFinder, false);\n+                classFinder, false, null, true);\n \n         Assert.assertEquals(\"Faulty default theme received\", FakeLumo.class,\n                 dependencies.getThemeDefinition().getTheme());\n@@ -178,7 +178,7 @@ public void hasErrorParameterComponent_entryPointIsCollected() {\n         Mockito.when(classFinder.getSubTypesOf(HasErrorParameter.class))\n                 .thenReturn(Collections.singleton(ErrorComponent.class));\n         FrontendDependencies dependencies = new FrontendDependencies(\n-                classFinder, false);\n+                classFinder, false, null, true);\n         DepsTests.assertImportsExcludingUI(dependencies.getModules(),\n                 \"./src/bar.js\");\n         DepsTests.assertImports(dependencies.getScripts(), \"./src/baz.js\");\n@@ -189,7 +189,7 @@ public void componentInsideUiInitListener_entryPointsAreCollected() {\n         Mockito.when(classFinder.getSubTypesOf(UIInitListener.class))\n                 .thenReturn(Collections.singleton(MyUIInitListener.class));\n         FrontendDependencies dependencies = new FrontendDependencies(\n-                classFinder, false);\n+                classFinder, false, null, true);\n \n         DepsTests.assertImportsExcludingUI(dependencies.getModules(), \"baz.js\");\n         DepsTests.assertImports(dependencies.getScripts(), \"foobar.js\");\n@@ -201,7 +201,7 @@ public void componentInsideUiInitListenerInsideServiceInitListener_entryPointsAr\n         Mockito.when(classFinder.getSubTypesOf(VaadinServiceInitListener.class))\n                 .thenReturn(Collections.singleton(MyServiceListener.class));\n         FrontendDependencies dependencies = new FrontendDependencies(\n-                classFinder, false);\n+                classFinder, false, null, true);\n         DepsTests.assertImportsExcludingUI(dependencies.getModules(), \"baz.js\");\n         DepsTests.assertImports(dependencies.getScripts(), \"foobar.js\");\n     }\n@@ -211,7 +211,7 @@ public void jsScriptOrderIsPreserved() {\n         Mockito.when(classFinder.getAnnotatedClasses(Route.class))\n                 .thenReturn(Collections.singleton(JsOrderComponent.class));\n         FrontendDependencies dependencies = new FrontendDependencies(\n-                classFinder, false);\n+                classFinder, false, null, true);\n \n         DepsTests.assertImports(dependencies.getScripts(), \"a.js\", \"b.js\",\n                 \"c.js\");\n@@ -222,7 +222,7 @@ public void jsModuleOrderIsPreserved() {\n         Mockito.when(classFinder.getAnnotatedClasses(Route.class)).thenReturn(\n                 Collections.singleton(JsModuleOrderComponent.class));\n         FrontendDependencies dependencies = new FrontendDependencies(\n-                classFinder, false);\n+                classFinder, false, null, true);\n \n         DepsTests.assertImportsExcludingUI(dependencies.getModules(), \"c.js\",\n                 \"b.js\", \"a.js\");\n@@ -235,7 +235,7 @@ public void extractsAndScansClassesFromMethodReferences() {\n                 Collections.singleton(RouteComponentWithMethodReference.class));\n \n         FrontendDependencies dependencies = new FrontendDependencies(\n-                classFinder, false);\n+                classFinder, false, null, true);\n \n         DepsTests.assertImportsExcludingUI(dependencies.getModules(), \"foo.js\",\n                 \"baz.js\", \"bar.js\");\n@@ -249,7 +249,7 @@ public void defaultThemeIsLoadedForExporters() throws Exception {\n                         .collect(Collectors.toSet()));\n \n         FrontendDependencies dependencies = new FrontendDependencies(\n-                classFinder, true);\n+                classFinder, true, null, true);\n \n         Assert.assertNotNull(dependencies.getTheme());\n         Assert.assertNotNull(dependencies.getThemeDefinition());\n@@ -258,7 +258,7 @@ public void defaultThemeIsLoadedForExporters() throws Exception {\n     @Test // #9861\n     public void collectEntryPoints_uiIsAlwaysCollected() {\n         FrontendDependencies dependencies = new FrontendDependencies(\n-                classFinder, false);\n+                classFinder, false, null, true);\n \n         Optional<EntryPointData> uiEndpointData = dependencies.getEntryPoints()\n                 .stream().filter(entryPoint -> entryPoint.getName()\n@@ -277,7 +277,7 @@ public void classInMultipleEntryPoints_collectEntryPointsNotOverrideInitial() {\n                 .thenReturn(Collections.singleton(TestRoute.class));\n \n         FrontendDependencies dependencies = new FrontendDependencies(\n-                classFinder, false);\n+                classFinder, false, null, true);\n         DepsTests.assertImports(dependencies.getModules(), \"reference.js\",\n                 \"@vaadin/common-frontend/ConnectionIndicator.js\");\n     }\n@@ -288,7 +288,7 @@ public void layoutClasses_collectedAsEntrypoint() {\n                 .thenReturn(Collections.singleton(MainLayout.class));\n \n         FrontendDependencies dependencies = new FrontendDependencies(\n-                classFinder, false);\n+                classFinder, false, null, true);\n \n         Optional<EntryPointData> layoutEndpointData = dependencies\n                 .getEntryPoints().stream().filter(entryPoint -> entryPoint\n@@ -314,7 +314,7 @@ public void visitedExporter_previousEntryPointsNotOverridden()\n                         .collect(Collectors.toSet()));\n \n         FrontendDependencies dependencies = new FrontendDependencies(\n-                classFinder, true);\n+                classFinder, true, null, true);\n \n         DepsTests.assertImports(dependencies.getModules(), \"reference.js\",\n                 \"@vaadin/common-frontend/ConnectionIndicator.js\");\n@@ -324,7 +324,7 @@ public void visitedExporter_previousEntryPointsNotOverridden()\n     public void shouldVisit_shouldNotMatchOnPartOfPackage() {\n \n         FrontendDependencies dependencies = new FrontendDependencies(\n-                classFinder, true);\n+                classFinder, true, null, true);\n \n         Assert.assertTrue(\n                 \"second package should match fully not as starts with 'spring != springseason'\",\n@@ -356,7 +356,7 @@ public void classScanningForChildAndParentEntryPoint_ordered_childrenSeeClassesF\n                 .thenReturn(hierarchy);\n \n         FrontendDependencies dependencies = new FrontendDependencies(\n-                classFinder, false);\n+                classFinder, false, null, true);\n \n         hierarchy.forEach(entryPointClass -> verifyEntryPointData(dependencies,\n                 entryPointClass));\n@@ -373,7 +373,7 @@ public void classScanningForChildAndParentEntryPoint_shuffled_childrenSeeClasses\n                 .thenReturn(hierarchy);\n \n         FrontendDependencies dependencies = new FrontendDependencies(\n-                classFinder, false);\n+                classFinder, false, null, true);\n \n         hierarchy.forEach(entryPointClass -> verifyEntryPointData(dependencies,\n                 entryPointClass));\n@@ -390,7 +390,7 @@ public void classScanningForChildAndParentEntryPoint_reversed_childrenSeeClasses\n                 .thenReturn(hierarchy);\n \n         FrontendDependencies dependencies = new FrontendDependencies(\n-                classFinder, false);\n+                classFinder, false, null, true);\n \n         hierarchy.forEach(entryPointClass -> verifyEntryPointData(dependencies,\n                 entryPointClass));\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendScannerPwaTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendScannerPwaTest.java\nindex 28d2f9a4e3d..3e9a6651a8c 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendScannerPwaTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendScannerPwaTest.java\n@@ -11,8 +11,9 @@ public class FrontendScannerPwaTest extends AbstractScannerPwaTest {\n     protected PwaConfiguration getPwaConfiguration(Class<?>... classes)\n             throws Exception {\n         FrontendDependencies frontendDependencies = new FrontendDependencies(\n-                new DefaultClassFinder(new HashSet<>(\n-                        new ArrayList<>(Arrays.asList(classes)))));\n+                new DefaultClassFinder(\n+                        new HashSet<>(new ArrayList<>(Arrays.asList(classes)))),\n+                true, null, true);\n         return frontendDependencies.getPwaConfiguration();\n     }\n }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/ScannerDependenciesTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/ScannerDependenciesTest.java\nindex e90535f0558..6dfd6383abc 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/ScannerDependenciesTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/ScannerDependenciesTest.java\n@@ -47,8 +47,9 @@ public class ScannerDependenciesTest {\n \n     static FrontendDependencies getFrontendDependencies(Class<?>... classes) {\n         FrontendDependencies frontendDependencies = new FrontendDependencies(\n-                new DefaultClassFinder(new HashSet<>(\n-                        new ArrayList<>(Arrays.asList(classes)))));\n+                new DefaultClassFinder(\n+                        new HashSet<>(new ArrayList<>(Arrays.asList(classes)))),\n+                true, null, true);\n         return frontendDependencies;\n     }\n \n@@ -258,7 +259,7 @@ public void should_visitMethodAnnotations() {\n         FrontendDependencies deps = getFrontendDependencies(\n                 MethodAnnotationRoute.class);\n         DepsTests.assertImportsExcludingUI(deps.getModules(),\n-                \"./search-layout.js\", \"./search-field.js\");\n+                \"./search-field.js\", \"./search-layout.js\");\n     }\n \n     @Route\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/ScannerThemeTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/ScannerThemeTest.java\nindex 172dafc0889..5dfc847a506 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/ScannerThemeTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/ScannerThemeTest.java\n@@ -103,7 +103,8 @@ public void should_visitDefaultTheme_when_noThemeAnnotationIsGiven()\n         // since it has @JsModule annotation which makes it easy to verify\n         // that the Theme was actually visited and modules collected\n \n-        FrontendDependencies deps = new FrontendDependencies(finder) {\n+        FrontendDependencies deps = new FrontendDependencies(finder, true, null,\n+                true) {\n             @Override\n             Class<? extends AbstractTheme> getDefaultTheme()\n                     throws IOException {\n@@ -137,7 +138,8 @@ public void should_defaultToLumoTheme_when_noThemeDefinedByExporter()\n         Mockito.doReturn(Theme4.class).when(finder)\n                 .loadClass(FrontendDependencies.LUMO);\n \n-        FrontendDependencies deps = new FrontendDependencies(finder);\n+        FrontendDependencies deps = new FrontendDependencies(finder, true, null,\n+                true);\n         assertEquals(\n                 \"Theme4 should have been returned when default theme was selected\",\n                 Theme4.class, deps.getThemeDefinition().getTheme());\n@@ -150,7 +152,7 @@ public void should_notAttemptToOverrideTheme_when_noExportersFound()\n         DefaultClassFinder finder = spy(new DefaultClassFinder(\n                 Collections.singleton(RootViewWithTheme.class)));\n \n-        new FrontendDependencies(finder);\n+        new FrontendDependencies(finder, true, null, true);\n         verify(finder, times(0)).loadClass(FrontendDependencies.LUMO);\n     }\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21103",
    "pr_id": 21103,
    "issue_id": 21095,
    "repo": "vaadin/flow",
    "problem_statement": "Connection recovery does not work when a request is terminated while it's being processed\n### Description of the bug\n\nThe client does not recover properly if the HTTP connection is terminated while a request is processed on the server. The client manages to apply the changes from the original request when connectivity is restored but it also shows an Internal error notification and keeps retrying every five seconds. Each retry leads to a \"Unexpected message id from the client. Expected client id: 4, got 3\" error in the server console.\n\n![Image](https://github.com/user-attachments/assets/c8b06f87-6db4-4482-a362-6b51c4c0f6d4)\n\n### Expected behavior\n\nExpected that there's no Internal error and no retries.\n\n### Minimal reproducible example\n\n1. Create application at https://start.vaadin.com/ with just a Hello World view for Flow. Select Vaadin 24.7 before downloading since Vaadin 24.6 is the default at the time of writing.\n2. Edit the click handler in `HelloWorldView` to have a 5-second delay (so that you will have time to kill the connection before the response is sent)\n3. Run in production mode with `mvn -Pproduction package; java -jar target/my-app-1.0-SNAPSHOT.jar`\n4. Open a local SSH connection that forwards port 8081 to 8080. `ssh -L 8081:localhost:8080 localhost`\n5. Open http://localhost:8081/ in the browser\n6. Click the button and then immediately terminate the SSH connection using `^d ^c` (only  `^d` would make it wait until all forwarded connections are closed)\n7. Observe that the black offline status bar shows up immediately in the browser\n8. Open the SSH connection again\n9. Observe that the black offline bar changes to a blue online bar after a couple of seconds.\n10. Observe that the expected notification is shown in the lower left corner\n11. Observe that there's also an Internal error notification in the upper right corner\n12. Observe that there's a new \"Unexpected message id from the client. Expected client id: 4, got 3.\" message in the server console every 5 seconds until you reload in the browser or close the tab\n\n### Versions\n\n- Vaadin / Flow version: Vaadin 24.7.0.beta1\n- Java version: Temurin-21.0.4+7\n- OS version: macOS 15.3.1\n- Browser version (if applicable): Chrome 133. Also tested with the latest versions of Firefox and Safari.\n- Application Server (if applicable): Tomcat 10.1.36 through Spring Boot\n- IDE (if applicable): None, running in production mode from the command line\n",
    "issue_word_count": 413,
    "test_files_count": 9,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "flow-client/src/main/java/com/vaadin/client/communication/MessageSender.java",
      "flow-test-util/src/main/java/com/vaadin/flow/testutil/AbstractBrowserConsoleTest.java",
      "flow-test-util/src/main/java/com/vaadin/flow/testutil/ChromeBrowserTestWithProxy.java",
      "flow-test-util/src/main/java/com/vaadin/flow/testutil/net/SimpleProxy.java",
      "flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/faulttolerance/BeforeOutputStreamActionFilter.java",
      "flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/faulttolerance/NetworkInterruptionView.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/faulttolerance/NetworkInterruptionIT.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/PushChromeBrowserTestWithProxy.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/ReconnectTest.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/SendMultibyteCharactersTest.java"
    ],
    "pr_changed_test_files": [
      "flow-test-util/src/main/java/com/vaadin/flow/testutil/AbstractBrowserConsoleTest.java",
      "flow-test-util/src/main/java/com/vaadin/flow/testutil/ChromeBrowserTestWithProxy.java",
      "flow-test-util/src/main/java/com/vaadin/flow/testutil/net/SimpleProxy.java",
      "flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/faulttolerance/BeforeOutputStreamActionFilter.java",
      "flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/faulttolerance/NetworkInterruptionView.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/faulttolerance/NetworkInterruptionIT.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/PushChromeBrowserTestWithProxy.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/ReconnectTest.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/SendMultibyteCharactersTest.java"
    ],
    "base_commit": "9668a79708b4d4d5617029686db36cfdb8dc38ee",
    "head_commit": "76cfb73ffeb07c54713cbbf1275994ca879903aa",
    "repo_url": "https://github.com/vaadin/flow/pull/21103",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21103",
    "dockerfile": "",
    "pr_merged_at": "2025-03-10T08:09:06.000Z",
    "patch": "diff --git a/flow-client/src/main/java/com/vaadin/client/communication/MessageSender.java b/flow-client/src/main/java/com/vaadin/client/communication/MessageSender.java\nindex 71a757d0bcb..c5664cdea05 100644\n--- a/flow-client/src/main/java/com/vaadin/client/communication/MessageSender.java\n+++ b/flow-client/src/main/java/com/vaadin/client/communication/MessageSender.java\n@@ -20,7 +20,6 @@\n \n import com.google.gwt.core.client.GWT;\n import com.google.gwt.user.client.Timer;\n-\n import com.vaadin.client.ConnectionIndicator;\n import com.vaadin.client.Console;\n import com.vaadin.client.Registry;\n@@ -208,7 +207,12 @@ private JsonObject preparePayload(final JsonArray reqInvocations,\n      */\n     public void send(final JsonObject payload) {\n         if (hasQueuedMessages()) {\n-            messageQueue.add(payload);\n+            // The sever sync id is set in the private sendPayload method.\n+            // If it is already present on the payload, it means the message has\n+            // been already sent and enqueued.\n+            if (!payload.hasKey(ApplicationConstants.SERVER_SYNC_ID)) {\n+                messageQueue.add(payload);\n+            }\n             return;\n         }\n         messageQueue.add(payload);\n@@ -384,8 +388,8 @@ public void setClientToServerMessageId(int nextExpectedId, boolean force) {\n                 if (messageQueue.get(0)\n                         .getNumber(ApplicationConstants.CLIENT_TO_SERVER_ID)\n                         + 1 == nextExpectedId) {\n-                    resetTimer();\n                     messageQueue.remove(0);\n+                    resetTimer();\n                 }\n             }\n             return;\n",
    "test_patch": "diff --git a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/AbstractBrowserConsoleTest.java b/flow-test-util/src/main/java/com/vaadin/flow/testutil/AbstractBrowserConsoleTest.java\nsimilarity index 82%\nrename from flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/AbstractBrowserConsoleTest.java\nrename to flow-test-util/src/main/java/com/vaadin/flow/testutil/AbstractBrowserConsoleTest.java\nindex 944501c0408..2e8f8300e08 100644\n--- a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/AbstractBrowserConsoleTest.java\n+++ b/flow-test-util/src/main/java/com/vaadin/flow/testutil/AbstractBrowserConsoleTest.java\n@@ -1,14 +1,12 @@\n-package com.vaadin.flow.uitest.ui.push;\n+package com.vaadin.flow.testutil;\n \n import java.util.List;\n \n-import com.vaadin.flow.testutil.ChromeBrowserTest;\n-\n public abstract class AbstractBrowserConsoleTest extends ChromeBrowserTest {\n \n     @Override\n-    protected void open() {\n-        super.open();\n+    protected void open(String... parameters) {\n+        super.open(parameters);\n \n         getCommandExecutor().executeScript(\"window.logs = [];\"\n                 + \"var origConsole = window.console; window.console = {\"\n@@ -23,10 +21,10 @@ protected void open() {\n     protected List<?> getBrowserLogs(boolean reset) {\n         if (reset) {\n             return (List<?>) getCommandExecutor().executeScript(\n-                    \"var result = window.logs; window.logs=[]; return result;\");\n+                    \"var result = window.logs; window.logs=[]; return result || [];\");\n         } else {\n             return (List<?>) getCommandExecutor()\n-                    .executeScript(\"return window.logs;\");\n+                    .executeScript(\"return window.logs || [];\");\n         }\n     }\n \n\ndiff --git a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/ChromeBrowserTestWithProxy.java b/flow-test-util/src/main/java/com/vaadin/flow/testutil/ChromeBrowserTestWithProxy.java\nsimilarity index 94%\nrename from flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/ChromeBrowserTestWithProxy.java\nrename to flow-test-util/src/main/java/com/vaadin/flow/testutil/ChromeBrowserTestWithProxy.java\nindex 4322d6169eb..b2e0505a9e5 100644\n--- a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/ChromeBrowserTestWithProxy.java\n+++ b/flow-test-util/src/main/java/com/vaadin/flow/testutil/ChromeBrowserTestWithProxy.java\n@@ -1,14 +1,12 @@\n-package com.vaadin.flow.uitest.ui.push;\n+package com.vaadin.flow.testutil;\n \n import java.io.IOException;\n import java.util.concurrent.atomic.AtomicInteger;\n \n import org.junit.After;\n-import org.junit.experimental.categories.Category;\n \n-import com.vaadin.flow.testcategory.PushTests;\n+import com.vaadin.flow.testutil.net.SimpleProxy;\n \n-@Category(PushTests.class)\n public abstract class ChromeBrowserTestWithProxy\n         extends AbstractBrowserConsoleTest {\n \n\ndiff --git a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/SimpleProxy.java b/flow-test-util/src/main/java/com/vaadin/flow/testutil/net/SimpleProxy.java\nsimilarity index 98%\nrename from flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/SimpleProxy.java\nrename to flow-test-util/src/main/java/com/vaadin/flow/testutil/net/SimpleProxy.java\nindex 95a1c09e152..ef34b101353 100644\n--- a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/SimpleProxy.java\n+++ b/flow-test-util/src/main/java/com/vaadin/flow/testutil/net/SimpleProxy.java\n@@ -1,4 +1,4 @@\n-package com.vaadin.flow.uitest.ui.push;\n+package com.vaadin.flow.testutil.net;\n \n import java.io.IOException;\n import java.io.InputStream;\n\ndiff --git a/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/faulttolerance/BeforeOutputStreamActionFilter.java b/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/faulttolerance/BeforeOutputStreamActionFilter.java\nnew file mode 100644\nindex 00000000000..bf31c0aebd8\n--- /dev/null\n+++ b/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/faulttolerance/BeforeOutputStreamActionFilter.java\n@@ -0,0 +1,56 @@\n+package com.vaadin.flow.uitest.ui.faulttolerance;\n+\n+import java.io.IOException;\n+\n+import jakarta.servlet.Filter;\n+import jakarta.servlet.FilterChain;\n+import jakarta.servlet.ServletException;\n+import jakarta.servlet.ServletOutputStream;\n+import jakarta.servlet.ServletRequest;\n+import jakarta.servlet.ServletResponse;\n+import jakarta.servlet.annotation.WebFilter;\n+import jakarta.servlet.http.HttpServletResponse;\n+import jakarta.servlet.http.HttpServletResponseWrapper;\n+\n+import com.vaadin.flow.server.VaadinServletResponse;\n+\n+@WebFilter(urlPatterns = \"/*\")\n+public class BeforeOutputStreamActionFilter implements Filter {\n+    @Override\n+    public void doFilter(ServletRequest request, ServletResponse response,\n+            FilterChain chain) throws IOException, ServletException {\n+        response = new BeforeOutputStreamActionResponse(\n+                (HttpServletResponse) response);\n+        chain.doFilter(request, response);\n+    }\n+\n+    static void beforeGettingOutputStream(Runnable action) {\n+        ServletResponse response = VaadinServletResponse.getCurrent()\n+                .getResponse();\n+        if (response instanceof BeforeOutputStreamActionResponse cast) {\n+            cast.beforeGettingOutputStream(action);\n+        }\n+    }\n+\n+    public static class BeforeOutputStreamActionResponse\n+            extends HttpServletResponseWrapper {\n+        private Runnable action;\n+\n+        BeforeOutputStreamActionResponse(HttpServletResponse response) {\n+            super(response);\n+        }\n+\n+        private void beforeGettingOutputStream(Runnable action) {\n+            this.action = action;\n+        }\n+\n+        @Override\n+        public ServletOutputStream getOutputStream() throws IOException {\n+            if (action != null) {\n+                action.run();\n+                action = null;\n+            }\n+            return super.getOutputStream();\n+        }\n+    }\n+}\n\ndiff --git a/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/faulttolerance/NetworkInterruptionView.java b/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/faulttolerance/NetworkInterruptionView.java\nnew file mode 100644\nindex 00000000000..3ba14be9eb8\n--- /dev/null\n+++ b/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/faulttolerance/NetworkInterruptionView.java\n@@ -0,0 +1,71 @@\n+package com.vaadin.flow.uitest.ui.faulttolerance;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.component.html.NativeButton;\n+import com.vaadin.flow.component.html.Span;\n+import com.vaadin.flow.router.AfterNavigationEvent;\n+import com.vaadin.flow.router.AfterNavigationObserver;\n+import com.vaadin.flow.router.Route;\n+\n+@Route(\"com.vaadin.flow.uitest.ui.faulttolerance.NetworkInterruptionView\")\n+public class NetworkInterruptionView extends Div\n+        implements AfterNavigationObserver {\n+\n+    public static final String INCREMENT_BUTTON_ID = \"incrementCounter\";\n+    public static final String INCREMENT_STOP_PROXY_BUTTON_ID = \"incrementCounterStopProxy\";\n+    public static final String COUNTER_ID = \"counter\";\n+    private final NativeButton incrementAndStopProxyButton;\n+\n+    private int clientCounter = 0;\n+    private String monitorFile;\n+\n+    public NetworkInterruptionView() {\n+        Span counter = new Span(\"0\");\n+        counter.setId(COUNTER_ID);\n+        NativeButton incrementButton = new NativeButton(\"Increment\", e -> {\n+            clientCounter++;\n+            counter.setText(clientCounter + \"\");\n+        });\n+        incrementButton.setId(INCREMENT_BUTTON_ID);\n+        incrementAndStopProxyButton = new NativeButton(\"Increment (stop proxy)\",\n+                e -> {\n+                    clientCounter++;\n+                    counter.setText(clientCounter + \"\");\n+                    BeforeOutputStreamActionFilter.beforeGettingOutputStream(\n+                            this::stopProxyConnection);\n+                });\n+        incrementAndStopProxyButton.setId(INCREMENT_STOP_PROXY_BUTTON_ID);\n+        add(incrementButton, incrementAndStopProxyButton, counter);\n+    }\n+\n+    @Override\n+    public void afterNavigation(AfterNavigationEvent event) {\n+        monitorFile = event.getLocation().getQueryParameters()\n+                .getSingleParameter(\"proxyMonitorFile\").orElse(null);\n+        if (monitorFile == null) {\n+            remove(incrementAndStopProxyButton);\n+        }\n+    }\n+\n+    private void stopProxyConnection() {\n+        try {\n+            Files.writeString(Paths.get(monitorFile), \"stop\",\n+                    StandardOpenOption.TRUNCATE_EXISTING);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+        // wait for proxy disconnection\n+        try {\n+            Thread.sleep(200);\n+        } catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n+            throw new RuntimeException(e);\n+        }\n+    }\n+}\n\ndiff --git a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/faulttolerance/NetworkInterruptionIT.java b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/faulttolerance/NetworkInterruptionIT.java\nnew file mode 100644\nindex 00000000000..3a5583aea70\n--- /dev/null\n+++ b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/faulttolerance/NetworkInterruptionIT.java\n@@ -0,0 +1,145 @@\n+package com.vaadin.flow.uitest.ui.faulttolerance;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardWatchEventKinds;\n+import java.nio.file.WatchEvent;\n+import java.nio.file.WatchKey;\n+import java.nio.file.WatchService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.junit.After;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.openqa.selenium.By;\n+\n+import com.vaadin.flow.component.html.testbench.NativeButtonElement;\n+import com.vaadin.flow.component.html.testbench.SpanElement;\n+import com.vaadin.flow.testutil.ChromeBrowserTestWithProxy;\n+\n+public class NetworkInterruptionIT extends ChromeBrowserTestWithProxy {\n+\n+    private AtomicBoolean stopWatcher = new AtomicBoolean(false);\n+\n+    @Rule\n+    public TemporaryFolder tempDir = new TemporaryFolder();\n+\n+    @Override\n+    public void setup() throws Exception {\n+        super.setup();\n+        Path proxyMonitorFile = tempDir.newFile(\"flow-test-proxy-monitor.txt\")\n+                .toPath();\n+        WatchService watchService = FileSystems.getDefault().newWatchService();\n+        tempDir.getRoot().toPath().register(watchService,\n+                StandardWatchEventKinds.ENTRY_MODIFY);\n+        AtomicBoolean stopWatcher = new AtomicBoolean(false);\n+        new Thread(() -> {\n+            WatchKey key;\n+            try (WatchService ws = watchService) {\n+                while (!stopWatcher.get()) {\n+                    key = ws.poll(100, TimeUnit.MILLISECONDS);\n+                    if (key != null) {\n+                        for (WatchEvent<?> event : key.pollEvents()) {\n+                            if (event.context() instanceof Path p\n+                                    && proxyMonitorFile.equals(tempDir.getRoot()\n+                                            .toPath().resolve(p))) {\n+                                if (Files.readString(proxyMonitorFile)\n+                                        .contains(\"stop\")) {\n+                                    disconnectProxy();\n+                                }\n+                            }\n+                        }\n+                        key.reset();\n+                    }\n+                }\n+            } catch (IOException e) {\n+                throw new UncheckedIOException(e);\n+            } catch (InterruptedException e) {\n+                Thread.currentThread().interrupt();\n+                throw new IllegalStateException(e);\n+            }\n+        }).start();\n+        this.stopWatcher = stopWatcher;\n+        open(\"proxyMonitorFile=\" + proxyMonitorFile.toAbsolutePath());\n+        testBench().disableWaitForVaadin();\n+    }\n+\n+    @After\n+    public void stopWatcher() {\n+        stopWatcher.set(true);\n+    }\n+\n+    @Test\n+    public void networkInterruption_clickIncrementButton_messageQueuedAndResent()\n+            throws IOException {\n+        disconnectProxy();\n+\n+        $(NativeButtonElement.class)\n+                .id(NetworkInterruptionView.INCREMENT_BUTTON_ID).click();\n+        waitForReconnectAttempts();\n+        connectProxy();\n+\n+        waitForLogMessage(\"Re-established connection to server\");\n+\n+        waitUntil(d -> Integer.parseInt($(SpanElement.class)\n+                .id(NetworkInterruptionView.COUNTER_ID).getText()) == 1);\n+        ensureNoSystemErrorFromServer();\n+    }\n+\n+    @Test\n+    public void networkInterruption_clickIncrementButtonMultipleTime_messagesQueuedAndResent()\n+            throws IOException {\n+        disconnectProxy();\n+\n+        NativeButtonElement button = $(NativeButtonElement.class)\n+                .id(NetworkInterruptionView.INCREMENT_BUTTON_ID);\n+\n+        button.click();\n+        button.click();\n+        button.click();\n+        button.click();\n+        waitForReconnectAttempts();\n+        connectProxy();\n+\n+        waitForLogMessage(\"Re-established connection to server\");\n+\n+        waitUntil(d -> Integer.parseInt($(SpanElement.class)\n+                .id(NetworkInterruptionView.COUNTER_ID).getText()) == 4);\n+        ensureNoSystemErrorFromServer();\n+    }\n+\n+    @Test\n+    public void networkInterruption_dropProxyBeforeResponse_serverMessageCachedAndResent()\n+            throws Exception {\n+        $(NativeButtonElement.class)\n+                .id(NetworkInterruptionView.INCREMENT_STOP_PROXY_BUTTON_ID)\n+                .click();\n+        waitForReconnectAttempts();\n+        connectProxy();\n+        waitForLogMessage(\"Re-established connection to server\");\n+\n+        waitUntil(d -> Integer.parseInt($(SpanElement.class)\n+                .id(NetworkInterruptionView.COUNTER_ID).getText()) == 1);\n+        ensureNoSystemErrorFromServer();\n+    }\n+\n+    private void waitForReconnectAttempts() {\n+        waitForLogMessage(\"Reconnect attempt 2 for XHR\");\n+    }\n+\n+    private void ensureNoSystemErrorFromServer() {\n+        // Make sure there is no error caused by messages sync lost\n+        waitForElementNotPresent(By.cssSelector(\"div.v-system-error\"));\n+    }\n+\n+    private void waitForLogMessage(String expectedMessage) {\n+        waitUntil(driver -> getBrowserLogs(true).stream().anyMatch(\n+                message -> expectedMessage.equals(message.toString())));\n+    }\n+\n+}\n\ndiff --git a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/PushChromeBrowserTestWithProxy.java b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/PushChromeBrowserTestWithProxy.java\nnew file mode 100644\nindex 00000000000..3316c0b1ffe\n--- /dev/null\n+++ b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/PushChromeBrowserTestWithProxy.java\n@@ -0,0 +1,12 @@\n+package com.vaadin.flow.uitest.ui.push;\n+\n+import org.junit.experimental.categories.Category;\n+\n+import com.vaadin.flow.testcategory.PushTests;\n+import com.vaadin.flow.testutil.ChromeBrowserTestWithProxy;\n+\n+@Category(PushTests.class)\n+public abstract class PushChromeBrowserTestWithProxy\n+        extends ChromeBrowserTestWithProxy {\n+\n+}\n\ndiff --git a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/ReconnectTest.java b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/ReconnectTest.java\nindex 8c8470c4150..d876665c279 100644\n--- a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/ReconnectTest.java\n+++ b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/ReconnectTest.java\n@@ -3,17 +3,18 @@\n import java.io.IOException;\n \n import org.junit.Test;\n+import org.openqa.selenium.By;\n import org.openqa.selenium.NoSuchElementException;\n import org.openqa.selenium.WebElement;\n import org.openqa.selenium.remote.DesiredCapabilities;\n \n-public abstract class ReconnectTest extends ChromeBrowserTestWithProxy {\n+public abstract class ReconnectTest extends PushChromeBrowserTestWithProxy {\n \n     @Override\n     public void setup() throws Exception {\n         super.setup();\n \n-        open();\n+        open((String[]) null);\n \n         startTimer();\n         waitUntilServerCounterChanges();\n@@ -89,6 +90,12 @@ private void waitUntilServerCounterChanges() {\n                 return false;\n             }\n         }, 30);\n+        ensureNoSystemErrorFromServer();\n+    }\n+\n+    private void ensureNoSystemErrorFromServer() {\n+        // Make sure there is no error caused by messages sync lost\n+        waitForElementNotPresent(By.cssSelector(\"div.v-system-error\"));\n     }\n \n     private void waitUntilClientCounterChanges(final int expectedValue) {\n\ndiff --git a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/SendMultibyteCharactersTest.java b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/SendMultibyteCharactersTest.java\nindex ad5e12ac9ab..4a558c68fae 100644\n--- a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/SendMultibyteCharactersTest.java\n+++ b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/SendMultibyteCharactersTest.java\n@@ -10,6 +10,7 @@\n import org.openqa.selenium.Keys;\n \n import com.vaadin.flow.testcategory.PushTests;\n+import com.vaadin.flow.testutil.AbstractBrowserConsoleTest;\n import com.vaadin.testbench.TestBenchElement;\n \n @Category(PushTests.class)\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21099",
    "pr_id": 21099,
    "issue_id": 20992,
    "repo": "vaadin/flow",
    "problem_statement": "frontendHotploy isn't working for a Vaadin multi-module gradle project\n### Description of the bug\n\nI have a Vaadin 24 multi-module gradle project where I want to use the frontendHotdeploy so that I don't have to restart the server every time I make a css or js change. Unfortunately the hotdeploy does not work in this constellation. \n\nIn the Vaadin 24 gradle starter template, the frontend folder is under src/main/frontend. In a multi-module project it must be under src/main/resources/META-INF/resources/frontend. Otherwise, an error message will appear at startup stating that the files cannot be found. If the frontendHotploy flag is now set to true in build.gradle, it no longer works\n\n### Expected behavior\n\nThe hotreload of css and js works so that the server does not have to be constantly restarted\n\n### Minimal reproducible example\n\nTwo Vaadin 24 gradle starter projects where one is added as a dependency via build.gradle.\n\n**Project 1:**\n- settings.gradle: rootProject.name = 'project-components'\n\n\n**Project 2:**\n- settings.gradle: \nrootProject.name = 'project-main'\ninclude(\":project-components\")\nproject(\":project-components\").projectDir = new File(\"../project-components\")\n\n- build.gradle\nvaadin {\n    frontendHotdeploy = true;\n}\ndependencies {\n    implementation(project(\":project-components\"))\n}\n\n\n\n\n### Versions\n\n- Vaadin / Flow version: 24\n- Java version: 17\n- OS version: MacOS 15.3\n- Browser version (if applicable): Safari\n- Application Server (if applicable): Wildfly V35\n- IDE (if applicable): Intellij\n",
    "issue_word_count": 225,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "vaadin-dev-server/src/main/java/com/vaadin/base/devserver/ExternalDependencyWatcher.java",
      "vaadin-dev-server/src/test/java/com/vaadin/base/devserver/FileWatcherTest.java"
    ],
    "pr_changed_test_files": [
      "vaadin-dev-server/src/test/java/com/vaadin/base/devserver/FileWatcherTest.java"
    ],
    "base_commit": "bc78ab705d3bd7b6c805149fbac8a7eaea008d62",
    "head_commit": "1280c2f74003c4c5201779a56df712fbfb985848",
    "repo_url": "https://github.com/vaadin/flow/pull/21099",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21099",
    "dockerfile": "",
    "pr_merged_at": "2025-03-13T11:27:56.000Z",
    "patch": "diff --git a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/ExternalDependencyWatcher.java b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/ExternalDependencyWatcher.java\nindex 92caf92b064..e5971d9c9f7 100644\n--- a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/ExternalDependencyWatcher.java\n+++ b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/ExternalDependencyWatcher.java\n@@ -57,6 +57,9 @@ public ExternalDependencyWatcher(VaadinContext context,\n                 }\n             }\n         } else {\n+            // Always watch src/main/resources/META-INF from active project\n+            hotdeployDependencyFolders.add(projectFolder.getAbsolutePath());\n+\n             File pomFile = new File(projectFolder, \"pom.xml\");\n             File parentPomFile = MavenUtils\n                     .getParentPomOfMultiModuleProject(pomFile);\n@@ -78,10 +81,6 @@ public ExternalDependencyWatcher(VaadinContext context,\n         for (String hotdeployDependencyFolder : hotdeployDependencyFolders) {\n             Path moduleFolder = projectFolder.toPath()\n                     .resolve(hotdeployDependencyFolder).normalize();\n-            if (moduleFolder.equals(projectFolder.toPath())) {\n-                // Don't watch the active module\n-                continue;\n-            }\n             Path metaInf = moduleFolder\n                     .resolve(Path.of(\"src\", \"main\", \"resources\", \"META-INF\"));\n             if (!watchDependencyFolder(metaInf.toFile(),\n",
    "test_patch": "diff --git a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/FileWatcherTest.java b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/FileWatcherTest.java\nindex a6d072f74d3..f51d297c5a4 100644\n--- a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/FileWatcherTest.java\n+++ b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/FileWatcherTest.java\n@@ -1,11 +1,18 @@\n package com.vaadin.base.devserver;\n \n import java.io.File;\n+import java.io.IOException;\n import java.nio.file.Files;\n import java.util.concurrent.atomic.AtomicReference;\n \n import org.junit.Assert;\n import org.junit.Test;\n+import org.mockito.MockedStatic;\n+import org.mockito.Mockito;\n+\n+import com.vaadin.flow.server.InitParameters;\n+import com.vaadin.flow.server.VaadinContext;\n+import com.vaadin.flow.server.startup.ApplicationConfiguration;\n \n public class FileWatcherTest {\n \n@@ -26,4 +33,115 @@ public void fileWatcherTriggeredForModification() throws Exception {\n         Thread.sleep(50); // The watcher is supposed to be triggered immediately\n         Assert.assertEquals(newFile, changed.get());\n     }\n+\n+    @Test\n+    public void externalDependencyWatcher_setViaParameter_TriggeredForModification()\n+            throws Exception {\n+        File projectFolder = Files.createTempDirectory(\"projectFolder\")\n+                .toFile();\n+        projectFolder.deleteOnExit();\n+\n+        String metaInf = \"/src/main/resources/META-INF/\";\n+        String rootPorjectResourceFrontend = projectFolder.getAbsolutePath()\n+                + metaInf + \"resources/frontend\";\n+        String subProjectLegacyFrontend = projectFolder.getAbsolutePath()\n+                + \"/fakeproject\" + metaInf + \"frontend\";\n+\n+        new File(rootPorjectResourceFrontend).mkdirs();\n+        new File(subProjectLegacyFrontend).mkdirs();\n+\n+        File jarFrontendResources = Files\n+                .createTempDirectory(\"jarFrontendResources\").toFile();\n+        jarFrontendResources.deleteOnExit();\n+\n+        VaadinContext vaadinContext = Mockito.mock(VaadinContext.class);\n+        ApplicationConfiguration config = Mockito\n+                .mock(ApplicationConfiguration.class);\n+        Mockito.when(config.getStringProperty(\n+                InitParameters.FRONTEND_HOTDEPLOY_DEPENDENCIES, null))\n+                .thenReturn(\"./,./fakeproject\");\n+        Mockito.when(config.getProjectFolder()).thenReturn(projectFolder);\n+\n+        try (MockedStatic<ApplicationConfiguration> appConfig = Mockito\n+                .mockStatic(ApplicationConfiguration.class)) {\n+            appConfig.when(() -> ApplicationConfiguration.get(Mockito.any()))\n+                    .thenReturn(config);\n+            new ExternalDependencyWatcher(vaadinContext, jarFrontendResources);\n+\n+            assertFileCountFound(jarFrontendResources, 0);\n+\n+            createFile(rootPorjectResourceFrontend + \"/somestyles.css\");\n+            assertFileCountFound(jarFrontendResources, 1);\n+\n+            createFile(subProjectLegacyFrontend + \"/somejs.js\");\n+            assertFileCountFound(jarFrontendResources, 2);\n+\n+            Assert.assertEquals(\"somestyles.css\",\n+                    jarFrontendResources.listFiles()[0].getName());\n+            Assert.assertEquals(\"somejs.js\",\n+                    jarFrontendResources.listFiles()[1].getName());\n+        }\n+    }\n+\n+    @Test\n+    public void externalDependencyWatcher_setAsDefaultForRunnerProjectButNotSubProject_TriggeredForModification()\n+            throws Exception {\n+        File projectFolder = Files.createTempDirectory(\"projectFolder\")\n+                .toFile();\n+        projectFolder.deleteOnExit();\n+\n+        String metaInf = \"/src/main/resources/META-INF/\";\n+        String rootPorjectResourceFrontend = projectFolder.getAbsolutePath()\n+                + metaInf + \"resources/frontend\";\n+        String subProjectLegacyFrontend = projectFolder.getAbsolutePath()\n+                + \"/fakeproject\" + metaInf + \"frontend\";\n+\n+        new File(rootPorjectResourceFrontend).mkdirs();\n+        new File(subProjectLegacyFrontend).mkdirs();\n+\n+        File jarFrontendResources = Files\n+                .createTempDirectory(\"jarFrontendResources\").toFile();\n+        jarFrontendResources.deleteOnExit();\n+\n+        VaadinContext vaadinContext = Mockito.mock(VaadinContext.class);\n+        ApplicationConfiguration config = Mockito\n+                .mock(ApplicationConfiguration.class);\n+        Mockito.when(config.getStringProperty(\n+                InitParameters.FRONTEND_HOTDEPLOY_DEPENDENCIES, null))\n+                .thenReturn(null);\n+        Mockito.when(config.getProjectFolder()).thenReturn(projectFolder);\n+\n+        try (MockedStatic<ApplicationConfiguration> appConfig = Mockito\n+                .mockStatic(ApplicationConfiguration.class)) {\n+            appConfig.when(() -> ApplicationConfiguration.get(Mockito.any()))\n+                    .thenReturn(config);\n+            new ExternalDependencyWatcher(vaadinContext, jarFrontendResources);\n+\n+            assertFileCountFound(jarFrontendResources, 0);\n+\n+            createFile(rootPorjectResourceFrontend + \"/somestyles.css\");\n+            assertFileCountFound(jarFrontendResources, 1);\n+\n+            createFile(subProjectLegacyFrontend + \"/somejs.js\");\n+            assertFileCountFound(jarFrontendResources, 1);\n+\n+            Assert.assertEquals(\"somestyles.css\",\n+                    jarFrontendResources.listFiles()[0].getName());\n+        }\n+    }\n+\n+    private void assertFileCountFound(File directory, int count)\n+            throws InterruptedException {\n+        Thread.sleep(100);\n+        Assert.assertEquals(\n+                \"Wrong amount of copied files found when there should be \"\n+                        + count + \".\",\n+                count, directory.listFiles().length);\n+\n+    }\n+\n+    private void createFile(String path) throws IOException {\n+        File newFile = new File(path);\n+        newFile.createNewFile();\n+    }\n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21083",
    "pr_id": 21083,
    "issue_id": 21082,
    "repo": "vaadin/flow",
    "problem_statement": "NavigationAcessControl compares strings with equality operator\n### Description of the bug\n\n## The `NavigationAccessControl` class uses the equality operator to compare the URLs of the login view.\n\nThe Control Center Starter uses an application property to set the login view of Control Center [to the Keycloak login view]. When upgrading from one version of Control Center to a newer version, this application property is read again by the configuration class in the newly deployed version, but fails with an exception because of this check, **even though the property has the same value as before**.\n\nhttps://github.com/vaadin/flow/blob/main/flow-server/src/main/java/com/vaadin/flow/server/auth/NavigationAccessControl.java#L218-L226\n\n### Expected behavior\n\nUpgrading a Control Center instance should not fail when the login URL has not changed between versions.\n\n### Minimal reproducible example\n\n## In a simple Vaadin app with security enabled\n\n1. Have a property class with two different properties.\n2. Set the value of both properties in `application.properties` or `application.yml` to the same value.\n3. In a configuration class (extending `VaadinWebSecurity`), load the properties and set the login URL of the Vaadin app using one and then the other with the `setOAuth2LoginPage` method. It should not fail on the first one, because it has not been set before. It should not fail on the second one, because it has the same value as the first one. \n![Image](https://github.com/user-attachments/assets/292de2f7-f8ed-497a-b5d2-5015b30ec25b)\n\n![Image](https://github.com/user-attachments/assets/59eb6ccc-eaf7-46be-a910-20776d844caf)\n\n![Image](https://github.com/user-attachments/assets/51226e13-626a-4682-92ad-874cabc2d847)\n\n### Versions\n\n- Vaadin / Flow version: 24.6\n- Java version: 21\n- OS version: macOS 15.3.1\n",
    "issue_word_count": 282,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/server/auth/NavigationAccessControl.java",
      "flow-server/src/test/java/com/vaadin/flow/server/auth/NavigationAccessControlTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/server/auth/NavigationAccessControlTest.java"
    ],
    "base_commit": "bc40f5cb110ad5cde767c3aeb3144fe5fb8cce0c",
    "head_commit": "895432a0c9aeadee5685d7ddb611658316a93f02",
    "repo_url": "https://github.com/vaadin/flow/pull/21083",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21083",
    "dockerfile": "",
    "pr_merged_at": "2025-03-06T10:44:43.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/auth/NavigationAccessControl.java b/flow-server/src/main/java/com/vaadin/flow/server/auth/NavigationAccessControl.java\nindex 1e95d28f4c6..026183bdfb4 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/auth/NavigationAccessControl.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/auth/NavigationAccessControl.java\n@@ -216,7 +216,7 @@ protected Class<? extends Component> getLoginView() {\n      *            the frontend view to use as login view\n      */\n     public void setLoginView(String loginUrl) {\n-        if (loginUrl == this.loginUrl) {\n+        if (Objects.equals(loginUrl, this.loginUrl)) {\n             // Probably hot reload\n             return;\n         }\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/auth/NavigationAccessControlTest.java b/flow-server/src/test/java/com/vaadin/flow/server/auth/NavigationAccessControlTest.java\nindex ec1a2acc724..da905b44116 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/auth/NavigationAccessControlTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/auth/NavigationAccessControlTest.java\n@@ -279,6 +279,14 @@ public void setLoginViewClassCannotBeCalledAfterSettingString() {\n         accessControl.setLoginView(TestLoginView.class);\n     }\n \n+    @Test\n+    public void setLoginViewStringShouldNotThrowWithSameString() {\n+        accessControl.setLoginView(\"/foo\");\n+        accessControl.setLoginView(\"/foo\");\n+        accessControl.setLoginView(new String(\"/foo\"));\n+        Assert.assertEquals(\"/foo\", accessControl.getLoginUrl());\n+    }\n+\n     @Test\n     public void beforeEnter_loginView_accessToLoginViewAlwaysAllowed() {\n         mockCheckerResult(checker1, AccessCheckDecision.DENY);\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21081",
    "pr_id": 21081,
    "issue_id": 20991,
    "repo": "vaadin/flow",
    "problem_statement": "Feature flag changes are ignored on client side when default bundle is used\n### Description of the bug\n\nI downloaded a project from Vaadin Start and enabled the `accessibleDisabledButtons` feature flag via Copilot. When the server starts, the logs show that the feature flag is activated, but it remains false on the client-side. On the contrary, the `dashboardComponent` flag appears as true on the client-side even though it's not present in `vaadin-featureflags.properties`. \n\nSetting `vaadin.frontend.hotdeploy=true` resolves the issue, which suggests that it's related to the default bundle, which Vaadin start projects use by default.\n\n### Expected behavior\n\nIt should be possible to activate / deactivate feature flags in Vaadin start projects without setting any additional parameters.\n\n### Minimal reproducible example\n\n[button-test.zip](https://github.com/user-attachments/files/18782881/button-test.zip)\n\n### Versions\n\n- Vaadin / Flow version: 24.7.0.alpha8\n- Java version: 23\n- OS version: Mac OS\n",
    "issue_word_count": 152,
    "test_files_count": 5,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentProvider.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlags.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrap.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentProviderTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlagsTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrapTest.java"
    ],
    "pr_changed_test_files": [
      "flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentProviderTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlagsTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrapTest.java"
    ],
    "base_commit": "b3d2e7ce018f8d9879e21f9d1e68b05e8fe3dff1",
    "head_commit": "1bf348b541f58f1227d9fe6b11c18f12606128fd",
    "repo_url": "https://github.com/vaadin/flow/pull/21081",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21081",
    "dockerfile": "",
    "pr_merged_at": "2025-03-05T09:46:58.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java\nindex ab7b8304b9a..21187e1e100 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java\n@@ -25,6 +25,7 @@\n import java.util.List;\n import java.util.Locale;\n import java.util.Optional;\n+import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n import org.apache.commons.io.FilenameUtils;\n@@ -37,6 +38,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.vaadin.experimental.Feature;\n+import com.vaadin.experimental.FeatureFlags;\n import com.vaadin.flow.component.UI;\n import com.vaadin.flow.function.DeploymentConfiguration;\n import com.vaadin.flow.internal.BootstrapHandlerHelper;\n@@ -110,6 +113,8 @@ public boolean synchronizedHandleRequest(VaadinSession session,\n             htmlElement.attr(\"lang\", locale.getLanguage());\n         }\n \n+        initializeFeatureFlags(indexDocument, request);\n+\n         JsonObject initialJson = Json.createObject();\n \n         if (service.getBootstrapInitialPredicate()\n@@ -209,6 +214,28 @@ public boolean synchronizedHandleRequest(VaadinSession session,\n         return true;\n     }\n \n+    private void initializeFeatureFlags(Document indexDocument,\n+            VaadinRequest request) {\n+        String script = featureFlagsInitializer(request);\n+        Element scriptElement = indexDocument.head().prependElement(\"script\");\n+        scriptElement.attr(SCRIPT_INITIAL, \"\");\n+        scriptElement.appendChild(new DataNode(script));\n+    }\n+\n+    static String featureFlagsInitializer(VaadinRequest request) {\n+        return FeatureFlags.get(request.getService().getContext()).getFeatures()\n+                .stream().filter(Feature::isEnabled)\n+                .map(feature -> String.format(\"activator(\\\"%s\\\");\",\n+                        feature.getId()))\n+                .collect(Collectors.joining(\"\\n\",\n+                        \"\"\"\n+                                window.Vaadin = window.Vaadin || {};\n+                                window.Vaadin.featureFlagsUpdaters = window.Vaadin.featureFlagsUpdaters || [];\n+                                window.Vaadin.featureFlagsUpdaters.push((activator) => {\n+                                \"\"\",\n+                        \"});\"));\n+    }\n+\n     private static void addDevBundleTheme(Document document,\n             VaadinContext context) {\n         ApplicationConfiguration config = ApplicationConfiguration.get(context);\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentProvider.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentProvider.java\nindex f313df7cc7f..7ad89e458db 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentProvider.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentProvider.java\n@@ -193,7 +193,9 @@ protected String generateNPMResponse(String tagName, VaadinRequest request,\n         // get the running script\n         boolean productionMode = request.getService()\n                 .getDeploymentConfiguration().isProductionMode();\n-        return getThisScript(tagName) + \"var scriptUri = thisScript.src;\"\n+\n+        return IndexHtmlRequestHandler.featureFlagsInitializer(request)\n+                + getThisScript(tagName) + \"var scriptUri = thisScript.src;\"\n                 + \"var index = scriptUri.lastIndexOf('\" + WEB_COMPONENT_PATH\n                 + \"');\" + \"var context = scriptUri.substring(0, index+\"\n                 + WEB_COMPONENT_PATH.length() + \");\"\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlags.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlags.java\nindex 4ffd937ada7..9ac7b5c66a3 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlags.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlags.java\n@@ -15,13 +15,14 @@\n  */\n package com.vaadin.flow.server.frontend;\n \n-import com.vaadin.experimental.FeatureFlags;\n-\n import java.io.File;\n import java.util.ArrayList;\n import java.util.List;\n \n-import static com.vaadin.flow.server.frontend.FrontendUtils.*;\n+import com.vaadin.experimental.Feature;\n+\n+import static com.vaadin.flow.server.frontend.FrontendUtils.FEATURE_FLAGS_FILE_NAME;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.GENERATED;\n \n /**\n  * A task for generating the feature flags file\n@@ -47,11 +48,31 @@ protected String getFileContent() {\n         lines.add(\n                 \"window.Vaadin.featureFlags = window.Vaadin.featureFlags || {};\");\n \n-        FeatureFlags featureFlags = options.getFeatureFlags();\n-        featureFlags.getFeatures().forEach(feature -> {\n-            lines.add(String.format(\"window.Vaadin.featureFlags.%s = %s;\",\n-                    feature.getId(), featureFlags.isEnabled(feature)));\n-        });\n+        // Initialize the flag entries only once. For exported web-components,\n+        // this script may be executed multiple times (one per embedded\n+        // component) and we should prevent active flags get overridden.\n+        List<Feature> featureFlags = options.getFeatureFlags().getFeatures();\n+        if (!featureFlags.isEmpty()) {\n+            lines.add(\n+                    \"if (Object.keys(window.Vaadin.featureFlags).length === 0) {\");\n+            featureFlags.forEach(feature -> {\n+                lines.add(\n+                        String.format(\"window.Vaadin.featureFlags.%s = false;\",\n+                                feature.getId()));\n+            });\n+            lines.add(\"};\");\n+        }\n+\n+        // Multiple feature flags updater functions can be registered, in case\n+        // of exported web-component. If the component comes from different web\n+        // applications, the active flags might not be the same.\n+        lines.add(\"if (window.Vaadin.featureFlagsUpdaters) { \");\n+        lines.add(\n+                \"const activator = (id) => window.Vaadin.featureFlags[id] = true;\");\n+        lines.add(\n+                \"window.Vaadin.featureFlagsUpdaters.forEach(updater => updater(activator));\");\n+        lines.add(\"delete window.Vaadin.featureFlagsUpdaters;\");\n+        lines.add(\"} \");\n \n         // See https://github.com/vaadin/flow/issues/14184\n         lines.add(\"export {};\");\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrap.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrap.java\nindex 82c69c9b21d..8ecf443cbbc 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrap.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrap.java\n@@ -19,6 +19,7 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import static com.vaadin.flow.server.frontend.FrontendUtils.FEATURE_FLAGS_FILE_NAME;\n import static com.vaadin.flow.server.frontend.FrontendUtils.GENERATED;\n import static com.vaadin.flow.server.frontend.FrontendUtils.WEB_COMPONENT_BOOTSTRAP_FILE_NAME;\n \n@@ -51,7 +52,7 @@ public class TaskGenerateWebComponentBootstrap\n     @Override\n     protected String getFileContent() {\n         List<String> lines = new ArrayList<>();\n-\n+        lines.add(String.format(\"import './%s';%n\", FEATURE_FLAGS_FILE_NAME));\n         lines.add(\"import 'Frontend/generated/flow/\"\n                 + FrontendUtils.IMPORTS_WEB_COMPONENT_NAME + \"';\");\n         lines.add(\"import { init } from '\" + FrontendUtils.JAR_RESOURCES_IMPORT\n",
    "test_patch": "diff --git a/flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java b/flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java\nindex 8e1e2166d56..0bedf5c4561 100644\n--- a/flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java\n+++ b/flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java\n@@ -531,9 +531,9 @@ public void runNodeUpdater_generateFeatureFlagsJsFile() throws Exception {\n                 .readString(generatedFeatureFlagsFile.toPath())\n                 .replace(\"\\r\\n\", \"\\n\");\n \n-        Assert.assertTrue(\"Example feature flag is not set\",\n+        Assert.assertTrue(\"Example feature should not be set at build time\",\n                 featureFlagsJs.contains(\n-                        \"window.Vaadin.featureFlags.exampleFeatureFlag = true;\\n\"));\n+                        \"window.Vaadin.featureFlags.exampleFeatureFlag = false;\\n\"));\n     }\n \n     private void fillAdapter() throws URISyntaxException {\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandlerTest.java\nindex b0fc2c64efb..5ecb8c65edd 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandlerTest.java\n@@ -210,6 +210,17 @@ public void serveIndexHtml_requestWithSomePath_hasBaseHrefElement()\n                 indexHtml.contains(\"<base href=\\\"./..\\\"\"));\n     }\n \n+    @Test\n+    public void serveIndexHtml_featureFlagsSetter_isPresent()\n+            throws IOException {\n+        indexHtmlRequestHandler.synchronizedHandleRequest(session,\n+                createVaadinRequest(\"/\"), response);\n+        String indexHtml = responseOutput.toString(StandardCharsets.UTF_8);\n+        Assert.assertTrue(\"Response should have Feature Flags updater function\",\n+                indexHtml.contains(\n+                        \"window.Vaadin.featureFlagsUpdaters.push((activator) => {\"));\n+    }\n+\n     @Test\n     public void canHandleRequest_requestWithRootPath_handleRequest() {\n         boolean canHandleRequest = indexHtmlRequestHandler\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentProviderTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentProviderTest.java\nindex 1524d2ab363..237dd06ed2f 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentProviderTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentProviderTest.java\n@@ -17,11 +17,11 @@\n package com.vaadin.flow.server.communication;\n \n import jakarta.servlet.ServletContext;\n-\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.util.HashSet;\n import java.util.Set;\n+import java.util.function.Supplier;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n@@ -31,6 +31,7 @@\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.ArgumentCaptor;\n+import org.mockito.ArgumentMatchers;\n import org.mockito.Mock;\n import org.mockito.Mockito;\n import org.mockito.MockitoAnnotations;\n@@ -42,6 +43,7 @@\n import com.vaadin.flow.component.page.Push;\n import com.vaadin.flow.component.webcomponent.WebComponent;\n import com.vaadin.flow.component.webcomponent.WebComponentConfiguration;\n+import com.vaadin.flow.di.Lookup;\n import com.vaadin.flow.function.DeploymentConfiguration;\n import com.vaadin.flow.internal.CurrentInstance;\n import com.vaadin.flow.server.DefaultDeploymentConfiguration;\n@@ -101,6 +103,14 @@ public void init() {\n                         .getArguments()[0])\n                 .when(context)\n                 .setAttribute(any(WebComponentConfigurationRegistry.class));\n+\n+        final Lookup lookup = Mockito.mock(Lookup.class);\n+        Mockito.when(context.getAttribute(Lookup.class)).thenReturn(lookup);\n+        Mockito.doAnswer(i -> i.getArgument(1, Supplier.class).get())\n+                .when(context).getAttribute(\n+                        ArgumentMatchers.argThat(aClass -> \"FeatureFlagsWrapper\"\n+                                .equals(aClass.getSimpleName())),\n+                        any());\n         VaadinService.setCurrent(service);\n         Mockito.when(service.getInstantiator())\n                 .thenReturn(new MockInstantiator());\n@@ -178,7 +188,7 @@ public void webComponentNotPresent_responseReturns404() throws IOException {\n     public void webComponentGenerator_responseGetsResult() throws IOException {\n         registry = setupConfigurations(MyComponentExporter.class);\n \n-        ByteArrayOutputStream out = Mockito.mock(ByteArrayOutputStream.class);\n+        ByteArrayOutputStream out = Mockito.spy(new ByteArrayOutputStream());\n \n         DefaultDeploymentConfiguration configuration = Mockito\n                 .mock(DefaultDeploymentConfiguration.class);\n@@ -191,6 +201,10 @@ public void webComponentGenerator_responseGetsResult() throws IOException {\n         Assert.assertTrue(\"Provider should handle web-component request\",\n                 provider.synchronizedHandleRequest(session, request, response));\n \n+        Assert.assertTrue(\"Response should have Feature Flags updater function\",\n+                out.toString().contains(\n+                        \"window.Vaadin.featureFlagsUpdaters.push((activator) => {\"));\n+\n         Mockito.verify(response).getOutputStream();\n         Mockito.verify(out).write(Mockito.any(), Mockito.anyInt(),\n                 Mockito.anyInt());\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlagsTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlagsTest.java\nindex ceba253759e..9d627dc7201 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlagsTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlagsTest.java\n@@ -87,17 +87,12 @@ public void should_defineAllFeatureFlags() throws ExecutionFailedException {\n     }\n \n     @Test\n-    public void should_defineCorrectEnabledValue()\n+    public void should_callFeatureFlagsUpdaterFunction()\n             throws ExecutionFailedException {\n-        // Enable example feature\n-        featureFlags.getFeatures().stream()\n-                .filter(feature -> feature.equals(FeatureFlags.EXAMPLE))\n-                .forEach(feature -> feature.setEnabled(true));\n-\n         taskGenerateFeatureFlags.execute();\n         String content = taskGenerateFeatureFlags.getFileContent();\n-\n-        assertFeatureFlagGlobal(content, FeatureFlags.EXAMPLE, true);\n+        Assert.assertTrue(content.contains(\n+                \"window.Vaadin.featureFlagsUpdaters.forEach(updater => updater(activator))\"));\n     }\n \n     @Test\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrapTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrapTest.java\nindex 55941ed720a..758147e477c 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrapTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrapTest.java\n@@ -27,6 +27,7 @@\n import org.mockito.Mockito;\n \n import static com.vaadin.flow.server.frontend.FrontendUtils.DEFAULT_FRONTEND_DIR;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.FEATURE_FLAGS_FILE_NAME;\n \n public class TaskGenerateWebComponentBootstrapTest {\n     @Rule\n@@ -68,4 +69,13 @@ public void should_importAndInitializeFlowClient()\n                 \"import { init } from '\" + FrontendUtils.JAR_RESOURCES_IMPORT\n                         + \"FlowClient.js';\\n\" + \"init()\"));\n     }\n+\n+    @Test\n+    public void should_importFeatureFlagTS() throws ExecutionFailedException {\n+        taskGenerateWebComponentBootstrap.execute();\n+        String content = taskGenerateWebComponentBootstrap.getFileContent();\n+        Assert.assertTrue(content.contains(\n+                String.format(\"import './%s';\", FEATURE_FLAGS_FILE_NAME)));\n+    }\n+\n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21080",
    "pr_id": 21080,
    "issue_id": 20741,
    "repo": "vaadin/flow",
    "problem_statement": "Use Jackson for public API and implementation instead of Elemental JSON\n### Describe your motivation\n\nJackson library (`com.fasterxml.jackson`) is more popular than Elemental JSON (`elemental.json`), thus Vaadin should better use it in public API.\n\n### Describe the solution you'd like\n\n0. Analyse and list the usage of Elemental in Flow: how many publicly using cases do we have and how many are used internally. I expect the main usage in `Element` class, but there may be more, e.g. in util classes.\n1. Add an adapter code that converts Jackson to/from Elemental, if it's problematic to replace it in implementation right away, else go to step 2.\n2. Change Flow internal implementation to use Jackson\n3. Add same public methods found in (0), but that use Jackson for arguments and return values\n4. Deprecate existing public method with Elemental\n5. Remove Elemental variants in next major version.\n",
    "issue_word_count": 151,
    "test_files_count": 10,
    "non_test_files_count": 12,
    "pr_changed_files": [
      "flow-polymer-template/src/test/java/com/vaadin/flow/templatemodel/TemplateModelTest.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/ConstantPool.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/ConstantPoolKey.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/change/NodeChange.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementListenerMap.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/PolymerEventListenerMap.java",
      "flow-server/src/main/java/com/vaadin/flow/server/BootstrapHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/AtmospherePushConnection.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/MetadataWriter.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/UidlRequestHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/UidlWriter.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java",
      "flow-server/src/test/java/com/vaadin/flow/component/DomEventTest.java",
      "flow-server/src/test/java/com/vaadin/flow/internal/ConstantPoolTest.java",
      "flow-server/src/test/java/com/vaadin/flow/internal/change/ListChangeTest.java",
      "flow-server/src/test/java/com/vaadin/flow/internal/change/MapPutChangeTest.java",
      "flow-server/src/test/java/com/vaadin/flow/internal/change/MapRemoveChangeTest.java",
      "flow-server/src/test/java/com/vaadin/flow/internal/nodefeature/PolymerServerEventHandlersTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/MetadataWriterTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/UidlWriterTest.java"
    ],
    "pr_changed_test_files": [
      "flow-polymer-template/src/test/java/com/vaadin/flow/templatemodel/TemplateModelTest.java",
      "flow-server/src/test/java/com/vaadin/flow/component/DomEventTest.java",
      "flow-server/src/test/java/com/vaadin/flow/internal/ConstantPoolTest.java",
      "flow-server/src/test/java/com/vaadin/flow/internal/change/ListChangeTest.java",
      "flow-server/src/test/java/com/vaadin/flow/internal/change/MapPutChangeTest.java",
      "flow-server/src/test/java/com/vaadin/flow/internal/change/MapRemoveChangeTest.java",
      "flow-server/src/test/java/com/vaadin/flow/internal/nodefeature/PolymerServerEventHandlersTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/MetadataWriterTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/UidlWriterTest.java"
    ],
    "base_commit": "2a734da245525078926f1a428925459e3d96c510",
    "head_commit": "fb0226b85fab5e4e1573c5e127e3edfc1cc67d09",
    "repo_url": "https://github.com/vaadin/flow/pull/21080",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21080",
    "dockerfile": "",
    "pr_merged_at": "2025-03-10T10:29:08.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/internal/ConstantPool.java b/flow-server/src/main/java/com/vaadin/flow/internal/ConstantPool.java\nindex fce956dcc78..96de02b4758 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/ConstantPool.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/ConstantPool.java\n@@ -19,8 +19,7 @@\n import java.util.HashSet;\n import java.util.Set;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n \n /**\n  * Keeps track of {@link ConstantPoolKey} values that have already been sent to\n@@ -77,8 +76,8 @@ public boolean hasNewConstants() {\n      *\n      * @return a JSON object describing all new constants\n      */\n-    public JsonObject dumpConstants() {\n-        JsonObject json = Json.createObject();\n+    public ObjectNode dumpConstants() {\n+        ObjectNode json = JacksonUtils.createObjectNode();\n \n         newKeys.forEach(key -> key.export(json));\n         newKeys.clear();\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/ConstantPoolKey.java b/flow-server/src/main/java/com/vaadin/flow/internal/ConstantPoolKey.java\nindex 213923a3211..de00939044f 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/ConstantPoolKey.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/ConstantPoolKey.java\n@@ -20,8 +20,10 @@\n import java.nio.charset.StandardCharsets;\n import java.util.Base64;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n import elemental.json.JsonObject;\n-import elemental.json.JsonValue;\n \n /**\n  * Wraps a JSON value that should be stored in the {@link ConstantPool} shared\n@@ -39,7 +41,7 @@\n  * @since 1.0\n  */\n public class ConstantPoolKey implements Serializable {\n-    private final JsonValue json;\n+    private final JsonNode json;\n     private String id;\n \n     /**\n@@ -50,7 +52,7 @@ public class ConstantPoolKey implements Serializable {\n      * @param json\n      *            the JSON constant, not <code>null</code>\n      */\n-    public ConstantPoolKey(JsonValue json) {\n+    public ConstantPoolKey(JsonNode json) {\n         assert json != null;\n         this.json = json;\n     }\n@@ -76,8 +78,22 @@ public String getId() {\n      *            the constant pool update that is to be sent to the client, not\n      *            <code>null</code>\n      */\n+    @Deprecated\n     public void export(JsonObject clientConstantPoolUpdate) {\n-        clientConstantPoolUpdate.put(getId(), json);\n+        export(JacksonUtils.mapElemental((JsonObject) json));\n+    }\n+\n+    /**\n+     * Exports this key into a JSON object to send to the client. This method\n+     * should be called only by the {@link ConstantPool} instance that manages\n+     * this value. It may be called multiple times.\n+     *\n+     * @param clientConstantPoolUpdate\n+     *            the constant pool update that is to be sent to the client, not\n+     *            <code>null</code>\n+     */\n+    public void export(ObjectNode clientConstantPoolUpdate) {\n+        clientConstantPoolUpdate.set(getId(), json);\n     }\n \n     /**\n@@ -88,8 +104,8 @@ public void export(JsonObject clientConstantPoolUpdate) {\n      *            the JSON to get a hash of, not <code>null</code>\n      * @return the key uniquely identifying the given JSON value\n      */\n-    private static String calculateHash(JsonValue json) {\n-        byte[] digest = MessageDigestUtil.sha256(json.toJson());\n+    private static String calculateHash(JsonNode json) {\n+        byte[] digest = MessageDigestUtil.sha256(json.toString());\n \n         /*\n          * Only use first 64 bits to keep id string short (1 in 100 000 000\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java b/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\nindex 0130afb5e4a..75b9592b9d5 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\n@@ -104,12 +104,32 @@ public static ValueNode nullNode() {\n         return (ValueNode) objectMapper.nullNode();\n     }\n \n+    /**\n+     * Map JsonArray to ArrayNode.\n+     *\n+     * @param jsonArray\n+     *            JsonArray to change\n+     * @return ArrayNode of elemental json array object or null for null\n+     *         jsonArray\n+     */\n+    public static ArrayNode mapElemental(JsonArray jsonArray) {\n+        if (jsonArray == null || jsonArray instanceof JsonNull) {\n+            return null;\n+        }\n+        try {\n+            return (ArrayNode) objectMapper.readTree(jsonArray.toJson());\n+        } catch (JsonProcessingException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n     /**\n      * Map JsonObject to ObjectNode.\n      *\n      * @param jsonObject\n      *            JsonObject to change\n-     * @return ObjectNode of elemental json object or null for null jsonObject\n+     * @return ObjectNode of elemental json object object or null for null\n+     *         jsonObject\n      */\n     public static ObjectNode mapElemental(JsonObject jsonObject) {\n         if (jsonObject == null) {\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/change/NodeChange.java b/flow-server/src/main/java/com/vaadin/flow/internal/change/NodeChange.java\nindex e33d9a0e12e..3790b287da3 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/change/NodeChange.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/change/NodeChange.java\n@@ -18,7 +18,10 @@\n \n import java.io.Serializable;\n \n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n import com.vaadin.flow.internal.ConstantPool;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.shared.JsonConstants;\n \n@@ -64,14 +67,15 @@ public StateNode getNode() {\n      *\n      * @return a json representation of this change\n      */\n-    public JsonObject toJson(ConstantPool constantPool) {\n+    public ObjectNode toJson(ConstantPool constantPool) {\n         JsonObject json = Json.createObject();\n \n         json.put(JsonConstants.CHANGE_NODE, node.getId());\n \n         populateJson(json, constantPool);\n \n-        return json;\n+        // TODO: Use Jackson directly after updating *Change to jackson\n+        return JacksonUtils.mapElemental(json);\n     }\n \n     /**\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementListenerMap.java b/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementListenerMap.java\nindex 6b61ff46933..1d6400bd715 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementListenerMap.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementListenerMap.java\n@@ -29,6 +29,8 @@\n import java.util.function.Function;\n import java.util.stream.Stream;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.slf4j.LoggerFactory;\n \n import com.vaadin.flow.component.UI;\n@@ -39,13 +41,11 @@\n import com.vaadin.flow.dom.DomListenerRegistration;\n import com.vaadin.flow.function.SerializableRunnable;\n import com.vaadin.flow.internal.ConstantPoolKey;\n-import com.vaadin.flow.internal.JsonUtils;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.shared.JsonConstants;\n \n-import elemental.json.Json;\n import elemental.json.JsonObject;\n-import elemental.json.JsonValue;\n \n /**\n  * Map of DOM events with server-side listeners. The key set of this map\n@@ -81,24 +81,24 @@ public void addDebouncePhases(int timeout, Set<DebouncePhase> phases) {\n                     });\n         }\n \n-        public JsonValue toJson() {\n+        public JsonNode toJson() {\n             if (debounceSettings.isEmpty()) {\n-                return Json.create(false);\n+                return JacksonUtils.createNode(false);\n             } else if (debounceSettings.size() == 1\n                     && debounceSettings.containsKey(Integer.valueOf(0))) {\n                 // Shorthand if only debounce is a dummy filter debounce\n-                return Json.create(true);\n+                return JacksonUtils.createNode(true);\n             } else {\n                 // [[timeout1, phase1, phase2, ...], [timeout2, phase1, ...]]\n                 return debounceSettings.entrySet().stream()\n                         .map(entry -> Stream.concat(\n-                                Stream.of(\n-                                        Json.create(entry.getKey().intValue())),\n+                                Stream.of(JacksonUtils\n+                                        .createNode(entry.getKey().intValue())),\n                                 entry.getValue().stream()\n                                         .map(DebouncePhase::getIdentifier)\n-                                        .map(Json::create))\n-                                .collect(JsonUtils.asArray()))\n-                        .collect(JsonUtils.asArray());\n+                                        .map(JacksonUtils::createNode))\n+                                .collect(JacksonUtils.asArray()))\n+                        .collect(JacksonUtils.asArray());\n             }\n \n         }\n@@ -393,7 +393,7 @@ private Map<String, ExpressionSettings> collectEventExpressions(\n     private void updateEventSettings(String eventType) {\n         Map<String, ExpressionSettings> eventSettings = collectEventExpressions(\n                 eventType);\n-        JsonObject eventSettingsJson = JsonUtils.createObject(eventSettings,\n+        ObjectNode eventSettingsJson = JacksonUtils.createObject(eventSettings,\n                 ExpressionSettings::toJson);\n \n         ConstantPoolKey constantPoolKey = new ConstantPoolKey(\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/PolymerEventListenerMap.java b/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/PolymerEventListenerMap.java\nindex 7095875bb91..e23a7b1ea67 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/PolymerEventListenerMap.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/PolymerEventListenerMap.java\n@@ -22,12 +22,10 @@\n import java.util.Map;\n \n import com.vaadin.flow.internal.ConstantPoolKey;\n-import com.vaadin.flow.internal.JsonUtils;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.shared.Registration;\n \n-import elemental.json.Json;\n-\n /**\n  * Map of PolymerTemplate events with server-side listeners. The key set of this\n  * map describes the event types for which event date is present.\n@@ -104,8 +102,8 @@ public Registration add(String methodName, String[] eventDataExpressions) {\n \n     private static ConstantPoolKey createConstantPoolKey(\n             List<String> eventData) {\n-        return new ConstantPoolKey(eventData.stream().map(Json::create)\n-                .collect(JsonUtils.asArray()));\n+        return new ConstantPoolKey(eventData.stream()\n+                .map(JacksonUtils::createNode).collect(JacksonUtils.asArray()));\n     }\n \n     private void removeListener(String eventType) {\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/BootstrapHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/BootstrapHandler.java\nindex f97d9f0fd59..91958f2115e 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/BootstrapHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/BootstrapHandler.java\n@@ -823,8 +823,7 @@ private List<Element> setupDocumentHead(Element head,\n          * @return a JSON object with the initial UIDL message\n          */\n         private ObjectNode getInitialUidl(UI ui) {\n-            ObjectNode json = JacksonUtils\n-                    .mapElemental(new UidlWriter().createUidl(ui, false));\n+            ObjectNode json = new UidlWriter().createUidl(ui, false);\n \n             VaadinSession session = ui.getSession();\n             if (session.getConfiguration().isXsrfProtectionEnabled()) {\n@@ -1500,8 +1499,7 @@ protected static String readResource(String fileName) {\n      * @return a JSON object with the initial UIDL message\n      */\n     protected static ObjectNode getInitialUidl(UI ui) {\n-        ObjectNode json = JacksonUtils\n-                .mapElemental(new UidlWriter().createUidl(ui, false));\n+        ObjectNode json = new UidlWriter().createUidl(ui, false);\n \n         VaadinSession session = ui.getSession();\n         if (session.getConfiguration().isXsrfProtectionEnabled()) {\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/AtmospherePushConnection.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/AtmospherePushConnection.java\nindex ebf34483e2b..4a915a39eaa 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/AtmospherePushConnection.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/AtmospherePushConnection.java\n@@ -25,6 +25,7 @@\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.atmosphere.cpr.AtmosphereResource;\n import org.atmosphere.cpr.AtmosphereResource.TRANSPORT;\n import org.atmosphere.cpr.BroadcastFilterAdapter;\n@@ -36,8 +37,6 @@\n import com.vaadin.flow.internal.UsageStatistics;\n import com.vaadin.flow.shared.communication.PushConstants;\n \n-import elemental.json.JsonObject;\n-\n /**\n  * A {@link PushConnection} implementation using the Atmosphere push support\n  * that is by default included in Vaadin.\n@@ -204,9 +203,9 @@ public void push(boolean async) {\n         } else {\n             synchronized (lock) {\n                 try {\n-                    JsonObject response = new UidlWriter().createUidl(getUI(),\n+                    JsonNode response = new UidlWriter().createUidl(getUI(),\n                             async);\n-                    sendMessage(\"for(;;);[\" + response.toJson() + \"]\");\n+                    sendMessage(\"for(;;);[\" + response + \"]\");\n                 } catch (Exception e) {\n                     throw new RuntimeException(\"Push failed\", e);\n                 }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/MetadataWriter.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/MetadataWriter.java\nindex 3524343c20e..e3c8aa8842a 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/MetadataWriter.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/MetadataWriter.java\n@@ -18,14 +18,14 @@\n \n import java.io.Serializable;\n \n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.SystemMessages;\n import com.vaadin.flow.server.VaadinSessionState;\n import com.vaadin.flow.shared.JsonConstants;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-\n /**\n  * Serializes miscellaneous metadata to JSON.\n  * <p>\n@@ -54,9 +54,9 @@ public class MetadataWriter implements Serializable {\n      * @return JSON object with the metadata\n      *\n      */\n-    public JsonObject createMetadata(UI ui, boolean repaintAll, boolean async,\n+    public ObjectNode createMetadata(UI ui, boolean repaintAll, boolean async,\n             SystemMessages messages) {\n-        JsonObject meta = Json.createObject();\n+        ObjectNode meta = JacksonUtils.createObjectNode();\n \n         if (repaintAll) {\n             meta.put(\"repaintAll\", true);\n@@ -86,11 +86,11 @@ public JsonObject createMetadata(UI ui, boolean repaintAll, boolean async,\n                 }\n                 int redirectInterval = newTimeoutInterval + 15;\n \n-                JsonObject redirect = Json.createObject();\n+                ObjectNode redirect = JacksonUtils.createObjectNode();\n                 redirect.put(\"interval\", redirectInterval);\n                 redirect.put(\"url\", url);\n \n-                meta.put(\"timedRedirect\", redirect);\n+                meta.set(\"timedRedirect\", redirect);\n             }\n             timeoutInterval = newTimeoutInterval;\n         }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/UidlRequestHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/UidlRequestHandler.java\nindex a247e8ed001..cbe590ef093 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/UidlRequestHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/UidlRequestHandler.java\n@@ -25,10 +25,15 @@\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeType;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.internal.JacksonUtils;\n+import com.vaadin.flow.internal.JsonDecodingException;\n import com.vaadin.flow.server.HandlerHelper;\n import com.vaadin.flow.server.HandlerHelper.RequestType;\n import com.vaadin.flow.server.HttpStatusCode;\n@@ -45,13 +50,6 @@\n import com.vaadin.flow.server.dau.DauEnforcementException;\n import com.vaadin.flow.shared.JsonConstants;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-import elemental.json.JsonException;\n-import elemental.json.JsonObject;\n-import elemental.json.JsonType;\n-import elemental.json.impl.JsonUtil;\n-\n import static com.vaadin.flow.shared.ApplicationConstants.RPC_INVOCATIONS;\n import static com.vaadin.flow.shared.ApplicationConstants.SERVER_SYNC_ID;\n import static com.vaadin.flow.shared.JsonConstants.RPC_NAVIGATION_LOCATION;\n@@ -139,7 +137,7 @@ public Optional<ResponseWriter> synchronizedHandleRequest(\n             writeUidl(uI, stringWriter, false);\n         } catch (ClientResentPayloadException e) {\n             stringWriter.write(uI.getInternals().getLastRequestResponse());\n-        } catch (JsonException e) {\n+        } catch (JsonDecodingException e) {\n             getLogger().error(\"Error writing JSON to response\", e);\n             // Refresh on client side\n             return Optional.of(() -> writeRefresh(response));\n@@ -173,17 +171,17 @@ private void writeRefresh(VaadinResponse response) throws IOException {\n     }\n \n     void writeUidl(UI ui, Writer writer, boolean resync) throws IOException {\n-        JsonObject uidl = createUidl(ui, resync);\n+        ObjectNode uidl = createUidl(ui, resync);\n \n         removeOffendingMprHashFragment(uidl);\n \n         // some dirt to prevent cross site scripting\n-        String responseString = \"for(;;);[\" + uidl.toJson() + \"]\";\n+        String responseString = \"for(;;);[\" + uidl + \"]\";\n         ui.getInternals().setLastRequestResponse(responseString);\n         writer.write(responseString);\n     }\n \n-    JsonObject createUidl(UI ui, boolean resync) {\n+    ObjectNode createUidl(UI ui, boolean resync) {\n         return new UidlWriter().createUidl(ui, false, resync);\n     }\n \n@@ -250,21 +248,21 @@ public static void commitJsonResponse(VaadinResponse response, String json)\n         outputStream.flush();\n     }\n \n-    private void removeOffendingMprHashFragment(JsonObject uidl) {\n-        if (!uidl.hasKey(EXECUTE)) {\n+    private void removeOffendingMprHashFragment(ObjectNode uidl) {\n+        if (!uidl.has(EXECUTE)) {\n             return;\n         }\n \n-        JsonArray exec = uidl.getArray(EXECUTE);\n+        ArrayNode exec = (ArrayNode) uidl.get(EXECUTE);\n         String location = null;\n         int idx = -1;\n-        for (int i = 0; i < exec.length(); i++) {\n-            JsonArray arr = exec.get(i);\n-            for (int j = 0; j < arr.length(); j++) {\n-                if (!arr.get(j).getType().equals(JsonType.STRING)) {\n+        for (int i = 0; i < exec.size(); i++) {\n+            ArrayNode arr = (ArrayNode) exec.get(i);\n+            for (int j = 0; j < arr.size(); j++) {\n+                if (!arr.get(j).getNodeType().equals(JsonNodeType.STRING)) {\n                     continue;\n                 }\n-                String script = arr.getString(j);\n+                String script = arr.get(j).textValue();\n                 if (script.contains(\"history.pushState\")) {\n                     idx = i;\n                     continue;\n@@ -273,10 +271,10 @@ private void removeOffendingMprHashFragment(JsonObject uidl) {\n                     continue;\n                 }\n \n-                JsonObject json = JsonUtil.parse(\"{\" + script + \"}\");\n+                ObjectNode json = JacksonUtils.readTree(\"{\" + script + \"}\");\n                 location = removeHashInV7Uidl(json);\n                 if (location != null) {\n-                    script = JsonUtil.stringify(json);\n+                    script = json.toPrettyString();\n                     // remove curly brackets\n                     script = script.substring(1, script.length() - 1);\n                     arr.set(j, script);\n@@ -285,30 +283,28 @@ private void removeOffendingMprHashFragment(JsonObject uidl) {\n         }\n \n         if (location != null) {\n-            idx = idx >= 0 ? idx : exec.length();\n-            JsonArray arr = Json.createArray();\n-            arr.set(0, \"\");\n-            arr.set(1,\n-                    String.format(\n-                            location.startsWith(\"http\") ? PUSH_STATE_LOCATION\n-                                    : PUSH_STATE_HASH,\n-                            location));\n+            idx = idx >= 0 ? idx : exec.size();\n+            ArrayNode arr = JacksonUtils.createArrayNode();\n+            arr.add(\"\");\n+            arr.add(String\n+                    .format(location.startsWith(\"http\") ? PUSH_STATE_LOCATION\n+                            : PUSH_STATE_HASH, location));\n             exec.set(idx, arr);\n         }\n     }\n \n-    private String removeHashInV7Uidl(JsonObject json) {\n+    private String removeHashInV7Uidl(ObjectNode json) {\n         String removed = null;\n-        JsonArray changes = json.getArray(CHANGES);\n-        for (int i = 0; i < changes.length(); i++) {\n-            String hash = removeHashInChange(changes.getArray(i));\n+        ArrayNode changes = (ArrayNode) json.get(CHANGES);\n+        for (int i = 0; i < changes.size(); i++) {\n+            String hash = removeHashInChange((ArrayNode) changes.get(i));\n             if (hash != null) {\n                 removed = hash;\n             }\n         }\n-        JsonArray rpcs = json.getArray(RPC);\n-        for (int i = 0; i < rpcs.length(); i++) {\n-            String hash = removeHashInRpc(rpcs.getArray(i));\n+        ArrayNode rpcs = (ArrayNode) json.get(RPC);\n+        for (int i = 0; i < rpcs.size(); i++) {\n+            String hash = removeHashInRpc((ArrayNode) rpcs.get(i));\n             if (removed == null && hash != null) {\n                 removed = hash;\n             }\n@@ -316,21 +312,21 @@ private String removeHashInV7Uidl(JsonObject json) {\n         return removed;\n     }\n \n-    private String removeHashInChange(JsonArray change) {\n-        if (change.length() < 3\n-                || !change.get(2).getType().equals(JsonType.ARRAY)) {\n+    private String removeHashInChange(ArrayNode change) {\n+        if (change.size() < 3\n+                || !change.get(2).getNodeType().equals(JsonNodeType.ARRAY)) {\n             return null;\n         }\n-        JsonArray value = change.getArray(2);\n-        if (value.length() < 2\n-                || !value.get(1).getType().equals(JsonType.OBJECT)) {\n+        ArrayNode value = (ArrayNode) change.get(2);\n+        if (value.size() < 2\n+                || !value.get(1).getNodeType().equals(JsonNodeType.OBJECT)) {\n             return null;\n         }\n-        JsonObject location = value.getObject(1);\n-        if (!location.hasKey(LOCATION)) {\n+        ObjectNode location = (ObjectNode) value.get(1);\n+        if (!location.has(LOCATION)) {\n             return null;\n         }\n-        String url = location.getString(LOCATION);\n+        String url = location.get(LOCATION).textValue();\n         Matcher match = URL_PATTERN.matcher(url);\n         if (match.find()) {\n             location.put(LOCATION, match.group(1));\n@@ -339,18 +335,19 @@ private String removeHashInChange(JsonArray change) {\n         return null;\n     }\n \n-    private String removeHashInRpc(JsonArray rpc) {\n-        if (rpc.length() != 4 || !rpc.get(1).getType().equals(JsonType.STRING)\n-                || !rpc.get(2).getType().equals(JsonType.STRING)\n-                || !rpc.get(3).getType().equals(JsonType.ARRAY)\n+    private String removeHashInRpc(ArrayNode rpc) {\n+        if (rpc.size() != 4\n+                || !rpc.get(1).getNodeType().equals(JsonNodeType.STRING)\n+                || !rpc.get(2).getNodeType().equals(JsonNodeType.STRING)\n+                || !rpc.get(3).getNodeType().equals(JsonNodeType.ARRAY)\n                 || !\"com.vaadin.shared.extension.javascriptmanager.ExecuteJavaScriptRpc\"\n-                        .equals(rpc.getString(1))\n-                || !\"executeJavaScript\".equals(rpc.getString(2))) {\n+                        .equals(rpc.get(1).textValue())\n+                || !\"executeJavaScript\".equals(rpc.get(2).textValue())) {\n             return null;\n         }\n-        JsonArray scripts = rpc.getArray(3);\n-        for (int j = 0; j < scripts.length(); j++) {\n-            String exec = scripts.getString(j);\n+        ArrayNode scripts = (ArrayNode) rpc.get(3);\n+        for (int j = 0; j < scripts.size(); j++) {\n+            String exec = scripts.get(j).textValue();\n             Matcher match = HASH_PATTERN.matcher(exec);\n             if (match.find()) {\n                 // replace JS with a noop\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/UidlWriter.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/UidlWriter.java\nindex ec716fe0a91..08a45826e54 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/UidlWriter.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/UidlWriter.java\n@@ -33,6 +33,9 @@\n import java.util.function.Consumer;\n import java.util.stream.Stream;\n \n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.IOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -44,7 +47,8 @@\n import com.vaadin.flow.component.internal.PendingJavaScriptInvocation;\n import com.vaadin.flow.component.internal.UIInternals;\n import com.vaadin.flow.function.SerializableConsumer;\n-import com.vaadin.flow.internal.JsonCodec;\n+import com.vaadin.flow.internal.JacksonCodec;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.JsonUtils;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.internal.StateTree;\n@@ -63,7 +67,6 @@\n import com.vaadin.flow.shared.ui.Dependency;\n import com.vaadin.flow.shared.ui.LoadMode;\n \n-import elemental.json.Json;\n import elemental.json.JsonArray;\n import elemental.json.JsonObject;\n import elemental.json.JsonValue;\n@@ -133,8 +136,8 @@ public WebBrowser getBrowser() {\n      *            True iff the client should be asked to resynchronize\n      * @return JSON object containing the UIDL response\n      */\n-    public JsonObject createUidl(UI ui, boolean async, boolean resync) {\n-        JsonObject response = Json.createObject();\n+    public ObjectNode createUidl(UI ui, boolean async, boolean resync) {\n+        ObjectNode response = JacksonUtils.createObjectNode();\n \n         UIInternals uiInternals = ui.getInternals();\n \n@@ -159,13 +162,13 @@ public JsonObject createUidl(UI ui, boolean async, boolean resync) {\n         SystemMessages messages = service.getSystemMessages(ui.getLocale(),\n                 null);\n \n-        JsonObject meta = new MetadataWriter().createMetadata(ui, false, async,\n+        ObjectNode meta = new MetadataWriter().createMetadata(ui, false, async,\n                 messages);\n-        if (meta.keys().length > 0) {\n-            response.put(\"meta\", meta);\n+        if (!JacksonUtils.getKeys(meta).isEmpty()) {\n+            response.set(\"meta\", meta);\n         }\n \n-        JsonArray stateChanges = Json.createArray();\n+        ArrayNode stateChanges = JacksonUtils.createArrayNode();\n \n         encodeChanges(ui, stateChanges);\n \n@@ -173,11 +176,11 @@ public JsonObject createUidl(UI ui, boolean async, boolean resync) {\n                 new ResolveContext(service, session.getBrowser()));\n \n         if (uiInternals.getConstantPool().hasNewConstants()) {\n-            response.put(\"constants\",\n+            response.set(\"constants\",\n                     uiInternals.getConstantPool().dumpConstants());\n         }\n-        if (stateChanges.length() != 0) {\n-            response.put(\"changes\", stateChanges);\n+        if (!stateChanges.isEmpty()) {\n+            response.set(\"changes\", stateChanges);\n         }\n \n         List<PendingJavaScriptInvocation> executeJavaScriptList = uiInternals\n@@ -211,11 +214,11 @@ public JsonObject createUidl(UI ui, boolean async, boolean resync) {\n      *            false if it is a response to a client message.\n      * @return JSON object containing the UIDL response\n      */\n-    public JsonObject createUidl(UI ui, boolean async) {\n+    public ObjectNode createUidl(UI ui, boolean async) {\n         return createUidl(ui, async, false);\n     }\n \n-    private static void populateDependencies(JsonObject response,\n+    private static void populateDependencies(ObjectNode response,\n             DependencyList dependencyList, ResolveContext context) {\n         Collection<Dependency> pendingSendToClient = dependencyList\n                 .getPendingSendToClient();\n@@ -228,8 +231,15 @@ private static void populateDependencies(JsonObject response,\n \n         if (!pendingSendToClient.isEmpty()) {\n             groupDependenciesByLoadMode(pendingSendToClient, context)\n-                    .forEach((loadMode, dependencies) -> response\n-                            .put(loadMode.name(), dependencies));\n+                    .forEach((loadMode, dependencies) -> {\n+                        try {\n+                            response.set(loadMode.name(),\n+                                    JacksonUtils.getMapper()\n+                                            .readTree(dependencies.toJson()));\n+                        } catch (JsonProcessingException e) {\n+                            throw new RuntimeException(e);\n+                        }\n+                    });\n         }\n         dependencyList.clearPendingSendToClient();\n     }\n@@ -302,11 +312,11 @@ private static InputStream getInlineResourceStream(String url,\n     }\n \n     // non-private for testing purposes\n-    static JsonArray encodeExecuteJavaScriptList(\n+    static ArrayNode encodeExecuteJavaScriptList(\n             List<PendingJavaScriptInvocation> executeJavaScriptList) {\n         return executeJavaScriptList.stream()\n                 .map(UidlWriter::encodeExecuteJavaScript)\n-                .collect(JsonUtils.asArray());\n+                .collect(JacksonUtils.asArray());\n     }\n \n     private static ReturnChannelRegistration createReturnValueChannel(\n@@ -325,10 +335,21 @@ private static ReturnChannelRegistration createReturnValueChannel(\n         return channel;\n     }\n \n-    private static JsonArray encodeExecuteJavaScript(\n+    private static ArrayNode encodeExecuteJavaScript(\n             PendingJavaScriptInvocation invocation) {\n         List<Object> parametersList = invocation.getInvocation()\n                 .getParameters();\n+        // TODO: remove when execJs takes Jackson instead of elemental\n+        parametersList = parametersList.stream().map(param -> {\n+            if (param instanceof JsonArray) {\n+                return JacksonUtils.mapElemental((JsonArray) param);\n+            } else if (param instanceof JsonObject) {\n+                return JacksonUtils.mapElemental((JsonObject) param);\n+            } else if (param instanceof JsonValue) {\n+                return JacksonUtils.mapElemental((JsonValue) param);\n+            }\n+            return param;\n+        }).toList();\n \n         Stream<Object> parameters = parametersList.stream();\n         String expression = invocation.getInvocation().getExpression();\n@@ -370,9 +391,9 @@ private static JsonArray encodeExecuteJavaScript(\n \n         // [argument1, argument2, ..., script]\n         return Stream\n-                .concat(parameters.map(JsonCodec::encodeWithTypeInfo),\n-                        Stream.of(Json.create(expression)))\n-                .collect(JsonUtils.asArray());\n+                .concat(parameters.map(JacksonCodec::encodeWithTypeInfo),\n+                        Stream.of(JacksonUtils.createNode(expression)))\n+                .collect(JacksonUtils.asArray());\n     }\n \n     /**\n@@ -387,7 +408,7 @@ private static JsonArray encodeExecuteJavaScript(\n      *            a JSON array to put state changes into\n      * @see StateTree#runExecutionsBeforeClientResponse()\n      */\n-    private void encodeChanges(UI ui, JsonArray stateChanges) {\n+    private void encodeChanges(UI ui, ArrayNode stateChanges) {\n         UIInternals uiInternals = ui.getInternals();\n         StateTree stateTree = uiInternals.getStateTree();\n \n@@ -402,8 +423,7 @@ private void encodeChanges(UI ui, JsonArray stateChanges) {\n             }\n \n             // Encode the actual change\n-            stateChanges.set(stateChanges.length(),\n-                    change.toJson(uiInternals.getConstantPool()));\n+            stateChanges.add(change.toJson(uiInternals.getConstantPool()));\n         };\n         // A collectChanges round may add additional changes that needs to be\n         // collected.\n@@ -443,14 +463,14 @@ private void addComponentHierarchy(UI ui,\n      * Adds the performance timing data (used by TestBench 3) to the UIDL\n      * response.\n      */\n-    private JsonValue createPerformanceData(UI ui) {\n-        JsonArray timings = Json.createArray();\n-        timings.set(0, ui.getSession().getCumulativeRequestDuration());\n-        timings.set(1, ui.getSession().getLastRequestDuration());\n+    private ArrayNode createPerformanceData(UI ui) {\n+        ArrayNode timings = JacksonUtils.createArrayNode();\n+        timings.add(ui.getSession().getCumulativeRequestDuration());\n+        timings.add(ui.getSession().getLastRequestDuration());\n         return timings;\n     }\n \n-    private static final Logger getLogger() {\n+    private static Logger getLogger() {\n         return LoggerFactory.getLogger(UidlWriter.class.getName());\n     }\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java\nindex 0be776864a1..7076006c180 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java\n@@ -622,8 +622,8 @@ protected boolean handleWebComponentResyncRequest(BootstrapContext context,\n             return false;\n         }\n \n-        ObjectNode json = JacksonUtils.mapElemental(\n-                new UidlWriter().createUidl(context.getUI(), true, true));\n+        ObjectNode json = new UidlWriter().createUidl(context.getUI(), true,\n+                true);\n         json.put(ApplicationConstants.UI_ID, context.getUI().getUIId());\n         json.put(ApplicationConstants.UIDL_SECURITY_TOKEN_ID,\n                 context.getUI().getCsrfToken());\n",
    "test_patch": "diff --git a/flow-polymer-template/src/test/java/com/vaadin/flow/templatemodel/TemplateModelTest.java b/flow-polymer-template/src/test/java/com/vaadin/flow/templatemodel/TemplateModelTest.java\nindex 4170c7ed912..a3b2b251b46 100644\n--- a/flow-polymer-template/src/test/java/com/vaadin/flow/templatemodel/TemplateModelTest.java\n+++ b/flow-polymer-template/src/test/java/com/vaadin/flow/templatemodel/TemplateModelTest.java\n@@ -671,9 +671,9 @@ public void testDoubleValue() {\n \n         Assert.assertEquals(null, model.getDouble());\n \n-        model.setDouble(new Double(1.0D));\n+        model.setDouble(Double.valueOf(1.0D));\n \n-        Assert.assertEquals(new Double(1.0D), model.getDouble());\n+        Assert.assertEquals(Double.valueOf(1.0D), model.getDouble());\n     }\n \n     @Test\n@@ -695,9 +695,9 @@ public void testIntegerValue() {\n \n         Assert.assertEquals(null, model.getInteger());\n \n-        model.setInteger(new Integer(10));\n+        model.setInteger(Integer.valueOf(10));\n \n-        Assert.assertEquals(new Integer(10), model.getInteger());\n+        Assert.assertEquals(Integer.valueOf(10), model.getInteger());\n     }\n \n     @Test\n@@ -1443,7 +1443,7 @@ public void emptyModelListShouldBeRepopulatedAfterDetach() {\n         assertTrue(\n                 \"Changes to empty list after attach and detach should be the same\",\n                 changesAfterDetach.get(0).toJson(null)\n-                        .jsEquals(changesAfterAttach.get(0).toJson(null)));\n+                        .equals(changesAfterAttach.get(0).toJson(null)));\n \n         assertTrue(\n                 \"After the empty model list is detached and created a change, no more changes are created\",\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/component/DomEventTest.java b/flow-server/src/test/java/com/vaadin/flow/component/DomEventTest.java\nindex fe087e173e2..26b5730f577 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/component/DomEventTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/component/DomEventTest.java\n@@ -18,20 +18,22 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeType;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.junit.Assert;\n import org.junit.Test;\n \n import com.vaadin.flow.dom.DebouncePhase;\n import com.vaadin.flow.dom.Element;\n import com.vaadin.flow.internal.ConstantPoolKey;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.change.MapPutChange;\n import com.vaadin.flow.internal.change.NodeChange;\n import com.vaadin.flow.internal.nodefeature.ElementListenerMap;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n import elemental.json.JsonObject;\n-import elemental.json.JsonType;\n \n public class DomEventTest {\n     @DomEvent(\"event\")\n@@ -104,42 +106,47 @@ public void debounceFilter() {\n     private <T extends ComponentEvent<Component>> void assertSettings(\n             Class<T> eventType, String expectedFilter, int expectedTimeout,\n             DebouncePhase... expectedPhases) {\n-        JsonObject settings = getEventSettings(eventType);\n+        JsonNode settings = getEventSettings(eventType);\n \n         if (expectedFilter == null) {\n-            Assert.assertArrayEquals(new String[0], settings.keys());\n+            Assert.assertEquals(new ArrayList<String>(0),\n+                    JacksonUtils.getKeys(settings));\n             return;\n         }\n \n-        Assert.assertArrayEquals(new String[] { expectedFilter },\n-                settings.keys());\n+        Assert.assertEquals(new ArrayList<String>() {\n+            {\n+                add(expectedFilter);\n+            }\n+        }, JacksonUtils.getKeys(settings));\n \n         if (expectedTimeout == 0 && expectedPhases.length == 0) {\n             Assert.assertEquals(\n                     \"There should be a boolean instead of empty phase list\",\n-                    JsonType.BOOLEAN, settings.get(expectedFilter).getType());\n-            boolean isFilter = settings.getBoolean(expectedFilter);\n+                    JsonNodeType.BOOLEAN,\n+                    settings.get(expectedFilter).getNodeType());\n+            boolean isFilter = settings.get(expectedFilter).booleanValue();\n             Assert.assertTrue(\"Expression should be used as a filter\",\n                     isFilter);\n             return;\n         }\n \n-        JsonArray filterSettings = settings.getArray(expectedFilter);\n+        ArrayNode filterSettings = (ArrayNode) settings.get(expectedFilter);\n \n-        Assert.assertEquals(1, filterSettings.length());\n+        Assert.assertEquals(1, filterSettings.size());\n \n-        JsonArray filterSetting = filterSettings.getArray(0);\n+        ArrayNode filterSetting = (ArrayNode) filterSettings.get(0);\n \n         Assert.assertEquals(\"Debunce timeout should be as expected\",\n-                expectedTimeout, (int) filterSetting.getNumber(0));\n+                expectedTimeout, filterSetting.get(0).intValue());\n \n         Assert.assertEquals(\"Number of phases should be as expected\",\n-                expectedPhases.length, filterSetting.length() - 1);\n+                expectedPhases.length, filterSetting.size() - 1);\n \n         for (int i = 0; i < expectedPhases.length; i++) {\n             String expectedIdentifier = expectedPhases[i].getIdentifier();\n             Assert.assertEquals(expectedIdentifier,\n-                    filterSetting.getString(i + 1));\n+                    filterSetting.get(i + 1).textValue());\n         }\n     }\n \n@@ -147,7 +154,7 @@ private void assertFilter(String expectedFilter,\n             JsonObject filterSettings) {\n     }\n \n-    private <T extends ComponentEvent<Component>> JsonObject getEventSettings(\n+    private <T extends ComponentEvent<Component>> JsonNode getEventSettings(\n             Class<T> eventType) {\n         Component component = new Component(new Element(\"element\")) {\n         };\n@@ -165,13 +172,12 @@ private <T extends ComponentEvent<Component>> JsonObject getEventSettings(\n         Assert.assertEquals(\"event\", change.getKey());\n \n         ConstantPoolKey value = (ConstantPoolKey) change.getValue();\n-        JsonObject constantPoolUpdate = Json.createObject();\n+        ObjectNode constantPoolUpdate = JacksonUtils.createObjectNode();\n         value.export(constantPoolUpdate);\n \n-        String[] keys = constantPoolUpdate.keys();\n-        Assert.assertEquals(1, keys.length);\n-        JsonObject eventSettings = constantPoolUpdate.getObject(keys[0]);\n+        List<String> keys = JacksonUtils.getKeys(constantPoolUpdate);\n+        Assert.assertEquals(1, keys.size());\n \n-        return eventSettings;\n+        return constantPoolUpdate.get(keys.get(0));\n     }\n }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/internal/ConstantPoolTest.java b/flow-server/src/test/java/com/vaadin/flow/internal/ConstantPoolTest.java\nindex 93d9252ee58..01c5c0e2585 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/internal/ConstantPoolTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/internal/ConstantPoolTest.java\n@@ -15,44 +15,45 @@\n  */\n package com.vaadin.flow.internal;\n \n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.junit.Assert;\n import org.junit.Test;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-\n public class ConstantPoolTest {\n     private ConstantPool constantPool = new ConstantPool();\n \n     @Test\n     public void newConstantPool_noNewItems() {\n         Assert.assertFalse(constantPool.hasNewConstants());\n-        Assert.assertEquals(0, constantPool.dumpConstants().keys().length);\n+        Assert.assertEquals(0,\n+                JacksonUtils.getKeys(constantPool.dumpConstants()).size());\n     }\n \n     @Test\n     public void valueIsRegistered() {\n-        ConstantPoolKey reference = new ConstantPoolKey(Json.createObject());\n+        ConstantPoolKey reference = new ConstantPoolKey(\n+                JacksonUtils.createObjectNode());\n \n         String constantId = constantPool.getConstantId(reference);\n \n         Assert.assertTrue(constantPool.hasNewConstants());\n \n-        JsonObject dump = constantPool.dumpConstants();\n+        ObjectNode dump = constantPool.dumpConstants();\n \n-        Assert.assertEquals(1, dump.keys().length);\n-        Assert.assertEquals(\"{}\", dump.get(constantId).toJson());\n+        Assert.assertEquals(1, JacksonUtils.getKeys(dump).size());\n+        Assert.assertEquals(\"{}\", dump.get(constantId).toString());\n     }\n \n     @Test\n     public void sameValue_sameId() {\n-        ConstantPoolKey reference = new ConstantPoolKey(Json.createObject());\n+        ConstantPoolKey reference = new ConstantPoolKey(\n+                JacksonUtils.createObjectNode());\n \n         String constantId = constantPool.getConstantId(reference);\n         constantPool.dumpConstants();\n \n-        String otherId = constantPool\n-                .getConstantId(new ConstantPoolKey(Json.createObject()));\n+        String otherId = constantPool.getConstantId(\n+                new ConstantPoolKey(JacksonUtils.createObjectNode()));\n \n         Assert.assertEquals(constantId, otherId);\n         Assert.assertFalse(constantPool.hasNewConstants());\n@@ -60,13 +61,14 @@ public void sameValue_sameId() {\n \n     @Test\n     public void differentValue_differentId() {\n-        ConstantPoolKey reference = new ConstantPoolKey(Json.createObject());\n+        ConstantPoolKey reference = new ConstantPoolKey(\n+                JacksonUtils.createObjectNode());\n \n         String constantId = constantPool.getConstantId(reference);\n         constantPool.dumpConstants();\n \n-        String otherId = constantPool\n-                .getConstantId(new ConstantPoolKey(Json.createArray()));\n+        String otherId = constantPool.getConstantId(\n+                new ConstantPoolKey(JacksonUtils.createArrayNode()));\n \n         Assert.assertNotEquals(constantId, otherId);\n         Assert.assertTrue(constantPool.hasNewConstants());\n@@ -75,9 +77,9 @@ public void differentValue_differentId() {\n     @Test\n     public void constantPoolKey_exportedDirectly_idCreated() {\n         final ConstantPoolKey constantPoolKey = new ConstantPoolKey(\n-                Json.createObject());\n-        final JsonObject message = Json.createObject();\n+                JacksonUtils.createObjectNode());\n+        final ObjectNode message = JacksonUtils.createObjectNode();\n         constantPoolKey.export(message);\n-        Assert.assertTrue(message.hasKey(constantPoolKey.getId()));\n+        Assert.assertTrue(message.has(constantPoolKey.getId()));\n     }\n }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/internal/change/ListChangeTest.java b/flow-server/src/test/java/com/vaadin/flow/internal/change/ListChangeTest.java\nindex 92f8d1088d2..ce5d0c34fb0 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/internal/change/ListChangeTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/internal/change/ListChangeTest.java\n@@ -18,6 +18,8 @@\n \n import java.util.Arrays;\n \n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.junit.Assert;\n import org.junit.Test;\n \n@@ -29,9 +31,6 @@\n import com.vaadin.flow.internal.nodefeature.NodeList;\n import com.vaadin.flow.shared.JsonConstants;\n \n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n-\n public class ListChangeTest {\n     private NodeList<StateNode> feature = AbstractNodeFeatureTest\n             .createFeature(ElementChildrenList.class);\n@@ -43,23 +42,23 @@ public void testBasicJson() {\n         ListAddChange<StateNode> change = new ListAddChange<>(feature, true, 0,\n                 Arrays.asList(child1, child2));\n \n-        JsonObject json = change.toJson(null);\n+        ObjectNode json = change.toJson(null);\n \n         Assert.assertEquals(change.getNode().getId(),\n-                (int) json.getNumber(JsonConstants.CHANGE_NODE));\n+                json.get(JsonConstants.CHANGE_NODE).intValue());\n         Assert.assertEquals(NodeFeatureRegistry.getId(feature.getClass()),\n-                (int) json.getNumber(JsonConstants.CHANGE_FEATURE));\n+                json.get(JsonConstants.CHANGE_FEATURE).intValue());\n         Assert.assertEquals(JsonConstants.CHANGE_TYPE_SPLICE,\n-                json.getString(JsonConstants.CHANGE_TYPE));\n+                json.get(JsonConstants.CHANGE_TYPE).textValue());\n         Assert.assertEquals(0,\n-                (int) json.getNumber(JsonConstants.CHANGE_SPLICE_INDEX));\n+                json.get(JsonConstants.CHANGE_SPLICE_INDEX).intValue());\n \n-        JsonArray addNodes = json\n-                .getArray(JsonConstants.CHANGE_SPLICE_ADD_NODES);\n-        Assert.assertEquals(2, addNodes.length());\n+        ArrayNode addNodes = (ArrayNode) json\n+                .get(JsonConstants.CHANGE_SPLICE_ADD_NODES);\n+        Assert.assertEquals(2, addNodes.size());\n \n-        Assert.assertEquals(child1.getId(), (int) addNodes.getNumber(0));\n-        Assert.assertEquals(child2.getId(), (int) addNodes.getNumber(1));\n+        Assert.assertEquals(child1.getId(), addNodes.get(0).intValue());\n+        Assert.assertEquals(child2.getId(), addNodes.get(1).intValue());\n     }\n \n     @Test\n@@ -67,9 +66,9 @@ public void testZeroRemoveNotInJson() {\n         ListAddChange<StateNode> change = new ListAddChange<>(feature, false, 1,\n                 Arrays.asList());\n \n-        JsonObject json = change.toJson(null);\n+        ObjectNode json = change.toJson(null);\n \n-        Assert.assertFalse(json.hasKey(JsonConstants.CHANGE_SPLICE_REMOVE));\n+        Assert.assertFalse(json.has(JsonConstants.CHANGE_SPLICE_REMOVE));\n     }\n \n     @Test\n@@ -77,8 +76,8 @@ public void testEmptyAddNotInJson() {\n         ListAddChange<StateNode> change = new ListAddChange<>(feature, false, 1,\n                 Arrays.asList());\n \n-        JsonObject json = change.toJson(null);\n+        ObjectNode json = change.toJson(null);\n \n-        Assert.assertFalse(json.hasKey(JsonConstants.CHANGE_SPLICE_ADD_NODES));\n+        Assert.assertFalse(json.has(JsonConstants.CHANGE_SPLICE_ADD_NODES));\n     }\n }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/internal/change/MapPutChangeTest.java b/flow-server/src/test/java/com/vaadin/flow/internal/change/MapPutChangeTest.java\nindex 490063db2f9..efbee4998af 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/internal/change/MapPutChangeTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/internal/change/MapPutChangeTest.java\n@@ -16,9 +16,13 @@\n \n package com.vaadin.flow.internal.change;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeType;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.junit.Assert;\n import org.junit.Test;\n \n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.internal.StateNodeTest;\n import com.vaadin.flow.internal.nodefeature.AbstractNodeFeatureTest;\n@@ -27,11 +31,6 @@\n import com.vaadin.flow.internal.nodefeature.NodeMap;\n import com.vaadin.flow.shared.JsonConstants;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-import elemental.json.JsonType;\n-import elemental.json.JsonValue;\n-\n public class MapPutChangeTest {\n     private NodeMap feature = AbstractNodeFeatureTest\n             .createFeature(ElementPropertyMap.class);\n@@ -40,38 +39,39 @@ public class MapPutChangeTest {\n     public void testJson() {\n         MapPutChange change = new MapPutChange(feature, \"some\", \"string\");\n \n-        JsonObject json = change.toJson(null);\n+        ObjectNode json = change.toJson(null);\n \n         Assert.assertEquals(change.getNode().getId(),\n-                (int) json.getNumber(JsonConstants.CHANGE_NODE));\n+                json.get(JsonConstants.CHANGE_NODE).intValue());\n         Assert.assertEquals(NodeFeatureRegistry.getId(feature.getClass()),\n-                (int) json.getNumber(JsonConstants.CHANGE_FEATURE));\n+                json.get(JsonConstants.CHANGE_FEATURE).intValue());\n         Assert.assertEquals(JsonConstants.CHANGE_TYPE_PUT,\n-                json.getString(JsonConstants.CHANGE_TYPE));\n+                json.get(JsonConstants.CHANGE_TYPE).textValue());\n         Assert.assertEquals(\"some\",\n-                json.getString(JsonConstants.CHANGE_MAP_KEY));\n+                json.get(JsonConstants.CHANGE_MAP_KEY).textValue());\n         Assert.assertEquals(\"string\",\n-                json.getString(JsonConstants.CHANGE_PUT_VALUE));\n+                json.get(JsonConstants.CHANGE_PUT_VALUE).textValue());\n     }\n \n     @Test\n     public void testJsonValueTypes() {\n-        JsonValue stringValue = getValue(\"string\");\n-        Assert.assertSame(JsonType.STRING, stringValue.getType());\n-        Assert.assertEquals(\"string\", stringValue.asString());\n+        JsonNode stringValue = getValue(\"string\");\n+        Assert.assertSame(JsonNodeType.STRING, stringValue.getNodeType());\n+        Assert.assertEquals(\"string\", stringValue.textValue());\n \n-        JsonValue numberValue = getValue(Integer.valueOf(1));\n-        Assert.assertSame(JsonType.NUMBER, numberValue.getType());\n-        Assert.assertEquals(1, numberValue.asNumber(), 0);\n+        JsonNode numberValue = getValue(Integer.valueOf(1));\n+        Assert.assertSame(JsonNodeType.NUMBER, numberValue.getNodeType());\n+        Assert.assertEquals(1, numberValue.intValue(), 0);\n \n-        JsonValue booleanValue = getValue(Boolean.TRUE);\n-        Assert.assertSame(JsonType.BOOLEAN, booleanValue.getType());\n+        JsonNode booleanValue = getValue(Boolean.TRUE);\n+        Assert.assertSame(JsonNodeType.BOOLEAN, booleanValue.getNodeType());\n         Assert.assertTrue(booleanValue.asBoolean());\n \n-        JsonObject jsonInput = Json.createObject();\n-        JsonValue jsonValue = getValue(jsonInput);\n-        Assert.assertSame(JsonType.OBJECT, jsonValue.getType());\n-        Assert.assertSame(jsonInput, jsonValue);\n+        ObjectNode jsonInput = JacksonUtils.createObjectNode();\n+        JsonNode jsonValue = getValue(jsonInput);\n+        Assert.assertSame(JsonNodeType.OBJECT, jsonValue.getNodeType());\n+        // Should use same when all *Change classes populateJson updated\n+        Assert.assertEquals(jsonInput, jsonValue);\n     }\n \n     @Test\n@@ -79,17 +79,17 @@ public void testNodeValueType() {\n         StateNode value = StateNodeTest.createEmptyNode(\"value\");\n         MapPutChange change = new MapPutChange(feature, \"myKey\", value);\n \n-        JsonObject json = change.toJson(null);\n-        Assert.assertFalse(json.hasKey(JsonConstants.CHANGE_PUT_VALUE));\n+        ObjectNode json = change.toJson(null);\n+        Assert.assertFalse(json.has(JsonConstants.CHANGE_PUT_VALUE));\n \n-        JsonValue nodeValue = json.get(JsonConstants.CHANGE_PUT_NODE_VALUE);\n-        Assert.assertSame(JsonType.NUMBER, nodeValue.getType());\n-        Assert.assertEquals(value.getId(), (int) nodeValue.asNumber());\n+        JsonNode nodeValue = json.get(JsonConstants.CHANGE_PUT_NODE_VALUE);\n+        Assert.assertSame(JsonNodeType.NUMBER, nodeValue.getNodeType());\n+        Assert.assertEquals(value.getId(), nodeValue.intValue());\n     }\n \n-    private JsonValue getValue(Object input) {\n+    private JsonNode getValue(Object input) {\n         MapPutChange change = new MapPutChange(feature, \"myKey\", input);\n-        JsonObject json = change.toJson(null);\n+        ObjectNode json = change.toJson(null);\n         return json.get(JsonConstants.CHANGE_PUT_VALUE);\n     }\n \n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/internal/change/MapRemoveChangeTest.java b/flow-server/src/test/java/com/vaadin/flow/internal/change/MapRemoveChangeTest.java\nindex c80b87ede41..47a8ee94ad5 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/internal/change/MapRemoveChangeTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/internal/change/MapRemoveChangeTest.java\n@@ -16,6 +16,7 @@\n \n package com.vaadin.flow.internal.change;\n \n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.junit.Assert;\n import org.junit.Test;\n \n@@ -25,8 +26,6 @@\n import com.vaadin.flow.internal.nodefeature.NodeMap;\n import com.vaadin.flow.shared.JsonConstants;\n \n-import elemental.json.JsonObject;\n-\n public class MapRemoveChangeTest {\n     private NodeMap feature = AbstractNodeFeatureTest\n             .createFeature(ElementPropertyMap.class);\n@@ -35,16 +34,16 @@ public class MapRemoveChangeTest {\n     public void testJson() {\n         MapRemoveChange change = new MapRemoveChange(feature, \"some\");\n \n-        JsonObject json = change.toJson(null);\n+        ObjectNode json = change.toJson(null);\n \n         Assert.assertEquals(change.getNode().getId(),\n-                (int) json.getNumber(JsonConstants.CHANGE_NODE));\n+                json.get(JsonConstants.CHANGE_NODE).intValue());\n         Assert.assertEquals(NodeFeatureRegistry.getId(feature.getClass()),\n-                (int) json.getNumber(JsonConstants.CHANGE_FEATURE));\n+                json.get(JsonConstants.CHANGE_FEATURE).intValue());\n         Assert.assertEquals(JsonConstants.CHANGE_TYPE_REMOVE,\n-                json.getString(JsonConstants.CHANGE_TYPE));\n+                json.get(JsonConstants.CHANGE_TYPE).textValue());\n         Assert.assertEquals(\"some\",\n-                json.getString(JsonConstants.CHANGE_MAP_KEY));\n+                json.get(JsonConstants.CHANGE_MAP_KEY).textValue());\n     }\n \n }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/internal/nodefeature/PolymerServerEventHandlersTest.java b/flow-server/src/test/java/com/vaadin/flow/internal/nodefeature/PolymerServerEventHandlersTest.java\nindex 98e5037192a..5bd2c620182 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/internal/nodefeature/PolymerServerEventHandlersTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/internal/nodefeature/PolymerServerEventHandlersTest.java\n@@ -16,9 +16,6 @@\n \n package com.vaadin.flow.internal.nodefeature;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n@@ -29,6 +26,9 @@\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import net.jcip.annotations.NotThreadSafe;\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mockito;\n@@ -43,13 +43,12 @@\n import com.vaadin.flow.function.DeploymentConfiguration;\n import com.vaadin.flow.internal.ConstantPoolKey;\n import com.vaadin.flow.internal.HasCurrentService;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.server.VaadinService;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-import elemental.json.impl.JreJsonArray;\n-import net.jcip.annotations.NotThreadSafe;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n \n /**\n  * @author Vaadin Ltd\n@@ -152,18 +151,18 @@ private void addAndVerifyMethod(Method method) {\n         assertEquals(1, methodCollector.size());\n         assertEquals(method, methodCollector.iterator().next());\n         assertEquals(method.getParameters().length,\n-                extractParametersData(method).length());\n+                extractParametersData(method).size());\n     }\n \n-    private JreJsonArray extractParametersData(Method method) {\n+    private ArrayNode extractParametersData(Method method) {\n         ConstantPoolKey parametersData = (ConstantPoolKey) stateNode\n                 .getFeature(PolymerEventListenerMap.class)\n                 .get(method.getName());\n         assertNotNull(parametersData);\n \n-        JsonObject json = Json.createObject();\n+        ObjectNode json = JacksonUtils.createObjectNode();\n         parametersData.export(json);\n-        return json.get(parametersData.getId());\n+        return (ArrayNode) json.get(parametersData.getId());\n     }\n \n     @Test\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/MetadataWriterTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/MetadataWriterTest.java\nindex 14110f98cb3..6729cc8f6e9 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/MetadataWriterTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/MetadataWriterTest.java\n@@ -17,6 +17,7 @@\n \n import java.io.IOException;\n \n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n@@ -28,8 +29,6 @@\n import com.vaadin.flow.server.VaadinSessionState;\n import com.vaadin.flow.server.WrappedSession;\n \n-import elemental.json.JsonObject;\n-\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n@@ -121,9 +120,9 @@ public void writeSessionExpiredTag_sessionIsClosed() throws Exception {\n \n     private void assertMetadataOutput(boolean repaintAll, boolean async,\n             String expectedOutput) {\n-        JsonObject meta = new MetadataWriter().createMetadata(ui, repaintAll,\n+        ObjectNode meta = new MetadataWriter().createMetadata(ui, repaintAll,\n                 async, messages);\n-        Assert.assertEquals(expectedOutput, meta.toJson());\n+        Assert.assertEquals(expectedOutput, meta.toString());\n     }\n \n }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java\nindex e833fb638bd..4fb4d2bbbab 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java\n@@ -25,6 +25,8 @@\n import java.util.Optional;\n import java.util.Properties;\n \n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n@@ -32,6 +34,7 @@\n \n import com.vaadin.flow.component.UI;\n import com.vaadin.flow.function.DeploymentConfiguration;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.DefaultDeploymentConfiguration;\n import com.vaadin.flow.server.HandlerHelper.RequestType;\n import com.vaadin.flow.server.MockVaadinContext;\n@@ -49,9 +52,6 @@\n import com.vaadin.pro.licensechecker.dau.EnforcementException;\n import com.vaadin.tests.util.MockUI;\n \n-import elemental.json.JsonObject;\n-import elemental.json.impl.JsonUtil;\n-\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n@@ -201,15 +201,15 @@ public void should_modifyUidl_when_MPR() throws Exception {\n         handler = spy(new UidlRequestHandler());\n         StringWriter writer = new StringWriter();\n \n-        JsonObject uidl = generateUidl(true, true);\n+        ObjectNode uidl = generateUidl(true, true);\n         doReturn(uidl).when(handler).createUidl(ui, false);\n \n         handler.writeUidl(ui, writer, false);\n \n         String out = writer.toString();\n-        uidl = JsonUtil.parse(out.substring(9, out.length() - 1));\n+        uidl = JacksonUtils.readTree(out.substring(9, out.length() - 1));\n \n-        String v7Uidl = uidl.getArray(\"execute\").getArray(2).getString(1);\n+        String v7Uidl = uidl.get(\"execute\").get(2).get(1).textValue();\n         assertFalse(v7Uidl.contains(\"http://localhost:9998/#!away\"));\n         assertTrue(v7Uidl.contains(\"http://localhost:9998/\"));\n         assertFalse(v7Uidl.contains(\"window.location.hash = '!away';\"));\n@@ -222,17 +222,17 @@ public void should_changeURL_when_v7LocationProvided() throws Exception {\n         handler = spy(new UidlRequestHandler());\n         StringWriter writer = new StringWriter();\n \n-        JsonObject uidl = generateUidl(true, true);\n+        ObjectNode uidl = generateUidl(true, true);\n         doReturn(uidl).when(handler).createUidl(ui, false);\n \n         handler.writeUidl(ui, writer, false);\n \n         String out = writer.toString();\n-        uidl = JsonUtil.parse(out.substring(9, out.length() - 1));\n+        uidl = JacksonUtils.readTree(out.substring(9, out.length() - 1));\n \n         assertEquals(\n                 \"setTimeout(() => history.pushState(null, null, 'http://localhost:9998/#!away'));\",\n-                uidl.getArray(\"execute\").getArray(1).getString(1));\n+                uidl.get(\"execute\").get(1).get(1).textValue());\n     }\n \n     @Test\n@@ -243,17 +243,17 @@ public void should_updateHash_when_v7LocationNotProvided()\n         handler = spy(new UidlRequestHandler());\n         StringWriter writer = new StringWriter();\n \n-        JsonObject uidl = generateUidl(false, true);\n+        ObjectNode uidl = generateUidl(false, true);\n         doReturn(uidl).when(handler).createUidl(ui, false);\n \n         handler.writeUidl(ui, writer, false);\n \n         String out = writer.toString();\n-        uidl = JsonUtil.parse(out.substring(9, out.length() - 1));\n+        uidl = JacksonUtils.readTree(out.substring(9, out.length() - 1));\n \n         assertEquals(\n                 \"setTimeout(() => history.pushState(null, null, location.pathname + location.search + '#!away'));\",\n-                uidl.getArray(\"execute\").getArray(1).getString(1));\n+                uidl.get(\"execute\").get(1).get(1).textValue());\n     }\n \n     @Test\n@@ -263,19 +263,19 @@ public void should_not_modify_non_MPR_Uidl() throws Exception {\n         handler = spy(new UidlRequestHandler());\n         StringWriter writer = new StringWriter();\n \n-        JsonObject uidl = generateUidl(true, true);\n-        uidl.getArray(\"execute\").getArray(2).remove(1);\n+        ObjectNode uidl = generateUidl(true, true);\n+        ((ArrayNode) uidl.get(\"execute\").get(2)).remove(1);\n \n         doReturn(uidl).when(handler).createUidl(ui, false);\n \n         handler.writeUidl(ui, writer, false);\n \n-        String expected = uidl.toJson();\n+        String expected = uidl.toString();\n \n         String out = writer.toString();\n-        uidl = JsonUtil.parse(out.substring(9, out.length() - 1));\n+        uidl = JacksonUtils.readTree(out.substring(9, out.length() - 1));\n \n-        String actual = uidl.toJson();\n+        String actual = uidl.toString();\n \n         assertEquals(expected, actual);\n     }\n@@ -288,7 +288,7 @@ public void should_not_update_browser_history_if_no_hash_in_location()\n         handler = spy(new UidlRequestHandler());\n         StringWriter writer = new StringWriter();\n \n-        JsonObject uidl = getUidlWithNoHashInLocation();\n+        ObjectNode uidl = getUidlWithNoHashInLocation();\n \n         doReturn(uidl).when(handler).createUidl(ui, false);\n \n@@ -329,10 +329,10 @@ protected ServerRpcHandler createRpcHandler() {\n         Mockito.verify(response).setHeader(DAUUtils.STATUS_CODE_KEY, \"503\");\n     }\n \n-    private JsonObject generateUidl(boolean withLocation, boolean withHash) {\n+    private ObjectNode generateUidl(boolean withLocation, boolean withHash) {\n \n         // @formatter:off\n-        JsonObject uidl = JsonUtil.parse(\n+        ObjectNode uidl = JacksonUtils.readTree(\n                 \"{\" +\n                 \"  \\\"syncId\\\": 3,\" +\n                 \"  \\\"clientId\\\": 3,\" +\n@@ -387,13 +387,13 @@ private JsonObject generateUidl(boolean withLocation, boolean withHash) {\n             v7String = v7String.replace(\"___PLACE_FOR_HASH_RPC___\", hashRpc);\n         }\n \n-        uidl.getArray(\"execute\").getArray(2).set(1, v7String);\n+        ((ArrayNode) uidl.get(\"execute\").get(2)).set(1, v7String);\n         return uidl;\n     }\n \n-    private JsonObject getUidlWithNoHashInLocation() {\n+    private ObjectNode getUidlWithNoHashInLocation() {\n         // @formatter:off\n-        return JsonUtil.parse(\n+        return JacksonUtils.readTree(\n                 \"{\" +\n                 \"  \\\"syncId\\\": 3,\" +\n                 \"  \\\"clientId\\\": 3,\" +\n@@ -404,7 +404,7 @@ private JsonObject getUidlWithNoHashInLocation() {\n                 \"        0,\" +\n                 \"        9\" +\n                 \"      ],\" +\n-                \"      '\\\"syncId\\\": 1, \\\"clientId\\\": 0, \\\"changes\\\" : [[\\\"change\\\",{\\\"pid\\\":\\\"0\\\"},[\\\"0\\\",{\\\"id\\\":\\\"0\\\",\\\"location\\\":\\\"http://localhost:8080/\\\",\\\"v\\\":{\\\"action\\\":\\\"\\\"}},[\\\"actions\\\",{}]]]], \\\"state\\\":{\\\"1\\\":{\\\"componentSettings\\\":[]}}, \\\"types\\\":{\\\"0\\\":\\\"0\\\",\\\"1\\\":\\\"2\\\"}, \\\"hierarchy\\\":{\\\"0\\\":[\\\"1\\\"]}, \\\"rpc\\\" : [], \\\"meta\\\" : {\\\"async\\\":true}, \\\"resources\\\" : {}, \\\"timings\\\":[113, 113]',\" +\n+                \"      \\\"'syncId': 1, 'clientId': 0, 'changes' : [['change',{'pid':'0'},['0',{'id':'0','location':'http://localhost:8080/','v':{'action':''}},['actions',{}]]]], 'state':{'1':{'componentSettings':[]}}, 'types':{'0':'0','1':'2'}, 'hierarchy':{'0':['1']}, 'rpc' : [], 'meta' : {'async':true}, 'resources' : {}, 'timings':[113, 113]\\\",\" +\n                 \"      \\\"ROOT\\\"\" +\n                 \"    ]\" +\n                 \"  ],\" +\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlWriterTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlWriterTest.java\nindex 68e8352f3df..77d27ba6f45 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlWriterTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlWriterTest.java\n@@ -15,8 +15,6 @@\n  */\n package com.vaadin.flow.server.communication;\n \n-import jakarta.servlet.http.HttpServletRequest;\n-\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n@@ -26,6 +24,9 @@\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import jakarta.servlet.http.HttpServletRequest;\n import net.jcip.annotations.NotThreadSafe;\n import org.junit.After;\n import org.junit.Test;\n@@ -45,7 +46,7 @@\n import com.vaadin.flow.di.Lookup;\n import com.vaadin.flow.dom.Element;\n import com.vaadin.flow.dom.ElementFactory;\n-import com.vaadin.flow.internal.JsonUtils;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StateTree;\n import com.vaadin.flow.router.ParentLayout;\n import com.vaadin.flow.router.Route;\n@@ -62,10 +63,6 @@\n import com.vaadin.flow.shared.ui.Dependency;\n import com.vaadin.flow.shared.ui.LoadMode;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n-\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.hasSize;\n import static org.hamcrest.core.Is.is;\n@@ -187,16 +184,20 @@ public void testEncodeExecuteJavaScript_npmMode() {\n                         element.getNode(), invocation))\n                 .collect(Collectors.toList());\n \n-        JsonArray json = UidlWriter\n+        ArrayNode json = UidlWriter\n                 .encodeExecuteJavaScriptList(executeJavaScriptList);\n \n-        JsonArray expectedJson = JsonUtils.createArray(JsonUtils.createArray(\n-                // Null since element is not attached\n-                Json.createNull(), Json.create(\"$0.focus()\")),\n-                JsonUtils.createArray(Json.create(\"Lives remaining:\"),\n-                        Json.create(3), Json.create(\"console.log($0, $1)\")));\n-\n-        assertTrue(JsonUtils.jsonEquals(expectedJson, json));\n+        ArrayNode expectedJson = JacksonUtils.createArray(\n+                JacksonUtils.createArray(\n+                        // Null since element is not attached\n+                        JacksonUtils.nullNode(),\n+                        JacksonUtils.createNode(\"$0.focus()\")),\n+                JacksonUtils.createArray(\n+                        JacksonUtils.createNode(\"Lives remaining:\"),\n+                        JacksonUtils.createNode(3),\n+                        JacksonUtils.createNode(\"console.log($0, $1)\")));\n+\n+        assertTrue(JacksonUtils.jsonEquals(expectedJson, json));\n     }\n \n     @Test\n@@ -206,10 +207,10 @@ public void componentDependencies_npmMode() throws Exception {\n         addInitialComponentDependencies(ui, uidlWriter);\n \n         // no dependencies should be resent in next response\n-        JsonObject response = uidlWriter.createUidl(ui, false);\n-        assertFalse(response.hasKey(LoadMode.EAGER.name()));\n-        assertFalse(response.hasKey(LoadMode.INLINE.name()));\n-        assertFalse(response.hasKey(LoadMode.LAZY.name()));\n+        ObjectNode response = uidlWriter.createUidl(ui, false);\n+        assertFalse(response.has(LoadMode.EAGER.name()));\n+        assertFalse(response.has(LoadMode.INLINE.name()));\n+        assertFalse(response.has(LoadMode.LAZY.name()));\n     }\n \n     @Test\n@@ -222,7 +223,7 @@ public void componentDependencies_productionMode_scanForParentClasses()\n         ui.add(new ChildComponent());\n \n         // no dependencies should be resent in next response\n-        JsonObject response = uidlWriter.createUidl(ui, false);\n+        ObjectNode response = uidlWriter.createUidl(ui, false);\n         Set<String> chunks = getDependenciesMap(response).keySet().stream()\n                 .filter(key -> key\n                         .startsWith(\"return window.Vaadin.Flow.loadOnDemand('\"))\n@@ -248,7 +249,7 @@ public void componentDependencies_developmentMode_onlySendComponentSpecificChunk\n         ui.add(new ChildComponent());\n \n         // no dependencies should be resent in next response\n-        JsonObject response = uidlWriter.createUidl(ui, false);\n+        ObjectNode response = uidlWriter.createUidl(ui, false);\n         Set<String> chunks = getDependenciesMap(response).keySet().stream()\n                 .filter(key -> key\n                         .startsWith(\"return window.Vaadin.Flow.loadOnDemand('\"))\n@@ -275,8 +276,8 @@ public void testComponentInterfaceDependencies_npmMode() throws Exception {\n         ui.add(new ActualComponent(), new SuperComponent(),\n                 new ChildComponent());\n \n-        JsonObject response = uidlWriter.createUidl(ui, false);\n-        Map<String, JsonObject> dependenciesMap = ComponentTest\n+        ObjectNode response = uidlWriter.createUidl(ui, false);\n+        Map<String, ObjectNode> dependenciesMap = ComponentTest\n                 .filterLazyLoading(getDependenciesMap(response));\n \n         assertEquals(4, dependenciesMap.size());\n@@ -297,48 +298,50 @@ public void checkAllTypesOfDependencies_npmMode() throws Exception {\n         addInitialComponentDependencies(ui, uidlWriter);\n \n         ui.add(new ComponentWithAllDependencyTypes());\n-        JsonObject response = uidlWriter.createUidl(ui, false);\n-        Map<LoadMode, List<JsonObject>> dependenciesMap = Stream\n+        ObjectNode response = uidlWriter.createUidl(ui, false);\n+        Map<LoadMode, List<ObjectNode>> dependenciesMap = Stream\n                 .of(LoadMode.values())\n-                .map(mode -> response.getArray(mode.name()))\n-                .flatMap(JsonUtils::<JsonObject> stream)\n+                .map(mode -> (ArrayNode) response.get(mode.name()))\n+                .flatMap(JacksonUtils::<ObjectNode> stream)\n                 .collect(Collectors.toMap(\n-                        jsonObject -> LoadMode.valueOf(\n-                                jsonObject.getString(Dependency.KEY_LOAD_MODE)),\n+                        jsonObject -> LoadMode.valueOf(jsonObject\n+                                .get(Dependency.KEY_LOAD_MODE).textValue()),\n                         Collections::singletonList, (list1, list2) -> {\n-                            List<JsonObject> result = new ArrayList<>(list1);\n+                            List<ObjectNode> result = new ArrayList<>(list1);\n                             result.addAll(list2);\n                             return result;\n                         }));\n-        dependenciesMap.get(LoadMode.LAZY).removeIf(obj -> obj\n-                .getString(Dependency.KEY_URL).contains(\"Flow.loadOnDemand\"));\n+        dependenciesMap.get(LoadMode.LAZY)\n+                .removeIf(obj -> obj.get(Dependency.KEY_URL).textValue()\n+                        .contains(\"Flow.loadOnDemand\"));\n         assertThat(\n                 \"Dependencies with all types of load mode should be present in this response\",\n                 dependenciesMap.size(), is(LoadMode.values().length));\n \n-        List<JsonObject> eagerDependencies = dependenciesMap\n+        List<ObjectNode> eagerDependencies = dependenciesMap\n                 .get(LoadMode.EAGER);\n         assertThat(\"Should have an eager dependency\", eagerDependencies,\n                 hasSize(1));\n         assertThat(\"Eager dependencies should not have inline contents\",\n                 eagerDependencies.stream()\n-                        .filter(json -> json.hasKey(Dependency.KEY_CONTENTS))\n+                        .filter(json -> json.has(Dependency.KEY_CONTENTS))\n                         .collect(Collectors.toList()),\n                 hasSize(0));\n \n-        JsonObject eagerDependency = eagerDependencies.get(0);\n+        ObjectNode eagerDependency = eagerDependencies.get(0);\n         assertEquals(\"eager.css\",\n-                eagerDependency.getString(Dependency.KEY_URL));\n+                eagerDependency.get(Dependency.KEY_URL).textValue());\n         assertEquals(Dependency.Type.STYLESHEET, Dependency.Type\n-                .valueOf(eagerDependency.getString(Dependency.KEY_TYPE)));\n+                .valueOf(eagerDependency.get(Dependency.KEY_TYPE).textValue()));\n \n-        List<JsonObject> lazyDependencies = dependenciesMap.get(LoadMode.LAZY);\n-        JsonObject lazyDependency = lazyDependencies.get(0);\n-        assertEquals(\"lazy.css\", lazyDependency.getString(Dependency.KEY_URL));\n+        List<ObjectNode> lazyDependencies = dependenciesMap.get(LoadMode.LAZY);\n+        ObjectNode lazyDependency = lazyDependencies.get(0);\n+        assertEquals(\"lazy.css\",\n+                lazyDependency.get(Dependency.KEY_URL).textValue());\n         assertEquals(Dependency.Type.STYLESHEET, Dependency.Type\n-                .valueOf(lazyDependency.getString(Dependency.KEY_TYPE)));\n+                .valueOf(lazyDependency.get(Dependency.KEY_TYPE).textValue()));\n \n-        List<JsonObject> inlineDependencies = dependenciesMap\n+        List<ObjectNode> inlineDependencies = dependenciesMap\n                 .get(LoadMode.INLINE);\n         assertInlineDependencies(inlineDependencies);\n     }\n@@ -349,11 +352,11 @@ public void resynchronizationRequested_responseFieldContainsResynchronize()\n         UI ui = initializeUIForDependenciesTest(new TestUI());\n         UidlWriter uidlWriter = new UidlWriter();\n \n-        JsonObject response = uidlWriter.createUidl(ui, false, true);\n+        ObjectNode response = uidlWriter.createUidl(ui, false, true);\n         assertTrue(\"Response contains resynchronize field\",\n-                response.hasKey(ApplicationConstants.RESYNCHRONIZE_ID));\n-        assertTrue(\"Response resynchronize field is set to true\",\n-                response.getBoolean(ApplicationConstants.RESYNCHRONIZE_ID));\n+                response.has(ApplicationConstants.RESYNCHRONIZE_ID));\n+        assertTrue(\"Response resynchronize field is set to true\", response\n+                .get(ApplicationConstants.RESYNCHRONIZE_ID).booleanValue());\n     }\n \n     @Test\n@@ -393,21 +396,21 @@ public void createUidl_collectChangesUIStillDirty_shouldNotLoopEndlessly()\n                 ui.getInternals().isDirty());\n     }\n \n-    private void assertInlineDependencies(List<JsonObject> inlineDependencies) {\n+    private void assertInlineDependencies(List<ObjectNode> inlineDependencies) {\n         assertThat(\"Should have an inline dependency\", inlineDependencies,\n                 hasSize(1));\n         assertThat(\"Eager dependencies should not have urls\",\n                 inlineDependencies.stream()\n-                        .filter(json -> json.hasKey(Dependency.KEY_URL))\n+                        .filter(json -> json.has(Dependency.KEY_URL))\n                         .collect(Collectors.toList()),\n                 hasSize(0));\n \n-        JsonObject inlineDependency = inlineDependencies.get(0);\n+        ObjectNode inlineDependency = inlineDependencies.get(0);\n \n-        String url = inlineDependency.getString(Dependency.KEY_CONTENTS);\n+        String url = inlineDependency.get(Dependency.KEY_CONTENTS).textValue();\n         assertEquals(\"inline.css\", url);\n-        assertEquals(Dependency.Type.STYLESHEET, Dependency.Type\n-                .valueOf(inlineDependency.getString(Dependency.KEY_TYPE)));\n+        assertEquals(Dependency.Type.STYLESHEET, Dependency.Type.valueOf(\n+                inlineDependency.get(Dependency.KEY_TYPE).textValue()));\n     }\n \n     private UI initializeUIForDependenciesTest(UI ui) throws Exception {\n@@ -453,8 +456,8 @@ private UI initializeUIForDependenciesTest(UI ui) throws Exception {\n     private void addInitialComponentDependencies(UI ui, UidlWriter uidlWriter) {\n         ui.add(new ActualComponent());\n \n-        JsonObject response = uidlWriter.createUidl(ui, false);\n-        Map<String, JsonObject> dependenciesMap = ComponentTest\n+        ObjectNode response = uidlWriter.createUidl(ui, false);\n+        Map<String, ObjectNode> dependenciesMap = ComponentTest\n                 .filterLazyLoading(getDependenciesMap(response));\n \n         assertEquals(4, dependenciesMap.size());\n@@ -473,23 +476,23 @@ private void addInitialComponentDependencies(UI ui, UidlWriter uidlWriter) {\n         assertDependency(CSS_STYLE_NAME, CSS_STYLE_NAME, dependenciesMap);\n     }\n \n-    private Map<String, JsonObject> getDependenciesMap(JsonObject response) {\n+    private Map<String, ObjectNode> getDependenciesMap(ObjectNode response) {\n         return Stream.of(LoadMode.values())\n-                .map(mode -> response.getArray(mode.name()))\n-                .flatMap(JsonUtils::<JsonObject> stream)\n-                .collect(Collectors.toMap(\n-                        jsonObject -> jsonObject.getString(Dependency.KEY_URL),\n+                .map(mode -> (ArrayNode) response.get(mode.name()))\n+                .flatMap(JacksonUtils::<ObjectNode> stream)\n+                .collect(Collectors.toMap(jsonObject -> jsonObject\n+                        .get(Dependency.KEY_URL).textValue(),\n                         Function.identity()));\n     }\n \n     private void assertDependency(String url, String type,\n-            Map<String, JsonObject> dependenciesMap) {\n-        JsonObject jsonValue = dependenciesMap.get(url);\n+            Map<String, ObjectNode> dependenciesMap) {\n+        ObjectNode jsonValue = dependenciesMap.get(url);\n         assertNotNull(\n                 \"Expected dependencies map to have dependency with key=\" + url,\n                 jsonValue);\n-        assertEquals(url, jsonValue.get(Dependency.KEY_URL).asString());\n-        assertEquals(type, jsonValue.get(Dependency.KEY_TYPE).asString());\n+        assertEquals(url, jsonValue.get(Dependency.KEY_URL).textValue());\n+        assertEquals(type, jsonValue.get(Dependency.KEY_TYPE).textValue());\n     }\n \n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21066",
    "pr_id": 21066,
    "issue_id": 20991,
    "repo": "vaadin/flow",
    "problem_statement": "Feature flag changes are ignored on client side when default bundle is used\n### Description of the bug\n\nI downloaded a project from Vaadin Start and enabled the `accessibleDisabledButtons` feature flag via Copilot. When the server starts, the logs show that the feature flag is activated, but it remains false on the client-side. On the contrary, the `dashboardComponent` flag appears as true on the client-side even though it's not present in `vaadin-featureflags.properties`. \n\nSetting `vaadin.frontend.hotdeploy=true` resolves the issue, which suggests that it's related to the default bundle, which Vaadin start projects use by default.\n\n### Expected behavior\n\nIt should be possible to activate / deactivate feature flags in Vaadin start projects without setting any additional parameters.\n\n### Minimal reproducible example\n\n[button-test.zip](https://github.com/user-attachments/files/18782881/button-test.zip)\n\n### Versions\n\n- Vaadin / Flow version: 24.7.0.alpha8\n- Java version: 23\n- OS version: Mac OS\n",
    "issue_word_count": 152,
    "test_files_count": 5,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentProvider.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlags.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrap.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentProviderTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlagsTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrapTest.java"
    ],
    "pr_changed_test_files": [
      "flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentProviderTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlagsTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrapTest.java"
    ],
    "base_commit": "9b2dad4a3cf33fc5a4afc299a0087f1942b382f3",
    "head_commit": "91ff0dbd01e7e3db853e3a881caceba8d8dd3387",
    "repo_url": "https://github.com/vaadin/flow/pull/21066",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21066",
    "dockerfile": "",
    "pr_merged_at": "2025-03-05T07:09:59.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java\nindex a679ec45dab..f9329c884fd 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java\n@@ -25,6 +25,7 @@\n import java.util.List;\n import java.util.Locale;\n import java.util.Optional;\n+import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n import com.fasterxml.jackson.databind.JsonNode;\n@@ -40,6 +41,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.vaadin.experimental.Feature;\n+import com.vaadin.experimental.FeatureFlags;\n import com.vaadin.flow.component.UI;\n import com.vaadin.flow.function.DeploymentConfiguration;\n import com.vaadin.flow.internal.BootstrapHandlerHelper;\n@@ -108,6 +111,8 @@ public boolean synchronizedHandleRequest(VaadinSession session,\n             htmlElement.attr(\"lang\", locale.getLanguage());\n         }\n \n+        initializeFeatureFlags(indexDocument, request);\n+\n         ObjectNode initialJson = JacksonUtils.createObjectNode();\n \n         if (service.getBootstrapInitialPredicate()\n@@ -207,6 +212,28 @@ public boolean synchronizedHandleRequest(VaadinSession session,\n         return true;\n     }\n \n+    private void initializeFeatureFlags(Document indexDocument,\n+            VaadinRequest request) {\n+        String script = featureFlagsInitializer(request);\n+        Element scriptElement = indexDocument.head().prependElement(\"script\");\n+        scriptElement.attr(SCRIPT_INITIAL, \"\");\n+        scriptElement.appendChild(new DataNode(script));\n+    }\n+\n+    static String featureFlagsInitializer(VaadinRequest request) {\n+        return FeatureFlags.get(request.getService().getContext()).getFeatures()\n+                .stream().filter(Feature::isEnabled)\n+                .map(feature -> String.format(\"activator(\\\"%s\\\");\",\n+                        feature.getId()))\n+                .collect(Collectors.joining(\"\\n\",\n+                        \"\"\"\n+                                window.Vaadin = window.Vaadin || {};\n+                                window.Vaadin.featureFlagsUpdaters = window.Vaadin.featureFlagsUpdaters || [];\n+                                window.Vaadin.featureFlagsUpdaters.push((activator) => {\n+                                \"\"\",\n+                        \"});\"));\n+    }\n+\n     private static void addDevBundleTheme(Document document,\n             VaadinContext context) {\n         ApplicationConfiguration config = ApplicationConfiguration.get(context);\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentProvider.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentProvider.java\nindex f313df7cc7f..7ad89e458db 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentProvider.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentProvider.java\n@@ -193,7 +193,9 @@ protected String generateNPMResponse(String tagName, VaadinRequest request,\n         // get the running script\n         boolean productionMode = request.getService()\n                 .getDeploymentConfiguration().isProductionMode();\n-        return getThisScript(tagName) + \"var scriptUri = thisScript.src;\"\n+\n+        return IndexHtmlRequestHandler.featureFlagsInitializer(request)\n+                + getThisScript(tagName) + \"var scriptUri = thisScript.src;\"\n                 + \"var index = scriptUri.lastIndexOf('\" + WEB_COMPONENT_PATH\n                 + \"');\" + \"var context = scriptUri.substring(0, index+\"\n                 + WEB_COMPONENT_PATH.length() + \");\"\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlags.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlags.java\nindex 4ffd937ada7..9ac7b5c66a3 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlags.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlags.java\n@@ -15,13 +15,14 @@\n  */\n package com.vaadin.flow.server.frontend;\n \n-import com.vaadin.experimental.FeatureFlags;\n-\n import java.io.File;\n import java.util.ArrayList;\n import java.util.List;\n \n-import static com.vaadin.flow.server.frontend.FrontendUtils.*;\n+import com.vaadin.experimental.Feature;\n+\n+import static com.vaadin.flow.server.frontend.FrontendUtils.FEATURE_FLAGS_FILE_NAME;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.GENERATED;\n \n /**\n  * A task for generating the feature flags file\n@@ -47,11 +48,31 @@ protected String getFileContent() {\n         lines.add(\n                 \"window.Vaadin.featureFlags = window.Vaadin.featureFlags || {};\");\n \n-        FeatureFlags featureFlags = options.getFeatureFlags();\n-        featureFlags.getFeatures().forEach(feature -> {\n-            lines.add(String.format(\"window.Vaadin.featureFlags.%s = %s;\",\n-                    feature.getId(), featureFlags.isEnabled(feature)));\n-        });\n+        // Initialize the flag entries only once. For exported web-components,\n+        // this script may be executed multiple times (one per embedded\n+        // component) and we should prevent active flags get overridden.\n+        List<Feature> featureFlags = options.getFeatureFlags().getFeatures();\n+        if (!featureFlags.isEmpty()) {\n+            lines.add(\n+                    \"if (Object.keys(window.Vaadin.featureFlags).length === 0) {\");\n+            featureFlags.forEach(feature -> {\n+                lines.add(\n+                        String.format(\"window.Vaadin.featureFlags.%s = false;\",\n+                                feature.getId()));\n+            });\n+            lines.add(\"};\");\n+        }\n+\n+        // Multiple feature flags updater functions can be registered, in case\n+        // of exported web-component. If the component comes from different web\n+        // applications, the active flags might not be the same.\n+        lines.add(\"if (window.Vaadin.featureFlagsUpdaters) { \");\n+        lines.add(\n+                \"const activator = (id) => window.Vaadin.featureFlags[id] = true;\");\n+        lines.add(\n+                \"window.Vaadin.featureFlagsUpdaters.forEach(updater => updater(activator));\");\n+        lines.add(\"delete window.Vaadin.featureFlagsUpdaters;\");\n+        lines.add(\"} \");\n \n         // See https://github.com/vaadin/flow/issues/14184\n         lines.add(\"export {};\");\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrap.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrap.java\nindex 82c69c9b21d..8ecf443cbbc 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrap.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrap.java\n@@ -19,6 +19,7 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import static com.vaadin.flow.server.frontend.FrontendUtils.FEATURE_FLAGS_FILE_NAME;\n import static com.vaadin.flow.server.frontend.FrontendUtils.GENERATED;\n import static com.vaadin.flow.server.frontend.FrontendUtils.WEB_COMPONENT_BOOTSTRAP_FILE_NAME;\n \n@@ -51,7 +52,7 @@ public class TaskGenerateWebComponentBootstrap\n     @Override\n     protected String getFileContent() {\n         List<String> lines = new ArrayList<>();\n-\n+        lines.add(String.format(\"import './%s';%n\", FEATURE_FLAGS_FILE_NAME));\n         lines.add(\"import 'Frontend/generated/flow/\"\n                 + FrontendUtils.IMPORTS_WEB_COMPONENT_NAME + \"';\");\n         lines.add(\"import { init } from '\" + FrontendUtils.JAR_RESOURCES_IMPORT\n",
    "test_patch": "diff --git a/flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java b/flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java\nindex abc50d218a0..b2ed6598621 100644\n--- a/flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java\n+++ b/flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java\n@@ -532,9 +532,9 @@ public void runNodeUpdater_generateFeatureFlagsJsFile() throws Exception {\n                 .readString(generatedFeatureFlagsFile.toPath())\n                 .replace(\"\\r\\n\", \"\\n\");\n \n-        Assert.assertTrue(\"Example feature flag is not set\",\n+        Assert.assertTrue(\"Example feature should not be set at build time\",\n                 featureFlagsJs.contains(\n-                        \"window.Vaadin.featureFlags.exampleFeatureFlag = true;\\n\"));\n+                        \"window.Vaadin.featureFlags.exampleFeatureFlag = false;\\n\"));\n     }\n \n     private void fillAdapter() throws URISyntaxException {\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandlerTest.java\nindex b0fc2c64efb..5ecb8c65edd 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandlerTest.java\n@@ -210,6 +210,17 @@ public void serveIndexHtml_requestWithSomePath_hasBaseHrefElement()\n                 indexHtml.contains(\"<base href=\\\"./..\\\"\"));\n     }\n \n+    @Test\n+    public void serveIndexHtml_featureFlagsSetter_isPresent()\n+            throws IOException {\n+        indexHtmlRequestHandler.synchronizedHandleRequest(session,\n+                createVaadinRequest(\"/\"), response);\n+        String indexHtml = responseOutput.toString(StandardCharsets.UTF_8);\n+        Assert.assertTrue(\"Response should have Feature Flags updater function\",\n+                indexHtml.contains(\n+                        \"window.Vaadin.featureFlagsUpdaters.push((activator) => {\"));\n+    }\n+\n     @Test\n     public void canHandleRequest_requestWithRootPath_handleRequest() {\n         boolean canHandleRequest = indexHtmlRequestHandler\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentProviderTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentProviderTest.java\nindex 1524d2ab363..237dd06ed2f 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentProviderTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentProviderTest.java\n@@ -17,11 +17,11 @@\n package com.vaadin.flow.server.communication;\n \n import jakarta.servlet.ServletContext;\n-\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.util.HashSet;\n import java.util.Set;\n+import java.util.function.Supplier;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n@@ -31,6 +31,7 @@\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.ArgumentCaptor;\n+import org.mockito.ArgumentMatchers;\n import org.mockito.Mock;\n import org.mockito.Mockito;\n import org.mockito.MockitoAnnotations;\n@@ -42,6 +43,7 @@\n import com.vaadin.flow.component.page.Push;\n import com.vaadin.flow.component.webcomponent.WebComponent;\n import com.vaadin.flow.component.webcomponent.WebComponentConfiguration;\n+import com.vaadin.flow.di.Lookup;\n import com.vaadin.flow.function.DeploymentConfiguration;\n import com.vaadin.flow.internal.CurrentInstance;\n import com.vaadin.flow.server.DefaultDeploymentConfiguration;\n@@ -101,6 +103,14 @@ public void init() {\n                         .getArguments()[0])\n                 .when(context)\n                 .setAttribute(any(WebComponentConfigurationRegistry.class));\n+\n+        final Lookup lookup = Mockito.mock(Lookup.class);\n+        Mockito.when(context.getAttribute(Lookup.class)).thenReturn(lookup);\n+        Mockito.doAnswer(i -> i.getArgument(1, Supplier.class).get())\n+                .when(context).getAttribute(\n+                        ArgumentMatchers.argThat(aClass -> \"FeatureFlagsWrapper\"\n+                                .equals(aClass.getSimpleName())),\n+                        any());\n         VaadinService.setCurrent(service);\n         Mockito.when(service.getInstantiator())\n                 .thenReturn(new MockInstantiator());\n@@ -178,7 +188,7 @@ public void webComponentNotPresent_responseReturns404() throws IOException {\n     public void webComponentGenerator_responseGetsResult() throws IOException {\n         registry = setupConfigurations(MyComponentExporter.class);\n \n-        ByteArrayOutputStream out = Mockito.mock(ByteArrayOutputStream.class);\n+        ByteArrayOutputStream out = Mockito.spy(new ByteArrayOutputStream());\n \n         DefaultDeploymentConfiguration configuration = Mockito\n                 .mock(DefaultDeploymentConfiguration.class);\n@@ -191,6 +201,10 @@ public void webComponentGenerator_responseGetsResult() throws IOException {\n         Assert.assertTrue(\"Provider should handle web-component request\",\n                 provider.synchronizedHandleRequest(session, request, response));\n \n+        Assert.assertTrue(\"Response should have Feature Flags updater function\",\n+                out.toString().contains(\n+                        \"window.Vaadin.featureFlagsUpdaters.push((activator) => {\"));\n+\n         Mockito.verify(response).getOutputStream();\n         Mockito.verify(out).write(Mockito.any(), Mockito.anyInt(),\n                 Mockito.anyInt());\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlagsTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlagsTest.java\nindex ceba253759e..9d627dc7201 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlagsTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlagsTest.java\n@@ -87,17 +87,12 @@ public void should_defineAllFeatureFlags() throws ExecutionFailedException {\n     }\n \n     @Test\n-    public void should_defineCorrectEnabledValue()\n+    public void should_callFeatureFlagsUpdaterFunction()\n             throws ExecutionFailedException {\n-        // Enable example feature\n-        featureFlags.getFeatures().stream()\n-                .filter(feature -> feature.equals(FeatureFlags.EXAMPLE))\n-                .forEach(feature -> feature.setEnabled(true));\n-\n         taskGenerateFeatureFlags.execute();\n         String content = taskGenerateFeatureFlags.getFileContent();\n-\n-        assertFeatureFlagGlobal(content, FeatureFlags.EXAMPLE, true);\n+        Assert.assertTrue(content.contains(\n+                \"window.Vaadin.featureFlagsUpdaters.forEach(updater => updater(activator))\"));\n     }\n \n     @Test\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrapTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrapTest.java\nindex 55941ed720a..758147e477c 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrapTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrapTest.java\n@@ -27,6 +27,7 @@\n import org.mockito.Mockito;\n \n import static com.vaadin.flow.server.frontend.FrontendUtils.DEFAULT_FRONTEND_DIR;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.FEATURE_FLAGS_FILE_NAME;\n \n public class TaskGenerateWebComponentBootstrapTest {\n     @Rule\n@@ -68,4 +69,13 @@ public void should_importAndInitializeFlowClient()\n                 \"import { init } from '\" + FrontendUtils.JAR_RESOURCES_IMPORT\n                         + \"FlowClient.js';\\n\" + \"init()\"));\n     }\n+\n+    @Test\n+    public void should_importFeatureFlagTS() throws ExecutionFailedException {\n+        taskGenerateWebComponentBootstrap.execute();\n+        String content = taskGenerateWebComponentBootstrap.getFileContent();\n+        Assert.assertTrue(content.contains(\n+                String.format(\"import './%s';\", FEATURE_FLAGS_FILE_NAME)));\n+    }\n+\n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21064",
    "pr_id": 21064,
    "issue_id": 20741,
    "repo": "vaadin/flow",
    "problem_statement": "Use Jackson for public API and implementation instead of Elemental JSON\n### Describe your motivation\n\nJackson library (`com.fasterxml.jackson`) is more popular than Elemental JSON (`elemental.json`), thus Vaadin should better use it in public API.\n\n### Describe the solution you'd like\n\n0. Analyse and list the usage of Elemental in Flow: how many publicly using cases do we have and how many are used internally. I expect the main usage in `Element` class, but there may be more, e.g. in util classes.\n1. Add an adapter code that converts Jackson to/from Elemental, if it's problematic to replace it in implementation right away, else go to step 2.\n2. Change Flow internal implementation to use Jackson\n3. Add same public methods found in (0), but that use Jackson for arguments and return values\n4. Deprecate existing public method with Elemental\n5. Remove Elemental variants in next major version.\n",
    "issue_word_count": 151,
    "test_files_count": 2,
    "non_test_files_count": 7,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponent.java",
      "flow-server/src/main/java/com/vaadin/flow/i18n/TranslationFileRequestHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/UsageStatisticsExporter.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/change/MapPutChange.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementAttributeMap.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/springcsrf/SpringCsrfTokenUtil.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/CvdlProducts.java",
      "flow-server/src/test/java/com/vaadin/flow/component/webcomponent/WebComponentTest.java",
      "flow-server/src/test/java/com/vaadin/flow/internal/JacksonUtilsTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/component/webcomponent/WebComponentTest.java",
      "flow-server/src/test/java/com/vaadin/flow/internal/JacksonUtilsTest.java"
    ],
    "base_commit": "8e2248c7779af34e14fb61a669e2319b481b0eb9",
    "head_commit": "096657ef88fd53f5da85aec5df85574d0597ff70",
    "repo_url": "https://github.com/vaadin/flow/pull/21064",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21064",
    "dockerfile": "",
    "pr_merged_at": "2025-03-06T07:02:11.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponent.java b/flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponent.java\nindex b1e251b7e67..3ac6a6733bf 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponent.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponent.java\n@@ -19,13 +19,16 @@\n import java.io.Serializable;\n import java.util.Objects;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.ValueNode;\n+\n import com.vaadin.flow.component.Component;\n import com.vaadin.flow.dom.Element;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.webcomponent.PropertyConfigurationImpl;\n import com.vaadin.flow.server.webcomponent.WebComponentBinding;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n import elemental.json.JsonValue;\n \n /**\n@@ -81,14 +84,55 @@ public WebComponent(WebComponentBinding binding, Element componentHost) {\n \n     /**\n      * Fires a custom event on the client-side originating from the web\n-     * component. This event does not bubble in the DOM hierarchy.\n+     * component with custom event data. This event does not bubble in the DOM\n+     * hierarchy.\n      *\n      * @param eventName\n      *            name of the event, not null\n+     * @param objectData\n+     *            data the event should carry. This data is placed as the {@code\n+     *         detail} property of the event, nullable\n      * @see #fireEvent(String, JsonValue, EventOptions) for full set of options\n      */\n+    @Deprecated\n+    public void fireEvent(String eventName, JsonValue objectData) {\n+        fireEvent(eventName, objectData, BASIC_OPTIONS);\n+    }\n+\n+    /**\n+     * Fires a custom event on the client-side originating from the web\n+     * component with custom event data. Allows modifying the default event\n+     * behavior with {@link EventOptions}.\n+     *\n+     * @param eventName\n+     *            name of the event, not null\n+     * @param objectData\n+     *            data the event should carry. This data is placed as the {@code\n+     *         detail} property of the event, nullable\n+     * @param options\n+     *            event options for {@code bubbles}, {@code cancelable}, and\n+     *            {@code\n+     *         composed} flags, not null\n+     * @throws NullPointerException\n+     *             if either {@code eventName} or {@code options} is\n+     *             {@code null}\n+     */\n+    @Deprecated\n+    public void fireEvent(String eventName, JsonValue objectData,\n+            EventOptions options) {\n+        fireEvent(eventName, JacksonUtils.mapElemental(objectData), options);\n+    }\n+\n+    /**\n+     * Fires a custom event on the client-side originating from the web\n+     * component. This event does not bubble in the DOM hierarchy.\n+     *\n+     * @param eventName\n+     *            name of the event, not null\n+     * @see #fireEvent(String, JsonNode, EventOptions) for full set of options\n+     */\n     public void fireEvent(String eventName) {\n-        fireEvent(eventName, Json.createNull(), BASIC_OPTIONS);\n+        fireEvent(eventName, JacksonUtils.nullNode(), BASIC_OPTIONS);\n     }\n \n     /**\n@@ -101,9 +145,9 @@ public void fireEvent(String eventName) {\n      * @param objectData\n      *            data the event should carry. This data is placed as the {@code\n      *         detail} property of the event, nullable\n-     * @see #fireEvent(String, JsonValue, EventOptions) for full set of options\n+     * @see #fireEvent(String, JsonNode, EventOptions) for full set of options\n      */\n-    public void fireEvent(String eventName, JsonValue objectData) {\n+    public void fireEvent(String eventName, JsonNode objectData) {\n         fireEvent(eventName, objectData, BASIC_OPTIONS);\n     }\n \n@@ -125,21 +169,20 @@ public void fireEvent(String eventName, JsonValue objectData) {\n      *             if either {@code eventName} or {@code options} is\n      *             {@code null}\n      */\n-    public void fireEvent(String eventName, JsonValue objectData,\n+    public void fireEvent(String eventName, JsonNode objectData,\n             EventOptions options) {\n         Objects.requireNonNull(eventName,\n                 \"Parameter 'eventName' must not be \" + \"null!\");\n         Objects.requireNonNull(options, \"Parameter 'options' must not be null\");\n \n-        JsonObject object = Json.createObject();\n+        ObjectNode object = JacksonUtils.createObjectNode();\n         object.put(\"bubbles\", options.isBubbles());\n         object.put(\"cancelable\", options.isCancelable());\n         object.put(\"composed\", options.isComposed());\n-        object.put(\"detail\",\n-                objectData == null ? Json.createNull() : objectData);\n+        object.set(\"detail\",\n+                objectData == null ? JacksonUtils.nullNode() : objectData);\n \n-        componentHost.executeJs(String.format(CUSTOM_EVENT, object.toJson()),\n-                eventName);\n+        componentHost.executeJs(String.format(CUSTOM_EVENT, object), eventName);\n     }\n \n     /**\n@@ -222,9 +265,15 @@ private void setProperty(String propertyName, Object value) {\n         } else if (value instanceof Boolean) {\n             componentHost.executeJs(UPDATE_PROPERTY, propertyName,\n                     (Boolean) value);\n+        } else if (value instanceof ValueNode) {\n+            // this gets around executeJavaScript limitation.\n+            // Since properties can take JSON values, this was needed to allow\n+            // that expected behavior.\n+            componentHost.executeJs(String.format(UPDATE_PROPERTY_FORMAT,\n+                    ((ValueNode) value).toString()), propertyName);\n         } else if (value instanceof JsonValue) {\n             // this gets around executeJavaScript limitation.\n-            // Since properties can take JsonValues, this was needed to allow\n+            // Since properties can take JSON values, this was needed to allow\n             // that expected behavior.\n             componentHost.executeJs(String.format(UPDATE_PROPERTY_FORMAT,\n                     ((JsonValue) value).toJson()), propertyName);\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/i18n/TranslationFileRequestHandler.java b/flow-server/src/main/java/com/vaadin/flow/i18n/TranslationFileRequestHandler.java\nindex b6a4d28829f..e3990a97fe3 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/i18n/TranslationFileRequestHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/i18n/TranslationFileRequestHandler.java\n@@ -15,6 +15,7 @@\n  */\n package com.vaadin.flow.i18n;\n \n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.HandlerHelper;\n import com.vaadin.flow.server.HttpStatusCode;\n import com.vaadin.flow.server.SynchronizedRequestHandler;\n@@ -23,8 +24,7 @@\n import com.vaadin.flow.server.VaadinSession;\n import com.vaadin.flow.shared.JsonConstants;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -131,10 +131,10 @@ private void handleCustomI18NProvider(VaadinSession session,\n \n     private void writeFileToResponse(VaadinResponse response,\n             ResourceBundle translationPropertyFile) throws IOException {\n-        JsonObject json = Json.createObject();\n+        ObjectNode json = JacksonUtils.createObjectNode();\n         translationPropertyFile.keySet().forEach(\n                 key -> json.put(key, translationPropertyFile.getString(key)));\n-        response.getWriter().write(json.toJson());\n+        response.getWriter().write(json.toString());\n     }\n \n     private Locale getLocale(VaadinRequest request) {\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/UsageStatisticsExporter.java b/flow-server/src/main/java/com/vaadin/flow/internal/UsageStatisticsExporter.java\nindex 3e6be44343d..43077a8a904 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/UsageStatisticsExporter.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/UsageStatisticsExporter.java\n@@ -19,11 +19,9 @@\n import java.io.Serializable;\n import java.util.stream.Collectors;\n \n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.jsoup.nodes.Document;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-\n /**\n  * A class for exporting {@link UsageStatistics} entries.\n  * <p>\n@@ -58,11 +56,11 @@ public static void exportUsageStatisticsToDocument(Document document) {\n \n     private static String createUsageStatisticsJson(\n             UsageStatistics.UsageEntry entry) {\n-        JsonObject json = Json.createObject();\n+        ObjectNode json = JacksonUtils.createObjectNode();\n \n         json.put(\"is\", entry.getName());\n         json.put(\"version\", entry.getVersion());\n \n-        return json.toJson();\n+        return json.toString();\n     }\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/change/MapPutChange.java b/flow-server/src/main/java/com/vaadin/flow/internal/change/MapPutChange.java\nindex 7437cb74773..11feb2edc52 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/change/MapPutChange.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/change/MapPutChange.java\n@@ -16,7 +16,10 @@\n \n package com.vaadin.flow.internal.change;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+\n import com.vaadin.flow.internal.ConstantPool;\n+import com.vaadin.flow.internal.JacksonCodec;\n import com.vaadin.flow.internal.JsonCodec;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.internal.nodefeature.NodeFeature;\n@@ -84,10 +87,12 @@ protected void populateJson(JsonObject json, ConstantPool constantPool) {\n \n         super.populateJson(json, constantPool);\n \n-        if (value instanceof StateNode) {\n-            StateNode node = (StateNode) value;\n+        if (value instanceof StateNode node) {\n             json.put(JsonConstants.CHANGE_PUT_NODE_VALUE,\n                     Json.create(node.getId()));\n+        } else if (value instanceof JsonNode node) {\n+            json.put(JsonConstants.CHANGE_PUT_VALUE, Json.parse(JacksonCodec\n+                    .encodeWithConstantPool(node, constantPool).toString()));\n         } else {\n             json.put(JsonConstants.CHANGE_PUT_VALUE,\n                     JsonCodec.encodeWithConstantPool(value, constantPool));\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementAttributeMap.java b/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementAttributeMap.java\nindex 31c93a120c3..211a29accae 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementAttributeMap.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementAttributeMap.java\n@@ -23,6 +23,10 @@\n import java.util.Optional;\n import java.util.stream.Stream;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.NodeOwner;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.internal.StateTree;\n@@ -34,9 +38,6 @@\n import com.vaadin.flow.server.VaadinSession;\n import com.vaadin.flow.shared.Registration;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-\n /**\n  * Map for element attribute values.\n  * <p>\n@@ -112,13 +113,13 @@ public String get(String attribute) {\n             return (String) value;\n         } else {\n             // If the value is not a string then current impl only uses\n-            // JsonObject\n-            assert value instanceof JsonObject;\n-            JsonObject object = (JsonObject) value;\n+            // JsonNode\n+            assert value instanceof JsonNode;\n+            JsonNode node = (JsonNode) value;\n             // The only object which may be set by the current imlp contains\n             // \"uri\" attribute, only this situation is expected here.\n-            assert object.hasKey(NodeProperties.URI_ATTRIBUTE);\n-            return object.getString(NodeProperties.URI_ATTRIBUTE);\n+            assert node.has(NodeProperties.URI_ATTRIBUTE);\n+            return node.get(NodeProperties.URI_ATTRIBUTE).textValue();\n         }\n     }\n \n@@ -158,9 +159,9 @@ private void doSetResource(String attribute,\n         } else {\n             targetUri = StreamResourceRegistry.getURI(resource);\n         }\n-        JsonObject object = Json.createObject();\n+        ObjectNode object = JacksonUtils.createObjectNode();\n         object.put(NodeProperties.URI_ATTRIBUTE, targetUri.toASCIIString());\n-        // don't use sring as a value, but wrap it into an object to let know\n+        // don't use string as a value, but wrap it into an object to let know\n         // the client side about specific nature of the value\n         doSet(attribute, object);\n     }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/springcsrf/SpringCsrfTokenUtil.java b/flow-server/src/main/java/com/vaadin/flow/internal/springcsrf/SpringCsrfTokenUtil.java\nindex 8e2d16e2ee4..f057200b201 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/springcsrf/SpringCsrfTokenUtil.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/springcsrf/SpringCsrfTokenUtil.java\n@@ -17,16 +17,15 @@\n \n import java.util.Optional;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.jsoup.nodes.DataNode;\n import org.jsoup.nodes.Element;\n \n import jakarta.servlet.ServletRequest;\n \n-import com.vaadin.flow.internal.JsonUtils;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.VaadinRequest;\n \n-import elemental.json.JsonObject;\n-\n /**\n  * A util class for helping dealing with Spring CSRF token.\n  */\n@@ -64,18 +63,17 @@ public static Optional<SpringCsrfToken> getSpringCsrfToken(\n     private static Optional<SpringCsrfToken> extractTokenFromBean(\n             Object springCsrfToken) {\n         if (springCsrfToken != null) {\n-            JsonObject springCsrfTokenJson = JsonUtils\n+            JsonNode springCsrfTokenJson = JacksonUtils\n                     .beanToJson(springCsrfToken);\n             if (springCsrfTokenJson != null\n-                    && springCsrfTokenJson.hasKey(SPRING_CSRF_TOKEN_PROPERTY)\n-                    && springCsrfTokenJson\n-                            .hasKey(SPRING_CSRF_HEADER_PROPERTY)) {\n+                    && springCsrfTokenJson.has(SPRING_CSRF_TOKEN_PROPERTY)\n+                    && springCsrfTokenJson.has(SPRING_CSRF_HEADER_PROPERTY)) {\n                 String token = springCsrfTokenJson\n-                        .getString(SPRING_CSRF_TOKEN_PROPERTY);\n+                        .get(SPRING_CSRF_TOKEN_PROPERTY).textValue();\n                 String headerName = springCsrfTokenJson\n-                        .getString(SPRING_CSRF_HEADER_PROPERTY);\n+                        .get(SPRING_CSRF_HEADER_PROPERTY).textValue();\n                 String parameterName = springCsrfTokenJson\n-                        .getString(SPRING_CSRF_PARAMETER_PROPERTY);\n+                        .get(SPRING_CSRF_PARAMETER_PROPERTY).textValue();\n \n                 return Optional.of(\n                         new SpringCsrfToken(headerName, parameterName, token));\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/CvdlProducts.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/CvdlProducts.java\nindex 223de55848a..cefbfc13a39 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/CvdlProducts.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/CvdlProducts.java\n@@ -19,13 +19,12 @@\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n \n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.pro.licensechecker.Product;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.apache.commons.io.FileUtils;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-\n /** Utilities for commercial product handling. */\n public class CvdlProducts {\n \n@@ -48,11 +47,12 @@ public static Product getProductIfCvdl(File nodeModules, String npmModule) {\n         }\n \n         try {\n-            JsonObject packageJson = Json.parse(FileUtils\n+            JsonNode packageJson = JacksonUtils.readTree(FileUtils\n                     .readFileToString(packageJsonFile, StandardCharsets.UTF_8));\n-            if (packageJson.hasKey(CVDL_PACKAGE_KEY)) {\n-                return new Product(packageJson.getString(CVDL_PACKAGE_KEY),\n-                        packageJson.getString(\"version\"));\n+            if (packageJson.has(CVDL_PACKAGE_KEY)) {\n+                return new Product(\n+                        packageJson.get(CVDL_PACKAGE_KEY).textValue(),\n+                        packageJson.get(\"version\").textValue());\n             }\n             return null;\n         } catch (IOException e) {\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/component/webcomponent/WebComponentTest.java b/flow-server/src/test/java/com/vaadin/flow/component/webcomponent/WebComponentTest.java\nindex fb1d13956e3..fb2b9eb69fe 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/component/webcomponent/WebComponentTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/component/webcomponent/WebComponentTest.java\n@@ -18,6 +18,9 @@\n \n import java.io.Serializable;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.BaseJsonNode;\n+import com.fasterxml.jackson.databind.node.ValueNode;\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n@@ -27,6 +30,7 @@\n \n import com.vaadin.flow.component.Component;\n import com.vaadin.flow.dom.Element;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.webcomponent.PropertyConfigurationImpl;\n import com.vaadin.flow.server.webcomponent.WebComponentBinding;\n \n@@ -60,14 +64,14 @@ public void fireEvent_throwsWhenNameIsNull() {\n \n     @Test\n     public void fireEvent_doesNotThrowOnNullObjectData() {\n-        webComponent.fireEvent(\"name\", null);\n+        webComponent.fireEvent(\"name\", (JsonNode) null);\n     }\n \n     @Test\n     public void fireEvent_throwsWhenOptionsIsNull() {\n         exception.expect(NullPointerException.class);\n         exception.expectMessage(\"options\");\n-        webComponent.fireEvent(\"name\", null, null);\n+        webComponent.fireEvent(\"name\", (JsonNode) null, null);\n     }\n \n     @Test\n@@ -131,6 +135,9 @@ public void setProperty_attemptsToWriteSupportedTypes() {\n                 Component.class, \"string\", String.class, \"\");\n         PropertyConfigurationImpl<Component, Boolean> booleanConfiguration = new PropertyConfigurationImpl<>(\n                 Component.class, \"boolean\", Boolean.class, false);\n+        PropertyConfigurationImpl<Component, BaseJsonNode> jsonNodeConfiguration = new PropertyConfigurationImpl<>(\n+                Component.class, \"jsonNode\", BaseJsonNode.class,\n+                JacksonUtils.nullNode());\n         PropertyConfigurationImpl<Component, JsonValue> jsonConfiguration = new PropertyConfigurationImpl<>(\n                 Component.class, \"json\", JsonValue.class, Json.createNull());\n \n@@ -141,6 +148,7 @@ public void setProperty_attemptsToWriteSupportedTypes() {\n         binding.bindProperty(doubleConfiguration, false, null);\n         binding.bindProperty(stringConfiguration, false, null);\n         binding.bindProperty(booleanConfiguration, false, null);\n+        binding.bindProperty(jsonNodeConfiguration, false, null);\n         binding.bindProperty(jsonConfiguration, false, null);\n \n         // test\n@@ -163,9 +171,11 @@ public void setProperty_attemptsToWriteSupportedTypes() {\n         verify(element, Mockito.times(4)).executeJs(\n                 ArgumentMatchers.anyString(), ArgumentMatchers.any(),\n                 ArgumentMatchers.any());\n+        webComponent.setProperty(jsonNodeConfiguration,\n+                (ValueNode) JacksonUtils.createNode(true));\n         // JsonValue has a different number of arguments\n         webComponent.setProperty(jsonConfiguration, Json.create(true));\n-        verify(element, Mockito.times(5)).executeJs(\n+        verify(element, Mockito.times(6)).executeJs(\n                 ArgumentMatchers.anyString(),\n                 ArgumentMatchers.any(Serializable[].class));\n     }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/internal/JacksonUtilsTest.java b/flow-server/src/test/java/com/vaadin/flow/internal/JacksonUtilsTest.java\nindex 25ca475dafb..715e1b72e21 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/internal/JacksonUtilsTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/internal/JacksonUtilsTest.java\n@@ -482,7 +482,7 @@ public void toFileJson() throws JsonProcessingException {\n                   \"child\": {\n                     \"childValue\": \"child\"\n                   }\n-                }\"\"\", JacksonUtils.toFileJson(json));\n+                }\"\"\", JacksonUtils.toFileJson(json).replace(\"\\r\\n\", \"\\n\"));\n \n     }\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21062",
    "pr_id": 21062,
    "issue_id": 20741,
    "repo": "vaadin/flow",
    "problem_statement": "Use Jackson for public API and implementation instead of Elemental JSON\n### Describe your motivation\n\nJackson library (`com.fasterxml.jackson`) is more popular than Elemental JSON (`elemental.json`), thus Vaadin should better use it in public API.\n\n### Describe the solution you'd like\n\n0. Analyse and list the usage of Elemental in Flow: how many publicly using cases do we have and how many are used internally. I expect the main usage in `Element` class, but there may be more, e.g. in util classes.\n1. Add an adapter code that converts Jackson to/from Elemental, if it's problematic to replace it in implementation right away, else go to step 2.\n2. Change Flow internal implementation to use Jackson\n3. Add same public methods found in (0), but that use Jackson for arguments and return values\n4. Deprecate existing public method with Elemental\n5. Remove Elemental variants in next major version.\n",
    "issue_word_count": 151,
    "test_files_count": 9,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "flow-plugins/flow-gradle-plugin/src/functionalTest/kotlin/com/vaadin/gradle/MiscMultiModuleTest.kt",
      "flow-plugins/flow-gradle-plugin/src/functionalTest/kotlin/com/vaadin/gradle/MiscSingleModuleTest.kt",
      "flow-plugins/flow-gradle-plugin/src/functionalTest/kotlin/com/vaadin/gradle/VaadinSmokeTest.kt",
      "flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/TestUtils.java",
      "flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/BuildFrontendMojoTest.java",
      "flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/CleanFrontendMojoTest.java",
      "flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/GenerateNpmBOMMojoTest.java",
      "flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/PrepareFrontendMojoTest.java",
      "flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/BuildFrontendUtil.java",
      "flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/CleanFrontendUtil.java",
      "flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java"
    ],
    "pr_changed_test_files": [
      "flow-plugins/flow-gradle-plugin/src/functionalTest/kotlin/com/vaadin/gradle/MiscMultiModuleTest.kt",
      "flow-plugins/flow-gradle-plugin/src/functionalTest/kotlin/com/vaadin/gradle/MiscSingleModuleTest.kt",
      "flow-plugins/flow-gradle-plugin/src/functionalTest/kotlin/com/vaadin/gradle/VaadinSmokeTest.kt",
      "flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/TestUtils.java",
      "flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/BuildFrontendMojoTest.java",
      "flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/CleanFrontendMojoTest.java",
      "flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/GenerateNpmBOMMojoTest.java",
      "flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/PrepareFrontendMojoTest.java",
      "flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java"
    ],
    "base_commit": "6f5db3ba830d4ab30ce6b73095a355032feda575",
    "head_commit": "d62ed482099788cca444af7d140cc73b0ba3d8f4",
    "repo_url": "https://github.com/vaadin/flow/pull/21062",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21062",
    "dockerfile": "",
    "pr_merged_at": "2025-03-03T12:21:11.000Z",
    "patch": "diff --git a/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/BuildFrontendUtil.java b/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/BuildFrontendUtil.java\nindex baedec053b3..5fced69ea4a 100644\n--- a/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/BuildFrontendUtil.java\n+++ b/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/BuildFrontendUtil.java\n@@ -35,6 +35,8 @@\n import java.util.jar.Manifest;\n import java.util.stream.Collectors;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n import org.slf4j.Logger;\n@@ -43,6 +45,7 @@\n import org.zeroturnaround.exec.ProcessExecutor;\n \n import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.Constants;\n import com.vaadin.flow.server.ExecutionFailedException;\n import com.vaadin.flow.server.InitParameters;\n@@ -62,10 +65,6 @@\n import com.vaadin.pro.licensechecker.LocalSubscriptionKey;\n import com.vaadin.pro.licensechecker.Product;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-import elemental.json.impl.JsonUtil;\n-\n import static com.vaadin.flow.server.Constants.CONNECT_APPLICATION_PROPERTIES_TOKEN;\n import static com.vaadin.flow.server.Constants.CONNECT_JAVA_SOURCE_FOLDER_TOKEN;\n import static com.vaadin.flow.server.Constants.CONNECT_OPEN_API_FILE_TOKEN;\n@@ -226,7 +225,7 @@ public static File propagateBuildInfo(PluginAdapterBase adapter) {\n         // token file with the information about the build\n         File token = new File(adapter.servletResourceOutputDirectory(),\n                 TOKEN_FILE);\n-        JsonObject buildInfo = Json.createObject();\n+        ObjectNode buildInfo = JacksonUtils.createObjectNode();\n         buildInfo.put(SERVLET_PARAMETER_PRODUCTION_MODE, false);\n         buildInfo.put(SERVLET_PARAMETER_INITIAL_UIDL,\n                 adapter.eagerServerLoad());\n@@ -284,7 +283,7 @@ public static File propagateBuildInfo(PluginAdapterBase adapter) {\n         try {\n             FileUtils.forceMkdir(token.getParentFile());\n             FileIOUtils.writeIfChanged(token,\n-                    JsonUtil.stringify(buildInfo, 2) + \"\\n\");\n+                    buildInfo.toPrettyString() + \"\\n\");\n             // Enable debug to find out problems related with flow modes\n \n             if (adapter.isDebugEnabled()) {\n@@ -295,7 +294,7 @@ public static File propagateBuildInfo(PluginAdapterBase adapter) {\n                                 + \"npmFolder: %s%nToken file: \" + \"%s%n\"\n                                 + \"Token content: %s%n\",\n                         adapter.projectBaseDirectory(), adapter.npmFolder(),\n-                        token.getAbsolutePath(), buildInfo.toJson()));\n+                        token.getAbsolutePath(), buildInfo));\n             }\n             return token;\n         } catch (IOException e) {\n@@ -637,18 +636,18 @@ static List<Product> findCommercialFrontendComponents(\n             FrontendDependenciesScanner scanner, String statsJsonContent) {\n         List<Product> components = new ArrayList<>();\n \n-        final JsonObject statsJson = Json.parse(statsJsonContent);\n+        final JsonNode statsJson = JacksonUtils.readTree(statsJsonContent);\n         Set<String> usedPackages = getUsedPackages(scanner);\n-        if (statsJson.hasKey(\"cvdlModules\")) {\n-            final JsonObject cvdlModules = statsJson.getObject(\"cvdlModules\");\n-            for (String key : cvdlModules.keys()) {\n+        if (statsJson.has(\"cvdlModules\")) {\n+            final JsonNode cvdlModules = statsJson.get(\"cvdlModules\");\n+            for (String key : JacksonUtils.getKeys(cvdlModules)) {\n                 if (!usedPackages.contains(key)) {\n                     // If product is not used do not collect it.\n                     continue;\n                 }\n-                final JsonObject cvdlModule = cvdlModules.getObject(key);\n-                components.add(new Product(cvdlModule.getString(\"name\"),\n-                        cvdlModule.getString(\"version\")));\n+                final JsonNode cvdlModule = cvdlModules.get(key);\n+                components.add(new Product(cvdlModule.get(\"name\").textValue(),\n+                        cvdlModule.get(\"version\").textValue()));\n             }\n         }\n         return components;\n@@ -757,7 +756,7 @@ public static void updateBuildFile(PluginAdapterBuild adapter,\n         try {\n             String json = FileUtils.readFileToString(tokenFile,\n                     StandardCharsets.UTF_8.name());\n-            JsonObject buildInfo = JsonUtil.parse(json);\n+            ObjectNode buildInfo = JacksonUtils.readTree(json);\n \n             buildInfo.remove(NPM_TOKEN);\n             buildInfo.remove(NODE_VERSION);\n@@ -803,7 +802,7 @@ public static void updateBuildFile(PluginAdapterBuild adapter,\n                 buildInfo.put(Constants.PREMIUM_FEATURES, true);\n             }\n \n-            FileUtils.write(tokenFile, JsonUtil.stringify(buildInfo, 2) + \"\\n\",\n+            FileUtils.write(tokenFile, buildInfo.toPrettyString() + \"\\n\",\n                     StandardCharsets.UTF_8.name());\n             tokenFile.deleteOnExit();\n         } catch (IOException e) {\n\ndiff --git a/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/CleanFrontendUtil.java b/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/CleanFrontendUtil.java\nindex ca38384d09c..7de6b4c5d84 100644\n--- a/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/CleanFrontendUtil.java\n+++ b/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/CleanFrontendUtil.java\n@@ -22,13 +22,12 @@\n import java.util.HashSet;\n import java.util.Set;\n \n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.FileUtils;\n \n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.Constants;\n import com.vaadin.flow.server.frontend.FrontendUtils;\n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-import elemental.json.impl.JsonUtil;\n \n /**\n  * Utility class for cleaning the frontend files to a clean state.\n@@ -133,13 +132,14 @@ public static void runCleaning(PluginAdapterBase adapter,\n             File packageJsonFile = new File(adapter.npmFolder(),\n                     \"package.json\");\n             if (packageJsonFile.exists() && options.isCleanPackageJson()) {\n-                JsonObject packageJson = Json.parse(FileUtils.readFileToString(\n-                        packageJsonFile, StandardCharsets.UTF_8.name()));\n+                ObjectNode packageJson = JacksonUtils\n+                        .readTree(FileUtils.readFileToString(packageJsonFile,\n+                                StandardCharsets.UTF_8.name()));\n \n                 cleanupPackage(adapter, packageJson);\n \n                 FileUtils.write(packageJsonFile,\n-                        JsonUtil.stringify(packageJson, 2) + \"\\n\",\n+                        packageJson.toPrettyString() + \"\\n\",\n                         StandardCharsets.UTF_8.name());\n             }\n         } catch (IOException e) {\n@@ -202,16 +202,18 @@ private static void removeNodeModules(PluginAdapterBase adapter) {\n     }\n \n     private static void cleanupPackage(PluginAdapterBase adapter,\n-            JsonObject packageJson) {\n-        JsonObject dependencies = packageJson.getObject(DEPENDENCIES);\n-        JsonObject devDependencies = packageJson.getObject(DEV_DEPENDENCIES);\n-        JsonObject overridesSection = packageJson.getObject(OVERRIDES);\n-\n-        if (packageJson.hasKey(VAADIN)) {\n-            JsonObject vaadin = packageJson.getObject(VAADIN);\n-            JsonObject vaadinDependencies = vaadin.getObject(DEPENDENCIES);\n-            JsonObject vaadinDevDependencies = vaadin\n-                    .getObject(DEV_DEPENDENCIES);\n+            ObjectNode packageJson) {\n+        ObjectNode dependencies = (ObjectNode) packageJson.get(DEPENDENCIES);\n+        ObjectNode devDependencies = (ObjectNode) packageJson\n+                .get(DEV_DEPENDENCIES);\n+        ObjectNode overridesSection = (ObjectNode) packageJson.get(OVERRIDES);\n+\n+        if (packageJson.has(VAADIN)) {\n+            ObjectNode vaadin = (ObjectNode) packageJson.get(VAADIN);\n+            ObjectNode vaadinDependencies = (ObjectNode) vaadin\n+                    .get(DEPENDENCIES);\n+            ObjectNode vaadinDevDependencies = (ObjectNode) vaadin\n+                    .get(DEV_DEPENDENCIES);\n \n             // Remove all\n             cleanObject(dependencies, vaadinDependencies);\n@@ -229,19 +231,19 @@ private static void cleanupPackage(PluginAdapterBase adapter,\n \n     }\n \n-    private static void cleanObject(JsonObject target, JsonObject reference) {\n+    private static void cleanObject(ObjectNode target, ObjectNode reference) {\n         cleanObject(target, reference, true);\n     }\n \n-    private static void cleanObject(JsonObject target, JsonObject reference,\n+    private static void cleanObject(ObjectNode target, ObjectNode reference,\n             boolean requireVersionsMatch) {\n         if (target == null) {\n             return;\n         }\n         Set<String> removeKeys = new HashSet<>();\n \n-        for (String key : target.keys()) {\n-            if (reference.hasKey(key) && (!requireVersionsMatch\n+        for (String key : JacksonUtils.getKeys(target)) {\n+            if (reference.has(key) && (!requireVersionsMatch\n                     || versionsMatch(target, reference, key))) {\n                 removeKeys.add(key);\n             }\n@@ -252,9 +254,10 @@ private static void cleanObject(JsonObject target, JsonObject reference,\n         }\n     }\n \n-    private static boolean versionsMatch(JsonObject target,\n-            JsonObject reference, String key) {\n-        return target.getString(key).equals(reference.getString(key));\n+    private static boolean versionsMatch(ObjectNode target,\n+            ObjectNode reference, String key) {\n+        return target.get(key).textValue()\n+                .equals(reference.get(key).textValue());\n     }\n \n     /**\n@@ -267,15 +270,16 @@ private static boolean versionsMatch(JsonObject target,\n      *            json object to clean\n      */\n     private static void cleanFrameworkBuildDependenices(\n-            PluginAdapterBase adapter, JsonObject dependencyObject) {\n+            PluginAdapterBase adapter, ObjectNode dependencyObject) {\n         if (dependencyObject == null) {\n             return;\n         }\n         String buildTargetFolder = \"./\" + adapter.buildFolder();\n \n         Set<String> removeKeys = new HashSet<>();\n-        for (String key : dependencyObject.keys()) {\n-            if (dependencyObject.getString(key).startsWith(buildTargetFolder)) {\n+        for (String key : JacksonUtils.getKeys(dependencyObject)) {\n+            if (dependencyObject.get(key).textValue()\n+                    .startsWith(buildTargetFolder)) {\n                 removeKeys.add(key);\n             }\n         }\n",
    "test_patch": "diff --git a/flow-plugins/flow-gradle-plugin/src/functionalTest/kotlin/com/vaadin/gradle/MiscMultiModuleTest.kt b/flow-plugins/flow-gradle-plugin/src/functionalTest/kotlin/com/vaadin/gradle/MiscMultiModuleTest.kt\nindex 887349220de..8d4ab402bbe 100644\n--- a/flow-plugins/flow-gradle-plugin/src/functionalTest/kotlin/com/vaadin/gradle/MiscMultiModuleTest.kt\n+++ b/flow-plugins/flow-gradle-plugin/src/functionalTest/kotlin/com/vaadin/gradle/MiscMultiModuleTest.kt\n@@ -16,9 +16,9 @@\n \n package com.vaadin.gradle\n \n+import com.vaadin.flow.internal.JacksonUtils\n import com.vaadin.flow.internal.StringUtil\n import com.vaadin.flow.server.InitParameters\n-import elemental.json.Json\n import org.gradle.testkit.runner.BuildResult\n import org.junit.Test\n import java.io.File\n@@ -120,10 +120,10 @@ class MiscMultiModuleTest : AbstractGradleTest() {\n         expect(null) { b.task(\":vaadinBuildFrontend\") }\n \n         val tokenFile = File(testProject.dir, \"web/build/resources/main/META-INF/VAADIN/config/flow-build-info.json\")\n-        val tokenFileContent = Json.parse(tokenFile.readText())\n+        val tokenFileContent = JacksonUtils.readTree(tokenFile.readText())\n         expect(\"app-\" + StringUtil.getHash(\"web\",\n             java.nio.charset.StandardCharsets.UTF_8\n-        )) { tokenFileContent.getString(InitParameters.APPLICATION_IDENTIFIER) }\n+        )) { tokenFileContent.get(InitParameters.APPLICATION_IDENTIFIER).textValue() }\n     }\n \n     @Test\n@@ -174,10 +174,10 @@ class MiscMultiModuleTest : AbstractGradleTest() {\n         expect(null) { b.task(\":vaadinBuildFrontend\") }\n \n         val tokenFile = File(testProject.dir, \"web/build/resources/main/META-INF/VAADIN/config/flow-build-info.json\")\n-        val tokenFileContent = Json.parse(tokenFile.readText())\n+        val tokenFileContent = JacksonUtils.readTree(tokenFile.readText())\n         expect(\"app-\" + StringUtil.getHash(\"MY_APP_ID\",\n             java.nio.charset.StandardCharsets.UTF_8\n-        )) { tokenFileContent.getString(InitParameters.APPLICATION_IDENTIFIER) }\n+        )) { tokenFileContent.get(InitParameters.APPLICATION_IDENTIFIER).textValue() }\n     }\n \n     @Test\n@@ -226,8 +226,8 @@ class MiscMultiModuleTest : AbstractGradleTest() {\n         expect(null) { b.task(\":vaadinBuildFrontend\") }\n \n         val tokenFile = File(testProject.dir, \"web/build/resources/main/META-INF/VAADIN/config/flow-build-info.json\")\n-        val tokenFileContent = Json.parse(tokenFile.readText())\n-        expect(\"MY_APP_ID\") { tokenFileContent.getString(InitParameters.APPLICATION_IDENTIFIER) }\n+        val tokenFileContent = JacksonUtils.readTree(tokenFile.readText())\n+        expect(\"MY_APP_ID\") { tokenFileContent.get(InitParameters.APPLICATION_IDENTIFIER).textValue() }\n     }\n \n     @Test\n\ndiff --git a/flow-plugins/flow-gradle-plugin/src/functionalTest/kotlin/com/vaadin/gradle/MiscSingleModuleTest.kt b/flow-plugins/flow-gradle-plugin/src/functionalTest/kotlin/com/vaadin/gradle/MiscSingleModuleTest.kt\nindex 094852c8a19..47dda9cef66 100644\n--- a/flow-plugins/flow-gradle-plugin/src/functionalTest/kotlin/com/vaadin/gradle/MiscSingleModuleTest.kt\n+++ b/flow-plugins/flow-gradle-plugin/src/functionalTest/kotlin/com/vaadin/gradle/MiscSingleModuleTest.kt\n@@ -16,9 +16,9 @@\n \n package com.vaadin.gradle\n \n+import com.vaadin.flow.internal.JacksonUtils\n import com.vaadin.flow.internal.StringUtil\n import com.vaadin.flow.server.InitParameters\n-import elemental.json.Json\n import org.gradle.testkit.runner.BuildResult\n import org.gradle.testkit.runner.TaskOutcome\n import org.junit.Test\n@@ -70,10 +70,10 @@ class MiscSingleModuleTest : AbstractGradleTest() {\n     fun testWarProjectProductionMode() {\n         doTestWarProjectProductionMode()\n         val tokenFile = File(testProject.dir, \"build/resources/main/META-INF/VAADIN/config/flow-build-info.json\")\n-        val tokenFileContent = Json.parse(tokenFile.readText())\n+        val tokenFileContent = JacksonUtils.readTree(tokenFile.readText())\n         expect(\"app-\" + StringUtil.getHash(testProject.dir.name,\n             java.nio.charset.StandardCharsets.UTF_8\n-        )) { tokenFileContent.getString(InitParameters.APPLICATION_IDENTIFIER) }\n+        )) { tokenFileContent.get(InitParameters.APPLICATION_IDENTIFIER).textValue() }\n     }\n \n     @Test\n@@ -81,10 +81,10 @@ class MiscSingleModuleTest : AbstractGradleTest() {\n         testProject.settingsFile.writeText(\"rootProject.name = 'my-test-project'\")\n         doTestWarProjectProductionMode()\n         val tokenFile = File(testProject.dir, \"build/resources/main/META-INF/VAADIN/config/flow-build-info.json\")\n-        val tokenFileContent = Json.parse(tokenFile.readText())\n+        val tokenFileContent = JacksonUtils.readTree(tokenFile.readText())\n         expect(\"app-\" + StringUtil.getHash(\"my-test-project\",\n             java.nio.charset.StandardCharsets.UTF_8\n-        )) { tokenFileContent.getString(InitParameters.APPLICATION_IDENTIFIER) }\n+        )) { tokenFileContent.get(InitParameters.APPLICATION_IDENTIFIER).textValue() }\n     }\n \n     /**\n\ndiff --git a/flow-plugins/flow-gradle-plugin/src/functionalTest/kotlin/com/vaadin/gradle/VaadinSmokeTest.kt b/flow-plugins/flow-gradle-plugin/src/functionalTest/kotlin/com/vaadin/gradle/VaadinSmokeTest.kt\nindex b172ab4e86e..d68a36c174e 100644\n--- a/flow-plugins/flow-gradle-plugin/src/functionalTest/kotlin/com/vaadin/gradle/VaadinSmokeTest.kt\n+++ b/flow-plugins/flow-gradle-plugin/src/functionalTest/kotlin/com/vaadin/gradle/VaadinSmokeTest.kt\n@@ -15,14 +15,14 @@\n  */\n package com.vaadin.gradle\n \n+import com.fasterxml.jackson.databind.JsonNode\n+import com.vaadin.flow.internal.JacksonUtils\n import java.io.File\n import kotlin.test.assertContains\n import kotlin.test.expect\n import com.vaadin.flow.internal.StringUtil\n import com.vaadin.flow.server.InitParameters\n import com.vaadin.flow.server.frontend.FrontendUtils\n-import elemental.json.JsonObject\n-import elemental.json.impl.JsonUtil\n import org.gradle.testkit.runner.BuildResult\n import org.gradle.testkit.runner.TaskOutcome\n import org.junit.Before\n@@ -71,8 +71,8 @@ class VaadinSmokeTest : AbstractGradleTest() {\n \n         val tokenFile = File(testProject.dir, \"build/vaadin-generated/META-INF/VAADIN/config/flow-build-info.json\")\n         expect(true, tokenFile.toString()) { tokenFile.isFile }\n-        val buildInfo: JsonObject = JsonUtil.parse(tokenFile.readText())\n-        expect(false, buildInfo.toJson()) { buildInfo.getBoolean(InitParameters.SERVLET_PARAMETER_PRODUCTION_MODE) }\n+        val buildInfo: JsonNode = JacksonUtils.readTree(tokenFile.readText())\n+        expect(false, buildInfo.toString()) { buildInfo.get(InitParameters.SERVLET_PARAMETER_PRODUCTION_MODE).booleanValue() }\n     }\n \n     @Test\n@@ -100,11 +100,11 @@ class VaadinSmokeTest : AbstractGradleTest() {\n         build.find(\"*.br\", 4..10)\n         build.find(\"*.js\", 4..10)\n         val tokenFile = File(testProject.dir, \"build/resources/main/META-INF/VAADIN/config/flow-build-info.json\")\n-        val buildInfo: JsonObject = JsonUtil.parse(tokenFile.readText())\n-        expect(true, buildInfo.toJson()) { buildInfo.getBoolean(InitParameters.SERVLET_PARAMETER_PRODUCTION_MODE) }\n+        val buildInfo: JsonNode = JacksonUtils.readTree(tokenFile.readText())\n+        expect(true, buildInfo.toString()) { buildInfo.get(InitParameters.SERVLET_PARAMETER_PRODUCTION_MODE).booleanValue() }\n         expect(\"app-\" + StringUtil.getHash(testProject.dir.name,\n             java.nio.charset.StandardCharsets.UTF_8\n-        ), buildInfo.toJson()) { buildInfo.getString(InitParameters.APPLICATION_IDENTIFIER) }\n+        ), buildInfo.toString()) { buildInfo.get(InitParameters.APPLICATION_IDENTIFIER).textValue() }\n     }\n \n     @Test\n@@ -115,8 +115,8 @@ class VaadinSmokeTest : AbstractGradleTest() {\n         result.expectTaskSucceded(\"vaadinPrepareFrontend\")\n \n         val tokenFile = File(testProject.dir, \"build/resources/main/META-INF/VAADIN/config/flow-build-info.json\")\n-        val buildInfo: JsonObject = JsonUtil.parse(tokenFile.readText())\n-        expect(\"MY_APP_ID\", buildInfo.toJson()) { buildInfo.getString(InitParameters.APPLICATION_IDENTIFIER) }\n+        val buildInfo: JsonNode = JacksonUtils.readTree(tokenFile.readText())\n+        expect(\"MY_APP_ID\", buildInfo.toString()) { buildInfo.get(InitParameters.APPLICATION_IDENTIFIER).textValue() }\n     }\n \n     @Test\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/TestUtils.java b/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/TestUtils.java\nindex 7f51bb643a4..6e153886028 100644\n--- a/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/TestUtils.java\n+++ b/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/TestUtils.java\n@@ -26,8 +26,10 @@\n import java.util.List;\n import java.util.stream.Collectors;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+import com.vaadin.flow.internal.JacksonUtils;\n \n /**\n  * Shared code to use in the unit tests.\n@@ -112,21 +114,21 @@ public static List<String> listFilesRecursively(File directory) {\n         }\n     }\n \n-    public static JsonObject getInitialPackageJson() {\n-        JsonObject packageJson = Json.createObject();\n-        JsonObject vaadinPackages = Json.createObject();\n+    public static ObjectNode getInitialPackageJson() {\n+        ObjectNode packageJson = JacksonUtils.createObjectNode();\n+        ObjectNode vaadinPackages = JacksonUtils.createObjectNode();\n \n-        vaadinPackages.put(\"dependencies\", Json.createObject());\n-        JsonObject defaults = vaadinPackages.getObject(\"dependencies\");\n+        vaadinPackages.set(\"dependencies\", JacksonUtils.createObjectNode());\n+        ObjectNode defaults = (ObjectNode) vaadinPackages.get(\"dependencies\");\n         defaults.put(\"@polymer/polymer\", \"3.2.0\");\n         defaults.put(\"@webcomponents/webcomponentsjs\", \"^2.2.10\");\n \n-        vaadinPackages.put(\"devDependencies\", Json.createObject());\n-        defaults = vaadinPackages.getObject(\"devDependencies\");\n+        vaadinPackages.set(\"devDependencies\", JacksonUtils.createObjectNode());\n+        defaults = (ObjectNode) vaadinPackages.get(\"devDependencies\");\n         defaults.put(\"vite\", \"3.4.5\");\n \n         vaadinPackages.put(\"hash\", \"\");\n-        packageJson.put(\"vaadin\", vaadinPackages);\n+        packageJson.set(\"vaadin\", vaadinPackages);\n \n         return packageJson;\n     }\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/BuildFrontendMojoTest.java b/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/BuildFrontendMojoTest.java\nindex c9e38356919..9b5ba4d2cca 100644\n--- a/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/BuildFrontendMojoTest.java\n+++ b/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/BuildFrontendMojoTest.java\n@@ -36,6 +36,8 @@\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.maven.artifact.DefaultArtifact;\n import org.apache.maven.artifact.handler.DefaultArtifactHandler;\n import org.apache.maven.model.Build;\n@@ -60,6 +62,7 @@\n import org.mockito.Mockito;\n \n import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StringUtil;\n import com.vaadin.flow.plugin.TestUtils;\n import com.vaadin.flow.server.Constants;\n@@ -70,10 +73,6 @@\n import com.vaadin.flow.server.frontend.installer.NodeInstaller;\n import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-import elemental.json.impl.JsonUtil;\n-\n import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n import static com.vaadin.flow.server.Constants.TARGET;\n import static com.vaadin.flow.server.Constants.VAADIN_SERVLET_RESOURCES;\n@@ -203,7 +202,7 @@ public void setup() throws Exception {\n         // need to run `npm install`\n         createExpectedImports(frontendDirectory, nodeModulesPath);\n         FileUtils.fileWrite(packageJson, \"UTF-8\",\n-                TestUtils.getInitialPackageJson().toJson());\n+                TestUtils.getInitialPackageJson().toString());\n \n         lookup = Mockito.mock(Lookup.class);\n         Mockito.doReturn(new TestEndpointGeneratorTaskFactory()).when(lookup)\n@@ -459,27 +458,27 @@ public void should_AddRemove_Imports() throws Exception {\n     @Test\n     public void mavenGoalWhenPackageJsonContainsDependencies_onlyFrameworkHandledDependencyIsTouched()\n             throws Exception {\n-        JsonObject json = TestUtils.getInitialPackageJson();\n-        JsonObject dependencies = Json.createObject();\n+        ObjectNode json = TestUtils.getInitialPackageJson();\n+        ObjectNode dependencies = JacksonUtils.createObjectNode();\n         dependencies.put(\"proj4\", \"2.9.0\");\n         dependencies.put(\"line-awesome\", \"1.3.0\");\n         // Make proj4 framework handled\n-        json.getObject(\"vaadin\").getObject(\"dependencies\").put(\"proj4\",\n+        ((ObjectNode) json.get(\"vaadin\").get(\"dependencies\")).put(\"proj4\",\n                 \"2.9.0\");\n-        json.put(\"dependencies\", dependencies);\n-        FileUtils.fileWrite(packageJson, \"UTF-8\", json.toJson());\n+        json.set(\"dependencies\", dependencies);\n+        FileUtils.fileWrite(packageJson, \"UTF-8\", json.toString());\n \n         mojo.execute();\n-        JsonObject packageJsonObject = getPackageJson(packageJson);\n-        dependencies = packageJsonObject.getObject(\"dependencies\");\n+        ObjectNode packageObjectNode = getPackageJson(packageJson);\n+        dependencies = (ObjectNode) packageObjectNode.get(\"dependencies\");\n \n         assertContainsPackage(dependencies, \"@vaadin/button\",\n                 \"@vaadin/vaadin-element-mixin\");\n \n         Assert.assertFalse(\"proj4 should have been removed\",\n-                dependencies.hasKey(\"proj4\"));\n+                dependencies.has(\"proj4\"));\n         Assert.assertTrue(\"line-awesome should remain\",\n-                dependencies.hasKey(\"line-awesome\"));\n+                dependencies.has(\"line-awesome\"));\n     }\n \n     @Test\n@@ -498,7 +497,7 @@ public void existingTokenFile_parametersShouldBeRemoved()\n         ReflectionUtils.setVariableValueInObject(mojo,\n                 \"resourceOutputDirectory\", resourceOutputDirectory);\n \n-        JsonObject initialBuildInfo = Json.createObject();\n+        ObjectNode initialBuildInfo = JacksonUtils.createObjectNode();\n         initialBuildInfo.put(SERVLET_PARAMETER_PRODUCTION_MODE, false);\n         initialBuildInfo.put(Constants.NPM_TOKEN, \"npm\");\n         initialBuildInfo.put(Constants.FRONTEND_TOKEN, \"src/main/frontend\");\n@@ -512,13 +511,13 @@ public void existingTokenFile_parametersShouldBeRemoved()\n \n         org.apache.commons.io.FileUtils.forceMkdir(tokenFile.getParentFile());\n         org.apache.commons.io.FileUtils.write(tokenFile,\n-                JsonUtil.stringify(initialBuildInfo, 2) + \"\\n\", \"UTF-8\");\n+                initialBuildInfo.toPrettyString() + \"\\n\", \"UTF-8\");\n \n         mojo.execute();\n \n         String json = org.apache.commons.io.FileUtils\n                 .readFileToString(tokenFile, \"UTF-8\");\n-        JsonObject buildInfo = JsonUtil.parse(json);\n+        ObjectNode buildInfo = JacksonUtils.readTree(json);\n         Assert.assertNull(\n                 \"enable dev server token shouldn't be added \" + \"automatically\",\n                 buildInfo.get(FRONTEND_HOTDEPLOY));\n@@ -552,7 +551,7 @@ public void existingTokenFile_defaultApplicationIdentifierWritten()\n         String expectedAppId = \"app-\" + StringUtil.getHash(\n                 \"com.vaadin.testing:my-application\", StandardCharsets.UTF_8);\n \n-        JsonObject initialBuildInfo = Json.createObject();\n+        ObjectNode initialBuildInfo = JacksonUtils.createObjectNode();\n         initialBuildInfo.put(SERVLET_PARAMETER_PRODUCTION_MODE, false);\n         initialBuildInfo.put(Constants.NPM_TOKEN, \"npm\");\n         initialBuildInfo.put(Constants.FRONTEND_TOKEN, \"src/main/frontend\");\n@@ -566,17 +565,18 @@ public void existingTokenFile_defaultApplicationIdentifierWritten()\n \n         org.apache.commons.io.FileUtils.forceMkdir(tokenFile.getParentFile());\n         org.apache.commons.io.FileUtils.write(tokenFile,\n-                JsonUtil.stringify(initialBuildInfo, 2) + \"\\n\", \"UTF-8\");\n+                initialBuildInfo.toPrettyString() + \"\\n\", \"UTF-8\");\n \n         mojo.execute();\n         Assert.assertTrue(\"No token file could be found\", tokenFile.exists());\n \n         String json = org.apache.commons.io.FileUtils\n                 .readFileToString(tokenFile, \"UTF-8\");\n-        JsonObject buildInfo = JsonUtil.parse(json);\n+        ObjectNode buildInfo = JacksonUtils.readTree(json);\n         Assert.assertEquals(\n                 \"Custom application identifier not written on token file\",\n-                expectedAppId, buildInfo.getString(APPLICATION_IDENTIFIER));\n+                expectedAppId,\n+                buildInfo.get(APPLICATION_IDENTIFIER).textValue());\n     }\n \n     @Test\n@@ -587,7 +587,7 @@ public void existingTokenFile_customApplicationIdentifierWritten()\n         ReflectionUtils.setVariableValueInObject(mojo, \"applicationIdentifier\",\n                 appId);\n \n-        JsonObject initialBuildInfo = Json.createObject();\n+        ObjectNode initialBuildInfo = JacksonUtils.createObjectNode();\n         initialBuildInfo.put(SERVLET_PARAMETER_PRODUCTION_MODE, false);\n         initialBuildInfo.put(Constants.NPM_TOKEN, \"npm\");\n         initialBuildInfo.put(Constants.FRONTEND_TOKEN, \"src/main/frontend\");\n@@ -601,17 +601,17 @@ public void existingTokenFile_customApplicationIdentifierWritten()\n \n         org.apache.commons.io.FileUtils.forceMkdir(tokenFile.getParentFile());\n         org.apache.commons.io.FileUtils.write(tokenFile,\n-                JsonUtil.stringify(initialBuildInfo, 2) + \"\\n\", \"UTF-8\");\n+                initialBuildInfo.toPrettyString() + \"\\n\", \"UTF-8\");\n \n         mojo.execute();\n         Assert.assertTrue(\"No token file could be found\", tokenFile.exists());\n \n         String json = org.apache.commons.io.FileUtils\n                 .readFileToString(tokenFile, \"UTF-8\");\n-        JsonObject buildInfo = JsonUtil.parse(json);\n+        ObjectNode buildInfo = JacksonUtils.readTree(json);\n         Assert.assertEquals(\n                 \"Custom application identifier not written on token file\",\n-                appId, buildInfo.getString(APPLICATION_IDENTIFIER));\n+                appId, buildInfo.get(APPLICATION_IDENTIFIER).textValue());\n     }\n \n     @Test\n@@ -677,10 +677,10 @@ public void mavenGoal_generateTsFiles_when_enabled() throws Exception {\n         Assert.assertTrue(endpointClientApi.exists());\n     }\n \n-    static void assertContainsPackage(JsonObject dependencies,\n+    static void assertContainsPackage(JsonNode dependencies,\n             String... packages) {\n         Arrays.asList(packages).forEach(dep -> Assert\n-                .assertTrue(\"Missing \" + dep, dependencies.hasKey(dep)));\n+                .assertTrue(\"Missing \" + dep, dependencies.has(dep)));\n     }\n \n     private void assertContainsImports(boolean contains, String... imports)\n@@ -784,12 +784,12 @@ static void sleep(int ms) throws InterruptedException {\n         Thread.sleep(ms); // NOSONAR\n     }\n \n-    static JsonObject getPackageJson(String packageJson) throws IOException {\n+    static ObjectNode getPackageJson(String packageJson) throws IOException {\n         if (FileUtils.fileExists(packageJson)) {\n-            return Json.parse(FileUtils.fileRead(packageJson));\n+            return JacksonUtils.readTree(FileUtils.fileRead(packageJson));\n \n         } else {\n-            return Json.createObject();\n+            return JacksonUtils.createObjectNode();\n         }\n     }\n \n\ndiff --git a/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/CleanFrontendMojoTest.java b/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/CleanFrontendMojoTest.java\nindex 0ee89390aa7..f20d08ae4a3 100644\n--- a/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/CleanFrontendMojoTest.java\n+++ b/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/CleanFrontendMojoTest.java\n@@ -22,6 +22,8 @@\n import java.nio.file.Paths;\n import java.util.Arrays;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.maven.plugin.MojoExecutionException;\n import org.apache.maven.plugin.MojoFailureException;\n import org.apache.maven.project.MavenProject;\n@@ -34,12 +36,11 @@\n import org.junit.rules.TemporaryFolder;\n import org.mockito.Mockito;\n \n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.Constants;\n import com.vaadin.flow.server.frontend.FrontendTools;\n import com.vaadin.flow.server.frontend.installer.NodeInstaller;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n import static com.vaadin.flow.plugin.maven.BuildFrontendMojoTest.getPackageJson;\n import static com.vaadin.flow.plugin.maven.BuildFrontendMojoTest.setProject;\n import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n@@ -246,56 +247,55 @@ public void should_removePnpmPackageLockFile()\n     @Test\n     public void should_cleanPackageJson_removeVaadinAndHashObjects()\n             throws MojoFailureException, IOException, MojoExecutionException {\n-        JsonObject json = createInitialPackageJson();\n-        FileUtils.fileWrite(packageJson, json.toJson());\n+        ObjectNode json = createInitialPackageJson();\n+        FileUtils.fileWrite(packageJson, json.toString());\n         mojo.execute();\n         assertPackageJsonContent();\n \n-        JsonObject packageJsonObject = getPackageJson(packageJson);\n+        ObjectNode packageObjectNode = getPackageJson(packageJson);\n \n         Assert.assertFalse(\"'vaadin' object was left in package.json\",\n-                packageJsonObject.hasKey(\"vaadin\"));\n+                packageObjectNode.has(\"vaadin\"));\n         Assert.assertFalse(\"'hash' object was left in package.json\",\n-                packageJsonObject.hasKey(\"hash\"));\n+                packageObjectNode.has(\"hash\"));\n     }\n \n     @Test\n     public void should_cleanPackageJson_removeVaadinDependenciesInOverrides()\n             throws MojoFailureException, IOException, MojoExecutionException {\n-        JsonObject json = createInitialPackageJson(true);\n-        FileUtils.fileWrite(packageJson, json.toJson());\n+        ObjectNode json = createInitialPackageJson(true);\n+        FileUtils.fileWrite(packageJson, json.toString());\n \n-        assertContainsPackage(json.getObject(\"overrides\"), \"@polymer/polymer\");\n+        assertContainsPackage(json.get(\"overrides\"), \"@polymer/polymer\");\n \n         mojo.execute();\n \n-        JsonObject packageJsonObject = getPackageJson(packageJson);\n-        assertNotContainsPackage(packageJsonObject.getObject(\"overrides\"),\n+        ObjectNode packageObjectNode = getPackageJson(packageJson);\n+        assertNotContainsPackage(packageObjectNode.get(\"overrides\"),\n                 \"@polymer/polymer\");\n     }\n \n     @Test\n     public void should_keepUserDependencies_whenPackageJsonEdited()\n             throws MojoFailureException, IOException, MojoExecutionException {\n-        JsonObject json = createInitialPackageJson();\n-        json.put(\"dependencies\", Json.createObject());\n-        json.getObject(\"dependencies\").put(\"foo\", \"bar\");\n-        FileUtils.fileWrite(packageJson, json.toJson());\n+        ObjectNode json = createInitialPackageJson();\n+        json.put(\"dependencies\", JacksonUtils.createObjectNode());\n+        ((ObjectNode) json.get(\"dependencies\")).put(\"foo\", \"bar\");\n+        FileUtils.fileWrite(packageJson, json.toString());\n         mojo.execute();\n         assertPackageJsonContent();\n \n-        JsonObject packageJsonObject = getPackageJson(packageJson);\n-        assertContainsPackage(packageJsonObject.getObject(\"dependencies\"),\n-                \"foo\");\n+        ObjectNode packageObjectNode = getPackageJson(packageJson);\n+        assertContainsPackage(packageObjectNode.get(\"dependencies\"), \"foo\");\n     }\n \n     private void assertPackageJsonContent() throws IOException {\n-        JsonObject packageJsonObject = getPackageJson(packageJson);\n+        ObjectNode packageObjectNode = getPackageJson(packageJson);\n \n-        assertNotContainsPackage(packageJsonObject.getObject(\"dependencies\"),\n+        assertNotContainsPackage(packageObjectNode.get(\"dependencies\"),\n                 \"@polymer/polymer\", \"@webcomponents/webcomponentsjs\");\n \n-        assertNotContainsPackage(packageJsonObject.getObject(\"devDependencies\"),\n+        assertNotContainsPackage(packageObjectNode.get(\"devDependencies\"),\n                 \"vite\");\n     }\n \n@@ -312,45 +312,45 @@ private void enableHilla() throws IOException {\n                 .resolve(\"index.ts\"));\n     }\n \n-    static void assertNotContainsPackage(JsonObject dependencies,\n+    static void assertNotContainsPackage(JsonNode dependencies,\n             String... packages) {\n-        Arrays.asList(packages).forEach(dep -> Assert.assertFalse(\"Has \" + dep,\n-                dependencies.hasKey(dep)));\n+        Arrays.asList(packages).forEach(\n+                dep -> Assert.assertFalse(\"Has \" + dep, dependencies.has(dep)));\n     }\n \n-    static void assertContainsPackage(JsonObject dependencies,\n+    static void assertContainsPackage(JsonNode dependencies,\n             String... packages) {\n         Arrays.asList(packages).forEach(dep -> Assert\n-                .assertTrue(\"Not Have \" + dep, dependencies.hasKey(dep)));\n+                .assertTrue(\"Not Have \" + dep, dependencies.has(dep)));\n     }\n \n-    static JsonObject createInitialPackageJson() {\n+    static ObjectNode createInitialPackageJson() {\n         return createInitialPackageJson(false);\n     }\n \n-    static JsonObject createInitialPackageJson(boolean withOverrides) {\n-        JsonObject packageJson = Json.createObject();\n-        JsonObject vaadinPackages = Json.createObject();\n+    static ObjectNode createInitialPackageJson(boolean withOverrides) {\n+        ObjectNode packageJson = JacksonUtils.createObjectNode();\n+        ObjectNode vaadinPackages = JacksonUtils.createObjectNode();\n \n-        vaadinPackages.put(\"dependencies\", Json.createObject());\n-        JsonObject defaults = vaadinPackages.getObject(\"dependencies\");\n+        vaadinPackages.set(\"dependencies\", JacksonUtils.createObjectNode());\n+        ObjectNode defaults = (ObjectNode) vaadinPackages.get(\"dependencies\");\n         defaults.put(\"@polymer/polymer\", \"3.2.0\");\n         defaults.put(\"@webcomponents/webcomponentsjs\", \"^2.2.10\");\n \n-        packageJson.put(\"dependencies\", defaults);\n+        packageJson.set(\"dependencies\", defaults);\n \n-        vaadinPackages.put(\"devDependencies\", Json.createObject());\n-        defaults = vaadinPackages.getObject(\"devDependencies\");\n+        vaadinPackages.set(\"devDependencies\", JacksonUtils.createObjectNode());\n+        defaults = (ObjectNode) vaadinPackages.get(\"devDependencies\");\n         defaults.put(\"vite\", \"3.4.5\");\n-        packageJson.put(\"devDependencies\", defaults);\n+        packageJson.set(\"devDependencies\", defaults);\n \n         vaadinPackages.put(\"hash\", \"\");\n-        packageJson.put(\"vaadin\", vaadinPackages);\n+        packageJson.set(\"vaadin\", vaadinPackages);\n \n         if (withOverrides) {\n-            JsonObject overrides = Json.createObject();\n+            ObjectNode overrides = JacksonUtils.createObjectNode();\n             overrides.put(\"@polymer/polymer\", \"$@polymer/polymer\");\n-            packageJson.put(\"overrides\", overrides);\n+            packageJson.set(\"overrides\", overrides);\n         }\n \n         return packageJson;\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/GenerateNpmBOMMojoTest.java b/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/GenerateNpmBOMMojoTest.java\nindex ef7622a154d..36f12dd0bf5 100644\n--- a/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/GenerateNpmBOMMojoTest.java\n+++ b/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/GenerateNpmBOMMojoTest.java\n@@ -98,7 +98,7 @@ public void setUp() throws Exception {\n                 .when(mojo).getJarFiles();\n \n         FileUtils.fileWrite(manifestFilePath, \"UTF-8\",\n-                TestUtils.getInitialPackageJson().toJson());\n+                TestUtils.getInitialPackageJson().toString());\n         lookup = Mockito.mock(Lookup.class);\n         Mockito.doReturn(new TestEndpointGeneratorTaskFactory()).when(lookup)\n                 .lookup(EndpointGeneratorTaskFactory.class);\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/PrepareFrontendMojoTest.java b/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/PrepareFrontendMojoTest.java\nindex 466b444edb3..dbb3e084219 100644\n--- a/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/PrepareFrontendMojoTest.java\n+++ b/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/PrepareFrontendMojoTest.java\n@@ -25,6 +25,7 @@\n import java.util.List;\n import java.util.stream.Collectors;\n \n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.maven.plugin.MojoExecutionException;\n import org.apache.maven.plugin.MojoFailureException;\n import org.apache.maven.project.MavenProject;\n@@ -38,6 +39,7 @@\n import org.junit.rules.TemporaryFolder;\n import org.mockito.Mockito;\n \n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.plugin.TestUtils;\n import com.vaadin.flow.server.Constants;\n import com.vaadin.flow.server.InitParameters;\n@@ -242,16 +244,15 @@ public void mavenGoal_when_frontendGeneratedExists_shouldClearFolder()\n     @Test\n     public void should_updateAndKeepDependencies_when_packageJsonExists()\n             throws Exception {\n-        JsonObject json = TestUtils.getInitialPackageJson();\n-        json.put(\"dependencies\", Json.createObject());\n-        json.getObject(\"dependencies\").put(\"foo\", \"bar\");\n-        FileUtils.fileWrite(packageJson, json.toJson());\n+        ObjectNode json = TestUtils.getInitialPackageJson();\n+        json.set(\"dependencies\", JacksonUtils.createObjectNode());\n+        ((ObjectNode) json.get(\"dependencies\")).put(\"foo\", \"bar\");\n+        FileUtils.fileWrite(packageJson, json.toString());\n         mojo.execute();\n         assertPackageJsonContent();\n \n-        JsonObject packageJsonObject = getPackageJson(packageJson);\n-        assertContainsPackage(packageJsonObject.getObject(\"dependencies\"),\n-                \"foo\");\n+        ObjectNode packageJsonObject = getPackageJson(packageJson);\n+        assertContainsPackage(packageJsonObject.get(\"dependencies\"), \"foo\");\n     }\n \n     @Test\n@@ -268,13 +269,13 @@ public void jarPackaging_copyProjectFrontendResources()\n     }\n \n     private void assertPackageJsonContent() throws IOException {\n-        JsonObject packageJsonObject = getPackageJson(packageJson);\n+        ObjectNode packageJsonObject = getPackageJson(packageJson);\n \n-        assertContainsPackage(packageJsonObject.getObject(\"dependencies\"),\n+        assertContainsPackage(packageJsonObject.get(\"dependencies\"),\n                 \"@polymer/polymer\");\n \n-        assertContainsPackage(packageJsonObject.getObject(\"devDependencies\"),\n-                \"vite\", \"@rollup/plugin-replace\", \"rollup-plugin-brotli\",\n+        assertContainsPackage(packageJsonObject.get(\"devDependencies\"), \"vite\",\n+                \"@rollup/plugin-replace\", \"rollup-plugin-brotli\",\n                 \"vite-plugin-checker\");\n     }\n }\n\ndiff --git a/flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java b/flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java\nindex 8e1e2166d56..abc50d218a0 100644\n--- a/flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java\n+++ b/flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java\n@@ -21,6 +21,8 @@\n import java.util.Set;\n import java.util.stream.Collectors;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n import org.junit.Assert;\n@@ -35,6 +37,7 @@\n \n import com.vaadin.experimental.FeatureFlags;\n import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.Constants;\n import com.vaadin.flow.server.ExecutionFailedException;\n import com.vaadin.flow.server.InitParameters;\n@@ -53,10 +56,6 @@\n import com.vaadin.pro.licensechecker.LicenseChecker;\n import com.vaadin.pro.licensechecker.Product;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-import elemental.json.impl.JsonUtil;\n-\n import static com.vaadin.flow.server.frontend.FrontendUtils.FEATURE_FLAGS_FILE_NAME;\n import static com.vaadin.flow.server.frontend.FrontendUtils.TOKEN_FILE;\n \n@@ -307,16 +306,16 @@ public void updateBuildFile_tokenFileNotExisting_doNothing()\n     public void updateBuildFile_tokenExisting_developmentEntriesRemoved()\n             throws Exception {\n         File tokenFile = prepareAndAssertTokenFile();\n-        JsonObject buildInfoJsonDev = Json\n-                .parse(Files.readString(tokenFile.toPath()));\n+        JsonNode buildInfoJsonDev = JacksonUtils\n+                .readTree(Files.readString(tokenFile.toPath()));\n \n         BuildFrontendUtil.updateBuildFile(adapter, false);\n         Assert.assertTrue(\"Token file should still exist\", tokenFile.exists());\n-        JsonObject buildInfoJsonProd = Json\n-                .parse(Files.readString(tokenFile.toPath()));\n+        JsonNode buildInfoJsonProd = JacksonUtils\n+                .readTree(Files.readString(tokenFile.toPath()));\n \n-        Set<String> removedKeys = Arrays.stream(buildInfoJsonDev.keys())\n-                .filter(key -> !buildInfoJsonProd.hasKey(key))\n+        Set<String> removedKeys = JacksonUtils.getKeys(buildInfoJsonDev)\n+                .stream().filter(key -> !buildInfoJsonProd.has(key))\n                 .collect(Collectors.toSet());\n         Assert.assertFalse(\n                 \"Development entries have not been removed from token file\",\n@@ -330,11 +329,12 @@ public void updateBuildFile_tokenExisting_applicationIdentifierAdded()\n \n         BuildFrontendUtil.updateBuildFile(adapter, false);\n         Assert.assertTrue(\"Token file should still exist\", tokenFile.exists());\n-        JsonObject buildInfoJsonProd = Json\n-                .parse(Files.readString(tokenFile.toPath()));\n+        JsonNode buildInfoJsonProd = JacksonUtils\n+                .readTree(Files.readString(tokenFile.toPath()));\n         Assert.assertEquals(\"Wrong application identifier in token file\",\n-                \"TEST_APP_ID\", buildInfoJsonProd\n-                        .getString(InitParameters.APPLICATION_IDENTIFIER));\n+                \"TEST_APP_ID\",\n+                buildInfoJsonProd.get(InitParameters.APPLICATION_IDENTIFIER)\n+                        .textValue());\n     }\n \n     @Test\n@@ -357,10 +357,10 @@ public void updateBuildFile_tokenExisting_licenseRequiredAndSubscriptionKey_dauF\n             }\n             Assert.assertTrue(\"Token file should still exist\",\n                     tokenFile.exists());\n-            JsonObject buildInfoJsonProd = Json\n-                    .parse(Files.readString(tokenFile.toPath()));\n+            JsonNode buildInfoJsonProd = JacksonUtils\n+                    .readTree(Files.readString(tokenFile.toPath()));\n             Assert.assertTrue(\"DAU flag should be active in token file\",\n-                    buildInfoJsonProd.getBoolean(Constants.DAU_TOKEN));\n+                    buildInfoJsonProd.get(Constants.DAU_TOKEN).booleanValue());\n         });\n     }\n \n@@ -383,10 +383,10 @@ public void updateBuildFile_tokenExisting_licenseNotRequiredAndSubscriptionKey_d\n             }\n         }\n         Assert.assertTrue(\"Token file should still exist\", tokenFile.exists());\n-        JsonObject buildInfoJsonProd = Json\n-                .parse(Files.readString(tokenFile.toPath()));\n+        JsonNode buildInfoJsonProd = JacksonUtils\n+                .readTree(Files.readString(tokenFile.toPath()));\n         Assert.assertFalse(\"DAU flag should not be present in token file\",\n-                buildInfoJsonProd.hasKey(Constants.DAU_TOKEN));\n+                buildInfoJsonProd.has(Constants.DAU_TOKEN));\n     }\n \n     @Test\n@@ -409,10 +409,10 @@ public void updateBuildFile_tokenExisting_licenseRequiredNoSubscriptionKey_dauFl\n             }\n             Assert.assertTrue(\"Token file should still exist\",\n                     tokenFile.exists());\n-            JsonObject buildInfoJsonProd = Json\n-                    .parse(Files.readString(tokenFile.toPath()));\n+            JsonNode buildInfoJsonProd = JacksonUtils\n+                    .readTree(Files.readString(tokenFile.toPath()));\n             Assert.assertFalse(\"DAU flag should not be present in token file\",\n-                    buildInfoJsonProd.hasKey(Constants.DAU_TOKEN));\n+                    buildInfoJsonProd.has(Constants.DAU_TOKEN));\n         });\n     }\n \n@@ -435,12 +435,13 @@ public void updateBuildFile_tokenExisting_licenseRequiredAndIsPremiumLike_premiu\n             BuildFrontendUtil.updateBuildFile(adapter, true);\n             Assert.assertTrue(\"Token file should still exist\",\n                     tokenFile.exists());\n-            JsonObject buildInfoJsonProd = Json\n-                    .parse(Files.readString(tokenFile.toPath()));\n+            JsonNode buildInfoJsonProd = JacksonUtils\n+                    .readTree(Files.readString(tokenFile.toPath()));\n             Assert.assertTrue(\n                     Constants.PREMIUM_FEATURES\n                             + \" flag should be active in token file\",\n-                    buildInfoJsonProd.getBoolean(Constants.PREMIUM_FEATURES));\n+                    buildInfoJsonProd.get(Constants.PREMIUM_FEATURES)\n+                            .booleanValue());\n         });\n     }\n \n@@ -455,12 +456,12 @@ public void updateBuildFile_tokenExisting_licenseRequiredAndIsNotPremiumLike_pre\n             BuildFrontendUtil.updateBuildFile(adapter, true);\n             Assert.assertTrue(\"Token file should still exist\",\n                     tokenFile.exists());\n-            JsonObject buildInfoJsonProd = Json\n-                    .parse(Files.readString(tokenFile.toPath()));\n+            JsonNode buildInfoJsonProd = JacksonUtils\n+                    .readTree(Files.readString(tokenFile.toPath()));\n             Assert.assertFalse(\n                     Constants.PREMIUM_FEATURES\n                             + \" flag should not be active in token file\",\n-                    buildInfoJsonProd.hasKey(Constants.PREMIUM_FEATURES));\n+                    buildInfoJsonProd.has(Constants.PREMIUM_FEATURES));\n         });\n     }\n \n@@ -557,7 +558,7 @@ private void writePackageJson(File nodeModulesFolder, String name,\n             String version, String cvdlName) throws IOException {\n         File componentFolder = new File(nodeModulesFolder, name);\n         componentFolder.mkdirs();\n-        JsonObject json = Json.createObject();\n+        ObjectNode json = JacksonUtils.createObjectNode();\n         json.put(\"name\", name);\n         json.put(\"version\", version);\n         if (cvdlName == null) {\n@@ -567,7 +568,7 @@ private void writePackageJson(File nodeModulesFolder, String name,\n             json.put(\"cvdlName\", cvdlName);\n         }\n         FileUtils.write(new File(componentFolder, \"package.json\"),\n-                json.toJson(), StandardCharsets.UTF_8);\n+                json.toString(), StandardCharsets.UTF_8);\n \n     }\n \n@@ -602,11 +603,11 @@ private void addPremiumFeatureAndDAUFlagTrue(File tokenFile)\n         // when bundle is compiled on Vaadin CI server\n         String tokenJson = FileUtils.readFileToString(tokenFile,\n                 StandardCharsets.UTF_8);\n-        JsonObject buildInfo = JsonUtil.parse(tokenJson);\n+        ObjectNode buildInfo = JacksonUtils.readTree(tokenJson);\n         buildInfo.put(Constants.PREMIUM_FEATURES, true);\n         buildInfo.put(Constants.DAU_TOKEN, true);\n \n         FileIOUtils.writeIfChanged(tokenFile,\n-                JsonUtil.stringify(buildInfo, 2) + \"\\n\");\n+                buildInfo.toPrettyString() + \"\\n\");\n     }\n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21059",
    "pr_id": 21059,
    "issue_id": 20741,
    "repo": "vaadin/flow",
    "problem_statement": "Use Jackson for public API and implementation instead of Elemental JSON\n### Describe your motivation\n\nJackson library (`com.fasterxml.jackson`) is more popular than Elemental JSON (`elemental.json`), thus Vaadin should better use it in public API.\n\n### Describe the solution you'd like\n\n0. Analyse and list the usage of Elemental in Flow: how many publicly using cases do we have and how many are used internally. I expect the main usage in `Element` class, but there may be more, e.g. in util classes.\n1. Add an adapter code that converts Jackson to/from Elemental, if it's problematic to replace it in implementation right away, else go to step 2.\n2. Change Flow internal implementation to use Jackson\n3. Add same public methods found in (0), but that use Jackson for arguments and return values\n4. Deprecate existing public method with Elemental\n5. Remove Elemental variants in next major version.\n",
    "issue_word_count": 151,
    "test_files_count": 2,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java",
      "flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java",
      "flow-server/src/main/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactory.java",
      "flow-server/src/test/java/com/vaadin/flow/server/DeploymentConfigurationFactoryTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactoryTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/server/DeploymentConfigurationFactoryTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactoryTest.java"
    ],
    "base_commit": "823e86b97ece4a07507f907c371ad26ba8633bf7",
    "head_commit": "e7d6ec8884d2da30b1501f787a4b9badc3759de8",
    "repo_url": "https://github.com/vaadin/flow/pull/21059",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21059",
    "dockerfile": "",
    "pr_merged_at": "2025-03-03T12:33:17.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java b/flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java\nindex 4d80e02feb7..f5940cddd27 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java\n@@ -21,16 +21,15 @@\n import java.util.Map;\n import java.util.Properties;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.slf4j.LoggerFactory;\n \n import com.vaadin.flow.component.UI;\n import com.vaadin.flow.function.DeploymentConfiguration;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.startup.AbstractConfigurationFactory;\n import com.vaadin.flow.server.startup.ApplicationConfiguration;\n \n-import elemental.json.JsonObject;\n-import elemental.json.impl.JsonUtil;\n-\n /**\n  * Creates {@link DeploymentConfiguration} filled with all parameters specified\n  * by the framework users.\n@@ -114,7 +113,7 @@ private void readBuildInfo(Properties initParameters) {\n         // Read the json and set the appropriate system properties if not\n         // already set.\n         if (json != null) {\n-            JsonObject buildInfo = JsonUtil.parse(json);\n+            JsonNode buildInfo = JacksonUtils.readTree(json);\n             Map<String, String> properties = getConfigParametersUsingTokenData(\n                     buildInfo);\n             // only insert properties that haven't been defined\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java b/flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java\nindex 2e30fe75db6..9e99b154f23 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java\n@@ -24,6 +24,7 @@\n import java.util.Map;\n import java.util.function.Function;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.apache.commons.io.FileUtils;\n \n import com.vaadin.flow.internal.UsageStatistics;\n@@ -31,8 +32,6 @@\n import com.vaadin.flow.server.InitParameters;\n import com.vaadin.flow.server.frontend.FrontendUtils;\n \n-import elemental.json.JsonObject;\n-\n import static com.vaadin.flow.server.Constants.CONNECT_APPLICATION_PROPERTIES_TOKEN;\n import static com.vaadin.flow.server.Constants.CONNECT_JAVA_SOURCE_FOLDER_TOKEN;\n import static com.vaadin.flow.server.Constants.CONNECT_OPEN_API_FILE_TOKEN;\n@@ -80,122 +79,127 @@ public class AbstractConfigurationFactory implements Serializable {\n      * @return the config parameters\n      */\n     protected Map<String, String> getConfigParametersUsingTokenData(\n-            JsonObject buildInfo) {\n+            JsonNode buildInfo) {\n         Map<String, String> params = new HashMap<>();\n-        if (buildInfo.hasKey(SERVLET_PARAMETER_PRODUCTION_MODE)) {\n-            params.put(SERVLET_PARAMETER_PRODUCTION_MODE, String.valueOf(\n-                    buildInfo.getBoolean(SERVLET_PARAMETER_PRODUCTION_MODE)));\n+        if (buildInfo.has(SERVLET_PARAMETER_PRODUCTION_MODE)) {\n+            params.put(SERVLET_PARAMETER_PRODUCTION_MODE,\n+                    String.valueOf(\n+                            buildInfo.get(SERVLET_PARAMETER_PRODUCTION_MODE)\n+                                    .booleanValue()));\n         }\n-        if (buildInfo.hasKey(EXTERNAL_STATS_FILE_TOKEN)\n-                || buildInfo.hasKey(EXTERNAL_STATS_URL_TOKEN)) {\n+        if (buildInfo.has(EXTERNAL_STATS_FILE_TOKEN)\n+                || buildInfo.has(EXTERNAL_STATS_URL_TOKEN)) {\n             params.put(EXTERNAL_STATS_FILE, Boolean.toString(true));\n-            if (buildInfo.hasKey(EXTERNAL_STATS_URL_TOKEN)) {\n+            if (buildInfo.has(EXTERNAL_STATS_URL_TOKEN)) {\n                 params.put(EXTERNAL_STATS_URL,\n-                        buildInfo.getString(EXTERNAL_STATS_URL_TOKEN));\n+                        buildInfo.get(EXTERNAL_STATS_URL_TOKEN).textValue());\n             }\n             // NO OTHER CONFIGURATION:\n             return params;\n         }\n-        if (buildInfo.hasKey(SERVLET_PARAMETER_INITIAL_UIDL)) {\n-            params.put(SERVLET_PARAMETER_INITIAL_UIDL, String.valueOf(\n-                    buildInfo.getBoolean(SERVLET_PARAMETER_INITIAL_UIDL)));\n+        if (buildInfo.has(SERVLET_PARAMETER_INITIAL_UIDL)) {\n+            params.put(SERVLET_PARAMETER_INITIAL_UIDL, String.valueOf(buildInfo\n+                    .get(SERVLET_PARAMETER_INITIAL_UIDL).booleanValue()));\n             // Need to be sure that we remove the system property,\n             // because it has priority in the configuration getter\n             System.clearProperty(\n                     VAADIN_PREFIX + SERVLET_PARAMETER_INITIAL_UIDL);\n         }\n \n-        if (buildInfo.hasKey(NPM_TOKEN)) {\n-            params.put(PROJECT_BASEDIR, buildInfo.getString(NPM_TOKEN));\n-            verifyFolderExists(params, buildInfo.getString(NPM_TOKEN));\n+        if (buildInfo.has(NPM_TOKEN)) {\n+            params.put(PROJECT_BASEDIR, buildInfo.get(NPM_TOKEN).textValue());\n+            verifyFolderExists(params, buildInfo.get(NPM_TOKEN).textValue());\n         }\n \n-        if (buildInfo.hasKey(NODE_VERSION)) {\n-            params.put(NODE_VERSION, buildInfo.getString(NODE_VERSION));\n+        if (buildInfo.has(NODE_VERSION)) {\n+            params.put(NODE_VERSION, buildInfo.get(NODE_VERSION).textValue());\n         }\n-        if (buildInfo.hasKey(NODE_DOWNLOAD_ROOT)) {\n+        if (buildInfo.has(NODE_DOWNLOAD_ROOT)) {\n             params.put(NODE_DOWNLOAD_ROOT,\n-                    buildInfo.getString(NODE_DOWNLOAD_ROOT));\n+                    buildInfo.get(NODE_DOWNLOAD_ROOT).textValue());\n         }\n \n-        if (buildInfo.hasKey(FRONTEND_TOKEN)) {\n+        if (buildInfo.has(FRONTEND_TOKEN)) {\n             params.put(FrontendUtils.PARAM_FRONTEND_DIR,\n-                    buildInfo.getString(FRONTEND_TOKEN));\n+                    buildInfo.get(FRONTEND_TOKEN).textValue());\n             // Only verify frontend folder if it's not a subfolder of the\n             // npm folder.\n-            if (!buildInfo.hasKey(NPM_TOKEN)\n-                    || !buildInfo.getString(FRONTEND_TOKEN)\n-                            .startsWith(buildInfo.getString(NPM_TOKEN))) {\n-                verifyFolderExists(params, buildInfo.getString(FRONTEND_TOKEN));\n+            if (!buildInfo.has(NPM_TOKEN)\n+                    || !buildInfo.get(FRONTEND_TOKEN).textValue()\n+                            .startsWith(buildInfo.get(NPM_TOKEN).textValue())) {\n+                verifyFolderExists(params,\n+                        buildInfo.get(FRONTEND_TOKEN).textValue());\n             }\n         }\n \n         // These should be internal only so if there is a System\n         // property override then the user probably knows what\n         // they are doing.\n-        if (buildInfo.hasKey(FRONTEND_HOTDEPLOY)) {\n-            params.put(FRONTEND_HOTDEPLOY,\n-                    String.valueOf(buildInfo.getBoolean(FRONTEND_HOTDEPLOY)));\n-        } else if (buildInfo.hasKey(SERVLET_PARAMETER_ENABLE_DEV_SERVER)) {\n-            params.put(FRONTEND_HOTDEPLOY, String.valueOf(\n-                    buildInfo.getBoolean(SERVLET_PARAMETER_ENABLE_DEV_SERVER)));\n+        if (buildInfo.has(FRONTEND_HOTDEPLOY)) {\n+            params.put(FRONTEND_HOTDEPLOY, String\n+                    .valueOf(buildInfo.get(FRONTEND_HOTDEPLOY).booleanValue()));\n+        } else if (buildInfo.has(SERVLET_PARAMETER_ENABLE_DEV_SERVER)) {\n+            params.put(FRONTEND_HOTDEPLOY, String.valueOf(buildInfo\n+                    .get(SERVLET_PARAMETER_ENABLE_DEV_SERVER).booleanValue()));\n         }\n-        if (buildInfo.hasKey(SERVLET_PARAMETER_REUSE_DEV_SERVER)) {\n-            params.put(SERVLET_PARAMETER_REUSE_DEV_SERVER, String.valueOf(\n-                    buildInfo.getBoolean(SERVLET_PARAMETER_REUSE_DEV_SERVER)));\n+        if (buildInfo.has(SERVLET_PARAMETER_REUSE_DEV_SERVER)) {\n+            params.put(SERVLET_PARAMETER_REUSE_DEV_SERVER,\n+                    String.valueOf(\n+                            buildInfo.get(SERVLET_PARAMETER_REUSE_DEV_SERVER)\n+                                    .booleanValue()));\n         }\n-        if (buildInfo.hasKey(CONNECT_JAVA_SOURCE_FOLDER_TOKEN)) {\n-            params.put(CONNECT_JAVA_SOURCE_FOLDER_TOKEN,\n-                    buildInfo.getString(CONNECT_JAVA_SOURCE_FOLDER_TOKEN));\n+        if (buildInfo.has(CONNECT_JAVA_SOURCE_FOLDER_TOKEN)) {\n+            params.put(CONNECT_JAVA_SOURCE_FOLDER_TOKEN, buildInfo\n+                    .get(CONNECT_JAVA_SOURCE_FOLDER_TOKEN).textValue());\n         }\n-        if (buildInfo.hasKey(Constants.JAVA_RESOURCE_FOLDER_TOKEN)) {\n-            params.put(Constants.JAVA_RESOURCE_FOLDER_TOKEN,\n-                    buildInfo.getString(Constants.JAVA_RESOURCE_FOLDER_TOKEN));\n+        if (buildInfo.has(Constants.JAVA_RESOURCE_FOLDER_TOKEN)) {\n+            params.put(Constants.JAVA_RESOURCE_FOLDER_TOKEN, buildInfo\n+                    .get(Constants.JAVA_RESOURCE_FOLDER_TOKEN).textValue());\n         }\n-        if (buildInfo.hasKey(CONNECT_OPEN_API_FILE_TOKEN)) {\n+        if (buildInfo.has(CONNECT_OPEN_API_FILE_TOKEN)) {\n             params.put(CONNECT_OPEN_API_FILE_TOKEN,\n-                    buildInfo.getString(CONNECT_OPEN_API_FILE_TOKEN));\n+                    buildInfo.get(CONNECT_OPEN_API_FILE_TOKEN).textValue());\n         }\n-        if (buildInfo.hasKey(CONNECT_APPLICATION_PROPERTIES_TOKEN)) {\n-            params.put(CONNECT_APPLICATION_PROPERTIES_TOKEN,\n-                    buildInfo.getString(CONNECT_APPLICATION_PROPERTIES_TOKEN));\n+        if (buildInfo.has(CONNECT_APPLICATION_PROPERTIES_TOKEN)) {\n+            params.put(CONNECT_APPLICATION_PROPERTIES_TOKEN, buildInfo\n+                    .get(CONNECT_APPLICATION_PROPERTIES_TOKEN).textValue());\n         }\n-        if (buildInfo.hasKey(PROJECT_FRONTEND_GENERATED_DIR_TOKEN)) {\n-            params.put(PROJECT_FRONTEND_GENERATED_DIR_TOKEN,\n-                    buildInfo.getString(PROJECT_FRONTEND_GENERATED_DIR_TOKEN));\n+        if (buildInfo.has(PROJECT_FRONTEND_GENERATED_DIR_TOKEN)) {\n+            params.put(PROJECT_FRONTEND_GENERATED_DIR_TOKEN, buildInfo\n+                    .get(PROJECT_FRONTEND_GENERATED_DIR_TOKEN).textValue());\n         }\n-        if (buildInfo.hasKey(BUILD_FOLDER)) {\n-            params.put(BUILD_FOLDER, buildInfo.getString(BUILD_FOLDER));\n+        if (buildInfo.has(BUILD_FOLDER)) {\n+            params.put(BUILD_FOLDER, buildInfo.get(BUILD_FOLDER).textValue());\n         }\n-        if (buildInfo.hasKey(DISABLE_PREPARE_FRONTEND_CACHE)) {\n+        if (buildInfo.has(DISABLE_PREPARE_FRONTEND_CACHE)) {\n             UsageStatistics.markAsUsed(\"flow/always-execute-prepare-frontend\",\n                     null);\n         }\n-        if (buildInfo.hasKey(REACT_ENABLE)) {\n+        if (buildInfo.has(REACT_ENABLE)) {\n             params.put(REACT_ENABLE,\n-                    String.valueOf(buildInfo.getBoolean(REACT_ENABLE)));\n+                    String.valueOf(buildInfo.get(REACT_ENABLE).booleanValue()));\n         }\n-        if (buildInfo.hasKey(APPLICATION_IDENTIFIER)) {\n+        if (buildInfo.has(APPLICATION_IDENTIFIER)) {\n             params.put(APPLICATION_IDENTIFIER,\n-                    buildInfo.getString(APPLICATION_IDENTIFIER));\n+                    buildInfo.get(APPLICATION_IDENTIFIER).textValue());\n         }\n-        if (buildInfo.hasKey(DAU_TOKEN)) {\n+        if (buildInfo.has(DAU_TOKEN)) {\n             params.put(DAU_TOKEN,\n-                    String.valueOf(buildInfo.getBoolean(DAU_TOKEN)));\n+                    String.valueOf(buildInfo.get(DAU_TOKEN).booleanValue()));\n         }\n-        if (buildInfo.hasKey(PREMIUM_FEATURES)) {\n-            params.put(PREMIUM_FEATURES,\n-                    String.valueOf(buildInfo.getBoolean(PREMIUM_FEATURES)));\n+        if (buildInfo.has(PREMIUM_FEATURES)) {\n+            params.put(PREMIUM_FEATURES, String\n+                    .valueOf(buildInfo.get(PREMIUM_FEATURES).booleanValue()));\n         }\n \n-        if (buildInfo.hasKey(InitParameters.FRONTEND_EXTRA_EXTENSIONS)) {\n+        if (buildInfo.has(InitParameters.FRONTEND_EXTRA_EXTENSIONS)) {\n             params.put(InitParameters.FRONTEND_EXTRA_EXTENSIONS, buildInfo\n-                    .getString(InitParameters.FRONTEND_EXTRA_EXTENSIONS));\n+                    .get(InitParameters.FRONTEND_EXTRA_EXTENSIONS).textValue());\n         }\n \n-        if (buildInfo.hasKey(NPM_EXCLUDE_WEB_COMPONENTS)) {\n-            params.put(NPM_EXCLUDE_WEB_COMPONENTS, String\n-                    .valueOf(buildInfo.getBoolean(NPM_EXCLUDE_WEB_COMPONENTS)));\n+        if (buildInfo.has(NPM_EXCLUDE_WEB_COMPONENTS)) {\n+            params.put(NPM_EXCLUDE_WEB_COMPONENTS, String.valueOf(\n+                    buildInfo.get(NPM_EXCLUDE_WEB_COMPONENTS).booleanValue()));\n         }\n \n         setDevModePropertiesUsingTokenData(params, buildInfo);\n@@ -205,7 +209,7 @@ protected Map<String, String> getConfigParametersUsingTokenData(\n     /**\n      * Sets to the dev mode properties to the configuration parameters.\n      *\n-     * @see #getConfigParametersUsingTokenData(JsonObject)\n+     * @see #getConfigParametersUsingTokenData(JsonNode)\n      *\n      * @param params\n      *            the configuration parameters to set dev mode properties to\n@@ -213,29 +217,30 @@ protected Map<String, String> getConfigParametersUsingTokenData(\n      *            the token file data\n      */\n     protected void setDevModePropertiesUsingTokenData(\n-            Map<String, String> params, JsonObject buildInfo) {\n+            Map<String, String> params, JsonNode buildInfo) {\n         // read dev mode properties from the token and set init parameter only\n         // if it's not yet set\n         if (params.get(InitParameters.SERVLET_PARAMETER_ENABLE_PNPM) == null\n                 && buildInfo\n-                        .hasKey(InitParameters.SERVLET_PARAMETER_ENABLE_PNPM)) {\n+                        .has(InitParameters.SERVLET_PARAMETER_ENABLE_PNPM)) {\n             params.put(InitParameters.SERVLET_PARAMETER_ENABLE_PNPM,\n-                    String.valueOf(buildInfo.getBoolean(\n-                            InitParameters.SERVLET_PARAMETER_ENABLE_PNPM)));\n+                    String.valueOf(buildInfo\n+                            .get(InitParameters.SERVLET_PARAMETER_ENABLE_PNPM)\n+                            .booleanValue()));\n         }\n         if (params.get(InitParameters.SERVLET_PARAMETER_ENABLE_BUN) == null\n-                && buildInfo\n-                        .hasKey(InitParameters.SERVLET_PARAMETER_ENABLE_BUN)) {\n+                && buildInfo.has(InitParameters.SERVLET_PARAMETER_ENABLE_BUN)) {\n             params.put(InitParameters.SERVLET_PARAMETER_ENABLE_BUN,\n-                    String.valueOf(buildInfo.getBoolean(\n-                            InitParameters.SERVLET_PARAMETER_ENABLE_BUN)));\n+                    String.valueOf(buildInfo\n+                            .get(InitParameters.SERVLET_PARAMETER_ENABLE_BUN)\n+                            .booleanValue()));\n         }\n         if (params.get(InitParameters.REQUIRE_HOME_NODE_EXECUTABLE) == null\n-                && buildInfo\n-                        .hasKey(InitParameters.REQUIRE_HOME_NODE_EXECUTABLE)) {\n+                && buildInfo.has(InitParameters.REQUIRE_HOME_NODE_EXECUTABLE)) {\n             params.put(InitParameters.REQUIRE_HOME_NODE_EXECUTABLE,\n-                    String.valueOf(buildInfo.getBoolean(\n-                            InitParameters.REQUIRE_HOME_NODE_EXECUTABLE)));\n+                    String.valueOf(buildInfo\n+                            .get(InitParameters.REQUIRE_HOME_NODE_EXECUTABLE)\n+                            .booleanValue()));\n         }\n     }\n \n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactory.java b/flow-server/src/main/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactory.java\nindex b3f95c55f0d..afab3552a52 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactory.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactory.java\n@@ -25,6 +25,7 @@\n import java.util.Map;\n import java.util.Objects;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.osgi.framework.Constants;\n import org.osgi.service.component.annotations.Component;\n import org.slf4j.Logger;\n@@ -32,13 +33,11 @@\n \n import com.vaadin.flow.di.Lookup;\n import com.vaadin.flow.di.ResourceProvider;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.AbstractPropertyConfiguration;\n import com.vaadin.flow.server.VaadinContext;\n import com.vaadin.flow.server.frontend.FrontendUtils;\n \n-import elemental.json.JsonObject;\n-import elemental.json.impl.JsonUtil;\n-\n import static com.vaadin.flow.server.Constants.VAADIN_SERVLET_RESOURCES;\n import static com.vaadin.flow.server.InitParameters.APPLICATION_PARAMETER_DEVMODE_ENABLE_SERIALIZE_SESSION;\n import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_PRODUCTION_MODE;\n@@ -101,13 +100,13 @@ public ApplicationConfiguration create(VaadinContext context) {\n             final String name = paramNames.nextElement();\n             props.put(name, context.getContextParameter(name));\n         }\n-        JsonObject buildInfo = null;\n+        JsonNode buildInfo = null;\n         try {\n             String content = getTokenFileContent(props::get);\n             if (content == null) {\n                 content = getTokenFileFromClassloader(context);\n             }\n-            buildInfo = content == null ? null : JsonUtil.parse(content);\n+            buildInfo = content == null ? null : JacksonUtils.readTree(content);\n             if (buildInfo != null) {\n                 props.putAll(getConfigParametersUsingTokenData(buildInfo));\n             }\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/DeploymentConfigurationFactoryTest.java b/flow-server/src/test/java/com/vaadin/flow/server/DeploymentConfigurationFactoryTest.java\nindex c9fd429591e..b77a5495dd9 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/DeploymentConfigurationFactoryTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/DeploymentConfigurationFactoryTest.java\n@@ -427,11 +427,11 @@ private String generateJsonStringFromFields(Field[] fields,\n         for (int i = 0; i < fields.length; i++) {\n             try {\n                 String paramName = (String) fields[i].get(null);\n-                mockTokenJsonString += \"'\" + paramName + \"': \";\n+                mockTokenJsonString += \"\\\"\" + paramName + \"\\\": \";\n                 if (!stringParams.contains(paramName)) {\n                     mockTokenJsonString += \"true\";\n                 } else {\n-                    mockTokenJsonString += \" 'bar'\";\n+                    mockTokenJsonString += \" \\\"bar\\\"\";\n                 }\n \n             } catch (IllegalAccessException illegalAccess) {\n@@ -452,7 +452,7 @@ public void createInitParameters_tokenFileIsSetViaContext_externalStatsUrlIsRead\n         DeploymentConfigurationFactory factory = new DeploymentConfigurationFactory();\n \n         VaadinConfig config = mockTokenFileViaContextParam(\n-                \"{ 'externalStatsUrl': 'http://my.server/static/stats.json'}\");\n+                \"{ \\\"externalStatsUrl\\\": \\\"http://my.server/static/stats.json\\\"}\");\n \n         VaadinContext context = Mockito.mock(VaadinContext.class);\n \n@@ -475,7 +475,7 @@ public void createInitParameters_tokenFileIsSetViaContext_externalStatsFileIsRea\n         DeploymentConfigurationFactory factory = new DeploymentConfigurationFactory();\n \n         VaadinConfig config = mockTokenFileViaContextParam(\n-                \"{ 'externalStatsFile': true}\");\n+                \"{ \\\"externalStatsFile\\\": true}\");\n \n         VaadinContext context = Mockito.mock(VaadinContext.class);\n \n@@ -496,7 +496,7 @@ public void createInitParameters_tokenFileIsSetViaContext_setPropertyFromTokenFi\n         DeploymentConfigurationFactory factory = new DeploymentConfigurationFactory();\n \n         VaadinConfig config = mockTokenFileViaContextParam(\n-                \"{ '\" + SERVLET_PARAMETER_PRODUCTION_MODE + \"': true}\");\n+                \"{ \\\"\" + SERVLET_PARAMETER_PRODUCTION_MODE + \"\\\": true}\");\n \n         VaadinContext context = Mockito.mock(VaadinContext.class);\n \n@@ -571,7 +571,7 @@ public void externalStatsFileTrue_predefinedValuesAreNotOverridden_productionMod\n     @Test\n     public void createInitParameters_readDevModeProperties() throws Exception {\n         FileUtils.writeLines(tokenFile, Arrays.asList(\"{\",\n-                \"\\\"pnpm.enable\\\": true,\", \"\\\"require.home.node\\\": true,\", \"}\"));\n+                \"\\\"pnpm.enable\\\": true,\", \"\\\"require.home.node\\\": true\", \"}\"));\n \n         DeploymentConfiguration config = createConfig(Collections\n                 .singletonMap(PARAM_TOKEN_FILE, tokenFile.getPath()));\n@@ -586,7 +586,7 @@ public void createInitParameters_readDevModeProperties() throws Exception {\n     public void createInitParameters_initParamtersAreSet_tokenDevModePropertiesAreNotSet()\n             throws Exception {\n         FileUtils.writeLines(tokenFile, Arrays.asList(\"{\",\n-                \"\\\"pnpm.enable\\\": true,\", \"\\\"require.home.node\\\": true,\", \"}\"));\n+                \"\\\"pnpm.enable\\\": true,\", \"\\\"require.home.node\\\": true\", \"}\"));\n \n         DeploymentConfiguration config = createConfig(Collections\n                 .singletonMap(PARAM_TOKEN_FILE, tokenFile.getPath()));\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactoryTest.java b/flow-server/src/test/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactoryTest.java\nindex acbbed11d1d..a9e1d753df0 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactoryTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactoryTest.java\n@@ -55,7 +55,7 @@ public void create_tokenFileIsReadFromClassloader_externalStatsFileIsReadFromTok\n         ResourceProvider resourceProvider = mockResourceProvider(config,\n                 context);\n \n-        String content = \"{ 'externalStatsFile':true }\";\n+        String content = \"{ \\\"externalStatsFile\\\":true }\";\n         mockClassPathTokenFile(resourceProvider, content);\n \n         DefaultApplicationConfigurationFactory factory = new DefaultApplicationConfigurationFactory();\n@@ -73,7 +73,7 @@ public void create_tokenFileIsReadFromClassloader_externalStatsFileIsReadFromTok\n     @Test\n     public void create_tokenFileIsSetViaContext_externalStatsFileIsReadFromTokenFile_predefinedContext()\n             throws MalformedURLException, IOException {\n-        String content = \"{ 'externalStatsFile':true }\";\n+        String content = \"{ \\\"externalStatsFile\\\":true }\";\n         VaadinContext context = mockTokenFileViaContextParam(content);\n \n         DefaultApplicationConfigurationFactory factory = new DefaultApplicationConfigurationFactory();\n@@ -91,7 +91,7 @@ public void create_tokenFileIsSetViaContext_externalStatsFileIsReadFromTokenFile\n     @Test\n     public void create_tokenFileIsSetViaContext_externalStatsUrlIsReadFromTokenFile_predefinedContext()\n             throws MalformedURLException, IOException {\n-        String content = \"{ 'externalStatsUrl': 'http://my.server/static/stats.json'}\";\n+        String content = \"{ \\\"externalStatsUrl\\\": \\\"http://my.server/static/stats.json\\\"}\";\n         VaadinContext context = mockTokenFileViaContextParam(content);\n \n         DefaultApplicationConfigurationFactory factory = new DefaultApplicationConfigurationFactory();\n@@ -117,7 +117,7 @@ public void create_tokenFileIsReadFromClassloader_externalStatsUrlIsReadFromToke\n                 context);\n \n         mockClassPathTokenFile(resourceProvider,\n-                \"{ 'externalStatsUrl': 'http://my.server/static/stats.json'}\");\n+                \"{ \\\"externalStatsUrl\\\": \\\"http://my.server/static/stats.json\\\"}\");\n \n         DefaultApplicationConfigurationFactory factory = new DefaultApplicationConfigurationFactory();\n         ApplicationConfiguration configuration = factory.create(context);\n@@ -165,7 +165,7 @@ public void create_tokenFileWithPremiumFlag_premiumFlagIsPropagatedToDeploymentC\n         ResourceProvider resourceProvider = mockResourceProvider(config,\n                 context);\n \n-        String content = \"{ '\" + Constants.PREMIUM_FEATURES + \"':true }\";\n+        String content = \"{ \\\"\" + Constants.PREMIUM_FEATURES + \"\\\": true }\";\n         mockClassPathTokenFile(resourceProvider, content);\n \n         DefaultApplicationConfigurationFactory factory = new DefaultApplicationConfigurationFactory();\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21056",
    "pr_id": 21056,
    "issue_id": 20741,
    "repo": "vaadin/flow",
    "problem_statement": "Use Jackson for public API and implementation instead of Elemental JSON\n### Describe your motivation\n\nJackson library (`com.fasterxml.jackson`) is more popular than Elemental JSON (`elemental.json`), thus Vaadin should better use it in public API.\n\n### Describe the solution you'd like\n\n0. Analyse and list the usage of Elemental in Flow: how many publicly using cases do we have and how many are used internally. I expect the main usage in `Element` class, but there may be more, e.g. in util classes.\n1. Add an adapter code that converts Jackson to/from Elemental, if it's problematic to replace it in implementation right away, else go to step 2.\n2. Change Flow internal implementation to use Jackson\n3. Add same public methods found in (0), but that use Jackson for arguments and return values\n4. Deprecate existing public method with Elemental\n5. Remove Elemental variants in next major version.\n",
    "issue_word_count": 151,
    "test_files_count": 4,
    "non_test_files_count": 7,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/BrowserLiveReload.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java",
      "flow-tests/test-dev-mode/src/main/java/com/vaadin/flow/uitest/ui/DevToolsPlugin.java",
      "vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DebugWindowConnection.java",
      "vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DevToolsInterface.java",
      "vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DevToolsMessageHandler.java",
      "vaadin-dev-server/src/main/java/com/vaadin/base/devserver/stats/DevModeUsageStatistics.java",
      "vaadin-dev-server/src/test/java/com/vaadin/base/devserver/DebugWindowConnectionTest.java",
      "vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerTestBase.java",
      "vaadin-dev-server/src/test/java/com/vaadin/base/devserver/stats/DevModeUsageStatisticsTest.java"
    ],
    "pr_changed_test_files": [
      "flow-tests/test-dev-mode/src/main/java/com/vaadin/flow/uitest/ui/DevToolsPlugin.java",
      "vaadin-dev-server/src/test/java/com/vaadin/base/devserver/DebugWindowConnectionTest.java",
      "vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerTestBase.java",
      "vaadin-dev-server/src/test/java/com/vaadin/base/devserver/stats/DevModeUsageStatisticsTest.java"
    ],
    "base_commit": "15ce25357e253796715a41ff546841f5bae6de7f",
    "head_commit": "a5c52f676464dacdd14927f1c57c8f2cec813e24",
    "repo_url": "https://github.com/vaadin/flow/pull/21056",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21056",
    "dockerfile": "",
    "pr_merged_at": "2025-03-05T13:31:18.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java b/flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java\nindex ac8204429e5..953bcea5b70 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java\n@@ -41,6 +41,7 @@\n import com.vaadin.flow.di.Lookup;\n import com.vaadin.flow.internal.BrowserLiveReload;\n import com.vaadin.flow.internal.BrowserLiveReloadAccessor;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.router.internal.RouteTarget;\n import com.vaadin.flow.router.internal.RouteUtil;\n import com.vaadin.flow.server.RouteRegistry;\n@@ -56,8 +57,6 @@\n import com.vaadin.flow.server.VaadinService;\n import com.vaadin.flow.server.VaadinSession;\n \n-import elemental.json.Json;\n-\n /**\n  * Entry point for application classes hot reloads.\n  * <p>\n@@ -185,7 +184,8 @@ public void onHotswap(URI[] createdResources, URI[] modifiedResources,\n             ResourceBundle.clearCache();\n \n             // Trigger any potential Hilla translation updates\n-            liveReload.sendHmrEvent(\"translations-update\", Json.createObject());\n+            liveReload.sendHmrEvent(\"translations-update\",\n+                    JacksonUtils.createObjectNode());\n \n             // Trigger any potential Flow translation updates\n             EnumMap<UIRefreshStrategy, List<UI>> refreshActions = new EnumMap<>(\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/BrowserLiveReload.java b/flow-server/src/main/java/com/vaadin/flow/internal/BrowserLiveReload.java\nindex 30756f861fc..92e3f86b536 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/BrowserLiveReload.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/BrowserLiveReload.java\n@@ -15,12 +15,11 @@\n  */\n package com.vaadin.flow.internal;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.atmosphere.cpr.AtmosphereResource;\n \n import com.vaadin.flow.server.communication.FragmentedMessageHolder;\n \n-import elemental.json.JsonObject;\n-\n /**\n  * Provides a way to reload browser tabs via web socket connection passed as a\n  * {@link AtmosphereResource}.\n@@ -126,6 +125,6 @@ default void refresh(boolean refreshLayouts) {\n      * @param eventData\n      *            the event data\n      */\n-    void sendHmrEvent(String event, JsonObject eventData);\n+    void sendHmrEvent(String event, JsonNode eventData);\n \n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java b/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\nindex 340776ba7ed..0130afb5e4a 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\n@@ -109,9 +109,12 @@ public static ValueNode nullNode() {\n      *\n      * @param jsonObject\n      *            JsonObject to change\n-     * @return ObjectNode of elemental json object\n+     * @return ObjectNode of elemental json object or null for null jsonObject\n      */\n     public static ObjectNode mapElemental(JsonObject jsonObject) {\n+        if (jsonObject == null) {\n+            return null;\n+        }\n         try {\n             return (ObjectNode) objectMapper.readTree(jsonObject.toJson());\n         } catch (JsonProcessingException e) {\n\ndiff --git a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DebugWindowConnection.java b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DebugWindowConnection.java\nindex efc09b4fe3e..83e47d9a170 100644\n--- a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DebugWindowConnection.java\n+++ b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DebugWindowConnection.java\n@@ -28,15 +28,17 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.stream.Collectors;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.atmosphere.cpr.AtmosphereResource;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.vaadin.base.devserver.stats.DevModeUsageStatistics;\n import com.vaadin.experimental.FeatureFlags;\n-import com.vaadin.flow.component.UI;\n import com.vaadin.flow.internal.BrowserLiveReload;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.DevToolsToken;\n import com.vaadin.flow.server.VaadinContext;\n import com.vaadin.flow.server.communication.AtmospherePushConnection.FragmentedMessage;\n@@ -44,7 +46,6 @@\n import com.vaadin.pro.licensechecker.LicenseChecker;\n import com.vaadin.pro.licensechecker.Product;\n \n-import elemental.json.Json;\n import elemental.json.JsonObject;\n \n /**\n@@ -146,14 +147,14 @@ private DevToolsInterfaceImpl(\n         }\n \n         @Override\n-        public void send(String command, JsonObject data) {\n-            JsonObject msg = Json.createObject();\n+        public void send(String command, JsonNode data) {\n+            ObjectNode msg = JacksonUtils.createObjectNode();\n             msg.put(\"command\", command);\n             if (data != null) {\n-                msg.put(\"data\", data);\n+                msg.set(\"data\", data);\n             }\n \n-            debugWindowConnection.send(resource, msg.toJson());\n+            debugWindowConnection.send(resource, msg.toString());\n         }\n \n         @Override\n@@ -255,12 +256,24 @@ public boolean isLiveReload(AtmosphereResource resource) {\n      *\n      * @param msg\n      *            the message to broadcast\n+     * @deprecated Use {@link #broadcast(ObjectNode)} instead.\n      */\n+    @Deprecated\n     public void broadcast(JsonObject msg) {\n+        this.broadcast(JacksonUtils.readTree(msg.toJson()));\n+    }\n+\n+    /**\n+     * Broadcasts the given message to all connected clients.\n+     *\n+     * @param msg\n+     *            the message to broadcast\n+     */\n+    public void broadcast(ObjectNode msg) {\n         resources.keySet().forEach(resourceRef -> {\n             AtmosphereResource resource = resourceRef.get();\n             if (resource != null) {\n-                resource.getBroadcaster().broadcast(msg.toJson(), resource);\n+                resource.getBroadcaster().broadcast(msg.toString(), resource);\n             }\n         });\n \n@@ -268,14 +281,14 @@ public void broadcast(JsonObject msg) {\n \n     @Override\n     public void reload() {\n-        JsonObject msg = Json.createObject();\n+        ObjectNode msg = JacksonUtils.createObjectNode();\n         msg.put(\"command\", \"reload\");\n         broadcast(msg);\n     }\n \n     @Override\n     public void refresh(boolean refreshLayouts) {\n-        JsonObject msg = Json.createObject();\n+        ObjectNode msg = JacksonUtils.createObjectNode();\n         msg.put(\"command\", \"reload\");\n         msg.put(\"strategy\", refreshLayouts ? \"full-refresh\" : \"refresh\");\n         broadcast(msg);\n@@ -283,7 +296,7 @@ public void refresh(boolean refreshLayouts) {\n \n     @Override\n     public void update(String path, String content) {\n-        JsonObject msg = Json.createObject();\n+        ObjectNode msg = JacksonUtils.createObjectNode();\n         msg.put(\"command\", \"update\");\n         msg.put(\"path\", path);\n         msg.put(\"content\", content);\n@@ -297,17 +310,18 @@ public void onMessage(AtmosphereResource resource, String message) {\n             getLogger().debug(\"Received live reload heartbeat\");\n             return;\n         }\n-        JsonObject json = Json.parse(message);\n-        String command = json.getString(\"command\");\n-        JsonObject data = json.getObject(\"data\");\n+        JsonNode json = JacksonUtils.readTree(message);\n+        String command = json.get(\"command\").textValue();\n+        JsonNode data = json.get(\"data\");\n         if (\"setFeature\".equals(command)) {\n-            FeatureFlags.get(context).setEnabled(data.getString(\"featureId\"),\n-                    data.getBoolean(\"enabled\"));\n+            FeatureFlags.get(context).setEnabled(\n+                    data.get(\"featureId\").textValue(),\n+                    data.get(\"enabled\").booleanValue());\n         } else if (\"reportTelemetry\".equals(command)) {\n             DevModeUsageStatistics.handleBrowserData(data);\n         } else if (\"checkLicense\".equals(command)) {\n-            String name = data.getString(\"name\");\n-            String version = data.getString(\"version\");\n+            String name = data.get(\"name\").textValue();\n+            String version = data.get(\"version\").textValue();\n             Product product = new Product(name, version);\n             boolean ok;\n             String errorMessage = \"\";\n@@ -382,13 +396,13 @@ public void clearFragmentedMessage(AtmosphereResource resource) {\n     }\n \n     @Override\n-    public void sendHmrEvent(String event, JsonObject eventData) {\n-        JsonObject msg = Json.createObject();\n+    public void sendHmrEvent(String event, JsonNode eventData) {\n+        ObjectNode msg = JacksonUtils.createObjectNode();\n         msg.put(\"command\", \"hmr\");\n-        JsonObject data = Json.createObject();\n-        msg.put(\"data\", data);\n+        ObjectNode data = JacksonUtils.createObjectNode();\n+        msg.set(\"data\", data);\n         data.put(\"event\", event);\n-        data.put(\"eventData\", eventData);\n+        data.set(\"eventData\", eventData);\n         broadcast(msg);\n     }\n \n\ndiff --git a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DevToolsInterface.java b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DevToolsInterface.java\nindex 351d7821a88..1c81181564d 100644\n--- a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DevToolsInterface.java\n+++ b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DevToolsInterface.java\n@@ -15,6 +15,10 @@\n  */\n package com.vaadin.base.devserver;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import com.vaadin.flow.internal.JacksonUtils;\n+\n import elemental.json.JsonObject;\n \n /**\n@@ -30,5 +34,18 @@ public interface DevToolsInterface {\n      * @param data\n      *            data, specific to the command\n      */\n-    void send(String command, JsonObject data);\n+    @Deprecated\n+    default void send(String command, JsonObject data) {\n+        send(command, JacksonUtils.mapElemental(data));\n+    }\n+\n+    /**\n+     * Sends the given message to the client side.\n+     *\n+     * @param command\n+     *            the command to send\n+     * @param data\n+     *            data, specific to the command\n+     */\n+    void send(String command, JsonNode data);\n }\n\ndiff --git a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DevToolsMessageHandler.java b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DevToolsMessageHandler.java\nindex e4926134636..a497497b8e1 100644\n--- a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DevToolsMessageHandler.java\n+++ b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DevToolsMessageHandler.java\n@@ -15,7 +15,13 @@\n  */\n package com.vaadin.base.devserver;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import com.vaadin.flow.internal.JacksonUtils;\n+\n+import elemental.json.Json;\n import elemental.json.JsonObject;\n+import elemental.json.JsonValue;\n \n /**\n  * Handles dev tools messages from the client.\n@@ -47,9 +53,29 @@ public interface DevToolsMessageHandler {\n      * @return {@code true} if the message was handled and should not be passed\n      *         on to further handlers\n      */\n+    @Deprecated\n     boolean handleMessage(String command, JsonObject data,\n             DevToolsInterface devToolsInterface);\n \n+    /**\n+     * Called when a message from the browser arrives.\n+     *\n+     * @param command\n+     *            the command received\n+     * @param data\n+     *            the data received\n+     * @param devToolsInterface\n+     *            for interaction with the development tools, e.g. sending a\n+     *            message\n+     * @return {@code true} if the message was handled and should not be passed\n+     *         on to further handlers\n+     */\n+    default boolean handleMessage(String command, JsonNode data,\n+            DevToolsInterface devToolsInterface) {\n+        return this.handleMessage(command, Json.parse(data.toString()),\n+                devToolsInterface);\n+    }\n+\n     /**\n      * Called when the browser connection disconnects.\n      *\n\ndiff --git a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/stats/DevModeUsageStatistics.java b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/stats/DevModeUsageStatistics.java\nindex c53200a4934..f93e6cd8c27 100644\n--- a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/stats/DevModeUsageStatistics.java\n+++ b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/stats/DevModeUsageStatistics.java\n@@ -26,8 +26,6 @@\n import com.vaadin.flow.server.Version;\n import com.vaadin.pro.licensechecker.MachineId;\n \n-import elemental.json.JsonObject;\n-\n /**\n  * Singleton for collecting development time usage metrics\n  * <p>\n@@ -142,7 +140,7 @@ private void trackGlobalData() {\n      * @param data\n      *            the data from the browser\n      */\n-    public static void handleBrowserData(JsonObject data) {\n+    public static void handleBrowserData(JsonNode data) {\n         getLogger().debug(\"Received client usage statistics from the browser\");\n \n         if (!isStatisticsEnabled()) {\n@@ -151,7 +149,7 @@ public static void handleBrowserData(JsonObject data) {\n \n         get().storage.update((global, project) -> {\n             try {\n-                String json = data.get(\"browserData\").toJson();\n+                String json = data.get(\"browserData\").toString();\n                 JsonNode clientData = JsonHelpers.getJsonMapper()\n                         .readTree(json);\n                 if (clientData != null && clientData.isObject()) {\n",
    "test_patch": "diff --git a/flow-tests/test-dev-mode/src/main/java/com/vaadin/flow/uitest/ui/DevToolsPlugin.java b/flow-tests/test-dev-mode/src/main/java/com/vaadin/flow/uitest/ui/DevToolsPlugin.java\nindex 188ccd20448..96b267af664 100644\n--- a/flow-tests/test-dev-mode/src/main/java/com/vaadin/flow/uitest/ui/DevToolsPlugin.java\n+++ b/flow-tests/test-dev-mode/src/main/java/com/vaadin/flow/uitest/ui/DevToolsPlugin.java\n@@ -1,12 +1,15 @@\n package com.vaadin.flow.uitest.ui;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n import com.vaadin.base.devserver.DevToolsInterface;\n import com.vaadin.base.devserver.DevToolsMessageHandler;\n import com.vaadin.flow.component.UI;\n import com.vaadin.flow.component.dependency.JsModule;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.VaadinSession;\n \n-import elemental.json.Json;\n import elemental.json.JsonObject;\n \n @JsModule(value = \"./devtools-plugin.ts\", developmentOnly = true)\n@@ -14,22 +17,29 @@ public class DevToolsPlugin implements DevToolsMessageHandler {\n \n     @Override\n     public void handleConnect(DevToolsInterface devToolsInterface) {\n-        devToolsInterface.send(\"plugin-init\", null);\n+        devToolsInterface.send(\"plugin-init\", (JsonNode) null);\n     }\n \n     @Override\n     public boolean handleMessage(String command, JsonObject data,\n             DevToolsInterface devToolsInterface) {\n+        return handleMessage(command, JacksonUtils.mapElemental(data),\n+                devToolsInterface);\n+    }\n+\n+    @Override\n+    public boolean handleMessage(String command, JsonNode data,\n+            DevToolsInterface devToolsInterface) {\n         if (command.equals(\"plugin-query\")) {\n-            String text = data.getString(\"text\");\n+            String text = data.get(\"text\").textValue();\n \n-            JsonObject responseData = Json.createObject();\n+            ObjectNode responseData = JacksonUtils.createObjectNode();\n             responseData.put(\"text\", \"Response for \" + text);\n             devToolsInterface.send(\"plugin-response\", responseData);\n \n             VaadinSession session = VaadinSession.getCurrent();\n             session.access(() -> {\n-                UI ui = session.getUIById((int) data.getNumber(\"uiId\"));\n+                UI ui = session.getUIById(data.get(\"uiId\").intValue());\n                 ui.getPage().executeJs(\"\"\"\n                         const div = document.createElement('div');\n                         div.innerText = $0;\n\ndiff --git a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/DebugWindowConnectionTest.java b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/DebugWindowConnectionTest.java\nindex 87d731ca76c..b358611edda 100644\n--- a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/DebugWindowConnectionTest.java\n+++ b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/DebugWindowConnectionTest.java\n@@ -19,6 +19,7 @@\n import java.util.HashMap;\n import java.util.Map;\n \n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.atmosphere.cpr.AtmosphereRequest;\n import org.atmosphere.cpr.AtmosphereResource;\n import org.atmosphere.cpr.Broadcaster;\n@@ -28,14 +29,12 @@\n \n import com.vaadin.flow.di.Lookup;\n import com.vaadin.flow.internal.BrowserLiveReload;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.DevToolsToken;\n import com.vaadin.flow.server.VaadinContext;\n import com.vaadin.flow.server.VaadinService;\n import com.vaadin.flow.server.startup.ApplicationConfiguration;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-\n import static org.mockito.Mockito.times;\n \n public class DebugWindowConnectionTest {\n@@ -135,9 +134,9 @@ public void reload_twoConnections_sendReloadCommand() {\n \n         reload.reload();\n \n-        JsonObject reloadCommand = Json.createObject();\n+        ObjectNode reloadCommand = JacksonUtils.createObjectNode();\n         reloadCommand.put(\"command\", \"reload\");\n-        String reloadJson = reloadCommand.toJson();\n+        String reloadJson = reloadCommand.toString();\n         Mockito.verify(broadcaster).broadcast(reloadJson, resource1);\n         Mockito.verify(broadcaster).broadcast(reloadJson, resource2);\n     }\n\ndiff --git a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerTestBase.java b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerTestBase.java\nindex 758784a16a4..a3ec7fcc869 100644\n--- a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerTestBase.java\n+++ b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerTestBase.java\n@@ -1,5 +1,6 @@\n package com.vaadin.base.devserver.startup;\n \n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import jakarta.servlet.ServletContextEvent;\n import jakarta.servlet.ServletRegistration;\n import java.io.File;\n@@ -20,13 +21,12 @@\n import org.junit.rules.TemporaryFolder;\n import org.mockito.Mockito;\n \n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.VaadinServlet;\n import com.vaadin.flow.server.frontend.EndpointGeneratorTaskFactory;\n import com.vaadin.flow.server.frontend.TaskGenerateEndpoint;\n import com.vaadin.flow.server.frontend.TaskGenerateOpenAPI;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n import static com.vaadin.flow.server.Constants.CONNECT_JAVA_SOURCE_FOLDER_TOKEN;\n import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_PRODUCTION_MODE;\n@@ -112,7 +112,7 @@ public void setup() throws Exception {\n         // Not this needs to update according to dependencies in\n         // NodeUpdater.getDefaultDependencies and\n         // NodeUpdater.getDefaultDevDependencies\n-        FileUtils.write(mainPackageFile, getInitalPackageJson().toJson(),\n+        FileUtils.write(mainPackageFile, getInitalPackageJson().toString(),\n                 \"UTF-8\");\n         devServerConfigFile.createNewFile();\n         FileUtils.forceMkdir(new File(baseDir, \"src/main/java\"));\n@@ -125,16 +125,16 @@ protected File createStubDevServer(String baseDir) throws IOException {\n         return new File(baseDir, VITE_CONFIG);\n     }\n \n-    private JsonObject getInitalPackageJson() {\n-        JsonObject packageJson = Json.createObject();\n-        JsonObject vaadinPackages = Json.createObject();\n+    private ObjectNode getInitalPackageJson() {\n+        ObjectNode packageJson = JacksonUtils.createObjectNode();\n+        ObjectNode vaadinPackages = JacksonUtils.createObjectNode();\n \n-        vaadinPackages.put(\"dependencies\", Json.createObject());\n-        JsonObject defaults = vaadinPackages.getObject(\"dependencies\");\n+        vaadinPackages.put(\"dependencies\", JacksonUtils.createObjectNode());\n+        ObjectNode defaults = (ObjectNode) vaadinPackages.get(\"dependencies\");\n         defaults.put(\"@polymer/polymer\", \"3.2.0\");\n \n-        vaadinPackages.put(\"devDependencies\", Json.createObject());\n-        defaults = vaadinPackages.getObject(\"devDependencies\");\n+        vaadinPackages.put(\"devDependencies\", JacksonUtils.createObjectNode());\n+        defaults = (ObjectNode) vaadinPackages.get(\"devDependencies\");\n         defaults.put(\"webpack\", \"4.30.0\");\n         defaults.put(\"webpack-cli\", \"3.3.0\");\n         defaults.put(\"webpack-dev-server\", \"3.3.0\");\n\ndiff --git a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/stats/DevModeUsageStatisticsTest.java b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/stats/DevModeUsageStatisticsTest.java\nindex d2cec0708bc..7eae170db66 100644\n--- a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/stats/DevModeUsageStatisticsTest.java\n+++ b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/stats/DevModeUsageStatisticsTest.java\n@@ -19,7 +19,10 @@\n import java.io.File;\n import java.nio.charset.StandardCharsets;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.testutil.TestUtils;\n \n import com.vaadin.pro.licensechecker.MachineId;\n@@ -27,8 +30,6 @@\n import org.junit.Assert;\n import org.junit.Test;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n import net.jcip.annotations.NotThreadSafe;\n \n @NotThreadSafe\n@@ -284,8 +285,8 @@ public void machineId() throws Exception {\n                 project.get(StatisticsConstants.FIELD_MACHINE_ID).asText());\n     }\n \n-    private static JsonObject wrapStats(String data) {\n-        JsonObject wrapped = Json.createObject();\n+    private static JsonNode wrapStats(String data) {\n+        ObjectNode wrapped = JacksonUtils.createObjectNode();\n         wrapped.put(\"browserData\", data);\n         return wrapped;\n     }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21053",
    "pr_id": 21053,
    "issue_id": 20741,
    "repo": "vaadin/flow",
    "problem_statement": "Use Jackson for public API and implementation instead of Elemental JSON\n### Describe your motivation\n\nJackson library (`com.fasterxml.jackson`) is more popular than Elemental JSON (`elemental.json`), thus Vaadin should better use it in public API.\n\n### Describe the solution you'd like\n\n0. Analyse and list the usage of Elemental in Flow: how many publicly using cases do we have and how many are used internally. I expect the main usage in `Element` class, but there may be more, e.g. in util classes.\n1. Add an adapter code that converts Jackson to/from Elemental, if it's problematic to replace it in implementation right away, else go to step 2.\n2. Change Flow internal implementation to use Jackson\n3. Add same public methods found in (0), but that use Jackson for arguments and return values\n4. Deprecate existing public method with Elemental\n5. Remove Elemental variants in next major version.\n",
    "issue_word_count": 151,
    "test_files_count": 1,
    "non_test_files_count": 7,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java",
      "flow-server/src/main/java/com/vaadin/flow/server/BootstrapHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/InlineTargets.java",
      "flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/JavaScriptBootstrapHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandlerViteTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandlerViteTest.java"
    ],
    "base_commit": "6f5db3ba830d4ab30ce6b73095a355032feda575",
    "head_commit": "c01f017b701d84787a4ae1c8fc56fed5259cd8f2",
    "repo_url": "https://github.com/vaadin/flow/pull/21053",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21053",
    "dockerfile": "",
    "pr_merged_at": "2025-03-03T12:21:41.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java b/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\nindex b52e138bf7b..340776ba7ed 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\n@@ -40,11 +40,19 @@\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.BaseJsonNode;\n import com.fasterxml.jackson.databind.node.DoubleNode;\n import com.fasterxml.jackson.databind.node.JsonNodeType;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.ValueNode;\n import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\n \n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonNull;\n+import elemental.json.JsonObject;\n+import elemental.json.JsonValue;\n+\n /**\n  * Helpers for using <code>jackson</code>.\n  * <p>\n@@ -87,6 +95,83 @@ public static ArrayNode createArrayNode() {\n         return objectMapper.createArrayNode();\n     }\n \n+    /**\n+     * Create a nullNode for null value.\n+     *\n+     * @return NullNode\n+     */\n+    public static ValueNode nullNode() {\n+        return (ValueNode) objectMapper.nullNode();\n+    }\n+\n+    /**\n+     * Map JsonObject to ObjectNode.\n+     *\n+     * @param jsonObject\n+     *            JsonObject to change\n+     * @return ObjectNode of elemental json object\n+     */\n+    public static ObjectNode mapElemental(JsonObject jsonObject) {\n+        try {\n+            return (ObjectNode) objectMapper.readTree(jsonObject.toJson());\n+        } catch (JsonProcessingException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    /**\n+     * Map JsonValue to ObjectNode.\n+     *\n+     * @param jsonValue\n+     *            JsonValue to change\n+     * @return ObjectNode of elemental json value\n+     */\n+    public static BaseJsonNode mapElemental(JsonValue jsonValue) {\n+        if (jsonValue == null || jsonValue instanceof JsonNull) {\n+            return nullNode();\n+        }\n+        return objectMapper.valueToTree(jsonValue.asString());\n+    }\n+\n+    /**\n+     * Convert the contents of an ArrayNode into a JsonArray. This is mostly\n+     * needed for arrays that may contain arrays and values.\n+     *\n+     * @param jsonNodes\n+     *            ArrayNode to convert\n+     * @return JsonArray of ArrayNode content\n+     */\n+    public static JsonArray createElementalArray(ArrayNode jsonNodes) {\n+        return (JsonArray) parseNode(jsonNodes);\n+    }\n+\n+    private static JsonValue parseNode(JsonNode node) {\n+        if (node instanceof ArrayNode) {\n+            JsonArray jsonArray = Json.createArray();\n+            node.forEach(arrayNode -> parseArrayNode(arrayNode, jsonArray));\n+            return jsonArray;\n+        }\n+        return Json.parse(node.toString());\n+    }\n+\n+    private static void parseArrayNode(JsonNode node, JsonArray jsonArray) {\n+        if (JsonNodeType.NUMBER.equals(node.getNodeType())) {\n+            jsonArray.set(jsonArray.length(), Json.create(node.doubleValue()));\n+        } else if (JsonNodeType.STRING.equals(node.getNodeType())) {\n+            jsonArray.set(jsonArray.length(), Json.create(node.textValue()));\n+        } else if (JsonNodeType.ARRAY.equals(node.getNodeType())) {\n+            JsonArray array = Json.createArray();\n+            node.forEach(arrayNode -> parseArrayNode(arrayNode, array));\n+            jsonArray.set(jsonArray.length(), array);\n+        } else if (JsonNodeType.BOOLEAN.equals(node.getNodeType())) {\n+            jsonArray.set(jsonArray.length(), Json.create(node.booleanValue()));\n+        } else if (JsonNodeType.NULL.equals(node.getNodeType())) {\n+            jsonArray.set(jsonArray.length(), Json.createNull());\n+        } else {\n+            jsonArray.set(jsonArray.length(), Json.parse(node.toString()));\n+        }\n+    }\n+\n     /**\n      * Read Json string to JsonNode.\n      *\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/BootstrapHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/BootstrapHandler.java\nindex 9d905612e5b..f97d9f0fd59 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/BootstrapHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/BootstrapHandler.java\n@@ -27,7 +27,6 @@\n import java.lang.annotation.Annotation;\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.EnumMap;\n@@ -49,6 +48,8 @@\n import java.util.stream.Stream;\n \n import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.jsoup.Jsoup;\n import org.jsoup.nodes.DataNode;\n import org.jsoup.nodes.Document;\n@@ -69,6 +70,7 @@\n import com.vaadin.flow.function.DeploymentConfiguration;\n import com.vaadin.flow.internal.AnnotationReader;\n import com.vaadin.flow.internal.BootstrapHandlerHelper;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.ReflectTools;\n import com.vaadin.flow.internal.UsageStatisticsExporter;\n import com.vaadin.flow.router.InvalidLocationException;\n@@ -90,12 +92,6 @@\n import com.vaadin.flow.shared.ui.Dependency;\n import com.vaadin.flow.shared.ui.LoadMode;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n-import elemental.json.JsonValue;\n-import elemental.json.impl.JsonUtil;\n-\n import static com.vaadin.flow.server.Constants.VAADIN_MAPPING;\n import static com.vaadin.flow.server.frontend.FrontendUtils.EXPORT_CHUNK;\n import static java.nio.charset.StandardCharsets.UTF_8;\n@@ -220,7 +216,7 @@ protected static class BootstrapContext {\n \n         private String appId;\n         private PushMode pushMode;\n-        private JsonObject applicationParameters;\n+        private ObjectNode applicationParameters;\n         private BootstrapUriResolver uriResolver;\n \n         private boolean initTheme = true;\n@@ -388,7 +384,7 @@ public String getAppId() {\n          *\n          * @return the application parameters that will be written on the page\n          */\n-        public JsonObject getApplicationParameters() {\n+        public ObjectNode getApplicationParameters() {\n             if (applicationParameters == null) {\n                 applicationParameters = parameterBuilder\n                         .getApplicationParameters(this);\n@@ -761,15 +757,15 @@ public Document getBootstrapPage(BootstrapContext context) {\n         }\n \n         private Element createDependencyElement(BootstrapContext context,\n-                JsonObject dependencyJson) {\n-            String type = dependencyJson.getString(Dependency.KEY_TYPE);\n+                ObjectNode dependencyJson) {\n+            String type = dependencyJson.get(Dependency.KEY_TYPE).textValue();\n             if (Dependency.Type.contains(type)) {\n                 Dependency.Type dependencyType = Dependency.Type.valueOf(type);\n                 return createDependencyElement(context.getUriResolver(),\n                         LoadMode.INLINE, dependencyJson, dependencyType);\n             }\n             return Jsoup.parse(\n-                    dependencyJson.getString(Dependency.KEY_CONTENTS), \"\",\n+                    dependencyJson.get(Dependency.KEY_CONTENTS).textValue(), \"\",\n                     Parser.xmlParser());\n         }\n \n@@ -810,8 +806,8 @@ private List<Element> setupDocumentHead(Element head,\n             setupMetaAndTitle(head, context);\n             setupCss(head, context);\n \n-            JsonObject initialUIDL = getInitialUidl(context.getUI());\n-            Map<LoadMode, JsonArray> dependenciesToProcessOnServer = popDependenciesToProcessOnServer(\n+            ObjectNode initialUIDL = getInitialUidl(context.getUI());\n+            Map<LoadMode, ArrayNode> dependenciesToProcessOnServer = popDependenciesToProcessOnServer(\n                     initialUIDL);\n             setupFrameworkLibraries(head, initialUIDL, context);\n             return applyUserDependencies(head, context,\n@@ -826,8 +822,9 @@ private List<Element> setupDocumentHead(Element head,\n          *            the UI for which the UIDL should be generated\n          * @return a JSON object with the initial UIDL message\n          */\n-        private JsonObject getInitialUidl(UI ui) {\n-            JsonObject json = new UidlWriter().createUidl(ui, false);\n+        private ObjectNode getInitialUidl(UI ui) {\n+            ObjectNode json = JacksonUtils\n+                    .mapElemental(new UidlWriter().createUidl(ui, false));\n \n             VaadinSession session = ui.getSession();\n             if (session.getConfiguration().isXsrfProtectionEnabled()) {\n@@ -835,7 +832,7 @@ private JsonObject getInitialUidl(UI ui) {\n             }\n             writePushIdUIDL(json, session);\n             if (getLogger().isDebugEnabled()) {\n-                getLogger().debug(\"Initial UIDL: {}\", json.asString());\n+                getLogger().debug(\"Initial UIDL: {}\", json.toPrettyString());\n             }\n             return json;\n         }\n@@ -849,7 +846,7 @@ private JsonObject getInitialUidl(UI ui) {\n          * @param session\n          *            the vaadin session to which the security key belongs\n          */\n-        private void writePushIdUIDL(JsonObject response,\n+        private void writePushIdUIDL(ObjectNode response,\n                 VaadinSession session) {\n             String pushId = session.getPushId();\n             response.put(ApplicationConstants.UIDL_PUSH_ID, pushId);\n@@ -864,16 +861,16 @@ private void writePushIdUIDL(JsonObject response,\n          * @param ui\n          *            the UI to which the security key belongs\n          */\n-        private void writeSecurityKeyUIDL(JsonObject response, UI ui) {\n+        private void writeSecurityKeyUIDL(ObjectNode response, UI ui) {\n             String seckey = ui.getCsrfToken();\n             response.put(ApplicationConstants.UIDL_SECURITY_TOKEN_ID, seckey);\n         }\n \n         private List<Element> applyUserDependencies(Element head,\n                 BootstrapContext context,\n-                Map<LoadMode, JsonArray> dependenciesToProcessOnServer) {\n+                Map<LoadMode, ArrayNode> dependenciesToProcessOnServer) {\n             List<Element> dependenciesToInlineInBody = new ArrayList<>();\n-            for (Map.Entry<LoadMode, JsonArray> entry : dependenciesToProcessOnServer\n+            for (Map.Entry<LoadMode, ArrayNode> entry : dependenciesToProcessOnServer\n                     .entrySet()) {\n                 dependenciesToInlineInBody.addAll(\n                         inlineDependenciesInHead(head, context.getUriResolver(),\n@@ -884,13 +881,13 @@ private List<Element> applyUserDependencies(Element head,\n \n         private List<Element> inlineDependenciesInHead(Element head,\n                 BootstrapUriResolver uriResolver, LoadMode loadMode,\n-                JsonArray dependencies) {\n+                ArrayNode dependencies) {\n             List<Element> dependenciesToInlineInBody = new ArrayList<>();\n \n-            for (int i = 0; i < dependencies.length(); i++) {\n-                JsonObject dependencyJson = dependencies.getObject(i);\n-                Dependency.Type dependencyType = Dependency.Type\n-                        .valueOf(dependencyJson.getString(Dependency.KEY_TYPE));\n+            for (int i = 0; i < dependencies.size(); i++) {\n+                ObjectNode dependencyJson = (ObjectNode) dependencies.get(i);\n+                Dependency.Type dependencyType = Dependency.Type.valueOf(\n+                        dependencyJson.get(Dependency.KEY_TYPE).textValue());\n                 Element dependencyElement = createDependencyElement(uriResolver,\n                         loadMode, dependencyJson, dependencyType);\n \n@@ -899,12 +896,12 @@ private List<Element> inlineDependenciesInHead(Element head,\n             return dependenciesToInlineInBody;\n         }\n \n-        private Map<LoadMode, JsonArray> popDependenciesToProcessOnServer(\n-                JsonObject initialUIDL) {\n-            Map<LoadMode, JsonArray> result = new EnumMap<>(LoadMode.class);\n+        private Map<LoadMode, ArrayNode> popDependenciesToProcessOnServer(\n+                ObjectNode initialUIDL) {\n+            Map<LoadMode, ArrayNode> result = new EnumMap<>(LoadMode.class);\n             Stream.of(LoadMode.EAGER, LoadMode.INLINE).forEach(mode -> {\n-                if (initialUIDL.hasKey(mode.name())) {\n-                    result.put(mode, initialUIDL.getArray(mode.name()));\n+                if (initialUIDL.has(mode.name())) {\n+                    result.put(mode, (ArrayNode) initialUIDL.get(mode.name()));\n                     initialUIDL.remove(mode.name());\n                 }\n             });\n@@ -912,7 +909,7 @@ private Map<LoadMode, JsonArray> popDependenciesToProcessOnServer(\n         }\n \n         private void setupFrameworkLibraries(Element head,\n-                JsonObject initialUIDL, BootstrapContext context) {\n+                ObjectNode initialUIDL, BootstrapContext context) {\n \n             VaadinService service = context.getSession().getService();\n             DeploymentConfiguration conf = service.getDeploymentConfiguration();\n@@ -984,10 +981,10 @@ private void appendViteNpmBundle(Element head, VaadinService service,\n          *            in the stat file\n          * @return\n          */\n-        protected List<String> getChunkKeys(JsonObject chunks) {\n+        protected List<String> getChunkKeys(ObjectNode chunks) {\n             // include all chunks but the one used for exported\n             // components.\n-            return Arrays.stream(chunks.keys())\n+            return JacksonUtils.getKeys(chunks).stream()\n                     .filter(s -> !EXPORT_CHUNK.equals(s))\n                     .collect(Collectors.toList());\n         }\n@@ -1131,12 +1128,12 @@ protected static Element createJavaScriptElement(String sourceUrl) {\n         }\n \n         private Element createDependencyElement(BootstrapUriResolver resolver,\n-                LoadMode loadMode, JsonObject dependency,\n+                LoadMode loadMode, ObjectNode dependency,\n                 Dependency.Type type) {\n             boolean inlineElement = loadMode == LoadMode.INLINE;\n-            String url = dependency.hasKey(Dependency.KEY_URL)\n+            String url = dependency.has(Dependency.KEY_URL)\n                     ? resolver.resolveVaadinUri(\n-                            dependency.getString(Dependency.KEY_URL))\n+                            dependency.get(Dependency.KEY_URL).textValue())\n                     : null;\n \n             final Element dependencyElement;\n@@ -1158,7 +1155,7 @@ private Element createDependencyElement(BootstrapUriResolver resolver,\n \n             if (inlineElement) {\n                 dependencyElement.appendChild(new DataNode(\n-                        dependency.getString(Dependency.KEY_CONTENTS)));\n+                        dependency.get(Dependency.KEY_CONTENTS).textValue()));\n             }\n \n             return dependencyElement;\n@@ -1183,7 +1180,7 @@ private void setupDocumentBody(Document document) {\n                     \"You have to enable javascript in your browser to use this web site.\");\n         }\n \n-        protected Element getBootstrapScript(JsonValue initialUIDL,\n+        protected Element getBootstrapScript(ObjectNode initialUIDL,\n                 BootstrapContext context) {\n             return createInlineJavaScriptElement(\"//<![CDATA[\\n\"\n                     + getBootstrapJS(initialUIDL, context) + \"//]]>\");\n@@ -1197,20 +1194,23 @@ private String getBootstrapJS() {\n             return BOOTSTRAP_JS;\n         }\n \n-        private String getBootstrapJS(JsonValue initialUIDL,\n+        private String getBootstrapJS(ObjectNode initialUIDL,\n                 BootstrapContext context) {\n             boolean productionMode = context.getSession().getConfiguration()\n                     .isProductionMode();\n             String result = getBootstrapJS();\n-            JsonObject appConfig = context.getApplicationParameters();\n+            ObjectNode appConfig = context.getApplicationParameters();\n+\n+            String appConfigString;\n \n-            int indent = 0;\n+            String initialUIDLString;\n             if (!productionMode) {\n-                indent = 4;\n+                appConfigString = appConfig.toPrettyString();\n+                initialUIDLString = initialUIDL.toPrettyString();\n+            } else {\n+                appConfigString = appConfig.toString();\n+                initialUIDLString = initialUIDL.toString();\n             }\n-            String appConfigString = JsonUtil.stringify(appConfig, indent);\n-\n-            String initialUIDLString = JsonUtil.stringify(initialUIDL, indent);\n \n             /*\n              * The < symbol is escaped to prevent two problems:\n@@ -1259,9 +1259,9 @@ private ApplicationParameterBuilder(\n          *\n          * @param context\n          *            Non-null context to provide application parameters for.\n-         * @return A non-null {@link JsonObject} with application parameters.\n+         * @return A non-null {@link ObjectNode} with application parameters.\n          */\n-        public JsonObject getApplicationParameters(BootstrapContext context) {\n+        public ObjectNode getApplicationParameters(BootstrapContext context) {\n             VaadinRequest request = context.getRequest();\n             VaadinSession session = context.getSession();\n             DeploymentConfiguration deploymentConfiguration = session\n@@ -1269,10 +1269,10 @@ public JsonObject getApplicationParameters(BootstrapContext context) {\n             final boolean productionMode = deploymentConfiguration\n                     .isProductionMode();\n \n-            JsonObject appConfig = Json.createObject();\n+            ObjectNode appConfig = JacksonUtils.createObjectNode();\n \n             if (!productionMode) {\n-                JsonObject versionInfo = Json.createObject();\n+                ObjectNode versionInfo = JacksonUtils.createObjectNode();\n                 versionInfo.put(\"vaadinVersion\", Version.getFullVersion());\n                 String atmosphereVersion = AtmospherePushConnection\n                         .getAtmosphereVersion();\n@@ -1290,7 +1290,7 @@ public JsonObject getApplicationParameters(BootstrapContext context) {\n             SystemMessages systemMessages = session.getService()\n                     .getSystemMessages(locale, request);\n             if (systemMessages != null) {\n-                JsonObject sessExpMsg = Json.createObject();\n+                ObjectNode sessExpMsg = JacksonUtils.createObjectNode();\n                 putValueOrNull(sessExpMsg, CAPTION,\n                         systemMessages.getSessionExpiredCaption());\n                 putValueOrNull(sessExpMsg, MESSAGE,\n@@ -1329,12 +1329,12 @@ public JsonObject getApplicationParameters(BootstrapContext context) {\n             return appConfig;\n         }\n \n-        private void putValueOrNull(JsonObject object, String key,\n+        private void putValueOrNull(ObjectNode object, String key,\n                 String value) {\n             assert object != null;\n             assert key != null;\n             if (value == null) {\n-                object.put(key, Json.createNull());\n+                object.set(key, JacksonUtils.nullNode());\n             } else {\n                 object.put(key, value);\n             }\n@@ -1499,8 +1499,9 @@ protected static String readResource(String fileName) {\n      *            the UI for which the UIDL should be generated\n      * @return a JSON object with the initial UIDL message\n      */\n-    protected static JsonObject getInitialUidl(UI ui) {\n-        JsonObject json = new UidlWriter().createUidl(ui, false);\n+    protected static ObjectNode getInitialUidl(UI ui) {\n+        ObjectNode json = JacksonUtils\n+                .mapElemental(new UidlWriter().createUidl(ui, false));\n \n         VaadinSession session = ui.getSession();\n         if (session.getConfiguration().isXsrfProtectionEnabled()) {\n@@ -1508,7 +1509,7 @@ protected static JsonObject getInitialUidl(UI ui) {\n         }\n         writePushIdUIDL(json, session);\n         if (getLogger().isDebugEnabled()) {\n-            getLogger().debug(\"Initial UIDL: {}\", json.asString());\n+            getLogger().debug(\"Initial UIDL: {}\", json);\n         }\n         return json;\n     }\n@@ -1522,7 +1523,7 @@ protected static JsonObject getInitialUidl(UI ui) {\n      * @param session\n      *            the vaadin session to which the security key belongs\n      */\n-    private static void writePushIdUIDL(JsonObject response,\n+    private static void writePushIdUIDL(ObjectNode response,\n             VaadinSession session) {\n         String pushId = session.getPushId();\n         response.put(ApplicationConstants.UIDL_PUSH_ID, pushId);\n@@ -1537,7 +1538,7 @@ private static void writePushIdUIDL(JsonObject response,\n      * @param ui\n      *            the UI to which the security key belongs\n      */\n-    private static void writeSecurityKeyUIDL(JsonObject response, UI ui) {\n+    private static void writeSecurityKeyUIDL(ObjectNode response, UI ui) {\n         String seckey = ui.getCsrfToken();\n         response.put(ApplicationConstants.UIDL_SECURITY_TOKEN_ID, seckey);\n     }\n@@ -1595,14 +1596,14 @@ protected static void setupPwa(Document document, VaadinService service) {\n         setupPwa(document, service.getPwaRegistry());\n     }\n \n-    protected static JsonObject getStatsJson(DeploymentConfiguration config)\n+    protected static ObjectNode getStatsJson(DeploymentConfiguration config)\n             throws IOException {\n         String statsJson = DevBundleUtils.findBundleStatsJson(\n                 config.getProjectFolder(), config.getBuildFolder());\n         Objects.requireNonNull(statsJson,\n                 \"Frontend development bundle is expected to be in the project\"\n                         + \" or on the classpath, but not found.\");\n-        return Json.parse(statsJson);\n+        return JacksonUtils.readTree(statsJson);\n     }\n \n     /**\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/InlineTargets.java b/flow-server/src/main/java/com/vaadin/flow/server/InlineTargets.java\nindex 211b1c98e47..e877376a0f2 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/InlineTargets.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/InlineTargets.java\n@@ -20,14 +20,14 @@\n import java.util.List;\n import java.util.Map;\n \n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n import com.vaadin.flow.component.page.Inline;\n import com.vaadin.flow.component.page.TargetElement;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.shared.ui.Dependency;\n import com.vaadin.flow.shared.ui.LoadMode;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-\n /**\n  * Data holder class for collected {@link Inline} annotations to be added to the\n  * initial page.\n@@ -36,9 +36,9 @@\n  */\n public class InlineTargets {\n \n-    private final Map<Inline.Position, List<JsonObject>> inlineHead = new EnumMap<>(\n+    private final Map<Inline.Position, List<ObjectNode>> inlineHead = new EnumMap<>(\n             Inline.Position.class);\n-    private final Map<Inline.Position, List<JsonObject>> inlineBody = new EnumMap<>(\n+    private final Map<Inline.Position, List<ObjectNode>> inlineBody = new EnumMap<>(\n             Inline.Position.class);\n \n     /**\n@@ -58,7 +58,7 @@ public void addInlineDependency(Inline inline, VaadinService service) {\n             type = inline.wrapping();\n         }\n \n-        JsonObject dependency = Json.createObject();\n+        ObjectNode dependency = JacksonUtils.createObjectNode();\n         dependency.put(Dependency.KEY_TYPE, type.toString());\n         dependency.put(\"LoadMode\", LoadMode.INLINE.toString());\n \n@@ -93,7 +93,7 @@ private Inline.Wrapping determineDependencyType(Inline inline) {\n      *            prepend or append\n      * @return current list of inline objects\n      */\n-    public List<JsonObject> getInlineHead(Inline.Position position) {\n+    public List<ObjectNode> getInlineHead(Inline.Position position) {\n         return inlineHead.computeIfAbsent(position, key -> new ArrayList<>());\n     }\n \n@@ -104,7 +104,7 @@ public List<JsonObject> getInlineHead(Inline.Position position) {\n      *            prepend or append\n      * @return current list of inline objects\n      */\n-    public List<JsonObject> getInlineBody(Inline.Position position) {\n+    public List<ObjectNode> getInlineBody(Inline.Position position) {\n         return inlineBody.computeIfAbsent(position, key -> new ArrayList<>());\n     }\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java b/flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java\nindex 3a878cbb273..ef5afdf8be0 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java\n@@ -49,6 +49,7 @@\n import java.util.stream.Stream;\n import java.util.stream.StreamSupport;\n \n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -61,6 +62,7 @@\n import com.vaadin.flow.i18n.I18NProvider;\n import com.vaadin.flow.i18n.TranslationFileRequestHandler;\n import com.vaadin.flow.internal.CurrentInstance;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.LocaleUtil;\n import com.vaadin.flow.internal.UsageStatistics;\n import com.vaadin.flow.router.RouteData;\n@@ -88,11 +90,6 @@\n import com.vaadin.flow.shared.Registration;\n import com.vaadin.flow.shared.communication.PushMode;\n \n-import elemental.json.Json;\n-import elemental.json.JsonException;\n-import elemental.json.JsonObject;\n-import elemental.json.impl.JsonUtil;\n-\n import static java.nio.charset.StandardCharsets.UTF_8;\n \n /**\n@@ -1892,33 +1889,33 @@ public static String createCriticalNotificationJSON(String caption,\n     public static String createCriticalNotificationJSON(String caption,\n             String message, String details, String url, String querySelector) {\n         try {\n-            JsonObject appError = Json.createObject();\n+            ObjectNode appError = JacksonUtils.createObjectNode();\n             putValueOrJsonNull(appError, \"caption\", caption);\n             putValueOrJsonNull(appError, \"url\", url);\n             putValueOrJsonNull(appError, \"message\", message);\n             putValueOrJsonNull(appError, \"details\", details);\n             putValueOrJsonNull(appError, \"querySelector\", querySelector);\n \n-            JsonObject meta = Json.createObject();\n-            meta.put(\"appError\", appError);\n+            ObjectNode meta = JacksonUtils.createObjectNode();\n+            meta.set(\"appError\", appError);\n \n-            JsonObject json = Json.createObject();\n-            json.put(\"changes\", Json.createObject());\n-            json.put(\"resources\", Json.createObject());\n-            json.put(\"locales\", Json.createObject());\n-            json.put(\"meta\", meta);\n+            ObjectNode json = JacksonUtils.createObjectNode();\n+            json.set(\"changes\", JacksonUtils.createObjectNode());\n+            json.set(\"resources\", JacksonUtils.createObjectNode());\n+            json.set(\"locales\", JacksonUtils.createObjectNode());\n+            json.set(\"meta\", meta);\n             json.put(ApplicationConstants.SERVER_SYNC_ID, -1);\n             return wrapJsonForClient(json);\n-        } catch (JsonException e) {\n+        } catch (Exception e) {\n             getLogger().warn(\n                     \"Error creating critical notification JSON message\", e);\n-            return wrapJsonForClient(Json.createObject());\n+            return wrapJsonForClient(JacksonUtils.createObjectNode());\n         }\n \n     }\n \n-    private static String wrapJsonForClient(JsonObject json) {\n-        return \"for(;;);[\" + JsonUtil.stringify(json) + \"]\";\n+    private static String wrapJsonForClient(ObjectNode json) {\n+        return \"for(;;);[\" + json.toString() + \"]\";\n     }\n \n     /**\n@@ -1931,9 +1928,9 @@ private static String wrapJsonForClient(JsonObject json) {\n      *         a string\n      */\n     public static String createSessionExpiredJSON(boolean async) {\n-        JsonObject json = Json.createObject();\n-        JsonObject meta = Json.createObject();\n-        json.put(\"meta\", meta);\n+        ObjectNode json = JacksonUtils.createObjectNode();\n+        ObjectNode meta = JacksonUtils.createObjectNode();\n+        json.set(\"meta\", meta);\n \n         if (async) {\n             meta.put(JsonConstants.META_ASYNC, true);\n@@ -1959,10 +1956,10 @@ public static String createUINotFoundJSON(boolean async) {\n         return createSessionExpiredJSON(async);\n     }\n \n-    private static void putValueOrJsonNull(JsonObject json, String key,\n+    private static void putValueOrJsonNull(ObjectNode json, String key,\n             String value) {\n         if (value == null) {\n-            json.put(key, Json.createNull());\n+            json.set(key, JacksonUtils.nullNode());\n         } else {\n             json.put(key, value);\n         }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java\nindex ab7b8304b9a..a679ec45dab 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java\n@@ -27,6 +27,9 @@\n import java.util.Optional;\n import java.util.stream.Stream;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.FilenameUtils;\n import org.jsoup.Jsoup;\n import org.jsoup.nodes.Comment;\n@@ -43,7 +46,7 @@\n import com.vaadin.flow.internal.BrowserLiveReload;\n import com.vaadin.flow.internal.BrowserLiveReload.Backend;\n import com.vaadin.flow.internal.BrowserLiveReloadAccessor;\n-import com.vaadin.flow.internal.JsonUtils;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.LocaleUtil;\n import com.vaadin.flow.internal.UsageStatisticsExporter;\n import com.vaadin.flow.internal.springcsrf.SpringCsrfTokenUtil;\n@@ -64,11 +67,6 @@\n import com.vaadin.flow.server.startup.ApplicationConfiguration;\n import com.vaadin.flow.shared.ApplicationConstants;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n-import elemental.json.impl.JsonUtil;\n-\n import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_DEVMODE_HOSTS_ALLOWED;\n import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_DEVMODE_REMOTE_ADDRESS_HEADER;\n import static com.vaadin.flow.shared.ApplicationConstants.CONTENT_TYPE_TEXT_HTML_UTF_8;\n@@ -110,7 +108,7 @@ public boolean synchronizedHandleRequest(VaadinSession session,\n             htmlElement.attr(\"lang\", locale.getLanguage());\n         }\n \n-        JsonObject initialJson = Json.createObject();\n+        ObjectNode initialJson = JacksonUtils.createObjectNode();\n \n         if (service.getBootstrapInitialPredicate()\n                 .includeInitialUidl(request)) {\n@@ -375,7 +373,7 @@ private void addDevTools(Document indexDocument,\n             }\n         }\n \n-        JsonObject devToolsConf = Json.createObject();\n+        ObjectNode devToolsConf = JacksonUtils.createObjectNode();\n         devToolsConf.put(\"enable\", config.isDevModeLiveReloadEnabled());\n         devToolsConf.put(\"url\",\n                 BootstrapHandlerHelper.getPushURL(session, request));\n@@ -388,7 +386,7 @@ private void addDevTools(Document indexDocument,\n         addScript(indexDocument, String.format(\"\"\"\n                 window.Vaadin.devToolsPlugins = [];\n                 window.Vaadin.devToolsConf = %s;\n-                    \"\"\", devToolsConf.toJson()));\n+                \"\"\", devToolsConf));\n \n         indexDocument.body().appendChild(new Element(\"vaadin-dev-tools\"));\n \n@@ -484,23 +482,22 @@ private static boolean isAllowedDevToolsHost(String remoteAddress,\n         return false;\n     }\n \n-    private void addInitialFlow(JsonObject initialJson, Document indexDocument,\n+    private void addInitialFlow(ObjectNode initialJson, Document indexDocument,\n             VaadinRequest request) {\n         SpringCsrfTokenUtil.addTokenAsMetaTagsToHeadIfPresentInRequest(\n                 indexDocument.head(), request);\n         Element elm = new Element(SCRIPT);\n         elm.attr(SCRIPT_INITIAL, \"\");\n         elm.appendChild(new DataNode(\"window.Vaadin = window.Vaadin || {};\" + //\n-                \"window.Vaadin.TypeScript= \" + JsonUtil.stringify(initialJson)\n-                + \";\"));\n+                \"window.Vaadin.TypeScript= \" + initialJson.toString() + \";\"));\n         indexDocument.head().insertChildren(0, elm);\n     }\n \n-    private void includeInitialUidl(JsonObject initialJson,\n+    private void includeInitialUidl(ObjectNode initialJson,\n             VaadinSession session, VaadinRequest request,\n             VaadinResponse response) {\n-        JsonObject initial = getInitialJson(request, response, session);\n-        initialJson.put(SCRIPT_INITIAL, initial);\n+        ObjectNode initial = getInitialJson(request, response, session);\n+        initialJson.set(SCRIPT_INITIAL, initial);\n     }\n \n     @Override\n@@ -589,14 +586,13 @@ private static Document getIndexHtmlDocument(VaadinService service)\n     }\n \n     protected static void addGeneratedIndexContent(Document targetDocument,\n-            JsonObject statsJson) {\n+            ObjectNode statsJson) {\n \n-        JsonArray indexHtmlGeneratedRows = statsJson\n-                .getArray(\"indexHtmlGenerated\");\n-        List<String> toAdd = new ArrayList<>();\n+        ArrayNode indexHtmlGeneratedRows = (ArrayNode) statsJson\n+                .get(\"indexHtmlGenerated\");\n \n-        toAdd.addAll(JsonUtils.stream(indexHtmlGeneratedRows)\n-                .map(value -> value.asString()).toList());\n+        List<String> toAdd = new ArrayList<>(JacksonUtils\n+                .stream(indexHtmlGeneratedRows).map(JsonNode::asText).toList());\n \n         for (String row : toAdd) {\n             targetDocument.head().append(row);\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/JavaScriptBootstrapHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/JavaScriptBootstrapHandler.java\nindex 278ab7bc056..febdf297780 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/JavaScriptBootstrapHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/JavaScriptBootstrapHandler.java\n@@ -22,11 +22,15 @@\n import java.util.Optional;\n import java.util.function.Function;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n import com.vaadin.flow.component.PushConfiguration;\n import com.vaadin.flow.component.UI;\n import com.vaadin.flow.internal.BootstrapHandlerHelper;\n import com.vaadin.flow.internal.DevModeHandler;\n import com.vaadin.flow.internal.DevModeHandlerManager;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.UsageStatistics;\n import com.vaadin.flow.router.InvalidLocationException;\n import com.vaadin.flow.router.Location;\n@@ -43,11 +47,6 @@\n import com.vaadin.flow.server.VaadinSession;\n import com.vaadin.flow.shared.ApplicationConstants;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-import elemental.json.JsonValue;\n-import elemental.json.impl.JsonUtil;\n-\n /**\n  * Processes a 'start' request type from the client to initialize server session\n  * and UI. It returns a JSON response with everything needed to bootstrap flow\n@@ -150,7 +149,7 @@ protected BootstrapContext createAndInitUI(Class<? extends UI> uiClass,\n \n         BootstrapContext context = super.createAndInitUI(UI.class, request,\n                 response, session);\n-        JsonObject config = context.getApplicationParameters();\n+        ObjectNode config = context.getApplicationParameters();\n \n         String requestURL = getRequestUrl(request);\n \n@@ -217,24 +216,24 @@ protected static String getServiceUrl(VaadinRequest vaadinRequest) {\n         return BootstrapHandlerHelper.getServiceUrl(vaadinRequest);\n     }\n \n-    private JsonObject getStats() {\n-        JsonObject stats = Json.createObject();\n+    private ObjectNode getStats() {\n+        ObjectNode stats = JacksonUtils.createObjectNode();\n         UsageStatistics.getEntries().forEach(entry -> {\n             String name = entry.getName();\n             String version = entry.getVersion();\n \n-            JsonObject json = Json.createObject();\n+            ObjectNode json = JacksonUtils.createObjectNode();\n             json.put(\"is\", name);\n             json.put(\"version\", version);\n \n-            String escapedName = Json.create(name).toJson();\n-            stats.put(escapedName, json);\n+            String escapedName = JacksonUtils.createNode(name).toString();\n+            stats.set(escapedName, json);\n         });\n         return stats;\n     }\n \n-    private JsonValue getErrors(VaadinService service) {\n-        JsonObject errors = Json.createObject();\n+    private JsonNode getErrors(VaadinService service) {\n+        ObjectNode errors = JacksonUtils.createObjectNode();\n         Optional<DevModeHandler> devModeHandler = DevModeHandlerManager\n                 .getDevModeHandler(service);\n         if (devModeHandler.isPresent()) {\n@@ -243,15 +242,15 @@ private JsonValue getErrors(VaadinService service) {\n                 errors.put(\"webpack-dev-server\", errorMsg);\n             }\n         }\n-        return errors.keys().length > 0 ? errors : Json.createNull();\n+        return JacksonUtils.getKeys(errors).isEmpty() ? JacksonUtils.nullNode()\n+                : errors;\n     }\n \n-    private void writeResponse(VaadinResponse response, JsonObject json)\n+    private void writeResponse(VaadinResponse response, ObjectNode json)\n             throws IOException {\n         response.setContentType(\"application/json\");\n         response.setStatus(HttpURLConnection.HTTP_OK);\n-        response.getOutputStream()\n-                .write(JsonUtil.stringify(json).getBytes(\"UTF-8\"));\n+        response.getOutputStream().write(json.toString().getBytes(\"UTF-8\"));\n     }\n \n     /**\n@@ -266,20 +265,21 @@ private void writeResponse(VaadinResponse response, JsonObject json)\n      *            the vaadin session.\n      * @return the initial application JSON.\n      */\n-    protected JsonObject getInitialJson(VaadinRequest request,\n+    protected ObjectNode getInitialJson(VaadinRequest request,\n             VaadinResponse response, VaadinSession session) {\n \n         BootstrapContext context = createAndInitUI(UI.class, request, response,\n                 session);\n \n-        JsonObject initial = Json.createObject();\n+        ObjectNode initial = JacksonUtils.createObjectNode();\n \n         boolean productionMode = context.getSession().getConfiguration()\n                 .isProductionMode();\n \n-        JsonObject appConfig = context.getApplicationParameters();\n+        ObjectNode appConfig = context.getApplicationParameters();\n \n-        appConfig.put(\"productionMode\", Json.create(productionMode));\n+        appConfig.put(\"productionMode\",\n+                JacksonUtils.createNode(productionMode));\n         appConfig.put(\"appId\", context.getAppId());\n         appConfig.put(\"uidl\", getInitialUidl(context.getUI()));\n         initial.put(\"appConfig\", appConfig);\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java\nindex 04219e60a6f..0be776864a1 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java\n@@ -29,6 +29,9 @@\n import java.util.function.Function;\n import java.util.regex.Pattern;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.jsoup.Jsoup;\n import org.jsoup.nodes.Attribute;\n import org.jsoup.nodes.Document;\n@@ -42,7 +45,7 @@\n import com.vaadin.flow.dom.ElementUtil;\n import com.vaadin.flow.function.DeploymentConfiguration;\n import com.vaadin.flow.internal.BootstrapHandlerHelper;\n-import com.vaadin.flow.internal.JsonUtils;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.UsageStatistics;\n import com.vaadin.flow.server.BootstrapException;\n import com.vaadin.flow.server.BootstrapHandler;\n@@ -61,11 +64,6 @@\n import com.vaadin.flow.shared.ApplicationConstants;\n import com.vaadin.flow.shared.JsonConstants;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n-import elemental.json.impl.JsonUtil;\n-\n import static com.vaadin.flow.server.frontend.FrontendUtils.EXPORT_CHUNK;\n import static com.vaadin.flow.shared.ApplicationConstants.CONTENT_TYPE_TEXT_JAVASCRIPT_UTF_8;\n import static java.nio.charset.StandardCharsets.UTF_8;\n@@ -149,7 +147,7 @@ public Document getBootstrapPage(BootstrapContext context) {\n                 head.select(\"script[src], link[href]\").attr(\"crossorigin\",\n                         \"true\");\n \n-                JsonObject initialUIDL = getInitialUidl(context.getUI());\n+                ObjectNode initialUIDL = getInitialUidl(context.getUI());\n \n                 head.prependChild(createInlineJavaScriptElement(\n                         \"window.JSCompiler_renameProperty = function(a) { return a; }\"));\n@@ -171,8 +169,8 @@ public Document getBootstrapPage(BootstrapContext context) {\n         }\n \n         @Override\n-        protected List<String> getChunkKeys(JsonObject chunks) {\n-            if (chunks.hasKey(EXPORT_CHUNK)) {\n+        protected List<String> getChunkKeys(ObjectNode chunks) {\n+            if (chunks.has(EXPORT_CHUNK)) {\n                 return Collections.singletonList(EXPORT_CHUNK);\n             } else {\n                 return super.getChunkKeys(chunks);\n@@ -181,12 +179,12 @@ protected List<String> getChunkKeys(JsonObject chunks) {\n     }\n \n     protected static void addGeneratedIndexContent(Document targetDocument,\n-            JsonObject statsJson) {\n+            ObjectNode statsJson) {\n         List<String> toAdd = new ArrayList<>();\n \n-        Optional<String> webComponentScript = JsonUtils\n-                .stream(statsJson.getArray(\"entryScripts\"))\n-                .map(value -> value.asString())\n+        Optional<String> webComponentScript = JacksonUtils\n+                .stream((ArrayNode) statsJson.get(\"entryScripts\"))\n+                .map(JsonNode::asText)\n                 .filter(script -> script.contains(\"webcomponenthtml\"))\n                 .findFirst();\n \n@@ -260,7 +258,7 @@ protected BootstrapContext createAndInitUI(Class<? extends UI> uiClass,\n \n         BootstrapContext context = super.createAndInitUI(WebComponentUI.class,\n                 request, response, session);\n-        JsonObject config = context.getApplicationParameters();\n+        ObjectNode config = context.getApplicationParameters();\n \n         PushConfiguration pushConfiguration = context.getUI()\n                 .getPushConfiguration();\n@@ -273,9 +271,9 @@ protected BootstrapContext createAndInitUI(Class<? extends UI> uiClass,\n         WebComponentConfigurationRegistry registry = WebComponentConfigurationRegistry\n                 .getInstance(request.getService().getContext());\n \n-        JsonArray tags = registry.getConfigurations().stream()\n-                .map(conf -> Json.create(conf.getTag()))\n-                .collect(JsonUtils.asArray());\n+        ArrayNode tags = registry.getConfigurations().stream()\n+                .map(conf -> JacksonUtils.createNode(conf.getTag()))\n+                .collect(JacksonUtils.asArray());\n         config.put(\"webcomponents\", tags);\n \n         config.put(ApplicationConstants.DEV_TOOLS_ENABLED, false);\n@@ -624,14 +622,14 @@ protected boolean handleWebComponentResyncRequest(BootstrapContext context,\n             return false;\n         }\n \n-        JsonObject json = new UidlWriter().createUidl(context.getUI(), true,\n-                true);\n+        ObjectNode json = JacksonUtils.mapElemental(\n+                new UidlWriter().createUidl(context.getUI(), true, true));\n         json.put(ApplicationConstants.UI_ID, context.getUI().getUIId());\n         json.put(ApplicationConstants.UIDL_SECURITY_TOKEN_ID,\n                 context.getUI().getCsrfToken());\n         json.put(ApplicationConstants.UIDL_PUSH_ID,\n                 context.getUI().getSession().getPushId());\n-        String responseString = \"for(;;);[\" + JsonUtil.stringify(json) + \"]\";\n+        String responseString = \"for(;;);[\" + json + \"]\";\n \n         try {\n             VaadinService service = request.getService();\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandlerViteTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandlerViteTest.java\nindex c10b466ba28..8c2cd934104 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandlerViteTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandlerViteTest.java\n@@ -258,7 +258,7 @@ public void writeBootstrapPage_devToolsDisabled()\n         int scriptIndex = result.indexOf(\"var hasScript = function(src)\");\n         Assert.assertTrue(scriptIndex >= 0);\n \n-        Assert.assertTrue(result.contains(\"\\\\\\\"devToolsEnabled\\\\\\\": false\"));\n+        Assert.assertTrue(result.contains(\"\\\\\\\"devToolsEnabled\\\\\\\" : false\"));\n     }\n \n     @Test\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21022",
    "pr_id": 21022,
    "issue_id": 18612,
    "repo": "vaadin/flow",
    "problem_statement": "Cannot benefit from Gradle configuration cache due to cache problems\n### Description of the bug\n\nWith new Gradle 8.6 and the latest [setup-gradle@v3](https://github.com/gradle/actions/tree/v3.0.0/setup-gradle) it is now possible to safely and securely store [Gradle configuration cache](https://docs.gradle.org/8.6/release-notes.html#configuration-cache-improvements) which should improve the Gradle daemon startup and build times.\r\n\r\nUnfortunately when using the Vaadin Gradle Plugin the configuration cache fails with the following error:\r\n\r\n```\r\nFAILURE: Build failed with an exception.\r\n\r\n* What went wrong:\r\nConfiguration cache problems found in this build.\r\n\r\n15 problems were found storing the configuration cache, 13 of which seem unique.\r\n- Class `com.vaadin.flow.server.frontend.FrontendToolsLocator`: external process started '/opt/hostedtoolcache/node/18.19.0/x64/bin/node -v'\r\n  See https://docs.gradle.org/8.6/userguide/configuration_cache.html#config_cache:requirements:external_processes\r\n- Class `com.vaadin.flow.server.frontend.FrontendToolsLocator`: external process started 'which node'\r\n  See https://docs.gradle.org/8.6/userguide/configuration_cache.html#config_cache:requirements:external_processes\r\n- Class `com.vaadin.flow.server.frontend.FrontendUtils`: external process started '/opt/hostedtoolcache/node/18.19.0/x64/bin/node --version'\r\n  See https://docs.gradle.org/8.6/userguide/configuration_cache.html#config_cache:requirements:external_processes\r\n- Class `gradlegitproperties.org.eclipse.jgit.util.FS`: external process started '/usr/bin/git --version'\r\n  See https://docs.gradle.org/8.6/userguide/configuration_cache.html#config_cache:requirements:external_processes\r\n- Class `gradlegitproperties.org.eclipse.jgit.util.FS`: external process started '/usr/bin/git config --system --edit'\r\n  See https://docs.gradle.org/8.6/userguide/configuration_cache.html#config_cache:requirements:external_processes\r\n- Task `:data:generateJooqSources` of type `org.gradle.api.tasks.JavaExec`: cannot serialize object of type 'org.gradle.api.internal.tasks.DefaultSourceSet', a subtype of 'org.gradle.api.tasks.SourceSet', as these are not supported with the configuration cache.\r\n  See https://docs.gradle.org/8.6/userguide/configuration_cache.html#config_cache:requirements:disallowed_types\r\n- Task `:webapp:copyClasspathResourcesForDockerImage` of type `org.gradle.api.DefaultTask`: cannot serialize Gradle script object references as these are not supported with the configuration cache.\r\n  See https://docs.gradle.org/8.6/userguide/configuration_cache.html#config_cache:requirements:disallowed_types\r\n- Task `:webapp:copyClasspathResourcesForDockerImage` of type `org.gradle.api.DefaultTask`: cannot serialize object of type 'org.gradle.api.internal.project.DefaultProject', a subtype of 'org.gradle.api.Project', as these are not supported with the configuration cache.\r\n  See https://docs.gradle.org/8.6/userguide/configuration_cache.html#config_cache:requirements:disallowed_types\r\n- Task `:webapp:generateGitProperties` of type `com.gorylenko.GenerateGitPropertiesTask`: invocation of 'Task.project' at execution time is unsupported.\r\n  See https://docs.gradle.org/8.6/userguide/configuration_cache.html#config_cache:requirements:use_project_during_execution\r\n- Task `:webapp:vaadinBuildFrontend` of type `com.vaadin.gradle.VaadinBuildFrontendTask`: cannot serialize object of type 'org.gradle.api.internal.project.DefaultProject', a subtype of 'org.gradle.api.Project', as these are not supported with the configuration cache.\r\n  See https://docs.gradle.org/8.6/userguide/configuration_cache.html#config_cache:requirements:disallowed_types\r\n- Task `:webapp:vaadinBuildFrontend` of type `com.vaadin.gradle.VaadinBuildFrontendTask`: invocation of 'Task.project' at execution time is unsupported.\r\n  See https://docs.gradle.org/8.6/userguide/configuration_cache.html#config_cache:requirements:use_project_during_execution\r\n- Task `:webapp:vaadinPrepareFrontend` of type `com.vaadin.gradle.VaadinPrepareFrontendTask`: cannot serialize object of type 'org.gradle.api.internal.project.DefaultProject', a subtype of 'org.gradle.api.Project', as these are not supported with the configuration cache.\r\n  See https://docs.gradle.org/8.6/userguide/configuration_cache.html#config_cache:requirements:disallowed_types\r\n- Task `:webapp:vaadinPrepareFrontend` of type `com.vaadin.gradle.VaadinPrepareFrontendTask`: invocation of 'Task.project' at execution time is unsupported.\r\n  See https://docs.gradle.org/8.6/userguide/configuration_cache.html#config_cache:requirements:use_project_during_execution\r\n\r\nSee the complete report at file:///home/runner/work/project/build/reports/configuration-cache/1jq3mq1vr8s4v3i6l9aeumbf8/96wlf1meeyl5jhjnfvpm1p2sy/configuration-cache-report.html\r\n> Starting an external process '/usr/bin/git --version' during configuration time is unsupported.\r\n> Starting an external process '/usr/bin/git config --system --edit' during configuration time is unsupported.\r\n> Starting an external process 'which node' during configuration time is unsupported.\r\n> Starting an external process '/opt/hostedtoolcache/node/18.19.0/x64/bin/node -v' during configuration time is unsupported.\r\n> Starting an external process '/opt/hostedtoolcache/node/18.19.0/x64/bin/node --version' during configuration time is unsupported.\r\n\r\n```\r\n\r\nThe full error log with stacktrace can be found in the attached file:\r\n\r\n[error.log](https://github.com/vaadin/flow/files/14158054/error.log)\r\n\r\n\r\n\n\n### Expected behavior\n\nGradle build should pass successfully with configuration cache enabled.\n\n### Minimal reproducible example\n\n* Add this to your `projectRoot/gradle.properties`:\r\n\r\n```\r\n# Kotlin\r\nkotlin.caching.enabled=true\r\nkotlin.incremental=true\r\nkotlin.incremental.useClasspathSnapshot=true\r\nkotlin.parallel.tasks.in.project=true\r\n# Gradle\r\norg.gradle.parallel=true\r\norg.gradle.caching=true\r\norg.gradle.daemon.idletimeout=3600000\r\norg.gradle.configuration-cache=true\r\norg.gradle.configuration-cache.max-problems=100\r\n```\r\n\r\n* Generate a \"secret phrase\" using `openssl rand -base64 16` and store it as a secret `GRADLE_ENCRYPTION_KEY`\r\n* In your workflow add the following:\r\n\r\n```\r\n      - name: Set up JDK\r\n        uses: actions/setup-java@v4\r\n        with:\r\n          java-version: '21'\r\n          distribution: 'temurin'\r\n\r\n      - name: Setup Gradle\r\n        uses: gradle/actions/setup-gradle@v3\r\n        with:\r\n          # The Gradle wrapper's version (already the default, putting it here to clarity)\r\n          gradle-version: wrapper\r\n          # Removing unused files from Gradle User Home before saving to cache (i.e. older versions of gradle)\r\n          gradle-home-cache-cleanup: true\r\n          # Cache downloaded JDKs in addition to the default directories.\r\n          gradle-home-cache-includes: |\r\n            caches\r\n            notifications\r\n            jdks\r\n          cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}\r\n          # Only write to the cache for builds on the 'main' and 'release' branches. (Default is 'main' only.)\r\n          # Builds on other branches will only read existing entries from the cache.\r\n          #cache-read-only: ${{ github.ref != 'refs/heads/main'  }}\r\n          # Allow writing to cache\r\n          cache-read-only: true\r\n\r\n      - name: Build project\r\n        env:\r\n          GRADLE_ENCRYPTION_KEY: ${{ secrets.GRADLE_ENCRYPTION_KEY }}\r\n        run: ./gradlew build --scan --stacktrace\r\n\r\n```\r\n\n\n### Versions\n\n- Vaadin / Flow version: 24.3.3\r\n- Java version: 21-tem\r\n- OS version: ubuntu\r\n",
    "issue_word_count": 951,
    "test_files_count": 2,
    "non_test_files_count": 11,
    "pr_changed_files": [
      "flow-plugins/flow-gradle-plugin/src/functionalTest/kotlin/com/vaadin/gradle/MiscMultiModuleTest.kt",
      "flow-plugins/flow-gradle-plugin/src/functionalTest/kotlin/com/vaadin/gradle/VaadinSmokeTest.kt",
      "flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/FrontendTools.kt",
      "flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/GradlePluginAdapter.kt",
      "flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/PrepareFrontendInputProperties.kt",
      "flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/PrepareFrontendOutputProperties.kt",
      "flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinBuildFrontendTask.kt",
      "flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinCleanTask.kt",
      "flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinConvertPolymerTask.kt",
      "flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinFlowPluginExtension.kt",
      "flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinPlugin.kt",
      "flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinPrepareFrontendTask.kt",
      "flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinUtils.kt"
    ],
    "pr_changed_test_files": [
      "flow-plugins/flow-gradle-plugin/src/functionalTest/kotlin/com/vaadin/gradle/MiscMultiModuleTest.kt",
      "flow-plugins/flow-gradle-plugin/src/functionalTest/kotlin/com/vaadin/gradle/VaadinSmokeTest.kt"
    ],
    "base_commit": "ec83c9ffc0387257c7edb3900f9143d5e625e23b",
    "head_commit": "c6270e8e7678cfc98cbdd73718f38ec341bab2eb",
    "repo_url": "https://github.com/vaadin/flow/pull/21022",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21022",
    "dockerfile": "",
    "pr_merged_at": "2025-02-27T07:02:49.000Z",
    "patch": "diff --git a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/FrontendTools.kt b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/FrontendTools.kt\nnew file mode 100644\nindex 00000000000..57c75e7f167\n--- /dev/null\n+++ b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/FrontendTools.kt\n@@ -0,0 +1,58 @@\n+package com.vaadin.gradle\n+\n+import javax.inject.Inject\n+import com.vaadin.flow.server.frontend.FrontendTools\n+import com.vaadin.flow.server.frontend.FrontendToolsSettings\n+import org.gradle.api.provider.Property\n+import org.gradle.api.provider.Provider\n+import org.gradle.api.provider.ProviderFactory\n+import org.gradle.api.provider.ValueSource\n+import org.gradle.api.provider.ValueSourceParameters\n+import org.gradle.api.services.BuildService\n+import org.gradle.api.services.BuildServiceParameters\n+\n+/**\n+ * Custom ValueSource to support Gradle configuration cache by catching values\n+ * produced by Vaadin FrontendTools processing shell commands.\n+ */\n+internal abstract class FrontendToolsValueSource :\n+    ValueSource<String, FrontendToolsValueSource.Parameters> {\n+\n+    override fun obtain(): String? {\n+        return parameters.getToolsSettings().map { FrontendTools(it) }\n+            .flatMap { tools ->\n+                parameters.getAction().map { act -> act.invoke(tools) }\n+            }.orNull\n+    }\n+\n+    interface Parameters : ValueSourceParameters {\n+        fun getToolsSettings(): Property<FrontendToolsSettings>\n+        fun getAction(): Property<(FrontendTools) -> String>\n+    }\n+}\n+\n+/**\n+ * Shared service to create Gradle properties based on Vaadin FrontendTools\n+ * execution.\n+ * Properties generated by the toolsProperty method can safely be referenced by\n+ * Tasks input and outputs without breaking the Gradle configuration cache.\n+ */\n+internal abstract class FrontendToolService @Inject constructor(private val providerFactory: ProviderFactory) :\n+    BuildService<FrontendToolService.Parameters> {\n+\n+    fun tools(): FrontendTools =\n+        parameters.getToolsSettings().map { FrontendTools(it) }.get()\n+\n+    fun toolsProperty(getter: (FrontendTools) -> String): Provider<String> {\n+        return parameters.getToolsSettings().flatMap { toolsSettings ->\n+            providerFactory.of(FrontendToolsValueSource::class.java) {\n+                it.parameters.getToolsSettings().set(toolsSettings)\n+                it.parameters.getAction().set(getter)\n+            }\n+        }\n+    }\n+\n+    interface Parameters : BuildServiceParameters {\n+        fun getToolsSettings(): Property<FrontendToolsSettings>\n+    }\n+}\n\ndiff --git a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/GradlePluginAdapter.kt b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/GradlePluginAdapter.kt\nindex 70e04582fc8..9ed31d733a1 100644\n--- a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/GradlePluginAdapter.kt\n+++ b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/GradlePluginAdapter.kt\n@@ -15,27 +15,89 @@\n  */\n package com.vaadin.gradle\n \n-import com.vaadin.flow.plugin.base.PluginAdapterBuild\n+import java.io.File\n+import java.net.URI\n+import java.nio.file.Path\n+import java.util.function.Consumer\n import com.vaadin.flow.plugin.base.BuildFrontendUtil\n+import com.vaadin.flow.plugin.base.PluginAdapterBuild\n import com.vaadin.flow.server.Constants\n import com.vaadin.flow.server.frontend.scanner.ClassFinder\n import org.gradle.api.Project\n+import org.gradle.api.Task\n import org.gradle.api.artifacts.Configuration\n-import org.gradle.api.artifacts.ResolvedArtifact\n+import org.gradle.api.artifacts.ModuleIdentifier\n+import org.gradle.api.artifacts.component.ModuleComponentIdentifier\n+import org.gradle.api.file.FileCollection\n+import org.gradle.api.logging.Logger\n+import org.gradle.api.provider.Provider\n import org.gradle.api.tasks.bundling.War\n-import java.io.File\n-import java.net.URI\n-import java.nio.file.Path\n-import java.util.function.Consumer\n+import org.gradle.internal.component.external.model.ModuleComponentArtifactIdentifier\n+\n+private val servletApiJarRegex =\n+    Regex(\".*(/|\\\\\\\\)(portlet-api|javax\\\\.servlet-api)-.+jar$\")\n+\n+internal class GradlePluginAdapter private constructor(\n+    project: Project,\n+    internal val config: PluginEffectiveConfiguration,\n+    private val isBeforeProcessResources: Boolean,\n+    private val logger: Logger,\n+) : PluginAdapterBuild {\n+\n+\n+    private val projectDir = config.projectDir\n+    private val projectName = config.projectName\n+    private val buildResourcesDir: File =\n+        project.getBuildResourcesDir(config.sourceSetName.get())\n+    private val jarProject: Boolean =\n+        project.tasks.withType(War::class.java).isEmpty()\n+    private val jarFiles: FileCollection\n+    private val resolvedArtifacts: Provider<Set<ModuleIdentifier>>\n+    private val classFinderClasspath: FileCollection\n+\n+    constructor(\n+        task: Task,\n+        config: PluginEffectiveConfiguration,\n+        isBeforeProcessResources: Boolean\n+    ) : this(task.project, config, isBeforeProcessResources, task.logger)\n+\n+    init {\n+        val dependencyConfiguration =\n+            project.configurations.getByName(config.dependencyScope.get())\n+        resolvedArtifacts =\n+            dependencyConfiguration.incoming.artifacts.resolvedArtifacts.map { result ->\n+                result.filter { it.id is ModuleComponentArtifactIdentifier }\n+                    .map { (it.id.componentIdentifier as ModuleComponentIdentifier).moduleIdentifier }\n+                    .toSet()\n+            } ?: project.provider { emptySet() }\n+        classFinderClasspath =\n+            createClassFinderClasspath(project, dependencyConfiguration)\n+        jarFiles = dependencyConfiguration.incoming.files.filter {\n+            it.name.endsWith(\".jar\", true)\n+        } ?: project.files()\n+    }\n+\n+    // ClassFinder instance is created the first time it is accessed with the\n+    // relative getter\n+    private lateinit var _classFinder: ClassFinder\n+\n+    private fun createClassFinder(): ClassFinder {\n+        val apis = classFinderClasspath.filter { it.exists() }.toSet()\n \n-private val servletApiJarRegex = Regex(\".*(/|\\\\\\\\)(portlet-api|javax\\\\.servlet-api)-.+jar$\")\n+        val classFinder =\n+            BuildFrontendUtil.getClassFinder(apis.map { it.absolutePath })\n+        // sanity check that the project has flow-server.jar as a dependency\n+        try {\n+            classFinder.loadClass<Any>(\"com.vaadin.flow.server.webcomponent.WebComponentModulesWriter\")\n+        } catch (e: ClassNotFoundException) {\n+            throw RuntimeException(\"Failed to find classes from flow-server.jar. The project '${projectName}' needs to have a dependency on flow-server.jar\")\n+        }\n+        logger.info(\"Passing this classpath to NodeTasks.Builder: ${apis.toPrettyFormat()}\")\n+        return classFinder\n+    }\n \n-internal class GradlePluginAdapter(\n-    val project: Project,\n-    val config: PluginEffectiveConfiguration,\n-    private val isBeforeProcessResources: Boolean\n-): PluginAdapterBuild {\n-    override fun applicationProperties(): File = config.applicationProperties.get()\n+    override fun applicationProperties(): File =\n+        config.applicationProperties.get()\n \n     override fun eagerServerLoad(): Boolean = config.eagerServerLoad.get()\n \n@@ -44,65 +106,60 @@ internal class GradlePluginAdapter(\n     override fun generatedTsFolder(): File = config.generatedTsFolder.get()\n \n     override fun getClassFinder(): ClassFinder {\n-        val dependencyConfiguration: Configuration? = project.configurations.findByName(config.dependencyScope.get())\n-        val dependencyConfigurationJars: List<File> = if (dependencyConfiguration != null) {\n-            var artifacts: List<ResolvedArtifact> =\n-                dependencyConfiguration.resolvedConfiguration.resolvedArtifacts.toList()\n-\n-            // Detect local filesystem dependencies that are not resolved as artifacts\n-            // They will be added to the filtered artifacts list\n-            val filesystemDependencies =\n-                dependencyConfiguration.resolvedConfiguration.files.minus(artifacts.map { it.file }.toSet())\n-\n-            val artifactFilter = config.classpathFilter.toPredicate()\n-            artifacts = artifacts.filter { artifactFilter.test(it.moduleVersion.id.module) }\n+        if (!::_classFinder.isInitialized) {\n+            _classFinder = createClassFinder()\n+        }\n+        return _classFinder\n+    }\n \n-            artifacts.map { it.file }.plus(filesystemDependencies)\n-        } else listOf()\n+    private fun createClassFinderClasspath(\n+        project: Project,\n+        dependencyConfiguration: Configuration?\n+    ): FileCollection {\n+        val dependencyConfigurationJars: FileCollection =\n+            if (dependencyConfiguration != null) {\n+                val artifactFilter = config.classpathFilter.toPredicate()\n+                val artifacts = dependencyConfiguration.incoming.artifactView {\n+                    it.componentFilter { componentId ->\n+                        // a componentId different ModuleComponentIdentifier\n+                        // could be a local library, should not be filtered out\n+                        val accepted = componentId !is ModuleComponentIdentifier || artifactFilter.test(\n+                            componentId.moduleIdentifier\n+                        )\n+                        accepted\n+                    }\n+                }.files\n+                artifacts\n+            } else project.files()\n+\n+        val sourceSetName = config.sourceSetName.get()\n \n         // we need to also analyze the project's classes\n-        val classesDirs: List<File> = project.getSourceSet(config.sourceSetName.get()).output.classesDirs\n-            .toList()\n-            .filter { it.exists() }\n+        val classesDirs: FileCollection =\n+            project.getSourceSet(sourceSetName).output.classesDirs;\n \n-        val resourcesDir: List<File> = listOfNotNull(project.getSourceSet(config.sourceSetName.get()).output.resourcesDir)\n-                .filter { it.exists() }\n+        val resourcesDir: File? =\n+            project.getSourceSet(sourceSetName).output.resourcesDir\n \n         // for Spring Boot project there is no \"providedCompile\" scope: the WAR plugin brings that in.\n-        val providedDeps: Configuration? = project.configurations.findByName(\"providedCompile\")\n-        val servletJar: List<File> = providedDeps\n-            ?.filter { it.absolutePath.matches(servletApiJarRegex) }\n-            ?.toList()\n-            ?: listOf()\n-\n-        val apis: Set<File> = (dependencyConfigurationJars + classesDirs + resourcesDir + servletJar).toSet()\n-\n-        // eagerly check that all the files/folders exist, to avoid spamming the console later on\n-        // see https://github.com/vaadin/vaadin-gradle-plugin/issues/38 for more details\n-        apis.forEach {\n-            check(it.exists()) { \"$it doesn't exist\" }\n-        }\n-\n-        val classFinder = BuildFrontendUtil.getClassFinder(apis.map { it.absolutePath })\n-\n-        // sanity check that the project has flow-server.jar as a dependency\n-        try {\n-            classFinder.loadClass<Any>(\"com.vaadin.flow.server.webcomponent.WebComponentModulesWriter\")\n-        } catch (e: ClassNotFoundException) {\n-            throw RuntimeException(\"Failed to find classes from flow-server.jar. The project '${project.name}' needs to have a dependency on flow-server.jar\")\n-        }\n-\n-        project.logger.info(\"Passing this classpath to NodeTasks.Builder: ${apis.toPrettyFormat()}\")\n-\n-        return classFinder\n+        val providedDeps: Configuration? =\n+            project.configurations.findByName(\"providedCompile\")\n+        val servletJar: FileCollection = providedDeps\n+            ?.incoming?.files?.filter {\n+                it.absolutePath.matches(servletApiJarRegex)\n+            } ?: project.files()\n+\n+        return project.files(classesDirs, resourcesDir, servletJar)\n+            .filter { it != null }\n+            .plus(dependencyConfigurationJars.filter {\n+                check(it.exists()) { \"$it doesn't exist\" }\n+                it.exists()\n+            })\n     }\n \n-    override fun getJarFiles(): MutableSet<File> {\n-        val jarFiles: Set<File> = project.configurations.getByName(config.dependencyScope.get()).jars.toSet()\n-        return jarFiles.toMutableSet()\n-    }\n+    override fun getJarFiles(): MutableSet<File> = jarFiles.toMutableSet()\n \n-    override fun isJarProject(): Boolean = project.tasks.withType(War::class.java).isEmpty()\n+    override fun isJarProject(): Boolean = jarProject\n \n     override fun isDebugEnabled(): Boolean = true\n \n@@ -111,31 +168,31 @@ internal class GradlePluginAdapter(\n     override fun javaResourceFolder(): File = config.javaResourceFolder.get()\n \n     override fun logDebug(debugMessage: CharSequence) {\n-        project.logger.debug(debugMessage.toString())\n+        logger.debug(debugMessage.toString())\n     }\n \n     override fun logDebug(debugMessage: CharSequence, throwable: Throwable?) {\n-        project.logger.debug(debugMessage.toString(), throwable)\n+        logger.debug(debugMessage.toString(), throwable)\n     }\n \n     override fun logInfo(infoMessage: CharSequence) {\n-        project.logger.info(infoMessage.toString())\n+        logger.info(infoMessage.toString())\n     }\n \n     override fun logWarn(warningMessage: CharSequence) {\n-        project.logger.warn(warningMessage.toString())\n+        logger.warn(warningMessage.toString())\n     }\n \n     override fun logWarn(warningMessage: CharSequence, throwable: Throwable?) {\n-        project.logger.warn(warningMessage.toString(), throwable)\n+        logger.warn(warningMessage.toString(), throwable)\n     }\n \n     override fun logError(errorMessage: CharSequence) {\n-        project.logger.error(errorMessage.toString())\n+        logger.error(errorMessage.toString())\n     }\n \n     override fun logError(warning: CharSequence, e: Throwable?) {\n-        project.logger.error(warning.toString(), e)\n+        logger.error(warning.toString(), e)\n     }\n \n     override fun nodeDownloadRoot(): URI =\n@@ -155,9 +212,10 @@ internal class GradlePluginAdapter(\n \n     override fun useGlobalPnpm(): Boolean = config.useGlobalPnpm.get()\n \n-    override fun projectBaseDirectory(): Path = project.projectDir.toPath()\n+    override fun projectBaseDirectory(): Path = projectDir.toPath()\n \n-    override fun requireHomeNodeExec(): Boolean = config.requireHomeNodeExec.get()\n+    override fun requireHomeNodeExec(): Boolean =\n+        config.requireHomeNodeExec.get()\n \n     override fun servletResourceOutputDirectory(): File {\n         // when running a task which runs before processResources, we need to\n@@ -172,17 +230,19 @@ internal class GradlePluginAdapter(\n                 Constants.VAADIN_SERVLET_RESOURCES\n             )\n         }\n-        return File(project.getBuildResourcesDir(config.sourceSetName.get()), Constants.VAADIN_SERVLET_RESOURCES)\n+        return File(buildResourcesDir, Constants.VAADIN_SERVLET_RESOURCES)\n     }\n \n     override fun webpackOutputDirectory(): File =\n         config.webpackOutputDirectory.get()\n \n-    override fun frontendResourcesDirectory(): File = config.frontendResourcesDirectory.get()\n+    override fun frontendResourcesDirectory(): File =\n+        config.frontendResourcesDirectory.get()\n \n     override fun generateBundle(): Boolean = config.generateBundle.get()\n \n-    override fun generateEmbeddableWebComponents(): Boolean = config.generateEmbeddableWebComponents.get()\n+    override fun generateEmbeddableWebComponents(): Boolean =\n+        config.generateEmbeddableWebComponents.get()\n \n     override fun optimizeBundle(): Boolean = config.optimizeBundle.get()\n \n@@ -190,12 +250,14 @@ internal class GradlePluginAdapter(\n \n     override fun buildFolder(): String {\n         val projectBuildDir = config.projectBuildDir.get()\n-        if (projectBuildDir.startsWith(project.projectDir.toString())) {\n-            return File(projectBuildDir).relativeTo(project.projectDir).toString()\n+        if (projectBuildDir.startsWith(projectDir.toString())) {\n+            return File(projectBuildDir).relativeTo(projectDir).toString()\n         }\n         return projectBuildDir\n     }\n-    override fun postinstallPackages(): List<String> = config.postinstallPackages.get()\n+\n+    override fun postinstallPackages(): List<String> =\n+        config.postinstallPackages.get()\n \n     override fun isFrontendHotdeploy(): Boolean = config.frontendHotdeploy.get()\n \n@@ -203,7 +265,8 @@ internal class GradlePluginAdapter(\n \n     override fun skipDevBundleBuild(): Boolean = config.skipDevBundleBuild.get()\n \n-    override fun forceProductionBuild(): Boolean = config.forceProductionBuild.get()\n+    override fun forceProductionBuild(): Boolean =\n+        config.forceProductionBuild.get()\n \n     override fun compressBundle(): Boolean {\n         // The compress bundle was decided to not be configurable as there is no\n@@ -212,36 +275,41 @@ internal class GradlePluginAdapter(\n         return true\n     }\n \n-    override fun isPrepareFrontendCacheDisabled(): Boolean = config.alwaysExecutePrepareFrontend.get()\n+    override fun isPrepareFrontendCacheDisabled(): Boolean =\n+        config.alwaysExecutePrepareFrontend.get()\n \n     override fun isReactEnabled(): Boolean = config.reactEnable.get()\n \n-    override fun applicationIdentifier(): String = config.applicationIdentifier.get()\n+    override fun applicationIdentifier(): String =\n+        config.applicationIdentifier.get()\n \n-    override fun isNpmExcludeWebComponents(): Boolean = config.npmExcludeWebComponents.get()\n+    override fun isNpmExcludeWebComponents(): Boolean =\n+        config.npmExcludeWebComponents.get()\n \n     override fun checkRuntimeDependency(\n         groupId: String,\n         artifactId: String,\n         missingDependencyMessageConsumer: Consumer<String>?\n     ): Boolean {\n-        val dependencyAbsent = project.configurations.getByName(config.dependencyScope.get())\n-            .resolvedConfiguration?.resolvedArtifacts?.filter {\n-                groupId == it.moduleVersion.id.group && artifactId == it.moduleVersion.id.name\n-            }?.isEmpty() ?: true\n+        val dependencyAbsent = resolvedArtifacts.get().none {\n+            groupId == it.group && artifactId == it.name\n+        }\n         if (dependencyAbsent && missingDependencyMessageConsumer != null) {\n-            missingDependencyMessageConsumer.accept(\"\"\"\n+            missingDependencyMessageConsumer.accept(\n+                \"\"\"\n                 The dependency ${groupId}:${artifactId} has not been found in the project configuration.\n                 Please add the following dependency to your project configuration:\n                 \n                 dependencies {\n                     runtimeOnly(\"${groupId}:${artifactId}\")\n                 }                \n-            \"\"\".trimIndent())\n+            \"\"\".trimIndent()\n+            )\n         }\n         return dependencyAbsent\n     }\n \n     override fun frontendExtraFileExtensions(): List<String> =\n         config.frontendExtraFileExtensions.get()\n+\n }\n\ndiff --git a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/PrepareFrontendInputProperties.kt b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/PrepareFrontendInputProperties.kt\nindex 7d68b67f820..e2d080a2c30 100644\n--- a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/PrepareFrontendInputProperties.kt\n+++ b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/PrepareFrontendInputProperties.kt\n@@ -15,20 +15,16 @@\n  */\n package com.vaadin.gradle\n \n-import com.vaadin.flow.server.frontend.FrontendTools\n-import com.vaadin.flow.server.frontend.FrontendToolsSettings\n-import com.vaadin.flow.server.frontend.FrontendUtils\n+import java.io.File\n+import com.vaadin.experimental.FeatureFlags\n+import org.gradle.api.provider.ListProperty\n+import org.gradle.api.provider.Provider\n import org.gradle.api.tasks.Input\n import org.gradle.api.tasks.InputDirectory\n import org.gradle.api.tasks.InputFile\n import org.gradle.api.tasks.Optional\n import org.gradle.api.tasks.PathSensitive\n import org.gradle.api.tasks.PathSensitivity\n-import java.io.File\n-import java.net.URI\n-import com.vaadin.experimental.FeatureFlags\n-import org.gradle.api.provider.ListProperty\n-import org.gradle.api.provider.Provider\n \n /**\n  * Declaratively defines the inputs of the [VaadinPrepareFrontendTask]:\n@@ -36,151 +32,162 @@ import org.gradle.api.provider.Provider\n  * caching the results of vaadinPrepareFrontend task to not run it again if\n  * inputs are the same.\n  */\n-internal class PrepareFrontendInputProperties(private val config: PluginEffectiveConfiguration) {\n-    private val tools: Provider<FrontendTools> = initialiseFrontendToolsSettings()\n+internal class PrepareFrontendInputProperties(\n+    adapter: GradlePluginAdapter,\n+    private val toolsService: FrontendToolService\n+) {\n+\n+    private val config = adapter.config\n \n     @Input\n-    public fun getProductionMode(): Provider<Boolean> = config.productionMode\n+    fun getProductionMode(): Provider<Boolean> = config.productionMode\n \n     @Input\n     @Optional\n-    public fun getWebpackOutputDirectory(): Provider<String> = config.webpackOutputDirectory\n-        .filterExists()\n-        .absolutePath\n+    fun getWebpackOutputDirectory(): Provider<String> =\n+        config.webpackOutputDirectory\n+            .filterExists()\n+            .absolutePath\n \n     @Input\n-    public fun getNpmFolder(): Provider<String> = config.npmFolder.absolutePath\n+    fun getNpmFolder(): Provider<String> = config.npmFolder.absolutePath\n \n     @Input\n-    public fun getFrontendDirectory(): Provider<String> = config.frontendDirectory.absolutePath\n+    fun getFrontendDirectory(): Provider<String> = config.frontendDirectory.absolutePath\n \n     @Input\n-    public fun getGenerateBundle(): Provider<Boolean> = config.generateBundle\n+    fun getGenerateBundle(): Provider<Boolean> = config.generateBundle\n \n     @Input\n-    public fun getRunNpmInstall(): Provider<Boolean> = config.runNpmInstall\n+    fun getRunNpmInstall(): Provider<Boolean> = config.runNpmInstall\n \n     @Input\n-    public fun getGenerateEmbeddableWebComponent(): Provider<Boolean> = config.generateEmbeddableWebComponents\n+    fun getGenerateEmbeddableWebComponent(): Provider<Boolean> =\n+        config.generateEmbeddableWebComponents\n \n     @InputDirectory\n     @Optional\n     @PathSensitive(PathSensitivity.ABSOLUTE)\n-    public fun getFrontendResourcesDirectory(): Provider<File> = config.frontendResourcesDirectory.filterExists()\n+    fun getFrontendResourcesDirectory(): Provider<File> =\n+        config.frontendResourcesDirectory.filterExists()\n \n     @Input\n-    public fun getOptimizeBundle(): Provider<Boolean> = config.optimizeBundle\n+    fun getOptimizeBundle(): Provider<Boolean> = config.optimizeBundle\n \n     @Input\n-    public fun getPnpmEnable(): Provider<Boolean> = config.pnpmEnable\n+    fun getPnpmEnable(): Provider<Boolean> = config.pnpmEnable\n \n     @Input\n-    public fun getUseGlobalPnpm(): Provider<Boolean> = config.useGlobalPnpm\n+    fun getUseGlobalPnpm(): Provider<Boolean> = config.useGlobalPnpm\n \n     @Input\n-    public fun getRequireHomeNodeExec(): Provider<Boolean> = config.requireHomeNodeExec\n+    fun getRequireHomeNodeExec(): Provider<Boolean> =\n+        config.requireHomeNodeExec\n \n     @Input\n-    public fun getEagerServerLoad(): Provider<Boolean> = config.eagerServerLoad\n+    fun getEagerServerLoad(): Provider<Boolean> = config.eagerServerLoad\n \n     @InputFile\n     @Optional\n     @PathSensitive(PathSensitivity.NONE)\n-    public fun getApplicationProperties(): Provider<File> = config.applicationProperties.filterExists()\n+    fun getApplicationProperties(): Provider<File> =\n+        config.applicationProperties.filterExists()\n \n     @InputFile\n     @Optional\n     @PathSensitive(PathSensitivity.ABSOLUTE)\n-    public fun getOpenApiJsonFile(): Provider<File> = config.openApiJsonFile.filterExists()\n+    fun getOpenApiJsonFile(): Provider<File> =\n+        config.openApiJsonFile.filterExists()\n \n     @InputFile\n     @Optional\n     @PathSensitive(PathSensitivity.ABSOLUTE)\n-    public fun getFeatureFlagsFile(): Provider<File> = config.javaResourceFolder\n+    fun getFeatureFlagsFile(): Provider<File> = config.javaResourceFolder\n         .map { it.resolve(FeatureFlags.PROPERTIES_FILENAME) }\n         .filterExists()\n \n     @Input\n-    public fun getJavaSourceFolder(): Provider<String> = config.javaSourceFolder.absolutePath\n+    fun getJavaSourceFolder(): Provider<String> =\n+        config.javaSourceFolder.absolutePath\n \n     @Input\n-    public fun getJavaResourceFolder(): Provider<String> = config.javaResourceFolder.absolutePath\n+    fun getJavaResourceFolder(): Provider<String> =\n+        config.javaResourceFolder.absolutePath\n \n     @Input\n-    public fun getGeneratedTsFolder(): Provider<String> = config.generatedTsFolder.absolutePath\n+    fun getGeneratedTsFolder(): Provider<String> =\n+        config.generatedTsFolder.absolutePath\n \n     @Input\n-    public fun getNodeVersion(): Provider<String> = config.nodeVersion\n+    fun getNodeVersion(): Provider<String> = config.nodeVersion\n \n     @Input\n-    public fun getNodeDownloadRoot(): Provider<String> = config.nodeDownloadRoot\n+    fun getNodeDownloadRoot(): Provider<String> = config.nodeDownloadRoot\n \n     @Input\n-    public fun getNodeAutoUpdate(): Provider<Boolean> = config.nodeAutoUpdate\n+    fun getNodeAutoUpdate(): Provider<Boolean> = config.nodeAutoUpdate\n \n     @Input\n-    public fun getProjectBuildDir(): Provider<String> = config.projectBuildDir\n+    fun getProjectBuildDir(): Provider<String> = config.projectBuildDir\n \n     @Input\n-    public fun getPostInstallPackages(): ListProperty<String> = config.postinstallPackages\n+    fun getPostInstallPackages(): ListProperty<String> =\n+        config.postinstallPackages\n \n     @Input\n-    public fun getFrontendHotdeploy(): Provider<Boolean> = config.frontendHotdeploy\n+    fun getFrontendHotdeploy(): Provider<Boolean> = config.frontendHotdeploy\n \n     @Input\n-    public fun getCiBuild(): Provider<Boolean> = config.ciBuild\n+    fun getCiBuild(): Provider<Boolean> = config.ciBuild\n \n     @Input\n-    public fun getSkipDevBundleBuild(): Provider<Boolean> = config.skipDevBundleBuild\n+    fun getSkipDevBundleBuild(): Provider<Boolean> =\n+        config.skipDevBundleBuild\n \n     @Input\n-    public fun getForceProductionBuild(): Provider<Boolean> = config.forceProductionBuild\n+    fun getForceProductionBuild(): Provider<Boolean> =\n+        config.forceProductionBuild\n \n     @Input\n-    public fun getReactEnable(): Provider<Boolean> = config.reactEnable\n+    fun getReactEnable(): Provider<Boolean> = config.reactEnable\n \n     @Input\n-    public fun getFrontendExtraFileExtensions(): ListProperty<String> = config.frontendExtraFileExtensions\n+    fun getFrontendExtraFileExtensions(): ListProperty<String> =\n+        config.frontendExtraFileExtensions\n \n     @Input\n-    public fun getApplicationIdentifier(): Provider<String> = config.applicationIdentifier\n+    fun getApplicationIdentifier(): Provider<String> =\n+        config.applicationIdentifier\n \n     @Input\n-    public fun getNpmExcludeWebComponents(): Provider<Boolean> = config.npmExcludeWebComponents\n+    fun getNpmExcludeWebComponents(): Provider<Boolean> =\n+        config.npmExcludeWebComponents\n \n     @Input\n     @Optional\n-    public fun getNodeExecutablePath(): Provider<String> = tools\n-        .mapOrNull { it.nodeBinary }\n-        .filterExists()\n+    fun getNodeExecutablePath(): Provider<String> =\n+        toolsService.toolsProperty { it.nodeBinary }\n+            .filterExists()\n \n     @Input\n     @Optional\n-    public fun getNpmExecutablePath(): Provider<String> = tools.map { tools ->\n-        val npmExecutable = tools.npmExecutable ?: listOf()\n-        npmExecutable.joinToString(\" \")\n-    }\n+    fun getNpmExecutablePath(): Provider<String> =\n+        toolsService.toolsProperty { tools ->\n+            val npmExecutable = tools.npmExecutable ?: listOf()\n+            npmExecutable.joinToString(\" \")\n+        }\n+\n \n     @Input\n     @Optional\n-    public fun getPnpmExecutablePath(): Provider<String> = config.pnpmEnable.map { pnpmEnable: Boolean ->\n-        if (!pnpmEnable) {\n-            return@map \"\"\n-        }\n-        val pnpmExecutable = tools.get().pnpmExecutable ?: listOf()\n-        pnpmExecutable.joinToString(\" \")\n-    }\n-\n-    private fun initialiseFrontendToolsSettings(): Provider<FrontendTools> = config.npmFolder.map { npmFolder: File ->\n-        val settings = FrontendToolsSettings(npmFolder.absolutePath) {\n-            FrontendUtils.getVaadinHomeDirectory()\n-                .absolutePath\n-        }\n-        settings.nodeDownloadRoot = URI(config.nodeDownloadRoot.get())\n-        settings.isForceAlternativeNode = config.requireHomeNodeExec.get()\n-        settings.isUseGlobalPnpm = config.useGlobalPnpm.get()\n-        settings.isAutoUpdate = config.nodeAutoUpdate.get()\n-        settings.nodeVersion = config.nodeVersion.get()\n-        FrontendTools(settings)\n-    }\n+    fun getPnpmExecutablePath(): Provider<String> =\n+        config.pnpmEnable.filterBy {\n+            it\n+        }.flatMap {\n+            toolsService.toolsProperty { tools ->\n+                val pnpmExecutable = tools.pnpmExecutable ?: listOf()\n+                pnpmExecutable.joinToString(\" \")\n+            }\n+        }.orElse(\"\")\n+\n }\n\ndiff --git a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/PrepareFrontendOutputProperties.kt b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/PrepareFrontendOutputProperties.kt\nindex 7debb460c86..5a478213926 100644\n--- a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/PrepareFrontendOutputProperties.kt\n+++ b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/PrepareFrontendOutputProperties.kt\n@@ -15,14 +15,13 @@\n  */\n package com.vaadin.gradle\n \n+import java.io.File\n import com.vaadin.flow.plugin.base.BuildFrontendUtil\n import com.vaadin.flow.server.Constants\n import com.vaadin.flow.server.frontend.FrontendUtils\n-import org.gradle.api.Project\n import org.gradle.api.provider.Property\n import org.gradle.api.tasks.OutputDirectory\n import org.gradle.api.tasks.OutputFile\n-import java.io.File\n \n /**\n  * Declaratively defines the outputs of the [VaadinPrepareFrontendTask]:\n@@ -31,49 +30,44 @@ import java.io.File\n  * of vaadinPrepareFrontend task to not run it again if inputs are the same.\n  */\n internal class PrepareFrontendOutputProperties(\n-    private val project: Project,\n-    private val config: PluginEffectiveConfiguration,\n+    adapter: GradlePluginAdapter\n ) {\n \n+    private val config = adapter.config\n+    private val projectDir = config.projectDir\n+    private val generatedTsFolder =\n+        BuildFrontendUtil.getGeneratedFrontendDirectory(adapter)\n+    private val resourceOutputDirectory = config.resourceOutputDirectory\n+\n     @OutputFile\n-    public fun getPackageJson(): File {\n-        return File(project.projectDir, Constants.PACKAGE_JSON)\n-    }\n+    fun getPackageJson(): File = File(projectDir, Constants.PACKAGE_JSON)\n \n     @OutputFile\n-    public fun getPackageLockJson(): File {\n-        return File(project.projectDir, Constants.PACKAGE_LOCK_JSON)\n-    }\n+    fun getPackageLockJson(): File =\n+        File(projectDir, Constants.PACKAGE_LOCK_JSON)\n \n     @OutputFile\n-    public fun getPackageLockYaml(): File {\n-        return File(project.projectDir, Constants.PACKAGE_LOCK_YAML)\n-    }\n+    fun getPackageLockYaml(): File =\n+        File(projectDir, Constants.PACKAGE_LOCK_YAML)\n \n     @OutputFile\n-    public fun getViteConfig(): File {\n-        return File(project.projectDir, FrontendUtils.VITE_CONFIG)\n-    }\n+    fun getViteConfig(): File =\n+        File(projectDir, FrontendUtils.VITE_CONFIG)\n \n     @OutputFile\n-    public fun getViteGeneratedConfig(): File {\n-        return File(project.projectDir, FrontendUtils.VITE_GENERATED_CONFIG)\n-    }\n+    fun getViteGeneratedConfig(): File =\n+        File(projectDir, FrontendUtils.VITE_GENERATED_CONFIG)\n \n     @OutputFile\n-    public fun getTsConfig(): File {\n-        return File(project.projectDir, \"tsconfig.json\")\n-    }\n+    fun getTsConfig(): File = File(projectDir, \"tsconfig.json\")\n \n     @OutputFile\n-    public fun getTsDefinition(): File {\n-        return File(project.projectDir, \"types.d.ts\")\n-    }\n+    fun getTsDefinition(): File = File(projectDir, \"types.d.ts\")\n \n     @OutputDirectory\n-    public fun getGeneratedTsFolder(): File =\n-            BuildFrontendUtil.getGeneratedFrontendDirectory(GradlePluginAdapter(project, config, true))\n+    fun getGeneratedTsFolder(): File = generatedTsFolder\n \n     @OutputDirectory\n-    public fun getResourceOutputDirectory(): Property<File> = config.resourceOutputDirectory\n+    fun getResourceOutputDirectory(): Property<File> =\n+        resourceOutputDirectory\n }\n\ndiff --git a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinBuildFrontendTask.kt b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinBuildFrontendTask.kt\nindex aff895f7359..8df74c8cf40 100644\n--- a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinBuildFrontendTask.kt\n+++ b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinBuildFrontendTask.kt\n@@ -22,6 +22,8 @@ import com.vaadin.flow.server.frontend.FrontendUtils\n import com.vaadin.flow.server.frontend.TaskCleanFrontendFiles\n import com.vaadin.pro.licensechecker.LicenseChecker\n import org.gradle.api.DefaultTask\n+import org.gradle.api.provider.Property\n+import org.gradle.api.tasks.Internal\n import org.gradle.api.tasks.TaskAction\n import org.gradle.api.tasks.bundling.Jar\n \n@@ -40,9 +42,10 @@ import org.gradle.api.tasks.bundling.Jar\n  * * Update [FrontendUtils.WEBPACK_CONFIG] file.\n  *\n  */\n-public open class VaadinBuildFrontendTask : DefaultTask() {\n-    private val config: PluginEffectiveConfiguration =\n-        PluginEffectiveConfiguration.get(project)\n+public abstract class VaadinBuildFrontendTask : DefaultTask() {\n+\n+    @get:Internal\n+    internal abstract val adapter: Property<GradlePluginAdapter>\n \n     init {\n         group = \"Vaadin\"\n@@ -64,30 +67,34 @@ public open class VaadinBuildFrontendTask : DefaultTask() {\n         }\n     }\n \n+    internal fun configure(config: PluginEffectiveConfiguration) {\n+        adapter.set(GradlePluginAdapter(this, config, false))\n+    }\n+\n     @TaskAction\n     public fun vaadinBuildFrontend() {\n+        val config = adapter.get().config\n         logger.info(\"Running the vaadinBuildFrontend task with effective configuration $config\")\n-        val adapter = GradlePluginAdapter(project, config, false)\n         // sanity check\n-        val tokenFile = BuildFrontendUtil.getTokenFile(adapter)\n+        val tokenFile = BuildFrontendUtil.getTokenFile(adapter.get())\n         check(tokenFile.exists()) { \"token file $tokenFile doesn't exist!\" }\n \n         val cleanTask = TaskCleanFrontendFiles(config.npmFolder.get(),\n-                BuildFrontendUtil.getGeneratedFrontendDirectory(adapter), adapter.classFinder\n+                BuildFrontendUtil.getGeneratedFrontendDirectory(adapter.get()), adapter.get().classFinder\n         )\n-        BuildFrontendUtil.runNodeUpdater(adapter)\n+        BuildFrontendUtil.runNodeUpdater(adapter.get())\n \n-        if (adapter.generateBundle() && BundleValidationUtil.needsBundleBuild\n-                (adapter.servletResourceOutputDirectory())) {\n-            BuildFrontendUtil.runFrontendBuild(adapter)\n+        if (adapter.get().generateBundle() && BundleValidationUtil.needsBundleBuild\n+                (adapter.get().servletResourceOutputDirectory())) {\n+            BuildFrontendUtil.runFrontendBuild(adapter.get())\n             if (cleanFrontendFiles()) {\n                 cleanTask.execute()\n             }\n         }\n         LicenseChecker.setStrictOffline(true)\n-        val licenseRequired = BuildFrontendUtil.validateLicenses(adapter)\n+        val licenseRequired = BuildFrontendUtil.validateLicenses(adapter.get())\n \n-        BuildFrontendUtil.updateBuildFile(adapter, licenseRequired)\n+        BuildFrontendUtil.updateBuildFile(adapter.get(), licenseRequired)\n     }\n \n \n@@ -104,9 +111,8 @@ public open class VaadinBuildFrontendTask : DefaultTask() {\n      * @return `true` to remove created files, `false` to keep the files\n      */\n     protected open fun cleanFrontendFiles(): Boolean {\n-        val adapter = GradlePluginAdapter(project, config, false)\n-        if (FrontendUtils.isHillaUsed(BuildFrontendUtil.getGeneratedFrontendDirectory(adapter),\n-                        adapter.classFinder)) {\n+        if (FrontendUtils.isHillaUsed(BuildFrontendUtil.getGeneratedFrontendDirectory(adapter.get()),\n+                        adapter.get().classFinder)) {\n             /*\n              * Override this to not clean generated frontend files after the\n              * build. For Hilla, the generated files can still be useful for\n@@ -115,6 +121,6 @@ public open class VaadinBuildFrontendTask : DefaultTask() {\n              */\n             return false\n         }\n-        return config.cleanFrontendFiles.get()\n+        return adapter.get().config.cleanFrontendFiles.get()\n     }\n }\n\ndiff --git a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinCleanTask.kt b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinCleanTask.kt\nindex 53774725348..38f278abfd6 100644\n--- a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinCleanTask.kt\n+++ b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinCleanTask.kt\n@@ -17,8 +17,9 @@ package com.vaadin.gradle\n \n import com.vaadin.flow.plugin.base.CleanFrontendUtil\n import com.vaadin.flow.plugin.base.CleanOptions\n-import com.vaadin.flow.server.frontend.FrontendUtils\n import org.gradle.api.DefaultTask\n+import org.gradle.api.provider.Property\n+import org.gradle.api.tasks.Internal\n import org.gradle.api.tasks.TaskAction\n \n /**\n@@ -40,9 +41,7 @@ import org.gradle.api.tasks.TaskAction\n  * the rest of the files will be re-created by Vaadin Servlet, simply by running the application\n  * in the development mode.\n  */\n-public open class VaadinCleanTask : DefaultTask() {\n-    private val config: PluginEffectiveConfiguration =\n-        PluginEffectiveConfiguration.get(project)\n+public abstract class VaadinCleanTask : DefaultTask() {\n \n     init {\n         group = \"Vaadin\"\n@@ -52,10 +51,15 @@ public open class VaadinCleanTask : DefaultTask() {\n         dependsOn(\"clean\")\n     }\n \n+    @get:Internal\n+    internal abstract val adapter: Property<GradlePluginAdapter>\n+\n+    internal fun configure(config: PluginEffectiveConfiguration) {\n+        adapter.set(GradlePluginAdapter(this, config, false))\n+    }\n+\n     @TaskAction\n     public fun clean() {\n-        CleanFrontendUtil.runCleaning(\n-                GradlePluginAdapter(project, config, false),\n-                CleanOptions())\n+        CleanFrontendUtil.runCleaning(adapter.get(), CleanOptions())\n     }\n }\n\ndiff --git a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinConvertPolymerTask.kt b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinConvertPolymerTask.kt\nindex 805ce3ff147..ccc08e98eb3 100644\n--- a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinConvertPolymerTask.kt\n+++ b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinConvertPolymerTask.kt\n@@ -17,33 +17,53 @@ package com.vaadin.gradle\n \n import com.vaadin.flow.plugin.base.ConvertPolymerCommand\n import org.gradle.api.DefaultTask\n-import org.gradle.api.Task\n-import org.gradle.api.artifacts.ProjectDependency\n+import org.gradle.api.Project\n+import org.gradle.api.provider.Property\n+import org.gradle.api.tasks.Internal\n import org.gradle.api.tasks.TaskAction\n \n /**\n  * This task converts Polymer-based source files into Lit.\n  * By default, the task tries to convert all `*.js` and `*.java` files.\n  */\n-public open class VaadinConvertPolymerTask : DefaultTask() {\n-\n-    private val config = PluginEffectiveConfiguration.get(project)\n+public abstract class VaadinConvertPolymerTask : DefaultTask() {\n \n     init {\n         group = \"Vaadin\"\n         description = \"converts Polymer-based source files into Lit.\"\n     }\n \n+    @get:Internal\n+    internal abstract val adapter: Property<GradlePluginAdapter>\n+\n+    @get:Internal\n+    internal abstract val useLit1Property: Property<Boolean>\n+\n+    @get:Internal\n+    internal abstract val disableOptionalChainingProperty: Property<Boolean>\n+\n+    @get:Internal\n+    internal abstract val pathProperty: Property<String>\n+\n+    internal fun configure(project: Project, config: PluginEffectiveConfiguration) {\n+        adapter.set(GradlePluginAdapter(this, config, false))\n+        useLit1Property.set(project.getBooleanProperty(\"useLit1\").orElse(false))\n+        disableOptionalChainingProperty.set(\n+            project.getBooleanProperty(\"disableOptionalChaining\").orElse(false)\n+        )\n+        pathProperty.set(project.providers.systemProperty(\"path\").orElse(\"\"))\n+    }\n+\n     @TaskAction\n     public fun vaadinConvertPolymer() {\n-        logger.info(\"Running the vaadinConvertPolymer task with effective configuration $config\")\n-        val adapter = GradlePluginAdapter(project, config, true)\n-\n-        val pathProperty: String = System.getProperty(\"path\") ?: \"\"\n-        val useLit1Property: Boolean = project.getBooleanProperty(\"useLit1\") ?: false\n-        val disableOptionalChainingProperty: Boolean = project.getBooleanProperty(\"disableOptionalChaining\") ?: false\n+        logger.info(\"Running the vaadinConvertPolymer task with effective configuration ${adapter.get().config}\")\n \n-        ConvertPolymerCommand(adapter, pathProperty, useLit1Property, disableOptionalChainingProperty)\n+        ConvertPolymerCommand(\n+            adapter.get(),\n+            pathProperty.get(),\n+            useLit1Property.get(),\n+            disableOptionalChainingProperty.get()\n+        )\n             .use { it.execute() }\n     }\n }\n\ndiff --git a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinFlowPluginExtension.kt b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinFlowPluginExtension.kt\nindex 6052d7a3325..27ee600e673 100644\n--- a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinFlowPluginExtension.kt\n+++ b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinFlowPluginExtension.kt\n@@ -15,11 +15,15 @@\n  */\n package com.vaadin.gradle\n \n-import com.vaadin.flow.plugin.base.BuildFrontendUtil\n+import java.io.File\n+import java.io.Serializable\n+import javax.inject.Inject\n import com.vaadin.flow.internal.StringUtil\n+import com.vaadin.flow.plugin.base.BuildFrontendUtil\n import com.vaadin.flow.server.Constants\n import com.vaadin.flow.server.InitParameters\n import com.vaadin.flow.server.frontend.FrontendTools\n+import com.vaadin.flow.server.frontend.FrontendToolsSettings\n import com.vaadin.flow.server.frontend.FrontendUtils\n import com.vaadin.flow.server.frontend.installer.NodeInstaller\n import com.vaadin.flow.server.frontend.installer.Platform\n@@ -30,9 +34,6 @@ import org.gradle.api.Project\n import org.gradle.api.provider.ListProperty\n import org.gradle.api.provider.Property\n import org.gradle.api.provider.Provider\n-import java.io.File\n-import java.nio.charset.StandardCharsets\n-import javax.inject.Inject\n \n public abstract class VaadinFlowPluginExtension @Inject constructor(private val project: Project) {\n     /**\n@@ -294,7 +295,12 @@ public abstract class VaadinFlowPluginExtension @Inject constructor(private val\n      */\n     public abstract val npmExcludeWebComponents: Property<Boolean>\n \n-    public fun filterClasspath(@DelegatesTo(value = ClasspathFilter::class, strategy = Closure.DELEGATE_FIRST) block: Closure<*>) {\n+    public fun filterClasspath(\n+        @DelegatesTo(\n+            value = ClasspathFilter::class,\n+            strategy = Closure.DELEGATE_FIRST\n+        ) block: Closure<*>\n+    ) {\n         block.delegate = classpathFilter\n         block.resolveStrategy = Closure.DELEGATE_FIRST\n         block.call()\n@@ -304,33 +310,60 @@ public abstract class VaadinFlowPluginExtension @Inject constructor(private val\n         block.execute(classpathFilter)\n     }\n \n-    public val effective: PluginEffectiveConfiguration get() = PluginEffectiveConfiguration.get(project)\n+    public val effective: PluginEffectiveConfiguration\n+        get() = PluginEffectiveConfiguration.get(project)\n \n     public companion object {\n         public fun get(project: Project): VaadinFlowPluginExtension =\n-                project.extensions.getByType(VaadinFlowPluginExtension::class.java)\n+            project.extensions.getByType(VaadinFlowPluginExtension::class.java)\n     }\n }\n \n public class PluginEffectiveConfiguration(\n-    private val project: Project,\n+    project: Project,\n     extension: VaadinFlowPluginExtension\n-) {\n+) :Serializable {\n+\n+    internal val projectDir = project.projectDir\n+    internal val projectName = project.name\n+\n     public val productionMode: Provider<Boolean> = extension.productionMode\n         .convention(false)\n-        .overrideWithSystemPropertyFlag(\"vaadin.productionMode\")\n+        .overrideWithSystemPropertyFlag(project, \"vaadin.productionMode\")\n \n     public val sourceSetName: Property<String> = extension.sourceSetName\n         .convention(\"main\")\n \n-    public val webpackOutputDirectory: Provider<File> = extension.webpackOutputDirectory\n-        .convention(sourceSetName.map { File(project.getBuildResourcesDir(it), Constants.VAADIN_WEBAPP_RESOURCES) })\n+    public val webpackOutputDirectory: Provider<File> =\n+        extension.webpackOutputDirectory\n+            .convention(sourceSetName.map {\n+                File(\n+                    project.getBuildResourcesDir(it),\n+                    Constants.VAADIN_WEBAPP_RESOURCES\n+                )\n+            })\n \n     public val npmFolder: Provider<File> = extension.npmFolder\n         .convention(project.projectDir)\n \n     public val frontendDirectory: Provider<File> = extension.frontendDirectory\n-        .convention(File(project.projectDir, FrontendUtils.DEFAULT_FRONTEND_DIR))\n+        .convention(\n+            File(\n+                project.projectDir,\n+                FrontendUtils.DEFAULT_FRONTEND_DIR\n+            )\n+        )\n+\n+    // Replacement for BuildFrontendUtil.getFrontendDirectory(adapter)\n+    // to avoid circular dependencies between PluginEffectiveConfiguration\n+    // and GradlePluginAdapter\n+    public val effectiveFrontendDirectory: Provider<File> =\n+        npmFolder.zip(frontendDirectory) { npmFolder, frontendDirectory ->\n+            FrontendUtils.getLegacyFrontendFolderIfExists(\n+                npmFolder,\n+                frontendDirectory\n+            )\n+        }\n \n     public val generateBundle: Provider<Boolean> = extension.generateBundle\n         .convention(true)\n@@ -338,39 +371,65 @@ public class PluginEffectiveConfiguration(\n     public val runNpmInstall: Provider<Boolean> = extension.runNpmInstall\n         .convention(true)\n \n-    public val generateEmbeddableWebComponents: Provider<Boolean> = extension.generateEmbeddableWebComponents\n-        .convention(true)\n+    public val generateEmbeddableWebComponents: Provider<Boolean> =\n+        extension.generateEmbeddableWebComponents\n+            .convention(true)\n \n-    public val frontendResourcesDirectory: Property<File> = extension.frontendResourcesDirectory\n-        .convention(File(project.projectDir, Constants.LOCAL_FRONTEND_RESOURCES_PATH))\n+    public val frontendResourcesDirectory: Property<File> =\n+        extension.frontendResourcesDirectory\n+            .convention(\n+                File(\n+                    project.projectDir,\n+                    Constants.LOCAL_FRONTEND_RESOURCES_PATH\n+                )\n+            )\n \n     public val optimizeBundle: Property<Boolean> = extension.optimizeBundle\n         .convention(true)\n \n     public val pnpmEnable: Provider<Boolean> = extension.pnpmEnable\n         .convention(Constants.ENABLE_PNPM_DEFAULT)\n-        .overrideWithSystemPropertyFlag(InitParameters.SERVLET_PARAMETER_ENABLE_PNPM)\n+        .overrideWithSystemPropertyFlag(\n+            project,\n+            InitParameters.SERVLET_PARAMETER_ENABLE_PNPM\n+        )\n \n     public val bunEnable: Provider<Boolean> = extension.bunEnable\n         .convention(Constants.ENABLE_BUN_DEFAULT)\n-        .overrideWithSystemPropertyFlag(InitParameters.SERVLET_PARAMETER_ENABLE_BUN)\n+        .overrideWithSystemPropertyFlag(\n+            project,\n+            InitParameters.SERVLET_PARAMETER_ENABLE_BUN\n+        )\n \n     public val useGlobalPnpm: Provider<Boolean> = extension.useGlobalPnpm\n         .convention(Constants.GLOBAL_PNPM_DEFAULT)\n-        .overrideWithSystemPropertyFlag(InitParameters.SERVLET_PARAMETER_GLOBAL_PNPM)\n+        .overrideWithSystemPropertyFlag(\n+            project,\n+            InitParameters.SERVLET_PARAMETER_GLOBAL_PNPM\n+        )\n \n-    public val requireHomeNodeExec: Property<Boolean> = extension.requireHomeNodeExec\n-        .convention(false)\n+    public val requireHomeNodeExec: Property<Boolean> =\n+        extension.requireHomeNodeExec\n+            .convention(false)\n \n     public val eagerServerLoad: Provider<Boolean> = extension.eagerServerLoad\n         .convention(false)\n-        .overrideWithSystemPropertyFlag(\"vaadin.eagerServerLoad\")\n+        .overrideWithSystemPropertyFlag(project, \"vaadin.eagerServerLoad\")\n \n-    public val applicationProperties: Property<File> = extension.applicationProperties\n-        .convention(File(project.projectDir, \"src/main/resources/application.properties\"))\n+    public val applicationProperties: Property<File> =\n+        extension.applicationProperties\n+            .convention(\n+                File(\n+                    project.projectDir,\n+                    \"src/main/resources/application.properties\"\n+                )\n+            )\n \n     public val openApiJsonFile: Property<File> = extension.openApiJsonFile\n-        .convention(project.layout.buildDirectory.file(\"generated-resources/openapi.json\").asFile())\n+        .convention(\n+            project.layout.buildDirectory.file(\"generated-resources/openapi.json\")\n+                .asFile()\n+        )\n \n     public val javaSourceFolder: Property<File> = extension.javaSourceFolder\n         .convention(File(project.projectDir, \"src/main/java\"))\n@@ -379,7 +438,7 @@ public class PluginEffectiveConfiguration(\n         .convention(File(project.projectDir, \"src/main/resources\"))\n \n     public val generatedTsFolder: Property<File> = extension.generatedTsFolder\n-        .convention(File(frontendDirectory.get(), FrontendUtils.GENERATED))\n+        .convention(frontendDirectory.map { File(it, FrontendUtils.GENERATED) })\n \n     public val nodeVersion: Property<String> = extension.nodeVersion\n         .convention(FrontendTools.DEFAULT_NODE_VERSION)\n@@ -390,14 +449,18 @@ public class PluginEffectiveConfiguration(\n     public val nodeAutoUpdate: Property<Boolean> = extension.nodeAutoUpdate\n         .convention(false)\n \n-    public val resourceOutputDirectory: Property<File> = extension.resourceOutputDirectory\n-        .convention(project.layout.buildDirectory.dir(\"vaadin-generated\").asFile())\n+    public val resourceOutputDirectory: Property<File> =\n+        extension.resourceOutputDirectory\n+            .convention(\n+                project.layout.buildDirectory.dir(\"vaadin-generated\").asFile()\n+            )\n \n     public val projectBuildDir: Property<String> = extension.projectBuildDir\n         .convention(project.layout.buildDirectory.map { it.asFile.toString() })\n \n-    public val postinstallPackages: ListProperty<String> = extension.postinstallPackages\n-        .convention(listOf())\n+    public val postinstallPackages: ListProperty<String> =\n+        extension.postinstallPackages\n+            .convention(listOf())\n \n     public val classpathFilter: ClasspathFilter = extension.classpathFilter\n \n@@ -410,53 +473,83 @@ public class PluginEffectiveConfiguration(\n             }\n         })\n \n-    public val processResourcesTaskName: Property<String> = extension.processResourcesTaskName\n-        .convention(sourceSetName.map {\n-            if (it == \"main\") {\n-                \"processResources\"\n-            } else {\n-                \"process${it.replaceFirstChar(Char::titlecase)}Resources\"\n-            }\n-        })\n-\n-    public val frontendHotdeploy: Provider<Boolean> = extension.frontendHotdeploy\n-        .convention(FrontendUtils.isHillaUsed(BuildFrontendUtil.getFrontendDirectory(GradlePluginAdapter(project, this, true))))\n-        .overrideWithSystemPropertyFlag(InitParameters.FRONTEND_HOTDEPLOY)\n+    public val processResourcesTaskName: Property<String> =\n+        extension.processResourcesTaskName\n+            .convention(sourceSetName.map {\n+                if (it == \"main\") {\n+                    \"processResources\"\n+                } else {\n+                    \"process${it.replaceFirstChar(Char::titlecase)}Resources\"\n+                }\n+            })\n+\n+    public val frontendHotdeploy: Provider<Boolean> =\n+        extension.frontendHotdeploy\n+            .convention(effectiveFrontendDirectory.map {\n+                FrontendUtils.isHillaUsed(it)\n+            })\n+            .overrideWithSystemPropertyFlag(\n+                project,\n+                InitParameters.FRONTEND_HOTDEPLOY\n+            )\n \n     public val ciBuild: Provider<Boolean> = extension.ciBuild\n         .convention(false)\n-        .overrideWithSystemPropertyFlag(InitParameters.CI_BUILD)\n+        .overrideWithSystemPropertyFlag(project, InitParameters.CI_BUILD)\n \n-    public val skipDevBundleBuild: Property<Boolean> = extension.skipDevBundleBuild\n-        .convention(false)\n+    public val skipDevBundleBuild: Property<Boolean> =\n+        extension.skipDevBundleBuild\n+            .convention(false)\n \n-    public val forceProductionBuild: Provider<Boolean> = extension.forceProductionBuild\n-        .convention(false)\n-        .overrideWithSystemPropertyFlag(InitParameters.FORCE_PRODUCTION_BUILD)\n+    public val forceProductionBuild: Provider<Boolean> =\n+        extension.forceProductionBuild\n+            .convention(false)\n+            .overrideWithSystemPropertyFlag(\n+                project,\n+                InitParameters.FORCE_PRODUCTION_BUILD\n+            )\n \n-    public val alwaysExecutePrepareFrontend: Property<Boolean> = extension.alwaysExecutePrepareFrontend\n-        .convention(false)\n+    public val alwaysExecutePrepareFrontend: Property<Boolean> =\n+        extension.alwaysExecutePrepareFrontend\n+            .convention(false)\n \n     public val reactEnable: Provider<Boolean> = extension.reactEnable\n-        .convention(FrontendUtils.isReactRouterRequired(BuildFrontendUtil.getFrontendDirectory(GradlePluginAdapter(project, this, true))))\n-        .overrideWithSystemPropertyFlag(InitParameters.REACT_ENABLE)\n+        .convention(effectiveFrontendDirectory.map {\n+            FrontendUtils.isReactRouterRequired(it)\n+        })\n+        .overrideWithSystemPropertyFlag(project, InitParameters.REACT_ENABLE)\n \n-    public val cleanFrontendFiles: Property<Boolean> = extension.cleanFrontendFiles\n+    public val cleanFrontendFiles: Property<Boolean> =\n+        extension.cleanFrontendFiles\n             .convention(true)\n \n-    public val applicationIdentifier: Provider<String> = extension.applicationIdentifier\n-        .convention(\n-            \"app-\" + StringUtil.getHash(project.name,\n-                java.nio.charset.StandardCharsets.UTF_8\n-            ))\n-        .overrideWithSystemProperty(\"vaadin.${InitParameters.APPLICATION_IDENTIFIER}\")\n+    public val applicationIdentifier: Provider<String> =\n+        extension.applicationIdentifier\n+            .convention(\n+                \"app-\" + StringUtil.getHash(\n+                    project.name,\n+                    java.nio.charset.StandardCharsets.UTF_8\n+                )\n+            )\n+            .overrideWithSystemProperty(\n+                project,\n+                \"vaadin.${InitParameters.APPLICATION_IDENTIFIER}\"\n+            )\n \n     // TODO: Possibly get value from system param InitParameters.FRONTEND_EXTRA_EXTENSIONS\n-    public val frontendExtraFileExtensions: ListProperty<String> = extension.frontendExtraFileExtensions\n+    public val frontendExtraFileExtensions: ListProperty<String> =\n+        extension.frontendExtraFileExtensions\n             .convention(listOf())\n \n     public val npmExcludeWebComponents: Provider<Boolean> = extension\n-            .npmExcludeWebComponents.convention(false)\n+        .npmExcludeWebComponents.convention(false)\n+\n+    public val toolsSettings: Provider<FrontendToolsSettings> = npmFolder.map {\n+        FrontendToolsSettings(it.absolutePath) {\n+            FrontendUtils.getVaadinHomeDirectory()\n+                .absolutePath\n+        }\n+    }\n \n     /**\n      * Finds the value of a boolean property. It searches in gradle and system properties.\n@@ -467,9 +560,12 @@ public class PluginEffectiveConfiguration(\n      * @return a new provider of the value, which either takes the original value if the system/gradle property is not present,\n      * `true` if it's defined or if it's set to \"true\" and `false` otherwise.\n      */\n-    private fun Provider<Boolean>.overrideWithSystemPropertyFlag(propertyName: String) : Provider<Boolean> = map { originalValue ->\n-        project.getBooleanProperty(propertyName) ?: originalValue\n-    }\n+    private fun Provider<Boolean>.overrideWithSystemPropertyFlag(\n+        project: Project,\n+        propertyName: String\n+    ): Provider<Boolean> =\n+        project.getBooleanProperty(propertyName).orElse(this)\n+\n     /**\n      * Finds the value of a string property. It searches in gradle and system properties.\n      *\n@@ -478,9 +574,11 @@ public class PluginEffectiveConfiguration(\n      * @param propertyName the property name\n      * @return a new provider of the value, which either takes the original value if the system/gradle property is not present.\n      */\n-    private fun Provider<String>.overrideWithSystemProperty(propertyName: String) : Provider<String> = map { originalValue ->\n-        project.getStringProperty(propertyName) ?: originalValue\n-    }\n+    private fun Provider<String>.overrideWithSystemProperty(\n+        project: Project,\n+        propertyName: String\n+    ): Provider<String> =\n+        project.getStringProperty(propertyName).orElse(this)\n \n     override fun toString(): String = \"PluginEffectiveConfiguration(\" +\n             \"productionMode=${productionMode.get()}, \" +\n@@ -522,8 +620,23 @@ public class PluginEffectiveConfiguration(\n             \"frontendExtraFileExtensions=${frontendExtraFileExtensions.get()},\" +\n             \"npmExcludeWebComponents=${npmExcludeWebComponents.get()}\" +\n             \")\"\n+\n     public companion object {\n         public fun get(project: Project): PluginEffectiveConfiguration =\n-            PluginEffectiveConfiguration(project, VaadinFlowPluginExtension.get(project))\n+            PluginEffectiveConfiguration(\n+                project,\n+                VaadinFlowPluginExtension.get(project)\n+            )\n+\n+        /*\n+        public fun toolsSettings(extension: VaadinFlowPluginExtension): Provider<FrontendToolsSettings> =\n+            extension.npmFolder.map {\n+                FrontendToolsSettings(it.absolutePath) {\n+                    FrontendUtils.getVaadinHomeDirectory()\n+                        .absolutePath\n+                }\n+            }\n+         */\n+\n     }\n }\n\ndiff --git a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinPlugin.kt b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinPlugin.kt\nindex aaf89ed1e23..d1950298959 100644\n--- a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinPlugin.kt\n+++ b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinPlugin.kt\n@@ -42,16 +42,24 @@ public class VaadinPlugin : Plugin<Project> {\n             extensionName = \"vaadinPlatform\"\n         }\n         project.extensions.create(extensionName, VaadinFlowPluginExtension::class.java)\n+        val config = PluginEffectiveConfiguration.get(project)\n \n         project.tasks.apply {\n-            register(\"vaadinClean\", VaadinCleanTask::class.java)\n-            register(\"vaadinPrepareFrontend\", VaadinPrepareFrontendTask::class.java)\n-            register(\"vaadinBuildFrontend\", VaadinBuildFrontendTask::class.java)\n-            register(\"vaadinConvertPolymer\", VaadinConvertPolymerTask::class.java)\n+            register(\"vaadinClean\", VaadinCleanTask::class.java) {\n+                it.configure(config)\n+            }\n+            register(\"vaadinPrepareFrontend\", VaadinPrepareFrontendTask::class.java) {\n+                it.configure(config)\n+            }\n+            register(\"vaadinBuildFrontend\", VaadinBuildFrontendTask::class.java) {\n+                it.configure(config)\n+            }\n+            register(\"vaadinConvertPolymer\", VaadinConvertPolymerTask::class.java) {\n+                it.configure(project, config)\n+            }\n         }\n \n         project.afterEvaluate {\n-            val config = PluginEffectiveConfiguration.get(it)\n \n             // add a new source-set folder for generated stuff, by default `vaadin-generated`\n             it.getSourceSet(config.sourceSetName.get()).resources.srcDirs(\n@@ -70,13 +78,20 @@ public class VaadinPlugin : Plugin<Project> {\n                 }\n             }\n \n+            val toolsService = project.gradle.sharedServices.registerIfAbsent(\n+                \"vaadinTools\",\n+                FrontendToolService::class.java\n+            ) {\n+                it.parameters.getToolsSettings().set(config.toolsSettings)\n+            }\n+\n             // make sure all dependent projects have finished building their jars, otherwise\n             // the Vaadin classpath scanning will not work properly. See\n             // https://github.com/vaadin/vaadin-gradle-plugin/issues/38\n             // for more details.\n             project.tasks.getByName(\"vaadinPrepareFrontend\").dependsOn(\n                 project.configurations.getByName(config.dependencyScope.get()).jars\n-            )\n+            ).usesService(toolsService)\n \n             if (config.alwaysExecutePrepareFrontend.get()) {\n                 project.tasks.getByName(\"vaadinPrepareFrontend\")\n\ndiff --git a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinPrepareFrontendTask.kt b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinPrepareFrontendTask.kt\nindex 792a94fced0..0f7f65eabf0 100644\n--- a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinPrepareFrontendTask.kt\n+++ b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinPrepareFrontendTask.kt\n@@ -16,13 +16,14 @@\n package com.vaadin.gradle\n \n import com.vaadin.flow.plugin.base.BuildFrontendUtil\n-import groovy.lang.Closure\n import org.gradle.api.DefaultTask\n-import org.gradle.api.Task\n+import org.gradle.api.Project\n+import org.gradle.api.provider.Property\n+import org.gradle.api.services.ServiceReference\n import org.gradle.api.tasks.CacheableTask\n+import org.gradle.api.tasks.Internal\n import org.gradle.api.tasks.Nested\n import org.gradle.api.tasks.TaskAction\n-import kotlin.math.log\n \n /**\n  * This task checks that node and npm tools are installed, copies frontend\n@@ -34,37 +35,54 @@ import kotlin.math.log\n  * files) are up-to-date and have the same values as for previous build.\n  */\n @CacheableTask\n-public open class VaadinPrepareFrontendTask : DefaultTask() {\n+public abstract class VaadinPrepareFrontendTask : DefaultTask() {\n \n-    private val config = PluginEffectiveConfiguration.get(project)\n+    //private val config = PluginEffectiveConfiguration.get(project)\n+\n+    @ServiceReference\n+    internal abstract fun getSvc(): Property<FrontendToolService>\n+\n+    @get:Internal\n+    internal abstract val adapter: Property<GradlePluginAdapter>\n+\n+    internal fun configure(config: PluginEffectiveConfiguration) {\n+        adapter.set(GradlePluginAdapter(this, config, true))\n+    }\n \n     /**\n      * Defines an object containing all the inputs of this task.\n      */\n     @get:Nested\n-    internal val inputProperties = PrepareFrontendInputProperties(config)\n+    internal val inputProperties = adapter.zip(getSvc()) { adp, svc ->\n+        PrepareFrontendInputProperties(\n+            adp,\n+            svc\n+        )\n+    }\n \n     /**\n      * Defines an object containing all the outputs of this task.\n      */\n     @get:Nested\n-    internal val outputProperties = PrepareFrontendOutputProperties(project, config)\n+    internal val outputProperties =\n+        adapter.map { PrepareFrontendOutputProperties(it) }\n \n     init {\n         group = \"Vaadin\"\n-        description = \"checks that node and npm tools are installed, copies frontend resources available inside `.jar` dependencies to `node_modules`, and creates or updates `package.json` and `webpack.config.json` files.\"\n+        description =\n+            \"checks that node and npm tools are installed, copies frontend resources available inside `.jar` dependencies to `node_modules`, and creates or updates `package.json` and `webpack.config.json` files.\"\n         // Maven's task run in the LifecyclePhase.PROCESS_RESOURCES phase\n     }\n \n     @TaskAction\n     public fun vaadinPrepareFrontend() {\n+        //val adapter = GradlePluginAdapter(this, config, true)\n         // Remove Frontend/generated folder to get clean files copied/generated\n-        val adapter = GradlePluginAdapter(project, config, true)\n-        logger.debug(\"Running the vaadinPrepareFrontend task with effective configuration $config\")\n-        val tokenFile = BuildFrontendUtil.propagateBuildInfo(adapter)\n+        logger.debug(\"Running the vaadinPrepareFrontend task with effective configuration ${adapter.get().config}\")\n+        val tokenFile = BuildFrontendUtil.propagateBuildInfo(adapter.get())\n \n         logger.info(\"Generated token file $tokenFile\")\n         check(tokenFile.exists()) { \"token file $tokenFile doesn't exist!\" }\n-        BuildFrontendUtil.prepareFrontend(adapter)\n+        BuildFrontendUtil.prepareFrontend(adapter.get())\n     }\n }\n\ndiff --git a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinUtils.kt b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinUtils.kt\nindex 5a884ff9c5b..7b29d147210 100644\n--- a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinUtils.kt\n+++ b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinUtils.kt\n@@ -16,23 +16,16 @@\n package com.vaadin.gradle\n \n \n-import org.gradle.api.artifacts.Configuration\n-import org.gradle.api.file.FileCollection\n-import com.vaadin.flow.function.SerializableSupplier\n-import com.vaadin.flow.server.frontend.FrontendTools\n-import com.vaadin.flow.server.frontend.FrontendToolsSettings\n-import com.vaadin.flow.server.frontend.FrontendUtils\n+import java.io.File\n import org.gradle.api.Project\n+import org.gradle.api.artifacts.Configuration\n import org.gradle.api.file.Directory\n+import org.gradle.api.file.FileCollection\n import org.gradle.api.file.RegularFile\n import org.gradle.api.internal.provider.Providers\n import org.gradle.api.provider.Provider\n import org.gradle.api.tasks.SourceSet\n import org.gradle.api.tasks.SourceSetContainer\n-import java.io.File\n-import java.net.URI\n-import kotlin.contracts.ExperimentalContracts\n-import kotlin.contracts.contract\n \n /**\n  * Finds the value of a boolean property. It searches in gradle and system properties.\n@@ -44,22 +37,9 @@ import kotlin.contracts.contract\n  * @return `null` if the property is not present, `true` if it's defined or if it's set to \"true\"\n  * and `false` otherwise.\n  */\n-public fun Project.getBooleanProperty(propertyName: String) : Boolean? {\n-    if (System.getProperty(propertyName) != null) {\n-        val value: String = System.getProperty(propertyName)\n-        val valueBoolean: Boolean = value.isBlank() || value.toBoolean()\n-        logger.info(\"Set $propertyName to $valueBoolean because of System property $propertyName='$value'\")\n-        return valueBoolean\n-    }\n-    if (project.hasProperty(propertyName)) {\n-        val value: String = project.property(propertyName) as String\n-        val valueBoolean: Boolean = value.isBlank() || value.toBoolean()\n-        logger.info(\"Set $propertyName to $valueBoolean because of Gradle project property $propertyName='$value'\")\n-        return valueBoolean\n-    }\n-    return null\n-}\n-\n+public fun Project.getBooleanProperty(propertyName: String) : Provider<Boolean> =\n+    getStringProperty(propertyName)\n+        .map { it.isBlank() || it.toBoolean() }\n /**\n  * Finds the value of a string property. It searches in gradle and system properties.\n  *\n@@ -69,19 +49,10 @@ public fun Project.getBooleanProperty(propertyName: String) : Boolean? {\n  *\n  * @return the value of the property or `null` if the property is not present.\n  */\n-public fun Project.getStringProperty(propertyName: String) : String? {\n-    if (System.getProperty(propertyName) != null) {\n-        val value: String = System.getProperty(propertyName)\n-        logger.info(\"Set $propertyName to $value because of System property $propertyName='$value'\")\n-        return value\n-    }\n-    if (project.hasProperty(propertyName)) {\n-        val value: String = project.property(propertyName) as String\n-        logger.info(\"Set $propertyName to $value because of Gradle project property $propertyName='$value'\")\n-        return value\n-    }\n-    return null\n-}\n+public fun Project.getStringProperty(propertyName: String) : Provider<String> =\n+    providers.systemProperty(propertyName)\n+        .orElse(providers.gradleProperty(propertyName))\n+\n \n /**\n  * Allows Kotlin-based gradle scripts to be configured via the `vaadin{}` DSL block:\n",
    "test_patch": "diff --git a/flow-plugins/flow-gradle-plugin/src/functionalTest/kotlin/com/vaadin/gradle/MiscMultiModuleTest.kt b/flow-plugins/flow-gradle-plugin/src/functionalTest/kotlin/com/vaadin/gradle/MiscMultiModuleTest.kt\nindex 2ea84cce064..887349220de 100644\n--- a/flow-plugins/flow-gradle-plugin/src/functionalTest/kotlin/com/vaadin/gradle/MiscMultiModuleTest.kt\n+++ b/flow-plugins/flow-gradle-plugin/src/functionalTest/kotlin/com/vaadin/gradle/MiscMultiModuleTest.kt\n@@ -24,7 +24,9 @@ import org.junit.Test\n import java.io.File\n import java.nio.file.Files\n import kotlin.io.path.writeText\n+import kotlin.test.assertContains\n import kotlin.test.expect\n+import org.gradle.testkit.runner.TaskOutcome\n \n class MiscMultiModuleTest : AbstractGradleTest() {\n     /**\n@@ -228,4 +230,56 @@ class MiscMultiModuleTest : AbstractGradleTest() {\n         expect(\"MY_APP_ID\") { tokenFileContent.getString(InitParameters.APPLICATION_IDENTIFIER) }\n     }\n \n+    @Test\n+    fun testPrepareFrontend_configurationCache() {\n+        testProject.settingsFile.writeText(\"include 'lib', 'web'\")\n+        testProject.buildFile.writeText(\"\"\"\n+            plugins {\n+                id 'java'\n+                id 'com.vaadin' apply false\n+            }\n+            allprojects {\n+                repositories {\n+                    mavenLocal()\n+                    mavenCentral()\n+                    maven { url = 'https://maven.vaadin.com/vaadin-prereleases' }\n+                }\n+            }\n+            project(':lib') {\n+                apply plugin: 'java'\n+            }\n+        \"\"\".trimIndent())\n+        testProject.newFolder(\"lib\")\n+        val webFolder = testProject.newFolder(\"web\")\n+        // Create frontend folder, that will otherwise be created by the first\n+        // execution of vaadinPrepareFrontend, invalidating the cache on the\n+        // second run\n+        webFolder.resolve(\"src/main/frontend\").mkdirs()\n+        val webBuildFile = Files.createFile(webFolder.toPath().resolve(\"build.gradle\"))\n+        webBuildFile.writeText(\"\"\"\n+            apply plugin: 'war'\n+            apply plugin: 'com.vaadin'\n+            \n+            dependencies {\n+                implementation project(':lib')\n+                implementation(\"com.vaadin:flow:$flowVersion\")\n+            }\n+\n+            vaadin {\n+                nodeAutoUpdate = true // test the vaadin{} block by changing some innocent property with limited side-effect\n+                applicationIdentifier = 'MY_APP_ID'\n+            }\n+        \"\"\".trimIndent())\n+\n+        val result = testProject.build(\"--configuration-cache\", \"vaadinPrepareFrontend\", checkTasksSuccessful = false)\n+        result.expectTaskSucceded(\"web:vaadinPrepareFrontend\")\n+        assertContains(result.output, \"Calculating task graph as no cached configuration is available for tasks: vaadinPrepareFrontend\")\n+        assertContains(result.output, \"Configuration cache entry stored\")\n+\n+        val result2 = testProject.build(\"--configuration-cache\", \"vaadinPrepareFrontend\", checkTasksSuccessful = false)\n+        result2.expectTaskOutcome(\"web:vaadinPrepareFrontend\", TaskOutcome.UP_TO_DATE)\n+        assertContains(result2.output, \"Reusing configuration cache\")\n+    }\n+\n+\n }\n\ndiff --git a/flow-plugins/flow-gradle-plugin/src/functionalTest/kotlin/com/vaadin/gradle/VaadinSmokeTest.kt b/flow-plugins/flow-gradle-plugin/src/functionalTest/kotlin/com/vaadin/gradle/VaadinSmokeTest.kt\nindex 552d42d4672..b172ab4e86e 100644\n--- a/flow-plugins/flow-gradle-plugin/src/functionalTest/kotlin/com/vaadin/gradle/VaadinSmokeTest.kt\n+++ b/flow-plugins/flow-gradle-plugin/src/functionalTest/kotlin/com/vaadin/gradle/VaadinSmokeTest.kt\n@@ -437,7 +437,7 @@ class VaadinSmokeTest : AbstractGradleTest() {\n             addonJar.toPath(), StandardCopyOption.REPLACE_EXISTING\n         )\n \n-        val result: BuildResult = testProject.build(\"-Pvaadin.productionMode\", \"build\")\n+        val result: BuildResult = testProject.build(\"-Pvaadin.productionMode\", \"build\", debug = true)\n         result.expectTaskSucceded(\"vaadinPrepareFrontend\")\n         result.expectTaskSucceded(\"vaadinBuildFrontend\")\n \n@@ -497,6 +497,78 @@ class VaadinSmokeTest : AbstractGradleTest() {\n         }\n     }\n \n+    @Test\n+    fun testPrepareFrontend_configurationCache() {\n+        // Create frontend folder, that will otherwise be created by the first\n+        // execution of vaadinPrepareFrontend, invalidating the cache on the\n+        // second run\n+        testProject.newFolder(\"src/main/frontend\")\n+\n+        val result = testProject.build(\"--configuration-cache\", \"vaadinPrepareFrontend\")\n+        result.expectTaskSucceded(\"vaadinPrepareFrontend\")\n+        assertContains(result.output, \"Calculating task graph as no cached configuration is available for tasks: vaadinPrepareFrontend\")\n+        assertContains(result.output, \"Configuration cache entry stored\")\n+\n+        val result2 = testProject.build(\"--configuration-cache\", \"vaadinPrepareFrontend\", checkTasksSuccessful = false)\n+        result2.expectTaskOutcome(\"vaadinPrepareFrontend\", TaskOutcome.UP_TO_DATE)\n+        assertContains(result2.output, \"Reusing configuration cache\")\n+    }\n+\n+    @Test\n+    fun testPrepareFrontend_configurationCache_configurationChange_cacheInvalidated() {\n+        // Create frontend folder, that will otherwise be created by the first\n+        // execution of vaadinPrepareFrontend, invalidating the cache on the\n+        // second run\n+        testProject.newFolder(\"src/main/frontend\")\n+\n+        val result = testProject.build(\"--configuration-cache\", \"vaadinPrepareFrontend\")\n+        result.expectTaskSucceded(\"vaadinPrepareFrontend\")\n+        assertContains(result.output, \"Calculating task graph as no cached configuration is available for tasks: vaadinPrepareFrontend\")\n+        assertContains(result.output, \"Configuration cache entry stored\")\n+\n+        val buildFile = testProject.buildFile.readText()\n+            .replace(\"nodeAutoUpdate = true\", \"nodeAutoUpdate = false\")\n+        testProject.buildFile.writeText(buildFile)\n+\n+        val result2 = testProject.build(\"--configuration-cache\", \"vaadinPrepareFrontend\", checkTasksSuccessful = false)\n+        result2.expectTaskOutcome(\"vaadinPrepareFrontend\", TaskOutcome.SUCCESS)\n+        assertContains(result.output, \"Calculating task graph as no cached configuration is available for tasks: vaadinPrepareFrontend\")\n+    }\n+\n+    @Test\n+    fun testPrepareFrontend_configurationCache_gradlePropertyChange_cacheInvalidated() {\n+        // Create frontend folder, that will otherwise be created by the first\n+        // execution of vaadinPrepareFrontend, invalidating the cache on the\n+        // second run\n+        testProject.newFolder(\"src/main/frontend\")\n+\n+        val result = testProject.build(\"--configuration-cache\", \"vaadinPrepareFrontend\")\n+        result.expectTaskSucceded(\"vaadinPrepareFrontend\")\n+        assertContains(result.output, \"Calculating task graph as no cached configuration is available for tasks: vaadinPrepareFrontend\")\n+        assertContains(result.output, \"Configuration cache entry stored\")\n+\n+        val result2 = testProject.build(\"--configuration-cache\", \"vaadinPrepareFrontend\", \"-Pvaadin.eagerServerLoad=true\", checkTasksSuccessful = false)\n+        result2.expectTaskOutcome(\"vaadinPrepareFrontend\", TaskOutcome.SUCCESS)\n+        assertContains(result.output, \"Calculating task graph as no cached configuration is available for tasks: vaadinPrepareFrontend\")\n+    }\n+\n+    @Test\n+    fun testPrepareFrontend_configurationCache_systemPropertyChange_cacheInvalidated() {\n+        // Create frontend folder, that will otherwise be created by the first\n+        // execution of vaadinPrepareFrontend, invalidating the cache on the\n+        // second run\n+        testProject.newFolder(\"src/main/frontend\")\n+\n+        val result = testProject.build(\"--configuration-cache\", \"vaadinPrepareFrontend\")\n+        result.expectTaskSucceded(\"vaadinPrepareFrontend\")\n+        assertContains(result.output, \"Calculating task graph as no cached configuration is available for tasks: vaadinPrepareFrontend\")\n+        assertContains(result.output, \"Configuration cache entry stored\")\n+\n+        val result2 = testProject.build(\"--configuration-cache\", \"vaadinPrepareFrontend\", \"-Dvaadin.eagerServerLoad=true\", checkTasksSuccessful = false)\n+        result2.expectTaskOutcome(\"vaadinPrepareFrontend\", TaskOutcome.SUCCESS)\n+        assertContains(result.output, \"Calculating task graph as no cached configuration is available for tasks: vaadinPrepareFrontend\")\n+    }\n+\n     private fun enableHilla() {\n         testProject.newFolder(FrontendUtils.DEFAULT_FRONTEND_DIR)\n         testProject.newFile(FrontendUtils.DEFAULT_FRONTEND_DIR + \"index.ts\")\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-21009",
    "pr_id": 21009,
    "issue_id": 20983,
    "repo": "vaadin/flow",
    "problem_statement": "BrowserCallable-aware package handling in Flow\n### Describe your motivation\n\nFollow-up for https://github.com/vaadin/flow/issues/20289.\n\nWhen Hilla's browser callable aka endpoints are present in a project, the Hilla TS endpoints generator packages have to be added.\nFlow should know whether to add them during build time based on presence `BrowserCallable` / `Endpoint` annotated classes in a project.\n\n### Describe the solution you'd like\n\nThese annotations are Hilla owned, so there should be a new API to pass this flag from Hilla.\nIt could be a method like `hasBrowserCallables()` in `EndpointGeneratorTaskFactory` interface that calls `BrowserCallableFinder` internally or Hilla can make `BrowserCallableFinder` discoverable through lookup for Flow.\n\nWe have to change the ordering of node tasks in Flow from\n```\nTaskUpdatePackages.class,\nTaskRunNpmInstall.class,\nTaskGenerateOpenAPI.class,\nTaskGenerateEndpoint.class,\n```\n\nto \n\n```\nTaskGenerateOpenAPI.class,\nTaskUpdatePackages.class,\nTaskRunNpmInstall.class,\nTaskGenerateEndpoint.class,\n```\n\n(discover endpoints -> add generators if needed -> npm install -> generate endpoints if needed)\n\n### Describe alternatives you've considered\n\nRevert the https://github.com/vaadin/flow/issues/20289 and document the workaround.\n\n### Additional context\n\nTarget version - 24.7\n",
    "issue_word_count": 174,
    "test_files_count": 8,
    "non_test_files_count": 9,
    "pr_changed_files": [
      "flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/TestEndpointGeneratorTaskFactory.java",
      "flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/hilla/EndpointRequestUtil.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleValidationUtil.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/EndpointGeneratorTaskFactory.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendUtils.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeTasksHillaTest.java",
      "vaadin-dev-server/src/main/java/com/vaadin/base/devserver/startup/DevModeInitializer.java",
      "vaadin-dev-server/src/test/java/com/vaadin/base/devserver/DevModeEndpointTest.java",
      "vaadin-dev-server/src/test/java/com/vaadin/base/devserver/TestEndpointGeneratorTaskFactory.java",
      "vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeClassFinderTest.java",
      "vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerTest.java",
      "vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringBootAutoConfiguration.java",
      "vaadin-spring/src/main/java/com/vaadin/flow/spring/VaadinServletContextInitializer.java",
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/VaadinServletContextInitializerTest.java"
    ],
    "pr_changed_test_files": [
      "flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/TestEndpointGeneratorTaskFactory.java",
      "flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeTasksHillaTest.java",
      "vaadin-dev-server/src/test/java/com/vaadin/base/devserver/DevModeEndpointTest.java",
      "vaadin-dev-server/src/test/java/com/vaadin/base/devserver/TestEndpointGeneratorTaskFactory.java",
      "vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeClassFinderTest.java",
      "vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerTest.java",
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/VaadinServletContextInitializerTest.java"
    ],
    "base_commit": "f849d2045d0e56f89403ee3affd2cb367266043d",
    "head_commit": "dc67e739680a85a9e81c951a57fc86b2a0d596d2",
    "repo_url": "https://github.com/vaadin/flow/pull/21009",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/21009",
    "dockerfile": "",
    "pr_merged_at": "2025-02-25T07:54:31.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/internal/hilla/EndpointRequestUtil.java b/flow-server/src/main/java/com/vaadin/flow/internal/hilla/EndpointRequestUtil.java\nindex 4e6e384ab54..21677f21b8b 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/hilla/EndpointRequestUtil.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/hilla/EndpointRequestUtil.java\n@@ -19,6 +19,8 @@\n import jakarta.servlet.http.HttpServletRequest;\n import java.io.Serializable;\n \n+import com.vaadin.flow.server.frontend.EndpointGeneratorTaskFactory;\n+import com.vaadin.flow.server.frontend.Options;\n import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n \n /**\n@@ -86,4 +88,22 @@ static boolean isHillaAvailable(ClassFinder classFinder) {\n             return false;\n         }\n     }\n+\n+    /**\n+     * Checks if Hilla is available and Hilla endpoints are used in the project.\n+     *\n+     * @return {@code true} if Hilla is available and Hilla endpoints are used,\n+     *         {@code false} otherwise\n+     */\n+    static boolean areHillaEndpointsUsed(Options options) {\n+        if (!EndpointRequestUtil.isHillaAvailable()) {\n+            return false;\n+        }\n+        EndpointGeneratorTaskFactory endpointGeneratorTaskFactory = options\n+                .getLookup().lookup(EndpointGeneratorTaskFactory.class);\n+        if (endpointGeneratorTaskFactory != null) {\n+            return endpointGeneratorTaskFactory.hasBrowserCallables(options);\n+        }\n+        return false;\n+    }\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleValidationUtil.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleValidationUtil.java\nindex f273961d6b8..99cf650c444 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleValidationUtil.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleValidationUtil.java\n@@ -30,6 +30,7 @@\n import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StringUtil;\n import com.vaadin.flow.internal.UsageStatistics;\n+import com.vaadin.flow.internal.hilla.EndpointRequestUtil;\n import com.vaadin.flow.server.Constants;\n import com.vaadin.flow.server.LoadDependenciesOnStartup;\n import com.vaadin.flow.server.Mode;\n@@ -68,9 +69,11 @@ public static boolean needsBuild(Options options,\n         try {\n             boolean needsBuild;\n             if (mode.isProduction()) {\n-                if (options.isForceProductionBuild() || FrontendUtils\n-                        .isHillaUsed(options.getFrontendDirectory(),\n-                                options.getClassFinder())) {\n+                if (options.isForceProductionBuild()\n+                        || FrontendUtils.isHillaUsed(\n+                                options.getFrontendDirectory(),\n+                                options.getClassFinder())\n+                        || EndpointRequestUtil.areHillaEndpointsUsed(options)) {\n                     if (options.isForceProductionBuild()) {\n                         UsageStatistics.markAsUsed(\"flow/prod-build-requested\",\n                                 null);\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/EndpointGeneratorTaskFactory.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/EndpointGeneratorTaskFactory.java\nindex 177c9d256d4..ca15e383070 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/EndpointGeneratorTaskFactory.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/EndpointGeneratorTaskFactory.java\n@@ -16,6 +16,9 @@\n \n package com.vaadin.flow.server.frontend;\n \n+import java.lang.annotation.Annotation;\n+import java.util.Set;\n+\n /**\n  * A factory for creating Vaadin Endpoint generator tasks.\n  * <p>\n@@ -43,4 +46,21 @@ public interface EndpointGeneratorTaskFactory {\n      * @return an endpoint task that generates open api json file.\n      */\n     TaskGenerateOpenAPI createTaskGenerateOpenAPI(Options options);\n+\n+    /**\n+     * Fetches all endpoint-type annotations from Hilla configuration\n+     *\n+     * @return Set of endpoint-type annotations\n+     */\n+    Set<Class<? extends Annotation>> getBrowserCallableAnnotations();\n+\n+    /**\n+     * Determines the presence of annotations (e.g. BrowserCallable or Endpoint)\n+     * which require Flow to add Hilla packages to the build.\n+     *\n+     * @param options\n+     *            the task options\n+     * @return {@code true} if annotations are present, {@code false} otherwise\n+     */\n+    boolean hasBrowserCallables(Options options);\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendUtils.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendUtils.java\nindex 9797292cb43..b5c55659768 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendUtils.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendUtils.java\n@@ -40,7 +40,6 @@\n import java.util.stream.Stream;\n \n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.node.ObjectNode;\n import jakarta.servlet.ServletContext;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java\nindex fc23962ddca..25f76cfbd8c 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java\n@@ -73,9 +73,9 @@ public class NodeTasks implements FallibleCommand {\n             TaskGenerateWebComponentBootstrap.class,\n             TaskGenerateFeatureFlags.class,\n             TaskInstallFrontendBuildPlugins.class,\n+            TaskGenerateOpenAPI.class,\n             TaskUpdatePackages.class,\n             TaskRunNpmInstall.class,\n-            TaskGenerateOpenAPI.class,\n             TaskGenerateEndpoint.class,\n             TaskCopyFrontendFiles.class,\n             TaskCopyLocalFrontendFiles.class,\n@@ -319,19 +319,22 @@ private void addEndpointServicesTasks(Options options) {\n         if (!EndpointRequestUtil.isHillaAvailable(options.getClassFinder())) {\n             return;\n         }\n-        Lookup lookup = options.getLookup();\n-        EndpointGeneratorTaskFactory endpointGeneratorTaskFactory = lookup\n-                .lookup(EndpointGeneratorTaskFactory.class);\n-\n-        if (endpointGeneratorTaskFactory != null) {\n-            TaskGenerateOpenAPI taskGenerateOpenAPI = endpointGeneratorTaskFactory\n-                    .createTaskGenerateOpenAPI(options);\n-            commands.add(taskGenerateOpenAPI);\n-\n-            if (options.getFrontendGeneratedFolder() != null) {\n-                TaskGenerateEndpoint taskGenerateEndpoint = endpointGeneratorTaskFactory\n-                        .createTaskGenerateEndpoint(options);\n-                commands.add(taskGenerateEndpoint);\n+        if (EndpointRequestUtil.areHillaEndpointsUsed(options)\n+                || FrontendUtils.isHillaUsed(options.getFrontendDirectory())) {\n+            Lookup lookup = options.getLookup();\n+            EndpointGeneratorTaskFactory endpointGeneratorTaskFactory = lookup\n+                    .lookup(EndpointGeneratorTaskFactory.class);\n+\n+            if (endpointGeneratorTaskFactory != null) {\n+                TaskGenerateOpenAPI taskGenerateOpenAPI = endpointGeneratorTaskFactory\n+                        .createTaskGenerateOpenAPI(options);\n+                commands.add(taskGenerateOpenAPI);\n+\n+                if (options.getFrontendGeneratedFolder() != null) {\n+                    TaskGenerateEndpoint taskGenerateEndpoint = endpointGeneratorTaskFactory\n+                            .createTaskGenerateEndpoint(options);\n+                    commands.add(taskGenerateEndpoint);\n+                }\n             }\n         }\n     }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java\nindex eefd3cd216c..8fa72d4fb16 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java\n@@ -43,6 +43,7 @@\n import com.vaadin.experimental.FeatureFlags;\n import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.JsonDecodingException;\n+import com.vaadin.flow.internal.hilla.EndpointRequestUtil;\n import com.vaadin.flow.server.Constants;\n import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n import com.vaadin.flow.server.frontend.scanner.FrontendDependencies;\n@@ -620,7 +621,8 @@ private ObjectNode generateVersionsFromPackageJson(JsonNode packageJson) {\n     private void putHillaComponentsDependencies(\n             Map<String, String> dependencies, String packageJsonKey) {\n         if (FrontendUtils.isHillaUsed(options.getFrontendDirectory(),\n-                options.getClassFinder())) {\n+                options.getClassFinder())\n+                || EndpointRequestUtil.areHillaEndpointsUsed(options)) {\n             if (options.isReactEnabled()) {\n                 dependencies.putAll(readDependenciesIfAvailable(\n                         \"hilla/components/react\", packageJsonKey));\n\ndiff --git a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/startup/DevModeInitializer.java b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/startup/DevModeInitializer.java\nindex 9cedf0cdc71..beda84298ad 100644\n--- a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/startup/DevModeInitializer.java\n+++ b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/startup/DevModeInitializer.java\n@@ -69,6 +69,7 @@\n import com.vaadin.flow.server.Mode;\n import com.vaadin.flow.server.VaadinContext;\n import com.vaadin.flow.server.VaadinServlet;\n+import com.vaadin.flow.server.frontend.EndpointGeneratorTaskFactory;\n import com.vaadin.flow.server.frontend.FrontendUtils;\n import com.vaadin.flow.server.frontend.NodeTasks;\n import com.vaadin.flow.server.frontend.Options;\n@@ -100,9 +101,12 @@ static class DevModeClassFinder extends DefaultClassFinder {\n \n         private static final Set<String> APPLICABLE_CLASS_NAMES = Collections\n                 .unmodifiableSet(calculateApplicableClassNames());\n+        private final Set<Class<? extends Annotation>> browserCallableAnnotations;\n \n-        public DevModeClassFinder(Set<Class<?>> classes) {\n+        public DevModeClassFinder(Set<Class<?>> classes,\n+                Set<Class<? extends Annotation>> browserCallableAnnotations) {\n             super(classes);\n+            this.browserCallableAnnotations = browserCallableAnnotations;\n         }\n \n         @Override\n@@ -119,7 +123,8 @@ public <T> Set<Class<? extends T>> getSubTypesOf(Class<T> type) {\n         }\n \n         private void ensureImplementation(Class<?> clazz) {\n-            if (!APPLICABLE_CLASS_NAMES.contains(clazz.getName())) {\n+            if (!APPLICABLE_CLASS_NAMES.contains(clazz.getName())\n+                    && !browserCallableAnnotations.contains(clazz)) {\n                 throw new IllegalArgumentException(\"Unexpected class name \"\n                         + clazz + \". Implementation error: the class finder \"\n                         + \"instance is not aware of this class. \"\n@@ -129,6 +134,7 @@ private void ensureImplementation(Class<?> clazz) {\n         }\n \n         private static Set<String> calculateApplicableClassNames() {\n+\n             HandlesTypes handlesTypes = DevModeStartupListener.class\n                     .getAnnotation(HandlesTypes.class);\n             return Stream.of(handlesTypes.value()).map(Class::getName)\n@@ -243,7 +249,18 @@ public static DevModeHandler initDevModeHandler(Set<Class<?>> classes,\n         File frontendFolder = config.getFrontendFolder();\n \n         Lookup lookupFromContext = context.getAttribute(Lookup.class);\n-        Lookup lookupForClassFinder = Lookup.of(new DevModeClassFinder(classes),\n+\n+        EndpointGeneratorTaskFactory endpointGeneratorTaskFactory = lookupFromContext\n+                .lookup(EndpointGeneratorTaskFactory.class);\n+\n+        Set<Class<? extends Annotation>> browserCallableAnnotations = new HashSet<>();\n+        if (endpointGeneratorTaskFactory != null) {\n+            browserCallableAnnotations.addAll(endpointGeneratorTaskFactory\n+                    .getBrowserCallableAnnotations());\n+        }\n+\n+        Lookup lookupForClassFinder = Lookup.of(\n+                new DevModeClassFinder(classes, browserCallableAnnotations),\n                 ClassFinder.class);\n         Lookup lookup = Lookup.compose(lookupForClassFinder, lookupFromContext);\n         Options options = new Options(lookup, baseDir)\n\ndiff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringBootAutoConfiguration.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringBootAutoConfiguration.java\nindex 32506141da0..4412b029c16 100644\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringBootAutoConfiguration.java\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringBootAutoConfiguration.java\n@@ -47,7 +47,7 @@\n  * @author Vaadin Ltd\n  *\n  */\n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n @AutoConfigureBefore(WebMvcAutoConfiguration.class)\n @ConditionalOnClass(ServletContextInitializer.class)\n @EnableConfigurationProperties(VaadinConfigurationProperties.class)\n\ndiff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/VaadinServletContextInitializer.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/VaadinServletContextInitializer.java\nindex 921f5d22d7d..14a42651ca5 100644\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/VaadinServletContextInitializer.java\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/VaadinServletContextInitializer.java\n@@ -21,7 +21,6 @@\n import jakarta.servlet.ServletContextListener;\n import jakarta.servlet.ServletException;\n import jakarta.servlet.annotation.HandlesTypes;\n-\n import java.io.File;\n import java.io.IOException;\n import java.io.Serializable;\n@@ -65,6 +64,7 @@\n import com.vaadin.flow.di.LookupInitializer;\n import com.vaadin.flow.internal.DevModeHandlerManager;\n import com.vaadin.flow.router.HasErrorParameter;\n+import com.vaadin.flow.router.Layout;\n import com.vaadin.flow.router.Route;\n import com.vaadin.flow.router.RouteAlias;\n import com.vaadin.flow.router.RouteConfiguration;\n@@ -75,7 +75,7 @@\n import com.vaadin.flow.server.RouteRegistry;\n import com.vaadin.flow.server.VaadinServletContext;\n import com.vaadin.flow.server.communication.IndexHtmlRequestHandler;\n-import com.vaadin.flow.router.Layout;\n+import com.vaadin.flow.server.frontend.EndpointGeneratorTaskFactory;\n import com.vaadin.flow.server.startup.AbstractRouteRegistryInitializer;\n import com.vaadin.flow.server.startup.AnnotationValidator;\n import com.vaadin.flow.server.startup.ApplicationConfiguration;\n@@ -559,6 +559,14 @@ public void failFastContextInitialized(ServletContextEvent event)\n             collectHandleTypes(devModeHandlerManager.getHandlesTypes(),\n                     annotations, superTypes);\n \n+            EndpointGeneratorTaskFactory endpointGeneratorTaskFactory = lookup\n+                    .lookup(EndpointGeneratorTaskFactory.class);\n+\n+            if (endpointGeneratorTaskFactory != null) {\n+                annotations.addAll(endpointGeneratorTaskFactory\n+                        .getBrowserCallableAnnotations());\n+            }\n+\n             Set<Class<?>> classes = findClassesForDevMode(basePackages,\n                     annotations, superTypes);\n \n",
    "test_patch": "diff --git a/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/TestEndpointGeneratorTaskFactory.java b/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/TestEndpointGeneratorTaskFactory.java\nindex 99ac99d3da8..85253e3b646 100644\n--- a/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/TestEndpointGeneratorTaskFactory.java\n+++ b/flow-plugins/flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/TestEndpointGeneratorTaskFactory.java\n@@ -17,9 +17,11 @@\n \n import java.io.File;\n import java.io.IOException;\n+import java.lang.annotation.Annotation;\n import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n import java.nio.file.StandardOpenOption;\n+import java.util.Set;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -47,6 +49,16 @@ public TaskGenerateOpenAPI createTaskGenerateOpenAPI(Options options) {\n         return new TestTaskGenerateOpenAPI(options);\n     }\n \n+    @Override\n+    public Set<Class<? extends Annotation>> getBrowserCallableAnnotations() {\n+        return Set.of();\n+    }\n+\n+    @Override\n+    public boolean hasBrowserCallables(Options options) {\n+        return true;\n+    }\n+\n     /**\n      * An abstract parent for the test endpoints generator tasks.\n      */\n\ndiff --git a/flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java b/flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java\nindex 2f0858165ac..4dd8b16a769 100644\n--- a/flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java\n+++ b/flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java\n@@ -156,6 +156,8 @@ public void should_useHillaEngine_withNodeUpdater()\n                 EndpointRequestUtil.class, Mockito.CALLS_REAL_METHODS)) {\n             util.when(() -> EndpointRequestUtil.isHillaAvailable(Mockito.any()))\n                     .thenReturn(true);\n+            util.when(() -> EndpointRequestUtil\n+                    .areHillaEndpointsUsed(Mockito.any())).thenReturn(true);\n             BuildFrontendUtil.runNodeUpdater(adapter);\n         }\n \n@@ -168,10 +170,10 @@ public void should_useHillaEngine_withNodeUpdater()\n         // Hilla Engine requires npm install, the order of execution is critical\n         final TaskRunNpmInstall taskRunNpmInstall = construction.constructed()\n                 .get(0);\n-        InOrder inOrder = Mockito.inOrder(taskRunNpmInstall,\n-                taskGenerateOpenAPI, taskGenerateEndpoint);\n-        inOrder.verify(taskRunNpmInstall).execute();\n+        InOrder inOrder = Mockito.inOrder(taskGenerateOpenAPI,\n+                taskRunNpmInstall, taskGenerateEndpoint);\n         inOrder.verify(taskGenerateOpenAPI).execute();\n+        inOrder.verify(taskRunNpmInstall).execute();\n         inOrder.verify(taskGenerateEndpoint).execute();\n     }\n \n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeTasksHillaTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeTasksHillaTest.java\nindex 65dfbd75839..e697f7fc25f 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeTasksHillaTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeTasksHillaTest.java\n@@ -122,7 +122,8 @@ public void should_useHillaEngine_whenEnabled()\n                 EndpointRequestUtil.class, Mockito.CALLS_REAL_METHODS)) {\n             util.when(() -> EndpointRequestUtil.isHillaAvailable(Mockito.any()))\n                     .thenReturn(true);\n-\n+            util.when(() -> EndpointRequestUtil\n+                    .areHillaEndpointsUsed(Mockito.any())).thenReturn(true);\n             new NodeTasks(options).execute();\n         }\n \n\ndiff --git a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/DevModeEndpointTest.java b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/DevModeEndpointTest.java\nindex 0ec719b9931..433d9c65c0f 100644\n--- a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/DevModeEndpointTest.java\n+++ b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/DevModeEndpointTest.java\n@@ -112,6 +112,8 @@ public void should_generateOpenApi() throws Exception {\n                 EndpointRequestUtil.class, Mockito.CALLS_REAL_METHODS)) {\n             util.when(() -> EndpointRequestUtil.isHillaAvailable(Mockito.any()))\n                     .thenReturn(true);\n+            util.when(() -> EndpointRequestUtil\n+                    .areHillaEndpointsUsed(Mockito.any())).thenReturn(true);\n             devModeStartupListener.onStartup(classes, servletContext);\n             handler = getDevModeHandler();\n             waitForDevServer();\n@@ -144,6 +146,8 @@ public void should_generateTs_files() throws Exception {\n                 EndpointRequestUtil.class, Mockito.CALLS_REAL_METHODS)) {\n             util.when(() -> EndpointRequestUtil.isHillaAvailable(Mockito.any()))\n                     .thenReturn(true);\n+            util.when(() -> EndpointRequestUtil\n+                    .areHillaEndpointsUsed(Mockito.any())).thenReturn(true);\n             devModeStartupListener.onStartup(classes, servletContext);\n             handler = getDevModeHandler();\n             waitForDevServer();\n\ndiff --git a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/TestEndpointGeneratorTaskFactory.java b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/TestEndpointGeneratorTaskFactory.java\nindex bdc758e18dd..f91999291d9 100644\n--- a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/TestEndpointGeneratorTaskFactory.java\n+++ b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/TestEndpointGeneratorTaskFactory.java\n@@ -17,9 +17,11 @@\n \n import java.io.File;\n import java.io.IOException;\n+import java.lang.annotation.Annotation;\n import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n import java.nio.file.StandardOpenOption;\n+import java.util.Set;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -47,6 +49,16 @@ public TaskGenerateOpenAPI createTaskGenerateOpenAPI(Options options) {\n         return new TestTaskGenerateOpenAPI(options);\n     }\n \n+    @Override\n+    public Set<Class<? extends Annotation>> getBrowserCallableAnnotations() {\n+        return Set.of();\n+    }\n+\n+    @Override\n+    public boolean hasBrowserCallables(Options options) {\n+        return true;\n+    }\n+\n     /**\n      * An abstract parent for the test endpoints generator tasks.\n      */\n\ndiff --git a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeClassFinderTest.java b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeClassFinderTest.java\nindex d0bdce40978..df4c2687e81 100644\n--- a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeClassFinderTest.java\n+++ b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeClassFinderTest.java\n@@ -20,6 +20,7 @@\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n@@ -55,7 +56,7 @@\n public class DevModeClassFinderTest {\n \n     private DevModeClassFinder classFinder = new DevModeClassFinder(\n-            Collections.emptySet());\n+            Collections.emptySet(), Collections.emptySet());\n \n     @Test\n     public void applicableClasses_knownClasses() {\n@@ -127,7 +128,7 @@ public void callGetgetAnnotatedClassesByName_unexpectedType_throw()\n     @Test(expected = IllegalArgumentException.class)\n     public void callGetSubTypesOfByClass_unexpectedType_throw() {\n         DevModeClassFinder classFinder = new DevModeClassFinder(\n-                Collections.emptySet());\n+                Collections.emptySet(), Collections.emptySet());\n         classFinder.getSubTypesOf(Object.class);\n     }\n \n\ndiff --git a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerTest.java b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerTest.java\nindex ea8a2cbbbf0..577b640e853 100644\n--- a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerTest.java\n+++ b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerTest.java\n@@ -357,6 +357,8 @@ public void should_generateOpenApi_when_EndpointPresents()\n                     EndpointRequestUtil.class, Mockito.CALLS_REAL_METHODS)) {\n                 util.when(() -> EndpointRequestUtil\n                         .isHillaAvailable(Mockito.any())).thenReturn(true);\n+                util.when(() -> EndpointRequestUtil\n+                        .areHillaEndpointsUsed(Mockito.any())).thenReturn(true);\n                 devModeStartupListener.onStartup(classes, servletContext);\n                 handler = getDevModeHandler();\n                 waitForDevServer();\n@@ -425,6 +427,8 @@ public void should_generateTs_files() throws Exception {\n                     EndpointRequestUtil.class, Mockito.CALLS_REAL_METHODS)) {\n                 util.when(() -> EndpointRequestUtil\n                         .isHillaAvailable(Mockito.any())).thenReturn(true);\n+                util.when(() -> EndpointRequestUtil\n+                        .areHillaEndpointsUsed(Mockito.any())).thenReturn(true);\n                 devModeStartupListener.onStartup(classes, servletContext);\n                 handler = getDevModeHandler();\n                 waitForDevServer();\n\ndiff --git a/vaadin-spring/src/test/java/com/vaadin/flow/spring/VaadinServletContextInitializerTest.java b/vaadin-spring/src/test/java/com/vaadin/flow/spring/VaadinServletContextInitializerTest.java\nindex 5ab4e3ca3d6..73e55fb0f23 100644\n--- a/vaadin-spring/src/test/java/com/vaadin/flow/spring/VaadinServletContextInitializerTest.java\n+++ b/vaadin-spring/src/test/java/com/vaadin/flow/spring/VaadinServletContextInitializerTest.java\n@@ -3,10 +3,12 @@\n import jakarta.servlet.ServletContext;\n import jakarta.servlet.ServletContextEvent;\n import jakarta.servlet.ServletContextListener;\n-\n+import java.lang.annotation.Annotation;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import java.util.concurrent.Executor;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.stream.Stream;\n@@ -15,6 +17,7 @@\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n import org.mockito.Mock;\n import org.mockito.MockedStatic;\n import org.mockito.Mockito;\n@@ -24,10 +27,13 @@\n import org.springframework.core.env.Environment;\n \n import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.dependency.CssImport;\n+import com.vaadin.flow.component.dependency.NpmPackage;\n import com.vaadin.flow.di.Lookup;\n import com.vaadin.flow.function.DeploymentConfiguration;\n import com.vaadin.flow.internal.DevModeHandler;\n import com.vaadin.flow.internal.DevModeHandlerManager;\n+import com.vaadin.flow.internal.hilla.EndpointRequestUtil;\n import com.vaadin.flow.router.BeforeEnterEvent;\n import com.vaadin.flow.router.ErrorParameter;\n import com.vaadin.flow.router.HasErrorParameter;\n@@ -35,6 +41,10 @@\n import com.vaadin.flow.router.RouteNotFoundError;\n import com.vaadin.flow.server.VaadinContext;\n import com.vaadin.flow.server.VaadinServletContext;\n+import com.vaadin.flow.server.frontend.EndpointGeneratorTaskFactory;\n+import com.vaadin.flow.server.frontend.Options;\n+import com.vaadin.flow.server.frontend.TaskGenerateEndpoint;\n+import com.vaadin.flow.server.frontend.TaskGenerateOpenAPI;\n import com.vaadin.flow.server.startup.ApplicationConfiguration;\n import com.vaadin.flow.server.startup.ApplicationRouteRegistry;\n import com.vaadin.flow.server.startup.ServletDeployer;\n@@ -139,6 +149,70 @@ public void onStartup_devModeAlreadyInitialized_devModeInitializationSkipped()\n                         Mockito.any(VaadinContext.class));\n     }\n \n+    @Test\n+    public void hillaProvidesAnnotations_checkTheyAreAdded() throws Exception {\n+        initDefaultMocks();\n+\n+        DevModeHandler devModeHandler = Mockito.mock(DevModeHandler.class);\n+        Mockito.when(devModeHandlerManager.getDevModeHandler())\n+                .thenReturn(null);\n+        Mockito.when(devModeHandlerManager.getHandlesTypes())\n+                .thenReturn(new Class<?>[0]);\n+\n+        Mockito.when(appConfig.frontendHotdeploy()).thenReturn(true);\n+\n+        Mockito.when(servletContext.getAttribute(Lookup.class.getName()))\n+                .thenReturn(lookup);\n+\n+        final Set<Class<? extends Annotation>> annotations = Set\n+                .of(NpmPackage.class, CssImport.class);\n+\n+        Mockito.doReturn(new EndpointGeneratorTaskFactory() {\n+            @Override\n+            public TaskGenerateEndpoint createTaskGenerateEndpoint(\n+                    Options options) {\n+                return null;\n+            }\n+\n+            @Override\n+            public TaskGenerateOpenAPI createTaskGenerateOpenAPI(\n+                    Options options) {\n+                return null;\n+            }\n+\n+            @Override\n+            public Set<Class<? extends Annotation>> getBrowserCallableAnnotations() {\n+                // Not really relevant which annotations are used here.\n+                // Can't use the real Hilla annotations anyway.\n+                return annotations;\n+            }\n+\n+            @Override\n+            public boolean hasBrowserCallables(Options options) {\n+                return true;\n+            }\n+        }).when(lookup).lookup(EndpointGeneratorTaskFactory.class);\n+\n+        try (MockedStatic<EndpointRequestUtil> util = Mockito.mockStatic(\n+                EndpointRequestUtil.class, Mockito.CALLS_REAL_METHODS)) {\n+            util.when(() -> EndpointRequestUtil.isHillaAvailable(Mockito.any()))\n+                    .thenReturn(true);\n+            util.when(() -> EndpointRequestUtil\n+                    .areHillaEndpointsUsed(Mockito.any())).thenReturn(true);\n+        }\n+\n+        VaadinServletContextInitializer initializer = getStubbedVaadinServletContextInitializer();\n+        initializer.onStartup(servletContext);\n+\n+        ArgumentCaptor<List<Class<? extends Annotation>>> captor = ArgumentCaptor\n+                .forClass(List.class);\n+        Mockito.verify(initializer, Mockito.atMostOnce()).findClassesForDevMode(\n+                Mockito.any(), captor.capture(), Mockito.any());\n+        List<Class<? extends Annotation>> captured = captor.getValue();\n+\n+        Assert.assertTrue(captured.containsAll(annotations));\n+    }\n+\n     @Test\n     public void errorParameterServletContextListenerEvent_hasCustomRouteNotFoundViewExtendingRouteNotFoundError_customRouteNotFoundViewIsRegistered()\n             throws Exception {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20985",
    "pr_id": 20985,
    "issue_id": 20741,
    "repo": "vaadin/flow",
    "problem_statement": "Use Jackson for public API and implementation instead of Elemental JSON\n### Describe your motivation\n\nJackson library (`com.fasterxml.jackson`) is more popular than Elemental JSON (`elemental.json`), thus Vaadin should better use it in public API.\n\n### Describe the solution you'd like\n\n0. Analyse and list the usage of Elemental in Flow: how many publicly using cases do we have and how many are used internally. I expect the main usage in `Element` class, but there may be more, e.g. in util classes.\n1. Add an adapter code that converts Jackson to/from Elemental, if it's problematic to replace it in implementation right away, else go to step 2.\n2. Change Flow internal implementation to use Jackson\n3. Add same public methods found in (0), but that use Jackson for arguments and return values\n4. Deprecate existing public method with Elemental\n5. Remove Elemental variants in next major version.\n",
    "issue_word_count": 151,
    "test_files_count": 25,
    "non_test_files_count": 37,
    "pr_changed_files": [
      "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/rpc/PolymerPublishedEventRpcHandler.java",
      "flow-polymer-template/src/test/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandlerTest.java",
      "flow-server/src/main/java/com/vaadin/flow/component/ComponentEventBus.java",
      "flow-server/src/main/java/com/vaadin/flow/component/WebComponentExporter.java",
      "flow-server/src/main/java/com/vaadin/flow/component/template/internal/DeprecatedPolymerPublishedEventHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponent.java",
      "flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponentConfiguration.java",
      "flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponentUI.java",
      "flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponentWrapper.java",
      "flow-server/src/main/java/com/vaadin/flow/dom/DomEvent.java",
      "flow-server/src/main/java/com/vaadin/flow/dom/Element.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/ConstantPool.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/ConstantPoolKey.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/JacksonCodec.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/JavaScriptSemantics.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/AbstractPropertyMap.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementListenerMap.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/PolymerEventListenerMap.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ReturnChannelMap.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ReturnChannelRegistration.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/ReturnChannelHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/UidlWriter.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/AbstractRpcInvocationHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/AttachExistingElementRpcHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/AttachTemplateChildRpcHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/DefaultRpcDecoder.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/EventRpcHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/MapSyncRpcHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/NavigationRpcHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/RpcDecoder.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/RpcInvocationHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/StringToEnumDecoder.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/StringToNumberDecoder.java",
      "flow-server/src/main/java/com/vaadin/flow/server/webcomponent/WebComponentBinding.java",
      "flow-server/src/main/java/com/vaadin/flow/server/webcomponent/WebComponentGenerator.java",
      "flow-server/src/test/java/com/vaadin/flow/component/ComponentEventBusTest.java",
      "flow-server/src/test/java/com/vaadin/flow/component/ComponentTest.java",
      "flow-server/src/test/java/com/vaadin/flow/component/DomEventTest.java",
      "flow-server/src/test/java/com/vaadin/flow/component/WebComponentExporterTest.java",
      "flow-server/src/test/java/com/vaadin/flow/component/webcomponent/WebComponentWrapperTest.java",
      "flow-server/src/test/java/com/vaadin/flow/dom/ElementTest.java",
      "flow-server/src/test/java/com/vaadin/flow/internal/ConstantPoolTest.java",
      "flow-server/src/test/java/com/vaadin/flow/internal/nodefeature/ElementListenersTest.java",
      "flow-server/src/test/java/com/vaadin/flow/internal/nodefeature/PolymerServerEventHandlersTest.java",
      "flow-server/src/test/java/com/vaadin/flow/internal/nodefeature/ReturnChannelMapTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/AbstractRpcInvocationHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/AttachExistingElementRpcHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/AttachTemplateChildRpcHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/EnumDecoderTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/EventRpcHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/MapSyncRpcHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/NavigationRpcHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/ReturnChannelHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/StringToNumberDecoderTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/startup/LookupServletContainerInitializerTest.java",
      "flow-tests/test-embedding/embedding-test-assets/src/main/java/com/vaadin/flow/webcomponent/PropertyUpdateComponent.java",
      "flow-tests/test-embedding/embedding-test-assets/src/main/java/com/vaadin/flow/webcomponent/PropertyUpdateExporter.java",
      "flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/ReturnChannelView.java"
    ],
    "pr_changed_test_files": [
      "flow-polymer-template/src/test/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/component/ComponentEventBusTest.java",
      "flow-server/src/test/java/com/vaadin/flow/component/ComponentTest.java",
      "flow-server/src/test/java/com/vaadin/flow/component/DomEventTest.java",
      "flow-server/src/test/java/com/vaadin/flow/component/WebComponentExporterTest.java",
      "flow-server/src/test/java/com/vaadin/flow/component/webcomponent/WebComponentWrapperTest.java",
      "flow-server/src/test/java/com/vaadin/flow/dom/ElementTest.java",
      "flow-server/src/test/java/com/vaadin/flow/internal/ConstantPoolTest.java",
      "flow-server/src/test/java/com/vaadin/flow/internal/nodefeature/ElementListenersTest.java",
      "flow-server/src/test/java/com/vaadin/flow/internal/nodefeature/PolymerServerEventHandlersTest.java",
      "flow-server/src/test/java/com/vaadin/flow/internal/nodefeature/ReturnChannelMapTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/AbstractRpcInvocationHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/AttachExistingElementRpcHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/AttachTemplateChildRpcHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/EnumDecoderTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/EventRpcHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/MapSyncRpcHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/NavigationRpcHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/ReturnChannelHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/StringToNumberDecoderTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/startup/LookupServletContainerInitializerTest.java",
      "flow-tests/test-embedding/embedding-test-assets/src/main/java/com/vaadin/flow/webcomponent/PropertyUpdateComponent.java",
      "flow-tests/test-embedding/embedding-test-assets/src/main/java/com/vaadin/flow/webcomponent/PropertyUpdateExporter.java",
      "flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/ReturnChannelView.java"
    ],
    "base_commit": "799a44668a9740fab731b5989bc3006c0890bbe8",
    "head_commit": "8d776dd96fc2c03b1c2908e00b0ae4f39c4700ef",
    "repo_url": "https://github.com/vaadin/flow/pull/20985",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20985",
    "dockerfile": "",
    "pr_merged_at": "2025-02-24T09:50:16.000Z",
    "patch": "diff --git a/flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/rpc/PolymerPublishedEventRpcHandler.java b/flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/rpc/PolymerPublishedEventRpcHandler.java\nindex f39a30ac2a0..85a8e1be9a9 100644\n--- a/flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/rpc/PolymerPublishedEventRpcHandler.java\n+++ b/flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/rpc/PolymerPublishedEventRpcHandler.java\n@@ -11,6 +11,9 @@\n import java.lang.reflect.Type;\n import java.util.Optional;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n import com.vaadin.flow.component.Component;\n import com.vaadin.flow.component.UI;\n import com.vaadin.flow.component.polymertemplate.PolymerTemplate;\n@@ -91,4 +94,31 @@ public Object getTemplateItem(Component template, JsonObject argValue,\n                 \"Event sent for a non attached template component\");\n     }\n \n+    @Override\n+    public boolean isTemplateModelValue(Component instance, JsonNode argValue,\n+            Class<?> convertedType) {\n+        return instance instanceof PolymerTemplate\n+                && argValue instanceof ObjectNode\n+                && ((PolymerTemplate<?>) instance).isSupportedClass(\n+                        convertedType)\n+                && argValue.has(\"nodeId\");\n+    }\n+\n+    @Override\n+    public Object getTemplateItem(Component template, JsonNode argValue,\n+            Type convertedType) {\n+        final Optional<UI> ui = template.getUI();\n+        if (ui.isPresent()) {\n+            StateNode node = ui.get().getInternals().getStateTree()\n+                    .getNodeById(argValue.get(\"nodeId\").intValue());\n+\n+            ModelType propertyType = ((PolymerTemplate<?>) template)\n+                    .getModelType(convertedType);\n+\n+            return propertyType.modelToApplication(node);\n+        }\n+        throw new IllegalArgumentException(\n+                \"Event sent for a non attached template component\");\n+    }\n+\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/component/ComponentEventBus.java b/flow-server/src/main/java/com/vaadin/flow/component/ComponentEventBus.java\nindex 0f2b650706d..546ec926686 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/ComponentEventBus.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/ComponentEventBus.java\n@@ -28,16 +28,20 @@\n import java.util.Optional;\n import java.util.function.Consumer;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+\n import com.vaadin.flow.dom.DebouncePhase;\n import com.vaadin.flow.dom.DisabledUpdateMode;\n import com.vaadin.flow.dom.DomEvent;\n import com.vaadin.flow.dom.DomListenerRegistration;\n import com.vaadin.flow.dom.Element;\n import com.vaadin.flow.internal.AnnotationReader;\n+import com.vaadin.flow.internal.JacksonCodec;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.JsonCodec;\n import com.vaadin.flow.shared.Registration;\n \n-import elemental.json.Json;\n+import elemental.json.JsonObject;\n import elemental.json.JsonValue;\n \n /**\n@@ -362,11 +366,26 @@ private List<Object> createEventDataObjects(DomEvent domEvent,\n                 eventDataObjects.add(parseStateNodeIdToComponentReference(\n                         domEvent, type, expression));\n             } else {\n-                JsonValue jsonValue = domEvent.getEventData().get(expression);\n+                JsonNode jsonValue;\n+                if (domEvent.getEventData()\n+                        .get(expression) instanceof JsonObject) {\n+                    jsonValue = JacksonUtils.mapElemental(\n+                            domEvent.getEventData().get(expression));\n+                } else {\n+                    jsonValue = JacksonUtils.mapElemental((JsonValue) domEvent\n+                            .getEventData().get(expression));\n+                }\n                 if (jsonValue == null) {\n-                    jsonValue = Json.createNull();\n+                    jsonValue = JacksonUtils.nullNode();\n+                }\n+                Object value;\n+                if (JsonValue.class.isAssignableFrom(type)) {\n+                    // TODO: Remove after History uses Jackson.\n+                    value = JsonCodec.decodeAs(\n+                            domEvent.getEventData().get(expression), type);\n+                } else {\n+                    value = JacksonCodec.decodeAs(jsonValue, type);\n                 }\n-                Object value = JsonCodec.decodeAs(jsonValue, type);\n                 eventDataObjects.add(value);\n             }\n         });\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/component/WebComponentExporter.java b/flow-server/src/main/java/com/vaadin/flow/component/WebComponentExporter.java\nindex efe8f8317b3..53ced9649cc 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/WebComponentExporter.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/WebComponentExporter.java\n@@ -25,22 +25,23 @@\n import java.util.Objects;\n import java.util.Set;\n import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.ValueNode;\n \n import com.vaadin.flow.component.webcomponent.PropertyConfiguration;\n import com.vaadin.flow.component.webcomponent.WebComponent;\n import com.vaadin.flow.component.webcomponent.WebComponentConfiguration;\n import com.vaadin.flow.di.Instantiator;\n import com.vaadin.flow.dom.Element;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.ReflectTools;\n import com.vaadin.flow.server.webcomponent.PropertyConfigurationImpl;\n import com.vaadin.flow.server.webcomponent.PropertyData;\n import com.vaadin.flow.server.webcomponent.UnsupportedPropertyTypeException;\n import com.vaadin.flow.server.webcomponent.WebComponentBinding;\n \n-import elemental.json.JsonObject;\n-import elemental.json.JsonValue;\n-\n /**\n  * Exports a {@link Component} as a web component.\n  * <p>\n@@ -90,8 +91,9 @@ public abstract class WebComponentExporter<C extends Component>\n         implements Serializable {\n \n     private static final List<Class> SUPPORTED_TYPES = Collections\n-            .unmodifiableList(Arrays.asList(Boolean.class, String.class,\n-                    Integer.class, Double.class, JsonValue.class));\n+            .unmodifiableList(\n+                    Arrays.asList(Boolean.class, String.class, Integer.class,\n+                            Double.class, JsonNode.class, ObjectNode.class));\n \n     private final String tag;\n     private HashMap<String, PropertyConfigurationImpl<C, ? extends Serializable>> propertyConfigurationMap = new HashMap<>();\n@@ -245,9 +247,14 @@ public final PropertyConfiguration<C, Boolean> addProperty(String name,\n      *            default value of property.\n      * @return fluent {@code PropertyConfiguration} for configuring the property\n      */\n-    public final PropertyConfiguration<C, JsonValue> addProperty(String name,\n-            JsonValue defaultValue) {\n-        return addProperty(name, JsonValue.class, defaultValue);\n+    public final PropertyConfiguration<C, ObjectNode> addProperty(String name,\n+            ObjectNode defaultValue) {\n+        return addProperty(name, ObjectNode.class, defaultValue);\n+    }\n+\n+    public final PropertyConfiguration<C, ValueNode> addProperty(String name,\n+            ValueNode defaultValue) {\n+        return addProperty(name, ValueNode.class, defaultValue);\n     }\n \n     /**\n@@ -342,7 +349,7 @@ public Set<PropertyData<? extends Serializable>> getPropertyDataSet() {\n         @Override\n         public WebComponentBinding<C> createWebComponentBinding(\n                 Instantiator instantiator, Element element,\n-                JsonObject newAttributeDefaults) {\n+                ObjectNode newAttributeDefaults) {\n             assert (instantiator != null);\n \n             final C componentReference = instantiator\n@@ -373,9 +380,9 @@ public WebComponentBinding<C> createWebComponentBinding(\n             WebComponentBinding<C> binding = new WebComponentBinding<>(\n                     componentReference);\n \n-            // collect possible new defaults from attributes as JsonValues\n-            final Map<String, JsonValue> newDefaultValues = Stream\n-                    .of(newAttributeDefaults.keys()).collect(Collectors\n+            // collect possible new defaults from attributes as JsonNode values\n+            final Map<String, JsonNode> newDefaultValues = JacksonUtils\n+                    .getKeys(newAttributeDefaults).stream().collect(Collectors\n                             .toMap(key -> key, newAttributeDefaults::get));\n \n             // bind properties onto the WebComponentBinding. Since\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/component/template/internal/DeprecatedPolymerPublishedEventHandler.java b/flow-server/src/main/java/com/vaadin/flow/component/template/internal/DeprecatedPolymerPublishedEventHandler.java\nindex eb8e5bf3b95..67aae54fbea 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/template/internal/DeprecatedPolymerPublishedEventHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/template/internal/DeprecatedPolymerPublishedEventHandler.java\n@@ -18,6 +18,8 @@\n import java.io.Serializable;\n import java.lang.reflect.Type;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+\n import com.vaadin.flow.component.Component;\n \n import elemental.json.JsonObject;\n@@ -51,6 +53,7 @@ public interface DeprecatedPolymerPublishedEventHandler extends Serializable {\n      *            target type that value should be converted to\n      * @return true if valid template model value\n      */\n+    @Deprecated\n     boolean isTemplateModelValue(Component instance, JsonValue argValue,\n             Class<?> convertedType);\n \n@@ -67,6 +70,38 @@ boolean isTemplateModelValue(Component instance, JsonValue argValue,\n      * @throws IllegalStateException\n      *             if the component is not attached to the UI\n      */\n+    @Deprecated\n     Object getTemplateItem(Component template, JsonObject argValue,\n             Type convertedType);\n+\n+    /**\n+     * Validate that the given Component instance is a PolymerTemplate and that\n+     * the value can be converted.\n+     *\n+     * @param instance\n+     *            Component to be validated\n+     * @param argValue\n+     *            received value\n+     * @param convertedType\n+     *            target type that value should be converted to\n+     * @return true if valid template model value\n+     */\n+    boolean isTemplateModelValue(Component instance, JsonNode argValue,\n+            Class<?> convertedType);\n+\n+    /**\n+     * Get the template model object and type.\n+     *\n+     * @param template\n+     *            polymer template to get model from\n+     * @param argValue\n+     *            argument value\n+     * @param convertedType\n+     *            value type\n+     * @return the provided model value\n+     * @throws IllegalStateException\n+     *             if the component is not attached to the UI\n+     */\n+    Object getTemplateItem(Component template, JsonNode argValue,\n+            Type convertedType);\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponent.java b/flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponent.java\nindex b1e251b7e67..70912fba27e 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponent.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponent.java\n@@ -19,6 +19,9 @@\n import java.io.Serializable;\n import java.util.Objects;\n \n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.ValueNode;\n+\n import com.vaadin.flow.component.Component;\n import com.vaadin.flow.dom.Element;\n import com.vaadin.flow.server.webcomponent.PropertyConfigurationImpl;\n@@ -208,9 +211,7 @@ private void setProperty(String propertyName, Object value) {\n \n         if (value == null) {\n             componentHost.executeJs(UPDATE_PROPERTY_NULL, propertyName);\n-        }\n-\n-        if (value instanceof Integer) {\n+        } else if (value instanceof Integer) {\n             componentHost.executeJs(UPDATE_PROPERTY, propertyName,\n                     (Integer) value);\n         } else if (value instanceof Double) {\n@@ -228,6 +229,22 @@ private void setProperty(String propertyName, Object value) {\n             // that expected behavior.\n             componentHost.executeJs(String.format(UPDATE_PROPERTY_FORMAT,\n                     ((JsonValue) value).toJson()), propertyName);\n+        } else if (value instanceof ObjectNode) {\n+            // this gets around executeJavaScript limitation.\n+            // Since properties can take JsonValues, this was needed to allow\n+            // that expected behavior.\n+            componentHost.executeJs(\n+                    String.format(UPDATE_PROPERTY_FORMAT, value), propertyName);\n+        } else if (value instanceof ValueNode) {\n+            // this gets around executeJavaScript limitation.\n+            // Since properties can take JsonValues, this was needed to allow\n+            // that expected behavior.\n+            componentHost.executeJs(\n+                    String.format(UPDATE_PROPERTY_FORMAT, value), propertyName);\n+        } else {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Unknown property type '%s'\",\n+                            value.getClass().getSimpleName()));\n         }\n     }\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponentConfiguration.java b/flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponentConfiguration.java\nindex 64b551fb88f..bf78633e087 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponentConfiguration.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponentConfiguration.java\n@@ -19,6 +19,8 @@\n import java.io.Serializable;\n import java.util.Set;\n \n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n import com.vaadin.flow.component.Component;\n import com.vaadin.flow.component.WebComponentExporter;\n import com.vaadin.flow.di.Instantiator;\n@@ -33,7 +35,7 @@\n  * {@link WebComponentExporter}. Provides all the necessary information to\n  * generate the web component resources and constructs new\n  * {@link WebComponentBinding} instances with\n- * {@link #createWebComponentBinding(com.vaadin.flow.di.Instantiator, com.vaadin.flow.dom.Element, elemental.json.JsonObject)};\n+ * {@link #createWebComponentBinding(com.vaadin.flow.di.Instantiator, com.vaadin.flow.dom.Element, com.fasterxml.jackson.databind.node.ObjectNode)};\n  *\n  * @param <C>\n  *            type of the component being exported\n@@ -98,7 +100,7 @@ public interface WebComponentConfiguration<C extends Component>\n      *         to communicate with the component it is hosting\n      */\n     WebComponentBinding<C> createWebComponentBinding(Instantiator instantiator,\n-            Element element, JsonObject newAttributeDefaults);\n+            Element element, ObjectNode newAttributeDefaults);\n \n     /**\n      * Retrieves the tag name configured by the web component exporter.\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponentUI.java b/flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponentUI.java\nindex 0d6fd6e300c..5bf28866b7d 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponentUI.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponentUI.java\n@@ -22,6 +22,7 @@\n import java.util.Optional;\n import java.util.concurrent.ConcurrentHashMap;\n \n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.slf4j.LoggerFactory;\n \n import com.vaadin.flow.component.Component;\n@@ -45,8 +46,6 @@\n import com.vaadin.flow.theme.Theme;\n import com.vaadin.flow.theme.ThemeDefinition;\n \n-import elemental.json.JsonObject;\n-\n /**\n  * Custom UI for use with WebComponents served from the server.\n  * <p>\n@@ -77,7 +76,7 @@ public static class WebComponentConnectEvent extends ComponentEvent<UI> {\n         private String tag;\n         private String userAssignedId;\n         private String webComponentElementId;\n-        private JsonObject attributeValues;\n+        private ObjectNode attributeValues;\n \n         /**\n          * Creates a new web component connection event.\n@@ -104,7 +103,7 @@ public WebComponentConnectEvent(UI source, boolean fromClient,\n                 @EventData(\"tag\") String tag,\n                 @EventData(\"id\") String webComponentElementId,\n                 @EventData(\"userAssignedId\") String userAssignedId,\n-                @EventData(\"attributeValues\") JsonObject attributeValues) {\n+                @EventData(\"attributeValues\") ObjectNode attributeValues) {\n             super(source, true);\n             this.tag = tag;\n             this.userAssignedId = userAssignedId;\n@@ -144,7 +143,7 @@ public String getWebComponentUserAssignedId() {\n          *\n          * @return the initial attribute values\n          */\n-        public JsonObject getAttributeJson() {\n+        public ObjectNode getAttributeJson() {\n             return attributeValues;\n         }\n     }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponentWrapper.java b/flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponentWrapper.java\nindex 53b54ee4666..ebc8a1b3e46 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponentWrapper.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponentWrapper.java\n@@ -19,6 +19,7 @@\n import java.util.Objects;\n import java.util.Optional;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.slf4j.LoggerFactory;\n \n import com.vaadin.flow.component.ClientCallable;\n@@ -28,8 +29,6 @@\n import com.vaadin.flow.server.webcomponent.WebComponentBinding;\n import com.vaadin.flow.shared.Registration;\n \n-import elemental.json.JsonValue;\n-\n /**\n  * Wrapper component for a web component that exposes {@link ClientCallable}\n  * methods that the client-side components expect to be available.\n@@ -103,7 +102,7 @@ protected WebComponentWrapper(Element rootElement,\n      *            the new value to set\n      */\n     @ClientCallable\n-    public void sync(String property, JsonValue newValue) {\n+    public void sync(String property, JsonNode newValue) {\n         try {\n             webComponentBinding.updateProperty(property, newValue);\n         } catch (IllegalArgumentException e) {\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/dom/DomEvent.java b/flow-server/src/main/java/com/vaadin/flow/dom/DomEvent.java\nindex 9b1ef97e7e5..44af3e5bbbd 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/dom/DomEvent.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/dom/DomEvent.java\n@@ -21,13 +21,16 @@\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.function.Consumer;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.NodeOwner;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.internal.StateTree;\n import com.vaadin.flow.shared.JsonConstants;\n \n+import elemental.json.Json;\n import elemental.json.JsonObject;\n-import elemental.json.JsonValue;\n \n /**\n  * Server-side representation of a DOM event fired in the browser.\n@@ -37,7 +40,7 @@\n  */\n public class DomEvent extends EventObject {\n \n-    private final JsonObject eventData;\n+    private final JsonNode eventData;\n \n     private final String eventType;\n \n@@ -60,6 +63,24 @@ public class DomEvent extends EventObject {\n      * @see DomEventListener\n      */\n     public DomEvent(Element source, String eventType, JsonObject eventData) {\n+        this(source, eventType, JacksonUtils.mapElemental(eventData));\n+    }\n+\n+    /**\n+     * Creates a new DOM event.\n+     *\n+     * @param source\n+     *            the element on which the listener has been attached, not\n+     *            <code>null</code>\n+     * @param eventType\n+     *            the type of the event, not <code>null</code>\n+     * @param eventData\n+     *            additional data related to the event, not <code>null</code>\n+     *\n+     * @see Element#addEventListener(String, DomEventListener)\n+     * @see DomEventListener\n+     */\n+    public DomEvent(Element source, String eventType, JsonNode eventData) {\n         super(source);\n         assert source != null;\n         assert eventType != null;\n@@ -72,32 +93,32 @@ public DomEvent(Element source, String eventType, JsonObject eventData) {\n         eventTarget = extractEventTarget(eventData, source);\n     }\n \n-    private static DebouncePhase extractPhase(JsonObject eventData) {\n-        JsonValue jsonValue = eventData.get(JsonConstants.EVENT_DATA_PHASE);\n+    private static DebouncePhase extractPhase(JsonNode eventData) {\n+        JsonNode jsonValue = eventData.get(JsonConstants.EVENT_DATA_PHASE);\n         if (jsonValue == null) {\n             return DebouncePhase.LEADING;\n         } else {\n-            return DebouncePhase.forIdentifier(jsonValue.asString());\n+            return DebouncePhase.forIdentifier(jsonValue.textValue());\n         }\n     }\n \n-    private static Element extractEventTarget(JsonObject eventData,\n+    private static Element extractEventTarget(JsonNode eventData,\n             Element currentTarget) {\n         return extractElement(eventData, currentTarget,\n                 JsonConstants.MAP_STATE_NODE_EVENT_DATA, false);\n     }\n \n-    static Element extractElement(JsonObject eventData, Element source,\n+    static Element extractElement(JsonNode eventData, Element source,\n             String key, boolean lookUnderUI) {\n         assert key.startsWith(JsonConstants.MAP_STATE_NODE_EVENT_DATA);\n-        if (!eventData.hasKey(key)) {\n+        if (!eventData.has(key)) {\n             return null;\n         }\n-        final JsonValue reportedStateNodeId = eventData.get(key);\n+        final JsonNode reportedStateNodeId = eventData.get(key);\n         if (reportedStateNodeId == null) {\n             return null;\n         }\n-        int id = (int) reportedStateNodeId.asNumber();\n+        int id = reportedStateNodeId.intValue();\n         if (id == -1) {\n             return null;\n         }\n@@ -155,7 +176,7 @@ public String getType() {\n      * @return a JSON object containing event data, never <code>null</code>\n      */\n     public JsonObject getEventData() {\n-        return eventData;\n+        return Json.parse(eventData.toString());\n     }\n \n     /**\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/dom/Element.java b/flow-server/src/main/java/com/vaadin/flow/dom/Element.java\nindex a547478443f..d86c29bf202 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/dom/Element.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/dom/Element.java\n@@ -27,6 +27,13 @@\n import java.util.stream.IntStream;\n import java.util.stream.Stream;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.BooleanNode;\n+import com.fasterxml.jackson.databind.node.NullNode;\n+import com.fasterxml.jackson.databind.node.NumericNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import com.fasterxml.jackson.databind.node.ValueNode;\n import org.jsoup.nodes.Document;\n \n import com.vaadin.flow.component.Component;\n@@ -40,6 +47,7 @@\n import com.vaadin.flow.dom.impl.BasicTextElementStateProvider;\n import com.vaadin.flow.dom.impl.CustomAttribute;\n import com.vaadin.flow.dom.impl.ThemeListImpl;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.JavaScriptSemantics;\n import com.vaadin.flow.internal.JsonCodec;\n import com.vaadin.flow.internal.JsonUtils;\n@@ -682,6 +690,64 @@ public Element setPropertyJson(String name, JsonValue value) {\n         return this;\n     }\n \n+    /**\n+     * Sets the given property to the given JSON value.\n+     * <p>\n+     * Please note that this method does not accept <code>null</code> as a\n+     * value, since {@link JacksonUtils#nullNode()} should be used instead for\n+     * JSON values.\n+     * <p>\n+     * Note that properties changed on the server are updated on the client but\n+     * changes made on the client side are not reflected back to the server\n+     * unless configured using\n+     * {@link #addPropertyChangeListener(String, String, PropertyChangeListener)}\n+     * or {@link DomListenerRegistration#synchronizeProperty(String)}.\n+     *\n+     * @param name\n+     *            the property name, not <code>null</code>\n+     * @param value\n+     *            the property value, not <code>null</code>\n+     * @return this element\n+     */\n+    // Distinct name so setProperty(\"foo\", null) is not ambiguous\n+    public Element setPropertyJson(String name, ObjectNode value) {\n+        if (value == null) {\n+            throw new IllegalArgumentException(USE_SET_PROPERTY_WITH_JSON_NULL);\n+        }\n+\n+        setRawProperty(name, value);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the given property to the given JSON value.\n+     * <p>\n+     * Please note that this method does not accept <code>null</code> as a\n+     * value, since {@link JacksonUtils#nullNode()} should be used instead for\n+     * JSON values.\n+     * <p>\n+     * Note that properties changed on the server are updated on the client but\n+     * changes made on the client side are not reflected back to the server\n+     * unless configured using\n+     * {@link #addPropertyChangeListener(String, String, PropertyChangeListener)}\n+     * or {@link DomListenerRegistration#synchronizeProperty(String)}.\n+     *\n+     * @param name\n+     *            the property name, not <code>null</code>\n+     * @param value\n+     *            the property value, not <code>null</code>\n+     * @return this element\n+     */\n+    // Distinct name so setProperty(\"foo\", null) is not ambiguous\n+    public Element setPropertyJson(String name, ValueNode value) {\n+        if (value == null) {\n+            throw new IllegalArgumentException(USE_SET_PROPERTY_WITH_JSON_NULL);\n+        }\n+\n+        setRawProperty(name, value);\n+        return this;\n+    }\n+\n     /**\n      * Sets the given property to the given bean, converted to a JSON object.\n      * <p>\n@@ -856,6 +922,8 @@ public String getProperty(String name, String defaultValue) {\n             return defaultValue;\n         } else if (value instanceof JsonValue) {\n             return ((JsonValue) value).toJson();\n+        } else if (value instanceof NullNode) {\n+            return defaultValue;\n         } else if (value instanceof Number) {\n             double doubleValue = ((Number) value).doubleValue();\n             int intValue = (int) doubleValue;\n@@ -954,6 +1022,14 @@ public double getProperty(String name, double defaultValue) {\n                     return Double.NaN;\n                 }\n             }\n+        } else if (value instanceof NumericNode) {\n+            return ((NumericNode) value).asDouble(Double.NaN);\n+        } else if (value instanceof BooleanNode) {\n+            return ((BooleanNode) value).booleanValue() ? 1 : 0;\n+        } else if (value instanceof TextNode) {\n+            return ((TextNode) value).asDouble(Double.NaN);\n+        } else if (value instanceof JsonNode) {\n+            return ((JsonNode) value).asDouble(Double.NaN);\n         } else {\n             throw new IllegalStateException(\n                     \"Unsupported property type: \" + value.getClass());\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/ConstantPool.java b/flow-server/src/main/java/com/vaadin/flow/internal/ConstantPool.java\nindex fce956dcc78..bf2ceabffee 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/ConstantPool.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/ConstantPool.java\n@@ -19,8 +19,8 @@\n import java.util.HashSet;\n import java.util.Set;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n \n /**\n  * Keeps track of {@link ConstantPoolKey} values that have already been sent to\n@@ -77,8 +77,8 @@ public boolean hasNewConstants() {\n      *\n      * @return a JSON object describing all new constants\n      */\n-    public JsonObject dumpConstants() {\n-        JsonObject json = Json.createObject();\n+    public JsonNode dumpConstants() {\n+        ObjectNode json = JacksonUtils.createObjectNode();\n \n         newKeys.forEach(key -> key.export(json));\n         newKeys.clear();\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/ConstantPoolKey.java b/flow-server/src/main/java/com/vaadin/flow/internal/ConstantPoolKey.java\nindex 213923a3211..b684ebb98ac 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/ConstantPoolKey.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/ConstantPoolKey.java\n@@ -20,8 +20,8 @@\n import java.nio.charset.StandardCharsets;\n import java.util.Base64;\n \n-import elemental.json.JsonObject;\n-import elemental.json.JsonValue;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n \n /**\n  * Wraps a JSON value that should be stored in the {@link ConstantPool} shared\n@@ -39,7 +39,7 @@\n  * @since 1.0\n  */\n public class ConstantPoolKey implements Serializable {\n-    private final JsonValue json;\n+    private final JsonNode json;\n     private String id;\n \n     /**\n@@ -50,7 +50,7 @@ public class ConstantPoolKey implements Serializable {\n      * @param json\n      *            the JSON constant, not <code>null</code>\n      */\n-    public ConstantPoolKey(JsonValue json) {\n+    public ConstantPoolKey(JsonNode json) {\n         assert json != null;\n         this.json = json;\n     }\n@@ -76,8 +76,8 @@ public String getId() {\n      *            the constant pool update that is to be sent to the client, not\n      *            <code>null</code>\n      */\n-    public void export(JsonObject clientConstantPoolUpdate) {\n-        clientConstantPoolUpdate.put(getId(), json);\n+    public void export(ObjectNode clientConstantPoolUpdate) {\n+        clientConstantPoolUpdate.set(getId(), json);\n     }\n \n     /**\n@@ -88,8 +88,8 @@ public void export(JsonObject clientConstantPoolUpdate) {\n      *            the JSON to get a hash of, not <code>null</code>\n      * @return the key uniquely identifying the given JSON value\n      */\n-    private static String calculateHash(JsonValue json) {\n-        byte[] digest = MessageDigestUtil.sha256(json.toJson());\n+    private static String calculateHash(JsonNode json) {\n+        byte[] digest = MessageDigestUtil.sha256(json.toString());\n \n         /*\n          * Only use first 64 bits to keep id string short (1 in 100 000 000\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/JacksonCodec.java b/flow-server/src/main/java/com/vaadin/flow/internal/JacksonCodec.java\nindex 218d1b9441c..8fcf9bd7aa2 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/JacksonCodec.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/JacksonCodec.java\n@@ -21,7 +21,7 @@\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.node.ArrayNode;\n import com.fasterxml.jackson.databind.node.JsonNodeType;\n-import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n \n import com.vaadin.flow.component.Component;\n import com.vaadin.flow.dom.Element;\n@@ -200,12 +200,14 @@ public static JsonNode encodeWithoutTypeInfo(Object value) {\n         Class<?> type = value.getClass();\n         if (String.class.equals(value.getClass())) {\n             return JacksonUtils.getMapper().valueToTree(value);\n-        } else if (Integer.class.equals(type) || Double.class.equals(type)) {\n+        } else if (Integer.class.equals(type)) {\n+            return JacksonUtils.getMapper()\n+                    .valueToTree(((Number) value).intValue());\n+        } else if (Double.class.equals(type)) {\n             return JacksonUtils.getMapper()\n                     .valueToTree(((Number) value).doubleValue());\n         } else if (Boolean.class.equals(type)) {\n-            return JacksonUtils.getMapper()\n-                    .valueToTree(((Boolean) value).booleanValue());\n+            return JacksonUtils.getMapper().valueToTree(value);\n         } else if (JsonNode.class.isAssignableFrom(type)) {\n             return (JsonNode) value;\n         }\n@@ -224,20 +226,15 @@ public static JsonNode encodeWithoutTypeInfo(Object value) {\n      *            the JSON value to decode\n      * @return the decoded value\n      */\n-    public static Serializable decodeWithoutTypeInfo(ObjectNode json) {\n+    public static Serializable decodeWithoutTypeInfo(JsonNode json) {\n         assert json != null;\n-        switch (json.getNodeType()) {\n-        case BOOLEAN:\n-            return decodeAs(json, Boolean.class);\n-        case STRING:\n-            return decodeAs(json, String.class);\n-        case NUMBER:\n-            return decodeAs(json, Double.class);\n-        case NULL:\n-            return null;\n-        default:\n-            return json;\n-        }\n+        return switch (json.getNodeType()) {\n+        case BOOLEAN -> decodeAs(json, Boolean.class);\n+        case STRING -> decodeAs(json, String.class);\n+        case NUMBER -> decodeAs(json, Double.class);\n+        case NULL -> null;\n+        default -> (Serializable) json;\n+        };\n \n     }\n \n@@ -266,11 +263,31 @@ public static <T> T decodeAs(JsonNode json, Class<T> type) {\n         if (type == String.class) {\n             return type.cast(json.asText());\n         } else if (convertedType == Boolean.class) {\n-            return (T) convertedType.cast(Boolean.valueOf(json.asBoolean()));\n+            if (json instanceof TextNode) {\n+                return (T) convertedType\n+                        .cast(Boolean.valueOf(json.textValue()));\n+            }\n+            return (T) convertedType.cast(json.asBoolean());\n         } else if (convertedType == Double.class) {\n-            return (T) convertedType.cast(Double.valueOf(json.doubleValue()));\n+            try {\n+                if (json instanceof TextNode) {\n+                    return (T) convertedType\n+                            .cast(Double.valueOf(json.textValue()));\n+                }\n+            } catch (NumberFormatException e) {\n+                // NO-OP\n+            }\n+            return (T) convertedType.cast(json.doubleValue());\n         } else if (convertedType == Integer.class) {\n-            return (T) convertedType.cast(Integer.valueOf(json.intValue()));\n+            try {\n+                if (json instanceof TextNode) {\n+                    return (T) convertedType\n+                            .cast(Integer.valueOf(json.textValue()));\n+                }\n+            } catch (NumberFormatException e) {\n+                // NO-OP\n+            }\n+            return (T) convertedType.cast(json.intValue());\n         } else if (JsonNode.class.isAssignableFrom(type)) {\n             return type.cast(json);\n         } else {\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java b/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\nindex b4d9dc34be0..4fe4fd9c7ee 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\n@@ -40,8 +40,12 @@\n import com.fasterxml.jackson.databind.node.DoubleNode;\n import com.fasterxml.jackson.databind.node.JsonNodeType;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.ValueNode;\n import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\n \n+import elemental.json.JsonObject;\n+import elemental.json.JsonValue;\n+\n /**\n  * Helpers for using <code>jackson</code>.\n  * <p>\n@@ -106,6 +110,44 @@ public static JsonNode createNode(Object value) {\n         return objectMapper.valueToTree(value);\n     }\n \n+    /**\n+     * Create a nullNode for null value.\n+     *\n+     * @return NullNode\n+     */\n+    public static ValueNode nullNode() {\n+        return (ValueNode) objectMapper.nullNode();\n+    }\n+\n+    /**\n+     * Map JsonObject to ObjectNode.\n+     *\n+     * @param jsonObject\n+     *            JsonObject to change\n+     * @return ObjectNode of elemental json object\n+     */\n+    public static ObjectNode mapElemental(JsonObject jsonObject) {\n+        try {\n+            return (ObjectNode) objectMapper.readTree(jsonObject.toJson());\n+        } catch (JsonProcessingException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    /**\n+     * Map JsonValue to ObjectNode.\n+     *\n+     * @param jsonValue\n+     *            JsonValue to change\n+     * @return ObjectNode of elemental json value\n+     */\n+    public static JsonNode mapElemental(JsonValue jsonValue) {\n+        if (jsonValue == null) {\n+            return nullNode();\n+        }\n+        return objectMapper.valueToTree(jsonValue.asString());\n+    }\n+\n     /**\n      * Collects a stream of JSON values to a JSON array.\n      *\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/JavaScriptSemantics.java b/flow-server/src/main/java/com/vaadin/flow/internal/JavaScriptSemantics.java\nindex e1200c3f7e7..9cb6c0f5192 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/JavaScriptSemantics.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/JavaScriptSemantics.java\n@@ -15,6 +15,9 @@\n  */\n package com.vaadin.flow.internal;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n import elemental.json.JsonValue;\n \n /**\n@@ -52,6 +55,10 @@ public static boolean isTrueish(Object value) {\n             return ((Boolean) value).booleanValue();\n         } else if (value instanceof JsonValue) {\n             return ((JsonValue) value).asBoolean();\n+        } else if (value instanceof ObjectNode) {\n+            return ((JsonNode) value).asBoolean(true);\n+        } else if (value instanceof JsonNode) {\n+            return ((JsonNode) value).asBoolean();\n         } else if (value instanceof Number) {\n             double number = ((Number) value).doubleValue();\n             // Special comparison to keep sonarqube happy\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/AbstractPropertyMap.java b/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/AbstractPropertyMap.java\nindex 89023905974..c99e8a96e17 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/AbstractPropertyMap.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/AbstractPropertyMap.java\n@@ -18,6 +18,7 @@\n import java.io.Serializable;\n import java.util.stream.Stream;\n \n+import com.vaadin.flow.internal.JacksonCodec;\n import com.vaadin.flow.internal.JsonCodec;\n import com.vaadin.flow.internal.ReflectTools;\n import com.vaadin.flow.internal.StateNode;\n@@ -127,6 +128,7 @@ public static boolean isValidValueType(Serializable value) {\n         }\n         Class<?> type = ReflectTools.convertPrimitiveType(value.getClass());\n         return JsonCodec.canEncodeWithoutTypeInfo(type)\n+                || JacksonCodec.canEncodeWithoutTypeInfo(type)\n                 || StateNode.class.isAssignableFrom(type);\n     }\n \n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementListenerMap.java b/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementListenerMap.java\nindex 6b61ff46933..5967321b0e8 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementListenerMap.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementListenerMap.java\n@@ -29,6 +29,7 @@\n import java.util.function.Function;\n import java.util.stream.Stream;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.slf4j.LoggerFactory;\n \n import com.vaadin.flow.component.UI;\n@@ -39,13 +40,11 @@\n import com.vaadin.flow.dom.DomListenerRegistration;\n import com.vaadin.flow.function.SerializableRunnable;\n import com.vaadin.flow.internal.ConstantPoolKey;\n-import com.vaadin.flow.internal.JsonUtils;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.shared.JsonConstants;\n \n-import elemental.json.Json;\n import elemental.json.JsonObject;\n-import elemental.json.JsonValue;\n \n /**\n  * Map of DOM events with server-side listeners. The key set of this map\n@@ -81,24 +80,24 @@ public void addDebouncePhases(int timeout, Set<DebouncePhase> phases) {\n                     });\n         }\n \n-        public JsonValue toJson() {\n+        public JsonNode toJson() {\n             if (debounceSettings.isEmpty()) {\n-                return Json.create(false);\n+                return JacksonUtils.createNode(false);\n             } else if (debounceSettings.size() == 1\n                     && debounceSettings.containsKey(Integer.valueOf(0))) {\n                 // Shorthand if only debounce is a dummy filter debounce\n-                return Json.create(true);\n+                return JacksonUtils.createNode(true);\n             } else {\n                 // [[timeout1, phase1, phase2, ...], [timeout2, phase1, ...]]\n                 return debounceSettings.entrySet().stream()\n                         .map(entry -> Stream.concat(\n-                                Stream.of(\n-                                        Json.create(entry.getKey().intValue())),\n+                                Stream.of(JacksonUtils\n+                                        .createNode(entry.getKey().intValue())),\n                                 entry.getValue().stream()\n                                         .map(DebouncePhase::getIdentifier)\n-                                        .map(Json::create))\n-                                .collect(JsonUtils.asArray()))\n-                        .collect(JsonUtils.asArray());\n+                                        .map(JacksonUtils::createNode))\n+                                .collect(JacksonUtils.asArray()))\n+                        .collect(JacksonUtils.asArray());\n             }\n \n         }\n@@ -200,7 +199,12 @@ public String getFilter() {\n             return filter;\n         }\n \n+        @Deprecated\n         boolean matchesFilter(JsonObject eventData) {\n+            return matchesFilter(JacksonUtils.mapElemental(eventData));\n+        }\n+\n+        boolean matchesFilter(JsonNode eventData) {\n             if (filter == null) {\n                 // No filter: always matches\n                 return true;\n@@ -211,8 +215,8 @@ boolean matchesFilter(JsonObject eventData) {\n                 return false;\n             }\n \n-            if (eventData.hasKey(filter)) {\n-                return eventData.getBoolean(filter);\n+            if (eventData.has(filter)) {\n+                return eventData.get(filter).booleanValue();\n             } else {\n                 return false;\n             }\n@@ -393,7 +397,7 @@ private Map<String, ExpressionSettings> collectEventExpressions(\n     private void updateEventSettings(String eventType) {\n         Map<String, ExpressionSettings> eventSettings = collectEventExpressions(\n                 eventType);\n-        JsonObject eventSettingsJson = JsonUtils.createObject(eventSettings,\n+        JsonNode eventSettingsJson = JacksonUtils.createObject(eventSettings,\n                 ExpressionSettings::toJson);\n \n         ConstantPoolKey constantPoolKey = new ConstantPoolKey(\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/PolymerEventListenerMap.java b/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/PolymerEventListenerMap.java\nindex 7095875bb91..e23a7b1ea67 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/PolymerEventListenerMap.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/PolymerEventListenerMap.java\n@@ -22,12 +22,10 @@\n import java.util.Map;\n \n import com.vaadin.flow.internal.ConstantPoolKey;\n-import com.vaadin.flow.internal.JsonUtils;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.shared.Registration;\n \n-import elemental.json.Json;\n-\n /**\n  * Map of PolymerTemplate events with server-side listeners. The key set of this\n  * map describes the event types for which event date is present.\n@@ -104,8 +102,8 @@ public Registration add(String methodName, String[] eventDataExpressions) {\n \n     private static ConstantPoolKey createConstantPoolKey(\n             List<String> eventData) {\n-        return new ConstantPoolKey(eventData.stream().map(Json::create)\n-                .collect(JsonUtils.asArray()));\n+        return new ConstantPoolKey(eventData.stream()\n+                .map(JacksonUtils::createNode).collect(JacksonUtils.asArray()));\n     }\n \n     private void removeListener(String eventType) {\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ReturnChannelMap.java b/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ReturnChannelMap.java\nindex f4cef616b75..797bf3e3331 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ReturnChannelMap.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ReturnChannelMap.java\n@@ -19,13 +19,13 @@\n import java.util.Map;\n import java.util.Objects;\n \n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+\n import com.vaadin.flow.dom.DisabledUpdateMode;\n import com.vaadin.flow.function.SerializableBiConsumer;\n import com.vaadin.flow.function.SerializableConsumer;\n import com.vaadin.flow.internal.StateNode;\n \n-import elemental.json.JsonArray;\n-\n /**\n  * Server-side node feature that keeps track of the return channels registered\n  * for a state node.\n@@ -44,12 +44,12 @@ public class ReturnChannelMap extends ServerSideFeature {\n \n     private class ChannelImpl implements ReturnChannelRegistration {\n         private final int channelId;\n-        private final SerializableBiConsumer<JsonArray, ReturnChannelRegistration> handler;\n+        private final SerializableBiConsumer<ArrayNode, ReturnChannelRegistration> handler;\n \n         private DisabledUpdateMode disabledUpdateMode = DisabledUpdateMode.ONLY_WHEN_ENABLED;\n \n         public ChannelImpl(int channelId,\n-                SerializableBiConsumer<JsonArray, ReturnChannelRegistration> handler) {\n+                SerializableBiConsumer<ArrayNode, ReturnChannelRegistration> handler) {\n             this.channelId = channelId;\n             this.handler = handler;\n         }\n@@ -70,7 +70,7 @@ public int getChannelId() {\n         }\n \n         @Override\n-        public void invoke(JsonArray arguments) {\n+        public void invoke(ArrayNode arguments) {\n             handler.accept(arguments, this);\n         }\n \n@@ -117,7 +117,7 @@ public ReturnChannelMap(StateNode node) {\n      * @return a return channel registration\n      */\n     public ReturnChannelRegistration registerChannel(\n-            SerializableConsumer<JsonArray> handler) {\n+            SerializableConsumer<ArrayNode> handler) {\n         assert handler != null;\n \n         return registerChannel(\n@@ -141,7 +141,7 @@ public ReturnChannelRegistration registerChannel(\n      * @return a return channel registration\n      */\n     public ReturnChannelRegistration registerChannel(\n-            SerializableBiConsumer<JsonArray, ReturnChannelRegistration> handler) {\n+            SerializableBiConsumer<ArrayNode, ReturnChannelRegistration> handler) {\n         assert handler != null;\n \n         ChannelImpl channel = new ChannelImpl(nextId++, handler);\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ReturnChannelRegistration.java b/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ReturnChannelRegistration.java\nindex 9a9e459ab38..472d9d74cb1 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ReturnChannelRegistration.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ReturnChannelRegistration.java\n@@ -15,11 +15,11 @@\n  */\n package com.vaadin.flow.internal.nodefeature;\n \n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+\n import com.vaadin.flow.dom.DisabledUpdateMode;\n import com.vaadin.flow.shared.Registration;\n \n-import elemental.json.JsonArray;\n-\n /**\n  * A registration for a return channel. A new return channel can be registered\n  * for a state node using\n@@ -55,7 +55,7 @@ public interface ReturnChannelRegistration extends Registration {\n      *            a JSON array containing passed from the client, not\n      *            <code>null</code>\n      */\n-    void invoke(JsonArray arguments);\n+    void invoke(ArrayNode arguments);\n \n     /**\n      * Gets the setting for whether this channel will receive updates in case\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/ReturnChannelHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/ReturnChannelHandler.java\nindex 4597959e3a7..d1383796428 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/ReturnChannelHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/ReturnChannelHandler.java\n@@ -17,6 +17,8 @@\n \n import java.util.Optional;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -28,9 +30,6 @@\n import com.vaadin.flow.server.communication.rpc.AbstractRpcInvocationHandler;\n import com.vaadin.flow.shared.JsonConstants;\n \n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n-\n /**\n  * RPC handler for return channel messages.\n  * <p>\n@@ -48,11 +47,11 @@ public String getRpcType() {\n \n     @Override\n     protected Optional<Runnable> handleNode(StateNode node,\n-            JsonObject invocationJson) {\n-        int channelId = (int) invocationJson\n-                .getNumber(JsonConstants.RPC_CHANNEL);\n-        JsonArray arguments = invocationJson\n-                .getArray(JsonConstants.RPC_CHANNEL_ARGUMENTS);\n+            JsonNode invocationJson) {\n+        int channelId = invocationJson.get(JsonConstants.RPC_CHANNEL)\n+                .intValue();\n+        ArrayNode arguments = (ArrayNode) invocationJson\n+                .get(JsonConstants.RPC_CHANNEL_ARGUMENTS);\n \n         if (!node.hasFeature(ReturnChannelMap.class)) {\n             getLogger().warn(\"Node has no return channels: {}\", invocationJson);\n@@ -81,7 +80,7 @@ protected Optional<Runnable> handleNode(StateNode node,\n     }\n \n     @Override\n-    protected boolean allowInert(UI ui, JsonObject invocationJson) {\n+    protected boolean allowInert(UI ui, JsonNode invocationJson) {\n         StateNode node = ui.getInternals().getStateTree()\n                 .getNodeById(getNodeId(invocationJson));\n         // Allow calls if a return channel has been registered for the node.\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java\nindex 84d50932784..9d706dd73c3 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java\n@@ -35,6 +35,7 @@\n \n import com.vaadin.flow.component.PollEvent;\n import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.MessageDigestUtil;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.router.PreserveOnRefresh;\n@@ -532,7 +533,8 @@ private void handleInvocations(UI ui, JsonArray invocationsData) {\n             assert type != null;\n             if (JsonConstants.RPC_TYPE_MAP_SYNC.equals(type)) {\n                 // Handle these before any RPC invocations.\n-                mapSyncHandler.handle(ui, invocationJson)\n+                mapSyncHandler\n+                        .handle(ui, JacksonUtils.mapElemental(invocationJson))\n                         .ifPresent(runnable -> pendingChangeEvents.add(() -> {\n                             try {\n                                 runnable.run();\n@@ -565,7 +567,8 @@ private void handleInvocationData(UI ui, JsonObject invocationJson) {\n                     \"Unsupported event type: \" + type);\n         }\n         try {\n-            Optional<Runnable> handle = handler.handle(ui, invocationJson);\n+            Optional<Runnable> handle = handler.handle(ui,\n+                    JacksonUtils.mapElemental(invocationJson));\n             assert !handle.isPresent()\n                     : \"RPC handler \" + handler.getClass().getName()\n                             + \" returned a Runnable even though it shouldn't\";\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/UidlWriter.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/UidlWriter.java\nindex ec716fe0a91..6442e6eeb58 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/UidlWriter.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/UidlWriter.java\n@@ -33,6 +33,9 @@\n import java.util.function.Consumer;\n import java.util.stream.Stream;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.NullNode;\n+import com.fasterxml.jackson.databind.node.ValueNode;\n import org.apache.commons.io.IOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -173,8 +176,8 @@ public JsonObject createUidl(UI ui, boolean async, boolean resync) {\n                 new ResolveContext(service, session.getBrowser()));\n \n         if (uiInternals.getConstantPool().hasNewConstants()) {\n-            response.put(\"constants\",\n-                    uiInternals.getConstantPool().dumpConstants());\n+            response.put(\"constants\", Json.parse(\n+                    uiInternals.getConstantPool().dumpConstants().toString()));\n         }\n         if (stateChanges.length() != 0) {\n             response.put(\"changes\", stateChanges);\n@@ -317,7 +320,14 @@ private static ReturnChannelRegistration createReturnValueChannel(\n                 .registerChannel(arguments -> {\n                     registrations.forEach(ReturnChannelRegistration::remove);\n \n-                    action.accept(arguments.get(0));\n+                    JsonNode jsonNode = arguments.get(0);\n+                    if (jsonNode instanceof NullNode) {\n+                        action.accept(Json.createNull());\n+                    } else if (jsonNode instanceof ValueNode) {\n+                        action.accept(Json.create(jsonNode.asText()));\n+                    } else {\n+                        action.accept(Json.parse(jsonNode.toString()));\n+                    }\n                 });\n \n         registrations.add(channel);\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/AbstractRpcInvocationHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/AbstractRpcInvocationHandler.java\nindex 63bdd7dacbc..c8b49af8b5f 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/AbstractRpcInvocationHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/AbstractRpcInvocationHandler.java\n@@ -19,6 +19,7 @@\n import java.util.List;\n import java.util.Optional;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -27,11 +28,11 @@\n import com.vaadin.flow.component.PollEvent;\n import com.vaadin.flow.component.UI;\n import com.vaadin.flow.dom.Element;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.internal.nodefeature.ElementData;\n import com.vaadin.flow.router.Route;\n import com.vaadin.flow.shared.JsonConstants;\n-import elemental.json.JsonObject;\n \n /**\n  * Abstract invocation handler implementation with common methods.\n@@ -46,8 +47,8 @@ public abstract class AbstractRpcInvocationHandler\n         implements RpcInvocationHandler {\n \n     @Override\n-    public Optional<Runnable> handle(UI ui, JsonObject invocationJson) {\n-        assert invocationJson.hasKey(JsonConstants.RPC_NODE);\n+    public Optional<Runnable> handle(UI ui, JsonNode invocationJson) {\n+        assert invocationJson.has(JsonConstants.RPC_NODE);\n         StateNode node = ui.getInternals().getStateTree()\n                 .getNodeById(getNodeId(invocationJson));\n         if (node == null) {\n@@ -111,7 +112,7 @@ private void logHandlingIgnoredMessage(StateNode node, String reason) {\n      * @return a boolean indicating that the Poll RPC invocation is valid or\n      *         not.\n      */\n-    private boolean isValidPollInvocation(UI ui, JsonObject invocationJson) {\n+    private boolean isValidPollInvocation(UI ui, JsonNode invocationJson) {\n \n         if (!isPollEventInvocation(invocationJson)) {\n             return false;\n@@ -134,10 +135,10 @@ private boolean isValidPollInvocation(UI ui, JsonObject invocationJson) {\n         return true;\n     }\n \n-    private boolean isPollEventInvocation(JsonObject invocationJson) {\n-        return invocationJson.hasKey(JsonConstants.RPC_EVENT_TYPE)\n-                && PollEvent.DOM_EVENT_NAME.equalsIgnoreCase(\n-                        invocationJson.getString(JsonConstants.RPC_EVENT_TYPE));\n+    private boolean isPollEventInvocation(JsonNode invocationJson) {\n+        return invocationJson.has(JsonConstants.RPC_EVENT_TYPE)\n+                && PollEvent.DOM_EVENT_NAME.equalsIgnoreCase(invocationJson\n+                        .get(JsonConstants.RPC_EVENT_TYPE).textValue());\n     }\n \n     private boolean isPollingEnabledForUI(UI ui) {\n@@ -159,12 +160,12 @@ private boolean isPollingEnabledForUI(UI ui) {\n      * does not include any extra malicious payloads.\n      * <p>\n      * This method checks the existence of first two allowed keys as the\n-     * {@link #isPollEventInvocation(JsonObject)} had already checked for the\n+     * {@link #isPollEventInvocation(JsonNode)} had already checked for the\n      * existence of the\n      * {@link com.vaadin.flow.shared.JsonConstants#RPC_EVENT_TYPE} before this\n      * method is called.\n      *\n-     * @see #isValidPollInvocation(UI, JsonObject)\n+     * @see #isValidPollInvocation(UI, JsonNode)\n      *\n      * @param ui\n      *            the UI instance which the Rpc event is coming from.\n@@ -174,19 +175,19 @@ private boolean isPollingEnabledForUI(UI ui) {\n      *         accordance with the UI instance.\n      */\n     private boolean isLegitimatePollEventInvocation(UI ui,\n-            JsonObject invocationJson) {\n+            JsonNode invocationJson) {\n         List<String> allowedKeys = Arrays.asList(JsonConstants.RPC_TYPE,\n                 JsonConstants.RPC_NODE, JsonConstants.RPC_EVENT_TYPE);\n-        List<String> invocationKeys = Arrays.asList(invocationJson.keys());\n+        List<String> invocationKeys = JacksonUtils.getKeys(invocationJson);\n         if (!allowedKeys.containsAll(invocationKeys)) {\n             return false;\n         }\n \n-        if (!invocationJson.hasKey(JsonConstants.RPC_TYPE)) {\n+        if (!invocationJson.has(JsonConstants.RPC_TYPE)) {\n             return false;\n         }\n-        if (!JsonConstants.RPC_TYPE_EVENT\n-                .equals(invocationJson.getString(JsonConstants.RPC_TYPE))) {\n+        if (!JsonConstants.RPC_TYPE_EVENT.equals(\n+                invocationJson.get(JsonConstants.RPC_TYPE).textValue())) {\n             return false;\n         }\n \n@@ -208,7 +209,7 @@ private boolean isLegitimatePollEventInvocation(UI ui,\n      * @return a boolean indicating that the inert status should be ignored for\n      *         the current invocation or not.\n      */\n-    protected boolean allowInert(UI ui, JsonObject invocationJson) {\n+    protected boolean allowInert(UI ui, JsonNode invocationJson) {\n         return isValidPollInvocation(ui, invocationJson);\n     }\n \n@@ -223,14 +224,14 @@ protected boolean allowInert(UI ui, JsonObject invocationJson) {\n      * @return an optional runnable\n      */\n     protected abstract Optional<Runnable> handleNode(StateNode node,\n-            JsonObject invocationJson);\n+            JsonNode invocationJson);\n \n     private static Logger getLogger() {\n         return LoggerFactory\n                 .getLogger(AbstractRpcInvocationHandler.class.getName());\n     }\n \n-    protected static int getNodeId(JsonObject invocationJson) {\n-        return (int) invocationJson.getNumber(JsonConstants.RPC_NODE);\n+    protected static int getNodeId(JsonNode invocationJson) {\n+        return invocationJson.get(JsonConstants.RPC_NODE).intValue();\n     }\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/AttachExistingElementRpcHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/AttachExistingElementRpcHandler.java\nindex cf54e8148e0..a84cbd31238 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/AttachExistingElementRpcHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/AttachExistingElementRpcHandler.java\n@@ -17,6 +17,8 @@\n \n import java.util.Optional;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+\n import com.vaadin.flow.dom.ChildElementConsumer;\n import com.vaadin.flow.dom.Element;\n import com.vaadin.flow.dom.Node;\n@@ -25,8 +27,6 @@\n import com.vaadin.flow.internal.nodefeature.AttachExistingElementFeature;\n import com.vaadin.flow.shared.JsonConstants;\n \n-import elemental.json.JsonObject;\n-\n /**\n  * RPC handler for a client-side response on attach existing element request.\n  * <p>\n@@ -52,20 +52,20 @@ public String getRpcType() {\n \n     @Override\n     protected Optional<Runnable> handleNode(StateNode node,\n-            JsonObject invocationJson) {\n-        assert invocationJson.hasKey(JsonConstants.RPC_ATTACH_REQUESTED_ID);\n-        assert invocationJson.hasKey(JsonConstants.RPC_ATTACH_ASSIGNED_ID);\n-        assert invocationJson.hasKey(JsonConstants.RPC_ATTACH_TAG_NAME);\n-        assert invocationJson.hasKey(JsonConstants.RPC_ATTACH_INDEX);\n-\n-        int requestedId = (int) invocationJson\n-                .getNumber(JsonConstants.RPC_ATTACH_REQUESTED_ID);\n-        int assignedId = (int) invocationJson\n-                .getNumber(JsonConstants.RPC_ATTACH_ASSIGNED_ID);\n-        String tag = invocationJson\n-                .getString(JsonConstants.RPC_ATTACH_TAG_NAME);\n-        int index = (int) invocationJson\n-                .getNumber(JsonConstants.RPC_ATTACH_INDEX);\n+            JsonNode invocationJson) {\n+        assert invocationJson.has(JsonConstants.RPC_ATTACH_REQUESTED_ID);\n+        assert invocationJson.has(JsonConstants.RPC_ATTACH_ASSIGNED_ID);\n+        assert invocationJson.has(JsonConstants.RPC_ATTACH_TAG_NAME);\n+        assert invocationJson.has(JsonConstants.RPC_ATTACH_INDEX);\n+\n+        int requestedId = invocationJson\n+                .get(JsonConstants.RPC_ATTACH_REQUESTED_ID).intValue();\n+        int assignedId = invocationJson\n+                .get(JsonConstants.RPC_ATTACH_ASSIGNED_ID).intValue();\n+        String tag = invocationJson.get(JsonConstants.RPC_ATTACH_TAG_NAME)\n+                .textValue();\n+        int index = invocationJson.get(JsonConstants.RPC_ATTACH_INDEX)\n+                .intValue();\n \n         AttachExistingElementFeature feature = node\n                 .getFeature(AttachExistingElementFeature.class);\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/AttachTemplateChildRpcHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/AttachTemplateChildRpcHandler.java\nindex 05d59a3c991..d59aa5b8ebd 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/AttachTemplateChildRpcHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/AttachTemplateChildRpcHandler.java\n@@ -17,6 +17,8 @@\n \n import java.util.Optional;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.NullNode;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -25,10 +27,6 @@\n import com.vaadin.flow.internal.nodefeature.ElementData;\n import com.vaadin.flow.shared.JsonConstants;\n \n-import elemental.json.JsonNull;\n-import elemental.json.JsonObject;\n-import elemental.json.JsonValue;\n-\n /**\n  * RPC handler for a client-side response on attach existing element by id\n  * request.\n@@ -53,21 +51,21 @@ public String getRpcType() {\n \n     @Override\n     protected Optional<Runnable> handleNode(StateNode node,\n-            JsonObject invocationJson) {\n-        assert invocationJson.hasKey(JsonConstants.RPC_ATTACH_REQUESTED_ID);\n-        assert invocationJson.hasKey(JsonConstants.RPC_ATTACH_ASSIGNED_ID);\n-        assert invocationJson.hasKey(JsonConstants.RPC_ATTACH_ID);\n+            JsonNode invocationJson) {\n+        assert invocationJson.has(JsonConstants.RPC_ATTACH_REQUESTED_ID);\n+        assert invocationJson.has(JsonConstants.RPC_ATTACH_ASSIGNED_ID);\n+        assert invocationJson.has(JsonConstants.RPC_ATTACH_ID);\n \n-        int requestedId = (int) invocationJson\n-                .getNumber(JsonConstants.RPC_ATTACH_REQUESTED_ID);\n-        int assignedId = (int) invocationJson\n-                .getNumber(JsonConstants.RPC_ATTACH_ASSIGNED_ID);\n+        int requestedId = invocationJson\n+                .get(JsonConstants.RPC_ATTACH_REQUESTED_ID).intValue();\n+        int assignedId = invocationJson\n+                .get(JsonConstants.RPC_ATTACH_ASSIGNED_ID).intValue();\n \n         StateTree tree = (StateTree) node.getOwner();\n         StateNode requestedNode = tree.getNodeById(requestedId);\n \n         StateNode parent = tree.getNodeById(requestedId).getParent();\n-        JsonValue id = invocationJson.get(JsonConstants.RPC_ATTACH_ID);\n+        JsonNode id = invocationJson.get(JsonConstants.RPC_ATTACH_ID);\n         String tag = requestedNode.getFeature(ElementData.class).getTag();\n \n         Logger logger = LoggerFactory\n@@ -76,7 +74,7 @@ protected Optional<Runnable> handleNode(StateNode node,\n         if (assignedId == -1) {\n             logger.error(\"Attach existing element has failed because \"\n                     + \"the client-side element is not found\");\n-            if (id instanceof JsonNull) {\n+            if (id instanceof NullNode) {\n                 throw new IllegalStateException(String.format(\n                         \"The element with the tag name '%s' was \"\n                                 + \"not found in the parent with id='%d'\",\n@@ -85,12 +83,12 @@ protected Optional<Runnable> handleNode(StateNode node,\n                 throw new IllegalStateException(String.format(\n                         \"The element with the tag name '%s' and id '%s' was \"\n                                 + \"not found in the parent with id='%d'\",\n-                        tag, id.asString(), parent.getId()));\n+                        tag, id.textValue(), parent.getId()));\n             }\n         } else if (requestedId != assignedId) {\n             logger.error(\"Attach existing element has failed because \"\n                     + \"the element has been already attached from the server side\");\n-            if (id instanceof JsonNull) {\n+            if (id instanceof NullNode) {\n                 throw new IllegalStateException(String.format(\n                         \"The element with the tag name '%s' is already \"\n                                 + \"attached to the parent with id='%d'\",\n@@ -99,7 +97,7 @@ protected Optional<Runnable> handleNode(StateNode node,\n                 throw new IllegalStateException(String.format(\n                         \"The element with the tag name '%s' and id '%s' is \"\n                                 + \"already attached to the parent with id='%d'\",\n-                        tag, id.asString(), parent.getId()));\n+                        tag, id.textValue(), parent.getId()));\n             }\n         } else {\n             logger.error(\"Attach existing element request succeeded. \"\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/DefaultRpcDecoder.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/DefaultRpcDecoder.java\nindex 47675a6c805..4bba9184384 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/DefaultRpcDecoder.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/DefaultRpcDecoder.java\n@@ -15,19 +15,19 @@\n  */\n package com.vaadin.flow.server.communication.rpc;\n \n-import com.vaadin.flow.internal.JsonCodec;\n+import com.fasterxml.jackson.databind.JsonNode;\n \n-import elemental.json.JsonValue;\n+import com.vaadin.flow.internal.JacksonCodec;\n \n /**\n  * Decodes the standard basic types from their JSON representation.\n  * <p>\n  * Delegates to the standard JSON deserializer method\n- * {@link JsonCodec#decodeAs(JsonValue, Class)}.\n+ * {@link JacksonCodec#decodeAs(JsonNode, Class)}.\n  * <p>\n  * For internal use only. May be renamed or removed in a future release.\n  *\n- * @see JsonCodec#decodeAs(JsonValue, Class)\n+ * @see JacksonCodec#decodeAs(JsonNode, Class)\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n@@ -36,14 +36,14 @@\n public class DefaultRpcDecoder implements RpcDecoder {\n \n     @Override\n-    public boolean isApplicable(JsonValue value, Class<?> type) {\n-        return JsonCodec.canEncodeWithoutTypeInfo(type);\n+    public boolean isApplicable(JsonNode value, Class<?> type) {\n+        return JacksonCodec.canEncodeWithoutTypeInfo(type);\n     }\n \n     @Override\n-    public <T> T decode(JsonValue value, Class<T> type)\n+    public <T> T decode(JsonNode value, Class<T> type)\n             throws RpcDecodeException {\n-        return JsonCodec.decodeAs(value, type);\n+        return JacksonCodec.decodeAs(value, type);\n     }\n \n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/EventRpcHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/EventRpcHandler.java\nindex 0172fc4a319..36e92ce0f76 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/EventRpcHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/EventRpcHandler.java\n@@ -17,14 +17,15 @@\n \n import java.util.Optional;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+\n import com.vaadin.flow.component.UI;\n import com.vaadin.flow.dom.DomEvent;\n import com.vaadin.flow.dom.Element;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.internal.nodefeature.ElementListenerMap;\n import com.vaadin.flow.shared.JsonConstants;\n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n \n /**\n  * RPC handler for events.\n@@ -45,16 +46,15 @@ public String getRpcType() {\n \n     @Override\n     public Optional<Runnable> handleNode(StateNode node,\n-            JsonObject invocationJson) {\n-        assert invocationJson.hasKey(JsonConstants.RPC_EVENT_TYPE);\n+            JsonNode invocationJson) {\n+        assert invocationJson.has(JsonConstants.RPC_EVENT_TYPE);\n \n-        String eventType = invocationJson\n-                .getString(JsonConstants.RPC_EVENT_TYPE);\n+        String eventType = invocationJson.get(JsonConstants.RPC_EVENT_TYPE)\n+                .textValue();\n \n-        JsonObject eventData = invocationJson\n-                .getObject(JsonConstants.RPC_EVENT_DATA);\n+        JsonNode eventData = invocationJson.get(JsonConstants.RPC_EVENT_DATA);\n         if (eventData == null) {\n-            eventData = Json.createObject();\n+            eventData = JacksonUtils.createObjectNode();\n         }\n \n         DomEvent event = new DomEvent(Element.get(node), eventType, eventData);\n@@ -65,7 +65,7 @@ public Optional<Runnable> handleNode(StateNode node,\n     }\n \n     @Override\n-    protected boolean allowInert(UI ui, JsonObject invocationJson) {\n+    protected boolean allowInert(UI ui, JsonNode invocationJson) {\n         // handled separately in ElementListenerMap\n         return true;\n     }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/MapSyncRpcHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/MapSyncRpcHandler.java\nindex e2c9a7dabbf..00fee12619e 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/MapSyncRpcHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/MapSyncRpcHandler.java\n@@ -20,13 +20,15 @@\n import java.util.List;\n import java.util.Optional;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.vaadin.flow.component.Component;\n import com.vaadin.flow.dom.DisabledUpdateMode;\n import com.vaadin.flow.dom.Element;\n-import com.vaadin.flow.internal.JsonCodec;\n+import com.vaadin.flow.internal.JacksonCodec;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.internal.StateTree;\n import com.vaadin.flow.internal.nodefeature.ElementData;\n@@ -39,8 +41,6 @@\n import com.vaadin.flow.internal.nodefeature.PropertyChangeDeniedException;\n import com.vaadin.flow.shared.JsonConstants;\n \n-import elemental.json.JsonObject;\n-\n /**\n  * Model map synchronization RPC handler.\n  * <p>\n@@ -61,13 +61,13 @@ public String getRpcType() {\n \n     @Override\n     protected Optional<Runnable> handleNode(StateNode node,\n-            JsonObject invocationJson) {\n-        assert invocationJson.hasKey(JsonConstants.RPC_FEATURE);\n-        assert invocationJson.hasKey(JsonConstants.RPC_PROPERTY);\n-        assert invocationJson.hasKey(JsonConstants.RPC_PROPERTY_VALUE);\n+            JsonNode invocationJson) {\n+        assert invocationJson.has(JsonConstants.RPC_FEATURE);\n+        assert invocationJson.has(JsonConstants.RPC_PROPERTY);\n+        assert invocationJson.has(JsonConstants.RPC_PROPERTY_VALUE);\n \n-        int featureId = (int) invocationJson\n-                .getNumber(JsonConstants.RPC_FEATURE);\n+        int featureId = invocationJson.get(JsonConstants.RPC_FEATURE)\n+                .intValue();\n         Class<? extends NodeFeature> feature = NodeFeatureRegistry\n                 .getFeature(featureId);\n         assert NodeMap.class.isAssignableFrom(feature);\n@@ -77,7 +77,8 @@ protected Optional<Runnable> handleNode(StateNode node,\n \n         List<DisabledUpdateMode> seenUpdateModes = new ArrayList<>();\n \n-        String property = invocationJson.getString(JsonConstants.RPC_PROPERTY);\n+        String property = invocationJson.get(JsonConstants.RPC_PROPERTY)\n+                .textValue();\n \n         if (node.hasFeature(ElementListenerMap.class)) {\n             DisabledUpdateMode eventMode = node\n@@ -122,8 +123,8 @@ protected Optional<Runnable> handleNode(StateNode node,\n     }\n \n     private Optional<Runnable> enqueuePropertyUpdate(StateNode node,\n-            JsonObject invocationJson, String property) {\n-        Serializable value = JsonCodec.decodeWithoutTypeInfo(\n+            JsonNode invocationJson, String property) {\n+        Serializable value = JacksonCodec.decodeWithoutTypeInfo(\n                 invocationJson.get(JsonConstants.RPC_PROPERTY_VALUE));\n \n         value = tryConvert(value, node);\n@@ -164,11 +165,10 @@ private String getVetoPropertyUpdateMessage(StateNode node,\n     }\n \n     private Serializable tryConvert(Serializable value, StateNode context) {\n-        if (value instanceof JsonObject) {\n-            JsonObject json = (JsonObject) value;\n-            if (json.hasKey(\"nodeId\")) {\n+        if (value instanceof ObjectNode json) {\n+            if (json.has(\"nodeId\")) {\n                 StateTree tree = (StateTree) context.getOwner();\n-                double id = json.getNumber(\"nodeId\");\n+                double id = json.get(\"nodeId\").doubleValue();\n                 StateNode stateNode = tree.getNodeById((int) id);\n                 return tryCopyStateNode(stateNode, json);\n             }\n@@ -177,7 +177,7 @@ private Serializable tryConvert(Serializable value, StateNode context) {\n     }\n \n     private Serializable tryCopyStateNode(StateNode node,\n-            JsonObject properties) {\n+            ObjectNode properties) {\n         if (node == null) {\n             return properties;\n         }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/NavigationRpcHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/NavigationRpcHandler.java\nindex 08437d98713..3ec8801b890 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/NavigationRpcHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/NavigationRpcHandler.java\n@@ -17,6 +17,8 @@\n \n import java.util.Optional;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+\n import com.vaadin.flow.component.UI;\n import com.vaadin.flow.component.page.History;\n import com.vaadin.flow.component.page.History.HistoryStateChangeEvent;\n@@ -25,8 +27,7 @@\n import com.vaadin.flow.router.NavigationTrigger;\n import com.vaadin.flow.shared.JsonConstants;\n \n-import elemental.json.JsonObject;\n-import elemental.json.JsonValue;\n+import elemental.json.Json;\n \n /**\n  * RPC handler for Navigation.\n@@ -46,23 +47,25 @@ public String getRpcType() {\n     }\n \n     @Override\n-    public Optional<Runnable> handle(UI ui, JsonObject invocationJson) {\n+    public Optional<Runnable> handle(UI ui, JsonNode invocationJson) {\n         History history = ui.getPage().getHistory();\n \n         HistoryStateChangeHandler historyStateChangeHandler = history\n                 .getHistoryStateChangeHandler();\n         if (historyStateChangeHandler != null) {\n-            JsonValue state = invocationJson\n+            JsonNode state = invocationJson\n                     .get(JsonConstants.RPC_NAVIGATION_STATE);\n             String location = invocationJson\n-                    .getString(JsonConstants.RPC_NAVIGATION_LOCATION);\n+                    .get(JsonConstants.RPC_NAVIGATION_LOCATION).textValue();\n             boolean triggeredByLink = invocationJson\n-                    .hasKey(JsonConstants.RPC_NAVIGATION_ROUTERLINK);\n+                    .has(JsonConstants.RPC_NAVIGATION_ROUTERLINK);\n             NavigationTrigger trigger = triggeredByLink\n                     ? NavigationTrigger.ROUTER_LINK\n                     : NavigationTrigger.HISTORY;\n+            // TODO: remove Json when history updated\n             HistoryStateChangeEvent event = new HistoryStateChangeEvent(history,\n-                    state, new Location(location), trigger);\n+                    state == null ? null : Json.create(state.toString()),\n+                    new Location(location), trigger);\n             historyStateChangeHandler.onHistoryStateChange(event);\n         }\n \n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandler.java\nindex 28e768bb697..9ec82f218ec 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandler.java\n@@ -26,6 +26,9 @@\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -37,7 +40,8 @@\n import com.vaadin.flow.component.template.internal.DeprecatedPolymerPublishedEventHandler;\n import com.vaadin.flow.di.Lookup;\n import com.vaadin.flow.dom.DisabledUpdateMode;\n-import com.vaadin.flow.internal.JsonCodec;\n+import com.vaadin.flow.internal.JacksonCodec;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.ReflectTools;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.internal.nodefeature.ClientCallableHandlers;\n@@ -46,12 +50,6 @@\n import com.vaadin.flow.server.VaadinContext;\n import com.vaadin.flow.shared.JsonConstants;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n-import elemental.json.JsonType;\n-import elemental.json.JsonValue;\n-\n /**\n  * RPC handler for events triggered through <code>element.$server</code> or\n  * simply <code>$server</code> in template event handlers.\n@@ -73,34 +71,33 @@ public String getRpcType() {\n     }\n \n     @Override\n-    protected boolean allowInert(UI ui, JsonObject invocationJson) {\n+    protected boolean allowInert(UI ui, JsonNode invocationJson) {\n         return true;\n     }\n \n     @Override\n     public Optional<Runnable> handleNode(StateNode node,\n-            JsonObject invocationJson) {\n-        assert invocationJson\n-                .hasKey(JsonConstants.RPC_TEMPLATE_EVENT_METHOD_NAME);\n+            JsonNode invocationJson) {\n+        assert invocationJson.has(JsonConstants.RPC_TEMPLATE_EVENT_METHOD_NAME);\n         String methodName = invocationJson\n-                .getString(JsonConstants.RPC_TEMPLATE_EVENT_METHOD_NAME);\n+                .get(JsonConstants.RPC_TEMPLATE_EVENT_METHOD_NAME).textValue();\n         if (methodName == null) {\n             throw new IllegalArgumentException(\n                     \"Event handler method name may not be null\");\n         }\n-        JsonValue args = invocationJson\n+        JsonNode args = invocationJson\n                 .get(JsonConstants.RPC_TEMPLATE_EVENT_ARGS);\n         if (args == null) {\n-            args = Json.createArray();\n+            args = JacksonUtils.createArrayNode();\n         }\n-        if (args.getType() != JsonType.ARRAY) {\n+        if (args.getNodeType() != JsonNodeType.ARRAY) {\n             throw new IllegalArgumentException(\n                     \"Incorrect type for method arguments: \" + args.getClass());\n         }\n         int promiseId;\n-        if (invocationJson.hasKey(JsonConstants.RPC_TEMPLATE_EVENT_PROMISE)) {\n-            promiseId = (int) invocationJson\n-                    .getNumber(JsonConstants.RPC_TEMPLATE_EVENT_PROMISE);\n+        if (invocationJson.has(JsonConstants.RPC_TEMPLATE_EVENT_PROMISE)) {\n+            promiseId = invocationJson\n+                    .get(JsonConstants.RPC_TEMPLATE_EVENT_PROMISE).intValue();\n         } else {\n             promiseId = -1;\n         }\n@@ -131,19 +128,19 @@ public Optional<Runnable> handleNode(StateNode node,\n \n         if (execute) {\n             invokeMethod(component.get(), component.get().getClass(),\n-                    methodName, (JsonArray) args, promiseId, node.isInert());\n+                    methodName, (ArrayNode) args, promiseId, node.isInert());\n         }\n \n         return Optional.empty();\n     }\n \n     static void invokeMethod(Component instance, Class<?> clazz,\n-            String methodName, JsonArray args, int promiseId) {\n+            String methodName, ArrayNode args, int promiseId) {\n         invokeMethod(instance, clazz, methodName, args, promiseId, false);\n     }\n \n     static void invokeMethod(Component instance, Class<?> clazz,\n-            String methodName, JsonArray args, int promiseId, boolean inert) {\n+            String methodName, ArrayNode args, int promiseId, boolean inert) {\n         assert instance != null;\n         Optional<Method> method = findMethod(instance, clazz, methodName);\n         if (method.isPresent()) {\n@@ -193,7 +190,7 @@ private static boolean hasMethodAnnotation(Method method) {\n     }\n \n     private static void invokeMethod(Component instance, Method method,\n-            JsonArray args, int promiseId, boolean inert) {\n+            ArrayNode args, int promiseId, boolean inert) {\n         if (inert && !method.isAnnotationPresent(AllowInert.class)) {\n             return;\n         }\n@@ -221,7 +218,7 @@ private static void invokeMethod(Component instance, Method method,\n     }\n \n     private static Object invokeMethod(Component instance, Method method,\n-            JsonArray args) {\n+            ArrayNode args) {\n         try {\n             method.setAccessible(true);\n             return method.invoke(instance, decodeArgs(instance, method, args));\n@@ -236,10 +233,10 @@ private static Object invokeMethod(Component instance, Method method,\n     }\n \n     private static Object[] decodeArgs(Component instance, Method method,\n-            JsonArray argsFromClient) {\n+            ArrayNode argsFromClient) {\n         int methodArgs = method.getParameterCount();\n-        int clientValuesCount = argsFromClient.length();\n-        JsonArray argValues;\n+        int clientValuesCount = argsFromClient.size();\n+        ArrayNode argValues;\n         if (method.isVarArgs()) {\n             if (clientValuesCount >= methodArgs - 1) {\n                 argValues = unwrapVarArgs(argsFromClient, method);\n@@ -248,7 +245,7 @@ private static Object[] decodeArgs(Component instance, Method method,\n                         \"The number of received values (%d) is not enough \"\n                                 + \"to call the method '%s' declared in '%s' which \"\n                                 + \"has vararg parameter and the number of arguments %d\",\n-                        argsFromClient.length(), method.getName(),\n+                        argsFromClient.size(), method.getName(),\n                         method.getDeclaringClass().getName(),\n                         method.getParameterCount());\n                 throw new IllegalArgumentException(msg);\n@@ -261,53 +258,51 @@ private static Object[] decodeArgs(Component instance, Method method,\n                         \"The number of received values (%d) is not equal \"\n                                 + \"to the number of arguments (%d) in the method '%s' \"\n                                 + \"declared in '%s'\",\n-                        argsFromClient.length(), method.getParameterCount(),\n+                        argsFromClient.size(), method.getParameterCount(),\n                         method.getName(), method.getDeclaringClass().getName());\n                 throw new IllegalArgumentException(msg);\n             }\n         }\n         List<Object> decoded = new ArrayList<>(method.getParameterCount());\n         Class<?>[] methodParameterTypes = method.getParameterTypes();\n-        for (int i = 0; i < argValues.length(); i++) {\n+        for (int i = 0; i < argValues.size(); i++) {\n             Class<?> type = methodParameterTypes[i];\n             decoded.add(decodeArg(instance, method, type, i, argValues.get(i)));\n         }\n         return decoded.toArray(new Object[method.getParameterCount()]);\n     }\n \n-    private static JsonArray unwrapVarArgs(JsonArray argsFromClient,\n+    private static ArrayNode unwrapVarArgs(ArrayNode argsFromClient,\n             Method method) {\n         int paramCount = method.getParameterCount();\n-        if (argsFromClient.length() == paramCount) {\n-            if (argsFromClient.get(paramCount - 1).getType()\n-                    .equals(JsonType.ARRAY)) {\n+        if (argsFromClient.size() == paramCount) {\n+            if (argsFromClient.get(paramCount - 1).getNodeType()\n+                    .equals(JsonNodeType.ARRAY)) {\n                 return argsFromClient;\n             }\n         }\n-        JsonArray result = Json.createArray();\n-        JsonArray rest = Json.createArray();\n-        int newIndex = 0;\n-        for (int i = 0; i < argsFromClient.length(); i++) {\n-            JsonValue value = argsFromClient.get(i);\n+        ArrayNode result = JacksonUtils.createArrayNode();\n+        ArrayNode rest = JacksonUtils.createArrayNode();\n+        for (int i = 0; i < argsFromClient.size(); i++) {\n+            JsonNode value = argsFromClient.get(i);\n             if (i < paramCount - 1) {\n-                result.set(i, value);\n+                result.add(value);\n             } else {\n-                rest.set(newIndex, value);\n-                newIndex++;\n+                rest.add(value);\n             }\n         }\n-        result.set(paramCount - 1, rest);\n+        result.add(rest);\n         return result;\n     }\n \n     private static Object decodeArg(Component instance, Method method,\n-            Class<?> type, int index, JsonValue argValue) {\n+            Class<?> type, int index, JsonNode argValue) {\n         // come up with method to know that it's an id and should be gotten from\n         // the model\n         assert argValue != null;\n \n-        if (type.isPrimitive() && argValue.getType() == JsonType.NULL) {\n-            return JsonCodec.decodeAs(argValue, type);\n+        if (type.isPrimitive() && argValue.getNodeType() == JsonNodeType.NULL) {\n+            return JacksonCodec.decodeAs(argValue, type);\n         } else if (type.isArray()) {\n             return decodeArray(method, type, index, argValue);\n         } else {\n@@ -326,8 +321,7 @@ private static Object decodeArg(Component instance, Method method,\n                         .lookup(DeprecatedPolymerPublishedEventHandler.class);\n                 if (handler != null && handler.isTemplateModelValue(instance,\n                         argValue, convertedType)) {\n-                    return handler.getTemplateItem(instance,\n-                            (JsonObject) argValue,\n+                    return handler.getTemplateItem(instance, argValue,\n                             method.getGenericParameterTypes()[index]);\n                 }\n             }\n@@ -349,7 +343,7 @@ private static Object decodeArg(Component instance, Method method,\n \n     }\n \n-    private static Optional<RpcDecoder> getDecoder(JsonValue value,\n+    private static Optional<RpcDecoder> getDecoder(JsonNode value,\n             Class<?> type) {\n         return DECODERS.stream()\n                 .filter(decoder -> decoder.isApplicable(value, type))\n@@ -357,19 +351,19 @@ private static Optional<RpcDecoder> getDecoder(JsonValue value,\n     }\n \n     private static Object decodeArray(Method method, Class<?> type, int index,\n-            JsonValue argValue) {\n-        if (argValue.getType() != JsonType.ARRAY) {\n+            JsonNode argValue) {\n+        if (argValue.getNodeType() != JsonNodeType.ARRAY) {\n             String msg = String.format(\"Class '%s' has the method '%s' \"\n                     + \"whose parameter %d refers to the array type '%s' \"\n                     + \"but received value is not an array, its type is '%s'\",\n                     method.getDeclaringClass().getName(), method.getName(),\n-                    index, type.getName(), argValue.getType().name());\n+                    index, type.getName(), argValue.getNodeType().name());\n             throw new IllegalArgumentException(msg);\n         }\n         Class<?> componentType = type.getComponentType();\n-        JsonArray array = (JsonArray) argValue;\n-        Object result = Array.newInstance(componentType, array.length());\n-        for (int i = 0; i < array.length(); i++) {\n+        ArrayNode array = (ArrayNode) argValue;\n+        Object result = Array.newInstance(componentType, array.size());\n+        for (int i = 0; i < array.size(); i++) {\n             Array.set(result, i, decodeArg(null, method, componentType, index,\n                     array.get(i)));\n         }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/RpcDecoder.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/RpcDecoder.java\nindex f7cc4c0632f..faa7a718d57 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/RpcDecoder.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/RpcDecoder.java\n@@ -17,7 +17,7 @@\n \n import java.io.Serializable;\n \n-import elemental.json.JsonValue;\n+import com.fasterxml.jackson.databind.JsonNode;\n \n /**\n  * Decoder of RPC method arguments (server-side methods invoked from the\n@@ -29,7 +29,7 @@\n  * <p>\n  * Each decoder is checked whether it's may be used to handle the argument value\n  * with the required server-side parameter type via the\n- * {@link #isApplicable(JsonValue, Class)} method. Decoder is applied to the\n+ * {@link #isApplicable(JsonNode, Class)} method. Decoder is applied to the\n  * received value and required type if it's applicable.\n  * <p>\n  * For internal use only. May be renamed or removed in a future release.\n@@ -51,7 +51,7 @@ public interface RpcDecoder extends Serializable {\n      * @return {@code true} if this decoder is able to decode the {@code value}\n      *         to the {@code type}, {@code false} otherwise\n      */\n-    boolean isApplicable(JsonValue value, Class<?> type);\n+    boolean isApplicable(JsonNode value, Class<?> type);\n \n     /**\n      * Decode the given {@code value} to the required {@code type}.\n@@ -70,5 +70,5 @@ public interface RpcDecoder extends Serializable {\n      * @throws RpcDecodeException\n      *             if the {@code value} cannot be converted to the {@code type}\n      */\n-    <T> T decode(JsonValue value, Class<T> type) throws RpcDecodeException;\n+    <T> T decode(JsonNode value, Class<T> type) throws RpcDecodeException;\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/RpcInvocationHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/RpcInvocationHandler.java\nindex 0492fcba412..018fa47564f 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/RpcInvocationHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/RpcInvocationHandler.java\n@@ -18,15 +18,15 @@\n import java.io.Serializable;\n import java.util.Optional;\n \n-import com.vaadin.flow.component.UI;\n+import com.fasterxml.jackson.databind.JsonNode;\n \n-import elemental.json.JsonObject;\n+import com.vaadin.flow.component.UI;\n \n /**\n  * RPC invocation handler interface.\n  * <p>\n  * Each instance must return unique rpc type (see {@link #getRpcType()} and\n- * handle a {@link JsonObject} RPC data using {@link #handle(UI, JsonObject)}\n+ * handle a {@link JsonNode} RPC data using {@link #handle(UI, JsonNode)}\n  * method.\n  * <p>\n  * For internal use only. May be renamed or removed in a future release.\n@@ -53,6 +53,6 @@ public interface RpcInvocationHandler extends Serializable {\n      *            the RPC data to handle, not {@code null}\n      * @return an optional runnable\n      */\n-    Optional<Runnable> handle(UI ui, JsonObject invocationJson);\n+    Optional<Runnable> handle(UI ui, JsonNode invocationJson);\n \n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/StringToEnumDecoder.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/StringToEnumDecoder.java\nindex 9068a1b97ce..91a628e1845 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/StringToEnumDecoder.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/StringToEnumDecoder.java\n@@ -15,16 +15,16 @@\n  */\n package com.vaadin.flow.server.communication.rpc;\n \n-import elemental.json.JsonString;\n-import elemental.json.JsonType;\n-import elemental.json.JsonValue;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeType;\n \n /**\n- * Decodes a {@link JsonValue} with {@link JsonType#STRING} type to {@link Enum}\n- * subclass type.\n+ * Decodes a {@link JsonNode} with {@link JsonNodeType#STRING} type to\n+ * {@link Enum} subclass type.\n  * <p>\n- * This decoder is applicable to any {@link JsonValue} which is\n- * {@link JsonString} and any {@link Enum} sublcass\n+ * This decoder is applicable to any {@link JsonNode} which is\n+ * {@link com.fasterxml.jackson.databind.node.TextNode} and any {@link Enum}\n+ * sublcass\n  * <p>\n  * For internal use only. May be renamed or removed in a future release.\n  *\n@@ -35,15 +35,15 @@\n public class StringToEnumDecoder implements RpcDecoder {\n \n     @Override\n-    public boolean isApplicable(JsonValue value, Class<?> type) {\n-        return value.getType().equals(JsonType.STRING) && type.isEnum();\n+    public boolean isApplicable(JsonNode value, Class<?> type) {\n+        return value.getNodeType().equals(JsonNodeType.STRING) && type.isEnum();\n     }\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     @Override\n-    public <T> T decode(JsonValue value, Class<T> type)\n+    public <T> T decode(JsonNode value, Class<T> type)\n             throws RpcDecodeException {\n-        String stringValue = value.asString();\n+        String stringValue = value.textValue();\n         Enum<?> result = Enum.valueOf((Class<? extends Enum>) type,\n                 stringValue);\n         return type.cast(result);\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/StringToNumberDecoder.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/StringToNumberDecoder.java\nindex 0b795e6f914..3bad8e5b5d6 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/StringToNumberDecoder.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/StringToNumberDecoder.java\n@@ -22,17 +22,17 @@\n import java.text.ParseException;\n import java.util.Locale;\n \n-import elemental.json.JsonString;\n-import elemental.json.JsonType;\n-import elemental.json.JsonValue;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeType;\n \n /**\n- * Decodes a {@link JsonValue} with {@link JsonType#STRING} type to\n+ * Decodes a {@link JsonNode} with {@link JsonNodeType#STRING} type to\n  * {@link Number} subclass type.\n  * <p>\n- * This decoder is applicable to any {@link JsonValue} which is\n- * {@link JsonString} and any primitive type wrapper {@link Number} subclass\n- * (like {@link Integer}, {@link Double}, {@link Long}, etc.).\n+ * This decoder is applicable to any {@link JsonNode} which is\n+ * {@link com.fasterxml.jackson.databind.node.TextNode} and any primitive type\n+ * wrapper {@link Number} subclass (like {@link Integer}, {@link Double},\n+ * {@link Long}, etc.).\n  * <p>\n  * For internal use only. May be renamed or removed in a future release.\n  *\n@@ -43,16 +43,16 @@\n public class StringToNumberDecoder implements RpcDecoder {\n \n     @Override\n-    public boolean isApplicable(JsonValue value, Class<?> type) {\n-        return value.getType().equals(JsonType.STRING)\n+    public boolean isApplicable(JsonNode value, Class<?> type) {\n+        return value.getNodeType().equals(JsonNodeType.STRING)\n                 && Number.class.isAssignableFrom(type)\n                 && type.getPackage().equals(Integer.class.getPackage());\n     }\n \n     @Override\n-    public <T> T decode(JsonValue value, Class<T> type)\n+    public <T> T decode(JsonNode value, Class<T> type)\n             throws RpcDecodeException {\n-        String stringValue = value.asString();\n+        String stringValue = value.asText();\n         try {\n             Number number = parseNumber(stringValue);\n             if (Number.class.equals(type)) {\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/webcomponent/WebComponentBinding.java b/flow-server/src/main/java/com/vaadin/flow/server/webcomponent/WebComponentBinding.java\nindex 457e7a2ba3b..5f987b96f54 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/webcomponent/WebComponentBinding.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/webcomponent/WebComponentBinding.java\n@@ -20,15 +20,14 @@\n import java.util.HashMap;\n import java.util.Objects;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.slf4j.LoggerFactory;\n \n import com.vaadin.flow.component.Component;\n import com.vaadin.flow.component.webcomponent.WebComponentConfiguration;\n import com.vaadin.flow.function.SerializableBiConsumer;\n import com.vaadin.flow.function.SerializableConsumer;\n-import com.vaadin.flow.internal.JsonCodec;\n-\n-import elemental.json.JsonValue;\n+import com.vaadin.flow.internal.JacksonCodec;\n \n /**\n  * Represents a single instance of a exported web component instance embedded\n@@ -42,7 +41,8 @@\n  * @since 2.0\n  *\n  * @see WebComponentConfiguration#createWebComponentBinding(com.vaadin.flow.di.Instantiator,\n- *      com.vaadin.flow.dom.Element, elemental.json.JsonObject) to create\n+ *      com.vaadin.flow.dom.Element,\n+ *      com.fasterxml.jackson.databind.node.ObjectNode) to create\n  *      {@code WebComponentBindings}\n  */\n public final class WebComponentBinding<C extends Component>\n@@ -54,7 +54,7 @@ public final class WebComponentBinding<C extends Component>\n      * Constructs a new {@code WebComponentBinding}. The bound {@link Component}\n      * is given via {@code component} parameter. The web component properties\n      * are bound by calling\n-     * {@link #bindProperty(PropertyConfigurationImpl, boolean, elemental.json.JsonValue)};\n+     * {@link #bindProperty(PropertyConfigurationImpl, boolean, JsonNode)};\n      *\n      * @param component\n      *            component which exposes {@code properties} as web component.\n@@ -116,7 +116,7 @@ public void updateProperty(String propertyName, Serializable value) {\n      *             if the {@code jsonValue} cannot be converted to the type of\n      *             the property identified by {@code propertyName}.\n      */\n-    public void updateProperty(String propertyName, JsonValue jsonValue) {\n+    public void updateProperty(String propertyName, JsonNode jsonValue) {\n         Objects.requireNonNull(propertyName,\n                 \"Parameter 'propertyName' must not be null!\");\n \n@@ -190,7 +190,7 @@ public void updatePropertiesToComponent() {\n      */\n     public void bindProperty(\n             PropertyConfigurationImpl<C, ? extends Serializable> propertyConfiguration,\n-            boolean overrideDefault, JsonValue startingValue) {\n+            boolean overrideDefault, JsonNode startingValue) {\n         Objects.requireNonNull(propertyConfiguration,\n                 \"Parameter 'propertyConfiguration' cannot be null!\");\n \n@@ -212,20 +212,20 @@ public void bindProperty(\n                 binding);\n     }\n \n-    private Serializable jsonValueToConcreteType(JsonValue jsonValue,\n+    private Serializable jsonValueToConcreteType(JsonNode jsonValue,\n             Class<? extends Serializable> type) {\n         Objects.requireNonNull(type, \"Parameter 'type' must not be null!\");\n \n-        if (JsonCodec.canEncodeWithoutTypeInfo(type)) {\n+        if (JacksonCodec.canEncodeWithoutTypeInfo(type)) {\n             Serializable value = null;\n             if (jsonValue != null) {\n-                value = JsonCodec.decodeAs(jsonValue, type);\n+                value = JacksonCodec.decodeAs(jsonValue, type);\n             }\n             return value;\n         } else {\n             throw new IllegalArgumentException(\n                     String.format(\"Received '%s' was not convertible to '%s'\",\n-                            JsonValue.class.getName(), type.getName()));\n+                            JsonNode.class.getName(), type.getName()));\n         }\n     }\n \n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/webcomponent/WebComponentGenerator.java b/flow-server/src/main/java/com/vaadin/flow/server/webcomponent/WebComponentGenerator.java\nindex 69d7e314c6f..9db0ada1dea 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/webcomponent/WebComponentGenerator.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/webcomponent/WebComponentGenerator.java\n@@ -24,6 +24,9 @@\n import java.util.Objects;\n import java.util.Set;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.IOUtils;\n \n import com.vaadin.flow.component.Component;\n@@ -253,6 +256,8 @@ private static String getDefaultJsValue(PropertyData<?> property) {\n                     \"\\\\'\") + \"'\";\n         } else if (JsonValue.class.isAssignableFrom(property.getType())) {\n             value = ((JsonValue) property.getDefaultValue()).toJson();\n+        } else if (JsonNode.class.isAssignableFrom(property.getType())) {\n+            value = property.getDefaultValue().toString();\n         } else {\n             throw new UnsupportedPropertyTypeException(String.format(\n                     \"%s is not a currently supported type for a Property.\"\n@@ -304,6 +309,10 @@ private static String getJSTypeName(PropertyData<?> propertyData) {\n             return \"Array\";\n         } else if (JsonValue.class.isAssignableFrom(propertyData.getType())) {\n             return \"Object\";\n+        } else if (ArrayNode.class.isAssignableFrom(propertyData.getType())) {\n+            return \"Array\";\n+        } else if (ObjectNode.class.isAssignableFrom(propertyData.getType())) {\n+            return \"Object\";\n         } else {\n             throw new IllegalStateException(\n                     \"Unsupported type: \" + propertyData.getType());\n",
    "test_patch": "diff --git a/flow-polymer-template/src/test/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandlerTest.java b/flow-polymer-template/src/test/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandlerTest.java\nindex eff25654e46..ad183d89fa1 100644\n--- a/flow-polymer-template/src/test/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandlerTest.java\n+++ b/flow-polymer-template/src/test/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandlerTest.java\n@@ -10,6 +10,9 @@\n \n import java.util.Properties;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import net.jcip.annotations.NotThreadSafe;\n import org.junit.After;\n import org.junit.Assert;\n@@ -26,17 +29,13 @@\n import com.vaadin.flow.component.template.internal.DeprecatedPolymerTemplate;\n import com.vaadin.flow.dom.DisabledUpdateMode;\n import com.vaadin.flow.function.DeploymentConfiguration;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.MockVaadinServletService;\n import com.vaadin.flow.server.ServiceException;\n import com.vaadin.flow.server.VaadinService;\n import com.vaadin.flow.server.VaadinSession;\n import com.vaadin.flow.shared.JsonConstants;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n-import elemental.json.JsonValue;\n-\n @NotThreadSafe\n public class PublishedServerEventHandlerRpcHandlerTest {\n \n@@ -96,7 +95,7 @@ public static class MethodWithParameters extends ComponentWithMethod {\n         private Double[] doubleArg;\n         private Integer[] varArg;\n         private int[][] doubleArray;\n-        private JsonValue jsonValue;\n+        private JsonNode jsonValue;\n \n         @Override\n         @EventHandler\n@@ -129,7 +128,7 @@ protected void method3(@EventData(\"foo\") int[][] array) {\n         }\n \n         @EventHandler\n-        protected void method4(@EventData(\"foo\") JsonValue value) {\n+        protected void method4(@EventData(\"foo\") JsonNode value) {\n             jsonValue = value;\n         }\n     }\n@@ -202,7 +201,8 @@ public void tearDown() {\n     public void methodIsInvoked() {\n         ComponentWithMethod component = new ComponentWithMethod();\n         PublishedServerEventHandlerRpcHandler.invokeMethod(component,\n-                component.getClass(), \"method\", Json.createArray(), -1);\n+                component.getClass(), \"method\", JacksonUtils.createArrayNode(),\n+                -1);\n \n         Assert.assertTrue(component.isInvoked);\n     }\n@@ -212,7 +212,8 @@ public void methodIsInvokedOnCompositeContent() {\n         CompositeOfComponentWithMethod composite = new CompositeOfComponentWithMethod();\n         ComponentWithMethod component = composite.getContent();\n         PublishedServerEventHandlerRpcHandler.invokeMethod(composite,\n-                composite.getClass(), \"method\", Json.createArray(), -1);\n+                composite.getClass(), \"method\", JacksonUtils.createArrayNode(),\n+                -1);\n \n         Assert.assertTrue(component.isInvoked);\n     }\n@@ -222,15 +223,16 @@ public void methodIsInvokectOnCompositeOfComposite() {\n         CompositeOfComposite composite = new CompositeOfComposite();\n         ComponentWithMethod component = composite.getContent().getContent();\n         PublishedServerEventHandlerRpcHandler.invokeMethod(composite,\n-                composite.getClass(), \"method\", Json.createArray(), -1);\n+                composite.getClass(), \"method\", JacksonUtils.createArrayNode(),\n+                -1);\n \n         Assert.assertTrue(component.isInvoked);\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n     public void methodWithoutArgs_argsProvided() {\n-        JsonArray args = Json.createArray();\n-        args.set(0, true);\n+        ArrayNode args = JacksonUtils.createArrayNode();\n+        args.add(true);\n         ComponentWithMethod component = new ComponentWithMethod();\n         PublishedServerEventHandlerRpcHandler.invokeMethod(component,\n                 component.getClass(), \"method\", args, -1);\n@@ -240,20 +242,22 @@ public void methodWithoutArgs_argsProvided() {\n     public void twoEventHandlerMethodsWithTheSameName() {\n         ComponentWithTwoEventHandlerMethodSameName component = new ComponentWithTwoEventHandlerMethodSameName();\n         PublishedServerEventHandlerRpcHandler.invokeMethod(component,\n-                component.getClass(), \"intMethod\", Json.createArray(), -1);\n+                component.getClass(), \"intMethod\",\n+                JacksonUtils.createArrayNode(), -1);\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n     public void methodWithParametersInvokedWithoutParameters() {\n         MethodWithParameters component = new MethodWithParameters();\n         PublishedServerEventHandlerRpcHandler.invokeMethod(component,\n-                component.getClass(), \"intMethod\", Json.createArray(), -1);\n+                component.getClass(), \"intMethod\",\n+                JacksonUtils.createArrayNode(), -1);\n     }\n \n     @Test\n     public void methodWithParameterInvokedWithProperParameter() {\n-        JsonArray array = Json.createArray();\n-        array.set(0, 65);\n+        ArrayNode array = JacksonUtils.createArrayNode();\n+        array.add(65);\n \n         MethodWithParameters component = new MethodWithParameters();\n \n@@ -267,12 +271,12 @@ public void methodWithParameterInvokedWithProperParameter() {\n \n     @Test\n     public void methodWithArrayParamIsInvoked() {\n-        JsonArray array = Json.createArray();\n-        array.set(0, \"foo\");\n-        JsonArray secondArg = Json.createArray();\n-        secondArg.set(0, true);\n-        secondArg.set(1, false);\n-        array.set(1, secondArg);\n+        ArrayNode array = JacksonUtils.createArrayNode();\n+        array.add(\"foo\");\n+        ArrayNode secondArg = JacksonUtils.createArrayNode();\n+        secondArg.add(true);\n+        secondArg.add(false);\n+        array.add(secondArg);\n         MethodWithParameters component = new MethodWithParameters();\n         attachComponent(component);\n         PublishedServerEventHandlerRpcHandler.invokeMethod(component,\n@@ -285,24 +289,23 @@ public void methodWithArrayParamIsInvoked() {\n \n     @Test\n     public void methodWithVarArgIsInvoked_varArgsAreNotArray() {\n-        JsonArray array = Json.createArray();\n+        ArrayNode array = JacksonUtils.createArrayNode();\n \n-        JsonArray firstArg = Json.createArray();\n-        firstArg.set(0, 3.1d);\n-        firstArg.set(1, 65.57d);\n+        ArrayNode firstArg = JacksonUtils.createArrayNode();\n+        firstArg.add(3.1d);\n+        firstArg.add(65.57d);\n \n-        array.set(0, firstArg);\n+        array.add(firstArg);\n \n-        array.set(1, Json.createNull());\n-        array.set(2, 56);\n+        array.add(JacksonUtils.nullNode());\n+        array.add(56);\n \n         MethodWithParameters component = new MethodWithParameters();\n         PublishedServerEventHandlerRpcHandler.invokeMethod(component,\n                 component.getClass(), \"method2\", array, -1);\n \n-        Assert.assertArrayEquals(\n-                new Double[] { firstArg.getNumber(0), firstArg.getNumber(1) },\n-                component.doubleArg);\n+        Assert.assertArrayEquals(new Double[] { firstArg.get(0).doubleValue(),\n+                firstArg.get(1).doubleValue() }, component.doubleArg);\n \n         Assert.assertNotNull(component.varArg);\n         Assert.assertNull(component.varArg[0]);\n@@ -312,42 +315,43 @@ public void methodWithVarArgIsInvoked_varArgsAreNotArray() {\n \n     @Test\n     public void methodWithDoubleArrayIsInvoked() {\n-        JsonArray array = Json.createArray();\n+        ArrayNode array = JacksonUtils.createArrayNode();\n \n-        JsonArray arg = Json.createArray();\n+        ArrayNode arg = JacksonUtils.createArrayNode();\n \n-        JsonArray first = Json.createArray();\n-        first.set(0, 1);\n-        first.set(1, 2);\n+        ArrayNode first = JacksonUtils.createArrayNode();\n+        first.add(1);\n+        first.add(2);\n \n-        arg.set(0, first);\n+        arg.add(first);\n \n-        JsonArray second = Json.createArray();\n-        second.set(0, 3);\n-        second.set(1, 4);\n+        ArrayNode second = JacksonUtils.createArrayNode();\n+        second.add(3);\n+        second.add(4);\n \n-        arg.set(1, second);\n+        arg.add(second);\n \n-        array.set(0, arg);\n+        array.add(arg);\n \n         MethodWithParameters component = new MethodWithParameters();\n         PublishedServerEventHandlerRpcHandler.invokeMethod(component,\n                 component.getClass(), \"method3\", array, -1);\n \n-        Assert.assertArrayEquals(new int[] { (int) first.getNumber(0),\n-                (int) first.getNumber(1) }, component.doubleArray[0]);\n+        Assert.assertArrayEquals(\n+                new int[] { first.get(0).intValue(), first.get(1).intValue() },\n+                component.doubleArray[0]);\n \n-        Assert.assertArrayEquals(new int[] { (int) second.getNumber(0),\n-                (int) second.getNumber(1) }, component.doubleArray[1]);\n+        Assert.assertArrayEquals(new int[] { second.get(0).intValue(),\n+                second.get(1).intValue() }, component.doubleArray[1]);\n     }\n \n     @Test\n     public void methodWithJsonValueIsInvoked() {\n-        JsonArray array = Json.createArray();\n+        ArrayNode array = JacksonUtils.createArrayNode();\n \n-        JsonObject json = Json.createObject();\n+        ObjectNode json = JacksonUtils.createObjectNode();\n         json.put(\"foo\", \"bar\");\n-        array.set(0, json);\n+        array.add(json);\n \n         MethodWithParameters component = new MethodWithParameters();\n         attachComponent(component);\n@@ -359,36 +363,35 @@ public void methodWithJsonValueIsInvoked() {\n \n     @Test\n     public void methodWithVarArgIsInvoked_varArgsIsArray() {\n-        JsonArray array = Json.createArray();\n+        ArrayNode array = JacksonUtils.createArrayNode();\n \n-        JsonArray firstArg = Json.createArray();\n-        firstArg.set(0, 5.6d);\n-        firstArg.set(1, 78.36d);\n+        ArrayNode firstArg = JacksonUtils.createArrayNode();\n+        firstArg.add(5.6d);\n+        firstArg.add(78.36d);\n \n-        array.set(0, firstArg);\n+        array.add(firstArg);\n \n-        JsonArray secondArg = Json.createArray();\n-        secondArg.set(0, 5);\n-        secondArg.set(1, Json.createNull());\n-        secondArg.set(2, 2);\n-        array.set(1, secondArg);\n+        ArrayNode secondArg = JacksonUtils.createArrayNode();\n+        secondArg.add(5);\n+        secondArg.add(JacksonUtils.nullNode());\n+        secondArg.add(2);\n+        array.add(secondArg);\n \n         MethodWithParameters component = new MethodWithParameters();\n         PublishedServerEventHandlerRpcHandler.invokeMethod(component,\n                 component.getClass(), \"method2\", array, -1);\n \n-        Assert.assertArrayEquals(\n-                new Double[] { firstArg.getNumber(0), firstArg.getNumber(1) },\n-                component.doubleArg);\n+        Assert.assertArrayEquals(new Double[] { firstArg.get(0).doubleValue(),\n+                firstArg.get(1).doubleValue() }, component.doubleArg);\n \n         Assert.assertNotNull(component.varArg);\n-        Assert.assertArrayEquals(new Integer[] { (int) secondArg.getNumber(0),\n-                null, (int) secondArg.getNumber(2) }, component.varArg);\n+        Assert.assertArrayEquals(new Integer[] { secondArg.get(0).intValue(),\n+                null, secondArg.get(2).intValue() }, component.varArg);\n     }\n \n     @Test\n     public void methodWithVarArg_acceptNoValues() {\n-        JsonArray array = Json.createArray();\n+        ArrayNode array = JacksonUtils.createArrayNode();\n \n         MethodWithVarArgParameter component = new MethodWithVarArgParameter();\n         PublishedServerEventHandlerRpcHandler.invokeMethod(component,\n@@ -399,21 +402,20 @@ public void methodWithVarArg_acceptNoValues() {\n \n     @Test\n     public void methodWithSeveralArgsAndVarArg_acceptNoValues() {\n-        JsonArray array = Json.createArray();\n+        ArrayNode array = JacksonUtils.createArrayNode();\n \n-        JsonArray firstArg = Json.createArray();\n-        firstArg.set(0, 5.6d);\n-        firstArg.set(1, 78.36d);\n+        ArrayNode firstArg = JacksonUtils.createArrayNode();\n+        firstArg.add(5.6d);\n+        firstArg.add(78.36d);\n \n-        array.set(0, firstArg);\n+        array.add(firstArg);\n \n         MethodWithParameters component = new MethodWithParameters();\n         PublishedServerEventHandlerRpcHandler.invokeMethod(component,\n                 component.getClass(), \"method2\", array, -1);\n \n-        Assert.assertArrayEquals(\n-                new Double[] { firstArg.getNumber(0), firstArg.getNumber(1) },\n-                component.doubleArg);\n+        Assert.assertArrayEquals(new Double[] { firstArg.get(0).doubleValue(),\n+                firstArg.get(1).doubleValue() }, component.doubleArg);\n \n         Assert.assertNotNull(component.varArg);\n         Assert.assertEquals(0, component.varArg.length);\n@@ -421,9 +423,9 @@ public void methodWithSeveralArgsAndVarArg_acceptNoValues() {\n \n     @Test\n     public void methodWithVarArg_acceptOneValue() {\n-        JsonArray array = Json.createArray();\n+        ArrayNode array = JacksonUtils.createArrayNode();\n \n-        array.set(0, \"foo\");\n+        array.add(\"foo\");\n \n         MethodWithVarArgParameter component = new MethodWithVarArgParameter();\n         PublishedServerEventHandlerRpcHandler.invokeMethod(component,\n@@ -435,24 +437,24 @@ public void methodWithVarArg_acceptOneValue() {\n \n     @Test\n     public void methodWithVarArg_arrayIsCorrectlyHandled() {\n-        JsonArray array = Json.createArray();\n+        ArrayNode array = JacksonUtils.createArrayNode();\n \n-        JsonArray value = Json.createArray();\n-        value.set(0, \"foo\");\n-        array.set(0, value);\n+        ArrayNode value = JacksonUtils.createArrayNode();\n+        value.add(\"foo\");\n+        array.add(value);\n \n         MethodWithVarArgParameter component = new MethodWithVarArgParameter();\n         PublishedServerEventHandlerRpcHandler.invokeMethod(component,\n                 component.getClass(), \"varArgMethod\", array, -1);\n \n-        Assert.assertArrayEquals(new String[] { value.getString(0) },\n+        Assert.assertArrayEquals(new String[] { value.get(0).textValue() },\n                 component.varArg);\n     }\n \n     @Test\n     public void nullValueAreAcceptedForPrimitive() {\n-        JsonArray array = Json.createArray();\n-        array.set(0, Json.createNull());\n+        ArrayNode array = JacksonUtils.createArrayNode();\n+        array.add(JacksonUtils.nullNode());\n         MethodWithParameters component = new MethodWithParameters();\n         component.intArg = -1;\n         component.booleanArg = true;\n@@ -471,14 +473,16 @@ public void nullValueAreAcceptedForPrimitive() {\n     public void noEventHandlerMethodException() {\n         ComponentWithNoEventHandlerMethod component = new ComponentWithNoEventHandlerMethod();\n         PublishedServerEventHandlerRpcHandler.invokeMethod(component,\n-                component.getClass(), \"operation\", Json.createArray(), -1);\n+                component.getClass(), \"operation\",\n+                JacksonUtils.createArrayNode(), -1);\n     }\n \n     @Test(expected = IllegalStateException.class)\n     public void noMethodException() {\n         ComponentWithNoEventHandlerMethod component = new ComponentWithNoEventHandlerMethod();\n         PublishedServerEventHandlerRpcHandler.invokeMethod(component,\n-                component.getClass(), \"operation1\", Json.createArray(), -1);\n+                component.getClass(), \"operation1\",\n+                JacksonUtils.createArrayNode(), -1);\n     }\n \n     @Test\n@@ -486,7 +490,8 @@ public void methodThrowsException_exceptionHasCorrectCause() {\n         ComponentWithMethodThrowingException component = new ComponentWithMethodThrowingException();\n         try {\n             PublishedServerEventHandlerRpcHandler.invokeMethod(component,\n-                    component.getClass(), \"method\", Json.createArray(), -1);\n+                    component.getClass(), \"method\",\n+                    JacksonUtils.createArrayNode(), -1);\n         } catch (RuntimeException e) {\n             Assert.assertTrue(e.getCause() instanceof NullPointerException);\n         }\n@@ -552,7 +557,7 @@ private void requestInvokeMethod(Component component) {\n     }\n \n     private void requestInvokeMethod(Component component, String method) {\n-        JsonObject json = Json.createObject();\n+        ObjectNode json = JacksonUtils.createObjectNode();\n         json.put(JsonConstants.RPC_TEMPLATE_EVENT_METHOD_NAME, method);\n \n         new PublishedServerEventHandlerRpcHandler()\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/component/ComponentEventBusTest.java b/flow-server/src/test/java/com/vaadin/flow/component/ComponentEventBusTest.java\nindex b42944b1458..ece62c401c3 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/component/ComponentEventBusTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/component/ComponentEventBusTest.java\n@@ -20,6 +20,8 @@\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.junit.Assert;\n import org.junit.Rule;\n import org.junit.Test;\n@@ -30,7 +32,8 @@\n import com.vaadin.flow.component.ComponentTest.TestComponent;\n import com.vaadin.flow.component.internal.KeyboardEvent;\n import com.vaadin.flow.dom.Element;\n-import com.vaadin.flow.internal.JsonCodec;\n+import com.vaadin.flow.internal.JacksonUtils;\n+import com.vaadin.flow.internal.JacksonCodec;\n import com.vaadin.flow.internal.MessageDigestUtil;\n import com.vaadin.flow.internal.nodefeature.ElementListenerMap;\n import com.vaadin.flow.router.RouterLink;\n@@ -38,9 +41,6 @@\n import com.vaadin.flow.shared.Registration;\n import com.vaadin.tests.util.MockUI;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-\n public class ComponentEventBusTest {\n \n     @Rule\n@@ -105,7 +105,7 @@ private class TestButton extends Component implements ClickNotifier {\n     }\n \n     private void fireDomEvent(Component component, String domEvent,\n-            JsonObject eventData) {\n+            JsonNode eventData) {\n         Element e = component.getElement();\n         e.getNode().getFeature(ElementListenerMap.class).fireEvent(\n                 new com.vaadin.flow.dom.DomEvent(e, domEvent, eventData));\n@@ -173,7 +173,7 @@ public void serverNoDataEvent_fire_noListeners() {\n     @Test\n     public void mappedDomEvent_fire_noListeners() {\n         TestComponent c = new TestComponent();\n-        fireDomEvent(c, \"dom-event\", Json.createObject());\n+        fireDomEvent(c, \"dom-event\", JacksonUtils.createObjectNode());\n     }\n \n     @Test\n@@ -367,27 +367,27 @@ public void mappedDomEventWithElementOrComponentEventData_clientReportsStateNode\n                 second.getEvent().getComponent());\n     }\n \n-    private JsonObject createStateNodeIdData(String key, int value) {\n+    private JsonNode createStateNodeIdData(String key, int value) {\n         return createData(JsonConstants.MAP_STATE_NODE_EVENT_DATA + key, value);\n     }\n \n-    private JsonObject createStateNodeIdData(String key, int value, String key2,\n+    private JsonNode createStateNodeIdData(String key, int value, String key2,\n             int value2) {\n         return createData(JsonConstants.MAP_STATE_NODE_EVENT_DATA + key, value,\n                 JsonConstants.MAP_STATE_NODE_EVENT_DATA + key2, value2);\n     }\n \n-    private JsonObject createData(String key, Object value) {\n-        JsonObject data = Json.createObject();\n-        data.put(key, JsonCodec.encodeWithoutTypeInfo(value));\n+    private JsonNode createData(String key, Object value) {\n+        ObjectNode data = JacksonUtils.createObjectNode();\n+        data.set(key, JacksonCodec.encodeWithoutTypeInfo(value));\n         return data;\n     }\n \n-    private JsonObject createData(String key, Object value, String key2,\n+    private JsonNode createData(String key, Object value, String key2,\n             Object value2) {\n-        JsonObject data = Json.createObject();\n-        data.put(key, JsonCodec.encodeWithoutTypeInfo(value));\n-        data.put(key2, JsonCodec.encodeWithoutTypeInfo(value2));\n+        ObjectNode data = JacksonUtils.createObjectNode();\n+        data.set(key, JacksonCodec.encodeWithoutTypeInfo(value));\n+        data.set(key2, JacksonCodec.encodeWithoutTypeInfo(value2));\n         return data;\n     }\n \n@@ -399,8 +399,8 @@ public void domEvent_removeListener() {\n                 eventTracker);\n         remover.remove();\n \n-        JsonObject eventData = createData(\"event.someData\", 42,\n-                \"event.moreData\", 1);\n+        JsonNode eventData = createData(\"event.someData\", 42, \"event.moreData\",\n+                1);\n         fireDomEvent(component, \"dom-event\", eventData);\n \n         eventTracker.assertEventNotCalled();\n@@ -417,8 +417,8 @@ public void domEvent_fireClientEvent() {\n         EventTracker<MappedToDomEvent> eventTracker = new EventTracker<>();\n         component.addListener(MappedToDomEvent.class, eventTracker);\n \n-        JsonObject eventData = createData(\"event.someData\", 42,\n-                \"event.moreData\", 1);\n+        JsonNode eventData = createData(\"event.someData\", 42, \"event.moreData\",\n+                1);\n         fireDomEvent(component, \"dom-event\", eventData);\n \n         eventTracker.assertEventCalled(component, true);\n@@ -433,7 +433,7 @@ public void domEvent_fireServerEvent() {\n         EventTracker<MappedToDomEvent> eventTracker = new EventTracker<>();\n         component.addListener(MappedToDomEvent.class, eventTracker);\n \n-        JsonObject eventData = Json.createObject();\n+        ObjectNode eventData = JacksonUtils.createObjectNode();\n         eventData.put(\"event.someData\", 42);\n         eventData.put(\"event.moreData\", 1);\n         fireDomEvent(component, \"dom-event\", eventData);\n@@ -503,7 +503,7 @@ public void domEvent_addSameListenerTwice() {\n         Assert.assertEquals(2, component.getEventBus().componentEventData\n                 .get(MappedToDomEvent.class).size());\n \n-        fireDomEvent(component, \"dom-event\", Json.createObject());\n+        fireDomEvent(component, \"dom-event\", JacksonUtils.createObjectNode());\n         Assert.assertEquals(2, calls);\n \n         reg1.remove();\n@@ -512,7 +512,7 @@ public void domEvent_addSameListenerTwice() {\n         Assert.assertEquals(1, component.getEventBus().componentEventData\n                 .get(MappedToDomEvent.class).size());\n \n-        fireDomEvent(component, \"dom-event\", Json.createObject());\n+        fireDomEvent(component, \"dom-event\", JacksonUtils.createObjectNode());\n \n         Assert.assertEquals(3, calls);\n \n@@ -520,7 +520,7 @@ public void domEvent_addSameListenerTwice() {\n         Assert.assertEquals(0,\n                 component.getEventBus().componentEventData.size());\n \n-        fireDomEvent(component, \"dom-event\", Json.createObject());\n+        fireDomEvent(component, \"dom-event\", JacksonUtils.createObjectNode());\n         Assert.assertEquals(3, calls);\n     }\n \n@@ -536,8 +536,8 @@ public void multipleEventsForSameDomEvent_removeListener() {\n                 .addListener(MappedToDomNoDataEvent.class, eventTracker2);\n         remover.remove();\n \n-        JsonObject eventData = createData(\"event.someData\", 42,\n-                \"event.moreData\", 1);\n+        JsonNode eventData = createData(\"event.someData\", 42, \"event.moreData\",\n+                1);\n         fireDomEvent(component, \"dom-event\", eventData);\n \n         eventTracker.assertEventNotCalled();\n@@ -556,8 +556,8 @@ public void multipleEventsForSameDomEvent_fireEvent() {\n         component.addListener(MappedToDomEvent.class, eventTracker);\n         component.addListener(MappedToDomNoDataEvent.class, eventTracker2);\n \n-        JsonObject eventData = createData(\"event.someData\", 42,\n-                \"event.moreData\", 19);\n+        JsonNode eventData = createData(\"event.someData\", 42, \"event.moreData\",\n+                19);\n         fireDomEvent(component, \"dom-event\", eventData);\n \n         eventTracker.assertEventCalled(component, true);\n@@ -577,8 +577,8 @@ public void multipleListenersForSameEvent_fireEvent() {\n         component.addListener(MappedToDomEvent.class, eventTracker);\n         component.addListener(MappedToDomEvent.class, eventTracker2);\n \n-        JsonObject eventData = createData(\"event.someData\", 42,\n-                \"event.moreData\", 19);\n+        JsonNode eventData = createData(\"event.someData\", 42, \"event.moreData\",\n+                19);\n         fireDomEvent(component, \"dom-event\", eventData);\n \n         eventTracker.assertEventCalled(component, true);\n@@ -603,8 +603,8 @@ public void multipleListenersForSameEvent_removeListener() {\n                 eventTracker2);\n         remover.remove();\n \n-        JsonObject eventData = createData(\"event.someData\", 42,\n-                \"event.moreData\", 19);\n+        JsonNode eventData = createData(\"event.someData\", 42, \"event.moreData\",\n+                19);\n         fireDomEvent(component, \"dom-event\", eventData);\n \n         eventTracker.assertEventNotCalled();\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/component/ComponentTest.java b/flow-server/src/test/java/com/vaadin/flow/component/ComponentTest.java\nindex 38df32daafd..118ae0b0ac9 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/component/ComponentTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/component/ComponentTest.java\n@@ -56,6 +56,7 @@\n import com.vaadin.flow.dom.Element;\n import com.vaadin.flow.dom.ElementFactory;\n import com.vaadin.flow.i18n.I18NProvider;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.nodefeature.ElementListenerMap;\n import com.vaadin.flow.server.MockServletServiceSessionSetup;\n import com.vaadin.flow.server.MockVaadinServletService;\n@@ -1427,7 +1428,8 @@ public void removeOnRegistration_registrationIsIdempotent() {\n     }\n \n     private DomEvent createEvent(String type, Component component) {\n-        return new DomEvent(component.getElement(), type, Json.createObject());\n+        return new DomEvent(component.getElement(), type,\n+                JacksonUtils.createObjectNode());\n     }\n \n     private void assertDependency(Dependency.Type type, String url,\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/component/DomEventTest.java b/flow-server/src/test/java/com/vaadin/flow/component/DomEventTest.java\nindex fe087e173e2..9b6ea67f4ec 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/component/DomEventTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/component/DomEventTest.java\n@@ -18,12 +18,16 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeType;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.junit.Assert;\n import org.junit.Test;\n \n import com.vaadin.flow.dom.DebouncePhase;\n import com.vaadin.flow.dom.Element;\n import com.vaadin.flow.internal.ConstantPoolKey;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.change.MapPutChange;\n import com.vaadin.flow.internal.change.NodeChange;\n import com.vaadin.flow.internal.nodefeature.ElementListenerMap;\n@@ -104,42 +108,44 @@ public void debounceFilter() {\n     private <T extends ComponentEvent<Component>> void assertSettings(\n             Class<T> eventType, String expectedFilter, int expectedTimeout,\n             DebouncePhase... expectedPhases) {\n-        JsonObject settings = getEventSettings(eventType);\n+        JsonNode settings = getEventSettings(eventType);\n \n         if (expectedFilter == null) {\n-            Assert.assertArrayEquals(new String[0], settings.keys());\n+            Assert.assertArrayEquals(new String[0],\n+                    JacksonUtils.getKeys(settings).toArray());\n             return;\n         }\n \n         Assert.assertArrayEquals(new String[] { expectedFilter },\n-                settings.keys());\n+                JacksonUtils.getKeys(settings).toArray());\n \n         if (expectedTimeout == 0 && expectedPhases.length == 0) {\n             Assert.assertEquals(\n                     \"There should be a boolean instead of empty phase list\",\n-                    JsonType.BOOLEAN, settings.get(expectedFilter).getType());\n-            boolean isFilter = settings.getBoolean(expectedFilter);\n+                    JsonNodeType.BOOLEAN,\n+                    settings.get(expectedFilter).getNodeType());\n+            boolean isFilter = settings.get(expectedFilter).booleanValue();\n             Assert.assertTrue(\"Expression should be used as a filter\",\n                     isFilter);\n             return;\n         }\n \n-        JsonArray filterSettings = settings.getArray(expectedFilter);\n+        JsonNode filterSettings = settings.get(expectedFilter);\n \n-        Assert.assertEquals(1, filterSettings.length());\n+        Assert.assertEquals(1, filterSettings.size());\n \n-        JsonArray filterSetting = filterSettings.getArray(0);\n+        JsonNode filterSetting = filterSettings.get(0);\n \n         Assert.assertEquals(\"Debunce timeout should be as expected\",\n-                expectedTimeout, (int) filterSetting.getNumber(0));\n+                expectedTimeout, filterSetting.get(0).intValue());\n \n         Assert.assertEquals(\"Number of phases should be as expected\",\n-                expectedPhases.length, filterSetting.length() - 1);\n+                expectedPhases.length, filterSetting.size() - 1);\n \n         for (int i = 0; i < expectedPhases.length; i++) {\n             String expectedIdentifier = expectedPhases[i].getIdentifier();\n             Assert.assertEquals(expectedIdentifier,\n-                    filterSetting.getString(i + 1));\n+                    filterSetting.get(i + 1).textValue());\n         }\n     }\n \n@@ -147,7 +153,7 @@ private void assertFilter(String expectedFilter,\n             JsonObject filterSettings) {\n     }\n \n-    private <T extends ComponentEvent<Component>> JsonObject getEventSettings(\n+    private <T extends ComponentEvent<Component>> JsonNode getEventSettings(\n             Class<T> eventType) {\n         Component component = new Component(new Element(\"element\")) {\n         };\n@@ -165,13 +171,12 @@ private <T extends ComponentEvent<Component>> JsonObject getEventSettings(\n         Assert.assertEquals(\"event\", change.getKey());\n \n         ConstantPoolKey value = (ConstantPoolKey) change.getValue();\n-        JsonObject constantPoolUpdate = Json.createObject();\n+        ObjectNode constantPoolUpdate = JacksonUtils.createObjectNode();\n         value.export(constantPoolUpdate);\n \n-        String[] keys = constantPoolUpdate.keys();\n-        Assert.assertEquals(1, keys.length);\n-        JsonObject eventSettings = constantPoolUpdate.getObject(keys[0]);\n+        List<String> keys = JacksonUtils.getKeys(constantPoolUpdate);\n+        Assert.assertEquals(1, keys.size());\n \n-        return eventSettings;\n+        return constantPoolUpdate.get(keys.get(0));\n     }\n }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/component/WebComponentExporterTest.java b/flow-server/src/test/java/com/vaadin/flow/component/WebComponentExporterTest.java\nindex 00e097933a9..433749816ac 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/component/WebComponentExporterTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/component/WebComponentExporterTest.java\n@@ -18,6 +18,7 @@\n \n import java.util.Set;\n \n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Rule;\n@@ -27,14 +28,11 @@\n import com.vaadin.flow.component.webcomponent.WebComponent;\n import com.vaadin.flow.component.webcomponent.WebComponentConfiguration;\n import com.vaadin.flow.dom.Element;\n-import com.vaadin.flow.internal.JsonSerializer;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.MockInstantiator;\n import com.vaadin.flow.server.webcomponent.PropertyData;\n import com.vaadin.flow.server.webcomponent.WebComponentBinding;\n \n-import elemental.json.Json;\n-import elemental.json.JsonValue;\n-\n import static org.mockito.Mockito.mock;\n \n public class WebComponentExporterTest {\n@@ -71,7 +69,7 @@ public void addProperty_differentTypes() {\n         Bean bean = new Bean();\n         bean.setInteger(5);\n \n-        JsonValue value = JsonSerializer.toJson(bean);\n+        ObjectNode value = (ObjectNode) JacksonUtils.createNode(bean);\n         exporter.addProperty(\"json\", value);\n \n         assertProperty(config, \"json\", value);\n@@ -115,7 +113,7 @@ public void configuration_deliverPropertyUpdate() {\n \n         WebComponentBinding<MyComponent> binding = config\n                 .createWebComponentBinding(new MockInstantiator(),\n-                        mock(Element.class), Json.createObject());\n+                        mock(Element.class), JacksonUtils.createObjectNode());\n \n         Assert.assertNotNull(binding);\n \n@@ -161,7 +159,7 @@ public void configureInstance(\n \n         WebComponentBinding<MyComponent> binding = config\n                 .createWebComponentBinding(new MockInstantiator(),\n-                        mock(Element.class), Json.createObject());\n+                        mock(Element.class), JacksonUtils.createObjectNode());\n \n         Assert.assertNotNull(\"Binding should not be null\", binding);\n         Assert.assertNotNull(\"Binding's component should not be null\",\n@@ -183,7 +181,8 @@ public void configuration_createWebComponentBinding_overridesDefaultValues() {\n         // attribute: value=2\n         WebComponentBinding<MyComponent> binding = config\n                 .createWebComponentBinding(new MockInstantiator(),\n-                        mock(Element.class), Json.parse(\"{\\\"value\\\":2}\"));\n+                        mock(Element.class),\n+                        JacksonUtils.readTree(\"{\\\"value\\\":2}\"));\n \n         Assert.assertEquals(\"attribute should have set default value to two\", 2,\n                 binding.getComponent().value);\n@@ -193,7 +192,7 @@ public void configuration_createWebComponentBinding_overridesDefaultValues() {\n     public void configuration_bindProxy_withoutInstanceConfigurator() {\n         WebComponentBinding<MyComponent> binding = config\n                 .createWebComponentBinding(new MockInstantiator(),\n-                        mock(Element.class), Json.createObject());\n+                        mock(Element.class), JacksonUtils.createObjectNode());\n \n         Assert.assertNotNull(\"Binding should not be null\", binding);\n         Assert.assertNotNull(\"Binding's component should not be null\",\n@@ -210,7 +209,7 @@ public void configuration_bindProxy_throwsIfExporterSharesTagWithComponent() {\n                 .create(sharedTagExporter);\n \n         sharedConfig.createWebComponentBinding(new MockInstantiator(),\n-                mock(Element.class), Json.createObject());\n+                mock(Element.class), JacksonUtils.createObjectNode());\n     }\n \n     @Test\n@@ -238,7 +237,7 @@ public void configuration_callAddProperty_throws() {\n                 .create(exporter);\n \n         config.createWebComponentBinding(new MockInstantiator(),\n-                mock(Element.class), Json.createObject());\n+                mock(Element.class), JacksonUtils.createObjectNode());\n     }\n \n     @Test(expected = IllegalStateException.class)\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/component/webcomponent/WebComponentWrapperTest.java b/flow-server/src/test/java/com/vaadin/flow/component/webcomponent/WebComponentWrapperTest.java\nindex 3c78270f2f4..74a83099f44 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/component/webcomponent/WebComponentWrapperTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/component/webcomponent/WebComponentWrapperTest.java\n@@ -31,13 +31,13 @@\n import com.vaadin.flow.component.internal.UIInternals;\n import com.vaadin.flow.dom.Element;\n import com.vaadin.flow.function.DeploymentConfiguration;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.MockInstantiator;\n import com.vaadin.flow.server.MockVaadinServletService;\n import com.vaadin.flow.server.VaadinSession;\n import com.vaadin.flow.server.webcomponent.WebComponentBinding;\n import com.vaadin.tests.util.AlwaysLockedVaadinSession;\n \n-import elemental.json.Json;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n@@ -60,20 +60,21 @@ public void init() {\n \n         // make component available and bind properties to it\n         binding = (WebComponentBinding<MyComponent>) new WebComponentExporter.WebComponentConfigurationFactory()\n-                .create(exporter).createWebComponentBinding(\n-                        new MockInstantiator(), element, Json.createObject());\n+                .create(exporter)\n+                .createWebComponentBinding(new MockInstantiator(), element,\n+                        JacksonUtils.createObjectNode());\n         wrapper = new WebComponentWrapper(element, binding);\n         component = binding.getComponent();\n     }\n \n     @Test\n     public void wrappedMyComponent_syncSetsCorrectValuesToFields() {\n-        wrapper.sync(MSG_PROPERTY, Json.create(\"MyMessage\"));\n+        wrapper.sync(MSG_PROPERTY, JacksonUtils.createNode(\"MyMessage\"));\n \n         Assert.assertEquals(\"Message field should have updated with new value\",\n                 \"MyMessage\", component.message);\n \n-        wrapper.sync(INT_PROPERTY, Json.create(10));\n+        wrapper.sync(INT_PROPERTY, JacksonUtils.createNode(10));\n \n         Assert.assertEquals(\n                 \"IntegerValue field should contain a matching integer value\",\n@@ -82,10 +83,10 @@ public void wrappedMyComponent_syncSetsCorrectValuesToFields() {\n \n     @Test\n     public void wrappedComponentPropertyListener_listenerFiredWithCorrectValuesOnSync() {\n-        wrapper.sync(MSG_PROPERTY, Json.create(\"one\"));\n-        wrapper.sync(INT_PROPERTY, Json.create(2));\n-        wrapper.sync(MSG_PROPERTY, Json.create(\"three\"));\n-        wrapper.sync(INT_PROPERTY, Json.create(4));\n+        wrapper.sync(MSG_PROPERTY, JacksonUtils.createNode(\"one\"));\n+        wrapper.sync(INT_PROPERTY, JacksonUtils.createNode(2));\n+        wrapper.sync(MSG_PROPERTY, JacksonUtils.createNode(\"three\"));\n+        wrapper.sync(INT_PROPERTY, JacksonUtils.createNode(4));\n \n         // 3, since creation sets the initial value\n         Assert.assertEquals(\"Three string messages should have come through\", 3,\n@@ -110,10 +111,10 @@ public void exportingExtendedComponent_inheritedFieldsAreAvailableAndOverridden(\n \n         MyExtension component = binding.getComponent();\n \n-        wrapper.sync(MSG_PROPERTY, Json.create(\"one\"));\n-        wrapper.sync(INT_PROPERTY, Json.create(2));\n-        wrapper.sync(MSG_PROPERTY, Json.create(\"three\"));\n-        wrapper.sync(INT_PROPERTY, Json.create(4));\n+        wrapper.sync(MSG_PROPERTY, JacksonUtils.createNode(\"one\"));\n+        wrapper.sync(INT_PROPERTY, JacksonUtils.createNode(2));\n+        wrapper.sync(MSG_PROPERTY, JacksonUtils.createNode(\"three\"));\n+        wrapper.sync(INT_PROPERTY, JacksonUtils.createNode(4));\n \n         // 3, since creation sets the initial value\n         Assert.assertEquals(\"Three string messages should have come through\", 3,\n@@ -138,11 +139,11 @@ public void extendedExporter_propertiesAreOverwrittenAndAvailable() {\n \n         MyComponent component = binding.getComponent();\n \n-        wrapper.sync(MSG_PROPERTY, Json.create(\"one\"));\n-        wrapper.sync(INT_PROPERTY, Json.create(2));\n-        wrapper.sync(MSG_PROPERTY, Json.create(\"three\"));\n-        wrapper.sync(INT_PROPERTY, Json.create(4));\n-        wrapper.sync(BOOLEAN_PROPERTY, Json.create(true));\n+        wrapper.sync(MSG_PROPERTY, JacksonUtils.createNode(\"one\"));\n+        wrapper.sync(INT_PROPERTY, JacksonUtils.createNode(2));\n+        wrapper.sync(MSG_PROPERTY, JacksonUtils.createNode(\"three\"));\n+        wrapper.sync(INT_PROPERTY, JacksonUtils.createNode(4));\n+        wrapper.sync(BOOLEAN_PROPERTY, JacksonUtils.createNode(true));\n \n         // 3, since creation sets the initial value\n         Assert.assertEquals(\"Three string messages should have come through\", 3,\n@@ -224,8 +225,9 @@ private <C extends Component> WebComponentBinding<C> constructWrapperAndGetBindi\n             element = new Element(\"tag\");\n         }\n         WebComponentBinding<C> binding = (WebComponentBinding<C>) new WebComponentExporter.WebComponentConfigurationFactory()\n-                .create(exporter).createWebComponentBinding(\n-                        new MockInstantiator(), element, Json.createObject());\n+                .create(exporter)\n+                .createWebComponentBinding(new MockInstantiator(), element,\n+                        JacksonUtils.createObjectNode());\n         wrapper = new WebComponentWrapper(element, binding) {\n             @Override\n             public Optional<UI> getUI() {\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/dom/ElementTest.java b/flow-server/src/test/java/com/vaadin/flow/dom/ElementTest.java\nindex 503533fc519..4cde437e364 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/dom/ElementTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/dom/ElementTest.java\n@@ -29,6 +29,8 @@\n import java.util.stream.Collectors;\n import java.util.stream.DoubleStream;\n \n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.ValueNode;\n import net.jcip.annotations.NotThreadSafe;\n import org.junit.Assert;\n import org.junit.Test;\n@@ -41,6 +43,7 @@\n import com.vaadin.flow.component.internal.UIInternals.JavaScriptInvocation;\n import com.vaadin.flow.component.page.PendingJavaScriptResult;\n import com.vaadin.flow.dom.impl.BasicElementStateProvider;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.JsonUtils;\n import com.vaadin.flow.internal.NullOwner;\n import com.vaadin.flow.internal.StateNode;\n@@ -60,6 +63,7 @@\n import com.vaadin.tests.util.AlwaysLockedVaadinSession;\n import com.vaadin.tests.util.MockUI;\n import com.vaadin.tests.util.TestUtil;\n+\n import elemental.json.Json;\n import elemental.json.JsonArray;\n import elemental.json.JsonObject;\n@@ -377,8 +381,8 @@ public void listenerReceivesEvents() {\n \n         e.addEventListener(\"click\", myListener);\n         Assert.assertEquals(0, listenerCalls.get());\n-        e.getNode().getFeature(ElementListenerMap.class)\n-                .fireEvent(new DomEvent(e, \"click\", Json.createObject()));\n+        e.getNode().getFeature(ElementListenerMap.class).fireEvent(\n+                new DomEvent(e, \"click\", JacksonUtils.createObjectNode()));\n         Assert.assertEquals(1, listenerCalls.get());\n     }\n \n@@ -396,15 +400,15 @@ public void listenerReceivesEventsWithAllowInert() {\n         DomListenerRegistration domListenerRegistration = e\n                 .addEventListener(\"click\", myListener);\n         Assert.assertEquals(0, listenerCalls.get());\n-        e.getNode().getFeature(ElementListenerMap.class)\n-                .fireEvent(new DomEvent(e, \"click\", Json.createObject()));\n+        e.getNode().getFeature(ElementListenerMap.class).fireEvent(\n+                new DomEvent(e, \"click\", JacksonUtils.createObjectNode()));\n         // Event should not go through\n         Assert.assertEquals(0, listenerCalls.get());\n \n         // Now should pass inert check and get notified\n         domListenerRegistration.allowInert();\n-        e.getNode().getFeature(ElementListenerMap.class)\n-                .fireEvent(new DomEvent(e, \"click\", Json.createObject()));\n+        e.getNode().getFeature(ElementListenerMap.class).fireEvent(\n+                new DomEvent(e, \"click\", JacksonUtils.createObjectNode()));\n         Assert.assertEquals(1, listenerCalls.get());\n \n     }\n@@ -448,8 +452,8 @@ public void getPropertyStringConversions() {\n                 Double.valueOf(143534123423.243e23));\n         assertPropertyString(\"42\", Double.valueOf(42));\n \n-        assertPropertyString(null, Json.createNull());\n-        assertPropertyString(\"{}\", Json.createObject());\n+        assertPropertyString(null, JacksonUtils.nullNode());\n+        assertPropertyString(\"{}\", JacksonUtils.createObjectNode());\n     }\n \n     private static void assertPropertyString(String expected, Object value) {\n@@ -472,10 +476,10 @@ public void testPropertyBooleanConversions() {\n         assertPropertyBoolean(false, Double.valueOf(0));\n         assertPropertyBoolean(false, Double.valueOf(Double.NaN));\n \n-        assertPropertyBoolean(false, Json.createNull());\n-        assertPropertyBoolean(false, Json.create(false));\n-        assertPropertyBoolean(true, Json.create(true));\n-        assertPropertyBoolean(true, Json.createObject());\n+        assertPropertyBoolean(false, JacksonUtils.nullNode());\n+        assertPropertyBoolean(false, JacksonUtils.createNode(false));\n+        assertPropertyBoolean(true, JacksonUtils.createNode(true));\n+        assertPropertyBoolean(true, JacksonUtils.createObjectNode());\n     }\n \n     private static void assertPropertyBoolean(boolean expected, Object value) {\n@@ -505,12 +509,12 @@ public void testPropertyDoubleConversions() {\n         assertPropertyDouble(1, Boolean.TRUE);\n         assertPropertyDouble(0, Boolean.FALSE);\n \n-        assertPropertyDouble(.1, Json.create(.1));\n-        assertPropertyDouble(1, Json.create(true));\n-        assertPropertyDouble(0, Json.create(false));\n-        assertPropertyDouble(.1, Json.create(\".1\"));\n-        assertPropertyDouble(Double.NaN, Json.create(\"foo\"));\n-        assertPropertyDouble(Double.NaN, Json.createObject());\n+        assertPropertyDouble(.1, JacksonUtils.createNode(.1));\n+        assertPropertyDouble(1, JacksonUtils.createNode(true));\n+        assertPropertyDouble(0, JacksonUtils.createNode(false));\n+        assertPropertyDouble(.1, JacksonUtils.createNode(\".1\"));\n+        assertPropertyDouble(Double.NaN, JacksonUtils.createNode(\"foo\"));\n+        assertPropertyDouble(Double.NaN, JacksonUtils.createObjectNode());\n     }\n \n     private static void assertPropertyDouble(double expected, Object value) {\n@@ -543,13 +547,13 @@ public void testPropertyIntConversions() {\n         assertPropertyInt(1, Boolean.TRUE);\n         assertPropertyInt(0, Boolean.FALSE);\n \n-        assertPropertyInt(1, Json.create(1));\n-        assertPropertyInt(1, Json.create(1.9));\n-        assertPropertyInt(1, Json.create(true));\n-        assertPropertyInt(0, Json.create(false));\n-        assertPropertyInt(1, Json.create(\"1\"));\n-        assertPropertyInt(0, Json.create(\"foo\"));\n-        assertPropertyInt(0, Json.createObject());\n+        assertPropertyInt(1, JacksonUtils.createNode(1));\n+        assertPropertyInt(1, JacksonUtils.createNode(1.9));\n+        assertPropertyInt(1, JacksonUtils.createNode(true));\n+        assertPropertyInt(0, JacksonUtils.createNode(false));\n+        assertPropertyInt(1, JacksonUtils.createNode(\"1\"));\n+        assertPropertyInt(0, JacksonUtils.createNode(\"foo\"));\n+        assertPropertyInt(0, JacksonUtils.createObjectNode());\n     }\n \n     private static void assertPropertyInt(int expected, Object value) {\n@@ -724,6 +728,10 @@ private static Element createPropertyAssertElement(Object value) {\n \n         if (value instanceof JsonValue) {\n             element.setPropertyJson(\"property\", (JsonValue) value);\n+        } else if (value instanceof ValueNode) {\n+            element.setPropertyJson(\"property\", (ValueNode) value);\n+        } else if (value instanceof ObjectNode) {\n+            element.setPropertyJson(\"property\", (ObjectNode) value);\n         } else if (value instanceof Serializable) {\n             BasicElementStateProvider.get().setProperty(element.getNode(),\n                     \"property\", (Serializable) value, true);\n@@ -1362,8 +1370,9 @@ public void listenersFiredInRegisteredOrder() {\n     }\n \n     private void fireEvent(Element element, String eventType) {\n-        element.getNode().getFeature(ElementListenerMap.class).fireEvent(\n-                new DomEvent(element, eventType, Json.createObject()));\n+        element.getNode().getFeature(ElementListenerMap.class)\n+                .fireEvent(new DomEvent(element, eventType,\n+                        JacksonUtils.createObjectNode()));\n \n     }\n \n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/internal/ConstantPoolTest.java b/flow-server/src/test/java/com/vaadin/flow/internal/ConstantPoolTest.java\nindex 93d9252ee58..41788c0173c 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/internal/ConstantPoolTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/internal/ConstantPoolTest.java\n@@ -15,44 +15,46 @@\n  */\n package com.vaadin.flow.internal;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.junit.Assert;\n import org.junit.Test;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-\n public class ConstantPoolTest {\n     private ConstantPool constantPool = new ConstantPool();\n \n     @Test\n     public void newConstantPool_noNewItems() {\n         Assert.assertFalse(constantPool.hasNewConstants());\n-        Assert.assertEquals(0, constantPool.dumpConstants().keys().length);\n+        Assert.assertEquals(0,\n+                JacksonUtils.getKeys(constantPool.dumpConstants()).size());\n     }\n \n     @Test\n     public void valueIsRegistered() {\n-        ConstantPoolKey reference = new ConstantPoolKey(Json.createObject());\n+        ConstantPoolKey reference = new ConstantPoolKey(\n+                JacksonUtils.createObjectNode());\n \n         String constantId = constantPool.getConstantId(reference);\n \n         Assert.assertTrue(constantPool.hasNewConstants());\n \n-        JsonObject dump = constantPool.dumpConstants();\n+        JsonNode dump = constantPool.dumpConstants();\n \n-        Assert.assertEquals(1, dump.keys().length);\n-        Assert.assertEquals(\"{}\", dump.get(constantId).toJson());\n+        Assert.assertEquals(1, JacksonUtils.getKeys(dump).size());\n+        Assert.assertEquals(\"{}\", dump.get(constantId).toString());\n     }\n \n     @Test\n     public void sameValue_sameId() {\n-        ConstantPoolKey reference = new ConstantPoolKey(Json.createObject());\n+        ConstantPoolKey reference = new ConstantPoolKey(\n+                JacksonUtils.createObjectNode());\n \n         String constantId = constantPool.getConstantId(reference);\n         constantPool.dumpConstants();\n \n-        String otherId = constantPool\n-                .getConstantId(new ConstantPoolKey(Json.createObject()));\n+        String otherId = constantPool.getConstantId(\n+                new ConstantPoolKey(JacksonUtils.createObjectNode()));\n \n         Assert.assertEquals(constantId, otherId);\n         Assert.assertFalse(constantPool.hasNewConstants());\n@@ -60,13 +62,14 @@ public void sameValue_sameId() {\n \n     @Test\n     public void differentValue_differentId() {\n-        ConstantPoolKey reference = new ConstantPoolKey(Json.createObject());\n+        ConstantPoolKey reference = new ConstantPoolKey(\n+                JacksonUtils.createObjectNode());\n \n         String constantId = constantPool.getConstantId(reference);\n         constantPool.dumpConstants();\n \n-        String otherId = constantPool\n-                .getConstantId(new ConstantPoolKey(Json.createArray()));\n+        String otherId = constantPool.getConstantId(\n+                new ConstantPoolKey(JacksonUtils.createArrayNode()));\n \n         Assert.assertNotEquals(constantId, otherId);\n         Assert.assertTrue(constantPool.hasNewConstants());\n@@ -75,9 +78,9 @@ public void differentValue_differentId() {\n     @Test\n     public void constantPoolKey_exportedDirectly_idCreated() {\n         final ConstantPoolKey constantPoolKey = new ConstantPoolKey(\n-                Json.createObject());\n-        final JsonObject message = Json.createObject();\n+                JacksonUtils.createObjectNode());\n+        final ObjectNode message = JacksonUtils.createObjectNode();\n         constantPoolKey.export(message);\n-        Assert.assertTrue(message.hasKey(constantPoolKey.getId()));\n+        Assert.assertTrue(message.has(constantPoolKey.getId()));\n     }\n }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/internal/nodefeature/ElementListenersTest.java b/flow-server/src/test/java/com/vaadin/flow/internal/nodefeature/ElementListenersTest.java\nindex 06aa8ec4677..360a4620dd7 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/internal/nodefeature/ElementListenersTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/internal/nodefeature/ElementListenersTest.java\n@@ -22,6 +22,8 @@\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.lang3.SerializationUtils;\n import org.junit.Assert;\n import org.junit.Before;\n@@ -34,13 +36,11 @@\n import com.vaadin.flow.dom.DomEventListener;\n import com.vaadin.flow.dom.DomListenerRegistration;\n import com.vaadin.flow.dom.Element;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StateTree;\n import com.vaadin.flow.shared.JsonConstants;\n import com.vaadin.flow.shared.Registration;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.spy;\n@@ -203,23 +203,23 @@ public void addingRemovingAndAddingListenerOfTheSameType() {\n \n     @Test\n     public void eventDataInEvent() {\n-        AtomicReference<JsonObject> eventDataReference = new AtomicReference<>();\n+        AtomicReference<JsonNode> eventDataReference = new AtomicReference<>();\n         ns.add(\"foo\", e -> {\n             Assert.assertNull(eventDataReference.get());\n-            eventDataReference.set(e.getEventData());\n+            eventDataReference.set(JacksonUtils.mapElemental(e.getEventData()));\n         });\n \n         Assert.assertNull(eventDataReference.get());\n \n-        JsonObject eventData = Json.createObject();\n+        ObjectNode eventData = JacksonUtils.createObjectNode();\n         eventData.put(\"baz\", true);\n         ns.fireEvent(new DomEvent(new Element(\"element\"), \"foo\", eventData));\n \n-        JsonObject capturedJson = eventDataReference.get();\n+        JsonNode capturedJson = eventDataReference.get();\n         Assert.assertNotNull(capturedJson);\n \n-        Assert.assertEquals(1, capturedJson.keys().length);\n-        Assert.assertEquals(\"true\", capturedJson.get(\"baz\").toJson());\n+        Assert.assertEquals(1, JacksonUtils.getKeys(capturedJson).size());\n+        Assert.assertEquals(\"true\", capturedJson.get(\"baz\").toString());\n     }\n \n     @Test\n@@ -373,15 +373,15 @@ public void mapEventTargetToElement_targetNodeIdInJsonData_elementMapped() {\n                 expressions.iterator().next());\n \n         // child\n-        final JsonObject eventData = Json.createObject();\n+        final ObjectNode eventData = JacksonUtils.createObjectNode();\n         eventData.put(JsonConstants.MAP_STATE_NODE_EVENT_DATA,\n                 child.getNode().getId());\n         listenerMap.fireEvent(new DomEvent(parent, eventType, eventData));\n         Assert.assertEquals(child, capturedTarget.get());\n \n         // nothing reported -> empty optional\n-        listenerMap.fireEvent(\n-                new DomEvent(parent, eventType, Json.createObject()));\n+        listenerMap.fireEvent(new DomEvent(parent, eventType,\n+                JacksonUtils.createObjectNode()));\n         Assert.assertNull(\"no element should be reported\",\n                 capturedTarget.get());\n \n@@ -425,15 +425,15 @@ public void addEventDataElement_targetNodeInJsonData_elementMapped() {\n         Assert.assertEquals(1, expressions.size());\n         Assert.assertEquals(key, expressions.iterator().next());\n \n-        final JsonObject eventData = Json.createObject();\n+        final ObjectNode eventData = JacksonUtils.createObjectNode();\n         eventData.put(key, child.getNode().getId());\n         listenerMap.fireEvent(new DomEvent(parent, eventType, eventData));\n         Assert.assertEquals(child,\n                 capturedTarget.get().getEventDataElement(expression).get());\n \n         // nothing reported -> empty optional\n-        listenerMap.fireEvent(\n-                new DomEvent(parent, eventType, Json.createObject()));\n+        listenerMap.fireEvent(new DomEvent(parent, eventType,\n+                JacksonUtils.createObjectNode()));\n         Assert.assertFalse(\"no element should be reported\", capturedTarget.get()\n                 .getEventDataElement(expression).isPresent());\n \n@@ -466,7 +466,7 @@ public void addEventDataElement_eventTarget_usesMapEventTargetInstead() {\n         Assert.assertEquals(JsonConstants.MAP_STATE_NODE_EVENT_DATA,\n                 expressions.iterator().next());\n \n-        final JsonObject eventData = Json.createObject();\n+        final ObjectNode eventData = JacksonUtils.createObjectNode();\n         eventData.put(JsonConstants.MAP_STATE_NODE_EVENT_DATA,\n                 child.getNode().getId());\n         listenerMap.fireEvent(new DomEvent(parent, eventType, eventData));\n@@ -485,7 +485,7 @@ public void eventDataKeyNotPresentNotFail() {\n         ns.fireEvent(createEvent(\"foo\"));\n         Assert.assertEquals(0, eventCount.get());\n \n-        JsonObject eventData = Json.createObject();\n+        ObjectNode eventData = JacksonUtils.createObjectNode();\n         eventData.put(\"filterKey\", true);\n         ns.fireEvent(new DomEvent(new Element(\"element\"), \"foo\", eventData));\n         Assert.assertEquals(1, eventCount.get());\n@@ -502,6 +502,7 @@ private Set<String> getExpressions(String name) {\n     }\n \n     private static DomEvent createEvent(String type) {\n-        return new DomEvent(new Element(\"fake\"), type, Json.createObject());\n+        return new DomEvent(new Element(\"fake\"), type,\n+                JacksonUtils.createObjectNode());\n     }\n }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/internal/nodefeature/PolymerServerEventHandlersTest.java b/flow-server/src/test/java/com/vaadin/flow/internal/nodefeature/PolymerServerEventHandlersTest.java\nindex 98e5037192a..3d453a736be 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/internal/nodefeature/PolymerServerEventHandlersTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/internal/nodefeature/PolymerServerEventHandlersTest.java\n@@ -16,9 +16,6 @@\n \n package com.vaadin.flow.internal.nodefeature;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n@@ -29,6 +26,9 @@\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import net.jcip.annotations.NotThreadSafe;\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mockito;\n@@ -43,13 +43,12 @@\n import com.vaadin.flow.function.DeploymentConfiguration;\n import com.vaadin.flow.internal.ConstantPoolKey;\n import com.vaadin.flow.internal.HasCurrentService;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.server.VaadinService;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-import elemental.json.impl.JreJsonArray;\n-import net.jcip.annotations.NotThreadSafe;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n \n /**\n  * @author Vaadin Ltd\n@@ -152,16 +151,16 @@ private void addAndVerifyMethod(Method method) {\n         assertEquals(1, methodCollector.size());\n         assertEquals(method, methodCollector.iterator().next());\n         assertEquals(method.getParameters().length,\n-                extractParametersData(method).length());\n+                extractParametersData(method).size());\n     }\n \n-    private JreJsonArray extractParametersData(Method method) {\n+    private JsonNode extractParametersData(Method method) {\n         ConstantPoolKey parametersData = (ConstantPoolKey) stateNode\n                 .getFeature(PolymerEventListenerMap.class)\n                 .get(method.getName());\n         assertNotNull(parametersData);\n \n-        JsonObject json = Json.createObject();\n+        ObjectNode json = JacksonUtils.createObjectNode();\n         parametersData.export(json);\n         return json.get(parametersData.getId());\n     }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/internal/nodefeature/ReturnChannelMapTest.java b/flow-server/src/test/java/com/vaadin/flow/internal/nodefeature/ReturnChannelMapTest.java\nindex 5a2841a87dc..bcc7102191c 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/internal/nodefeature/ReturnChannelMapTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/internal/nodefeature/ReturnChannelMapTest.java\n@@ -17,15 +17,14 @@\n \n import java.util.concurrent.atomic.AtomicReference;\n \n+import com.fasterxml.jackson.databind.node.ArrayNode;\n import org.junit.Assert;\n import org.junit.Test;\n \n import com.vaadin.flow.dom.DisabledUpdateMode;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StateNode;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-\n public class ReturnChannelMapTest {\n     private StateNode node = new StateNode(ReturnChannelMap.class);\n     private ReturnChannelMap returnChannelMap = node\n@@ -50,7 +49,7 @@ public void registerHandler_regstrationHasCorrectData() {\n \n     @Test\n     public void twoArgsHandler_invoked() {\n-        AtomicReference<JsonArray> observedArguments = new AtomicReference<>();\n+        AtomicReference<ArrayNode> observedArguments = new AtomicReference<>();\n         AtomicReference<ReturnChannelRegistration> observedRegistration = new AtomicReference<>();\n \n         ReturnChannelRegistration registration = returnChannelMap\n@@ -66,7 +65,7 @@ public void twoArgsHandler_invoked() {\n         Assert.assertNull(\"Handler should not yet be invoked\",\n                 observedArguments.get());\n \n-        JsonArray arguments = Json.createArray();\n+        ArrayNode arguments = JacksonUtils.createArrayNode();\n         registration.invoke(arguments);\n \n         Assert.assertSame(arguments, observedArguments.get());\n@@ -75,7 +74,7 @@ public void twoArgsHandler_invoked() {\n \n     @Test\n     public void shorthandHandler_invoked() {\n-        AtomicReference<JsonArray> observedArguments = new AtomicReference<>();\n+        AtomicReference<ArrayNode> observedArguments = new AtomicReference<>();\n \n         ReturnChannelRegistration registration = returnChannelMap\n                 .registerChannel(arguments -> {\n@@ -88,7 +87,7 @@ public void shorthandHandler_invoked() {\n         Assert.assertNull(\"Handler should not yet be invoked\",\n                 observedArguments.get());\n \n-        JsonArray arguments = Json.createArray();\n+        ArrayNode arguments = JacksonUtils.createArrayNode();\n         registration.invoke(arguments);\n \n         Assert.assertSame(arguments, observedArguments.get());\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/AbstractRpcInvocationHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/AbstractRpcInvocationHandlerTest.java\nindex a6be68a9ac9..f682a26be8f 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/AbstractRpcInvocationHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/AbstractRpcInvocationHandlerTest.java\n@@ -23,11 +23,12 @@\n import com.vaadin.flow.dom.Element;\n import com.vaadin.flow.dom.ElementFactory;\n import com.vaadin.flow.dom.ElementUtil;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.shared.JsonConstants;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.junit.Assert;\n import org.junit.Test;\n import org.mockito.MockedStatic;\n@@ -55,7 +56,7 @@ public String getRpcType() {\n \n         @Override\n         protected Optional<Runnable> handleNode(StateNode node,\n-                JsonObject invocationJson) {\n+                JsonNode invocationJson) {\n             this.node = node;\n             return Optional.of(() -> {\n             });\n@@ -104,7 +105,7 @@ public void handleInertNode_nodeIsNotHandled() {\n     public void inertUI_passingNoPollingPayload_ignoresPollingInvocation() {\n \n         UI ui = createInertUIWithPollInterval();\n-        JsonObject invocationJson = createNonPollingRpcInvocationPayload(ui);\n+        JsonNode invocationJson = createNonPollingRpcInvocationPayload(ui);\n         Optional<Runnable> runnable = handler.handle(ui, invocationJson);\n \n         Assert.assertEquals(Optional.empty(), runnable);\n@@ -115,7 +116,7 @@ public void inertUIWithPollingInterval_passingLegitimatePollingPayload_doesNotIg\n \n         UI ui = createInertUI();\n \n-        JsonObject invocationJson = createLegitimatePollingRpcInvocationPayload(\n+        JsonNode invocationJson = createLegitimatePollingRpcInvocationPayload(\n                 ui);\n         Optional<Runnable> runnable = handler.handle(ui, invocationJson);\n         Assert.assertEquals(Optional.empty(), runnable);\n@@ -133,7 +134,7 @@ public void inertUIWithPollingInterval_passingLegitimatePollingPayload_doesNotIg\n     public void inertUIWithPollingInterval_passingIllegitimateKeysForPollingPayload_ignoresInvocation() {\n \n         UI ui = createInertUIWithPollInterval();\n-        JsonObject invocationJson = createIllegitimatePayloadKeysPollingRpcInvocationPayload(\n+        JsonNode invocationJson = createIllegitimatePayloadKeysPollingRpcInvocationPayload(\n                 ui);\n         Optional<Runnable> runnable = handler.handle(ui, invocationJson);\n \n@@ -144,7 +145,7 @@ public void inertUIWithPollingInterval_passingIllegitimateKeysForPollingPayload_\n     public void inertUIWithPollingInterval_passingIllegitimateGreaterNumberOfKeysForPollingPayload_ignoresInvocation() {\n \n         UI ui = createInertUIWithPollInterval();\n-        JsonObject invocationJson = createIllegitimatePayloadWithGreaterSizePollingRpcInvocationPayload(\n+        JsonNode invocationJson = createIllegitimatePayloadWithGreaterSizePollingRpcInvocationPayload(\n                 ui);\n         Optional<Runnable> runnable = handler.handle(ui, invocationJson);\n \n@@ -155,7 +156,7 @@ public void inertUIWithPollingInterval_passingIllegitimateGreaterNumberOfKeysFor\n     public void inertUIWithPollingInterval_passingIllegitimateSmallerNumberOfKeysForPollingPayload_ignoresInvocation() {\n \n         UI ui = createInertUIWithPollInterval();\n-        JsonObject invocationJson = createIllegitimatePayloadWithSmallerSizePollingRpcInvocationPayload(\n+        JsonNode invocationJson = createIllegitimatePayloadWithSmallerSizePollingRpcInvocationPayload(\n                 ui);\n         Optional<Runnable> runnable = handler.handle(ui, invocationJson);\n \n@@ -166,7 +167,7 @@ public void inertUIWithPollingInterval_passingIllegitimateSmallerNumberOfKeysFor\n     public void inertUIWithPollingInterval_passingIllegitimateNoNodeKeyForPollingPayload_throwsAssertionError() {\n \n         UI ui = createInertUIWithPollInterval();\n-        JsonObject invocationJson = createIllegitimatePayloadNoNodeKeyForPollingRpcInvocationPayload();\n+        JsonNode invocationJson = createIllegitimatePayloadNoNodeKeyForPollingRpcInvocationPayload();\n         Assert.assertThrows(AssertionError.class,\n                 () -> handler.handle(ui, invocationJson));\n     }\n@@ -175,7 +176,7 @@ public void inertUIWithPollingInterval_passingIllegitimateNoNodeKeyForPollingPay\n     public void inertUIWithPollingInterval_passingIllegitimateNonRootNodeIdForPollingPayload_ignoresInvocation() {\n \n         UI ui = createInertUIWithPollInterval();\n-        JsonObject invocationJson = createIllegitimatePayloadWithNonRootNodePollingRpcInvocationPayload(\n+        JsonNode invocationJson = createIllegitimatePayloadWithNonRootNodePollingRpcInvocationPayload(\n                 ui);\n         Optional<Runnable> runnable = handler.handle(ui, invocationJson);\n \n@@ -194,7 +195,7 @@ public void inertUIWithoutPollInterval_passingLegitimatePollingPayload_logsIgnor\n                     .thenReturn(logger);\n \n             UI ui = createInertUI();\n-            JsonObject invocationJson = createLegitimatePollingRpcInvocationPayload(\n+            JsonNode invocationJson = createLegitimatePollingRpcInvocationPayload(\n                     ui);\n             handler.handle(ui, invocationJson);\n \n@@ -215,7 +216,7 @@ public void inertUIWithPollingInterval_passingIllegitimatePollingPayload_logsIgn\n                     .thenReturn(logger);\n \n             UI ui = createInertUIWithPollInterval();\n-            JsonObject invocationJson = createIllegitimatePayloadKeysPollingRpcInvocationPayload(\n+            JsonNode invocationJson = createIllegitimatePayloadKeysPollingRpcInvocationPayload(\n                     ui);\n             handler.handle(ui, invocationJson);\n \n@@ -233,7 +234,7 @@ private Element createRpcInvocationData(UI ui,\n             additionalConfig.accept(element);\n         }\n \n-        JsonObject object = Json.createObject();\n+        ObjectNode object = JacksonUtils.createObjectNode();\n         object.put(JsonConstants.RPC_NODE, element.getNode().getId());\n         handler.handle(ui, object);\n         return element;\n@@ -254,26 +255,26 @@ private UI createInertUI() {\n         return ui;\n     }\n \n-    private JsonObject createLegitimatePollingRpcInvocationPayload(UI ui) {\n-        JsonObject payload = Json.createObject();\n+    private JsonNode createLegitimatePollingRpcInvocationPayload(UI ui) {\n+        ObjectNode payload = JacksonUtils.createObjectNode();\n         payload.put(JsonConstants.RPC_TYPE, JsonConstants.RPC_TYPE_EVENT);\n         payload.put(JsonConstants.RPC_NODE, ui.getElement().getNode().getId());\n         payload.put(JsonConstants.RPC_EVENT_TYPE, PollEvent.DOM_EVENT_NAME);\n         return payload;\n     }\n \n-    private JsonObject createIllegitimatePayloadKeysPollingRpcInvocationPayload(\n+    private JsonNode createIllegitimatePayloadKeysPollingRpcInvocationPayload(\n             UI ui) {\n-        JsonObject payload = Json.createObject();\n+        ObjectNode payload = JacksonUtils.createObjectNode();\n         payload.put(JsonConstants.RPC_EVENT_DATA, \"DATA\");\n         payload.put(JsonConstants.RPC_NODE, ui.getElement().getNode().getId());\n         payload.put(JsonConstants.RPC_EVENT_TYPE, PollEvent.DOM_EVENT_NAME);\n         return payload;\n     }\n \n-    private JsonObject createIllegitimatePayloadWithGreaterSizePollingRpcInvocationPayload(\n+    private JsonNode createIllegitimatePayloadWithGreaterSizePollingRpcInvocationPayload(\n             UI ui) {\n-        JsonObject payload = Json.createObject();\n+        ObjectNode payload = JacksonUtils.createObjectNode();\n         payload.put(JsonConstants.RPC_EVENT_DATA, \"DATA\");\n         payload.put(JsonConstants.RPC_TYPE, JsonConstants.RPC_TYPE_EVENT);\n         payload.put(JsonConstants.RPC_NODE, ui.getElement().getNode().getId());\n@@ -281,24 +282,24 @@ private JsonObject createIllegitimatePayloadWithGreaterSizePollingRpcInvocationP\n         return payload;\n     }\n \n-    private JsonObject createIllegitimatePayloadWithSmallerSizePollingRpcInvocationPayload(\n+    private JsonNode createIllegitimatePayloadWithSmallerSizePollingRpcInvocationPayload(\n             UI ui) {\n-        JsonObject payload = Json.createObject();\n+        ObjectNode payload = JacksonUtils.createObjectNode();\n         payload.put(JsonConstants.RPC_NODE, ui.getElement().getNode().getId());\n         payload.put(JsonConstants.RPC_EVENT_TYPE, PollEvent.DOM_EVENT_NAME);\n         return payload;\n     }\n \n-    private JsonObject createIllegitimatePayloadNoNodeKeyForPollingRpcInvocationPayload() {\n-        JsonObject payload = Json.createObject();\n+    private JsonNode createIllegitimatePayloadNoNodeKeyForPollingRpcInvocationPayload() {\n+        ObjectNode payload = JacksonUtils.createObjectNode();\n         payload.put(JsonConstants.RPC_TYPE, JsonConstants.RPC_TYPE_EVENT);\n         payload.put(JsonConstants.CHANGE_TYPE, \"change\");\n         payload.put(JsonConstants.RPC_EVENT_TYPE, PollEvent.DOM_EVENT_NAME);\n         return payload;\n     }\n \n-    private JsonObject createNonPollingRpcInvocationPayload(UI ui) {\n-        JsonObject payload = Json.createObject();\n+    private JsonNode createNonPollingRpcInvocationPayload(UI ui) {\n+        ObjectNode payload = JacksonUtils.createObjectNode();\n         payload.put(JsonConstants.RPC_TYPE, JsonConstants.RPC_TYPE_EVENT);\n         payload.put(JsonConstants.RPC_NODE,\n                 ui.getInternals().getStateTree().getRootNode().getId());\n@@ -307,12 +308,12 @@ private JsonObject createNonPollingRpcInvocationPayload(UI ui) {\n         return payload;\n     }\n \n-    private JsonObject createIllegitimatePayloadWithNonRootNodePollingRpcInvocationPayload(\n+    private JsonNode createIllegitimatePayloadWithNonRootNodePollingRpcInvocationPayload(\n             UI ui) {\n         Element element = ElementFactory.createAnchor();\n         ui.getElement().appendChild(element);\n \n-        JsonObject payload = Json.createObject();\n+        ObjectNode payload = JacksonUtils.createObjectNode();\n         payload.put(JsonConstants.RPC_TYPE, JsonConstants.RPC_TYPE_EVENT);\n         payload.put(JsonConstants.RPC_NODE, element.getNode().getId());\n         payload.put(JsonConstants.RPC_EVENT_TYPE, PollEvent.DOM_EVENT_NAME);\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/AttachExistingElementRpcHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/AttachExistingElementRpcHandlerTest.java\nindex 5cca3d7969d..9299be82478 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/AttachExistingElementRpcHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/AttachExistingElementRpcHandlerTest.java\n@@ -15,6 +15,7 @@\n  */\n package com.vaadin.flow.server.communication.rpc;\n \n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.junit.Assert;\n import org.junit.Test;\n import org.mockito.Mockito;\n@@ -22,14 +23,12 @@\n import com.vaadin.flow.dom.ChildElementConsumer;\n import com.vaadin.flow.dom.Element;\n import com.vaadin.flow.dom.Node;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.internal.StateTree;\n import com.vaadin.flow.internal.nodefeature.AttachExistingElementFeature;\n import com.vaadin.flow.shared.JsonConstants;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-\n public class AttachExistingElementRpcHandlerTest {\n \n     @Test\n@@ -37,7 +36,7 @@ public void handleNode_error() {\n         AttachExistingElementRpcHandler handler = new AttachExistingElementRpcHandler();\n \n         int requestedId = 1;\n-        JsonObject object = Json.createObject();\n+        ObjectNode object = JacksonUtils.createObjectNode();\n         object.put(JsonConstants.RPC_ATTACH_REQUESTED_ID, requestedId);\n         object.put(JsonConstants.RPC_ATTACH_ASSIGNED_ID, -1);\n         object.put(JsonConstants.RPC_ATTACH_TAG_NAME, \"div\");\n@@ -71,7 +70,7 @@ public void handleNode_requestedIdEqualsAssignedId() {\n \n         int requestedId = 1;\n         int index = 2;\n-        JsonObject object = Json.createObject();\n+        ObjectNode object = JacksonUtils.createObjectNode();\n         object.put(JsonConstants.RPC_ATTACH_REQUESTED_ID, requestedId);\n         object.put(JsonConstants.RPC_ATTACH_ASSIGNED_ID, requestedId);\n         object.put(JsonConstants.RPC_ATTACH_TAG_NAME, \"div\");\n@@ -110,7 +109,7 @@ public void handleNode_requestedIdAndAssignedIdAreDifferent() {\n         int requestedId = 1;\n         int assignedId = 2;\n         int index = 3;\n-        JsonObject object = Json.createObject();\n+        ObjectNode object = JacksonUtils.createObjectNode();\n         object.put(JsonConstants.RPC_ATTACH_REQUESTED_ID, requestedId);\n         object.put(JsonConstants.RPC_ATTACH_ASSIGNED_ID, assignedId);\n         object.put(JsonConstants.RPC_ATTACH_TAG_NAME, \"div\");\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/AttachTemplateChildRpcHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/AttachTemplateChildRpcHandlerTest.java\nindex f8b512a02d8..31a53b9f810 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/AttachTemplateChildRpcHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/AttachTemplateChildRpcHandlerTest.java\n@@ -17,61 +17,60 @@\n \n import java.util.HashMap;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.junit.Test;\n import org.mockito.Mockito;\n \n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.internal.StateTree;\n import com.vaadin.flow.internal.nodefeature.ElementData;\n import com.vaadin.flow.shared.JsonConstants;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-import elemental.json.JsonValue;\n-\n public class AttachTemplateChildRpcHandlerTest {\n \n     @Test(expected = IllegalStateException.class)\n     public void handleNode_attachById_elementNotFound() {\n-        doHandleNode_attach_elementNotFound(Json.create(\"id\"));\n+        doHandleNode_attach_elementNotFound(JacksonUtils.createNode(\"id\"));\n     }\n \n     @Test(expected = IllegalStateException.class)\n     public void handleNode_attachCustomElement_elementNotFound() {\n-        doHandleNode_attach_elementNotFound(Json.createNull());\n+        doHandleNode_attach_elementNotFound(JacksonUtils.nullNode());\n     }\n \n     @Test(expected = IllegalStateException.class)\n     public void handleNode_attachByIdExistingRequest_throwReservedId() {\n-        doHandleNode_attach_throwReservedId(Json.create(2));\n+        doHandleNode_attach_throwReservedId(JacksonUtils.createNode(2));\n     }\n \n     @Test(expected = IllegalStateException.class)\n     public void handleNode_attachCustonElementCustomId_throwReservedId() {\n-        doHandleNode_attach_throwReservedId(Json.createNull());\n+        doHandleNode_attach_throwReservedId(JacksonUtils.nullNode());\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n     public void handleNode_success_throwIllegalInvocation() {\n-        assertHandleNode(1, Json.create(\"id\"));\n+        assertHandleNode(1, JacksonUtils.createNode(\"id\"));\n     }\n \n-    private void doHandleNode_attach_elementNotFound(JsonValue id) {\n+    private void doHandleNode_attach_elementNotFound(JsonNode id) {\n         assertHandleNode(-1, id);\n     }\n \n-    private void doHandleNode_attach_throwReservedId(JsonValue id) {\n+    private void doHandleNode_attach_throwReservedId(JsonNode id) {\n         assertHandleNode(2, id);\n     }\n \n-    private void assertHandleNode(int assignedId, JsonValue id) {\n+    private void assertHandleNode(int assignedId, JsonNode id) {\n         AttachTemplateChildRpcHandler handler = new AttachTemplateChildRpcHandler();\n \n         int requestedId = 1;\n-        JsonObject object = Json.createObject();\n+        ObjectNode object = JacksonUtils.createObjectNode();\n         object.put(JsonConstants.RPC_ATTACH_REQUESTED_ID, requestedId);\n         object.put(JsonConstants.RPC_ATTACH_ASSIGNED_ID, assignedId);\n-        object.put(JsonConstants.RPC_ATTACH_ID, id);\n+        object.set(JsonConstants.RPC_ATTACH_ID, id);\n \n         StateNode node = Mockito.mock(StateNode.class);\n         StateNode parentNode = Mockito.mock(StateNode.class);\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/EnumDecoderTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/EnumDecoderTest.java\nindex c9b3b8ed479..e54e5bd81a9 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/EnumDecoderTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/EnumDecoderTest.java\n@@ -18,7 +18,7 @@\n import org.junit.Assert;\n import org.junit.Test;\n \n-import elemental.json.Json;\n+import com.vaadin.flow.internal.JacksonUtils;\n \n public class EnumDecoderTest {\n \n@@ -30,39 +30,41 @@ enum Title {\n \n     @Test\n     public void isApplicable_applicableToStringAndEnum() {\n-        Assert.assertTrue(\n-                decoder.isApplicable(Json.create(\"foo\"), Title.class));\n+        Assert.assertTrue(decoder.isApplicable(JacksonUtils.createNode(\"foo\"),\n+                Title.class));\n     }\n \n     @Test\n     public void isApplicable_notApplicableToBooleanAndEnum() {\n-        Assert.assertFalse(decoder.isApplicable(Json.create(true), Enum.class));\n+        Assert.assertFalse(decoder.isApplicable(JacksonUtils.createNode(true),\n+                Enum.class));\n     }\n \n     @Test\n     public void isApplicable_notApplicableToStringAndString() {\n-        Assert.assertFalse(\n-                decoder.isApplicable(Json.create(\"foo\"), String.class));\n+        Assert.assertFalse(decoder.isApplicable(JacksonUtils.createNode(\"foo\"),\n+                String.class));\n     }\n \n     @Test\n     public void isApplicable_notApplicableToStringAndAbstractEnum() {\n-        Assert.assertFalse(\n-                decoder.isApplicable(Json.create(\"foo\"), Enum.class));\n+        Assert.assertFalse(decoder.isApplicable(JacksonUtils.createNode(\"foo\"),\n+                Enum.class));\n     }\n \n     @Test\n     public void stringToEnum_convertableString_valueIsConverted()\n             throws RpcDecodeException {\n         Title title = Title.MRS;\n-        Title decoded = decoder.decode(Json.create(title.name()), Title.class);\n+        Title decoded = decoder.decode(JacksonUtils.createNode(title.name()),\n+                Title.class);\n         Assert.assertEquals(title, decoded);\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n     public void stringToEnum_nonConvertableString_valueIsConverted()\n             throws RpcDecodeException {\n-        decoder.decode(Json.create(\"foo\"), Title.class);\n+        decoder.decode(JacksonUtils.createNode(\"foo\"), Title.class);\n     }\n \n }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/EventRpcHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/EventRpcHandlerTest.java\nindex ba1d8689515..902b85b7d1e 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/EventRpcHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/EventRpcHandlerTest.java\n@@ -17,6 +17,8 @@\n \n import java.util.concurrent.atomic.AtomicInteger;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.junit.Assert;\n import org.junit.Test;\n \n@@ -24,11 +26,10 @@\n import com.vaadin.flow.component.UI;\n import com.vaadin.flow.dom.DomListenerRegistration;\n import com.vaadin.flow.dom.Element;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.internal.nodefeature.InertData;\n import com.vaadin.flow.shared.JsonConstants;\n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n \n public class EventRpcHandlerTest {\n \n@@ -57,7 +58,7 @@ public void testElementEventData() throws Exception {\n         DomListenerRegistration domListenerRegistration = element\n                 .addEventListener(\"test-event\", e -> invocationData\n                         .addAndGet((int) e.getEventData().getNumber(\"nr\")));\n-        JsonObject eventData = Json.createObject();\n+        ObjectNode eventData = JacksonUtils.createObjectNode();\n         eventData.put(\"nr\", 123);\n         sendElementEvent(element, ui, \"test-event\", eventData);\n         Assert.assertEquals(123, invocationData.get());\n@@ -77,11 +78,11 @@ public void testElementEventData() throws Exception {\n \n     }\n \n-    private static JsonObject createElementEventInvocation(Element element,\n-            String eventType, JsonObject eventData) {\n+    private static JsonNode createElementEventInvocation(Element element,\n+            String eventType, JsonNode eventData) {\n         StateNode node = element.getNode();\n         // Copied from ServerConnector\n-        JsonObject message = Json.createObject();\n+        ObjectNode message = JacksonUtils.createObjectNode();\n         message.put(JsonConstants.RPC_NODE, node.getId());\n         message.put(JsonConstants.RPC_EVENT_TYPE, eventType);\n \n@@ -93,7 +94,7 @@ private static JsonObject createElementEventInvocation(Element element,\n     }\n \n     private static void sendElementEvent(Element element, UI ui,\n-            String eventType, JsonObject eventData) throws Exception {\n+            String eventType, JsonNode eventData) throws Exception {\n         new EventRpcHandler().handle(ui,\n                 createElementEventInvocation(element, eventType, eventData));\n     }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/MapSyncRpcHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/MapSyncRpcHandlerTest.java\nindex ec1581842df..2379074a754 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/MapSyncRpcHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/MapSyncRpcHandlerTest.java\n@@ -20,11 +20,16 @@\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.hamcrest.CoreMatchers;\n import org.junit.Assert;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n+import org.mockito.MockedStatic;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import com.vaadin.flow.component.Component;\n import com.vaadin.flow.component.Tag;\n@@ -32,7 +37,8 @@\n import com.vaadin.flow.dom.DisabledUpdateMode;\n import com.vaadin.flow.dom.Element;\n import com.vaadin.flow.dom.ElementFactory;\n-import com.vaadin.flow.internal.JsonCodec;\n+import com.vaadin.flow.internal.JacksonCodec;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.internal.nodefeature.ElementPropertyMap;\n import com.vaadin.flow.internal.nodefeature.ModelList;\n@@ -40,13 +46,6 @@\n import com.vaadin.flow.internal.nodefeature.NodeFeatureRegistry;\n import com.vaadin.flow.shared.JsonConstants;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-import elemental.json.JsonValue;\n-import org.mockito.MockedStatic;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.mockStatic;\n@@ -108,7 +107,7 @@ public void syncJSON_jsonIsForStateNodeInList_propertySetToStateNodeCopy()\n \n         // Use the model node id for JSON object which represents a value to\n         // update\n-        JsonObject json = Json.createObject();\n+        ObjectNode json = JacksonUtils.createObjectNode();\n         json.put(\"nodeId\", item.getId());\n \n         // send sync request\n@@ -150,7 +149,7 @@ public void syncJSON_jsonIsPropertyValueOfStateNode_propertySetToNode()\n \n         // Use the model node id for JSON object which represents a value to\n         // update\n-        JsonObject json = Json.createObject();\n+        ObjectNode json = JacksonUtils.createObjectNode();\n         json.put(\"nodeId\", model.getId());\n \n         // send sync request\n@@ -183,7 +182,7 @@ public void syncJSON_jsonIsNotListItemAndNotPropertyValue_propertySetToJSON()\n \n         // Use the model node id for JSON object which represents a value to\n         // update\n-        JsonObject json = Json.createObject();\n+        ObjectNode json = JacksonUtils.createObjectNode();\n         json.put(\"nodeId\", anotherNode.getId());\n \n         // send sync request\n@@ -193,7 +192,7 @@ public void syncJSON_jsonIsNotListItemAndNotPropertyValue_propertySetToJSON()\n                 .getFeature(ElementPropertyMap.class).getProperty(\"foo\");\n \n         Assert.assertNotSame(anotherNode, testPropertyValue);\n-        Assert.assertTrue(testPropertyValue instanceof JsonValue);\n+        Assert.assertTrue(testPropertyValue instanceof ObjectNode);\n     }\n \n     @Test\n@@ -433,21 +432,21 @@ private static void sendSynchronizePropertyEvent(Element element, UI ui,\n                 createSyncPropertyInvocation(element, eventType, value));\n     }\n \n-    private static JsonObject createSyncPropertyInvocation(Element element,\n+    private static JsonNode createSyncPropertyInvocation(Element element,\n             String property, Serializable value) {\n         return createSyncPropertyInvocation(element.getNode(), property, value);\n     }\n \n-    private static JsonObject createSyncPropertyInvocation(StateNode node,\n+    private static JsonNode createSyncPropertyInvocation(StateNode node,\n             String property, Serializable value) {\n         // Copied from ServerConnector\n-        JsonObject message = Json.createObject();\n+        ObjectNode message = JacksonUtils.createObjectNode();\n         message.put(JsonConstants.RPC_NODE, node.getId());\n         message.put(JsonConstants.RPC_FEATURE,\n                 NodeFeatureRegistry.getId(ElementPropertyMap.class));\n         message.put(JsonConstants.RPC_PROPERTY, property);\n-        message.put(JsonConstants.RPC_PROPERTY_VALUE,\n-                JsonCodec.encodeWithoutTypeInfo(value));\n+        message.set(JsonConstants.RPC_PROPERTY_VALUE,\n+                JacksonCodec.encodeWithoutTypeInfo(value));\n \n         return message;\n     }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/NavigationRpcHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/NavigationRpcHandlerTest.java\nindex f8c6c833dab..c045cef757d 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/NavigationRpcHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/NavigationRpcHandlerTest.java\n@@ -1,22 +1,22 @@\n package com.vaadin.flow.server.communication.rpc;\n \n-import com.vaadin.flow.component.UI;\n-import com.vaadin.flow.component.page.History;\n-import com.vaadin.flow.router.RouterLink;\n-import com.vaadin.flow.shared.JsonConstants;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mockito;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n+import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.component.page.History;\n+import com.vaadin.flow.internal.JacksonUtils;\n+import com.vaadin.flow.router.RouterLink;\n+import com.vaadin.flow.shared.JsonConstants;\n \n public class NavigationRpcHandlerTest {\n \n     private UI ui;\n     private History.HistoryStateChangeHandler historyStateChangeHandler;\n     private NavigationRpcHandler rpcHandler;\n-    private JsonObject invocation;\n+    private ObjectNode invocation;\n \n     @Before\n     public void setup() {\n@@ -29,7 +29,7 @@ public void setup() {\n         ui.add(new RouterLink());\n \n         rpcHandler = new NavigationRpcHandler();\n-        invocation = Json.createObject();\n+        invocation = JacksonUtils.createObjectNode();\n         invocation.put(JsonConstants.RPC_NAVIGATION_LOCATION, \"foo\");\n     }\n \n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandlerTest.java\nindex f5d711402f7..593c5875aec 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandlerTest.java\n@@ -17,6 +17,9 @@\n \n import java.util.List;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import net.jcip.annotations.NotThreadSafe;\n import org.junit.After;\n import org.junit.Assert;\n@@ -35,17 +38,13 @@\n import com.vaadin.flow.component.internal.UIInternals.JavaScriptInvocation;\n import com.vaadin.flow.component.polymertemplate.EventHandler;\n import com.vaadin.flow.dom.DisabledUpdateMode;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.MockServletServiceSessionSetup;\n import com.vaadin.flow.server.VaadinService;\n import com.vaadin.flow.server.VaadinSession;\n import com.vaadin.flow.shared.JsonConstants;\n import com.vaadin.tests.util.MockDeploymentConfiguration;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n-import elemental.json.JsonValue;\n-\n @NotThreadSafe\n public class PublishedServerEventHandlerRpcHandlerTest {\n \n@@ -148,7 +147,7 @@ public static class MethodWithParameters extends ComponentWithCompute {\n         private Double[] doubleArg;\n         private Integer[] varArg;\n         private int[][] doubleArray;\n-        private JsonValue jsonValue;\n+        private JsonNode jsonValue;\n \n         @Override\n         @ClientCallable\n@@ -181,7 +180,7 @@ protected void method3(@EventData(\"foo\") int[][] array) {\n         }\n \n         @ClientCallable\n-        protected void method4(@EventData(\"foo\") JsonValue value) {\n+        protected void method4(@EventData(\"foo\") JsonNode value) {\n             jsonValue = value;\n         }\n     }\n@@ -214,7 +213,8 @@ public void tearDown() {\n     public void methodIsInvoked() {\n         ComponentWithCompute component = new ComponentWithCompute();\n         PublishedServerEventHandlerRpcHandler.invokeMethod(component,\n-                component.getClass(), \"method\", Json.createArray(), -1);\n+                component.getClass(), \"method\", JacksonUtils.createArrayNode(),\n+                -1);\n \n         Assert.assertTrue(component.isInvoked);\n     }\n@@ -223,7 +223,8 @@ public void methodIsInvoked() {\n     public void methodIsNotInvokedWhenInert() {\n         ComponentWithCompute component = new ComponentWithCompute();\n         PublishedServerEventHandlerRpcHandler.invokeMethod(component,\n-                component.getClass(), \"method\", Json.createArray(), -1, true);\n+                component.getClass(), \"method\", JacksonUtils.createArrayNode(),\n+                -1, true);\n \n         Assert.assertFalse(component.isInvoked);\n     }\n@@ -233,7 +234,7 @@ public void methodIsInvokedWhenInertAndInertAllowed() {\n         ComponentWithCompute component = new ComponentWithCompute();\n         PublishedServerEventHandlerRpcHandler.invokeMethod(component,\n                 component.getClass(), \"methodThatCanBeCalledWhenInert\",\n-                Json.createArray(), -1, true);\n+                JacksonUtils.createArrayNode(), -1, true);\n \n         Assert.assertTrue(component.isInvoked);\n     }\n@@ -243,7 +244,8 @@ public void methodIsInvokedOnCompositeContent() {\n         CompositeOfComponentWithCompute composite = new CompositeOfComponentWithCompute();\n         ComponentWithCompute component = composite.getContent();\n         PublishedServerEventHandlerRpcHandler.invokeMethod(composite,\n-                composite.getClass(), \"method\", Json.createArray(), -1);\n+                composite.getClass(), \"method\", JacksonUtils.createArrayNode(),\n+                -1);\n \n         Assert.assertTrue(component.isInvoked);\n     }\n@@ -253,16 +255,17 @@ public void methodIsInvokectOnCompositeOfComposite() {\n         CompositeOfComposite composite = new CompositeOfComposite();\n         ComponentWithCompute component = composite.getContent().getContent();\n         PublishedServerEventHandlerRpcHandler.invokeMethod(composite,\n-                composite.getClass(), \"method\", Json.createArray(), -1);\n+                composite.getClass(), \"method\", JacksonUtils.createArrayNode(),\n+                -1);\n \n         Assert.assertTrue(component.isInvoked);\n     }\n \n     @Test\n     public void methodWithDecoderParameters_convertableValues_methodIsInvoked() {\n-        JsonArray params = Json.createArray();\n-        params.set(0, \"264\");\n-        params.set(1, \"MRS\");\n+        ArrayNode params = JacksonUtils.createArrayNode();\n+        params.add(\"264\");\n+        params.add(\"MRS\");\n \n         DecoderParameters component = new DecoderParameters();\n         UI ui = new UI();\n@@ -278,9 +281,9 @@ public void methodWithDecoderParameters_convertableValues_methodIsInvoked() {\n \n     @Test(expected = IllegalArgumentException.class)\n     public void methodWithDecoderParameters_nonConvertableValues_methodIsInvoked() {\n-        JsonArray params = Json.createArray();\n-        params.set(0, \"264.1\");\n-        params.set(1, \"MR\");\n+        ArrayNode params = JacksonUtils.createArrayNode();\n+        params.add(\"264.1\");\n+        params.add(\"MR\");\n \n         UI ui = new UI();\n         ui.getInternals().setSession(session);\n@@ -293,8 +296,8 @@ public void methodWithDecoderParameters_nonConvertableValues_methodIsInvoked() {\n \n     @Test(expected = IllegalArgumentException.class)\n     public void methodWithoutArgs_argsProvided() {\n-        JsonArray args = Json.createArray();\n-        args.set(0, true);\n+        ArrayNode args = JacksonUtils.createArrayNode();\n+        args.add(true);\n         ComponentWithCompute component = new ComponentWithCompute();\n         PublishedServerEventHandlerRpcHandler.invokeMethod(component,\n                 component.getClass(), \"method\", args, -1);\n@@ -304,8 +307,8 @@ public void methodWithoutArgs_argsProvided() {\n     public void promiseSuccess() {\n         int promiseId = 4;\n \n-        JsonArray args = Json.createArray();\n-        args.set(0, 36);\n+        ArrayNode args = JacksonUtils.createArrayNode();\n+        args.add(36);\n \n         ComponentWithCompute component = new ComponentWithCompute();\n         UI ui = new UI();\n@@ -347,8 +350,8 @@ public void promiseSuccess() {\n     public void promiseFailure() {\n         int promiseId = 4;\n \n-        JsonArray args = Json.createArray();\n-        args.set(0, -36);\n+        ArrayNode args = JacksonUtils.createArrayNode();\n+        args.add(-36);\n \n         ComponentWithCompute component = new ComponentWithCompute();\n         UI ui = new UI();\n@@ -390,7 +393,7 @@ public void promiseFailure() {\n \n     @Test\n     public void methodWithVarArg_acceptNoValues() {\n-        JsonArray array = Json.createArray();\n+        ArrayNode array = JacksonUtils.createArrayNode();\n \n         MethodWithVarArgParameter component = new MethodWithVarArgParameter();\n         PublishedServerEventHandlerRpcHandler.invokeMethod(component,\n@@ -401,21 +404,20 @@ public void methodWithVarArg_acceptNoValues() {\n \n     @Test\n     public void methodWithSeveralArgsAndVarArg_acceptNoValues() {\n-        JsonArray array = Json.createArray();\n+        ArrayNode array = JacksonUtils.createArrayNode();\n \n-        JsonArray firstArg = Json.createArray();\n-        firstArg.set(0, 5.6d);\n-        firstArg.set(1, 78.36d);\n+        ArrayNode firstArg = JacksonUtils.createArrayNode();\n+        firstArg.add(5.6d);\n+        firstArg.add(78.36d);\n \n-        array.set(0, firstArg);\n+        array.add(firstArg);\n \n         MethodWithParameters component = new MethodWithParameters();\n         PublishedServerEventHandlerRpcHandler.invokeMethod(component,\n                 component.getClass(), \"method2\", array, -1);\n \n-        Assert.assertArrayEquals(\n-                new Double[] { firstArg.getNumber(0), firstArg.getNumber(1) },\n-                component.doubleArg);\n+        Assert.assertArrayEquals(new Double[] { firstArg.get(0).doubleValue(),\n+                firstArg.get(1).doubleValue() }, component.doubleArg);\n \n         Assert.assertNotNull(component.varArg);\n         Assert.assertEquals(0, component.varArg.length);\n@@ -423,9 +425,9 @@ public void methodWithSeveralArgsAndVarArg_acceptNoValues() {\n \n     @Test\n     public void methodWithVarArg_acceptOneValue() {\n-        JsonArray array = Json.createArray();\n+        ArrayNode array = JacksonUtils.createArrayNode();\n \n-        array.set(0, \"foo\");\n+        array.add(\"foo\");\n \n         MethodWithVarArgParameter component = new MethodWithVarArgParameter();\n         PublishedServerEventHandlerRpcHandler.invokeMethod(component,\n@@ -437,24 +439,24 @@ public void methodWithVarArg_acceptOneValue() {\n \n     @Test\n     public void methodWithVarArg_arrayIsCorrectlyHandled() {\n-        JsonArray array = Json.createArray();\n+        ArrayNode array = JacksonUtils.createArrayNode();\n \n-        JsonArray value = Json.createArray();\n-        value.set(0, \"foo\");\n-        array.set(0, value);\n+        ArrayNode value = JacksonUtils.createArrayNode();\n+        value.add(\"foo\");\n+        array.add(value);\n \n         MethodWithVarArgParameter component = new MethodWithVarArgParameter();\n         PublishedServerEventHandlerRpcHandler.invokeMethod(component,\n                 component.getClass(), \"varArgMethod\", array, -1);\n \n-        Assert.assertArrayEquals(new String[] { value.getString(0) },\n+        Assert.assertArrayEquals(new String[] { value.get(0).textValue() },\n                 component.varArg);\n     }\n \n     @Test\n     public void nullValueAreAcceptedForPrimitive() {\n-        JsonArray array = Json.createArray();\n-        array.set(0, Json.createNull());\n+        ArrayNode array = JacksonUtils.createArrayNode();\n+        array.add(JacksonUtils.nullNode());\n         MethodWithParameters component = new MethodWithParameters();\n         component.intArg = -1;\n         component.booleanArg = true;\n@@ -473,14 +475,16 @@ public void nullValueAreAcceptedForPrimitive() {\n     public void noClientCallableMethodException() {\n         ComponentWithNoClientCallableMethod component = new ComponentWithNoClientCallableMethod();\n         PublishedServerEventHandlerRpcHandler.invokeMethod(component,\n-                component.getClass(), \"operation\", Json.createArray(), -1);\n+                component.getClass(), \"operation\",\n+                JacksonUtils.createArrayNode(), -1);\n     }\n \n     @Test(expected = IllegalStateException.class)\n     public void noMethodException() {\n         ComponentWithNoClientCallableMethod component = new ComponentWithNoClientCallableMethod();\n         PublishedServerEventHandlerRpcHandler.invokeMethod(component,\n-                component.getClass(), \"operation1\", Json.createArray(), -1);\n+                component.getClass(), \"operation1\",\n+                JacksonUtils.createArrayNode(), -1);\n     }\n \n     @Test\n@@ -527,7 +531,7 @@ private void requestInvokeMethod(Component component) {\n     }\n \n     private void requestInvokeMethod(Component component, String method) {\n-        JsonObject json = Json.createObject();\n+        ObjectNode json = JacksonUtils.createObjectNode();\n         json.put(JsonConstants.RPC_TEMPLATE_EVENT_METHOD_NAME, method);\n \n         new PublishedServerEventHandlerRpcHandler()\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/ReturnChannelHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/ReturnChannelHandlerTest.java\nindex 7a3518e3c28..ccced296e4e 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/ReturnChannelHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/ReturnChannelHandlerTest.java\n@@ -17,6 +17,9 @@\n \n import java.util.concurrent.atomic.AtomicReference;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.junit.Assert;\n import org.junit.Test;\n \n@@ -24,6 +27,7 @@\n import com.vaadin.flow.component.Tag;\n import com.vaadin.flow.dom.DisabledUpdateMode;\n import com.vaadin.flow.function.SerializableConsumer;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.internal.nodefeature.ElementChildrenList;\n import com.vaadin.flow.internal.nodefeature.ReturnChannelMap;\n@@ -32,21 +36,17 @@\n import com.vaadin.flow.shared.JsonConstants;\n import com.vaadin.tests.util.MockUI;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n-\n public class ReturnChannelHandlerTest {\n     private MockUI ui = new MockUI();\n \n-    private AtomicReference<JsonArray> observedArguments = new AtomicReference<>();\n-    private SerializableConsumer<JsonArray> observingConsumer = arguments -> {\n+    private AtomicReference<ArrayNode> observedArguments = new AtomicReference<>();\n+    private SerializableConsumer<ArrayNode> observingConsumer = arguments -> {\n         Assert.assertNotNull(\"Arguments should not be null\", arguments);\n         Assert.assertNull(\"There should be no previous arguments\",\n                 observedArguments.getAndSet(arguments));\n     };\n \n-    private JsonArray args = Json.createArray();\n+    private ArrayNode args = JacksonUtils.createArrayNode();\n \n     @Test\n     public void happyPath_everythingWorks() {\n@@ -157,17 +157,17 @@ private ReturnChannelRegistration registerUiChannel() {\n     }\n \n     private void handleMessage(int nodeId, int channelId) {\n-        JsonObject invocationJson = createInvocationJson(nodeId, channelId);\n+        JsonNode invocationJson = createInvocationJson(nodeId, channelId);\n \n         new ReturnChannelHandler().handle(ui, invocationJson);\n     }\n \n-    private JsonObject createInvocationJson(int stateNodeId, int channelId) {\n-        JsonObject invocationJson = Json.createObject();\n+    private JsonNode createInvocationJson(int stateNodeId, int channelId) {\n+        ObjectNode invocationJson = JacksonUtils.createObjectNode();\n \n         invocationJson.put(JsonConstants.RPC_NODE, stateNodeId);\n         invocationJson.put(JsonConstants.RPC_CHANNEL, channelId);\n-        invocationJson.put(JsonConstants.RPC_CHANNEL_ARGUMENTS, args);\n+        invocationJson.set(JsonConstants.RPC_CHANNEL_ARGUMENTS, args);\n \n         return invocationJson;\n     }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/StringToNumberDecoderTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/StringToNumberDecoderTest.java\nindex 8975514811f..fb47f84f50b 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/StringToNumberDecoderTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/StringToNumberDecoderTest.java\n@@ -20,7 +20,7 @@\n import org.junit.Assert;\n import org.junit.Test;\n \n-import elemental.json.Json;\n+import com.vaadin.flow.internal.JacksonUtils;\n \n public class StringToNumberDecoderTest {\n \n@@ -28,38 +28,40 @@ public class StringToNumberDecoderTest {\n \n     @Test\n     public void isApplicable_applicableToStringAndNumber() {\n-        Assert.assertTrue(\n-                decoder.isApplicable(Json.create(\"foo\"), Number.class));\n+        Assert.assertTrue(decoder.isApplicable(JacksonUtils.createNode(\"foo\"),\n+                Number.class));\n     }\n \n     @Test\n     public void isApplicable_notApplicableToBooleanAndNumber() {\n-        Assert.assertFalse(\n-                decoder.isApplicable(Json.create(true), Number.class));\n+        Assert.assertFalse(decoder.isApplicable(JacksonUtils.createNode(true),\n+                Number.class));\n     }\n \n     @Test\n     public void isApplicable_notApplicableToStringAndString() {\n-        Assert.assertFalse(\n-                decoder.isApplicable(Json.create(\"foo\"), String.class));\n+        Assert.assertFalse(decoder.isApplicable(JacksonUtils.createNode(\"foo\"),\n+                String.class));\n     }\n \n     @Test\n     public void isApplicable_notApplicableToStringAndAtomicInteger() {\n-        Assert.assertFalse(\n-                decoder.isApplicable(Json.create(\"foo\"), AtomicInteger.class));\n+        Assert.assertFalse(decoder.isApplicable(JacksonUtils.createNode(\"foo\"),\n+                AtomicInteger.class));\n     }\n \n     @Test\n     public void isApplicable_applicableToStringAndLong() {\n-        Assert.assertTrue(decoder.isApplicable(Json.create(\"foo\"), Long.class));\n+        Assert.assertTrue(decoder.isApplicable(JacksonUtils.createNode(\"foo\"),\n+                Long.class));\n     }\n \n     @Test\n     public void stringToInteger_convertableString_valueIsConverted()\n             throws RpcDecodeException {\n         Integer expected = 37;\n-        Integer value = decoder.decode(Json.create(String.valueOf(expected)),\n+        Integer value = decoder.decode(\n+                JacksonUtils.createNode(String.valueOf(expected)),\n                 Integer.class);\n         Assert.assertEquals(expected, value);\n     }\n@@ -67,19 +69,19 @@ public void stringToInteger_convertableString_valueIsConverted()\n     @Test(expected = RpcDecodeException.class)\n     public void stringToInteger_nonConvertableString_exceptionIsThrown()\n             throws RpcDecodeException {\n-        decoder.decode(Json.create(\"abc\"), Integer.class);\n+        decoder.decode(JacksonUtils.createNode(\"abc\"), Integer.class);\n     }\n \n     @Test(expected = RpcDecodeException.class)\n     public void stringToInteger_doubleString_exceptionIsThrown()\n             throws RpcDecodeException {\n-        decoder.decode(Json.create(\"4.2\"), Integer.class);\n+        decoder.decode(JacksonUtils.createNode(\"4.2\"), Integer.class);\n     }\n \n     @Test(expected = RpcDecodeException.class)\n     public void stringToInteger_longString_exceptionIsThrown()\n             throws RpcDecodeException {\n-        decoder.decode(Json.create(String.valueOf(Long.MAX_VALUE)),\n+        decoder.decode(JacksonUtils.createNode(String.valueOf(Long.MAX_VALUE)),\n                 Integer.class);\n     }\n \n@@ -87,104 +89,106 @@ public void stringToInteger_longString_exceptionIsThrown()\n     public void stringToLong_convertableString_valueIsConverted()\n             throws RpcDecodeException {\n         Long expected = 37l;\n-        Long value = decoder.decode(Json.create(String.valueOf(expected)),\n-                Long.class);\n+        Long value = decoder.decode(\n+                JacksonUtils.createNode(String.valueOf(expected)), Long.class);\n         Assert.assertEquals(expected, value);\n     }\n \n     @Test(expected = RpcDecodeException.class)\n     public void stringToLong_nonConvertableString_exceptionIsThrown()\n             throws RpcDecodeException {\n-        decoder.decode(Json.create(\"abc\"), Long.class);\n+        decoder.decode(JacksonUtils.createNode(\"abc\"), Long.class);\n     }\n \n     @Test(expected = RpcDecodeException.class)\n     public void stringToLong_doubleString_exceptionIsThrown()\n             throws RpcDecodeException {\n-        decoder.decode(Json.create(\"4.2\"), Long.class);\n+        decoder.decode(JacksonUtils.createNode(\"4.2\"), Long.class);\n     }\n \n     @Test\n     public void stringToShort_convertableString_valueIsConverted()\n             throws RpcDecodeException {\n         Short expected = 37;\n-        Short value = decoder.decode(Json.create(String.valueOf(expected)),\n-                Short.class);\n+        Short value = decoder.decode(\n+                JacksonUtils.createNode(String.valueOf(expected)), Short.class);\n         Assert.assertEquals(expected, value);\n     }\n \n     @Test(expected = RpcDecodeException.class)\n     public void stringToShort_nonConvertableString_exceptionIsThrown()\n             throws RpcDecodeException {\n-        decoder.decode(Json.create(\"abc\"), Short.class);\n+        decoder.decode(JacksonUtils.createNode(\"abc\"), Short.class);\n     }\n \n     @Test(expected = RpcDecodeException.class)\n     public void stringToShort_intString_exceptionIsThrown()\n             throws RpcDecodeException {\n-        decoder.decode(Json.create(Integer.MAX_VALUE), Short.class);\n+        decoder.decode(JacksonUtils.createNode(Integer.MAX_VALUE), Short.class);\n     }\n \n     @Test(expected = RpcDecodeException.class)\n     public void stringToShort_doubleString_exceptionIsThrown()\n             throws RpcDecodeException {\n-        decoder.decode(Json.create(\"4.2\"), Short.class);\n+        decoder.decode(JacksonUtils.createNode(\"4.2\"), Short.class);\n     }\n \n     @Test\n     public void stringToByte_convertableString_valueIsConverted()\n             throws RpcDecodeException {\n         Byte expected = 37;\n-        Byte value = decoder.decode(Json.create(String.valueOf(expected)),\n-                Byte.class);\n+        Byte value = decoder.decode(\n+                JacksonUtils.createNode(String.valueOf(expected)), Byte.class);\n         Assert.assertEquals(expected, value);\n     }\n \n     @Test(expected = RpcDecodeException.class)\n     public void stringToByte_nonConvertableString_exceptionIsThrown()\n             throws RpcDecodeException {\n-        decoder.decode(Json.create(\"abc\"), Byte.class);\n+        decoder.decode(JacksonUtils.createNode(\"abc\"), Byte.class);\n     }\n \n     @Test(expected = RpcDecodeException.class)\n     public void stringToByte_intString_exceptionIsThrown()\n             throws RpcDecodeException {\n-        decoder.decode(Json.create(Short.MAX_VALUE), Byte.class);\n+        decoder.decode(JacksonUtils.createNode(Short.MAX_VALUE), Byte.class);\n     }\n \n     @Test(expected = RpcDecodeException.class)\n     public void stringToByte_doubleString_exceptionIsThrown()\n             throws RpcDecodeException {\n-        decoder.decode(Json.create(\"4.2\"), Byte.class);\n+        decoder.decode(JacksonUtils.createNode(\"4.2\"), Byte.class);\n     }\n \n     @Test\n     public void stringToFloat_convertableString_valueIsConverted()\n             throws RpcDecodeException {\n         Float expected = 37.72f;\n-        Float value = decoder.decode(Json.create(String.valueOf(expected)),\n-                Float.class);\n+        Float value = decoder.decode(\n+                JacksonUtils.createNode(String.valueOf(expected)), Float.class);\n         Assert.assertEquals(expected, value);\n     }\n \n     @Test(expected = RpcDecodeException.class)\n     public void stringToFloat_doubleString_exceptionIsThrown()\n             throws RpcDecodeException {\n-        decoder.decode(Json.create(String.valueOf(Double.MIN_NORMAL)),\n+        decoder.decode(\n+                JacksonUtils.createNode(String.valueOf(Double.MIN_NORMAL)),\n                 Float.class);\n     }\n \n     @Test(expected = RpcDecodeException.class)\n     public void stringToFloat_nonConvertableString_exceptionIsThrown()\n             throws RpcDecodeException {\n-        decoder.decode(Json.create(\"abc\"), Float.class);\n+        decoder.decode(JacksonUtils.createNode(\"abc\"), Float.class);\n     }\n \n     @Test\n     public void stringToDouble_convertableString_valueIsConverted()\n             throws RpcDecodeException {\n         Double expected = 823.6349d;\n-        Double value = decoder.decode(Json.create(String.valueOf(expected)),\n+        Double value = decoder.decode(\n+                JacksonUtils.createNode(String.valueOf(expected)),\n                 Double.class);\n         Assert.assertEquals(expected, value);\n     }\n@@ -195,7 +199,8 @@ public void stringToDouble_minDoubleString_valueIsConverted()\n         // the value is represented in the specific notation. Check that it's\n         // not a problem\n         Double expected = Double.MIN_NORMAL;\n-        Double value = decoder.decode(Json.create(String.valueOf(expected)),\n+        Double value = decoder.decode(\n+                JacksonUtils.createNode(String.valueOf(expected)),\n                 Double.class);\n         Assert.assertEquals(expected, value);\n     }\n@@ -203,14 +208,15 @@ public void stringToDouble_minDoubleString_valueIsConverted()\n     @Test(expected = RpcDecodeException.class)\n     public void stringToDoublet_nonConvertableString_exceptionIsThrown()\n             throws RpcDecodeException {\n-        decoder.decode(Json.create(\"abc\"), Double.class);\n+        decoder.decode(JacksonUtils.createNode(\"abc\"), Double.class);\n     }\n \n     @Test\n     public void stringToNumber_convertableString_valueIsConverted()\n             throws RpcDecodeException {\n         Double expected = 823.6349d;\n-        Number value = decoder.decode(Json.create(String.valueOf(expected)),\n+        Number value = decoder.decode(\n+                JacksonUtils.createNode(String.valueOf(expected)),\n                 Number.class);\n         Assert.assertEquals(expected, value);\n     }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/startup/LookupServletContainerInitializerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/startup/LookupServletContainerInitializerTest.java\nindex 2a0c1570373..0d01bb399e3 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/startup/LookupServletContainerInitializerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/startup/LookupServletContainerInitializerTest.java\n@@ -15,6 +15,7 @@\n  */\n package com.vaadin.flow.server.startup;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import jakarta.servlet.ServletContext;\n import jakarta.servlet.ServletException;\n \n@@ -64,6 +65,18 @@ public Object getTemplateItem(Component template, JsonObject argValue,\n             return null;\n         }\n \n+        @Override\n+        public boolean isTemplateModelValue(Component instance,\n+                JsonNode argValue, Class<?> convertedType) {\n+            return false;\n+        }\n+\n+        @Override\n+        public Object getTemplateItem(Component template, JsonNode argValue,\n+                Type convertedType) {\n+            return null;\n+        }\n+\n     }\n \n     public static class TestApplicationConfigurationFactory\n\ndiff --git a/flow-tests/test-embedding/embedding-test-assets/src/main/java/com/vaadin/flow/webcomponent/PropertyUpdateComponent.java b/flow-tests/test-embedding/embedding-test-assets/src/main/java/com/vaadin/flow/webcomponent/PropertyUpdateComponent.java\nindex 42e8ecc8cc1..c9d748eddae 100644\n--- a/flow-tests/test-embedding/embedding-test-assets/src/main/java/com/vaadin/flow/webcomponent/PropertyUpdateComponent.java\n+++ b/flow-tests/test-embedding/embedding-test-assets/src/main/java/com/vaadin/flow/webcomponent/PropertyUpdateComponent.java\n@@ -19,13 +19,12 @@\n import java.util.HashSet;\n import java.util.Set;\n \n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n import com.vaadin.flow.component.Tag;\n import com.vaadin.flow.component.html.Div;\n import com.vaadin.flow.component.html.NativeButton;\n-\n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-import elemental.json.JsonValue;\n+import com.vaadin.flow.internal.JacksonUtils;\n \n @Tag(\"click-counter\")\n public class PropertyUpdateComponent extends Div {\n@@ -52,8 +51,8 @@ private void publishNumber() {\n                 numberListener -> numberListener.handleNumber(clickCounter));\n     }\n \n-    public JsonValue getNumberJson() {\n-        JsonObject json = Json.createObject();\n+    public ObjectNode getNumberJson() {\n+        ObjectNode json = JacksonUtils.createObjectNode();\n         json.put(\"counter\", clickCounter);\n         return json;\n     }\n\ndiff --git a/flow-tests/test-embedding/embedding-test-assets/src/main/java/com/vaadin/flow/webcomponent/PropertyUpdateExporter.java b/flow-tests/test-embedding/embedding-test-assets/src/main/java/com/vaadin/flow/webcomponent/PropertyUpdateExporter.java\nindex 08ac06f2f59..b39c5b67b8d 100644\n--- a/flow-tests/test-embedding/embedding-test-assets/src/main/java/com/vaadin/flow/webcomponent/PropertyUpdateExporter.java\n+++ b/flow-tests/test-embedding/embedding-test-assets/src/main/java/com/vaadin/flow/webcomponent/PropertyUpdateExporter.java\n@@ -16,24 +16,30 @@\n \n package com.vaadin.flow.webcomponent;\n \n+import java.io.Serializable;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.ValueNode;\n+\n import com.vaadin.flow.component.WebComponentExporter;\n import com.vaadin.flow.component.webcomponent.PropertyConfiguration;\n import com.vaadin.flow.component.webcomponent.WebComponent;\n-\n-import elemental.json.Json;\n-import elemental.json.JsonValue;\n+import com.vaadin.flow.internal.JacksonUtils;\n \n public class PropertyUpdateExporter\n         extends WebComponentExporter<PropertyUpdateComponent> {\n \n     private PropertyConfiguration<PropertyUpdateComponent, Integer> property;\n-    private PropertyConfiguration<PropertyUpdateComponent, JsonValue> jsonProperty;\n+    private PropertyConfiguration<PropertyUpdateComponent, ObjectNode> jsonProperty;\n \n     public PropertyUpdateExporter() {\n         super(\"property-update\");\n \n+        ObjectNode json = JacksonUtils.createObjectNode();\n+        json.put(\"counter\", 0);\n+\n         property = addProperty(\"clicks\", 0);\n-        jsonProperty = addProperty(\"clicksJson\", Json.createNull());\n+        jsonProperty = addProperty(\"clicksJson\", json);\n     }\n \n     @Override\n\ndiff --git a/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/ReturnChannelView.java b/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/ReturnChannelView.java\nindex bab7a6602e3..675b48cc55d 100644\n--- a/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/ReturnChannelView.java\n+++ b/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/ReturnChannelView.java\n@@ -31,7 +31,7 @@ public ReturnChannelView() {\n         ReturnChannelRegistration channel = button.getNode()\n                 .getFeature(ReturnChannelMap.class)\n                 .registerChannel(arguments -> button.setText(\n-                        \"Click registered: \" + arguments.getString(0)));\n+                        \"Click registered: \" + arguments.get(0).textValue()));\n \n         button.executeJs(\n                 \"this.addEventListener('click', function() { $0('hello') })\",\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20973",
    "pr_id": 20973,
    "issue_id": 20741,
    "repo": "vaadin/flow",
    "problem_statement": "Use Jackson for public API and implementation instead of Elemental JSON\n### Describe your motivation\n\nJackson library (`com.fasterxml.jackson`) is more popular than Elemental JSON (`elemental.json`), thus Vaadin should better use it in public API.\n\n### Describe the solution you'd like\n\n0. Analyse and list the usage of Elemental in Flow: how many publicly using cases do we have and how many are used internally. I expect the main usage in `Element` class, but there may be more, e.g. in util classes.\n1. Add an adapter code that converts Jackson to/from Elemental, if it's problematic to replace it in implementation right away, else go to step 2.\n2. Change Flow internal implementation to use Jackson\n3. Add same public methods found in (0), but that use Jackson for arguments and return values\n4. Deprecate existing public method with Elemental\n5. Remove Elemental variants in next major version.\n",
    "issue_word_count": 151,
    "test_files_count": 14,
    "non_test_files_count": 23,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java",
      "flow-server/src/main/java/com/vaadin/flow/server/BootstrapHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleUtils.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleValidationUtil.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/CssBundler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/ExclusionFilter.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendPluginsUtil.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendUtils.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/GenerateMainImports.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/Options.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGeneratePackageJson.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateReactFiles.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateTsConfig.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallFrontendBuildPlugins.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskPrepareProdBundle.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunNpmInstall.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdatePackages.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/ThemeUtils.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/ThemeValidationUtil.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonConverter.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonFilter.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/AbstractNodeUpdatePackagesTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/BundleUtilsTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/BundleValidationTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/CssBundlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdatePackagesNpmVersionLockingTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskCopyFrontendFilesTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskInstallFrontendBuildPluginsTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunNpmInstallTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunPnpmInstallTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdatePackagesNpmTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/ThemeValidationUtilTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonConverterTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonFilterTest.java",
      "vaadin-dev-server/src/main/java/com/vaadin/base/devserver/ThemeLiveUpdater.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/AbstractNodeUpdatePackagesTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/BundleUtilsTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/BundleValidationTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/CssBundlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdatePackagesNpmVersionLockingTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskCopyFrontendFilesTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskInstallFrontendBuildPluginsTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunNpmInstallTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunPnpmInstallTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdatePackagesNpmTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/ThemeValidationUtilTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonConverterTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonFilterTest.java"
    ],
    "base_commit": "309d431f22959cde0fbfbccdc7df8f2634c0af21",
    "head_commit": "a408085e21cda3e5959b5b787245d9ed251a3e0f",
    "repo_url": "https://github.com/vaadin/flow/pull/20973",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20973",
    "dockerfile": "",
    "pr_merged_at": "2025-02-13T07:14:07.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java b/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\nindex 3b742ac5460..b4d9dc34be0 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\n@@ -20,7 +20,6 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.EnumSet;\n-import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n@@ -85,6 +84,28 @@ public static ArrayNode createArrayNode() {\n         return objectMapper.createArrayNode();\n     }\n \n+    /**\n+     * Read Json string to JsonNode.\n+     *\n+     * @return JsonNode representation of given json string\n+     */\n+    public static ObjectNode readTree(String json) {\n+        try {\n+            return (ObjectNode) objectMapper.readTree(json);\n+        } catch (JsonProcessingException e) {\n+            throw new JsonDecodingException(\"Could not parse json content\", e);\n+        }\n+    }\n+\n+    /**\n+     * Create a JsonNode from value.\n+     *\n+     * @return JsonNode for given value content\n+     */\n+    public static JsonNode createNode(Object value) {\n+        return objectMapper.valueToTree(value);\n+    }\n+\n     /**\n      * Collects a stream of JSON values to a JSON array.\n      *\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/BootstrapHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/BootstrapHandler.java\nindex 7c5c1cd1869..9d905612e5b 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/BootstrapHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/BootstrapHandler.java\n@@ -48,6 +48,7 @@\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.jsoup.Jsoup;\n import org.jsoup.nodes.DataNode;\n import org.jsoup.nodes.Document;\n@@ -1661,8 +1662,8 @@ private static Element getStyleTag(String themeName, String fileName,\n                 File stylesCss = new File(\n                         ThemeUtils.getThemeFolder(frontendDirectory, themeName),\n                         fileName);\n-                JsonObject themeJson = ThemeUtils\n-                        .getThemeJson(themeName, config).orElse(null);\n+                JsonNode themeJson = ThemeUtils.getThemeJson(themeName, config)\n+                        .orElse(null);\n \n                 // Inline CSS into style tag to have hot module reload feature\n                 element.appendChild(new DataNode(CssBundler.inlineImports(\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleUtils.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleUtils.java\nindex 3f9f9c3f820..ecc77a1df2b 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleUtils.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleUtils.java\n@@ -25,19 +25,18 @@\n import java.util.List;\n import java.util.Set;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StringUtil;\n import com.vaadin.flow.server.Constants;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n-\n import static com.vaadin.flow.server.Constants.DEV_BUNDLE_JAR_PATH;\n \n public final class BundleUtils {\n@@ -53,15 +52,15 @@ private BundleUtils() {\n      * @return the bundle imports as a set\n      */\n     public static Set<String> loadBundleImports() {\n-        JsonObject statsJson = loadStatsJson();\n-        if (!statsJson.hasKey(\"bundleImports\")) {\n+        JsonNode statsJson = loadStatsJson();\n+        if (!statsJson.has(\"bundleImports\")) {\n             return null;\n         }\n \n         Set<String> bundledImports = new HashSet<>();\n-        JsonArray bundleImports = statsJson.getArray(\"bundleImports\");\n-        for (int i = 0; i < bundleImports.length(); i++) {\n-            String jsImport = bundleImports.getString(i);\n+        JsonNode bundleImports = statsJson.get(\"bundleImports\");\n+        for (int i = 0; i < bundleImports.size(); i++) {\n+            String jsImport = bundleImports.get(i).textValue();\n             bundledImports.add(jsImport);\n             bundledImports.add(jsImport.replace(\"/theme/lumo/\", \"/src/\"));\n             bundledImports.add(jsImport.replace(\"/theme/material/\", \"/src/\"));\n@@ -83,19 +82,19 @@ public static Set<String> loadBundleImports() {\n      *\n      * @return the stats json as a json object\n      */\n-    static JsonObject loadStatsJson() {\n+    static ObjectNode loadStatsJson() {\n         URL statsUrl = BundleUtils.class.getClassLoader()\n                 .getResource(\"META-INF/VAADIN/config/stats.json\");\n         if (statsUrl == null) {\n-            return Json.createObject();\n+            return JacksonUtils.createObjectNode();\n         }\n         try {\n-            return Json\n-                    .parse(IOUtils.toString(statsUrl, StandardCharsets.UTF_8));\n+            return JacksonUtils.readTree(\n+                    IOUtils.toString(statsUrl, StandardCharsets.UTF_8));\n         } catch (IOException e) {\n             getLogger().warn(\n                     \"Unable to parse META-INF/VAADIN/config/stats.json\", e);\n-            return Json.createObject();\n+            return JacksonUtils.createObjectNode();\n         }\n     }\n \n@@ -146,8 +145,8 @@ public static String getChunkHash(List<String> chunkLines) {\n      *         <code>false</code> otherwise\n      */\n     public static boolean isPreCompiledProductionBundle() {\n-        JsonObject stats = loadStatsJson();\n-        return stats.hasKey(\"pre-compiled\");\n+        JsonNode stats = loadStatsJson();\n+        return stats.has(\"pre-compiled\");\n     }\n \n     private static Logger getLogger() {\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleValidationUtil.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleValidationUtil.java\nindex b0cf7420eb3..f273961d6b8 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleValidationUtil.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleValidationUtil.java\n@@ -17,6 +17,9 @@\n import java.util.Set;\n import java.util.stream.Collectors;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.FileUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -24,6 +27,7 @@\n import com.vaadin.flow.component.Component;\n import com.vaadin.flow.component.WebComponentExporter;\n import com.vaadin.flow.component.WebComponentExporterFactory;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StringUtil;\n import com.vaadin.flow.internal.UsageStatistics;\n import com.vaadin.flow.server.Constants;\n@@ -34,10 +38,6 @@\n import com.vaadin.flow.server.webcomponent.WebComponentExporterTagExtractor;\n import com.vaadin.flow.server.webcomponent.WebComponentExporterUtils;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n-\n import static com.vaadin.flow.server.Constants.DEV_BUNDLE_JAR_PATH;\n \n /**\n@@ -204,8 +204,8 @@ private static boolean needsBuildInternal(Options options,\n             FrontendDependenciesScanner frontendDependencies,\n             String statsJsonContent) throws IOException {\n \n-        JsonObject packageJson = getPackageJson(options, frontendDependencies);\n-        JsonObject statsJson = Json.parse(statsJsonContent);\n+        JsonNode packageJson = getPackageJson(options, frontendDependencies);\n+        JsonNode statsJson = JacksonUtils.readTree(statsJsonContent);\n \n         // Get scanned @NpmPackage annotations\n         final Map<String, String> npmPackages = frontendDependencies\n@@ -230,7 +230,7 @@ private static boolean needsBuildInternal(Options options,\n         }\n         // index.html hash has already been checked, if needed.\n         // removing it from hashes map to prevent other unnecessary checks\n-        statsJson.getObject(FRONTEND_HASHES_STATS_KEY)\n+        ((ObjectNode) statsJson.get(FRONTEND_HASHES_STATS_KEY))\n                 .remove(FrontendUtils.INDEX_HTML);\n \n         if (!BundleValidationUtil.frontendImportsFound(statsJson, options,\n@@ -287,16 +287,16 @@ public static boolean hasJarBundle(String jarPath, ClassFinder finder) {\n      *            the task options\n      * @param frontendDependencies\n      *            frontend dependency scanner\n-     * @return package.json content as JsonObject\n+     * @return package.json content as JsonNode\n      */\n-    public static JsonObject getPackageJson(Options options,\n+    public static JsonNode getPackageJson(Options options,\n             FrontendDependenciesScanner frontendDependencies) {\n         File packageJsonFile = new File(options.getNpmFolder(), \"package.json\");\n \n         if (packageJsonFile.exists()) {\n             try {\n-                final JsonObject packageJson = Json\n-                        .parse(FileUtils.readFileToString(packageJsonFile,\n+                final ObjectNode packageJson = JacksonUtils\n+                        .readTree(FileUtils.readFileToString(packageJsonFile,\n                                 StandardCharsets.UTF_8));\n                 cleanOldPlatformDependencies(packageJson);\n                 return getDefaultPackageJson(options, frontendDependencies,\n@@ -310,9 +310,9 @@ public static JsonObject getPackageJson(Options options,\n         return null;\n     }\n \n-    public static JsonObject getDefaultPackageJson(Options options,\n+    public static JsonNode getDefaultPackageJson(Options options,\n             FrontendDependenciesScanner frontendDependencies,\n-            JsonObject packageJson) {\n+            ObjectNode packageJson) {\n         NodeUpdater nodeUpdater = new NodeUpdater(frontendDependencies,\n                 options) {\n             @Override\n@@ -345,12 +345,13 @@ public void execute() {\n \n             final String hash = TaskUpdatePackages\n                     .generatePackageJsonHash(packageJson);\n-            packageJson.getObject(NodeUpdater.VAADIN_DEP_KEY)\n+            ((ObjectNode) packageJson.get(NodeUpdater.VAADIN_DEP_KEY))\n                     .put(NodeUpdater.HASH_KEY, hash);\n \n-            final JsonObject platformPinnedDependencies = nodeUpdater\n+            final JsonNode platformPinnedDependencies = nodeUpdater\n                     .getPlatformPinnedDependencies();\n-            for (String key : platformPinnedDependencies.keys()) {\n+            for (String key : JacksonUtils\n+                    .getKeys(platformPinnedDependencies)) {\n                 // need to double check that not overriding a scanned\n                 // dependency since add-ons should be able to downgrade\n                 // version through exclusion\n@@ -381,22 +382,23 @@ public void execute() {\n      * @param packageJson\n      *            content of the package.json content red from a file\n      */\n-    private static void cleanOldPlatformDependencies(JsonObject packageJson) {\n+    private static void cleanOldPlatformDependencies(JsonNode packageJson) {\n         if (packageJson == null\n                 || !hasFrameworkDependencyObjects(packageJson)) {\n             return;\n         }\n \n-        JsonObject dependencies = packageJson\n-                .getObject(NodeUpdater.DEPENDENCIES);\n-        JsonObject vaadinDependencies = packageJson\n-                .getObject(NodeUpdater.VAADIN_DEP_KEY)\n-                .getObject(NodeUpdater.DEPENDENCIES);\n+        ObjectNode dependencies = (ObjectNode) packageJson\n+                .get(NodeUpdater.DEPENDENCIES);\n+        JsonNode vaadinDependencies = packageJson\n+                .get(NodeUpdater.VAADIN_DEP_KEY).get(NodeUpdater.DEPENDENCIES);\n \n-        for (String vaadinDependency : vaadinDependencies.keys()) {\n-            String version = vaadinDependencies.getString(vaadinDependency);\n-            if (dependencies.hasKey(vaadinDependency) && version\n-                    .equals(dependencies.getString(vaadinDependency))) {\n+        for (String vaadinDependency : JacksonUtils\n+                .getKeys(vaadinDependencies)) {\n+            String version = vaadinDependencies.get(vaadinDependency)\n+                    .textValue();\n+            if (dependencies.has(vaadinDependency) && version\n+                    .equals(dependencies.get(vaadinDependency).textValue())) {\n                 dependencies.remove(vaadinDependency);\n                 getLogger().debug(\n                         \"Old Vaadin provided dependency '{}':'{}' has been removed from package.json\",\n@@ -418,8 +420,8 @@ private static void cleanOldPlatformDependencies(JsonObject packageJson) {\n      *            npm packages map\n      * @return {@code true} if up to date\n      */\n-    public static boolean hashAndBundleModulesEqual(JsonObject statsJson,\n-            JsonObject packageJson, Map<String, String> npmPackages) {\n+    public static boolean hashAndBundleModulesEqual(JsonNode statsJson,\n+            JsonNode packageJson, Map<String, String> npmPackages) {\n \n         String packageJsonHash = BundleValidationUtil\n                 .getPackageJsonHash(packageJson);\n@@ -432,8 +434,7 @@ public static boolean hashAndBundleModulesEqual(JsonObject statsJson,\n             return false;\n         }\n \n-        JsonObject bundleModules = statsJson\n-                .getObject(\"packageJsonDependencies\");\n+        JsonNode bundleModules = statsJson.get(\"packageJsonDependencies\");\n \n         if (bundleModules == null) {\n             getLogger().error(\n@@ -449,16 +450,17 @@ public static boolean hashAndBundleModulesEqual(JsonObject statsJson,\n             }\n         }\n \n-        JsonObject dependencies = packageJson.getObject(\"dependencies\");\n+        JsonNode dependencies = packageJson.get(\"dependencies\");\n \n-        List<String> dependenciesList = Arrays.stream(dependencies.keys())\n+        List<String> dependenciesList = JacksonUtils.getKeys(dependencies)\n+                .stream()\n                 // skip checking flow-frontend as it was used in previous\n                 // versions as an alias for ./target/flow-frontend\n                 .filter(pkg -> !\"@vaadin/flow-frontend\".equals(pkg))\n                 .collect(Collectors.toList());\n \n         List<String> missingFromBundle = dependenciesList.stream()\n-                .filter(pkg -> !bundleModules.hasKey(pkg))\n+                .filter(pkg -> !bundleModules.has(pkg))\n                 .collect(Collectors.toList());\n \n         if (!missingFromBundle.isEmpty()) {\n@@ -471,16 +473,17 @@ public static boolean hashAndBundleModulesEqual(JsonObject statsJson,\n \n         // We know here that all dependencies exist\n         missingFromBundle = dependenciesList.stream()\n-                .filter(pkg -> !versionAccepted(dependencies.getString(pkg),\n-                        bundleModules.getString(pkg)))\n+                .filter(pkg -> !versionAccepted(\n+                        dependencies.get(pkg).textValue(),\n+                        bundleModules.get(pkg).textValue()))\n                 .collect(Collectors.toList());\n \n         if (!missingFromBundle.isEmpty()) {\n             for (String pkg : missingFromBundle) {\n                 getLogger().info(\n                         \"Dependency {}:{} has the wrong version {} in the bundle\",\n-                        pkg, dependencies.getString(pkg),\n-                        bundleModules.getString(pkg));\n+                        pkg, dependencies.get(pkg).textValue(),\n+                        bundleModules.get(pkg).textValue());\n             }\n             return false;\n         }\n@@ -544,10 +547,11 @@ private static boolean versionAccepted(String expected, String actual) {\n      * @return {@code false} if all packages are found\n      */\n     private static boolean dependenciesContainsAllPackages(\n-            Map<String, String> npmPackages, JsonObject dependencies) {\n+            Map<String, String> npmPackages, JsonNode dependencies) {\n         final List<String> collect = npmPackages.keySet().stream()\n-                .filter(pkg -> !(dependencies.hasKey(pkg) && versionAccepted(\n-                        dependencies.getString(pkg), npmPackages.get(pkg))))\n+                .filter(pkg -> !(dependencies.has(pkg)\n+                        && versionAccepted(dependencies.get(pkg).textValue(),\n+                                npmPackages.get(pkg))))\n                 .collect(Collectors.toList());\n         if (!collect.isEmpty()) {\n             collect.forEach(dependency -> getLogger().info(\"Dependency \"\n@@ -557,7 +561,7 @@ private static boolean dependenciesContainsAllPackages(\n         return true;\n     }\n \n-    public static boolean exportedWebComponents(JsonObject statsJson,\n+    public static boolean exportedWebComponents(JsonNode statsJson,\n             ClassFinder finder) {\n         try {\n             Set<Class<?>> exporterRelatedClasses = new HashSet<>();\n@@ -571,8 +575,8 @@ public static boolean exportedWebComponents(JsonObject statsJson,\n                     .map(BundleValidationUtil::getTag)\n                     .collect(Collectors.toSet());\n \n-            JsonArray webComponentsInStats = statsJson\n-                    .getArray(\"webComponents\");\n+            ArrayNode webComponentsInStats = (ArrayNode) statsJson\n+                    .get(\"webComponents\");\n \n             if (webComponentsInStats == null) {\n                 if (!webComponents.isEmpty()) {\n@@ -585,9 +589,9 @@ public static boolean exportedWebComponents(JsonObject statsJson,\n                 return false;\n             } else {\n                 for (int index = 0; index < webComponentsInStats\n-                        .length(); index++) {\n-                    String webComponentInStats = webComponentsInStats\n-                            .getString(index);\n+                        .size(); index++) {\n+                    String webComponentInStats = webComponentsInStats.get(index)\n+                            .textValue();\n                     webComponents.remove(webComponentInStats);\n                 }\n             }\n@@ -615,7 +619,7 @@ private static String getTag(\n         return exporterTagExtractor.apply(factory);\n     }\n \n-    public static boolean frontendImportsFound(JsonObject statsJson,\n+    public static boolean frontendImportsFound(JsonNode statsJson,\n             Options options, FrontendDependenciesScanner frontendDependencies)\n             throws IOException {\n \n@@ -633,9 +637,9 @@ public static boolean frontendImportsFound(JsonObject statsJson,\n                         : importString)\n                 .collect(Collectors.toList());\n         LinkedHashSet<String> uniqueImports = new LinkedHashSet<>(imports);\n-        JsonArray statsBundle = statsJson.hasKey(\"bundleImports\")\n-                ? statsJson.getArray(\"bundleImports\")\n-                : Json.createArray();\n+        ArrayNode statsBundle = statsJson.has(\"bundleImports\")\n+                ? (ArrayNode) statsJson.get(\"bundleImports\")\n+                : JacksonUtils.createArrayNode();\n         final List<String> missingFromBundle = uniqueImports.stream().filter(\n                 importString -> !arrayContainsString(statsBundle, importString))\n                 .collect(Collectors.toList());\n@@ -664,8 +668,8 @@ public static boolean frontendImportsFound(JsonObject statsJson,\n                         FrontendUtils.FRONTEND_FOLDER_ALIAS.length()))\n                 .collect(Collectors.toList());\n \n-        final JsonObject frontendHashes = statsJson\n-                .getObject(FRONTEND_HASHES_STATS_KEY);\n+        final JsonNode frontendHashes = statsJson\n+                .get(FRONTEND_HASHES_STATS_KEY);\n         List<String> faultyContent = new ArrayList<>();\n \n         for (String jarImport : jarImports) {\n@@ -714,12 +718,12 @@ public static boolean frontendImportsFound(JsonObject statsJson,\n     }\n \n     private static boolean hasCustomIndexHtml(Options options,\n-            JsonObject statsJson) throws IOException {\n+            JsonNode statsJson) throws IOException {\n         File indexHtml = new File(options.getFrontendDirectory(),\n                 FrontendUtils.INDEX_HTML);\n         if (indexHtml.exists()) {\n-            final JsonObject frontendHashes = statsJson\n-                    .getObject(FRONTEND_HASHES_STATS_KEY);\n+            final JsonNode frontendHashes = statsJson\n+                    .get(FRONTEND_HASHES_STATS_KEY);\n             String frontendFileContent = FileUtils.readFileToString(indexHtml,\n                     StandardCharsets.UTF_8);\n             List<String> faultyContent = new ArrayList<>();\n@@ -735,15 +739,15 @@ private static boolean hasCustomIndexHtml(Options options,\n     }\n \n     private static boolean indexFileAddedOrDeleted(Options options,\n-            JsonObject frontendHashes) {\n+            JsonNode frontendHashes) {\n         Collection<String> indexFiles = Arrays.asList(FrontendUtils.INDEX_TS,\n                 FrontendUtils.INDEX_JS, FrontendUtils.INDEX_TSX);\n         for (String indexFile : indexFiles) {\n             File file = new File(options.getFrontendDirectory(), indexFile);\n-            if (file.exists() && !frontendHashes.hasKey(indexFile)) {\n+            if (file.exists() && !frontendHashes.has(indexFile)) {\n                 getLogger().info(\"Detected added {} file\", indexFile);\n                 return true;\n-            } else if (!file.exists() && frontendHashes.hasKey(indexFile)) {\n+            } else if (!file.exists() && frontendHashes.has(indexFile)) {\n                 getLogger().info(\"Detected deleted {} file\", indexFile);\n                 return true;\n             }\n@@ -753,17 +757,17 @@ private static boolean indexFileAddedOrDeleted(Options options,\n \n     private static Map<String, String> getRemainingImports(\n             List<String> jarImports, List<String> projectImports,\n-            JsonObject frontendHashes) {\n+            JsonNode frontendHashes) {\n         Map<String, String> remainingImportEntries = new HashMap<>();\n-        List<String> remainingKeys = new ArrayList<>(\n-                Arrays.asList(frontendHashes.keys()));\n+        List<String> remainingKeys = JacksonUtils.getKeys(frontendHashes);\n \n         remainingKeys.removeAll(jarImports);\n         remainingKeys.removeAll(projectImports);\n \n         if (!remainingKeys.isEmpty()) {\n             for (String key : remainingKeys) {\n-                remainingImportEntries.put(key, frontendHashes.getString(key));\n+                remainingImportEntries.put(key,\n+                        frontendHashes.get(key).textValue());\n             }\n             return remainingImportEntries;\n         }\n@@ -810,14 +814,14 @@ private static boolean importedFrontendFilesChanged(File frontendDirectory,\n         return false;\n     }\n \n-    private static void compareFrontendHashes(JsonObject frontendHashes,\n+    private static void compareFrontendHashes(JsonNode frontendHashes,\n             List<String> faultyContent, String frontendFilePath,\n             String frontendFileContent) {\n         final String contentHash = calculateHash(frontendFileContent);\n-        if (frontendHashes.hasKey(frontendFilePath) && !frontendHashes\n-                .getString(frontendFilePath).equals(contentHash)) {\n+        if (frontendHashes.has(frontendFilePath) && !frontendHashes\n+                .get(frontendFilePath).textValue().equals(contentHash)) {\n             faultyContent.add(frontendFilePath);\n-        } else if (!frontendHashes.hasKey(frontendFilePath)) {\n+        } else if (!frontendHashes.has(frontendFilePath)) {\n             getLogger().info(\"No hash info for '{}'\", frontendFilePath);\n             faultyContent.add(frontendFilePath);\n         }\n@@ -828,39 +832,39 @@ public static String calculateHash(String fileContent) {\n         return StringUtil.getHash(content, StandardCharsets.UTF_8);\n     }\n \n-    private static boolean arrayContainsString(JsonArray array, String string) {\n+    private static boolean arrayContainsString(ArrayNode array, String string) {\n         string = string.replace(\"Frontend/\", \"./\");\n-        for (int i = 0; i < array.length(); i++) {\n-            if (string.equals(array.getString(i).replace(\"Frontend/\", \"./\"))) {\n+        for (int i = 0; i < array.size(); i++) {\n+            if (string.equals(\n+                    array.get(i).textValue().replace(\"Frontend/\", \"./\"))) {\n                 return true;\n             }\n         }\n         return false;\n     }\n \n-    public static String getStatsHash(JsonObject statsJson) {\n-        if (statsJson.hasKey(\"packageJsonHash\")) {\n-            return statsJson.getString(\"packageJsonHash\");\n+    public static String getStatsHash(JsonNode statsJson) {\n+        if (statsJson.has(\"packageJsonHash\")) {\n+            return statsJson.get(\"packageJsonHash\").textValue();\n         }\n \n         return null;\n     }\n \n-    public static String getPackageJsonHash(JsonObject packageJson) {\n-        if (packageJson != null && packageJson.hasKey(\"vaadin\")\n-                && packageJson.getObject(\"vaadin\").hasKey(\"hash\")) {\n-            return packageJson.getObject(\"vaadin\").getString(\"hash\");\n+    public static String getPackageJsonHash(JsonNode packageJson) {\n+        if (packageJson != null && packageJson.has(\"vaadin\")\n+                && packageJson.get(\"vaadin\").has(\"hash\")) {\n+            return packageJson.get(\"vaadin\").get(\"hash\").textValue();\n         }\n \n         return null;\n     }\n \n-    private static boolean hasFrameworkDependencyObjects(\n-            JsonObject packageJson) {\n-        return packageJson.hasKey(NodeUpdater.VAADIN_DEP_KEY)\n-                && packageJson.getObject(NodeUpdater.VAADIN_DEP_KEY)\n-                        .hasKey(NodeUpdater.DEPENDENCIES)\n-                && packageJson.hasKey(NodeUpdater.DEPENDENCIES);\n+    private static boolean hasFrameworkDependencyObjects(JsonNode packageJson) {\n+        return packageJson.has(NodeUpdater.VAADIN_DEP_KEY)\n+                && packageJson.get(NodeUpdater.VAADIN_DEP_KEY)\n+                        .has(NodeUpdater.DEPENDENCIES)\n+                && packageJson.has(NodeUpdater.DEPENDENCIES);\n     }\n \n     public static void logChangedFiles(List<String> frontendFiles,\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/CssBundler.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/CssBundler.java\nindex 759c42cf1ed..95423356a85 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/CssBundler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/CssBundler.java\n@@ -12,11 +12,12 @@\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.apache.commons.io.FileUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import elemental.json.JsonObject;\n+import com.vaadin.flow.internal.JacksonUtils;\n \n /**\n  * Utility methods to handle application theme CSS content.\n@@ -86,7 +87,7 @@ public class CssBundler {\n      * @throws IOException\n      *             if filesystem resources can not be read.\n      * @deprecated this method does not resolve theme assets, use\n-     *             {@link #inlineImports(File, File, JsonObject)} instead.\n+     *             {@link #inlineImports(File, File, JsonNode)} instead.\n      */\n     @Deprecated\n     public static String inlineImports(File themeFolder, File cssFile)\n@@ -120,7 +121,7 @@ public static String inlineImports(File themeFolder, File cssFile)\n      *             if filesystem resources can not be read.\n      */\n     public static String inlineImports(File themeFolder, File cssFile,\n-            JsonObject themeJson) throws IOException {\n+            JsonNode themeJson) throws IOException {\n         return inlineImports(themeFolder, cssFile,\n                 getThemeAssetsAliases(themeJson));\n     }\n@@ -247,16 +248,16 @@ private static boolean isPotentialThemeAsset(File themeFolder,\n         return potentialAsset;\n     }\n \n-    private static Set<String> getThemeAssetsAliases(JsonObject themeJson) {\n-        JsonObject assets = themeJson != null && themeJson.hasKey(\"assets\")\n-                ? themeJson.getObject(\"assets\")\n+    private static Set<String> getThemeAssetsAliases(JsonNode themeJson) {\n+        JsonNode assets = themeJson != null && themeJson.has(\"assets\")\n+                ? themeJson.get(\"assets\")\n                 : null;\n         Set<String> aliases = new HashSet<>();\n         if (assets != null) {\n-            for (String nmpPackage : assets.keys()) {\n-                JsonObject packageAliases = assets.getObject(nmpPackage);\n-                for (String path : packageAliases.keys()) {\n-                    aliases.add(packageAliases.getString(path) + \"/\");\n+            for (String nmpPackage : JacksonUtils.getKeys(assets)) {\n+                JsonNode packageAliases = assets.get(nmpPackage);\n+                for (String path : JacksonUtils.getKeys(packageAliases)) {\n+                    aliases.add(packageAliases.get(path).textValue() + \"/\");\n                 }\n             }\n         }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/ExclusionFilter.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/ExclusionFilter.java\nindex dc126dc97eb..16e8e5c511e 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/ExclusionFilter.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/ExclusionFilter.java\n@@ -29,9 +29,9 @@\n \n import org.apache.commons.io.IOUtils;\n \n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.Constants;\n import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n-import elemental.json.Json;\n \n /**\n  * Excludes dependencies listed in an \"exclusions\" array of\n@@ -111,7 +111,7 @@ private List<String> getExclusions() throws IOException {\n     private Set<String> getExclusions(URL versionsResource) throws IOException {\n         try (InputStream content = versionsResource.openStream()) {\n             VersionsJsonConverter convert = new VersionsJsonConverter(\n-                    Json.parse(\n+                    JacksonUtils.readTree(\n                             IOUtils.toString(content, StandardCharsets.UTF_8)),\n                     reactEnabled, excludeWebComponentNpmPackages);\n             return convert.getExclusions();\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendPluginsUtil.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendPluginsUtil.java\nindex 85eb7dd1efa..cc850488896 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendPluginsUtil.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendPluginsUtil.java\n@@ -24,11 +24,10 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.apache.commons.io.FileUtils;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n+import com.vaadin.flow.internal.JacksonUtils;\n \n import static java.nio.charset.StandardCharsets.UTF_8;\n \n@@ -56,16 +55,16 @@ private FrontendPluginsUtil() {\n      */\n     protected static List<String> getPlugins() {\n         try {\n-            final JsonObject jsonFile = getJsonFile(\"plugins/plugins.json\");\n+            final JsonNode jsonFile = getJsonFile(\"plugins/plugins.json\");\n             if (jsonFile == null) {\n                 throw new IllegalStateException(\n                         \"Couldn't locate plugins/plugins.json\");\n             }\n \n-            final JsonArray plugins = jsonFile.getArray(\"plugins\");\n-            List<String> pluginsToInstall = new ArrayList<>(plugins.length());\n-            for (int i = 0; i < plugins.length(); i++) {\n-                pluginsToInstall.add(plugins.getString(i));\n+            final JsonNode plugins = jsonFile.get(\"plugins\");\n+            List<String> pluginsToInstall = new ArrayList<>(plugins.size());\n+            for (int i = 0; i < plugins.size(); i++) {\n+                pluginsToInstall.add(plugins.get(i).textValue());\n             }\n             return pluginsToInstall;\n         } catch (IOException ioe) {\n@@ -83,7 +82,7 @@ protected static List<String> getPlugins() {\n      * @throws IOException\n      *             thrown for problems reading file\n      */\n-    protected static JsonObject getJsonFile(String jsonFilePath)\n+    protected static JsonNode getJsonFile(String jsonFilePath)\n             throws IOException {\n         final URL urlResource = getResourceUrl(jsonFilePath);\n         if (urlResource == null) {\n@@ -103,7 +102,7 @@ protected static JsonObject getJsonFile(String jsonFilePath)\n         } else {\n             jsonString = FileUtils.readFileToString(jsonFile, UTF_8);\n         }\n-        return Json.parse(jsonString);\n+        return JacksonUtils.readTree(jsonString);\n     }\n \n     /**\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendUtils.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendUtils.java\nindex bac0f034278..9797292cb43 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendUtils.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendUtils.java\n@@ -39,6 +39,8 @@\n import java.util.regex.Pattern;\n import java.util.stream.Stream;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import jakarta.servlet.ServletContext;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n@@ -60,7 +62,6 @@\n import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n import com.vaadin.flow.internal.menu.MenuRegistry;\n \n-import elemental.json.JsonObject;\n import static com.vaadin.flow.server.Constants.COMPATIBILITY_RESOURCES_FRONTEND_DEFAULT;\n import static com.vaadin.flow.server.Constants.RESOURCES_FRONTEND_DEFAULT;\n import static com.vaadin.flow.server.Constants.VAADIN_WEBAPP_RESOURCES;\n@@ -1034,13 +1035,13 @@ public static String commandToString(String baseDir, List<String> command) {\n      *            origin of the version (like a file), used in error message\n      * @return the frontend version the package or {@code null}\n      */\n-    public static FrontendVersion getPackageVersionFromJson(\n-            JsonObject sourceJson, String pkg, String versionOrigin) {\n-        if (!sourceJson.hasKey(pkg)) {\n+    public static FrontendVersion getPackageVersionFromJson(JsonNode sourceJson,\n+            String pkg, String versionOrigin) {\n+        if (!sourceJson.has(pkg)) {\n             return null;\n         }\n         try {\n-            final String versionString = sourceJson.getString(pkg);\n+            final String versionString = sourceJson.get(pkg).textValue();\n             return new FrontendVersion(pkg, versionString);\n         } catch (ClassCastException classCastException) { // NOSONAR\n             LoggerFactory.getLogger(FrontendVersion.class).warn(\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/GenerateMainImports.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/GenerateMainImports.java\nindex 5550bf1f135..ebffc5c7677 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/GenerateMainImports.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/GenerateMainImports.java\n@@ -21,16 +21,15 @@\n import java.util.List;\n import java.util.Map;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n import org.slf4j.Logger;\n import org.slf4j.helpers.NOPLogger;\n \n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.frontend.scanner.CssData;\n import com.vaadin.flow.server.frontend.scanner.FrontendDependenciesScanner;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n-\n /**\n  * Collect generated-flow-imports content for project to use to determine if\n  * dev-bundle contains all required imports.\n@@ -41,11 +40,11 @@\n  * For internal use only. May be renamed or removed in a future release.\n  */\n public class GenerateMainImports extends AbstractUpdateImports {\n-    private JsonObject statsJson;\n+    private JsonNode statsJson;\n     private Map<File, List<String>> output;\n \n     public GenerateMainImports(FrontendDependenciesScanner frontendDepScanner,\n-            Options options, JsonObject statsJson) {\n+            Options options, JsonNode statsJson) {\n         super(options, frontendDepScanner);\n         this.statsJson = statsJson;\n     }\n@@ -97,14 +96,14 @@ protected boolean importedFileExists(String importName) {\n         // Basically it means theme file import path like:\n         // \"@vaadin/accordion/theme/lumo/accordion.js\" instead of\n         // \"@vaadin/accordion/src/accordion.js\"\n-        JsonArray statsBundle = statsJson.hasKey(\"bundleImports\")\n-                ? statsJson.getArray(\"bundleImports\")\n-                : Json.createArray();\n+        ArrayNode statsBundle = statsJson.has(\"bundleImports\")\n+                ? (ArrayNode) statsJson.get(\"bundleImports\")\n+                : JacksonUtils.createArrayNode();\n         importName = importName.replace(\"Frontend/\", \"./\");\n \n-        for (int i = 0; i < statsBundle.length(); i++) {\n-            if (importName.equals(\n-                    statsBundle.getString(i).replace(\"Frontend/\", \"./\"))) {\n+        for (int i = 0; i < statsBundle.size(); i++) {\n+            if (importName.equals(statsBundle.get(i).textValue()\n+                    .replace(\"Frontend/\", \"./\"))) {\n                 return true;\n             }\n         }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java\nindex 1856df7235c..c233174a612 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java\n@@ -32,26 +32,25 @@\n import java.util.function.Supplier;\n import java.util.stream.Collectors;\n \n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.vaadin.experimental.FeatureFlags;\n+import com.vaadin.flow.internal.JacksonUtils;\n+import com.vaadin.flow.internal.JsonDecodingException;\n import com.vaadin.flow.server.Constants;\n import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n import com.vaadin.flow.server.frontend.scanner.FrontendDependencies;\n import com.vaadin.flow.server.frontend.scanner.FrontendDependenciesScanner;\n \n-import elemental.json.Json;\n-import elemental.json.JsonException;\n-import elemental.json.JsonObject;\n-import elemental.json.JsonValue;\n-\n import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n import static com.vaadin.flow.server.Constants.PACKAGE_LOCK_JSON;\n import static com.vaadin.flow.server.frontend.FrontendUtils.NODE_MODULES;\n-import static elemental.json.impl.JsonUtil.stringify;\n import static java.nio.charset.StandardCharsets.UTF_8;\n \n /**\n@@ -103,7 +102,7 @@ public abstract class NodeUpdater implements FallibleCommand {\n \n     boolean modified;\n \n-    JsonObject versionsJson;\n+    ObjectNode versionsJson;\n \n     protected Options options;\n \n@@ -134,12 +133,12 @@ protected File getPackageLockFile() {\n      * Gets the platform pinned versions that are not overridden by the user in\n      * package.json.\n      *\n-     * @return {@code JsonObject} with the dependencies or empty\n-     *         {@code JsonObject} if file doesn't exist\n+     * @return {@code JsonNode} with the dependencies or empty {@code JsonNode}\n+     *         if file doesn't exist\n      * @throws IOException\n      *             when versions file could not be read\n      */\n-    JsonObject getPlatformPinnedDependencies() throws IOException {\n+    ObjectNode getPlatformPinnedDependencies() throws IOException {\n         URL coreVersionsResource = finder\n                 .getResource(Constants.VAADIN_CORE_VERSIONS_JSON);\n         if (coreVersionsResource == null) {\n@@ -147,10 +146,10 @@ JsonObject getPlatformPinnedDependencies() throws IOException {\n                     \"Couldn't find {} file to pin dependency versions for core components.\"\n                             + \" Transitive dependencies won't be pinned for npm/pnpm/bun.\",\n                     Constants.VAADIN_CORE_VERSIONS_JSON);\n-            return Json.createObject();\n+            return JacksonUtils.createObjectNode();\n         }\n \n-        JsonObject versionsJson = getFilteredVersionsFromResource(\n+        ObjectNode versionsJson = getFilteredVersionsFromResource(\n                 coreVersionsResource, Constants.VAADIN_CORE_VERSIONS_JSON);\n \n         URL vaadinVersionsResource = finder\n@@ -160,22 +159,22 @@ JsonObject getPlatformPinnedDependencies() throws IOException {\n             return versionsJson;\n         }\n \n-        JsonObject vaadinVersionsJson = getFilteredVersionsFromResource(\n+        ObjectNode vaadinVersionsJson = getFilteredVersionsFromResource(\n                 vaadinVersionsResource, Constants.VAADIN_VERSIONS_JSON);\n-        for (String key : vaadinVersionsJson.keys()) {\n-            versionsJson.put(key, vaadinVersionsJson.getString(key));\n+        for (String key : JacksonUtils.getKeys(vaadinVersionsJson)) {\n+            versionsJson.put(key, vaadinVersionsJson.get(key).textValue());\n         }\n \n         return versionsJson;\n     }\n \n-    private JsonObject getFilteredVersionsFromResource(URL versionsResource,\n+    private ObjectNode getFilteredVersionsFromResource(URL versionsResource,\n             String versionsOrigin) throws IOException {\n-        JsonObject versionsJson;\n+        ObjectNode versionsJson;\n \n         try (InputStream content = versionsResource.openStream()) {\n             VersionsJsonConverter convert = new VersionsJsonConverter(\n-                    Json.parse(\n+                    JacksonUtils.readTree(\n                             IOUtils.toString(content, StandardCharsets.UTF_8)),\n                     options.isReactEnabled()\n                             && FrontendUtils.isReactModuleAvailable(options),\n@@ -209,10 +208,10 @@ static Set<String> getGeneratedModules(File frontendFolder) {\n                 .collect(Collectors.toSet());\n     }\n \n-    JsonObject getPackageJson() throws IOException {\n-        JsonObject packageJson = getJsonFileContent(getPackageJsonFile());\n+    ObjectNode getPackageJson() throws IOException {\n+        ObjectNode packageJson = getJsonFileContent(getPackageJsonFile());\n         if (packageJson == null) {\n-            packageJson = Json.createObject();\n+            packageJson = JacksonUtils.createObjectNode();\n             packageJson.put(DEP_NAME_KEY, DEP_NAME_DEFAULT);\n             packageJson.put(DEP_LICENSE_KEY, DEP_LICENSE_DEFAULT);\n             packageJson.put(\"type\", \"module\");\n@@ -225,20 +224,21 @@ JsonObject getPackageJson() throws IOException {\n         return packageJson;\n     }\n \n-    private void addDefaultObjects(JsonObject json) {\n-        computeIfAbsent(json, DEPENDENCIES, Json::createObject);\n-        computeIfAbsent(json, DEV_DEPENDENCIES, Json::createObject);\n+    private void addDefaultObjects(ObjectNode json) {\n+        computeIfAbsent(json, DEPENDENCIES, JacksonUtils::createObjectNode);\n+        computeIfAbsent(json, DEV_DEPENDENCIES, JacksonUtils::createObjectNode);\n     }\n \n-    private void removeWebpackPlugins(JsonObject packageJson) {\n+    private void removeWebpackPlugins(ObjectNode packageJson) {\n         Path targetFolder = Paths.get(options.getNpmFolder().toString(),\n                 options.getBuildDirectoryName(),\n                 FrontendPluginsUtil.PLUGIN_TARGET);\n \n-        if (!packageJson.hasKey(DEV_DEPENDENCIES)) {\n+        if (!packageJson.has(DEV_DEPENDENCIES)) {\n             return;\n         }\n-        JsonObject devDependencies = packageJson.getObject(DEV_DEPENDENCIES);\n+        ObjectNode devDependencies = (ObjectNode) packageJson\n+                .get(DEV_DEPENDENCIES);\n \n         String atVaadinPrefix = \"@vaadin/\";\n         String pluginTargetPrefix = \"./\"\n@@ -246,8 +246,8 @@ private void removeWebpackPlugins(JsonObject packageJson) {\n                         + \"/\").replace('\\\\', '/');\n \n         // Clean previously installed plugins\n-        for (String depKey : devDependencies.keys()) {\n-            String depVersion = devDependencies.getString(depKey);\n+        for (String depKey : JacksonUtils.getKeys(devDependencies)) {\n+            String depVersion = devDependencies.get(depKey).textValue();\n             if (depKey.startsWith(atVaadinPrefix)\n                     && depVersion.startsWith(pluginTargetPrefix)) {\n                 devDependencies.remove(depKey);\n@@ -255,44 +255,45 @@ private void removeWebpackPlugins(JsonObject packageJson) {\n         }\n     }\n \n-    static JsonObject getJsonFileContent(File packageFile) throws IOException {\n-        JsonObject jsonContent = null;\n+    static ObjectNode getJsonFileContent(File packageFile) throws IOException {\n+        ObjectNode jsonContent = null;\n         if (packageFile.exists()) {\n             String fileContent = FileUtils.readFileToString(packageFile,\n                     UTF_8.name());\n             try {\n-                jsonContent = Json.parse(fileContent);\n-            } catch (JsonException e) { // NOSONAR\n-                throw new JsonException(String\n+                jsonContent = (ObjectNode) JacksonUtils.readTree(fileContent);\n+            } catch (JsonDecodingException e) { // NOSONAR\n+                throw new RuntimeException(String\n                         .format(\"Cannot parse package file '%s'\", packageFile));\n             }\n         }\n         return jsonContent;\n     }\n \n-    void addVaadinDefaultsToJson(JsonObject json) {\n-        JsonObject vaadinPackages = computeIfAbsent(json, VAADIN_DEP_KEY,\n-                Json::createObject);\n+    void addVaadinDefaultsToJson(ObjectNode json) {\n+        ObjectNode vaadinPackages = computeIfAbsent(json, VAADIN_DEP_KEY,\n+                JacksonUtils::createObjectNode);\n \n         computeIfAbsent(vaadinPackages, DEPENDENCIES, () -> {\n-            final JsonObject dependencies = Json.createObject();\n+            final ObjectNode dependencies = JacksonUtils.createObjectNode();\n             getDefaultDependencies().forEach(dependencies::put);\n             return dependencies;\n         });\n         computeIfAbsent(vaadinPackages, DEV_DEPENDENCIES, () -> {\n-            final JsonObject devDependencies = Json.createObject();\n+            final ObjectNode devDependencies = JacksonUtils.createObjectNode();\n             getDefaultDevDependencies().forEach(devDependencies::put);\n             return devDependencies;\n         });\n-        computeIfAbsent(vaadinPackages, HASH_KEY, () -> Json.create(\"\"));\n+        computeIfAbsent(vaadinPackages, HASH_KEY,\n+                () -> JacksonUtils.createNode(\"\"));\n     }\n \n-    private static <T extends JsonValue> T computeIfAbsent(\n-            JsonObject jsonObject, String key, Supplier<T> valueSupplier) {\n-        T result = jsonObject.get(key);\n+    private static <T extends JsonNode> T computeIfAbsent(ObjectNode jsonObject,\n+            String key, Supplier<T> valueSupplier) {\n+        T result = (T) jsonObject.get(key);\n         if (result == null) {\n             result = valueSupplier.get();\n-            jsonObject.put(key, result);\n+            jsonObject.set(key, result);\n         }\n         return result;\n     }\n@@ -318,15 +319,14 @@ Map<String, String> getDefaultDependencies() {\n     Map<String, String> readDependencies(String id, String packageJsonKey) {\n         try {\n             Map<String, String> map = new HashMap<>();\n-            JsonObject dependencies = readPackageJson(id)\n-                    .getObject(packageJsonKey);\n+            JsonNode dependencies = readPackageJson(id).get(packageJsonKey);\n             if (dependencies == null) {\n                 log().error(\"Unable to find \" + packageJsonKey + \" from '\" + id\n                         + \"'\");\n                 return new HashMap<>();\n             }\n-            for (String key : dependencies.keys()) {\n-                map.put(key, dependencies.getString(key));\n+            for (String key : JacksonUtils.getKeys(dependencies)) {\n+                map.put(key, dependencies.get(key).textValue());\n             }\n \n             return map;\n@@ -339,17 +339,18 @@ Map<String, String> readDependencies(String id, String packageJsonKey) {\n \n     }\n \n-    JsonObject readPackageJson(String id) throws IOException {\n+    JsonNode readPackageJson(String id) throws IOException {\n         URL resource = options.getClassFinder()\n                 .getResource(FRONTEND_RESOURCES_PATH + \"dependencies/\" + id\n                         + \"/package.json\");\n         if (resource == null) {\n             log().error(\"Unable to find package.json from '\" + id + \"'\");\n \n-            return Json.parse(\"{\\\"%s\\\":{},\\\"%s\\\":{}}\".formatted(DEPENDENCIES,\n-                    DEV_DEPENDENCIES));\n+            return JacksonUtils.readTree(\"{\\\"%s\\\":{},\\\"%s\\\":{}}\"\n+                    .formatted(DEPENDENCIES, DEV_DEPENDENCIES));\n         }\n-        return Json.parse(IOUtils.toString(resource, StandardCharsets.UTF_8));\n+        return JacksonUtils\n+                .readTree(IOUtils.toString(resource, StandardCharsets.UTF_8));\n     }\n \n     boolean hasPackageJson(String id) {\n@@ -389,7 +390,7 @@ Map<String, String> getDefaultDevDependencies() {\n      *            package.json json object to update with dependencies\n      * @return true if items were added or removed from the {@code packageJson}\n      */\n-    boolean updateDefaultDependencies(JsonObject packageJson) {\n+    boolean updateDefaultDependencies(ObjectNode packageJson) {\n         int added = 0;\n \n         for (Map.Entry<String, String> entry : getDefaultDependencies()\n@@ -411,26 +412,26 @@ boolean updateDefaultDependencies(JsonObject packageJson) {\n         return added > 0;\n     }\n \n-    int addDependency(JsonObject json, String key, String pkg, String version) {\n+    int addDependency(ObjectNode json, String key, String pkg, String version) {\n         Objects.requireNonNull(json, \"Json object need to be given\");\n         Objects.requireNonNull(key, \"Json sub object needs to be give.\");\n         Objects.requireNonNull(pkg, \"dependency package needs to be defined\");\n \n-        JsonObject vaadinDeps = json.getObject(VAADIN_DEP_KEY);\n-        if (!json.hasKey(key)) {\n-            json.put(key, Json.createObject());\n+        ObjectNode vaadinDeps = (ObjectNode) json.get(VAADIN_DEP_KEY);\n+        if (!json.has(key)) {\n+            json.put(key, JacksonUtils.createObjectNode());\n         }\n-        json = json.get(key);\n-        vaadinDeps = vaadinDeps.getObject(key);\n+        json = (ObjectNode) json.get(key);\n+        vaadinDeps = (ObjectNode) vaadinDeps.get(key);\n \n-        if (vaadinDeps.hasKey(pkg)) {\n+        if (vaadinDeps.has(pkg)) {\n             if (version == null) {\n-                version = vaadinDeps.getString(pkg);\n+                version = vaadinDeps.get(pkg).textValue();\n             }\n             return handleExistingVaadinDep(json, pkg, version, vaadinDeps);\n         } else {\n             vaadinDeps.put(pkg, version);\n-            if (!json.hasKey(pkg) || isNewerVersion(json, pkg, version)) {\n+            if (!json.has(pkg) || isNewerVersion(json, pkg, version)) {\n                 json.put(pkg, version);\n                 log().debug(\"Added \\\"{}\\\": \\\"{}\\\" line.\", pkg, version);\n                 return 1;\n@@ -439,15 +440,14 @@ int addDependency(JsonObject json, String key, String pkg, String version) {\n         return 0;\n     }\n \n-    private boolean isNewerVersion(JsonObject json, String pkg,\n-            String version) {\n+    private boolean isNewerVersion(JsonNode json, String pkg, String version) {\n \n         try {\n             FrontendVersion newVersion = new FrontendVersion(version);\n             FrontendVersion existingVersion = toVersion(json, pkg);\n             return newVersion.isNewerThan(existingVersion);\n         } catch (NumberFormatException e) {\n-            if (VAADIN_FORM_PKG.equals(pkg) && json.getString(pkg)\n+            if (VAADIN_FORM_PKG.equals(pkg) && json.get(pkg).textValue()\n                     .contains(VAADIN_FORM_PKG_LEGACY_VERSION)) {\n                 return true;\n             } else {\n@@ -462,13 +462,13 @@ private boolean isNewerVersion(JsonObject json, String pkg,\n         }\n     }\n \n-    private int handleExistingVaadinDep(JsonObject json, String pkg,\n-            String version, JsonObject vaadinDeps) {\n+    private int handleExistingVaadinDep(ObjectNode json, String pkg,\n+            String version, ObjectNode vaadinDeps) {\n         boolean added = false;\n         boolean updatedVaadinVersionSection = false;\n         try {\n             FrontendVersion vaadinVersion = toVersion(vaadinDeps, pkg);\n-            if (json.hasKey(pkg)) {\n+            if (json.has(pkg)) {\n                 FrontendVersion packageVersion = toVersion(json, pkg);\n                 FrontendVersion newVersion = new FrontendVersion(version);\n                 // Vaadin and package.json versions are the same, but dependency\n@@ -495,7 +495,7 @@ private int handleExistingVaadinDep(JsonObject json, String pkg,\n              */\n         }\n         // always update vaadin version to the latest set version\n-        if (!version.equals(vaadinDeps.getString(pkg))) {\n+        if (!version.equals(vaadinDeps.get(pkg).textValue())) {\n             vaadinDeps.put(pkg, version);\n             updatedVaadinVersionSection = true;\n         }\n@@ -510,18 +510,18 @@ private int handleExistingVaadinDep(JsonObject json, String pkg,\n         return added ? 1 : 0;\n     }\n \n-    private static FrontendVersion toVersion(JsonObject json, String key) {\n-        return new FrontendVersion(json.getString(key));\n+    private static FrontendVersion toVersion(JsonNode json, String key) {\n+        return new FrontendVersion(json.get(key).textValue());\n     }\n \n-    String writePackageFile(JsonObject packageJson) throws IOException {\n+    String writePackageFile(JsonNode packageJson) throws IOException {\n         return writePackageFile(packageJson,\n                 new File(options.getNpmFolder(), PACKAGE_JSON));\n     }\n \n-    String writePackageFile(JsonObject json, File packageFile)\n+    String writePackageFile(JsonNode json, File packageFile)\n             throws IOException {\n-        String content = stringify(json, 2) + \"\\n\";\n+        String content = json.toString() + \"\\n\";\n         if (packageFile.exists() || options.isFrontendHotdeploy()\n                 || options.isBundleBuild()) {\n             log().debug(\"writing file {}.\", packageFile.getAbsolutePath());\n@@ -536,24 +536,24 @@ File getVaadinJsonFile() {\n                 VAADIN_JSON);\n     }\n \n-    JsonObject getVaadinJsonContents() throws IOException {\n+    ObjectNode getVaadinJsonContents() throws IOException {\n         File vaadinJsonFile = getVaadinJsonFile();\n         if (vaadinJsonFile.exists()) {\n             String fileContent = FileUtils.readFileToString(vaadinJsonFile,\n                     UTF_8.name());\n-            return Json.parse(fileContent);\n+            return (ObjectNode) JacksonUtils.readTree(fileContent);\n         } else {\n-            return Json.createObject();\n+            return JacksonUtils.createObjectNode();\n         }\n     }\n \n     void updateVaadinJsonContents(Map<String, String> newContent)\n             throws IOException {\n-        JsonObject fileContent = getVaadinJsonContents();\n+        ObjectNode fileContent = getVaadinJsonContents();\n         newContent.forEach(fileContent::put);\n         File vaadinJsonFile = getVaadinJsonFile();\n         FileUtils.forceMkdirParent(vaadinJsonFile);\n-        String content = stringify(fileContent, 2) + \"\\n\";\n+        String content = fileContent + \"\\n\";\n         FileIOUtils.writeIfChanged(vaadinJsonFile, content);\n     }\n \n@@ -569,17 +569,18 @@ Logger log() {\n      * @throws IOException\n      *             when file IO fails\n      */\n-    protected void generateVersionsJson(JsonObject packageJson)\n+    protected void generateVersionsJson(ObjectNode packageJson)\n             throws IOException {\n         versionsJson = getPlatformPinnedDependencies();\n-        JsonObject packageJsonVersions = generateVersionsFromPackageJson(\n+        ObjectNode packageJsonVersions = generateVersionsFromPackageJson(\n                 packageJson);\n-        if (versionsJson.keys().length == 0) {\n+        if (JacksonUtils.getKeys(versionsJson).isEmpty()) {\n             versionsJson = packageJsonVersions;\n         } else {\n-            for (String key : packageJsonVersions.keys()) {\n-                if (!versionsJson.hasKey(key)) {\n-                    versionsJson.put(key, packageJsonVersions.getString(key));\n+            for (String key : JacksonUtils.getKeys(packageJsonVersions)) {\n+                if (!versionsJson.has(key)) {\n+                    versionsJson.put(key,\n+                            packageJsonVersions.get(key).textValue());\n                 }\n             }\n         }\n@@ -592,13 +593,13 @@ protected void generateVersionsJson(JsonObject packageJson)\n      *\n      * @return versions Json based on package.json\n      */\n-    private JsonObject generateVersionsFromPackageJson(JsonObject packageJson) {\n-        JsonObject versionsJson = Json.createObject();\n+    private ObjectNode generateVersionsFromPackageJson(JsonNode packageJson) {\n+        ObjectNode versionsJson = JacksonUtils.createObjectNode();\n         // if we don't have versionsJson lock package dependency versions.\n-        final JsonObject dependencies = packageJson.getObject(DEPENDENCIES);\n+        final JsonNode dependencies = packageJson.get(DEPENDENCIES);\n         if (dependencies != null) {\n-            for (String key : dependencies.keys()) {\n-                versionsJson.put(key, dependencies.getString(key));\n+            for (String key : JacksonUtils.getKeys(dependencies)) {\n+                versionsJson.put(key, dependencies.get(key).textValue());\n             }\n         }\n \n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/Options.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/Options.java\nindex 7d87fbc8925..9b740ea3a75 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/Options.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/Options.java\n@@ -4,11 +4,11 @@\n import java.io.Serializable;\n import java.net.URI;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.List;\n import java.util.Objects;\n import java.util.Set;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.slf4j.LoggerFactory;\n \n import com.vaadin.experimental.FeatureFlags;\n@@ -18,8 +18,6 @@\n import com.vaadin.flow.server.frontend.installer.Platform;\n import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n \n-import elemental.json.JsonObject;\n-\n /**\n  * Build a <code>NodeExecutor</code> instance.\n  */\n@@ -59,7 +57,7 @@ public class Options implements Serializable {\n \n     private boolean useByteCodeScanner = false;\n \n-    private JsonObject tokenFileData;\n+    private JsonNode tokenFileData;\n \n     private File tokenFile;\n \n@@ -424,7 +422,7 @@ public Options useByteCodeScanner(boolean byteCodeScanner) {\n      *            the object to fill with token file data\n      * @return the builder, for chaining\n      */\n-    public Options populateTokenFileData(JsonObject object) {\n+    public Options populateTokenFileData(JsonNode object) {\n         tokenFileData = object;\n         return this;\n     }\n@@ -803,7 +801,7 @@ public boolean isUseByteCodeScanner() {\n         return useByteCodeScanner;\n     }\n \n-    public JsonObject getTokenFileData() {\n+    public JsonNode getTokenFileData() {\n         return tokenFileData;\n     }\n \n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGeneratePackageJson.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGeneratePackageJson.java\nindex bdff3042eac..fb071a35687 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGeneratePackageJson.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGeneratePackageJson.java\n@@ -18,7 +18,7 @@\n import java.io.IOException;\n import java.io.UncheckedIOException;\n \n-import elemental.json.JsonObject;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n \n /**\n  * Creates the <code>package.json</code> if missing.\n@@ -43,11 +43,11 @@ public class TaskGeneratePackageJson extends NodeUpdater {\n     public void execute() {\n         try {\n             modified = false;\n-            JsonObject mainContent = getPackageJson();\n+            ObjectNode mainContent = getPackageJson();\n             modified = updateDefaultDependencies(mainContent);\n             if (modified) {\n-                if (!mainContent.hasKey(\"type\")\n-                        || !mainContent.getString(\"type\").equals(\"module\")) {\n+                if (!mainContent.has(\"type\") || !mainContent.get(\"type\")\n+                        .textValue().equals(\"module\")) {\n                     mainContent.put(\"type\", \"module\");\n                     log().info(\n                             \"\"\"\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateReactFiles.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateReactFiles.java\nindex 1054965913d..b3f2bd82f46 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateReactFiles.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateReactFiles.java\n@@ -24,21 +24,20 @@\n import java.util.Collection;\n import java.util.regex.Pattern;\n \n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StringUtil;\n import com.vaadin.flow.router.Layout;\n import com.vaadin.flow.router.Route;\n import com.vaadin.flow.server.ExecutionFailedException;\n import com.vaadin.flow.server.Version;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n-\n import static com.vaadin.flow.server.frontend.FileIOUtils.compareIgnoringIndentationEOLAndWhiteSpace;\n import static java.nio.charset.StandardCharsets.UTF_8;\n \n@@ -248,16 +247,16 @@ private void writeLayoutsJson(Collection<Class<?>> layoutClasses)\n     }\n \n     private String layoutsContent(Collection<Class<?>> layoutClasses) {\n-        JsonArray availableLayouts = Json.createArray();\n+        ArrayNode availableLayouts = JacksonUtils.createArrayNode();\n         for (Class<?> layout : layoutClasses) {\n             if (layout.isAnnotationPresent(Layout.class)) {\n-                JsonObject layoutObject = Json.createObject();\n+                ObjectNode layoutObject = JacksonUtils.createObjectNode();\n                 layoutObject.put(\"path\",\n                         layout.getAnnotation(Layout.class).value());\n-                availableLayouts.set(availableLayouts.length(), layoutObject);\n+                availableLayouts.add(layoutObject);\n             }\n         }\n-        return availableLayouts.toJson();\n+        return availableLayouts.toString();\n     }\n \n     private void cleanup() throws ExecutionFailedException {\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateTsConfig.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateTsConfig.java\nindex d7f93d708f5..ffef25b5233 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateTsConfig.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateTsConfig.java\n@@ -23,14 +23,14 @@\n import java.io.UncheckedIOException;\n import java.nio.charset.StandardCharsets;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n \n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.ExecutionFailedException;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-\n /**\n  * Generate <code>tsconfig.json</code> if it is missing in project folder.\n  * <p>\n@@ -154,14 +154,14 @@ private String getDefaultEsTargetVersion() throws ExecutionFailedException {\n     }\n \n     private String getEsTargetVersion(String tsConfig) {\n-        JsonObject parsed = parseTsConfig(tsConfig);\n-        return parsed.getObject(COMPILER_OPTIONS).getString(ES_TARGET_VERSION);\n+        JsonNode parsed = parseTsConfig(tsConfig);\n+        return parsed.get(COMPILER_OPTIONS).get(ES_TARGET_VERSION).textValue();\n     }\n \n-    private JsonObject parseTsConfig(String tsConfig) {\n+    private ObjectNode parseTsConfig(String tsConfig) {\n         // remove comments so parser works\n         String json = tsConfig.replaceAll(\"//.*\", \"\");\n-        return Json.parse(json);\n+        return JacksonUtils.readTree(json);\n     }\n \n     @Override\n@@ -182,7 +182,7 @@ private void overrideIfObsolete() {\n             String projectTsConfigAsString = FileUtils\n                     .readFileToString(projectTsConfigFile, UTF_8);\n \n-            JsonObject projectTsConfigContent;\n+            ObjectNode projectTsConfigContent;\n             try {\n                 projectTsConfigContent = parseTsConfig(projectTsConfigAsString);\n             } catch (Exception e) {\n@@ -193,7 +193,7 @@ private void overrideIfObsolete() {\n \n             // Newest TS config template in Flow\n             String latestTsConfigTemplate = getFileContent();\n-            JsonObject latestTsConfigTemplateJson = parseTsConfig(\n+            JsonNode latestTsConfigTemplateJson = parseTsConfig(\n                     latestTsConfigTemplate);\n \n             String projectTsConfigVersion = getConfigVersion(\n@@ -212,7 +212,7 @@ private void overrideIfObsolete() {\n             for (String tsconfigVersion : tsconfigVersions) {\n                 String oldTsConfigContent = getFileContentForVersion(\n                         tsconfigVersion);\n-                JsonObject tsConfigTemplateJson = parseTsConfig(\n+                ObjectNode tsConfigTemplateJson = parseTsConfig(\n                         oldTsConfigContent);\n                 if (tsConfigsEqual(tsConfigTemplateJson,\n                         projectTsConfigContent)) {\n@@ -241,33 +241,34 @@ private void overrideIfObsolete() {\n         }\n     }\n \n-    private String getConfigVersion(JsonObject projectTsConfigContent) {\n-        if (projectTsConfigContent.hasKey(VERSION)) {\n-            return projectTsConfigContent.getString(VERSION);\n+    private String getConfigVersion(JsonNode projectTsConfigContent) {\n+        if (projectTsConfigContent.has(VERSION)) {\n+            return projectTsConfigContent.get(VERSION).textValue();\n         }\n-        if (projectTsConfigContent.hasKey(OLD_VERSION_KEY)) {\n-            return projectTsConfigContent.getString(OLD_VERSION_KEY);\n+        if (projectTsConfigContent.has(OLD_VERSION_KEY)) {\n+            return projectTsConfigContent.get(OLD_VERSION_KEY).textValue();\n         }\n         return null;\n     }\n \n-    private boolean tsConfigsEqual(JsonObject template,\n-            JsonObject projectTsConfig) {\n+    private boolean tsConfigsEqual(ObjectNode template,\n+            ObjectNode projectTsConfig) {\n         // exclude ES version from comparison, because it\n         // might be different for webpack and vite\n-        if (template.hasKey(COMPILER_OPTIONS)) {\n-            template.getObject(COMPILER_OPTIONS).remove(ES_TARGET_VERSION);\n+        if (template.has(COMPILER_OPTIONS)) {\n+            ((ObjectNode) template.get(COMPILER_OPTIONS))\n+                    .remove(ES_TARGET_VERSION);\n         }\n-        if (projectTsConfig.hasKey(COMPILER_OPTIONS)) {\n-            projectTsConfig.getObject(COMPILER_OPTIONS)\n+        if (projectTsConfig.has(COMPILER_OPTIONS)) {\n+            ((ObjectNode) projectTsConfig.get(COMPILER_OPTIONS))\n                     .remove(ES_TARGET_VERSION);\n         }\n \n         // exclude tsconfig version, because it's already compared\n         template.remove(VERSION);\n         projectTsConfig.remove(VERSION);\n-        return removeWhiteSpaces(template.toJson())\n-                .equals(removeWhiteSpaces(projectTsConfig.toJson()));\n+        return removeWhiteSpaces(template.toString())\n+                .equals(removeWhiteSpaces(projectTsConfig.toString()));\n     }\n \n     private String removeWhiteSpaces(String content) {\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallFrontendBuildPlugins.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallFrontendBuildPlugins.java\nindex 470918b8022..171e471b672 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallFrontendBuildPlugins.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallFrontendBuildPlugins.java\n@@ -20,14 +20,13 @@\n import java.io.UncheckedIOException;\n import java.nio.charset.StandardCharsets;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n+import com.vaadin.flow.internal.JacksonUtils;\n \n import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n import static com.vaadin.flow.server.frontend.FrontendPluginsUtil.PLUGIN_TARGET;\n@@ -77,7 +76,7 @@ private void generatePluginFiles(String pluginName) throws IOException {\n         File pluginTargetFolder = new File(targetFolder, pluginName);\n \n         final String pluginFolderName = PLUGIN_TARGET + \"/\" + pluginName + \"/\";\n-        final JsonObject packageJson = FrontendPluginsUtil\n+        final JsonNode packageJson = FrontendPluginsUtil\n                 .getJsonFile(pluginFolderName + PACKAGE_JSON);\n         if (packageJson == null) {\n             log().error(\n@@ -91,9 +90,9 @@ && new File(pluginTargetFolder, PACKAGE_JSON).exists()) {\n             String packageFile = FileUtils.readFileToString(\n                     new File(pluginTargetFolder, PACKAGE_JSON),\n                     StandardCharsets.UTF_8);\n-            final JsonObject targetJson = Json.parse(packageFile);\n-            if (targetJson.hasKey(\"update\")\n-                    && !targetJson.getBoolean(\"update\")) {\n+            final JsonNode targetJson = JacksonUtils.readTree(packageFile);\n+            if (targetJson.has(\"update\")\n+                    && !targetJson.get(\"update\").booleanValue()) {\n                 // This is used only while developing the plugins inside the\n                 // Flow project and the attribute is then added manually to\n                 // package.json\n@@ -105,9 +104,9 @@ && new File(pluginTargetFolder, PACKAGE_JSON).exists()) {\n         FileUtils.forceMkdir(pluginTargetFolder);\n \n         // copy only files named in package.json { files }\n-        final JsonArray files = packageJson.getArray(\"files\");\n-        for (int i = 0; i < files.length(); i++) {\n-            final String file = files.getString(i);\n+        final JsonNode files = packageJson.get(\"files\");\n+        for (int i = 0; i < files.size(); i++) {\n+            final String file = files.get(i).textValue();\n             copyIfNeeded(new File(pluginTargetFolder, file),\n                     pluginFolderName + file);\n         }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskPrepareProdBundle.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskPrepareProdBundle.java\nindex fc0458fc403..2fe14559973 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskPrepareProdBundle.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskPrepareProdBundle.java\n@@ -23,14 +23,13 @@\n import java.nio.charset.StandardCharsets;\n import java.nio.file.Paths;\n \n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.FileUtils;\n \n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.Constants;\n import com.vaadin.flow.server.ExecutionFailedException;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-import elemental.json.impl.JsonUtil;\n import static com.vaadin.flow.server.Constants.APPLICATION_THEME_ROOT;\n import static com.vaadin.flow.shared.ApplicationConstants.VAADIN_STATIC_FILES_PATH;\n \n@@ -130,11 +129,10 @@ private void writePreCompiledMarker() throws ExecutionFailedException {\n         try {\n             File statsJsonFile = new File(options.getResourceOutputDirectory(),\n                     \"config/stats.json\");\n-            JsonObject statsJsonContent = Json.parse(FileUtils\n+            ObjectNode statsJsonContent = JacksonUtils.readTree(FileUtils\n                     .readFileToString(statsJsonFile, StandardCharsets.UTF_8));\n             statsJsonContent.put(\"pre-compiled\", true);\n-            FileUtils.write(statsJsonFile,\n-                    JsonUtil.stringify(statsJsonContent, 2) + \"\\n\",\n+            FileUtils.write(statsJsonFile, statsJsonContent + \"\\n\",\n                     StandardCharsets.UTF_8.name());\n         } catch (IOException e) {\n             throw new ExecutionFailedException(\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunNpmInstall.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunNpmInstall.java\nindex 97b1f81f5f0..6e18af325be 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunNpmInstall.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunNpmInstall.java\n@@ -29,6 +29,8 @@\n import java.util.function.Consumer;\n import java.util.stream.Collectors;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.FileUtils;\n import org.slf4j.Logger;\n \n@@ -37,8 +39,6 @@\n import com.vaadin.flow.server.ExecutionFailedException;\n import com.vaadin.flow.shared.util.SharedUtil;\n \n-import elemental.json.JsonObject;\n-\n import static com.vaadin.flow.server.frontend.FrontendUtils.commandToString;\n import static com.vaadin.flow.server.frontend.NodeUpdater.HASH_KEY;\n import static com.vaadin.flow.server.frontend.NodeUpdater.PROJECT_FOLDER;\n@@ -143,13 +143,13 @@ public void execute() throws ExecutionFailedException {\n      */\n     private void updateLocalHash() {\n         try {\n-            final JsonObject vaadin = packageUpdater.getPackageJson()\n-                    .getObject(VAADIN_DEP_KEY);\n+            final JsonNode vaadin = packageUpdater.getPackageJson()\n+                    .get(VAADIN_DEP_KEY);\n             if (vaadin == null) {\n                 packageUpdater.log().warn(\"No vaadin object in package.json\");\n                 return;\n             }\n-            final String hash = vaadin.getString(HASH_KEY);\n+            final String hash = vaadin.get(HASH_KEY).textValue();\n \n             final Map<String, String> updates = new HashMap<>();\n             updates.put(HASH_KEY, hash);\n@@ -182,20 +182,20 @@ private boolean shouldRunNpmInstall() {\n \n     boolean isVaadinHashOrProjectFolderUpdated() {\n         try {\n-            JsonObject nodeModulesVaadinJson = packageUpdater\n+            JsonNode nodeModulesVaadinJson = packageUpdater\n                     .getVaadinJsonContents();\n-            if (nodeModulesVaadinJson.hasKey(HASH_KEY)) {\n-                final JsonObject packageJson = packageUpdater.getPackageJson();\n-                if (!nodeModulesVaadinJson.getString(HASH_KEY)\n-                        .equals(packageJson.getObject(VAADIN_DEP_KEY)\n-                                .getString(HASH_KEY))) {\n+            if (nodeModulesVaadinJson.has(HASH_KEY)) {\n+                final JsonNode packageJson = packageUpdater.getPackageJson();\n+                if (!nodeModulesVaadinJson.get(HASH_KEY).textValue()\n+                        .equals(packageJson.get(VAADIN_DEP_KEY).get(HASH_KEY)\n+                                .textValue())) {\n                     return true;\n                 }\n \n-                if (nodeModulesVaadinJson.hasKey(PROJECT_FOLDER)\n+                if (nodeModulesVaadinJson.has(PROJECT_FOLDER)\n                         && !options.getNpmFolder().getAbsolutePath()\n                                 .equals(nodeModulesVaadinJson\n-                                        .getString(PROJECT_FOLDER))) {\n+                                        .get(PROJECT_FOLDER).textValue())) {\n                     return true;\n                 }\n \n@@ -371,7 +371,7 @@ private void runNpmInstall() throws ExecutionFailedException {\n             File packageFolder = packageJsonFile.getParentFile();\n \n             try {\n-                JsonObject packageJson = TaskGeneratePackageJson\n+                JsonNode packageJson = TaskGeneratePackageJson\n                         .getJsonFileContent(packageJsonFile);\n                 if (!containsPostinstallScript(packageJson)) {\n                     logger.debug(\n@@ -448,9 +448,9 @@ private File getPackageJsonForModule(String module) {\n \n     }\n \n-    private boolean containsPostinstallScript(JsonObject packageJson) {\n-        return packageJson != null && packageJson.hasKey(\"scripts\")\n-                && packageJson.getObject(\"scripts\").hasKey(\"postinstall\");\n+    private boolean containsPostinstallScript(JsonNode packageJson) {\n+        return packageJson != null && packageJson.has(\"scripts\")\n+                && packageJson.get(\"scripts\").has(\"postinstall\");\n     }\n \n     private Process runNpmCommand(List<String> command, File workingDirectory)\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdatePackages.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdatePackages.java\nindex ba438f8e018..3ae79948eb6 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdatePackages.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdatePackages.java\n@@ -31,21 +31,20 @@\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n import org.slf4j.LoggerFactory;\n \n import com.vaadin.flow.component.dependency.NpmPackage;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StringUtil;\n import com.vaadin.flow.server.Constants;\n import com.vaadin.flow.server.Platform;\n import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n import com.vaadin.flow.server.frontend.scanner.FrontendDependenciesScanner;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-import elemental.json.JsonValue;\n-\n /**\n  * Updates <code>package.json</code> by visiting {@link NpmPackage} annotations\n  * found in the classpath. It also visits classes annotated with\n@@ -85,7 +84,7 @@ public void execute() {\n                     .getPackages();\n             Map<String, String> scannedApplicationDevDependencies = frontDeps\n                     .getDevPackages();\n-            JsonObject packageJson = getPackageJson();\n+            ObjectNode packageJson = getPackageJson();\n             modified = updatePackageJsonDependencies(packageJson,\n                     scannedApplicationDependencies,\n                     scannedApplicationDevDependencies);\n@@ -93,8 +92,8 @@ public void execute() {\n             boolean npmVersionLockingUpdated = lockVersionForNpm(packageJson);\n \n             if (modified || npmVersionLockingUpdated) {\n-                if (!packageJson.hasKey(\"type\")\n-                        || !packageJson.getString(\"type\").equals(\"module\")) {\n+                if (!packageJson.has(\"type\") || !packageJson.get(\"type\")\n+                        .textValue().equals(\"module\")) {\n                     packageJson.put(\"type\", \"module\");\n                     log().info(\n                             \"\"\"\n@@ -110,25 +109,25 @@ public void execute() {\n         }\n     }\n \n-    boolean lockVersionForNpm(JsonObject packageJson) throws IOException {\n+    boolean lockVersionForNpm(ObjectNode packageJson) throws IOException {\n         boolean versionLockingUpdated = false;\n \n-        JsonObject overridesSection = getOverridesSection(packageJson);\n-        final JsonObject dependencies = packageJson.getObject(DEPENDENCIES);\n-        for (String dependency : versionsJson.keys()) {\n-            if (!overridesSection.hasKey(dependency)\n+        ObjectNode overridesSection = getOverridesSection(packageJson);\n+        final JsonNode dependencies = packageJson.get(DEPENDENCIES);\n+        for (String dependency : JacksonUtils.getKeys(versionsJson)) {\n+            if (!overridesSection.has(dependency)\n                     && shouldLockDependencyVersion(dependency, dependencies,\n                             versionsJson)) {\n                 overridesSection.put(dependency, \"$\" + dependency);\n                 versionLockingUpdated = true;\n             }\n         }\n-        final JsonObject devDependencies = packageJson\n-                .getObject(DEV_DEPENDENCIES);\n-        for (String dependency : overridesSection.keys()) {\n-            if (!dependencies.hasKey(dependency)\n-                    && !devDependencies.hasKey(dependency)\n-                    && overridesSection.getString(dependency).startsWith(\"$\")) {\n+        final ObjectNode devDependencies = (ObjectNode) packageJson\n+                .get(DEV_DEPENDENCIES);\n+        for (String dependency : JacksonUtils.getKeys(overridesSection)) {\n+            if (!dependencies.has(dependency)\n+                    && !devDependencies.has(dependency) && overridesSection\n+                            .get(dependency).textValue().startsWith(\"$\")) {\n                 overridesSection.remove(dependency);\n                 versionLockingUpdated = true;\n             }\n@@ -138,16 +137,18 @@ && shouldLockDependencyVersion(dependency, dependencies,\n     }\n \n     private boolean shouldLockDependencyVersion(String dependency,\n-            JsonObject projectDependencies, JsonObject versionsJson) {\n-        String platformDefinedVersion = versionsJson.getString(dependency);\n+            JsonNode projectDependencies, JsonNode versionsJson) {\n+        String platformDefinedVersion = versionsJson.get(dependency)\n+                .textValue();\n \n         if (isInternalPseudoDependency(platformDefinedVersion)) {\n             return false;\n         }\n \n-        if (projectDependencies.hasKey(dependency)) {\n+        if (projectDependencies.has(dependency)) {\n             try {\n-                new FrontendVersion(projectDependencies.getString(dependency));\n+                new FrontendVersion(\n+                        projectDependencies.get(dependency).textValue());\n             } catch (Exception e) {\n                 // Do not lock non-numeric versions, e.g. folder references\n                 return false;\n@@ -163,53 +164,53 @@ private boolean isInternalPseudoDependency(String dependencyVersion) {\n                 .startsWith(\"./\" + options.getBuildDirectoryName());\n     }\n \n-    private JsonObject getOverridesSection(JsonObject packageJson) {\n-        JsonObject overridesSection = packageJson.getObject(OVERRIDES);\n+    private ObjectNode getOverridesSection(ObjectNode packageJson) {\n+        ObjectNode overridesSection = (ObjectNode) packageJson.get(OVERRIDES);\n         if (overridesSection == null) {\n-            overridesSection = Json.createObject();\n-            packageJson.put(OVERRIDES, overridesSection);\n+            overridesSection = JacksonUtils.createObjectNode();\n+            packageJson.set(OVERRIDES, overridesSection);\n         }\n         return overridesSection;\n     }\n \n     @Override\n-    String writePackageFile(JsonObject json) throws IOException {\n+    String writePackageFile(JsonNode json) throws IOException {\n         sortObject(json, DEPENDENCIES);\n         sortObject(json, DEV_DEPENDENCIES);\n         sortObject(json, VAADIN_DEP_KEY);\n         return super.writePackageFile(json);\n     }\n \n-    private void sortObject(JsonObject json, String key) {\n-        if (!json.hasKey(key)) {\n+    private void sortObject(JsonNode json, String key) {\n+        if (!json.has(key)) {\n             return;\n         }\n-        JsonObject object = json.get(key);\n-        JsonObject ordered = orderKeys(object);\n-        Stream.of(object.keys()).forEach(object::remove);\n+        ObjectNode object = (ObjectNode) json.get(key);\n+        ObjectNode ordered = orderKeys(object);\n+        JacksonUtils.getKeys(object).forEach(object::remove);\n         // add ordered keys back\n-        Stream.of(ordered.keys()).forEach(prop -> {\n-            JsonValue value = ordered.get(prop);\n-            object.put(prop, value);\n+        JacksonUtils.getKeys(ordered).forEach(prop -> {\n+            JsonNode value = ordered.get(prop);\n+            object.set(prop, value);\n         });\n     }\n \n-    private JsonObject orderKeys(JsonObject object) {\n-        String[] keys = object.keys();\n+    private ObjectNode orderKeys(JsonNode object) {\n+        String[] keys = JacksonUtils.getKeys(object).toArray(String[]::new);\n         Arrays.sort(keys);\n-        JsonObject result = Json.createObject();\n+        ObjectNode result = JacksonUtils.createObjectNode();\n         for (String key : keys) {\n-            JsonValue value = object.get(key);\n-            if (value instanceof JsonObject) {\n-                value = orderKeys((JsonObject) value);\n+            JsonNode value = object.get(key);\n+            if (value instanceof ObjectNode) {\n+                value = orderKeys(value);\n             }\n-            result.put(key, value);\n+            result.set(key, value);\n         }\n         return result;\n     }\n \n     @SuppressWarnings(\"squid:S134\")\n-    private boolean updatePackageJsonDependencies(JsonObject packageJson,\n+    private boolean updatePackageJsonDependencies(ObjectNode packageJson,\n             Map<String, String> applicationDependencies,\n             Map<String, String> applicationDevDependencies) throws IOException {\n         int added = 0;\n@@ -239,8 +240,8 @@ private boolean updatePackageJsonDependencies(JsonObject packageJson,\n          * #10572 lock all platform internal versions\n          */\n         List<String> pinnedPlatformDependencies = new ArrayList<>();\n-        final JsonObject platformPinnedDependencies = getPlatformPinnedDependencies();\n-        for (String key : platformPinnedDependencies.keys()) {\n+        final ObjectNode platformPinnedDependencies = getPlatformPinnedDependencies();\n+        for (String key : JacksonUtils.getKeys(platformPinnedDependencies)) {\n             // need to double check that not overriding a scanned\n             // dependency since add-ons should be able to downgrade\n             // version through exclusion\n@@ -293,27 +294,28 @@ && pinPlatformDependency(packageJson,\n             cleanUp();\n         }\n \n-        String oldHash = packageJson.getObject(VAADIN_DEP_KEY)\n-                .getString(HASH_KEY);\n+        String oldHash = packageJson.get(VAADIN_DEP_KEY).get(HASH_KEY)\n+                .textValue();\n         String newHash = generatePackageJsonHash(packageJson);\n         // update packageJson hash value, if no changes it will not be written\n-        packageJson.getObject(VAADIN_DEP_KEY).put(HASH_KEY, newHash);\n+        ((ObjectNode) packageJson.get(VAADIN_DEP_KEY)).put(HASH_KEY, newHash);\n \n         return added > 0 || removed > 0 || removedDev > 0\n                 || !oldHash.equals(newHash);\n     }\n \n     private int cleanDependencies(List<String> dependencyCollection,\n-            JsonObject packageJson, String dependencyKey) {\n+            JsonNode packageJson, String dependencyKey) {\n         int removed = 0;\n \n-        JsonObject dependencyObject = packageJson.getObject(dependencyKey);\n-        JsonObject vaadinDependencyObject = packageJson\n-                .getObject(VAADIN_DEP_KEY).getObject(dependencyKey);\n+        ObjectNode dependencyObject = (ObjectNode) packageJson\n+                .get(dependencyKey);\n+        ObjectNode vaadinDependencyObject = (ObjectNode) packageJson\n+                .get(VAADIN_DEP_KEY).get(dependencyKey);\n         if (dependencyObject != null) {\n-            for (String key : dependencyObject.keys()) {\n+            for (String key : JacksonUtils.getKeys(dependencyObject)) {\n                 if (!dependencyCollection.contains(key)\n-                        && vaadinDependencyObject.hasKey(key)) {\n+                        && vaadinDependencyObject.has(key)) {\n                     dependencyObject.remove(key);\n                     vaadinDependencyObject.remove(key);\n                     log().debug(\"Removed \\\"{}\\\".\", key);\n@@ -324,8 +326,8 @@ private int cleanDependencies(List<String> dependencyCollection,\n         return removed;\n     }\n \n-    protected static boolean pinPlatformDependency(JsonObject packageJson,\n-            JsonObject platformPinnedVersions, String pkg) {\n+    protected static boolean pinPlatformDependency(JsonNode packageJson,\n+            JsonNode platformPinnedVersions, String pkg) {\n         final FrontendVersion platformPinnedVersion = FrontendUtils\n                 .getPackageVersionFromJson(platformPinnedVersions, pkg,\n                         \"vaadin_dependencies.json\");\n@@ -333,27 +335,28 @@ protected static boolean pinPlatformDependency(JsonObject packageJson,\n             return false;\n         }\n \n-        final JsonObject vaadinDeps = packageJson.getObject(VAADIN_DEP_KEY)\n-                .getObject(DEPENDENCIES);\n-        final JsonObject packageJsonDeps = packageJson.getObject(DEPENDENCIES);\n+        final ObjectNode vaadinDeps = (ObjectNode) packageJson\n+                .get(VAADIN_DEP_KEY).get(DEPENDENCIES);\n+        final ObjectNode packageJsonDeps = (ObjectNode) packageJson\n+                .get(DEPENDENCIES);\n         // packages exist at this point\n         assert vaadinDeps != null : \"vaadin{ dependencies { } } should exist\";\n         assert packageJsonDeps != null : \"dependencies { } should exist\";\n \n         FrontendVersion packageJsonVersion = null, vaadinDepsVersion = null;\n         try {\n-            if (packageJsonDeps.hasKey(pkg)) {\n+            if (packageJsonDeps.has(pkg)) {\n                 packageJsonVersion = new FrontendVersion(\n-                        packageJsonDeps.getString(pkg));\n+                        packageJsonDeps.get(pkg).textValue());\n             }\n         } catch (NumberFormatException e) {\n             // Overridden to a file link in package.json, do not change\n             return false;\n         }\n         try {\n-            if (vaadinDeps.hasKey(pkg)) {\n+            if (vaadinDeps.has(pkg)) {\n                 vaadinDepsVersion = new FrontendVersion(\n-                        vaadinDeps.getString(pkg));\n+                        vaadinDeps.get(pkg).textValue());\n             }\n         } catch (NumberFormatException e) {\n             // Vaadin defines a non-numeric version. Not sure what the case\n@@ -392,13 +395,13 @@ private boolean isPlatformVersionUpdated() throws IOException {\n         Optional<String> platformVersion = getVaadinVersion(finder);\n         if (platformVersion.isPresent()\n                 && options.getNodeModulesFolder().exists()) {\n-            JsonObject vaadinJsonContents = getVaadinJsonContents();\n+            JsonNode vaadinJsonContents = getVaadinJsonContents();\n             // If no record of previous version, version is considered updated\n-            if (!vaadinJsonContents.hasKey(NodeUpdater.VAADIN_VERSION)) {\n+            if (!vaadinJsonContents.has(NodeUpdater.VAADIN_VERSION)) {\n                 return true;\n             }\n-            return !Objects.equals(\n-                    vaadinJsonContents.getString(NodeUpdater.VAADIN_VERSION),\n+            return !Objects.equals(vaadinJsonContents\n+                    .get(NodeUpdater.VAADIN_VERSION).textValue(),\n                     platformVersion.get());\n         }\n         return false;\n@@ -413,10 +416,10 @@ static Optional<String> getVaadinVersion(ClassFinder finder) {\n         }\n         try (InputStream vaadinVersionsStream = coreVersionsResource\n                 .openStream()) {\n-            final JsonObject versionsJson = Json.parse(IOUtils\n+            final JsonNode versionsJson = JacksonUtils.readTree(IOUtils\n                     .toString(vaadinVersionsStream, StandardCharsets.UTF_8));\n-            if (versionsJson.hasKey(\"platform\")) {\n-                return Optional.of(versionsJson.getString(\"platform\"));\n+            if (versionsJson.has(\"platform\")) {\n+                return Optional.of(versionsJson.get(\"platform\").textValue());\n             }\n         } catch (Exception e) {\n             LoggerFactory.getLogger(Platform.class)\n@@ -431,33 +434,33 @@ static Optional<String> getVaadinVersion(ClassFinder finder) {\n      * present.\n      *\n      * @param packageJson\n-     *            JsonObject of current package.json contents\n+     *            JsonNode of current package.json contents\n      * @return amount of removed properties\n      * @throws IOException\n      *             thrown if removal of package-lock.json fails\n      */\n-    private int removeLegacyProperties(JsonObject packageJson)\n+    private int removeLegacyProperties(ObjectNode packageJson)\n             throws IOException {\n         int result = 0;\n         /*\n          * In modern Flow versions \"@vaadin/flow-deps\" should not exist.\n          */\n-        if (packageJson.hasKey(DEPENDENCIES)) {\n-            JsonObject object = packageJson.getObject(DEPENDENCIES);\n-            if (object.hasKey(DEP_NAME_FLOW_DEPS)) {\n+        if (packageJson.has(DEPENDENCIES)) {\n+            ObjectNode object = (ObjectNode) packageJson.get(DEPENDENCIES);\n+            if (object.has(DEP_NAME_FLOW_DEPS)) {\n                 object.remove(DEP_NAME_FLOW_DEPS);\n                 log().debug(\"Removed \\\"{}\\\" as it's not generated anymore.\",\n                         DEP_NAME_FLOW_DEPS);\n                 result++;\n             }\n-            if (object.hasKey(DEP_NAME_FLOW_JARS)) {\n+            if (object.has(DEP_NAME_FLOW_JARS)) {\n                 object.remove(DEP_NAME_FLOW_JARS);\n                 log().debug(\"Removed \\\"{}\\\" as it's not needed anymore.\",\n                         DEP_NAME_FLOW_JARS);\n                 result++;\n             }\n         }\n-        if (packageJson.hasKey(VAADIN_APP_PACKAGE_HASH)) {\n+        if (packageJson.has(VAADIN_APP_PACKAGE_HASH)) {\n             packageJson.remove(VAADIN_APP_PACKAGE_HASH);\n             log().debug(\"Removed \\\"{}\\\" as it's not used.\",\n                     VAADIN_APP_PACKAGE_HASH);\n@@ -490,40 +493,38 @@ private void cleanUp() throws IOException {\n \n     /**\n      * Generate hash for package dependencies. This will consider both\n-     * 'dependencies' and 'devDependencies' of the packageJson format\n-     * JsonObject.\n+     * 'dependencies' and 'devDependencies' of the packageJson format JsonNode.\n      * <p>\n      * Dependencies will be sorted by key so that different runs for same\n      * dependencies in different order will not trigger npm install.\n      *\n      * @param packageJson\n-     *            JsonObject built in the same format as package.json\n+     *            JsonNode built in the same format as package.json\n      * @return has for dependencies and devDependencies\n      */\n-    static String generatePackageJsonHash(JsonObject packageJson) {\n+    static String generatePackageJsonHash(JsonNode packageJson) {\n         StringBuilder hashContent = new StringBuilder();\n-        if (packageJson.hasKey(DEPENDENCIES)) {\n-            JsonObject dependencies = packageJson.getObject(DEPENDENCIES);\n+        if (packageJson.has(DEPENDENCIES)) {\n+            JsonNode dependencies = packageJson.get(DEPENDENCIES);\n             hashContent.append(\"\\\"dependencies\\\": {\");\n-            String sortedDependencies = Arrays.stream(dependencies.keys())\n-                    .sorted(String::compareToIgnoreCase)\n+            String sortedDependencies = JacksonUtils.getKeys(dependencies)\n+                    .stream().sorted(String::compareToIgnoreCase)\n                     .map(key -> String.format(\"\\\"%s\\\": \\\"%s\\\"\", key,\n-                            dependencies.getString(key)))\n+                            dependencies.get(key).textValue()))\n                     .collect(Collectors.joining(\",\\n  \"));\n             hashContent.append(sortedDependencies);\n             hashContent.append(\"}\");\n         }\n-        if (packageJson.hasKey(DEV_DEPENDENCIES)) {\n-            if (hashContent.length() > 0) {\n+        if (packageJson.has(DEV_DEPENDENCIES)) {\n+            if (!hashContent.isEmpty()) {\n                 hashContent.append(\",\\n\");\n             }\n-            JsonObject devDependencies = packageJson\n-                    .getObject(DEV_DEPENDENCIES);\n+            JsonNode devDependencies = packageJson.get(DEV_DEPENDENCIES);\n             hashContent.append(\"\\\"devDependencies\\\": {\");\n-            String sortedDevDependencies = Arrays.stream(devDependencies.keys())\n-                    .sorted(String::compareToIgnoreCase)\n+            String sortedDevDependencies = JacksonUtils.getKeys(devDependencies)\n+                    .stream().sorted(String::compareToIgnoreCase)\n                     .map(key -> String.format(\"\\\"%s\\\": \\\"%s\\\"\", key,\n-                            devDependencies.getString(key)))\n+                            devDependencies.get(key).textValue()))\n                     .collect(Collectors.joining(\",\\n  \"));\n             hashContent.append(sortedDevDependencies);\n             hashContent.append(\"}\");\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/ThemeUtils.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/ThemeUtils.java\nindex 8360c6a087c..24929131bb4 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/ThemeUtils.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/ThemeUtils.java\n@@ -27,12 +27,15 @@\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.vaadin.flow.component.page.AppShellConfigurator;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.AbstractConfiguration;\n import com.vaadin.flow.server.AppShellRegistry;\n import com.vaadin.flow.server.Constants;\n@@ -40,8 +43,6 @@\n import com.vaadin.flow.server.startup.ApplicationConfiguration;\n import com.vaadin.flow.theme.Theme;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n import static com.vaadin.flow.server.Constants.VAADIN_WEBAPP_RESOURCES;\n import static com.vaadin.flow.shared.ApplicationConstants.VAADIN_STATIC_FILES_PATH;\n \n@@ -129,7 +130,7 @@ public static Optional<Theme> getThemeAnnotation(VaadinContext context) {\n         return Optional.ofNullable(shell.getAnnotation(Theme.class));\n     }\n \n-    public static Optional<JsonObject> getThemeJson(String themeName,\n+    public static Optional<JsonNode> getThemeJson(String themeName,\n             AbstractConfiguration config) {\n         String content = null;\n         try {\n@@ -157,7 +158,7 @@ public static Optional<JsonObject> getThemeJson(String themeName,\n                     \"Unable to read theme.json file of theme=\" + themeName, e);\n         }\n \n-        return content != null ? Optional.of(Json.parse(content))\n+        return content != null ? Optional.of(JacksonUtils.readTree(content))\n                 : Optional.empty();\n     }\n \n@@ -185,7 +186,7 @@ public static URL getThemeResourceFromPrecompiledProductionBundle(\n         return resourceUrl;\n     }\n \n-    public static Optional<JsonObject> getThemeJson(String themeName,\n+    public static Optional<JsonNode> getThemeJson(String themeName,\n             File frontendFolder) {\n         File themeFolder = getThemeFolder(frontendFolder, themeName);\n         File themeJsonFile = new File(themeFolder, \"theme.json\");\n@@ -195,7 +196,7 @@ public static Optional<JsonObject> getThemeJson(String themeName,\n             try {\n                 content = FileUtils.readFileToString(themeJsonFile,\n                         StandardCharsets.UTF_8);\n-                return Optional.of(Json.parse(content));\n+                return Optional.of(JacksonUtils.readTree(content));\n             } catch (IOException e) {\n                 getLogger().error(\n                         \"Unable to read theme json from \" + themeJsonFile, e);\n@@ -205,10 +206,10 @@ public static Optional<JsonObject> getThemeJson(String themeName,\n \n     }\n \n-    public static Optional<String> getParentThemeName(JsonObject themeJson) {\n+    public static Optional<String> getParentThemeName(JsonNode themeJson) {\n         if (themeJson != null) {\n-            if (themeJson.hasKey(\"parent\")) {\n-                String parentThemeName = themeJson.getString(\"parent\");\n+            if (themeJson.has(\"parent\")) {\n+                String parentThemeName = themeJson.get(\"parent\").textValue();\n                 return Optional.of(parentThemeName);\n             }\n         }\n@@ -278,7 +279,7 @@ private static void findActiveThemes(String themeName, List<String> themes,\n             AbstractConfiguration config) {\n         themes.add(themeName);\n \n-        Optional<JsonObject> themeJson = getThemeJson(themeName, config);\n+        Optional<JsonNode> themeJson = getThemeJson(themeName, config);\n         if (themeJson.isPresent()) {\n             Optional<String> parentTheme = getParentThemeName(themeJson.get());\n             if (parentTheme.isPresent()) {\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/ThemeValidationUtil.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/ThemeValidationUtil.java\nindex 3828d8d4498..682de023b35 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/ThemeValidationUtil.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/ThemeValidationUtil.java\n@@ -5,6 +5,7 @@\n import java.io.UncheckedIOException;\n import java.nio.charset.StandardCharsets;\n import java.nio.file.Path;\n+import java.text.ParseException;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n@@ -18,23 +19,22 @@\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeType;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.vaadin.flow.internal.JsonUtils;\n+import com.vaadin.flow.internal.JacksonUtils;\n+import com.vaadin.flow.internal.JacksonUtils;\n+import com.vaadin.flow.internal.JsonDecodingException;\n import com.vaadin.flow.server.Constants;\n-import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n import com.vaadin.flow.server.frontend.scanner.FrontendDependenciesScanner;\n import com.vaadin.flow.theme.ThemeDefinition;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n-import elemental.json.JsonType;\n-import elemental.json.JsonValue;\n-\n /**\n  * Theme handling methods.\n  * <p>\n@@ -49,9 +49,9 @@ public class ThemeValidationUtil {\n     private static final String FRONTEND_HASHES_KEY = \"frontendHashes\";\n \n     public static boolean themeConfigurationChanged(Options options,\n-            JsonObject statsJson,\n+            JsonNode statsJson,\n             FrontendDependenciesScanner frontendDependencies) {\n-        Map<String, JsonObject> themeJsonContents = new HashMap<>();\n+        Map<String, JsonNode> themeJsonContents = new HashMap<>();\n \n         if (options.getJarFiles() != null) {\n             options.getJarFiles().stream().filter(File::exists)\n@@ -63,12 +63,12 @@ public static boolean themeConfigurationChanged(Options options,\n         Optional<String> maybeThemeName = Optional\n                 .ofNullable(frontendDependencies.getThemeDefinition())\n                 .map(ThemeDefinition::getName).filter(name -> !name.isBlank());\n-        Optional<JsonObject> projectThemeJson = maybeThemeName\n+        Optional<JsonNode> projectThemeJson = maybeThemeName\n                 .flatMap(themeName -> ThemeUtils.getThemeJson(themeName,\n                         options.getFrontendDirectory()));\n         String projectThemeName = maybeThemeName.orElse(null);\n \n-        JsonObject statsThemeJson = statsJson.getObject(\"themeJsonContents\");\n+        JsonNode statsThemeJson = statsJson.get(\"themeJsonContents\");\n         if (statsThemeJson == null && (!themeJsonContents.isEmpty()\n                 || projectThemeJson.isPresent())) {\n             getLogger().info(\n@@ -78,13 +78,13 @@ public static boolean themeConfigurationChanged(Options options,\n \n         if (projectThemeJson.isPresent()) {\n             String key;\n-            if (statsThemeJson.hasKey(projectThemeName)) {\n+            if (statsThemeJson.has(projectThemeName)) {\n                 key = projectThemeName;\n             } else if (!options.isProductionMode()\n-                    && statsThemeJson.hasKey(Constants.DEV_BUNDLE_NAME)) {\n+                    && statsThemeJson.has(Constants.DEV_BUNDLE_NAME)) {\n                 key = Constants.DEV_BUNDLE_NAME;\n             } else if (options.isProductionMode()\n-                    && statsThemeJson.hasKey(Constants.PROD_BUNDLE_NAME)) {\n+                    && statsThemeJson.has(Constants.PROD_BUNDLE_NAME)) {\n                 key = Constants.PROD_BUNDLE_NAME;\n             } else {\n                 getLogger().info(\n@@ -97,17 +97,17 @@ public static boolean themeConfigurationChanged(Options options,\n                     projectThemeJson.get());\n         }\n \n-        for (Map.Entry<String, JsonObject> themeContent : themeJsonContents\n+        for (Map.Entry<String, JsonNode> themeContent : themeJsonContents\n                 .entrySet()) {\n             if (hasNewAssetsOrImports(statsThemeJson, themeContent)) {\n                 getLogger().info(\n                         \"Found new configuration for theme '{}' in 'theme.json'.\",\n                         themeContent.getKey());\n                 return true;\n-            } else if (statsThemeJson.hasKey(themeContent.getKey())) {\n+            } else if (statsThemeJson.has(themeContent.getKey())) {\n                 List<String> missedKeys = new ArrayList<>();\n-                JsonObject content = Json\n-                        .parse(statsThemeJson.getString(themeContent.getKey()));\n+                JsonNode content = JacksonUtils.readTree(\n+                        statsThemeJson.get(themeContent.getKey()).textValue());\n                 if (!objectIncludesEntry(content, themeContent.getValue(),\n                         missedKeys)) {\n                     getLogger().info(\n@@ -137,7 +137,7 @@ public static boolean themeConfigurationChanged(Options options,\n      *         {@literal false}.\n      */\n     public static boolean themeShadowDOMStylesheetsChanged(Options options,\n-            JsonObject statsJson,\n+            JsonNode statsJson,\n             FrontendDependenciesScanner frontendDependencies) {\n         File frontendDirectory = options.getFrontendDirectory();\n         // Scan the theme hierarchy and collect all <theme>/components folders\n@@ -145,7 +145,7 @@ public static boolean themeShadowDOMStylesheetsChanged(Options options,\n                 .ofNullable(frontendDependencies.getThemeDefinition())\n                 .map(ThemeDefinition::getName).filter(name -> !name.isBlank())\n                 .map(themeName -> {\n-                    Map<String, JsonObject> themeJsonContents = new HashMap<>();\n+                    Map<String, JsonNode> themeJsonContents = new HashMap<>();\n                     ThemeUtils.getThemeJson(themeName, frontendDirectory)\n                             .ifPresent(\n                                     themeJson -> collectThemeJsonContentsInFrontend(\n@@ -160,16 +160,16 @@ public static boolean themeShadowDOMStylesheetsChanged(Options options,\n                 }).orElse(null);\n         if (themeComponentsDirs != null) {\n             Map<String, String> hashesWithNoComponentCssMatches = new HashMap<>();\n-            if (statsJson.hasKey(FRONTEND_HASHES_KEY)) {\n-                JsonObject json = statsJson.getObject(FRONTEND_HASHES_KEY);\n-                Stream.of(json.keys())\n+            if (statsJson.has(FRONTEND_HASHES_KEY)) {\n+                JsonNode json = statsJson.get(FRONTEND_HASHES_KEY);\n+                JacksonUtils.getKeys(json).stream()\n                         // Only considers bundled resources located in\n                         // '[generated/jar-resources/]themes/<themeName>/components'\n                         .filter(path -> themeComponentsDirs.stream()\n                                 .anyMatch(dir -> frontendDirectory.toPath()\n                                         .resolve(path).startsWith(dir)))\n                         .forEach(key -> hashesWithNoComponentCssMatches.put(key,\n-                                json.getString(key)));\n+                                json.get(key).textValue()));\n             }\n \n             List<String> themeComponentsCssFiles = new ArrayList<>();\n@@ -201,26 +201,26 @@ public static boolean themeShadowDOMStylesheetsChanged(Options options,\n         return false;\n     }\n \n-    private static boolean hasNewAssetsOrImports(JsonObject contentsInStats,\n-            Map.Entry<String, JsonObject> themeContent) {\n-        JsonObject json = themeContent.getValue();\n-        boolean moreThanOneKey = json.keys().length > 1;\n-        boolean noParentEntry = json.keys().length == 1\n-                && !json.hasKey(\"parent\");\n+    private static boolean hasNewAssetsOrImports(JsonNode contentsInStats,\n+            Map.Entry<String, JsonNode> themeContent) {\n+        JsonNode json = themeContent.getValue();\n+        int keys = JacksonUtils.getKeys(json).size();\n+        boolean moreThanOneKey = keys > 1;\n+        boolean noParentEntry = keys == 1 && !json.has(\"parent\");\n         // do not re-bundle immediately if theme.json is empty or has only\n         // parent reference\n-        return !contentsInStats.hasKey(themeContent.getKey())\n+        return !contentsInStats.has(themeContent.getKey())\n                 && (moreThanOneKey || noParentEntry);\n     }\n \n     private static void collectThemeJsonContentsInFrontend(Options options,\n-            Map<String, JsonObject> themeJsonContents, String themeName,\n-            JsonObject themeJson) {\n+            Map<String, JsonNode> themeJsonContents, String themeName,\n+            JsonNode themeJson) {\n         Optional<String> parentThemeInFrontend = ThemeUtils\n                 .getParentThemeName(themeJson);\n         if (parentThemeInFrontend.isPresent()) {\n             String parentThemeName = parentThemeInFrontend.get();\n-            Optional<JsonObject> parentThemeJson = ThemeUtils.getThemeJson(\n+            Optional<JsonNode> parentThemeJson = ThemeUtils.getThemeJson(\n                     parentThemeName, options.getFrontendDirectory());\n             parentThemeJson.ifPresent(\n                     jsonObject -> collectThemeJsonContentsInFrontend(options,\n@@ -230,33 +230,30 @@ private static void collectThemeJsonContentsInFrontend(Options options,\n         themeJsonContents.put(themeName, themeJson);\n     }\n \n-    static boolean objectIncludesEntry(JsonValue jsonFromBundle,\n-            JsonValue projectJson, Collection<String> missedKeys) {\n-        JsonType bundleJsonType = jsonFromBundle.getType();\n-        JsonType projectJsonObjectTypeType = projectJson.getType();\n-        assert bundleJsonType.equals(projectJsonObjectTypeType);\n+    static boolean objectIncludesEntry(JsonNode jsonFromBundle,\n+            JsonNode projectJson, Collection<String> missedKeys) {\n+        JsonNodeType bundleJsonNodeType = jsonFromBundle.getNodeType();\n+        JsonNodeType projectJsonNodeTypeType = projectJson.getNodeType();\n+        assert bundleJsonNodeType.equals(projectJsonNodeTypeType);\n \n-        if (bundleJsonType == JsonType.NULL) {\n+        if (bundleJsonNodeType == JsonNodeType.NULL) {\n             return true;\n-        } else if (bundleJsonType == JsonType.BOOLEAN) {\n-            return JsonUtils.booleanEqual(jsonFromBundle, projectJson);\n-        } else if (bundleJsonType == JsonType.NUMBER) {\n-            return JsonUtils.numbersEqual(jsonFromBundle, projectJson);\n-        } else if (bundleJsonType == JsonType.STRING) {\n-            return JsonUtils.stringEqual(jsonFromBundle, projectJson);\n-        } else if (bundleJsonType == JsonType.ARRAY) {\n-            JsonArray jsonArrayFromBundle = (JsonArray) jsonFromBundle;\n-            JsonArray jsonArrayFromProject = (JsonArray) projectJson;\n+        } else if (bundleJsonNodeType == JsonNodeType.BOOLEAN) {\n+            return JacksonUtils.booleanEqual(jsonFromBundle, projectJson);\n+        } else if (bundleJsonNodeType == JsonNodeType.NUMBER) {\n+            return JacksonUtils.numbersEqual(jsonFromBundle, projectJson);\n+        } else if (bundleJsonNodeType == JsonNodeType.STRING) {\n+            return JacksonUtils.stringEqual(jsonFromBundle, projectJson);\n+        } else if (bundleJsonNodeType == JsonNodeType.ARRAY) {\n+            ArrayNode jsonArrayFromBundle = (ArrayNode) jsonFromBundle;\n+            ArrayNode jsonArrayFromProject = (ArrayNode) projectJson;\n             return compareArrays(missedKeys, jsonArrayFromBundle,\n                     jsonArrayFromProject);\n-        } else if (bundleJsonType == JsonType.OBJECT) {\n-            JsonObject jsonObjectFromBundle = (JsonObject) jsonFromBundle;\n-            JsonObject projectJsonObject = (JsonObject) projectJson;\n-            return compareObjects(missedKeys, jsonObjectFromBundle,\n-                    projectJsonObject);\n+        } else if (bundleJsonNodeType == JsonNodeType.OBJECT) {\n+            return compareObjects(missedKeys, jsonFromBundle, projectJson);\n         } else {\n             throw new IllegalArgumentException(\n-                    \"Unsupported JsonType: \" + bundleJsonType);\n+                    \"Unsupported JsonNodeType: \" + bundleJsonNodeType);\n         }\n     }\n \n@@ -267,7 +264,7 @@ private static void logMissedEntries(List<String> missedKeys) {\n     }\n \n     private static void getPackagedThemeJsonContents(File jarFileToLookup,\n-            Map<String, JsonObject> packagedThemeHashes) {\n+            Map<String, JsonNode> packagedThemeHashes) {\n         JarContentsManager jarContentsManager = new JarContentsManager();\n         if (jarContentsManager.containsPath(jarFileToLookup,\n                 Constants.RESOURCES_THEME_JAR_DEFAULT)) {\n@@ -286,29 +283,30 @@ private static void getPackagedThemeJsonContents(File jarFileToLookup,\n                             \"Packaged theme folders structure is incorrect, should have META-INF/resources/themes/[theme-name]/\");\n                 }\n                 String themeName = matcher.group(1);\n-                JsonObject jsonContent = Json.parse(content);\n+                JsonNode jsonContent = null;\n+                jsonContent = JacksonUtils.readTree(content);\n                 packagedThemeHashes.put(themeName, jsonContent);\n             }\n         }\n     }\n \n     private static boolean compareObjects(Collection<String> missedKeys,\n-            JsonObject jsonObjectFromBundle, JsonObject projectJsonObject) {\n+            JsonNode jsonObjectFromBundle, JsonNode projectJsonNode) {\n         boolean allEntriesFound = true;\n \n-        for (String projectEntryKey : projectJsonObject.keys()) {\n-            JsonValue projectEntry = projectJsonObject.get(projectEntryKey);\n+        for (String projectEntryKey : JacksonUtils.getKeys(projectJsonNode)) {\n+            JsonNode projectEntry = projectJsonNode.get(projectEntryKey);\n             // ignore parent theme, because having a parent theme doesn't\n             // need a new bundle per se\n-            if (projectEntry.getType() == JsonType.STRING\n+            if (projectEntry.getNodeType() == JsonNodeType.STRING\n                     && \"parent\".equals(projectEntryKey)) {\n                 continue;\n             }\n             boolean entryFound = false;\n-            for (String bundleEntryKey : jsonObjectFromBundle.keys()) {\n-                JsonValue bundleEntry = jsonObjectFromBundle\n-                        .get(bundleEntryKey);\n-                if (bundleEntry.getType() == projectEntry.getType()\n+            for (String bundleEntryKey : JacksonUtils\n+                    .getKeys(jsonObjectFromBundle)) {\n+                JsonNode bundleEntry = jsonObjectFromBundle.get(bundleEntryKey);\n+                if (bundleEntry.getNodeType() == projectEntry.getNodeType()\n                         && objectIncludesEntry(bundleEntry, projectEntry,\n                                 missedKeys)) {\n                     entryFound = true;\n@@ -324,7 +322,7 @@ && objectIncludesEntry(bundleEntry, projectEntry,\n     }\n \n     private static boolean compareArrays(Collection<String> missedKeys,\n-            JsonArray jsonArrayFromBundle, JsonArray jsonArrayFromProject) {\n+            ArrayNode jsonArrayFromBundle, ArrayNode jsonArrayFromProject) {\n \n         boolean allEntriesFound = checkMissedKeys(missedKeys,\n                 jsonArrayFromBundle, jsonArrayFromProject);\n@@ -336,7 +334,7 @@ private static boolean compareArrays(Collection<String> missedKeys,\n         // jsonArrayFromBundle = [1,2,3]\n         // jsonArrayFromProject = [1,2]\n         // and the check would pass\n-        if (jsonArrayFromBundle.length() != jsonArrayFromProject.length()) {\n+        if (jsonArrayFromBundle.size() != jsonArrayFromProject.size()) {\n             allEntriesFound = allEntriesFound && checkMissedKeys(missedKeys,\n                     jsonArrayFromProject, jsonArrayFromBundle);\n         }\n@@ -345,20 +343,20 @@ private static boolean compareArrays(Collection<String> missedKeys,\n     }\n \n     private static boolean checkMissedKeys(Collection<String> missedKeys,\n-            JsonArray arrayIterating, JsonArray arrayComparing) {\n+            ArrayNode arrayIterating, ArrayNode arrayComparing) {\n         boolean allEntriesFound = true;\n \n         for (int arrayComparingIndex = 0; arrayComparingIndex < arrayComparing\n-                .length(); arrayComparingIndex++) {\n-            JsonValue arrayComparingEntry = arrayComparing\n+                .size(); arrayComparingIndex++) {\n+            JsonNode arrayComparingEntry = arrayComparing\n                     .get(arrayComparingIndex);\n             boolean entryFound = false;\n             for (int arrayIteratingIndex = 0; arrayIteratingIndex < arrayIterating\n-                    .length(); arrayIteratingIndex++) {\n-                JsonValue arrayIteratingEntry = arrayIterating\n+                    .size(); arrayIteratingIndex++) {\n+                JsonNode arrayIteratingEntry = arrayIterating\n                         .get(arrayIteratingIndex);\n-                if (arrayIteratingEntry.getType() == arrayComparingEntry\n-                        .getType()\n+                if (arrayIteratingEntry.getNodeType() == arrayComparingEntry\n+                        .getNodeType()\n                         && objectIncludesEntry(arrayIteratingEntry,\n                                 arrayComparingEntry, missedKeys)) {\n                     entryFound = true;\n@@ -366,7 +364,7 @@ && objectIncludesEntry(arrayIteratingEntry,\n                 }\n             }\n             if (!entryFound) {\n-                missedKeys.add(arrayComparingEntry.toJson());\n+                missedKeys.add(arrayComparingEntry.toString());\n             }\n             allEntriesFound = allEntriesFound && entryFound;\n         }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonConverter.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonConverter.java\nindex 57d3d0bed05..acbb5c7d29e 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonConverter.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonConverter.java\n@@ -20,13 +20,13 @@\n import java.util.Set;\n import java.util.stream.IntStream;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n-import elemental.json.JsonValue;\n+import com.vaadin.flow.internal.JacksonUtils;\n \n /**\n  * Converts platform versions file to internal format which doesn't contain\n@@ -72,7 +72,7 @@ class VersionsJsonConverter {\n     public static final String MODE_ALL = \"all\"; // same as empty string\n     private static final Object VAADIN_ROUTER = \"@vaadin/router\";\n \n-    private final JsonObject convertedObject;\n+    private final ObjectNode convertedObject;\n \n     private boolean reactEnabled;\n \n@@ -84,12 +84,12 @@ private static Logger getLogger() {\n         return LoggerFactory.getLogger(VersionsJsonConverter.class);\n     }\n \n-    VersionsJsonConverter(JsonObject platformVersions, boolean reactEnabled,\n+    VersionsJsonConverter(JsonNode platformVersions, boolean reactEnabled,\n             boolean excludeWebComponents) {\n         this.reactEnabled = reactEnabled;\n         this.excludeWebComponents = excludeWebComponents;\n         exclusions = new HashSet<>();\n-        convertedObject = Json.createObject();\n+        convertedObject = JacksonUtils.createObjectNode();\n \n         collectDependencies(platformVersions);\n         excludeDependencies();\n@@ -101,7 +101,7 @@ private static Logger getLogger() {\n      *\n      * @return flatten the platform versions Json\n      */\n-    JsonObject getConvertedJson() {\n+    ObjectNode getConvertedJson() {\n         return convertedObject;\n     }\n \n@@ -114,23 +114,22 @@ Set<String> getExclusions() {\n         return exclusions;\n     }\n \n-    private void collectDependencies(JsonObject obj) {\n-        for (String key : obj.keys()) {\n-            JsonValue value = obj.get(key);\n-            if (!(value instanceof JsonObject)) {\n+    private void collectDependencies(JsonNode obj) {\n+        for (String key : JacksonUtils.getKeys(obj)) {\n+            JsonNode value = obj.get(key);\n+            if (!(value instanceof ObjectNode)) {\n                 continue;\n             }\n-            JsonObject json = (JsonObject) value;\n-            if (json.hasKey(NPM_NAME)) {\n-                addDependency(json);\n+            if (value.has(NPM_NAME)) {\n+                addDependency(value);\n             } else {\n-                collectDependencies(json);\n+                collectDependencies(value);\n             }\n         }\n     }\n \n     private void excludeDependencies() {\n-        for (String key : convertedObject.keys()) {\n+        for (String key : JacksonUtils.getKeys(convertedObject)) {\n             if (exclusions.contains(key)) {\n                 convertedObject.remove(key);\n             }\n@@ -149,10 +148,10 @@ private boolean isIncludedByMode(String mode) {\n         }\n     }\n \n-    private void addDependency(JsonObject obj) {\n-        assert obj.hasKey(NPM_NAME);\n-        String npmName = obj.getString(NPM_NAME);\n-        String mode = obj.hasKey(MODE) ? obj.getString(MODE) : null;\n+    private void addDependency(JsonNode obj) {\n+        assert obj.has(NPM_NAME);\n+        String npmName = obj.get(NPM_NAME).textValue();\n+        String mode = obj.has(MODE) ? obj.get(MODE).textValue() : null;\n         String version;\n         // #11025\n         if (Objects.equals(npmName, VAADIN_CORE_NPM_PACKAGE)) {\n@@ -177,10 +176,10 @@ private void addDependency(JsonObject obj) {\n             }\n             return;\n         }\n-        if (obj.hasKey(NPM_VERSION)) {\n-            version = obj.getString(NPM_VERSION);\n-        } else if (obj.hasKey(JS_VERSION)) {\n-            version = obj.getString(JS_VERSION);\n+        if (obj.has(NPM_VERSION)) {\n+            version = obj.get(NPM_VERSION).textValue();\n+        } else if (obj.has(JS_VERSION)) {\n+            version = obj.get(JS_VERSION).textValue();\n         } else {\n             throw new IllegalStateException(\"Vaadin code versions file \"\n                     + \"contains unexpected data: dependency '\" + npmName\n@@ -194,12 +193,12 @@ private void addDependency(JsonObject obj) {\n                 npmName, version, (mode != null ? \" for mode \" + mode : \"\"));\n     }\n \n-    private void collectExclusions(JsonObject obj) {\n-        if (obj.hasKey(EXCLUSIONS)) {\n-            JsonArray array = obj.getArray(EXCLUSIONS);\n+    private void collectExclusions(JsonNode obj) {\n+        if (obj.has(EXCLUSIONS)) {\n+            ArrayNode array = (ArrayNode) obj.get(EXCLUSIONS);\n             if (array != null) {\n-                IntStream.range(0, array.length())\n-                        .forEach(i -> exclusions.add(array.getString(i)));\n+                IntStream.range(0, array.size())\n+                        .forEach(i -> exclusions.add(array.get(i).textValue()));\n             }\n         }\n     }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonFilter.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonFilter.java\nindex 38c037ec260..a3c088c35e6 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonFilter.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonFilter.java\n@@ -15,10 +15,11 @@\n  */\n package com.vaadin.flow.server.frontend;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.slf4j.LoggerFactory;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n+import com.vaadin.flow.internal.JacksonUtils;\n \n import static com.vaadin.flow.server.frontend.NodeUpdater.VAADIN_DEP_KEY;\n \n@@ -32,13 +33,13 @@\n  */\n class VersionsJsonFilter {\n \n-    private final JsonObject userManagedDependencies;\n+    private final ObjectNode userManagedDependencies;\n \n     private final String dependenciesKey;\n \n     private static final String OLDER_VERSION_WARNING = \"Using user (package.json) pinned version '{}' of '{}' which is older than the current platform version '{}'\";\n \n-    VersionsJsonFilter(JsonObject packageJson, String dependenciesKey) {\n+    VersionsJsonFilter(ObjectNode packageJson, String dependenciesKey) {\n         this.dependenciesKey = dependenciesKey;\n         userManagedDependencies = collectUserManagedDependencies(packageJson);\n     }\n@@ -53,9 +54,9 @@ class VersionsJsonFilter {\n      *            origin of the version (like a file), used in error message\n      * @return filtered versions json\n      */\n-    JsonObject getFilteredVersions(JsonObject versions, String versionOrigin) {\n-        JsonObject json = Json.createObject();\n-        for (String key : versions.keys()) {\n+    ObjectNode getFilteredVersions(ObjectNode versions, String versionOrigin) {\n+        ObjectNode json = JacksonUtils.createObjectNode();\n+        for (String key : JacksonUtils.getKeys(versions)) {\n             final FrontendVersion version = FrontendUtils\n                     .getPackageVersionFromJson(versions, key, versionOrigin);\n             if (version == null) {\n@@ -73,11 +74,11 @@ JsonObject getFilteredVersions(JsonObject versions, String versionOrigin) {\n                 if (version.isNewerThan(userManagedVersion)) {\n                     LoggerFactory.getLogger(\"Versions\").warn(\n                             OLDER_VERSION_WARNING,\n-                            userManagedDependencies.getString(key), key,\n-                            versions.getString(key));\n+                            userManagedDependencies.get(key).textValue(), key,\n+                            versions.get(key).textValue());\n                 }\n             }\n-            json.put(key, versions.getString(key));\n+            json.put(key, versions.get(key).textValue());\n         }\n         return json;\n     }\n@@ -90,16 +91,16 @@ JsonObject getFilteredVersions(JsonObject versions, String versionOrigin) {\n      *            package.json Json object\n      * @return collection of user managed dependencies\n      */\n-    private JsonObject collectUserManagedDependencies(JsonObject packageJson) {\n-        JsonObject json = Json.createObject();\n-        JsonObject vaadinDep = collectFrameworkVersions(packageJson);\n+    private ObjectNode collectUserManagedDependencies(ObjectNode packageJson) {\n+        ObjectNode json = JacksonUtils.createObjectNode();\n+        JsonNode vaadinDep = collectFrameworkVersions(packageJson);\n \n-        if (packageJson.hasKey(dependenciesKey)) {\n-            JsonObject dependencies = packageJson.getObject(dependenciesKey);\n+        if (packageJson.has(dependenciesKey)) {\n+            JsonNode dependencies = packageJson.get(dependenciesKey);\n \n-            for (String key : dependencies.keys()) {\n+            for (String key : JacksonUtils.getKeys(dependencies)) {\n                 if (isUserChanged(key, vaadinDep, dependencies)) {\n-                    json.put(key, dependencies.getString(key));\n+                    json.put(key, dependencies.get(key).textValue());\n                 }\n             }\n         }\n@@ -107,21 +108,22 @@ private JsonObject collectUserManagedDependencies(JsonObject packageJson) {\n         return json;\n     }\n \n-    private boolean isUserChanged(String key, JsonObject vaadinDep,\n-            JsonObject dependencies) {\n-        if (vaadinDep.hasKey(key)) {\n+    private boolean isUserChanged(String key, JsonNode vaadinDep,\n+            JsonNode dependencies) {\n+        if (vaadinDep.has(key)) {\n             try {\n                 FrontendVersion vaadin = new FrontendVersion(key,\n-                        vaadinDep.getString(key));\n+                        vaadinDep.get(key).textValue());\n                 FrontendVersion dep = new FrontendVersion(key,\n-                        dependencies.getString(key));\n+                        dependencies.get(key).textValue());\n                 return !vaadin.isEqualTo(dep);\n             } catch (NumberFormatException nfe) {\n                 LoggerFactory.getLogger(\"VersionsFilter\").debug(\n                         \"Received version with non numbers {} and {}\",\n-                        vaadinDep.getString(key), dependencies.getString(key));\n-                return !vaadinDep.getString(key)\n-                        .equals(dependencies.getString(key));\n+                        vaadinDep.get(key).textValue(),\n+                        dependencies.get(key).textValue());\n+                return !vaadinDep.get(key).textValue()\n+                        .equals(dependencies.get(key).textValue());\n             }\n         }\n         // User changed if not in vaadin dependency\n@@ -135,12 +137,11 @@ private boolean isUserChanged(String key, JsonObject vaadinDep,\n      *            main package.json\n      * @return Vaadin dependencies or empty object\n      */\n-    private JsonObject collectFrameworkVersions(JsonObject packageJson) {\n-        if (packageJson.hasKey(VAADIN_DEP_KEY) && packageJson\n-                .getObject(VAADIN_DEP_KEY).hasKey(dependenciesKey)) {\n-            return packageJson.getObject(VAADIN_DEP_KEY)\n-                    .getObject(dependenciesKey);\n+    private JsonNode collectFrameworkVersions(ObjectNode packageJson) {\n+        if (packageJson.has(VAADIN_DEP_KEY)\n+                && packageJson.get(VAADIN_DEP_KEY).has(dependenciesKey)) {\n+            return packageJson.get(VAADIN_DEP_KEY).get(dependenciesKey);\n         }\n-        return Json.createObject();\n+        return JacksonUtils.createObjectNode();\n     }\n }\n\ndiff --git a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/ThemeLiveUpdater.java b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/ThemeLiveUpdater.java\nindex 0ee1e973167..5dd1ab6dbbb 100644\n--- a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/ThemeLiveUpdater.java\n+++ b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/ThemeLiveUpdater.java\n@@ -20,6 +20,7 @@\n import java.io.IOException;\n import java.util.Optional;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -30,8 +31,6 @@\n import com.vaadin.flow.server.frontend.ThemeUtils;\n import com.vaadin.flow.server.startup.ApplicationConfiguration;\n \n-import elemental.json.JsonObject;\n-\n /**\n  * Watches the given theme folder for changes, combines the theme on changes and\n  * pushes the new version to the browser.\n@@ -52,7 +51,7 @@ public class ThemeLiveUpdater implements Closeable {\n     public ThemeLiveUpdater(File themeFolder, VaadinContext context) {\n         String themeName = themeFolder.getName();\n         File stylesCss = new File(themeFolder, \"styles.css\");\n-        JsonObject themeJson = ThemeUtils\n+        JsonNode themeJson = ThemeUtils\n                 .getThemeJson(themeName, ApplicationConfiguration.get(context))\n                 .orElse(null);\n \n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/AbstractNodeUpdatePackagesTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/AbstractNodeUpdatePackagesTest.java\nindex 92967b3187a..b73a15027e9 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/AbstractNodeUpdatePackagesTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/AbstractNodeUpdatePackagesTest.java\n@@ -28,6 +28,8 @@\n import java.util.Map;\n import java.util.Optional;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.FileUtils;\n import org.junit.Assert;\n import org.junit.Before;\n@@ -37,6 +39,7 @@\n import org.mockito.MockedStatic;\n import org.mockito.Mockito;\n \n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.Constants;\n import com.vaadin.flow.server.Platform;\n import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n@@ -45,9 +48,6 @@\n import com.vaadin.flow.testutil.FrontendStubs;\n import com.vaadin.tests.util.MockOptions;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-\n import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n import static com.vaadin.flow.server.Constants.TARGET;\n import static com.vaadin.flow.server.frontend.NodeUpdater.DEP_NAME_FLOW_DEPS;\n@@ -143,12 +143,12 @@ public void pnpmIsInUse_packageJsonContainsFlowDeps_removeFlowDeps()\n         packageUpdater.execute();\n \n         // Add flowDeps\n-        JsonObject json = packageUpdater.getPackageJson();\n+        ObjectNode json = packageUpdater.getPackageJson();\n         getDependencies(json).put(DEP_NAME_FLOW_DEPS, \"target/frontend\");\n         json.put(VAADIN_APP_PACKAGE_HASH,\n                 \"e05bfd4b6c6bd20c806b3a0ad1be521bfd775c9b6f8f9c997b0ad1fda834805b\");\n         Files.write(packageJson.toPath(),\n-                Collections.singletonList(json.toJson()));\n+                Collections.singletonList(json.toString()));\n \n         options.withEnablePnpm(true);\n         packageUpdater = new TaskUpdatePackages(getScanner(classFinder),\n@@ -169,12 +169,12 @@ public void pnpmIsInUse_packageJsonContainsFlowFrontend_removeFlowFrontend()\n         packageUpdater.execute();\n \n         // Add old dep\n-        JsonObject json = packageUpdater.getPackageJson();\n+        ObjectNode json = packageUpdater.getPackageJson();\n         getDependencies(json).put(DEP_NAME_FLOW_JARS, \"target/flow-frontend\");\n         json.put(VAADIN_APP_PACKAGE_HASH,\n                 \"e05bfd4b6c6bd20c806b3a0ad1be521bfd775c9b6f8f9c997b0ad1fda834805b\");\n         Files.write(packageJson.toPath(),\n-                Collections.singletonList(json.toJson()));\n+                Collections.singletonList(json.toString()));\n \n         options.withEnablePnpm(true);\n         packageUpdater = new TaskUpdatePackages(getScanner(classFinder),\n@@ -212,11 +212,11 @@ public void npmIsInUse_packageJsonContainsFlowDeps_removeFlowDeps()\n         packageCreator.execute();\n         packageUpdater.execute();\n \n-        JsonObject packJsonObject = getPackageJson(packageJson);\n-        JsonObject deps = packJsonObject.get(DEPENDENCIES);\n+        JsonNode packJsonNode = getPackageJson(packageJson);\n+        ObjectNode deps = (ObjectNode) packJsonNode.get(DEPENDENCIES);\n         deps.put(DEP_NAME_FLOW_DEPS, \"foobar\");\n \n-        writePackageJson(packageJson, packJsonObject);\n+        writePackageJson(packageJson, packJsonNode);\n \n         packageUpdater.execute();\n \n@@ -230,11 +230,11 @@ public void npmIsInUse_packageJsonContainsFlowFrontend_removeFlowFrontend()\n         packageCreator.execute();\n         packageUpdater.execute();\n \n-        JsonObject packJsonObject = getPackageJson(packageJson);\n-        JsonObject deps = packJsonObject.get(DEPENDENCIES);\n+        JsonNode packJsonNode = getPackageJson(packageJson);\n+        ObjectNode deps = (ObjectNode) packJsonNode.get(DEPENDENCIES);\n         deps.put(DEP_NAME_FLOW_JARS, \"foobar\");\n \n-        writePackageJson(packageJson, packJsonObject);\n+        writePackageJson(packageJson, packJsonNode);\n \n         packageUpdater.execute();\n \n@@ -265,14 +265,14 @@ public void unmatchedDevDependency_devDependencyIsRemoved()\n         packageUpdater.execute();\n \n         // Change the version\n-        JsonObject json = packageUpdater.getPackageJson();\n+        JsonNode json = packageUpdater.getPackageJson();\n         final String old_dependency = \"old_dependency\";\n-        json.getObject(VAADIN_DEP_KEY).getObject(DEV_DEPENDENCIES)\n+        ((ObjectNode) json.get(VAADIN_DEP_KEY).get(DEV_DEPENDENCIES))\n                 .put(old_dependency, \"1.1.1\");\n-        json.getObject(DEV_DEPENDENCIES).put(old_dependency, \"1.1.1\");\n+        ((ObjectNode) json.get(DEV_DEPENDENCIES)).put(old_dependency, \"1.1.1\");\n \n         Files.write(packageJson.toPath(),\n-                Collections.singletonList(json.toJson()));\n+                Collections.singletonList(json.toString()));\n \n         // run it again with existing generated package.json and mismatched\n         // versions\n@@ -280,11 +280,11 @@ public void unmatchedDevDependency_devDependencyIsRemoved()\n \n         json = packageUpdater.getPackageJson();\n         Assert.assertFalse(\"Old dev dependency should be removed from vaadin\",\n-                json.getObject(VAADIN_DEP_KEY).getObject(DEV_DEPENDENCIES)\n-                        .hasKey(old_dependency));\n+                json.get(VAADIN_DEP_KEY).get(DEV_DEPENDENCIES)\n+                        .has(old_dependency));\n         Assert.assertFalse(\n                 \"Old dev dependency should be removed from devDependencies\",\n-                json.getObject(DEV_DEPENDENCIES).hasKey(old_dependency));\n+                json.get(DEV_DEPENDENCIES).has(old_dependency));\n     }\n \n     @Test // #10032\n@@ -294,16 +294,16 @@ public void oldVaadinDevDependency_missmatchWithDevDependency_vaadinDependencyIs\n         packageCreator.execute();\n \n         // Change the version\n-        JsonObject json = packageUpdater.getPackageJson();\n+        JsonNode json = packageUpdater.getPackageJson();\n         final String key = \"vite\";\n         final String version = packageUpdater.getDefaultDevDependencies()\n                 .get(key);\n-        json.getObject(VAADIN_DEP_KEY).getObject(DEV_DEPENDENCIES).put(key,\n+        ((ObjectNode) json.get(VAADIN_DEP_KEY).get(DEV_DEPENDENCIES)).put(key,\n                 \"v2.8.0\");\n-        json.getObject(DEV_DEPENDENCIES).put(key, version);\n+        ((ObjectNode) json.get(DEV_DEPENDENCIES)).put(key, version);\n \n         Files.write(packageJson.toPath(),\n-                Collections.singletonList(json.toJson()));\n+                Collections.singletonList(json.toString()));\n \n         // run it again to see that versions are updated\n         packageCreator.execute();\n@@ -311,10 +311,10 @@ public void oldVaadinDevDependency_missmatchWithDevDependency_vaadinDependencyIs\n         json = packageUpdater.getPackageJson();\n         Assert.assertEquals(\n                 \"Vaadin dependency should be updated to latest DevDependency\",\n-                version, json.getObject(VAADIN_DEP_KEY)\n-                        .getObject(DEV_DEPENDENCIES).getString(key));\n+                version, json.get(VAADIN_DEP_KEY).get(DEV_DEPENDENCIES).get(key)\n+                        .textValue());\n         Assert.assertEquals(\"DevDependency should stay the same as it was\",\n-                version, json.getObject(DEV_DEPENDENCIES).getString(key));\n+                version, json.get(DEV_DEPENDENCIES).get(key).textValue());\n     }\n \n     @Test\n@@ -386,7 +386,7 @@ public void versionsMatch_noCleanUp() throws IOException {\n         makeNodeModulesAndPackageLock();\n \n         Files.write(packageLock.toPath(),\n-                Collections.singletonList(stringify(makePackageLock(\"1.1.1\"))));\n+                Collections.singletonList(makePackageLock(\"1.1.1\").toString()));\n \n         packageUpdater.execute();\n \n@@ -463,20 +463,20 @@ public void generatePackageJson_sameDependenciesInDifferentOrder_updaterIsNotMod\n         packageUpdater.execute();\n \n         // Shuffle the dependencies.\n-        JsonObject json = getPackageJson(this.packageJson);\n-        JsonObject dependencies = json.getObject(DEPENDENCIES);\n-        List<String> dependencyKeys = Arrays.asList(dependencies.keys());\n+        ObjectNode json = (ObjectNode) getPackageJson(this.packageJson);\n+        JsonNode dependencies = json.get(DEPENDENCIES);\n+        List<String> dependencyKeys = JacksonUtils.getKeys(dependencies);\n \n         Collections.shuffle(dependencyKeys);\n \n-        JsonObject newDependencies = Json.createObject();\n-        dependencyKeys.forEach(\n-                key -> newDependencies.put(key, dependencies.getString(key)));\n+        ObjectNode newDependencies = JacksonUtils.createObjectNode();\n+        dependencyKeys.forEach(key -> newDependencies.put(key,\n+                dependencies.get(key).textValue()));\n \n-        json.put(DEPENDENCIES, newDependencies);\n+        json.set(DEPENDENCIES, newDependencies);\n \n         Files.write(this.packageJson.toPath(),\n-                Collections.singletonList(stringify(json)));\n+                Collections.singletonList(json.toString()));\n \n         // generate it one more time, the content will be different since\n         // packageCreator has not added its content\n@@ -608,18 +608,18 @@ public void userAddedDependencies_notCleanedByUpdater() throws IOException {\n         packageUpdater = new TaskUpdatePackages(frontendDependencies, options);\n \n         packageCreator.execute();\n-        JsonObject json = getPackageJson(packageJson);\n-        json.getObject(DEPENDENCIES).put(\"@custom/timer\", \"3.3.0\");\n+        JsonNode json = getPackageJson(packageJson);\n+        ((ObjectNode) json.get(DEPENDENCIES)).put(\"@custom/timer\", \"3.3.0\");\n \n         Files.write(packageJson.toPath(),\n-                Collections.singletonList(json.toJson()));\n+                Collections.singletonList(json.toString()));\n \n         packageUpdater.execute();\n \n-        JsonObject dependencies = getPackageJson(packageJson)\n-                .getObject(DEPENDENCIES);\n-        Assert.assertTrue(dependencies.hasKey(\"@custom/timer\"));\n-        Assert.assertEquals(\"3.3.0\", dependencies.getString(\"@custom/timer\"));\n+        JsonNode dependencies = getPackageJson(packageJson).get(DEPENDENCIES);\n+        Assert.assertTrue(dependencies.has(\"@custom/timer\"));\n+        Assert.assertEquals(\"3.3.0\",\n+                dependencies.get(\"@custom/timer\").textValue());\n     }\n \n     @Test\n@@ -671,12 +671,11 @@ public void frameworkManagedPackages_versionsAreUpdated()\n         packageCreator.execute();\n         packageUpdater.execute();\n \n-        JsonObject dependencies = getPackageJson(packageJson)\n-                .getObject(DEPENDENCIES);\n+        JsonNode dependencies = getPackageJson(packageJson).get(DEPENDENCIES);\n         for (Map.Entry<String, String> entry : packages.entrySet()) {\n-            Assert.assertTrue(dependencies.hasKey(entry.getKey()));\n+            Assert.assertTrue(dependencies.has(entry.getKey()));\n             Assert.assertEquals(entry.getValue(),\n-                    dependencies.getString(entry.getKey()));\n+                    dependencies.get(entry.getKey()).textValue());\n         }\n \n         packages.clear();\n@@ -688,11 +687,11 @@ public void frameworkManagedPackages_versionsAreUpdated()\n \n         packageUpdater.execute();\n \n-        dependencies = getPackageJson(packageJson).getObject(DEPENDENCIES);\n+        dependencies = getPackageJson(packageJson).get(DEPENDENCIES);\n         for (Map.Entry<String, String> entry : packages.entrySet()) {\n-            Assert.assertTrue(dependencies.hasKey(entry.getKey()));\n+            Assert.assertTrue(dependencies.has(entry.getKey()));\n             Assert.assertEquals(entry.getValue(),\n-                    dependencies.getString(entry.getKey()));\n+                    dependencies.get(entry.getKey()).textValue());\n         }\n     }\n \n@@ -718,29 +717,28 @@ public void removedFrameworkDependencies_dependencyIsRemoved()\n \n         packages.remove(\"@vaadin/vaadin-checkbox\");\n \n-        JsonObject dependencies = getPackageJson(packageJson)\n-                .getObject(DEPENDENCIES);\n+        JsonNode dependencies = getPackageJson(packageJson).get(DEPENDENCIES);\n         Assert.assertTrue(\"vaadin-checkbox is missing from the dependencies\",\n-                dependencies.hasKey(\"@vaadin/vaadin-checkbox\"));\n+                dependencies.has(\"@vaadin/vaadin-checkbox\"));\n \n-        dependencies = getPackageJson(packageJson).getObject(VAADIN_DEP_KEY)\n-                .getObject(DEPENDENCIES);\n+        dependencies = getPackageJson(packageJson).get(VAADIN_DEP_KEY)\n+                .get(DEPENDENCIES);\n         Assert.assertTrue(\"vaadin-checkbox is missing from vaadin.dependencies\",\n-                dependencies.hasKey(\"@vaadin/vaadin-checkbox\"));\n+                dependencies.has(\"@vaadin/vaadin-checkbox\"));\n \n         // generate it one more time, this should remove the checkbox\n         packageUpdater.execute();\n \n-        dependencies = getPackageJson(packageJson).getObject(DEPENDENCIES);\n+        dependencies = getPackageJson(packageJson).get(DEPENDENCIES);\n         Assert.assertFalse(\n                 \"vaadin-checkbox is still available in the dependencies\",\n-                dependencies.hasKey(\"@vaadin/vaadin-checkbox\"));\n+                dependencies.has(\"@vaadin/vaadin-checkbox\"));\n \n-        dependencies = getPackageJson(packageJson).getObject(VAADIN_DEP_KEY)\n-                .getObject(DEPENDENCIES);\n+        dependencies = getPackageJson(packageJson).get(VAADIN_DEP_KEY)\n+                .get(DEPENDENCIES);\n         Assert.assertFalse(\n                 \"vaadin-checkbox is still available in vaadin.dependencies\",\n-                dependencies.hasKey(\"@vaadin/vaadin-checkbox\"));\n+                dependencies.has(\"@vaadin/vaadin-checkbox\"));\n \n     }\n \n@@ -788,68 +786,68 @@ private void assertCleanUp() {\n     }\n \n     private void assertMainPackageJsonContent() throws IOException {\n-        JsonObject json = packageUpdater.getPackageJson();\n-        Assert.assertTrue(json.hasKey(\"name\"));\n-        Assert.assertTrue(json.hasKey(\"license\"));\n+        JsonNode json = packageUpdater.getPackageJson();\n+        Assert.assertTrue(json.has(\"name\"));\n+        Assert.assertTrue(json.has(\"license\"));\n \n-        JsonObject dependencies = json.getObject(DEPENDENCIES);\n+        JsonNode dependencies = json.get(DEPENDENCIES);\n         for (Map.Entry<String, String> entry : packageUpdater\n                 .getDefaultDependencies().entrySet()) {\n             Assert.assertTrue(\"Missing '\" + entry.getKey() + \"' package\",\n-                    dependencies.hasKey(entry.getKey()));\n+                    dependencies.has(entry.getKey()));\n         }\n \n-        JsonObject devDependencies = json.getObject(DEV_DEPENDENCIES);\n+        JsonNode devDependencies = json.get(DEV_DEPENDENCIES);\n         for (Map.Entry<String, String> entry : packageUpdater\n                 .getDefaultDevDependencies().entrySet()) {\n             Assert.assertTrue(\"Missing '\" + entry.getKey() + \"' package\",\n-                    devDependencies.hasKey(entry.getKey()));\n+                    devDependencies.has(entry.getKey()));\n         }\n \n-        Assert.assertFalse(dependencies.hasKey(DEP_NAME_FLOW_JARS));\n+        Assert.assertFalse(dependencies.has(DEP_NAME_FLOW_JARS));\n     }\n \n-    private JsonObject getDependencies(JsonObject json) {\n-        return json.getObject(DEPENDENCIES);\n+    private ObjectNode getDependencies(JsonNode json) {\n+        return (ObjectNode) json.get(DEPENDENCIES);\n     }\n \n-    private JsonObject makePackageLock(String version) {\n-        JsonObject object = Json.createObject();\n-        JsonObject deps = Json.createObject();\n-        JsonObject shrinkWrap = Json.createObject();\n-        object.put(DEPENDENCIES, deps);\n+    private ObjectNode makePackageLock(String version) {\n+        ObjectNode object = JacksonUtils.createObjectNode();\n+        JsonNode deps = JacksonUtils.createObjectNode();\n+        ObjectNode shrinkWrap = JacksonUtils.createObjectNode();\n+        object.set(DEPENDENCIES, deps);\n         shrinkWrap.put(\"version\", version);\n         return object;\n     }\n \n     private void assertPackageJsonFlowDeps() throws IOException {\n-        JsonObject packJsonObject = getPackageJson(packageJson);\n-        JsonObject deps = packJsonObject.get(DEPENDENCIES);\n+        JsonNode packJsonNode = getPackageJson(packageJson);\n+        JsonNode deps = packJsonNode.get(DEPENDENCIES);\n         // No Flow deps\n-        Assert.assertFalse(deps.hasKey(DEP_NAME_FLOW_DEPS));\n+        Assert.assertFalse(deps.has(DEP_NAME_FLOW_DEPS));\n         // No Flow resources\n-        Assert.assertFalse(deps.hasKey(DEP_NAME_FLOW_JARS));\n+        Assert.assertFalse(deps.has(DEP_NAME_FLOW_JARS));\n         // No old package hash\n-        Assert.assertFalse(deps.hasKey(VAADIN_APP_PACKAGE_HASH));\n+        Assert.assertFalse(deps.has(VAADIN_APP_PACKAGE_HASH));\n         // Contains initially generated default polymer dep\n-        Assert.assertTrue(deps.hasKey(\"@polymer/polymer\"));\n+        Assert.assertTrue(deps.has(\"@polymer/polymer\"));\n         // Contains new hash\n-        Assert.assertTrue(packJsonObject.getObject(\"vaadin\").hasKey(\"hash\"));\n+        Assert.assertTrue(packJsonNode.get(\"vaadin\").has(\"hash\"));\n     }\n \n-    JsonObject getPackageJson(File packageFile) throws IOException {\n-        JsonObject packageJson = null;\n+    JsonNode getPackageJson(File packageFile) throws IOException {\n+        JsonNode packageJson = null;\n         if (packageFile.exists()) {\n             String fileContent = FileUtils.readFileToString(packageFile,\n                     UTF_8.name());\n-            packageJson = Json.parse(fileContent);\n+            packageJson = JacksonUtils.readTree(fileContent);\n         }\n         return packageJson;\n     }\n \n-    void writePackageJson(File packageJsonFile, JsonObject packageJson)\n+    void writePackageJson(File packageJsonFile, JsonNode packageJson)\n             throws IOException {\n-        FileIOUtils.writeIfChanged(packageJsonFile, packageJson.toJson());\n+        FileIOUtils.writeIfChanged(packageJsonFile, packageJson.toString());\n     }\n \n }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/BundleUtilsTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/BundleUtilsTest.java\nindex b5ed460be22..0f2245f60b1 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/BundleUtilsTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/BundleUtilsTest.java\n@@ -9,6 +9,9 @@\n import java.util.List;\n import java.util.Set;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.FileUtils;\n import org.junit.After;\n import org.junit.Assert;\n@@ -19,13 +22,10 @@\n import org.mockito.Mockito;\n \n import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.Constants;\n import com.vaadin.tests.util.MockOptions;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n-\n import static com.vaadin.flow.server.Constants.DEV_BUNDLE_JAR_PATH;\n \n public class BundleUtilsTest {\n@@ -99,18 +99,18 @@ public void themeVariantsFromJarHandled() {\n     }\n \n     private void mockStatsJson(String... imports) {\n-        JsonObject statsJson = Json.createObject();\n-        JsonArray importsArray = Json.createArray();\n-        for (int i = 0; i < imports.length; i++) {\n-            importsArray.set(i, imports[i]);\n+        ObjectNode statsJson = JacksonUtils.createObjectNode();\n+        ArrayNode importsArray = JacksonUtils.createArrayNode();\n+        for (String anImport : imports) {\n+            importsArray.add(anImport);\n         }\n \n-        statsJson.put(\"bundleImports\", importsArray);\n+        statsJson.set(\"bundleImports\", importsArray);\n \n         mockStatsJsonLoading(statsJson);\n     }\n \n-    private void mockStatsJsonLoading(JsonObject statsJson) {\n+    private void mockStatsJsonLoading(JsonNode statsJson) {\n         MockedStatic<BundleUtils> mock = Mockito.mockStatic(BundleUtils.class);\n         mock.when(() -> BundleUtils.loadStatsJson()).thenReturn(statsJson);\n         mock.when(() -> BundleUtils.loadBundleImports()).thenCallRealMethod();\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/BundleValidationTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/BundleValidationTest.java\nindex add29e12e0a..651e5eeba87 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/BundleValidationTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/BundleValidationTest.java\n@@ -10,6 +10,9 @@\n import java.util.List;\n import java.util.Map;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n import org.junit.After;\n@@ -25,6 +28,7 @@\n import org.mockito.Mockito;\n \n import com.vaadin.flow.component.page.AppShellConfigurator;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.Constants;\n import com.vaadin.flow.server.LoadDependenciesOnStartup;\n import com.vaadin.flow.server.Mode;\n@@ -36,10 +40,6 @@\n import com.vaadin.flow.theme.ThemeDefinition;\n import com.vaadin.tests.util.MockOptions;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n-\n import static com.vaadin.flow.server.Constants.DEV_BUNDLE_JAR_PATH;\n import static com.vaadin.flow.server.Constants.PROD_BUNDLE_JAR_PATH;\n import static com.vaadin.flow.server.frontend.FrontendUtils.DEFAULT_FRONTEND_DIR;\n@@ -136,21 +136,21 @@ public void teardown() {\n         }\n     }\n \n-    private JsonObject getBasicStats() {\n-        JsonObject stats = Json.createObject();\n+    private ObjectNode getBasicStats() {\n+        ObjectNode stats = JacksonUtils.createObjectNode();\n \n-        JsonObject packageJsonDependencies = Json.createObject();\n-        JsonObject frontendHashes = Json.createObject();\n-        JsonObject themeJsonContents = Json.createObject();\n+        ObjectNode packageJsonDependencies = JacksonUtils.createObjectNode();\n+        ObjectNode frontendHashes = JacksonUtils.createObjectNode();\n+        ObjectNode themeJsonContents = JacksonUtils.createObjectNode();\n \n-        JsonArray entryScripts = Json.createArray();\n-        JsonArray bundleImports = Json.createArray();\n+        ArrayNode entryScripts = JacksonUtils.createArrayNode();\n+        ArrayNode bundleImports = JacksonUtils.createArrayNode();\n \n-        stats.put(PACKAGE_JSON_DEPENDENCIES, packageJsonDependencies);\n-        stats.put(ENTRY_SCRIPTS, entryScripts);\n-        stats.put(BUNDLE_IMPORTS, bundleImports);\n-        stats.put(FRONTEND_HASHES, frontendHashes);\n-        stats.put(THEME_JSON_CONTENTS, themeJsonContents);\n+        stats.set(PACKAGE_JSON_DEPENDENCIES, packageJsonDependencies);\n+        stats.set(ENTRY_SCRIPTS, entryScripts);\n+        stats.set(BUNDLE_IMPORTS, bundleImports);\n+        stats.set(FRONTEND_HASHES, frontendHashes);\n+        stats.set(THEME_JSON_CONTENTS, themeJsonContents);\n         stats.put(PACKAGE_JSON_HASH, \"aHash\");\n \n         NodeUpdater nodeUpdater = new NodeUpdater(\n@@ -168,8 +168,7 @@ public void execute() {\n                     dependency.getValue());\n         }\n \n-        bundleImports.set(bundleImports.length(),\n-                \"./generated/jar-resources/theme-util.js\");\n+        bundleImports.add(\"./generated/jar-resources/theme-util.js\");\n         frontendHashes.put(\"theme-util.js\",\n                 BundleValidationUtil.calculateHash(THEME_UTIL_JS));\n         jarResources.put(\"theme-util.js\", THEME_UTIL_JS);\n@@ -215,9 +214,9 @@ public void hashesMatch_noNpmPackages_noCompilationRequired()\n         Mockito.when(depScanner.getPackages())\n                 .thenReturn(Collections.emptyMap());\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"@vaadin/router\",\n-                \"1.7.5\");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\"@vaadin/router\", \"1.7.5\");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -244,9 +243,9 @@ public void loadDependenciesOnStartup_annotatedClassInProject_compilationRequire\n         Mockito.when(depScanner.getPackages())\n                 .thenReturn(Collections.emptyMap());\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"@vaadin/router\",\n-                \"1.7.5\");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\"@vaadin/router\", \"1.7.5\");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -279,9 +278,9 @@ public void hashesMatch_statsMissingNpmPackages_compilationRequired()\n         packages.put(\"@vaadin/text\", \"1.0.0\");\n         Mockito.when(depScanner.getPackages()).thenReturn(packages);\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"@vaadin/router\",\n-                \"1.7.5\");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\"@vaadin/router\", \"1.7.5\");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -315,9 +314,9 @@ public void hashesMatch_statsMissingPackageJsonPackage_compilationRequired()\n         Mockito.when(depScanner.getPackages())\n                 .thenReturn(Collections.emptyMap());\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"@vaadin/router\",\n-                \"1.7.5\");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\"@vaadin/router\", \"1.7.5\");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -343,10 +342,11 @@ public void hashesMatch_packageJsonMissingNpmPackages_statsHasJsonPackages_noCom\n         Mockito.when(depScanner.getPackages())\n                 .thenReturn(Collections.singletonMap(\"@vaadin/text\", \"1.0.0\"));\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"@vaadin/router\",\n-                \"1.7.5\");\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"@vaadin/text\", \"1.0.0\");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\"@vaadin/router\", \"1.7.5\");\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES)).put(\"@vaadin/text\",\n+                \"1.0.0\");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -388,7 +388,7 @@ public void packageJsonContainsOldVersion_versionsJsonUpdates_noCompilation()\n                       \"jsVersion\": \"2.0.3\",\n                       \"npmName\": \"@vaadin/router\",\n                       \"releasenotes\": true\n-                    },\n+                    }\n                   },\n                   \"platform\": \"123-SNAPSHOT\"\n                 }\n@@ -397,9 +397,9 @@ public void packageJsonContainsOldVersion_versionsJsonUpdates_noCompilation()\n         Mockito.when(finder.getResource(Constants.VAADIN_CORE_VERSIONS_JSON))\n                 .thenReturn(versions.toURI().toURL());\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"@vaadin/router\",\n-                \"2.0.3\");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\"@vaadin/router\", \"2.0.3\");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -436,10 +436,11 @@ public void packageJsonContainsOldVersionsAfterVersionUpdate_updatedStatsMatches\n         packages.put(\"@vaadin/text\", \"2.1.0\");\n         Mockito.when(depScanner.getPackages()).thenReturn(packages);\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"@vaadin/router\",\n-                \"1.9.2\");\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"@vaadin/text\", \"2.1.0\");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\"@vaadin/router\", \"1.9.2\");\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES)).put(\"@vaadin/text\",\n+                \"2.1.0\");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -473,14 +474,15 @@ public void noPackageJsonHashAfterCleanFrontend_statsHasDefaultJsonPackages_noCo\n         Mockito.when(depScanner.getPackages())\n                 .thenReturn(Collections.singletonMap(\"@vaadin/text\", \"1.0.0\"));\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"@vaadin/router\",\n-                \"1.7.5\");\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"@vaadin/text\", \"1.0.0\");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\"@vaadin/router\", \"1.7.5\");\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES)).put(\"@vaadin/text\",\n+                \"1.0.0\");\n         stats.put(PACKAGE_JSON_HASH,\n                 \"af45419b27dcb44b875197df4347b97316cc8fa6055458223a73aedddcfe7cc6\");\n-        stats.getArray(ENTRY_SCRIPTS).set(0,\n-                \"VAADIN/build/indexhtml-aa31f040.js\");\n+        ((ArrayNode) stats.get(ENTRY_SCRIPTS))\n+                .add(\"VAADIN/build/indexhtml-aa31f040.js\");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -514,9 +516,9 @@ public void noPackageJsonHashAfterCleanFrontend_statsMissingDefaultJsonPackages_\n         Mockito.when(depScanner.getPackages())\n                 .thenReturn(Collections.singletonMap(\"@vaadin/text\", \"1.0.0\"));\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"@vaadin/router\",\n-                \"1.7.5\");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\"@vaadin/router\", \"1.7.5\");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -550,9 +552,9 @@ public void hashesMatch_packageJsonHasRange_statsHasFixed_noCompilationRequired(\n         Mockito.when(depScanner.getPackages())\n                 .thenReturn(Collections.emptyMap());\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"@vaadin/router\",\n-                \"1.7.5\");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\"@vaadin/router\", \"1.7.5\");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -586,9 +588,9 @@ public void hashesMatch_packageJsonHasTildeRange_statsHasNewerFixed_noCompilatio\n         Mockito.when(depScanner.getPackages())\n                 .thenReturn(Collections.emptyMap());\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"@vaadin/router\",\n-                \"1.7.6\");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\"@vaadin/router\", \"1.7.6\");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -597,8 +599,8 @@ public void hashesMatch_packageJsonHasTildeRange_statsHasNewerFixed_noCompilatio\n         Assert.assertFalse(\"No compilation if tilde range only patch update\",\n                 needsBuild);\n \n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"@vaadin/router\",\n-                \"1.8.1\");\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\"@vaadin/router\", \"1.8.1\");\n         setupFrontendUtilsMock(stats);\n \n         needsBuild = BundleValidationUtil.needsBuild(options, depScanner, mode);\n@@ -630,9 +632,9 @@ public void hashesMatch_packageJsonHasCaretRange_statsHasNewerFixed_noCompilatio\n         Mockito.when(depScanner.getPackages())\n                 .thenReturn(Collections.emptyMap());\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"@vaadin/router\",\n-                \"1.8.6\");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\"@vaadin/router\", \"1.8.6\");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -642,8 +644,8 @@ public void hashesMatch_packageJsonHasCaretRange_statsHasNewerFixed_noCompilatio\n                 \"No compilation if caret range only minor version update\",\n                 needsBuild);\n \n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"@vaadin/router\",\n-                \"2.0.0\");\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\"@vaadin/router\", \"2.0.0\");\n         setupFrontendUtilsMock(stats);\n \n         needsBuild = BundleValidationUtil.needsBuild(options, depScanner, mode);\n@@ -680,9 +682,9 @@ public void packageJsonHasOldPlatformDependencies_statsDoesNotHaveThem_noCompila\n         Mockito.when(depScanner.getPackages())\n                 .thenReturn(Collections.emptyMap());\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"@vaadin/accordion\",\n-                \"24.0.0.beta2\");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\"@vaadin/accordion\", \"24.0.0.beta2\");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -702,13 +704,14 @@ public void noPackageJson_defaultPackagesAndModulesInStats_noBuildNeeded() {\n \n         String defaultHash = BundleValidationUtil\n                 .getDefaultPackageJson(options, depScanner, null)\n-                .getObject(NodeUpdater.VAADIN_DEP_KEY)\n-                .getString(NodeUpdater.HASH_KEY);\n-\n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"@vaadin/router\",\n-                \"1.7.5\");\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"@vaadin/text\", \"1.0.0\");\n+                .get(NodeUpdater.VAADIN_DEP_KEY).get(NodeUpdater.HASH_KEY)\n+                .textValue();\n+\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\"@vaadin/router\", \"1.7.5\");\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES)).put(\"@vaadin/text\",\n+                \"1.0.0\");\n         stats.put(PACKAGE_JSON_HASH, defaultHash);\n \n         setupFrontendUtilsMock(stats);\n@@ -728,12 +731,12 @@ public void noPackageJson_defaultPackagesInStats_missingNpmModules_buildNeeded()\n \n         String defaultHash = BundleValidationUtil\n                 .getDefaultPackageJson(options, depScanner, null)\n-                .getObject(NodeUpdater.VAADIN_DEP_KEY)\n-                .getString(NodeUpdater.HASH_KEY);\n+                .get(NodeUpdater.VAADIN_DEP_KEY).get(NodeUpdater.HASH_KEY)\n+                .textValue();\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"@vaadin/router\",\n-                \"1.7.5\");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\"@vaadin/router\", \"1.7.5\");\n         stats.put(PACKAGE_JSON_HASH, defaultHash);\n \n         setupFrontendUtilsMock(stats);\n@@ -754,12 +757,12 @@ public void noPackageJson_defaultPackagesInStats_noBuildNeeded() {\n \n         String defaultHash = BundleValidationUtil\n                 .getDefaultPackageJson(options, depScanner, null)\n-                .getObject(NodeUpdater.VAADIN_DEP_KEY)\n-                .getString(NodeUpdater.HASH_KEY);\n+                .get(NodeUpdater.VAADIN_DEP_KEY).get(NodeUpdater.HASH_KEY)\n+                .textValue();\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"@vaadin/router\",\n-                \"1.7.5\");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\"@vaadin/router\", \"1.7.5\");\n         stats.put(PACKAGE_JSON_HASH, defaultHash);\n \n         setupFrontendUtilsMock(stats);\n@@ -797,14 +800,14 @@ public void generatedFlowImports_bundleMissingImports_buildRequired()\n                         Collections.singletonList(\n                                 \"@polymer/paper-checkbox/paper-checkbox.js\")));\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"@vaadin/router\",\n-                \"1.8.6\");\n-        JsonArray bundleImports = stats.getArray(BUNDLE_IMPORTS);\n-        bundleImports.set(0,\n-                \"@Frontend/generated/jar-resources/dndConnector-es6.js\");\n-        bundleImports.set(1, \"@polymer/paper-input/paper-input.js\");\n-        bundleImports.set(2, \"@vaadin/common-frontend/ConnectionIndicator.js\");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\"@vaadin/router\", \"1.8.6\");\n+        ArrayNode bundleImports = (ArrayNode) stats.get(BUNDLE_IMPORTS);\n+        bundleImports\n+                .add(\"@Frontend/generated/jar-resources/dndConnector-es6.js\");\n+        bundleImports.add(\"@polymer/paper-input/paper-input.js\");\n+        bundleImports.add(\"@vaadin/common-frontend/ConnectionIndicator.js\");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -841,18 +844,15 @@ public void generatedFlowImports_bundleHasAllImports_noBuildRequired()\n                         Collections.singletonList(\n                                 \"@polymer/paper-checkbox/paper-checkbox.js\")));\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"@vaadin/router\",\n-                \"1.8.6\");\n-        JsonArray bundleImports = stats.getArray(BUNDLE_IMPORTS);\n-        bundleImports.set(bundleImports.length(),\n-                \"@polymer/paper-checkbox/paper-checkbox.js\");\n-        bundleImports.set(bundleImports.length(),\n-                \"@polymer/paper-input/paper-input.js\");\n-        bundleImports.set(bundleImports.length(),\n-                \"@vaadin/grid/theme/lumo/vaadin-grid.js\");\n-        bundleImports.set(bundleImports.length(),\n-                \"Frontend/generated/jar-resources/dndConnector-es6.js\");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\"@vaadin/router\", \"1.8.6\");\n+        ArrayNode bundleImports = (ArrayNode) stats.get(BUNDLE_IMPORTS);\n+        bundleImports.add(\"@polymer/paper-checkbox/paper-checkbox.js\");\n+        bundleImports.add(\"@polymer/paper-input/paper-input.js\");\n+        bundleImports.add(\"@vaadin/grid/theme/lumo/vaadin-grid.js\");\n+        bundleImports\n+                .add(\"Frontend/generated/jar-resources/dndConnector-es6.js\");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -890,18 +890,15 @@ public void themedGeneratedFlowImports_bundleUsesTheme_noBuildRequired()\n         Mockito.when(depScanner.getTheme())\n                 .thenReturn(new NodeTestComponents.LumoTest());\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"@vaadin/router\",\n-                \"1.8.6\");\n-        JsonArray bundleImports = stats.getArray(BUNDLE_IMPORTS);\n-        bundleImports.set(bundleImports.length(),\n-                \"@polymer/paper-checkbox/paper-checkbox.js\");\n-        bundleImports.set(bundleImports.length(),\n-                \"@polymer/paper-input/paper-input.js\");\n-        bundleImports.set(bundleImports.length(),\n-                \"@vaadin/grid/theme/lumo/vaadin-grid.js\");\n-        bundleImports.set(bundleImports.length(),\n-                \"Frontend/generated/jar-resources/dndConnector-es6.js\");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\"@vaadin/router\", \"1.8.6\");\n+        ArrayNode bundleImports = (ArrayNode) stats.get(BUNDLE_IMPORTS);\n+        bundleImports.add(\"@polymer/paper-checkbox/paper-checkbox.js\");\n+        bundleImports.add(\"@polymer/paper-input/paper-input.js\");\n+        bundleImports.add(\"@vaadin/grid/theme/lumo/vaadin-grid.js\");\n+        bundleImports\n+                .add(\"Frontend/generated/jar-resources/dndConnector-es6.js\");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -936,13 +933,12 @@ public void frontendFileHashMatches_noBundleRebuild() throws IOException {\n                 .singletonMap(ChunkInfo.GLOBAL, Collections.singletonList(\n                         \"Frontend/generated/jar-resources/TodoTemplate.js\")));\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"@vaadin/router\",\n-                \"1.8.6\");\n-        JsonArray bundleImports = stats.getArray(BUNDLE_IMPORTS);\n-        bundleImports.set(bundleImports.length(),\n-                \"./generated/jar-resources/TodoTemplate.js\");\n-        stats.getObject(FRONTEND_HASHES).put(\"TodoTemplate.js\",\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\"@vaadin/router\", \"1.8.6\");\n+        ArrayNode bundleImports = (ArrayNode) stats.get(BUNDLE_IMPORTS);\n+        bundleImports.add(\"./generated/jar-resources/TodoTemplate.js\");\n+        ((ObjectNode) stats.get(FRONTEND_HASHES)).put(\"TodoTemplate.js\",\n                 BundleValidationUtil.calculateHash(fileContent));\n         jarResources.put(\"TodoTemplate.js\", fileContent);\n \n@@ -981,11 +977,11 @@ public void noFrontendFileHash_bundleRebuild() throws IOException {\n                 .singletonMap(ChunkInfo.GLOBAL, Collections.singletonList(\n                         \"Frontend/generated/jar-resources/TodoTemplate.js\")));\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"@vaadin/router\",\n-                \"1.8.6\");\n-        stats.getArray(BUNDLE_IMPORTS).set(0,\n-                \"Frontend/generated/jar-resources/TodoTemplate.js\");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\"@vaadin/router\", \"1.8.6\");\n+        ((ArrayNode) stats.get(BUNDLE_IMPORTS))\n+                .add(\"Frontend/generated/jar-resources/TodoTemplate.js\");\n \n         devBundleUtils.when(() -> DevBundleUtils\n                 .getDevBundleFolder(Mockito.any(), Mockito.any()))\n@@ -998,7 +994,7 @@ public void noFrontendFileHash_bundleRebuild() throws IOException {\n         devBundleUtils\n                 .when(() -> DevBundleUtils.findBundleStatsJson(\n                         temporaryFolder.getRoot(), \"target\"))\n-                .thenReturn(stats.toJson());\n+                .thenReturn(stats.toString());\n \n         boolean needsBuild = BundleValidationUtil.needsBuild(options,\n                 depScanner, mode);\n@@ -1030,12 +1026,12 @@ public void frontendFileHashMissmatch_bundleRebuild() throws IOException {\n                 .singletonMap(ChunkInfo.GLOBAL, Collections.singletonList(\n                         \"Frontend/generated/jar-resources/TodoTemplate.js\")));\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"@vaadin/router\",\n-                \"1.8.6\");\n-        stats.getArray(BUNDLE_IMPORTS).set(0,\n-                \"Frontend/generated/jar-resources/TodoTemplate.js\");\n-        stats.getObject(FRONTEND_HASHES).put(\"TodoTemplate.js\",\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\"@vaadin/router\", \"1.8.6\");\n+        ((ArrayNode) (ArrayNode) stats.get(BUNDLE_IMPORTS))\n+                .add(\"Frontend/generated/jar-resources/TodoTemplate.js\");\n+        ((ObjectNode) stats.get(FRONTEND_HASHES)).put(\"TodoTemplate.js\",\n                 \"dea5180dd21d2f18d1472074cd5305f60b824e557dae480fb66cdf3ea73edc65\");\n \n         devBundleUtils.when(() -> DevBundleUtils\n@@ -1049,7 +1045,7 @@ public void frontendFileHashMissmatch_bundleRebuild() throws IOException {\n         devBundleUtils\n                 .when(() -> DevBundleUtils.findBundleStatsJson(\n                         temporaryFolder.getRoot(), \"target\"))\n-                .thenReturn(stats.toJson());\n+                .thenReturn(stats.toString());\n \n         boolean needsBuild = BundleValidationUtil.needsBuild(options,\n                 depScanner, mode);\n@@ -1077,10 +1073,10 @@ public void cssImportWithInline_statsAndImportsMatchAndNoBundleRebuild()\n                 Collections.singletonMap(ChunkInfo.GLOBAL, Collections\n                         .singletonList(\"Frontend/my-styles.css?inline\")));\n \n-        JsonObject stats = getBasicStats();\n-        JsonArray bundleImports = stats.getArray(BUNDLE_IMPORTS);\n-        bundleImports.set(bundleImports.length(), \"Frontend/my-styles.css\");\n-        stats.getObject(FRONTEND_HASHES).put(\"my-styles.css\",\n+        ObjectNode stats = getBasicStats();\n+        ArrayNode bundleImports = (ArrayNode) stats.get(BUNDLE_IMPORTS);\n+        bundleImports.add(\"Frontend/my-styles.css\");\n+        ((ObjectNode) stats.get(FRONTEND_HASHES)).put(\"my-styles.css\",\n                 \"0d94fe659d24e1e56872b47fc98d9f09227e19816c62a3db709bad347fbd0cdd\");\n \n         setupFrontendUtilsMock(stats);\n@@ -1104,9 +1100,11 @@ public void projectFrontendFileChange_bundleRebuild() throws IOException {\n                 Collections.singletonMap(ChunkInfo.GLOBAL, Collections\n                         .singletonList(\"Frontend/views/lit-view.ts\")));\n \n-        JsonObject stats = getBasicStats();\n-        stats.getArray(BUNDLE_IMPORTS).set(0, \"Frontend/views/lit-view.ts\");\n-        stats.getObject(FRONTEND_HASHES).put(\"views/lit-view.ts\", \"old_hash\");\n+        ObjectNode stats = getBasicStats();\n+        ((ArrayNode) stats.get(BUNDLE_IMPORTS))\n+                .add(\"Frontend/views/lit-view.ts\");\n+        ((ObjectNode) stats.get(FRONTEND_HASHES)).put(\"views/lit-view.ts\",\n+                \"old_hash\");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -1128,10 +1126,10 @@ public void projectFrontendFileNotChanged_noBundleRebuild()\n                 Collections.singletonMap(ChunkInfo.GLOBAL, Collections\n                         .singletonList(\"Frontend/views/lit-view.ts\")));\n \n-        JsonObject stats = getBasicStats();\n-        JsonArray bundleImports = stats.getArray(BUNDLE_IMPORTS);\n-        bundleImports.set(bundleImports.length(), \"Frontend/views/lit-view.ts\");\n-        stats.getObject(FRONTEND_HASHES).put(\"views/lit-view.ts\",\n+        ObjectNode stats = getBasicStats();\n+        ArrayNode bundleImports = (ArrayNode) stats.get(BUNDLE_IMPORTS);\n+        bundleImports.add(\"Frontend/views/lit-view.ts\");\n+        ((ObjectNode) stats.get(FRONTEND_HASHES)).put(\"views/lit-view.ts\",\n                 \"eaf04adbc43cb363f6b58c45c6e0e8151084941247abac9493beed8d29f08add\");\n \n         setupFrontendUtilsMock(stats);\n@@ -1153,9 +1151,10 @@ public void projectFrontendFileDeleted_bundleRebuild() throws IOException {\n                 Collections.singletonMap(ChunkInfo.GLOBAL, Collections\n                         .singletonList(\"Frontend/views/lit-view.ts\")));\n \n-        JsonObject stats = getBasicStats();\n-        stats.getArray(BUNDLE_IMPORTS).set(0, \"Frontend/views/lit-view.ts\");\n-        stats.getObject(FRONTEND_HASHES).put(\"views/lit-view.ts\",\n+        ObjectNode stats = getBasicStats();\n+        ((ArrayNode) stats.get(BUNDLE_IMPORTS))\n+                .add(\"Frontend/views/lit-view.ts\");\n+        ((ObjectNode) stats.get(FRONTEND_HASHES)).put(\"views/lit-view.ts\",\n                 \"eaf04adbc43cb363f6b58c45c6e0e8151084941247abac9493beed8d29f08add\");\n \n         setupFrontendUtilsMock(stats);\n@@ -1174,7 +1173,7 @@ public void reusedTheme_noReusedThemes_noBundleRebuild()\n         final FrontendDependenciesScanner depScanner = Mockito\n                 .mock(FrontendDependenciesScanner.class);\n \n-        JsonObject stats = getBasicStats();\n+        ObjectNode stats = getBasicStats();\n         stats.remove(THEME_JSON_CONTENTS);\n \n         setupFrontendUtilsMock(stats);\n@@ -1243,8 +1242,8 @@ public void reusedTheme_previouslyAddedThemes_justAddedNewTheme_bundleRebuild()\n \n         final FrontendDependenciesScanner depScanner = Mockito\n                 .mock(FrontendDependenciesScanner.class);\n-        JsonObject stats = getBasicStats();\n-        stats.getObject(THEME_JSON_CONTENTS).put(\"other-theme\",\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(THEME_JSON_CONTENTS)).put(\"other-theme\",\n                 \"other-theme-hash\");\n \n         setupFrontendUtilsMock(stats);\n@@ -1269,8 +1268,8 @@ public void reusedTheme_previouslyAddedThemes_assetsUpdate_bundleRebuild()\n         final FrontendDependenciesScanner depScanner = Mockito\n                 .mock(FrontendDependenciesScanner.class);\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(THEME_JSON_CONTENTS).put(\"reusable-theme\",\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(THEME_JSON_CONTENTS)).put(\"reusable-theme\",\n                 \"\"\"\n                         {\n                           \"importCss\": [\"@fortawesome/fontawesome-free/css/all.min.css\"],\n@@ -1304,8 +1303,8 @@ public void reusedTheme_previouslyAddedThemes_noUpdates_noBundleRebuild()\n         final FrontendDependenciesScanner depScanner = Mockito\n                 .mock(FrontendDependenciesScanner.class);\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(THEME_JSON_CONTENTS).put(\"reusable-theme\",\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(THEME_JSON_CONTENTS)).put(\"reusable-theme\",\n                 \"\"\"\n                         {\n                           \"importCss\": [\"@fortawesome/fontawesome-free/css/all.min.css\"],\n@@ -1346,7 +1345,7 @@ public void themeJsonUpdates_statsHasNoThemeJson_projectHasThemeJson_bundleRebui\n         Mockito.when(depScanner.getThemeDefinition())\n                 .thenReturn(themeDefinition);\n \n-        JsonObject stats = getBasicStats();\n+        ObjectNode stats = getBasicStats();\n         stats.remove(THEME_JSON_CONTENTS);\n \n         setupFrontendUtilsMock(stats);\n@@ -1375,8 +1374,8 @@ public void themeJsonUpdates_containsParentTheme_noBundleRebuild()\n         Mockito.when(depScanner.getThemeDefinition())\n                 .thenReturn(themeDefinition);\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(THEME_JSON_CONTENTS).put(bundleLocation,\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(THEME_JSON_CONTENTS)).put(bundleLocation,\n                 \"{\\\"lumoImports\\\": [\\\"typography\\\"]}\");\n \n         setupFrontendUtilsMock(stats);\n@@ -1403,8 +1402,8 @@ public void themeJsonUpdates_statsHasThemeJson_projectHasNoThemeJson_noBundleReb\n         new File(temporaryFolder.getRoot(),\n                 DEFAULT_FRONTEND_DIR + \"themes/my-theme\").mkdirs();\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(THEME_JSON_CONTENTS).put(bundleLocation,\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(THEME_JSON_CONTENTS)).put(bundleLocation,\n                 \"{\\\"lumoImports\\\": [\\\"typography\\\"]}\");\n \n         setupFrontendUtilsMock(stats);\n@@ -1440,8 +1439,8 @@ public void themeJsonUpdates_statsAndProjectThemeJsonEquals_noBundleRebuild()\n         Mockito.when(depScanner.getThemeDefinition())\n                 .thenReturn(themeDefinition);\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(THEME_JSON_CONTENTS).put(\"my-theme\", \"\"\"\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(THEME_JSON_CONTENTS)).put(\"my-theme\", \"\"\"\n                 {\n \n \n@@ -1492,8 +1491,8 @@ public void themeJsonUpdates_bundleMissesSomeEntries_bundleRebuild()\n         Mockito.when(depScanner.getThemeDefinition())\n                 .thenReturn(themeDefinition);\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(THEME_JSON_CONTENTS).put(bundleLocation,\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(THEME_JSON_CONTENTS)).put(bundleLocation,\n                 \"\"\"\n                         {\n                           \"lumoImports\": [\"typography\", \"color\", \"spacing\", \"badge\", \"utility\"],\n@@ -1535,8 +1534,8 @@ public void themeJsonUpdates_bundleHaveAllEntriesAndMore_noBundleRebuild()\n         Mockito.when(depScanner.getThemeDefinition())\n                 .thenReturn(themeDefinition);\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(THEME_JSON_CONTENTS).put(bundleLocation,\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(THEME_JSON_CONTENTS)).put(bundleLocation,\n                 \"\"\"\n                         {\n                           \"lumoImports\": [\"typography\", \"color\", \"spacing\", \"badge\", \"utility\"],\n@@ -1574,7 +1573,7 @@ public void themeJsonUpdates_noProjectThemeHashInStats_bundleRebuild()\n         Mockito.when(depScanner.getThemeDefinition())\n                 .thenReturn(themeDefinition);\n \n-        JsonObject stats = getBasicStats();\n+        ObjectNode stats = getBasicStats();\n \n         setupFrontendUtilsMock(stats);\n \n@@ -1603,8 +1602,8 @@ public void parentThemeInFrontend_parentHasEntriesInJson_bundleMissesSomeEntries\n         Mockito.when(depScanner.getThemeDefinition())\n                 .thenReturn(themeDefinition);\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(THEME_JSON_CONTENTS).put(bundleLocation, \"{}\");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(THEME_JSON_CONTENTS)).put(bundleLocation, \"{}\");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -1796,7 +1795,7 @@ public void indexTsAdded_rebuildRequired() throws IOException {\n         final FrontendDependenciesScanner depScanner = Mockito\n                 .mock(FrontendDependenciesScanner.class);\n \n-        JsonObject stats = getBasicStats();\n+        ObjectNode stats = getBasicStats();\n \n         setupFrontendUtilsMock(stats);\n \n@@ -1821,8 +1820,8 @@ public void changeInIndexTs_rebuildRequired() throws IOException {\n         final FrontendDependenciesScanner depScanner = Mockito\n                 .mock(FrontendDependenciesScanner.class);\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(FRONTEND_HASHES).put(FrontendUtils.INDEX_TS,\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(FRONTEND_HASHES)).put(FrontendUtils.INDEX_TS,\n                 \"15931fa8c20e3c060c8ea491831e95cc8463962700a9bfb82c8e3844cf608f04\");\n \n         setupFrontendUtilsMock(stats);\n@@ -1849,8 +1848,8 @@ public void indexTsDeleted_rebuildRequired() throws IOException {\n         final FrontendDependenciesScanner depScanner = Mockito\n                 .mock(FrontendDependenciesScanner.class);\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(FRONTEND_HASHES).put(FrontendUtils.INDEX_TS,\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(FRONTEND_HASHES)).put(FrontendUtils.INDEX_TS,\n                 \"15931fa8c20e3c060c8ea491831e95cc8463962700a9bfb82c8e3844cf608f04\");\n \n         setupFrontendUtilsMock(stats);\n@@ -1875,8 +1874,8 @@ public void indexHtmlNotChanged_rebuildNotRequired() throws IOException {\n                 StandardCharsets.UTF_8);\n         FileUtils.write(indexHtml, defaultIndexHtml, StandardCharsets.UTF_8);\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(FRONTEND_HASHES).put(INDEX_HTML,\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(FRONTEND_HASHES)).put(INDEX_HTML,\n                 BundleValidationUtil.calculateHash(defaultIndexHtml));\n \n         final FrontendDependenciesScanner depScanner = Mockito\n@@ -1907,8 +1906,8 @@ public void indexHtmlChanged_productionMode_rebuildRequired()\n         String customIndexHtml = defaultIndexHtml.replace(\"<body>\",\n                 \"<body><div>custom content</div>\");\n         FileUtils.write(indexHtml, customIndexHtml, StandardCharsets.UTF_8);\n-        JsonObject stats = getBasicStats();\n-        stats.getObject(FRONTEND_HASHES).put(INDEX_HTML,\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(FRONTEND_HASHES)).put(INDEX_HTML,\n                 BundleValidationUtil.calculateHash(defaultIndexHtml));\n \n         final FrontendDependenciesScanner depScanner = Mockito\n@@ -1940,8 +1939,8 @@ public void indexHtmlChanged_developmentMode_rebuildNotRequired()\n         String customIndexHtml = defaultIndexHtml.replace(\"<body>\",\n                 \"<body><div>custom content</div>\");\n         FileUtils.write(indexHtml, customIndexHtml, StandardCharsets.UTF_8);\n-        JsonObject stats = getBasicStats();\n-        stats.getObject(FRONTEND_HASHES).put(INDEX_HTML,\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(FRONTEND_HASHES)).put(INDEX_HTML,\n                 BundleValidationUtil.calculateHash(defaultIndexHtml));\n \n         final FrontendDependenciesScanner depScanner = Mockito\n@@ -1964,11 +1963,11 @@ public void standardVaadinComponent_notAddedToProjectAsJar_noRebuildRequired()\n         final FrontendDependenciesScanner depScanner = Mockito\n                 .mock(FrontendDependenciesScanner.class);\n \n-        JsonObject stats = getBasicStats();\n-        JsonArray bundleImports = stats.getArray(BUNDLE_IMPORTS);\n-        bundleImports.set(bundleImports.length(),\n+        ObjectNode stats = getBasicStats();\n+        ArrayNode bundleImports = (ArrayNode) stats.get(BUNDLE_IMPORTS);\n+        bundleImports.add(\n                 \"Frontend/generated/jar-resources/vaadin-spreadsheet/vaadin-spreadsheet.js\");\n-        stats.getObject(FRONTEND_HASHES).put(\n+        ((ObjectNode) stats.get(FRONTEND_HASHES)).put(\n                 \"vaadin-spreadsheet/vaadin-spreadsheet.js\",\n                 \"e545ad23a2d1d4b3a3370a0305dd71c15bbfc645216f50c6e327bd818b7484c4\");\n \n@@ -1995,7 +1994,7 @@ public void cssImport_cssInMetaInfResources_notThrow_bundleRequired()\n         Mockito.when(depScanner.getCss()).thenReturn(Collections.singletonMap(\n                 ChunkInfo.GLOBAL, Collections.singletonList(cssData)));\n \n-        JsonObject stats = getBasicStats();\n+        ObjectNode stats = getBasicStats();\n \n         setupFrontendUtilsMock(stats);\n \n@@ -2017,7 +2016,7 @@ public void flowFrontendPackageInPackageJson_noBundleRebuild()\n         final FrontendDependenciesScanner depScanner = Mockito\n                 .mock(FrontendDependenciesScanner.class);\n \n-        JsonObject stats = getBasicStats();\n+        ObjectNode stats = getBasicStats();\n \n         setupFrontendUtilsMock(stats);\n \n@@ -2037,8 +2036,9 @@ public void localPackageInPackageJson_notChanged_noBundleRebuild()\n         final FrontendDependenciesScanner depScanner = Mockito\n                 .mock(FrontendDependenciesScanner.class);\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"my-pkg\", \"file:my-pkg\");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES)).put(\"my-pkg\",\n+                \"file:my-pkg\");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -2058,8 +2058,8 @@ public void localPackageInPackageJson_differentReference_bundleRebuild()\n         final FrontendDependenciesScanner depScanner = Mockito\n                 .mock(FrontendDependenciesScanner.class);\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"my-pkg\",\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES)).put(\"my-pkg\",\n                 \"./another-folder\");\n \n         setupFrontendUtilsMock(stats);\n@@ -2080,8 +2080,9 @@ public void localPackageInPackageJson_parsableVersionInStats_bundleRebuild()\n         final FrontendDependenciesScanner depScanner = Mockito\n                 .mock(FrontendDependenciesScanner.class);\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"my-pkg\", \"1.0.0\");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES)).put(\"my-pkg\",\n+                \"1.0.0\");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -2101,8 +2102,9 @@ public void localPackageInStats_parsableVersionInPackageJson_bundleRebuild()\n         final FrontendDependenciesScanner depScanner = Mockito\n                 .mock(FrontendDependenciesScanner.class);\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"my-pkg\", \"file:my-pkg\");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES)).put(\"my-pkg\",\n+                \"file:my-pkg\");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -2138,9 +2140,9 @@ public void bundleMissesSomeEntries_devMode_skipBundleBuildSet_noBundleRebuild()\n         Mockito.when(depScanner.getPackages())\n                 .thenReturn(Collections.emptyMap());\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"@vaadin/router\",\n-                \"1.7.5\");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\"@vaadin/router\", \"1.7.5\");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -2192,24 +2194,21 @@ public void noDevFolder_compressedDevBundleExists_noBuildRequired()\n \n         File bundleSourceFolder = temporaryFolder.newFolder(\"compiled\");\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"@vaadin/router\",\n-                \"1.8.6\");\n-        JsonArray bundleImports = stats.getArray(BUNDLE_IMPORTS);\n-        bundleImports.set(bundleImports.length(),\n-                \"@polymer/paper-checkbox/paper-checkbox.js\");\n-        bundleImports.set(bundleImports.length(),\n-                \"@polymer/paper-input/paper-input.js\");\n-        bundleImports.set(bundleImports.length(),\n-                \"@vaadin/grid/theme/lumo/vaadin-grid.js\");\n-        bundleImports.set(bundleImports.length(),\n-                \"Frontend/generated/jar-resources/dndConnector-es6.js\");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\"@vaadin/router\", \"1.8.6\");\n+        ArrayNode bundleImports = (ArrayNode) stats.get(BUNDLE_IMPORTS);\n+        bundleImports.add(\"@polymer/paper-checkbox/paper-checkbox.js\");\n+        bundleImports.add(\"@polymer/paper-input/paper-input.js\");\n+        bundleImports.add(\"@vaadin/grid/theme/lumo/vaadin-grid.js\");\n+        bundleImports\n+                .add(\"Frontend/generated/jar-resources/dndConnector-es6.js\");\n \n         File configFolder = new File(bundleSourceFolder, \"config/\");\n         configFolder.mkdir();\n \n         File statsFile = new File(configFolder, \"stats.json\");\n-        FileUtils.write(statsFile, stats.toJson(), StandardCharsets.UTF_8);\n+        FileUtils.write(statsFile, stats.toString(), StandardCharsets.UTF_8);\n \n         DevBundleUtils.compressBundle(temporaryFolder.getRoot(),\n                 bundleSourceFolder);\n@@ -2250,24 +2249,21 @@ public void compressedProdBundleExists_noBuildRequired()\n \n         File bundleSourceFolder = temporaryFolder.newFolder(\"compiled\");\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"@vaadin/router\",\n-                \"1.8.6\");\n-        JsonArray bundleImports = stats.getArray(BUNDLE_IMPORTS);\n-        bundleImports.set(bundleImports.length(),\n-                \"@polymer/paper-checkbox/paper-checkbox.js\");\n-        bundleImports.set(bundleImports.length(),\n-                \"@polymer/paper-input/paper-input.js\");\n-        bundleImports.set(bundleImports.length(),\n-                \"@vaadin/grid/theme/lumo/vaadin-grid.js\");\n-        bundleImports.set(bundleImports.length(),\n-                \"Frontend/generated/jar-resources/dndConnector-es6.js\");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\"@vaadin/router\", \"1.8.6\");\n+        ArrayNode bundleImports = (ArrayNode) stats.get(BUNDLE_IMPORTS);\n+        bundleImports.add(\"@polymer/paper-checkbox/paper-checkbox.js\");\n+        bundleImports.add(\"@polymer/paper-input/paper-input.js\");\n+        bundleImports.add(\"@vaadin/grid/theme/lumo/vaadin-grid.js\");\n+        bundleImports\n+                .add(\"Frontend/generated/jar-resources/dndConnector-es6.js\");\n \n         File configFolder = new File(bundleSourceFolder, \"config/\");\n         configFolder.mkdir();\n \n         File statsFile = new File(configFolder, \"stats.json\");\n-        FileUtils.write(statsFile, stats.toJson(), StandardCharsets.UTF_8);\n+        FileUtils.write(statsFile, stats.toString(), StandardCharsets.UTF_8);\n \n         ProdBundleUtils.compressBundle(temporaryFolder.getRoot(),\n                 bundleSourceFolder);\n@@ -2306,24 +2302,21 @@ public void noFileBundleOrJar_compressedBundleExists_noBuildRequired()\n \n         File bundleSourceFolder = temporaryFolder.newFolder(\"compiled\");\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\"@vaadin/router\",\n-                \"1.8.6\");\n-        JsonArray bundleImports = stats.getArray(BUNDLE_IMPORTS);\n-        bundleImports.set(bundleImports.length(),\n-                \"@polymer/paper-checkbox/paper-checkbox.js\");\n-        bundleImports.set(bundleImports.length(),\n-                \"@polymer/paper-input/paper-input.js\");\n-        bundleImports.set(bundleImports.length(),\n-                \"@vaadin/grid/theme/lumo/vaadin-grid.js\");\n-        bundleImports.set(bundleImports.length(),\n-                \"Frontend/generated/jar-resources/dndConnector-es6.js\");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\"@vaadin/router\", \"1.8.6\");\n+        ArrayNode bundleImports = (ArrayNode) stats.get(BUNDLE_IMPORTS);\n+        bundleImports.add(\"@polymer/paper-checkbox/paper-checkbox.js\");\n+        bundleImports.add(\"@polymer/paper-input/paper-input.js\");\n+        bundleImports.add(\"@vaadin/grid/theme/lumo/vaadin-grid.js\");\n+        bundleImports\n+                .add(\"Frontend/generated/jar-resources/dndConnector-es6.js\");\n \n         File configFolder = new File(bundleSourceFolder, \"config/\");\n         configFolder.mkdir();\n \n         File statsFile = new File(configFolder, \"stats.json\");\n-        FileUtils.write(statsFile, stats.toJson(), StandardCharsets.UTF_8);\n+        FileUtils.write(statsFile, stats.toString(), StandardCharsets.UTF_8);\n \n         if (mode.isProduction()) {\n             ProdBundleUtils.compressBundle(temporaryFolder.getRoot(),\n@@ -2360,14 +2353,14 @@ public void defaultDevBundleExists_noCompressedDevBundleFile_reactDisabled_build\n         final FrontendDependenciesScanner depScanner = Mockito\n                 .mock(FrontendDependenciesScanner.class);\n \n-        JsonObject stats = getBasicStats();\n+        ObjectNode stats = getBasicStats();\n \n         URL url = Mockito.mock(URL.class);\n         Mockito.when(\n                 finder.getResource(DEV_BUNDLE_JAR_PATH + \"config/stats.json\"))\n                 .thenReturn(url);\n         ioUtils.when(() -> IOUtils.toString(url, StandardCharsets.UTF_8))\n-                .thenReturn(stats.toJson());\n+                .thenReturn(stats.toString());\n \n         boolean needsBuild = BundleValidationUtil.needsBuild(options,\n                 depScanner, mode);\n@@ -2400,14 +2393,14 @@ public void defaultProdBundleExists_noCompressedProdBundleFile_noBuildRequired()\n         final FrontendDependenciesScanner depScanner = Mockito\n                 .mock(FrontendDependenciesScanner.class);\n \n-        JsonObject stats = getBasicStats();\n+        ObjectNode stats = getBasicStats();\n \n         URL url = Mockito.mock(URL.class);\n         Mockito.when(\n                 finder.getResource(PROD_BUNDLE_JAR_PATH + \"config/stats.json\"))\n                 .thenReturn(url);\n         ioUtils.when(() -> IOUtils.toString(url, StandardCharsets.UTF_8))\n-                .thenReturn(stats.toJson());\n+                .thenReturn(stats.toString());\n \n         boolean needsBuild = BundleValidationUtil.needsBuild(options,\n                 depScanner, mode);\n@@ -2452,10 +2445,10 @@ public void defaultProdBundleExists_noCompressedProdBundleFileAndWithVersionsJso\n                   \"core\": {\n                     \"vaadin-button\": {\n                       \"jsVersion\": \"2.0.0\",\n-                      \"npmName\": \"@vaadin/button\",\n-                    },\n+                      \"npmName\": \"@vaadin/button\"\n+                    }\n                   },\n-                  react: {\n+                  \"react\": {\n                     \"react-components\": {\n                       \"exclusions\": [\"@vaadin/button\"],\n                       \"jsVersion\": \"24.4.0\",\n@@ -2470,8 +2463,8 @@ public void defaultProdBundleExists_noCompressedProdBundleFileAndWithVersionsJso\n         Mockito.when(finder.getResource(Constants.VAADIN_CORE_VERSIONS_JSON))\n                 .thenReturn(versions.toURI().toURL());\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES)\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n                 .put(\"@vaadin/react-components\", \"24.4.0\");\n \n         URL url = Mockito.mock(URL.class);\n@@ -2479,7 +2472,7 @@ public void defaultProdBundleExists_noCompressedProdBundleFileAndWithVersionsJso\n                 finder.getResource(PROD_BUNDLE_JAR_PATH + \"config/stats.json\"))\n                 .thenReturn(url);\n         ioUtils.when(() -> IOUtils.toString(url, StandardCharsets.UTF_8))\n-                .thenReturn(stats.toJson());\n+                .thenReturn(stats.toString());\n \n         boolean needsBuild = BundleValidationUtil.needsBuild(options,\n                 depScanner, mode);\n@@ -2502,14 +2495,14 @@ public void defaultProdBundleExists_noCompressedProdBundleFile_reactDisabled_bui\n         final FrontendDependenciesScanner depScanner = Mockito\n                 .mock(FrontendDependenciesScanner.class);\n \n-        JsonObject stats = getBasicStats();\n+        ObjectNode stats = getBasicStats();\n \n         URL url = Mockito.mock(URL.class);\n         Mockito.when(\n                 finder.getResource(PROD_BUNDLE_JAR_PATH + \"config/stats.json\"))\n                 .thenReturn(url);\n         ioUtils.when(() -> IOUtils.toString(url, StandardCharsets.UTF_8))\n-                .thenReturn(stats.toJson());\n+                .thenReturn(stats.toString());\n \n         boolean needsBuild = BundleValidationUtil.needsBuild(options,\n                 depScanner, mode);\n@@ -2552,13 +2545,13 @@ private void createProjectFrontendFileStub() throws IOException {\n         FileUtils.write(frontendFile, \"Some codes\", StandardCharsets.UTF_8);\n     }\n \n-    private void setupFrontendUtilsMock(JsonObject stats) {\n+    private void setupFrontendUtilsMock(ObjectNode stats) {\n         if (mode.isProduction()) {\n             prodBundleUtils\n                     .when(() -> ProdBundleUtils.findBundleStatsJson(\n                             Mockito.any(File.class),\n                             Mockito.any(ClassFinder.class)))\n-                    .thenReturn(stats.toJson());\n+                    .thenReturn(stats.toString());\n         } else {\n             devBundleUtils\n                     .when(() -> DevBundleUtils.getDevBundleFolder(Mockito.any(),\n@@ -2567,7 +2560,7 @@ private void setupFrontendUtilsMock(JsonObject stats) {\n             devBundleUtils\n                     .when(() -> DevBundleUtils.findBundleStatsJson(\n                             temporaryFolder.getRoot(), \"target\"))\n-                    .thenAnswer(q -> stats.toJson());\n+                    .thenAnswer(q -> stats.toString());\n         }\n         frontendUtils\n                 .when(() -> FrontendUtils.getJarResourceString(\n@@ -2644,25 +2637,27 @@ private boolean checkBundleRebuildForThemeComponentsCSS(\n         Mockito.when(depScanner.getThemeDefinition())\n                 .thenReturn(themeDefinition);\n \n-        JsonObject stats = getBasicStats();\n+        ObjectNode stats = getBasicStats();\n         if (useParentTheme) {\n-            stats.getObject(THEME_JSON_CONTENTS).put(\"parent-theme\",\n+            ((ObjectNode) stats.get(THEME_JSON_CONTENTS)).put(\"parent-theme\",\n                     themeContents);\n-            stats.getObject(THEME_JSON_CONTENTS).put(\"my-theme\",\n+            ((ObjectNode) stats.get(THEME_JSON_CONTENTS)).put(\"my-theme\",\n                     themeWithParentContents);\n         } else {\n-            stats.getObject(THEME_JSON_CONTENTS).put(\"my-theme\", themeContents);\n+            ((ObjectNode) stats.get(THEME_JSON_CONTENTS)).put(\"my-theme\",\n+                    themeContents);\n         }\n-        stats.getObject(THEME_JSON_CONTENTS).put(bundleLocation, themeContents);\n+        ((ObjectNode) stats.get(THEME_JSON_CONTENTS)).put(bundleLocation,\n+                themeContents);\n         if (bundled) {\n-            stats.getObject(FRONTEND_HASHES)\n+            ((ObjectNode) stats.get(FRONTEND_HASHES))\n                     .put(themeLocation + \"vaadin-text-field.css\",\n                             BundleValidationUtil.calculateHash(String.format(\n                                     cssTemplate,\n                                     (contentChanged) ? \"red\" : \"blue\")));\n         }\n         for (String path : otherBundledComponentCss) {\n-            stats.getObject(FRONTEND_HASHES).put(themeLocation + path,\n+            ((ObjectNode) stats.get(FRONTEND_HASHES)).put(themeLocation + path,\n                     BundleValidationUtil.calculateHash(\n                             \"[part=\\\"input-field\\\"]{background: green; }\"));\n         }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/CssBundlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/CssBundlerTest.java\nindex 9ea02a081f0..0bd26b04921 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/CssBundlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/CssBundlerTest.java\n@@ -5,13 +5,13 @@\n import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.apache.commons.io.FileUtils;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n+import com.vaadin.flow.internal.JacksonUtils;\n \n public class CssBundlerTest {\n \n@@ -308,18 +308,18 @@ private File writeCss(String css, String filename) throws IOException {\n         return file;\n     }\n \n-    private JsonObject getThemeJson() throws IOException {\n+    private JsonNode getThemeJson() throws IOException {\n         File file = getThemeFile(\"theme.json\");\n         if (file.exists()) {\n-            return Json.parse(Files.readString(file.toPath()));\n+            return JacksonUtils.readTree(Files.readString(file.toPath()));\n         }\n         return null;\n     }\n \n     private void createThemeJson(String json) throws IOException {\n-        JsonObject jsonObject = Json.parse(json);\n+        JsonNode jsonObject = JacksonUtils.readTree(json);\n         File file = getThemeFile(\"theme.json\");\n-        FileUtils.writeStringToFile(file, jsonObject.toJson(),\n+        FileUtils.writeStringToFile(file, jsonObject.toString(),\n                 StandardCharsets.UTF_8);\n     }\n }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdatePackagesNpmVersionLockingTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdatePackagesNpmVersionLockingTest.java\nindex 7e30785aa29..d511efaab42 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdatePackagesNpmVersionLockingTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdatePackagesNpmVersionLockingTest.java\n@@ -21,6 +21,7 @@\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n \n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.FileUtils;\n import org.junit.Assert;\n import org.junit.Before;\n@@ -30,7 +31,7 @@\n import org.junit.rules.TemporaryFolder;\n import org.mockito.Mockito;\n \n-import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.Constants;\n import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n import com.vaadin.flow.server.frontend.scanner.FrontendDependenciesScanner;\n@@ -38,9 +39,6 @@\n import com.vaadin.flow.testutil.FrontendStubs;\n import com.vaadin.tests.util.MockOptions;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-\n import static com.vaadin.flow.server.Constants.TARGET;\n \n @Category(SlowTests.class)\n@@ -86,44 +84,42 @@ public void setup() throws Exception {\n     public void shouldLockPinnedVersion_whenExistsInDependencies()\n             throws IOException {\n         TaskUpdatePackages packageUpdater = createPackageUpdater();\n-        JsonObject packageJson = packageUpdater.getPackageJson();\n-        packageJson.getObject(DEPENDENCIES).put(TEST_DEPENDENCY,\n+        ObjectNode packageJson = packageUpdater.getPackageJson();\n+        ((ObjectNode) packageJson.get(DEPENDENCIES)).put(TEST_DEPENDENCY,\n                 PLATFORM_PINNED_DEPENDENCY_VERSION);\n-        Assert.assertNull(packageJson.getObject(OVERRIDES));\n+        Assert.assertNull(packageJson.get(OVERRIDES));\n \n         packageUpdater.generateVersionsJson(packageJson);\n         packageUpdater.lockVersionForNpm(packageJson);\n \n         Assert.assertEquals(\"$\" + TEST_DEPENDENCY,\n-                packageJson.getObject(OVERRIDES).getString(TEST_DEPENDENCY));\n+                packageJson.get(OVERRIDES).get(TEST_DEPENDENCY).textValue());\n     }\n \n     @Test\n     public void shouldNotLockPinnedVersion_whenNotExistsInDependencies()\n             throws IOException {\n         TaskUpdatePackages packageUpdater = createPackageUpdater();\n-        JsonObject packageJson = packageUpdater.getPackageJson();\n+        ObjectNode packageJson = packageUpdater.getPackageJson();\n \n-        Assert.assertNull(packageJson.getObject(OVERRIDES));\n-        Assert.assertNull(\n-                packageJson.getObject(DEPENDENCIES).get(TEST_DEPENDENCY));\n+        Assert.assertNull(packageJson.get(OVERRIDES));\n+        Assert.assertNull(packageJson.get(DEPENDENCIES).get(TEST_DEPENDENCY));\n \n         packageUpdater.generateVersionsJson(packageJson);\n         packageUpdater.lockVersionForNpm(packageJson);\n \n-        Assert.assertNull(\n-                packageJson.getObject(OVERRIDES).get(TEST_DEPENDENCY));\n+        Assert.assertNull(packageJson.get(OVERRIDES).get(TEST_DEPENDENCY));\n     }\n \n     @Test\n     public void shouldNotUpdatesOverrides_whenHasUserModification()\n             throws IOException {\n         TaskUpdatePackages packageUpdater = createPackageUpdater();\n-        JsonObject packageJson = packageUpdater.getPackageJson();\n-        JsonObject overridesSection = Json.createObject();\n-        packageJson.put(OVERRIDES, overridesSection);\n+        ObjectNode packageJson = packageUpdater.getPackageJson();\n+        ObjectNode overridesSection = JacksonUtils.createObjectNode();\n+        packageJson.set(OVERRIDES, overridesSection);\n \n-        packageJson.getObject(DEPENDENCIES).put(TEST_DEPENDENCY,\n+        ((ObjectNode) packageJson.get(DEPENDENCIES)).put(TEST_DEPENDENCY,\n                 USER_PINNED_DEPENDENCY_VERSION);\n         overridesSection.put(TEST_DEPENDENCY, USER_PINNED_DEPENDENCY_VERSION);\n \n@@ -131,7 +127,7 @@ public void shouldNotUpdatesOverrides_whenHasUserModification()\n         packageUpdater.lockVersionForNpm(packageJson);\n \n         Assert.assertEquals(USER_PINNED_DEPENDENCY_VERSION,\n-                packageJson.getObject(OVERRIDES).getString(TEST_DEPENDENCY));\n+                packageJson.get(OVERRIDES).get(TEST_DEPENDENCY).textValue());\n     }\n \n     @Test\n@@ -142,21 +138,21 @@ public void shouldRemoveUnusedLocking() throws IOException {\n                 .thenReturn(null);\n \n         TaskUpdatePackages packageUpdater = createPackageUpdater(true);\n-        JsonObject packageJson = packageUpdater.getPackageJson();\n-        packageJson.getObject(DEPENDENCIES).put(TEST_DEPENDENCY,\n+        ObjectNode packageJson = packageUpdater.getPackageJson();\n+        ((ObjectNode) packageJson.get(DEPENDENCIES)).put(TEST_DEPENDENCY,\n                 PLATFORM_PINNED_DEPENDENCY_VERSION);\n-        Assert.assertNull(packageJson.getObject(OVERRIDES));\n+        Assert.assertNull(packageJson.get(OVERRIDES));\n \n         packageUpdater.generateVersionsJson(packageJson);\n-        Assert.assertTrue(\n-                packageUpdater.versionsJson.toJson().contains(TEST_DEPENDENCY));\n+        Assert.assertTrue(packageUpdater.versionsJson.toString()\n+                .contains(TEST_DEPENDENCY));\n \n-        packageJson.getObject(DEPENDENCIES).remove(TEST_DEPENDENCY);\n+        ((ObjectNode) packageJson.get(DEPENDENCIES)).remove(TEST_DEPENDENCY);\n \n         packageUpdater.versionsJson = null;\n         packageUpdater.generateVersionsJson(packageJson);\n-        Assert.assertFalse(\n-                packageUpdater.versionsJson.toJson().contains(TEST_DEPENDENCY));\n+        Assert.assertFalse(packageUpdater.versionsJson.toString()\n+                .contains(TEST_DEPENDENCY));\n \n     }\n \n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java\nindex 7360cd867a8..710743f1b56 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java\n@@ -23,6 +23,8 @@\n import java.util.Map;\n import java.util.Set;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.FileUtils;\n import org.hamcrest.MatcherAssert;\n import org.hamcrest.core.StringContains;\n@@ -37,15 +39,12 @@\n import org.slf4j.LoggerFactory;\n \n import com.vaadin.experimental.FeatureFlags;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.Constants;\n import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n import com.vaadin.flow.server.frontend.scanner.FrontendDependencies;\n import com.vaadin.tests.util.MockOptions;\n \n-import elemental.json.Json;\n-import elemental.json.JsonException;\n-import elemental.json.JsonObject;\n-\n import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n import static com.vaadin.flow.server.Constants.TARGET;\n import static java.nio.charset.StandardCharsets.UTF_8;\n@@ -191,7 +190,7 @@ private Set<String> getCommonDevDeps() {\n \n     @Test\n     public void updateMainDefaultDependencies_polymerVersionIsNull_useDefault() {\n-        JsonObject object = Json.createObject();\n+        ObjectNode object = JacksonUtils.createObjectNode();\n         nodeUpdater.addVaadinDefaultsToJson(object);\n         nodeUpdater.updateDefaultDependencies(object);\n \n@@ -201,10 +200,10 @@ public void updateMainDefaultDependencies_polymerVersionIsNull_useDefault() {\n \n     @Test\n     public void updateMainDefaultDependencies_polymerVersionIsProvidedByUser_useProvided() {\n-        JsonObject object = Json.createObject();\n-        JsonObject dependencies = Json.createObject();\n+        ObjectNode object = JacksonUtils.createObjectNode();\n+        ObjectNode dependencies = JacksonUtils.createObjectNode();\n         dependencies.put(\"@polymer/polymer\", \"4.0.0\");\n-        object.put(NodeUpdater.DEPENDENCIES, dependencies);\n+        object.set(NodeUpdater.DEPENDENCIES, dependencies);\n         nodeUpdater.addVaadinDefaultsToJson(object);\n \n         nodeUpdater.updateDefaultDependencies(object);\n@@ -215,56 +214,61 @@ public void updateMainDefaultDependencies_polymerVersionIsProvidedByUser_useProv\n \n     @Test\n     public void updateMainDefaultDependencies_vaadinIsProvidedByUser_useDefault() {\n-        JsonObject object = Json.createObject();\n+        ObjectNode object = JacksonUtils.createObjectNode();\n \n-        JsonObject vaadin = Json.createObject();\n+        ObjectNode vaadin = JacksonUtils.createObjectNode();\n         vaadin.put(\"disableUsageStatistics\", true);\n-        object.put(NodeUpdater.VAADIN_DEP_KEY, vaadin);\n+        object.set(NodeUpdater.VAADIN_DEP_KEY, vaadin);\n \n         nodeUpdater.addVaadinDefaultsToJson(object);\n         nodeUpdater.updateDefaultDependencies(object);\n \n         Assert.assertEquals(POLYMER_VERSION, getPolymerVersion(object));\n-        Assert.assertEquals(POLYMER_VERSION, getPolymerVersion(\n-                object.getObject(NodeUpdater.VAADIN_DEP_KEY)));\n+        Assert.assertEquals(POLYMER_VERSION,\n+                getPolymerVersion(object.get(NodeUpdater.VAADIN_DEP_KEY)));\n     }\n \n     @Test\n     public void updateDefaultDependencies_olderVersionsAreUpdated()\n             throws IOException {\n-        JsonObject packageJson = nodeUpdater.getPackageJson();\n-        packageJson.put(NodeUpdater.DEPENDENCIES, Json.createObject());\n-        packageJson.put(NodeUpdater.DEV_DEPENDENCIES, Json.createObject());\n-        packageJson.getObject(NodeUpdater.DEV_DEPENDENCIES).put(\"glob\",\n+        ObjectNode packageJson = nodeUpdater.getPackageJson();\n+        packageJson.set(NodeUpdater.DEPENDENCIES,\n+                JacksonUtils.createObjectNode());\n+        packageJson.set(NodeUpdater.DEV_DEPENDENCIES,\n+                JacksonUtils.createObjectNode());\n+        ((ObjectNode) packageJson.get(NodeUpdater.DEV_DEPENDENCIES)).put(\"glob\",\n                 \"7.0.0\");\n         nodeUpdater.updateDefaultDependencies(packageJson);\n \n         Assert.assertEquals(\"11.0.1\", packageJson\n-                .getObject(NodeUpdater.DEV_DEPENDENCIES).getString(\"glob\"));\n+                .get(NodeUpdater.DEV_DEPENDENCIES).get(\"glob\").textValue());\n     }\n \n     @Test // #6907 test when user has set newer versions\n     public void updateDefaultDependencies_newerVersionsAreNotChanged()\n             throws IOException {\n-        JsonObject packageJson = nodeUpdater.getPackageJson();\n-        packageJson.put(NodeUpdater.DEPENDENCIES, Json.createObject());\n-        packageJson.put(NodeUpdater.DEV_DEPENDENCIES, Json.createObject());\n-        packageJson.getObject(NodeUpdater.DEV_DEPENDENCIES).put(\"vite\",\n+        ObjectNode packageJson = nodeUpdater.getPackageJson();\n+        packageJson.set(NodeUpdater.DEPENDENCIES,\n+                JacksonUtils.createObjectNode());\n+        packageJson.set(NodeUpdater.DEV_DEPENDENCIES,\n+                JacksonUtils.createObjectNode());\n+        ((ObjectNode) packageJson.get(NodeUpdater.DEV_DEPENDENCIES)).put(\"vite\",\n                 \"78.2.3\");\n         nodeUpdater.updateDefaultDependencies(packageJson);\n \n         Assert.assertEquals(\"78.2.3\", packageJson\n-                .getObject(NodeUpdater.DEV_DEPENDENCIES).getString(\"vite\"));\n+                .get(NodeUpdater.DEV_DEPENDENCIES).get(\"vite\").textValue());\n     }\n \n     @Test\n     public void shouldUpdateExistingLocalFormPackageToNpmPackage() {\n-        JsonObject packageJson = Json.createObject();\n-        JsonObject dependencies = Json.createObject();\n-        packageJson.put(NodeUpdater.DEPENDENCIES, dependencies);\n-        JsonObject vaadinDependencies = Json.createObject();\n-        vaadinDependencies.put(NodeUpdater.DEPENDENCIES, Json.createObject());\n-        packageJson.put(NodeUpdater.VAADIN_DEP_KEY, vaadinDependencies);\n+        ObjectNode packageJson = JacksonUtils.createObjectNode();\n+        ObjectNode dependencies = JacksonUtils.createObjectNode();\n+        packageJson.set(NodeUpdater.DEPENDENCIES, dependencies);\n+        ObjectNode vaadinDependencies = JacksonUtils.createObjectNode();\n+        vaadinDependencies.set(NodeUpdater.DEPENDENCIES,\n+                JacksonUtils.createObjectNode());\n+        packageJson.set(NodeUpdater.VAADIN_DEP_KEY, vaadinDependencies);\n \n         String formPackage = \"@vaadin/form\";\n         String legecyVersion = \"./target/flow-frontend/form\";\n@@ -276,17 +280,18 @@ public void shouldUpdateExistingLocalFormPackageToNpmPackage() {\n                 formPackage, newVersion);\n \n         Assert.assertEquals(newVersion, packageJson\n-                .getObject(NodeUpdater.DEPENDENCIES).getString(formPackage));\n+                .get(NodeUpdater.DEPENDENCIES).get(formPackage).textValue());\n     }\n \n     @Test\n     public void shouldSkipUpdatingNonParsableVersions() {\n-        JsonObject packageJson = Json.createObject();\n-        JsonObject dependencies = Json.createObject();\n-        packageJson.put(NodeUpdater.DEPENDENCIES, dependencies);\n-        JsonObject vaadinDependencies = Json.createObject();\n-        vaadinDependencies.put(NodeUpdater.DEPENDENCIES, Json.createObject());\n-        packageJson.put(NodeUpdater.VAADIN_DEP_KEY, vaadinDependencies);\n+        ObjectNode packageJson = JacksonUtils.createObjectNode();\n+        ObjectNode dependencies = JacksonUtils.createObjectNode();\n+        packageJson.set(NodeUpdater.DEPENDENCIES, dependencies);\n+        ObjectNode vaadinDependencies = JacksonUtils.createObjectNode();\n+        vaadinDependencies.set(NodeUpdater.DEPENDENCIES,\n+                JacksonUtils.createObjectNode());\n+        packageJson.set(NodeUpdater.VAADIN_DEP_KEY, vaadinDependencies);\n \n         String formPackage = \"@vaadin/form\";\n         String existingVersion = \"../../../some/local/path\";\n@@ -298,17 +303,18 @@ public void shouldSkipUpdatingNonParsableVersions() {\n                 formPackage, newVersion);\n \n         Assert.assertEquals(existingVersion, packageJson\n-                .getObject(NodeUpdater.DEPENDENCIES).getString(formPackage));\n+                .get(NodeUpdater.DEPENDENCIES).get(formPackage).textValue());\n     }\n \n     @Test\n     public void canUpdateNonParseableVersions() {\n-        JsonObject packageJson = Json.createObject();\n-        JsonObject dependencies = Json.createObject();\n-        packageJson.put(NodeUpdater.DEPENDENCIES, dependencies);\n-        JsonObject vaadinDependencies = Json.createObject();\n-        vaadinDependencies.put(NodeUpdater.DEPENDENCIES, Json.createObject());\n-        packageJson.put(NodeUpdater.VAADIN_DEP_KEY, vaadinDependencies);\n+        ObjectNode packageJson = JacksonUtils.createObjectNode();\n+        ObjectNode dependencies = JacksonUtils.createObjectNode();\n+        packageJson.set(NodeUpdater.DEPENDENCIES, dependencies);\n+        ObjectNode vaadinDependencies = JacksonUtils.createObjectNode();\n+        vaadinDependencies.set(NodeUpdater.DEPENDENCIES,\n+                JacksonUtils.createObjectNode());\n+        packageJson.set(NodeUpdater.VAADIN_DEP_KEY, vaadinDependencies);\n \n         String pkg = \"mypackage\";\n         String existingVersion = \"./some/path\";\n@@ -319,7 +325,7 @@ public void canUpdateNonParseableVersions() {\n                 existingVersion);\n \n         Assert.assertEquals(existingVersion,\n-                packageJson.getObject(NodeUpdater.DEPENDENCIES).getString(pkg));\n+                packageJson.get(NodeUpdater.DEPENDENCIES).get(pkg).textValue());\n \n     }\n \n@@ -331,7 +337,7 @@ public void getJsonFileContent_incorrectPackageJsonContent_throwsExceptionWithFi\n         FileUtils.writeStringToFile(brokenPackageJsonFile,\n                 \"{ some broken json \", UTF_8);\n \n-        JsonException exception = Assert.assertThrows(JsonException.class,\n+        RuntimeException exception = Assert.assertThrows(RuntimeException.class,\n                 () -> NodeUpdater.getJsonFileContent(brokenPackageJsonFile));\n \n         MatcherAssert.assertThat(exception.getMessage(),\n@@ -354,18 +360,18 @@ public void removedAllOldAndExistingPlugins() throws IOException {\n                         }\n                         \"\"\");\n         packageJsonWriter.close();\n-        JsonObject actualDevDeps = nodeUpdater.getPackageJson()\n-                .getObject(NodeUpdater.DEV_DEPENDENCIES);\n-        Assert.assertFalse(actualDevDeps.hasKey(\"some-old-plugin\"));\n+        ObjectNode actualDevDeps = (ObjectNode) nodeUpdater.getPackageJson()\n+                .get(NodeUpdater.DEV_DEPENDENCIES);\n+        Assert.assertFalse(actualDevDeps.has(\"some-old-plugin\"));\n         Assert.assertFalse(\n-                actualDevDeps.hasKey(\"@vaadin/application-theme-plugin\"));\n+                actualDevDeps.has(\"@vaadin/application-theme-plugin\"));\n     }\n \n     @Test\n     public void generateVersionsJson_noVersions_noDevDeps_versionsGeneratedFromPackageJson()\n             throws IOException {\n-        nodeUpdater.generateVersionsJson(Json.createObject());\n-        Assert.assertEquals(\"{}\", nodeUpdater.versionsJson.toJson());\n+        nodeUpdater.generateVersionsJson(JacksonUtils.createObjectNode());\n+        Assert.assertEquals(\"{}\", nodeUpdater.versionsJson.toString());\n     }\n \n     @Test\n@@ -384,7 +390,7 @@ public void generateVersionsJson_versionsGeneratedFromPackageJson_containsBothDe\n                     \"dependencies\": {\n                       \"lit\": \"2.0.0\",\n                       \"@vaadin/router\": \"1.7.5\",\n-                      \"@polymer/polymer\": \"3.4.1\",\n+                      \"@polymer/polymer\": \"3.4.1\"\n                     },\n                     \"devDependencies\": {\n                       \"css-loader\": \"4.2.1\",\n@@ -394,7 +400,7 @@ public void generateVersionsJson_versionsGeneratedFromPackageJson_containsBothDe\n                   \"dependencies\": {\n                     \"lit\": \"2.0.0\",\n                     \"@vaadin/router\": \"1.7.5\",\n-                    \"@polymer/polymer\": \"3.4.1\",\n+                    \"@polymer/polymer\": \"3.4.1\"\n                   },\n                   \"devDependencies\": {\n                     \"css-loader\": \"4.2.1\",\n@@ -404,11 +410,11 @@ public void generateVersionsJson_versionsGeneratedFromPackageJson_containsBothDe\n                 \"\"\", StandardCharsets.UTF_8);\n         // @formatter:on\n \n-        nodeUpdater.generateVersionsJson(Json.parse(FileUtils\n+        nodeUpdater.generateVersionsJson(JacksonUtils.readTree(FileUtils\n                 .readFileToString(packageJson, StandardCharsets.UTF_8)));\n         Assert.assertEquals(\n                 \"{\\\"lit\\\":\\\"2.0.0\\\",\\\"@vaadin/router\\\":\\\"1.7.5\\\",\\\"@polymer/polymer\\\":\\\"3.4.1\\\"}\",\n-                nodeUpdater.versionsJson.toJson());\n+                nodeUpdater.versionsJson.toString());\n     }\n \n     @Test\n@@ -427,9 +433,9 @@ public void testGetPlatformPinnedDependencies_vaadinCoreVersionIsNotPresent_outp\n             Mockito.when(finder.getResource(Constants.VAADIN_VERSIONS_JSON))\n                     .thenReturn(null);\n \n-            JsonObject pinnedVersions = nodeUpdater\n+            ObjectNode pinnedVersions = nodeUpdater\n                     .getPlatformPinnedDependencies();\n-            Assert.assertEquals(0, pinnedVersions.keys().length);\n+            Assert.assertEquals(0, JacksonUtils.getKeys(pinnedVersions).size());\n \n             Mockito.verify(logger, Mockito.times(1)).info(\n                     \"Couldn't find {} file to pin dependency versions for core components.\"\n@@ -443,24 +449,23 @@ public void testGetPlatformPinnedDependencies_onlyVaadinCoreVersionIsPresent_out\n             throws IOException {\n         File coreVersionsFile = File.createTempFile(\"vaadin-core-versions\",\n                 \".json\", temporaryFolder.newFolder());\n-        JsonObject mockedVaadinCoreJson = getMockVaadinCoreVersionsJson();\n-        Assert.assertTrue(mockedVaadinCoreJson.hasKey(\"core\"));\n-        Assert.assertTrue(\n-                mockedVaadinCoreJson.getObject(\"core\").hasKey(\"button\"));\n-        Assert.assertFalse(mockedVaadinCoreJson.hasKey(\"vaadin\"));\n+        ObjectNode mockedVaadinCoreJson = getMockVaadinCoreVersionsJson();\n+        Assert.assertTrue(mockedVaadinCoreJson.has(\"core\"));\n+        Assert.assertTrue(mockedVaadinCoreJson.get(\"core\").has(\"button\"));\n+        Assert.assertFalse(mockedVaadinCoreJson.has(\"vaadin\"));\n \n-        FileUtils.write(coreVersionsFile, mockedVaadinCoreJson.toJson(),\n+        FileUtils.write(coreVersionsFile, mockedVaadinCoreJson.toString(),\n                 StandardCharsets.UTF_8);\n         Mockito.when(finder.getResource(Constants.VAADIN_CORE_VERSIONS_JSON))\n                 .thenReturn(coreVersionsFile.toURI().toURL());\n         Mockito.when(finder.getResource(Constants.VAADIN_VERSIONS_JSON))\n                 .thenReturn(null);\n \n-        JsonObject pinnedVersions = nodeUpdater.getPlatformPinnedDependencies();\n+        ObjectNode pinnedVersions = nodeUpdater.getPlatformPinnedDependencies();\n \n-        Assert.assertTrue(pinnedVersions.hasKey(\"@vaadin/button\"));\n-        Assert.assertFalse(pinnedVersions.hasKey(\"@vaadin/grid-pro\"));\n-        Assert.assertFalse(pinnedVersions.hasKey(\"@vaadin/vaadin-grid-pro\"));\n+        Assert.assertTrue(pinnedVersions.has(\"@vaadin/button\"));\n+        Assert.assertFalse(pinnedVersions.has(\"@vaadin/grid-pro\"));\n+        Assert.assertFalse(pinnedVersions.has(\"@vaadin/vaadin-grid-pro\"));\n     }\n \n     @Test\n@@ -468,33 +473,32 @@ public void testGetPlatformPinnedDependencies_reactNotAvailable_noReactComponent\n             throws IOException {\n         File coreVersionsFile = File.createTempFile(\"vaadin-core-versions\",\n                 \".json\", temporaryFolder.newFolder());\n-        JsonObject mockedVaadinCoreJson = getMockVaadinCoreVersionsJson();\n+        ObjectNode mockedVaadinCoreJson = getMockVaadinCoreVersionsJson();\n \n-        JsonObject reactComponents = Json.createObject();\n-        JsonObject reactData = Json.createObject();\n+        ObjectNode reactComponents = JacksonUtils.createObjectNode();\n+        ObjectNode reactData = JacksonUtils.createObjectNode();\n         reactData.put(\"jsVersion\", \"24.4.0-alpha13\");\n         reactData.put(\"npmName\", \"@vaadin/react-components\");\n \n-        reactComponents.put(\"react-components\", reactData);\n+        reactComponents.set(\"react-components\", reactData);\n \n-        mockedVaadinCoreJson.put(\"react\", reactComponents);\n+        mockedVaadinCoreJson.set(\"react\", reactComponents);\n \n-        Assert.assertTrue(mockedVaadinCoreJson.hasKey(\"core\"));\n-        Assert.assertTrue(\n-                mockedVaadinCoreJson.getObject(\"core\").hasKey(\"button\"));\n-        Assert.assertFalse(mockedVaadinCoreJson.hasKey(\"vaadin\"));\n+        Assert.assertTrue(mockedVaadinCoreJson.has(\"core\"));\n+        Assert.assertTrue(mockedVaadinCoreJson.get(\"core\").has(\"button\"));\n+        Assert.assertFalse(mockedVaadinCoreJson.has(\"vaadin\"));\n \n-        FileUtils.write(coreVersionsFile, mockedVaadinCoreJson.toJson(),\n+        FileUtils.write(coreVersionsFile, mockedVaadinCoreJson.toString(),\n                 StandardCharsets.UTF_8);\n         Mockito.when(finder.getResource(Constants.VAADIN_CORE_VERSIONS_JSON))\n                 .thenReturn(coreVersionsFile.toURI().toURL());\n         Mockito.when(finder.getResource(Constants.VAADIN_VERSIONS_JSON))\n                 .thenReturn(null);\n \n-        JsonObject pinnedVersions = nodeUpdater.getPlatformPinnedDependencies();\n+        ObjectNode pinnedVersions = nodeUpdater.getPlatformPinnedDependencies();\n \n-        Assert.assertTrue(pinnedVersions.hasKey(\"@vaadin/button\"));\n-        Assert.assertFalse(pinnedVersions.hasKey(\"react-components\"));\n+        Assert.assertTrue(pinnedVersions.has(\"@vaadin/button\"));\n+        Assert.assertFalse(pinnedVersions.has(\"react-components\"));\n     }\n \n     @Test\n@@ -502,12 +506,11 @@ public void testGetPlatformPinnedDependencies_reactAvailable_containsReactCompon\n             throws IOException, ClassNotFoundException {\n         generateTestDataForReactComponents();\n \n-        JsonObject pinnedVersions = nodeUpdater.getPlatformPinnedDependencies();\n+        ObjectNode pinnedVersions = nodeUpdater.getPlatformPinnedDependencies();\n \n-        Assert.assertTrue(pinnedVersions.hasKey(\"@vaadin/button\"));\n-        Assert.assertTrue(pinnedVersions.hasKey(\"@vaadin/react-components\"));\n-        Assert.assertTrue(\n-                pinnedVersions.hasKey(\"@vaadin/react-components-pro\"));\n+        Assert.assertTrue(pinnedVersions.has(\"@vaadin/button\"));\n+        Assert.assertTrue(pinnedVersions.has(\"@vaadin/react-components\"));\n+        Assert.assertTrue(pinnedVersions.has(\"@vaadin/react-components-pro\"));\n     }\n \n     @Test\n@@ -516,13 +519,12 @@ public void testGetPlatformPinnedDependencies_reactAvailable_excludeWebComponent\n         options.withNpmExcludeWebComponents(true);\n         generateTestDataForReactComponents();\n \n-        JsonObject pinnedVersions = nodeUpdater.getPlatformPinnedDependencies();\n+        ObjectNode pinnedVersions = nodeUpdater.getPlatformPinnedDependencies();\n \n         // @vaadin/button doesn't have 'mode' set, so it should be included\n-        Assert.assertTrue(pinnedVersions.hasKey(\"@vaadin/button\"));\n-        Assert.assertFalse(pinnedVersions.hasKey(\"@vaadin/react-components\"));\n-        Assert.assertFalse(\n-                pinnedVersions.hasKey(\"@vaadin/react-components-pro\"));\n+        Assert.assertTrue(pinnedVersions.has(\"@vaadin/button\"));\n+        Assert.assertFalse(pinnedVersions.has(\"@vaadin/react-components\"));\n+        Assert.assertFalse(pinnedVersions.has(\"@vaadin/react-components-pro\"));\n     }\n \n     @Test\n@@ -532,13 +534,12 @@ public void testGetPlatformPinnedDependencies_reactDisabled_excludeWebComponents\n         options.withNpmExcludeWebComponents(true);\n         generateTestDataForReactComponents();\n \n-        JsonObject pinnedVersions = nodeUpdater.getPlatformPinnedDependencies();\n+        ObjectNode pinnedVersions = nodeUpdater.getPlatformPinnedDependencies();\n \n         // @vaadin/button doesn't have 'mode' set, so it should be included\n-        Assert.assertTrue(pinnedVersions.hasKey(\"@vaadin/button\"));\n-        Assert.assertFalse(pinnedVersions.hasKey(\"@vaadin/react-components\"));\n-        Assert.assertFalse(\n-                pinnedVersions.hasKey(\"@vaadin/react-components-pro\"));\n+        Assert.assertTrue(pinnedVersions.has(\"@vaadin/button\"));\n+        Assert.assertFalse(pinnedVersions.has(\"@vaadin/react-components\"));\n+        Assert.assertFalse(pinnedVersions.has(\"@vaadin/react-components-pro\"));\n     }\n \n     private void generateTestDataForReactComponents()\n@@ -547,38 +548,37 @@ private void generateTestDataForReactComponents()\n                 \".json\", temporaryFolder.newFolder());\n         File vaadinVersionsFile = File.createTempFile(\"vaadin-versions\",\n                 \".json\", temporaryFolder.newFolder());\n-        JsonObject mockedVaadinCoreJson = getMockVaadinCoreVersionsJson();\n+        ObjectNode mockedVaadinCoreJson = getMockVaadinCoreVersionsJson();\n \n-        JsonObject reactComponents = Json.createObject();\n-        JsonObject reactData = Json.createObject();\n+        ObjectNode reactComponents = JacksonUtils.createObjectNode();\n+        ObjectNode reactData = JacksonUtils.createObjectNode();\n         reactData.put(\"jsVersion\", \"24.4.0-alpha13\");\n         reactData.put(\"npmName\", \"@vaadin/react-components\");\n         reactData.put(\"mode\", \"react\");\n \n-        reactComponents.put(\"react-components\", reactData);\n+        reactComponents.set(\"react-components\", reactData);\n \n-        mockedVaadinCoreJson.put(\"react\", reactComponents);\n+        mockedVaadinCoreJson.set(\"react\", reactComponents);\n \n-        Assert.assertTrue(mockedVaadinCoreJson.hasKey(\"core\"));\n-        Assert.assertTrue(\n-                mockedVaadinCoreJson.getObject(\"core\").hasKey(\"button\"));\n-        Assert.assertFalse(mockedVaadinCoreJson.hasKey(\"vaadin\"));\n+        Assert.assertTrue(mockedVaadinCoreJson.has(\"core\"));\n+        Assert.assertTrue(mockedVaadinCoreJson.get(\"core\").has(\"button\"));\n+        Assert.assertFalse(mockedVaadinCoreJson.has(\"vaadin\"));\n \n-        JsonObject mockedVaadinJson = getMockVaadinVersionsJson();\n+        ObjectNode mockedVaadinJson = getMockVaadinVersionsJson();\n \n-        reactComponents = Json.createObject();\n-        reactData = Json.createObject();\n+        reactComponents = JacksonUtils.createObjectNode();\n+        reactData = JacksonUtils.createObjectNode();\n         reactData.put(\"jsVersion\", \"24.4.0-alpha13\");\n         reactData.put(\"npmName\", \"@vaadin/react-components-pro\");\n         reactData.put(\"mode\", \"react\");\n \n-        reactComponents.put(\"react-components-pro\", reactData);\n+        reactComponents.set(\"react-components-pro\", reactData);\n \n-        mockedVaadinJson.put(\"react\", reactComponents);\n+        mockedVaadinJson.set(\"react\", reactComponents);\n \n-        FileUtils.write(coreVersionsFile, mockedVaadinCoreJson.toJson(),\n+        FileUtils.write(coreVersionsFile, mockedVaadinCoreJson.toString(),\n                 StandardCharsets.UTF_8);\n-        FileUtils.write(vaadinVersionsFile, mockedVaadinJson.toJson(),\n+        FileUtils.write(vaadinVersionsFile, mockedVaadinJson.toString(),\n                 StandardCharsets.UTF_8);\n         Mockito.when(finder.getResource(Constants.VAADIN_CORE_VERSIONS_JSON))\n                 .thenReturn(coreVersionsFile.toURI().toURL());\n@@ -594,37 +594,35 @@ public void testGetPlatformPinnedDependencies_VaadinAndVaadinCoreVersionsArePres\n             throws IOException {\n         File coreVersionsFile = File.createTempFile(\"vaadin-core-versions\",\n                 \".json\", temporaryFolder.newFolder());\n-        JsonObject mockedVaadinCoreJson = getMockVaadinCoreVersionsJson();\n-        Assert.assertTrue(mockedVaadinCoreJson.hasKey(\"core\"));\n-        Assert.assertTrue(\n-                mockedVaadinCoreJson.getObject(\"core\").hasKey(\"button\"));\n-        Assert.assertFalse(mockedVaadinCoreJson.hasKey(\"vaadin\"));\n+        JsonNode mockedVaadinCoreJson = getMockVaadinCoreVersionsJson();\n+        Assert.assertTrue(mockedVaadinCoreJson.has(\"core\"));\n+        Assert.assertTrue(mockedVaadinCoreJson.get(\"core\").has(\"button\"));\n+        Assert.assertFalse(mockedVaadinCoreJson.has(\"vaadin\"));\n \n-        FileUtils.write(coreVersionsFile, mockedVaadinCoreJson.toJson(),\n+        FileUtils.write(coreVersionsFile, mockedVaadinCoreJson.toString(),\n                 StandardCharsets.UTF_8);\n         Mockito.when(finder.getResource(Constants.VAADIN_CORE_VERSIONS_JSON))\n                 .thenReturn(coreVersionsFile.toURI().toURL());\n \n         File vaadinVersionsFile = File.createTempFile(\"vaadin-versions\",\n                 \".json\", temporaryFolder.newFolder());\n-        JsonObject mockedVaadinJson = getMockVaadinVersionsJson();\n-        Assert.assertFalse(mockedVaadinJson.hasKey(\"core\"));\n-        Assert.assertTrue(mockedVaadinJson.hasKey(\"vaadin\"));\n+        JsonNode mockedVaadinJson = getMockVaadinVersionsJson();\n+        Assert.assertFalse(mockedVaadinJson.has(\"core\"));\n+        Assert.assertTrue(mockedVaadinJson.has(\"vaadin\"));\n+        Assert.assertTrue(mockedVaadinJson.get(\"vaadin\").has(\"grid-pro\"));\n         Assert.assertTrue(\n-                mockedVaadinJson.getObject(\"vaadin\").hasKey(\"grid-pro\"));\n-        Assert.assertTrue(\n-                mockedVaadinJson.getObject(\"vaadin\").hasKey(\"vaadin-grid-pro\"));\n+                mockedVaadinJson.get(\"vaadin\").has(\"vaadin-grid-pro\"));\n \n-        FileUtils.write(vaadinVersionsFile, mockedVaadinJson.toJson(),\n+        FileUtils.write(vaadinVersionsFile, mockedVaadinJson.toString(),\n                 StandardCharsets.UTF_8);\n         Mockito.when(finder.getResource(Constants.VAADIN_VERSIONS_JSON))\n                 .thenReturn(vaadinVersionsFile.toURI().toURL());\n \n-        JsonObject pinnedVersions = nodeUpdater.getPlatformPinnedDependencies();\n+        ObjectNode pinnedVersions = nodeUpdater.getPlatformPinnedDependencies();\n \n-        Assert.assertTrue(pinnedVersions.hasKey(\"@vaadin/button\"));\n-        Assert.assertTrue(pinnedVersions.hasKey(\"@vaadin/grid-pro\"));\n-        Assert.assertTrue(pinnedVersions.hasKey(\"@vaadin/vaadin-grid-pro\"));\n+        Assert.assertTrue(pinnedVersions.has(\"@vaadin/button\"));\n+        Assert.assertTrue(pinnedVersions.has(\"@vaadin/grid-pro\"));\n+        Assert.assertTrue(pinnedVersions.has(\"@vaadin/vaadin-grid-pro\"));\n     }\n \n     @Test\n@@ -723,10 +721,10 @@ public void readPackageJson_nonExistingFile_doesNotThrow()\n     @Test\n     public void readPackageJson_nonExistingFile_jsonContainsDepsAndDevDeps()\n             throws IOException {\n-        JsonObject jsonObject = nodeUpdater\n+        JsonNode jsonObject = nodeUpdater\n                 .readPackageJson(\"non-existing-folder\");\n-        Assert.assertTrue(jsonObject.hasKey(\"dependencies\"));\n-        Assert.assertTrue(jsonObject.hasKey(\"devDependencies\"));\n+        Assert.assertTrue(jsonObject.has(\"dependencies\"));\n+        Assert.assertTrue(jsonObject.has(\"devDependencies\"));\n     }\n \n     @Test\n@@ -760,21 +758,21 @@ Logger log() {\n         Mockito.verifyNoInteractions(log);\n     }\n \n-    private String getPolymerVersion(JsonObject object) {\n-        JsonObject deps = object.get(\"dependencies\");\n-        return deps.getString(\"@polymer/polymer\");\n+    private String getPolymerVersion(JsonNode object) {\n+        JsonNode deps = object.get(\"dependencies\");\n+        return deps.get(\"@polymer/polymer\").textValue();\n     }\n \n-    private JsonObject getMockVaadinCoreVersionsJson() {\n+    private ObjectNode getMockVaadinCoreVersionsJson() {\n         // @formatter:off\n-        return Json.parse(\n+        return (ObjectNode) JacksonUtils.readTree(\n                 \"\"\"\n                 {\n                     \"bundles\": {\n                         \"vaadin\": {\n                             \"jsVersion\": \"23.2.0\",\n                             \"npmName\": \"@vaadin/bundles\"\n-                        },\n+                        }\n                     },\n                     \"core\": {\n                         \"accordion\": {\n@@ -800,7 +798,7 @@ private JsonObject getMockVaadinCoreVersionsJson() {\n                         \"checkbox\": {\n                             \"jsVersion\": \"23.2.0\",\n                             \"npmName\": \"@vaadin/checkbox\"\n-                        },\n+                        }\n                     },\n                     \"platform\": \"23.2.0\"\n                 }\n@@ -809,9 +807,9 @@ private JsonObject getMockVaadinCoreVersionsJson() {\n         // @formatter:on\n     }\n \n-    private JsonObject getMockVaadinVersionsJson() {\n+    private ObjectNode getMockVaadinVersionsJson() {\n         // @formatter:off\n-        return Json.parse(\n+        return (ObjectNode) JacksonUtils.readTree(\n                 \"\"\"\n                 {\n                     \"vaadin\": {\n@@ -847,7 +845,7 @@ private JsonObject getMockVaadinVersionsJson() {\n                             \"jsVersion\": \"23.2.0\",\n                             \"npmName\": \"@vaadin/vaadin-grid-pro\",\n                             \"pro\": true\n-                        },\n+                        }\n                     },\n                     \"platform\": \"23.2.0\"\n                 }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskCopyFrontendFilesTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskCopyFrontendFilesTest.java\nindex 36dea463f85..c54eba0a8da 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskCopyFrontendFilesTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskCopyFrontendFilesTest.java\n@@ -24,6 +24,7 @@\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Rule;\n@@ -33,8 +34,6 @@\n import com.vaadin.flow.testutil.TestUtils;\n import com.vaadin.tests.util.MockOptions;\n \n-import elemental.json.JsonObject;\n-\n import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n import static com.vaadin.flow.server.Constants.TARGET;\n \n@@ -88,9 +87,9 @@ public void should_createPackageJson() throws IOException {\n         task.execute();\n         Assert.assertTrue(new File(npmFolder, PACKAGE_JSON).exists());\n         Assert.assertFalse(new File(generatedFolder, PACKAGE_JSON).exists());\n-        JsonObject deps = task.getPackageJson().getObject(\"dependencies\");\n-        Assert.assertFalse(deps.hasKey(NodeUpdater.DEP_NAME_FLOW_DEPS));\n-        Assert.assertFalse(deps.hasKey(NodeUpdater.DEP_NAME_FLOW_JARS));\n+        JsonNode deps = task.getPackageJson().get(\"dependencies\");\n+        Assert.assertFalse(deps.has(NodeUpdater.DEP_NAME_FLOW_DEPS));\n+        Assert.assertFalse(deps.has(NodeUpdater.DEP_NAME_FLOW_JARS));\n     }\n \n     private void should_collectJsAndCssFilesFromJars(String jarFile,\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskInstallFrontendBuildPluginsTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskInstallFrontendBuildPluginsTest.java\nindex 62c9fc4cfd2..6f64039aa07 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskInstallFrontendBuildPluginsTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskInstallFrontendBuildPluginsTest.java\n@@ -24,6 +24,8 @@\n import java.util.List;\n import java.util.stream.Collectors;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.FilenameUtils;\n import org.junit.Assert;\n@@ -34,13 +36,10 @@\n import org.mockito.Mockito;\n \n import com.vaadin.flow.di.Lookup;\n-import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.frontend.scanner.FrontendDependencies;\n import com.vaadin.tests.util.MockOptions;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n import static com.vaadin.flow.server.Constants.TARGET;\n import static com.vaadin.flow.server.frontend.NodeUpdater.DEV_DEPENDENCIES;\n import static com.vaadin.flow.server.frontend.FrontendPluginsUtil.PLUGIN_TARGET;\n@@ -107,13 +106,12 @@ public void execute() {\n \n         task.execute();\n \n-        final JsonObject packageJson = nodeUpdater.getPackageJson();\n+        final JsonNode packageJson = nodeUpdater.getPackageJson();\n \n-        final JsonObject devDependencies = packageJson\n-                .getObject(DEV_DEPENDENCIES);\n+        final JsonNode devDependencies = packageJson.get(DEV_DEPENDENCIES);\n         for (String plugin : FrontendPluginsUtil.getPlugins()) {\n             Assert.assertFalse(\"Plugin \" + plugin + \" added to packageJson\",\n-                    devDependencies.hasKey(\"@vaadin/\" + plugin));\n+                    devDependencies.has(\"@vaadin/\" + plugin));\n         }\n     }\n \n@@ -129,12 +127,12 @@ private void assertPlugins() throws IOException {\n     private void assertPlugin(String plugin) throws IOException {\n         final File pluginFolder = getPluginFolder(plugin);\n \n-        final JsonArray files = getPluginFiles(pluginFolder);\n-        for (int i = 0; i < files.length(); i++) {\n+        final ArrayNode files = getPluginFiles(pluginFolder);\n+        for (int i = 0; i < files.size(); i++) {\n             Assert.assertTrue(\n-                    \"Missing plugin file \" + files.getString(i) + \" for \"\n+                    \"Missing plugin file \" + files.get(i).textValue() + \" for \"\n                             + plugin,\n-                    new File(pluginFolder, files.getString(i)).exists());\n+                    new File(pluginFolder, files.get(i).textValue()).exists());\n         }\n     }\n \n@@ -143,14 +141,14 @@ private void verifyPluginScriptFilesAreDefined(String plugin)\n         final File pluginFolder = new File(this.getClass().getClassLoader()\n                 .getResource(PLUGIN_TARGET + \"/\" + plugin).getFile());\n \n-        final JsonArray files = getPluginFiles(pluginFolder);\n-        List<String> fileNames = new ArrayList<>(files.length());\n-        for (int i = 0; i < files.length(); i++) {\n+        final ArrayNode files = getPluginFiles(pluginFolder);\n+        List<String> fileNames = new ArrayList<>(files.size());\n+        for (int i = 0; i < files.size(); i++) {\n             Assert.assertTrue(\n-                    \"Missing plugin file \" + files.getString(i) + \" for \"\n+                    \"Missing plugin file \" + files.get(i).textValue() + \" for \"\n                             + plugin,\n-                    new File(pluginFolder, files.getString(i)).exists());\n-            fileNames.add(files.getString(i));\n+                    new File(pluginFolder, files.get(i).textValue()).exists());\n+            fileNames.add(files.get(i).textValue());\n         }\n         final List<String> pluginFiles = Arrays\n                 .stream(pluginFolder.listFiles((dir, name) -> FilenameUtils\n@@ -170,10 +168,11 @@ private void verifyPluginScriptFilesAreDefined(String plugin)\n      * @return\n      * @throws IOException\n      */\n-    private JsonArray getPluginFiles(File pluginFolder) throws IOException {\n-        final JsonObject packageJson = Json.parse(FileUtils.readFileToString(\n-                new File(pluginFolder, \"package.json\"), UTF_8));\n-        return packageJson.getArray(\"files\");\n+    private ArrayNode getPluginFiles(File pluginFolder) throws IOException {\n+        final JsonNode packageJson = JacksonUtils\n+                .readTree(FileUtils.readFileToString(\n+                        new File(pluginFolder, \"package.json\"), UTF_8));\n+        return (ArrayNode) packageJson.get(\"files\");\n     }\n \n     private File getPluginFolder(String plugin) {\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunNpmInstallTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunNpmInstallTest.java\nindex 490d6317425..cc5a012c4c4 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunNpmInstallTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunNpmInstallTest.java\n@@ -26,6 +26,8 @@\n import java.util.Comparator;\n import java.util.List;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import net.jcip.annotations.NotThreadSafe;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n@@ -42,7 +44,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.Constants;\n import com.vaadin.flow.server.ExecutionFailedException;\n import com.vaadin.flow.server.frontend.installer.NodeInstaller;\n@@ -51,9 +53,6 @@\n import com.vaadin.flow.testcategory.SlowTests;\n import com.vaadin.tests.util.MockOptions;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-\n import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n import static com.vaadin.flow.server.Constants.TARGET;\n import static com.vaadin.flow.server.frontend.NodeUpdater.DEPENDENCIES;\n@@ -277,7 +276,7 @@ public void runNpmInstall_matchingHashButEmptyModules_npmInstallIsExecuted()\n     }\n \n     public void writeLocalHash(String hash) throws IOException {\n-        final JsonObject localHash = Json.createObject();\n+        final ObjectNode localHash = JacksonUtils.createObjectNode();\n         localHash.put(HASH_KEY, hash);\n \n         final File localHashFile = new File(options.getNodeModulesFolder(),\n@@ -317,7 +316,7 @@ public void runNpmInstall_externalUpdateOfPackages_npmInstallIsRerun()\n         getNodeUpdater().modified = true;\n \n         // manually fake TaskUpdatePackages.\n-        JsonObject packageJson = getNodeUpdater().getPackageJson();\n+        ObjectNode packageJson = getNodeUpdater().getPackageJson();\n         updatePackageHash(packageJson);\n         getNodeUpdater().writePackageFile(packageJson);\n \n@@ -330,19 +329,19 @@ public void runNpmInstall_externalUpdateOfPackages_npmInstallIsRerun()\n \n         String fileContent = FileUtils.readFileToString(localHashFile,\n                 UTF_8.name());\n-        JsonObject localHash = Json.parse(fileContent);\n+        JsonNode localHash = JacksonUtils.readTree(fileContent);\n         Assert.assertNotEquals(\"We should have a non empty hash key\", \"\",\n-                localHash.getString(HASH_KEY));\n+                localHash.get(HASH_KEY).textValue());\n \n         // Update package json and hash as if someone had pushed to code repo.\n         packageJson = getNodeUpdater().getPackageJson();\n-        packageJson.getObject(VAADIN_DEP_KEY).getObject(DEPENDENCIES)\n+        ((ObjectNode) packageJson.get(VAADIN_DEP_KEY).get(DEPENDENCIES))\n                 .put(\"a-avataaar\", \"^1.2.5\");\n-        String hash = packageJson.getObject(VAADIN_DEP_KEY).getString(HASH_KEY);\n+        String hash = packageJson.get(VAADIN_DEP_KEY).get(HASH_KEY).textValue();\n         updatePackageHash(packageJson);\n \n         Assert.assertNotEquals(\"Hash should have been updated\", hash,\n-                packageJson.getObject(VAADIN_DEP_KEY).getString(HASH_KEY));\n+                packageJson.get(VAADIN_DEP_KEY).get(HASH_KEY).textValue());\n \n         getNodeUpdater().writePackageFile(packageJson);\n         logger = Mockito.mock(Logger.class);\n@@ -380,11 +379,12 @@ protected void setupEsbuildAndFooInstallation() throws IOException {\n                 StandardCharsets.UTF_8);\n \n         File packageJsonFile = ensurePackageJson();\n-        JsonObject packageJson = getNodeUpdater().getPackageJson();\n-        packageJson.getObject(DEV_DEPENDENCIES).put(\"esbuild\",\n+        JsonNode packageJson = getNodeUpdater().getPackageJson();\n+        ((ObjectNode) packageJson.get(DEV_DEPENDENCIES)).put(\"esbuild\",\n                 \"./fake-esbuild\");\n-        packageJson.getObject(DEV_DEPENDENCIES).put(\"foo\", \"./fake-foo\");\n-        FileUtils.write(packageJsonFile, packageJson.toJson(),\n+        ((ObjectNode) packageJson.get(DEV_DEPENDENCIES)).put(\"foo\",\n+                \"./fake-foo\");\n+        FileUtils.write(packageJsonFile, packageJson.toString(),\n                 StandardCharsets.UTF_8);\n \n     }\n@@ -399,13 +399,15 @@ public void runNpmInstall_noPostinstallScript_postIntstallNotExecuted()\n                 new File(options.getNodeModulesFolder().getParentFile(),\n                         \"fake-esbuild\"),\n                 \"package.json\");\n-        JsonObject esbuildPackageJsonContents = Json.parse(IOUtils.toString(\n-                getClass().getResourceAsStream(\n-                        \"fake-package-with-postinstall.json\"),\n-                StandardCharsets.UTF_8));\n-        esbuildPackageJsonContents.getObject(\"scripts\").remove(\"postinstall\");\n-        FileUtils.write(esbuildPackageJson, esbuildPackageJsonContents.toJson(),\n-                StandardCharsets.UTF_8);\n+        JsonNode esbuildPackageJsonContents = JacksonUtils\n+                .readTree(IOUtils.toString(\n+                        getClass().getResourceAsStream(\n+                                \"fake-package-with-postinstall.json\"),\n+                        StandardCharsets.UTF_8));\n+        ((ObjectNode) esbuildPackageJsonContents.get(\"scripts\"))\n+                .remove(\"postinstall\");\n+        FileUtils.write(esbuildPackageJson,\n+                esbuildPackageJsonContents.toString(), StandardCharsets.UTF_8);\n \n         logger = new MockLogger();\n         Assert.assertTrue(logger.isDebugEnabled());\n@@ -476,17 +478,19 @@ public void shouldRunNpmInstallWhenFolderChanges() throws Exception {\n         setupEsbuildAndFooInstallation();\n \n         String packageJsonHash = getNodeUpdater().getPackageJson()\n-                .getObject(VAADIN_DEP_KEY).getString(HASH_KEY);\n-        JsonObject vaadinJson = Json.createObject();\n+                .get(VAADIN_DEP_KEY).get(HASH_KEY).textValue();\n+        ObjectNode vaadinJson = JacksonUtils.createObjectNode();\n         vaadinJson.put(HASH_KEY, packageJsonHash);\n         vaadinJson.put(PROJECT_FOLDER, npmFolder.getAbsolutePath());\n         File vaadinJsonFile = getNodeUpdater().getVaadinJsonFile();\n \n-        FileUtils.writeStringToFile(vaadinJsonFile, vaadinJson.toJson(), UTF_8);\n+        FileUtils.writeStringToFile(vaadinJsonFile, vaadinJson.toString(),\n+                UTF_8);\n \n         Assert.assertFalse(task.isVaadinHashOrProjectFolderUpdated());\n         vaadinJson.put(PROJECT_FOLDER, npmFolder.getAbsolutePath() + \"foo\");\n-        FileUtils.writeStringToFile(vaadinJsonFile, vaadinJson.toJson(), UTF_8);\n+        FileUtils.writeStringToFile(vaadinJsonFile, vaadinJson.toString(),\n+                UTF_8);\n         Assert.assertTrue(task.isVaadinHashOrProjectFolderUpdated());\n     }\n \n@@ -501,22 +505,22 @@ public void shouldRunNpmInstallWhenFolderChanges() throws Exception {\n      * @param packageJson\n      *            package.json json object\n      */\n-    public void updatePackageHash(JsonObject packageJson) {\n-        final JsonObject vaadinDep = packageJson.getObject(VAADIN_DEP_KEY)\n-                .getObject(DEPENDENCIES);\n-        JsonObject dependencies = Json.createObject();\n-        for (String key : vaadinDep.keys()) {\n-            dependencies.put(key, vaadinDep.getString(key));\n+    public void updatePackageHash(ObjectNode packageJson) {\n+        final ObjectNode vaadinDep = (ObjectNode) packageJson\n+                .get(VAADIN_DEP_KEY).get(DEPENDENCIES);\n+        ObjectNode dependencies = JacksonUtils.createObjectNode();\n+        for (String key : JacksonUtils.getKeys(vaadinDep)) {\n+            dependencies.put(key, vaadinDep.get(key).textValue());\n         }\n-        JsonObject vaadinDevDep = packageJson.getObject(VAADIN_DEP_KEY)\n-                .getObject(DEV_DEPENDENCIES);\n-        JsonObject devDependencies = Json.createObject();\n-        for (String key : vaadinDevDep.keys()) {\n-            devDependencies.put(key, vaadinDevDep.getString(key));\n+        ObjectNode vaadinDevDep = (ObjectNode) packageJson.get(VAADIN_DEP_KEY)\n+                .get(DEV_DEPENDENCIES);\n+        ObjectNode devDependencies = JacksonUtils.createObjectNode();\n+        for (String key : JacksonUtils.getKeys(vaadinDevDep)) {\n+            devDependencies.put(key, vaadinDevDep.get(key).textValue());\n         }\n-        packageJson.put(DEPENDENCIES, dependencies);\n-        packageJson.put(DEV_DEPENDENCIES, devDependencies);\n-        packageJson.getObject(VAADIN_DEP_KEY).put(HASH_KEY,\n+        packageJson.set(DEPENDENCIES, dependencies);\n+        packageJson.set(DEV_DEPENDENCIES, devDependencies);\n+        ((ObjectNode) packageJson.get(VAADIN_DEP_KEY)).put(HASH_KEY,\n                 TaskUpdatePackages.generatePackageJsonHash(packageJson));\n         packageJson.remove(DEPENDENCIES);\n         packageJson.remove(DEV_DEPENDENCIES);\n@@ -575,7 +579,7 @@ protected String getToolName() {\n     private File ensurePackageJson() throws IOException {\n         File file = new File(npmFolder, PACKAGE_JSON);\n         if (!file.exists()) {\n-            JsonObject packageJson = getNodeUpdater().getPackageJson();\n+            JsonNode packageJson = getNodeUpdater().getPackageJson();\n             getNodeUpdater().writePackageFile(packageJson);\n         }\n         return file;\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunPnpmInstallTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunPnpmInstallTest.java\nindex ee17d66e03e..b9e39970ff5 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunPnpmInstallTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunPnpmInstallTest.java\n@@ -23,6 +23,8 @@\n import java.util.Collections;\n import java.util.List;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import net.jcip.annotations.NotThreadSafe;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n@@ -35,7 +37,7 @@\n import org.mockito.Mockito;\n import org.slf4j.Logger;\n \n-import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.Constants;\n import com.vaadin.flow.server.ExecutionFailedException;\n import com.vaadin.flow.server.frontend.installer.NodeInstaller;\n@@ -44,9 +46,6 @@\n import com.vaadin.flow.testcategory.SlowTests;\n import com.vaadin.flow.testutil.FrontendStubs;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-\n import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n import static com.vaadin.flow.server.Constants.TARGET;\n import static com.vaadin.flow.testutil.FrontendStubs.createStubNode;\n@@ -152,12 +151,12 @@ public void generateVersionsJson_userHasNoCustomVersions_platformIsMergedWithDev\n                 + \"}\", PINNED_VERSION), StandardCharsets.UTF_8);\n         // @formatter:on\n \n-        JsonObject object = getGeneratedVersionsContent(versions, packageJson);\n-        Assert.assertTrue(object.hasKey(\"@vaadin/vaadin-overlay\"));\n+        JsonNode object = getGeneratedVersionsContent(versions, packageJson);\n+        Assert.assertTrue(object.has(\"@vaadin/vaadin-overlay\"));\n \n         // Platform version takes precedence over dev deps\n         Assert.assertEquals(PINNED_VERSION,\n-                object.getString(\"@vaadin/vaadin-overlay\"));\n+                object.get(\"@vaadin/vaadin-overlay\").textValue());\n     }\n \n     @Test\n@@ -225,15 +224,15 @@ public void generateVersionsJson_userDefinedVersions_versionOnlyPinnedForNotAdde\n                 versionsNotificationVersion, versionsUploadVersion), StandardCharsets.UTF_8);\n         // @formatter:on\n \n-        JsonObject generatedVersions = getGeneratedVersionsContent(versions,\n+        JsonNode generatedVersions = getGeneratedVersionsContent(versions,\n                 packageJson);\n \n         Assert.assertEquals(\"Login version is the same for user and platform.\",\n                 loginVersion,\n-                generatedVersions.getString(\"@vaadin/vaadin-login\"));\n+                generatedVersions.get(\"@vaadin/vaadin-login\").textValue());\n         Assert.assertEquals(\"Notification version should use platform\",\n-                versionsNotificationVersion,\n-                generatedVersions.getString(\"@vaadin/vaadin-notification\"));\n+                versionsNotificationVersion, generatedVersions\n+                        .get(\"@vaadin/vaadin-notification\").textValue());\n     }\n \n     @Test\n@@ -314,24 +313,25 @@ public void runPnpmInstall_userVersionNewerThanPinned_installedOverlayVersionIsN\n                 StandardCharsets.UTF_8);\n \n         final VersionsJsonFilter versionsJsonFilter = new VersionsJsonFilter(\n-                Json.parse(packageJsonContent), NodeUpdater.DEPENDENCIES);\n+                JacksonUtils.readTree(packageJsonContent),\n+                NodeUpdater.DEPENDENCIES);\n         // Platform defines a pinned version\n         TaskRunNpmInstall task = createTask(versionsJsonFilter\n                 .getFilteredVersions(\n-                        Json.parse(\"{ \\\"@vaadin/vaadin-overlay\\\":\\\"\"\n+                        JacksonUtils.readTree(\"{ \\\"@vaadin/vaadin-overlay\\\":\\\"\"\n                                 + PINNED_VERSION + \"\\\"}\"),\n                         \"test-versions.json\")\n-                .toJson());\n+                .toString());\n         task.execute();\n \n         File overlayPackageJson = new File(options.getNodeModulesFolder(),\n                 \"@vaadin/vaadin-overlay/package.json\");\n \n         // The resulting version should be the one specified by the user\n-        JsonObject overlayPackage = Json.parse(FileUtils\n+        JsonNode overlayPackage = JacksonUtils.readTree(FileUtils\n                 .readFileToString(overlayPackageJson, StandardCharsets.UTF_8));\n         Assert.assertEquals(customOverlayVersion,\n-                overlayPackage.getString(\"version\"));\n+                overlayPackage.get(\"version\").textValue());\n     }\n \n     @Test\n@@ -475,14 +475,14 @@ protected TaskRunNpmInstall createTask(String versionsContent) {\n         return new TaskRunNpmInstall(updater, options);\n     }\n \n-    private JsonObject getGeneratedVersionsContent(File versions,\n+    private JsonNode getGeneratedVersionsContent(File versions,\n             File packageJsonFile) throws IOException {\n         ClassFinder classFinder = getClassFinder();\n         Mockito.when(\n                 classFinder.getResource(Constants.VAADIN_CORE_VERSIONS_JSON))\n                 .thenReturn(versions.toURI().toURL());\n \n-        JsonObject packageJson = Json.parse(FileUtils\n+        ObjectNode packageJson = JacksonUtils.readTree(FileUtils\n                 .readFileToString(packageJsonFile, StandardCharsets.UTF_8));\n         getNodeUpdater().generateVersionsJson(packageJson);\n         return getNodeUpdater().versionsJson;\n@@ -509,18 +509,18 @@ private NodeUpdater createNodeUpdater(String versionsContent) {\n             @Override\n             public void execute() {\n                 try {\n-                    generateVersionsJson(Json.createObject());\n+                    generateVersionsJson(JacksonUtils.createObjectNode());\n                 } catch (Exception e) {\n                     throw new RuntimeException(e);\n                 }\n             }\n \n             @Override\n-            JsonObject getPlatformPinnedDependencies() throws IOException {\n+            ObjectNode getPlatformPinnedDependencies() {\n                 if (versionsContent != null) {\n-                    return Json.parse(versionsContent);\n+                    return JacksonUtils.readTree(versionsContent);\n                 } else {\n-                    return Json.createObject();\n+                    return JacksonUtils.createObjectNode();\n                 }\n             }\n \n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdatePackagesNpmTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdatePackagesNpmTest.java\nindex e65d2bf764c..cc37de0ced9 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdatePackagesNpmTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdatePackagesNpmTest.java\n@@ -449,15 +449,19 @@ public void npmIsInUse_packageJsonVersionIsUpdated_vaadinSectionIsNotChanged()\n     public void npmIsInUse_versionsJsonHasVaadinCoreVersionPinned_vaadinCoreVersionIgnored()\n             throws IOException {\n         final String expectedElementMixinVersion = \"21.0.0-alpha2\";\n-        String versionJsonString = //@formatter:off\n-                \"{ \\\"core\\\": {\" + \"\\\"vaadin-element-mixin\\\": {\\n\"\n-                        + \"    \\\"jsVersion\\\": \\\"\" + expectedElementMixinVersion\n-                        + \"\\\",\\n\" + \"    \\\"npmName\\\": \\\"\" + VAADIN_ELEMENT_MIXIN\n-                        + \"\\\"\\n\" + \"},\\n\" + \"\\\"vaadin-core\\\": {\\n\"\n+        String versionJsonString =\n+        //@formatter:off\n+                \"{ \\\"core\\\": {\"\n+                        + \"\\\"vaadin-element-mixin\\\": {\\n\"\n+                        + \"    \\\"jsVersion\\\": \\\"\" + expectedElementMixinVersion + \"\\\",\\n\"\n+                        + \"    \\\"npmName\\\": \\\"\" + VAADIN_ELEMENT_MIXIN + \"\\\"\\n\"\n+                        + \"},\\n\"\n+                        + \"\\\"vaadin-core\\\": {\\n\"\n                         + \"    \\\"jsVersion\\\": \\\"21.0.0.alpha1\\\",\\n\"\n                         // broken for npm\n-                        + \"    \\\"npmName\\\": \\\"\" + VAADIN_CORE_NPM_PACKAGE\n-                        + \"\\\"\\n\" + \"},\\n\" + \"}}},\\n\";//@formatter:on\n+                        + \"    \\\"npmName\\\": \\\"\" + VAADIN_CORE_NPM_PACKAGE + \"\\\"\\n\"\n+                        + \"}\\n\"\n+                        + \"}}\\n\";//@formatter:on\n         FileUtils.write(versionJsonFile, versionJsonString,\n                 StandardCharsets.UTF_8);\n \n@@ -586,11 +590,15 @@ private boolean isSorted(String[] array) {\n     @Test\n     public void npmIsInUse_versionsJsonContainsSameVersions_nothingIsModified()\n             throws IOException {\n-        String versionJsonString = //@formatter:off\n-                \"{ \\\"core\\\": {\" + \"\\\"vaadin-element-mixin\\\": {\\n\"\n-                        + \"    \\\"jsVersion\\\": \\\"\" + PLATFORM_DIALOG_VERSION\n-                        + \"\\\",\\n\" + \"    \\\"npmName\\\": \\\"\" + VAADIN_DIALOG\n-                        + \"\\\"\\n\" + \"},\\n\" + \"}}},\\n\";//@formatter:on\n+        String versionJsonString =\n+        //@formatter:off\n+                          \"{ \\\"core\\\": {\"\n+                        + \"\\\"vaadin-element-mixin\\\": {\\n\"\n+                        + \"    \\\"jsVersion\\\": \\\"\" + PLATFORM_DIALOG_VERSION + \"\\\",\\n\"\n+                        + \"    \\\"npmName\\\": \\\"\" + VAADIN_DIALOG + \"\\\"\\n\"\n+                        + \"}\\n\"\n+                        + \"}}\\n\";\n+                //@formatter:on\n         FileUtils.write(versionJsonFile, versionJsonString,\n                 StandardCharsets.UTF_8);\n \n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/ThemeValidationUtilTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/ThemeValidationUtilTest.java\nindex d7ba13233f2..f849211dd60 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/ThemeValidationUtilTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/ThemeValidationUtilTest.java\n@@ -15,21 +15,21 @@\n  */\n package com.vaadin.flow.server.frontend;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n import org.junit.Assert;\n import org.junit.Test;\n \n import java.util.ArrayList;\n import java.util.List;\n \n+import com.vaadin.flow.internal.JacksonUtils;\n+\n public class ThemeValidationUtilTest {\n \n     @Test\n     public void testObjectsIncludeMethodWithSameElementsInArrays() {\n-        JsonArray jsonFromBundle = createJsonArray(\"a\", \"b\", \"c\");\n-        JsonArray projectJson = createJsonArray(\"a\", \"b\", \"c\");\n+        ArrayNode jsonFromBundle = createArrayNode(\"a\", \"b\", \"c\");\n+        ArrayNode projectJson = createArrayNode(\"a\", \"b\", \"c\");\n         List<String> missedKeys = new ArrayList<>();\n \n         boolean result = ThemeValidationUtil.objectIncludesEntry(jsonFromBundle,\n@@ -40,8 +40,8 @@ public void testObjectsIncludeMethodWithSameElementsInArrays() {\n \n     @Test\n     public void testObjectsIncludeMethodWithSameElementsInArraysDifferentOrder() {\n-        JsonArray jsonFromBundle = createJsonArray(\"a\", \"b\", \"c\");\n-        JsonArray projectJson = createJsonArray(\"b\", \"a\", \"c\");\n+        ArrayNode jsonFromBundle = createArrayNode(\"a\", \"b\", \"c\");\n+        ArrayNode projectJson = createArrayNode(\"b\", \"a\", \"c\");\n         List<String> missedKeys = new ArrayList<>();\n \n         boolean result = ThemeValidationUtil.objectIncludesEntry(jsonFromBundle,\n@@ -53,20 +53,20 @@ public void testObjectsIncludeMethodWithSameElementsInArraysDifferentOrder() {\n     @Test\n     public void testObjectsIncludeMethodArraysAreDifferent() {\n         List<String> missedKeysForBundle = new ArrayList<>();\n-        JsonArray jsonFromBundle = createJsonArray(\"a\", \"c\");\n-        JsonArray jsonFromProject = createJsonArray(\"a\", \"b\", \"c\");\n+        ArrayNode jsonFromBundle = createArrayNode(\"a\", \"c\");\n+        ArrayNode jsonFromProject = createArrayNode(\"a\", \"b\", \"c\");\n \n         boolean result = ThemeValidationUtil.objectIncludesEntry(jsonFromBundle,\n                 jsonFromProject, missedKeysForBundle);\n         Assert.assertFalse(result);\n         // the missed keys should be the same as the jsonFromBundle as the other\n         // array is empty\n-        // also because it's a JsonArray the keys are quoted\n+        // also because it's a ArrayNode the keys are quoted\n         Assert.assertEquals(missedKeysForBundle, List.of(\"\\\"b\\\"\"));\n \n         List<String> missedKeysForProject = new ArrayList<>();\n-        jsonFromBundle = createJsonArray(\"a\", \"b\", \"c\");\n-        jsonFromProject = createJsonArray(\"a\");\n+        jsonFromBundle = createArrayNode(\"a\", \"b\", \"c\");\n+        jsonFromProject = createArrayNode(\"a\");\n         result = ThemeValidationUtil.objectIncludesEntry(jsonFromProject,\n                 jsonFromBundle, missedKeysForProject);\n         Assert.assertFalse(result);\n@@ -78,7 +78,8 @@ public void testObjectsIncludeMethodBothEmptyArraysAreEmpty() {\n         List<String> missedKeys = new ArrayList<>();\n \n         boolean result = ThemeValidationUtil.objectIncludesEntry(\n-                Json.createArray(), Json.createArray(), missedKeys);\n+                JacksonUtils.createArrayNode(), JacksonUtils.createArrayNode(),\n+                missedKeys);\n         Assert.assertTrue(result);\n         Assert.assertTrue(missedKeys.isEmpty());\n     }\n@@ -86,8 +87,8 @@ public void testObjectsIncludeMethodBothEmptyArraysAreEmpty() {\n     @Test\n     public void testObjectsIncludeMethodOneArrayIsEmpty() {\n         List<String> missedKeysFromProject = new ArrayList<>();\n-        JsonArray jsonFromBundle = createJsonArray(\"a\", \"b\", \"c\");\n-        JsonArray jsonFromProjectEmpty = createJsonArray();\n+        ArrayNode jsonFromBundle = createArrayNode(\"a\", \"b\", \"c\");\n+        ArrayNode jsonFromProjectEmpty = createArrayNode();\n \n         boolean result = ThemeValidationUtil.objectIncludesEntry(jsonFromBundle,\n                 jsonFromProjectEmpty, missedKeysFromProject);\n@@ -95,13 +96,13 @@ public void testObjectsIncludeMethodOneArrayIsEmpty() {\n \n         // the missed keys should be the same as the jsonFromBundle as the other\n         // array is empty\n-        // also because it's a JsonArray the keys are quoted\n+        // also because it's a ArrayNode the keys are quoted\n         Assert.assertEquals(missedKeysFromProject,\n                 List.of(\"\\\"a\\\"\", \"\\\"b\\\"\", \"\\\"c\\\"\"));\n \n         List<String> missedKeysFromBundle = new ArrayList<>();\n-        JsonArray jsonFromProject = createJsonArray(\"a\", \"b\", \"c\");\n-        JsonArray jsonFromBundleEmpty = createJsonArray();\n+        ArrayNode jsonFromProject = createArrayNode(\"a\", \"b\", \"c\");\n+        ArrayNode jsonFromBundleEmpty = createArrayNode();\n \n         result = ThemeValidationUtil.objectIncludesEntry(jsonFromBundleEmpty,\n                 jsonFromProject, missedKeysFromBundle);\n@@ -110,10 +111,10 @@ public void testObjectsIncludeMethodOneArrayIsEmpty() {\n                 List.of(\"\\\"a\\\"\", \"\\\"b\\\"\", \"\\\"c\\\"\"));\n     }\n \n-    private JsonArray createJsonArray(String... values) {\n-        JsonArray array = Json.createArray();\n+    private ArrayNode createArrayNode(String... values) {\n+        ArrayNode array = JacksonUtils.createArrayNode();\n         for (String value : values) {\n-            array.set(array.length(), value);\n+            array.add(value);\n         }\n         return array;\n     }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonConverterTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonConverterTest.java\nindex 1dc9921352f..a14ce6c2268 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonConverterTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonConverterTest.java\n@@ -17,13 +17,13 @@\n \n import java.io.IOException;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.junit.Assert;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.TemporaryFolder;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n+import com.vaadin.flow.internal.JacksonUtils;\n \n import static com.vaadin.flow.server.frontend.VersionsJsonConverter.VAADIN_CORE_NPM_PACKAGE;\n \n@@ -43,7 +43,7 @@ public void convertPlatformVersions() throws IOException {\n                             + \" \\\"npmName\\\": \\\"@vaadin/vaadin-progress-bar\\\", \"\n                             + \"\\\"jsVersion\\\": \\\"1.1.2\\\", \"\n                             + \"\\\"mode\\\": \\\"lit\\\" \"\n-                          + \"},\"\n+                          + \"}\"\n                        + \"},\"  //core\n                 + \"\\\"vaadin-upload\\\": { \"\n                     + \"\\\"npmName\\\": \\\"@vaadin/vaadin-upload\\\", \"\n@@ -64,23 +64,23 @@ public void convertPlatformVersions() throws IOException {\n         // @formatter:on\n \n         VersionsJsonConverter convert = new VersionsJsonConverter(\n-                Json.parse(json), false, false);\n-        JsonObject convertedJson = convert.getConvertedJson();\n-        Assert.assertTrue(convertedJson.hasKey(\"@vaadin/vaadin-progress-bar\"));\n-        Assert.assertTrue(convertedJson.hasKey(\"@vaadin/vaadin-upload\"));\n-        Assert.assertTrue(convertedJson.hasKey(\"@polymer/iron-list\"));\n+                JacksonUtils.readTree(json), false, false);\n+        JsonNode convertedJson = convert.getConvertedJson();\n+        Assert.assertTrue(convertedJson.has(\"@vaadin/vaadin-progress-bar\"));\n+        Assert.assertTrue(convertedJson.has(\"@vaadin/vaadin-upload\"));\n+        Assert.assertTrue(convertedJson.has(\"@polymer/iron-list\"));\n \n-        Assert.assertFalse(convertedJson.hasKey(\"flow\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"core\"));\n-        Assert.assertFalse(convertedJson.hasKey(VAADIN_CORE_NPM_PACKAGE));\n-        Assert.assertFalse(convertedJson.hasKey(\"platform\"));\n+        Assert.assertFalse(convertedJson.has(\"flow\"));\n+        Assert.assertFalse(convertedJson.has(\"core\"));\n+        Assert.assertFalse(convertedJson.has(VAADIN_CORE_NPM_PACKAGE));\n+        Assert.assertFalse(convertedJson.has(\"platform\"));\n \n         Assert.assertEquals(\"1.1.2\",\n-                convertedJson.getString(\"@vaadin/vaadin-progress-bar\"));\n+                convertedJson.get(\"@vaadin/vaadin-progress-bar\").textValue());\n         Assert.assertEquals(\"4.2.2\",\n-                convertedJson.getString(\"@vaadin/vaadin-upload\"));\n+                convertedJson.get(\"@vaadin/vaadin-upload\").textValue());\n         Assert.assertEquals(\"3.0.2\",\n-                convertedJson.getString(\"@polymer/iron-list\"));\n+                convertedJson.get(\"@polymer/iron-list\").textValue());\n     }\n \n     @Test\n@@ -93,18 +93,18 @@ public void reactRouterInUse_reactComponentsAreAdded() {\n                     },\n                     \"vaadin-progress-bar\": {\n                       \"npmName\": \"@vaadin/vaadin-progress-bar\",\n-                      \"jsVersion\": \"1.1.2\",\n-                    },\n+                      \"jsVersion\": \"1.1.2\"\n+                    }\n                   },\n                   \"vaadin-upload\": {\n                     \"npmName\": \"@vaadin/vaadin-upload\",\n-                    \"jsVersion\": \"4.2.2\",\n+                    \"jsVersion\": \"4.2.2\"\n                   },\n                   \"iron-list\": {\n                     \"npmName\": \"@polymer/iron-list\",\n                     \"npmVersion\": \"3.0.2\",\n                     \"javaVersion\": \"3.0.0.beta1\",\n-                    \"jsVersion\": \"2.0.19\",\n+                    \"jsVersion\": \"2.0.19\"\n                   },\n                   \"vaadin-core\": {\n                       \"jsVersion\": \"21.0.0.alpha1\",\n@@ -113,7 +113,7 @@ public void reactRouterInUse_reactComponentsAreAdded() {\n                   \"react\": {\n                     \"react-components\": {\n                       \"jsVersion\": \"24.4.0-alpha7\",\n-                      \"npmName\": \"@vaadin/react-components\",\n+                      \"npmName\": \"@vaadin/react-components\"\n                     }\n                   },\n                   \"react-pro\": {\n@@ -127,33 +127,33 @@ public void reactRouterInUse_reactComponentsAreAdded() {\n                 \"\"\".formatted(VAADIN_CORE_NPM_PACKAGE);\n \n         VersionsJsonConverter convert = new VersionsJsonConverter(\n-                Json.parse(json), true, true);\n-        JsonObject convertedJson = convert.getConvertedJson();\n-        Assert.assertTrue(convertedJson.hasKey(\"@vaadin/vaadin-progress-bar\"));\n-        Assert.assertTrue(convertedJson.hasKey(\"@vaadin/vaadin-upload\"));\n-        Assert.assertTrue(convertedJson.hasKey(\"@polymer/iron-list\"));\n-        Assert.assertTrue(convertedJson.hasKey(\"@vaadin/react-components-pro\"));\n-        Assert.assertTrue(convertedJson.hasKey(\"@vaadin/react-components\"));\n-\n-        Assert.assertFalse(convertedJson.hasKey(\"flow\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"core\"));\n-        Assert.assertFalse(convertedJson.hasKey(VAADIN_CORE_NPM_PACKAGE));\n-        Assert.assertFalse(convertedJson.hasKey(\"platform\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"react\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"react-pro\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"react-components\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"react-components-pro\"));\n+                JacksonUtils.readTree(json), true, true);\n+        JsonNode convertedJson = convert.getConvertedJson();\n+        Assert.assertTrue(convertedJson.has(\"@vaadin/vaadin-progress-bar\"));\n+        Assert.assertTrue(convertedJson.has(\"@vaadin/vaadin-upload\"));\n+        Assert.assertTrue(convertedJson.has(\"@polymer/iron-list\"));\n+        Assert.assertTrue(convertedJson.has(\"@vaadin/react-components-pro\"));\n+        Assert.assertTrue(convertedJson.has(\"@vaadin/react-components\"));\n+\n+        Assert.assertFalse(convertedJson.has(\"flow\"));\n+        Assert.assertFalse(convertedJson.has(\"core\"));\n+        Assert.assertFalse(convertedJson.has(VAADIN_CORE_NPM_PACKAGE));\n+        Assert.assertFalse(convertedJson.has(\"platform\"));\n+        Assert.assertFalse(convertedJson.has(\"react\"));\n+        Assert.assertFalse(convertedJson.has(\"react-pro\"));\n+        Assert.assertFalse(convertedJson.has(\"react-components\"));\n+        Assert.assertFalse(convertedJson.has(\"react-components-pro\"));\n \n         Assert.assertEquals(\"1.1.2\",\n-                convertedJson.getString(\"@vaadin/vaadin-progress-bar\"));\n+                convertedJson.get(\"@vaadin/vaadin-progress-bar\").textValue());\n         Assert.assertEquals(\"4.2.2\",\n-                convertedJson.getString(\"@vaadin/vaadin-upload\"));\n+                convertedJson.get(\"@vaadin/vaadin-upload\").textValue());\n         Assert.assertEquals(\"3.0.2\",\n-                convertedJson.getString(\"@polymer/iron-list\"));\n+                convertedJson.get(\"@polymer/iron-list\").textValue());\n         Assert.assertEquals(\"24.4.0-alpha7\",\n-                convertedJson.getString(\"@vaadin/react-components\"));\n+                convertedJson.get(\"@vaadin/react-components\").textValue());\n         Assert.assertEquals(\"24.4.0-alpha7\",\n-                convertedJson.getString(\"@vaadin/react-components-pro\"));\n+                convertedJson.get(\"@vaadin/react-components-pro\").textValue());\n     }\n \n     @Test\n@@ -167,7 +167,7 @@ public void reactRouterNotUsed_reactComponentsIgnored() {\n                     \"vaadin-progress-bar\": {\n                       \"npmName\": \"@vaadin/vaadin-progress-bar\",\n                       \"jsVersion\": \"1.1.2\"\n-                    },\n+                    }\n                   },\n                   \"vaadin-upload\": {\n                     \"npmName\": \"@vaadin/vaadin-upload\",\n@@ -202,30 +202,29 @@ public void reactRouterNotUsed_reactComponentsIgnored() {\n                 \"\"\".formatted(VAADIN_CORE_NPM_PACKAGE);\n \n         VersionsJsonConverter convert = new VersionsJsonConverter(\n-                Json.parse(json), false, true);\n-        JsonObject convertedJson = convert.getConvertedJson();\n-        Assert.assertTrue(convertedJson.hasKey(\"@vaadin/vaadin-progress-bar\"));\n-        Assert.assertTrue(convertedJson.hasKey(\"@vaadin/vaadin-upload\"));\n-        Assert.assertTrue(convertedJson.hasKey(\"@polymer/iron-list\"));\n-\n-        Assert.assertFalse(convertedJson.hasKey(\"flow\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"core\"));\n-        Assert.assertFalse(convertedJson.hasKey(VAADIN_CORE_NPM_PACKAGE));\n-        Assert.assertFalse(convertedJson.hasKey(\"platform\"));\n-        Assert.assertFalse(\n-                convertedJson.hasKey(\"@vaadin/react-components-pro\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"@vaadin/react-components\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"react\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"react-pro\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"react-components\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"react-components-pro\"));\n+                JacksonUtils.readTree(json), false, true);\n+        JsonNode convertedJson = convert.getConvertedJson();\n+        Assert.assertTrue(convertedJson.has(\"@vaadin/vaadin-progress-bar\"));\n+        Assert.assertTrue(convertedJson.has(\"@vaadin/vaadin-upload\"));\n+        Assert.assertTrue(convertedJson.has(\"@polymer/iron-list\"));\n+\n+        Assert.assertFalse(convertedJson.has(\"flow\"));\n+        Assert.assertFalse(convertedJson.has(\"core\"));\n+        Assert.assertFalse(convertedJson.has(VAADIN_CORE_NPM_PACKAGE));\n+        Assert.assertFalse(convertedJson.has(\"platform\"));\n+        Assert.assertFalse(convertedJson.has(\"@vaadin/react-components-pro\"));\n+        Assert.assertFalse(convertedJson.has(\"@vaadin/react-components\"));\n+        Assert.assertFalse(convertedJson.has(\"react\"));\n+        Assert.assertFalse(convertedJson.has(\"react-pro\"));\n+        Assert.assertFalse(convertedJson.has(\"react-components\"));\n+        Assert.assertFalse(convertedJson.has(\"react-components-pro\"));\n \n         Assert.assertEquals(\"1.1.2\",\n-                convertedJson.getString(\"@vaadin/vaadin-progress-bar\"));\n+                convertedJson.get(\"@vaadin/vaadin-progress-bar\").textValue());\n         Assert.assertEquals(\"4.2.2\",\n-                convertedJson.getString(\"@vaadin/vaadin-upload\"));\n+                convertedJson.get(\"@vaadin/vaadin-upload\").textValue());\n         Assert.assertEquals(\"3.0.2\",\n-                convertedJson.getString(\"@polymer/iron-list\"));\n+                convertedJson.get(\"@polymer/iron-list\").textValue());\n     }\n \n     @Test\n@@ -235,7 +234,7 @@ public void reactRouterUsed_noVaadinRouterAdded() {\n                   \"core\": {\n                     \"flow\": {\n                       \"javaVersion\": \"3.0.0.alpha17\"\n-                    },\n+                    }\n                   },\n                   \"vaadin-router\": {\n                     \"npmName\": \"@vaadin/router\",\n@@ -253,14 +252,14 @@ public void reactRouterUsed_noVaadinRouterAdded() {\n                 \"\"\".formatted(VAADIN_CORE_NPM_PACKAGE);\n \n         VersionsJsonConverter convert = new VersionsJsonConverter(\n-                Json.parse(json), true, false);\n-        JsonObject convertedJson = convert.getConvertedJson();\n+                JacksonUtils.readTree(json), true, false);\n+        JsonNode convertedJson = convert.getConvertedJson();\n \n         Assert.assertFalse(\n                 \"Found @vaadin/router even though it should not be in use.\",\n-                convertedJson.hasKey(\"@vaadin/router\"));\n+                convertedJson.has(\"@vaadin/router\"));\n         Assert.assertTrue(\"Missing react-components\",\n-                convertedJson.hasKey(\"@vaadin/react-components\"));\n+                convertedJson.has(\"@vaadin/react-components\"));\n     }\n \n     @Test\n@@ -275,7 +274,7 @@ public void testModeProperty() {\n                       \"npmName\": \"@vaadin/vaadin-progress-bar\",\n                       \"jsVersion\": \"1.1.2\",\n                       \"mode\": \"lit\"\n-                    },\n+                    }\n                   },\n                   \"vaadin-upload\": {\n                     \"npmName\": \"@vaadin/vaadin-upload\",\n@@ -313,78 +312,78 @@ public void testModeProperty() {\n \n         // react enabled\n         VersionsJsonConverter convert = new VersionsJsonConverter(\n-                Json.parse(json), true, false);\n-        JsonObject convertedJson = convert.getConvertedJson();\n-        Assert.assertFalse(convertedJson.hasKey(\"@vaadin/vaadin-progress-bar\"));\n-        Assert.assertTrue(convertedJson.hasKey(\"@vaadin/vaadin-upload\"));\n-        Assert.assertTrue(convertedJson.hasKey(\"@polymer/iron-list\"));\n-        Assert.assertTrue(convertedJson.hasKey(\"@vaadin/react-components-pro\"));\n-        Assert.assertTrue(convertedJson.hasKey(\"@vaadin/react-components\"));\n-\n-        Assert.assertFalse(convertedJson.hasKey(\"flow\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"core\"));\n-        Assert.assertFalse(convertedJson.hasKey(VAADIN_CORE_NPM_PACKAGE));\n-        Assert.assertFalse(convertedJson.hasKey(\"platform\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"react\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"react-pro\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"react-components\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"react-components-pro\"));\n+                JacksonUtils.readTree(json), true, false);\n+        JsonNode convertedJson = convert.getConvertedJson();\n+        Assert.assertFalse(convertedJson.has(\"@vaadin/vaadin-progress-bar\"));\n+        Assert.assertTrue(convertedJson.has(\"@vaadin/vaadin-upload\"));\n+        Assert.assertTrue(convertedJson.has(\"@polymer/iron-list\"));\n+        Assert.assertTrue(convertedJson.has(\"@vaadin/react-components-pro\"));\n+        Assert.assertTrue(convertedJson.has(\"@vaadin/react-components\"));\n+\n+        Assert.assertFalse(convertedJson.has(\"flow\"));\n+        Assert.assertFalse(convertedJson.has(\"core\"));\n+        Assert.assertFalse(convertedJson.has(VAADIN_CORE_NPM_PACKAGE));\n+        Assert.assertFalse(convertedJson.has(\"platform\"));\n+        Assert.assertFalse(convertedJson.has(\"react\"));\n+        Assert.assertFalse(convertedJson.has(\"react-pro\"));\n+        Assert.assertFalse(convertedJson.has(\"react-components\"));\n+        Assert.assertFalse(convertedJson.has(\"react-components-pro\"));\n \n         // react enabled, exclude web components\n-        convert = new VersionsJsonConverter(Json.parse(json), true, true);\n+        convert = new VersionsJsonConverter(JacksonUtils.readTree(json), true,\n+                true);\n         convertedJson = convert.getConvertedJson();\n-        Assert.assertFalse(convertedJson.hasKey(\"@vaadin/vaadin-progress-bar\"));\n-        Assert.assertTrue(convertedJson.hasKey(\"@vaadin/vaadin-upload\"));\n-        Assert.assertTrue(convertedJson.hasKey(\"@polymer/iron-list\"));\n-        Assert.assertFalse(\n-                convertedJson.hasKey(\"@vaadin/react-components-pro\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"@vaadin/react-components\"));\n-\n-        Assert.assertFalse(convertedJson.hasKey(\"flow\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"core\"));\n-        Assert.assertFalse(convertedJson.hasKey(VAADIN_CORE_NPM_PACKAGE));\n-        Assert.assertFalse(convertedJson.hasKey(\"platform\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"react\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"react-pro\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"react-components\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"react-components-pro\"));\n+        Assert.assertFalse(convertedJson.has(\"@vaadin/vaadin-progress-bar\"));\n+        Assert.assertTrue(convertedJson.has(\"@vaadin/vaadin-upload\"));\n+        Assert.assertTrue(convertedJson.has(\"@polymer/iron-list\"));\n+        Assert.assertFalse(convertedJson.has(\"@vaadin/react-components-pro\"));\n+        Assert.assertFalse(convertedJson.has(\"@vaadin/react-components\"));\n+\n+        Assert.assertFalse(convertedJson.has(\"flow\"));\n+        Assert.assertFalse(convertedJson.has(\"core\"));\n+        Assert.assertFalse(convertedJson.has(VAADIN_CORE_NPM_PACKAGE));\n+        Assert.assertFalse(convertedJson.has(\"platform\"));\n+        Assert.assertFalse(convertedJson.has(\"react\"));\n+        Assert.assertFalse(convertedJson.has(\"react-pro\"));\n+        Assert.assertFalse(convertedJson.has(\"react-components\"));\n+        Assert.assertFalse(convertedJson.has(\"react-components-pro\"));\n \n         // react disabled\n-        convert = new VersionsJsonConverter(Json.parse(json), false, false);\n+        convert = new VersionsJsonConverter(JacksonUtils.readTree(json), false,\n+                false);\n         convertedJson = convert.getConvertedJson();\n-        Assert.assertTrue(convertedJson.hasKey(\"@vaadin/vaadin-progress-bar\"));\n-        Assert.assertTrue(convertedJson.hasKey(\"@vaadin/vaadin-upload\"));\n-        Assert.assertTrue(convertedJson.hasKey(\"@polymer/iron-list\"));\n-        Assert.assertFalse(\n-                convertedJson.hasKey(\"@vaadin/react-components-pro\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"@vaadin/react-components\"));\n-\n-        Assert.assertFalse(convertedJson.hasKey(\"flow\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"core\"));\n-        Assert.assertFalse(convertedJson.hasKey(VAADIN_CORE_NPM_PACKAGE));\n-        Assert.assertFalse(convertedJson.hasKey(\"platform\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"react\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"react-pro\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"react-components\"));\n+        Assert.assertTrue(convertedJson.has(\"@vaadin/vaadin-progress-bar\"));\n+        Assert.assertTrue(convertedJson.has(\"@vaadin/vaadin-upload\"));\n+        Assert.assertTrue(convertedJson.has(\"@polymer/iron-list\"));\n+        Assert.assertFalse(convertedJson.has(\"@vaadin/react-components-pro\"));\n+        Assert.assertFalse(convertedJson.has(\"@vaadin/react-components\"));\n+\n+        Assert.assertFalse(convertedJson.has(\"flow\"));\n+        Assert.assertFalse(convertedJson.has(\"core\"));\n+        Assert.assertFalse(convertedJson.has(VAADIN_CORE_NPM_PACKAGE));\n+        Assert.assertFalse(convertedJson.has(\"platform\"));\n+        Assert.assertFalse(convertedJson.has(\"react\"));\n+        Assert.assertFalse(convertedJson.has(\"react-pro\"));\n+        Assert.assertFalse(convertedJson.has(\"react-components\"));\n \n         // react disabled, exclude web components\n-        convert = new VersionsJsonConverter(Json.parse(json), false, true);\n+        convert = new VersionsJsonConverter(JacksonUtils.readTree(json), false,\n+                true);\n         convertedJson = convert.getConvertedJson();\n-        Assert.assertFalse(convertedJson.hasKey(\"@vaadin/vaadin-progress-bar\"));\n-        Assert.assertTrue(convertedJson.hasKey(\"@vaadin/vaadin-upload\"));\n-        Assert.assertTrue(convertedJson.hasKey(\"@polymer/iron-list\"));\n-        Assert.assertFalse(\n-                convertedJson.hasKey(\"@vaadin/react-components-pro\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"@vaadin/react-components\"));\n-\n-        Assert.assertFalse(convertedJson.hasKey(\"flow\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"core\"));\n-        Assert.assertFalse(convertedJson.hasKey(VAADIN_CORE_NPM_PACKAGE));\n-        Assert.assertFalse(convertedJson.hasKey(\"platform\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"react\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"react-pro\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"react-components\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"react-components-pro\"));\n+        Assert.assertFalse(convertedJson.has(\"@vaadin/vaadin-progress-bar\"));\n+        Assert.assertTrue(convertedJson.has(\"@vaadin/vaadin-upload\"));\n+        Assert.assertTrue(convertedJson.has(\"@polymer/iron-list\"));\n+        Assert.assertFalse(convertedJson.has(\"@vaadin/react-components-pro\"));\n+        Assert.assertFalse(convertedJson.has(\"@vaadin/react-components\"));\n+\n+        Assert.assertFalse(convertedJson.has(\"flow\"));\n+        Assert.assertFalse(convertedJson.has(\"core\"));\n+        Assert.assertFalse(convertedJson.has(VAADIN_CORE_NPM_PACKAGE));\n+        Assert.assertFalse(convertedJson.has(\"platform\"));\n+        Assert.assertFalse(convertedJson.has(\"react\"));\n+        Assert.assertFalse(convertedJson.has(\"react-pro\"));\n+        Assert.assertFalse(convertedJson.has(\"react-components\"));\n+        Assert.assertFalse(convertedJson.has(\"react-components-pro\"));\n     }\n \n     @Test\n@@ -399,7 +398,7 @@ public void testExclusionsArrayProperty() {\n                       \"npmName\": \"@vaadin/vaadin-progress-bar\",\n                       \"jsVersion\": \"1.1.2\",\n                       \"mode\": \"lit\"\n-                    },\n+                    }\n                   },\n                   \"vaadin-upload\": {\n                     \"npmName\": \"@vaadin/vaadin-upload\",\n@@ -443,41 +442,40 @@ public void testExclusionsArrayProperty() {\n \n         // react enabled\n         VersionsJsonConverter convert = new VersionsJsonConverter(\n-                Json.parse(json), true, false);\n-        JsonObject convertedJson = convert.getConvertedJson();\n-        Assert.assertFalse(convertedJson.hasKey(\"@vaadin/vaadin-progress-bar\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"@vaadin/vaadin-upload\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"@polymer/iron-list\"));\n-        Assert.assertFalse(\n-                convertedJson.hasKey(\"@vaadin/react-components-pro\"));\n-        Assert.assertTrue(convertedJson.hasKey(\"@vaadin/react-components\"));\n-\n-        Assert.assertFalse(convertedJson.hasKey(\"flow\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"core\"));\n-        Assert.assertFalse(convertedJson.hasKey(VAADIN_CORE_NPM_PACKAGE));\n-        Assert.assertFalse(convertedJson.hasKey(\"platform\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"react\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"react-pro\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"react-components\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"react-components-pro\"));\n+                JacksonUtils.readTree(json), true, false);\n+        JsonNode convertedJson = convert.getConvertedJson();\n+        Assert.assertFalse(convertedJson.has(\"@vaadin/vaadin-progress-bar\"));\n+        Assert.assertFalse(convertedJson.has(\"@vaadin/vaadin-upload\"));\n+        Assert.assertFalse(convertedJson.has(\"@polymer/iron-list\"));\n+        Assert.assertFalse(convertedJson.has(\"@vaadin/react-components-pro\"));\n+        Assert.assertTrue(convertedJson.has(\"@vaadin/react-components\"));\n+\n+        Assert.assertFalse(convertedJson.has(\"flow\"));\n+        Assert.assertFalse(convertedJson.has(\"core\"));\n+        Assert.assertFalse(convertedJson.has(VAADIN_CORE_NPM_PACKAGE));\n+        Assert.assertFalse(convertedJson.has(\"platform\"));\n+        Assert.assertFalse(convertedJson.has(\"react\"));\n+        Assert.assertFalse(convertedJson.has(\"react-pro\"));\n+        Assert.assertFalse(convertedJson.has(\"react-components\"));\n+        Assert.assertFalse(convertedJson.has(\"react-components-pro\"));\n \n         // react disabled\n-        convert = new VersionsJsonConverter(Json.parse(json), false, false);\n+        convert = new VersionsJsonConverter(JacksonUtils.readTree(json), false,\n+                false);\n         convertedJson = convert.getConvertedJson();\n-        Assert.assertTrue(convertedJson.hasKey(\"@vaadin/vaadin-progress-bar\"));\n-        Assert.assertTrue(convertedJson.hasKey(\"@vaadin/vaadin-upload\"));\n-        Assert.assertTrue(convertedJson.hasKey(\"@polymer/iron-list\"));\n-        Assert.assertFalse(\n-                convertedJson.hasKey(\"@vaadin/react-components-pro\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"@vaadin/react-components\"));\n-\n-        Assert.assertFalse(convertedJson.hasKey(\"flow\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"core\"));\n-        Assert.assertFalse(convertedJson.hasKey(VAADIN_CORE_NPM_PACKAGE));\n-        Assert.assertFalse(convertedJson.hasKey(\"platform\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"react\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"react-pro\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"react-components\"));\n-        Assert.assertFalse(convertedJson.hasKey(\"react-components-pro\"));\n+        Assert.assertTrue(convertedJson.has(\"@vaadin/vaadin-progress-bar\"));\n+        Assert.assertTrue(convertedJson.has(\"@vaadin/vaadin-upload\"));\n+        Assert.assertTrue(convertedJson.has(\"@polymer/iron-list\"));\n+        Assert.assertFalse(convertedJson.has(\"@vaadin/react-components-pro\"));\n+        Assert.assertFalse(convertedJson.has(\"@vaadin/react-components\"));\n+\n+        Assert.assertFalse(convertedJson.has(\"flow\"));\n+        Assert.assertFalse(convertedJson.has(\"core\"));\n+        Assert.assertFalse(convertedJson.has(VAADIN_CORE_NPM_PACKAGE));\n+        Assert.assertFalse(convertedJson.has(\"platform\"));\n+        Assert.assertFalse(convertedJson.has(\"react\"));\n+        Assert.assertFalse(convertedJson.has(\"react-pro\"));\n+        Assert.assertFalse(convertedJson.has(\"react-components\"));\n+        Assert.assertFalse(convertedJson.has(\"react-components-pro\"));\n     }\n }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonFilterTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonFilterTest.java\nindex 2f3e5a1c85e..d025d3ad6e2 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonFilterTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonFilterTest.java\n@@ -23,6 +23,8 @@\n import java.util.Map;\n import java.util.Objects;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.IOUtils;\n import org.junit.Assert;\n import org.junit.Test;\n@@ -31,15 +33,14 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n+import com.vaadin.flow.internal.JacksonUtils;\n \n public class VersionsJsonFilterTest {\n \n-    private static final JsonObject TEST_VERSION_JSON;\n+    private static final ObjectNode TEST_VERSION_JSON;\n \n     static {\n-        TEST_VERSION_JSON = Json.parse(\"\"\"\n+        TEST_VERSION_JSON = JacksonUtils.readTree(\"\"\"\n                 {\n                     \"@vaadin/vaadin-progress-bar\": \"1.1.2\",\n                     \"@vaadin/vaadin-upload\":  \"4.2.2\",\n@@ -97,7 +98,7 @@ public void testGetFilteredVersions_whenErrorHappens_versionOriginParameterIsUse\n                         getClass().getClassLoader().getResourceAsStream(\n                                 \"versions/no_vaadin_package.json\")),\n                 StandardCharsets.UTF_8);\n-        JsonObject packageJson = Json.parse(pkgJson);\n+        ObjectNode packageJson = JacksonUtils.readTree(pkgJson);\n         VersionsJsonFilter filter = new VersionsJsonFilter(packageJson,\n                 NodeUpdater.DEPENDENCIES);\n         String versionOrigin = \"dummy-origin.json\";\n@@ -109,19 +110,19 @@ public void testGetFilteredVersions_whenErrorHappens_versionOriginParameterIsUse\n                     .when(() -> LoggerFactory.getLogger(FrontendVersion.class))\n                     .thenReturn(logger);\n \n-            JsonObject sourceJsonMocked = getMockedJsonObject();\n+            ObjectNode sourceJsonMocked = getMockedJsonNode();\n \n-            Mockito.when(sourceJsonMocked.getString(Mockito.anyString()))\n+            Mockito.when(sourceJsonMocked.get(Mockito.anyString()))\n                     .thenThrow(new ClassCastException());\n             filter.getFilteredVersions(sourceJsonMocked, versionOrigin);\n             Mockito.verify(logger, Mockito.times(1)).warn(\n                     \"Ignoring error while parsing frontend dependency version for package '{}' in '{}'\",\n                     \"test\", versionOrigin);\n \n-            sourceJsonMocked = getMockedJsonObject();\n+            sourceJsonMocked = getMockedJsonNode();\n \n             String nfeMessage = \"NFE MSG\";\n-            Mockito.when(sourceJsonMocked.getString(Mockito.anyString()))\n+            Mockito.when(sourceJsonMocked.get(Mockito.anyString()))\n                     .thenThrow(new NumberFormatException(nfeMessage));\n             filter.getFilteredVersions(sourceJsonMocked, versionOrigin);\n             Mockito.verify(logger, Mockito.times(1)).warn(\n@@ -130,10 +131,11 @@ public void testGetFilteredVersions_whenErrorHappens_versionOriginParameterIsUse\n         }\n     }\n \n-    private JsonObject getMockedJsonObject() {\n-        JsonObject jsonObject = Mockito.mock(JsonObject.class);\n-        Mockito.when(jsonObject.keys()).thenReturn(new String[] { \"test\" });\n-        Mockito.when(jsonObject.hasKey(\"test\")).thenReturn(true);\n+    private ObjectNode getMockedJsonNode() {\n+        ObjectNode jsonObject = Mockito.mock(ObjectNode.class);\n+        Mockito.when(jsonObject.fieldNames())\n+                .thenReturn(Arrays.stream(new String[] { \"test\" }).iterator());\n+        Mockito.when(jsonObject.has(\"test\")).thenReturn(true);\n         return jsonObject;\n     }\n \n@@ -145,16 +147,16 @@ private void assertMissingVaadinDependencies_allDependenciesSholdBeUserHandled(\n                                 \"versions/no_vaadin_package.json\")),\n                 StandardCharsets.UTF_8);\n \n-        VersionsJsonFilter filter = new VersionsJsonFilter(Json.parse(pkgJson),\n-                depKey);\n-        JsonObject filteredJson = filter.getFilteredVersions(TEST_VERSION_JSON,\n+        VersionsJsonFilter filter = new VersionsJsonFilter(\n+                JacksonUtils.readTree(pkgJson), depKey);\n+        JsonNode filteredJson = filter.getFilteredVersions(TEST_VERSION_JSON,\n                 \"versions/versions.json\");\n-        Assert.assertTrue(filteredJson.hasKey(\"@vaadin/vaadin-progress-bar\"));\n-        Assert.assertTrue(filteredJson.hasKey(\"@vaadin/vaadin-upload\"));\n-        Assert.assertTrue(filteredJson.hasKey(\"@polymer/iron-list\"));\n+        Assert.assertTrue(filteredJson.has(\"@vaadin/vaadin-progress-bar\"));\n+        Assert.assertTrue(filteredJson.has(\"@vaadin/vaadin-upload\"));\n+        Assert.assertTrue(filteredJson.has(\"@polymer/iron-list\"));\n \n         Assert.assertEquals(\"1.1.2\",\n-                filteredJson.getString(\"@vaadin/vaadin-progress-bar\"));\n+                filteredJson.get(\"@vaadin/vaadin-progress-bar\").textValue());\n     }\n \n     private void assertFilterPlatformVersions_multipleUserChanged_correctlyIgnored(\n@@ -168,10 +170,10 @@ private void assertFilterPlatformVersions_multipleUserChanged_correctlyIgnored(\n                         .getResourceAsStream(\"versions/user_package.json\")),\n                 StandardCharsets.UTF_8);\n \n-        VersionsJsonFilter filter = new VersionsJsonFilter(Json.parse(pkgJson),\n-                depKey);\n-        JsonObject filteredJson = filter.getFilteredVersions(\n-                Json.parse(versions), \"versions/user_versions.json\");\n+        VersionsJsonFilter filter = new VersionsJsonFilter(\n+                JacksonUtils.readTree(pkgJson), depKey);\n+        JsonNode filteredJson = filter.getFilteredVersions(\n+                JacksonUtils.readTree(versions), \"versions/user_versions.json\");\n         List<String> expectedKeys = Arrays.asList(\"@vaadin/vaadin-notification\",\n                 \"@vaadin/vaadin-overlay\", \"@vaadin/vaadin-select\",\n                 \"@vaadin/vaadin-split-layout\", \"@vaadin/vaadin-tabs\");\n@@ -179,14 +181,14 @@ private void assertFilterPlatformVersions_multipleUserChanged_correctlyIgnored(\n         for (String key : expectedKeys) {\n             Assert.assertTrue(\n                     String.format(\"Key '%s' was expected, but not found\", key),\n-                    filteredJson.hasKey(key));\n+                    filteredJson.has(key));\n         }\n \n         List<String> droppedKeys = Arrays.asList(\"flow\", \"core\", \"platform\");\n         for (String key : droppedKeys) {\n             Assert.assertFalse(\n                     String.format(\"User managed key '%s' was found.\", key),\n-                    filteredJson.hasKey(key));\n+                    filteredJson.has(key));\n         }\n \n         Map<String, String> expectedValues = new HashMap<>();\n@@ -199,7 +201,8 @@ private void assertFilterPlatformVersions_multipleUserChanged_correctlyIgnored(\n         for (Map.Entry<String, String> entry : expectedValues.entrySet()) {\n             Assert.assertEquals(\n                     String.format(\"Got wrong version for '%s'\", entry.getKey()),\n-                    entry.getValue(), filteredJson.getString(entry.getKey()));\n+                    entry.getValue(),\n+                    filteredJson.get(entry.getKey()).textValue());\n         }\n     }\n \n@@ -210,25 +213,26 @@ private void assertFilterPlatformVersions(String depKey)\n                         .getResourceAsStream(\"versions/package.json\")),\n                 StandardCharsets.UTF_8);\n \n-        VersionsJsonFilter filter = new VersionsJsonFilter(Json.parse(pkgJson),\n-                depKey);\n-        JsonObject filteredJson = filter.getFilteredVersions(TEST_VERSION_JSON,\n+        VersionsJsonFilter filter = new VersionsJsonFilter(\n+                JacksonUtils.readTree(pkgJson), depKey);\n+        JsonNode filteredJson = filter.getFilteredVersions(TEST_VERSION_JSON,\n                 \"versions/versions.json\");\n-        Assert.assertTrue(filteredJson.hasKey(\"@vaadin/vaadin-progress-bar\"));\n-        Assert.assertTrue(filteredJson.hasKey(\"@vaadin/vaadin-upload\"));\n-        Assert.assertTrue(filteredJson.hasKey(\"@polymer/iron-list\"));\n+        Assert.assertTrue(filteredJson.has(\"@vaadin/vaadin-progress-bar\"));\n+        Assert.assertTrue(filteredJson.has(\"@vaadin/vaadin-upload\"));\n+        Assert.assertTrue(filteredJson.has(\"@polymer/iron-list\"));\n \n         Assert.assertEquals(\n                 \"'progress-bar' should be the same in package and versions\",\n-                \"1.1.2\", filteredJson.getString(\"@vaadin/vaadin-progress-bar\"));\n+                \"1.1.2\",\n+                filteredJson.get(\"@vaadin/vaadin-progress-bar\").textValue());\n         Assert.assertEquals(\n                 \"'upload' should be the same in package and versions\", \"4.2.2\",\n-                filteredJson.getString(\"@vaadin/vaadin-upload\"));\n+                filteredJson.get(\"@vaadin/vaadin-upload\").textValue());\n         Assert.assertEquals(\n                 \"'enforced' version should come from platform (upgrade)\",\n-                \"1.5.0\", filteredJson.getString(\"enforced\"));\n+                \"1.5.0\", filteredJson.get(\"enforced\").textValue());\n         Assert.assertEquals(\n                 \"'iron-list' version should come from platform (downgrade)\",\n-                \"2.0.19\", filteredJson.getString(\"@polymer/iron-list\"));\n+                \"2.0.19\", filteredJson.get(\"@polymer/iron-list\").textValue());\n     }\n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20948",
    "pr_id": 20948,
    "issue_id": 20741,
    "repo": "vaadin/flow",
    "problem_statement": "Use Jackson for public API and implementation instead of Elemental JSON\n### Describe your motivation\n\nJackson library (`com.fasterxml.jackson`) is more popular than Elemental JSON (`elemental.json`), thus Vaadin should better use it in public API.\n\n### Describe the solution you'd like\n\n0. Analyse and list the usage of Elemental in Flow: how many publicly using cases do we have and how many are used internally. I expect the main usage in `Element` class, but there may be more, e.g. in util classes.\n1. Add an adapter code that converts Jackson to/from Elemental, if it's problematic to replace it in implementation right away, else go to step 2.\n2. Change Flow internal implementation to use Jackson\n3. Add same public methods found in (0), but that use Jackson for arguments and return values\n4. Deprecate existing public method with Elemental\n5. Remove Elemental variants in next major version.\n",
    "issue_word_count": 151,
    "test_files_count": 3,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/internal/JacksonCodec.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java",
      "flow-server/src/test/java/com/vaadin/flow/internal/JacksonCodecTest.java",
      "flow-server/src/test/java/com/vaadin/flow/internal/JacksonUtilsTest.java",
      "flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/internal/JacksonCodecTest.java",
      "flow-server/src/test/java/com/vaadin/flow/internal/JacksonUtilsTest.java",
      "flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java"
    ],
    "base_commit": "714d220c3983057f94ede92a31017746c3a23078",
    "head_commit": "b6ad9b4f930cf86fbcbb5123536bcaab8a5c9145",
    "repo_url": "https://github.com/vaadin/flow/pull/20948",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20948",
    "dockerfile": "",
    "pr_merged_at": "2025-02-10T12:34:36.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/internal/JacksonCodec.java b/flow-server/src/main/java/com/vaadin/flow/internal/JacksonCodec.java\nnew file mode 100644\nindex 00000000000..218d1b9441c\n--- /dev/null\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/JacksonCodec.java\n@@ -0,0 +1,284 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.internal;\n+\n+import java.io.Serializable;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeType;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.dom.Element;\n+import com.vaadin.flow.dom.Node;\n+import com.vaadin.flow.internal.nodefeature.ReturnChannelRegistration;\n+\n+/**\n+ * Utility for encoding objects to and from JSON.\n+ * <p>\n+ * Supported types are\n+ * <ul>\n+ * <li>{@link String}\n+ * <li>{@link Boolean} and <code>boolean</code>\n+ * <li>{@link Integer} and <code>int</code>\n+ * <li>{@link Double} and <code>double</code> (<code>NaN</code> and infinity not\n+ * supported)\n+ * <li>{@link JsonNode} and all its sub types\n+ * <li>{@link Element} (encoded as a reference to the element)\n+ * <li>{@link Component} (encoded as a reference to the root element)\n+ * </ul>\n+ *\n+ * <p>\n+ * For internal use only. May be renamed or removed in a future release.\n+ *\n+ * @author Vaadin Ltd\n+ * @since 24.7\n+ */\n+public class JacksonCodec {\n+    /**\n+     * Type id for a complex type array containing an {@link Element}.\n+     */\n+    public static final int NODE_TYPE = 0;\n+\n+    /**\n+     * Type id for a complex type array containing a {@link ArrayNode}.\n+     */\n+    public static final int ARRAY_TYPE = 1;\n+\n+    /**\n+     * Type id for a complex type array identifying a\n+     * {@link ReturnChannelRegistration} reference.\n+     */\n+    public static final int RETURN_CHANNEL_TYPE = 2;\n+\n+    private JacksonCodec() {\n+        // Don't create instances\n+    }\n+\n+    /**\n+     * Helper for encoding values that might not have a native representation in\n+     * JSON. Such types are encoded as an JSON array starting with an id\n+     * defining the actual type and followed by the actual data. Supported value\n+     * types are any native JSON type supported by\n+     * {@link #encodeWithoutTypeInfo(Object)}, {@link Element} and\n+     * {@link Component} (encoded as its root element).\n+     *\n+     * @param value\n+     *            the value to encode\n+     * @return the value encoded as JSON\n+     */\n+    public static JsonNode encodeWithTypeInfo(Object value) {\n+        assert value == null || canEncodeWithTypeInfo(value.getClass());\n+\n+        if (value instanceof Component) {\n+            return encodeNode(((Component) value).getElement());\n+        } else if (value instanceof Node<?>) {\n+            return encodeNode((Node<?>) value);\n+        } else if (value instanceof ReturnChannelRegistration) {\n+            return encodeReturnChannel((ReturnChannelRegistration) value);\n+        } else {\n+            JsonNode encoded = encodeWithoutTypeInfo(value);\n+            if (encoded.getNodeType() == JsonNodeType.ARRAY) {\n+                // Must \"escape\" arrays\n+                encoded = wrapComplexValue(ARRAY_TYPE, encoded);\n+            }\n+            return encoded;\n+        }\n+    }\n+\n+    private static ArrayNode encodeReturnChannel(\n+            ReturnChannelRegistration value) {\n+        return wrapComplexValue(RETURN_CHANNEL_TYPE,\n+                JacksonUtils.getMapper().valueToTree(value.getStateNodeId()),\n+                JacksonUtils.getMapper().valueToTree(value.getChannelId()));\n+    }\n+\n+    private static JsonNode encodeNode(Node<?> node) {\n+        StateNode stateNode = node.getNode();\n+        if (stateNode.isAttached()) {\n+            return wrapComplexValue(NODE_TYPE,\n+                    JacksonUtils.getMapper().valueToTree(stateNode.getId()));\n+        } else {\n+            return JacksonUtils.getMapper().nullNode();\n+        }\n+    }\n+\n+    private static ArrayNode wrapComplexValue(int typeId, JsonNode... values) {\n+        return Stream\n+                .concat(Stream.of(JacksonUtils.getMapper().valueToTree(typeId)),\n+                        Stream.of(values))\n+                .collect(JacksonUtils.asArray());\n+    }\n+\n+    /**\n+     * Helper for checking whether the type is supported by\n+     * {@link #encodeWithoutTypeInfo(Object)}. Supported value types are\n+     * {@link String}, {@link Integer}, {@link Double}, {@link Boolean},\n+     * {@link JsonNode}.\n+     *\n+     * @param type\n+     *            the type to check\n+     * @return whether the type can be encoded\n+     */\n+    public static boolean canEncodeWithoutTypeInfo(Class<?> type) {\n+        assert type != null;\n+        return String.class.equals(type) || Integer.class.equals(type)\n+                || Double.class.equals(type) || Boolean.class.equals(type)\n+                || JsonNode.class.isAssignableFrom(type);\n+    }\n+\n+    /**\n+     * Helper for checking whether the type is supported by\n+     * {@link #encodeWithTypeInfo(Object)}. Supported values types are\n+     * {@link Node}, {@link Component}, {@link ReturnChannelRegistration} and\n+     * anything accepted by {@link #canEncodeWithoutTypeInfo(Class)}.\n+     *\n+     * @param type\n+     *            the type to check\n+     * @return whether the type can be encoded\n+     */\n+    public static boolean canEncodeWithTypeInfo(Class<?> type) {\n+        return canEncodeWithoutTypeInfo(type)\n+                || Node.class.isAssignableFrom(type)\n+                || Component.class.isAssignableFrom(type)\n+                || ReturnChannelRegistration.class.isAssignableFrom(type);\n+    }\n+\n+    /**\n+     * Encodes a \"primitive\" value or a constant pool reference to JSON. This\n+     * methods supports {@link ConstantPoolKey} in addition to the types\n+     * supported by {@link #encodeWithoutTypeInfo(Object)}.\n+     *\n+     * @param value\n+     *            the value to encode\n+     * @param constantPool\n+     *            the constant pool to use for encoding constant pool references\n+     * @return the value encoded as JSON\n+     */\n+    public static JsonNode encodeWithConstantPool(Object value,\n+            ConstantPool constantPool) {\n+        if (value instanceof ConstantPoolKey) {\n+            ConstantPoolKey reference = (ConstantPoolKey) value;\n+            return JacksonUtils.getMapper()\n+                    .valueToTree(constantPool.getConstantId(reference));\n+        } else {\n+            return encodeWithoutTypeInfo(value);\n+        }\n+    }\n+\n+    /**\n+     * Helper for encoding any \"primitive\" value that is directly supported in\n+     * JSON. Supported values types are {@link String}, {@link Number},\n+     * {@link Boolean}, {@link JsonNode}. <code>null</code> is also supported.\n+     *\n+     * @param value\n+     *            the value to encode\n+     * @return the value encoded as JSON\n+     */\n+    public static JsonNode encodeWithoutTypeInfo(Object value) {\n+        if (value == null) {\n+            return JacksonUtils.getMapper().nullNode();\n+        }\n+\n+        assert canEncodeWithoutTypeInfo(value.getClass());\n+\n+        Class<?> type = value.getClass();\n+        if (String.class.equals(value.getClass())) {\n+            return JacksonUtils.getMapper().valueToTree(value);\n+        } else if (Integer.class.equals(type) || Double.class.equals(type)) {\n+            return JacksonUtils.getMapper()\n+                    .valueToTree(((Number) value).doubleValue());\n+        } else if (Boolean.class.equals(type)) {\n+            return JacksonUtils.getMapper()\n+                    .valueToTree(((Boolean) value).booleanValue());\n+        } else if (JsonNode.class.isAssignableFrom(type)) {\n+            return (JsonNode) value;\n+        }\n+        assert !canEncodeWithoutTypeInfo(type);\n+        throw new IllegalArgumentException(\n+                \"Can't encode \" + value.getClass() + \" to json\");\n+    }\n+\n+    /**\n+     * Helper for decoding any \"primitive\" value that is directly supported in\n+     * JSON. Supported values types are {@link String}, {@link Number},\n+     * {@link Boolean}, {@link JsonNode}.\n+     * {@link com.fasterxml.jackson.databind.node.NullNode} is also supported.\n+     *\n+     * @param json\n+     *            the JSON value to decode\n+     * @return the decoded value\n+     */\n+    public static Serializable decodeWithoutTypeInfo(ObjectNode json) {\n+        assert json != null;\n+        switch (json.getNodeType()) {\n+        case BOOLEAN:\n+            return decodeAs(json, Boolean.class);\n+        case STRING:\n+            return decodeAs(json, String.class);\n+        case NUMBER:\n+            return decodeAs(json, Double.class);\n+        case NULL:\n+            return null;\n+        default:\n+            return json;\n+        }\n+\n+    }\n+\n+    /**\n+     * Decodes the given JSON value as the given type.\n+     * <p>\n+     * Supported types are {@link String}, {@link Boolean}, {@link Integer},\n+     * {@link Double} and primitives boolean, int, double\n+     *\n+     * @param <T>\n+     *            the decoded type\n+     * @param json\n+     *            the JSON value\n+     * @param type\n+     *            the type to decode as\n+     * @return the value decoded as the given type\n+     * @throws IllegalArgumentException\n+     *             if the type was unsupported\n+     */\n+    public static <T> T decodeAs(JsonNode json, Class<T> type) {\n+        assert json != null;\n+        if (json.getNodeType() == JsonNodeType.NULL && !type.isPrimitive()) {\n+            return null;\n+        }\n+        Class<?> convertedType = ReflectTools.convertPrimitiveType(type);\n+        if (type == String.class) {\n+            return type.cast(json.asText());\n+        } else if (convertedType == Boolean.class) {\n+            return (T) convertedType.cast(Boolean.valueOf(json.asBoolean()));\n+        } else if (convertedType == Double.class) {\n+            return (T) convertedType.cast(Double.valueOf(json.doubleValue()));\n+        } else if (convertedType == Integer.class) {\n+            return (T) convertedType.cast(Integer.valueOf(json.intValue()));\n+        } else if (JsonNode.class.isAssignableFrom(type)) {\n+            return type.cast(json);\n+        } else {\n+            assert !canEncodeWithoutTypeInfo(type);\n+            throw new IllegalArgumentException(\n+                    \"Unknown type \" + type.getName());\n+        }\n+\n+    }\n+\n+}\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java b/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\nnew file mode 100644\nindex 00000000000..3b742ac5460\n--- /dev/null\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\n@@ -0,0 +1,471 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.internal;\n+\n+import java.util.AbstractList;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+import java.util.function.BinaryOperator;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collector;\n+import java.util.stream.DoubleStream;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.DoubleNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeType;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\n+\n+/**\n+ * Helpers for using <code>jackson</code>.\n+ * <p>\n+ * For internal use only. May be renamed or removed in a future release.\n+ *\n+ * @author Vaadin Ltd\n+ * @since 24.7\n+ */\n+public final class JacksonUtils {\n+\n+    private static final String CANNOT_CONVERT_NULL_TO_A_JSON_OBJECT = \"Cannot convert null to JSON\";\n+\n+    private static final String CANNOT_CONVERT_NULL_TO_OBJECT = \"Cannot convert null to Java object\";\n+\n+    private static final ObjectMapper objectMapper = new ObjectMapper();\n+\n+    static {\n+        objectMapper.registerModule(new JavaTimeModule());\n+    }\n+\n+    public static ObjectMapper getMapper() {\n+        return objectMapper;\n+    }\n+\n+    /**\n+     * Create a new ObjectNode.\n+     *\n+     * @return ObjectNode\n+     */\n+    public static ObjectNode createObjectNode() {\n+        return objectMapper.createObjectNode();\n+    }\n+\n+    /**\n+     * Create a new ArrayNode.\n+     *\n+     * @return ArrayNode\n+     */\n+    public static ArrayNode createArrayNode() {\n+        return objectMapper.createArrayNode();\n+    }\n+\n+    /**\n+     * Collects a stream of JSON values to a JSON array.\n+     *\n+     * @author Vaadin Ltd\n+     * @since 24.7\n+     */\n+    private static final class ArrayNodeCollector\n+            implements Collector<JsonNode, ArrayNode, ArrayNode> {\n+        @Override\n+        public Supplier<ArrayNode> supplier() {\n+            return objectMapper::createArrayNode;\n+        }\n+\n+        @Override\n+        public BiConsumer<ArrayNode, JsonNode> accumulator() {\n+            return ArrayNode::add;\n+        }\n+\n+        @Override\n+        public BinaryOperator<ArrayNode> combiner() {\n+            return (left, right) -> {\n+                for (int i = 0; i < right.size(); i++) {\n+                    left.set(left.size(), right.get(i));\n+                }\n+                return left;\n+            };\n+        }\n+\n+        @Override\n+        public Function<ArrayNode, ArrayNode> finisher() {\n+            return Function.identity();\n+        }\n+\n+        @Override\n+        public Set<Characteristics> characteristics() {\n+            return arrayCollectorCharacteristics;\n+        }\n+    }\n+\n+    private static final Set<Collector.Characteristics> arrayCollectorCharacteristics = Collections\n+            .unmodifiableSet(\n+                    EnumSet.of(Collector.Characteristics.IDENTITY_FINISH));\n+\n+    private JacksonUtils() {\n+        // Static-only class\n+    }\n+\n+    /**\n+     * Compares two json values for deep equality.\n+     * <p>\n+     * This is a helper for overcoming the fact that {@link ObjectNode} doesn't\n+     * override {@link Object#equals(Object)} and {\n+     * ObjectNode#jsEquals(ObjectNode)} is defined to use JavaScript semantics\n+     * where arrays and objects are equals only based on identity.\n+     *\n+     * @param a\n+     *            the first json value to check, may not be null\n+     * @param b\n+     *            the second json value to check, may not be null\n+     * @return <code>true</code> if both json values are the same;\n+     *         <code>false</code> otherwise\n+     */\n+    public static boolean jsonEquals(JsonNode a, JsonNode b) {\n+        assert a != null;\n+        assert b != null;\n+\n+        if (a == b) {\n+            return true;\n+        }\n+\n+        JsonNodeType type = a.getNodeType();\n+        if (type != b.getNodeType()) {\n+            return false;\n+        }\n+\n+        return switch (type) {\n+        case NULL -> true;\n+        case BOOLEAN -> booleanEqual(a, b);\n+        case NUMBER -> numbersEqual(a, b);\n+        case STRING -> stringEqual(a, b);\n+        case OBJECT -> jsonObjectEquals(a, b);\n+        case ARRAY -> jsonArrayEquals((ArrayNode) a, (ArrayNode) b);\n+        default ->\n+            throw new IllegalArgumentException(\"Unsupported JsonType: \" + type);\n+        };\n+    }\n+\n+    /**\n+     * Compare String value of two JsonNode values.\n+     *\n+     * @param a\n+     *            Value one\n+     * @param b\n+     *            Value two\n+     * @return {@code true} if text content equals\n+     */\n+    public static boolean stringEqual(JsonNode a, JsonNode b) {\n+        assert a.getNodeType() == JsonNodeType.STRING;\n+        assert b.getNodeType() == JsonNodeType.STRING;\n+        return a.asText().equals(b.asText());\n+    }\n+\n+    /**\n+     * Compare boolean value of two JsonNode values.\n+     *\n+     * @param a\n+     *            Value one\n+     * @param b\n+     *            Value two\n+     * @return {@code true} if text boolean equals\n+     */\n+    public static boolean booleanEqual(JsonNode a, JsonNode b) {\n+        assert a.getNodeType() == JsonNodeType.BOOLEAN;\n+        assert b.getNodeType() == JsonNodeType.BOOLEAN;\n+        return a.asBoolean() == b.asBoolean();\n+    }\n+\n+    /**\n+     * Compare number value of two JsonNode values.\n+     *\n+     * @param a\n+     *            Value one\n+     * @param b\n+     *            Value two\n+     * @return {@code true} if number content equals\n+     */\n+    public static boolean numbersEqual(JsonNode a, JsonNode b) {\n+        assert a.getNodeType() == JsonNodeType.NUMBER;\n+        assert b.getNodeType() == JsonNodeType.NUMBER;\n+        return Double.doubleToRawLongBits(a.doubleValue()) == Double\n+                .doubleToRawLongBits(b.doubleValue());\n+    }\n+\n+    private static boolean jsonObjectEquals(JsonNode a, JsonNode b) {\n+        assert a != null;\n+        assert b != null;\n+\n+        if (a == b) {\n+            return true;\n+        }\n+\n+        List<String> keys = getKeys(a);\n+        List<String> bkeys = getKeys(b);\n+\n+        if (keys.size() != bkeys.size()) {\n+            return false;\n+        }\n+\n+        for (String key : keys) {\n+            JsonNode value = b.get(key);\n+            if (value == null || !jsonEquals(a.get(key), value)) {\n+                return false;\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    public static List<String> getKeys(JsonNode node) {\n+        List<String> keys = new ArrayList<>();\n+        node.fieldNames().forEachRemaining(keys::add);\n+        return keys;\n+    }\n+\n+    private static boolean jsonArrayEquals(ArrayNode a, ArrayNode b) {\n+        assert a != null;\n+        assert b != null;\n+\n+        if (a == b) {\n+            return true;\n+        }\n+\n+        if (a.size() != b.size()) {\n+            return false;\n+        }\n+        for (int i = 0; i < a.size(); i++) {\n+            if (!jsonEquals(a.get(i), b.get(i))) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Creates a stream from a JSON array.\n+     *\n+     * @param <T>\n+     *            the stream type\n+     * @param array\n+     *            the JSON array to create a stream from\n+     * @return a stream of JSON values\n+     */\n+    public static <T extends JsonNode> Stream<T> stream(ArrayNode array) {\n+        if (array == null) {\n+            return Stream.empty();\n+        }\n+\n+        return new AbstractList<T>() {\n+            @Override\n+            public T get(int index) {\n+                return (T) array.get(index);\n+            }\n+\n+            @Override\n+            public int size() {\n+                return array.size();\n+            }\n+        }.stream();\n+    }\n+\n+    /**\n+     * Creates a stream from a JSON array of objects. This method does not\n+     * verify that all items in the array are actually JSON objects instead of\n+     * some other JSON type.\n+     *\n+     * @param array\n+     *            the JSON array to create a stream from\n+     * @return a stream of JSON objects\n+     */\n+    public static Stream<JsonNode> objectStream(ArrayNode array) {\n+        return stream(array);\n+    }\n+\n+    /**\n+     * Creates a double stream from a JSON array of numbers. This method does\n+     * not verify that all items in the array are actually JSON numbers instead\n+     * of some other JSON type.\n+     *\n+     * @param array\n+     *            the JSON array to create a stream from\n+     * @return a double stream of the values in the array\n+     */\n+    public static DoubleStream numberStream(ArrayNode array) {\n+        return JacksonUtils.<DoubleNode> stream(array)\n+                .mapToDouble(DoubleNode::doubleValue);\n+    }\n+\n+    /**\n+     * Creates a collector that collects values into a JSON array.\n+     *\n+     * @return the collector\n+     */\n+    public static Collector<JsonNode, ArrayNode, ArrayNode> asArray() {\n+        return new ArrayNodeCollector();\n+    }\n+\n+    /**\n+     * Creates a new JSON array with the given values.\n+     *\n+     * @param values\n+     *            the values that should be in the created array\n+     * @return the created array\n+     */\n+    public static ArrayNode createArray(JsonNode... values) {\n+        return Stream.of(values).collect(asArray());\n+    }\n+\n+    /**\n+     * Converts the given map into a JSON object by converting each map value to\n+     * a JSON value.\n+     *\n+     * @param <T>\n+     *            the type of the map values\n+     * @param map\n+     *            the map to convert into a JSON object\n+     * @param itemToJson\n+     *            callback for converting map values to JSON\n+     * @return the created object\n+     */\n+    public static <T> ObjectNode createObject(Map<String, T> map,\n+            Function<T, JsonNode> itemToJson) {\n+        ObjectNode object = objectMapper.createObjectNode();\n+\n+        map.forEach((key, value) -> object.put(key, itemToJson.apply(value)));\n+\n+        return object;\n+    }\n+\n+    /**\n+     * Converts the given bean to JSON.\n+     *\n+     * @param bean\n+     *            the bean to convert, not {@code null}\n+     * @return a JSON representation of the bean\n+     */\n+    public static ObjectNode beanToJson(Object bean) {\n+        Objects.requireNonNull(bean, CANNOT_CONVERT_NULL_TO_A_JSON_OBJECT);\n+\n+        return objectMapper.valueToTree(bean);\n+    }\n+\n+    /**\n+     * Converts the given list to JSON.\n+     *\n+     * @param list\n+     *            the list to convert, not {@code null}\n+     * @return a JSON representation of the bean\n+     */\n+    public static ArrayNode listToJson(List<?> list) {\n+        Objects.requireNonNull(list, CANNOT_CONVERT_NULL_TO_A_JSON_OBJECT);\n+        return objectMapper.valueToTree(list);\n+    }\n+\n+    /**\n+     * Converts the given map to JSON.\n+     *\n+     * @param map\n+     *            the map to convert, not {@code null}\n+     * @return a JSON representation of the bean\n+     */\n+    public static ObjectNode mapToJson(Map<String, ?> map) {\n+        Objects.requireNonNull(map, CANNOT_CONVERT_NULL_TO_A_JSON_OBJECT);\n+        return objectMapper.valueToTree(map);\n+    }\n+\n+    /**\n+     * Converts JsonObject into Java object of given type.\n+     *\n+     * @param jsonObject\n+     *            JSON object to convert, not {@code null}\n+     * @param tClass\n+     *            class of converted object instance\n+     * @return converted object instance\n+     * @param <T>\n+     *            type of result instance\n+     */\n+    public static <T> T readToObject(ObjectNode jsonObject, Class<T> tClass) {\n+        Objects.requireNonNull(jsonObject, CANNOT_CONVERT_NULL_TO_OBJECT);\n+        try {\n+            return objectMapper.treeToValue(jsonObject, tClass);\n+        } catch (JsonProcessingException e) {\n+            throw new JsonDecodingException(\n+                    \"Error converting JsonObject to \" + tClass.getName(), e);\n+        }\n+    }\n+\n+    /**\n+     * Converts ObjectNode into Java object of given type.\n+     *\n+     * @param jsonValue\n+     *            JSON value to convert, not {@code null}\n+     * @param tClass\n+     *            class of converted object instance\n+     * @return converted object instance\n+     * @param <T>\n+     *            type of result instance\n+     */\n+    public static <T> T readValue(ObjectNode jsonValue, Class<T> tClass) {\n+        return readToObject(jsonValue, tClass);\n+    }\n+\n+    /**\n+     * Converts ObjectNode into Java object of given type.\n+     *\n+     * @param jsonValue\n+     *            JSON value to convert, not {@code null}\n+     * @param typeReference\n+     *            type reference of converted object instance\n+     * @return converted object instance\n+     * @param <T>\n+     *            type of result instance\n+     */\n+    public static <T> T readValue(ObjectNode jsonValue,\n+            TypeReference<T> typeReference) {\n+        Objects.requireNonNull(jsonValue, CANNOT_CONVERT_NULL_TO_OBJECT);\n+        try {\n+            return objectMapper.treeToValue(jsonValue, typeReference);\n+        } catch (JsonProcessingException e) {\n+            throw new JsonDecodingException(\"Error converting ObjectNode to \"\n+                    + typeReference.getType().getTypeName(), e);\n+        }\n+    }\n+\n+    /**\n+     * Converts Java object into ObjectNode.\n+     *\n+     * @param object\n+     *            Java object to convert\n+     * @return converted JSON value\n+     */\n+    public static ObjectNode writeValue(Object object) {\n+        return objectMapper.valueToTree(object);\n+    }\n+}\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/internal/JacksonCodecTest.java b/flow-server/src/test/java/com/vaadin/flow/internal/JacksonCodecTest.java\nnew file mode 100644\nindex 00000000000..d66eb95f228\n--- /dev/null\n+++ b/flow-server/src/test/java/com/vaadin/flow/internal/JacksonCodecTest.java\n@@ -0,0 +1,256 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.NumericNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.dom.Element;\n+import com.vaadin.flow.dom.ElementFactory;\n+import com.vaadin.flow.internal.nodefeature.ElementChildrenList;\n+\n+public class JacksonCodecTest {\n+    private static final List<Object> withTypeInfoUnsupportedValues = Arrays\n+            .asList(new Object(), new StateNode(), new Date(), new String[0],\n+                    new ArrayList<>(), new HashSet<>(), new HashMap<>());\n+\n+    private static final ObjectMapper objectMapper = new ObjectMapper();\n+\n+    @Test\n+    public void encodeWithoutTypeInfo_supportedTypes() {\n+        assertJsonEquals(objectMapper.valueToTree(true),\n+                JacksonCodec.encodeWithoutTypeInfo(Boolean.TRUE));\n+        assertJsonEquals(objectMapper.valueToTree(\"string\"),\n+                JacksonCodec.encodeWithoutTypeInfo(\"string\"));\n+        assertJsonEquals(objectMapper.valueToTree(3.14),\n+                JacksonCodec.encodeWithoutTypeInfo(Double.valueOf(3.14)));\n+        assertJsonEquals(objectMapper.valueToTree(42),\n+                JacksonCodec.encodeWithoutTypeInfo(Integer.valueOf(42)));\n+        assertJsonEquals(objectMapper.nullNode(),\n+                JacksonCodec.encodeWithoutTypeInfo(null));\n+        ObjectNode json = objectMapper.createObjectNode();\n+        json.put(\"foo\", \"bar\");\n+        assertJsonEquals(json, JacksonCodec.encodeWithoutTypeInfo(json));\n+\n+        assertJsonEquals(objectMapper.nullNode(), objectMapper.nullNode());\n+        assertJsonEquals(objectMapper.valueToTree(false),\n+                objectMapper.valueToTree(false));\n+        assertJsonEquals(objectMapper.valueToTree(234),\n+                objectMapper.valueToTree(234));\n+        assertJsonEquals(objectMapper.valueToTree(\"string\"),\n+                objectMapper.valueToTree(\"string\"));\n+        assertJsonEquals(json, json);\n+        assertJsonEquals(objectMapper.createArrayNode(),\n+                objectMapper.createArrayNode());\n+    }\n+\n+    @Test\n+    public void encodeWithoutTypeInfo_unsupportedTypes() {\n+        List<Object> unsupported = new ArrayList<>(\n+                withTypeInfoUnsupportedValues);\n+        unsupported.add(ElementFactory.createDiv());\n+\n+        for (Object value : unsupported) {\n+            boolean thrown = false;\n+            try {\n+                JacksonCodec.encodeWithoutTypeInfo(value);\n+\n+            } catch (AssertionError expected) {\n+                thrown = true;\n+            }\n+            if (!thrown) {\n+                Assert.fail(\"Should throw for \" + value.getClass());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void encodeWithTypeInfo_basicTypes() {\n+        assertJsonEquals(objectMapper.valueToTree(true),\n+                JacksonCodec.encodeWithTypeInfo(Boolean.TRUE));\n+        assertJsonEquals(objectMapper.nullNode(),\n+                JacksonCodec.encodeWithTypeInfo(null));\n+\n+        assertJsonEquals(objectMapper.valueToTree(234),\n+                JacksonCodec.encodeWithTypeInfo(objectMapper.valueToTree(234)));\n+        assertJsonEquals(objectMapper.valueToTree(\"string\"), JacksonCodec\n+                .encodeWithTypeInfo(objectMapper.valueToTree(\"string\")));\n+        assertJsonEquals(objectMapper.createObjectNode(), JacksonCodec\n+                .encodeWithTypeInfo(objectMapper.createObjectNode()));\n+\n+        // Array is escaped\n+        assertJsonEquals(\n+                JacksonUtils.createArray(\n+                        objectMapper.valueToTree(JacksonCodec.ARRAY_TYPE),\n+                        objectMapper.createArrayNode()),\n+                JacksonCodec\n+                        .encodeWithTypeInfo(objectMapper.createArrayNode()));\n+    }\n+\n+    @Test\n+    public void encodeWithTypeInfo_attachedElement() {\n+        Element element = ElementFactory.createDiv();\n+\n+        StateTree tree = new StateTree(new UI().getInternals(),\n+                ElementChildrenList.class);\n+        tree.getRootNode().getFeature(ElementChildrenList.class).add(0,\n+                element.getNode());\n+\n+        JsonNode json = JacksonCodec.encodeWithTypeInfo(element);\n+\n+        assertJsonEquals(\n+                JacksonUtils.createArray(\n+                        objectMapper.valueToTree(JacksonCodec.NODE_TYPE),\n+                        objectMapper.valueToTree(element.getNode().getId())),\n+                json);\n+    }\n+\n+    @Test\n+    public void encodeWithTypeInfo_detachedElement() {\n+        Element element = ElementFactory.createDiv();\n+\n+        JsonNode json = JacksonCodec.encodeWithTypeInfo(element);\n+\n+        assertJsonEquals(objectMapper.nullNode(), json);\n+    }\n+\n+    @Test\n+    public void encodeWithTypeInfo_unsupportedTypes() {\n+        for (Object value : withTypeInfoUnsupportedValues) {\n+            boolean thrown = false;\n+            try {\n+                JacksonCodec.encodeWithTypeInfo(value);\n+\n+            } catch (AssertionError expected) {\n+                thrown = true;\n+            }\n+            if (!thrown) {\n+                Assert.fail(\"Should throw for \" + value.getClass());\n+            }\n+        }\n+    }\n+\n+    private static void assertJsonEquals(JsonNode expected, JsonNode actual) {\n+        Assert.assertTrue(\n+                actual.toString() + \" does not equal \" + expected.toString(),\n+                JacksonUtils.jsonEquals(expected, actual));\n+    }\n+\n+    @Test\n+    public void decodeAs_booleanJson() {\n+        JsonNode json = objectMapper.valueToTree(true);\n+        Assert.assertTrue(JacksonCodec.decodeAs(json, Boolean.class));\n+        Assert.assertEquals(\"true\", JacksonCodec.decodeAs(json, String.class));\n+        Assert.assertEquals(Integer.valueOf(0),\n+                JacksonCodec.decodeAs(json, Integer.class));\n+        Assert.assertEquals(Double.valueOf(0.0),\n+                JacksonCodec.decodeAs(json, Double.class));\n+        Assert.assertEquals(json, JacksonCodec.decodeAs(json, JsonNode.class));\n+    }\n+\n+    @Test\n+    public void decodeAs_stringJson() {\n+        JsonNode json = objectMapper.valueToTree(\"Test123 String\\n !%\");\n+        Assert.assertFalse(JacksonCodec.decodeAs(json, Boolean.class));\n+        Assert.assertEquals(\"Test123 String\\n !%\",\n+                JacksonCodec.decodeAs(json, String.class));\n+        Assert.assertEquals(Integer.valueOf(0),\n+                JacksonCodec.decodeAs(json, Integer.class));\n+        Assert.assertFalse(JacksonCodec.decodeAs(json, Double.class).isNaN());\n+        Assert.assertEquals(json, JacksonCodec.decodeAs(json, JsonNode.class));\n+    }\n+\n+    @Test\n+    public void decodeAs_numberJson() {\n+        JsonNode json = objectMapper.valueToTree(15.7);\n+        Assert.assertFalse(JacksonCodec.decodeAs(json, Boolean.class));\n+        Assert.assertEquals(\"15.7\", JacksonCodec.decodeAs(json, String.class));\n+        Assert.assertEquals(Integer.valueOf(15),\n+                JacksonCodec.decodeAs(json, Integer.class));\n+        Assert.assertEquals(Double.valueOf(15.7),\n+                JacksonCodec.decodeAs(json, Double.class));\n+        Assert.assertEquals(json, JacksonCodec.decodeAs(json, JsonNode.class));\n+    }\n+\n+    @Test\n+    public void decodeAs_nullJson() {\n+        JsonNode json = objectMapper.nullNode();\n+        Assert.assertNull(JacksonCodec.decodeAs(json, Boolean.class));\n+        Assert.assertNull(JacksonCodec.decodeAs(json, String.class));\n+        Assert.assertNull(JacksonCodec.decodeAs(json, Integer.class));\n+        Assert.assertNull(JacksonCodec.decodeAs(json, Double.class));\n+        Assert.assertNull(JacksonCodec.decodeAs(json, JsonNode.class));\n+    }\n+\n+    @Test\n+    public void decodeAs_jsonValue() {\n+        ObjectNode json = objectMapper.createObjectNode();\n+        json.put(\"foo\", \"bar\");\n+        Assert.assertEquals(\"\", JacksonCodec.decodeAs(json, String.class));\n+        Assert.assertEquals(json, JacksonCodec.decodeAs(json, JsonNode.class));\n+        // boolean\n+        Assert.assertFalse(JacksonCodec.decodeAs(json, Boolean.class));\n+        Assert.assertNull(\n+                JacksonCodec.decodeAs(objectMapper.nullNode(), Boolean.class));\n+        Assert.assertFalse(JacksonCodec.decodeAs(json, boolean.class));\n+        Assert.assertFalse(\n+                JacksonCodec.decodeAs(objectMapper.nullNode(), boolean.class));\n+        // integer\n+        Assert.assertEquals(Integer.valueOf(0),\n+                JacksonCodec.decodeAs(json, Integer.class));\n+        Assert.assertNull(\n+                JacksonCodec.decodeAs(objectMapper.nullNode(), Integer.class));\n+        Assert.assertEquals(Integer.valueOf(0),\n+                JacksonCodec.decodeAs(json, int.class));\n+        Assert.assertEquals(Integer.valueOf(0),\n+                JacksonCodec.decodeAs(objectMapper.nullNode(), int.class));\n+        // double\n+        Assert.assertNull(\n+                JacksonCodec.decodeAs(objectMapper.nullNode(), Double.class));\n+        Assert.assertEquals(Double.valueOf(0.0),\n+                JacksonCodec.decodeAs(json, Double.class));\n+        Assert.assertEquals(Double.valueOf(0.0),\n+                JacksonCodec.decodeAs(json, double.class));\n+        Assert.assertEquals(0.0d,\n+                JacksonCodec.decodeAs(objectMapper.nullNode(), double.class),\n+                0.0001d);\n+    }\n+\n+    @Test(expected = ClassCastException.class)\n+    public void decodeAs_jsonValueWrongType_classCastException() {\n+        ObjectNode json = objectMapper.createObjectNode();\n+        json.put(\"foo\", \"bar\");\n+        JacksonCodec.decodeAs(json, NumericNode.class);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void decodeAs_unsupportedType() {\n+        Assert.assertNull(JacksonCodec.decodeAs(objectMapper.valueToTree(\"foo\"),\n+                float.class));\n+    }\n+}\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/internal/JacksonUtilsTest.java b/flow-server/src/test/java/com/vaadin/flow/internal/JacksonUtilsTest.java\nnew file mode 100644\nindex 00000000000..ff6aaacadea\n--- /dev/null\n+++ b/flow-server/src/test/java/com/vaadin/flow/internal/JacksonUtilsTest.java\n@@ -0,0 +1,475 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.internal;\n+\n+import java.time.Duration;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.DoubleStream;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.DoubleNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class JacksonUtilsTest {\n+    ObjectMapper mapper = new ObjectMapper();\n+\n+    @Test\n+    public void testEquals() {\n+        // Equal\n+        Assert.assertTrue(JacksonUtils.jsonEquals(mapper.valueToTree(true),\n+                mapper.valueToTree(true)));\n+        Assert.assertTrue(JacksonUtils.jsonEquals(mapper.valueToTree(\"foo\"),\n+                mapper.valueToTree(\"foo\")));\n+        Assert.assertTrue(JacksonUtils.jsonEquals(mapper.valueToTree(3.14),\n+                mapper.valueToTree(3.14)));\n+        Assert.assertTrue(\n+                JacksonUtils.jsonEquals(mapper.nullNode(), mapper.nullNode()));\n+        Assert.assertTrue(JacksonUtils.jsonEquals(createTestObject1(),\n+                createTestObject1()));\n+        Assert.assertTrue(JacksonUtils.jsonEquals(createTestArray1(),\n+                createTestArray1()));\n+\n+        // Non-equal with matching types\n+        Assert.assertFalse(JacksonUtils.jsonEquals(mapper.valueToTree(true),\n+                mapper.valueToTree(false)));\n+        Assert.assertFalse(JacksonUtils.jsonEquals(mapper.valueToTree(\"foo\"),\n+                mapper.valueToTree(\"oof\")));\n+        Assert.assertFalse(JacksonUtils.jsonEquals(mapper.valueToTree(3.14),\n+                mapper.valueToTree(3.142)));\n+        Assert.assertFalse(JacksonUtils.jsonEquals(createTestObject1(),\n+                createTestObject2()));\n+        Assert.assertFalse(JacksonUtils.jsonEquals(createTestArray1(),\n+                createTestArray2()));\n+\n+        // Non-equal with different types\n+        Assert.assertFalse(JacksonUtils.jsonEquals(mapper.valueToTree(true),\n+                mapper.valueToTree(\"true\")));\n+        Assert.assertFalse(JacksonUtils.jsonEquals(mapper.valueToTree(3.14),\n+                mapper.valueToTree(\"3.14\")));\n+        Assert.assertFalse(JacksonUtils.jsonEquals(mapper.nullNode(),\n+                mapper.valueToTree(\"null\")));\n+        Assert.assertFalse(JacksonUtils.jsonEquals(mapper.createObjectNode(),\n+                mapper.valueToTree(\"{}\")));\n+        Assert.assertFalse(JacksonUtils.jsonEquals(mapper.createArrayNode(),\n+                mapper.valueToTree(0)));\n+        Assert.assertFalse(JacksonUtils.jsonEquals(createTestArray1(),\n+                createTestObject1()));\n+    }\n+\n+    @Test(expected = AssertionError.class)\n+    public void testEquals_firstNull_throws() {\n+        JacksonUtils.jsonEquals(null, mapper.nullNode());\n+    }\n+\n+    @Test(expected = AssertionError.class)\n+    public void testEquals_secondNull_throws() {\n+        JacksonUtils.jsonEquals(mapper.nullNode(), null);\n+    }\n+\n+    private ObjectNode createTestObject1() {\n+        ObjectNode object = mapper.createObjectNode();\n+\n+        object.put(\"foo\", \"foo\");\n+        object.set(\"bar\", createTestArray1());\n+        object.set(\"baz\", mapper.createObjectNode());\n+\n+        return object;\n+    }\n+\n+    private ObjectNode createTestObject2() {\n+        ObjectNode object = mapper.createObjectNode();\n+\n+        object.put(\"foo\", \"oof\");\n+        object.set(\"bar\", createTestArray2());\n+        object.set(\"baz\", mapper.createArrayNode());\n+\n+        return object;\n+    }\n+\n+    private ArrayNode createTestArray1() {\n+        return Stream\n+                .of((JsonNode) mapper.valueToTree(\"foo\"),\n+                        mapper.createObjectNode())\n+                .collect(JacksonUtils.asArray());\n+    }\n+\n+    private ArrayNode createTestArray2() {\n+        return Stream\n+                .of((JsonNode) mapper.valueToTree(\"bar\"),\n+                        mapper.createArrayNode())\n+                .collect(JacksonUtils.asArray());\n+    }\n+\n+    private ArrayNode createNumberArray(double... items) {\n+        return DoubleStream.of(items).mapToObj(mapper::valueToTree)\n+                .map(obj -> (DoubleNode) obj).collect(JacksonUtils.asArray());\n+    }\n+\n+    @Test\n+    public void collectEmptyStream() {\n+        Stream<JsonNode> jsonValueStream = Stream.empty();\n+        ArrayNode a = jsonValueStream.collect(JacksonUtils.asArray());\n+        Assert.assertEquals(0, a.size());\n+    }\n+\n+    @Test\n+    public void testStream() {\n+        ArrayNode array = createTestArray1();\n+        List<JsonNode> list = JacksonUtils.stream(array).toList();\n+\n+        Assert.assertEquals(2, list.size());\n+        Assert.assertEquals(\"foo\", list.get(0).textValue());\n+        Assert.assertTrue(JacksonUtils.jsonEquals(list.get(1),\n+                mapper.createObjectNode()));\n+    }\n+\n+    @Test\n+    public void testObjectStream() {\n+        ArrayNode array = Stream.of(mapper.createObjectNode(),\n+                createTestObject1(), createTestObject2())\n+                .collect(JacksonUtils.asArray());\n+\n+        List<JsonNode> objects = JacksonUtils.objectStream(array).toList();\n+\n+        Assert.assertEquals(3, objects.size());\n+        Assert.assertTrue(JacksonUtils.jsonEquals(mapper.createObjectNode(),\n+                objects.get(0)));\n+        Assert.assertTrue(\n+                JacksonUtils.jsonEquals(createTestObject1(), objects.get(1)));\n+        Assert.assertTrue(\n+                JacksonUtils.jsonEquals(createTestObject2(), objects.get(2)));\n+    }\n+\n+    @Test\n+    public void testNumberStream() {\n+        double[] values = new double[] { 3.14, 42, Double.MAX_VALUE };\n+\n+        ArrayNode array = DoubleStream.of(values)\n+                .mapToObj(obj -> mapper.valueToTree(obj))\n+                .map(obj -> (DoubleNode) obj).collect(JacksonUtils.asArray());\n+\n+        DoubleStream numberStream = JacksonUtils.numberStream(array);\n+\n+        Assert.assertArrayEquals(values, numberStream.toArray(), 0);\n+    }\n+\n+    @Test\n+    public void testAsArray() {\n+        Stream<JsonNode> stream = JacksonUtils.stream(createTestArray1());\n+\n+        ArrayNode array = stream.collect(JacksonUtils.asArray());\n+\n+        Assert.assertTrue(JacksonUtils.jsonEquals(createTestArray1(), array));\n+    }\n+\n+    @Test\n+    public void testCreateArray() {\n+        ArrayNode array = JacksonUtils.createArray(mapper.valueToTree(\"string\"),\n+                mapper.nullNode());\n+\n+        Assert.assertEquals(2, array.size());\n+        Assert.assertEquals(\"string\", array.get(0).asText());\n+        Assert.assertTrue(array.get(1).isNull());\n+    }\n+\n+    @Test\n+    public void testCreateEmptyArray() {\n+        ArrayNode array = JacksonUtils.createArray();\n+\n+        Assert.assertEquals(0, array.size());\n+    }\n+\n+    @Test\n+    public void createObject() {\n+        HashMap<String, Object> map = new HashMap<>();\n+        map.put(\"integer\", Integer.valueOf(3));\n+        map.put(\"string\", \"foo\");\n+\n+        ObjectNode object = JacksonUtils.createObject(map, item -> {\n+            if (item instanceof Integer) {\n+                return mapper.valueToTree(((Integer) item).doubleValue());\n+            } else {\n+                return mapper.valueToTree(String.valueOf(item));\n+            }\n+        });\n+\n+        Assert.assertEquals(2, JacksonUtils.getKeys(object).size());\n+        Assert.assertEquals(3, object.get(\"integer\").asInt(), 0);\n+        Assert.assertEquals(\"foo\", object.get(\"string\").asText());\n+    }\n+\n+    @Test\n+    public void testCreateEmptyObject() {\n+        ObjectNode object = JacksonUtils.createObject(Collections.emptyMap(),\n+                item -> {\n+                    throw new AssertionError(\"Callback should not be called\");\n+                });\n+\n+        Assert.assertEquals(0, JacksonUtils.getKeys(object).size());\n+    }\n+\n+    public static class SimpleBean {\n+        private String string = \"value\";\n+        private int number = 1;\n+\n+        private float flt = 2.3f;\n+        private double dbl = 4.56;\n+\n+        public String getString() {\n+            return string;\n+        }\n+\n+        public int getNumber() {\n+            return number;\n+        }\n+\n+        public float getFlt() {\n+            return flt;\n+        }\n+\n+        public double getDbl() {\n+            return dbl;\n+        }\n+    }\n+\n+    public static class ParentBean {\n+        private String parentValue = \"parent\";\n+        private ChildBean child = new ChildBean();\n+\n+        public String getParentValue() {\n+            return parentValue;\n+        }\n+\n+        public ChildBean getChild() {\n+            return child;\n+        }\n+    }\n+\n+    public static class ChildBean {\n+        private String childValue = \"child\";\n+\n+        public String getChildValue() {\n+            return childValue;\n+        }\n+    }\n+\n+    public static class BeanWithTemporalFields {\n+\n+        public LocalTime localTime = LocalTime.of(10, 23, 55);\n+\n+        public LocalDate localDate = LocalDate.of(2024, 6, 26);\n+\n+        public LocalDateTime localDateTime = localDate.atTime(localTime);\n+\n+        public java.sql.Date sqlDate = java.sql.Date.valueOf(localDate);\n+\n+        public Date date = new Date(sqlDate.getTime());\n+\n+        public ZonedDateTime zonedDateTime = ZonedDateTime.of(localDateTime,\n+                ZoneId.of(\"Europe/Rome\"));\n+\n+        public Duration duration = Duration.ofSeconds(10);\n+    }\n+\n+    public static class ListAndMapBean {\n+        private Map<String, Integer> integerMap = new HashMap<>();\n+        private Map<String, ChildBean> childBeanMap = new HashMap<>();\n+\n+        private List<Integer> integerList = new ArrayList<>();\n+        private List<ChildBean> childBeanList = new ArrayList<>();\n+        {\n+            integerMap.put(\"one\", 1);\n+            integerMap.put(\"two\", 2);\n+\n+            integerList.add(3);\n+            integerList.add(2);\n+            integerList.add(1);\n+\n+            ChildBean firstChild = new ChildBean();\n+            firstChild.childValue = \"firstChildValue\";\n+            childBeanMap.put(\"First\", firstChild);\n+            ChildBean secondChild = new ChildBean();\n+            secondChild.childValue = \"secondChildValue\";\n+            childBeanMap.put(\"Second\", secondChild);\n+\n+            childBeanList.add(firstChild);\n+            childBeanList.add(secondChild);\n+        }\n+\n+        // these getters are needed for bean serialization:\n+        public Map<String, Integer> getIntegerMap() {\n+            return integerMap;\n+        }\n+\n+        public List<ChildBean> getChildBeanList() {\n+            return childBeanList;\n+        }\n+\n+        public List<Integer> getIntegerList() {\n+            return integerList;\n+        }\n+\n+        public Map<String, ChildBean> getChildBeanMap() {\n+            return childBeanMap;\n+        }\n+    }\n+\n+    @Test\n+    public void simpleBeanToJson() {\n+        ObjectNode json = JacksonUtils.beanToJson(new SimpleBean());\n+        Assert.assertEquals(\"value\", json.get(\"string\").asText());\n+        Assert.assertEquals(1.0, json.get(\"number\").asDouble(), 0.0);\n+        Assert.assertEquals(2.3f, json.get(\"flt\").floatValue(), 0.0);\n+        Assert.assertEquals(4.56, json.get(\"dbl\").asDouble(), 0.0);\n+    }\n+\n+    @Test\n+    public void nestedBeanToJson() {\n+        ObjectNode json = JacksonUtils.beanToJson(new ParentBean());\n+        Assert.assertEquals(\"parent\", json.get(\"parentValue\").asText());\n+        JsonNode child = json.get(\"child\");\n+        Assert.assertEquals(\"child\", child.get(\"childValue\").asText());\n+    }\n+\n+    @Test\n+    public void beanWithTimeFields() {\n+        BeanWithTemporalFields bean = new BeanWithTemporalFields();\n+        ObjectNode json = JacksonUtils.beanToJson(bean);\n+\n+        Assert.assertTrue(\"LocalTime not serialized as expected\",\n+                JacksonUtils.jsonEquals(createNumberArray(10, 23, 55),\n+                        json.get(\"localTime\")));\n+        Assert.assertTrue(\"LocalDate not serialized as expected\",\n+                JacksonUtils.jsonEquals(createNumberArray(2024, 6, 26),\n+                        json.get(\"localDate\")));\n+        Assert.assertTrue(\"LocalDateTime not serialized as expected\",\n+                JacksonUtils.jsonEquals(\n+                        createNumberArray(2024, 6, 26, 10, 23, 55),\n+                        json.get(\"localDateTime\")));\n+        Assert.assertEquals(\"ZonedDateTime not serialized as expected\",\n+                bean.zonedDateTime.toEpochSecond(),\n+                json.get(\"zonedDateTime\").asInt(), 0);\n+        Assert.assertEquals(\"ZonedDateTime not serialized as expected\",\n+                bean.sqlDate.getTime(), json.get(\"sqlDate\").asLong(), 0);\n+        Assert.assertEquals(\"ZonedDateTime not serialized as expected\",\n+                bean.date.getTime(), json.get(\"date\").asLong(), 0);\n+        Assert.assertEquals(10.0, json.get(\"duration\").asLong(), 0);\n+    }\n+\n+    @Test\n+    public void nullChildBean() {\n+        ParentBean bean = new ParentBean();\n+        bean.child = null;\n+\n+        ObjectNode json = JacksonUtils.beanToJson(bean);\n+        Assert.assertEquals(mapper.nullNode(), json.get(\"child\"));\n+    }\n+\n+    @Test\n+    public void beanWithListAndMap() {\n+        ListAndMapBean bean = new ListAndMapBean();\n+\n+        ObjectNode json = JacksonUtils.beanToJson(bean);\n+\n+        JsonNode integerMap = json.get(\"integerMap\");\n+        Assert.assertEquals(1, integerMap.get(\"one\").asInt(), 0);\n+        Assert.assertEquals(2, integerMap.get(\"two\").asInt(), 0);\n+\n+        JsonNode childBeanMap = json.get(\"childBeanMap\");\n+        JsonNode firstChild = childBeanMap.get(\"First\");\n+        Assert.assertEquals(\"firstChildValue\",\n+                firstChild.get(\"childValue\").asText());\n+        JsonNode secondChild = childBeanMap.get(\"Second\");\n+        Assert.assertEquals(\"secondChildValue\",\n+                secondChild.get(\"childValue\").asText());\n+\n+        JsonNode integerList = json.get(\"integerList\");\n+        Assert.assertEquals(3, integerList.get(0).asInt(), 0);\n+        Assert.assertEquals(2, integerList.get(1).asInt(), 0);\n+        Assert.assertEquals(1, integerList.get(2).asInt(), 0);\n+\n+        JsonNode childBeanList = json.get(\"childBeanList\");\n+        Assert.assertEquals(\"firstChildValue\",\n+                childBeanList.get(0).get(\"childValue\").asText());\n+        Assert.assertEquals(\"secondChildValue\",\n+                childBeanList.get(1).get(\"childValue\").asText());\n+    }\n+\n+    @Test\n+    public void simpleBeanListToJson() {\n+        ArrayList<SimpleBean> list = new ArrayList<>();\n+        SimpleBean bean1 = new SimpleBean();\n+        bean1.string = \"bean1\";\n+        SimpleBean bean2 = new SimpleBean();\n+        bean2.string = \"bean2\";\n+        list.add(bean1);\n+        list.add(bean2);\n+        ArrayNode json = JacksonUtils.listToJson(list);\n+\n+        Assert.assertEquals(\"bean1\", json.get(0).get(\"string\").asText());\n+        Assert.assertEquals(\"bean2\", json.get(1).get(\"string\").asText());\n+    }\n+\n+    @Test\n+    public void simpleMapToJson() {\n+        Map<String, Object> map = new HashMap<>();\n+        SimpleBean bean1 = new SimpleBean();\n+        bean1.string = \"bean1\";\n+        SimpleBean bean2 = new SimpleBean();\n+        bean2.string = \"bean2\";\n+\n+        map.put(\"one\", bean1);\n+        map.put(\"two\", bean2);\n+        ObjectNode json = JacksonUtils.mapToJson(map);\n+\n+        Assert.assertEquals(\"bean1\", json.get(\"one\").get(\"string\").asText());\n+        Assert.assertEquals(\"bean2\", json.get(\"two\").get(\"string\").asText());\n+    }\n+\n+    public record Person(String name, double age, boolean canSwim) {\n+\n+    }\n+\n+    @Test\n+    public void testReadObject() {\n+        ObjectNode jsonObject = mapper.createObjectNode();\n+        jsonObject.put(\"name\", \"Foo\");\n+        jsonObject.put(\"age\", 30.5);\n+        jsonObject.put(\"canSwim\", true);\n+\n+        Person person = JacksonUtils.readToObject(jsonObject, Person.class);\n+\n+        Assert.assertEquals(\"Foo\", person.name);\n+        Assert.assertEquals(30.5, person.age, 0.0);\n+        Assert.assertTrue(person.canSwim);\n+    }\n+\n+}\n\ndiff --git a/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java b/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java\nindex af921ff36e2..393c4378eff 100644\n--- a/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java\n+++ b/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java\n@@ -125,6 +125,7 @@ protected Stream<String> getExcludedPatterns() {\n                 \"com\\\\.vaadin\\\\.flow\\\\.internal\\\\.DevModeHandler\",\n                 \"com\\\\.vaadin\\\\.flow\\\\.internal\\\\.JsonSerializer\",\n                 \"com\\\\.vaadin\\\\.flow\\\\.internal\\\\.JsonCodec\",\n+                \"com\\\\.vaadin\\\\.flow\\\\.internal\\\\.JacksonCodec\",\n                 \"com\\\\.vaadin\\\\.flow\\\\.internal\\\\.ReflectionCacheHotswapper\",\n                 \"com\\\\.vaadin\\\\.flow\\\\.internal\\\\.UsageStatistics(\\\\$.*)?\",\n                 \"com\\\\.vaadin\\\\.flow\\\\.internal\\\\.nodefeature\\\\.NodeFeatureRegistry\",\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20938",
    "pr_id": 20938,
    "issue_id": 20495,
    "repo": "vaadin/flow",
    "problem_statement": "Spring's impersonation does not work on Vaadin\n### Description of the bug\n\nSpring offers a default way of an administrator impersonating a regular user. This seems not to work on Vaadin-on-Spring because Authorization seems not to be setup yet in the start-impersonating request. More here https://vaadin.com/forum/t/how-to-do-impersonation-using-spring-security/167804\n\n### Expected behavior\n\nWell, it should work 😄 \n\n### Minimal reproducible example\n\nOn a Vaadin-on-Spring application with Spring security and login enabled: configure the SwitchUserServlet as per one of the many examples, preferable on GET (which makes test easier) and attempt an impersonation. Probably VaadinAwareSecurityContextHolderStrategy should be set as the strategy on the filter (but won't fix the problem). \r\n\r\nhttps://stackoverflow.com/questions/72378146/user-impersonation-with-spring-security\n\n### Versions\n\n- Vaadin / Flow version: 24.5.4\r\n- Java version: 21\r\n- OS version: not relevant\r\n- Browser version (if applicable): not relevant\r\n- Application Server (if applicable): not relevant\r\n- IDE (if applicable): not relevant\r\n",
    "issue_word_count": 161,
    "test_files_count": 3,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java",
      "flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/views/MainView.java",
      "flow-tests/vaadin-spring-tests/test-spring-security-flow/src/test/java/com/vaadin/flow/spring/flowsecurity/AppViewIT.java"
    ],
    "pr_changed_test_files": [
      "flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java",
      "flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/views/MainView.java",
      "flow-tests/vaadin-spring-tests/test-spring-security-flow/src/test/java/com/vaadin/flow/spring/flowsecurity/AppViewIT.java"
    ],
    "base_commit": "4b321c78e920551a16b951e8835dfbf67b9c51cf",
    "head_commit": "fd70fdf8590808a2610bf03e3da234f3688e335e",
    "repo_url": "https://github.com/vaadin/flow/pull/20938",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20938",
    "dockerfile": "",
    "pr_merged_at": "2025-02-03T07:47:52.000Z",
    "patch": "",
    "test_patch": "diff --git a/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java b/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java\nindex 203e482f8ef..a32deec960e 100644\n--- a/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java\n@@ -11,6 +11,8 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.DependsOn;\n+import org.springframework.http.HttpMethod;\n import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n import org.springframework.security.core.Authentication;\n@@ -20,6 +22,7 @@\n import org.springframework.security.core.userdetails.UsernameNotFoundException;\n import org.springframework.security.provisioning.InMemoryUserDetailsManager;\n import org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler;\n+import org.springframework.security.web.authentication.switchuser.SwitchUserFilter;\n import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n \n import com.vaadin.flow.component.UI;\n@@ -33,6 +36,7 @@\n import com.vaadin.flow.spring.security.VaadinWebSecurity;\n \n import static com.vaadin.flow.spring.flowsecurity.service.UserInfoService.ROLE_ADMIN;\n+import static org.springframework.security.web.util.matcher.AntPathRequestMatcher.antMatcher;\n \n @EnableWebSecurity\n @Configuration\n@@ -78,6 +82,10 @@ public void configure(HttpSecurity http) throws Exception {\n                     .hasAnyRole(ROLE_ADMIN)\n                 .requestMatchers(antMatchers(\"/public/**\", \"/error\"))\n                     .permitAll());\n+\n+        http.authorizeHttpRequests(auth -> auth.requestMatchers(new AntPathRequestMatcher(\"/switchUser\")).hasAnyRole(\"ADMIN\", \"PREVIOUS_ADMINISTRATOR\"));\n+        http.authorizeHttpRequests(auth -> auth.requestMatchers(new AntPathRequestMatcher(\"/impersonate/exit\")).hasRole(\"PREVIOUS_ADMINISTRATOR\"));\n+\n         // @formatter:on\n         super.configure(http);\n         if (getLogoutSuccessUrl().equals(\"/\")) {\n@@ -141,4 +149,17 @@ public UserDetails loadUserByUsername(String username)\n         };\n     }\n \n+    @Bean\n+    @DependsOn(\"VaadinSecurityContextHolderStrategy\")\n+    public SwitchUserFilter switchUserFilter() {\n+        SwitchUserFilter filter = new SwitchUserFilter();\n+        filter.setUserDetailsService(userDetailsService());\n+        filter.setSwitchUserMatcher(antMatcher(HttpMethod.GET, \"/impersonate\"));\n+        filter.setSwitchFailureUrl(\"/switchUser\");\n+        filter.setExitUserMatcher(\n+                antMatcher(HttpMethod.GET, \"/impersonate/exit\"));\n+        filter.setTargetUrl(\"/\");\n+        return filter;\n+    }\n+\n }\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/views/MainView.java b/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/views/MainView.java\nindex 45dbf6be8cc..c2f1b00f700 100644\n--- a/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/views/MainView.java\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/views/MainView.java\n@@ -3,8 +3,13 @@\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n \n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.security.concurrent.DelegatingSecurityContextExecutor;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.web.authentication.switchuser.SwitchUserFilter;\n \n import com.vaadin.flow.component.Component;\n import com.vaadin.flow.component.ComponentUtil;\n@@ -29,6 +34,8 @@\n import com.vaadin.flow.spring.flowsecurity.SecurityUtils;\n import com.vaadin.flow.spring.flowsecurity.data.UserInfo;\n \n+import static com.vaadin.flow.spring.flowsecurity.service.UserInfoService.ROLE_ADMIN;\n+\n public class MainView extends AppLayout {\n \n     private final Tabs menu;\n@@ -95,6 +102,23 @@ private Component createDrawerContent(Tabs menu) {\n             });\n             layout.add(login);\n         } else {\n+            if (securityUtils.getAuthenticatedUserInfo().getRoles()\n+                    .contains(ROLE_ADMIN)) {\n+                Button impersonate = new Button(\"Impersonate John\",\n+                        e -> getUI().ifPresent(ui -> ui.getPage()\n+                                .setLocation(\"impersonate?username=john\")));\n+                impersonate.setId(\"impersonate\");\n+                layout.add(impersonate);\n+            } else if (SecurityContextHolder.getContext().getAuthentication()\n+                    .getAuthorities().stream().anyMatch(\n+                            auth -> SwitchUserFilter.ROLE_PREVIOUS_ADMINISTRATOR\n+                                    .equals(auth.getAuthority()))) {\n+                Button impersonate = new Button(\"Exit impersonation\",\n+                        e -> getUI().ifPresent(ui -> ui.getPage()\n+                                .setLocation(\"impersonate/exit\")));\n+                impersonate.setId(\"exit-impersonate\");\n+                layout.add(impersonate);\n+            }\n             Button logout = new Button(\"Logout\");\n             logout.setId(\"logout\");\n             logout.addClickListener(e -> {\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/test/java/com/vaadin/flow/spring/flowsecurity/AppViewIT.java b/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/test/java/com/vaadin/flow/spring/flowsecurity/AppViewIT.java\nindex 283a91b77d0..d2dad154619 100644\n--- a/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/test/java/com/vaadin/flow/spring/flowsecurity/AppViewIT.java\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/test/java/com/vaadin/flow/spring/flowsecurity/AppViewIT.java\n@@ -12,11 +12,13 @@\n \n import org.apache.commons.io.IOUtils;\n import org.junit.Assert;\n+import org.junit.Assume;\n import org.junit.Test;\n import org.openqa.selenium.By;\n import org.openqa.selenium.WebDriver;\n import org.openqa.selenium.WebDriverException;\n \n+import com.vaadin.flow.component.applayout.testbench.AppLayoutElement;\n import com.vaadin.flow.component.button.testbench.ButtonElement;\n import com.vaadin.flow.component.upload.testbench.UploadElement;\n import com.vaadin.flow.spring.flowsecurity.views.AdminView;\n@@ -342,6 +344,49 @@ public void client_menu_routes_correct_for_admin() {\n         assertMenuListContains(\"PublicView, PrivateView, AdminView\");\n     }\n \n+    @Test\n+    public void admin_impersonate_user_shows_expected() {\n+        Assume.assumeTrue(getUrlMappingBasePath().equals(\"\"));\n+\n+        open(LOGIN_PATH);\n+        loginAdmin();\n+\n+        List<MenuItem> menuItems = getMenuItems();\n+        List<MenuItem> expectedItems = new ArrayList<>();\n+\n+        expectedItems.add(new MenuItem(\"\", \"Public\", true));\n+        expectedItems.add(new MenuItem(\"private\", \"Private\", true));\n+        expectedItems.add(new MenuItem(\"admin\", \"Admin\", true));\n+        Assert.assertEquals(expectedItems, menuItems);\n+\n+        $(AppLayoutElement.class).first().setDrawerOpened(true);\n+\n+        Assert.assertTrue(\n+                $(ButtonElement.class).id(\"impersonate\").isDisplayed());\n+\n+        $(ButtonElement.class).id(\"impersonate\").click();\n+\n+        expectedItems.clear();\n+        menuItems = getMenuItems();\n+        expectedItems.add(new MenuItem(\"\", \"Public\", true));\n+        expectedItems.add(new MenuItem(\"private\", \"Private\", true));\n+        expectedItems.add(new MenuItem(\"admin\", \"Admin\", false));\n+        Assert.assertEquals(expectedItems, menuItems);\n+\n+        $(AppLayoutElement.class).first().setDrawerOpened(true);\n+\n+        Assert.assertTrue(\n+                $(ButtonElement.class).id(\"exit-impersonate\").isDisplayed());\n+        $(ButtonElement.class).id(\"exit-impersonate\").click();\n+\n+        expectedItems.clear();\n+        menuItems = getMenuItems();\n+        expectedItems.add(new MenuItem(\"\", \"Public\", true));\n+        expectedItems.add(new MenuItem(\"private\", \"Private\", true));\n+        expectedItems.add(new MenuItem(\"admin\", \"Admin\", true));\n+        Assert.assertEquals(expectedItems, menuItems);\n+    }\n+\n     private void assertMenuListContains(String expected) {\n         TestBenchElement menuList = waitUntil(driver -> $(\"*\").id(\"menu-list\"));\n         String menuListText = menuList.getText();\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20921",
    "pr_id": 20921,
    "issue_id": 20843,
    "repo": "vaadin/flow",
    "problem_statement": "org.springframework.beans.factory.BeanCreationException on hotswap\n### Description of the bug\n\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'no.ka.studd.views.MainLayout': Failed to instantiate [no.ka.studd.views.MainLayout]: Constructor threw exception\n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:321) ~[spring-beans-6.2.1.jar:6.2.1]\n\tat org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:309) ~[spring-beans-6.2.1.jar:6.2.1]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1377) ~[spring-beans-6.2.1.jar:6.2.1]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1214) ~[spring-beans-6.2.1.jar:6.2.1]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563) ~[spring-beans-6.2.1.jar:6.2.1]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523) ~[spring-beans-6.2.1.jar:6.2.1]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:322) ~[spring-beans-6.2.1.jar:6.2.1]\n\tat com.vaadin.flow.spring.SpringInstantiator.getOrCreate(SpringInstantiator.java:155) ~[vaadin-spring-24.7.0.alpha5.jar:na]\n\tat com.vaadin.flow.di.Instantiator.createRouteTarget(Instantiator.java:170) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.router.internal.AbstractNavigationStateRenderer.lambda$getRouteTarget$1(AbstractNavigationStateRenderer.java:146) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat java.base/java.util.Optional.orElseGet(Optional.java:364) ~[na:na]\n\tat com.vaadin.flow.router.internal.AbstractNavigationStateRenderer.getRouteTarget(AbstractNavigationStateRenderer.java:145) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.router.internal.AbstractNavigationStateRenderer.sendBeforeEnterEventAndPopulateChain(AbstractNavigationStateRenderer.java:639) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.router.internal.AbstractNavigationStateRenderer.createChainIfEmptyAndExecuteBeforeEnterNavigation(AbstractNavigationStateRenderer.java:620) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.router.internal.AbstractNavigationStateRenderer.handleBeforeNavigationEvents(AbstractNavigationStateRenderer.java:326) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.router.internal.AbstractNavigationStateRenderer.handle(AbstractNavigationStateRenderer.java:206) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.router.Router.handleNavigation(Router.java:266) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.router.Router.navigate(Router.java:234) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.component.internal.UIInternals.refreshCurrentRoute(UIInternals.java:1133) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.component.UI.refreshCurrentRoute(UI.java:1259) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.hotswap.Hotswapper.lambda$triggerClientUpdate$295d7b78$1(Hotswapper.java:476) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.component.UI.accessSynchronously(UI.java:498) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.component.UI$2.execute(UI.java:573) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572) ~[na:na]\n\tat java.base/java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:317) ~[na:na]\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java) ~[na:na]\n\tat com.vaadin.flow.server.VaadinService.runPendingAccessTasks(VaadinService.java:2173) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.server.VaadinSession.unlock(VaadinSession.java:755) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.server.VaadinService.ensureAccessQueuePurged(VaadinService.java:2137) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.server.VaadinService.accessSession(VaadinService.java:2104) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.server.VaadinSession.access(VaadinSession.java:1059) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.component.UI.access(UI.java:570) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.component.UI.access(UI.java:553) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.hotswap.Hotswapper.lambda$triggerClientUpdate$9(Hotswapper.java:476) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596) ~[na:na]\n\tat com.vaadin.flow.hotswap.Hotswapper.triggerClientUpdate(Hotswapper.java:476) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.hotswap.Hotswapper.onHotswapInternal(Hotswapper.java:266) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.hotswap.Hotswapper.onHotswap(Hotswapper.java:145) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[na:na]\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[na:na]\n\tat org.hotswap.agent.command.ReflectionCommand.doExecuteReflectionCommand(ReflectionCommand.java:207) ~[hotswap-agent.jar:2.0.1]\n\tat org.hotswap.agent.command.ReflectionCommand.executeCommand(ReflectionCommand.java:168) ~[hotswap-agent.jar:2.0.1]\n\tat org.hotswap.agent.command.impl.CommandExecutor.run(CommandExecutor.java:43) ~[hotswap-agent.jar:2.0.1]\nCaused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [no.ka.studd.views.MainLayout]: Constructor threw exception\n\tat org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:222) ~[spring-beans-6.2.1.jar:6.2.1]\n\tat org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:145) ~[spring-beans-6.2.1.jar:6.2.1]\n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:318) ~[spring-beans-6.2.1.jar:6.2.1]\n\t... 42 common frames omitted\nCaused by: java.lang.IllegalStateException: No request is available. This method can only be used with an active VaadinServletRequest\n\tat com.vaadin.flow.server.auth.AccessAnnotationChecker.hasAccess(AccessAnnotationChecker.java:92) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat no.ka.studd.views.MainLayout.createNavigation(MainLayout.kt:105) ~[classes/:na]\n\tat no.ka.studd.views.MainLayout.addDrawerContent(MainLayout.kt:173) ~[classes/:na]\n\tat no.ka.studd.views.MainLayout.<init>(MainLayout.kt:99) ~[classes/:na]\n\tat java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62) ~[na:na]\n\tat java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:502) ~[na:na]\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:486) ~[na:na]\n\tat kotlin.reflect.jvm.internal.calls.CallerImpl$Constructor.call(CallerImpl.kt:41) ~[kotlin-reflect-2.0.21.jar:2.0.21-release-482]\n\tat kotlin.reflect.jvm.internal.KCallableImpl.callDefaultMethod$kotlin_reflection(KCallableImpl.kt:207) ~[kotlin-reflect-2.0.21.jar:2.0.21-release-482]\n\tat kotlin.reflect.jvm.internal.KCallableImpl.callBy(KCallableImpl.kt:112) ~[kotlin-reflect-2.0.21.jar:2.0.21-release-482]\n\tat org.springframework.beans.BeanUtils$KotlinDelegate.instantiateClass(BeanUtils.java:940) ~[spring-beans-6.2.1.jar:6.2.1]\n\tat org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:190) ~[spring-beans-6.2.1.jar:6.2.1]\n\t... 44 common frames omitted\n\n\n### Expected behavior\n\nWorks with HotswapAgent 1.4.2 and page refresh, not HotswapAgent 2.0.1.\n\n**Should be an option to select a full page refresh in Copilot at runtime and a application.properties flag**\n\n### Minimal reproducible example\n\nNot sure why it fail, but Vaadin may understand looking at the stack trace\n\n### Versions\n\nHilla: 24.7.0.alpha6\nFlow: 24.7.0.alpha5\nVaadin: 24.7.0.alpha4\nCopilot: 24.7.0.alpha4\nFrontend Hotswap: Disabled, using pre-built bundle\nOS: amd64 Windows 11 10.0\nJava: JetBrains s.r.o. 21.0.5\nBrowser: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\nJava Hotswap: Java Hotswap is enabled\nIDE Plugin: 1.4.5 IntelliJ",
    "issue_word_count": 1306,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java",
      "flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java"
    ],
    "base_commit": "02069a4a4a3b82b44f3f112c3ce8ae375f68f5f1",
    "head_commit": "19d49520ce0aab425c9a1d06d5920df6fb757f9f",
    "repo_url": "https://github.com/vaadin/flow/pull/20921",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20921",
    "dockerfile": "",
    "pr_merged_at": "2025-01-28T12:49:47.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java b/flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java\nindex 9cc56f6cd3e..ac8204429e5 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java\n@@ -514,7 +514,7 @@ public void uiInit(UIInitEvent event) {\n         ui.getPage().executeJs(\n                 \"\"\"\n                         const $wnd = window;\n-                        window.addEventListener('vaadin-ui-refresh', (ev) => {\n+                        window.addEventListener('vaadin-refresh-ui', (ev) => {\n                             const senderFn = $wnd.Vaadin?.Flow?.clients[$0]?.sendEventMessage;\n                             if (senderFn) {\n                                 senderFn(1, \"ui-refresh\", ev.detail);\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java b/flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java\nindex 9b856e8fb5e..bc62443c3a4 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java\n@@ -16,6 +16,7 @@\n \n package com.vaadin.flow.hotswap;\n \n+import java.io.Serializable;\n import java.math.BigDecimal;\n import java.util.Collection;\n import java.util.HashSet;\n@@ -58,6 +59,7 @@\n import com.vaadin.flow.server.SessionDestroyListener;\n import com.vaadin.flow.server.SessionInitEvent;\n import com.vaadin.flow.server.SessionInitListener;\n+import com.vaadin.flow.server.UIInitEvent;\n import com.vaadin.flow.server.UIInitListener;\n import com.vaadin.flow.server.VaadinRequest;\n import com.vaadin.flow.server.VaadinService;\n@@ -1048,6 +1050,24 @@ public Registration addServiceDestroyListener(\n                 uiInitInstalled.get());\n     }\n \n+    @Test\n+    public void uiInit_registersUIRefreshClientSideEvent() {\n+        VaadinSession session = createMockVaadinSession();\n+        RefreshTestingUI ui = initUIAndNavigateTo(session, MyRoute.class,\n+                MyLayoutWithChild.class);\n+\n+        try {\n+            session.lock();\n+            UIInitEvent event = new UIInitEvent(ui, service);\n+            hotswapper.uiInit(event);\n+            Assert.assertTrue(\n+                    \"Expected Hotswapper to register client side refresh event listener \",\n+                    ui.refreshUIClientListenerRegistered);\n+        } finally {\n+            session.unlock();\n+        }\n+    }\n+\n     private void assertOnHotswapCompleteInvoked(VaadinHotswapper hotswapper,\n             HotswapCompleteEvent event) {\n         var eventArgumentCaptor = ArgumentCaptor\n@@ -1156,9 +1176,15 @@ private RefreshTestingUI initUIAndNavigateTo(VaadinSession session,\n \n     private static class RefreshTestingUI extends MockUI {\n \n-        private static final Pattern UI_REFRESH_EVENT = Pattern.compile(\n-                \".*new CustomEvent\\\\(\\\"vaadin-refresh-ui\\\",\\\\s*\\\\{\\\\s*detail:\\\\s*\\\\{\\\\s*fullRefresh:\\\\s*(true|false)\\\\s*}\\\\s*}\\\\).*\");\n+        private static final String REFRESH_EVENT_NAME = \"vaadin-refresh-ui\";\n+\n+        private static final Pattern FIRE_UI_REFRESH_EVENT = Pattern\n+                .compile(\".*new CustomEvent\\\\(\\\"\" + REFRESH_EVENT_NAME\n+                        + \"\\\",\\\\s*\\\\{\\\\s*detail:\\\\s*\\\\{\\\\s*fullRefresh:\\\\s*(true|false)\\\\s*}\\\\s*}\\\\).*\");\n+        private static final String ADD_CLIENT_UI_REFRESH_LISTENER = \"window.addEventListener('\"\n+                + REFRESH_EVENT_NAME + \"',\";\n         private Boolean refreshRouteChainRequested;\n+        private boolean refreshUIClientListenerRegistered;\n \n         private final Page pageSpy;\n \n@@ -1168,13 +1194,18 @@ public RefreshTestingUI(VaadinSession session) {\n             // Intercept javascript executions to check if the custom ui refresh\n             // event dispatch has been registered.\n             Mockito.doAnswer(i -> {\n-                Matcher matcher = UI_REFRESH_EVENT.matcher(i.getArgument(0));\n+                String expression = i.getArgument(0);\n+                Matcher matcher = FIRE_UI_REFRESH_EVENT.matcher(expression);\n                 if (matcher.matches()) {\n                     refreshRouteChainRequested = Boolean\n                             .parseBoolean(matcher.group(1));\n+                } else if (expression\n+                        .contains(ADD_CLIENT_UI_REFRESH_LISTENER)) {\n+                    refreshUIClientListenerRegistered = true;\n                 }\n                 return null;\n-            }).when(pageSpy).executeJs(Mockito.anyString());\n+            }).when(pageSpy).executeJs(Mockito.anyString(),\n+                    Mockito.any(Serializable[].class));\n         }\n \n         @Override\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20900",
    "pr_id": 20900,
    "issue_id": 20896,
    "repo": "vaadin/flow",
    "problem_statement": "Support Bun 1.2\n[Bun 1.2](https://bun.sh/blog/bun-v1.2) was released yesterday and at least the lockfile name and format have been changed. Flow needs a fix to support the new version.",
    "issue_word_count": 37,
    "test_files_count": 2,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/CleanFrontendUtil.java",
      "flow-server/src/main/java/com/vaadin/flow/server/Constants.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskCleanFrontendFiles.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdateImports.java",
      "flow-test-util/src/main/java/com/vaadin/flow/testutil/FileTestUtil.java",
      "flow-tests/test-frontend/test-bun/src/test/java/com/vaadin/flow/mixedtest/ui/BunUsedIT.java"
    ],
    "pr_changed_test_files": [
      "flow-test-util/src/main/java/com/vaadin/flow/testutil/FileTestUtil.java",
      "flow-tests/test-frontend/test-bun/src/test/java/com/vaadin/flow/mixedtest/ui/BunUsedIT.java"
    ],
    "base_commit": "69a1986302669d14d4e220d0ef8843e6fceb5150",
    "head_commit": "674f71ade3abf605ddabf57f2a4e97cdfeca641c",
    "repo_url": "https://github.com/vaadin/flow/pull/20900",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20900",
    "dockerfile": "",
    "pr_merged_at": "2025-01-24T07:08:07.000Z",
    "patch": "diff --git a/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/CleanFrontendUtil.java b/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/CleanFrontendUtil.java\nindex 11f2d333fa6..ca38384d09c 100644\n--- a/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/CleanFrontendUtil.java\n+++ b/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/CleanFrontendUtil.java\n@@ -78,6 +78,10 @@ public static void runCleaning(PluginAdapterBase adapter,\n                 lockFile = new File(adapter.npmFolder(),\n                         Constants.PACKAGE_LOCK_BUN);\n             }\n+            if (!lockFile.exists()) {\n+                lockFile = new File(adapter.npmFolder(),\n+                        Constants.PACKAGE_LOCK_BUN_1_2);\n+            }\n             if (!lockFile.exists()) {\n                 lockFile = new File(adapter.npmFolder(),\n                         Constants.PACKAGE_LOCK_JSON);\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/Constants.java b/flow-server/src/main/java/com/vaadin/flow/server/Constants.java\nindex 0fe002f634d..9c3a33e00c7 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/Constants.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/Constants.java\n@@ -70,20 +70,25 @@ public final class Constants implements Serializable {\n     public static final String PACKAGE_JSON = \"package.json\";\n \n     /**\n-     * Name of the <code>npm</code> version locking ile.\n+     * Name of the <code>npm</code> version locking file.\n      */\n     public static final String PACKAGE_LOCK_JSON = \"package-lock.json\";\n \n     /**\n-     * Name of the <code>pnpm</code> version locking ile.\n+     * Name of the <code>pnpm</code> version locking file.\n      */\n     public static final String PACKAGE_LOCK_YAML = \"pnpm-lock.yaml\";\n \n     /**\n-     * Name of the <code>bun</code> version locking ile.\n+     * Name of the <code>bun</code> version locking file.\n      */\n     public static final String PACKAGE_LOCK_BUN = \"bun.lockb\";\n \n+    /**\n+     * Name of the <code>bun</code> version locking file, starting from bun 1.2.\n+     */\n+    public static final String PACKAGE_LOCK_BUN_1_2 = \"bun.lock\";\n+\n     /**\n      * Target folder constant.\n      */\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskCleanFrontendFiles.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskCleanFrontendFiles.java\nindex 7825b844dd8..fd94c9185a9 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskCleanFrontendFiles.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskCleanFrontendFiles.java\n@@ -51,7 +51,7 @@ public class TaskCleanFrontendFiles implements FallibleCommand {\n     private List<String> generatedFiles = List.of(NODE_MODULES,\n             Constants.PACKAGE_JSON, Constants.PACKAGE_LOCK_JSON,\n             Constants.PACKAGE_LOCK_YAML, Constants.PACKAGE_LOCK_BUN,\n-            TaskGenerateTsConfig.TSCONFIG_JSON,\n+            Constants.PACKAGE_LOCK_BUN_1_2, TaskGenerateTsConfig.TSCONFIG_JSON,\n             TaskGenerateTsDefinitions.TS_DEFINITIONS, \".pnpmfile.cjs\", \".npmrc\",\n             FrontendUtils.VITE_GENERATED_CONFIG, FrontendUtils.VITE_CONFIG);\n     private Set<File> existingFiles = new HashSet<>();\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdateImports.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdateImports.java\nindex 0f62fb3e32f..b644da68884 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdateImports.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdateImports.java\n@@ -84,7 +84,8 @@ private String getAbsentPackagesMessage() {\n         String lockFile;\n         String toolName = TaskRunNpmInstall.getToolName(options);\n         if (options.isEnableBun()) {\n-            lockFile = Constants.PACKAGE_LOCK_BUN;\n+            lockFile = Constants.PACKAGE_LOCK_BUN + \"/\"\n+                    + Constants.PACKAGE_LOCK_BUN_1_2;\n         } else if (options.isEnablePnpm()) {\n             lockFile = Constants.PACKAGE_LOCK_YAML;\n         } else {\n",
    "test_patch": "diff --git a/flow-test-util/src/main/java/com/vaadin/flow/testutil/FileTestUtil.java b/flow-test-util/src/main/java/com/vaadin/flow/testutil/FileTestUtil.java\nindex 8832ef87ae7..a248b8b9599 100644\n--- a/flow-test-util/src/main/java/com/vaadin/flow/testutil/FileTestUtil.java\n+++ b/flow-test-util/src/main/java/com/vaadin/flow/testutil/FileTestUtil.java\n@@ -32,6 +32,40 @@ public static void waitForFile(File file) {\n                 \"File \" + file.getAbsolutePath() + \" does not exist\");\n     }\n \n+    /**\n+     * Waits for at least one of the given files to be present for up to 5\n+     * minutes.\n+     *\n+     * @param files\n+     *            the file(s) to wait for\n+     */\n+    public static void waitForFiles(File... files) {\n+        long start = System.currentTimeMillis();\n+        long timeout = 60 * 5;\n+\n+        while (System.currentTimeMillis() - start < timeout * 1000) {\n+            for (File file : files) {\n+                if (file.exists()) {\n+                    return;\n+                }\n+            }\n+            try {\n+                Thread.sleep(100);\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+        StringBuilder fileNames = new StringBuilder();\n+        for (File file : files) {\n+            fileNames.append(file.getName()).append(\",\");\n+        }\n+        ;\n+        throw new IllegalStateException(\"None of the files \"\n+                + (fileNames.isEmpty() ? \"\"\n+                        : fileNames.substring(0, fileNames.length() - 1))\n+                + \" exist\");\n+    }\n+\n     /**\n      * Asserts the given file is a directory.\n      *\n\ndiff --git a/flow-tests/test-frontend/test-bun/src/test/java/com/vaadin/flow/mixedtest/ui/BunUsedIT.java b/flow-tests/test-frontend/test-bun/src/test/java/com/vaadin/flow/mixedtest/ui/BunUsedIT.java\nindex 55f0852a382..105787e3bbb 100644\n--- a/flow-tests/test-frontend/test-bun/src/test/java/com/vaadin/flow/mixedtest/ui/BunUsedIT.java\n+++ b/flow-tests/test-frontend/test-bun/src/test/java/com/vaadin/flow/mixedtest/ui/BunUsedIT.java\n@@ -11,8 +11,9 @@ public class BunUsedIT {\n \n     @Test\n     public void bunIsUsed() {\n-        File testPackage = new File(Constants.PACKAGE_LOCK_BUN);\n-        FileTestUtil.waitForFile(testPackage);\n+        File bunLockFile = new File(Constants.PACKAGE_LOCK_BUN);\n+        File bunLockFile1_2 = new File(Constants.PACKAGE_LOCK_BUN_1_2);\n+        FileTestUtil.waitForFiles(bunLockFile, bunLockFile1_2);\n     }\n \n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20894",
    "pr_id": 20894,
    "issue_id": 20808,
    "repo": "vaadin/flow",
    "problem_statement": "Upgrading to Vite 6.0.7 does not work because of buildSwPlugin\n### Description of the bug\n\nThis code https://github.com/vaadin/flow/blob/e365417d6cf0c15ebfe8aaba14073976eb31f220/flow-server/src/main/resources/vite.generated.ts#L156-L171\r\nno longer works with Vite 6.0.7 as the Vite esbuild plugin now relies on Vite internals, so the build fails with\r\n```\r\nerror during build:\r\nTypeError: Cannot read properties of undefined (reading 'config')\r\n    at Object.renderChunk (file:///.../flow-tests/test-express-build/test-dev-bundle/node_modules/vite/dist/node/chunks/dep-BJP6rrE_.js:12289:39)\r\n    at file:///.../flow-tests/test-express-build/test-dev-bundle/node_modules/rollup/dist/es/shared/node-entry.js:20812:40\r\n```\r\n\r\nSee #20799 and https://github.com/vitejs/vite/issues/19144\r\n\r\nThe code was original implemented in #12928 by @vursen who recalls that the Vite build API was not adequate back then for the task, but it has been 3 years\n\n### Expected behavior\n\nIt works\n\n### Minimal reproducible example\n\n#20799\n\n### Versions\n\n- Vaadin / Flow version: latest",
    "issue_word_count": 164,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "flow-server/src/main/resources/vite.generated.ts",
      "flow-tests/test-pwa/src/test/java/com/vaadin/flow/pwatest/ui/PwaTestIT.java"
    ],
    "pr_changed_test_files": [
      "flow-tests/test-pwa/src/test/java/com/vaadin/flow/pwatest/ui/PwaTestIT.java"
    ],
    "base_commit": "711a36c11ffcabc31fb60c42a05e77775687e998",
    "head_commit": "860b5e249b092604f6fdc9f58d71a17c9baaccc6",
    "repo_url": "https://github.com/vaadin/flow/pull/20894",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20894",
    "dockerfile": "",
    "pr_merged_at": "2025-01-24T10:55:51.000Z",
    "patch": "diff --git a/flow-server/src/main/resources/vite.generated.ts b/flow-server/src/main/resources/vite.generated.ts\nindex 5842357ef55..9da66af2469 100644\n--- a/flow-server/src/main/resources/vite.generated.ts\n+++ b/flow-server/src/main/resources/vite.generated.ts\n@@ -16,18 +16,18 @@ import settings from '#settingsImport#';\n import {\n   AssetInfo,\n   ChunkInfo,\n+  build,\n   defineConfig,\n   mergeConfig,\n   OutputOptions,\n   PluginOption,\n-  ResolvedConfig,\n+  InlineConfig,\n   UserConfigFn\n } from 'vite';\n import { getManifest, type ManifestTransform } from 'workbox-build';\n \n import * as rollup from 'rollup';\n import brotli from 'rollup-plugin-brotli';\n-import replace from '@rollup/plugin-replace';\n import checker from 'vite-plugin-checker';\n import postcssLit from '#buildFolder#/plugins/rollup-plugin-postcss-lit-custom/rollup-plugin-postcss-lit.js';\n \n@@ -106,7 +106,7 @@ function injectManifestToSWPlugin(): rollup.Plugin {\n         const { manifestEntries } = await getManifest({\n           globDirectory: buildOutputFolder,\n           globPatterns: ['**/*'],\n-          globIgnores: ['**/*.br', 'pwa-icons/**'],\n+          globIgnores: ['**/*.br', 'pwa-icons/**', 'sw.js'],\n           manifestTransforms: [rewriteManifestIndexHtmlUrl],\n           maximumFileSizeToCacheInBytes: 100 * 1024 * 1024 // 100mb,\n         });\n@@ -118,87 +118,54 @@ function injectManifestToSWPlugin(): rollup.Plugin {\n }\n \n function buildSWPlugin(opts: { devMode: boolean }): PluginOption {\n-  let config: ResolvedConfig;\n+  let buildConfig: InlineConfig;\n   const devMode = opts.devMode;\n \n-  const swObj: { code?: string, map?: rollup.SourceMap | null } = {};\n-\n-  async function build(action: 'generate' | 'write', additionalPlugins: rollup.Plugin[] = []) {\n-    const includedPluginNames = [\n-      'vite:esbuild',\n-      'rollup-plugin-dynamic-import-variables',\n-      'vite:esbuild-transpile',\n-      'vite:terser'\n-    ];\n-    const plugins: rollup.Plugin[] = config.plugins.filter((p) => {\n-      return includedPluginNames.includes(p.name);\n-    });\n-    const resolver = config.createResolver();\n-    const resolvePlugin: rollup.Plugin = {\n-      name: 'resolver',\n-      resolveId(source, importer, _options) {\n-        return resolver(source, importer);\n-      }\n-    };\n-    plugins.unshift(resolvePlugin); // Put resolve first\n-    plugins.push(\n-      replace({\n-        values: {\n-          'process.env.NODE_ENV': JSON.stringify(config.mode),\n-          ...config.define\n-        },\n-        preventAssignment: true\n-      })\n-    );\n-    if (additionalPlugins) {\n-      plugins.push(...additionalPlugins);\n-    }\n-    const bundle = await rollup.rollup({\n-      input: path.resolve(settings.clientServiceWorkerSource),\n-      plugins\n-    });\n-\n-    try {\n-      return await bundle[action]({\n-        file: path.resolve(buildOutputFolder, 'sw.js'),\n-        format: 'es',\n-        exports: 'none',\n-        sourcemap: config.command === 'serve' || config.build.sourcemap,\n-        inlineDynamicImports: true\n-      });\n-    } finally {\n-      await bundle.close();\n-    }\n-  }\n-\n   return {\n     name: 'vaadin:build-sw',\n     enforce: 'post',\n-    async configResolved(resolvedConfig) {\n-      config = resolvedConfig;\n+    async configResolved(viteConfig) {\n+      buildConfig = {\n+        base: viteConfig.base,\n+        root: viteConfig.root,\n+        mode: viteConfig.mode,\n+        resolve: viteConfig.resolve,\n+        define: {\n+          ...viteConfig.define,\n+          'process.env.NODE_ENV': JSON.stringify(viteConfig.mode),\n+        },\n+        build: {\n+          minify: viteConfig.build.minify,\n+          outDir: viteConfig.build.outDir,\n+          sourcemap: viteConfig.command === 'serve' || viteConfig.build.sourcemap,\n+          emptyOutDir: false,\n+          modulePreload: false,\n+          rollupOptions: {\n+            input: {\n+              sw: settings.clientServiceWorkerSource\n+            },\n+            output: {\n+              exports: 'none',\n+              entryFileNames: 'sw.js',\n+              inlineDynamicImports: true,\n+            },\n+          },\n+        },\n+      };\n     },\n     async buildStart() {\n       if (devMode) {\n-        const { output } = await build('generate');\n-        swObj.code = output[0].code;\n-        swObj.map = output[0].map;\n-      }\n-    },\n-    async load(id) {\n-      if (id.endsWith('sw.js')) {\n-        return '';\n-      }\n-    },\n-    async transform(_code, id) {\n-      if (id.endsWith('sw.js')) {\n-        return swObj;\n+        await build(buildConfig);\n       }\n     },\n     async closeBundle() {\n       if (!devMode) {\n-        await build('write', [injectManifestToSWPlugin(), brotli()]);\n+        await build({\n+          ...buildConfig,\n+          plugins: [injectManifestToSWPlugin(), brotli()]\n+        });\n       }\n-    }\n+    },\n   };\n }\n \n",
    "test_patch": "diff --git a/flow-tests/test-pwa/src/test/java/com/vaadin/flow/pwatest/ui/PwaTestIT.java b/flow-tests/test-pwa/src/test/java/com/vaadin/flow/pwatest/ui/PwaTestIT.java\nindex b204cc2078b..f1210c0e353 100644\n--- a/flow-tests/test-pwa/src/test/java/com/vaadin/flow/pwatest/ui/PwaTestIT.java\n+++ b/flow-tests/test-pwa/src/test/java/com/vaadin/flow/pwatest/ui/PwaTestIT.java\n@@ -129,7 +129,7 @@ public void testPwaResources() throws IOException {\n         Assert.assertTrue(\n                 \"Expected sw-runtime-resources-precache.js to be imported, but was not\",\n                 serviceWorkerJS.contains(\n-                        \"importScripts(\\\"sw-runtime-resources-precache.js\\\");\"));\n+                        \"importScripts(\\\"sw-runtime-resources-precache.js\\\")\"));\n \n         serviceWorkerUrl = getRootURL() + \"/sw-runtime-resources-precache.js\";\n         serviceWorkerJS = readStringFromUrl(serviceWorkerUrl);\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20874",
    "pr_id": 20874,
    "issue_id": 20813,
    "repo": "vaadin/flow",
    "problem_statement": "API for setting DisabledUpdateMode for ShortcutRegistration\n### Describe your motivation\n\nThe DS Team is planning on implementing a [feature](https://github.com/vaadin/web-components/issues/4585) to make buttons focusable in the disabled state. The `addFocusShortcut` method from Flow allows setting a shortcut to focus a button, but currently, it doesn't work when the button is disabled. To support this functionality, we would need an API to keep the shortcut active even when the owner component is in the disabled state.\n\n### Describe the solution you'd like\n\nIntroduce a `setDisabledUpdateMode` method in `ShortcutRegistration` to allow configuring the behavior for specific shortcuts, such as the focus shortcut, when the owner component is disabled.\n",
    "issue_word_count": 113,
    "test_files_count": 3,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/component/ShortcutRegistration.java",
      "flow-server/src/test/java/com/vaadin/flow/component/ShortcutRegistrationTest.java",
      "flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/ShortcutsView.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/ShortcutsIT.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/component/ShortcutRegistrationTest.java",
      "flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/ShortcutsView.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/ShortcutsIT.java"
    ],
    "base_commit": "e4f135a26799ca8a974b36b502f5b1cbd4b184d4",
    "head_commit": "430204f13c47d83e10d332e39ce665a616a00508",
    "repo_url": "https://github.com/vaadin/flow/pull/20874",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20874",
    "dockerfile": "",
    "pr_merged_at": "2025-01-17T16:26:09.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/component/ShortcutRegistration.java b/flow-server/src/main/java/com/vaadin/flow/component/ShortcutRegistration.java\nindex 15ffa767104..99c429c6ddd 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/ShortcutRegistration.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/ShortcutRegistration.java\n@@ -30,6 +30,7 @@\n import java.util.stream.Collectors;\n \n import com.vaadin.flow.component.internal.UIInternals;\n+import com.vaadin.flow.dom.DisabledUpdateMode;\n import com.vaadin.flow.dom.DomListenerRegistration;\n import com.vaadin.flow.function.SerializableConsumer;\n import com.vaadin.flow.function.SerializableSupplier;\n@@ -95,6 +96,8 @@ public class ShortcutRegistration implements Registration, Serializable {\n \n     private List<Registration> registrations = new ArrayList<>();\n \n+    private DisabledUpdateMode mode = DisabledUpdateMode.ONLY_WHEN_ENABLED;\n+\n     // beforeClientResponse callback\n     // needs to be an anonymous class to prevent deserialization issues\n     // see #17201\n@@ -517,6 +520,39 @@ public Component getLifecycleOwner() {\n         return lifecycleOwner;\n     }\n \n+    /**\n+     * Configure whether this listener will be called even in cases when the\n+     * component is disabled. Defaults to\n+     * {@link DisabledUpdateMode#ONLY_WHEN_ENABLED}.\n+     *\n+     * @param disabledUpdateMode\n+     *            {@link DisabledUpdateMode#ONLY_WHEN_ENABLED} to only fire\n+     *            events when the component is enabled,\n+     *            {@link DisabledUpdateMode#ALWAYS} to fire events also when the\n+     *            component is disabled.\n+     *\n+     * @return this registration, for chaining\n+     */\n+    public ShortcutRegistration setDisabledUpdateMode(\n+            DisabledUpdateMode disabledUpdateMode) {\n+        if (disabledUpdateMode == null) {\n+            throw new IllegalArgumentException(\n+                    \"RPC communication control mode for disabled element must not be null\");\n+        }\n+        mode = disabledUpdateMode;\n+        return this;\n+    }\n+\n+    /**\n+     * Returns whether this listener will be called even in cases when the\n+     * component is disabled.\n+     *\n+     * @return current disabledUpdateMode for this listener\n+     */\n+    public DisabledUpdateMode getDisabledUpdateMode() {\n+        return mode;\n+    }\n+\n     /**\n      * Used for testing purposes.\n      *\n@@ -637,8 +673,9 @@ private Component getComponentEventSource(int listenOnIndex) {\n     }\n \n     private void fireShortcutEvent(Component component) {\n-        if (ancestorsOrSelfAreVisible(lifecycleOwner)\n-                && lifecycleOwner.getElement().isEnabled()) {\n+        if (ancestorsOrSelfAreVisible(lifecycleOwner) && (lifecycleOwner\n+                .getElement().isEnabled()\n+                || DisabledUpdateMode.ALWAYS.equals(getDisabledUpdateMode()))) {\n             invokeShortcutEventListener(component);\n         }\n     }\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/component/ShortcutRegistrationTest.java b/flow-server/src/test/java/com/vaadin/flow/component/ShortcutRegistrationTest.java\nindex 627f406464a..bc1636d7b5d 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/component/ShortcutRegistrationTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/component/ShortcutRegistrationTest.java\n@@ -33,6 +33,7 @@\n \n import com.vaadin.flow.component.internal.PendingJavaScriptInvocation;\n import com.vaadin.flow.component.internal.UIInternals;\n+import com.vaadin.flow.dom.DisabledUpdateMode;\n import com.vaadin.flow.dom.Element;\n import com.vaadin.flow.dom.ElementFactory;\n import com.vaadin.flow.function.SerializableConsumer;\n@@ -506,6 +507,24 @@ public void constructedRegistration_lifecycleOnwerIsDisabled_shorcutEventIsNotFi\n         Assert.assertNull(event.get());\n     }\n \n+    @Test\n+    public void constructedRegistration_lifecycleOwnerIsDisabledWithDisabledUpdateModeAlways_shortcutEventIsFired() {\n+        AtomicReference<ShortcutEvent> event = new AtomicReference<>();\n+\n+        new ShortcutRegistration(lifecycleOwner, () -> listenOn, event::set,\n+                Key.KEY_A).setDisabledUpdateMode(DisabledUpdateMode.ALWAYS);\n+\n+        Element element = mockLifecycle(true);\n+        element.setEnabled(false);\n+\n+        clientResponse();\n+\n+        listenOn[0].getEventBus()\n+                .fireEvent(new KeyDownEvent(listenOn[0], Key.KEY_A.toString()));\n+\n+        Assert.assertNotNull(event.get());\n+    }\n+\n     @Test\n     public void constructedRegistration_lifecycleOnwerIsInvisible_shorcutEventIsNotFired() {\n         AtomicReference<ShortcutEvent> event = new AtomicReference<>();\n\ndiff --git a/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/ShortcutsView.java b/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/ShortcutsView.java\nindex 2f9ee2b934b..cdd1a0e7260 100644\n--- a/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/ShortcutsView.java\n+++ b/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/ShortcutsView.java\n@@ -29,6 +29,7 @@\n import com.vaadin.flow.component.html.NativeButton;\n import com.vaadin.flow.component.html.Paragraph;\n import com.vaadin.flow.data.value.ValueChangeMode;\n+import com.vaadin.flow.dom.DisabledUpdateMode;\n import com.vaadin.flow.router.Route;\n import com.vaadin.flow.uitest.servlet.ViewTestLayout;\n \n@@ -86,6 +87,20 @@ public ShortcutsView() {\n \n         add(disabledButton);\n \n+        // DisabledUpdateMode.ALWAYS makes shortcut work when component is\n+        // disabled\n+        NativeButton disabledButtonWithAlwaysMode = new NativeButton();\n+        disabledButtonWithAlwaysMode.setEnabled(false);\n+        disabledButtonWithAlwaysMode.addClickListener(event -> {\n+            actual.setValue(\"DISABLED CLICKED\");\n+        });\n+        disabledButtonWithAlwaysMode\n+                .addClickShortcut(Key.KEY_P, KeyModifier.SHIFT,\n+                        KeyModifier.CONTROL)\n+                .setDisabledUpdateMode(DisabledUpdateMode.ALWAYS);\n+\n+        add(disabledButtonWithAlwaysMode);\n+\n         // listenOnScopesTheShortcut\n         Div subview = new Div();\n         subview.setId(\"subview\");\n\ndiff --git a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/ShortcutsIT.java b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/ShortcutsIT.java\nindex 812179fcecd..0eb702c0e78 100644\n--- a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/ShortcutsIT.java\n+++ b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/ShortcutsIT.java\n@@ -80,7 +80,7 @@ public void shortcutsOnlyWorkWhenComponentIsVisible() {\n \n     @Test\n     public void shortcutOnlyWorksWhenComponentIsEnabled() {\n-        sendKeys(Keys.CONTROL, \"U\"); // ctrl+shift+u\n+        sendKeys(Keys.CONTROL, Keys.SHIFT, \"u\");\n \n         // clicking the button disables it, and clicking again should not have\n         // and effect\n@@ -89,7 +89,17 @@ public void shortcutOnlyWorksWhenComponentIsEnabled() {\n         resetActual();\n         assertActualEquals(DEFAULT_VALUE);\n \n-        sendKeys(Keys.CONTROL, \"U\"); // ctrl+shift+u\n+        sendKeys(Keys.CONTROL, Keys.SHIFT, \"u\");\n+        assertActualEquals(DEFAULT_VALUE);\n+    }\n+\n+    @Test\n+    public void shortcutWithDisabledUpdateModeAlwaysWorksWhenComponentIsDisabled() {\n+        sendKeys(Keys.CONTROL, Keys.SHIFT, \"p\");\n+\n+        assertActualEquals(\"DISABLED CLICKED\");\n+\n+        resetActual();\n         assertActualEquals(DEFAULT_VALUE);\n     }\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20855",
    "pr_id": 20855,
    "issue_id": 20854,
    "repo": "vaadin/flow",
    "problem_statement": "Binder ignores setReadonly for Java Records\n### Description of the bug\n\nUsing Java Records with Binder and setting readonly to true, the Components like TextField is still writeable.\n\nDiscussion: https://vaadin.com/forum/t/java-records-with-binder-readonly-mode-not-possible/168124\n\n### Expected behavior\n\nReadOnly mode should work with Java Records exactly like JavaBeans\n\n### Minimal reproducible example\n\n```\n  private final Binder<MyJavaRecord> binder = new Binder<>(MyJavaRecord.class);\n  private final TextField timestamp = new TextField(\"timestamp\");\n…\n  binder.bindInstanceFields(this);\n\n  // timestamp.setReadOnly(true); // THIS DOES WORK\n  binder.setReadOnly(true); // THIS DOES NOT WORK\n…\n  binder.readBean(myJavaRecord);\n```\n\n### Versions\n\n- Vaadin / Flow version: 24\n- Java version: 21\n",
    "issue_word_count": 100,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "flow-data/src/main/java/com/vaadin/flow/data/binder/Binder.java",
      "flow-data/src/test/java/com/vaadin/flow/data/binder/BinderTest.java"
    ],
    "pr_changed_test_files": [
      "flow-data/src/test/java/com/vaadin/flow/data/binder/BinderTest.java"
    ],
    "base_commit": "049bfdf87082b75e08dcbe47e2c774b6ab86b89c",
    "head_commit": "819b8254aba4051aed5cd84971a3a0d436ce7ad8",
    "repo_url": "https://github.com/vaadin/flow/pull/20855",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20855",
    "dockerfile": "",
    "pr_merged_at": "2025-01-16T10:54:03.000Z",
    "patch": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/binder/Binder.java b/flow-data/src/main/java/com/vaadin/flow/data/binder/Binder.java\nindex a94abaefe51..5f0b498f866 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/binder/Binder.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/binder/Binder.java\n@@ -1659,7 +1659,7 @@ private void convertAndSetFieldValue(TARGET modelValue) {\n \n         @Override\n         public void setReadOnly(boolean readOnly) {\n-            if (setter == null && !readOnly) {\n+            if (!binder.isRecord && this.setter == null && !readOnly) {\n                 throw new IllegalStateException(\n                         \"Binding with a null setter has to be read-only\");\n             }\n@@ -3535,7 +3535,8 @@ public boolean hasChanges(Binding<BEAN, ?> binding) {\n      *            to set them to read-write\n      */\n     public void setReadOnly(boolean readOnly) {\n-        getBindings().stream().filter(binding -> binding.getSetter() != null)\n+        getBindings().stream()\n+                .filter(binding -> isRecord || binding.getSetter() != null)\n                 .forEach(field -> field.setReadOnly(readOnly));\n     }\n \n",
    "test_patch": "diff --git a/flow-data/src/test/java/com/vaadin/flow/data/binder/BinderTest.java b/flow-data/src/test/java/com/vaadin/flow/data/binder/BinderTest.java\nindex 0c9b4c0d7cf..cdee582026f 100644\n--- a/flow-data/src/test/java/com/vaadin/flow/data/binder/BinderTest.java\n+++ b/flow-data/src/test/java/com/vaadin/flow/data/binder/BinderTest.java\n@@ -1303,6 +1303,23 @@ public void setReadonlyShouldIgnoreBindingsWithNullSetter() {\n         assertTrue(\"Age field should be readonly\", ageField.isReadOnly());\n     }\n \n+    @Test\n+    public void setReadonly_record_allFieldsAreReadonly() {\n+        Binder<TestRecord> binder = new Binder<>(TestRecord.class);\n+        binder.forField(nameField).bind(\"name\");\n+        binder.forField(ageField).bind(\"age\");\n+\n+        binder.getBinding(\"name\").ifPresent(b -> b.setReadOnly(true));\n+        binder.setReadOnly(true);\n+        assertTrue(\"Name field should be readonly\", nameField.isReadOnly());\n+        assertTrue(\"Age field should be readonly\", ageField.isReadOnly());\n+\n+        binder.setReadOnly(false);\n+        assertFalse(\"Name field should not be readonly\",\n+                nameField.isReadOnly());\n+        assertFalse(\"Age field should not be readonly\", ageField.isReadOnly());\n+    }\n+\n     @Test\n     public void isValidTest_bound_binder() {\n         binder.forField(nameField)\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20848",
    "pr_id": 20848,
    "issue_id": 20843,
    "repo": "vaadin/flow",
    "problem_statement": "org.springframework.beans.factory.BeanCreationException on hotswap\n### Description of the bug\n\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'no.ka.studd.views.MainLayout': Failed to instantiate [no.ka.studd.views.MainLayout]: Constructor threw exception\n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:321) ~[spring-beans-6.2.1.jar:6.2.1]\n\tat org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:309) ~[spring-beans-6.2.1.jar:6.2.1]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1377) ~[spring-beans-6.2.1.jar:6.2.1]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1214) ~[spring-beans-6.2.1.jar:6.2.1]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563) ~[spring-beans-6.2.1.jar:6.2.1]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523) ~[spring-beans-6.2.1.jar:6.2.1]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:322) ~[spring-beans-6.2.1.jar:6.2.1]\n\tat com.vaadin.flow.spring.SpringInstantiator.getOrCreate(SpringInstantiator.java:155) ~[vaadin-spring-24.7.0.alpha5.jar:na]\n\tat com.vaadin.flow.di.Instantiator.createRouteTarget(Instantiator.java:170) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.router.internal.AbstractNavigationStateRenderer.lambda$getRouteTarget$1(AbstractNavigationStateRenderer.java:146) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat java.base/java.util.Optional.orElseGet(Optional.java:364) ~[na:na]\n\tat com.vaadin.flow.router.internal.AbstractNavigationStateRenderer.getRouteTarget(AbstractNavigationStateRenderer.java:145) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.router.internal.AbstractNavigationStateRenderer.sendBeforeEnterEventAndPopulateChain(AbstractNavigationStateRenderer.java:639) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.router.internal.AbstractNavigationStateRenderer.createChainIfEmptyAndExecuteBeforeEnterNavigation(AbstractNavigationStateRenderer.java:620) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.router.internal.AbstractNavigationStateRenderer.handleBeforeNavigationEvents(AbstractNavigationStateRenderer.java:326) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.router.internal.AbstractNavigationStateRenderer.handle(AbstractNavigationStateRenderer.java:206) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.router.Router.handleNavigation(Router.java:266) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.router.Router.navigate(Router.java:234) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.component.internal.UIInternals.refreshCurrentRoute(UIInternals.java:1133) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.component.UI.refreshCurrentRoute(UI.java:1259) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.hotswap.Hotswapper.lambda$triggerClientUpdate$295d7b78$1(Hotswapper.java:476) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.component.UI.accessSynchronously(UI.java:498) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.component.UI$2.execute(UI.java:573) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572) ~[na:na]\n\tat java.base/java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:317) ~[na:na]\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java) ~[na:na]\n\tat com.vaadin.flow.server.VaadinService.runPendingAccessTasks(VaadinService.java:2173) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.server.VaadinSession.unlock(VaadinSession.java:755) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.server.VaadinService.ensureAccessQueuePurged(VaadinService.java:2137) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.server.VaadinService.accessSession(VaadinService.java:2104) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.server.VaadinSession.access(VaadinSession.java:1059) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.component.UI.access(UI.java:570) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.component.UI.access(UI.java:553) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.hotswap.Hotswapper.lambda$triggerClientUpdate$9(Hotswapper.java:476) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596) ~[na:na]\n\tat com.vaadin.flow.hotswap.Hotswapper.triggerClientUpdate(Hotswapper.java:476) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.hotswap.Hotswapper.onHotswapInternal(Hotswapper.java:266) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat com.vaadin.flow.hotswap.Hotswapper.onHotswap(Hotswapper.java:145) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[na:na]\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[na:na]\n\tat org.hotswap.agent.command.ReflectionCommand.doExecuteReflectionCommand(ReflectionCommand.java:207) ~[hotswap-agent.jar:2.0.1]\n\tat org.hotswap.agent.command.ReflectionCommand.executeCommand(ReflectionCommand.java:168) ~[hotswap-agent.jar:2.0.1]\n\tat org.hotswap.agent.command.impl.CommandExecutor.run(CommandExecutor.java:43) ~[hotswap-agent.jar:2.0.1]\nCaused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [no.ka.studd.views.MainLayout]: Constructor threw exception\n\tat org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:222) ~[spring-beans-6.2.1.jar:6.2.1]\n\tat org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:145) ~[spring-beans-6.2.1.jar:6.2.1]\n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:318) ~[spring-beans-6.2.1.jar:6.2.1]\n\t... 42 common frames omitted\nCaused by: java.lang.IllegalStateException: No request is available. This method can only be used with an active VaadinServletRequest\n\tat com.vaadin.flow.server.auth.AccessAnnotationChecker.hasAccess(AccessAnnotationChecker.java:92) ~[flow-server-24.7.0.alpha5.jar:24.7.0.alpha5]\n\tat no.ka.studd.views.MainLayout.createNavigation(MainLayout.kt:105) ~[classes/:na]\n\tat no.ka.studd.views.MainLayout.addDrawerContent(MainLayout.kt:173) ~[classes/:na]\n\tat no.ka.studd.views.MainLayout.<init>(MainLayout.kt:99) ~[classes/:na]\n\tat java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62) ~[na:na]\n\tat java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:502) ~[na:na]\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:486) ~[na:na]\n\tat kotlin.reflect.jvm.internal.calls.CallerImpl$Constructor.call(CallerImpl.kt:41) ~[kotlin-reflect-2.0.21.jar:2.0.21-release-482]\n\tat kotlin.reflect.jvm.internal.KCallableImpl.callDefaultMethod$kotlin_reflection(KCallableImpl.kt:207) ~[kotlin-reflect-2.0.21.jar:2.0.21-release-482]\n\tat kotlin.reflect.jvm.internal.KCallableImpl.callBy(KCallableImpl.kt:112) ~[kotlin-reflect-2.0.21.jar:2.0.21-release-482]\n\tat org.springframework.beans.BeanUtils$KotlinDelegate.instantiateClass(BeanUtils.java:940) ~[spring-beans-6.2.1.jar:6.2.1]\n\tat org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:190) ~[spring-beans-6.2.1.jar:6.2.1]\n\t... 44 common frames omitted\n\n\n### Expected behavior\n\nWorks with HotswapAgent 1.4.2 and page refresh, not HotswapAgent 2.0.1.\n\n**Should be an option to select a full page refresh in Copilot at runtime and a application.properties flag**\n\n### Minimal reproducible example\n\nNot sure why it fail, but Vaadin may understand looking at the stack trace\n\n### Versions\n\nHilla: 24.7.0.alpha6\nFlow: 24.7.0.alpha5\nVaadin: 24.7.0.alpha4\nCopilot: 24.7.0.alpha4\nFrontend Hotswap: Disabled, using pre-built bundle\nOS: amd64 Windows 11 10.0\nJava: JetBrains s.r.o. 21.0.5\nBrowser: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\nJava Hotswap: Java Hotswap is enabled\nIDE Plugin: 1.4.5 IntelliJ",
    "issue_word_count": 1306,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java",
      "flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java"
    ],
    "base_commit": "3fe8592c5f5b70dac7120814c12616c2e600b3af",
    "head_commit": "c09fa731a99325030b2f6153c98bfb50f2de102b",
    "repo_url": "https://github.com/vaadin/flow/pull/20848",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20848",
    "dockerfile": "",
    "pr_merged_at": "2025-01-20T08:42:04.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java b/flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java\nindex cc40fb440ca..c6de55b8b17 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java\n@@ -472,9 +472,11 @@ private void triggerClientUpdate(\n             LOGGER.debug(\n                     \"Triggering re-navigation to current route for UIs affected by classes changes.\");\n             for (UIRefreshStrategy action : uisToRefresh.keySet()) {\n-                uisToRefresh.get(action)\n-                        .forEach(ui -> ui.access(() -> ui.refreshCurrentRoute(\n-                                action == UIRefreshStrategy.PUSH_REFRESH_CHAIN)));\n+                String triggerEventJS = String.format(\n+                        \"window.dispatchEvent(new CustomEvent(\\\"vaadin-refresh-ui\\\", { detail: { fullRefresh: %s }}));\",\n+                        action == UIRefreshStrategy.PUSH_REFRESH_CHAIN);\n+                uisToRefresh.get(action).forEach(ui -> ui\n+                        .access(() -> ui.getPage().executeJs(triggerEventJS)));\n             }\n         }\n     }\n@@ -507,7 +509,19 @@ public void serviceDestroy(ServiceDestroyEvent event) {\n \n     @Override\n     public void uiInit(UIInitEvent event) {\n-        sessions.add(event.getUI().getSession());\n+        UI ui = event.getUI();\n+        sessions.add(ui.getSession());\n+        ui.getPage().executeJs(\n+                \"\"\"\n+                        const $wnd = window;\n+                        window.addEventListener('vaadin-ui-refresh', (ev) => {\n+                            const senderFn = $wnd.Vaadin?.Flow?.clients[$0]?.sendEventMessage;\n+                            if (senderFn) {\n+                                senderFn(1, \"ui-refresh\", ev.detail);\n+                            }\n+                        });\n+                        \"\"\",\n+                ui.getInternals().getAppId());\n     }\n \n     /**\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java b/flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java\nindex 70181a1de2e..ab1bc7f6297 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java\n@@ -24,6 +24,8 @@\n import java.util.UUID;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n import org.junit.Assert;\n import org.junit.Before;\n@@ -35,6 +37,7 @@\n import com.vaadin.flow.component.HasComponents;\n import com.vaadin.flow.component.HasElement;\n import com.vaadin.flow.component.Tag;\n+import com.vaadin.flow.component.page.Page;\n import com.vaadin.flow.di.Lookup;\n import com.vaadin.flow.internal.BrowserLiveReload;\n import com.vaadin.flow.internal.BrowserLiveReloadAccessor;\n@@ -1153,20 +1156,30 @@ private RefreshTestingUI initUIAndNavigateTo(VaadinSession session,\n \n     private static class RefreshTestingUI extends MockUI {\n \n+        private static final Pattern UI_REFRESH_EVENT = Pattern.compile(\n+                \".*new CustomEvent\\\\(\\\"vaadin-refresh-ui\\\",\\\\s*\\\\{\\\\s*detail:\\\\s*\\\\{\\\\s*fullRefresh:\\\\s*(true|false)\\\\s*}\\\\s*}\\\\).*\");\n         private Boolean refreshRouteChainRequested;\n \n+        private final Page pageSpy;\n+\n         public RefreshTestingUI(VaadinSession session) {\n             super(session);\n+            pageSpy = Mockito.spy(super.getPage());\n+            // Intercept javascript executions to check if the custom ui refresh\n+            // event dispatch has been registered.\n+            Mockito.doAnswer(i -> {\n+                Matcher matcher = UI_REFRESH_EVENT.matcher(i.getArgument(0));\n+                if (matcher.matches()) {\n+                    refreshRouteChainRequested = Boolean\n+                            .parseBoolean(matcher.group(1));\n+                }\n+                return null;\n+            }).when(pageSpy).executeJs(Mockito.anyString());\n         }\n \n         @Override\n-        public void refreshCurrentRoute(boolean refreshRouteChain) {\n-            refreshRouteChainRequested = refreshRouteChain;\n-            // No need to perform real navigation, tests only need to know if\n-            // the method has been invoked.\n-            // Navigation would fail anyway because of usage of method scoped\n-            // classes. Blocking navigation prevents logs to be bloated by\n-            // exception stack traces.\n+        public Page getPage() {\n+            return pageSpy;\n         }\n \n         void assertNotRefreshed() {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20847",
    "pr_id": 20847,
    "issue_id": 20589,
    "repo": "vaadin/flow",
    "problem_statement": "Error message from duplicate routes could be more helpful\nIt's easy to end up with multiple routes with the same path by mistake, especially when playing around with the platform and copypasting examples from docs, so this is a fairly common scenario. The problem is that the resulting stack trace does not make it easy to understand what the problem is.\n\nCould the framework print a clear and unambiguous error in the output when this is encountered, instead of relying on a cryptic stacktrace?",
    "issue_word_count": 85,
    "test_files_count": 4,
    "non_test_files_count": 5,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/router/internal/RouteSegment.java",
      "flow-server/src/main/java/com/vaadin/flow/router/internal/RouteUtil.java",
      "flow-server/src/main/java/com/vaadin/flow/server/DefaultErrorHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/startup/VaadinServletContextStartupInitializer.java",
      "flow-server/src/test/java/com/vaadin/flow/router/internal/AbstractRouteRegistryTest.java",
      "flow-server/src/test/java/com/vaadin/flow/router/internal/ConfigureRoutesTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/SessionRouteRegistryTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/startup/RouteRegistryInitializerTest.java",
      "vaadin-spring/src/main/java/com/vaadin/flow/spring/VaadinServletContextInitializer.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/router/internal/AbstractRouteRegistryTest.java",
      "flow-server/src/test/java/com/vaadin/flow/router/internal/ConfigureRoutesTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/SessionRouteRegistryTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/startup/RouteRegistryInitializerTest.java"
    ],
    "base_commit": "f0dbe87df09f212976d77c98cd451518d04f3cad",
    "head_commit": "51a0e3207ef2690213fb3205bee7c246c62451fa",
    "repo_url": "https://github.com/vaadin/flow/pull/20847",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20847",
    "dockerfile": "",
    "pr_merged_at": "2025-01-16T06:32:01.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/router/internal/RouteSegment.java b/flow-server/src/main/java/com/vaadin/flow/router/internal/RouteSegment.java\nindex 547fbcedf0b..ed38d3039d5 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/router/internal/RouteSegment.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/router/internal/RouteSegment.java\n@@ -791,9 +791,9 @@ private RuntimeException ambigousTarget(Class<? extends Component> target) {\n \n         String messageFormat;\n         if (isParameter()) {\n-            messageFormat = \"Navigation targets must have unique routes, found navigation targets '%s' and '%s' with parameter have the same route.\";\n+            messageFormat = RouteUtil.ROUTE_CONFLICT_WITH_PARAMS;\n         } else {\n-            messageFormat = \"Navigation targets must have unique routes, found navigation targets '%s' and '%s' with the same route.\";\n+            messageFormat = RouteUtil.ROUTE_CONFLICT;\n         }\n \n         String message = String.format(messageFormat,\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/router/internal/RouteUtil.java b/flow-server/src/main/java/com/vaadin/flow/router/internal/RouteUtil.java\nindex f9c25539a8c..cae7e4c164a 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/router/internal/RouteUtil.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/router/internal/RouteUtil.java\n@@ -70,6 +70,12 @@\n  */\n public class RouteUtil {\n \n+    private static final String ROUTE_CONFLICT_PREFIX = \"Navigation target paths (considering @Route, @RouteAlias and @RoutePrefix values) must be unique, found navigation targets '%s' and '%s' \";\n+    public static final String ROUTE_CONFLICT = ROUTE_CONFLICT_PREFIX\n+            + \"having the same route.\";\n+    public static final String ROUTE_CONFLICT_WITH_PARAMS = ROUTE_CONFLICT_PREFIX\n+            + \"with parameter having the same route.\";\n+\n     protected RouteUtil() {\n     }\n \n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/DefaultErrorHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/DefaultErrorHandler.java\nindex 696add50c2d..fa3cca3b72c 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/DefaultErrorHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/DefaultErrorHandler.java\n@@ -19,33 +19,15 @@\n import java.io.EOFException;\n import java.net.SocketException;\n import java.net.SocketTimeoutException;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Optional;\n+import java.util.HashSet;\n import java.util.Set;\n-import java.util.stream.Collectors;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.slf4j.Marker;\n import org.slf4j.MarkerFactory;\n \n-import com.vaadin.experimental.FeatureFlags;\n-import com.vaadin.flow.component.Component;\n-import com.vaadin.flow.component.HasElement;\n-import com.vaadin.flow.component.UI;\n-import com.vaadin.flow.di.Instantiator;\n-import com.vaadin.flow.router.BeforeEnterEvent;\n-import com.vaadin.flow.router.ErrorParameter;\n-import com.vaadin.flow.router.HasErrorParameter;\n import com.vaadin.flow.router.InvalidLocationException;\n-import com.vaadin.flow.router.NavigationEvent;\n-import com.vaadin.flow.router.NavigationTrigger;\n-import com.vaadin.flow.router.RouteConfiguration;\n-import com.vaadin.flow.router.RouterLayout;\n-import com.vaadin.flow.router.internal.ErrorTargetEntry;\n-import com.vaadin.flow.router.internal.RouteUtil;\n-import com.vaadin.flow.server.startup.ApplicationRouteRegistry;\n \n /**\n  * The default implementation of {@link ErrorHandler}.\n@@ -74,9 +56,18 @@\n public class DefaultErrorHandler implements ErrorHandler {\n \n     private final Set<String> ignoredExceptions;\n+    private final Set<String> routeConfigurationExceptions;\n \n     protected DefaultErrorHandler(Set<String> ignoredExceptions) {\n         this.ignoredExceptions = Set.copyOf(ignoredExceptions);\n+        this.routeConfigurationExceptions = new HashSet<>();\n+    }\n+\n+    protected DefaultErrorHandler(Set<String> ignoredExceptions,\n+            Set<String> routeConfigurationExceptions) {\n+        this.ignoredExceptions = Set.copyOf(ignoredExceptions);\n+        this.routeConfigurationExceptions = Set\n+                .copyOf(routeConfigurationExceptions);\n     }\n \n     public DefaultErrorHandler() {\n@@ -85,6 +76,10 @@ public DefaultErrorHandler() {\n                 EOFException.class.getName(),\n                 \"org.eclipse.jetty.io.EofException\",\n                 \"org.apache.catalina.connector.ClientAbortException\");\n+        this.routeConfigurationExceptions = Set.of(\n+                AmbiguousRouteConfigurationException.class.getName(),\n+                InvalidRouteConfigurationException.class.getName(),\n+                InvalidRouteLayoutConfigurationException.class.getName());\n     }\n \n     @Override\n@@ -101,8 +96,14 @@ public void error(ErrorEvent event) {\n                     getLogger().warn(marker, \"\", throwable);\n                 }\n             } else {\n-                // print the error on console\n-                getLogger().error(\"\", throwable);\n+                if (routeConfigurationExceptions\n+                        .contains(throwable.getClass().getName())) {\n+                    getLogger().error(\"Route configuration error found:\");\n+                    getLogger().error(throwable.getMessage());\n+                } else {\n+                    // print the error on console\n+                    getLogger().error(\"\", throwable);\n+                }\n             }\n         }\n     }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/startup/VaadinServletContextStartupInitializer.java b/flow-server/src/main/java/com/vaadin/flow/server/startup/VaadinServletContextStartupInitializer.java\nindex 3d0406d0fdd..07944567ff3 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/startup/VaadinServletContextStartupInitializer.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/startup/VaadinServletContextStartupInitializer.java\n@@ -15,12 +15,17 @@\n  */\n package com.vaadin.flow.server.startup;\n \n+import com.vaadin.flow.server.InvalidRouteConfigurationException;\n+import com.vaadin.flow.server.InvalidRouteLayoutConfigurationException;\n import com.vaadin.flow.server.VaadinServletContext;\n \n import jakarta.servlet.ServletContext;\n import jakarta.servlet.ServletException;\n import java.util.Set;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n /**\n  * Allows a library/runtime to be notified of a web application's startup phase\n  * and perform any required programmatic registration of servlets, filters, and\n@@ -41,8 +46,17 @@ default void process(Set<Class<?>> classSet, ServletContext context)\n         try {\n             initialize(classSet, new VaadinServletContext(context));\n         } catch (VaadinInitializerException e) {\n+            if (e.getCause() instanceof InvalidRouteConfigurationException || e\n+                    .getCause() instanceof InvalidRouteLayoutConfigurationException) {\n+                getLogger().error(\"Route configuration error found:\");\n+                getLogger().error(e.getCause().getMessage());\n+            }\n             throw new ServletException(e);\n         }\n     }\n \n+    private static Logger getLogger() {\n+        return LoggerFactory\n+                .getLogger(VaadinServletContextStartupInitializer.class);\n+    }\n }\n\ndiff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/VaadinServletContextInitializer.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/VaadinServletContextInitializer.java\nindex 70b20c0b338..7dd7a460b7c 100644\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/VaadinServletContextInitializer.java\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/VaadinServletContextInitializer.java\n@@ -393,6 +393,8 @@ public void failFastContextInitialized(ServletContextEvent event) {\n \n                 } catch (InvalidRouteConfigurationException\n                         | InvalidRouteLayoutConfigurationException e) {\n+                    getLogger().error(\"Route configuration error found:\");\n+                    getLogger().error(e.getMessage());\n                     throw new IllegalStateException(e);\n                 }\n             } else {\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/router/internal/AbstractRouteRegistryTest.java b/flow-server/src/test/java/com/vaadin/flow/router/internal/AbstractRouteRegistryTest.java\nindex 1ca76cfa047..73497aa030b 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/router/internal/AbstractRouteRegistryTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/router/internal/AbstractRouteRegistryTest.java\n@@ -6,27 +6,27 @@\n import java.util.List;\n import java.util.concurrent.CountDownLatch;\n \n-import com.vaadin.flow.router.BeforeEvent;\n-import com.vaadin.flow.router.HasUrlParameter;\n-import com.vaadin.flow.router.NotFoundException;\n-import com.vaadin.flow.router.OptionalParameter;\n-import com.vaadin.flow.router.RouteParameterRegex;\n-import com.vaadin.flow.router.WildcardParameter;\n-import com.vaadin.flow.server.InvalidRouteConfigurationException;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n \n import com.vaadin.flow.component.Component;\n import com.vaadin.flow.component.Tag;\n+import com.vaadin.flow.router.BeforeEvent;\n+import com.vaadin.flow.router.HasUrlParameter;\n+import com.vaadin.flow.router.Layout;\n+import com.vaadin.flow.router.NotFoundException;\n+import com.vaadin.flow.router.OptionalParameter;\n import com.vaadin.flow.router.Route;\n import com.vaadin.flow.router.RouteBaseData;\n+import com.vaadin.flow.router.RouteParameterRegex;\n import com.vaadin.flow.router.RouterLayout;\n import com.vaadin.flow.router.RoutesChangedEvent;\n-import com.vaadin.flow.router.Layout;\n+import com.vaadin.flow.router.WildcardParameter;\n+import com.vaadin.flow.server.InvalidRouteConfigurationException;\n import com.vaadin.flow.shared.Registration;\n-import org.junit.rules.ExpectedException;\n \n public class AbstractRouteRegistryTest {\n \n@@ -620,8 +620,7 @@ private void assertHasUrlAndWildcard() {\n     public void multiple_normal_routes_throw_exception()\n             throws InvalidRouteConfigurationException {\n         expectedEx.expect(InvalidRouteConfigurationException.class);\n-        expectedEx.expectMessage(String.format(\n-                \"Navigation targets must have unique routes, found navigation targets '%s' and '%s' with the same route.\",\n+        expectedEx.expectMessage(String.format(RouteUtil.ROUTE_CONFLICT,\n                 NormalRoute.class.getName(),\n                 SecondNormalRoute.class.getName()));\n \n@@ -648,10 +647,10 @@ public void normal_and_optional_throws_exception()\n     public void two_optionals_throw_exception()\n             throws InvalidRouteConfigurationException {\n         expectedEx.expect(InvalidRouteConfigurationException.class);\n-        expectedEx.expectMessage(String.format(\n-                \"Navigation targets must have unique routes, found navigation targets '%s' and '%s' with parameter have the same route.\",\n-                OptionalRoute.class.getName(),\n-                SecondOptionalRoute.class.getName()));\n+        expectedEx.expectMessage(\n+                String.format(RouteUtil.ROUTE_CONFLICT_WITH_PARAMS,\n+                        OptionalRoute.class.getName(),\n+                        SecondOptionalRoute.class.getName()));\n \n         addTarget(OptionalRoute.class);\n         addTarget(SecondOptionalRoute.class);\n@@ -675,10 +674,10 @@ public void optional_and_normal_throws_exception()\n     public void two_has_route_parameters_throw_exception()\n             throws InvalidRouteConfigurationException {\n         expectedEx.expect(InvalidRouteConfigurationException.class);\n-        expectedEx.expectMessage(String.format(\n-                \"Navigation targets must have unique routes, found navigation targets '%s' and '%s' with parameter have the same route.\",\n-                HasUrlRoute.class.getName(),\n-                SecondHasUrlRoute.class.getName()));\n+        expectedEx.expectMessage(\n+                String.format(RouteUtil.ROUTE_CONFLICT_WITH_PARAMS,\n+                        HasUrlRoute.class.getName(),\n+                        SecondHasUrlRoute.class.getName()));\n \n         addTarget(HasUrlRoute.class);\n         addTarget(SecondHasUrlRoute.class);\n@@ -689,10 +688,10 @@ public void two_has_route_parameters_throw_exception()\n     public void two_wildcard_parameters_throw_exception()\n             throws InvalidRouteConfigurationException {\n         expectedEx.expect(InvalidRouteConfigurationException.class);\n-        expectedEx.expectMessage(String.format(\n-                \"Navigation targets must have unique routes, found navigation targets '%s' and '%s' with parameter have the same route.\",\n-                WildcardRoute.class.getName(),\n-                SecondWildcardRoute.class.getName()));\n+        expectedEx.expectMessage(\n+                String.format(RouteUtil.ROUTE_CONFLICT_WITH_PARAMS,\n+                        WildcardRoute.class.getName(),\n+                        SecondWildcardRoute.class.getName()));\n \n         addTarget(WildcardRoute.class);\n         addTarget(SecondWildcardRoute.class);\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/router/internal/ConfigureRoutesTest.java b/flow-server/src/test/java/com/vaadin/flow/router/internal/ConfigureRoutesTest.java\nindex 757812fe934..a6561c56358 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/router/internal/ConfigureRoutesTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/router/internal/ConfigureRoutesTest.java\n@@ -1,5 +1,10 @@\n package com.vaadin.flow.router.internal;\n \n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n import com.vaadin.flow.component.Component;\n import com.vaadin.flow.component.Tag;\n import com.vaadin.flow.router.BeforeEnterEvent;\n@@ -8,10 +13,6 @@\n import com.vaadin.flow.router.HasErrorParameter;\n import com.vaadin.flow.router.HasUrlParameter;\n import com.vaadin.flow.server.AmbiguousRouteConfigurationException;\n-import org.junit.Assert;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.ExpectedException;\n \n public class ConfigureRoutesTest {\n \n@@ -109,8 +110,9 @@ public void duplicateRootPathRegistration_throwsException() {\n         exceptionRule.expect(AmbiguousRouteConfigurationException.class);\n         exceptionRule.reportMissingExceptionWithMessage(\n                 \"Duplicate routes shouldn't be accepted.\");\n-        exceptionRule.expectMessage(\n-                \"Navigation targets must have unique routes, found navigation targets 'com.vaadin.flow.router.internal.ConfigureRoutesTest$BaseTarget' and 'com.vaadin.flow.router.internal.ConfigureRoutesTest$BaseTarget' with the same route.\");\n+        exceptionRule.expectMessage(String.format(RouteUtil.ROUTE_CONFLICT,\n+                \"com.vaadin.flow.router.internal.ConfigureRoutesTest$BaseTarget\",\n+                \"com.vaadin.flow.router.internal.ConfigureRoutesTest$BaseTarget\"));\n         mutable.setRoute(\"\", BaseTarget.class);\n     }\n \n@@ -126,8 +128,10 @@ public void duplicateParameterPathRegistration_throwsException() {\n         exceptionRule.expect(AmbiguousRouteConfigurationException.class);\n         exceptionRule.reportMissingExceptionWithMessage(\n                 \"Duplicate parameter routes shouldn't be accepted.\");\n-        exceptionRule.expectMessage(\n-                \"Navigation targets must have unique routes, found navigation targets 'com.vaadin.flow.router.internal.ConfigureRoutesTest$ParamTarget' and 'com.vaadin.flow.router.internal.ConfigureRoutesTest$ParamTarget' with parameter have the same route.\");\n+        exceptionRule.expectMessage(String.format(\n+                RouteUtil.ROUTE_CONFLICT_WITH_PARAMS,\n+                \"com.vaadin.flow.router.internal.ConfigureRoutesTest$ParamTarget\",\n+                \"com.vaadin.flow.router.internal.ConfigureRoutesTest$ParamTarget\"));\n         mutable.setRoute(\":param\", ParamTarget.class);\n     }\n \n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/SessionRouteRegistryTest.java b/flow-server/src/test/java/com/vaadin/flow/server/SessionRouteRegistryTest.java\nindex 9a6066a1c5e..84be5785a89 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/SessionRouteRegistryTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/SessionRouteRegistryTest.java\n@@ -49,6 +49,7 @@\n import com.vaadin.flow.router.RouterLayout;\n import com.vaadin.flow.router.RoutesChangedEvent;\n import com.vaadin.flow.router.internal.HasUrlParameterFormat;\n+import com.vaadin.flow.router.internal.RouteUtil;\n import com.vaadin.flow.server.startup.ApplicationConfiguration;\n import com.vaadin.flow.server.startup.ApplicationRouteRegistry;\n import com.vaadin.flow.shared.Registration;\n@@ -488,8 +489,7 @@ public void setSameRouteValueFromDifferentThreads_ConcurrencyTest()\n         Assert.assertEquals(\n                 \"Expected 4 route already exists exceptions due to route target validation\",\n                 THREADS - 1, exceptions.size());\n-        String expected = String.format(\n-                \"Navigation targets must have unique routes, found navigation targets '%s' and '%s' with the same route.\",\n+        String expected = String.format(RouteUtil.ROUTE_CONFLICT,\n                 MyRoute.class.getName(), MyRoute.class.getName());\n         for (String exception : exceptions) {\n             Assert.assertEquals(expected, exception);\n@@ -540,8 +540,7 @@ public void useRouteResolutionFromDifferentThreads_ConcurrencyTest()\n         Assert.assertEquals(\n                 \"Expected 4 route already exists exceptions due to route target validation\",\n                 THREADS - 1, exceptions.size());\n-        String expected = String.format(\n-                \"Navigation targets must have unique routes, found navigation targets '%s' and '%s' with the same route.\",\n+        String expected = String.format(RouteUtil.ROUTE_CONFLICT,\n                 MyRoute.class.getName(), MyRoute.class.getName());\n         for (String exception : exceptions) {\n             Assert.assertEquals(expected, exception);\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/startup/RouteRegistryInitializerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/startup/RouteRegistryInitializerTest.java\nindex 73f4ede858a..29766a4715e 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/startup/RouteRegistryInitializerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/startup/RouteRegistryInitializerTest.java\n@@ -69,6 +69,7 @@\n import com.vaadin.flow.router.internal.ErrorTargetEntry;\n import com.vaadin.flow.router.internal.HasUrlParameterFormat;\n import com.vaadin.flow.router.internal.PathUtil;\n+import com.vaadin.flow.router.internal.RouteUtil;\n import com.vaadin.flow.server.InvalidRouteConfigurationException;\n import com.vaadin.flow.server.InvalidRouteLayoutConfigurationException;\n import com.vaadin.flow.server.MockVaadinContext;\n@@ -169,10 +170,9 @@ public void process_duplicate_routesViaAlias_throws()\n     @Test\n     public void routeRegistry_fails_for_multiple_registration_of_same_route() {\n         expectedEx.expect(InvalidRouteConfigurationException.class);\n-        expectedEx.expectMessage(\n-                \"Navigation targets must have unique routes, found navigation targets \"\n-                        + \"'com.vaadin.flow.server.startup.RouteRegistryInitializerTest$NavigationTargetFoo' and \"\n-                        + \"'com.vaadin.flow.server.startup.RouteRegistryInitializerTest$NavigationTargetFoo2' with the same route.\");\n+        expectedEx.expectMessage(String.format(RouteUtil.ROUTE_CONFLICT,\n+                \"com.vaadin.flow.server.startup.RouteRegistryInitializerTest$NavigationTargetFoo\",\n+                \"com.vaadin.flow.server.startup.RouteRegistryInitializerTest$NavigationTargetFoo2\"));\n \n         RouteConfiguration.forRegistry(registry)\n                 .setAnnotatedRoute(NavigationTargetFoo.class);\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20846",
    "pr_id": 20846,
    "issue_id": 19580,
    "repo": "vaadin/flow",
    "problem_statement": "Strange behavior with History -> replaceState(state,location) when react is enabled\n### Description of the bug\n\nSince update to Vaadin 24.4.1 there is a strange behavoir when using replaceState() in History class. If I use the method to update the displayed URL (eg. history.replaceState(null,\"http://localhost:8080/?test=test\") , it results in opening the invalid url http://localhost:8080/http://localhost:8080/?test=test. If I set react.enabled=false, then it works as expected.\n\n### Expected behavior\n\nBrowser shows expected URL after history.replaceState call.\n\n### Minimal reproducible example\n\nUse any Vaadin 24.4.1 project (eg. skeleton-starter-flow-spring.24). \r\n\r\nCall method for updating url parameter, eg:\r\n\r\n ```\r\n       Button button = new Button(\"Test - Add URL Parameter\", e -> {\r\n            updateUrlRequestParameter(\"test\",textField.getValue());\r\n        });\r\n```\r\n\r\nwith:\r\n\r\n```\r\npublic static void updateUrlRequestParameter(String key, String value) {\r\n        Page page = UI.getCurrent().getPage();\r\n        page.fetchCurrentURL(url -> {\r\n            try {\r\n                UriComponentsBuilder builder = UriComponentsBuilder.fromUri(url.toURI());\r\n                UriComponents components = builder.build();\r\n                MultiValueMap<String, String> parameters = components.getQueryParams();\r\n                MultiValueMap<String, String> newParams = new LinkedMultiValueMap<>();\r\n                newParams.putAll(parameters);\r\n                if(newParams.get(key) != null) {\r\n                    newParams.remove(key);\r\n                }\r\n                if(value != null) {\r\n                    newParams.put(key, List.of(value));\r\n                }\r\n                String newUrl = builder.replaceQueryParams(newParams).build().toUriString();\r\n                page.getHistory().replaceState(null, newUrl);\r\n            } catch(Exception exception) {\r\n                //handle exception\r\n            }\r\n        });\r\n    }\r\n```\r\n\n\n### Versions\n\n- Vaadin / Flow version: 24.4.1\r\n- Java version: 17\r\n- OS version: Windows 11\r\n\r\n",
    "issue_word_count": 215,
    "test_files_count": 2,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "flow-server/src/main/resources/com/vaadin/flow/server/frontend/Flow.tsx",
      "flow-tests/test-react-router/src/main/java/com/vaadin/flow/AddQueryParamView.java",
      "flow-tests/test-react-router/src/test/java/com/vaadin/flow/AddQueryParamIT.java"
    ],
    "pr_changed_test_files": [
      "flow-tests/test-react-router/src/main/java/com/vaadin/flow/AddQueryParamView.java",
      "flow-tests/test-react-router/src/test/java/com/vaadin/flow/AddQueryParamIT.java"
    ],
    "base_commit": "eff913f115438a496ca38547886b88f9e51b3897",
    "head_commit": "1c2d6edeaebce7c75612b7f2028fc7fa3ab29504",
    "repo_url": "https://github.com/vaadin/flow/pull/20846",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20846",
    "dockerfile": "",
    "pr_merged_at": "2025-01-17T10:29:16.000Z",
    "patch": "diff --git a/flow-server/src/main/resources/com/vaadin/flow/server/frontend/Flow.tsx b/flow-server/src/main/resources/com/vaadin/flow/server/frontend/Flow.tsx\nindex df2fa59b7c8..6f075ee93b7 100644\n--- a/flow-server/src/main/resources/com/vaadin/flow/server/frontend/Flow.tsx\n+++ b/flow-server/src/main/resources/com/vaadin/flow/server/frontend/Flow.tsx\n@@ -382,7 +382,11 @@ function Flow() {\n         (event: CustomEvent<{ state: unknown; url: string; replace?: boolean; callback: boolean }>) => {\n             // @ts-ignore\n             window.Vaadin.Flow.navigation = true;\n-            const path = '/' + event.detail.url;\n+            // clean base uri away if for instance redirected to http://localhost/path/user?id=10\n+            // else the whole http... will be appended to the url see #19580\n+            const path = event.detail.url.startsWith(document.baseURI)\n+                ? '/' + event.detail.url.slice(document.baseURI.length)\n+                : '/' + event.detail.url;\n             fromAnchor.current = false;\n             queuedNavigate(path, event.detail.callback, { state: event.detail.state, replace: event.detail.replace });\n         },\n",
    "test_patch": "diff --git a/flow-tests/test-react-router/src/main/java/com/vaadin/flow/AddQueryParamView.java b/flow-tests/test-react-router/src/main/java/com/vaadin/flow/AddQueryParamView.java\nnew file mode 100644\nindex 00000000000..de35da3f5f4\n--- /dev/null\n+++ b/flow-tests/test-react-router/src/main/java/com/vaadin/flow/AddQueryParamView.java\n@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2000-2024 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow;\n+\n+import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.component.html.NativeButton;\n+import com.vaadin.flow.component.page.Page;\n+import com.vaadin.flow.router.BeforeEnterEvent;\n+import com.vaadin.flow.router.BeforeEnterObserver;\n+import com.vaadin.flow.router.Route;\n+\n+@Route(\"com.vaadin.flow.AddQueryParamView\")\n+public class AddQueryParamView extends Div {\n+\n+    public static final String PARAM_BUTTON_ID = \"setParameter\";\n+    public static final String QUERY_ID = \"query\";\n+\n+    public AddQueryParamView() {\n+        NativeButton button = new NativeButton(\"Add URL Parameter\", e -> {\n+            updateUrlRequestParameter(\"test\", \"HELLO!\");\n+        });\n+        button.setId(PARAM_BUTTON_ID);\n+        add(button);\n+    }\n+\n+    public void updateUrlRequestParameter(String key, String value) {\n+        Page page = UI.getCurrent().getPage();\n+        page.fetchCurrentURL(url -> {\n+            String newLocation = url + \"?\" + key + \"=\" + value;\n+            page.getHistory().replaceState(null, newLocation);\n+            Div div = new Div(newLocation);\n+            div.setId(QUERY_ID);\n+            add(div);\n+        });\n+    }\n+}\n\ndiff --git a/flow-tests/test-react-router/src/test/java/com/vaadin/flow/AddQueryParamIT.java b/flow-tests/test-react-router/src/test/java/com/vaadin/flow/AddQueryParamIT.java\nnew file mode 100644\nindex 00000000000..97957413dc7\n--- /dev/null\n+++ b/flow-tests/test-react-router/src/test/java/com/vaadin/flow/AddQueryParamIT.java\n@@ -0,0 +1,30 @@\n+package com.vaadin.flow;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+\n+import com.vaadin.flow.component.html.testbench.DivElement;\n+import com.vaadin.flow.component.html.testbench.NativeButtonElement;\n+import com.vaadin.flow.component.html.testbench.SpanElement;\n+import com.vaadin.flow.testutil.ChromeBrowserTest;\n+\n+public class AddQueryParamIT extends ChromeBrowserTest {\n+\n+    @Test\n+    public void validateReactInUse() {\n+        open();\n+\n+        waitForDevServer();\n+\n+        $(NativeButtonElement.class).id(AddQueryParamView.PARAM_BUTTON_ID)\n+                .click();\n+\n+        waitForElementPresent(By.id(AddQueryParamView.QUERY_ID));\n+\n+        Assert.assertEquals(\n+                $(DivElement.class).id(AddQueryParamView.QUERY_ID).getText(),\n+                driver.getCurrentUrl());\n+    }\n+\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20821",
    "pr_id": 20821,
    "issue_id": 20661,
    "repo": "vaadin/flow",
    "problem_statement": "NodeInstaller skips node download when an empty bundle is present\nWhen Flow detects that node needs to be installed locally, it will download it in `$HOME/.vaadin` folder.\r\nIf the expected file is already there, `NodeInstaller` will skip the download.\r\nHowever, if a previous download failed, an empty file could be present. This leads to the download being skipped, but then the node executable could not be extracted and used.\r\n\r\n```\r\n[INFO] The globally installed Node.js version 18.7.0 is older than the required minimum version 18.12.0. Using Node.js from /root/.vaadin.\r\n[10:21:38 ] [INFO] Updating current installed node version from 22.11.0 to 22.12.0\r\n[10:21:38 ] [INFO] Node 22.11.0 was installed, but we need version v22.12.0\r\n[10:21:38 ] [INFO] Installing node version v22.12.0\r\n[10:21:38 ] [INFO] Unpacking /root/.vaadin/node-v22.12.0-linux-x64.tar.gz (0 bytes) into /root/.vaadin/node/tmp\r\n```\r\n\r\nFlow could force download when the expected file exists but its size is zero.",
    "issue_word_count": 176,
    "test_files_count": 1,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/internal/MessageDigestUtil.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/installer/NodeInstaller.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/installer/ProxyConfig.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/installer/VerificationException.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/FrontendToolsTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/FrontendToolsTest.java"
    ],
    "base_commit": "7b1e2ac4aa9e78b46bfc0e8ceba297ca7d953a33",
    "head_commit": "180cb5ea70cf704b80a817cf50ebf68811df04f3",
    "repo_url": "https://github.com/vaadin/flow/pull/20821",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20821",
    "dockerfile": "",
    "pr_merged_at": "2025-01-10T08:40:46.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/internal/MessageDigestUtil.java b/flow-server/src/main/java/com/vaadin/flow/internal/MessageDigestUtil.java\nindex 9103f78b9c8..c479ae29cf3 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/MessageDigestUtil.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/MessageDigestUtil.java\n@@ -17,6 +17,7 @@\n \n import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n \n@@ -75,6 +76,39 @@ public static byte[] sha256(String string, byte[] salt, Charset charset) {\n         return getSha256(salt).digest(string.getBytes(charset));\n     }\n \n+    /**\n+     * Calculates the SHA-256 hash of the given byte array.\n+     *\n+     * @param content\n+     *            the byte array to hash\n+     *\n+     * @return sha256 hash string\n+     */\n+    public static String sha256Hex(byte[] content) {\n+        return sha256Hex(content, null);\n+    }\n+\n+    /**\n+     * Calculates the SHA-256 hash of the given byte array with the given salt.\n+     *\n+     * @param content\n+     *            the byte array to hash\n+     * @param salt\n+     *            salt to be added to the calculation\n+     * @return sha256 hash string\n+     */\n+    public static String sha256Hex(byte[] content, byte[] salt) {\n+        byte[] digest = getSha256(salt).digest(content);\n+        final StringBuilder hexString = new StringBuilder();\n+        for (int i = 0; i < digest.length; i++) {\n+            final String hex = Integer.toHexString(0xff & digest[i]);\n+            if (hex.length() == 1)\n+                hexString.append('0');\n+            hexString.append(hex);\n+        }\n+        return hexString.toString();\n+    }\n+\n     private static MessageDigest getSha256(byte[] salt) {\n         try {\n             MessageDigest digest = MessageDigest.getInstance(\"SHA-256\");\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/installer/NodeInstaller.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/installer/NodeInstaller.java\nindex 85c5edb184a..d10e82fb22d 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/installer/NodeInstaller.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/installer/NodeInstaller.java\n@@ -34,6 +34,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.vaadin.flow.internal.MessageDigestUtil;\n import com.vaadin.flow.internal.Pair;\n import com.vaadin.flow.server.frontend.FrontendUtils;\n import com.vaadin.flow.server.frontend.FrontendVersion;\n@@ -55,6 +56,8 @@ public class NodeInstaller {\n \n     public static final String UNOFFICIAL_NODEJS_DOWNLOAD_ROOT = \"https://unofficial-builds.nodejs.org/download/release/\";\n \n+    public static final String SHA_SUMS_FILE = \"SHASUMS256.txt\";\n+\n     private static final String NODE_WINDOWS = INSTALL_PATH.replaceAll(\"/\",\n             \"\\\\\\\\\") + \"\\\\node.exe\";\n     private static final String NODE_DEFAULT = INSTALL_PATH + \"/node\";\n@@ -64,6 +67,7 @@ public class NodeInstaller {\n     private static final int MAX_DOWNLOAD_ATTEMPS = 5;\n \n     private static final int DOWNLOAD_ATTEMPT_DELAY = 5;\n+    public static final String ACCEPT_MISSING_SHA = \"vaadin.node.download.acceptMissingSHA\";\n \n     private final Object lock = new Object();\n \n@@ -524,6 +528,8 @@ private void downloadFileIfMissing(URI downloadUrl, File destination,\n                 try {\n                     fileDownloader.download(downloadUrl, destination, userName,\n                             password, null);\n+\n+                    verifyArchive(destination);\n                     return;\n                 } catch (DownloadException e) {\n                     if (i == MAX_DOWNLOAD_ATTEMPS - 1) {\n@@ -538,10 +544,85 @@ private void downloadFileIfMissing(URI downloadUrl, File destination,\n                     try {\n                         Thread.sleep(DOWNLOAD_ATTEMPT_DELAY * 1000);\n                     } catch (InterruptedException e1) {\n+                        Thread.currentThread().interrupt();\n+                    }\n+                } catch (VerificationException ve) {\n+                    getLogger().warn(\n+                            \"SHA256 verification of downloaded node archive failed.\");\n+                    if (i == MAX_DOWNLOAD_ATTEMPS - 1) {\n+                        removeArchiveFile(destination);\n+                        throw new DownloadException(\n+                                \"Failed to download node matching SHA256.\");\n                     }\n                 }\n+            }\n+        } else {\n+            try {\n+                verifyArchive(destination);\n+            } catch (VerificationException de) {\n+                removeArchiveFile(destination);\n+                downloadFileIfMissing(downloadUrl, destination, userName,\n+                        password);\n+            }\n+        }\n+    }\n \n+    private void verifyArchive(File archive)\n+            throws DownloadException, VerificationException {\n+        try {\n+            URI shaSumsURL = nodeDownloadRoot\n+                    .resolve(nodeVersion + \"/\" + SHA_SUMS_FILE);\n+            if (\"file\".equalsIgnoreCase(shaSumsURL.getScheme())) {\n+                // The file is local so it can't be expected to have a SHA file\n+                return;\n             }\n+\n+            File shaSums = new File(installDirectory, \"node-\" + SHA_SUMS_FILE);\n+\n+            getLogger().debug(\"Downloading {} to {}\", shaSumsURL, shaSums);\n+\n+            try {\n+                fileDownloader.download(shaSumsURL, shaSums, userName, password,\n+                        null);\n+            } catch (DownloadException e) {\n+                if (Boolean.getBoolean(ACCEPT_MISSING_SHA)) {\n+                    getLogger().warn(\n+                            \"Could not verify SHA256 sum of downloaded node in {}. Accepting missing checksum verification as set in '{}' system property.\",\n+                            archive, ACCEPT_MISSING_SHA);\n+                    return;\n+                } else {\n+                    getLogger().info(\n+                            \"Download of {} failed. If failure persists, use system property '{}' to skip verification or download node manually.\",\n+                            SHA_SUMS_FILE, ACCEPT_MISSING_SHA);\n+                    throw e;\n+                }\n+            }\n+\n+            String archiveSHA256 = MessageDigestUtil\n+                    .sha256Hex(Files.readAllBytes(archive.toPath()));\n+\n+            List<String> sha256sums = Files.readAllLines(shaSums.toPath());\n+            String archiveTargetSHA256 = sha256sums.stream()\n+                    .filter(sum -> sum\n+                            .endsWith(archive.getName()))\n+                    .map(sum -> sum\n+                            .substring(0,\n+                                    sum.length() - archive.getName().length())\n+                            .trim())\n+                    .findFirst().orElse(\"-1\");\n+\n+            shaSums.delete();\n+\n+            if (!archiveSHA256.equals(archiveTargetSHA256)) {\n+                getLogger().error(\n+                        \"Expected SHA256 [{}] for downloaded node archive, got [{}]\",\n+                        archiveTargetSHA256, archiveSHA256);\n+                throw new VerificationException(\n+                        \"SHA256 sums did not match for downloaded node\");\n+            }\n+        } catch (IOException e) {\n+            throw new VerificationException(\"Failed to validate archive hash.\",\n+                    e);\n         }\n     }\n \n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/installer/ProxyConfig.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/installer/ProxyConfig.java\nindex e960c819ffa..de61e4c91fc 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/installer/ProxyConfig.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/installer/ProxyConfig.java\n@@ -70,8 +70,9 @@ public Proxy getProxyForUrl(String requestUrl) {\n                 + \"development-mode/node-js#proxy-settings-for-downloading-\"\n                 + \"frontend-toolchain for information on proxy configuration.\";\n         if (proxies.isEmpty()) {\n-            getLogger().info(\"No proxies configured. \"\n-                    + \"If you are behind a proxy server, \" + docLink);\n+            getLogger().debug(\n+                    \"No proxies configured. If you are behind a proxy server, {}\",\n+                    docLink);\n             return null;\n         }\n         final URI uri = URI.create(requestUrl);\n@@ -80,9 +81,8 @@ public Proxy getProxyForUrl(String requestUrl) {\n                 return proxy;\n             }\n         }\n-        getLogger().info(\n-                \"Could not find matching proxy for host: {}\" + \" - \" + docLink,\n-                uri.getHost());\n+        getLogger().info(\"Could not find matching proxy for host: {} - {}\",\n+                uri.getHost(), docLink);\n         return null;\n     }\n \n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/installer/VerificationException.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/installer/VerificationException.java\nnew file mode 100644\nindex 00000000000..2a202828605\n--- /dev/null\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/installer/VerificationException.java\n@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2000-2024 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.frontend.installer;\n+\n+/**\n+ * Exception indicating a failure during downloaded archive verification.\n+ * <p>\n+ * For internal use only. May be renamed or removed in a future release.\n+ *\n+ * @since\n+ */\n+public final class VerificationException extends Exception {\n+\n+    /**\n+     * Exceptioon with message.\n+     *\n+     * @param message\n+     *            exception message\n+     */\n+    public VerificationException(String message) {\n+        super(message);\n+    }\n+\n+    /**\n+     * Exceptioon with message and cause.\n+     *\n+     * @param message\n+     *            exception message\n+     * @param cause\n+     *            cause for exception\n+     */\n+    VerificationException(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n+}\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/FrontendToolsTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/FrontendToolsTest.java\nindex 1b5f9c4ba30..477b0330452 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/FrontendToolsTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/FrontendToolsTest.java\n@@ -182,6 +182,9 @@ public void nodeIsBeingLocated_supportedNodeInstalled_autoUpdateTrue_NodeUpdated\n     @Test\n     public void nodeIsBeingLocated_unsupportedNodeInstalled_defaultNodeVersionInstalledToAlternativeDirectory()\n             throws FrontendUtils.UnknownVersionException, IOException {\n+        Assume.assumeFalse(\n+                \"Skipping test on windows until a fake node.exe that isn't caught by Window defender can be created.\",\n+                FrontendUtils.isWindows());\n         // Unsupported node version\n         FrontendStubs.ToolStubInfo nodeStub = FrontendStubs.ToolStubInfo\n                 .builder(FrontendStubs.Tool.NODE).withVersion(\"8.9.3\").build();\n@@ -204,6 +207,9 @@ public void nodeIsBeingLocated_unsupportedNodeInstalled_defaultNodeVersionInstal\n     @Test\n     public void nodeIsBeingLocated_unsupportedNodeInstalled_fallbackToNodeInstalledToAlternativeDirectory()\n             throws IOException, FrontendUtils.UnknownVersionException {\n+        Assume.assumeFalse(\n+                \"Skipping test on windows until a fake node.exe that isn't caught by Window defender can be created.\",\n+                FrontendUtils.isWindows());\n         // Unsupported node version\n         FrontendStubs.ToolStubInfo nodeStub = FrontendStubs.ToolStubInfo\n                 .builder(FrontendStubs.Tool.NODE).withVersion(\"8.9.3\").build();\n@@ -730,6 +736,8 @@ public void getSuitablePnpm_supportedGlobalVersionInstalled_accepted() {\n \n     @Test\n     public void getSuitablePnpm_useGlobalPnpm_noPnpmInstalled_throws() {\n+        Assume.assumeFalse(\"Skipping test on windows.\",\n+                FrontendUtils.isWindows());\n         Optional<File> pnpm = frontendToolsLocator.tryLocateTool(\"pnpm\");\n         Assume.assumeFalse(\"Skip this test once globally installed pnpm is \"\n                 + \"discovered\", pnpm.isPresent());\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20820",
    "pr_id": 20820,
    "issue_id": 11026,
    "repo": "vaadin/flow",
    "problem_statement": "Exception in push connection when logging out\n### Description of the bug / feature\r\nSince switching to the default Push transport (#10931) we always get an “Exception in push connection” when logging out.\r\n\r\nNote: the exception is not thrown when simply closing the browser window…\r\n\r\n### Minimal reproducible example\r\nOur application is a pretty basic view/form application. Login/authentication is handled by a remote service using REST calls (`KioskAuthenticationProvider`). Logout is via a “logout” anchor in the top bar of the layout.\r\n\r\nOur security configuration  is as follows:\r\n```\r\n@RequiredArgsConstructor\r\n@EnableWebSecurity\r\n@Configuration\r\npublic class SecurityConfiguration extends WebSecurityConfigurerAdapter {\r\n\r\n    private static final String LOGIN_PROCESSING_URL = \"/login\";\r\n    private static final String LOGIN_FAILURE_URL = \"/login?error\";\r\n    private static final String LOGIN_URL = \"/login\";\r\n    private static final String LOGOUT_SUCCESS_URL = \"/login\";\r\n\r\n    private final LoginService loginService;\r\n\r\n    /**\r\n     * Tests if the request is an internal framework request. The test consists of\r\n     * checking if the request parameter is present and if its value is consistent\r\n     * with any of the request types know.\r\n     *\r\n     * @param request {@link HttpServletRequest}\r\n     * @return true if the request is an internal framework request. False otherwise.\r\n     */\r\n    public static boolean isFrameworkInternalRequest(HttpServletRequest request) {\r\n        final String parameterValue = request.getParameter(ApplicationConstants.REQUEST_TYPE_PARAMETER);\r\n        return parameterValue != null &&\r\n               Stream.of(HandlerHelper.RequestType.values()).anyMatch(r -> r.getIdentifier().equals(parameterValue));\r\n    }\r\n\r\n    @Bean\r\n    public AuthenticationProvider authenticationProvider() {\r\n        return new KioskAuthenticationProvider(loginService);\r\n    }\r\n\r\n    @Override\r\n    protected void configure(AuthenticationManagerBuilder auth) {\r\n        auth.authenticationProvider(authenticationProvider());\r\n    }\r\n\r\n    /**\r\n     * Require login to access internal pages and configure login form.\r\n     */\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        // Not using Spring CSRF here to be able to use plain HTML for the login page\r\n        http.csrf()\r\n            .disable()\r\n\r\n            // Register our CustomRequestCache, that saves unauthorized access attempts, so\r\n            // the user is redirected after login.\r\n            .requestCache()\r\n            .requestCache(new SimpleRequestCache())\r\n\r\n            // Restrict access to our application.\r\n            .and()\r\n            .authorizeRequests()\r\n\r\n            // Allow health checks\r\n            .antMatchers(\"/actuator/health\")\r\n            .permitAll()\r\n\r\n            // Allow all Vaadin internal requests.\r\n            .requestMatchers(SecurityConfiguration::isFrameworkInternalRequest)\r\n            .permitAll()\r\n\r\n            // Allow all other requests by logged in users.\r\n            .anyRequest()\r\n            .authenticated()\r\n\r\n            // Configure the login page.\r\n            .and()\r\n            .formLogin()\r\n            .loginPage(LOGIN_URL)\r\n            .permitAll()\r\n            .loginProcessingUrl(LOGIN_PROCESSING_URL)\r\n            .failureUrl(LOGIN_FAILURE_URL)\r\n\r\n            // Configure logout\r\n            .and()\r\n            .logout()\r\n            .logoutSuccessUrl(LOGOUT_SUCCESS_URL);\r\n    }\r\n\r\n    /**\r\n     * Allows access to static resources, bypassing Spring security.\r\n     */\r\n    @Override\r\n    public void configure(WebSecurity web) {\r\n        web.ignoring().antMatchers(\r\n                // Client-side JS\r\n                \"/VAADIN/**\",\r\n\r\n                // the standard favicon URI\r\n                \"/favicon.ico\",\r\n\r\n                // the robots exclusion standard\r\n                \"/robots.txt\",\r\n\r\n                // web application manifest\r\n                \"/manifest.webmanifest\", \"/sw.js\", \"/offline.html\",\r\n\r\n                // icons and images\r\n                \"/icons/**\", \"/META-INF/resources/images/**\", \"/styles/**\");\r\n    }\r\n\r\n}\r\n```\r\n\r\nThe UI is configured as follows:\r\n```\r\n/**\r\n * Component to set up the Vaadin UI.\r\n *\r\n * Sets up the locale and adds a {@link BeforeEnterEvent} handler to redirect to the login page if a user isn't already\r\n * logged-in.\r\n */\r\n@Component\r\npublic class ManagementServiceInitListener implements VaadinServiceInitListener {\r\n\r\n    public ManagementServiceInitListener(@NotNull CommonProperties commonProperties) {\r\n        Locale.setDefault(commonProperties.getLocaleFromProperties());\r\n    }\r\n\r\n    @Override\r\n    public void serviceInit(@NotNull ServiceInitEvent event) {\r\n        event.getSource().addUIInitListener(uiEvent -> {\r\n            UI ui = uiEvent.getUI();\r\n            ui.addBeforeEnterListener(this::beforeEnter);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Reroutes the user to the login page unless already logged-in.\r\n     *\r\n     * @param event before navigation event with event details.\r\n     */\r\n    protected void beforeEnter(@NotNull BeforeEnterEvent event) {\r\n        if (!LoginView.class.equals(event.getNavigationTarget()) && !LoginService.isUserLoggedIn()) {\r\n            event.rerouteTo(LoginView.class);\r\n        }\r\n    }\r\n\r\n}\r\n```\r\n\r\nThe login view is straightforward:\r\n```\r\n@Route(\"login\")\r\n@PageTitle(\"Login | Management Console\")\r\npublic class LoginView extends VerticalLayout implements BeforeEnterObserver {\r\n\r\n    private final LoginForm loginForm;\r\n\r\n    public LoginView() {\r\n        addClassName(\"login-view\");\r\n        setSizeFull();\r\n        setJustifyContentMode(JustifyContentMode.CENTER);\r\n        setAlignItems(Alignment.CENTER);\r\n\r\n        H1 title = new H1(\"Management Console\");\r\n\r\n        loginForm = new LoginForm(createDutchLogin());\r\n        configureLoginForm();\r\n\r\n        add(title, loginForm);\r\n    }\r\n\r\n    @Override\r\n    public void beforeEnter(@NotNull BeforeEnterEvent beforeEnterEvent) {\r\n        if (beforeEnterEvent.getLocation().getQueryParameters().getParameters().containsKey(\"error\")) {\r\n            loginForm.setError(true);\r\n        }\r\n    }\r\n\r\n    private @NotNull LoginI18n createDutchLogin() {\r\n        LoginI18n loginI18n = LoginI18n.createDefault();\r\n\r\n        // Form\r\n        LoginI18n.Form form = loginI18n.getForm();\r\n        form.setTitle(\"Inloggen\");\r\n        form.setUsername(\"Gebruikersnaam\");\r\n        form.setPassword(\"Wachtwoord\");\r\n        form.setForgotPassword(\"Wachtwoord vergeten?\");\r\n        form.setSubmit(\"Log in\");\r\n\r\n        // Error Message\r\n        LoginI18n.ErrorMessage errorMessage = loginI18n.getErrorMessage();\r\n        errorMessage.setTitle(\"Probleem bij het inloggen\");\r\n        errorMessage.setMessage(\"Controleer of u de juiste gegevens heeft ingevoerd en probeer het dan nogmaals.\");\r\n\r\n        return loginI18n;\r\n    }\r\n\r\n    private void configureLoginForm() {\r\n        loginForm.setForgotPasswordButtonVisible(false);\r\n        loginForm.setAction(\"login\");\r\n    }\r\n\r\n}\r\n```\r\n\r\nWe don't have a logout view; you simply get redirected to login. However, to try to follow the advise in https://vaadin.com/forum/thread/17520891/flow-logout, I did add a logout view with `VaadinSession.getCurrent().getSession().invalidate();` in the `BeforeEnter` (note: adding the navigation line caused an invalid redirect in the browser!). Interestingly this was actually quite hard to get to trigger, I had to change the route to something other than logout (including the anchor) for it to trigger. But even when that still did not get rid of the push exception…\r\n\r\nAm I triggering the logout wrongly?\r\n\r\n### Expected behavior\r\nNo more exceptions in the push connection when logging out.\r\n\r\n### Actual behavior\r\nExample exception\r\n```\r\n2021-05-18 11:27:53.227 ERROR 58262 --- [sphere-Shared-3] c.v.f.s.c.PushAtmosphereHandler          : Exception in push connection\r\n\r\njava.io.IOException: Connection remotely closed for 82791b2a-7216-4486-8ad2-b33e423d1b78\r\n\tat org.atmosphere.websocket.WebSocket.write(WebSocket.java:230) ~[atmosphere-runtime-2.4.30.slf4jvaadin1.jar:2.4.30.slf4jvaadin1]\r\n\tat org.atmosphere.websocket.WebSocket.write(WebSocket.java:220) ~[atmosphere-runtime-2.4.30.slf4jvaadin1.jar:2.4.30.slf4jvaadin1]\r\n\tat org.atmosphere.websocket.WebSocket.write(WebSocket.java:46) ~[atmosphere-runtime-2.4.30.slf4jvaadin1.jar:2.4.30.slf4jvaadin1]\r\n\tat org.atmosphere.cpr.AtmosphereResponseImpl$Stream.write(AtmosphereResponseImpl.java:957) ~[atmosphere-runtime-2.4.30.slf4jvaadin1.jar:2.4.30.slf4jvaadin1]\r\n\tat org.atmosphere.handler.AbstractReflectorAtmosphereHandler.onStateChange(AbstractReflectorAtmosphereHandler.java:155) ~[atmosphere-runtime-2.4.30.slf4jvaadin1.jar:2.4.30.slf4jvaadin1]\r\n\tat com.vaadin.flow.server.communication.PushAtmosphereHandler.onStateChange(PushAtmosphereHandler.java:54) ~[flow-server-2.6.0.jar:2.6.0]\r\n\tat org.atmosphere.cpr.DefaultBroadcaster.invokeOnStateChange(DefaultBroadcaster.java:1037) ~[atmosphere-runtime-2.4.30.slf4jvaadin1.jar:2.4.30.slf4jvaadin1]\r\n\tat org.atmosphere.cpr.DefaultBroadcaster.prepareInvokeOnStateChange(DefaultBroadcaster.java:1057) ~[atmosphere-runtime-2.4.30.slf4jvaadin1.jar:2.4.30.slf4jvaadin1]\r\n\tat org.atmosphere.cpr.DefaultBroadcaster.executeAsyncWrite(DefaultBroadcaster.java:871) ~[atmosphere-runtime-2.4.30.slf4jvaadin1.jar:2.4.30.slf4jvaadin1]\r\n\tat org.atmosphere.cpr.DefaultBroadcaster$2.run(DefaultBroadcaster.java:474) ~[atmosphere-runtime-2.4.30.slf4jvaadin1.jar:2.4.30.slf4jvaadin1]\r\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) ~[na:na]\r\n\tat java.base/java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:264) ~[na:na]\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java) ~[na:na]\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) ~[na:na]\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) ~[na:na]\r\n\tat java.base/java.lang.Thread.run(Thread.java:834) ~[na:na]\r\n```\r\n\r\n### Versions:\r\n    - Vaadin / Flow version: 14.6.0\r\n    - Java version: 11\r\n    - OS version: AWS & Mac OS\r\n",
    "issue_word_count": 1066,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinWebSecurity.java",
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinWebSecurityTest.java"
    ],
    "pr_changed_test_files": [
      "vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinWebSecurityTest.java"
    ],
    "base_commit": "07d230ea0d79a865af8e03b525f5b08b6fad700b",
    "head_commit": "13f2bdc60d269b94d6ad2c09eed263cb6ebf2acf",
    "repo_url": "https://github.com/vaadin/flow/pull/20820",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20820",
    "dockerfile": "",
    "pr_merged_at": "2025-01-10T11:58:50.000Z",
    "patch": "diff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinWebSecurity.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinWebSecurity.java\nindex a80ed7c334e..40da61f57f0 100644\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinWebSecurity.java\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinWebSecurity.java\n@@ -43,6 +43,8 @@\n import org.springframework.security.config.annotation.web.builders.WebSecurity;\n import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;\n import org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer;\n+import org.springframework.security.oauth2.client.oidc.web.logout.OidcClientInitiatedLogoutSuccessHandler;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n import org.springframework.security.oauth2.jose.jws.MacAlgorithm;\n import org.springframework.security.web.DefaultSecurityFilterChain;\n import org.springframework.security.web.SecurityFilterChain;\n@@ -53,7 +55,7 @@\n import org.springframework.security.web.authentication.HttpStatusEntryPoint;\n import org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint;\n import org.springframework.security.web.authentication.logout.LogoutHandler;\n-import org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler;\n+import org.springframework.security.web.authentication.logout.LogoutSuccessHandler;\n import org.springframework.security.web.csrf.CsrfException;\n import org.springframework.security.web.savedrequest.RequestCache;\n import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n@@ -499,6 +501,10 @@ protected void setLoginView(HttpSecurity http,\n     /**\n      * Sets up the login page URI of the OAuth2 provider on the specified\n      * HttpSecurity instance.\n+     * <p>\n+     * </p>\n+     * This method also configures a logout success handler that redirects to\n+     * the application base URL after logout.\n      *\n      * @param http\n      *            the http security from {@link #filterChain(HttpSecurity)}\n@@ -511,10 +517,85 @@ protected void setLoginView(HttpSecurity http,\n      */\n     protected void setOAuth2LoginPage(HttpSecurity http, String oauth2LoginPage)\n             throws Exception {\n+        setOAuth2LoginPage(http, oauth2LoginPage, \"{baseUrl}\");\n+    }\n+\n+    /**\n+     * Sets up the login page URI of the OAuth2 provider and the post logout URI\n+     * on the specified HttpSecurity instance.\n+     * <p>\n+     * </p>\n+     * The post logout redirect uri can be relative or absolute URI or a\n+     * template. The supported uri template variables are: {baseScheme},\n+     * {baseHost}, {basePort} and {basePath}.\n+     * <p>\n+     * </p>\n+     * NOTE: \"{baseUrl}\" is also supported, which is the same as\n+     * \"{baseScheme}://{baseHost}{basePort}{basePath}\" handler.\n+     * setPostLogoutRedirectUri(\"{baseUrl}\");\n+     *\n+     * @param http\n+     *            the http security from {@link #filterChain(HttpSecurity)}\n+     * @param oauth2LoginPage\n+     *            the login page of the OAuth2 provider. This Specifies the URL\n+     *            to send users to if login is required.\n+     * @param postLogoutRedirectUri\n+     *            the post logout redirect uri. Can be a template.\n+     * @throws Exception\n+     *             Re-throws the possible exceptions while activating\n+     *             OAuth2LoginConfigurer\n+     */\n+    protected void setOAuth2LoginPage(HttpSecurity http, String oauth2LoginPage,\n+            String postLogoutRedirectUri) throws Exception {\n         http.oauth2Login(cfg -> cfg.loginPage(oauth2LoginPage).successHandler(\n                 getVaadinSavedRequestAwareAuthenticationSuccessHandler(http))\n                 .permitAll());\n         accessControl.setLoginView(servletContextPath + oauth2LoginPage);\n+        if (postLogoutRedirectUri != null) {\n+            applicationContext\n+                    .getBeanProvider(ClientRegistrationRepository.class)\n+                    .getIfAvailable();\n+            var logoutSuccessHandler = oidcLogoutSuccessHandler(\n+                    postLogoutRedirectUri);\n+            if (logoutSuccessHandler != null) {\n+                http.logout(\n+                        cfg -> cfg.logoutSuccessHandler(logoutSuccessHandler));\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Gets a {@code OidcClientInitiatedLogoutSuccessHandler} instance that\n+     * redirects to the given URL after logout.\n+     * <p>\n+     * </p>\n+     * If a {@code ClientRegistrationRepository} bean is not registered in the\n+     * application context, the method returns {@literal null}.\n+     *\n+     * @param postLogoutRedirectUri\n+     *            the post logout redirect uri\n+     * @return a {@code OidcClientInitiatedLogoutSuccessHandler}, or\n+     *         {@literal null} if a {@code ClientRegistrationRepository} bean is\n+     *         not registered in the application context.\n+     */\n+    // Using base interface as return type to avoid potential\n+    // ClassNotFoundException when Spring Boot introspect configuration class\n+    // during startup, if spring-security-oauth2-client is not on classpath\n+    protected LogoutSuccessHandler oidcLogoutSuccessHandler(\n+            String postLogoutRedirectUri) {\n+        var clientRegistrationRepository = applicationContext\n+                .getBeanProvider(ClientRegistrationRepository.class)\n+                .getIfAvailable();\n+        if (clientRegistrationRepository != null) {\n+            var logoutHandler = new OidcClientInitiatedLogoutSuccessHandler(\n+                    clientRegistrationRepository);\n+            logoutHandler.setRedirectStrategy(new UidlRedirectStrategy());\n+            logoutHandler.setPostLogoutRedirectUri(postLogoutRedirectUri);\n+            return logoutHandler;\n+        }\n+        LoggerFactory.getLogger(VaadinWebSecurity.class).warn(\n+                \"Cannot create OidcClientInitiatedLogoutSuccessHandler because ClientRegistrationRepository bean is not available.\");\n+        return null;\n     }\n \n     /**\n",
    "test_patch": "diff --git a/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinWebSecurityTest.java b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinWebSecurityTest.java\nindex 15b19397897..4ed6759348f 100644\n--- a/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinWebSecurityTest.java\n+++ b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinWebSecurityTest.java\n@@ -20,12 +20,15 @@\n import jakarta.servlet.http.HttpServletResponse;\n \n import java.util.Map;\n+import java.util.concurrent.atomic.AtomicReference;\n import java.util.function.Consumer;\n \n import org.junit.Assert;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.mockito.Mockito;\n+import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.ApplicationContext;\n import org.springframework.security.config.ObjectPostProcessor;\n@@ -33,16 +36,21 @@\n import org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration;\n import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n import org.springframework.security.config.annotation.web.builders.WebSecurity;\n+import org.springframework.security.config.annotation.web.configurers.LogoutConfigurer;\n import org.springframework.security.core.Authentication;\n-import com.vaadin.flow.spring.security.AuthenticationContext.CompositeLogoutHandler;\n+import org.springframework.security.oauth2.client.oidc.web.logout.OidcClientInitiatedLogoutSuccessHandler;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n import org.springframework.security.web.authentication.logout.LogoutHandler;\n+import org.springframework.security.web.authentication.logout.LogoutSuccessHandler;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit4.SpringRunner;\n import org.springframework.test.util.ReflectionTestUtils;\n \n import com.vaadin.flow.server.auth.NavigationAccessControl;\n+import com.vaadin.flow.spring.security.AuthenticationContext.CompositeLogoutHandler;\n \n import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.mock;\n \n @RunWith(SpringRunner.class)\n@@ -83,12 +91,7 @@ public void navigationAccessControl_enabledByDefault() throws Exception {\n                 Map.of(ApplicationContext.class, appCtx));\n         VaadinWebSecurity testConfig = new VaadinWebSecurity() {\n         };\n-        NavigationAccessControl accessControl = new NavigationAccessControl();\n-        ReflectionTestUtils.setField(testConfig, \"accessControl\",\n-                accessControl);\n-        RequestUtil requestUtil = mock(RequestUtil.class);\n-        Mockito.when(requestUtil.getUrlMapping()).thenReturn(\"/*\");\n-        ReflectionTestUtils.setField(testConfig, \"requestUtil\", requestUtil);\n+        mockVaadinWebSecurityInjection(testConfig);\n \n         testConfig.filterChain(httpSecurity);\n         Assert.assertTrue(\n@@ -108,12 +111,7 @@ protected boolean enableNavigationAccessControl() {\n                 return false;\n             }\n         };\n-        NavigationAccessControl accessControl = new NavigationAccessControl();\n-        ReflectionTestUtils.setField(testConfig, \"accessControl\",\n-                accessControl);\n-        RequestUtil requestUtil = mock(RequestUtil.class);\n-        Mockito.when(requestUtil.getUrlMapping()).thenReturn(\"/*\");\n-        ReflectionTestUtils.setField(testConfig, \"requestUtil\", requestUtil);\n+        mockVaadinWebSecurityInjection(testConfig);\n \n         testConfig.filterChain(httpSecurity);\n         Assert.assertFalse(\n@@ -121,6 +119,93 @@ protected boolean enableNavigationAccessControl() {\n                 testConfig.getNavigationAccessControl().isEnabled());\n     }\n \n+    @Test\n+    public void filterChain_oauth2login_configuresLoginPageAndLogoutHandler()\n+            throws Exception {\n+        assertOauth2Configuration(null);\n+        assertOauth2Configuration(\"/session-ended\");\n+    }\n+\n+    private void assertOauth2Configuration(String postLogoutUri)\n+            throws Exception {\n+        String expectedLogoutUri = postLogoutUri != null ? postLogoutUri\n+                : \"{baseUrl}\";\n+        HttpSecurity httpSecurity = new HttpSecurity(postProcessor,\n+                new AuthenticationManagerBuilder(postProcessor),\n+                Map.of(ApplicationContext.class, appCtx));\n+        AtomicReference<String> postLogoutUriHolder = new AtomicReference<>(\n+                \"NOT SET\");\n+        VaadinWebSecurity testConfig = new VaadinWebSecurity() {\n+            @Override\n+            protected void configure(HttpSecurity http) throws Exception {\n+                super.configure(http);\n+                if (postLogoutUri != null) {\n+                    setOAuth2LoginPage(http, \"/externalLogin\", postLogoutUri);\n+                } else {\n+                    setOAuth2LoginPage(http, \"/externalLogin\");\n+                }\n+            }\n+\n+            @Override\n+            protected LogoutSuccessHandler oidcLogoutSuccessHandler(\n+                    String postLogoutRedirectUri) {\n+                postLogoutUriHolder.set(postLogoutRedirectUri);\n+                return super.oidcLogoutSuccessHandler(postLogoutRedirectUri);\n+            }\n+        };\n+        TestNavigationAccessControl accessControl = mockVaadinWebSecurityInjection(\n+                testConfig);\n+        ClientRegistrationRepository repository = mock(\n+                ClientRegistrationRepository.class);\n+        ObjectProvider<ClientRegistrationRepository> provider = new ObjectProvider<ClientRegistrationRepository>() {\n+            @Override\n+            public ClientRegistrationRepository getObject()\n+                    throws BeansException {\n+                return repository;\n+            }\n+        };\n+        ApplicationContext appCtx = Mockito.mock(ApplicationContext.class);\n+        Mockito.when(appCtx.getBeanProvider(ClientRegistrationRepository.class))\n+                .thenReturn(provider);\n+        ReflectionTestUtils.setField(testConfig, \"applicationContext\", appCtx);\n+        httpSecurity.setSharedObject(ClientRegistrationRepository.class,\n+                repository);\n+\n+        testConfig.filterChain(httpSecurity);\n+\n+        Assert.assertEquals(\"/externalLogin\", accessControl.getLoginUrl());\n+        LogoutSuccessHandler logoutSuccessHandler = httpSecurity\n+                .getConfigurer(LogoutConfigurer.class)\n+                .getLogoutSuccessHandler();\n+        Assert.assertNotNull(\"Expected logout success handler to be configured\",\n+                logoutSuccessHandler);\n+        Assert.assertTrue(\n+                \"Expected logout success handler to be of type OidcClientInitiatedLogoutSuccessHandler, but was \"\n+                        + logoutSuccessHandler.getClass().getName(),\n+                logoutSuccessHandler instanceof OidcClientInitiatedLogoutSuccessHandler);\n+        Assert.assertEquals(\"Unexpected post logout uri\", expectedLogoutUri,\n+                postLogoutUriHolder.get());\n+    }\n+\n+    private static TestNavigationAccessControl mockVaadinWebSecurityInjection(\n+            VaadinWebSecurity testConfig) {\n+        TestNavigationAccessControl accessControl = new TestNavigationAccessControl();\n+        ReflectionTestUtils.setField(testConfig, \"accessControl\",\n+                accessControl);\n+        RequestUtil requestUtil = mock(RequestUtil.class);\n+        Mockito.when(requestUtil.getUrlMapping()).thenReturn(\"/*\");\n+        Mockito.when(requestUtil.applyUrlMapping(anyString())).then(i -> {\n+            String path = i.getArgument(0, String.class);\n+            if (!path.startsWith(\"/\")) {\n+                path = \"/\" + path;\n+            }\n+            return path;\n+        });\n+        ReflectionTestUtils.setField(testConfig, \"requestUtil\", requestUtil);\n+        ReflectionTestUtils.setField(testConfig, \"servletContextPath\", \"\");\n+        return accessControl;\n+    }\n+\n     static class TestConfig extends VaadinWebSecurity {\n         LogoutHandler handler1 = mock(LogoutHandler.class);\n         LogoutHandler handler2 = mock(LogoutHandler.class);\n@@ -144,4 +229,12 @@ protected void addLogoutHandlers(Consumer<LogoutHandler> registry) {\n         }\n     }\n \n+    static class TestNavigationAccessControl extends NavigationAccessControl {\n+\n+        @Override\n+        protected String getLoginUrl() {\n+            return super.getLoginUrl();\n+        }\n+    }\n+\n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20795",
    "pr_id": 20795,
    "issue_id": 20793,
    "repo": "vaadin/flow",
    "problem_statement": "PiT 24.7: in GH windows runner flow fails when using node installed in the prepare-frontend step\n### Description of the bug\n\nWhen running PiT starters in GH actions for windows, they fail when the node installation needs to be upgraded by flow.\r\nFlow `prepare-frontend` installs a valid `node.exe` in `~/.vaadin/node/` but then, it fails when it's used in flow.\r\n\r\nError liness than can be seen in output are:\r\n\r\n- `prepare-frontend`\r\n```\r\n[INFO] The globally installed Node.js version 18.20.5 is older than the required minimum version 20.0.0. Using Node.js from C:\\Users\\runneradmin\\.vaadin.\r\n[INFO] Couldn't find node.exe. Installing Node and npm to C:\\Users\\runneradmin\\.vaadin.\r\n[INFO] Installing node version v22.12.0\r\n[INFO] Downloading https://nodejs.org/dist/v22.12.0/node-v22.12.0-win-x64.zip to C:\\Users\\runneradmin\\.vaadin\\node-v22.12.0-win-x64.zip\r\n[INFO] No proxies configured. If you are behind a proxy server, see https://vaadin.com/docs/latest/configuration/development-mode/node-js#proxy-settings-for-downloading-frontend-toolchain for information on proxy configuration.\r\n[INFO] Unpacking C:\\Users\\runneradmin\\.vaadin\\node-v22.12.0-win-x64.zip (34872043 bytes) into C:\\Users\\runneradmin\\.vaadin\\node\\tmp\r\n[INFO] Copying node binary from C:\\Users\\runneradmin\\.vaadin\\node\\tmp\\node-v22.12.0-win-x64\\node.exe to C:\\Users\\runneradmin\\.vaadin\\node\\node.exe\r\n[INFO] Extracting npm\r\n[INFO] Local node installation successful.\r\n```\r\n\r\n- `mvn spring-boot:run`\r\n\r\n```\r\n2024-12-30T11:04:39.592Z ERROR 5792 --- [  restartedMain] c.v.f.s.frontend.FrontendToolsLocator    : Failed to read the command '[where, node.exe]' stdout/stderr\r\n\r\n...\r\n\r\n2024-12-30T11:04:49.667Z ERROR 5792 --- [  restartedMain] c.v.f.s.frontend.FrontendToolsLocator    : Failed to read the command '[C:\\Users\\runneradmin\\.vaadin\\node\\node.exe, -v]' stdout/stderr\r\n\r\n...\r\nCaused by: java.lang.IllegalStateException: Failed to install Node\r\n\tat com.vaadin.flow.server.frontend.FrontendTools.installNode(FrontendTools.java:691) ~[flow-server-24.7.0.alpha2.jar:24.7.0.alpha2]\r\n\tat com.vaadin.flow.server.frontend.FrontendTools.getNodeExecutable(FrontendTools.java:439) ~[flow-server-24.7.0.alpha2.jar:24.7.0.alpha2]\r\n\tat com.vaadin.exampledata.NodeUtil.runScript(NodeUtil.java:36) ~[exampledata-6.2.0.jar:6.2.0]\r\n\tat com.vaadin.exampledata.NodeUtil.initialize(NodeUtil.java:29) ~[exampledata-6.2.0.jar:6.2.0]\r\n\tat com.vaadin.exampledata.NodeScriptInterface.init(NodeScriptInterface.java:28) ~[exampledata-6.2.0.jar:6.2.0]\r\n\tat com.vaadin.exampledata.NodeScriptInterface.getChanceString(NodeScriptInterface.java:34) ~[exampledata-6.2.0.jar:6.2.0]\r\n\tat com.vaadin.exampledata.ChanceStringType.getValue(ChanceStringType.java:22) ~[exampledata-6.2.0.jar:6.2.0]\r\n\tat com.vaadin.exampledata.ChanceStringType.getValue(ChanceStringType.java:6) ~[exampledata-6.2.0.jar:6.2.0]\r\n\tat com.vaadin.exampledata.ExampleDataGenerator.assignValue(ExampleDataGenerator.java:48) ~[exampledata-6.2.0.jar:6.2.0]\r\n\tat com.vaadin.exampledata.ExampleDataGenerator.createBean(ExampleDataGenerator.java:38) ~[exampledata-6.2.0.jar:6.2.0]\r\n\t... 25 common frames omitted\r\nCaused by: com.vaadin.flow.server.frontend.installer.InstallationException: Unable to detect version of Node. Using command C:\\Users\\runneradmin\\.vaadin\\node\\node.exe --version\r\n\tat com.vaadin.flow.server.frontend.installer.NodeInstaller.getVersion(NodeInstaller.java:574) ~[flow-server-24.7.0.alpha2.jar:24.7.0.alpha2]\r\n\tat com.vaadin.flow.server.frontend.installer.NodeInstaller.nodeIsAlreadyInstalled(NodeInstaller.java:238) ~[flow-server-24.7.0.alpha2.jar:24.7.0.alpha2]\r\n\tat com.vaadin.flow.server.frontend.installer.NodeInstaller.install(NodeInstaller.java:214) ~[flow-server-24.7.0.alpha2.jar:24.7.0.alpha2]\r\n\tat com.vaadin.flow.server.frontend.FrontendTools.installNode(FrontendTools.java:689) ~[flow-server-24.7.0.alpha2.jar:24.7.0.alpha2]\r\n\t... 34 common frames omitted\r\n```\n\n### Expected behavior\n\nIt installs and uses correctly node, like it happens in linux/mac\n\n### Minimal reproducible example\n\nIn a github actions workflow select `windows-latest` runner and execute the followin command sequence\r\n\r\n```\r\n# Clean stuff\r\nrm -rf ~/.m2/repository/\r\nrm -rf ~/.vaadin/node/\r\n# Clone repo\r\ngit clone https://github.com/vaadin/designer-tutorial.git\r\ncd designer-tutorial\r\n# Change version\r\nperl -pi -e 's|(\\s*<'vaadin.version'>)[^\\s]+(</'vaadin.version'>)|${1}24.7.0.alpha1${2}|g' pom.xml\r\n# Run build\r\nmvn -ntp -B\r\n```\r\n\n\n### Versions\n\n- Vaadin / Flow version: 24.7.0.alpha1\r\n- OS version: windows-latest in gihub actions\r\n",
    "issue_word_count": 712,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java",
      "vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DevModeHandlerManagerImpl.java",
      "vaadin-dev-server/src/main/java/com/vaadin/base/devserver/startup/DevModeInitializer.java"
    ],
    "pr_changed_test_files": [
      "flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java"
    ],
    "base_commit": "041dead3cd694059b77485a404c65015452311ce",
    "head_commit": "6b5e216cb46838b7f9076ad41df4e61f797f946c",
    "repo_url": "https://github.com/vaadin/flow/pull/20795",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20795",
    "dockerfile": "",
    "pr_merged_at": "2024-12-31T09:22:20.000Z",
    "patch": "diff --git a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DevModeHandlerManagerImpl.java b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DevModeHandlerManagerImpl.java\nindex cde5c77efcd..f14d02fe656 100644\n--- a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DevModeHandlerManagerImpl.java\n+++ b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DevModeHandlerManagerImpl.java\n@@ -15,18 +15,20 @@\n  */\n package com.vaadin.base.devserver;\n \n-import com.vaadin.flow.server.Command;\n import jakarta.servlet.annotation.HandlesTypes;\n \n import java.io.Closeable;\n import java.io.File;\n-import java.io.IOException;\n import java.io.Serializable;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -35,6 +37,7 @@\n import com.vaadin.base.devserver.startup.DevModeStartupListener;\n import com.vaadin.flow.internal.DevModeHandler;\n import com.vaadin.flow.internal.DevModeHandlerManager;\n+import com.vaadin.flow.server.Command;\n import com.vaadin.flow.server.Mode;\n import com.vaadin.flow.server.VaadinContext;\n import com.vaadin.flow.server.frontend.FrontendUtils;\n@@ -68,6 +71,7 @@ private static final class DevModeHandlerAlreadyStartedAttribute\n     private DevModeHandler devModeHandler;\n     private BrowserLauncher browserLauncher;\n     private final Set<Command> shutdownCommands = new HashSet<>();\n+    private ExecutorService executorService;\n \n     private String applicationUrl;\n     private boolean fullyStarted = false;\n@@ -96,8 +100,11 @@ public DevModeHandler getDevModeHandler() {\n     @Override\n     public void initDevModeHandler(Set<Class<?>> classes, VaadinContext context)\n             throws VaadinInitializerException {\n-        setDevModeHandler(\n-                DevModeInitializer.initDevModeHandler(classes, context));\n+        shutdownExecutorService();\n+        executorService = Executors.newFixedThreadPool(4,\n+                new InternalThreadFactory());\n+        setDevModeHandler(DevModeInitializer.initDevModeHandler(classes,\n+                context, executorService));\n         CompletableFuture.runAsync(() -> {\n             DevModeHandler devModeHandler = getDevModeHandler();\n             if (devModeHandler instanceof AbstractDevServerRunner) {\n@@ -111,11 +118,18 @@ public void initDevModeHandler(Set<Class<?>> classes, VaadinContext context)\n             startWatchingThemeFolder(context, config);\n             watchExternalDependencies(context, config);\n             setFullyStarted(true);\n-        });\n+        }, executorService);\n         setDevModeStarted(context);\n         this.browserLauncher = new BrowserLauncher(context);\n     }\n \n+    private void shutdownExecutorService() {\n+        if (executorService != null) {\n+            executorService.shutdownNow();\n+            executorService = null;\n+        }\n+    }\n+\n     private void watchExternalDependencies(VaadinContext context,\n             ApplicationConfiguration config) {\n         File frontendFolder = FrontendUtils.getProjectFrontendDir(config);\n@@ -159,6 +173,7 @@ public void stopDevModeHandler() {\n             devModeHandler.stop();\n             devModeHandler = null;\n         }\n+        shutdownExecutorService();\n         for (Command shutdownCommand : shutdownCommands) {\n             try {\n                 shutdownCommand.execute();\n@@ -231,4 +246,18 @@ public static boolean isDevModeAlreadyStarted(VaadinContext context) {\n     private static Logger getLogger() {\n         return LoggerFactory.getLogger(DevModeHandlerManagerImpl.class);\n     }\n+\n+    private static class InternalThreadFactory implements ThreadFactory {\n+        private final AtomicInteger threadNumber = new AtomicInteger(1);\n+\n+        @Override\n+        public Thread newThread(Runnable runnable) {\n+            String threadName = \"vaadin-dev-server-\"\n+                    + threadNumber.getAndIncrement();\n+            Thread thread = new Thread(runnable, threadName);\n+            thread.setDaemon(true);\n+            thread.setPriority(Thread.NORM_PRIORITY);\n+            return thread;\n+        }\n+    }\n }\n\ndiff --git a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/startup/DevModeInitializer.java b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/startup/DevModeInitializer.java\nindex 6b7da24ee24..e2cfd862a38 100644\n--- a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/startup/DevModeInitializer.java\n+++ b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/startup/DevModeInitializer.java\n@@ -39,6 +39,8 @@\n import java.util.Set;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.CompletionException;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ForkJoinPool;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n@@ -74,9 +76,6 @@\n import com.vaadin.flow.server.startup.VaadinInitializerException;\n import com.vaadin.pro.licensechecker.LicenseChecker;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-\n import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n import static com.vaadin.flow.server.Constants.PROJECT_FRONTEND_GENERATED_DIR_TOKEN;\n import static com.vaadin.flow.server.Constants.VAADIN_SERVLET_RESOURCES;\n@@ -169,6 +168,12 @@ private static Set<String> calculateApplicableClassNames() {\n     /**\n      * Initialize the devmode server if not in production mode or compatibility\n      * mode.\n+     * <p>\n+     * </p>\n+     * Uses common ForkJoin pool to execute asynchronous tasks. It is\n+     * recommended to use\n+     * {@link #initDevModeHandler(Set, VaadinContext, Executor)} and provide a a\n+     * custom executor if initialization starts long-running tasks.\n      *\n      * @param classes\n      *            classes to check for npm- and js modules\n@@ -179,9 +184,34 @@ private static Set<String> calculateApplicableClassNames() {\n      *\n      * @throws VaadinInitializerException\n      *             if dev mode can't be initialized\n+     * @deprecated use {@link #initDevModeHandler(Set, VaadinContext, Executor)}\n+     *             providing a custom executor.\n      */\n+    @Deprecated(forRemoval = true)\n     public static DevModeHandler initDevModeHandler(Set<Class<?>> classes,\n             VaadinContext context) throws VaadinInitializerException {\n+        return initDevModeHandler(classes, context, ForkJoinPool.commonPool());\n+    }\n+\n+    /**\n+     * Initialize the devmode server if not in production mode or compatibility\n+     * mode.\n+     *\n+     * @param classes\n+     *            classes to check for npm- and js modules\n+     * @param context\n+     *            VaadinContext we are running in\n+     * @param taskExecutor\n+     *            the executor to use for asynchronous execution\n+     * @return the initialized dev mode handler or {@code null} if none was\n+     *         created\n+     *\n+     * @throws VaadinInitializerException\n+     *             if dev mode can't be initialized\n+     */\n+    public static DevModeHandler initDevModeHandler(Set<Class<?>> classes,\n+            VaadinContext context, Executor taskExecutor)\n+            throws VaadinInitializerException {\n \n         ApplicationConfiguration config = ApplicationConfiguration.get(context);\n         if (config.isProductionMode()) {\n@@ -317,7 +347,7 @@ public static DevModeHandler initDevModeHandler(Set<Class<?>> classes,\n         };\n \n         CompletableFuture<Void> nodeTasksFuture = CompletableFuture\n-                .runAsync(runnable);\n+                .runAsync(runnable, taskExecutor);\n \n         Lookup devServerLookup = Lookup.compose(lookup,\n                 Lookup.of(config, ApplicationConfiguration.class));\n",
    "test_patch": "diff --git a/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java b/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java\nindex ec072787948..ad32d5a2a86 100644\n--- a/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java\n+++ b/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java\n@@ -79,6 +79,7 @@ protected Stream<String> getExcludedPatterns() {\n                 \"com\\\\.vaadin\\\\.base\\\\.devserver\\\\.DebugWindowConnection\",\n                 \"com\\\\.vaadin\\\\.base\\\\.devserver\\\\.DebugWindowConnection\\\\$DevToolsInterfaceImpl\",\n                 \"com\\\\.vaadin\\\\.base\\\\.devserver\\\\.DevModeHandlerManagerImpl\",\n+                \"com\\\\.vaadin\\\\.base\\\\.devserver\\\\.DevModeHandlerManagerImpl\\\\$InternalThreadFactory\",\n                 \"com\\\\.vaadin\\\\.base\\\\.devserver\\\\.DevServerWatchDog\",\n                 \"com\\\\.vaadin\\\\.base\\\\.devserver\\\\.DevServerWatchDog\\\\$WatchDogServer\",\n                 \"com\\\\.vaadin\\\\.base\\\\.devserver\\\\.DevToolsInterface\",\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20785",
    "pr_id": 20785,
    "issue_id": 20784,
    "repo": "vaadin/flow",
    "problem_statement": "java.lang.NumberFormatException: For input string: \"0) applewebkit/537\"\n### Description of the bug\n\nI upgraded to Vaadin 24.6.0 and now often see the following ERROR in the logs:\r\n\r\n```\r\n2024-12-24T20:57:55.480+02:00 ERROR 2300975 --- [XNIO-1 task-3] com.vaadin.flow.shared.BrowserDetails    : OS minor version parsing failed for: 0) applewebkit/537\r\nWith userAgent: mozilla/5.0 (linux; android 5.0) applewebkit/537.36 (khtml, like gecko) mobile safari/537.36 (compatible; bytespider; spider-feedback@bytedance.com)\r\n\r\njava.lang.NumberFormatException: For input string: \"0) applewebkit/537\"\r\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67) ~[na:na]\r\n\tat java.base/java.lang.Integer.parseInt(Integer.java:668) ~[na:na]\r\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786) ~[na:na]\r\n\tat com.vaadin.flow.shared.BrowserDetails.parseVersionPart(BrowserDetails.java:450) ~[flow-server-24.6.0.jar!/:24.6.0]\r\n\tat com.vaadin.flow.shared.BrowserDetails.parseOsVersion(BrowserDetails.java:395) ~[flow-server-24.6.0.jar!/:24.6.0]\r\n\tat com.vaadin.flow.shared.BrowserDetails.parseAndroidVersion(BrowserDetails.java:365) ~[flow-server-24.6.0.jar!/:24.6.0]\r\n\tat com.vaadin.flow.shared.BrowserDetails.<init>(BrowserDetails.java:260) ~[flow-server-24.6.0.jar!/:24.6.0]\r\n\tat com.vaadin.flow.server.WebBrowser$1.<init>(WebBrowser.java:70) ~[flow-server-24.6.0.jar!/:24.6.0]\r\n\tat com.vaadin.flow.server.WebBrowser.<init>(WebBrowser.java:70) ~[flow-server-24.6.0.jar!/:24.6.0]\r\n\tat com.vaadin.flow.server.VaadinService.createAndRegisterSession(VaadinService.java:1015) ~[flow-server-24.6.0.jar!/:24.6.0]\r\n\tat com.vaadin.flow.server.VaadinService.doFindOrCreateVaadinSession(VaadinService.java:979) ~[flow-server-24.6.0.jar!/:24.6.0]\r\n\tat com.vaadin.flow.server.VaadinService.findOrCreateVaadinSession(VaadinService.java:921) ~[flow-server-24.6.0.jar!/:24.6.0]\r\n\tat com.vaadin.flow.server.VaadinService.findVaadinSession(VaadinService.java:760) ~[flow-server-24.6.0.jar!/:24.6.0]\r\n\tat com.vaadin.flow.server.VaadinService.handleRequest(VaadinService.java:1658) ~[flow-server-24.6.0.jar!/:24.6.0]\r\n\tat com.vaadin.flow.server.VaadinServlet.service(VaadinServlet.java:398) ~[flow-server-24.6.0.jar!/:24.6.0]\r\n\tat com.vaadin.flow.spring.SpringServlet.service(SpringServlet.java:106) ~[vaadin-spring-24.6.0.jar!/:na]\r\n\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:614) ~[jakarta.servlet-api-6.0.0.jar!/:6.0.0]\r\n\tat io.undertow.servlet.handlers.ServletHandler.handleRequest(ServletHandler.java:74) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:62) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.handlers.ServletChain$1.handleRequest(ServletChain.java:68) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:36) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.handlers.RedirectDirHandler.handleRequest(RedirectDirHandler.java:68) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) ~[undertow-core-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) ~[undertow-core-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:258) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.handlers.ServletInitialHandler.dispatchToServlet(ServletInitialHandler.java:193) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.spec.RequestDispatcherImpl.forwardImpl(RequestDispatcherImpl.java:187) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.spec.RequestDispatcherImpl.forwardImplSetup(RequestDispatcherImpl.java:137) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.spec.RequestDispatcherImpl.forward(RequestDispatcherImpl.java:100) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat org.springframework.web.servlet.mvc.ServletForwardingController.handleRequestInternal(ServletForwardingController.java:142) ~[spring-webmvc-6.1.14.jar!/:6.1.14]\r\n\tat org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:178) ~[spring-webmvc-6.1.14.jar!/:6.1.14]\r\n\tat org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:51) ~[spring-webmvc-6.1.14.jar!/:6.1.14]\r\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.1.14.jar!/:6.1.14]\r\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.1.14.jar!/:6.1.14]\r\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.1.14.jar!/:6.1.14]\r\n\tat org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903) ~[spring-webmvc-6.1.14.jar!/:6.1.14]\r\n\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:527) ~[jakarta.servlet-api-6.0.0.jar!/:6.0.0]\r\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.1.14.jar!/:6.1.14]\r\n\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:614) ~[jakarta.servlet-api-6.0.0.jar!/:6.0.0]\r\n\tat io.undertow.servlet.handlers.ServletHandler.handleRequest(ServletHandler.java:74) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:129) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.websockets.jsr.JsrWebSocketFilter.doFilter(JsrWebSocketFilter.java:172) ~[undertow-websockets-jsr-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:67) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat com.example.ui.filter.LocaleFilter.doFilter(LocaleFilter.java:36) ~[!/:0.0.1]\r\n\tat io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:67) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108) ~[spring-web-6.1.14.jar!/:6.1.14]\r\n\tat org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:151) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:129) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(OAuth2AuthorizationRequestRedirectFilter.java:198) ~[spring-security-oauth2-client-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.14.jar!/:6.1.14]\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.security.web.csrf.CsrfFilter.doFilterInternal(CsrfFilter.java:117) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.14.jar!/:6.1.14]\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.14.jar!/:6.1.14]\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.14.jar!/:6.1.14]\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.14.jar!/:6.1.14]\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191) ~[spring-security-web-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.1.14.jar!/:6.1.14]\r\n\tat org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195) ~[spring-webmvc-6.1.14.jar!/:6.1.14]\r\n\tat org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.1.14.jar!/:6.1.14]\r\n\tat org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74) ~[spring-web-6.1.14.jar!/:6.1.14]\r\n\tat org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230) ~[spring-security-config-6.3.4.jar!/:6.3.4]\r\n\tat org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362) ~[spring-web-6.1.14.jar!/:6.1.14]\r\n\tat org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278) ~[spring-web-6.1.14.jar!/:6.1.14]\r\n\tat io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:67) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.1.14.jar!/:6.1.14]\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.14.jar!/:6.1.14]\r\n\tat io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:67) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.1.14.jar!/:6.1.14]\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.14.jar!/:6.1.14]\r\n\tat io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:67) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.1.14.jar!/:6.1.14]\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.14.jar!/:6.1.14]\r\n\tat io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:67) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.handlers.FilterHandler.handleRequest(FilterHandler.java:84) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:62) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.handlers.ServletChain$1.handleRequest(ServletChain.java:68) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:36) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.handlers.RedirectDirHandler.handleRequest(RedirectDirHandler.java:68) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(SSLInformationAssociationHandler.java:117) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(ServletAuthenticationCallHandler.java:57) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) ~[undertow-core-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(AbstractConfidentialityHandler.java:46) ~[undertow-core-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(ServletConfidentialityConstraintHandler.java:64) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.security.handlers.AuthenticationMechanismsHandler.handleRequest(AuthenticationMechanismsHandler.java:60) ~[undertow-core-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler.handleRequest(CachedAuthenticatedSessionHandler.java:77) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.security.handlers.AbstractSecurityContextAssociationHandler.handleRequest(AbstractSecurityContextAssociationHandler.java:43) ~[undertow-core-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) ~[undertow-core-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.handlers.SendErrorPageHandler.handleRequest(SendErrorPageHandler.java:52) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) ~[undertow-core-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:276) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:135) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:132) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1.call(ServletRequestContextThreadSetupAction.java:48) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.core.ContextClassLoaderSetupAction$1.call(ContextClassLoaderSetupAction.java:43) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:256) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:101) ~[undertow-servlet-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.server.Connectors.executeRootHandler(Connectors.java:395) ~[undertow-core-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:859) ~[undertow-core-2.3.17.Final.jar!/:2.3.17.Final]\r\n\tat org.jboss.threads.ContextHandler$1.runWith(ContextHandler.java:18) ~[jboss-threads-3.5.0.Final.jar!/:3.5.0.Final]\r\n\tat org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2513) ~[jboss-threads-3.5.0.Final.jar!/:3.5.0.Final]\r\n\tat org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1538) ~[jboss-threads-3.5.0.Final.jar!/:3.5.0.Final]\r\n\tat org.xnio.XnioWorker$WorkerThreadFactory$1$1.run(XnioWorker.java:1282) ~[xnio-api-3.8.16.Final.jar!/:3.8.16.Final]\r\n\tat java.base/java.lang.Thread.run(Thread.java:840) ~[na:na]\r\n\r\n\r\n```\n\n### Expected behavior\n\nno errors\n\n### Minimal reproducible example\n\nn/a\n\n### Versions\n\n- Vaadin / Flow version: 24.6.0\r\n",
    "issue_word_count": 3000,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/shared/BrowserDetails.java",
      "flow-server/src/test/java/com/vaadin/flow/shared/BrowserDetailsTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/shared/BrowserDetailsTest.java"
    ],
    "base_commit": "09439d332bc35c30ea4993f4294afeb55c46560c",
    "head_commit": "d64b8268f2d410ab60179dd0314d990f82ba3cb3",
    "repo_url": "https://github.com/vaadin/flow/pull/20785",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20785",
    "dockerfile": "",
    "pr_merged_at": "2025-01-02T05:43:28.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/shared/BrowserDetails.java b/flow-server/src/main/java/com/vaadin/flow/shared/BrowserDetails.java\nindex 1f20da5851b..3209e522244 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/shared/BrowserDetails.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/shared/BrowserDetails.java\n@@ -356,11 +356,25 @@ private void parseAndroidVersion(String userAgent) {\n             return;\n         }\n \n+        if (userAgent.contains(\"ddg_android/\")) {\n+            int startIndex = userAgent.indexOf(\"ddg_android/\");\n+            String osVersionString = safeSubstring(userAgent,\n+                    startIndex + \"ddg_android/\".length(),\n+                    userAgent.indexOf(' ', startIndex));\n+            String[] parts = osVersionString.split(\"\\\\.\");\n+            parseOsVersion(parts, userAgent);\n+            return;\n+        }\n+\n         String osVersionString = safeSubstring(userAgent,\n                 userAgent.indexOf(\"android \") + \"android \".length(),\n                 userAgent.length());\n-        osVersionString = safeSubstring(osVersionString, 0,\n-                osVersionString.indexOf(\";\"));\n+        int semicolonIndex = osVersionString.indexOf(\";\");\n+        int bracketIndex = osVersionString.indexOf(\")\");\n+        int endIndex = semicolonIndex != -1 && semicolonIndex < bracketIndex\n+                ? semicolonIndex\n+                : bracketIndex;\n+        osVersionString = safeSubstring(osVersionString, 0, endIndex);\n         String[] parts = osVersionString.split(\"\\\\.\");\n         parseOsVersion(parts, userAgent);\n     }\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/shared/BrowserDetailsTest.java b/flow-server/src/test/java/com/vaadin/flow/shared/BrowserDetailsTest.java\nindex 0db4e9e6677..1a57b339362 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/shared/BrowserDetailsTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/shared/BrowserDetailsTest.java\n@@ -113,6 +113,10 @@ public class BrowserDetailsTest extends TestCase {\n     private static final String FIREFOX_100_MACOS = \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:100.0) Gecko/20100101 Firefox/100.0\";\n     private static final String FIREFOX_100_LINUX = \"Mozilla/5.0 (X11; Linux x86_64; rv:100.0) Gecko/20100101 Firefox/100.0\";\n \n+    // Web crawlers and bots\n+    private static final String BYTE_SPIDER = \"mozilla/5.0 (linux; android 5.0) applewebkit/537.36 (khtml, like gecko) mobile safari/537.36 (compatible; bytespider; spider-feedback@bytedance.com)\";\n+    private static final String DUCK_DUCK_BOT = \"ddg_android/5.169.0 (com.duckduckgo.mobile.android; android api 33)\";\n+\n     public void testSafari3() {\n         BrowserDetails bd = new BrowserDetails(SAFARI3_WINDOWS);\n         assertWebKit(bd);\n@@ -737,6 +741,25 @@ public void testMobileUserAgents() throws IOException {\n         assertAgentDetails(agents);\n     }\n \n+    public void testByteSpiderWebCrawler() {\n+        BrowserDetails bd = new BrowserDetails(BYTE_SPIDER);\n+        assertWebKit(bd);\n+        assertSafari(bd);\n+        assertBrowserMajorVersion(bd, -1);\n+        assertBrowserMinorVersion(bd, -1);\n+        assertEngineVersion(bd, 537.36f);\n+        assertAndroid(bd, 5, 0);\n+    }\n+\n+    public void testDuckDuckBot() {\n+        BrowserDetails bd = new BrowserDetails(DUCK_DUCK_BOT);\n+        assertUnspecifiedBrowser(bd);\n+        assertBrowserMajorVersion(bd, -1);\n+        assertBrowserMinorVersion(bd, -1);\n+        assertEngineVersion(bd, -1);\n+        assertAndroid(bd, 5, 169);\n+    }\n+\n     private static UserAgent[] getUserAgentDetails(String agentFile)\n             throws IOException {\n         String userAgents = IOUtils.toString(\n@@ -920,6 +943,15 @@ private void assertEdge(BrowserDetails browserDetails) {\n         assertTrue(browserDetails.isEdge());\n     }\n \n+    private void assertUnspecifiedBrowser(BrowserDetails browserDetails) {\n+        assertFalse(browserDetails.isFirefox());\n+        assertFalse(browserDetails.isChrome());\n+        assertFalse(browserDetails.isIE());\n+        assertFalse(browserDetails.isOpera());\n+        assertFalse(browserDetails.isSafari());\n+        assertFalse(browserDetails.isEdge());\n+    }\n+\n     private void assertMacOSX(BrowserDetails browserDetails) {\n         assertFalse(browserDetails.isLinux());\n         assertFalse(browserDetails.isWindows());\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20778",
    "pr_id": 20778,
    "issue_id": 16668,
    "repo": "vaadin/flow",
    "problem_statement": "Remove dead codes.\n### Description of the bug\r\n\r\nI believe there are some opportunities to remove unused codes.\r\n\r\nSimilar to this PR (removed dead codes which I have observed accidentally)\r\n- https://github.com/vaadin/flow/pull/16665\r\n\r\nThis dead code was blocking to update to the newest 4.9.0 selenium (and to any new selenium versions after this).\r\nTests can be a low-hanging fruit, but maybe there are some other utils or other classes which are easier to remove dead code.\r\n\r\nShort analysis executed shown 562 opportunities:\r\n<img width=\"684\" alt=\"image\" src=\"https://user-images.githubusercontent.com/61667986/233798559-d0c2047e-54ca-4994-b017-12ef279518ac.png\">\r\n\r\n\r\nProbably not all of them can be removed as some of them are part of abstract classes which used elsewhere, but these methods for example could be removed:\r\n\r\n```\r\n\r\nGwtEventHandlerTest.assertPolymerMethods\r\n\r\nJsonUtilsTest\r\n.createNumberStreamForNull()\r\n.createObjectStreamForNull()\r\n.createStreamForNull()\r\n```\r\n\r\nAnd so on...\r\n\r\n\r\n\r\n### Expected behavior\r\n\r\nThe repository could contain fewer unused code lines, which makes:\r\n- dependency addition, removal, bumping,\r\n- refactoring, changes also easier,\r\n- and just to overview understand the logic, code base better as code is simplified a bit.\r\n- potentially builds/compilation time can be faster if we remove a lot of dead codes, although by not much probably :D\r\n\r\n\r\n### Minimal reproducible example\r\n\r\nIn IntelliJ:\r\n Analyze | Run Inspection by Name... | Unused declaration.\r\n (Potentially worth to add Test regexp or Util regexp, as there will be more false positives otherwise)\r\n\r\n### Versions\r\n\r\n- Vaadin / Flow version: latest\r\n",
    "issue_word_count": 235,
    "test_files_count": 2,
    "non_test_files_count": 20,
    "pr_changed_files": [
      "flow-client/src/test-gwt/java/com/vaadin/client/flow/GwtEventHandlerTest.java",
      "flow-server/src/main/java/com/vaadin/flow/dom/ChildElementConsumer.java",
      "flow-server/src/main/java/com/vaadin/flow/dom/Node.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/menu/MenuRegistry.java",
      "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementPropertyMap.java",
      "flow-server/src/main/java/com/vaadin/flow/router/AbstractRouteNotFoundError.java",
      "flow-server/src/main/java/com/vaadin/flow/server/AppShellRegistry.java",
      "flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/PushHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/MapSyncRpcHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/dau/DAUVaadinRequestInterceptor.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskCopyTemplateFiles.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGeneratePWAIcons.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateTsConfig.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunDevBundleBuild.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonFilter.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FullDependenciesScanner.java",
      "flow-server/src/main/java/com/vaadin/flow/server/startup/ServletDeployer.java",
      "flow-server/src/main/java/com/vaadin/flow/server/webcomponent/WebComponentGenerator.java",
      "flow-server/src/test/java/com/vaadin/flow/internal/JsonUtilsTest.java"
    ],
    "pr_changed_test_files": [
      "flow-client/src/test-gwt/java/com/vaadin/client/flow/GwtEventHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/internal/JsonUtilsTest.java"
    ],
    "base_commit": "09439d332bc35c30ea4993f4294afeb55c46560c",
    "head_commit": "75ee8d3d76d0204794f65a8976cfabec99b43e26",
    "repo_url": "https://github.com/vaadin/flow/pull/20778",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20778",
    "dockerfile": "",
    "pr_merged_at": "2024-12-27T10:35:25.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/dom/ChildElementConsumer.java b/flow-server/src/main/java/com/vaadin/flow/dom/ChildElementConsumer.java\nindex 23ce831b283..b5496df8054 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/dom/ChildElementConsumer.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/dom/ChildElementConsumer.java\n@@ -22,8 +22,6 @@\n  * Callback which allows to handle request to map a client side DOM element to\n  * the server {@link Element} instance.\n  *\n- * @see Node#attachExistingElement(String, Element, ChildElementConsumer)\n- *\n  * @author Vaadin Ltd\n  * @since 1.0\n  *\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/dom/Node.java b/flow-server/src/main/java/com/vaadin/flow/dom/Node.java\nindex 89716639b4f..8d43d0ebbcb 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/dom/Node.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/dom/Node.java\n@@ -596,40 +596,4 @@ protected void ensureChildHasParent(Element child, boolean internalCheck) {\n             }\n         }\n     }\n-\n-    /**\n-     * Attaches a child element with the given {@code tagName} which is the next\n-     * sibling for the {@code previousSibling}.\n-     * <p>\n-     * The {@code previousSibling} parameter value can be {@code null} which\n-     * means that the very first child with the given {@code tagName} will be\n-     * used to attach (if any).\n-     * <p>\n-     * This method may be used to get a server side element for the client side\n-     * DOM element which has been created on the client side aside of the\n-     * server.\n-     * <p>\n-     * The element is not returned right away since it may not exist at all on\n-     * the client side and its index in the children list is unknown. The\n-     * provided {@code callback} is used instead to provide the mapped\n-     * server-side element in case it has been found or report an error if it\n-     * doesn't exist.\n-     * <p>\n-     * This API is experimental and disabled for public usage.\n-     *\n-     * @param tagName\n-     *            the tag name of the element to attach, not {@code null}\n-     * @param previousSibling\n-     *            previous sibling, may be {@code null}\n-     * @param callback\n-     *            the callback which will be invoked with a server side element\n-     *            instance or an error will be reported, not {@code null}\n-     * @return this element\n-     */\n-    private N attachExistingElement(String tagName, Element previousSibling,\n-            ChildElementConsumer callback) {\n-        getStateProvider().attachExistingElement(getNode(), tagName,\n-                previousSibling, callback);\n-        return getSelf();\n-    }\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/menu/MenuRegistry.java b/flow-server/src/main/java/com/vaadin/flow/internal/menu/MenuRegistry.java\nindex 64c29b0f18f..481870df3ad 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/menu/MenuRegistry.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/menu/MenuRegistry.java\n@@ -70,9 +70,6 @@\n  */\n public class MenuRegistry {\n \n-    private static final Logger log = LoggerFactory\n-            .getLogger(MenuRegistry.class);\n-\n     /**\n      * File routes lazy loading and caching.\n      */\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementPropertyMap.java b/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementPropertyMap.java\nindex 9134c611280..e272798a2ba 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementPropertyMap.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementPropertyMap.java\n@@ -200,7 +200,7 @@ protected Serializable remove(String key) {\n \n     @Override\n     protected boolean mayUpdateFromClient(String key, Serializable value) {\n-        return allowUpdateFromClient(key, value);\n+        return allowUpdateFromClient(key);\n     }\n \n     @Override\n@@ -212,7 +212,7 @@ protected boolean producePutChange(String key, boolean hadValueEarlier,\n         return super.producePutChange(key, hadValueEarlier, newValue);\n     }\n \n-    private boolean allowUpdateFromClient(String key, Serializable value) {\n+    private boolean allowUpdateFromClient(String key) {\n         AllowUpdate isAllowed = isUpdateFromClientAllowedBeforeFilter(key);\n         if (!AllowUpdate.NO_EXPLICIT_STATUS.equals(isAllowed)) {\n             return AllowUpdate.EXPLICITLY_ALLOW.equals(isAllowed);\n@@ -476,19 +476,18 @@ private static Logger getLogger() {\n \n     /**\n      * The method first checks whether the update from client is allowed using\n-     * the method {@link #allowUpdateFromClient(String, Serializable)}. Then if\n-     * it's not allowed then it either throws or returns NO OPERATION runnable\n-     * in case if {@link #updateFromClientFilter} disallows the update (in this\n-     * case it's just an application business logic and we should not throw).\n+     * the method {@link #allowUpdateFromClient(String)}. Then if it's not\n+     * allowed then it either throws or returns NO OPERATION runnable in case if\n+     * {@link #updateFromClientFilter} disallows the update (in this case it's\n+     * just an application business logic and we should not throw).\n      *\n-     * The logic inside the {@link #allowUpdateFromClient(String, Serializable)}\n-     * check block repeats its own logic to make sure that:\n+     * The logic inside the {@link #allowUpdateFromClient(String)} check block\n+     * repeats its own logic to make sure that:\n      * <ul>\n-     * <li>It's in sync with\n-     * {@link #allowUpdateFromClient(String, Serializable)} (and\n+     * <li>It's in sync with {@link #allowUpdateFromClient(String)} (and\n      * {@link #mayUpdateFromClient(String, Serializable)}\n      * <li>The update is disallowed by the filter (and not some other checks\n-     * that are inside {@link #allowUpdateFromClient(String, Serializable)}\n+     * that are inside {@link #allowUpdateFromClient(String)}\n      * <ul>\n      *\n      * Here is the logic flow:\n@@ -555,7 +554,7 @@ private Runnable doDeferredUpdateFromClient(String key, Serializable value)\n         // Use private <code>allowUpdateFromClient</code> method instead of\n         // <code>mayUpdateFromClient</code> which may be overridden\n         // The logic below\n-        if (!allowUpdateFromClient(key, value)) {\n+        if (!allowUpdateFromClient(key)) {\n             if (isDisallowedByFilter(key)) {\n                 return () -> {\n                     // nop\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/router/AbstractRouteNotFoundError.java b/flow-server/src/main/java/com/vaadin/flow/router/AbstractRouteNotFoundError.java\nindex 76e772f98d0..f2ea253d07b 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/router/AbstractRouteNotFoundError.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/router/AbstractRouteNotFoundError.java\n@@ -131,12 +131,12 @@ private String getRoutes(BeforeEnterEvent event) {\n         routeTemplates.forEach(\n                 (k, v) -> routeElements.add(routeTemplateToHtml(k, v)));\n \n-        routeElements.addAll(getClientRoutes(event));\n+        routeElements.addAll(getClientRoutes());\n         return routeElements.stream().map(Element::outerHtml)\n                 .collect(Collectors.joining());\n     }\n \n-    private List<Element> getClientRoutes(BeforeEnterEvent event) {\n+    private List<Element> getClientRoutes() {\n         return FrontendUtils.getClientRoutes().stream()\n                 .filter(route -> !route.contains(\"$layout\"))\n                 .map(route -> route.replace(\"$index\", \"\"))\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/AppShellRegistry.java b/flow-server/src/main/java/com/vaadin/flow/server/AppShellRegistry.java\nindex e72876864f4..bde81ddd6d4 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/AppShellRegistry.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/AppShellRegistry.java\n@@ -36,7 +36,6 @@\n import com.vaadin.flow.component.page.Push;\n import com.vaadin.flow.component.page.TargetElement;\n import com.vaadin.flow.component.page.Viewport;\n-import com.vaadin.flow.di.Lookup;\n import com.vaadin.flow.router.PageTitle;\n import com.vaadin.flow.theme.Theme;\n \n@@ -72,8 +71,6 @@ public class AppShellRegistry implements Serializable {\n \n     private Class<? extends AppShellConfigurator> appShellClass;\n \n-    private final Lookup lookup;\n-\n     /**\n      * A wrapper class for storing the {@link AppShellRegistry} instance in the\n      * servlet context.\n@@ -92,8 +89,7 @@ public AppShellRegistryWrapper(AppShellRegistry registry) {\n         }\n     }\n \n-    private AppShellRegistry(VaadinContext context) {\n-        this.lookup = context.getAttribute(Lookup.class);\n+    private AppShellRegistry() {\n     }\n \n     /**\n@@ -109,8 +105,7 @@ public static AppShellRegistry getInstance(VaadinContext context) {\n             AppShellRegistryWrapper attribute = context\n                     .getAttribute(AppShellRegistryWrapper.class);\n             if (attribute == null) {\n-                attribute = new AppShellRegistryWrapper(\n-                        new AppShellRegistry(context));\n+                attribute = new AppShellRegistryWrapper(new AppShellRegistry());\n                 context.setAttribute(attribute);\n             }\n             return attribute.registry;\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java b/flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java\nindex 6e2a69194ef..128b6963fea 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java\n@@ -105,12 +105,11 @@ protected Properties createInitParameters(Class<?> systemPropertyBaseClass,\n             }\n         }\n \n-        readBuildInfo(initParameters, vaadinConfig.getVaadinContext());\n+        readBuildInfo(initParameters);\n         return initParameters;\n     }\n \n-    private void readBuildInfo(Properties initParameters,\n-            VaadinContext context) {\n+    private void readBuildInfo(Properties initParameters) {\n         String json = getTokenFileContent(initParameters::getProperty);\n         // Read the json and set the appropriate system properties if not\n         // already set.\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java\nindex 36e3bfe1127..1d22fedf738 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java\n@@ -226,7 +226,7 @@ private static void addDevBundleTheme(Document document,\n     }\n \n     private void applyThemeVariant(Document indexDocument,\n-            VaadinContext context) throws IOException {\n+            VaadinContext context) {\n         ThemeUtils.getThemeAnnotation(context).ifPresent(theme -> {\n             String variant = theme.variant();\n             if (!variant.isEmpty()) {\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/PushHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/PushHandler.java\nindex 06b0965b91f..e7ebe18d306 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/PushHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/PushHandler.java\n@@ -545,8 +545,7 @@ private static UI findUiUsingResource(AtmosphereResource resource,\n      *            The atmosphere resource to send refresh to\n      *\n      */\n-    private static void sendRefreshAndDisconnect(AtmosphereResource resource)\n-            throws IOException {\n+    private static void sendRefreshAndDisconnect(AtmosphereResource resource) {\n         sendNotificationAndDisconnect(resource, VaadinService\n                 .createCriticalNotificationJSON(null, null, null, null));\n     }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/MapSyncRpcHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/MapSyncRpcHandler.java\nindex eb41a716f02..9254039bf3b 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/MapSyncRpcHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/MapSyncRpcHandler.java\n@@ -93,15 +93,13 @@ protected Optional<Runnable> handleNode(StateNode node,\n                 .reduce(DisabledUpdateMode::mostPermissive).orElse(null);\n \n         if (isEnabled) {\n-            return enqueuePropertyUpdate(node, invocationJson, feature,\n-                    property);\n+            return enqueuePropertyUpdate(node, invocationJson, property);\n         } else if (DisabledUpdateMode.ALWAYS.equals(updateMode)) {\n             LoggerFactory.getLogger(MapSyncRpcHandler.class).trace(\n                     \"Property update request for disabled element is received from the client side. \"\n                             + \"Change will be applied since the property '{}' always allows its update.\",\n                     property);\n-            return enqueuePropertyUpdate(node, invocationJson, feature,\n-                    property);\n+            return enqueuePropertyUpdate(node, invocationJson, property);\n         } else {\n             final Logger logger = LoggerFactory\n                     .getLogger(MapSyncRpcHandler.class);\n@@ -124,8 +122,7 @@ protected Optional<Runnable> handleNode(StateNode node,\n     }\n \n     private Optional<Runnable> enqueuePropertyUpdate(StateNode node,\n-            JsonObject invocationJson, Class<? extends NodeFeature> feature,\n-            String property) {\n+            JsonObject invocationJson, String property) {\n         Serializable value = JsonCodec.decodeWithoutTypeInfo(\n                 invocationJson.get(JsonConstants.RPC_PROPERTY_VALUE));\n \n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/dau/DAUVaadinRequestInterceptor.java b/flow-server/src/main/java/com/vaadin/flow/server/dau/DAUVaadinRequestInterceptor.java\nindex 946defddee2..3c08eed80ce 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/dau/DAUVaadinRequestInterceptor.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/dau/DAUVaadinRequestInterceptor.java\n@@ -25,7 +25,6 @@ public class DAUVaadinRequestInterceptor implements VaadinRequestInterceptor,\n \n     private final String applicationName;\n     private final UserIdentitySupplier userIdentitySupplier;\n-    private final DAUCustomizer dauCustomizer;\n \n     public DAUVaadinRequestInterceptor(\n             DeploymentConfiguration deploymentConfiguration,\n@@ -34,7 +33,6 @@ public DAUVaadinRequestInterceptor(\n         this.userIdentitySupplier = dauCustomizer != null\n                 ? dauCustomizer.getUserIdentitySupplier()\n                 : null;\n-        this.dauCustomizer = dauCustomizer;\n     }\n \n     @Override\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java\nindex 21f6f0fa1f6..67d8763f1e9 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java\n@@ -583,11 +583,8 @@ protected void generateVersionsJson(JsonObject packageJson)\n      * defined packages.\n      *\n      * @return versions Json based on package.json\n-     * @throws IOException\n-     *             If reading package.json fails\n      */\n-    private JsonObject generateVersionsFromPackageJson(JsonObject packageJson)\n-            throws IOException {\n+    private JsonObject generateVersionsFromPackageJson(JsonObject packageJson) {\n         JsonObject versionsJson = Json.createObject();\n         // if we don't have versionsJson lock package dependency versions.\n         final JsonObject dependencies = packageJson.getObject(DEPENDENCIES);\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskCopyTemplateFiles.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskCopyTemplateFiles.java\nindex 93a41c70b66..3be0e1b456e 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskCopyTemplateFiles.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskCopyTemplateFiles.java\n@@ -107,8 +107,4 @@ private String getJsModuleAnnotationValue(Annotation jsmAnnotation)\n             throw new ExecutionFailedException(e);\n         }\n     }\n-\n-    Logger log() {\n-        return LoggerFactory.getLogger(getClass());\n-    }\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGeneratePWAIcons.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGeneratePWAIcons.java\nindex 52a0cbbead2..60e2af8cdb9 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGeneratePWAIcons.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGeneratePWAIcons.java\n@@ -182,13 +182,6 @@ private CompletableFuture<?> generateIcon(InternalPwaIcon icon) {\n         });\n     }\n \n-    private BufferedImage getBaseImage(URL logo) throws IOException {\n-        URLConnection logoResource = logo != null ? logo.openConnection()\n-                : BootstrapHandler.class.getResource(\"default-logo.png\")\n-                        .openConnection();\n-        return ImageIO.read(logoResource.getInputStream());\n-    }\n-\n     private static class InternalPwaIcon extends PwaIcon {\n         private final BufferedImage baseImage;\n \n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateTsConfig.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateTsConfig.java\nindex 256468962fe..d8b5eae9aa1 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateTsConfig.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateTsConfig.java\n@@ -174,7 +174,7 @@ protected boolean shouldGenerate() {\n         return !getGeneratedFile().exists();\n     }\n \n-    private void overrideIfObsolete() throws ExecutionFailedException {\n+    private void overrideIfObsolete() {\n         try {\n             // Project's TS config\n             File projectTsConfigFile = new File(\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunDevBundleBuild.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunDevBundleBuild.java\nindex b260781858e..9be2a712008 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunDevBundleBuild.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunDevBundleBuild.java\n@@ -22,9 +22,7 @@\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collections;\n import java.util.List;\n-import java.util.Map;\n import java.util.stream.Collectors;\n \n import org.apache.commons.io.FileUtils;\n@@ -98,8 +96,7 @@ public void execute() throws ExecutionFailedException {\n         getLogger().info(\n                 \"Creating a new development mode bundle. This can take a while but will only run when the project setup is changed, addons are added or frontend files are modified\");\n \n-        runFrontendBuildTool(\"Vite\", \"vite/bin/vite.js\", Collections.emptyMap(),\n-                \"build\");\n+        runFrontendBuildTool(\"Vite\", \"vite/bin/vite.js\", \"build\");\n \n         copyPackageLockToBundleFolder();\n \n@@ -111,8 +108,7 @@ private static Logger getLogger() {\n     }\n \n     private void runFrontendBuildTool(String toolName, String executable,\n-            Map<String, String> environment, String... params)\n-            throws ExecutionFailedException {\n+            String... params) throws ExecutionFailedException {\n         Logger logger = getLogger();\n \n         FrontendToolsSettings settings = new FrontendToolsSettings(\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonFilter.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonFilter.java\nindex 3e603f3a52d..4f9914b04e9 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonFilter.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonFilter.java\n@@ -33,7 +33,6 @@\n class VersionsJsonFilter {\n \n     private final JsonObject userManagedDependencies;\n-    private final JsonObject vaadinVersions;\n \n     private final String dependenciesKey;\n \n@@ -42,7 +41,6 @@ class VersionsJsonFilter {\n     VersionsJsonFilter(JsonObject packageJson, String dependenciesKey) {\n         this.dependenciesKey = dependenciesKey;\n         userManagedDependencies = collectUserManagedDependencies(packageJson);\n-        vaadinVersions = collectFrameworkVersions(packageJson);\n     }\n \n     /**\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FullDependenciesScanner.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FullDependenciesScanner.java\nindex 3f154b00fdd..420f64690a2 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FullDependenciesScanner.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FullDependenciesScanner.java\n@@ -81,19 +81,6 @@ class FullDependenciesScanner extends AbstractDependenciesScanner {\n \n     private final SerializableBiFunction<Class<?>, Class<? extends Annotation>, List<? extends Annotation>> annotationFinder;\n \n-    /**\n-     * Creates a new scanner instance which discovers all dependencies in the\n-     * classpath.\n-     *\n-     * @param finder\n-     *            a class finder\n-     * @param featureFlags\n-     *            available feature flags and their status\n-     */\n-    FullDependenciesScanner(ClassFinder finder, FeatureFlags featureFlags) {\n-        this(finder, AnnotationReader::getAnnotationsFor, featureFlags, true);\n-    }\n-\n     /**\n      * Creates a new scanner instance which discovers all dependencies in the\n      * classpath.\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/startup/ServletDeployer.java b/flow-server/src/main/java/com/vaadin/flow/server/startup/ServletDeployer.java\nindex ea03327d8c8..2dc6ba8f4d6 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/startup/ServletDeployer.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/startup/ServletDeployer.java\n@@ -39,7 +39,6 @@\n import com.vaadin.flow.server.VaadinServlet;\n import com.vaadin.flow.server.VaadinServletConfig;\n import com.vaadin.flow.server.VaadinServletContext;\n-import com.vaadin.flow.server.frontend.FrontendUtils;\n \n /**\n  * Context listener that automatically registers Vaadin servlets.\n@@ -161,11 +160,11 @@ public void contextInitialized(ServletContextEvent sce) {\n                 ? createAppServlet(context)\n                 : null;\n \n-        logServletCreation(servletCreation, context, productionMode);\n+        logServletCreation(servletCreation, productionMode);\n     }\n \n     private void logServletCreation(VaadinServletCreation servletCreation,\n-            ServletContext servletContext, boolean productionMode) {\n+            boolean productionMode) {\n         Logger logger = getLogger();\n \n         if (servletCreation == null || productionMode) {\n@@ -180,8 +179,6 @@ private void logServletCreation(VaadinServletCreation servletCreation,\n             logger.warn(servletCreationMessage);\n         } else {\n             logger.info(servletCreationMessage);\n-            ServletRegistration vaadinServlet = findVaadinServlet(\n-                    servletContext);\n         }\n     }\n \n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/webcomponent/WebComponentGenerator.java b/flow-server/src/main/java/com/vaadin/flow/server/webcomponent/WebComponentGenerator.java\nindex 0915a6f181e..dbf3b22beef 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/webcomponent/WebComponentGenerator.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/webcomponent/WebComponentGenerator.java\n@@ -50,7 +50,6 @@ public class WebComponentGenerator {\n     private static final String TOKEN_ATTRIBUTE_NAME = \"_AttributeName_\";\n     private static final String TOKEN_CHANGE_EVENT_NAME = \"_ChangeEventName_\";\n     private static final String TOKEN_PROPERTY_NAME = \"_PropertyName_\";\n-    private static final String HTML_TEMPLATE = \"webcomponent-template.html\";\n     private static final String JS_TEMPLATE = \"webcomponent-template.js\";\n     private static final String SCRIPT_TEMPLATE = \"webcomponent-script-template.js\";\n     private static final String CODE_PROPERTY_DEFAULT = \"webcomponent-property-default.js\";\n",
    "test_patch": "diff --git a/flow-client/src/test-gwt/java/com/vaadin/client/flow/GwtEventHandlerTest.java b/flow-client/src/test-gwt/java/com/vaadin/client/flow/GwtEventHandlerTest.java\nindex 562bc6b5428..86f9ec59179 100644\n--- a/flow-client/src/test-gwt/java/com/vaadin/client/flow/GwtEventHandlerTest.java\n+++ b/flow-client/src/test-gwt/java/com/vaadin/client/flow/GwtEventHandlerTest.java\n@@ -254,12 +254,6 @@ private void assertPublishedMethods(Element element, String[] expected) {\n                 expected);\n     }\n \n-    private void assertPolymerMethods(Element element, String[] expected) {\n-        ServerEventObject object = WidgetUtil.crazyJsoCast(element);\n-        assertEventHandlerMethods(() -> getPublishedServerMethods(object),\n-                expected);\n-    }\n-\n     private void assertEventHandlerMethods(\n             Supplier<JsArray<String>> methodsProvider, String... expected) {\n         JsArray<String> publishedServerMethods = methodsProvider.get();\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/internal/JsonUtilsTest.java b/flow-server/src/test/java/com/vaadin/flow/internal/JsonUtilsTest.java\nindex 931fb873e7d..9d83a0a89ba 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/internal/JsonUtilsTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/internal/JsonUtilsTest.java\n@@ -136,18 +136,6 @@ public void collectEmptyStream() {\n         Assert.assertEquals(0, a.length());\n     }\n \n-    public void createObjectStreamForNull() {\n-        Assert.assertEquals(Stream.empty(), JsonUtils.objectStream(null));\n-    }\n-\n-    public void createNumberStreamForNull() {\n-        Assert.assertEquals(Stream.empty(), JsonUtils.numberStream(null));\n-    }\n-\n-    public void createStreamForNull() {\n-        Assert.assertEquals(Stream.empty(), JsonUtils.stream(null));\n-    }\n-\n     @Test\n     public void testStream() {\n         JsonArray array = createTestArray1();\n@@ -331,6 +319,7 @@ public static class ListAndMapBean {\n             childBeanList.add(secondChild);\n         }\n \n+        // these getters are needed for bean serialization:\n         public Map<String, Integer> getIntegerMap() {\n             return integerMap;\n         }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20749",
    "pr_id": 20749,
    "issue_id": 20507,
    "repo": "vaadin/flow",
    "problem_statement": "Client to queue request messages to server and resend them when needed\nClient should queue all send requests and only send the next after previous has received a response.\nServer always responds to the client message.\n\n- Create a queue for send(payload) requests that is then cleared by sendInvocationsToServer\n- First input to the queue is sent immediately, but only removed when the response is received\n- Add a timeout for resending the message if no response is gotten for an x amount of time.\n\nWe already have the ServerRpcQueue that queues invocations to be sent and are sent in order when MessageHandler has handled json and runs `processMessage` or in `handleJSON` when old package is received\n\nLooking at components at least SpreadSheet uses send directly:\n```\n        if (payload != null) {\n            getLogger().info(\"Re-sending last message to the server...\");\n            getConnection().getMessageSender().send(payload);\n        } else {\n```",
    "issue_word_count": 141,
    "test_files_count": 8,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "flow-client/src/main/java/com/vaadin/client/communication/MessageHandler.java",
      "flow-client/src/main/java/com/vaadin/client/communication/MessageSender.java",
      "flow-client/src/main/java/com/vaadin/client/communication/RequestResponseTracker.java",
      "flow-client/src/test/frontend/FlowTests.ts",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java",
      "flow-tests/pom.xml",
      "flow-tests/test-client-queue/pom.xml",
      "flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/CustomService.java",
      "flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/CustomServlet.java",
      "flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/CustomUidlRequestHandler.java",
      "flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/TestNoResponseView.java",
      "flow-tests/test-client-queue/src/test/java/com/vaadin/flow/misc/ui/NoResponseIT.java"
    ],
    "pr_changed_test_files": [
      "flow-client/src/test/frontend/FlowTests.ts",
      "flow-tests/pom.xml",
      "flow-tests/test-client-queue/pom.xml",
      "flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/CustomService.java",
      "flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/CustomServlet.java",
      "flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/CustomUidlRequestHandler.java",
      "flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/TestNoResponseView.java",
      "flow-tests/test-client-queue/src/test/java/com/vaadin/flow/misc/ui/NoResponseIT.java"
    ],
    "base_commit": "4688eb134edf882c05f6011f4e95311f71ec1cc3",
    "head_commit": "c604efb7902d54f0e9058f0ad14ab17129155b8d",
    "repo_url": "https://github.com/vaadin/flow/pull/20749",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20749",
    "dockerfile": "",
    "pr_merged_at": "2025-01-13T12:36:15.000Z",
    "patch": "diff --git a/flow-client/src/main/java/com/vaadin/client/communication/MessageHandler.java b/flow-client/src/main/java/com/vaadin/client/communication/MessageHandler.java\nindex 98533e45c1e..9963c03cbf0 100644\n--- a/flow-client/src/main/java/com/vaadin/client/communication/MessageHandler.java\n+++ b/flow-client/src/main/java/com/vaadin/client/communication/MessageHandler.java\n@@ -295,10 +295,10 @@ protected void handleJSON(final ValueMap valueMap) {\n         }\n \n         /**\n-         * Should only prepare resync after the if (locked ||\n+         * Should only prepare resync after the (locked ||\n          * !isNextExpectedMessage(serverId)) {...} since\n          * stateTree.repareForResync() will remove the nodes, and if locked is\n-         * true, it will return without handling the message, thus won't adding\n+         * true, it will return without handling the message, thus won't add\n          * nodes back.\n          *\n          * This is related to https://github.com/vaadin/flow/issues/8699 It\n\ndiff --git a/flow-client/src/main/java/com/vaadin/client/communication/MessageSender.java b/flow-client/src/main/java/com/vaadin/client/communication/MessageSender.java\nindex 6182fde8123..4c6e2c0c215 100644\n--- a/flow-client/src/main/java/com/vaadin/client/communication/MessageSender.java\n+++ b/flow-client/src/main/java/com/vaadin/client/communication/MessageSender.java\n@@ -15,7 +15,11 @@\n  */\n package com.vaadin.client.communication;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n import com.google.gwt.core.client.GWT;\n+import com.google.gwt.user.client.Timer;\n \n import com.vaadin.client.ConnectionIndicator;\n import com.vaadin.client.Console;\n@@ -67,6 +71,10 @@ public enum ResynchronizationState {\n \n     private JsonObject pushPendingMessage;\n \n+    private List<JsonObject> messageQueue = new ArrayList<>();\n+\n+    private Timer resendMessageTimer;\n+\n     /**\n      * Creates a new instance connected to the given registry.\n      *\n@@ -119,7 +127,10 @@ private void doSendInvocationsToServer() {\n             JsonObject payload = pushPendingMessage;\n             pushPendingMessage = null;\n             registry.getRequestResponseTracker().startRequest();\n-            send(payload);\n+            sendPayload(payload);\n+            return;\n+        } else if (hasQueuedMessages() && resendMessageTimer == null) {\n+            sendPayload(messageQueue.get(0));\n             return;\n         }\n \n@@ -146,6 +157,8 @@ private void doSendInvocationsToServer() {\n         if (resynchronizationState == ResynchronizationState.SEND_TO_SERVER) {\n             resynchronizationState = ResynchronizationState.WAITING_FOR_RESPONSE;\n             Console.warn(\"Resynchronizing from server\");\n+            messageQueue.clear();\n+            resetTimer();\n             extraJson.put(ApplicationConstants.RESYNCHRONIZE_ID, true);\n         }\n         if (showLoadingIndicator) {\n@@ -166,7 +179,6 @@ protected void send(final JsonArray reqInvocations,\n             final JsonObject extraJson) {\n         registry.getRequestResponseTracker().startRequest();\n         send(preparePayload(reqInvocations, extraJson));\n-\n     }\n \n     private JsonObject preparePayload(final JsonArray reqInvocations,\n@@ -177,10 +189,6 @@ private JsonObject preparePayload(final JsonArray reqInvocations,\n             payload.put(ApplicationConstants.CSRF_TOKEN, csrfToken);\n         }\n         payload.put(ApplicationConstants.RPC_INVOCATIONS, reqInvocations);\n-        payload.put(ApplicationConstants.SERVER_SYNC_ID,\n-                registry.getMessageHandler().getLastSeenServerSyncId());\n-        payload.put(ApplicationConstants.CLIENT_TO_SERVER_ID,\n-                clientToServerMessageId++);\n         if (extraJson != null) {\n             for (String key : extraJson.keys()) {\n                 JsonValue value = extraJson.get(key);\n@@ -192,12 +200,44 @@ private JsonObject preparePayload(final JsonArray reqInvocations,\n \n     /**\n      * Sends an asynchronous or synchronous UIDL request to the server using the\n-     * given URI.\n+     * given URI. Adds message to message queue and postpones sending if queue\n+     * not empty.\n      *\n      * @param payload\n      *            The contents of the request to send\n      */\n     public void send(final JsonObject payload) {\n+        if (hasQueuedMessages()) {\n+            messageQueue.add(payload);\n+            return;\n+        }\n+        messageQueue.add(payload);\n+        sendPayload(payload);\n+    }\n+\n+    /**\n+     * Sends an asynchronous or synchronous UIDL request to the server using the\n+     * given URI.\n+     *\n+     * @param payload\n+     *            The contents of the request to send\n+     */\n+    private void sendPayload(final JsonObject payload) {\n+        payload.put(ApplicationConstants.SERVER_SYNC_ID,\n+                registry.getMessageHandler().getLastSeenServerSyncId());\n+        // clientID should only be set and updated if payload doesn't contain\n+        // clientID. If one exists we are probably trying to resend.\n+        if (!payload.hasKey(ApplicationConstants.CLIENT_TO_SERVER_ID)) {\n+            payload.put(ApplicationConstants.CLIENT_TO_SERVER_ID,\n+                    clientToServerMessageId++);\n+        }\n+\n+        if (!registry.getRequestResponseTracker().hasActiveRequest()) {\n+            // Direct calls to send from outside probably have not started\n+            // request.\n+            registry.getRequestResponseTracker().startRequest();\n+        }\n+\n         if (push != null && push.isBidirectional()) {\n             // When using bidirectional transport, the payload is not resent\n             // to the server during reconnection attempts.\n@@ -211,6 +251,31 @@ public void send(final JsonObject payload) {\n         } else {\n             Console.debug(\"send XHR\");\n             registry.getXhrConnection().send(payload);\n+\n+            resetTimer();\n+            // resend last payload if response hasn't come in.\n+            resendMessageTimer = new Timer() {\n+                @Override\n+                public void run() {\n+                    resendMessageTimer\n+                            .schedule(registry.getApplicationConfiguration()\n+                                    .getMaxMessageSuspendTimeout() + 500);\n+                    if (!registry.getRequestResponseTracker()\n+                            .hasActiveRequest()) {\n+                        registry.getRequestResponseTracker().startRequest();\n+                    }\n+                    registry.getXhrConnection().send(payload);\n+                }\n+            };\n+            resendMessageTimer.schedule(registry.getApplicationConfiguration()\n+                    .getMaxMessageSuspendTimeout() + 500);\n+        }\n+    }\n+\n+    private void resetTimer() {\n+        if (resendMessageTimer != null) {\n+            resendMessageTimer.cancel();\n+            resendMessageTimer = null;\n         }\n     }\n \n@@ -289,6 +354,8 @@ public String getCommunicationMethodName() {\n      */\n     public void resynchronize() {\n         if (requestResynchronize()) {\n+            messageQueue.clear();\n+            resetTimer();\n             sendInvocationsToServer();\n         }\n     }\n@@ -311,12 +378,24 @@ public void setClientToServerMessageId(int nextExpectedId, boolean force) {\n                             ApplicationConstants.CLIENT_TO_SERVER_ID) < nextExpectedId) {\n                 pushPendingMessage = null;\n             }\n+            if (hasQueuedMessages()) {\n+                // If queued message is the expected one. remove from queue\n+                // and send next message if any.\n+                if (messageQueue.get(0)\n+                        .getNumber(ApplicationConstants.CLIENT_TO_SERVER_ID)\n+                        + 1 == nextExpectedId) {\n+                    resetTimer();\n+                    messageQueue.remove(0);\n+                }\n+            }\n             return;\n         }\n         if (force) {\n             Console.debug(\n                     \"Forced update of clientId to \" + clientToServerMessageId);\n             clientToServerMessageId = nextExpectedId;\n+            messageQueue.clear();\n+            resetTimer();\n             return;\n         }\n \n@@ -372,4 +451,8 @@ void clearResynchronizationState() {\n     ResynchronizationState getResynchronizationState() {\n         return resynchronizationState;\n     }\n+\n+    public boolean hasQueuedMessages() {\n+        return !messageQueue.isEmpty();\n+    }\n }\n\ndiff --git a/flow-client/src/main/java/com/vaadin/client/communication/RequestResponseTracker.java b/flow-client/src/main/java/com/vaadin/client/communication/RequestResponseTracker.java\nindex 0d08be7644a..bb5e263e011 100644\n--- a/flow-client/src/main/java/com/vaadin/client/communication/RequestResponseTracker.java\n+++ b/flow-client/src/main/java/com/vaadin/client/communication/RequestResponseTracker.java\n@@ -112,7 +112,8 @@ public void endRequest() {\n         if ((registry.getUILifecycle().isRunning()\n                 && registry.getServerRpcQueue().isFlushPending())\n                 || registry.getMessageSender()\n-                        .getResynchronizationState() == ResynchronizationState.SEND_TO_SERVER) {\n+                        .getResynchronizationState() == ResynchronizationState.SEND_TO_SERVER\n+                || registry.getMessageSender().hasQueuedMessages()) {\n             // Send the pending RPCs immediately.\n             // This might be an unnecessary optimization as ServerRpcQueue has a\n             // finally scheduled command which trigger the send if we do not do\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java\nindex 802329461af..1b07e9466d7 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java\n@@ -113,7 +113,7 @@ public RpcRequest(String jsonString, boolean isSyncIdCheckEnabled) {\n                 this.csrfToken = csrfToken;\n             }\n \n-            if (isSyncIdCheckEnabled) {\n+            if (isSyncIdCheckEnabled && !isUnloadBeaconRequest()) {\n                 syncId = (int) json\n                         .getNumber(ApplicationConstants.SERVER_SYNC_ID);\n             } else {\n@@ -131,7 +131,10 @@ public RpcRequest(String jsonString, boolean isSyncIdCheckEnabled) {\n                 clientToServerMessageId = (int) json\n                         .getNumber(ApplicationConstants.CLIENT_TO_SERVER_ID);\n             } else {\n-                getLogger().warn(\"Server message without client id received\");\n+                if (!isUnloadBeaconRequest()) {\n+                    getLogger()\n+                            .warn(\"Server message without client id received\");\n+                }\n                 clientToServerMessageId = -1;\n             }\n             invocations = json.getArray(ApplicationConstants.RPC_INVOCATIONS);\n",
    "test_patch": "diff --git a/flow-client/src/test/frontend/FlowTests.ts b/flow-client/src/test/frontend/FlowTests.ts\nindex 778c4137131..24b4edcf0ec 100644\n--- a/flow-client/src/test/frontend/FlowTests.ts\n+++ b/flow-client/src/test/frontend/FlowTests.ts\n@@ -748,7 +748,7 @@ function stubServerRemoteFunction(\n         handlers.leaveNavigation();\n       }\n     }\n-    req.respond(200, { 'content-type': 'application/json' }, 'for(;;);[{}]');\n+    req.respond(200, {'content-type': 'application/json'}, 'for(;;);[{\"syncId\":' + (payload[\"syncId\"] + 1) + ',\"clientId\":' + (payload[\"clientId\"] + 1) + '}]');\n   });\n }\n \n\ndiff --git a/flow-tests/pom.xml b/flow-tests/pom.xml\nindex aa7c2e83a08..d7946ba9863 100644\n--- a/flow-tests/pom.xml\n+++ b/flow-tests/pom.xml\n@@ -335,6 +335,7 @@\n                 <module>test-react-adapter</module>\n                 <module>test-react-adapter/pom-production.xml</module>\n                 <module>test-legacy-frontend</module>\n+                <module>test-client-queue</module>\n             </modules>\n         </profile>\n         <profile>\n\ndiff --git a/flow-tests/test-client-queue/pom.xml b/flow-tests/test-client-queue/pom.xml\nnew file mode 100644\nindex 00000000000..9e0908c433c\n--- /dev/null\n+++ b/flow-tests/test-client-queue/pom.xml\n@@ -0,0 +1,63 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <artifactId>flow-tests</artifactId>\n+        <groupId>com.vaadin</groupId>\n+        <version>24.7-SNAPSHOT</version>\n+    </parent>\n+    <artifactId>flow-client-queue-test</artifactId>\n+    <name>Test Flow client queue</name>\n+\n+    <packaging>war</packaging>\n+    <properties>\n+        <maven.deploy.skip>true</maven.deploy.skip>\n+        <!-- Test checks client log so java.util.logging.Level import is needed -->\n+        <enforcer.skip>true</enforcer.skip>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.vaadin</groupId>\n+            <artifactId>flow-test-resources</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.vaadin</groupId>\n+            <artifactId>vaadin-dev-server</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.vaadin</groupId>\n+            <artifactId>flow-html-components-testbench</artifactId>\n+            <version>${project.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <!--  Run flow plugin to build frontend -->\n+            <plugin>\n+                <groupId>com.vaadin</groupId>\n+                <artifactId>flow-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>prepare-frontend</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+<!--                <configuration>-->\n+<!--                    <frontendHotdeploy>true</frontendHotdeploy>-->\n+<!--                </configuration>-->\n+            </plugin>\n+            <!-- Run jetty before integration tests, and stop after -->\n+            <plugin>\n+                <groupId>org.eclipse.jetty.ee10</groupId>\n+                <artifactId>jetty-ee10-maven-plugin</artifactId>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+</project>\n\ndiff --git a/flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/CustomService.java b/flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/CustomService.java\nnew file mode 100644\nindex 00000000000..cdf340709c5\n--- /dev/null\n+++ b/flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/CustomService.java\n@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.misc.ui;\n+\n+import java.util.List;\n+\n+import com.vaadin.flow.function.DeploymentConfiguration;\n+import com.vaadin.flow.server.RequestHandler;\n+import com.vaadin.flow.server.ServiceException;\n+import com.vaadin.flow.server.VaadinServlet;\n+import com.vaadin.flow.server.VaadinServletService;\n+import com.vaadin.flow.server.communication.UidlRequestHandler;\n+\n+public class CustomService extends VaadinServletService {\n+\n+    public CustomService(VaadinServlet servlet,\n+            DeploymentConfiguration deploymentConfiguration) {\n+        super(servlet, deploymentConfiguration);\n+    }\n+\n+    @Override\n+    protected List<RequestHandler> createRequestHandlers()\n+            throws ServiceException {\n+        List<RequestHandler> requestHandlers = super.createRequestHandlers();\n+        requestHandlers.replaceAll(handler -> {\n+            if (handler instanceof UidlRequestHandler) {\n+                return new CustomUidlRequestHandler();\n+            }\n+            return handler;\n+        });\n+        return requestHandlers;\n+    }\n+}\n\ndiff --git a/flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/CustomServlet.java b/flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/CustomServlet.java\nnew file mode 100644\nindex 00000000000..7aba1806e05\n--- /dev/null\n+++ b/flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/CustomServlet.java\n@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2000-2024 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.misc.ui;\n+\n+import jakarta.servlet.annotation.WebServlet;\n+\n+import com.vaadin.flow.function.DeploymentConfiguration;\n+import com.vaadin.flow.server.ServiceException;\n+import com.vaadin.flow.server.VaadinServlet;\n+import com.vaadin.flow.server.VaadinServletService;\n+\n+@WebServlet(urlPatterns = \"/*\", asyncSupported = true)\n+public class CustomServlet extends VaadinServlet {\n+\n+    @Override\n+    protected VaadinServletService createServletService(\n+            DeploymentConfiguration deploymentConfiguration)\n+            throws ServiceException {\n+        CustomService service = new CustomService(this,\n+                deploymentConfiguration);\n+        service.init();\n+        return service;\n+    }\n+}\n\ndiff --git a/flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/CustomUidlRequestHandler.java b/flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/CustomUidlRequestHandler.java\nnew file mode 100644\nindex 00000000000..976e04555d5\n--- /dev/null\n+++ b/flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/CustomUidlRequestHandler.java\n@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.misc.ui;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.vaadin.flow.server.VaadinRequest;\n+import com.vaadin.flow.server.VaadinResponse;\n+import com.vaadin.flow.server.VaadinSession;\n+import com.vaadin.flow.server.communication.UidlRequestHandler;\n+\n+public class CustomUidlRequestHandler extends UidlRequestHandler {\n+\n+    public static Set<VaadinSession> emptyResponse = new HashSet();\n+\n+    @Override\n+    public boolean synchronizedHandleRequest(VaadinSession session,\n+            VaadinRequest request, VaadinResponse response) throws IOException {\n+        if (emptyResponse.contains(session)) {\n+            emptyResponse.remove(session);\n+            commitEmptyResponse(response);\n+            return true;\n+        }\n+        return super.synchronizedHandleRequest(session, request, response);\n+    }\n+\n+    @Override\n+    public Optional<ResponseWriter> synchronizedHandleRequest(\n+            VaadinSession session, VaadinRequest request,\n+            VaadinResponse response, String requestBody)\n+            throws IOException, UnsupportedOperationException {\n+\n+        if (emptyResponse.contains(session)) {\n+            emptyResponse.remove(session);\n+            return Optional.of(() -> commitEmptyResponse(response));\n+        }\n+        return super.synchronizedHandleRequest(session, request, response,\n+                requestBody);\n+    }\n+\n+    private void commitEmptyResponse(VaadinResponse response)\n+            throws IOException {\n+        commitJsonResponse(response, \"for(;;);[{}]\");\n+    }\n+}\n\ndiff --git a/flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/TestNoResponseView.java b/flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/TestNoResponseView.java\nnew file mode 100644\nindex 00000000000..f6c97bc8373\n--- /dev/null\n+++ b/flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/TestNoResponseView.java\n@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.misc.ui;\n+\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.component.html.NativeButton;\n+import com.vaadin.flow.router.Route;\n+import com.vaadin.flow.server.VaadinSession;\n+\n+@Route(\"no-response\")\n+public class TestNoResponseView extends Div {\n+\n+    public static final String DELAY_NEXT_RESPONSE = \"delay-next\";\n+    public static final String ADD = \"add\";\n+    public static final String ADDED_PREDICATE = \"added_\";\n+\n+    private int elements = 0;\n+\n+    public TestNoResponseView() {\n+        NativeButton delayNext = new NativeButton(\"\\\"Delay\\\" next response\",\n+                event -> CustomUidlRequestHandler.emptyResponse\n+                        .add(VaadinSession.getCurrent()));\n+        delayNext.setId(DELAY_NEXT_RESPONSE);\n+\n+        NativeButton addElement = new NativeButton(\"Add element\", event -> {\n+            Div addedElement = new Div(\"Added element\");\n+            addedElement.setId(ADDED_PREDICATE + elements++);\n+            add(addedElement);\n+        });\n+        addElement.setId(ADD);\n+\n+        add(delayNext, addElement);\n+    }\n+}\n\ndiff --git a/flow-tests/test-client-queue/src/test/java/com/vaadin/flow/misc/ui/NoResponseIT.java b/flow-tests/test-client-queue/src/test/java/com/vaadin/flow/misc/ui/NoResponseIT.java\nnew file mode 100644\nindex 00000000000..30eb3a621cf\n--- /dev/null\n+++ b/flow-tests/test-client-queue/src/test/java/com/vaadin/flow/misc/ui/NoResponseIT.java\n@@ -0,0 +1,106 @@\n+package com.vaadin.flow.misc.ui;\n+\n+import java.util.logging.Level;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.TimeoutException;\n+\n+import com.vaadin.flow.component.html.testbench.DivElement;\n+import com.vaadin.flow.component.html.testbench.NativeButtonElement;\n+import com.vaadin.flow.testutil.ChromeBrowserTest;\n+\n+import static com.vaadin.flow.misc.ui.TestNoResponseView.ADD;\n+import static com.vaadin.flow.misc.ui.TestNoResponseView.ADDED_PREDICATE;\n+import static com.vaadin.flow.misc.ui.TestNoResponseView.DELAY_NEXT_RESPONSE;\n+\n+public class NoResponseIT extends ChromeBrowserTest {\n+\n+    @Override\n+    protected String getTestPath() {\n+        return \"/no-response\";\n+    }\n+\n+    @Test\n+    public void noResponseForRequest_clientResendsRequest_serverAnswersCorrectly() {\n+        open();\n+\n+        try {\n+            waitUntil(driver -> $(NativeButtonElement.class)\n+                    .withId(DELAY_NEXT_RESPONSE).exists());\n+        } catch (TimeoutException te) {\n+            Assert.fail(\"Expected 'delay next' button wasn't found\");\n+        }\n+\n+        // Add element normally\n+        $(NativeButtonElement.class).id(ADD).click();\n+        Assert.assertTrue(\n+                $(DivElement.class).id(ADDED_PREDICATE + 0).isDisplayed());\n+\n+        // Request null response for next add\n+        $(NativeButtonElement.class).id(DELAY_NEXT_RESPONSE).click();\n+\n+        $(NativeButtonElement.class).id(ADD).click();\n+\n+        Assert.assertEquals(\"No expected empty response found\", 1,\n+                getLogEntries(Level.WARNING).stream()\n+                        .filter(logEntry -> logEntry.getMessage().contains(\n+                                \"Response didn't contain a server id.\"))\n+                        .count());\n+\n+        try {\n+            waitUntil(driver -> $(DivElement.class).withId(ADDED_PREDICATE + 1)\n+                    .exists());\n+        } catch (TimeoutException te) {\n+            Assert.fail(\n+                    \"New element was not added though client should re-send request.\");\n+        }\n+\n+    }\n+\n+    @Test\n+    public void clickWhileRequestPending_clientQueuesRequests_messagesSentCorrectly() {\n+        open();\n+\n+        try {\n+            waitUntil(driver -> $(NativeButtonElement.class)\n+                    .withId(DELAY_NEXT_RESPONSE).exists());\n+        } catch (TimeoutException te) {\n+            Assert.fail(\"Expected 'delay next' button wasn't found\");\n+        }\n+\n+        // Add element normally\n+        $(NativeButtonElement.class).id(ADD).click();\n+        Assert.assertTrue(\n+                $(DivElement.class).id(ADDED_PREDICATE + 0).isDisplayed());\n+\n+        // Request null response for next add\n+        $(NativeButtonElement.class).id(DELAY_NEXT_RESPONSE).click();\n+\n+        $(NativeButtonElement.class).id(ADD).click();\n+        $(NativeButtonElement.class).id(ADD).click();\n+\n+        Assert.assertEquals(\"No expected empty response found\", 1,\n+                getLogEntries(Level.WARNING).stream()\n+                        .filter(logEntry -> logEntry.getMessage().contains(\n+                                \"Response didn't contain a server id.\"))\n+                        .count());\n+\n+        try {\n+            waitUntil(driver -> $(DivElement.class).withId(ADDED_PREDICATE + 1)\n+                    .exists());\n+        } catch (TimeoutException te) {\n+            Assert.fail(\n+                    \"New element was not added though client should re-send request.\");\n+        }\n+\n+        try {\n+            waitUntil(driver -> $(DivElement.class).withId(ADDED_PREDICATE + 2)\n+                    .exists());\n+        } catch (TimeoutException te) {\n+            Assert.fail(\n+                    \"Second new element was not added though client should queue request.\");\n+        }\n+\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20729",
    "pr_id": 20729,
    "issue_id": 20629,
    "repo": "vaadin/flow",
    "problem_statement": "Application Shell Template does not work: index.html does not get used in production\n### Description of the bug\n\nThe index.html file does not get used in production mode. I added a `<script>` to the head and in dev mode it works fine. When using `mvn package -Pproduction` the index.html does not contain any of my changes. In fact the default template is used.\n\n### Expected behavior\n\nThe /frontend/index.html is used in production mode.\n\n### Minimal reproducible example\n\n1. Download a new default starter with an empty Flow page from start.vaadin.com\r\n2. Change the index.html, remove all comments & add script\r\n3. Execute `mvn package -Pproduction`\r\n4. Execute the jar\r\n5. Incpect the website in browser. No script is there and all comments are back (like `<!-- This outlet div is where the views are rendered -->`)\n\n### Versions\n\n- Vaadin / Flow version: 24.5.7\r\n- Java version: 17 & 21\r\n- OS version: Win 10\r\n- Browser version (if applicable): Chrome, Firefox\r\n- Application Server (if applicable): starter default\r\n- IDE (if applicable): VS Code\r\n",
    "issue_word_count": 170,
    "test_files_count": 5,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleValidationUtil.java",
      "flow-server/src/main/resources/vite.generated.ts",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/BundleValidationTest.java",
      "flow-tests/test-express-build/test-parent-theme-in-frontend-prod/src/main/frontend/index.html",
      "flow-tests/test-express-build/test-parent-theme-prod/src/main/frontend/index.html",
      "flow-tests/test-express-build/test-prod-bundle-no-plugin/src/main/frontend/index.html",
      "flow-tests/test-express-build/test-theme-legacy-components-css-prod/src/main/frontend/index.html"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/BundleValidationTest.java",
      "flow-tests/test-express-build/test-parent-theme-in-frontend-prod/src/main/frontend/index.html",
      "flow-tests/test-express-build/test-parent-theme-prod/src/main/frontend/index.html",
      "flow-tests/test-express-build/test-prod-bundle-no-plugin/src/main/frontend/index.html",
      "flow-tests/test-express-build/test-theme-legacy-components-css-prod/src/main/frontend/index.html"
    ],
    "base_commit": "1b58bd5f9f4fa90bd0fc1806f959b42558b705ab",
    "head_commit": "ae55f2eba0447964030acfc9ffacfc9a99b083fd",
    "repo_url": "https://github.com/vaadin/flow/pull/20729",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20729",
    "dockerfile": "",
    "pr_merged_at": "2024-12-18T06:13:04.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleValidationUtil.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleValidationUtil.java\nindex ac1542d1fc7..b0cf7420eb3 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleValidationUtil.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleValidationUtil.java\n@@ -49,6 +49,8 @@\n  */\n public final class BundleValidationUtil {\n \n+    private static final String FRONTEND_HASHES_STATS_KEY = \"frontendHashes\";\n+\n     /**\n      * Checks if an application needs a new frontend bundle.\n      *\n@@ -217,6 +219,20 @@ private static boolean needsBuildInternal(Options options,\n             // are found missing in bundle.\n             return true;\n         }\n+\n+        // In dev mode index html is served from frontend folder, not from\n+        // dev-bundle, so rebuild is not required for custom content.\n+        if (options.isProductionMode() && BundleValidationUtil\n+                .hasCustomIndexHtml(options, statsJson)) {\n+            UsageStatistics.markAsUsed(\"flow/rebundle-reason-custom-index-html\",\n+                    null);\n+            return true;\n+        }\n+        // index.html hash has already been checked, if needed.\n+        // removing it from hashes map to prevent other unnecessary checks\n+        statsJson.getObject(FRONTEND_HASHES_STATS_KEY)\n+                .remove(FrontendUtils.INDEX_HTML);\n+\n         if (!BundleValidationUtil.frontendImportsFound(statsJson, options,\n                 frontendDependencies)) {\n             UsageStatistics.markAsUsed(\n@@ -648,7 +664,8 @@ public static boolean frontendImportsFound(JsonObject statsJson,\n                         FrontendUtils.FRONTEND_FOLDER_ALIAS.length()))\n                 .collect(Collectors.toList());\n \n-        final JsonObject frontendHashes = statsJson.getObject(\"frontendHashes\");\n+        final JsonObject frontendHashes = statsJson\n+                .getObject(FRONTEND_HASHES_STATS_KEY);\n         List<String> faultyContent = new ArrayList<>();\n \n         for (String jarImport : jarImports) {\n@@ -696,6 +713,27 @@ public static boolean frontendImportsFound(JsonObject statsJson,\n         return true;\n     }\n \n+    private static boolean hasCustomIndexHtml(Options options,\n+            JsonObject statsJson) throws IOException {\n+        File indexHtml = new File(options.getFrontendDirectory(),\n+                FrontendUtils.INDEX_HTML);\n+        if (indexHtml.exists()) {\n+            final JsonObject frontendHashes = statsJson\n+                    .getObject(FRONTEND_HASHES_STATS_KEY);\n+            String frontendFileContent = FileUtils.readFileToString(indexHtml,\n+                    StandardCharsets.UTF_8);\n+            List<String> faultyContent = new ArrayList<>();\n+            compareFrontendHashes(frontendHashes, faultyContent,\n+                    FrontendUtils.INDEX_HTML, frontendFileContent);\n+            if (!faultyContent.isEmpty()) {\n+                logChangedFiles(faultyContent,\n+                        \"Detected changed content for frontend files:\");\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n     private static boolean indexFileAddedOrDeleted(Options options,\n             JsonObject frontendHashes) {\n         Collection<String> indexFiles = Arrays.asList(FrontendUtils.INDEX_TS,\n\ndiff --git a/flow-server/src/main/resources/vite.generated.ts b/flow-server/src/main/resources/vite.generated.ts\nindex 1a64fa340c4..8a1d1475d3b 100644\n--- a/flow-server/src/main/resources/vite.generated.ts\n+++ b/flow-server/src/main/resources/vite.generated.ts\n@@ -297,6 +297,7 @@ function statsExtracterPlugin(): PluginOption {\n       const generatedImports = Array.from(generatedImportsSet).sort();\n \n       const frontendFiles: Record<string, string> = {};\n+      frontendFiles['index.html'] = createHash('sha256').update(customIndexData.replace(/\\r\\n/g, '\\n'), 'utf8').digest('hex');\n \n       const projectFileExtensions = ['.js', '.js.map', '.ts', '.ts.map', '.tsx', '.tsx.map', '.css', '.css.map'#frontendExtraFileExtensions#];\n \n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/BundleValidationTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/BundleValidationTest.java\nindex 4df52fb2a18..bd18e5b4889 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/BundleValidationTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/BundleValidationTest.java\n@@ -25,7 +25,6 @@\n import org.mockito.Mockito;\n \n import com.vaadin.flow.component.page.AppShellConfigurator;\n-import com.vaadin.flow.di.Lookup;\n import com.vaadin.flow.server.Constants;\n import com.vaadin.flow.server.LoadDependenciesOnStartup;\n import com.vaadin.flow.server.Mode;\n@@ -44,6 +43,7 @@\n import static com.vaadin.flow.server.Constants.DEV_BUNDLE_JAR_PATH;\n import static com.vaadin.flow.server.Constants.PROD_BUNDLE_JAR_PATH;\n import static com.vaadin.flow.server.frontend.FrontendUtils.DEFAULT_FRONTEND_DIR;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.INDEX_HTML;\n \n @RunWith(Parameterized.class)\n public class BundleValidationTest {\n@@ -1728,6 +1728,101 @@ public void indexTsDeleted_rebuildRequired() throws IOException {\n                 needsBuild);\n     }\n \n+    @Test\n+    public void indexHtmlNotChanged_rebuildNotRequired() throws IOException {\n+        createPackageJsonStub(BLANK_PACKAGE_JSON_WITH_HASH);\n+\n+        File frontendFolder = temporaryFolder\n+                .newFolder(FrontendUtils.DEFAULT_FRONTEND_DIR);\n+\n+        File indexHtml = new File(frontendFolder, FrontendUtils.INDEX_HTML);\n+        indexHtml.createNewFile();\n+        String defaultIndexHtml = new String(TaskGenerateIndexHtml.class\n+                .getResourceAsStream(INDEX_HTML).readAllBytes(),\n+                StandardCharsets.UTF_8);\n+        FileUtils.write(indexHtml, defaultIndexHtml, StandardCharsets.UTF_8);\n+\n+        JsonObject stats = getBasicStats();\n+        stats.getObject(FRONTEND_HASHES).put(INDEX_HTML,\n+                BundleValidationUtil.calculateHash(defaultIndexHtml));\n+\n+        final FrontendDependenciesScanner depScanner = Mockito\n+                .mock(FrontendDependenciesScanner.class);\n+\n+        setupFrontendUtilsMock(stats);\n+\n+        boolean needsBuild = BundleValidationUtil.needsBuild(options,\n+                depScanner, mode);\n+        Assert.assertFalse(\"Default 'index.html' should not require bundling\",\n+                needsBuild);\n+    }\n+\n+    @Test\n+    public void indexHtmlChanged_productionMode_rebuildRequired()\n+            throws IOException {\n+        Assume.assumeTrue(mode.isProduction());\n+        createPackageJsonStub(BLANK_PACKAGE_JSON_WITH_HASH);\n+\n+        File frontendFolder = temporaryFolder\n+                .newFolder(FrontendUtils.DEFAULT_FRONTEND_DIR);\n+\n+        File indexHtml = new File(frontendFolder, FrontendUtils.INDEX_HTML);\n+        indexHtml.createNewFile();\n+        String defaultIndexHtml = new String(\n+                getClass().getResourceAsStream(INDEX_HTML).readAllBytes(),\n+                StandardCharsets.UTF_8);\n+        String customIndexHtml = defaultIndexHtml.replace(\"<body>\",\n+                \"<body><div>custom content</div>\");\n+        FileUtils.write(indexHtml, customIndexHtml, StandardCharsets.UTF_8);\n+        JsonObject stats = getBasicStats();\n+        stats.getObject(FRONTEND_HASHES).put(INDEX_HTML,\n+                BundleValidationUtil.calculateHash(defaultIndexHtml));\n+\n+        final FrontendDependenciesScanner depScanner = Mockito\n+                .mock(FrontendDependenciesScanner.class);\n+\n+        setupFrontendUtilsMock(stats);\n+\n+        boolean needsBuild = BundleValidationUtil.needsBuild(options,\n+                depScanner, mode);\n+        Assert.assertTrue(\n+                \"In production mode, custom 'index.html' should require bundling\",\n+                needsBuild);\n+    }\n+\n+    @Test\n+    public void indexHtmlChanged_developmentMode_rebuildNotRequired()\n+            throws IOException {\n+        Assume.assumeFalse(mode.isProduction());\n+        createPackageJsonStub(BLANK_PACKAGE_JSON_WITH_HASH);\n+\n+        File frontendFolder = temporaryFolder\n+                .newFolder(FrontendUtils.DEFAULT_FRONTEND_DIR);\n+\n+        File indexHtml = new File(frontendFolder, FrontendUtils.INDEX_HTML);\n+        indexHtml.createNewFile();\n+        String defaultIndexHtml = new String(\n+                getClass().getResourceAsStream(INDEX_HTML).readAllBytes(),\n+                StandardCharsets.UTF_8);\n+        String customIndexHtml = defaultIndexHtml.replace(\"<body>\",\n+                \"<body><div>custom content</div>\");\n+        FileUtils.write(indexHtml, customIndexHtml, StandardCharsets.UTF_8);\n+        JsonObject stats = getBasicStats();\n+        stats.getObject(FRONTEND_HASHES).put(INDEX_HTML,\n+                BundleValidationUtil.calculateHash(defaultIndexHtml));\n+\n+        final FrontendDependenciesScanner depScanner = Mockito\n+                .mock(FrontendDependenciesScanner.class);\n+\n+        setupFrontendUtilsMock(stats);\n+\n+        boolean needsBuild = BundleValidationUtil.needsBuild(options,\n+                depScanner, mode);\n+        Assert.assertFalse(\n+                \"In dev mode, custom 'index.html' should not require bundling\",\n+                needsBuild);\n+    }\n+\n     @Test\n     public void standardVaadinComponent_notAddedToProjectAsJar_noRebuildRequired()\n             throws IOException {\n\ndiff --git a/flow-tests/test-express-build/test-parent-theme-in-frontend-prod/src/main/frontend/index.html b/flow-tests/test-express-build/test-parent-theme-in-frontend-prod/src/main/frontend/index.html\nnew file mode 100644\nindex 00000000000..87b750d1be0\n--- /dev/null\n+++ b/flow-tests/test-express-build/test-parent-theme-in-frontend-prod/src/main/frontend/index.html\n@@ -0,0 +1,25 @@\n+<!DOCTYPE html>\n+<!--\n+This file is auto-generated by Vaadin.\n+-->\n+\n+<!-- default production bundle -->\n+\n+<html>\n+<head>\n+  <meta charset=\"UTF-8\" />\n+  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n+  <style>\n+    body, #outlet {\n+      height: 100vh;\n+      width: 100%;\n+      margin: 0;\n+    }\n+  </style>\n+  <!-- index.ts is included here automatically (either by the dev server or during the build) -->\n+</head>\n+<body>\n+  <!-- This outlet div is where the views are rendered -->\n+  <div id=\"outlet\"></div>\n+</body>\n+</html>\n\ndiff --git a/flow-tests/test-express-build/test-parent-theme-prod/src/main/frontend/index.html b/flow-tests/test-express-build/test-parent-theme-prod/src/main/frontend/index.html\nnew file mode 100644\nindex 00000000000..87b750d1be0\n--- /dev/null\n+++ b/flow-tests/test-express-build/test-parent-theme-prod/src/main/frontend/index.html\n@@ -0,0 +1,25 @@\n+<!DOCTYPE html>\n+<!--\n+This file is auto-generated by Vaadin.\n+-->\n+\n+<!-- default production bundle -->\n+\n+<html>\n+<head>\n+  <meta charset=\"UTF-8\" />\n+  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n+  <style>\n+    body, #outlet {\n+      height: 100vh;\n+      width: 100%;\n+      margin: 0;\n+    }\n+  </style>\n+  <!-- index.ts is included here automatically (either by the dev server or during the build) -->\n+</head>\n+<body>\n+  <!-- This outlet div is where the views are rendered -->\n+  <div id=\"outlet\"></div>\n+</body>\n+</html>\n\ndiff --git a/flow-tests/test-express-build/test-prod-bundle-no-plugin/src/main/frontend/index.html b/flow-tests/test-express-build/test-prod-bundle-no-plugin/src/main/frontend/index.html\nnew file mode 100644\nindex 00000000000..87b750d1be0\n--- /dev/null\n+++ b/flow-tests/test-express-build/test-prod-bundle-no-plugin/src/main/frontend/index.html\n@@ -0,0 +1,25 @@\n+<!DOCTYPE html>\n+<!--\n+This file is auto-generated by Vaadin.\n+-->\n+\n+<!-- default production bundle -->\n+\n+<html>\n+<head>\n+  <meta charset=\"UTF-8\" />\n+  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n+  <style>\n+    body, #outlet {\n+      height: 100vh;\n+      width: 100%;\n+      margin: 0;\n+    }\n+  </style>\n+  <!-- index.ts is included here automatically (either by the dev server or during the build) -->\n+</head>\n+<body>\n+  <!-- This outlet div is where the views are rendered -->\n+  <div id=\"outlet\"></div>\n+</body>\n+</html>\n\ndiff --git a/flow-tests/test-express-build/test-theme-legacy-components-css-prod/src/main/frontend/index.html b/flow-tests/test-express-build/test-theme-legacy-components-css-prod/src/main/frontend/index.html\nnew file mode 100644\nindex 00000000000..87b750d1be0\n--- /dev/null\n+++ b/flow-tests/test-express-build/test-theme-legacy-components-css-prod/src/main/frontend/index.html\n@@ -0,0 +1,25 @@\n+<!DOCTYPE html>\n+<!--\n+This file is auto-generated by Vaadin.\n+-->\n+\n+<!-- default production bundle -->\n+\n+<html>\n+<head>\n+  <meta charset=\"UTF-8\" />\n+  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n+  <style>\n+    body, #outlet {\n+      height: 100vh;\n+      width: 100%;\n+      margin: 0;\n+    }\n+  </style>\n+  <!-- index.ts is included here automatically (either by the dev server or during the build) -->\n+</head>\n+<body>\n+  <!-- This outlet div is where the views are rendered -->\n+  <div id=\"outlet\"></div>\n+</body>\n+</html>\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20688",
    "pr_id": 20688,
    "issue_id": 11026,
    "repo": "vaadin/flow",
    "problem_statement": "Exception in push connection when logging out\n### Description of the bug / feature\r\nSince switching to the default Push transport (#10931) we always get an “Exception in push connection” when logging out.\r\n\r\nNote: the exception is not thrown when simply closing the browser window…\r\n\r\n### Minimal reproducible example\r\nOur application is a pretty basic view/form application. Login/authentication is handled by a remote service using REST calls (`KioskAuthenticationProvider`). Logout is via a “logout” anchor in the top bar of the layout.\r\n\r\nOur security configuration  is as follows:\r\n```\r\n@RequiredArgsConstructor\r\n@EnableWebSecurity\r\n@Configuration\r\npublic class SecurityConfiguration extends WebSecurityConfigurerAdapter {\r\n\r\n    private static final String LOGIN_PROCESSING_URL = \"/login\";\r\n    private static final String LOGIN_FAILURE_URL = \"/login?error\";\r\n    private static final String LOGIN_URL = \"/login\";\r\n    private static final String LOGOUT_SUCCESS_URL = \"/login\";\r\n\r\n    private final LoginService loginService;\r\n\r\n    /**\r\n     * Tests if the request is an internal framework request. The test consists of\r\n     * checking if the request parameter is present and if its value is consistent\r\n     * with any of the request types know.\r\n     *\r\n     * @param request {@link HttpServletRequest}\r\n     * @return true if the request is an internal framework request. False otherwise.\r\n     */\r\n    public static boolean isFrameworkInternalRequest(HttpServletRequest request) {\r\n        final String parameterValue = request.getParameter(ApplicationConstants.REQUEST_TYPE_PARAMETER);\r\n        return parameterValue != null &&\r\n               Stream.of(HandlerHelper.RequestType.values()).anyMatch(r -> r.getIdentifier().equals(parameterValue));\r\n    }\r\n\r\n    @Bean\r\n    public AuthenticationProvider authenticationProvider() {\r\n        return new KioskAuthenticationProvider(loginService);\r\n    }\r\n\r\n    @Override\r\n    protected void configure(AuthenticationManagerBuilder auth) {\r\n        auth.authenticationProvider(authenticationProvider());\r\n    }\r\n\r\n    /**\r\n     * Require login to access internal pages and configure login form.\r\n     */\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        // Not using Spring CSRF here to be able to use plain HTML for the login page\r\n        http.csrf()\r\n            .disable()\r\n\r\n            // Register our CustomRequestCache, that saves unauthorized access attempts, so\r\n            // the user is redirected after login.\r\n            .requestCache()\r\n            .requestCache(new SimpleRequestCache())\r\n\r\n            // Restrict access to our application.\r\n            .and()\r\n            .authorizeRequests()\r\n\r\n            // Allow health checks\r\n            .antMatchers(\"/actuator/health\")\r\n            .permitAll()\r\n\r\n            // Allow all Vaadin internal requests.\r\n            .requestMatchers(SecurityConfiguration::isFrameworkInternalRequest)\r\n            .permitAll()\r\n\r\n            // Allow all other requests by logged in users.\r\n            .anyRequest()\r\n            .authenticated()\r\n\r\n            // Configure the login page.\r\n            .and()\r\n            .formLogin()\r\n            .loginPage(LOGIN_URL)\r\n            .permitAll()\r\n            .loginProcessingUrl(LOGIN_PROCESSING_URL)\r\n            .failureUrl(LOGIN_FAILURE_URL)\r\n\r\n            // Configure logout\r\n            .and()\r\n            .logout()\r\n            .logoutSuccessUrl(LOGOUT_SUCCESS_URL);\r\n    }\r\n\r\n    /**\r\n     * Allows access to static resources, bypassing Spring security.\r\n     */\r\n    @Override\r\n    public void configure(WebSecurity web) {\r\n        web.ignoring().antMatchers(\r\n                // Client-side JS\r\n                \"/VAADIN/**\",\r\n\r\n                // the standard favicon URI\r\n                \"/favicon.ico\",\r\n\r\n                // the robots exclusion standard\r\n                \"/robots.txt\",\r\n\r\n                // web application manifest\r\n                \"/manifest.webmanifest\", \"/sw.js\", \"/offline.html\",\r\n\r\n                // icons and images\r\n                \"/icons/**\", \"/META-INF/resources/images/**\", \"/styles/**\");\r\n    }\r\n\r\n}\r\n```\r\n\r\nThe UI is configured as follows:\r\n```\r\n/**\r\n * Component to set up the Vaadin UI.\r\n *\r\n * Sets up the locale and adds a {@link BeforeEnterEvent} handler to redirect to the login page if a user isn't already\r\n * logged-in.\r\n */\r\n@Component\r\npublic class ManagementServiceInitListener implements VaadinServiceInitListener {\r\n\r\n    public ManagementServiceInitListener(@NotNull CommonProperties commonProperties) {\r\n        Locale.setDefault(commonProperties.getLocaleFromProperties());\r\n    }\r\n\r\n    @Override\r\n    public void serviceInit(@NotNull ServiceInitEvent event) {\r\n        event.getSource().addUIInitListener(uiEvent -> {\r\n            UI ui = uiEvent.getUI();\r\n            ui.addBeforeEnterListener(this::beforeEnter);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Reroutes the user to the login page unless already logged-in.\r\n     *\r\n     * @param event before navigation event with event details.\r\n     */\r\n    protected void beforeEnter(@NotNull BeforeEnterEvent event) {\r\n        if (!LoginView.class.equals(event.getNavigationTarget()) && !LoginService.isUserLoggedIn()) {\r\n            event.rerouteTo(LoginView.class);\r\n        }\r\n    }\r\n\r\n}\r\n```\r\n\r\nThe login view is straightforward:\r\n```\r\n@Route(\"login\")\r\n@PageTitle(\"Login | Management Console\")\r\npublic class LoginView extends VerticalLayout implements BeforeEnterObserver {\r\n\r\n    private final LoginForm loginForm;\r\n\r\n    public LoginView() {\r\n        addClassName(\"login-view\");\r\n        setSizeFull();\r\n        setJustifyContentMode(JustifyContentMode.CENTER);\r\n        setAlignItems(Alignment.CENTER);\r\n\r\n        H1 title = new H1(\"Management Console\");\r\n\r\n        loginForm = new LoginForm(createDutchLogin());\r\n        configureLoginForm();\r\n\r\n        add(title, loginForm);\r\n    }\r\n\r\n    @Override\r\n    public void beforeEnter(@NotNull BeforeEnterEvent beforeEnterEvent) {\r\n        if (beforeEnterEvent.getLocation().getQueryParameters().getParameters().containsKey(\"error\")) {\r\n            loginForm.setError(true);\r\n        }\r\n    }\r\n\r\n    private @NotNull LoginI18n createDutchLogin() {\r\n        LoginI18n loginI18n = LoginI18n.createDefault();\r\n\r\n        // Form\r\n        LoginI18n.Form form = loginI18n.getForm();\r\n        form.setTitle(\"Inloggen\");\r\n        form.setUsername(\"Gebruikersnaam\");\r\n        form.setPassword(\"Wachtwoord\");\r\n        form.setForgotPassword(\"Wachtwoord vergeten?\");\r\n        form.setSubmit(\"Log in\");\r\n\r\n        // Error Message\r\n        LoginI18n.ErrorMessage errorMessage = loginI18n.getErrorMessage();\r\n        errorMessage.setTitle(\"Probleem bij het inloggen\");\r\n        errorMessage.setMessage(\"Controleer of u de juiste gegevens heeft ingevoerd en probeer het dan nogmaals.\");\r\n\r\n        return loginI18n;\r\n    }\r\n\r\n    private void configureLoginForm() {\r\n        loginForm.setForgotPasswordButtonVisible(false);\r\n        loginForm.setAction(\"login\");\r\n    }\r\n\r\n}\r\n```\r\n\r\nWe don't have a logout view; you simply get redirected to login. However, to try to follow the advise in https://vaadin.com/forum/thread/17520891/flow-logout, I did add a logout view with `VaadinSession.getCurrent().getSession().invalidate();` in the `BeforeEnter` (note: adding the navigation line caused an invalid redirect in the browser!). Interestingly this was actually quite hard to get to trigger, I had to change the route to something other than logout (including the anchor) for it to trigger. But even when that still did not get rid of the push exception…\r\n\r\nAm I triggering the logout wrongly?\r\n\r\n### Expected behavior\r\nNo more exceptions in the push connection when logging out.\r\n\r\n### Actual behavior\r\nExample exception\r\n```\r\n2021-05-18 11:27:53.227 ERROR 58262 --- [sphere-Shared-3] c.v.f.s.c.PushAtmosphereHandler          : Exception in push connection\r\n\r\njava.io.IOException: Connection remotely closed for 82791b2a-7216-4486-8ad2-b33e423d1b78\r\n\tat org.atmosphere.websocket.WebSocket.write(WebSocket.java:230) ~[atmosphere-runtime-2.4.30.slf4jvaadin1.jar:2.4.30.slf4jvaadin1]\r\n\tat org.atmosphere.websocket.WebSocket.write(WebSocket.java:220) ~[atmosphere-runtime-2.4.30.slf4jvaadin1.jar:2.4.30.slf4jvaadin1]\r\n\tat org.atmosphere.websocket.WebSocket.write(WebSocket.java:46) ~[atmosphere-runtime-2.4.30.slf4jvaadin1.jar:2.4.30.slf4jvaadin1]\r\n\tat org.atmosphere.cpr.AtmosphereResponseImpl$Stream.write(AtmosphereResponseImpl.java:957) ~[atmosphere-runtime-2.4.30.slf4jvaadin1.jar:2.4.30.slf4jvaadin1]\r\n\tat org.atmosphere.handler.AbstractReflectorAtmosphereHandler.onStateChange(AbstractReflectorAtmosphereHandler.java:155) ~[atmosphere-runtime-2.4.30.slf4jvaadin1.jar:2.4.30.slf4jvaadin1]\r\n\tat com.vaadin.flow.server.communication.PushAtmosphereHandler.onStateChange(PushAtmosphereHandler.java:54) ~[flow-server-2.6.0.jar:2.6.0]\r\n\tat org.atmosphere.cpr.DefaultBroadcaster.invokeOnStateChange(DefaultBroadcaster.java:1037) ~[atmosphere-runtime-2.4.30.slf4jvaadin1.jar:2.4.30.slf4jvaadin1]\r\n\tat org.atmosphere.cpr.DefaultBroadcaster.prepareInvokeOnStateChange(DefaultBroadcaster.java:1057) ~[atmosphere-runtime-2.4.30.slf4jvaadin1.jar:2.4.30.slf4jvaadin1]\r\n\tat org.atmosphere.cpr.DefaultBroadcaster.executeAsyncWrite(DefaultBroadcaster.java:871) ~[atmosphere-runtime-2.4.30.slf4jvaadin1.jar:2.4.30.slf4jvaadin1]\r\n\tat org.atmosphere.cpr.DefaultBroadcaster$2.run(DefaultBroadcaster.java:474) ~[atmosphere-runtime-2.4.30.slf4jvaadin1.jar:2.4.30.slf4jvaadin1]\r\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) ~[na:na]\r\n\tat java.base/java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:264) ~[na:na]\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java) ~[na:na]\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) ~[na:na]\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) ~[na:na]\r\n\tat java.base/java.lang.Thread.run(Thread.java:834) ~[na:na]\r\n```\r\n\r\n### Versions:\r\n    - Vaadin / Flow version: 14.6.0\r\n    - Java version: 11\r\n    - OS version: AWS & Mac OS\r\n",
    "issue_word_count": 1066,
    "test_files_count": 3,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/views/MainView.java",
      "flow-tests/vaadin-spring-tests/test-spring-security-flow/src/test/java/com/vaadin/flow/spring/flowsecurity/AppViewIT.java",
      "flow-tests/vaadin-spring-tests/test-spring-security-flow/src/test/java/com/vaadin/flow/spring/flowsecurity/UIAccessContextIT.java",
      "vaadin-spring/src/main/java/com/vaadin/flow/spring/security/AuthenticationContext.java"
    ],
    "pr_changed_test_files": [
      "flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/views/MainView.java",
      "flow-tests/vaadin-spring-tests/test-spring-security-flow/src/test/java/com/vaadin/flow/spring/flowsecurity/AppViewIT.java",
      "flow-tests/vaadin-spring-tests/test-spring-security-flow/src/test/java/com/vaadin/flow/spring/flowsecurity/UIAccessContextIT.java"
    ],
    "base_commit": "5ff8cf52cfa511363f5e0969b071c9d470765d88",
    "head_commit": "789bacfdf1df6e2375911cb123e75f03a1fa271a",
    "repo_url": "https://github.com/vaadin/flow/pull/20688",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20688",
    "dockerfile": "",
    "pr_merged_at": "2024-12-13T15:27:06.000Z",
    "patch": "diff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/AuthenticationContext.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/AuthenticationContext.java\nindex 1c907d95a15..3a9da0fa765 100644\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/AuthenticationContext.java\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/AuthenticationContext.java\n@@ -45,6 +45,7 @@\n import org.springframework.util.Assert;\n \n import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.server.VaadinRequest;\n import com.vaadin.flow.server.VaadinServletRequest;\n import com.vaadin.flow.server.VaadinServletResponse;\n import com.vaadin.flow.shared.ui.Transport;\n@@ -131,8 +132,10 @@ public boolean isAuthenticated() {\n      */\n     public void logout() {\n         final UI ui = UI.getCurrent();\n-        if (ui.getPushConfiguration().getTransport() == Transport.WEBSOCKET\n-                && ui.getInternals().getPushConnection().isConnected()) {\n+        boolean pushWebsocketConnected = ui.getPushConfiguration()\n+                .getTransport() == Transport.WEBSOCKET\n+                && ui.getInternals().getPushConnection().isConnected();\n+        if (pushWebsocketConnected) {\n             // WEBSOCKET transport mode would not log out properly after session\n             // invalidation. Switching to WEBSOCKET_XHR for a single request\n             // to do the logout.\n@@ -151,6 +154,11 @@ public void logout() {\n                 ui.getPushConfiguration().setTransport(Transport.WEBSOCKET);\n                 doLogout(ui);\n             });\n+        } else if (VaadinRequest.getCurrent() == null) {\n+            // Logout started from a background thread, force client to send\n+            // a request\n+            ui.getPage().executeJs(\"return true\").then(ignored -> doLogout(ui),\n+                    error -> doLogout(ui));\n         } else {\n             doLogout(ui);\n         }\n@@ -496,7 +504,7 @@ public void logout(HttpServletRequest request,\n         private boolean isContinueToNextHandler(HttpServletRequest request,\n                 LogoutHandler handler) {\n             return handler instanceof SecurityContextLogoutHandler\n-                    && (request.getSession() == null\n+                    && (request.getSession(false) == null\n                             || !request.isRequestedSessionIdValid());\n         }\n     }\n",
    "test_patch": "diff --git a/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/views/MainView.java b/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/views/MainView.java\nindex 72713cd33bb..45dbf6be8cc 100644\n--- a/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/views/MainView.java\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/views/MainView.java\n@@ -1,9 +1,14 @@\n package com.vaadin.flow.spring.flowsecurity.views;\n \n import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.springframework.security.concurrent.DelegatingSecurityContextExecutor;\n \n import com.vaadin.flow.component.Component;\n import com.vaadin.flow.component.ComponentUtil;\n+import com.vaadin.flow.component.UI;\n import com.vaadin.flow.component.applayout.AppLayout;\n import com.vaadin.flow.component.applayout.DrawerToggle;\n import com.vaadin.flow.component.avatar.Avatar;\n@@ -97,6 +102,18 @@ private Component createDrawerContent(Tabs menu) {\n             });\n             layout.add(logout);\n \n+            Button logoutFromServer = new Button(\"Logout from server\");\n+            logoutFromServer.setId(\"logout-server\");\n+            logoutFromServer.addClickListener(e -> {\n+                UI ui = UI.getCurrent();\n+                Runnable action = ui.accessLater(() -> securityUtils.logout(),\n+                        null);\n+                CompletableFuture.runAsync(action,\n+                        new DelegatingSecurityContextExecutor(CompletableFuture\n+                                .delayedExecutor(1, TimeUnit.SECONDS)));\n+            });\n+            layout.add(logoutFromServer);\n+\n             Anchor logoutWithUrl = new Anchor(\"doLogout\", \"Logout with URL\");\n             logoutWithUrl.getElement().setAttribute(\"router-ignore\", true);\n             logoutWithUrl.setId(\"logout-anchor\");\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/test/java/com/vaadin/flow/spring/flowsecurity/AppViewIT.java b/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/test/java/com/vaadin/flow/spring/flowsecurity/AppViewIT.java\nindex 7e1e2be3dc5..e0704b26b3b 100644\n--- a/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/test/java/com/vaadin/flow/spring/flowsecurity/AppViewIT.java\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/test/java/com/vaadin/flow/spring/flowsecurity/AppViewIT.java\n@@ -308,6 +308,16 @@ public void logout_via_doLogoutURL_redirects_to_logout() {\n         assertLogoutViewShown();\n     }\n \n+    @Test\n+    public void logout_server_initiated_redirects_to_logout() {\n+        open(LOGIN_PATH);\n+        loginAdmin();\n+        navigateTo(\"admin\");\n+        assertAdminPageShown(ADMIN_FULLNAME);\n+        getMainView().$(ButtonElement.class).id(\"logout-server\").click();\n+        assertRootPageShown();\n+    }\n+\n     @Test\n     public void client_menu_routes_correct_for_anonymous() {\n         navigateToClientMenuList();\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/test/java/com/vaadin/flow/spring/flowsecurity/UIAccessContextIT.java b/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/test/java/com/vaadin/flow/spring/flowsecurity/UIAccessContextIT.java\nindex 94ec1226421..d285f7e0422 100644\n--- a/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/test/java/com/vaadin/flow/spring/flowsecurity/UIAccessContextIT.java\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/test/java/com/vaadin/flow/spring/flowsecurity/UIAccessContextIT.java\n@@ -15,16 +15,16 @@\n  */\n package com.vaadin.flow.spring.flowsecurity;\n \n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.WebDriver;\n+\n import com.vaadin.flow.component.button.testbench.ButtonElement;\n import com.vaadin.flow.component.login.testbench.LoginFormElement;\n import com.vaadin.flow.component.login.testbench.LoginOverlayElement;\n import com.vaadin.testbench.HasElementQuery;\n import com.vaadin.testbench.TestBenchElement;\n \n-import org.junit.Assert;\n-import org.junit.Test;\n-import org.openqa.selenium.WebDriver;\n-\n public class UIAccessContextIT extends AbstractIT {\n \n     @Test\n@@ -37,14 +37,15 @@ public void securityContextSetForUIAccess() throws Exception {\n             super.setup();\n             open(\"private\");\n             loginUser();\n-            TestBenchElement balance = $(\"span\").id(\"balanceText\");\n+            TestBenchElement balance = waitUntil(\n+                    d -> $(\"span\").id(\"balanceText\"));\n             Assert.assertEquals(expectedUserBalance, balance.getText());\n \n             open(\"private\", adminBrowser);\n             HasElementQuery adminContext = () -> adminBrowser;\n             loginAdmin(adminContext);\n-            TestBenchElement adminBalance = adminContext.$(\"span\")\n-                    .id(\"balanceText\");\n+            TestBenchElement adminBalance = waitUntil(\n+                    d -> adminContext.$(\"span\").id(\"balanceText\"));\n             Assert.assertEquals(expectedAdminBalance, adminBalance.getText());\n \n             ButtonElement sendRefresh = $(ButtonElement.class)\n@@ -70,6 +71,10 @@ private void loginAdmin(HasElementQuery adminContext) {\n         form.getUsernameField().setValue(\"emma\");\n         form.getPasswordField().setValue(\"emma\");\n         form.submit();\n+        waitUntilNot(driver -> ((WebDriver) adminContext.getContext())\n+                .getCurrentUrl().contains(\"my/login/page\"));\n+        waitUntilNot(\n+                driver -> adminContext.$(LoginOverlayElement.class).exists());\n     }\n \n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20666",
    "pr_id": 20666,
    "issue_id": 20575,
    "repo": "vaadin/flow",
    "problem_statement": "Wrong redirect after authentication when PUSH transport is WEBSOCKET\n### Description of the bug\n\nWhen the Vaadin application is configured with `VaadinWebSecurity`, OAUTH2 and WEBSOCKET PUSH transport, the URL stored for redirection after successful login is incorrect; it points to the PUSH mapping instead of the requested page.\r\nFor example, when navigating to a protected route `/`, the browser is redirected to the login page, but the stored URL is `http://localhost:8080/VAADIN/push` instead of `http://localhost:8080/`. After entering correct credentials, the browser is redirected to `/VAADIN/push`, resulting in a 404 error page.\r\n\n\n### Expected behavior\n\nAfter successful login, the original request page should be shown. In the example above, the browser should be redirected to http://localhost:8080/.\n\n### Minimal reproducible example\n\n* Setup a keycloak instance\r\n* Configure Spring Security to integrate with Keycloak\r\n* Configure OAUHT2 in VaadinWebSecurity \r\n  ```java\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http.authorizeHttpRequests(auth ->\r\n                auth\r\n                        .requestMatchers(antMatchers(\"/error\")).permitAll()\r\n        );\r\n        super.configure(http);\r\n        setOAuth2LoginPage(http, \"/oauth2/authorization/keycloak\");\r\n        OidcClientInitiatedLogoutSuccessHandler logoutSuccessHandler = new OidcClientInitiatedLogoutSuccessHandler(clientRegistrationRepository);\r\n        logoutSuccessHandler.setRedirectStrategy(new UidlRedirectStrategy());\r\n        http.logout(cfg -> cfg.logoutSuccessHandler(logoutSuccessHandler));\r\n    }\r\n  ```\r\n* Add `@Push(transport = Transport.WEBSOCKET)` to `AppShellConfigurator` implementor\r\n* Create a protected view, e.g. annotating it with `@PermitAll`\r\n* Start the application and access the protected view; after being redirected to the IDP login page enter user credential.\r\n* Verify that the browser is redirected to `/VAADIN/push` instead of the protected view.\n\n### Versions\n\n- Vaadin / Flow version: 24.5 (most likely also older versions)\r\n- Java version: 21\r\n- OS version: Linux\r\n",
    "issue_word_count": 245,
    "test_files_count": 6,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/server/auth/NavigationAccessControl.java",
      "flow-tests/vaadin-spring-tests/pom.xml",
      "flow-tests/vaadin-spring-tests/test-spring-security-flow-websocket/pom.xml",
      "flow-tests/vaadin-spring-tests/test-spring-security-flow-websocket/src/main/java/com/vaadin/flow/spring/flowsecuritywebsocket/Application.java",
      "flow-tests/vaadin-spring-tests/test-spring-security-flow-websocket/src/main/java/com/vaadin/flow/spring/flowsecuritywebsocket/PushWebsocketConfigurer.java",
      "flow-tests/vaadin-spring-tests/test-spring-security-flow-websocket/src/main/resources/application.properties",
      "flow-tests/vaadin-spring-tests/test-spring-security-flow-websocket/src/test/java/com/vaadin/flow/spring/flowsecuritywebsocket/AppViewIT.java",
      "scripts/computeMatrix.js"
    ],
    "pr_changed_test_files": [
      "flow-tests/vaadin-spring-tests/pom.xml",
      "flow-tests/vaadin-spring-tests/test-spring-security-flow-websocket/pom.xml",
      "flow-tests/vaadin-spring-tests/test-spring-security-flow-websocket/src/main/java/com/vaadin/flow/spring/flowsecuritywebsocket/Application.java",
      "flow-tests/vaadin-spring-tests/test-spring-security-flow-websocket/src/main/java/com/vaadin/flow/spring/flowsecuritywebsocket/PushWebsocketConfigurer.java",
      "flow-tests/vaadin-spring-tests/test-spring-security-flow-websocket/src/main/resources/application.properties",
      "flow-tests/vaadin-spring-tests/test-spring-security-flow-websocket/src/test/java/com/vaadin/flow/spring/flowsecuritywebsocket/AppViewIT.java"
    ],
    "base_commit": "7b4052d3aa0da1f3d405071db03a692e8bf0daab",
    "head_commit": "37a69c0e06e32b4cc40f3b1b4da60495215d2481",
    "repo_url": "https://github.com/vaadin/flow/pull/20666",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20666",
    "dockerfile": "",
    "pr_merged_at": "2024-12-11T10:58:55.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/auth/NavigationAccessControl.java b/flow-server/src/main/java/com/vaadin/flow/server/auth/NavigationAccessControl.java\nindex a33042392f8..46937421001 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/auth/NavigationAccessControl.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/auth/NavigationAccessControl.java\n@@ -34,6 +34,8 @@\n import com.vaadin.flow.router.NotFoundException;\n import com.vaadin.flow.router.RouteParameters;\n import com.vaadin.flow.router.internal.PathUtil;\n+import com.vaadin.flow.server.Constants;\n+import com.vaadin.flow.server.HandlerHelper;\n import com.vaadin.flow.server.VaadinRequest;\n import com.vaadin.flow.server.VaadinService;\n import com.vaadin.flow.server.VaadinServletRequest;\n@@ -369,7 +371,13 @@ protected Predicate<String> getRolesChecker(VaadinRequest request) {\n      */\n     protected String getRequestURL(VaadinRequest vaadinRequest) {\n         if (vaadinRequest instanceof VaadinServletRequest httpRequest) {\n-            return httpRequest.getRequestURL().toString();\n+            String url = httpRequest.getRequestURL().toString();\n+            if (HandlerHelper.isRequestType(vaadinRequest,\n+                    HandlerHelper.RequestType.PUSH)\n+                    && url.endsWith(Constants.PUSH_MAPPING)) {\n+                url = url.substring(0, url.indexOf(Constants.PUSH_MAPPING));\n+            }\n+            return url;\n         }\n         return \"\";\n     }\n\ndiff --git a/scripts/computeMatrix.js b/scripts/computeMatrix.js\nindex 97354933526..6760f737127 100755\n--- a/scripts/computeMatrix.js\n+++ b/scripts/computeMatrix.js\n@@ -102,6 +102,7 @@ const moduleWeights = {\n   'flow-tests/vaadin-spring-tests/test-spring-security-flow': { pos: 5, weight: 3 },\n   'flow-tests/vaadin-spring-tests/test-spring-security-webicons': { pos: 5, weight: 3 },\n   'flow-tests/vaadin-spring-tests/test-spring-security-webicons-urlmapping': { pos: 5, weight: 3 },\n+  'flow-tests/vaadin-spring-tests/test-spring-security-flow-websocket': { pos: 5, weight: 3 },\n   'flow-tests/vaadin-spring-tests/test-spring-security-flow-contextpath': { pos: 5, weight: 3 },\n   'flow-tests/vaadin-spring-tests/test-spring-security-flow-methodsecurity': { pos: 5, weight: 3 },\n   'flow-tests/vaadin-spring-tests/test-spring-security-flow-urlmapping': { pos: 5, weight: 3 },\n",
    "test_patch": "diff --git a/flow-tests/vaadin-spring-tests/pom.xml b/flow-tests/vaadin-spring-tests/pom.xml\nindex 4c7503b4947..f1e189671fe 100644\n--- a/flow-tests/vaadin-spring-tests/pom.xml\n+++ b/flow-tests/vaadin-spring-tests/pom.xml\n@@ -324,6 +324,7 @@\n                 <module>test-mvc-without-endpoints</module>\n \n                 <module>test-spring-security-flow</module>\n+                <module>test-spring-security-flow-websocket</module>\n                 <module>test-spring-security-webicons</module>\n                 <module>test-spring-security-webicons-urlmapping</module>\n                 <module>test-spring-security-flow-contextpath</module>\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-security-flow-websocket/pom.xml b/flow-tests/vaadin-spring-tests/test-spring-security-flow-websocket/pom.xml\nnew file mode 100644\nindex 00000000000..193d3f896ea\n--- /dev/null\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-flow-websocket/pom.xml\n@@ -0,0 +1,113 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>com.vaadin</groupId>\n+        <artifactId>vaadin-spring-tests</artifactId>\n+        <version>24.7-SNAPSHOT</version>\n+    </parent>\n+    <artifactId>test-spring-security-flow-websocket</artifactId>\n+    <name>Integration tests for Vaadin Spring Security and Flow With Websocket PUSH</name>\n+    <packaging>jar</packaging>\n+    <properties>\n+        <maven.deploy.skip>true</maven.deploy.skip>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.vaadin</groupId>\n+            <artifactId>vaadin-spring</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.vaadin</groupId>\n+            <artifactId>vaadin-dev-server</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-web</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-devtools</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-security</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.vaadin</groupId>\n+            <artifactId>test-spring-security-flow</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.vaadin</groupId>\n+            <artifactId>test-spring-security-flow</artifactId>\n+            <version>${project.version}</version>\n+            <type>test-jar</type>\n+            <classifier>tests</classifier>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <defaultGoal>spring-boot:run</defaultGoal>\n+        <pluginManagement>\n+            <plugins>\n+                <plugin>\n+                    <groupId>org.springframework.boot</groupId>\n+                    <artifactId>spring-boot-maven-plugin</artifactId>\n+                    <version>${spring.boot.version}</version>\n+                </plugin>\n+            </plugins>\n+        </pluginManagement>\n+\n+        <plugins>\n+            <plugin>\n+                <groupId>com.vaadin</groupId>\n+                <artifactId>flow-maven-plugin</artifactId>\n+                <version>${project.version}</version>\n+                <configuration>\n+                    <forceProductionBuild>true</forceProductionBuild>\n+                </configuration>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>prepare-frontend</goal>\n+                            <goal>build-frontend</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.springframework.boot</groupId>\n+                <artifactId>spring-boot-maven-plugin</artifactId>\n+                <configuration>\n+                    <jvmArguments>\n+                        -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=18888\n+                    </jvmArguments>\n+                </configuration>\n+                <executions>\n+                    <!-- start and stop application when running\n+                        integration tests -->\n+                    <execution>\n+                        <id>pre-integration-test</id>\n+                        <goals>\n+                            <goal>start</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>post-integration-test</id>\n+                        <goals>\n+                            <goal>stop</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+</project>\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-security-flow-websocket/src/main/java/com/vaadin/flow/spring/flowsecuritywebsocket/Application.java b/flow-tests/vaadin-spring-tests/test-spring-security-flow-websocket/src/main/java/com/vaadin/flow/spring/flowsecuritywebsocket/Application.java\nnew file mode 100644\nindex 00000000000..76111e15eef\n--- /dev/null\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-flow-websocket/src/main/java/com/vaadin/flow/spring/flowsecuritywebsocket/Application.java\n@@ -0,0 +1,14 @@\n+package com.vaadin.flow.spring.flowsecuritywebsocket;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class Application\n+        extends com.vaadin.flow.spring.flowsecurity.Application {\n+\n+    public static void main(String[] args) {\n+        SpringApplication.run(Application.class, args);\n+    }\n+\n+}\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-security-flow-websocket/src/main/java/com/vaadin/flow/spring/flowsecuritywebsocket/PushWebsocketConfigurer.java b/flow-tests/vaadin-spring-tests/test-spring-security-flow-websocket/src/main/java/com/vaadin/flow/spring/flowsecuritywebsocket/PushWebsocketConfigurer.java\nnew file mode 100644\nindex 00000000000..20f6420c3e3\n--- /dev/null\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-flow-websocket/src/main/java/com/vaadin/flow/spring/flowsecuritywebsocket/PushWebsocketConfigurer.java\n@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2000-2024 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.spring.flowsecuritywebsocket;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.vaadin.flow.router.BeforeEnterEvent;\n+import com.vaadin.flow.router.BeforeEnterListener;\n+import com.vaadin.flow.router.ListenerPriority;\n+import com.vaadin.flow.server.ServiceInitEvent;\n+import com.vaadin.flow.server.VaadinServiceInitListener;\n+import com.vaadin.flow.shared.ui.Transport;\n+\n+@Component\n+public class PushWebsocketConfigurer implements VaadinServiceInitListener {\n+\n+    private final PushTransportSetter pushTransportSetter = new PushTransportSetter();\n+\n+    @Override\n+    public void serviceInit(ServiceInitEvent event) {\n+\n+        event.getSource().addUIInitListener(uiInitEvent -> {\n+            // Transport cannot be set directly in UI listener because\n+            // BootstrapHandler overrides it with @Push annotation value.\n+            uiInitEvent.getUI().addBeforeEnterListener(pushTransportSetter);\n+        });\n+    }\n+\n+    @ListenerPriority(10)\n+    private static class PushTransportSetter implements BeforeEnterListener {\n+\n+        @Override\n+        public void beforeEnter(BeforeEnterEvent event) {\n+            event.getUI().getPushConfiguration()\n+                    .setTransport(Transport.WEBSOCKET);\n+        }\n+    }\n+}\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-security-flow-websocket/src/main/resources/application.properties b/flow-tests/vaadin-spring-tests/test-spring-security-flow-websocket/src/main/resources/application.properties\nnew file mode 100644\nindex 00000000000..00f3e202f50\n--- /dev/null\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-flow-websocket/src/main/resources/application.properties\n@@ -0,0 +1,4 @@\n+server.port=8888\n+logging.level.org.springframework.security=TRACE\n+logging.level.org.atmosphere=DEBUG\n+server.servlet.session.persistent=false\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-security-flow-websocket/src/test/java/com/vaadin/flow/spring/flowsecuritywebsocket/AppViewIT.java b/flow-tests/vaadin-spring-tests/test-spring-security-flow-websocket/src/test/java/com/vaadin/flow/spring/flowsecuritywebsocket/AppViewIT.java\nnew file mode 100644\nindex 00000000000..48832d4aa83\n--- /dev/null\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-flow-websocket/src/test/java/com/vaadin/flow/spring/flowsecuritywebsocket/AppViewIT.java\n@@ -0,0 +1,20 @@\n+package com.vaadin.flow.spring.flowsecuritywebsocket;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+public class AppViewIT extends com.vaadin.flow.spring.flowsecurity.AppViewIT {\n+\n+    @Test\n+    @Ignore(\"\"\"\n+            With WEBSOCKET transport the WS connection is closed when session\n+            is invalidated, but Flow client attempts a reconnection and\n+            re-enables heartbeat. The heartbeat ping resolves in a 403 HTTP\n+            status code because of session expiration, causing the client-side\n+            session expiration handler to redirect to the timeout page instead\n+            of the logout view, because the logout process is still ongoing.\n+            \"\"\")\n+    public void logout_via_doLogin_redirects_to_logout() {\n+        super.logout_via_doLogin_redirects_to_logout();\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20657",
    "pr_id": 20657,
    "issue_id": 20610,
    "repo": "vaadin/flow",
    "problem_statement": "Parsing failed for browser and os versions reported to stdout\n### Description of the bug\n\nFrom logs of Start:\r\n```\r\nBrowser engine version parsing failed for: mozilla 5.0 (windows nt 10.0; win64; x64) applewebkit 537.36 (khtml, like gecko) chrome 78.0.3904.97 safari 537.36 opr 65.0.3467.48 For input string: \"a 5.0\"\r\nBrowser major version parsing failed for: 17 sa For input string: \"17 sa\"\r\nBrowser major version parsing failed for: w For input string: \"w\"\r\nBrowser minor version parsing failed for:  For input string: \"\"\r\nOS major version parsing failed for: /5 For input string: \"/5\"\r\nOS minor version parsing failed for: 0 (android For input string: \"0 (android\"\r\nOS minor version parsing failed for: 0) applewebkit/537 For input string: \"0) applewebkit/537\"\r\n```\r\n\r\nThere seems to be two issues here:\r\n1. Parsing fails\r\n2. The error is reported to stdout or stderr instead of through a logger so it took some detective work to even figure out where they come from\r\n\r\nAlso as the full string that is being parsed is not logged in all cases, it makes things a bit difficult to fix\n\n### Expected behavior\n\nNo errors are logged without a logger and parsing succeeds\n\n### Minimal reproducible example\n\n-\n\n### Versions\n\n- Vaadin / Flow version: 24.6 beta",
    "issue_word_count": 213,
    "test_files_count": 4,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/server/WebBrowser.java",
      "flow-server/src/main/java/com/vaadin/flow/shared/BrowserDetails.java",
      "flow-server/src/test/java/com/vaadin/flow/server/WebBrowserTest.java",
      "flow-server/src/test/java/com/vaadin/flow/shared/BrowserDetailsTest.java",
      "flow-server/src/test/resources/common-desktop-useragents.json",
      "flow-server/src/test/resources/mobile-useragents.json"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/server/WebBrowserTest.java",
      "flow-server/src/test/java/com/vaadin/flow/shared/BrowserDetailsTest.java",
      "flow-server/src/test/resources/common-desktop-useragents.json",
      "flow-server/src/test/resources/mobile-useragents.json"
    ],
    "base_commit": "4c6524dfbea06a6d3f3d9d8d39f8100e947add66",
    "head_commit": "b408e6a67a15c40736f9e81a0bfbcd2e0cace463",
    "repo_url": "https://github.com/vaadin/flow/pull/20657",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20657",
    "dockerfile": "",
    "pr_merged_at": "2024-12-12T07:58:20.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/WebBrowser.java b/flow-server/src/main/java/com/vaadin/flow/server/WebBrowser.java\nindex 9f7b1529ef2..6d655169c91 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/WebBrowser.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/WebBrowser.java\n@@ -19,6 +19,8 @@\n import java.io.Serializable;\n import java.util.Locale;\n \n+import org.slf4j.LoggerFactory;\n+\n import com.vaadin.flow.shared.BrowserDetails;\n \n /**\n@@ -65,7 +67,13 @@ public class WebBrowser implements Serializable {\n \n         if (agent != null) {\n             browserApplication = agent;\n-            browserDetails = new BrowserDetails(agent);\n+            browserDetails = new BrowserDetails(agent) {\n+                @Override\n+                protected void log(String error, Exception e) {\n+                    LoggerFactory.getLogger(BrowserDetails.class).error(error,\n+                            e);\n+                }\n+            };\n         }\n     }\n \n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/shared/BrowserDetails.java b/flow-server/src/main/java/com/vaadin/flow/shared/BrowserDetails.java\nindex 5fbcc9ad88b..1f20da5851b 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/shared/BrowserDetails.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/shared/BrowserDetails.java\n@@ -82,16 +82,19 @@ public BrowserDetails(String userAgent) {\n         isWebKit = !isTrident && userAgent.contains(\"applewebkit\");\n \n         // browser name\n-        isChrome = userAgent.contains(CHROME) || userAgent.contains(\" crios/\")\n-                || userAgent.contains(HEADLESSCHROME);\n-        isOpera = userAgent.contains(\"opera\");\n+        isChrome = (userAgent.contains(CHROME) || userAgent.contains(\" crios/\")\n+                || userAgent.contains(HEADLESSCHROME))\n+                && !userAgent.contains(\" opr/\");\n+        isOpera = userAgent.contains(\"opera\") || userAgent.contains(\" opr/\");\n         isIE = userAgent.contains(\"msie\") && !isOpera\n                 && !userAgent.contains(\"webtv\");\n         // IE 11 no longer contains MSIE in the user agent\n         isIE = isIE || isTrident;\n \n-        isSafari = !isChrome && !isIE && userAgent.contains(\"safari\");\n-        isFirefox = userAgent.contains(\" firefox/\");\n+        isSafari = !isChrome && !isIE && !isOpera\n+                && userAgent.contains(\"safari\");\n+        isFirefox = userAgent.contains(\" firefox/\")\n+                || userAgent.contains(\"fxios/\");\n         if (userAgent.contains(\" edge/\") || userAgent.contains(\" edg/\")\n                 || userAgent.contains(\" edga/\")\n                 || userAgent.contains(\" edgios/\")) {\n@@ -148,7 +151,7 @@ public BrowserDetails(String userAgent) {\n                     if (rvPos >= 0) {\n                         String tmp = userAgent.substring(rvPos + 3);\n                         tmp = tmp.replaceFirst(\"(\\\\.[0-9]+).+\", \"$1\");\n-                        parseVersionString(tmp);\n+                        parseVersionString(tmp, userAgent);\n                     }\n                 } else if (isTrident) {\n                     // potentially IE 11 in compatibility mode\n@@ -161,18 +164,30 @@ public BrowserDetails(String userAgent) {\n                             .substring(userAgent.indexOf(\"msie \") + 5);\n                     ieVersionString = safeSubstring(ieVersionString, 0,\n                             ieVersionString.indexOf(';'));\n-                    parseVersionString(ieVersionString);\n+                    parseVersionString(ieVersionString, userAgent);\n                 }\n             } else if (isFirefox) {\n-                int i = userAgent.indexOf(\" firefox/\") + 9;\n-                parseVersionString(safeSubstring(userAgent, i, i + 5));\n+                int i = userAgent.indexOf(\" fxios/\");\n+                if (i != -1) {\n+                    // Version present in Opera 10 and newer\n+                    i = userAgent.indexOf(\" fxios/\") + 7;\n+                } else {\n+                    i = userAgent.indexOf(\" firefox/\") + 9;\n+                }\n+                parseVersionString(\n+                        safeSubstring(userAgent, i,\n+                                i + getVersionStringLength(userAgent, i)),\n+                        userAgent);\n             } else if (isChrome) {\n                 parseChromeVersion(userAgent);\n             } else if (isSafari) {\n                 int i = userAgent.indexOf(\" version/\");\n                 if (i >= 0) {\n                     i += 9;\n-                    parseVersionString(safeSubstring(userAgent, i, i + 5));\n+                    parseVersionString(\n+                            safeSubstring(userAgent, i,\n+                                    i + getVersionStringLength(userAgent, i)),\n+                            userAgent);\n                 } else {\n                     int engineVersion = (int) (browserEngineVersion * 10);\n                     if (engineVersion >= 6010 && engineVersion < 6015) {\n@@ -206,10 +221,15 @@ public BrowserDetails(String userAgent) {\n                 if (i != -1) {\n                     // Version present in Opera 10 and newer\n                     i += 9; // \" version/\".length\n+                } else if (userAgent.contains(\" opr/\")) {\n+                    i = userAgent.indexOf(\" opr/\") + 5;\n                 } else {\n                     i = userAgent.indexOf(\"opera/\") + 6;\n                 }\n-                parseVersionString(safeSubstring(userAgent, i, i + 5));\n+                parseVersionString(\n+                        safeSubstring(userAgent, i,\n+                                i + getVersionStringLength(userAgent, i)),\n+                        userAgent);\n             } else if (isEdge) {\n                 int i = userAgent.indexOf(\" edge/\") + 6;\n                 if (userAgent.contains(\" edg/\")) {\n@@ -220,7 +240,10 @@ public BrowserDetails(String userAgent) {\n                     i = userAgent.indexOf(\" edgios/\") + 8;\n                 }\n \n-                parseVersionString(safeSubstring(userAgent, i, i + 8));\n+                parseVersionString(\n+                        safeSubstring(userAgent, i,\n+                                i + getVersionStringLength(userAgent, i)),\n+                        userAgent);\n             }\n         } catch (Exception e) {\n             // Browser version parsing failed\n@@ -274,16 +297,16 @@ private void parseChromeOSVersion(String userAgent) {\n         }\n         String osVersionString = userAgent.substring(cur + 1, end);\n         String[] parts = osVersionString.split(\"\\\\.\");\n-        parseChromeOsVersionParts(parts);\n+        parseChromeOsVersionParts(parts, userAgent);\n     }\n \n-    private void parseChromeOsVersionParts(String[] parts) {\n+    private void parseChromeOsVersionParts(String[] parts, String userAgent) {\n         osMajorVersion = -1;\n         osMinorVersion = -1;\n \n         if (parts.length > 2) {\n-            osMajorVersion = parseVersionPart(parts[0], OS_MAJOR);\n-            osMinorVersion = parseVersionPart(parts[1], OS_MINOR);\n+            osMajorVersion = parseVersionPart(parts[0], OS_MAJOR, userAgent);\n+            osMinorVersion = parseVersionPart(parts[1], OS_MINOR, userAgent);\n         }\n     }\n \n@@ -298,11 +321,13 @@ private void parseChromeVersion(String userAgent) {\n                 i += CHROME.length();\n             }\n             int versionBreak = getVersionStringLength(userAgent, i);\n-            parseVersionString(safeSubstring(userAgent, i, i + versionBreak));\n+            parseVersionString(safeSubstring(userAgent, i, i + versionBreak),\n+                    userAgent);\n         } else {\n             i += crios.length(); // move index to version string start\n             int versionBreak = getVersionStringLength(userAgent, i);\n-            parseVersionString(safeSubstring(userAgent, i, i + versionBreak));\n+            parseVersionString(safeSubstring(userAgent, i, i + versionBreak),\n+                    userAgent);\n         }\n     }\n \n@@ -327,7 +352,7 @@ private static int getVersionStringLength(String userAgent,\n \n     private void parseAndroidVersion(String userAgent) {\n         // Android 5.1;\n-        if (!userAgent.contains(\"android\")) {\n+        if (!userAgent.contains(\"android \")) {\n             return;\n         }\n \n@@ -337,7 +362,7 @@ private void parseAndroidVersion(String userAgent) {\n         osVersionString = safeSubstring(osVersionString, 0,\n                 osVersionString.indexOf(\";\"));\n         String[] parts = osVersionString.split(\"\\\\.\");\n-        parseOsVersion(parts);\n+        parseOsVersion(parts, userAgent);\n     }\n \n     private void parseIOSVersion(String userAgent) {\n@@ -349,35 +374,43 @@ private void parseIOSVersion(String userAgent) {\n         String osVersionString = safeSubstring(userAgent,\n                 userAgent.indexOf(\"os \") + 3, userAgent.indexOf(\" like mac\"));\n         String[] parts = osVersionString.split(\"_\");\n-        parseOsVersion(parts);\n+        parseOsVersion(parts, userAgent);\n     }\n \n-    private void parseOsVersion(String[] parts) {\n+    private void parseOsVersion(String[] parts, String userAgent) {\n         osMajorVersion = -1;\n         osMinorVersion = -1;\n \n         if (parts.length >= 1) {\n-            osMajorVersion = parseVersionPart(parts[0], OS_MAJOR);\n+            osMajorVersion = parseVersionPart(parts[0], OS_MAJOR, userAgent);\n         }\n         if (parts.length >= 2) {\n             // Some Androids report version numbers as \"2.1-update1\"\n             int dashIndex = parts[1].indexOf('-');\n             if (dashIndex > -1) {\n                 String dashlessVersion = parts[1].substring(0, dashIndex);\n-                osMinorVersion = parseVersionPart(dashlessVersion, OS_MINOR);\n+                osMinorVersion = parseVersionPart(dashlessVersion, OS_MINOR,\n+                        userAgent);\n             } else {\n-                osMinorVersion = parseVersionPart(parts[1], OS_MINOR);\n+                osMinorVersion = parseVersionPart(parts[1], OS_MINOR,\n+                        userAgent);\n             }\n         }\n     }\n \n-    private void parseVersionString(String versionString) {\n+    private void parseVersionString(String versionString, String userAgent) {\n         int idx = versionString.indexOf('.');\n         if (idx < 0) {\n             idx = versionString.length();\n         }\n         String majorVersionPart = safeSubstring(versionString, 0, idx);\n-        browserMajorVersion = parseVersionPart(majorVersionPart, BROWSER_MAJOR);\n+        browserMajorVersion = parseVersionPart(majorVersionPart, BROWSER_MAJOR,\n+                userAgent);\n+\n+        if (browserMajorVersion == -1) {\n+            // no need to scan for minor if major version scanning failed.\n+            return;\n+        }\n \n         int idx2 = versionString.indexOf('.', idx + 1);\n         if (idx2 < 0) {\n@@ -390,7 +423,8 @@ private void parseVersionString(String versionString) {\n         }\n         String minorVersionPart = safeSubstring(versionString, idx + 1, idx2)\n                 .replaceAll(\"[^0-9].*\", \"\");\n-        browserMinorVersion = parseVersionPart(minorVersionPart, BROWSER_MINOR);\n+        browserMinorVersion = parseVersionPart(minorVersionPart, BROWSER_MINOR,\n+                userAgent);\n     }\n \n     private static String safeSubstring(String string, int beginIndex,\n@@ -410,11 +444,13 @@ private static String safeSubstring(String string, int beginIndex,\n         return string.substring(trimmedStart, trimmedEnd);\n     }\n \n-    private int parseVersionPart(String versionString, String partName) {\n+    private int parseVersionPart(String versionString, String partName,\n+            String userAgent) {\n         try {\n             return Integer.parseInt(versionString);\n         } catch (Exception e) {\n-            log(partName + \" version parsing failed for: \" + versionString, e);\n+            log(partName + \" version parsing failed for: \" + versionString\n+                    + \"\\nWith userAgent: \" + userAgent, e);\n         }\n         return -1;\n     }\n@@ -598,6 +634,15 @@ public boolean isIPhone() {\n         return isIPhone;\n     }\n \n+    /**\n+     * Tests if the browser is run on iPad.\n+     *\n+     * @return true if run on iPad, false otherwise\n+     */\n+    public boolean isIPad() {\n+        return isIPad;\n+    }\n+\n     /**\n      * Tests if the browser is run on Chrome OS (e.g. a Chromebook).\n      *\n@@ -667,10 +712,10 @@ && getOperatingSystemMinorVersion() >= 7))) {\n         return false;\n     }\n \n-    private static void log(String error, Exception e) {\n+    protected void log(String error, Exception e) {\n         // \"Logs\" to stdout so the problem can be found but does not prevent\n         // using the app. As this class is shared, we do not use\n-        // java.util.logging\n+        // slf4j for logging as normal.\n         System.err.println(error + ' ' + e.getMessage());\n     }\n \n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/WebBrowserTest.java b/flow-server/src/test/java/com/vaadin/flow/server/WebBrowserTest.java\nindex 73682141236..55664d2824b 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/WebBrowserTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/WebBrowserTest.java\n@@ -15,8 +15,12 @@\n  */\n package com.vaadin.flow.server;\n \n+import java.util.Locale;\n+\n+import jdk.jfr.ValueDescriptor;\n import org.junit.Assert;\n import org.junit.Test;\n+import org.mockito.Mockito;\n \n public class WebBrowserTest {\n \n@@ -56,4 +60,53 @@ public void isIPhone_noDetails_returnsFalse() {\n     public void isChromeOS_noDetails_returnsFalse() {\n         Assert.assertFalse(browser.isChromeOS());\n     }\n+\n+    @Test\n+    public void isSafariOnMac_userDetails_returnsTrue() {\n+        VaadinRequest request = initRequest(\n+                \"Mozilla/5.0 (Macintosh; Intel Mac OS X 11_6_2) AppleWebKit/611.3.10.1.5 (KHTML, like Gecko) Version/14.1.2 Safari/611.3.10.1.5\");\n+\n+        browser = new WebBrowser(request);\n+        Assert.assertTrue(browser.isSafari());\n+        Assert.assertTrue(browser.isMacOSX());\n+    }\n+\n+    @Test\n+    public void isChromeOnWindows_userDetails_returnsTrue() {\n+        VaadinRequest request = initRequest(\n+                \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\");\n+\n+        browser = new WebBrowser(request);\n+        Assert.assertTrue(browser.isChrome());\n+        Assert.assertTrue(browser.isWindows());\n+    }\n+\n+    @Test\n+    public void isOperaOnWindows_userDetails_returnsTrue() {\n+        VaadinRequest request = initRequest(\n+                \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36 OPR/115.0.0.0\");\n+\n+        browser = new WebBrowser(request);\n+        Assert.assertTrue(browser.isOpera());\n+        Assert.assertTrue(browser.isWindows());\n+    }\n+\n+    @Test\n+    public void isFirefoxOnAndroid_userDetails_returnsTrue() {\n+        VaadinRequest request = initRequest(\n+                \"Mozilla/5.0 (Android; Tablet; rv:33.0) Gecko/33.0 Firefox/33.0\");\n+\n+        browser = new WebBrowser(request);\n+        Assert.assertTrue(browser.isFirefox());\n+        Assert.assertTrue(browser.isAndroid());\n+    }\n+\n+    private static VaadinRequest initRequest(String userAgent) {\n+        VaadinRequest request = Mockito.mock(VaadinRequest.class);\n+        Mockito.when(request.getLocale()).thenReturn(Locale.ENGLISH);\n+        Mockito.when(request.getRemoteAddr()).thenReturn(\"0.0.0.0\");\n+        Mockito.when(request.isSecure()).thenReturn(false);\n+        Mockito.when(request.getHeader(\"User-Agent\")).thenReturn(userAgent);\n+        return request;\n+    }\n }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/shared/BrowserDetailsTest.java b/flow-server/src/test/java/com/vaadin/flow/shared/BrowserDetailsTest.java\nindex aaeeb6ec393..0db4e9e6677 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/shared/BrowserDetailsTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/shared/BrowserDetailsTest.java\n@@ -16,9 +16,17 @@\n \n package com.vaadin.flow.shared;\n \n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Objects;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n import junit.framework.TestCase;\n+import org.apache.commons.io.IOUtils;\n import org.junit.Assert;\n \n+import com.vaadin.flow.server.frontend.TaskGenerateTsConfigTest;\n+\n public class BrowserDetailsTest extends TestCase {\n \n     private static final String FIREFOX30_WINDOWS = \"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-GB; rv:1.9.0.6) Gecko/2009011913 Firefox/3.0.6\";\n@@ -52,6 +60,7 @@ public class BrowserDetailsTest extends TestCase {\n     private static final String OPERA964_WINDOWS = \"Opera/9.64(Windows NT 5.1; U; en) Presto/2.1.1\";\n     private static final String OPERA1010_WINDOWS = \"Opera/9.80 (Windows NT 5.1; U; en) Presto/2.2.15 Version/10.10\";\n     private static final String OPERA1050_WINDOWS = \"Opera/9.80 (Windows NT 5.1; U; en) Presto/2.5.22 Version/10.50\";\n+    private static final String OPERA115_WINDOWS = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36 OPR/115.0.0.0\";\n \n     private static final String CHROME3_MAC = \"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_8; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.198 Safari/532.0\";\n     private static final String CHROME4_WINDOWS = \"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.5 (KHTML, like Gecko) Chrome/4.0.249.89 Safari/532.5\";\n@@ -690,7 +699,17 @@ public void testHeadlessChrome() {\n         assertBrowserMinorVersion(bd, 0);\n         assertEngineVersion(bd, 537.36f);\n         assertLinux(bd);\n+    }\n \n+    public void testOpera65() {\n+        String userAgent = OPERA115_WINDOWS;\n+        BrowserDetails bd = new BrowserDetails(userAgent);\n+        assertWebKit(bd);\n+        assertOpera(bd);\n+        assertBrowserMajorVersion(bd, 115);\n+        assertBrowserMinorVersion(bd, 0);\n+        assertEngineVersion(bd, 537.36f);\n+        assertWindows(bd);\n     }\n \n     public void testIos11FacebookBrowser() {\n@@ -705,6 +724,88 @@ public void testIos11Firefox() {\n         assertEngineVersion(bd, 604.3f);\n     }\n \n+    public void testCommonDesktopUserAgents() throws IOException {\n+        UserAgent[] agents = getUserAgentDetails(\n+                \"common-desktop-useragents.json\");\n+\n+        assertAgentDetails(agents);\n+    }\n+\n+    public void testMobileUserAgents() throws IOException {\n+        UserAgent[] agents = getUserAgentDetails(\"mobile-useragents.json\");\n+\n+        assertAgentDetails(agents);\n+    }\n+\n+    private static UserAgent[] getUserAgentDetails(String agentFile)\n+            throws IOException {\n+        String userAgents = IOUtils.toString(\n+                Objects.requireNonNull(TaskGenerateTsConfigTest.class\n+                        .getClassLoader().getResourceAsStream(agentFile)),\n+                StandardCharsets.UTF_8);\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        UserAgent agents[] = mapper.readValue(userAgents, UserAgent[].class);\n+        return agents;\n+    }\n+\n+    private void assertAgentDetails(UserAgent[] agents) {\n+        for (UserAgent agent : agents) {\n+            BrowserDetails bd = new BrowserDetails(agent.ua);\n+            assertOs(bd, agent.os);\n+            BrowserVersion versions = getMinorMajorVersion(\n+                    agent.browserVersion);\n+            Assert.assertEquals(\n+                    \"Major version differs on userAgent \" + agent.ua,\n+                    versions.browserMajorVersion, bd.getBrowserMajorVersion());\n+            Assert.assertEquals(\n+                    \"Minor version differs on userAgent \" + agent.ua,\n+                    versions.browserMinorVersion, bd.getBrowserMinorVersion());\n+        }\n+    }\n+\n+    private BrowserVersion getMinorMajorVersion(String browserVersion) {\n+        final String[] digits = browserVersion.split(\"[-.]\", 4);\n+\n+        int major = Integer.parseInt(digits[0]);\n+        int minor = -1;\n+        if (digits.length >= 2) {\n+            minor = Integer.parseInt(digits[1]);\n+        }\n+        return new BrowserVersion(major, minor);\n+    }\n+\n+    private void assertOs(BrowserDetails bd, String os) {\n+        switch (os) {\n+        case \"LINUX\":\n+            assertLinux(bd);\n+            break;\n+        case \"WINDOWS\":\n+            assertWindows(bd);\n+            break;\n+        case \"MACOSX\":\n+            assertMacOSX(bd);\n+            break;\n+        case \"IPAD\":\n+            assertIPad(bd);\n+            break;\n+        case \"IPHONE\":\n+            assertIPhone(bd);\n+            break;\n+        case \"ANDROID\":\n+            assertAndroid(bd);\n+            break;\n+        }\n+    }\n+\n+    private record BrowserVersion(int browserMajorVersion,\n+            int browserMinorVersion) {\n+    }\n+\n+    private record UserAgent(String ua, String browser, String browserVersion,\n+            String os, String device) {\n+    }\n+\n     /*\n      * Helper methods below\n      */\n@@ -827,13 +928,17 @@ private void assertMacOSX(BrowserDetails browserDetails) {\n         assertFalse(browserDetails.isChromeOS());\n     }\n \n-    private void assertAndroid(BrowserDetails browserDetails, int majorVersion,\n-            int minorVersion) {\n+    private void assertAndroid(BrowserDetails browserDetails) {\n         assertFalse(browserDetails.isLinux());\n         assertFalse(browserDetails.isWindows());\n         assertFalse(browserDetails.isMacOSX());\n         assertTrue(browserDetails.isAndroid());\n         assertFalse(browserDetails.isChromeOS());\n+    }\n+\n+    private void assertAndroid(BrowserDetails browserDetails, int majorVersion,\n+            int minorVersion) {\n+        assertAndroid(browserDetails);\n \n         assertOSMajorVersion(browserDetails, majorVersion);\n         assertOSMinorVersion(browserDetails, minorVersion);\n@@ -843,6 +948,10 @@ private void assertIPhone(BrowserDetails browserDetails) {\n         assertTrue(browserDetails.isIPhone());\n     }\n \n+    private void assertIPad(BrowserDetails browserDetails) {\n+        assertTrue(browserDetails.isIPad());\n+    }\n+\n     private void assertWindows(BrowserDetails browserDetails) {\n         assertWindows(browserDetails, false);\n     }\n\ndiff --git a/flow-server/src/test/resources/common-desktop-useragents.json b/flow-server/src/test/resources/common-desktop-useragents.json\nnew file mode 100644\nindex 00000000000..46426187959\n--- /dev/null\n+++ b/flow-server/src/test/resources/common-desktop-useragents.json\n@@ -0,0 +1,62 @@\n+[\n+  {\n+    \"ua\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.1\",\n+    \"browser\": \"Safari\",\n+    \"browserVersion\": \"17.6\",\n+    \"os\": \"MACOSX\"\n+  },\n+  {\n+    \"ua\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.3\",\n+    \"browser\": \"Chrome\",\n+    \"browserVersion\": \"113.0.0\",\n+    \"os\": \"MACOSX\"\n+  },\n+  {\n+    \"ua\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.3\",\n+    \"browser\": \"Chrome\",\n+    \"browserVersion\": \"130.0.0\",\n+    \"os\": \"WINDOWS\"\n+  },\n+  {\n+    \"ua\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.3\",\n+    \"browser\": \"Chrome\",\n+    \"browserVersion\": \"130.0.0\",\n+    \"os\": \"MACOSX\"\n+  },\n+  {\n+    \"ua\": \"Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0\",\n+    \"browser\": \"Firefox\",\n+    \"browserVersion\": \"115.0\",\n+    \"os\": \"WINDOWS\"\n+  },\n+  {\n+    \"ua\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.3\",\n+    \"browser\": \"Chrome\",\n+    \"browserVersion\": \"130.0.0\",\n+    \"os\": \"LINUX\"\n+  },\n+  {\n+    \"ua\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:132.0) Gecko/20100101 Firefox/132.0\",\n+    \"browser\": \"Firefox\",\n+    \"browserVersion\": \"132.0\",\n+    \"os\": \"WINDOWS\"\n+  },\n+  {\n+    \"ua\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36 Edge/18.1958\",\n+    \"browser\": \"Edge\",\n+    \"browserVersion\": \"18.1958\",\n+    \"os\": \"WINDOWS\"\n+  },\n+  {\n+    \"ua\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/117.0\",\n+    \"browser\": \"Firefox\",\n+    \"browserVersion\": \"117.0\",\n+    \"os\": \"WINDOWS\"\n+  },\n+  {\n+    \"ua\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 OPR/114.0.0.\",\n+    \"browser\": \"Opera\",\n+    \"browserVersion\": \"114.0.0\",\n+    \"os\": \"WINDOWS\"\n+  }\n+]\n\\ No newline at end of file\n\ndiff --git a/flow-server/src/test/resources/mobile-useragents.json b/flow-server/src/test/resources/mobile-useragents.json\nnew file mode 100644\nindex 00000000000..3b9ecf2ca45\n--- /dev/null\n+++ b/flow-server/src/test/resources/mobile-useragents.json\n@@ -0,0 +1,73 @@\n+[\n+  {\n+    \"ua\": \"Mozilla/5.0 (iPad; CPU OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) FxiOS/132.0 Mobile/15E148 Safari/605.1.15\",\n+    \"browser\": \"Firefox\",\n+    \"browserVersion\": \"132.0\",\n+    \"os\": \"IPAD\"\n+  },\n+  {\n+    \"ua\": \"Mozilla/5.0 (iPad; CPU OS 17_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1\",\n+    \"browser\": \"Safari\",\n+    \"browserVersion\": \"18.0\",\n+    \"os\": \"IPAD\"\n+  },\n+  {\n+    \"ua\": \"Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.102 Mobile Safari/537.36\",\n+    \"browser\": \"Chrome\",\n+    \"browserVersion\": \"130.0.6723.102\",\n+    \"os\": \"ANDROID\",\n+    \"device\": \"K\"\n+  },\n+  {\n+    \"ua\": \"Mozilla/5.0 (Android 15; Mobile; rv:132.0) Gecko/132.0 Firefox/132.0\",\n+    \"browser\": \"Firefox\",\n+    \"browserVersion\": \"132.0\",\n+    \"os\": \"ANDROID\",\n+    \"device\": \"Generic android\"\n+  },\n+  {\n+    \"ua\": \"Mozilla/5.0 (Linux; Android 10; VOG-L29) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.102 Mobile Safari/537.36 OPR/76.2.4027.73374\",\n+    \"browser\": \"Opera\",\n+    \"browserVersion\": \"76.2.4027.73374\",\n+    \"os\": \"ANDROID\",\n+    \"device\": \"Huawei\"\n+  },\n+  {\n+    \"ua\": \"Mozilla/5.0 (Linux; Android 10; SM-G970F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.102 Mobile Safari/537.36 OPR/76.2.4027.73374\",\n+    \"browser\": \"Opera\",\n+    \"browserVersion\": \"76.2.4027.73374\",\n+    \"os\": \"ANDROID\",\n+    \"device\": \"Samsung\"\n+  },\n+  {\n+    \"ua\": \"Mozilla/5.0 (Linux; Android 10; SM-N975F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.102 Mobile Safari/537.36 OPR/76.2.4027.73374\",\n+    \"browser\": \"Opera\",\n+    \"browserVersion\": \"76.2.4027.73374\",\n+    \"os\": \"ANDROID\",\n+    \"device\": \"Samsung\"\n+  },\n+  {\n+    \"ua\": \"Mozilla/5.0 (iPhone; CPU iPhone OS 17_7 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) CriOS/131.0.6778.31 Mobile/15E148 Safari/604.1\",\n+    \"browser\": \"Chrome\",\n+    \"browserVersion\": \"131.0.6778\",\n+    \"os\": \"IPHONE\"\n+  },\n+  {\n+    \"ua\": \"Mozilla/5.0 (iPhone; CPU iPhone OS 17_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 EdgiOS/130.2849.68 Mobile/15E148 Safari/605.1.15\",\n+    \"browser\": \"Edge\",\n+    \"browserVersion\": \"130.2849.68\",\n+    \"os\": \"IPHONE\"\n+  },\n+  {\n+    \"ua\": \"Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) FxiOS/132.0 Mobile/15E148 Safari/605.1.15\",\n+    \"browser\": \"Firefox\",\n+    \"browserVersion\": \"132.0\",\n+    \"os\": \"IPHONE\"\n+  },\n+  {\n+    \"ua\": \"Mozilla/5.0 (iPhone; CPU iPhone OS 17_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1\",\n+    \"browser\": \"Safari\",\n+    \"browserVersion\": \"18.0\",\n+    \"os\": \"IPHONE\"\n+  }\n+]\n\\ No newline at end of file\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20656",
    "pr_id": 20656,
    "issue_id": 20577,
    "repo": "vaadin/flow",
    "problem_statement": "DetachListeners and onDetach hooks are not called when an exception is thrown during detach of contained components\n### Description of the bug\n\nThis is related to #20293, but focuses on the `DetachEvent` rather then the `SessionDestroyEvent`.\r\n\r\nWhen a component is removed from the view, the whole component subtree will be notified bottom-up about this `DetachEvent`. If one of the detach hooks or listeners of \"lower\" components throws an exception, the components higher up the tree will never get notified.\r\n\r\nThis can lead to resource leaks, because `onDetach` is a good place to release resources (which are typically aquired in `onAttach`). \r\n\r\nCurrently, the only way to make sure a custom `onDetach` hook is always called is to check every implementation of `onDetach` of components further down the tree and make sure they don't throw, possibly using `try-catch`. And there might be third-party components which you don't control directly.\n\n### Expected behavior\n\nIdeally, there should be `try-finally`-like semantics for `DetachEvent`, meaning that the corresponding hooks and listeners should always be called, even if an exception is thrown from detach hooks further down the tree.\r\n\r\nAs I said in #20293, it shouldn't be the responsibility of these other components to make sure another component higher up the tree can clean up its resources. Instead, this should be the responsibility of that component itself, and Vaadin should provide the mechanisms to make that possible.\r\n\r\nI am not sure what exactly should happen when an exception is thrown, though. I guess a good start is to wrap every invocation of a detach hook or listener in a `try-catch` block. In the catch block, one option would be to simply pass all exceptions to `VaadinSession.getErrorHandler()`. Another option would be to remember the first exception and to add all following exceptions as suppressed to it, so the first exception can be rethrown once the whole detach process has completed.\n\n### Minimal reproducible example\n\n```java\r\npublic class DetachTest extends VerticalLayout {\r\n\r\n    public DetachTest() {\r\n        var badDiv = new Div();\r\n        badDiv.addDetachListener(e -> {\r\n            throw new IllegalStateException(\"Test\");\r\n        });\r\n        add(badDiv);\r\n    }\r\n\r\n    @Override\r\n    protected void onDetach(DetachEvent detachEvent) {\r\n        super.onDetach(detachEvent);\r\n        System.out.println(\"super important cleanup logic\");\r\n        Notification.show(\"detached\");\r\n    }\r\n}\r\n```\r\n\r\n1. Add this view to your project, with at least one other view\r\n2. Open this view in your browser\r\n3. Navigate to another view\r\n\r\n`onDetach` will not print anything to the console, nor will it show the notification.\n\n### Versions\n\n- Vaadin / Flow version: 24.5.5\r\n- Java version: Temurin 21.0.5+11\r\n- OS version: Windows 11\r\n",
    "issue_word_count": 420,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/component/ComponentUtil.java",
      "flow-server/src/main/java/com/vaadin/flow/component/DetachNotifier.java",
      "flow-server/src/test/java/com/vaadin/flow/component/ComponentTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/component/ComponentTest.java"
    ],
    "base_commit": "4c6524dfbea06a6d3f3d9d8d39f8100e947add66",
    "head_commit": "15ead0c17e768f62da7ec9dbace5fb05094cc4ad",
    "repo_url": "https://github.com/vaadin/flow/pull/20656",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20656",
    "dockerfile": "",
    "pr_merged_at": "2024-12-13T13:54:38.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/component/ComponentUtil.java b/flow-server/src/main/java/com/vaadin/flow/component/ComponentUtil.java\nindex c6f13ddb902..711ebb73c51 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/ComponentUtil.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/ComponentUtil.java\n@@ -48,6 +48,7 @@\n import com.vaadin.flow.router.Route;\n import com.vaadin.flow.router.Router;\n import com.vaadin.flow.server.Attributes;\n+import com.vaadin.flow.server.ErrorEvent;\n import com.vaadin.flow.server.VaadinService;\n import com.vaadin.flow.server.VaadinSession;\n import com.vaadin.flow.shared.Registration;\n@@ -338,7 +339,12 @@ public static void onComponentDetach(Component component) {\n         }\n \n         DetachEvent detachEvent = new DetachEvent(component);\n-        component.onDetach(detachEvent);\n+        try {\n+            component.onDetach(detachEvent);\n+        } catch (RuntimeException e) {\n+            VaadinSession.getCurrent().getErrorHandler()\n+                    .error(new ErrorEvent(e));\n+        }\n         fireEvent(component, detachEvent);\n \n         // inform component about onEnabledState if parent and child states\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/component/DetachNotifier.java b/flow-server/src/main/java/com/vaadin/flow/component/DetachNotifier.java\nindex 28f0259dad1..238fcce09d1 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/DetachNotifier.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/DetachNotifier.java\n@@ -17,6 +17,8 @@\n \n import java.io.Serializable;\n \n+import com.vaadin.flow.server.ErrorEvent;\n+import com.vaadin.flow.server.VaadinSession;\n import com.vaadin.flow.shared.Registration;\n \n /**\n@@ -38,7 +40,14 @@ default Registration addDetachListener(\n             ComponentEventListener<DetachEvent> listener) {\n         if (this instanceof Component) {\n             return ComponentUtil.addListener((Component) this,\n-                    DetachEvent.class, listener);\n+                    DetachEvent.class, event -> {\n+                        try {\n+                            listener.onComponentEvent(event);\n+                        } catch (RuntimeException e) {\n+                            VaadinSession.getCurrent().getErrorHandler()\n+                                    .error(new ErrorEvent(e));\n+                        }\n+                    });\n         } else {\n             throw new IllegalStateException(String.format(\n                     \"The class '%s' doesn't extend '%s'. \"\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/component/ComponentTest.java b/flow-server/src/test/java/com/vaadin/flow/component/ComponentTest.java\nindex d7e083c0010..be48dc61cf0 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/component/ComponentTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/component/ComponentTest.java\n@@ -18,6 +18,7 @@\n import java.lang.reflect.Field;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n@@ -737,6 +738,76 @@ public void testDetachListener_eventOrder_childFirst() {\n         parent.assertDetachEvents(1);\n     }\n \n+    @Test\n+    public void testDetach_failingListeners_allListenersInvokedAndExceptionHandled() {\n+        Set<Throwable> expectedExceptions = new HashSet<>();\n+        Set<Throwable> handledExceptions = new HashSet<>();\n+        VaadinSession session = new AlwaysLockedVaadinSession(\n+                new MockVaadinServletService());\n+        session.setErrorHandler(\n+                event -> handledExceptions.add(event.getThrowable()));\n+        VaadinSession.setCurrent(session);\n+        try {\n+            UI ui = new UI();\n+            TestComponentContainer parent = new TestComponentContainer() {\n+                @Override\n+                protected void onDetach(DetachEvent detachEvent) {\n+                    getDetachEvents().incrementAndGet();\n+                    UnsupportedOperationException exception = new UnsupportedOperationException(\n+                            \"ON-DETACH-1\");\n+                    expectedExceptions.add(exception);\n+                    throw exception;\n+                }\n+            };\n+            TestComponent child = new TestComponent() {\n+                @Override\n+                protected void onDetach(DetachEvent detachEvent) {\n+                    getDetachEvents().incrementAndGet();\n+                    UnsupportedOperationException exception = new UnsupportedOperationException(\n+                            \"ON-DETACH-2\");\n+                    expectedExceptions.add(exception);\n+                    throw exception;\n+                }\n+            };\n+            child.track();\n+            parent.track();\n+\n+            child.addDetachListener(event -> {\n+                if (event.getSource() instanceof TracksAttachDetach track) {\n+                    track.getDetachEvents().incrementAndGet();\n+                }\n+                UnsupportedOperationException exception = new UnsupportedOperationException(\n+                        \"DETACH-LISTENER-1\");\n+                expectedExceptions.add(exception);\n+                throw exception;\n+            });\n+            parent.addDetachListener(event -> {\n+                if (event.getSource() instanceof TracksAttachDetach track) {\n+                    track.getDetachEvents().incrementAndGet();\n+                }\n+                UnsupportedOperationException exception = new UnsupportedOperationException(\n+                        \"DETACH-LISTENER-2\");\n+                expectedExceptions.add(exception);\n+                throw exception;\n+            });\n+\n+            parent.add(child);\n+            ui.add(parent);\n+\n+            child.assertDetachEvents(0);\n+            parent.assertDetachEvents(0);\n+\n+            ui.remove(parent);\n+\n+            child.assertDetachEvents(3);\n+            parent.assertDetachEvents(3);\n+\n+            Assert.assertEquals(expectedExceptions, handledExceptions);\n+        } finally {\n+            VaadinSession.setCurrent(null);\n+        }\n+    }\n+\n     @Test\n     public void testAttachDetach_elementMoved_bothEventsTriggered() {\n         UI ui = new UI();\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20645",
    "pr_id": 20645,
    "issue_id": 20293,
    "repo": "vaadin/flow",
    "problem_statement": "SessionDestroyListeners are not called when an exception is thrown during detach\n### Description of the bug\n\nWhen a VaadinSession is destroyed, first all UIs are removed and then SessionDestroyListeners are called. When removing the UIs, all the onDetach hooks and DetachListeners will be notified about it.\r\n\r\nIf one of those hooks or listeners throws an exception, the SessionDestroyListeners will not be called.\n\n### Expected behavior\n\nExceptions in detach hooks and listeners should not prevent SessionDestroyListeners from being called.\n\n### Minimal reproducible example\n\n```java\r\npublic class SessionDestroyIssue extends VerticalLayout {\r\n\r\n    public SessionDestroyIssue() {\r\n        var vaadinSession = VaadinSession.getCurrent();\r\n        vaadinSession.getService().addSessionDestroyListener(e -> System.out.println(\"Session destroyed\"));\r\n        var closeSession = new Button(\"close session\", e -> vaadinSession.close());\r\n        var badDiv = new Div();\r\n        badDiv.addDetachListener(e -> {\r\n            throw new IllegalStateException(\"test\");\r\n        });\r\n        add(closeSession, badDiv);\r\n    }\r\n}\r\n```\n\n### Versions\n\n- Vaadin / Flow version: 24.4.13\r\n- Java version: Temurin 21.0.5+11\r\n- OS version: Windows 11\r\n",
    "issue_word_count": 141,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java",
      "flow-server/src/test/java/com/vaadin/flow/server/VaadinServiceTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/server/VaadinServiceTest.java"
    ],
    "base_commit": "e988d4804189eceea8095d85fcd99cb512991d26",
    "head_commit": "75f38664e6d882057f1aeb8465a4417260429658",
    "repo_url": "https://github.com/vaadin/flow/pull/20645",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20645",
    "dockerfile": "",
    "pr_merged_at": "2024-12-09T12:33:12.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java b/flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java\nindex 9cda238fa81..d0228ab1e15 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java\n@@ -702,18 +702,22 @@ public void fireSessionDestroy(VaadinSession vaadinSession) {\n             }\n             List<UI> uis = new ArrayList<>(session.getUIs());\n             for (final UI ui : uis) {\n-                ui.accessSynchronously(() -> {\n-                    /*\n-                     * close() called here for consistency so that it is always\n-                     * called before a UI is removed. UI.isClosing() is thus\n-                     * always true in UI.detach() and associated detach\n-                     * listeners.\n-                     */\n-                    if (!ui.isClosing()) {\n-                        ui.close();\n-                    }\n-                    session.removeUI(ui);\n-                });\n+                try {\n+                    ui.accessSynchronously(() -> {\n+                        /*\n+                         * close() called here for consistency so that it is\n+                         * always called before a UI is removed. UI.isClosing()\n+                         * is thus always true in UI.detach() and associated\n+                         * detach listeners.\n+                         */\n+                        if (!ui.isClosing()) {\n+                            ui.close();\n+                        }\n+                        session.removeUI(ui);\n+                    });\n+                } catch (Exception e) {\n+                    session.getErrorHandler().error(new ErrorEvent(e));\n+                }\n             }\n             SessionDestroyEvent event = new SessionDestroyEvent(\n                     VaadinService.this, session);\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/VaadinServiceTest.java b/flow-server/src/test/java/com/vaadin/flow/server/VaadinServiceTest.java\nindex 5a319caea02..f62c4e7a0f9 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/VaadinServiceTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/VaadinServiceTest.java\n@@ -15,6 +15,8 @@\n  */\n package com.vaadin.flow.server;\n \n+import com.vaadin.flow.component.DetachEvent;\n+import com.vaadin.flow.component.UI;\n import com.vaadin.flow.i18n.DefaultI18NProvider;\n import com.vaadin.flow.i18n.I18NProvider;\n import net.jcip.annotations.NotThreadSafe;\n@@ -24,12 +26,14 @@\n \n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.stream.Collectors;\n@@ -353,6 +357,64 @@ public void testSessionDestroyListenerCalled_whenAnotherListenerThrows()\n                 listener.callCount);\n     }\n \n+    @Test\n+    public void testSessionDestroyListenerCalled_andOtherUiDetachCalled_whenUiClosingThrows()\n+            throws ServiceException {\n+        VaadinService service = createService();\n+\n+        TestSessionDestroyListener listener = new TestSessionDestroyListener();\n+\n+        service.addSessionDestroyListener(listener);\n+\n+        final AtomicBoolean secondUiDetached = new AtomicBoolean();\n+        List<UI> UIs = new ArrayList<>();\n+        MockVaadinSession vaadinSession = new MockVaadinSession(service) {\n+            @Override\n+            public Collection<UI> getUIs() {\n+                return UIs;\n+            }\n+        };\n+        vaadinSession.lock();\n+        UI throwingUI = new UI() {\n+            @Override\n+            protected void onDetach(DetachEvent detachEvent) {\n+                throw new RuntimeException();\n+            }\n+\n+            @Override\n+            public VaadinSession getSession() {\n+                return vaadinSession;\n+            }\n+        };\n+\n+        throwingUI.getInternals().setSession(vaadinSession);\n+        UIs.add(throwingUI);\n+\n+        UI detachingUI = new UI() {\n+            @Override\n+            protected void onDetach(DetachEvent detachEvent) {\n+                secondUiDetached.set(true);\n+            }\n+\n+            @Override\n+            public VaadinSession getSession() {\n+                return vaadinSession;\n+            }\n+        };\n+        detachingUI.getInternals().setSession(vaadinSession);\n+        UIs.add(detachingUI);\n+\n+        vaadinSession.unlock();\n+\n+        service.fireSessionDestroy(vaadinSession);\n+\n+        Assert.assertTrue(\"Second UI detach not called properly\",\n+                secondUiDetached.get());\n+\n+        Assert.assertEquals(\"SessionDestroyListener not called exactly once\", 1,\n+                listener.callCount);\n+    }\n+\n     @Test\n     public void testServiceDestroyListenerCalled_whenAnotherListenerThrows()\n             throws ServletException, ServiceException {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20622",
    "pr_id": 20622,
    "issue_id": 20577,
    "repo": "vaadin/flow",
    "problem_statement": "DetachListeners and onDetach hooks are not called when an exception is thrown during detach of contained components\n### Description of the bug\n\nThis is related to #20293, but focuses on the `DetachEvent` rather then the `SessionDestroyEvent`.\r\n\r\nWhen a component is removed from the view, the whole component subtree will be notified bottom-up about this `DetachEvent`. If one of the detach hooks or listeners of \"lower\" components throws an exception, the components higher up the tree will never get notified.\r\n\r\nThis can lead to resource leaks, because `onDetach` is a good place to release resources (which are typically aquired in `onAttach`). \r\n\r\nCurrently, the only way to make sure a custom `onDetach` hook is always called is to check every implementation of `onDetach` of components further down the tree and make sure they don't throw, possibly using `try-catch`. And there might be third-party components which you don't control directly.\n\n### Expected behavior\n\nIdeally, there should be `try-finally`-like semantics for `DetachEvent`, meaning that the corresponding hooks and listeners should always be called, even if an exception is thrown from detach hooks further down the tree.\r\n\r\nAs I said in #20293, it shouldn't be the responsibility of these other components to make sure another component higher up the tree can clean up its resources. Instead, this should be the responsibility of that component itself, and Vaadin should provide the mechanisms to make that possible.\r\n\r\nI am not sure what exactly should happen when an exception is thrown, though. I guess a good start is to wrap every invocation of a detach hook or listener in a `try-catch` block. In the catch block, one option would be to simply pass all exceptions to `VaadinSession.getErrorHandler()`. Another option would be to remember the first exception and to add all following exceptions as suppressed to it, so the first exception can be rethrown once the whole detach process has completed.\n\n### Minimal reproducible example\n\n```java\r\npublic class DetachTest extends VerticalLayout {\r\n\r\n    public DetachTest() {\r\n        var badDiv = new Div();\r\n        badDiv.addDetachListener(e -> {\r\n            throw new IllegalStateException(\"Test\");\r\n        });\r\n        add(badDiv);\r\n    }\r\n\r\n    @Override\r\n    protected void onDetach(DetachEvent detachEvent) {\r\n        super.onDetach(detachEvent);\r\n        System.out.println(\"super important cleanup logic\");\r\n        Notification.show(\"detached\");\r\n    }\r\n}\r\n```\r\n\r\n1. Add this view to your project, with at least one other view\r\n2. Open this view in your browser\r\n3. Navigate to another view\r\n\r\n`onDetach` will not print anything to the console, nor will it show the notification.\n\n### Versions\n\n- Vaadin / Flow version: 24.5.5\r\n- Java version: Temurin 21.0.5+11\r\n- OS version: Windows 11\r\n",
    "issue_word_count": 420,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java",
      "flow-server/src/main/java/com/vaadin/flow/server/VaadinServlet.java",
      "flow-server/src/test/java/com/vaadin/flow/server/VaadinServiceTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/server/VaadinServiceTest.java"
    ],
    "base_commit": "07ba2262793fe5cbd50ae8c828311dabd3b6c94c",
    "head_commit": "fd17bc77a03081d40496bb6344b9c57dcba88686",
    "repo_url": "https://github.com/vaadin/flow/pull/20622",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20622",
    "dockerfile": "",
    "pr_merged_at": "2024-12-09T06:42:25.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java b/flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java\nindex b4e54ffccd4..9cda238fa81 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java\n@@ -2205,8 +2205,21 @@ public Registration addServiceDestroyListener(\n      */\n     public void destroy() {\n         ServiceDestroyEvent event = new ServiceDestroyEvent(this);\n-        serviceDestroyListeners\n-                .forEach(listener -> listener.serviceDestroy(event));\n+        RuntimeException exception = null;\n+        for (ServiceDestroyListener listener : serviceDestroyListeners) {\n+            try {\n+                listener.serviceDestroy(event);\n+            } catch (RuntimeException e) {\n+                if (exception == null) {\n+                    exception = e;\n+                } else {\n+                    e.addSuppressed(e);\n+                }\n+            }\n+        }\n+        if (exception != null) {\n+            throw exception;\n+        }\n     }\n \n     /**\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/VaadinServlet.java b/flow-server/src/main/java/com/vaadin/flow/server/VaadinServlet.java\nindex f8804937e3b..0e075e8882e 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/VaadinServlet.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/VaadinServlet.java\n@@ -623,10 +623,13 @@ static URL getApplicationUrl(HttpServletRequest request)\n     @Override\n     public void destroy() {\n         super.destroy();\n-        if (getService() != null) {\n-            getService().destroy();\n+        try {\n+            if (getService() != null) {\n+                getService().destroy();\n+            }\n+        } finally {\n+            isServletInitialized = false;\n         }\n-        isServletInitialized = false;\n     }\n \n     private VaadinServletContext initializeContext() {\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/VaadinServiceTest.java b/flow-server/src/test/java/com/vaadin/flow/server/VaadinServiceTest.java\nindex 97e54dc2028..5a319caea02 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/VaadinServiceTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/VaadinServiceTest.java\n@@ -30,6 +30,7 @@\n import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.stream.Collectors;\n \n@@ -63,6 +64,7 @@\n \n import static org.hamcrest.CoreMatchers.containsString;\n import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertThrows;\n \n /**\n  *\n@@ -99,6 +101,34 @@ public void sessionDestroy(SessionDestroyEvent event) {\n         }\n     }\n \n+    private class ThrowingSessionDestroyListener\n+            implements SessionDestroyListener {\n+\n+        @Override\n+        public void sessionDestroy(SessionDestroyEvent event) {\n+            throw new RuntimeException();\n+        }\n+    }\n+\n+    private class TestServiceDestroyListener implements ServiceDestroyListener {\n+\n+        int callCount = 0;\n+\n+        @Override\n+        public void serviceDestroy(ServiceDestroyEvent event) {\n+            callCount++;\n+        }\n+    }\n+\n+    private class ThrowingServiceDestroyListener\n+            implements ServiceDestroyListener {\n+\n+        @Override\n+        public void serviceDestroy(ServiceDestroyEvent event) {\n+            throw new RuntimeException();\n+        }\n+    }\n+\n     private String createCriticalNotification(String caption, String message,\n             String details, String url) {\n         return VaadinService.createCriticalNotificationJSON(caption, message,\n@@ -298,6 +328,48 @@ public void testFireSessionDestroy()\n                 1, listener.callCount);\n     }\n \n+    @Test\n+    public void testSessionDestroyListenerCalled_whenAnotherListenerThrows()\n+            throws ServiceException {\n+        VaadinService service = createService();\n+\n+        ThrowingSessionDestroyListener throwingListener = new ThrowingSessionDestroyListener();\n+        TestSessionDestroyListener listener = new TestSessionDestroyListener();\n+\n+        service.addSessionDestroyListener(throwingListener);\n+        service.addSessionDestroyListener(listener);\n+\n+        final AtomicInteger errorCount = new AtomicInteger();\n+        MockVaadinSession vaadinSession = new MockVaadinSession(service);\n+        vaadinSession.lock();\n+        vaadinSession.setErrorHandler(e -> errorCount.getAndIncrement());\n+        vaadinSession.unlock();\n+        service.fireSessionDestroy(vaadinSession);\n+\n+        Assert.assertEquals(\"ErrorHandler not called exactly once\", 1,\n+                errorCount.get());\n+\n+        Assert.assertEquals(\"SessionDestroyListener not called exactly once\", 1,\n+                listener.callCount);\n+    }\n+\n+    @Test\n+    public void testServiceDestroyListenerCalled_whenAnotherListenerThrows()\n+            throws ServletException, ServiceException {\n+        VaadinService service = createService();\n+\n+        ThrowingServiceDestroyListener throwingListener = new ThrowingServiceDestroyListener();\n+        TestServiceDestroyListener listener = new TestServiceDestroyListener();\n+\n+        service.addServiceDestroyListener(throwingListener);\n+        service.addServiceDestroyListener(listener);\n+\n+        assertThrows(RuntimeException.class, () -> service.destroy());\n+\n+        Assert.assertEquals(\"ServiceDestroyListener not called exactly once\", 1,\n+                listener.callCount);\n+    }\n+\n     @Test\n     public void captionIsSetToACriticalNotification() {\n         String notification = createCriticalNotification(\"foobar\", \"message\",\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20612",
    "pr_id": 20612,
    "issue_id": 19370,
    "repo": "vaadin/flow",
    "problem_statement": "V14 failing on frontend compilation during npm install on Tomcat 9\n### Describe the bug\r\n\r\nBuilding a Vaadin 14 project in dev mode (prepare-frontend) and running that project on Tomcat 9 it seems to fail on npm install.\r\nThis only happens on dev build of the project as \"npm install\" is not ran at \"clean install\" stage. Therefore, \"npm install\" is ran at deployment on Tomcat 9. There seems to be a permissions error with npm which I can only guess Tomcat 9 is locking the files? \r\n\r\nThe workaround is to run \"npm install\" before running to project or building with the goal \"build-frontend\" which essentially does the same thing. As soon as node_modules folder exists with no permission issues, the webapp is free to deploy with no errors and you can clean install and run. I use Netbeans and I know its not supported but I believe it is more of a tomcat issue over anything else.\r\n\r\nThis works as intended on Tomcat 8 but not Tomcat 9 and also works on Vaadin 23 but not 14.\r\n\r\nThe example errors are:\r\n\r\n`npm WARN tar TAR_ENTRY_ERROR EPERM: operation not permitted, unlink 'D:\\Test-Projects\\skeleton-starter-flow-spring-14\\node_modules\\terser-webpack-plugin\\node_modules\\source-map-support\\register-hook-require.js.DELETE.491391f56419911776e681ae5134ca8e'`\r\n\r\n`npm WARN tar TAR_ENTRY_ERROR UNKNOWN: unknown error, open 'D:\\Test-Projects\\skeleton-starter-flow-spring-14\\node_modules\\@vaadin\\vaadin-checkbox\\theme\\lumo\\vaadin-checkbox-group-styles.js'`\r\n\r\nIt looks like npm install adds the DELETE.<hash> to these files and the Vaadin webapp can no longer find the original filename.\r\n\r\n### Expected-behavior\r\n\r\nThe expected behavior would be that the webapp would run on the tomcat server in dev mode. It would see that npm install has not ran as node_modules doesn't exist. It runs npm install and the application would launch with no errors.\r\n\r\n### Reproduction\r\n\r\nI use Netbeans for this. Can probably be reproduced on other IDE's that can run Tomcat servers. To reproduce:\r\n\r\n1. Download Netbeans (20 also occurs on latest version 21)\r\n2. Download Tomcat 9 (I use Tomcat 9.0.40 but I believe error occurs on latest version also)\r\n3. Download Skeleton Spring Vaadin 14 Application [https://vaadin.com/hello-world-starters](https://vaadin.com/hello-world-starters)\r\n4. Run Netbeans as administrator\r\n5. Open Project in Netbeans (Do not fix problems as it will do npm install)\r\n6. Change POM packaging to WAR not JAR\r\n7. Right click project -> run maven -> goals -> vaadin:dance in goals and ok (Just to make sure node_modules has been removed)\r\n8. Right click project -> clean and build (Should run \"clean install\" -> prepare-frontend)\r\n9. Click Services in the top left -> right click servers -> add server -> Select Apache Tomcat -> follow stops to add server (May need to edit tomcat-home/conf/tomcat_users.xml to add the username and password.\r\n10. Go back to projects in top left and right click the project and run (This should run the project without the node_modules folder existing) \r\n11. The tomcat logs should appear, you want to follow the Apache Tomcat 9.0.x not the Apache Tomcat 9.0.x Log, after a while the errors will appear and the application will fail to launch. Further runs will not show the error but will show errors such as \"Cant find file\" \r\n\r\n### System Info\r\n\r\n- Windows 11 Pro - 22H2\r\n- Netbeans 20\r\n- Tomcat 9.0.40\r\n- Vaadin 14.8.x -> 14.11.x (Happens on latest version)",
    "issue_word_count": 577,
    "test_files_count": 2,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunNpmInstall.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunNpmInstallTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunPnpmInstallTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunNpmInstallTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunPnpmInstallTest.java"
    ],
    "base_commit": "919aad7567e410a63a586b511f2c40ca083035ca",
    "head_commit": "b9ff684cf8cd707ab66b042d86ec5f5a2479bbfa",
    "repo_url": "https://github.com/vaadin/flow/pull/20612",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20612",
    "dockerfile": "",
    "pr_merged_at": "2024-12-19T08:16:09.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunNpmInstall.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunNpmInstall.java\nindex fa3b3689f77..33d1296563a 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunNpmInstall.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunNpmInstall.java\n@@ -75,6 +75,7 @@ public class TaskRunNpmInstall implements FallibleCommand {\n             + \"%n 4) Deleting the following files from your Vaadin project's folder (if present):\"\n             + \"%n        node_modules, package-lock.json, webpack.generated.js, pnpm-lock.yaml, pnpmfile.js\"\n             + \"%n======================================================================================================%n\";\n+    public static final String INSTALLING = \"installing\";\n \n     private final NodeUpdater packageUpdater;\n \n@@ -130,16 +131,18 @@ public void execute() throws ExecutionFailedException {\n \n         if (ciBuild || packageUpdater.modified || shouldRunNpmInstall()) {\n             packageUpdater.log()\n-                    .info(\"Running `\" + toolName + \" \" + command\n-                            + \"` to resolve and \"\n+                    .info(\"Running `{} {}` to resolve and \"\n                             + \"optionally download frontend dependencies. \"\n-                            + \"This may take a moment, please stand by...\");\n+                            + \"This may take a moment, please stand by...\",\n+                            toolName, command);\n+            updateLocalHashForInstall();\n+\n             runNpmInstall();\n \n             updateLocalHash();\n         } else {\n             packageUpdater.log()\n-                    .info(\"Skipping `{} {}}` because the frontend packages \"\n+                    .info(\"Skipping `{} {}` because the frontend packages \"\n                             + \"are already installed in the folder '{}' and \"\n                             + \"the hash in the file '{}' is the same as in '{}'\",\n                             toolName, command,\n@@ -180,6 +183,21 @@ private void updateLocalHash() {\n         }\n     }\n \n+    private void updateLocalHashForInstall() {\n+        try {\n+            final JsonObject localHash = Json.createObject();\n+            localHash.put(HASH_KEY, INSTALLING);\n+\n+            final File localHashFile = getLocalHashFile();\n+            FileUtils.forceMkdirParent(localHashFile);\n+            String content = stringify(localHash, 2) + \"\\n\";\n+            FileUtils.writeStringToFile(localHashFile, content, UTF_8.name());\n+\n+        } catch (IOException e) {\n+            packageUpdater.log().warn(\"Failed to update node_modules hash.\", e);\n+        }\n+    }\n+\n     private File getLocalHashFile() {\n         return new File(packageUpdater.nodeModulesFolder, INSTALL_HASH);\n     }\n@@ -274,7 +292,7 @@ private boolean shouldRunNpmInstall() {\n             // Only flow-frontend installed\n             return true;\n         } else {\n-            return isVaadinHashUpdated();\n+            return !isVaadinHashUpdated();\n         }\n     }\n \n@@ -288,7 +306,10 @@ private boolean isVaadinHashUpdated() {\n                 if (content.hasKey(HASH_KEY)) {\n                     final JsonObject packageJson = packageUpdater\n                             .getPackageJson();\n-                    return !content.getString(HASH_KEY).equals(packageJson\n+                    if (content.get(HASH_KEY).asString().equals(INSTALLING)) {\n+                        return true;\n+                    }\n+                    return content.getString(HASH_KEY).equals(packageJson\n                             .getObject(VAADIN_DEP_KEY).getString(HASH_KEY));\n                 }\n             } catch (IOException e) {\n@@ -296,7 +317,7 @@ private boolean isVaadinHashUpdated() {\n                         .warn(\"Failed to load hashes forcing npm execution\", e);\n             }\n         }\n-        return true;\n+        return false;\n     }\n \n     /**\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunNpmInstallTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunNpmInstallTest.java\nindex b029202c7e3..4707b44aff1 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunNpmInstallTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunNpmInstallTest.java\n@@ -58,7 +58,7 @@ public class TaskRunNpmInstallTest {\n \n     private ClassFinder finder;\n \n-    protected Logger logger = Mockito.mock(Logger.class);\n+    protected MockLogger logger;\n \n     private File generatedFolder;\n \n@@ -68,6 +68,7 @@ public class TaskRunNpmInstallTest {\n \n     @Before\n     public void setUp() throws IOException {\n+        logger = new MockLogger();\n         generatedFolder = temporaryFolder.newFolder();\n         npmFolder = temporaryFolder.newFolder();\n         File generatedPath = new File(npmFolder, \"generated\");\n@@ -107,7 +108,7 @@ public void runNpmInstall_emptyDir_npmInstallIsExecuted()\n         ensurePackageJson();\n         task.execute();\n \n-        Mockito.verify(logger).info(getRunningMsg());\n+        Assert.assertTrue(logger.getLogs().contains(getRunningMsg()));\n     }\n \n     @Test\n@@ -121,7 +122,7 @@ public void runNpmInstall_nodeModulesContainsStaging_npmInstallIsExecuted()\n         ensurePackageJson();\n         task.execute();\n \n-        Mockito.verify(logger).info(getRunningMsg());\n+        Assert.assertTrue(logger.getLogs().contains(getRunningMsg()));\n     }\n \n     @Test\n@@ -165,7 +166,7 @@ public void runNpmInstall_nonEmptyDirNoLocalHash_npmInstallIsExecuted()\n         ensurePackageJson();\n         task.execute();\n \n-        Mockito.verify(logger).info(getRunningMsg());\n+        Assert.assertTrue(logger.getLogs().contains(getRunningMsg()));\n     }\n \n     @Test\n@@ -180,12 +181,13 @@ public void runNpmInstall_nonEmptyDirNoHashMatch_npmInstallIsExecuted()\n         ensurePackageJson();\n         task.execute();\n \n-        Mockito.verify(logger).info(getRunningMsg());\n+        Assert.assertTrue(logger.getLogs().contains(getRunningMsg()));\n     }\n \n     @Test\n     public void runNpmInstall_matchingHash_npmInstallIsNotExecuted()\n             throws IOException, ExecutionFailedException {\n+        logger = Mockito.mock(MockLogger.class);\n         File nodeModules = getNodeUpdater().nodeModulesFolder;\n         nodeModules.mkdir();\n \n@@ -202,7 +204,7 @@ public void runNpmInstall_matchingHash_npmInstallIsNotExecuted()\n                         \"\\\\\\\\\\\\\\\\\")),\n                 Mockito.any(), Mockito.matches(Constants.PACKAGE_JSON));\n         Assert.assertEquals(\n-                \"Skipping `{} {}}` because the frontend packages are already installed in the folder '{}' and the hash in the file '{}' is the same as in '{}'\",\n+                \"Skipping `{} {}` because the frontend packages are already installed in the folder '{}' and the hash in the file '{}' is the same as in '{}'\",\n                 captor.getValue());\n     }\n \n@@ -217,7 +219,7 @@ public void runNpmInstall_matchingHashButEmptyModules_npmInstallIsExecuted()\n         ensurePackageJson();\n         task.execute();\n \n-        Mockito.verify(logger).info(getRunningMsg());\n+        Assert.assertTrue(logger.getLogs().contains(getRunningMsg()));\n     }\n \n     @Test\n@@ -232,13 +234,13 @@ public void runNpmInstallAndCi_emptyDir_npmInstallAndCiIsExecuted()\n         ensurePackageJson();\n \n         task.execute();\n-        Mockito.verify(logger).info(getRunningMsg());\n+        Assert.assertTrue(logger.getLogs().contains(getRunningMsg()));\n \n         deleteDirectory(nodeModules);\n \n         task = createTask(true);\n         task.execute();\n-        Mockito.verify(logger).info(getRunningMsg());\n+        Assert.assertTrue(logger.getLogs().contains(getRunningMsg()));\n     }\n \n     @Test\n@@ -276,7 +278,7 @@ public void runNpmInstall_dirContainsOnlyFlowNpmPackage_npmInstallIsExecuted()\n         ensurePackageJson();\n         task.execute();\n \n-        Mockito.verify(logger).info(getRunningMsg());\n+        Assert.assertTrue(logger.getLogs().contains(getRunningMsg()));\n     }\n \n     @Test\n@@ -286,7 +288,7 @@ public void runNpmInstall_modified_npmInstallIsExecuted()\n         ensurePackageJson();\n         task.execute();\n \n-        Mockito.verify(logger).info(getRunningMsg());\n+        Assert.assertTrue(logger.getLogs().contains(getRunningMsg()));\n     }\n \n     @Test(expected = ExecutionFailedException.class)\n@@ -338,11 +340,11 @@ public void runNpmInstall_externalUpdateOfPackages_npmInstallIsRerun()\n                 packageJson.getObject(VAADIN_DEP_KEY).getString(HASH_KEY));\n \n         getNodeUpdater().writePackageFile(packageJson);\n-        logger = Mockito.mock(Logger.class);\n+        logger = new MockLogger();\n \n         task.execute();\n \n-        Mockito.verify(logger).info(getRunningMsg());\n+        Assert.assertTrue(logger.getLogs().contains(getRunningMsg()));\n     }\n \n     @Test\n@@ -411,9 +413,9 @@ protected void assertRunNpmInstallThrows_vaadinHomeNodeIsAFolder(\n     }\n \n     protected String getRunningMsg() {\n-        return \"Running `\" + getToolName() + \" \" + getCommand() + \"` to \"\n-                + \"resolve and optionally download frontend dependencies. \"\n-                + \"This may take a moment, please stand by...\";\n+        return String.format(\n+                \"Running `%s %s` to resolve and optionally download frontend dependencies. This may take a moment, please stand by...\",\n+                getToolName(), getCommand());\n     }\n \n     private String getCommand() {\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunPnpmInstallTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunPnpmInstallTest.java\nindex 25c51397050..1b0da91867b 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunPnpmInstallTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunPnpmInstallTest.java\n@@ -589,13 +589,13 @@ public void runPnpmInstallAndCi_emptyDir_pnpmInstallAndCiIsExecuted()\n         getNodeUpdater().modified = false;\n \n         task.execute();\n-        Mockito.verify(logger).info(getRunningMsg());\n+        Assert.assertTrue(logger.getLogs().contains(getRunningMsg()));\n \n         deleteDirectory(nodeModules);\n \n         TaskRunNpmInstall ciTask = createTask(true);\n         ciTask.execute();\n-        Mockito.verify(logger).info(getRunningMsg());\n+        Assert.assertTrue(logger.getLogs().contains(getRunningMsg()));\n     }\n \n     @Override\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20601",
    "pr_id": 20601,
    "issue_id": 23,
    "repo": "vaadin/flow",
    "problem_statement": "Do not send local id to client as local_id=\"..\" attribute\n",
    "issue_word_count": 10,
    "test_files_count": 2,
    "non_test_files_count": 10,
    "pr_changed_files": [
      "flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildDevBundleMojo.java",
      "flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java",
      "flow-plugins/flow-maven-plugin/src/it/offending-dependency-project/invoker.properties",
      "flow-plugins/flow-maven-plugin/src/it/offending-dependency-project/pom.xml",
      "flow-plugins/flow-maven-plugin/src/it/offending-dependency-project/src/main/java/com/vaadin/test/ProjectFlowExtension.java",
      "flow-plugins/flow-maven-plugin/src/it/offending-dependency-project/verify.bsh",
      "flow-plugins/flow-maven-plugin/src/it/plugin-pinned-deps-project/invoker.properties",
      "flow-plugins/flow-maven-plugin/src/it/plugin-pinned-deps-project/pom.xml",
      "flow-plugins/flow-maven-plugin/src/it/plugin-pinned-deps-project/src/main/java/com/vaadin/test/ProjectFlowExtension.java",
      "flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/FlowModeAbstractMojo.java",
      "flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java"
    ],
    "pr_changed_test_files": [
      "flow-plugins/flow-maven-plugin/src/it/offending-dependency-project/src/main/java/com/vaadin/test/ProjectFlowExtension.java",
      "flow-plugins/flow-maven-plugin/src/it/plugin-pinned-deps-project/src/main/java/com/vaadin/test/ProjectFlowExtension.java"
    ],
    "base_commit": "c2286a77ca26c0a7ddf2de4ad33533b325517b2d",
    "head_commit": "5d7f47ed7ecb6860a44d4bea02800986410d2ea7",
    "repo_url": "https://github.com/vaadin/flow/pull/20601",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20601",
    "dockerfile": "",
    "pr_merged_at": "2024-12-03T13:46:40.000Z",
    "patch": "diff --git a/flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildDevBundleMojo.java b/flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildDevBundleMojo.java\nindex 643bef5c7bd..ce93eb22c24 100644\n--- a/flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildDevBundleMojo.java\n+++ b/flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildDevBundleMojo.java\n@@ -17,6 +17,7 @@\n \n import java.io.File;\n import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.net.URI;\n import java.net.URISyntaxException;\n@@ -210,15 +211,37 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n         try {\n             org.apache.maven.plugin.Mojo task = reflector.createMojo(this);\n             findExecuteMethod(task.getClass()).invoke(task);\n+            reflector.logIncompatibilities(getLog()::debug);\n         } catch (MojoExecutionException | MojoFailureException e) {\n+            logTroubleshootingHints(reflector, e);\n             throw e;\n         } catch (Exception e) {\n+            logTroubleshootingHints(reflector, e);\n             throw new MojoFailureException(e.getMessage(), e);\n         } finally {\n             Thread.currentThread().setContextClassLoader(tccl);\n         }\n     }\n \n+    private void logTroubleshootingHints(Reflector reflector, Throwable ex) {\n+        reflector.logIncompatibilities(getLog()::warn);\n+        if (ex instanceof InvocationTargetException) {\n+            ex = ex.getCause();\n+        }\n+        StringBuilder errorMessage = new StringBuilder(ex.getMessage());\n+        Throwable cause = ex.getCause();\n+        while (cause != null) {\n+            if (cause.getMessage() != null) {\n+                errorMessage.append(\" \").append(cause.getMessage());\n+            }\n+            cause = cause.getCause();\n+        }\n+        getLog().error(\n+                \"The build process encountered an error: \" + errorMessage);\n+        logError(\n+                \"To diagnose the issue, please re-run Maven with the -X option to enable detailed debug logging and identify the root cause.\");\n+    }\n+\n     public void executeInternal() throws MojoFailureException {\n         long start = System.nanoTime();\n \n\ndiff --git a/flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java b/flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java\nindex 2c79ea85c9a..66d956c2977 100644\n--- a/flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java\n+++ b/flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java\n@@ -28,6 +28,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.function.Consumer;\n import java.util.function.Function;\n import java.util.stream.Collectors;\n \n@@ -52,8 +53,13 @@ public final class Reflector {\n     private static final Set<String> DEPENDENCIES_GROUP_EXCLUSIONS = Set.of(\n             \"org.apache.maven\", \"org.codehaus.plexus\", \"org.slf4j\",\n             \"org.eclipse.sisu\");\n+    // Dependency required by the plugin but not provided by Flow at runtime\n+    private static final Set<String> REQUIRED_PLUGIN_DEPENDENCIES = Set.of(\n+            \"org.reflections:reflections:jar\",\n+            \"org.zeroturnaround:zt-exec:jar\");\n \n     private final URLClassLoader isolatedClassLoader;\n+    private List<String> dependenciesIncompatibility;\n     private Object classFinder;\n \n     /**\n@@ -66,9 +72,11 @@ public Reflector(URLClassLoader isolatedClassLoader) {\n         this.isolatedClassLoader = isolatedClassLoader;\n     }\n \n-    private Reflector(URLClassLoader isolatedClassLoader, Object classFinder) {\n+    private Reflector(URLClassLoader isolatedClassLoader, Object classFinder,\n+            List<String> dependenciesIncompatibility) {\n         this.isolatedClassLoader = isolatedClassLoader;\n         this.classFinder = classFinder;\n+        this.dependenciesIncompatibility = dependenciesIncompatibility;\n     }\n \n     /**\n@@ -91,6 +99,7 @@ private Reflector(URLClassLoader isolatedClassLoader, Object classFinder) {\n      *             it is not possible to make a copy for it due to class\n      *             definition incompatibilities.\n      */\n+    @SuppressWarnings(\"unchecked\")\n     static Reflector adapt(Object reflector) {\n         if (reflector instanceof Reflector sameClassLoader) {\n             return sameClassLoader;\n@@ -103,9 +112,13 @@ static Reflector adapt(Object reflector) {\n                                 findField(reflectorClass,\n                                         \"isolatedClassLoader\"),\n                                 URLClassLoader.class);\n+                List<String> dependenciesIncompatibility = (List<String>) ReflectTools\n+                        .getJavaFieldValue(reflector, findField(reflectorClass,\n+                                \"dependenciesIncompatibility\"));\n                 Object classFinder = ReflectTools.getJavaFieldValue(reflector,\n                         findField(reflectorClass, \"classFinder\"));\n-                return new Reflector(classLoader, classFinder);\n+                return new Reflector(classLoader, classFinder,\n+                        dependenciesIncompatibility);\n             } catch (Exception e) {\n                 throw new IllegalArgumentException(\n                         \"Object of type \" + reflector.getClass().getName()\n@@ -198,9 +211,27 @@ public Mojo createMojo(BuildDevBundleMojo sourceMojo) throws Exception {\n      */\n     public static Reflector of(MavenProject project,\n             MojoExecution mojoExecution) {\n+        List<String> dependenciesIncompatibility = new ArrayList<>();\n         URLClassLoader classLoader = createIsolatedClassLoader(project,\n-                mojoExecution);\n-        return new Reflector(classLoader);\n+                mojoExecution, dependenciesIncompatibility);\n+        Reflector reflector = new Reflector(classLoader);\n+        reflector.dependenciesIncompatibility = dependenciesIncompatibility;\n+        return reflector;\n+    }\n+\n+    void logIncompatibilities(Consumer<String> logger) {\n+        if (dependenciesIncompatibility != null) {\n+            logger.accept(\n+                    \"\"\"\n+                            Found dependencies defined with different versions in project and Vaadin maven plugin.\n+                            Project dependencies are used, but plugin execution could fail if the versions are incompatible.\n+                            In case of build failure please analyze the project dependencies and update versions or configure exclusions for potential offending transitive dependencies.\n+                            You can use 'mvn dependency:tree -Dincludes=groupId:artifactId' to detect where the dependency is defined in the project.\n+\n+                            \"\"\"\n+                            + String.join(System.lineSeparator(),\n+                                    dependenciesIncompatibility));\n+        }\n     }\n \n     private synchronized Object getOrCreateClassFinder() throws Exception {\n@@ -215,7 +246,8 @@ private synchronized Object getOrCreateClassFinder() throws Exception {\n     }\n \n     private static URLClassLoader createIsolatedClassLoader(\n-            MavenProject project, MojoExecution mojoExecution) {\n+            MavenProject project, MojoExecution mojoExecution,\n+            List<String> dependenciesIncompatibility) {\n         List<URL> urls = new ArrayList<>();\n         String outputDirectory = project.getBuild().getOutputDirectory();\n         if (outputDirectory != null) {\n@@ -246,17 +278,61 @@ private static URLClassLoader createIsolatedClassLoader(\n                                         && artifact.getFile().getPath().matches(\n                                                 INCLUDE_FROM_COMPILE_DEPS_REGEX))))\n                 .collect(Collectors.toMap(keyMapper, Function.identity())));\n+\n         if (mojoExecution != null) {\n-            mojoExecution.getMojoDescriptor().getPluginDescriptor()\n-                    .getArtifacts().stream()\n+\n+            List<Artifact> pluginDependencies = mojoExecution\n+                    .getMojoDescriptor().getPluginDescriptor().getArtifacts()\n+                    .stream()\n                     // Exclude all maven artifacts to prevent class loading\n                     // clash with maven.api class realm\n                     .filter(artifact -> !DEPENDENCIES_GROUP_EXCLUSIONS\n                             .contains(artifact.getGroupId()))\n-                    .filter(artifact -> !projectDependencies\n-                            .containsKey(keyMapper.apply(artifact)))\n-                    .forEach(artifact -> projectDependencies\n-                            .put(keyMapper.apply(artifact), artifact));\n+                    .toList();\n+\n+            // Exclude project artifact that are also defined as mandatory\n+            // plugin dependencies. The version provided by the plugin will be\n+            // used to prevent failures during maven build.\n+            pluginDependencies.stream().map(keyMapper)\n+                    .filter(REQUIRED_PLUGIN_DEPENDENCIES::contains)\n+                    .forEach(projectDependencies::remove);\n+\n+            // Preserve required plugin dependency that are not provided by Flow\n+            // -1: dependency defined on both plugin and project, with different\n+            // version\n+            // 0: dependency defined on both plugin and project, with same\n+            // version\n+            // 1: dependency defined by the plugin only\n+            Map<Integer, List<Artifact>> potentialDuplicates = pluginDependencies\n+                    .stream().collect(Collectors.groupingBy(pluginArtifact -> {\n+                        Artifact projectArtifact = projectDependencies\n+                                .get(keyMapper.apply(pluginArtifact));\n+                        if (projectArtifact == null) {\n+                            return 1;\n+                        } else if (projectArtifact.getId()\n+                                .equals(pluginArtifact.getId())) {\n+                            return 0;\n+                        }\n+                        return -1;\n+                    }));\n+            // Log potential plugin and project dependency versions\n+            // incompatibilities.\n+            if (potentialDuplicates.containsKey(-1)) {\n+                potentialDuplicates.get(-1).stream().map(pluginArtifact -> {\n+                    String key = keyMapper.apply(pluginArtifact);\n+                    return String.format(\n+                            \"%s: project version [%s], plugin version [%s]\",\n+                            key, projectDependencies.get(key).getBaseVersion(),\n+                            pluginArtifact.getBaseVersion());\n+                }).forEach(dependenciesIncompatibility::add);\n+            }\n+\n+            // Add dependencies defined only by the plugin\n+            if (potentialDuplicates.containsKey(1)) {\n+                potentialDuplicates.get(1)\n+                        .forEach(artifact -> projectDependencies\n+                                .put(keyMapper.apply(artifact), artifact));\n+            }\n         }\n \n         projectDependencies.values().stream()\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/it/offending-dependency-project/invoker.properties b/flow-plugins/flow-maven-plugin/src/it/offending-dependency-project/invoker.properties\nnew file mode 100644\nindex 00000000000..e0a3360d88b\n--- /dev/null\n+++ b/flow-plugins/flow-maven-plugin/src/it/offending-dependency-project/invoker.properties\n@@ -0,0 +1,18 @@\n+#\n+# Copyright 2000-2024 Vaadin Ltd.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+# use this file except in compliance with the License. You may obtain a copy of\n+# the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+# License for the specific language governing permissions and limitations under\n+# the License.\n+#\n+\n+invoker.goals=clean package\n+invoker.buildResult=failure\n\\ No newline at end of file\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/it/offending-dependency-project/pom.xml b/flow-plugins/flow-maven-plugin/src/it/offending-dependency-project/pom.xml\nnew file mode 100644\nindex 00000000000..12ddc3f2910\n--- /dev/null\n+++ b/flow-plugins/flow-maven-plugin/src/it/offending-dependency-project/pom.xml\n@@ -0,0 +1,68 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <groupId>com.vaadin.test.maven</groupId>\n+    <artifactId>offending-dependency-project</artifactId>\n+    <version>1.0</version>\n+    <packaging>jar</packaging>\n+\n+    <description>\n+        Tests that project dependencies does not override plugin required dependency.\n+    </description>\n+\n+    <properties>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <maven.compiler.release>17</maven.compiler.release>\n+        <maven.compiler.source>${maven.compiler.release}</maven.compiler.source>\n+        <maven.compiler.target>${maven.compiler.release}</maven.compiler.target>\n+        <maven.test.skip>true</maven.test.skip>\n+\n+        <flow.version>@project.version@</flow.version>\n+        <maven.version>3.9.9</maven.version>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.vaadin</groupId>\n+            <artifactId>flow-server</artifactId>\n+            <version>${flow.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.vaadin</groupId>\n+            <artifactId>flow-client</artifactId>\n+            <version>${flow.version}</version>\n+        </dependency>\n+        <!-- commons-io 2.6 is incompatible with Flow plugin -->\n+        <dependency>\n+            <groupId>commons-io</groupId>\n+            <artifactId>commons-io</artifactId>\n+            <version>2.6</version>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <version>3.13.0</version>\n+            </plugin>\n+            <plugin>\n+                <groupId>com.vaadin</groupId>\n+                <artifactId>flow-maven-plugin</artifactId>\n+                <version>${flow.version}</version>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>prepare-frontend</goal>\n+                            <goal>build-frontend</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+</project>\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/it/offending-dependency-project/verify.bsh b/flow-plugins/flow-maven-plugin/src/it/offending-dependency-project/verify.bsh\nnew file mode 100644\nindex 00000000000..331b2b436f0\n--- /dev/null\n+++ b/flow-plugins/flow-maven-plugin/src/it/offending-dependency-project/verify.bsh\n@@ -0,0 +1,15 @@\n+import java.nio.file.*;\n+\n+flowTsx = basedir.toPath().resolve(\"build.log\");\n+if ( !Files.exists(flowTsx, new LinkOption[0]) )\n+{\n+    throw new RuntimeException(\"build.log not found\");\n+}\n+\n+lines = Files.readString(flowTsx);\n+if (\n+    !lines.contains(\"Found dependencies defined with different versions in project and Vaadin maven plugin\") &&\n+    !lines.matches(\"^commons-io:commons-io.*\\\\[2\\\\.6\\\\],.*\")\n+    ) {\n+    throw new RuntimeException(\"Offending commons-io 2.6 dependency not detected\");\n+}\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/it/plugin-pinned-deps-project/invoker.properties b/flow-plugins/flow-maven-plugin/src/it/plugin-pinned-deps-project/invoker.properties\nnew file mode 100644\nindex 00000000000..5aa13827263\n--- /dev/null\n+++ b/flow-plugins/flow-maven-plugin/src/it/plugin-pinned-deps-project/invoker.properties\n@@ -0,0 +1,17 @@\n+#\n+# Copyright 2000-2024 Vaadin Ltd.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+# use this file except in compliance with the License. You may obtain a copy of\n+# the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+# License for the specific language governing permissions and limitations under\n+# the License.\n+#\n+\n+invoker.goals=clean package\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/it/plugin-pinned-deps-project/pom.xml b/flow-plugins/flow-maven-plugin/src/it/plugin-pinned-deps-project/pom.xml\nnew file mode 100644\nindex 00000000000..32d79b0e917\n--- /dev/null\n+++ b/flow-plugins/flow-maven-plugin/src/it/plugin-pinned-deps-project/pom.xml\n@@ -0,0 +1,72 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <groupId>com.vaadin.test.maven</groupId>\n+    <artifactId>plugin-pinned-deps-project</artifactId>\n+    <version>1.0</version>\n+    <packaging>jar</packaging>\n+\n+    <description>\n+        Tests that project dependencies does not override plugin required dependency.\n+    </description>\n+\n+    <properties>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <maven.compiler.release>17</maven.compiler.release>\n+        <maven.compiler.source>${maven.compiler.release}</maven.compiler.source>\n+        <maven.compiler.target>${maven.compiler.release}</maven.compiler.target>\n+        <maven.test.skip>true</maven.test.skip>\n+\n+        <flow.version>@project.version@</flow.version>\n+        <maven.version>3.9.9</maven.version>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.vaadin</groupId>\n+            <artifactId>flow-server</artifactId>\n+            <version>${flow.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.vaadin</groupId>\n+            <artifactId>flow-client</artifactId>\n+            <version>${flow.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.reflections</groupId>\n+            <artifactId>reflections</artifactId>\n+            <version>0.9.10</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.zeroturnaround</groupId>\n+            <artifactId>zt-exec</artifactId>\n+            <version>1.4</version>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <version>3.13.0</version>\n+            </plugin>\n+            <plugin>\n+                <groupId>com.vaadin</groupId>\n+                <artifactId>flow-maven-plugin</artifactId>\n+                <version>${flow.version}</version>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>prepare-frontend</goal>\n+                            <goal>build-frontend</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+</project>\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/FlowModeAbstractMojo.java b/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/FlowModeAbstractMojo.java\nindex f1367cf19d8..67608e4e6f5 100644\n--- a/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/FlowModeAbstractMojo.java\n+++ b/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/FlowModeAbstractMojo.java\n@@ -18,6 +18,7 @@\n import javax.inject.Inject;\n \n import java.io.File;\n+import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.net.URI;\n import java.net.URISyntaxException;\n@@ -52,6 +53,7 @@\n import com.vaadin.flow.plugin.base.BuildFrontendUtil;\n import com.vaadin.flow.plugin.base.PluginAdapterBase;\n import com.vaadin.flow.server.Constants;\n+import com.vaadin.flow.server.ExecutionFailedException;\n import com.vaadin.flow.server.InitParameters;\n import com.vaadin.flow.server.frontend.FrontendTools;\n import com.vaadin.flow.server.frontend.FrontendUtils;\n@@ -305,15 +307,37 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n         try {\n             Mojo task = reflector.createMojo(this);\n             findExecuteMethod(task.getClass()).invoke(task);\n+            reflector.logIncompatibilities(getLog()::debug);\n         } catch (MojoExecutionException | MojoFailureException e) {\n+            logTroubleshootingHints(reflector, e);\n             throw e;\n         } catch (Exception e) {\n+            logTroubleshootingHints(reflector, e);\n             throw new MojoFailureException(e.getMessage(), e);\n         } finally {\n             Thread.currentThread().setContextClassLoader(tccl);\n         }\n     }\n \n+    private void logTroubleshootingHints(Reflector reflector, Throwable ex) {\n+        reflector.logIncompatibilities(getLog()::warn);\n+        if (ex instanceof InvocationTargetException) {\n+            ex = ex.getCause();\n+        }\n+        StringBuilder errorMessage = new StringBuilder(ex.getMessage());\n+        Throwable cause = ex.getCause();\n+        while (cause != null) {\n+            if (cause.getMessage() != null) {\n+                errorMessage.append(\" \").append(cause.getMessage());\n+            }\n+            cause = cause.getCause();\n+        }\n+        getLog().error(\n+                \"The build process encountered an error: \" + errorMessage);\n+        logError(\n+                \"To diagnose the issue, please re-run Maven with the -X option to enable detailed debug logging and identify the root cause.\");\n+    }\n+\n     /**\n      * Perform whatever build-process behavior this <code>Mojo</code>\n      * implements.<br>\n@@ -691,10 +715,10 @@ private void checkFlowCompatibility(PluginDescriptor pluginDescriptor) {\n                 .equals(artifact.getGroupId())\n                 && \"flow-server\".equals(artifact.getArtifactId());\n         String projectFlowVersion = project.getArtifacts().stream()\n-                .filter(isFlowServer).map(Artifact::getVersion).findFirst()\n+                .filter(isFlowServer).map(Artifact::getBaseVersion).findFirst()\n                 .orElse(null);\n         String pluginFlowVersion = pluginDescriptor.getArtifacts().stream()\n-                .filter(isFlowServer).map(Artifact::getVersion).findFirst()\n+                .filter(isFlowServer).map(Artifact::getBaseVersion).findFirst()\n                 .orElse(null);\n         if (!Objects.equals(projectFlowVersion, pluginFlowVersion)) {\n             getLog().warn(\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java b/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java\nindex 175ead2fe27..e5e2e67ca41 100644\n--- a/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java\n+++ b/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java\n@@ -28,6 +28,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.function.Consumer;\n import java.util.function.Function;\n import java.util.stream.Collectors;\n \n@@ -52,8 +53,13 @@ public final class Reflector {\n     private static final Set<String> DEPENDENCIES_GROUP_EXCLUSIONS = Set.of(\n             \"org.apache.maven\", \"org.codehaus.plexus\", \"org.slf4j\",\n             \"org.eclipse.sisu\");\n+    // Dependency required by the plugin but not provided by Flow at runtime\n+    private static final Set<String> REQUIRED_PLUGIN_DEPENDENCIES = Set.of(\n+            \"org.reflections:reflections:jar\",\n+            \"org.zeroturnaround:zt-exec:jar\");\n \n     private final URLClassLoader isolatedClassLoader;\n+    private List<String> dependenciesIncompatibility;\n     private Object classFinder;\n \n     /**\n@@ -66,9 +72,11 @@ public Reflector(URLClassLoader isolatedClassLoader) {\n         this.isolatedClassLoader = isolatedClassLoader;\n     }\n \n-    private Reflector(URLClassLoader isolatedClassLoader, Object classFinder) {\n+    private Reflector(URLClassLoader isolatedClassLoader, Object classFinder,\n+            List<String> dependenciesIncompatibility) {\n         this.isolatedClassLoader = isolatedClassLoader;\n         this.classFinder = classFinder;\n+        this.dependenciesIncompatibility = dependenciesIncompatibility;\n     }\n \n     /**\n@@ -91,6 +99,7 @@ private Reflector(URLClassLoader isolatedClassLoader, Object classFinder) {\n      *             it is not possible to make a copy for it due to class\n      *             definition incompatibilities.\n      */\n+    @SuppressWarnings(\"unchecked\")\n     static Reflector adapt(Object reflector) {\n         if (reflector instanceof Reflector sameClassLoader) {\n             return sameClassLoader;\n@@ -103,9 +112,13 @@ static Reflector adapt(Object reflector) {\n                                 findField(reflectorClass,\n                                         \"isolatedClassLoader\"),\n                                 URLClassLoader.class);\n+                List<String> dependenciesIncompatibility = (List<String>) ReflectTools\n+                        .getJavaFieldValue(reflector, findField(reflectorClass,\n+                                \"dependenciesIncompatibility\"));\n                 Object classFinder = ReflectTools.getJavaFieldValue(reflector,\n                         findField(reflectorClass, \"classFinder\"));\n-                return new Reflector(classLoader, classFinder);\n+                return new Reflector(classLoader, classFinder,\n+                        dependenciesIncompatibility);\n             } catch (Exception e) {\n                 throw new IllegalArgumentException(\n                         \"Object of type \" + reflector.getClass().getName()\n@@ -198,9 +211,27 @@ public Mojo createMojo(FlowModeAbstractMojo sourceMojo) throws Exception {\n      */\n     public static Reflector of(MavenProject project,\n             MojoExecution mojoExecution) {\n+        List<String> dependenciesIncompatibility = new ArrayList<>();\n         URLClassLoader classLoader = createIsolatedClassLoader(project,\n-                mojoExecution);\n-        return new Reflector(classLoader);\n+                mojoExecution, dependenciesIncompatibility);\n+        Reflector reflector = new Reflector(classLoader);\n+        reflector.dependenciesIncompatibility = dependenciesIncompatibility;\n+        return reflector;\n+    }\n+\n+    void logIncompatibilities(Consumer<String> logger) {\n+        if (dependenciesIncompatibility != null) {\n+            logger.accept(\n+                    \"\"\"\n+                            Found dependencies defined with different versions in project and Vaadin maven plugin.\n+                            Project dependencies are used, but plugin execution could fail if the versions are incompatible.\n+                            In case of build failure please analyze the project dependencies and update versions or configure exclusions for potential offending transitive dependencies.\n+                            You can use 'mvn dependency:tree -Dincludes=groupId:artifactId' to detect where the dependency is defined in the project.\n+\n+                            \"\"\"\n+                            + String.join(System.lineSeparator(),\n+                                    dependenciesIncompatibility));\n+        }\n     }\n \n     private synchronized Object getOrCreateClassFinder() throws Exception {\n@@ -215,7 +246,8 @@ private synchronized Object getOrCreateClassFinder() throws Exception {\n     }\n \n     private static URLClassLoader createIsolatedClassLoader(\n-            MavenProject project, MojoExecution mojoExecution) {\n+            MavenProject project, MojoExecution mojoExecution,\n+            List<String> dependenciesIncompatibility) {\n         List<URL> urls = new ArrayList<>();\n         String outputDirectory = project.getBuild().getOutputDirectory();\n         if (outputDirectory != null) {\n@@ -246,17 +278,61 @@ private static URLClassLoader createIsolatedClassLoader(\n                                         && artifact.getFile().getPath().matches(\n                                                 INCLUDE_FROM_COMPILE_DEPS_REGEX))))\n                 .collect(Collectors.toMap(keyMapper, Function.identity())));\n+\n         if (mojoExecution != null) {\n-            mojoExecution.getMojoDescriptor().getPluginDescriptor()\n-                    .getArtifacts().stream()\n+\n+            List<Artifact> pluginDependencies = mojoExecution\n+                    .getMojoDescriptor().getPluginDescriptor().getArtifacts()\n+                    .stream()\n                     // Exclude all maven artifacts to prevent class loading\n                     // clash with maven.api class realm\n                     .filter(artifact -> !DEPENDENCIES_GROUP_EXCLUSIONS\n                             .contains(artifact.getGroupId()))\n-                    .filter(artifact -> !projectDependencies\n-                            .containsKey(keyMapper.apply(artifact)))\n-                    .forEach(artifact -> projectDependencies\n-                            .put(keyMapper.apply(artifact), artifact));\n+                    .toList();\n+\n+            // Exclude project artifact that are also defined as mandatory\n+            // plugin dependencies. The version provided by the plugin will be\n+            // used to prevent failures during maven build.\n+            pluginDependencies.stream().map(keyMapper)\n+                    .filter(REQUIRED_PLUGIN_DEPENDENCIES::contains)\n+                    .forEach(projectDependencies::remove);\n+\n+            // Preserve required plugin dependency that are not provided by Flow\n+            // -1: dependency defined on both plugin and project, with different\n+            // version\n+            // 0: dependency defined on both plugin and project, with same\n+            // version\n+            // 1: dependency defined by the plugin only\n+            Map<Integer, List<Artifact>> potentialDuplicates = pluginDependencies\n+                    .stream().collect(Collectors.groupingBy(pluginArtifact -> {\n+                        Artifact projectArtifact = projectDependencies\n+                                .get(keyMapper.apply(pluginArtifact));\n+                        if (projectArtifact == null) {\n+                            return 1;\n+                        } else if (projectArtifact.getId()\n+                                .equals(pluginArtifact.getId())) {\n+                            return 0;\n+                        }\n+                        return -1;\n+                    }));\n+            // Log potential plugin and project dependency versions\n+            // incompatibilities.\n+            if (potentialDuplicates.containsKey(-1)) {\n+                potentialDuplicates.get(-1).stream().map(pluginArtifact -> {\n+                    String key = keyMapper.apply(pluginArtifact);\n+                    return String.format(\n+                            \"%s: project version [%s], plugin version [%s]\",\n+                            key, projectDependencies.get(key).getBaseVersion(),\n+                            pluginArtifact.getBaseVersion());\n+                }).forEach(dependenciesIncompatibility::add);\n+            }\n+\n+            // Add dependencies defined only by the plugin\n+            if (potentialDuplicates.containsKey(1)) {\n+                potentialDuplicates.get(1)\n+                        .forEach(artifact -> projectDependencies\n+                                .put(keyMapper.apply(artifact), artifact));\n+            }\n         }\n \n         projectDependencies.values().stream()\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java\nindex b8a1cfd80b4..a707320f3a5 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java\n@@ -178,6 +178,16 @@ public FrontendDependencies(ClassFinder finder,\n             long ms = (System.nanoTime() - start) / 1000000;\n             log().info(\"Visited {} classes. Took {} ms.\", visitedClasses.size(),\n                     ms);\n+        } catch (IllegalArgumentException ex) {\n+            StackTraceElement[] stackTrace = ex.getStackTrace();\n+            if (ex.getMessage() != null\n+                    && ex.getMessage().startsWith(\"Unsupported api \")\n+                    && stackTrace.length > 0 && stackTrace[0].getClassName()\n+                            .equals(\"org.objectweb.asm.ClassVisitor\")) {\n+                log().error(\n+                        \"Invalid asm library version. Please make sure that the project does not override org.ow2.asm:asm dependency defined by Vaadin with an incompatible version.\");\n+            }\n+            throw ex;\n         } catch (ClassNotFoundException | InstantiationException\n                 | IllegalAccessException | IOException e) {\n             throw new IllegalStateException(\n",
    "test_patch": "diff --git a/flow-plugins/flow-maven-plugin/src/it/offending-dependency-project/src/main/java/com/vaadin/test/ProjectFlowExtension.java b/flow-plugins/flow-maven-plugin/src/it/offending-dependency-project/src/main/java/com/vaadin/test/ProjectFlowExtension.java\nnew file mode 100644\nindex 00000000000..fd5304d4b88\n--- /dev/null\n+++ b/flow-plugins/flow-maven-plugin/src/it/offending-dependency-project/src/main/java/com/vaadin/test/ProjectFlowExtension.java\n@@ -0,0 +1,20 @@\n+package com.vaadin.test;\n+\n+import java.util.List;\n+\n+import com.vaadin.flow.server.frontend.Options;\n+import com.vaadin.flow.server.frontend.TypeScriptBootstrapModifier;\n+import com.vaadin.flow.server.frontend.scanner.FrontendDependenciesScanner;\n+\n+/**\n+ * Hello world!\n+ */\n+public class ProjectFlowExtension implements TypeScriptBootstrapModifier {\n+\n+    @Override\n+    public void modify(List<String> bootstrapTypeScript, Options options,\n+            FrontendDependenciesScanner frontendDependenciesScanner) {\n+        System.out.println(\"ProjectFlowExtension\");\n+        bootstrapTypeScript.add(\"(window as any).testProject=1;\");\n+    }\n+}\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/it/plugin-pinned-deps-project/src/main/java/com/vaadin/test/ProjectFlowExtension.java b/flow-plugins/flow-maven-plugin/src/it/plugin-pinned-deps-project/src/main/java/com/vaadin/test/ProjectFlowExtension.java\nnew file mode 100644\nindex 00000000000..fd5304d4b88\n--- /dev/null\n+++ b/flow-plugins/flow-maven-plugin/src/it/plugin-pinned-deps-project/src/main/java/com/vaadin/test/ProjectFlowExtension.java\n@@ -0,0 +1,20 @@\n+package com.vaadin.test;\n+\n+import java.util.List;\n+\n+import com.vaadin.flow.server.frontend.Options;\n+import com.vaadin.flow.server.frontend.TypeScriptBootstrapModifier;\n+import com.vaadin.flow.server.frontend.scanner.FrontendDependenciesScanner;\n+\n+/**\n+ * Hello world!\n+ */\n+public class ProjectFlowExtension implements TypeScriptBootstrapModifier {\n+\n+    @Override\n+    public void modify(List<String> bootstrapTypeScript, Options options,\n+            FrontendDependenciesScanner frontendDependenciesScanner) {\n+        System.out.println(\"ProjectFlowExtension\");\n+        bootstrapTypeScript.add(\"(window as any).testProject=1;\");\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20551",
    "pr_id": 20551,
    "issue_id": 20555,
    "repo": "vaadin/flow",
    "problem_statement": "project failed with Duplicated key on 24.5.6 (flow 24.5.7)\n### Describe the bug\n\nAfter upgrade to Vaadin 24.5.6, project builds failed with \r\n```\r\nExecution configure of goal com.vaadin:vaadin-maven-plugin:24.5.6:configure failed: Duplicate key org.yaml:snakeyaml (attempted merging values org.yaml:snakeyaml:jar:2.2:compile and org.yaml:snakeyaml:jar:android:1.23:compile)\r\n```\r\n\r\n```\r\nExecution default of goal com.vaadin:flow-maven-plugin:24.5.7:prepare-frontend failed: Duplicate key javax.validation:validation-api (attempted merging values javax.validation:validation-api:jar:1.0.0.GA:compile and javax.validation:validation-api:jar:sources:1.0.0.GA:compile)\r\n```\n\n### Expected-behavior\n\nproject builds without failures. \n\n### Reproduction\n\ntake either the `ce-demo` or `mpr-demo`\r\nupgrade the flow.version to 24.5.7 and vaadin.version to 24.5.6\r\nrun `mvn install -DskipTests -Pproduction`\n\n### System Info\n\nVaadin version 24.5.6 and flow 24.5.7",
    "issue_word_count": 158,
    "test_files_count": 1,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java",
      "flow-plugins/flow-maven-plugin/src/it/deps-with-classifier-dups-project/invoker.properties",
      "flow-plugins/flow-maven-plugin/src/it/deps-with-classifier-dups-project/pom.xml",
      "flow-plugins/flow-maven-plugin/src/it/deps-with-classifier-dups-project/src/main/java/com/vaadin/test/ProjectFlowExtension.java",
      "flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java"
    ],
    "pr_changed_test_files": [
      "flow-plugins/flow-maven-plugin/src/it/deps-with-classifier-dups-project/src/main/java/com/vaadin/test/ProjectFlowExtension.java"
    ],
    "base_commit": "9c1e56cddc6836423ef7d7f2c4ae5a24d2a1d5b2",
    "head_commit": "e889a11557fff35b92682b3e0a0005dd2cf11797",
    "repo_url": "https://github.com/vaadin/flow/pull/20551",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20551",
    "dockerfile": "",
    "pr_merged_at": "2024-11-27T13:02:47.000Z",
    "patch": "diff --git a/flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java b/flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java\nindex b130a235255..2c79ea85c9a 100644\n--- a/flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java\n+++ b/flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java\n@@ -223,7 +223,10 @@ private static URLClassLoader createIsolatedClassLoader(\n         }\n \n         Function<Artifact, String> keyMapper = artifact -> artifact.getGroupId()\n-                + \":\" + artifact.getArtifactId();\n+                + \":\" + artifact.getArtifactId() + \":\" + artifact.getType()\n+                + ((artifact.getClassifier() != null)\n+                        ? \":\" + artifact.getClassifier()\n+                        : \"\");\n \n         Map<String, Artifact> projectDependencies = new HashMap<>(project\n                 .getArtifacts().stream()\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/it/deps-with-classifier-dups-project/invoker.properties b/flow-plugins/flow-maven-plugin/src/it/deps-with-classifier-dups-project/invoker.properties\nnew file mode 100644\nindex 00000000000..5aa13827263\n--- /dev/null\n+++ b/flow-plugins/flow-maven-plugin/src/it/deps-with-classifier-dups-project/invoker.properties\n@@ -0,0 +1,17 @@\n+#\n+# Copyright 2000-2024 Vaadin Ltd.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+# use this file except in compliance with the License. You may obtain a copy of\n+# the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+# License for the specific language governing permissions and limitations under\n+# the License.\n+#\n+\n+invoker.goals=clean package\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/it/deps-with-classifier-dups-project/pom.xml b/flow-plugins/flow-maven-plugin/src/it/deps-with-classifier-dups-project/pom.xml\nnew file mode 100644\nindex 00000000000..a90442ce776\n--- /dev/null\n+++ b/flow-plugins/flow-maven-plugin/src/it/deps-with-classifier-dups-project/pom.xml\n@@ -0,0 +1,73 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <groupId>com.vaadin.test.maven</groupId>\n+    <artifactId>deps-with-classifier-dups-project</artifactId>\n+    <version>1.0</version>\n+    <packaging>jar</packaging>\n+\n+    <description>\n+        Tests that plugin dependency plus classifier do not break build.\n+    </description>\n+\n+    <properties>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <maven.compiler.release>17</maven.compiler.release>\n+        <maven.compiler.source>${maven.compiler.release}</maven.compiler.source>\n+        <maven.compiler.target>${maven.compiler.release}</maven.compiler.target>\n+        <maven.test.skip>true</maven.test.skip>\n+\n+        <flow.version>@project.version@</flow.version>\n+        <maven.version>3.9.9</maven.version>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.vaadin</groupId>\n+            <artifactId>flow-server</artifactId>\n+            <version>${flow.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.vaadin</groupId>\n+            <artifactId>flow-client</artifactId>\n+            <version>${flow.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.yaml</groupId>\n+            <artifactId>snakeyaml</artifactId>\n+            <version>2.2</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.yaml</groupId>\n+            <artifactId>snakeyaml</artifactId>\n+            <version>1.23</version>\n+            <classifier>android</classifier>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <version>3.13.0</version>\n+            </plugin>\n+            <plugin>\n+                <groupId>com.vaadin</groupId>\n+                <artifactId>flow-maven-plugin</artifactId>\n+                <version>${flow.version}</version>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>prepare-frontend</goal>\n+                            <goal>build-frontend</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+</project>\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java b/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java\nindex b5ee45c4408..175ead2fe27 100644\n--- a/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java\n+++ b/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/Reflector.java\n@@ -223,7 +223,10 @@ private static URLClassLoader createIsolatedClassLoader(\n         }\n \n         Function<Artifact, String> keyMapper = artifact -> artifact.getGroupId()\n-                + \":\" + artifact.getArtifactId();\n+                + \":\" + artifact.getArtifactId() + \":\" + artifact.getType()\n+                + ((artifact.getClassifier() != null)\n+                        ? \":\" + artifact.getClassifier()\n+                        : \"\");\n \n         Map<String, Artifact> projectDependencies = new HashMap<>(project\n                 .getArtifacts().stream()\n",
    "test_patch": "diff --git a/flow-plugins/flow-maven-plugin/src/it/deps-with-classifier-dups-project/src/main/java/com/vaadin/test/ProjectFlowExtension.java b/flow-plugins/flow-maven-plugin/src/it/deps-with-classifier-dups-project/src/main/java/com/vaadin/test/ProjectFlowExtension.java\nnew file mode 100644\nindex 00000000000..fd5304d4b88\n--- /dev/null\n+++ b/flow-plugins/flow-maven-plugin/src/it/deps-with-classifier-dups-project/src/main/java/com/vaadin/test/ProjectFlowExtension.java\n@@ -0,0 +1,20 @@\n+package com.vaadin.test;\n+\n+import java.util.List;\n+\n+import com.vaadin.flow.server.frontend.Options;\n+import com.vaadin.flow.server.frontend.TypeScriptBootstrapModifier;\n+import com.vaadin.flow.server.frontend.scanner.FrontendDependenciesScanner;\n+\n+/**\n+ * Hello world!\n+ */\n+public class ProjectFlowExtension implements TypeScriptBootstrapModifier {\n+\n+    @Override\n+    public void modify(List<String> bootstrapTypeScript, Options options,\n+            FrontendDependenciesScanner frontendDependenciesScanner) {\n+        System.out.println(\"ProjectFlowExtension\");\n+        bootstrapTypeScript.add(\"(window as any).testProject=1;\");\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20547",
    "pr_id": 20547,
    "issue_id": 20506,
    "repo": "vaadin/flow",
    "problem_statement": "Server to resend a response message that client waits for\nWhen server receives the same message id and hash as latest handled server should resend the previous payload to the client.\n\n- Store the latest handled payload until next id is handled\n- Only resend payload if client id & hash is the latest handled message\n\nThis should help to avoid unnecessary resynchronisations and loggings like:\n```\ncom.vaadin.flow.server.communication.ServerRpcHandler   | Ignoring old duplicate message from the client. Expected: 1748, got: 1747.\n```\n",
    "issue_word_count": 80,
    "test_files_count": 2,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/UidlRequestHandler.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/ServerRpcHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/server/communication/ServerRpcHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java"
    ],
    "base_commit": "3149de877eba6052913dda68a80b2d2d7a71009e",
    "head_commit": "5be342a695d6bf6338a1439def63587ceba6716a",
    "repo_url": "https://github.com/vaadin/flow/pull/20547",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20547",
    "dockerfile": "",
    "pr_merged_at": "2024-11-27T07:55:23.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java b/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java\nindex fb6c0dadc88..7b58e5cc0f2 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java\n@@ -215,6 +215,8 @@ public List<Object> getParameters() {\n \n     private byte[] lastProcessedMessageHash = null;\n \n+    private String lastRequestResponse;\n+\n     private String contextRootRelativePath;\n \n     private String appId;\n@@ -305,6 +307,25 @@ public void setLastProcessedClientToServerId(\n         this.lastProcessedMessageHash = lastProcessedMessageHash;\n     }\n \n+    /**\n+     * Sets the response created for the last UIDL request.\n+     *\n+     * @param lastRequestResponse\n+     *            The request that was sent for the last UIDL request.\n+     */\n+    public void setLastRequestResponse(String lastRequestResponse) {\n+        this.lastRequestResponse = lastRequestResponse;\n+    }\n+\n+    /**\n+     * Returns the response created for the last UIDL request.\n+     *\n+     * @return The request that was sent for the last UIDL request.\n+     */\n+    public String getLastRequestResponse() {\n+        return lastRequestResponse;\n+    }\n+\n     /**\n      * Gets the server sync id.\n      * <p>\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java\nindex 291d887d4c3..4612fa50bcc 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java\n@@ -236,6 +236,19 @@ public ResynchronizationRequiredException() {\n         }\n     }\n \n+    /**\n+     * Exception thrown when the client side re-sends the same request.\n+     */\n+    public static class ClientResentPayloadException extends RuntimeException {\n+\n+        /**\n+         * Default constructor for the exception.\n+         */\n+        public ClientResentPayloadException() {\n+            super();\n+        }\n+    }\n+\n     /**\n      * Reads JSON containing zero or more serialized RPC calls (including legacy\n      * variable changes) and executes the calls.\n@@ -317,9 +330,11 @@ public void handleRpc(UI ui, String message, VaadinRequest request)\n                  * situation is most likely triggered by a timeout or such\n                  * causing a message to be resent.\n                  */\n-                getLogger().info(\n-                        \"Ignoring old duplicate message from the client. Expected: \"\n-                                + expectedId + \", got: \" + requestId);\n+                getLogger().debug(\n+                        \"Received old duplicate message from the client. Expected: \"\n+                                + expectedId + \", got: \" + requestId\n+                                + \". Resending previous response.\");\n+                throw new ClientResentPayloadException();\n             } else if (rpcRequest.isUnloadBeaconRequest()) {\n                 getLogger().debug(\n                         \"Ignoring unexpected message id from the client on UNLOAD request. \"\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/UidlRequestHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/UidlRequestHandler.java\nindex 8a90334aac1..f47e19362af 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/UidlRequestHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/UidlRequestHandler.java\n@@ -39,6 +39,7 @@\n import com.vaadin.flow.server.VaadinService;\n import com.vaadin.flow.server.VaadinSession;\n import com.vaadin.flow.server.communication.ServerRpcHandler.InvalidUIDLSecurityKeyException;\n+import com.vaadin.flow.server.communication.ServerRpcHandler.ClientResentPayloadException;\n import com.vaadin.flow.server.communication.ServerRpcHandler.ResynchronizationRequiredException;\n import com.vaadin.flow.server.dau.DAUUtils;\n import com.vaadin.flow.server.dau.DauEnforcementException;\n@@ -134,8 +135,10 @@ public Optional<ResponseWriter> synchronizedHandleRequest(\n         StringWriter stringWriter = new StringWriter();\n \n         try {\n-            getRpcHandler(session).handleRpc(uI, requestBody, request);\n+            getRpcHandler().handleRpc(uI, requestBody, request);\n             writeUidl(uI, stringWriter, false);\n+        } catch (ClientResentPayloadException e) {\n+            stringWriter.write(uI.getInternals().getLastRequestResponse());\n         } catch (JsonException e) {\n             getLogger().error(\"Error writing JSON to response\", e);\n             // Refresh on client side\n@@ -176,6 +179,7 @@ void writeUidl(UI ui, Writer writer, boolean resync) throws IOException {\n \n         // some dirt to prevent cross site scripting\n         String responseString = \"for(;;);[\" + uidl.toJson() + \"]\";\n+        ui.getInternals().setLastRequestResponse(responseString);\n         writer.write(responseString);\n     }\n \n@@ -208,7 +212,7 @@ public boolean handleSessionExpired(VaadinRequest request,\n         return true;\n     }\n \n-    private ServerRpcHandler getRpcHandler(VaadinSession session) {\n+    private ServerRpcHandler getRpcHandler() {\n         ServerRpcHandler handler = rpcHandler.get();\n         if (handler == null) {\n             rpcHandler.compareAndSet(null, createRpcHandler());\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/ServerRpcHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/ServerRpcHandlerTest.java\nindex 0996a9768ff..6c8116a82ff 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/ServerRpcHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/ServerRpcHandlerTest.java\n@@ -1,7 +1,6 @@\n package com.vaadin.flow.server.communication;\n \n import java.io.IOException;\n-import java.io.Reader;\n import java.io.StringReader;\n \n import org.junit.Assert;\n@@ -99,9 +98,9 @@ public void handleRpc_resynchronize_throwsExceptionAndDirtiesTreeAndClearsDepend\n         Mockito.verify(dependencyList).clearPendingSendToClient();\n     }\n \n-    @Test\n-    public void handleRpc_duplicateMessage_doNotThrow()\n-            throws InvalidUIDLSecurityKeyException, IOException {\n+    @Test(expected = ServerRpcHandler.ClientResentPayloadException.class)\n+    public void handleRpc_duplicateMessage_throwsResendPayload()\n+            throws InvalidUIDLSecurityKeyException {\n         String msg = \"{\\\"\" + ApplicationConstants.CLIENT_TO_SERVER_ID + \"\\\":1}\";\n         ServerRpcHandler handler = new ServerRpcHandler();\n \n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java\nindex 07440e1a9ef..f9a26c7194e 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java\n@@ -19,7 +19,6 @@\n \n import java.io.IOException;\n import java.io.OutputStream;\n-import java.io.Reader;\n import java.io.StringWriter;\n import java.util.Collections;\n import java.util.Optional;\n@@ -31,6 +30,7 @@\n import org.mockito.Mockito;\n \n import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.function.DeploymentConfiguration;\n import com.vaadin.flow.server.DefaultDeploymentConfiguration;\n import com.vaadin.flow.server.HandlerHelper.RequestType;\n import com.vaadin.flow.server.MockVaadinContext;\n@@ -46,6 +46,7 @@\n import com.vaadin.flow.server.startup.ApplicationConfiguration;\n import com.vaadin.flow.shared.ApplicationConstants;\n import com.vaadin.pro.licensechecker.dau.EnforcementException;\n+import com.vaadin.tests.util.MockUI;\n \n import elemental.json.JsonObject;\n import elemental.json.impl.JsonUtil;\n@@ -128,9 +129,73 @@ public void writeSessionExpired_whenUINotFound() throws IOException {\n                 responseContent);\n     }\n \n+    @Test\n+    public void clientRequestsPreviousIdAndPayload_resendPreviousResponse()\n+            throws IOException {\n+\n+        UI ui = getUi();\n+        VaadinSession session = ui.getSession();\n+        VaadinService service = session.getService();\n+        DeploymentConfiguration conf = Mockito\n+                .mock(DeploymentConfiguration.class);\n+        Mockito.when(service.getDeploymentConfiguration()).thenReturn(conf);\n+        Mockito.when(conf.isRequestTiming()).thenReturn(false);\n+\n+        String requestBody = \"\"\"\n+                {\n+                   \"csrfToken\": \"d1f44a6f-bbe5-4493-a8a9-3f5f234a2a93\",\n+                   \"rpc\": [\n+                     {\n+                       \"type\": \"mSync\",\n+                       \"node\": 12,\n+                       \"feature\": 1,\n+                       \"property\": \"value\",\n+                       \"value\": \"a\"\n+                     },\n+                     {\n+                       \"type\": \"event\",\n+                       \"node\": 12,\n+                       \"event\": \"change\",\n+                       \"data\": {}\n+                     }\n+                   ],\n+                   \"syncId\": 0,\n+                   \"clientId\": 0\n+                 }\n+                \"\"\";\n+        Mockito.when(request.getService()).thenReturn(service);\n+        Mockito.when(conf.isSyncIdCheckEnabled()).thenReturn(true);\n+\n+        Optional<SynchronizedRequestHandler.ResponseWriter> result = handler\n+                .synchronizedHandleRequest(session, request, response,\n+                        requestBody);\n+        Assert.assertTrue(\"ResponseWriter should be present\",\n+                result.isPresent());\n+        result.get().writeResponse();\n+        String responseContent = CommunicationUtil\n+                .getStringWhenWriteString(outputStream);\n+\n+        // Init clean response\n+        response = Mockito.mock(VaadinResponse.class);\n+        outputStream = Mockito.mock(OutputStream.class);\n+        Mockito.when(response.getOutputStream()).thenReturn(outputStream);\n+\n+        result = handler.synchronizedHandleRequest(session, request, response,\n+                requestBody);\n+        Assert.assertTrue(\"ResponseWriter should be present\",\n+                result.isPresent());\n+        result.get().writeResponse();\n+        String resendResponseContent = CommunicationUtil\n+                .getStringWhenWriteString(outputStream);\n+\n+        // response shouldn't contain async\n+        Assert.assertEquals(\"Server should send same content again\",\n+                responseContent, resendResponseContent);\n+    }\n+\n     @Test\n     public void should_modifyUidl_when_MPR() throws Exception {\n-        UI ui = mock(UI.class);\n+        UI ui = getUi();\n \n         UidlRequestHandler handler = spy(new UidlRequestHandler());\n         StringWriter writer = new StringWriter();\n@@ -151,7 +216,7 @@ public void should_modifyUidl_when_MPR() throws Exception {\n \n     @Test\n     public void should_changeURL_when_v7LocationProvided() throws Exception {\n-        UI ui = mock(UI.class);\n+        UI ui = getUi();\n \n         UidlRequestHandler handler = spy(new UidlRequestHandler());\n         StringWriter writer = new StringWriter();\n@@ -172,7 +237,7 @@ public void should_changeURL_when_v7LocationProvided() throws Exception {\n     @Test\n     public void should_updateHash_when_v7LocationNotProvided()\n             throws Exception {\n-        UI ui = mock(UI.class);\n+        UI ui = getUi();\n \n         UidlRequestHandler handler = spy(new UidlRequestHandler());\n         StringWriter writer = new StringWriter();\n@@ -192,7 +257,7 @@ public void should_updateHash_when_v7LocationNotProvided()\n \n     @Test\n     public void should_not_modify_non_MPR_Uidl() throws Exception {\n-        UI ui = mock(UI.class);\n+        UI ui = getUi();\n \n         UidlRequestHandler handler = spy(new UidlRequestHandler());\n         StringWriter writer = new StringWriter();\n@@ -217,7 +282,7 @@ public void should_not_modify_non_MPR_Uidl() throws Exception {\n     @Test\n     public void should_not_update_browser_history_if_no_hash_in_location()\n             throws Exception {\n-        UI ui = mock(UI.class);\n+        UI ui = getUi();\n \n         UidlRequestHandler handler = spy(new UidlRequestHandler());\n         StringWriter writer = new StringWriter();\n@@ -351,4 +416,29 @@ private JsonObject getUidlWithNoHashInLocation() {\n         // @formatter:on\n     }\n \n+    /**\n+     * Mock ui with session.\n+     *\n+     * @return\n+     */\n+    private static UI getUi() {\n+        VaadinService service = mock(VaadinService.class);\n+        VaadinSession session = new VaadinSession(service) {\n+            @Override\n+            public boolean hasLock() {\n+                return true;\n+            }\n+\n+            @Override\n+            public VaadinService getService() {\n+                return service;\n+            }\n+        };\n+\n+        UI ui = new MockUI(session);\n+\n+        when(service.findUI(Mockito.any())).thenReturn(ui);\n+\n+        return ui;\n+    }\n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20542",
    "pr_id": 20542,
    "issue_id": 20496,
    "repo": "vaadin/flow",
    "problem_statement": "Vaadin Router is installed while it's not used by default\n### Description of the bug\n\n`@vaadin/router` is added to `package.json`, installed and added to a bundle in a Vaadin 24.6 application that doesn't specify a router, nor that opts-out from React.\r\nReact Router should be used by default and Vaadin Router shouldn't be added.\r\n\r\nSee e.g. this starter https://github.com/vaadin/skeleton-starter-hilla-react/blob/b54e9e0f9cdb14d47409e45b78e71373b6cac91c/package.json#L20.\n\n### Expected behavior\n\n`@vaadin/router` is not added to a project.\n\n### Minimal reproducible example\n\nhttps://github.com/vaadin/skeleton-starter-hilla-react/blob/b54e9e0f9cdb14d47409e45b78e71373b6cac91c/package.json#L20\n\n### Versions\n\n- Vaadin / Flow version: 24.6.0.alpha3.\r\n",
    "issue_word_count": 112,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonConverter.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonConverterTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonConverterTest.java"
    ],
    "base_commit": "fabd60796780fd985c14471ddfe31b0dd6186cfa",
    "head_commit": "746c40494038fd9536ab1bd03bab14ae345b7272",
    "repo_url": "https://github.com/vaadin/flow/pull/20542",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20542",
    "dockerfile": "",
    "pr_merged_at": "2024-11-25T14:13:38.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonConverter.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonConverter.java\nindex bfeb9afacd0..9c5027c6b69 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonConverter.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonConverter.java\n@@ -69,6 +69,7 @@ class VersionsJsonConverter {\n      * Mode value for dependency for all modes.\n      */\n     public static final String MODE_ALL = \"all\"; // same as empty string\n+    private static final Object VAADIN_ROUTER = \"@vaadin/router\";\n \n     private final JsonObject convertedObject;\n \n@@ -151,6 +152,10 @@ private void addDependency(JsonObject obj) {\n         if (Objects.equals(npmName, VAADIN_CORE_NPM_PACKAGE)) {\n             return;\n         }\n+        if (reactEnabled && Objects.equals(npmName, VAADIN_ROUTER)) {\n+            exclusions.add(npmName);\n+            return;\n+        }\n         if (!isIncludedByMode(mode)) {\n             return;\n         }\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonConverterTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonConverterTest.java\nindex 4a9a3aecfc6..059f75b5dab 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonConverterTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonConverterTest.java\n@@ -228,6 +228,41 @@ public void reactRouterNotUsed_reactComponentsIgnored() {\n                 convertedJson.getString(\"@polymer/iron-list\"));\n     }\n \n+    @Test\n+    public void reactRouterUsed_noVaadinRouterAdded() {\n+        String json = \"\"\"\n+                {\n+                  \"core\": {\n+                    \"flow\": {\n+                      \"javaVersion\": \"3.0.0.alpha17\"\n+                    },\n+                  },\n+                  \"vaadin-router\": {\n+                    \"npmName\": \"@vaadin/router\",\n+                    \"jsVersion\": \"2.0.0\"\n+                  },\n+                  \"react\": {\n+                    \"react-components\": {\n+                      \"jsVersion\": \"24.4.0-alpha7\",\n+                      \"npmName\": \"@vaadin/react-components\",\n+                      \"mode\": \"react\"\n+                    }\n+                  },\n+                  \"platform\": \"foo\"\n+                }\n+                \"\"\".formatted(VAADIN_CORE_NPM_PACKAGE);\n+\n+        VersionsJsonConverter convert = new VersionsJsonConverter(\n+                Json.parse(json), true);\n+        JsonObject convertedJson = convert.getConvertedJson();\n+\n+        Assert.assertFalse(\n+                \"Found @vaadin/router even though it should not be in use.\",\n+                convertedJson.hasKey(\"@vaadin/router\"));\n+        Assert.assertTrue(\"Missing react-components\",\n+                convertedJson.hasKey(\"@vaadin/react-components\"));\n+    }\n+\n     @Test\n     public void testModeProperty() {\n         String json = \"\"\"\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20540",
    "pr_id": 20540,
    "issue_id": 20473,
    "repo": "vaadin/flow",
    "problem_statement": "Dialog is not updated when doing hotswap\n### Description of the bug\n\nGiven\r\n\r\n```\r\n@Route(value = \"overlay\", layout = MainLayout.class)\r\n@AnonymousAllowed\r\npublic class OverlayView extends VerticalLayout {\r\n\r\n    @Override\r\n    protected void onAttach(AttachEvent attachEvent) {\r\n        super.onAttach(attachEvent);\r\n\r\n        Dialog dialog = new Dialog(\"The Dialog\");\r\n        dialog.setCloseOnOutsideClick(true);\r\n        dialog.setCloseOnEsc(true);\r\n\r\n        dialog.add(new Div(\"Text nr 1\"));\r\n\r\n        dialog.open();\r\n    }\r\n\r\n}\r\n```\r\n\r\nif you are running using HotswapAgent and edit the div text to \"Text nr 2\", then a dialog with \"Text nr 1\" remains on screen and a dialog with \"Text nr 2\" is not added at all. If you manually refresh the page, the dialog with \"Text nr 2\" is shown\n\n### Expected behavior\n\nThe old dialog is closed and the new one opened\n\n### Minimal reproducible example\n\nas above\n\n### Versions\n\n- Vaadin / Flow version: 24.5.3",
    "issue_word_count": 129,
    "test_files_count": 4,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java",
      "flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java",
      "flow-server/src/main/java/com/vaadin/flow/router/NavigationTrigger.java",
      "flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java",
      "flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java",
      "flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java",
      "flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/RefreshCurrentRouteView.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/RefreshCurrentRouteIT.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java",
      "flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java",
      "flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/RefreshCurrentRouteView.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/RefreshCurrentRouteIT.java"
    ],
    "base_commit": "056c126efe5ecba0c51ae80b6aab0f2edafc5289",
    "head_commit": "2d0834ec69390895cf1c8347641776c189fd7770",
    "repo_url": "https://github.com/vaadin/flow/pull/20540",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20540",
    "dockerfile": "",
    "pr_merged_at": "2024-11-29T11:01:02.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java b/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java\nindex fb6c0dadc88..a341e56d5a2 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java\n@@ -77,7 +77,6 @@\n import com.vaadin.flow.router.internal.BeforeEnterHandler;\n import com.vaadin.flow.router.internal.BeforeLeaveHandler;\n import com.vaadin.flow.server.Command;\n-import com.vaadin.flow.server.RouteRegistry;\n import com.vaadin.flow.server.VaadinService;\n import com.vaadin.flow.server.VaadinSession;\n import com.vaadin.flow.server.communication.PushConnection;\n@@ -1094,6 +1093,12 @@ public void setLastHandledNavigation(Location location) {\n     /**\n      * Re-navigates to the current route. Also re-instantiates the route target\n      * component, and optionally all layouts in the route chain.\n+     * <p>\n+     * </p>\n+     * If modal components are currently defined for the UI, the whole route\n+     * chain will be refreshed regardless the {@code refreshRouteChain}\n+     * parameter, because otherwise it would not be possible to preserve the\n+     * correct modality cardinality and order.\n      *\n      * @param refreshRouteChain\n      *            {@code true} to refresh all layouts in the route chain,\n@@ -1105,8 +1110,8 @@ public void refreshCurrentRoute(boolean refreshRouteChain) {\n                     + \"Unable to refresh the current route.\");\n         } else {\n             getRouter().navigate(ui, locationForRefresh,\n-                    NavigationTrigger.PROGRAMMATIC, null, true,\n-                    refreshRouteChain);\n+                    NavigationTrigger.REFRESH_ROUTE, null, true,\n+                    refreshRouteChain || hasModalComponent());\n         }\n     }\n \n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java b/flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java\nindex 63afb16a1cc..88d84b5387c 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java\n@@ -350,7 +350,11 @@ private UIRefreshStrategy computeRefreshStrategy(UI ui,\n                 .distinct().toList();\n \n         UIRefreshStrategy refreshStrategy;\n-        if (!targetChainChangedItems.isEmpty()) {\n+        // A full chain refresh should be triggered if there are modal\n+        // components, since they could be attached to UI or parent layouts\n+        if (ui.hasModalComponent()) {\n+            refreshStrategy = UIRefreshStrategy.PUSH_REFRESH_CHAIN;\n+        } else if (!targetChainChangedItems.isEmpty()) {\n             refreshStrategy = targetChainChangedItems.stream()\n                     .allMatch(chainItem -> chainItem == route)\n                             ? UIRefreshStrategy.PUSH_REFRESH_ROUTE\n@@ -362,6 +366,7 @@ private UIRefreshStrategy computeRefreshStrategy(UI ui,\n             refreshStrategy = computeRefreshStrategyForUITree(ui,\n                     changedClasses, targetsChain, route);\n         }\n+\n         // A different layout might have been applied after hotswap\n         if (refreshStrategy == UIRefreshStrategy.SKIP) {\n             RouteRegistry registry = ui.getInternals().getRouter()\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/router/NavigationTrigger.java b/flow-server/src/main/java/com/vaadin/flow/router/NavigationTrigger.java\nindex 5741ab83d51..c4d358b128e 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/router/NavigationTrigger.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/router/NavigationTrigger.java\n@@ -66,5 +66,12 @@ public enum NavigationTrigger {\n     /**\n      * Navigation is for a reload event on a preserveOnRefresh route.\n      */\n-    REFRESH\n+    REFRESH,\n+\n+    /**\n+     * Navigation was triggered via {@link UI#refreshCurrentRoute(boolean)}.\n+     * It's for internal use only.\n+     */\n+    REFRESH_ROUTE,\n+\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java b/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java\nindex 393acc47286..86092096d7f 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java\n@@ -24,7 +24,6 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n-import java.util.Objects;\n import java.util.Optional;\n import java.util.Set;\n import java.util.function.Supplier;\n@@ -41,6 +40,7 @@\n import com.vaadin.flow.internal.Pair;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.internal.UsageStatistics;\n+import com.vaadin.flow.internal.menu.MenuRegistry;\n import com.vaadin.flow.router.AfterNavigationEvent;\n import com.vaadin.flow.router.BeforeEnterEvent;\n import com.vaadin.flow.router.BeforeEnterObserver;\n@@ -51,7 +51,6 @@\n import com.vaadin.flow.router.ErrorNavigationEvent;\n import com.vaadin.flow.router.ErrorParameter;\n import com.vaadin.flow.router.EventUtil;\n-import com.vaadin.flow.router.HasDynamicTitle;\n import com.vaadin.flow.router.Location;\n import com.vaadin.flow.router.LocationChangeEvent;\n import com.vaadin.flow.router.NavigationEvent;\n@@ -62,7 +61,6 @@\n import com.vaadin.flow.router.PageTitle;\n import com.vaadin.flow.router.PreserveOnRefresh;\n import com.vaadin.flow.router.QueryParameters;\n-import com.vaadin.flow.router.Route;\n import com.vaadin.flow.router.RouteParameters;\n import com.vaadin.flow.router.Router;\n import com.vaadin.flow.router.RouterLayout;\n@@ -70,7 +68,6 @@\n import com.vaadin.flow.server.HttpStatusCode;\n import com.vaadin.flow.server.RouteRegistry;\n import com.vaadin.flow.server.VaadinSession;\n-import com.vaadin.flow.internal.menu.MenuRegistry;\n import com.vaadin.flow.server.menu.AvailableViewInfo;\n \n /**\n@@ -258,6 +255,19 @@ public int handle(NavigationEvent event) {\n         List<RouterLayout> routerLayouts = (List<RouterLayout>) (List<?>) chain\n                 .subList(1, chain.size());\n \n+        // If a route refresh has been requested, remove all modal components.\n+        // This is necessary because maintaining the correct modality\n+        // cardinality and order is not feasible without knowing who opened them\n+        // and when.\n+        if (ui.hasModalComponent()\n+                && event.getTrigger() == NavigationTrigger.REFRESH_ROUTE) {\n+            Component modalComponent;\n+            while ((modalComponent = ui.getInternals()\n+                    .getActiveModalComponent()) != null) {\n+                modalComponent.removeFromParent();\n+            }\n+        }\n+\n         // Change the UI according to the navigation Component chain.\n         ui.getInternals().showRouteTarget(event.getLocation(),\n                 componentInstance, routerLayouts);\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java b/flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java\nindex 4ae56203b0c..b46c9615c4d 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java\n@@ -38,6 +38,8 @@\n import com.vaadin.flow.di.Lookup;\n import com.vaadin.flow.internal.BrowserLiveReload;\n import com.vaadin.flow.internal.BrowserLiveReloadAccessor;\n+import com.vaadin.flow.router.AfterNavigationEvent;\n+import com.vaadin.flow.router.AfterNavigationObserver;\n import com.vaadin.flow.router.Layout;\n import com.vaadin.flow.router.ParentLayout;\n import com.vaadin.flow.router.Route;\n@@ -280,6 +282,21 @@ public void onHotswap_pushDisabled_routeClassChanged_UINotRefreshedButLiveReload\n         Mockito.verify(liveReload).refresh(anyBoolean());\n     }\n \n+    @Test\n+    public void onHotswap_pushDisabled_routeClassChanged_modalComponents_UINotRefreshedButLiveReloadFullRefreshTriggered()\n+            throws ServiceException {\n+        VaadinSession session = createMockVaadinSession();\n+        hotswapper.sessionInit(new SessionInitEvent(service, session, null));\n+        RefreshTestingUI ui = initUIAndNavigateTo(session,\n+                MyRouteWithModal.class);\n+\n+        hotswapper.onHotswap(new String[] { MyRouteWithModal.class.getName() },\n+                true);\n+\n+        ui.assertNotRefreshed();\n+        Mockito.verify(liveReload).refresh(true);\n+    }\n+\n     @Test\n     public void onHotswap_pushDisabled_autoLayout_classUnrelatedToUIChanged_noReload()\n             throws ServiceException {\n@@ -470,6 +487,24 @@ public void onHotswap_pushEnabled_routeClassChanged_routeRefreshed()\n         Mockito.verify(liveReload, never()).refresh(anyBoolean());\n     }\n \n+    @Test\n+    public void onHotswap_pushEnabled_routeClassChanged_modalComponent_activeChainRefreshed()\n+            throws ServiceException {\n+        VaadinSession session = createMockVaadinSession();\n+        hotswapper.sessionInit(new SessionInitEvent(service, session, null));\n+\n+        RefreshTestingUI ui = initUIAndNavigateTo(session,\n+                MyRouteWithModal.class);\n+        ui.enablePush();\n+\n+        hotswapper.onHotswap(new String[] { MyRouteWithModal.class.getName() },\n+                true);\n+\n+        ui.assertChainRefreshed();\n+        Mockito.verify(liveReload, never()).reload();\n+        Mockito.verify(liveReload, never()).refresh(anyBoolean());\n+    }\n+\n     @Test\n     public void onHotswap_pushEnabled_routeLayoutClassChanged_activeChainRefreshed()\n             throws ServiceException {\n@@ -823,6 +858,17 @@ public MyRouteWithChild() {\n         }\n     }\n \n+    @Tag(\"my-route-with-modal\")\n+    public static class MyRouteWithModal extends Component\n+            implements HasComponents, AfterNavigationObserver {\n+\n+        @Override\n+        public void afterNavigation(AfterNavigationEvent event) {\n+            event.getLocationChangeEvent().getUI().addModal(new MyComponent());\n+        }\n+\n+    }\n+\n     @Tag(\"my-layout\")\n     public static class MyLayout extends Component implements RouterLayout {\n \n@@ -903,7 +949,11 @@ public RefreshTestingUI(VaadinSession session) {\n         @Override\n         public void refreshCurrentRoute(boolean refreshRouteChain) {\n             refreshRouteChainRequested = refreshRouteChain;\n-            super.refreshCurrentRoute(refreshRouteChain);\n+            // No need to perform real navigation, tests only need to know if\n+            // the method has been invoked.\n+            // Navigation would fail anyway because of usage of method scoped\n+            // classes. Blocking navigation prevents logs to be bloated by\n+            // exception stack traces.\n         }\n \n         void assertNotRefreshed() {\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java b/flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java\nindex 48be2a1a6bc..41aa569bd41 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java\n@@ -40,7 +40,9 @@\n import org.mockito.MockedStatic;\n import org.mockito.Mockito;\n \n+import com.vaadin.flow.component.AttachEvent;\n import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.DetachEvent;\n import com.vaadin.flow.component.HasElement;\n import com.vaadin.flow.component.Tag;\n import com.vaadin.flow.component.Text;\n@@ -53,6 +55,7 @@\n import com.vaadin.flow.function.DeploymentConfiguration;\n import com.vaadin.flow.internal.ReflectTools;\n import com.vaadin.flow.internal.UsageStatistics;\n+import com.vaadin.flow.internal.menu.MenuRegistry;\n import com.vaadin.flow.router.AfterNavigationEvent;\n import com.vaadin.flow.router.AfterNavigationObserver;\n import com.vaadin.flow.router.BeforeEnterEvent;\n@@ -81,11 +84,11 @@\n import com.vaadin.flow.server.ServiceException;\n import com.vaadin.flow.server.WrappedSession;\n import com.vaadin.flow.server.menu.AvailableViewInfo;\n-import com.vaadin.flow.internal.menu.MenuRegistry;\n import com.vaadin.flow.server.startup.ApplicationRouteRegistry;\n import com.vaadin.tests.util.AlwaysLockedVaadinSession;\n import com.vaadin.tests.util.MockDeploymentConfiguration;\n import com.vaadin.tests.util.MockUI;\n+\n import elemental.json.Json;\n import elemental.json.JsonValue;\n \n@@ -817,6 +820,55 @@ public void handle_clientNavigation_withMatchingFlowRoute() {\n         }\n     }\n \n+    @Test\n+    public void handle_refreshRoute_modalComponentsDetached() {\n+        beforeEnterCount = new AtomicInteger();\n+        viewAttachCount = new AtomicInteger();\n+\n+        // given a service with instantiator\n+        MockVaadinServletService service = createMockServiceWithInstantiator();\n+\n+        // given a locked session\n+        MockVaadinSession session = new AlwaysLockedVaadinSession(service);\n+        session.setConfiguration(new MockDeploymentConfiguration());\n+\n+        // given a NavigationStateRenderer mapping to PreservedNestedView\n+        Router router = session.getService().getRouter();\n+        NavigationStateRenderer renderer = new NavigationStateRenderer(\n+                new NavigationStateBuilder(router)\n+                        .withTarget(RootRouteWithParam.class).withPath(\"\")\n+                        .build());\n+        router.getRegistry().setRoute(\"\", RootRouteWithParam.class, null);\n+\n+        @Tag(\"modal-component\")\n+        class ModalComponent extends Component {\n+            private int attachCount;\n+            private int detachCount;\n+\n+            @Override\n+            protected void onAttach(AttachEvent attachEvent) {\n+                attachCount++;\n+                super.onAttach(attachEvent);\n+            }\n+\n+            @Override\n+            protected void onDetach(DetachEvent detachEvent) {\n+                detachCount++;\n+                super.onDetach(detachEvent);\n+            }\n+        }\n+\n+        ModalComponent modalComponent = new ModalComponent();\n+        MockUI ui = new MockUI(session);\n+        ui.addModal(modalComponent);\n+\n+        renderer.handle(new NavigationEvent(router, new Location(\"\"), ui,\n+                NavigationTrigger.REFRESH_ROUTE, null, false, true, true));\n+\n+        Assert.assertEquals(1, modalComponent.attachCount);\n+        Assert.assertEquals(1, modalComponent.detachCount);\n+    }\n+\n     private MockVaadinServletService createMockServiceWithInstantiator() {\n         MockVaadinServletService service = new MockVaadinServletService();\n         service.init(new MockInstantiator() {\n\ndiff --git a/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/RefreshCurrentRouteView.java b/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/RefreshCurrentRouteView.java\nindex dca5cd70578..f654c9065f4 100644\n--- a/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/RefreshCurrentRouteView.java\n+++ b/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/RefreshCurrentRouteView.java\n@@ -28,6 +28,7 @@ public class RefreshCurrentRouteView extends Div implements BeforeEnterObserver,\n     final static String NAVIGATE_ID = \"navigate\";\n     final static String REFRESH_ID = \"refresh\";\n     final static String REFRESH_LAYOUTS_ID = \"refreshlayouts\";\n+    final static String OPEN_MODALS_ID = \"openmodals\";\n \n     private int attach, detach, afterNav, beforeEnter, beforeLeave;\n     private final Div id, attachCounter, detachCounter, afterNavCounter,\n@@ -58,6 +59,11 @@ public RefreshCurrentRouteView() {\n                 e -> UI.getCurrent().refreshCurrentRoute(true));\n         refresh.setId(REFRESH_LAYOUTS_ID);\n         add(refresh);\n+\n+        NativeButton openModals = new NativeButton(\"Open modal components\",\n+                e -> openModals());\n+        openModals.setId(OPEN_MODALS_ID);\n+        add(openModals);\n     }\n \n     protected String getNavigationTarget() {\n@@ -72,6 +78,12 @@ private Div createCounterSpan(String id) {\n         return counter;\n     }\n \n+    private void openModals() {\n+        new Dialog(1).open();\n+        new Dialog(2).open();\n+        new Dialog(3).open();\n+    }\n+\n     @Override\n     protected void onAttach(AttachEvent event) {\n         super.onAttach(event);\n@@ -81,6 +93,8 @@ protected void onAttach(AttachEvent event) {\n     @Override\n     public void afterNavigation(AfterNavigationEvent event) {\n         afterNavCounter.setText(Integer.toString(++afterNav));\n+        event.getLocationChangeEvent().getQueryParameter(\"modal\")\n+                .ifPresent(unused -> openModals());\n     }\n \n     @Override\n@@ -98,4 +112,38 @@ protected void onDetach(DetachEvent event) {\n         super.onDetach(event);\n         detachCounter.setText(Integer.toString(++detach));\n     }\n+\n+    public static class Dialog extends Div {\n+\n+        public Dialog(int dialogId) {\n+            setId(\"modal-\" + dialogId);\n+            add(new Div(\"modal \" + dialogId));\n+            NativeButton button = new NativeButton(\"Refresh route\",\n+                    ev -> UI.getCurrent().refreshCurrentRoute(false));\n+            button.setId(\"modal-\" + dialogId + \"-\" + REFRESH_ID);\n+            add(button);\n+\n+            button = new NativeButton(\"Refresh all\",\n+                    ev -> UI.getCurrent().refreshCurrentRoute(false));\n+            button.setId(\"modal-\" + dialogId + \"-\" + REFRESH_LAYOUTS_ID);\n+            add(button);\n+\n+            button = new NativeButton(\"Close\", ev -> close());\n+            button.setId(\"modal-\" + dialogId + \"-close\");\n+            add(button);\n+            getStyle().set(\"position\", \"fixed\").set(\"inset\", \"10% 10%\")\n+                    .setWidth(\"50%\").setHeight(\"50%\")\n+                    .setBackgroundColor(\"green\").setBorder(\"1px solid black\")\n+                    .setZIndex(dialogId);\n+        }\n+\n+        public void open() {\n+            UI.getCurrent().addModal(this);\n+        }\n+\n+        public void close() {\n+            UI.getCurrent().remove(this);\n+        }\n+    }\n+\n }\n\ndiff --git a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/RefreshCurrentRouteIT.java b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/RefreshCurrentRouteIT.java\nindex fd1b5c680e1..f7181080de0 100644\n--- a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/RefreshCurrentRouteIT.java\n+++ b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/RefreshCurrentRouteIT.java\n@@ -13,6 +13,7 @@\n import static com.vaadin.flow.uitest.ui.RefreshCurrentRouteView.DETACHCOUNTER_ID;\n import static com.vaadin.flow.uitest.ui.RefreshCurrentRouteView.ID;\n import static com.vaadin.flow.uitest.ui.RefreshCurrentRouteView.NAVIGATE_ID;\n+import static com.vaadin.flow.uitest.ui.RefreshCurrentRouteView.OPEN_MODALS_ID;\n import static com.vaadin.flow.uitest.ui.RefreshCurrentRouteView.REFRESH_ID;\n import static com.vaadin.flow.uitest.ui.RefreshCurrentRouteView.REFRESH_LAYOUTS_ID;\n import static com.vaadin.flow.uitest.ui.RefreshCurrentRouteLayout.ROUTER_LAYOUT_ID;\n@@ -81,6 +82,40 @@ public void refreshCurrentRoute_ensureNewInstanceAndCorrectEventCounts_newLayout\n         assertInitialEventCounters();\n     }\n \n+    public void refreshCurrentRoute_modalComponents_newRouteAndLayout() {\n+        open(\"modal=true\");\n+\n+        final String originalId = getString(ID);\n+        final String originalLayoutId = getString(ROUTER_LAYOUT_ID);\n+\n+        assertInitialEventCounters();\n+\n+        waitForElementPresent(By.id(\"modal-1\"));\n+        waitForElementPresent(By.id(\"modal-2\"));\n+        waitForElementPresent(By.id(\"modal-3\"));\n+        $(NativeButtonElement.class).id(\"modal-3-refresh\").click();\n+\n+        // UUID should be new since refresh creates new instance\n+        Assert.assertNotEquals(getString(ID), originalId);\n+        // UUID should be new since new layout instances were requested\n+        Assert.assertNotEquals(getString(ROUTER_LAYOUT_ID), originalLayoutId);\n+\n+        // Event counters should equal original values\n+        assertInitialEventCounters();\n+\n+        waitForElementPresent(By.id(\"modal-1\"));\n+        waitForElementPresent(By.id(\"modal-2\"));\n+        waitForElementPresent(By.id(\"modal-3\"));\n+\n+        $(NativeButtonElement.class).id(\"modal-3-close\").click();\n+        $(NativeButtonElement.class).id(\"modal-2-close\").click();\n+        $(NativeButtonElement.class).id(\"modal-1-refresh\").click();\n+\n+        waitForElementPresent(By.id(\"modal-1\"));\n+        waitForElementPresent(By.id(\"modal-2\"));\n+        waitForElementPresent(By.id(\"modal-3\"));\n+    }\n+\n     private void assertInitialEventCounters() {\n         Assert.assertEquals(1, getInt(ATTACHCOUNTER_ID));\n         Assert.assertEquals(0, getInt(DETACHCOUNTER_ID));\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20522",
    "pr_id": 20522,
    "issue_id": 20496,
    "repo": "vaadin/flow",
    "problem_statement": "Vaadin Router is installed while it's not used by default\n### Description of the bug\n\n`@vaadin/router` is added to `package.json`, installed and added to a bundle in a Vaadin 24.6 application that doesn't specify a router, nor that opts-out from React.\r\nReact Router should be used by default and Vaadin Router shouldn't be added.\r\n\r\nSee e.g. this starter https://github.com/vaadin/skeleton-starter-hilla-react/blob/b54e9e0f9cdb14d47409e45b78e71373b6cac91c/package.json#L20.\n\n### Expected behavior\n\n`@vaadin/router` is not added to a project.\n\n### Minimal reproducible example\n\nhttps://github.com/vaadin/skeleton-starter-hilla-react/blob/b54e9e0f9cdb14d47409e45b78e71373b6cac91c/package.json#L20\n\n### Versions\n\n- Vaadin / Flow version: 24.6.0.alpha3.\r\n",
    "issue_word_count": 112,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonConverter.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonConverterTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonConverterTest.java"
    ],
    "base_commit": "a855d259214112737946d62d734dd40d352fc86b",
    "head_commit": "674b7b1ccdd75d924144900ad58adabaf21da3a0",
    "repo_url": "https://github.com/vaadin/flow/pull/20522",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20522",
    "dockerfile": "",
    "pr_merged_at": "2024-11-21T12:00:11.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonConverter.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonConverter.java\nindex bd2219d8928..3b86e190a43 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonConverter.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonConverter.java\n@@ -70,6 +70,7 @@ class VersionsJsonConverter {\n      * Mode value for dependency for all modes.\n      */\n     public static final String MODE_ALL = \"all\"; // same as empty string\n+    private static final Object VAADIN_ROUTER = \"@vaadin/router\";\n \n     private final JsonObject convertedObject;\n \n@@ -161,6 +162,10 @@ private void addDependency(JsonObject obj) {\n             exclusions.add(npmName);\n             return;\n         }\n+        if (reactEnabled && Objects.equals(npmName, VAADIN_ROUTER)) {\n+            exclusions.add(npmName);\n+            return;\n+        }\n         if (!isIncludedByMode(mode)) {\n             if (excludeWebComponents) {\n                 // collecting exclusions also from non-included dependencies\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonConverterTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonConverterTest.java\nindex f5b694c66fb..bb616a67a76 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonConverterTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonConverterTest.java\n@@ -228,6 +228,41 @@ public void reactRouterNotUsed_reactComponentsIgnored() {\n                 convertedJson.getString(\"@polymer/iron-list\"));\n     }\n \n+    @Test\n+    public void reactRouterUsed_noVaadinRouterAdded() {\n+        String json = \"\"\"\n+                {\n+                  \"core\": {\n+                    \"flow\": {\n+                      \"javaVersion\": \"3.0.0.alpha17\"\n+                    },\n+                  },\n+                  \"vaadin-router\": {\n+                    \"npmName\": \"@vaadin/router\",\n+                    \"jsVersion\": \"2.0.0\"\n+                  },\n+                  \"react\": {\n+                    \"react-components\": {\n+                      \"jsVersion\": \"24.4.0-alpha7\",\n+                      \"npmName\": \"@vaadin/react-components\",\n+                      \"mode\": \"react\"\n+                    }\n+                  },\n+                  \"platform\": \"foo\"\n+                }\n+                \"\"\".formatted(VAADIN_CORE_NPM_PACKAGE);\n+\n+        VersionsJsonConverter convert = new VersionsJsonConverter(\n+                Json.parse(json), true, false);\n+        JsonObject convertedJson = convert.getConvertedJson();\n+\n+        Assert.assertFalse(\n+                \"Found @vaadin/router even though it should not be in use.\",\n+                convertedJson.hasKey(\"@vaadin/router\"));\n+        Assert.assertTrue(\"Missing react-components\",\n+                convertedJson.hasKey(\"@vaadin/react-components\"));\n+    }\n+\n     @Test\n     public void testModeProperty() {\n         String json = \"\"\"\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20517",
    "pr_id": 20517,
    "issue_id": 20445,
    "repo": "vaadin/flow",
    "problem_statement": "Server shutdown waits forever for ViteWebsocketConnection to close\n### Description of the bug\n\nSometimes in development mode, when shutting down the server it does not fully shutdown but remains waiting after outputting\r\n```\r\n2024-11-12T09:09:05.329+02:00  INFO 56504 --- [ionShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'\r\n2024-11-12T09:09:05.338+02:00  WARN 56504 --- [ionShutdownHook] o.s.b.f.support.DisposableBeanAdapter    : Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add \";DB_CLOSE_ON_EXIT=FALSE\" to the db URL) [90121-224]\r\n2024-11-12T09:09:05.339+02:00  INFO 56504 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...\r\n2024-11-12T09:09:05.340+02:00  INFO 56504 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.\r\n```\r\n\r\nStack trace seems to indicate that it waits for Vite websocket connections to close, and it waits forever\r\n```\r\n\"WebSocket background processing\" #5033 [111647] daemon prio=5 os_prio=31 cpu=2.45ms elapsed=614.82s tid=0x000000012f131c00 nid=111647 waiting on condition  [0x000000030ad02000]\r\n   java.lang.Thread.State: WAITING (parking)\r\n\tat jdk.internal.misc.Unsafe.park(java.base@21.0.4/Native Method)\r\n\t- parking to wait for  <0x00000004058ba9f0> (a java.util.concurrent.CompletableFuture$Signaller)\r\n\tat java.util.concurrent.locks.LockSupport.park(java.base@21.0.4/LockSupport.java:221)\r\n\tat java.util.concurrent.CompletableFuture$Signaller.block(java.base@21.0.4/CompletableFuture.java:1864)\r\n\tat java.util.concurrent.ForkJoinPool.unmanagedBlock(java.base@21.0.4/ForkJoinPool.java:4013)\r\n\tat java.util.concurrent.ForkJoinPool.managedBlock(java.base@21.0.4/ForkJoinPool.java:3961)\r\n\tat java.util.concurrent.CompletableFuture.waitingGet(java.base@21.0.4/CompletableFuture.java:1898)\r\n\tat java.util.concurrent.CompletableFuture.get(java.base@21.0.4/CompletableFuture.java:2072)\r\n\tat com.vaadin.base.devserver.viteproxy.ViteWebsocketConnection.close(ViteWebsocketConnection.java:147)\r\n\tat com.vaadin.base.devserver.viteproxy.ViteWebsocketProxy.close(ViteWebsocketProxy.java:101)\r\n\tat com.vaadin.base.devserver.viteproxy.ViteWebsocketEndpoint.onClose(ViteWebsocketEndpoint.java:115)\r\n\tat org.apache.tomcat.websocket.WsSession.fireEndpointOnClose(WsSession.java:733)\r\n\tat org.apache.tomcat.websocket.WsSession.doClose(WsSession.java:590)\r\n\tat org.apache.tomcat.websocket.WsSession.doClose(WsSession.java:556)\r\n\tat org.apache.tomcat.websocket.WsSession.checkExpiration(WsSession.java:1028)\r\n\tat org.apache.tomcat.websocket.WsWebSocketContainer.backgroundProcess(WsWebSocketContainer.java:1070)\r\n\tat org.apache.tomcat.websocket.BackgroundProcessManager.process(BackgroundProcessManager.java:87)\r\n\tat org.apache.tomcat.websocket.BackgroundProcessManager$WsBackgroundThread.run(BackgroundProcessManager.java:135)\r\n```\r\n\r\nIt might be that Vite or some other part is in a broken state when this happens and the original issue might originate from having a server running, closing the laptop lid for the night, opening it in the morning and continuing using the server.\r\n\n\n### Expected behavior\n\nWebsocket proxies should close properly or at least time out after a short while so the server is shut down\n\n### Minimal reproducible example\n\n-\n\n### Versions\n\n- Vaadin / Flow version: 24.6.0.alpha2",
    "issue_word_count": 480,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "vaadin-dev-server/src/main/java/com/vaadin/base/devserver/viteproxy/ViteWebsocketConnection.java",
      "vaadin-dev-server/src/test/java/com/vaadin/base/devserver/viteproxy/ViteWebsocketConnectionTest.java"
    ],
    "pr_changed_test_files": [
      "vaadin-dev-server/src/test/java/com/vaadin/base/devserver/viteproxy/ViteWebsocketConnectionTest.java"
    ],
    "base_commit": "bd8c796f4478612b766a2bc73a749c83642ff0a0",
    "head_commit": "6bea155fb8634bf347237c68e54d9ce3b6e7dcb0",
    "repo_url": "https://github.com/vaadin/flow/pull/20517",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20517",
    "dockerfile": "",
    "pr_merged_at": "2024-11-21T09:24:55.000Z",
    "patch": "diff --git a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/viteproxy/ViteWebsocketConnection.java b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/viteproxy/ViteWebsocketConnection.java\nindex 358a079f0f0..3b14308ced6 100644\n--- a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/viteproxy/ViteWebsocketConnection.java\n+++ b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/viteproxy/ViteWebsocketConnection.java\n@@ -26,6 +26,8 @@\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.CompletionStage;\n import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n import java.util.function.Consumer;\n \n import org.slf4j.Logger;\n@@ -144,9 +146,21 @@ public void send(String message)\n      */\n     public void close() throws InterruptedException, ExecutionException {\n         getLogger().debug(\"Closing the connection\");\n-        CompletableFuture<WebSocket> closeRequest = clientWebsocket.get()\n-                .sendClose(CloseCodes.NORMAL_CLOSURE.getCode(), \"\");\n-        closeRequest.get();\n+        if (clientWebsocket.isDone()) {\n+            WebSocket client = clientWebsocket.get();\n+            if (!client.isOutputClosed()) {\n+                CompletableFuture<WebSocket> closeRequest = client\n+                        .sendClose(CloseCodes.NORMAL_CLOSURE.getCode(), \"\");\n+                try {\n+                    closeRequest.get(500, TimeUnit.MILLISECONDS);\n+                } catch (TimeoutException e) {\n+                    getLogger().debug(\"Timed out waiting for close request\");\n+                }\n+            }\n+        } else {\n+            // Websocket client connection has not been established\n+            clientWebsocket.cancel(true);\n+        }\n     }\n \n     @Override\n",
    "test_patch": "diff --git a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/viteproxy/ViteWebsocketConnectionTest.java b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/viteproxy/ViteWebsocketConnectionTest.java\nindex 3d3da7bb10e..7f16bd1d41a 100644\n--- a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/viteproxy/ViteWebsocketConnectionTest.java\n+++ b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/viteproxy/ViteWebsocketConnectionTest.java\n@@ -17,6 +17,8 @@\n package com.vaadin.base.devserver.viteproxy;\n \n import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.InvocationTargetException;\n import java.net.InetSocketAddress;\n import java.net.http.WebSocket;\n import java.nio.charset.StandardCharsets;\n@@ -24,9 +26,11 @@\n import java.security.NoSuchAlgorithmException;\n import java.time.Duration;\n import java.util.Base64;\n+import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n \n import com.sun.net.httpserver.Headers;\n import com.sun.net.httpserver.HttpExchange;\n@@ -34,8 +38,12 @@\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.Mockito;\n import org.mockito.ThrowingConsumer;\n \n+import com.vaadin.flow.internal.ReflectTools;\n+\n public class ViteWebsocketConnectionTest {\n \n     private HttpServer httpServer;\n@@ -110,6 +118,62 @@ public void waitForConnection_clientWebsocketNotAvailable_fails()\n         errorLatch.await(2, TimeUnit.SECONDS);\n     }\n \n+    @Test(timeout = 2000)\n+    public void close_clientWebsocketNotAvailable_dontBlock()\n+            throws ExecutionException, InterruptedException {\n+        AtomicReference<Throwable> connectionError = new AtomicReference<>();\n+        CountDownLatch suspendConnectionLatch = new CountDownLatch(1);\n+        handlerSupplier = exchange -> {\n+            suspendConnectionLatch.await();\n+        };\n+        ViteWebsocketConnection connection = new ViteWebsocketConnection(\n+                httpServer.getAddress().getPort(), \"/VAADIN\", \"proto\", x -> {\n+                }, () -> {\n+                }, connectionError::set);\n+        connection.close();\n+        suspendConnectionLatch.countDown();\n+        Assert.assertNull(\"Websocket connection failed\", connectionError.get());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test(timeout = 2000)\n+    public void close_clientWebsocketClose_dontBlockIndefinitely()\n+            throws ExecutionException, InterruptedException,\n+            NoSuchFieldException, InvocationTargetException,\n+            IllegalAccessException {\n+        handlerSupplier = ViteWebsocketConnectionTest::handshake;\n+        AtomicReference<Throwable> connectionError = new AtomicReference<>();\n+        ViteWebsocketConnection connection = new ViteWebsocketConnection(\n+                httpServer.getAddress().getPort(), \"/VAADIN\", \"proto\", x -> {\n+                }, () -> {\n+                }, connectionError::set);\n+\n+        // Replace websocket with spy to mock close behavior\n+        Field clientWebsocketField = ViteWebsocketConnection.class\n+                .getDeclaredField(\"clientWebsocket\");\n+        CompletableFuture<WebSocket> clientWebsocketFuture = (CompletableFuture<WebSocket>) ReflectTools\n+                .getJavaFieldValue(connection, clientWebsocketField);\n+        WebSocket mockWebSocket = Mockito.spy(clientWebsocketFuture.get());\n+        Mockito.when(mockWebSocket.sendClose(ArgumentMatchers.anyInt(),\n+                ArgumentMatchers.anyString())).then(i -> {\n+                    CompletableFuture<?> closeFuture = (CompletableFuture<?>) i\n+                            .callRealMethod();\n+                    return closeFuture.thenRunAsync(() -> {\n+                        try {\n+                            // Wait longer than test timeout.\n+                            // Close should not wait that much\n+                            Thread.sleep(5000);\n+                        } catch (InterruptedException e) {\n+                            throw new RuntimeException(e);\n+                        }\n+                    });\n+                });\n+        ReflectTools.setJavaFieldValue(connection, clientWebsocketField,\n+                CompletableFuture.completedFuture(mockWebSocket));\n+        connection.close();\n+        Assert.assertNull(\"Websocket connection failed\", connectionError.get());\n+    }\n+\n     private static void handshake(HttpExchange exchange) throws IOException {\n         Headers requestHeaders = exchange.getRequestHeaders();\n         if (\"GET\".equalsIgnoreCase(exchange.getRequestMethod()) && \"upgrade\"\n@@ -131,4 +195,5 @@ private static void handshake(HttpExchange exchange) throws IOException {\n             exchange.sendResponseHeaders(101, -1);\n         }\n     }\n+\n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20516",
    "pr_id": 20516,
    "issue_id": 19497,
    "repo": "vaadin/flow",
    "problem_statement": "Hilla app with @PWA annotation fails when running as native compiled image on macOS\n### Describe the bug\n\nA Hilla app with `@PWA` annotation throws an exception when running as native compiled image:\r\n\r\n```\r\njava.lang.UnsatisfiedLinkError: No awt in java.library.path\r\n        at org.graalvm.nativeimage.builder/com.oracle.svm.core.jdk.NativeLibrarySupport.loadLibraryRelative(NativeLibrarySupport.java:136) ~[na:na]\r\n```\n\n### Expected-behavior\n\nA Hilla app with `@PWA` annotation should not throw unexpected exceptions when running as native compiled image.\n\n### Reproduction\n\nCreate a new Hilla project:\r\n```\r\nnpx @hilla/cli@latest init --next hilla-native-pwa\r\n```\r\n\r\nAdd `@PWA(name = \"Hilla PWA\", shortName = \"PWA\")` to `src/main/java/com/example/application/Application.java`.\r\n\r\nCompile Hilla app to native image:\r\n```\r\n./mvnw clean package -Pproduction -Pnative native:compile\r\n```\r\n\r\nRun Hilla app as native compiled image:\r\n```\r\n./target/hilla-native-pwa\r\n```\n\n### System Info\n\nHilla: 24.4.0.beta5\r\nHilla CLI: 2.0.1\r\nJava: 21.0.2 (OpenJDK Runtime Environment GraalVM CE 21.0.2+13.1 - build 21.0.2+13-jvmci-23.1-b30)\r\nOS: macOS Sonoma 14.4.1 (23E224)",
    "issue_word_count": 174,
    "test_files_count": 2,
    "non_test_files_count": 5,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/server/Constants.java",
      "flow-server/src/main/java/com/vaadin/flow/server/PwaIcon.java",
      "flow-server/src/main/java/com/vaadin/flow/server/PwaRegistry.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGeneratePWAIcons.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/PwaHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGeneratePWAIconsTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/server/communication/PwaHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGeneratePWAIconsTest.java"
    ],
    "base_commit": "bd8c796f4478612b766a2bc73a749c83642ff0a0",
    "head_commit": "8a2faa342a427321e34dfbe47f3387e7b293e9d9",
    "repo_url": "https://github.com/vaadin/flow/pull/20516",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20516",
    "dockerfile": "",
    "pr_merged_at": "2024-11-20T11:50:07.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/Constants.java b/flow-server/src/main/java/com/vaadin/flow/server/Constants.java\nindex 25e15f8b9e2..edc8e74af5c 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/Constants.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/Constants.java\n@@ -185,6 +185,11 @@ public final class Constants implements Serializable {\n      */\n     public static final String VAADIN_WEBAPP = \"webapp/\";\n \n+    /**\n+     * The generated PWA icons folder.\n+     */\n+    public static final String VAADIN_PWA_ICONS = \"pwa-icons/\";\n+\n     /**\n      * The path to meta-inf/VAADIN/ where static resources are put on the\n      * servlet.\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/PwaIcon.java b/flow-server/src/main/java/com/vaadin/flow/server/PwaIcon.java\nindex 6b946bde642..9d877e52bdf 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/PwaIcon.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/PwaIcon.java\n@@ -16,12 +16,14 @@\n package com.vaadin.flow.server;\n \n import javax.imageio.ImageIO;\n+\n import java.awt.Color;\n import java.awt.Graphics2D;\n import java.awt.Image;\n import java.awt.image.BufferedImage;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.OutputStream;\n import java.io.Serializable;\n import java.io.UncheckedIOException;\n@@ -99,6 +101,15 @@ public enum Domain {\n         setRelativeName();\n     }\n \n+    protected PwaIcon(PwaIcon icon) {\n+        this.width = icon.width;\n+        this.height = icon.height;\n+        this.baseName = icon.baseName;\n+        this.domain = icon.domain;\n+        this.shouldBeCached = icon.shouldBeCached;\n+        this.attributes.putAll(icon.attributes);\n+    }\n+\n     /**\n      * Gets an {@link Element} presentation of the icon.\n      *\n@@ -236,6 +247,25 @@ public void setImage(BufferedImage image) {\n         }\n     }\n \n+    void setImage(InputStream image) throws IOException {\n+        if (image != null) {\n+            data = image.readAllBytes();\n+            fileHash = Arrays.hashCode(data);\n+            setRelativeName();\n+        }\n+    }\n+\n+    /**\n+     * Gets if the icon can be written on a stream or not.\n+     *\n+     * @return {@literal true} if the icon can be written, otherwise\n+     *         {@literal false}.\n+     * @see #write(OutputStream)\n+     */\n+    boolean isAvailable() {\n+        return data != null || registry.getBaseImage() != null;\n+    }\n+\n     /**\n      * Writes the icon image to output stream.\n      *\n@@ -246,7 +276,7 @@ public void write(OutputStream outputStream) {\n         if (data == null) {\n             // New image with wanted size\n             // Store byte array and hashcode of image (GeneratedImage)\n-            setImage(drawIconImage(registry.getBaseImage()));\n+            setImage(drawIconImage(getBaseImage()));\n         }\n         try {\n             outputStream.write(data);\n@@ -257,6 +287,11 @@ public void write(OutputStream outputStream) {\n         }\n     }\n \n+    // visible for test\n+    protected BufferedImage getBaseImage() {\n+        return registry.getBaseImage();\n+    }\n+\n     private BufferedImage drawIconImage(BufferedImage baseImage) {\n         // Pick top-left pixel as fill color if needed for image\n         // resizing\n@@ -296,4 +331,5 @@ private BufferedImage drawIconImage(BufferedImage baseImage) {\n         graphics.dispose();\n         return bimage;\n     }\n+\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/PwaRegistry.java b/flow-server/src/main/java/com/vaadin/flow/server/PwaRegistry.java\nindex 6446891c917..e759c5ff22d 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/PwaRegistry.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/PwaRegistry.java\n@@ -15,12 +15,10 @@\n  */\n package com.vaadin.flow.server;\n \n-import javax.imageio.ImageIO;\n import jakarta.servlet.ServletContext;\n \n-import java.awt.Color;\n-import java.awt.Graphics2D;\n-import java.awt.Image;\n+import javax.imageio.ImageIO;\n+\n import java.awt.image.BufferedImage;\n import java.io.BufferedReader;\n import java.io.IOException;\n@@ -29,21 +27,21 @@\n import java.io.Serializable;\n import java.io.UncheckedIOException;\n import java.net.MalformedURLException;\n-import java.net.URISyntaxException;\n import java.net.URL;\n import java.net.URLConnection;\n import java.nio.charset.StandardCharsets;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.LinkedHashSet;\n import java.util.List;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.di.ResourceProvider;\n import com.vaadin.flow.server.communication.PwaHandler;\n import com.vaadin.flow.server.startup.ApplicationConfiguration;\n import com.vaadin.flow.server.startup.ApplicationRouteRegistry;\n@@ -85,6 +83,7 @@ public class PwaRegistry implements Serializable {\n     private List<PwaIcon> icons = new ArrayList<>();\n     private final PwaConfiguration pwaConfiguration;\n \n+    private URL baseImageUrl;\n     private BufferedImage baseImage;\n \n     /**\n@@ -113,7 +112,21 @@ public PwaRegistry(PWA pwa, ServletContext servletContext)\n         initializeResources(servletContext);\n     }\n \n+    // Lazy load base image to prevent using AWT api unless icon\n+    // generation is required at runtime.\n+    // baseImageUrl is computed during registry initialization and used on to\n+    // load the image.\n     BufferedImage getBaseImage() {\n+        if (baseImage == null && baseImageUrl != null) {\n+            try {\n+                baseImage = getBaseImage(baseImageUrl);\n+            } catch (IOException ex) {\n+                getLogger().error(\"Image is not found or can't be loaded: {}\",\n+                        baseImageUrl);\n+            } finally {\n+                baseImageUrl = null;\n+            }\n+        }\n         return baseImage;\n     }\n \n@@ -124,24 +137,19 @@ private void initializeResources(ServletContext servletContext)\n         }\n         long start = System.currentTimeMillis();\n \n+        // Load base logo from servlet context if available\n+        // fall back to local image if unavailable\n         URL logo = getResourceUrl(servletContext,\n                 pwaConfiguration.relIconPath());\n+        baseImageUrl = logo != null ? logo\n+                : BootstrapHandler.class.getResource(\"default-logo.png\");\n \n         URL offlinePage = pwaConfiguration.isOfflinePathEnabled()\n                 ? getResourceUrl(servletContext,\n                         pwaConfiguration.relOfflinePath())\n                 : null;\n \n-        // Load base logo from servlet context if available\n-        // fall back to local image if unavailable\n-        baseImage = getBaseImage(logo);\n-\n-        if (baseImage == null) {\n-            getLogger().error(\"Image is not found or can't be loaded: \" + logo);\n-        } else {\n-            // initialize icons\n-            icons = initializeIcons();\n-        }\n+        icons = initializeIcons(servletContext);\n \n         // Load offline page as string, from servlet context if\n         // available, fall back to default page\n@@ -175,14 +183,43 @@ private URL getResourceUrl(ServletContext context, String path)\n         return resourceUrl;\n     }\n \n-    private List<PwaIcon> initializeIcons() {\n+    private List<PwaIcon> initializeIcons(ServletContext servletContext) {\n+        Optional<ResourceProvider> optionalResourceProvider = Optional\n+                .ofNullable(new VaadinServletContext(servletContext)\n+                        .getAttribute(Lookup.class))\n+                .map(lookup -> lookup.lookup(ResourceProvider.class));\n         for (PwaIcon icon : getIconTemplates(pwaConfiguration.getIconPath())) {\n             icon.setRegistry(this);\n-            icons.add(icon);\n+            // Try to find a pre-generated image\n+            String iconPath = Constants.VAADIN_WEBAPP_RESOURCES\n+                    + Constants.VAADIN_PWA_ICONS\n+                    + icon.getRelHref().substring(1);\n+            optionalResourceProvider.ifPresent(\n+                    provider -> tryLoadGeneratedIcon(provider, icon, iconPath));\n+            if (icon.isAvailable()) {\n+                icons.add(icon);\n+            }\n         }\n         return icons;\n     }\n \n+    private static void tryLoadGeneratedIcon(ResourceProvider resourceProvider,\n+            PwaIcon icon, String iconPath) {\n+        URL iconResource = resourceProvider.getApplicationResource(iconPath);\n+        if (iconResource != null) {\n+            try (InputStream data = iconResource.openStream()) {\n+                icon.setImage(data);\n+                getLogger().trace(\"Loading generated PWA image from {}\",\n+                        iconPath);\n+            } catch (IOException ex) {\n+                // Ignore, icon will be generated at runtime\n+                getLogger().debug(\n+                        \"Cannot load generated PWA image from {}. Icon will be regenerated at runtime.\",\n+                        iconPath, ex);\n+            }\n+        }\n+    }\n+\n     /**\n      * Creates manifest.webmanifest json object.\n      *\n@@ -443,7 +480,14 @@ public PwaConfiguration getPwaConfiguration() {\n         return pwaConfiguration;\n     }\n \n-    static List<PwaIcon> getIconTemplates(String baseName) {\n+    /**\n+     * Gets all PWA icon variants for the give base icon.\n+     *\n+     * @param baseName\n+     *            path of the base icon.\n+     * @return list of PWA icons variants.\n+     */\n+    public static List<PwaIcon> getIconTemplates(String baseName) {\n         List<PwaIcon> icons = new ArrayList<>();\n         // Basic manifest icons for android support\n         icons.add(\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java\nindex 5b0114ce888..3169fa8d667 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java\n@@ -35,7 +35,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.vaadin.experimental.FeatureFlags;\n import com.vaadin.flow.di.Lookup;\n import com.vaadin.flow.internal.UsageStatistics;\n import com.vaadin.flow.server.Constants;\n@@ -80,6 +79,7 @@ public class NodeTasks implements FallibleCommand {\n             TaskGenerateEndpoint.class,\n             TaskCopyFrontendFiles.class,\n             TaskCopyLocalFrontendFiles.class,\n+            TaskGeneratePWAIcons.class,\n             TaskUpdateSettingsFile.class,\n             TaskUpdateVite.class,\n             TaskUpdateImports.class,\n@@ -259,6 +259,9 @@ public NodeTasks(Options options) {\n         } else {\n             pwa = new PwaConfiguration();\n         }\n+        if (options.isProductionMode() && pwa.isEnabled()) {\n+            commands.add(new TaskGeneratePWAIcons(options, pwa));\n+        }\n         commands.add(new TaskUpdateSettingsFile(options, themeName, pwa));\n         if (options.isFrontendHotdeploy() || options.isBundleBuild()) {\n             commands.add(new TaskUpdateVite(options, webComponentTags));\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGeneratePWAIcons.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGeneratePWAIcons.java\nnew file mode 100644\nindex 00000000000..52a0cbbead2\n--- /dev/null\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGeneratePWAIcons.java\n@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2000-2024 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.server.frontend;\n+\n+import javax.imageio.ImageIO;\n+\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.UncheckedIOException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.server.BootstrapHandler;\n+import com.vaadin.flow.server.Constants;\n+import com.vaadin.flow.server.ExecutionFailedException;\n+import com.vaadin.flow.server.PwaConfiguration;\n+import com.vaadin.flow.server.PwaIcon;\n+import com.vaadin.flow.server.PwaRegistry;\n+import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n+\n+/**\n+ * Generates necessary PWA icons.\n+ * <p>\n+ * For internal use only. May be renamed or removed in a future release.\n+ */\n+public class TaskGeneratePWAIcons implements FallibleCommand {\n+\n+    private static final Logger LOGGER = LoggerFactory\n+            .getLogger(TaskGeneratePWAIcons.class);\n+    private static final String HEADLESS_PROPERTY = \"java.awt.headless\";\n+\n+    private final Path generatedIconsPath;\n+    private final PwaConfiguration pwaConfiguration;\n+    private final ClassFinder classFinder;\n+\n+    public TaskGeneratePWAIcons(Options options,\n+            PwaConfiguration pwaConfiguration) {\n+        this.pwaConfiguration = pwaConfiguration;\n+        generatedIconsPath = options.getWebappResourcesDirectory().toPath()\n+                .resolve(Constants.VAADIN_PWA_ICONS);\n+        this.classFinder = options.getClassFinder();\n+    }\n+\n+    @Override\n+    public void execute() throws ExecutionFailedException {\n+        if (!pwaConfiguration.isEnabled()) {\n+            return;\n+        }\n+        URL iconURL = findIcon(pwaConfiguration);\n+        if (iconURL == null) {\n+            LOGGER.warn(\n+                    \"Skipping PWA icons generation because icon '{}' cannot be found in classpath\",\n+                    pwaConfiguration.getIconPath());\n+            return;\n+        }\n+\n+        String headless = System.getProperty(HEADLESS_PROPERTY);\n+        if (headless == null) {\n+            // set headless mode if the property is not explicitly set\n+            System.setProperty(HEADLESS_PROPERTY, Boolean.TRUE.toString());\n+        }\n+\n+        LOGGER.debug(\"Generating PWA icons from '{}'\",\n+                pwaConfiguration.getIconPath());\n+\n+        try {\n+            BufferedImage baseImage = loadBaseImage(iconURL);\n+            createGeneratedIconsFolder();\n+\n+            CompletableFuture<?>[] iconsGenerators = PwaRegistry\n+                    .getIconTemplates(pwaConfiguration.getIconPath()).stream()\n+                    .map(icon -> new InternalPwaIcon(icon, baseImage))\n+                    .map(this::generateIcon).toArray(CompletableFuture[]::new);\n+\n+            try {\n+                CompletableFuture.allOf(iconsGenerators).join();\n+            } catch (CompletionException ex) {\n+                Throwable cause = ex.getCause();\n+                if (cause instanceof UncheckedIOException uncheckedIOException) {\n+                    throw new ExecutionFailedException(\n+                            \"PWA icons generation failed\",\n+                            uncheckedIOException.getCause());\n+                }\n+                throw new ExecutionFailedException(\n+                        \"PWA icons generation failed\", cause);\n+            } catch (CancellationException ex) {\n+                throw new ExecutionFailedException(\n+                        \"PWA icons generation failed\", ex);\n+            }\n+        } finally {\n+            if (headless == null) {\n+                System.clearProperty(HEADLESS_PROPERTY);\n+            } else if (!headless.equals(Boolean.TRUE.toString())) {\n+                System.setProperty(HEADLESS_PROPERTY, headless);\n+            }\n+        }\n+        LOGGER.info(\"PWA icons generated\");\n+    }\n+\n+    private void createGeneratedIconsFolder() throws ExecutionFailedException {\n+        try {\n+            Path generatedPath = generatedIconsPath\n+                    .resolve(Path.of(pwaConfiguration.getIconPath().replace('/',\n+                            File.separatorChar)))\n+                    .getParent();\n+            Files.createDirectories(generatedPath);\n+        } catch (IOException e) {\n+            throw new ExecutionFailedException(\n+                    \"Cannot create PWA generated icons folder \"\n+                            + generatedIconsPath,\n+                    e);\n+        }\n+    }\n+\n+    private static BufferedImage loadBaseImage(URL iconURL)\n+            throws ExecutionFailedException {\n+        BufferedImage baseImage;\n+        try (InputStream inputStream = iconURL.openStream()) {\n+            baseImage = ImageIO.read(inputStream);\n+        } catch (IOException e) {\n+            throw new ExecutionFailedException(\n+                    \"Cannot load PWA icon from \" + iconURL, e);\n+        }\n+        if (baseImage == null) {\n+            throw new ExecutionFailedException(\n+                    \"Cannot load PWA icon from \" + iconURL);\n+        }\n+        return baseImage;\n+    }\n+\n+    private URL findIcon(PwaConfiguration pwaConfiguration) {\n+        URL iconURL = classFinder.getResource(pwaConfiguration.getIconPath());\n+        if (iconURL == null) {\n+            iconURL = classFinder.getResource(\n+                    \"META-INF/resources/\" + pwaConfiguration.getIconPath());\n+        }\n+        if (iconURL == null) {\n+            iconURL = BootstrapHandler.class.getResource(\"default-logo.png\");\n+            if (iconURL == null) {\n+                LOGGER.warn(\n+                        \"PWA icon '{}' cannot be found in classpath, fallback to default icon.\",\n+                        pwaConfiguration.getIconPath());\n+            }\n+        }\n+        return iconURL;\n+    }\n+\n+    private CompletableFuture<?> generateIcon(InternalPwaIcon icon) {\n+        Path iconPath = generatedIconsPath.resolve(icon.getRelHref()\n+                .substring(1).replace('/', File.separatorChar));\n+        return CompletableFuture.runAsync(() -> {\n+            try (OutputStream os = Files.newOutputStream(iconPath)) {\n+                icon.write(os);\n+            } catch (IOException e) {\n+                throw new UncheckedIOException(e);\n+            }\n+        });\n+    }\n+\n+    private BufferedImage getBaseImage(URL logo) throws IOException {\n+        URLConnection logoResource = logo != null ? logo.openConnection()\n+                : BootstrapHandler.class.getResource(\"default-logo.png\")\n+                        .openConnection();\n+        return ImageIO.read(logoResource.getInputStream());\n+    }\n+\n+    private static class InternalPwaIcon extends PwaIcon {\n+        private final BufferedImage baseImage;\n+\n+        public InternalPwaIcon(PwaIcon icon, BufferedImage baseImage) {\n+            super(icon);\n+            this.baseImage = baseImage;\n+        }\n+\n+        @Override\n+        protected BufferedImage getBaseImage() {\n+            return baseImage;\n+        }\n+    }\n+}\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/PwaHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/PwaHandlerTest.java\nindex 05ed85dc769..e5fb4a54cd7 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/PwaHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/PwaHandlerTest.java\n@@ -15,6 +15,7 @@\n  */\n package com.vaadin.flow.server.communication;\n \n+import java.awt.image.BufferedImage;\n import java.io.IOException;\n import java.io.PrintWriter;\n import java.io.StringWriter;\n@@ -132,6 +133,7 @@ private PwaIcon createIcon(PwaRegistry registry, int size)\n         PwaIcon icon = ctor.newInstance(size, size,\n                 PwaConfiguration.DEFAULT_ICON);\n         icon.setRegistry(registry);\n+        icon.setImage(new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB));\n         return icon;\n     }\n }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGeneratePWAIconsTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGeneratePWAIconsTest.java\nnew file mode 100644\nindex 00000000000..42ab3812c15\n--- /dev/null\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGeneratePWAIconsTest.java\n@@ -0,0 +1,183 @@\n+/*\n+ * Copyright 2000-2024 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.server.frontend;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.function.Predicate;\n+import java.util.regex.Pattern;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mockito;\n+\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.server.Constants;\n+import com.vaadin.flow.server.ExecutionFailedException;\n+import com.vaadin.flow.server.PwaConfiguration;\n+import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n+import com.vaadin.flow.server.frontend.scanner.FrontendDependenciesScanner;\n+\n+public class TaskGeneratePWAIconsTest {\n+\n+    @Rule\n+    public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+    private final TestPwaConfiguration pwaConfiguration = new TestPwaConfiguration();\n+    private TaskGeneratePWAIcons task;\n+    private Path resourcesDirectory;\n+    private Path iconsOutDirectory;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        // creating non-existing folder to make sure the execute() creates\n+        // the folder if missing\n+        File projectDirectory = temporaryFolder.newFolder(\"my-project\");\n+        resourcesDirectory = temporaryFolder\n+                .newFolder(\"my-project\", \"out\", \"classes\").toPath();\n+        Files.createDirectories(resourcesDirectory);\n+        Path resourceOutDirectory = projectDirectory.toPath()\n+                .resolve(Path.of(\"out\", \"VAADIN\"));\n+        Path wabappResourceOutDirectory = resourceOutDirectory\n+                .resolve(\"wabapp\");\n+        iconsOutDirectory = wabappResourceOutDirectory\n+                .resolve(Constants.VAADIN_PWA_ICONS);\n+\n+        FrontendDependenciesScanner scanner = Mockito\n+                .mock(FrontendDependenciesScanner.class);\n+        Mockito.when(scanner.getPwaConfiguration()).then(i -> pwaConfiguration);\n+\n+        URLClassLoader classFinderClassLoader = new URLClassLoader(\n+                new URL[] { resourcesDirectory.toUri().toURL() }, null);\n+        ClassFinder classFinder = new ClassFinder.DefaultClassFinder(\n+                classFinderClassLoader);\n+        Options options = new Options(Mockito.mock(Lookup.class), classFinder,\n+                projectDirectory)\n+                .withBuildResultFolders(wabappResourceOutDirectory.toFile(),\n+                        resourceOutDirectory.toFile());\n+        task = new TaskGeneratePWAIcons(options, pwaConfiguration);\n+    }\n+\n+    @Test\n+    public void execute_PWA_disabled_iconsNotGenerated()\n+            throws ExecutionFailedException {\n+        pwaConfiguration.enabled = false;\n+        task.execute();\n+        Assert.assertFalse(\"PWA icons should not have been generated\",\n+                Files.exists(iconsOutDirectory));\n+    }\n+\n+    @Test\n+    public void execute_PWA_iconInClassPath_generateIcons()\n+            throws ExecutionFailedException, IOException {\n+        createBaseIcon(resourcesDirectory);\n+        task.execute();\n+        assertIconsGenerated();\n+    }\n+\n+    @Test\n+    public void execute_PWA_iconInMetaInfResourcesFolder_generateIcons()\n+            throws ExecutionFailedException, IOException {\n+        createBaseIcon(\n+                resourcesDirectory.resolve(Path.of(\"META-INF\", \"resources\")));\n+        task.execute();\n+        assertIconsGenerated();\n+    }\n+\n+    @Test\n+    public void execute_PWA_baseIconNotFound_generateIconsFromDefaultLogo()\n+            throws ExecutionFailedException, IOException {\n+        task.execute();\n+        assertIconsGenerated();\n+    }\n+\n+    @Test\n+    public void execute_PWA_invalidBaseIconNotFound_throws()\n+            throws IOException {\n+        createBaseIcon(\n+                resourcesDirectory.resolve(Path.of(\"META-INF\", \"resources\")),\n+                new ByteArrayInputStream(\"NOT AN IMAGE\".getBytes()));\n+        ExecutionFailedException exception = Assert\n+                .assertThrows(ExecutionFailedException.class, task::execute);\n+        Assert.assertTrue(\n+                exception.getMessage().contains(\"Cannot load PWA icon\"));\n+        Assert.assertFalse(\"PWA icons should not have been generated\",\n+                Files.exists(iconsOutDirectory));\n+    }\n+\n+    private void createBaseIcon(Path resourcesFolder) throws IOException {\n+        createBaseIcon(resourcesFolder, getClass()\n+                .getResourceAsStream(\"/META-INF/resources/icons/icon.png\"));\n+    }\n+\n+    private void createBaseIcon(Path resourcesFolder, InputStream data)\n+            throws IOException {\n+        Path baseIcon = resourcesFolder.resolve(resourcesFolder)\n+                .resolve(pwaConfiguration.getIconPath().replace('/',\n+                        File.separatorChar));\n+        Files.createDirectories(baseIcon.getParent());\n+        Files.copy(data, baseIcon);\n+    }\n+\n+    private void assertIconsGenerated() throws IOException {\n+        String iconPath = pwaConfiguration.getIconPath();\n+        Path generatedIconsPath = iconsOutDirectory\n+                .resolve(iconPath.replace('/', File.separatorChar)).getParent();\n+        Assert.assertTrue(\"PWA icons folder should have been generated\",\n+                Files.exists(generatedIconsPath));\n+        String iconName = iconPath.substring(iconPath.lastIndexOf(\"/\") + 1,\n+                iconPath.lastIndexOf(\".\"));\n+        String iconExt = iconPath.substring(iconPath.lastIndexOf(\".\") + 1);\n+        Predicate<String> iconNamePattern = Pattern\n+                .compile(iconName + \"-\\\\d+x\\\\d+\\\\.\" + iconExt).asPredicate();\n+        List<String> generatedIcons = Files.list(generatedIconsPath)\n+                .map(p -> p.getFileName().toString()).toList();\n+        Assert.assertFalse(\"Expected PWA icons to be generated\",\n+                generatedIcons.isEmpty());\n+        List<String> invalidIcons = generatedIcons.stream()\n+                .filter(iconNamePattern.negate()).toList();\n+        Assert.assertTrue(\"Generated icons have invalid names: \" + invalidIcons,\n+                invalidIcons.isEmpty());\n+\n+    }\n+\n+    private static class TestPwaConfiguration extends PwaConfiguration {\n+        private Boolean enabled;\n+\n+        public TestPwaConfiguration() {\n+            super(true, DEFAULT_NAME, \"Flow PWA\", \"\", DEFAULT_BACKGROUND_COLOR,\n+                    DEFAULT_THEME_COLOR, \"custom/icons/logo.png\", DEFAULT_PATH,\n+                    DEFAULT_OFFLINE_PATH, DEFAULT_DISPLAY, DEFAULT_START_URL,\n+                    new String[] {}, false);\n+        }\n+\n+        @Override\n+        public boolean isEnabled() {\n+            return enabled != null ? enabled : super.isEnabled();\n+        }\n+\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20515",
    "pr_id": 20515,
    "issue_id": 19938,
    "repo": "vaadin/flow",
    "problem_statement": "Potential deadlock with Jetty\n### Description of the bug\n\nWe have several reports of our application not being able to shutdown. Apparently, some VaadinSessions stay alive and cannot be destroyed. Here the stack dumps of two such cases:\r\n[StackTraces1.txt](https://github.com/user-attachments/files/16964574/StackTraces1.txt)\r\n[StackTraces2.txt](https://github.com/user-attachments/files/16964572/StackTraces2.txt)\r\n\r\nI found some common patterns in these dumps:\r\n\r\nOne of the threads blocks on a Jetty semaphore while reading the request content of an UIDL request. Note that this thread holds the lock on the VaadinSession while blocking.\r\n```\r\njava.base@21.0.4/jdk.internal.misc.Unsafe.park(Native Method)\r\njava.base@21.0.4/java.util.concurrent.locks.LockSupport.park(Unknown Source)\r\njava.base@21.0.4/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(Unknown Source)\r\njava.base@21.0.4/java.util.concurrent.ForkJoinPool.unmanagedBlock(Unknown Source)\r\njava.base@21.0.4/java.util.concurrent.ForkJoinPool.managedBlock(Unknown Source)\r\njava.base@21.0.4/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(Unknown Source)\r\napp//org.eclipse.jetty.ee10.servlet.AsyncContentProducer$LockedSemaphore.acquire(AsyncContentProducer.java:393)\r\napp//org.eclipse.jetty.ee10.servlet.BlockingContentProducer.nextChunk(BlockingContentProducer.java:119)\r\napp//org.eclipse.jetty.ee10.servlet.HttpInput.read(HttpInput.java:245)\r\napp//org.eclipse.jetty.ee10.servlet.HttpInput.read(HttpInput.java:226)\r\njava.base@21.0.4/sun.nio.cs.StreamDecoder.readBytes(Unknown Source)\r\njava.base@21.0.4/sun.nio.cs.StreamDecoder.implRead(Unknown Source)\r\njava.base@21.0.4/sun.nio.cs.StreamDecoder.lockedRead(Unknown Source)\r\njava.base@21.0.4/sun.nio.cs.StreamDecoder.read(Unknown Source)\r\njava.base@21.0.4/java.io.InputStreamReader.read(Unknown Source)\r\njava.base@21.0.4/java.io.BufferedReader.read1(Unknown Source)\r\njava.base@21.0.4/java.io.BufferedReader.implRead(Unknown Source)\r\njava.base@21.0.4/java.io.BufferedReader.read(Unknown Source)\r\njava.base@21.0.4/java.io.Reader.read(Unknown Source)\r\napp//com.vaadin.flow.server.communication.ServerRpcHandler.getMessage(ServerRpcHandler.java:503)\r\napp//com.vaadin.flow.server.communication.ServerRpcHandler.handleRpc(ServerRpcHandler.java:253)\r\napp//com.vaadin.flow.server.communication.UidlRequestHandler.synchronizedHandleRequest(UidlRequestHandler.java:114)\r\napp//com.vaadin.flow.server.SynchronizedRequestHandler.handleRequest(SynchronizedRequestHandler.java:40)\r\napp//com.vaadin.flow.server.VaadinService.handleRequest(VaadinService.java:1584)\r\napp//com.vaadin.flow.server.VaadinServlet.service(VaadinServlet.java:398)\r\napp//jakarta.servlet.http.HttpServlet.service(HttpServlet.java:614)\r\napp//org.eclipse.jetty.ee10.servlet.ServletHolder.handle(ServletHolder.java:736)\r\n```\r\n\r\nA second thread blocks on the VaadinSession while trying to close the websocket:\r\n```\r\njava.base@21.0.4/jdk.internal.misc.Unsafe.park(Native Method)\r\njava.base@21.0.4/java.util.concurrent.locks.LockSupport.park(Unknown Source)\r\njava.base@21.0.4/java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Unknown Source)\r\njava.base@21.0.4/java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Unknown Source)\r\njava.base@21.0.4/java.util.concurrent.locks.ReentrantLock$Sync.lock(Unknown Source)\r\njava.base@21.0.4/java.util.concurrent.locks.ReentrantLock.lock(Unknown Source)\r\napp//com.vaadin.flow.server.VaadinService.lockSession(VaadinService.java:792)\r\napp//com.vaadin.flow.server.VaadinService.findOrCreateVaadinSession(VaadinService.java:839)\r\napp//com.vaadin.flow.server.VaadinService.findVaadinSession(VaadinService.java:684)\r\napp//com.vaadin.flow.server.communication.PushHandler.handleConnectionLost(PushHandler.java:408)\r\napp//com.vaadin.flow.server.communication.PushHandler.connectionLost(PushHandler.java:368)\r\napp//com.vaadin.flow.server.communication.PushAtmosphereHandler.onStateChange(PushAtmosphereHandler.java:62)\r\napp//org.atmosphere.cpr.AsynchronousProcessor.invokeAtmosphereHandler(AsynchronousProcessor.java:538)\r\napp//org.atmosphere.cpr.AsynchronousProcessor.completeLifecycle(AsynchronousProcessor.java:480)\r\napp//org.atmosphere.cpr.AsynchronousProcessor.endRequest(AsynchronousProcessor.java:584)\r\napp//org.atmosphere.websocket.DefaultWebSocketProcessor.close(DefaultWebSocketProcessor.java:639)\r\napp//org.atmosphere.container.JSR356Endpoint.onClose(JSR356Endpoint.java:318)\r\njava.base@21.0.4/java.lang.invoke.LambdaForm$DMH/0x000000001e1a4000.invokeVirtual(LambdaForm$DMH)\r\njava.base@21.0.4/java.lang.invoke.LambdaForm$MH/0x000000001f292000.invoke(LambdaForm$MH)\r\njava.base@21.0.4/java.lang.invoke.LambdaForm$MH/0x000000001ee44800.invoke_MT(LambdaForm$MH)\r\napp//org.eclipse.jetty.ee10.websocket.jakarta.common.JakartaWebSocketFrameHandler.notifyOnClose(JakartaWebSocketFrameHandler.java:295)\r\napp//org.eclipse.jetty.ee10.websocket.jakarta.common.JakartaWebSocketFrameHandler.onClose(JakartaWebSocketFrameHandler.java:267)\r\napp//org.eclipse.jetty.ee10.websocket.jakarta.common.JakartaWebSocketFrameHandler.onFrame(JakartaWebSocketFrameHandler.java:255)\r\napp//org.eclipse.jetty.websocket.core.WebSocketCoreSession$IncomingAdaptor.onFrame(WebSocketCoreSession.java:680)\r\napp//org.eclipse.jetty.websocket.core.AbstractExtension.nextIncomingFrame(AbstractExtension.java:145)\r\napp//org.eclipse.jetty.websocket.core.internal.PerMessageDeflateExtension.nextIncomingFrame(PerMessageDeflateExtension.java:239)\r\napp//org.eclipse.jetty.websocket.core.internal.PerMessageDeflateExtension$IncomingFlusher$$Lambda/0x000000001e90bd08.onFrame(Unknown Source)\r\napp//org.eclipse.jetty.websocket.core.util.DemandingFlusher.emitFrame(DemandingFlusher.java:143)\r\napp//org.eclipse.jetty.websocket.core.internal.PerMessageDeflateExtension$IncomingFlusher.handle(PerMessageDeflateExtension.java:382)\r\napp//org.eclipse.jetty.websocket.core.util.DemandingFlusher.process(DemandingFlusher.java:167)\r\napp//org.eclipse.jetty.util.IteratingCallback.processing(IteratingCallback.java:262)\r\napp//org.eclipse.jetty.util.IteratingCallback.succeeded(IteratingCallback.java:401)\r\napp//org.eclipse.jetty.websocket.core.util.DemandingFlusher.onFrame(DemandingFlusher.java:105)\r\napp//org.eclipse.jetty.websocket.core.internal.PerMessageDeflateExtension.onFrame(PerMessageDeflateExtension.java:96)\r\napp//org.eclipse.jetty.websocket.core.ExtensionStack.onFrame(ExtensionStack.java:113)\r\napp//org.eclipse.jetty.websocket.core.WebSocketCoreSession.onFrame(WebSocketCoreSession.java:463)\r\napp//org.eclipse.jetty.websocket.core.WebSocketConnection.onFrame(WebSocketConnection.java:254)\r\napp//org.eclipse.jetty.websocket.core.WebSocketConnection.fillAndParse(WebSocketConnection.java:447)\r\napp//org.eclipse.jetty.websocket.core.WebSocketConnection.onFillable(WebSocketConnection.java:332)\r\napp//org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:322)\r\napp//org.eclipse.jetty.http2.HTTP2StreamEndPoint.process(HTTP2StreamEndPoint.java:497)\r\napp//org.eclipse.jetty.http2.HTTP2StreamEndPoint.processDataAvailable(HTTP2StreamEndPoint.java:484)\r\napp//org.eclipse.jetty.http2.server.internal.ServerHTTP2StreamEndPoint.onDataAvailable(ServerHTTP2StreamEndPoint.java:40)\r\napp//org.eclipse.jetty.http2.server.internal.HTTP2ServerConnection.onDataAvailable(HTTP2ServerConnection.java:158)\r\napp//org.eclipse.jetty.http2.server.HTTP2ServerConnectionFactory$HTTPServerSessionListener.onDataAvailable(HTTP2ServerConnectionFactory.java:153)\r\napp//org.eclipse.jetty.http2.HTTP2Stream.notifyDataAvailable(HTTP2Stream.java:861)\r\napp//org.eclipse.jetty.http2.HTTP2Stream.processData(HTTP2Stream.java:543)\r\napp//org.eclipse.jetty.http2.HTTP2Stream.onData(HTTP2Stream.java:461)\r\napp//org.eclipse.jetty.http2.HTTP2Stream.process(HTTP2Stream.java:368)\r\napp//org.eclipse.jetty.http2.HTTP2Session.onData(HTTP2Session.java:280)\r\napp//org.eclipse.jetty.http2.HTTP2Connection.onData(HTTP2Connection.java:246)\r\napp//org.eclipse.jetty.http2.parser.BodyParser.notifyData(BodyParser.java:103)\r\napp//org.eclipse.jetty.http2.parser.DataBodyParser.onData(DataBodyParser.java:145)\r\napp//org.eclipse.jetty.http2.parser.DataBodyParser.onData(DataBodyParser.java:140)\r\napp//org.eclipse.jetty.http2.parser.DataBodyParser.parse(DataBodyParser.java:106)\r\napp//org.eclipse.jetty.http2.parser.Parser.parseBody(Parser.java:229)\r\napp//org.eclipse.jetty.http2.parser.Parser.parse(Parser.java:156)\r\napp//org.eclipse.jetty.http2.parser.ServerParser.parse(ServerParser.java:121)\r\napp//org.eclipse.jetty.http2.HTTP2Connection$HTTP2Producer.produce(HTTP2Connection.java:342)\r\napp//org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.produceTask(AdaptiveExecutionStrategy.java:512)\r\napp//org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.tryProduce(AdaptiveExecutionStrategy.java:258)\r\napp//org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.run(AdaptiveExecutionStrategy.java:201)\r\napp//org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:311)\r\napp//org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:979)\r\napp//org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.doRunJob(QueuedThreadPool.java:1209)\r\napp//org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:1164)\r\njava.base@21.0.4/java.lang.Thread.runWith(Unknown Source)\r\njava.base@21.0.4/java.lang.Thread.run(Unknown Source)\r\n```\r\n\r\nA third thread also blocks on the VaadinSession while handling a connection loss, but this one comes from the HeartbeatInterception:\r\n```\r\njava.base@21.0.4/jdk.internal.misc.Unsafe.park(Native Method)\r\njava.base@21.0.4/java.util.concurrent.locks.LockSupport.park(Unknown Source)\r\njava.base@21.0.4/java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Unknown Source)\r\njava.base@21.0.4/java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Unknown Source)\r\njava.base@21.0.4/java.util.concurrent.locks.ReentrantLock$Sync.lock(Unknown Source)\r\njava.base@21.0.4/java.util.concurrent.locks.ReentrantLock.lock(Unknown Source)\r\napp//com.vaadin.flow.server.VaadinService.lockSession(VaadinService.java:798)\r\napp//com.vaadin.flow.server.VaadinService.findOrCreateVaadinSession(VaadinService.java:845)\r\napp//com.vaadin.flow.server.VaadinService.findVaadinSession(VaadinService.java:690)\r\napp//com.vaadin.flow.server.communication.PushHandler.handleConnectionLost(PushHandler.java:414)\r\napp//com.vaadin.flow.server.communication.PushHandler.connectionLost(PushHandler.java:368)\r\napp//com.vaadin.flow.server.communication.PushAtmosphereHandler$AtmosphereResourceListener.onDisconnect(PushAtmosphereHandler.java:113)\r\napp//org.atmosphere.cpr.AtmosphereResourceImpl.onDisconnect(AtmosphereResourceImpl.java:752)\r\napp//org.atmosphere.cpr.AtmosphereResourceImpl.notifyListeners(AtmosphereResourceImpl.java:644)\r\napp//org.atmosphere.cpr.AtmosphereResponseImpl.handleException(AtmosphereResponseImpl.java:732)\r\napp//org.atmosphere.cpr.AtmosphereResponseImpl.access$1500(AtmosphereResponseImpl.java:57)\r\napp//org.atmosphere.cpr.AtmosphereResponseImpl$Stream.write(AtmosphereResponseImpl.java:958)\r\napp//org.atmosphere.cpr.AtmosphereResponseImpl.write(AtmosphereResponseImpl.java:805)\r\napp//org.atmosphere.interceptor.HeartbeatInterceptor.lambda$clock$0(HeartbeatInterceptor.java:367)\r\napp//org.atmosphere.interceptor.HeartbeatInterceptor$$Lambda/0x0000000021c1cf78.call(Unknown Source)\r\njava.base@21.0.4/java.util.concurrent.FutureTask.run(Unknown Source)\r\njava.base@21.0.4/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)\r\njava.base@21.0.4/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)\r\njava.base@21.0.4/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\r\njava.base@21.0.4/java.lang.Thread.runWith(Unknown Source)\r\njava.base@21.0.4/java.lang.Thread.run(Unknown Source)\r\n```\r\n\r\nI'm not sure where things go wrong, but this does look a bit suspicious to me.\n\n### Expected behavior\n\nThe application should shut down without getting stuck in a deadlock.\n\n### Minimal reproducible example\n\nUnfortunately, I don't have a reproducer. I hope that the stack traces are good enough.\n\n### Versions\n\n- Vaadin / Flow version: 24.4.10\r\n- Java version: Eclipse Temurin 21.0.3\r\n- OS version: Windows 11\r\n- Application Server (if applicable): Jetty 12.0.13\r\n",
    "issue_word_count": 1576,
    "test_files_count": 2,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/server/SynchronizedRequestHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/PushHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/UidlRequestHandler.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/ServerRpcHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/server/communication/ServerRpcHandlerTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java"
    ],
    "base_commit": "07ce01f8d51371dc7153b88a931da7ff9e5033df",
    "head_commit": "1e67e56015d7c07259443cdc577fc49a5b4ad376",
    "repo_url": "https://github.com/vaadin/flow/pull/20515",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20515",
    "dockerfile": "",
    "pr_merged_at": "2024-11-19T15:05:57.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/SynchronizedRequestHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/SynchronizedRequestHandler.java\nindex d271b8a189f..a5432b00587 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/SynchronizedRequestHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/SynchronizedRequestHandler.java\n@@ -15,7 +15,11 @@\n  */\n package com.vaadin.flow.server;\n \n+import java.io.BufferedReader;\n import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Serializable;\n+import java.util.Optional;\n \n /**\n  * RequestHandler which takes care of locking and unlocking of the VaadinSession\n@@ -28,6 +32,21 @@\n  */\n public abstract class SynchronizedRequestHandler implements RequestHandler {\n \n+    public static final int MAX_BUFFER_SIZE = 64 * 1024;\n+\n+    /**\n+     * ResponseWriter is optionally returned by request handlers which implement\n+     * {@link SynchronizedRequestHandler#synchronizedHandleRequest(VaadinSession, VaadinRequest, VaadinResponse, String)}\n+     *\n+     * The ResponseWriter will be executed by\n+     * {@link #handleRequest(VaadinSession, VaadinRequest, VaadinResponse)}\n+     * without holding Vaadin session lock.\n+     */\n+    @FunctionalInterface\n+    public interface ResponseWriter extends Serializable {\n+        void writeResponse() throws IOException;\n+    }\n+\n     @Override\n     public boolean handleRequest(VaadinSession session, VaadinRequest request,\n             VaadinResponse response) throws IOException {\n@@ -35,11 +54,27 @@ public boolean handleRequest(VaadinSession session, VaadinRequest request,\n             return false;\n         }\n \n-        session.lock();\n         try {\n-            return synchronizedHandleRequest(session, request, response);\n+            if (isReadAndWriteOutsideSessionLock()) {\n+                BufferedReader reader = request.getReader();\n+                String requestBody = reader == null ? null\n+                        : getRequestBody(reader);\n+                session.lock();\n+                Optional<ResponseWriter> responseWriter = synchronizedHandleRequest(\n+                        session, request, response, requestBody);\n+                session.unlock();\n+                if (responseWriter.isPresent()) {\n+                    responseWriter.get().writeResponse();\n+                }\n+                return responseWriter.isPresent();\n+            } else {\n+                session.lock();\n+                return synchronizedHandleRequest(session, request, response);\n+            }\n         } finally {\n-            session.unlock();\n+            if (session.hasLock()) {\n+                session.unlock();\n+            }\n         }\n     }\n \n@@ -65,6 +100,51 @@ public boolean handleRequest(VaadinSession session, VaadinRequest request,\n     public abstract boolean synchronizedHandleRequest(VaadinSession session,\n             VaadinRequest request, VaadinResponse response) throws IOException;\n \n+    /**\n+     * Gets if request body should be read and the response written without\n+     * holding {@link VaadinSession} lock\n+     *\n+     * @return {@literal true} if\n+     *         {@link #synchronizedHandleRequest(VaadinSession, VaadinRequest, VaadinResponse, String)}\n+     *         should be called. Returns {@literal false} if\n+     *         {@link #synchronizedHandleRequest(VaadinSession, VaadinRequest, VaadinResponse)}\n+     *         should be called.\n+     */\n+    public boolean isReadAndWriteOutsideSessionLock() {\n+        return false;\n+    }\n+\n+    /**\n+     * Identical to\n+     * {@link #synchronizedHandleRequest(VaadinSession, VaadinRequest, VaadinResponse)}\n+     * except the {@link VaadinSession} is locked before this is called and the\n+     * response requestBody has been read before locking the session and is\n+     * provided as a separate parameter.\n+     *\n+     * @param session\n+     *            The session for the request\n+     * @param request\n+     *            The request to handle\n+     * @param response\n+     *            The response object to which a response can be written.\n+     * @param requestBody\n+     *            Request body pre-read from the request object\n+     * @return a ResponseWriter wrapped into an Optional, if this handler will\n+     *         write the response and no further request handlers should be\n+     *         called, otherwise an empty Optional. The ResponseWriter will be\n+     *         executed after the VaadinSession is unlocked.\n+     *\n+     * @throws IOException\n+     *             If an IO error occurred\n+     * @see #handleRequest(VaadinSession, VaadinRequest, VaadinResponse)\n+     */\n+    public Optional<ResponseWriter> synchronizedHandleRequest(\n+            VaadinSession session, VaadinRequest request,\n+            VaadinResponse response, String requestBody)\n+            throws IOException, UnsupportedOperationException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n     /**\n      * Check whether a request may be handled by this handler. This can be used\n      * as an optimization to avoid locking the session just to investigate some\n@@ -85,4 +165,18 @@ protected boolean canHandleRequest(VaadinRequest request) {\n         return true;\n     }\n \n+    public static String getRequestBody(Reader reader) throws IOException {\n+        StringBuilder sb = new StringBuilder(MAX_BUFFER_SIZE);\n+        char[] buffer = new char[MAX_BUFFER_SIZE];\n+\n+        while (true) {\n+            int read = reader.read(buffer);\n+            if (read == -1) {\n+                break;\n+            }\n+            sb.append(buffer, 0, read);\n+        }\n+\n+        return sb.toString();\n+    }\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/PushHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/PushHandler.java\nindex 883acfccc2c..e1c28104759 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/PushHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/PushHandler.java\n@@ -42,6 +42,7 @@\n import com.vaadin.flow.server.ErrorEvent;\n import com.vaadin.flow.server.HandlerHelper;\n import com.vaadin.flow.server.SessionExpiredException;\n+import com.vaadin.flow.server.SynchronizedRequestHandler;\n import com.vaadin.flow.server.SystemMessages;\n import com.vaadin.flow.server.VaadinContext;\n import com.vaadin.flow.server.VaadinRequest;\n@@ -54,7 +55,6 @@\n import com.vaadin.flow.shared.ApplicationConstants;\n import com.vaadin.flow.shared.JsonConstants;\n import com.vaadin.flow.shared.communication.PushMode;\n-\n import elemental.json.JsonException;\n \n /**\n@@ -162,7 +162,9 @@ interface PushEventCallback {\n         assert vaadinRequest != null;\n \n         try {\n-            new ServerRpcHandler().handleRpc(ui, reader, vaadinRequest);\n+            new ServerRpcHandler().handleRpc(ui,\n+                    SynchronizedRequestHandler.getRequestBody(reader),\n+                    vaadinRequest);\n             connection.push(false);\n         } catch (JsonException e) {\n             getLogger().error(\"Error writing JSON to response\", e);\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java\nindex 9ebc866614a..c877837bf09 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java\n@@ -37,6 +37,7 @@\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.router.PreserveOnRefresh;\n import com.vaadin.flow.server.ErrorEvent;\n+import com.vaadin.flow.server.SynchronizedRequestHandler;\n import com.vaadin.flow.server.VaadinRequest;\n import com.vaadin.flow.server.VaadinService;\n import com.vaadin.flow.server.communication.rpc.AttachExistingElementRpcHandler;\n@@ -90,6 +91,11 @@ public static class RpcRequest implements Serializable {\n          *            the request through which the JSON was received\n          */\n         public RpcRequest(String jsonString, VaadinRequest request) {\n+            this(jsonString, request.getService().getDeploymentConfiguration()\n+                    .isSyncIdCheckEnabled());\n+        }\n+\n+        public RpcRequest(String jsonString, boolean isSyncIdCheckEnabled) {\n             json = JsonUtil.parse(jsonString);\n \n             JsonValue token = json.get(ApplicationConstants.CSRF_TOKEN);\n@@ -103,8 +109,7 @@ public RpcRequest(String jsonString, VaadinRequest request) {\n                 this.csrfToken = csrfToken;\n             }\n \n-            if (request.getService().getDeploymentConfiguration()\n-                    .isSyncIdCheckEnabled()) {\n+            if (isSyncIdCheckEnabled) {\n                 syncId = (int) json\n                         .getNumber(ApplicationConstants.SERVER_SYNC_ID);\n             } else {\n@@ -196,8 +201,6 @@ private boolean isUnloadBeaconRequest() {\n \n     }\n \n-    private static final int MAX_BUFFER_SIZE = 64 * 1024;\n-\n     /**\n      * Exception thrown then the security key sent by the client does not match\n      * the expected one.\n@@ -248,16 +251,35 @@ public ResynchronizationRequiredException() {\n      */\n     public void handleRpc(UI ui, Reader reader, VaadinRequest request)\n             throws IOException, InvalidUIDLSecurityKeyException {\n-        ui.getSession().setLastRequestTimestamp(System.currentTimeMillis());\n+        handleRpc(ui, SynchronizedRequestHandler.getRequestBody(reader),\n+                request);\n+    }\n \n-        String changeMessage = getMessage(reader);\n+    /**\n+     * Reads JSON containing zero or more serialized RPC calls (including legacy\n+     * variable changes) and executes the calls.\n+     *\n+     * @param ui\n+     *            The {@link UI} receiving the calls. Cannot be null.\n+     * @param message\n+     *            The JSON message from the request.\n+     * @param request\n+     *            The request through which the RPC was received\n+     * @throws InvalidUIDLSecurityKeyException\n+     *             If the received security key does not match the one stored in\n+     *             the session.\n+     */\n+    public void handleRpc(UI ui, String message, VaadinRequest request)\n+            throws InvalidUIDLSecurityKeyException {\n+        ui.getSession().setLastRequestTimestamp(System.currentTimeMillis());\n \n-        if (changeMessage == null || changeMessage.equals(\"\")) {\n+        if (message == null || message.isEmpty()) {\n             // The client sometimes sends empty messages, this is probably a bug\n             return;\n         }\n \n-        RpcRequest rpcRequest = new RpcRequest(changeMessage, request);\n+        RpcRequest rpcRequest = new RpcRequest(message, request.getService()\n+                .getDeploymentConfiguration().isSyncIdCheckEnabled());\n \n         // Security: double cookie submission pattern unless disabled by\n         // property\n@@ -265,9 +287,9 @@ public void handleRpc(UI ui, Reader reader, VaadinRequest request)\n             throw new InvalidUIDLSecurityKeyException();\n         }\n \n-        String hashMessage = changeMessage;\n+        String hashMessage = message;\n         if (hashMessage.length() > 64 * 1024) {\n-            hashMessage = changeMessage.substring(0, 64 * 1024);\n+            hashMessage = message.substring(0, 64 * 1024);\n         }\n         byte[] messageHash = MessageDigestUtil.sha256(hashMessage);\n \n@@ -370,7 +392,6 @@ public void handleRpc(UI ui, Reader reader, VaadinRequest request)\n                 getLogger().debug(\"UI closed with a beacon request\");\n             }\n         }\n-\n     }\n \n     // Kind of same as in AbstractNavigationStateRenderer, but gets\n@@ -504,8 +525,9 @@ private static void callErrorHandler(UI ui, JsonObject invocationJson,\n \n     protected String getMessage(Reader reader) throws IOException {\n \n-        StringBuilder sb = new StringBuilder(MAX_BUFFER_SIZE);\n-        char[] buffer = new char[MAX_BUFFER_SIZE];\n+        StringBuilder sb = new StringBuilder(\n+                SynchronizedRequestHandler.MAX_BUFFER_SIZE);\n+        char[] buffer = new char[SynchronizedRequestHandler.MAX_BUFFER_SIZE];\n \n         while (true) {\n             int read = reader.read(buffer);\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/UidlRequestHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/UidlRequestHandler.java\nindex 38b17e42a01..fd60ee87326 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/UidlRequestHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/UidlRequestHandler.java\n@@ -20,6 +20,7 @@\n import java.io.OutputStream;\n import java.io.StringWriter;\n import java.io.Writer;\n+import java.util.Optional;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n@@ -99,31 +100,48 @@ protected ServerRpcHandler createRpcHandler() {\n     @Override\n     public boolean synchronizedHandleRequest(VaadinSession session,\n             VaadinRequest request, VaadinResponse response) throws IOException {\n+        String requestBody = SynchronizedRequestHandler\n+                .getRequestBody(request.getReader());\n+        Optional<ResponseWriter> responseWriter = synchronizedHandleRequest(\n+                session, request, response, requestBody);\n+        if (responseWriter.isPresent()) {\n+            responseWriter.get().writeResponse();\n+        }\n+        return responseWriter.isPresent();\n+    }\n+\n+    @Override\n+    public boolean isReadAndWriteOutsideSessionLock() {\n+        return true;\n+    }\n+\n+    @Override\n+    public Optional<ResponseWriter> synchronizedHandleRequest(\n+            VaadinSession session, VaadinRequest request,\n+            VaadinResponse response, String requestBody)\n+            throws IOException, UnsupportedOperationException {\n         UI uI = session.getService().findUI(request);\n         if (uI == null) {\n             // This should not happen but it will if the UI has been closed. We\n             // really don't want to see it in the server logs though\n-            commitJsonResponse(response,\n-                    VaadinService.createUINotFoundJSON(false));\n-            return true;\n+            return Optional.of(() -> commitJsonResponse(response,\n+                    VaadinService.createUINotFoundJSON(false)));\n         }\n \n         StringWriter stringWriter = new StringWriter();\n \n         try {\n-            getRpcHandler(session).handleRpc(uI, request.getReader(), request);\n+            getRpcHandler(session).handleRpc(uI, requestBody, request);\n             writeUidl(uI, stringWriter, false);\n         } catch (JsonException e) {\n             getLogger().error(\"Error writing JSON to response\", e);\n             // Refresh on client side\n-            writeRefresh(response);\n-            return true;\n+            return Optional.of(() -> writeRefresh(response));\n         } catch (InvalidUIDLSecurityKeyException e) {\n             getLogger().warn(\"Invalid security key received from {}\",\n                     request.getRemoteHost());\n             // Refresh on client side\n-            writeRefresh(response);\n-            return true;\n+            return Optional.of(() -> writeRefresh(response));\n         } catch (ResynchronizationRequiredException e) { // NOSONAR\n             // Resync on the client side\n             writeUidl(uI, stringWriter, true);\n@@ -131,8 +149,8 @@ public boolean synchronizedHandleRequest(VaadinSession session,\n             stringWriter.close();\n         }\n \n-        commitJsonResponse(response, stringWriter.toString());\n-        return true;\n+        return Optional.of(\n+                () -> commitJsonResponse(response, stringWriter.toString()));\n     }\n \n     private void writeRefresh(VaadinResponse response) throws IOException {\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/ServerRpcHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/ServerRpcHandlerTest.java\nindex 9f5b699944c..3d7020cbbc9 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/ServerRpcHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/ServerRpcHandlerTest.java\n@@ -1,7 +1,6 @@\n package com.vaadin.flow.server.communication;\n \n import java.io.IOException;\n-import java.io.Reader;\n import java.io.StringReader;\n \n import org.junit.Assert;\n@@ -98,12 +97,7 @@ public void handleRpc_resynchronize_throwsExceptionAndDirtiesTreeAndClearsDepend\n     public void handleRpc_duplicateMessage_doNotThrow()\n             throws InvalidUIDLSecurityKeyException, IOException {\n         String msg = \"{\\\"\" + ApplicationConstants.CLIENT_TO_SERVER_ID + \"\\\":1}\";\n-        ServerRpcHandler handler = new ServerRpcHandler() {\n-            @Override\n-            protected String getMessage(Reader reader) throws IOException {\n-                return msg;\n-            };\n-        };\n+        ServerRpcHandler handler = new ServerRpcHandler();\n \n         ui = new UI();\n         ui.getInternals().setSession(session);\n@@ -111,23 +105,18 @@ protected String getMessage(Reader reader) throws IOException {\n                 MessageDigestUtil.sha256(msg));\n \n         // This invocation shouldn't throw. No other checks\n-        handler.handleRpc(ui, Mockito.mock(Reader.class), request);\n+        handler.handleRpc(ui, msg, request);\n     }\n \n     @Test(expected = UnsupportedOperationException.class)\n     public void handleRpc_unexpectedMessage_throw()\n             throws InvalidUIDLSecurityKeyException, IOException {\n-        ServerRpcHandler handler = new ServerRpcHandler() {\n-            @Override\n-            protected String getMessage(Reader reader) throws IOException {\n-                return \"{\\\"\" + ApplicationConstants.CLIENT_TO_SERVER_ID\n-                        + \"\\\":1}\";\n-            };\n-        };\n+        String msg = \"{\\\"\" + ApplicationConstants.CLIENT_TO_SERVER_ID + \"\\\":1}\";\n+        ServerRpcHandler handler = new ServerRpcHandler();\n \n         ui = new UI();\n         ui.getInternals().setSession(session);\n \n-        handler.handleRpc(ui, Mockito.mock(Reader.class), request);\n+        handler.handleRpc(ui, msg, request);\n     }\n }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java\nindex 94bfd930cd9..75e8b566512 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java\n@@ -21,6 +21,7 @@\n import java.io.OutputStream;\n import java.io.StringWriter;\n import java.util.Collections;\n+import java.util.Optional;\n import java.util.Properties;\n \n import org.junit.Assert;\n@@ -32,6 +33,7 @@\n import com.vaadin.flow.server.DefaultDeploymentConfiguration;\n import com.vaadin.flow.server.HandlerHelper.RequestType;\n import com.vaadin.flow.server.MockVaadinContext;\n+import com.vaadin.flow.server.SynchronizedRequestHandler;\n import com.vaadin.flow.server.VaadinContext;\n import com.vaadin.flow.server.VaadinRequest;\n import com.vaadin.flow.server.VaadinResponse;\n@@ -40,7 +42,6 @@\n import com.vaadin.flow.server.VaadinSession;\n import com.vaadin.flow.server.startup.ApplicationConfiguration;\n import com.vaadin.flow.shared.ApplicationConstants;\n-\n import elemental.json.JsonObject;\n import elemental.json.impl.JsonUtil;\n \n@@ -108,10 +109,11 @@ public void writeSessionExpired_whenUINotFound() throws IOException {\n \n         when(service.findUI(request)).thenReturn(null);\n \n-        boolean result = handler.synchronizedHandleRequest(session, request,\n-                response);\n-        Assert.assertTrue(\"Result should be true\", result);\n-\n+        Optional<SynchronizedRequestHandler.ResponseWriter> result = handler\n+                .synchronizedHandleRequest(session, request, response, null);\n+        Assert.assertTrue(\"ResponseWriter should be present\",\n+                result.isPresent());\n+        result.get().writeResponse();\n         String responseContent = CommunicationUtil\n                 .getStringWhenWriteString(outputStream);\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20511",
    "pr_id": 20511,
    "issue_id": 20505,
    "repo": "vaadin/flow",
    "problem_statement": "Multiple Parent Flow Layout with React View not working\n### Description of the bug\n\nWhen I set up a multiple parent flow layout structure and I want to embed a React View, I don't see the content of the react view.\r\n\r\nNavigating from a flow view in the same parent layout hierarchy  I'm getting an exception:\r\n```\r\njava.lang.NullPointerException: Cannot invoke \"com.vaadin.flow.component.HasElement.getElement()\" because \"content\" is null\r\n\tat com.example.application.views.flowlayout.FlowMainLayout.showRouterLayoutContent(FlowMainLayout.java:26) ~[classes/:na]\r\n\tat com.vaadin.flow.component.internal.UIInternals.showRouteTarget(UIInternals.java:856) ~[flow-server-24.5.5.jar:24.5.5]\r\n\tat com.vaadin.flow.router.internal.AbstractNavigationStateRenderer.handle(AbstractNavigationStateRenderer.java:262) ~[flow-server-24.5.5.jar:24.5.5]\r\n\tat com.vaadin.flow.component.internal.JavaScriptNavigationStateRenderer.handle(JavaScriptNavigationStateRenderer.java:78) ~[flow-server-24.5.5.jar:24.5.5]\r\n\tat com.vaadin.flow.component.UI.handleNavigation(UI.java:2049) ~[flow-server-24.5.5.jar:24.5.5]\r\n\tat com.vaadin.flow.component.UI.renderViewForRoute(UI.java:2012) ~[flow-server-24.5.5.jar:24.5.5]\r\n\tat com.vaadin.flow.component.UI.lambda$browserNavigate$3bdbbbb5$1(UI.java:1873) ~[flow-server-24.5.5.jar:24.5.5]\r\n\tat com.vaadin.flow.component.UI.browserNavigate(UI.java:1882) ~[flow-server-24.5.5.jar:24.5.5]\r\n\tat com.vaadin.flow.component.ComponentEventBus.fireEventForListener(ComponentEventBus.java:239) ~[flow-server-24.5.5.jar:24.5.5]\r\n\tat com.vaadin.flow.component.ComponentEventBus.handleDomEvent(ComponentEventBus.java:488) ~[flow-server-24.5.5.jar:24.5.5]\r\n\tat com.vaadin.flow.component.ComponentEventBus.lambda$addDomTrigger$dd1b7957$1(ComponentEventBus.java:298) ~[flow-server-24.5.5.jar:24.5.5]\r\n\tat com.vaadin.flow.internal.nodefeature.ElementListenerMap.lambda$fireEvent$2(ElementListenerMap.java:475) ~[flow-server-24.5.5.jar:24.5.5]\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596) ~[na:na]\r\n\tat com.vaadin.flow.internal.nodefeature.ElementListenerMap.fireEvent(ElementListenerMap.java:475) ~[flow-server-24.5.5.jar:24.5.5]\r\n\tat com.vaadin.flow.server.communication.rpc.EventRpcHandler.handleNode(EventRpcHandler.java:62) ~[flow-server-24.5.5.jar:24.5.5]\r\n\tat com.vaadin.flow.server.communication.rpc.AbstractRpcInvocationHandler.handle(AbstractRpcInvocationHandler.java:73) ~[flow-server-24.5.5.jar:24.5.5]\r\n\tat com.vaadin.flow.server.communication.ServerRpcHandler.handleInvocationData(ServerRpcHandler.java:529) ~[flow-server-24.5.5.jar:24.5.5]\r\n\tat com.vaadin.flow.server.communication.ServerRpcHandler.lambda$handleInvocations$6(ServerRpcHandler.java:510) ~[flow-server-24.5.5.jar:24.5.5]\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596) ~[na:na]\r\n\tat com.vaadin.flow.server.communication.ServerRpcHandler.handleInvocations(ServerRpcHandler.java:510) ~[flow-server-24.5.5.jar:24.5.5]\r\n\tat com.vaadin.flow.server.communication.ServerRpcHandler.handleRpc(ServerRpcHandler.java:336) ~[flow-server-24.5.5.jar:24.5.5]\r\n\tat com.vaadin.flow.server.communication.UidlRequestHandler.synchronizedHandleRequest(UidlRequestHandler.java:117) ~[flow-server-24.5.5.jar:24.5.5]\r\n\tat com.vaadin.flow.server.SynchronizedRequestHandler.handleRequest(SynchronizedRequestHandler.java:40) ~[flow-server-24.5.5.jar:24.5.5]\r\n\tat com.vaadin.flow.server.VaadinService.handleRequest(VaadinService.java:1650) ~[flow-server-24.5.5.jar:24.5.5]\r\n\tat com.vaadin.flow.server.VaadinServlet.service(VaadinServlet.java:398) ~[flow-server-24.5.5.jar:24.5.5]\r\n\tat com.vaadin.flow.spring.SpringServlet.service(SpringServlet.java:106) ~[vaadin-spring-24.5.5.jar:na]\r\n\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.31.jar:6.0]\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.31.jar:10.1.31]\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.31.jar:10.1.31]\r\n\tat org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:632) ~[tomcat-embed-core-10.1.31.jar:10.1.31]\r\n\tat org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:408) ~[tomcat-embed-core-10.1.31.jar:10.1.31]\r\n\tat org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:303) ~[tomcat-embed-core-10.1.31.jar:10.1.31]\r\n\tat org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:267) ~[tomcat-embed-core-10.1.31.jar:10.1.31]\r\n\tat org.springframework.web.servlet.mvc.ServletForwardingController.handleRequestInternal(ServletForwardingController.java:142) ~[spring-webmvc-6.1.14.jar:6.1.14]\r\n\tat org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:178) ~[spring-webmvc-6.1.14.jar:6.1.14]\r\n\tat org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:51) ~[spring-webmvc-6.1.14.jar:6.1.14]\r\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.1.14.jar:6.1.14]\r\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.1.14.jar:6.1.14]\r\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.1.14.jar:6.1.14]\r\n\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914) ~[spring-webmvc-6.1.14.jar:6.1.14]\r\n\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[tomcat-embed-core-10.1.31.jar:6.0]\r\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.1.14.jar:6.1.14]\r\n\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.31.jar:6.0]\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.31.jar:10.1.31]\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.31.jar:10.1.31]\r\n\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.31.jar:10.1.31]\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.31.jar:10.1.31]\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.31.jar:10.1.31]\r\n\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.1.14.jar:6.1.14]\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.14.jar:6.1.14]\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.31.jar:10.1.31]\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.31.jar:10.1.31]\r\n\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.1.14.jar:6.1.14]\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.14.jar:6.1.14]\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.31.jar:10.1.31]\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.31.jar:10.1.31]\r\n\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.1.14.jar:6.1.14]\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.14.jar:6.1.14]\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.31.jar:10.1.31]\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.31.jar:10.1.31]\r\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.31.jar:10.1.31]\r\n\tat org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.31.jar:10.1.31]\r\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:41002) ~[tomcat-embed-core-10.1.31.jar:10.1.31]\r\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.31.jar:10.1.31]\r\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.31.jar:10.1.31]\r\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.31.jar:10.1.31]\r\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.31.jar:10.1.31]\r\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.31.jar:10.1.31]\r\n\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384) ~[tomcat-embed-core-10.1.31.jar:10.1.31]\r\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.31.jar:10.1.31]\r\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) ~[tomcat-embed-core-10.1.31.jar:10.1.31]\r\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741) ~[tomcat-embed-core-10.1.31.jar:10.1.31]\r\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.31.jar:10.1.31]\r\n\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) ~[tomcat-embed-core-10.1.31.jar:10.1.31]\r\n\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.31.jar:10.1.31]\r\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.31.jar:10.1.31]\r\n\tat java.base/java.lang.Thread.run(Thread.java:1583) ~[na:na]\r\n```\n\n### Expected behavior\n\nReact Views should be visible same as Flow Views\n\n### Minimal reproducible example\n\nhttps://github.com/SebastianKuehnau/24-5-showcase-app/tree/flow-layout-issue\r\n\r\nrun the app and navigate to \"React View with Flow Layout!\" -> \"Test View\" -> \"React View with Flow Layout!\"\n\n### Versions\n\n- Vaadin / Flow version: 24.5.5\r\n- Java version: 21.0.5\r\n- OS version: MaxOS 15.1\r\n- Browser version (if applicable): Chrome, Edge, Safari\r\n- Application Server (if applicable):\r\n- IDE (if applicable):\r\n",
    "issue_word_count": 1646,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/router/internal/DefaultRouteResolver.java",
      "flow-server/src/test/java/com/vaadin/flow/router/DefaultRouteResolverTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/router/DefaultRouteResolverTest.java"
    ],
    "base_commit": "0a23c618ec061d3216362d5ce77dd4a71618123f",
    "head_commit": "a37b7d8edabd142db880a543c7550b04e52cbd48",
    "repo_url": "https://github.com/vaadin/flow/pull/20511",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20511",
    "dockerfile": "",
    "pr_merged_at": "2024-11-19T10:35:55.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/router/internal/DefaultRouteResolver.java b/flow-server/src/main/java/com/vaadin/flow/router/internal/DefaultRouteResolver.java\nindex cfd7c2e7885..63944c2a540 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/router/internal/DefaultRouteResolver.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/router/internal/DefaultRouteResolver.java\n@@ -25,6 +25,7 @@\n import com.vaadin.flow.router.NavigationStateBuilder;\n import com.vaadin.flow.router.NotFoundException;\n import com.vaadin.flow.router.RouteResolver;\n+import com.vaadin.flow.router.RouterLayout;\n import com.vaadin.flow.server.RouteRegistry;\n import com.vaadin.flow.internal.menu.MenuRegistry;\n import com.vaadin.flow.server.menu.AvailableViewInfo;\n@@ -58,15 +59,16 @@ public NavigationState resolve(ResolveRequest request) {\n                                         : \"/\" + clientPath);\n                 if (viewInfo != null && viewInfo.flowLayout()) {\n \n-                    Class<? extends Component> layout = (Class<? extends Component>) registry\n+                    Class<? extends RouterLayout> layout = registry\n                             .getLayout(path);\n                     if (layout == null) {\n                         throw new NotFoundException(\n                                 \"No layout for client path '%s'\"\n                                         .formatted(path));\n                     }\n-                    RouteTarget target = new RouteTarget(layout,\n-                            Collections.emptyList());\n+                    RouteTarget target = new RouteTarget(\n+                            (Class<? extends Component>) layout, RouteUtil\n+                                    .getParentLayoutsForNonRouteTarget(layout));\n                     navigationResult = new NavigationRouteTarget(\n                             navigationResult.getPath(), target,\n                             Collections.emptyMap());\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/router/DefaultRouteResolverTest.java b/flow-server/src/test/java/com/vaadin/flow/router/DefaultRouteResolverTest.java\nindex 999a7dc4fe1..8c576e535be 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/router/DefaultRouteResolverTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/router/DefaultRouteResolverTest.java\n@@ -15,16 +15,13 @@\n  */\n package com.vaadin.flow.router;\n \n-import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n-import com.fasterxml.jackson.annotation.JsonProperty;\n import org.junit.Assert;\n import org.junit.Rule;\n import org.junit.Test;\n@@ -41,7 +38,6 @@\n import com.vaadin.flow.server.RouteRegistry;\n import com.vaadin.flow.internal.menu.MenuRegistry;\n import com.vaadin.flow.server.menu.AvailableViewInfo;\n-import com.vaadin.flow.server.menu.RouteParamType;\n \n public class DefaultRouteResolverTest extends RoutingTestBase {\n \n@@ -149,6 +145,34 @@ public void clientRouteRequest_getDefinedLayout() {\n         }\n     }\n \n+    @Test\n+    public void clientRouteRequest_getDefinedLayoutAndParentLayouts() {\n+        String path = \"route\";\n+\n+        router.getRegistry().setLayout(DefaultWithParentLayout.class);\n+\n+        try (MockedStatic<MenuRegistry> menuRegistry = Mockito\n+                .mockStatic(MenuRegistry.class)) {\n+            menuRegistry.when(() -> MenuRegistry.getClientRoutes(false))\n+                    .thenReturn(Collections.singletonMap(\"/route\",\n+                            new AvailableViewInfo(\"\", null, false, \"/route\",\n+                                    false, false, null, null, null, true)));\n+            NavigationState greeting = resolveNavigationState(path);\n+            Assert.assertEquals(\n+                    \"Layout should be returned for a non server route when matching @Layout exists\",\n+                    DefaultWithParentLayout.class,\n+                    greeting.getRouteTarget().getTarget());\n+            Assert.assertEquals(\n+                    \"@ParentLayout annotation should be followed. @Layout class should not be in parent layout list.\",\n+                    1, greeting.getRouteTarget().getParentLayouts().size());\n+            Assert.assertEquals(\n+                    \"@ParentLayout annotation should be followed. @Layout class should not be in parent layout list.\",\n+                    DefaultParentLayout.class,\n+                    greeting.getRouteTarget().getParentLayouts().get(0));\n+\n+        }\n+    }\n+\n     @Test\n     public void clientRouteRequest_withRouteParameters_getDefinedLayout() {\n         router.getRegistry().setLayout(DefaultLayout.class);\n@@ -308,6 +332,18 @@ private static class DefaultLayout extends Component\n             implements RouterLayout {\n     }\n \n+    @Tag(\"div\")\n+    @Layout\n+    @ParentLayout(DefaultParentLayout.class)\n+    private static class DefaultWithParentLayout extends Component\n+            implements RouterLayout {\n+    }\n+\n+    @Tag(\"div\")\n+    private static class DefaultParentLayout extends Component\n+            implements RouterLayout {\n+    }\n+\n     private Class<? extends Component> resolveNavigationTarget(String path) {\n         return resolveNavigationState(path).getNavigationTarget();\n     }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20510",
    "pr_id": 20510,
    "issue_id": 20417,
    "repo": "vaadin/flow",
    "problem_statement": "Corrupt filename in Upload component when server's file encoding is not UTF-8\n### Description of the bug\r\n\r\nWhen using the Upload component with a filename that has non-ASCII characters, the server receives a corrupt filename if it's file encoding is not UTF-8.\r\nThe filename is part of the upload request and seems to be UTF-8 encoded:\r\n![grafik](https://github.com/user-attachments/assets/48732508-5d58-4561-86ee-b5d6dd42e7c3)\r\n\r\nThe filename is then read via Apache Commons' ServletFileUpload, created by StreamReceiverHandler.getItemIterator(VaadinRequest). As there is no encoding set on creation, it falls back to the server's default.\r\n\r\nExample running the example below from Windows command line:\r\n![grafik](https://github.com/user-attachments/assets/dce3425e-7caf-4892-ac00-703a5096c84c)\r\n\r\n\r\n### Expected behavior\r\n\r\nIt seems to me that the client is always sending the filename UTF-8 encoded. If this is correct, the ServletFileUpload created in StreamReceiverHandler should be configured to use UTF-8 by calling setHeaderEncoding(\"UTF-8\").\r\n\r\n### Minimal reproducible example\r\n\r\n```\r\nimport java.io.ByteArrayOutputStream;\r\n\r\nimport com.vaadin.flow.component.orderedlayout.VerticalLayout;\r\nimport com.vaadin.flow.component.textfield.TextField;\r\nimport com.vaadin.flow.component.upload.Upload;\r\nimport com.vaadin.flow.router.Route;\r\n\r\n@Route(\"upload\")\r\npublic class UploadPage extends VerticalLayout {\r\n\r\n    public UploadPage() {\r\n        Upload upload = new Upload();\r\n        TextField filename = new TextField();\r\n        upload.setReceiver((name, type) -> {\r\n            filename.setValue(name);\r\n            return new ByteArrayOutputStream();\r\n        });\r\n        this.add(upload, filename);\r\n    }\r\n}\r\n```\r\n\r\n### Versions\r\n\r\n- Vaadin / Flow version: 23.4.1\r\n- Java version: 11\r\n- OS version:\r\n- Browser version (if applicable):\r\n- Application Server (if applicable):\r\n- IDE (if applicable):\r\n",
    "issue_word_count": 250,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/server/communication/StreamReceiverHandler.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/StreamReceiverHandlerTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/server/communication/StreamReceiverHandlerTest.java"
    ],
    "base_commit": "8f7483cf9625fc0a1cb63bf98aa937b8836fe61a",
    "head_commit": "9908a6af88edc02f74104296de3bb4b464d7e86c",
    "repo_url": "https://github.com/vaadin/flow/pull/20510",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20510",
    "dockerfile": "",
    "pr_merged_at": "2024-11-19T09:18:19.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/StreamReceiverHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/StreamReceiverHandler.java\nindex f9c3256714b..305baaa9913 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/StreamReceiverHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/StreamReceiverHandler.java\n@@ -630,11 +630,23 @@ protected Collection<Part> getParts(VaadinRequest request)\n \n     protected FileItemInputIterator getItemIterator(VaadinRequest request)\n             throws FileUploadException, IOException {\n+        JakartaServletFileUpload upload = createServletFileUpload(request);\n+        return upload.getItemIterator((HttpServletRequest) request);\n+    }\n+\n+    // protected for testing purposes only\n+    protected JakartaServletFileUpload createServletFileUpload(\n+            VaadinRequest request) {\n         JakartaServletFileUpload upload = new JakartaServletFileUpload();\n         upload.setSizeMax(requestSizeMax);\n         upload.setFileSizeMax(fileSizeMax);\n         upload.setFileCountMax(fileCountMax);\n-        return upload.getItemIterator((HttpServletRequest) request);\n+        if (request.getCharacterEncoding() == null) {\n+            // Request body's file upload headers are expected to be encoded in\n+            // UTF-8 if not explicitly set otherwise in the request.\n+            upload.setHeaderCharset(StandardCharsets.UTF_8);\n+        }\n+        return upload;\n     }\n \n     public void setRequestSizeMax(long requestSizeMax) {\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/StreamReceiverHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/StreamReceiverHandlerTest.java\nindex 5c172e07f7f..2eb61ad8b8d 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/StreamReceiverHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/StreamReceiverHandlerTest.java\n@@ -10,12 +10,14 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n \n+import org.apache.commons.fileupload2.jakarta.JakartaServletFileUpload;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n@@ -87,6 +89,7 @@ public class StreamReceiverHandlerTest {\n     private List<Part> parts;\n \n     private boolean isGetContentLengthLongCalled;\n+    private String requestCharacterEncoding;\n \n     @Before\n     public void setup() throws Exception {\n@@ -181,6 +184,11 @@ public long getContentLengthLong() {\n                 isGetContentLengthLongCalled = true;\n                 return 0;\n             }\n+\n+            @Override\n+            public String getCharacterEncoding() {\n+                return requestCharacterEncoding;\n+            }\n         };\n     }\n \n@@ -291,6 +299,27 @@ public void doHandleMultipartFileUpload_noPart_uploadFailed_responseStatusIs500_\n         Assert.assertTrue(isGetContentLengthLongCalled);\n     }\n \n+    @Test\n+    public void createServletFileUpload_useUTF8HeaderCharacterEncodingWhenRequestCharEncodingIsNotSet() {\n+        JakartaServletFileUpload servletFileUpload = handler\n+                .createServletFileUpload(request);\n+        Assert.assertNotNull(servletFileUpload);\n+        Assert.assertEquals(\n+                \"Header encoding should be UTF-8 when request character encoding is null\",\n+                StandardCharsets.UTF_8, servletFileUpload.getHeaderCharset());\n+    }\n+\n+    @Test\n+    public void createServletFileUpload_dontSetHeaderCharEncodingWhenRequestCharEncodingIsSet() {\n+        requestCharacterEncoding = \"ASCII\";\n+        JakartaServletFileUpload servletFileUpload = handler\n+                .createServletFileUpload(request);\n+        Assert.assertNotNull(servletFileUpload);\n+        Assert.assertNull(\n+                \"Header encoding should not be set by Flow when request character encoding is set\",\n+                servletFileUpload.getHeaderCharset());\n+    }\n+\n     @Test\n     public void doHandleMultipartFileUpload_hasParts_uploadFailed_responseStatusIs500()\n             throws IOException {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20509",
    "pr_id": 20509,
    "issue_id": 20417,
    "repo": "vaadin/flow",
    "problem_statement": "Corrupt filename in Upload component when server's file encoding is not UTF-8\n### Description of the bug\r\n\r\nWhen using the Upload component with a filename that has non-ASCII characters, the server receives a corrupt filename if it's file encoding is not UTF-8.\r\nThe filename is part of the upload request and seems to be UTF-8 encoded:\r\n![grafik](https://github.com/user-attachments/assets/48732508-5d58-4561-86ee-b5d6dd42e7c3)\r\n\r\nThe filename is then read via Apache Commons' ServletFileUpload, created by StreamReceiverHandler.getItemIterator(VaadinRequest). As there is no encoding set on creation, it falls back to the server's default.\r\n\r\nExample running the example below from Windows command line:\r\n![grafik](https://github.com/user-attachments/assets/dce3425e-7caf-4892-ac00-703a5096c84c)\r\n\r\n\r\n### Expected behavior\r\n\r\nIt seems to me that the client is always sending the filename UTF-8 encoded. If this is correct, the ServletFileUpload created in StreamReceiverHandler should be configured to use UTF-8 by calling setHeaderEncoding(\"UTF-8\").\r\n\r\n### Minimal reproducible example\r\n\r\n```\r\nimport java.io.ByteArrayOutputStream;\r\n\r\nimport com.vaadin.flow.component.orderedlayout.VerticalLayout;\r\nimport com.vaadin.flow.component.textfield.TextField;\r\nimport com.vaadin.flow.component.upload.Upload;\r\nimport com.vaadin.flow.router.Route;\r\n\r\n@Route(\"upload\")\r\npublic class UploadPage extends VerticalLayout {\r\n\r\n    public UploadPage() {\r\n        Upload upload = new Upload();\r\n        TextField filename = new TextField();\r\n        upload.setReceiver((name, type) -> {\r\n            filename.setValue(name);\r\n            return new ByteArrayOutputStream();\r\n        });\r\n        this.add(upload, filename);\r\n    }\r\n}\r\n```\r\n\r\n### Versions\r\n\r\n- Vaadin / Flow version: 23.4.1\r\n- Java version: 11\r\n- OS version:\r\n- Browser version (if applicable):\r\n- Application Server (if applicable):\r\n- IDE (if applicable):\r\n",
    "issue_word_count": 250,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/server/communication/StreamReceiverHandler.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/StreamReceiverHandlerTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/server/communication/StreamReceiverHandlerTest.java"
    ],
    "base_commit": "4b1930afdc5d04627307cd416653cfa579dccd7f",
    "head_commit": "5d85d0ef5cfbd94025d7ea4f144702922d22a8e8",
    "repo_url": "https://github.com/vaadin/flow/pull/20509",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20509",
    "dockerfile": "",
    "pr_merged_at": "2024-11-19T09:17:32.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/StreamReceiverHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/StreamReceiverHandler.java\nindex f9c3256714b..305baaa9913 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/StreamReceiverHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/StreamReceiverHandler.java\n@@ -630,11 +630,23 @@ protected Collection<Part> getParts(VaadinRequest request)\n \n     protected FileItemInputIterator getItemIterator(VaadinRequest request)\n             throws FileUploadException, IOException {\n+        JakartaServletFileUpload upload = createServletFileUpload(request);\n+        return upload.getItemIterator((HttpServletRequest) request);\n+    }\n+\n+    // protected for testing purposes only\n+    protected JakartaServletFileUpload createServletFileUpload(\n+            VaadinRequest request) {\n         JakartaServletFileUpload upload = new JakartaServletFileUpload();\n         upload.setSizeMax(requestSizeMax);\n         upload.setFileSizeMax(fileSizeMax);\n         upload.setFileCountMax(fileCountMax);\n-        return upload.getItemIterator((HttpServletRequest) request);\n+        if (request.getCharacterEncoding() == null) {\n+            // Request body's file upload headers are expected to be encoded in\n+            // UTF-8 if not explicitly set otherwise in the request.\n+            upload.setHeaderCharset(StandardCharsets.UTF_8);\n+        }\n+        return upload;\n     }\n \n     public void setRequestSizeMax(long requestSizeMax) {\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/StreamReceiverHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/StreamReceiverHandlerTest.java\nindex 5c172e07f7f..2eb61ad8b8d 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/StreamReceiverHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/StreamReceiverHandlerTest.java\n@@ -10,12 +10,14 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n \n+import org.apache.commons.fileupload2.jakarta.JakartaServletFileUpload;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n@@ -87,6 +89,7 @@ public class StreamReceiverHandlerTest {\n     private List<Part> parts;\n \n     private boolean isGetContentLengthLongCalled;\n+    private String requestCharacterEncoding;\n \n     @Before\n     public void setup() throws Exception {\n@@ -181,6 +184,11 @@ public long getContentLengthLong() {\n                 isGetContentLengthLongCalled = true;\n                 return 0;\n             }\n+\n+            @Override\n+            public String getCharacterEncoding() {\n+                return requestCharacterEncoding;\n+            }\n         };\n     }\n \n@@ -291,6 +299,27 @@ public void doHandleMultipartFileUpload_noPart_uploadFailed_responseStatusIs500_\n         Assert.assertTrue(isGetContentLengthLongCalled);\n     }\n \n+    @Test\n+    public void createServletFileUpload_useUTF8HeaderCharacterEncodingWhenRequestCharEncodingIsNotSet() {\n+        JakartaServletFileUpload servletFileUpload = handler\n+                .createServletFileUpload(request);\n+        Assert.assertNotNull(servletFileUpload);\n+        Assert.assertEquals(\n+                \"Header encoding should be UTF-8 when request character encoding is null\",\n+                StandardCharsets.UTF_8, servletFileUpload.getHeaderCharset());\n+    }\n+\n+    @Test\n+    public void createServletFileUpload_dontSetHeaderCharEncodingWhenRequestCharEncodingIsSet() {\n+        requestCharacterEncoding = \"ASCII\";\n+        JakartaServletFileUpload servletFileUpload = handler\n+                .createServletFileUpload(request);\n+        Assert.assertNotNull(servletFileUpload);\n+        Assert.assertNull(\n+                \"Header encoding should not be set by Flow when request character encoding is set\",\n+                servletFileUpload.getHeaderCharset());\n+    }\n+\n     @Test\n     public void doHandleMultipartFileUpload_hasParts_uploadFailed_responseStatusIs500()\n             throws IOException {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20503",
    "pr_id": 20503,
    "issue_id": 20417,
    "repo": "vaadin/flow",
    "problem_statement": "Corrupt filename in Upload component when server's file encoding is not UTF-8\n### Description of the bug\r\n\r\nWhen using the Upload component with a filename that has non-ASCII characters, the server receives a corrupt filename if it's file encoding is not UTF-8.\r\nThe filename is part of the upload request and seems to be UTF-8 encoded:\r\n![grafik](https://github.com/user-attachments/assets/48732508-5d58-4561-86ee-b5d6dd42e7c3)\r\n\r\nThe filename is then read via Apache Commons' ServletFileUpload, created by StreamReceiverHandler.getItemIterator(VaadinRequest). As there is no encoding set on creation, it falls back to the server's default.\r\n\r\nExample running the example below from Windows command line:\r\n![grafik](https://github.com/user-attachments/assets/dce3425e-7caf-4892-ac00-703a5096c84c)\r\n\r\n\r\n### Expected behavior\r\n\r\nIt seems to me that the client is always sending the filename UTF-8 encoded. If this is correct, the ServletFileUpload created in StreamReceiverHandler should be configured to use UTF-8 by calling setHeaderEncoding(\"UTF-8\").\r\n\r\n### Minimal reproducible example\r\n\r\n```\r\nimport java.io.ByteArrayOutputStream;\r\n\r\nimport com.vaadin.flow.component.orderedlayout.VerticalLayout;\r\nimport com.vaadin.flow.component.textfield.TextField;\r\nimport com.vaadin.flow.component.upload.Upload;\r\nimport com.vaadin.flow.router.Route;\r\n\r\n@Route(\"upload\")\r\npublic class UploadPage extends VerticalLayout {\r\n\r\n    public UploadPage() {\r\n        Upload upload = new Upload();\r\n        TextField filename = new TextField();\r\n        upload.setReceiver((name, type) -> {\r\n            filename.setValue(name);\r\n            return new ByteArrayOutputStream();\r\n        });\r\n        this.add(upload, filename);\r\n    }\r\n}\r\n```\r\n\r\n### Versions\r\n\r\n- Vaadin / Flow version: 23.4.1\r\n- Java version: 11\r\n- OS version:\r\n- Browser version (if applicable):\r\n- Application Server (if applicable):\r\n- IDE (if applicable):\r\n",
    "issue_word_count": 250,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/server/communication/StreamReceiverHandler.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/StreamReceiverHandlerTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/server/communication/StreamReceiverHandlerTest.java"
    ],
    "base_commit": "76d5e581dbbb3965aa0b728bffaefae75e877308",
    "head_commit": "10e3da9acd1edaed64f06badf52be9b5277a2f2e",
    "repo_url": "https://github.com/vaadin/flow/pull/20503",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20503",
    "dockerfile": "",
    "pr_merged_at": "2024-11-19T08:06:27.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/StreamReceiverHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/StreamReceiverHandler.java\nindex f9c3256714b..12e355ae2b2 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/StreamReceiverHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/StreamReceiverHandler.java\n@@ -38,6 +38,8 @@\n import org.apache.commons.fileupload2.core.FileUploadFileCountLimitException;\n import org.apache.commons.fileupload2.core.FileUploadSizeException;\n import org.apache.commons.fileupload2.jakarta.JakartaServletFileUpload;\n+import org.apache.commons.fileupload2.core.FileItemInputIterator;\n+import org.apache.commons.fileupload2.jakarta.JakartaServletFileUpload;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -630,11 +632,23 @@ protected Collection<Part> getParts(VaadinRequest request)\n \n     protected FileItemInputIterator getItemIterator(VaadinRequest request)\n             throws FileUploadException, IOException {\n+        JakartaServletFileUpload upload = createServletFileUpload(request);\n+        return upload.getItemIterator((HttpServletRequest) request);\n+    }\n+\n+    // protected for testing purposes only\n+    protected JakartaServletFileUpload createServletFileUpload(\n+            VaadinRequest request) {\n         JakartaServletFileUpload upload = new JakartaServletFileUpload();\n         upload.setSizeMax(requestSizeMax);\n         upload.setFileSizeMax(fileSizeMax);\n         upload.setFileCountMax(fileCountMax);\n-        return upload.getItemIterator((HttpServletRequest) request);\n+        if (request.getCharacterEncoding() == null) {\n+            // Request body's file upload headers are expected to be encoded in\n+            // UTF-8 if not explicitly set otherwise in the request.\n+            upload.setHeaderCharset(StandardCharsets.UTF_8);\n+        }\n+        return upload;\n     }\n \n     public void setRequestSizeMax(long requestSizeMax) {\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/StreamReceiverHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/StreamReceiverHandlerTest.java\nindex 5c172e07f7f..2eb61ad8b8d 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/StreamReceiverHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/StreamReceiverHandlerTest.java\n@@ -10,12 +10,14 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n \n+import org.apache.commons.fileupload2.jakarta.JakartaServletFileUpload;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n@@ -87,6 +89,7 @@ public class StreamReceiverHandlerTest {\n     private List<Part> parts;\n \n     private boolean isGetContentLengthLongCalled;\n+    private String requestCharacterEncoding;\n \n     @Before\n     public void setup() throws Exception {\n@@ -181,6 +184,11 @@ public long getContentLengthLong() {\n                 isGetContentLengthLongCalled = true;\n                 return 0;\n             }\n+\n+            @Override\n+            public String getCharacterEncoding() {\n+                return requestCharacterEncoding;\n+            }\n         };\n     }\n \n@@ -291,6 +299,27 @@ public void doHandleMultipartFileUpload_noPart_uploadFailed_responseStatusIs500_\n         Assert.assertTrue(isGetContentLengthLongCalled);\n     }\n \n+    @Test\n+    public void createServletFileUpload_useUTF8HeaderCharacterEncodingWhenRequestCharEncodingIsNotSet() {\n+        JakartaServletFileUpload servletFileUpload = handler\n+                .createServletFileUpload(request);\n+        Assert.assertNotNull(servletFileUpload);\n+        Assert.assertEquals(\n+                \"Header encoding should be UTF-8 when request character encoding is null\",\n+                StandardCharsets.UTF_8, servletFileUpload.getHeaderCharset());\n+    }\n+\n+    @Test\n+    public void createServletFileUpload_dontSetHeaderCharEncodingWhenRequestCharEncodingIsSet() {\n+        requestCharacterEncoding = \"ASCII\";\n+        JakartaServletFileUpload servletFileUpload = handler\n+                .createServletFileUpload(request);\n+        Assert.assertNotNull(servletFileUpload);\n+        Assert.assertNull(\n+                \"Header encoding should not be set by Flow when request character encoding is set\",\n+                servletFileUpload.getHeaderCharset());\n+    }\n+\n     @Test\n     public void doHandleMultipartFileUpload_hasParts_uploadFailed_responseStatusIs500()\n             throws IOException {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20480",
    "pr_id": 20480,
    "issue_id": 20417,
    "repo": "vaadin/flow",
    "problem_statement": "Corrupt filename in Upload component when server's file encoding is not UTF-8\n### Description of the bug\r\n\r\nWhen using the Upload component with a filename that has non-ASCII characters, the server receives a corrupt filename if it's file encoding is not UTF-8.\r\nThe filename is part of the upload request and seems to be UTF-8 encoded:\r\n![grafik](https://github.com/user-attachments/assets/48732508-5d58-4561-86ee-b5d6dd42e7c3)\r\n\r\nThe filename is then read via Apache Commons' ServletFileUpload, created by StreamReceiverHandler.getItemIterator(VaadinRequest). As there is no encoding set on creation, it falls back to the server's default.\r\n\r\nExample running the example below from Windows command line:\r\n![grafik](https://github.com/user-attachments/assets/dce3425e-7caf-4892-ac00-703a5096c84c)\r\n\r\n\r\n### Expected behavior\r\n\r\nIt seems to me that the client is always sending the filename UTF-8 encoded. If this is correct, the ServletFileUpload created in StreamReceiverHandler should be configured to use UTF-8 by calling setHeaderEncoding(\"UTF-8\").\r\n\r\n### Minimal reproducible example\r\n\r\n```\r\nimport java.io.ByteArrayOutputStream;\r\n\r\nimport com.vaadin.flow.component.orderedlayout.VerticalLayout;\r\nimport com.vaadin.flow.component.textfield.TextField;\r\nimport com.vaadin.flow.component.upload.Upload;\r\nimport com.vaadin.flow.router.Route;\r\n\r\n@Route(\"upload\")\r\npublic class UploadPage extends VerticalLayout {\r\n\r\n    public UploadPage() {\r\n        Upload upload = new Upload();\r\n        TextField filename = new TextField();\r\n        upload.setReceiver((name, type) -> {\r\n            filename.setValue(name);\r\n            return new ByteArrayOutputStream();\r\n        });\r\n        this.add(upload, filename);\r\n    }\r\n}\r\n```\r\n\r\n### Versions\r\n\r\n- Vaadin / Flow version: 23.4.1\r\n- Java version: 11\r\n- OS version:\r\n- Browser version (if applicable):\r\n- Application Server (if applicable):\r\n- IDE (if applicable):\r\n",
    "issue_word_count": 250,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "flow-server/src/main/java/com/vaadin/flow/server/communication/StreamReceiverHandler.java",
      "flow-server/src/test/java/com/vaadin/flow/server/communication/StreamReceiverHandlerTest.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/server/communication/StreamReceiverHandlerTest.java"
    ],
    "base_commit": "873b5b6d30e83acd25805a135e746ec1f44fcfdb",
    "head_commit": "e048e29230edef86aad0deeea1a6e80caa10d5a5",
    "repo_url": "https://github.com/vaadin/flow/pull/20480",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20480",
    "dockerfile": "",
    "pr_merged_at": "2024-11-18T12:41:04.000Z",
    "patch": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/StreamReceiverHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/StreamReceiverHandler.java\nindex be8c574d559..1f698394fed 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/StreamReceiverHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/StreamReceiverHandler.java\n@@ -632,11 +632,22 @@ protected Collection<Part> getParts(VaadinRequest request)\n \n     protected FileItemIterator getItemIterator(VaadinRequest request)\n             throws FileUploadException, IOException {\n+        ServletFileUpload upload = createServletFileUpload(request);\n+        return upload.getItemIterator((HttpServletRequest) request);\n+    }\n+\n+    // protected for testing purposes only\n+    protected ServletFileUpload createServletFileUpload(VaadinRequest request) {\n         ServletFileUpload upload = new ServletFileUpload();\n         upload.setSizeMax(requestSizeMax);\n         upload.setFileSizeMax(fileSizeMax);\n         upload.setFileCountMax(fileCountMax);\n-        return upload.getItemIterator((HttpServletRequest) request);\n+        if (request.getCharacterEncoding() == null) {\n+            // Request body's file upload headers are expected to be encoded in\n+            // UTF-8 if not explicitly set otherwise in the request.\n+            upload.setHeaderEncoding(StandardCharsets.UTF_8.name());\n+        }\n+        return upload;\n     }\n \n     public void setRequestSizeMax(long requestSizeMax) {\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/StreamReceiverHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/StreamReceiverHandlerTest.java\nindex 20569e41bd2..d60b21a0139 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/StreamReceiverHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/StreamReceiverHandlerTest.java\n@@ -24,6 +24,7 @@\n import java.util.List;\n import java.util.Optional;\n \n+import org.apache.commons.fileupload.servlet.ServletFileUpload;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n@@ -95,6 +96,7 @@ public class StreamReceiverHandlerTest {\n     private List<Part> parts;\n \n     private boolean isGetContentLengthLongCalled;\n+    private String requestCharacterEncoding;\n \n     @Before\n     public void setup() throws Exception {\n@@ -189,6 +191,11 @@ public long getContentLengthLong() {\n                 isGetContentLengthLongCalled = true;\n                 return 0;\n             }\n+\n+            @Override\n+            public String getCharacterEncoding() {\n+                return requestCharacterEncoding;\n+            }\n         };\n     }\n \n@@ -299,6 +306,27 @@ public void doHandleMultipartFileUpload_noPart_uploadFailed_responseStatusIs500_\n         Assert.assertTrue(isGetContentLengthLongCalled);\n     }\n \n+    @Test\n+    public void createServletFileUpload_useUTF8HeaderCharacterEncodingWhenRequestCharEncodingIsNotSet() {\n+        ServletFileUpload servletFileUpload = handler\n+                .createServletFileUpload(request);\n+        Assert.assertNotNull(servletFileUpload);\n+        Assert.assertEquals(\n+                \"Header encoding should be UTF-8 when request character encoding is null\",\n+                \"UTF-8\", servletFileUpload.getHeaderEncoding());\n+    }\n+\n+    @Test\n+    public void createServletFileUpload_dontSetHeaderCharEncodingWhenRequestCharEncodingIsSet() {\n+        requestCharacterEncoding = \"ASCII\";\n+        ServletFileUpload servletFileUpload = handler\n+                .createServletFileUpload(request);\n+        Assert.assertNotNull(servletFileUpload);\n+        Assert.assertNull(\n+                \"Header encoding should not be set by Flow when request character encoding is set\",\n+                servletFileUpload.getHeaderEncoding());\n+    }\n+\n     @Test\n     public void doHandleMultipartFileUpload_hasParts_uploadFailed_responseStatusIs500()\n             throws IOException {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20456",
    "pr_id": 20456,
    "issue_id": 12640,
    "repo": "vaadin/flow",
    "problem_statement": "Unexpected message id from the client (sync ids different)\n### Description of the bug\r\n\r\nI receive sometimes the same error message on my production system. But I do not have any idea when this happen:\r\n\r\n`2021-12-27 07:27:43,174  INFO | https-jsse-nio-18443-exec-10 | com.vaadin.flow.server.communication.ServerRpcHandler   | Ignoring old duplicate message from the client. Expected: 1748, got: 1747`\r\n\r\n```\r\n2021-12-27 07:28:01,354  WARN | https-jsse-nio-18443-exec-5 | de.app.ApplicationVaadinServiceInitListener         | Unexpected error\r\njava.lang.UnsupportedOperationException: Unexpected message id from the client. Expected sync id: 1751, got 1752. more details logged on DEBUG level.\r\n        at com.vaadin.flow.server.communication.ServerRpcHandler.handleRpc(ServerRpcHandler.java:310)\r\n        at com.vaadin.flow.server.communication.UidlRequestHandler.synchronizedHandleRequest(UidlRequestHandler.java:115)\r\n        at com.vaadin.flow.server.SynchronizedRequestHandler.handleRequest(SynchronizedRequestHandler.java:40)\r\n        at com.vaadin.flow.server.VaadinService.handleRequest(VaadinService.java:1565)\r\n        at com.vaadin.flow.server.VaadinServlet.service(VaadinServlet.java:302)\r\n        at com.vaadin.flow.spring.SpringServlet.service(SpringServlet.java:109)\r\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:750)\r\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)\r\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n        at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)\r\n        at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)\r\n        at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)\r\n        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)\r\n        at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)\r\n        at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)\r\n        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)\r\n        at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)\r\n        at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)\r\n        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)\r\n        at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)\r\n        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)\r\n        at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)\r\n        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)\r\n\r\n```\r\n\r\nIt seems it is the same bug as https://github.com/vaadin/flow/issues/9778\r\n\r\n\r\n### Minimal reproducible example\r\n\r\nUnfortunately I'm not possible to reproduce the issue. I only find the messages in the logfile.\r\n\r\n### Versions\r\n\r\n- Vaadin / Flow version: 21.0.9\r\n- Java version: 17.0.1\r\n- OS version: CentOS\r\n\r\n",
    "issue_word_count": 433,
    "test_files_count": 3,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "flow-client/src/main/java/com/vaadin/client/communication/MessageHandler.java",
      "flow-client/src/test-gwt/java/com/vaadin/client/GwtMessageHandlerTest.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/InternalErrorIT.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/RouterSessionExpirationIT.java"
    ],
    "pr_changed_test_files": [
      "flow-client/src/test-gwt/java/com/vaadin/client/GwtMessageHandlerTest.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/InternalErrorIT.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/RouterSessionExpirationIT.java"
    ],
    "base_commit": "085872328d3cb882ff8fe66690240add57a4adf9",
    "head_commit": "53dc5b72992865b8ebeddbdb4f37c3f7c4063829",
    "repo_url": "https://github.com/vaadin/flow/pull/20456",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20456",
    "dockerfile": "",
    "pr_merged_at": "2024-11-12T17:32:42.000Z",
    "patch": "diff --git a/flow-client/src/main/java/com/vaadin/client/communication/MessageHandler.java b/flow-client/src/main/java/com/vaadin/client/communication/MessageHandler.java\nindex d249caca59d..2dbccf659b6 100644\n--- a/flow-client/src/main/java/com/vaadin/client/communication/MessageHandler.java\n+++ b/flow-client/src/main/java/com/vaadin/client/communication/MessageHandler.java\n@@ -418,9 +418,14 @@ assert getServerId(valueMap) == -1\n                     if (nextResponseSessionExpiredHandler != null) {\n                         nextResponseSessionExpiredHandler.execute();\n                     } else if (uiState != UIState.TERMINATED) {\n-                        registry.getSystemErrorHandler()\n-                                .handleSessionExpiredError(null);\n                         registry.getUILifecycle().setState(UIState.TERMINATED);\n+                        // Delay the session expiration handling to prevent\n+                        // canceling potential ongoing page redirect/reload\n+                        Scheduler.get().scheduleFixedDelay(() -> {\n+                            registry.getSystemErrorHandler()\n+                                    .handleSessionExpiredError(null);\n+                            return false;\n+                        }, 250);\n                     }\n                 } else if (meta.containsKey(\"appError\")\n                         && uiState != UIState.TERMINATED) {\n",
    "test_patch": "diff --git a/flow-client/src/test-gwt/java/com/vaadin/client/GwtMessageHandlerTest.java b/flow-client/src/test-gwt/java/com/vaadin/client/GwtMessageHandlerTest.java\nindex 8d80e6a5f98..6a41bd83e29 100644\n--- a/flow-client/src/test-gwt/java/com/vaadin/client/GwtMessageHandlerTest.java\n+++ b/flow-client/src/test-gwt/java/com/vaadin/client/GwtMessageHandlerTest.java\n@@ -152,12 +152,13 @@ public void handleSessionExpiredError(String details) {\n \n         @Override\n         public void handleUnrecoverableError(String caption, String message,\n-                                             String details, String url, String querySelector) {\n+                String details, String url, String querySelector) {\n             unrecoverableErrorHandled = true;\n         }\n     }\n \n-    private static class TestApplicationConfiguration extends ApplicationConfiguration {\n+    private static class TestApplicationConfiguration\n+            extends ApplicationConfiguration {\n         @Override\n         public String getApplicationId() {\n             return \"test-application-id\";\n@@ -223,8 +224,7 @@ public void testMessageProcessing_moduleDependencyIsHandledBeforeApplyingChanges\n             assertEquals(ResourceLoader.class.getName(),\n                     eventsOrder.sources.get(0));\n             // the second one is applying changes to StatTree\n-            assertEquals(StateTree.class.getName(),\n-                    eventsOrder.sources.get(1));\n+            assertEquals(StateTree.class.getName(), eventsOrder.sources.get(1));\n         });\n     }\n \n@@ -301,11 +301,13 @@ public void testHandleJSON_uiTerminated_sessionExpiredMessageNotShown() {\n \n         doAssert(() -> {\n             // then: no session expire and unrecoverable error handling expected\n-            assertFalse(\"Session Expired Message handling is not expected \" +\n-                        \"when the page is being redirected\",\n+            assertFalse(\n+                    \"Session Expired Message handling is not expected \"\n+                            + \"when the page is being redirected\",\n                     getSystemErrorHandler().sessionExpiredMessageHandled);\n-            assertFalse(\"Unrecoverable Error Message handling was not \" +\n-                        \"expected when the page is being redirected\",\n+            assertFalse(\n+                    \"Unrecoverable Error Message handling was not \"\n+                            + \"expected when the page is being redirected\",\n                     getSystemErrorHandler().unrecoverableErrorHandled);\n             assertEquals(UILifecycle.UIState.TERMINATED,\n                     getUILifecycle().getState());\n@@ -333,11 +335,13 @@ public void testHandleJSON_uiTerminated_unrecoverableErrorMessageNotShown() {\n \n         doAssert(() -> {\n             // then: no session expire and unrecoverable error handling expected\n-            assertFalse(\"Session Expired Message handling is not expected \" +\n-                        \"when the page is being redirected\",\n+            assertFalse(\n+                    \"Session Expired Message handling is not expected \"\n+                            + \"when the page is being redirected\",\n                     getSystemErrorHandler().sessionExpiredMessageHandled);\n-            assertFalse(\"Unrecoverable Error Message handling was not \" +\n-                        \"expected when the page is being redirected\",\n+            assertFalse(\n+                    \"Unrecoverable Error Message handling was not \"\n+                            + \"expected when the page is being redirected\",\n                     getSystemErrorHandler().unrecoverableErrorHandled);\n             assertEquals(UILifecycle.UIState.TERMINATED,\n                     getUILifecycle().getState());\n@@ -369,7 +373,7 @@ public void testHandleJSON_sessionExpiredAndUIRunning_sessionExpiredMessageShown\n                     getSystemErrorHandler().unrecoverableErrorHandled);\n             assertEquals(UILifecycle.UIState.TERMINATED,\n                     getUILifecycle().getState());\n-        });\n+        }, 300);\n     }\n \n     public void testHandleJSON_unrecoverableErrorAndUIRunning_unrecoverableErrorMessageShown() {\n@@ -416,8 +420,7 @@ private void doAssert(Runnable assertions) {\n         doAssert(assertions, 100);\n     }\n \n-    private void doAssert(Runnable assertions,\n-                          int assertDelayInMillis) {\n+    private void doAssert(Runnable assertions, int assertDelayInMillis) {\n         delayTestFinish(500);\n         new Timer() {\n             @Override\n\ndiff --git a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/InternalErrorIT.java b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/InternalErrorIT.java\nindex 27179ec0efa..38a7648037a 100644\n--- a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/InternalErrorIT.java\n+++ b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/InternalErrorIT.java\n@@ -82,6 +82,8 @@ public void enableSessionExpiredNotification_sessionExpired_notificationShown()\n         // Just click on any button to make a request after killing the session\n         clickButton(CLOSE_SESSION);\n \n+        waitUntil(d -> isSessionExpiredNotificationPresent());\n+\n         Assert.assertTrue(\"After enabling the 'Session Expired' notification, \"\n                 + \"the page should not be refreshed \"\n                 + \"after killing the session\", isMessageUpdated());\n\ndiff --git a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/RouterSessionExpirationIT.java b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/RouterSessionExpirationIT.java\nindex b7ff44cba9a..4ef2526c15c 100644\n--- a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/RouterSessionExpirationIT.java\n+++ b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/RouterSessionExpirationIT.java\n@@ -22,21 +22,23 @@ protected String getTestPath() {\n     }\n \n     @Test\n-    public void navigationAfterSessionExpired() {\n+    public void should_HaveANewSessionId_when_NavigationAfterSessionExpired() {\n         openUrl(\"/new-router-session/NormalView\");\n \n         navigateToAnotherView();\n         String sessionId = getSessionId();\n         navigateToFirstView();\n         Assert.assertEquals(sessionId, getSessionId());\n+\n         navigateToSesssionExpireView();\n         // expired session causes page reload, after the page reload there will\n         // be a new session\n-        Assert.assertNotEquals(sessionId, getSessionId());\n-        sessionId = getSessionId();\n-        navigateToFirstView();\n+        waitUntil(d -> !sessionId.equals(getSessionId()));\n+\n+        String newSessionId = getSessionId();\n+        navigateToAnotherView();\n         // session is preserved\n-        Assert.assertEquals(sessionId, getSessionId());\n+        Assert.assertEquals(newSessionId, getSessionId());\n     }\n \n     @Test\n@@ -66,7 +68,7 @@ private void navigateToAnotherView() {\n     }\n \n     private void navigateToSesssionExpireView() {\n-        navigateTo(\"ViewWhichInvalidatesSession\");\n+        findElement(By.linkText(\"ViewWhichInvalidatesSession\")).click();\n     }\n \n     private void navigateToInternalErrorView() {\n@@ -76,8 +78,12 @@ private void navigateToInternalErrorView() {\n \n     private void navigateTo(String linkText) {\n         findElement(By.linkText(linkText)).click();\n+        assertTextAvailableInView(linkText);\n+\n+    }\n+\n+    private void assertTextAvailableInView(String linkText) {\n         Assert.assertNotNull(\n                 findElement(By.xpath(\"//strong[text()='\" + linkText + \"']\")));\n-\n     }\n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20455",
    "pr_id": 20455,
    "issue_id": 12640,
    "repo": "vaadin/flow",
    "problem_statement": "Unexpected message id from the client (sync ids different)\n### Description of the bug\r\n\r\nI receive sometimes the same error message on my production system. But I do not have any idea when this happen:\r\n\r\n`2021-12-27 07:27:43,174  INFO | https-jsse-nio-18443-exec-10 | com.vaadin.flow.server.communication.ServerRpcHandler   | Ignoring old duplicate message from the client. Expected: 1748, got: 1747`\r\n\r\n```\r\n2021-12-27 07:28:01,354  WARN | https-jsse-nio-18443-exec-5 | de.app.ApplicationVaadinServiceInitListener         | Unexpected error\r\njava.lang.UnsupportedOperationException: Unexpected message id from the client. Expected sync id: 1751, got 1752. more details logged on DEBUG level.\r\n        at com.vaadin.flow.server.communication.ServerRpcHandler.handleRpc(ServerRpcHandler.java:310)\r\n        at com.vaadin.flow.server.communication.UidlRequestHandler.synchronizedHandleRequest(UidlRequestHandler.java:115)\r\n        at com.vaadin.flow.server.SynchronizedRequestHandler.handleRequest(SynchronizedRequestHandler.java:40)\r\n        at com.vaadin.flow.server.VaadinService.handleRequest(VaadinService.java:1565)\r\n        at com.vaadin.flow.server.VaadinServlet.service(VaadinServlet.java:302)\r\n        at com.vaadin.flow.spring.SpringServlet.service(SpringServlet.java:109)\r\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:750)\r\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)\r\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n        at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\r\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\r\n        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)\r\n        at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)\r\n        at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)\r\n        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)\r\n        at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)\r\n        at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)\r\n        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)\r\n        at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)\r\n        at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)\r\n        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)\r\n        at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)\r\n        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)\r\n        at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)\r\n        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)\r\n\r\n```\r\n\r\nIt seems it is the same bug as https://github.com/vaadin/flow/issues/9778\r\n\r\n\r\n### Minimal reproducible example\r\n\r\nUnfortunately I'm not possible to reproduce the issue. I only find the messages in the logfile.\r\n\r\n### Versions\r\n\r\n- Vaadin / Flow version: 21.0.9\r\n- Java version: 17.0.1\r\n- OS version: CentOS\r\n\r\n",
    "issue_word_count": 433,
    "test_files_count": 4,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "flow-client/src/main/java/com/vaadin/client/communication/MessageHandler.java",
      "flow-client/src/test-gwt/java/com/vaadin/client/GwtMessageHandlerTest.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync/src/test/java/com/vaadin/viteapp/BasicComponentIT.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/InternalErrorIT.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/RouterSessionExpirationIT.java"
    ],
    "pr_changed_test_files": [
      "flow-client/src/test-gwt/java/com/vaadin/client/GwtMessageHandlerTest.java",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync/src/test/java/com/vaadin/viteapp/BasicComponentIT.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/InternalErrorIT.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/RouterSessionExpirationIT.java"
    ],
    "base_commit": "584676efd9e86dd9737f4540031fca2111508df3",
    "head_commit": "a1e37fddba0621669c76883f916b7358ec01f772",
    "repo_url": "https://github.com/vaadin/flow/pull/20455",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20455",
    "dockerfile": "",
    "pr_merged_at": "2024-11-12T17:19:07.000Z",
    "patch": "diff --git a/flow-client/src/main/java/com/vaadin/client/communication/MessageHandler.java b/flow-client/src/main/java/com/vaadin/client/communication/MessageHandler.java\nindex dd1a3228f0d..76c6e1197f2 100644\n--- a/flow-client/src/main/java/com/vaadin/client/communication/MessageHandler.java\n+++ b/flow-client/src/main/java/com/vaadin/client/communication/MessageHandler.java\n@@ -431,9 +431,14 @@ assert getServerId(valueMap) == -1\n                     if (nextResponseSessionExpiredHandler != null) {\n                         nextResponseSessionExpiredHandler.execute();\n                     } else if (uiState != UIState.TERMINATED) {\n-                        registry.getSystemErrorHandler()\n-                                .handleSessionExpiredError(null);\n                         registry.getUILifecycle().setState(UIState.TERMINATED);\n+                        // Delay the session expiration handling to prevent\n+                        // canceling potential ongoing page redirect/reload\n+                        Scheduler.get().scheduleFixedDelay(() -> {\n+                            registry.getSystemErrorHandler()\n+                                    .handleSessionExpiredError(null);\n+                            return false;\n+                        }, 250);\n                     }\n                 } else if (meta.containsKey(\"appError\")\n                         && uiState != UIState.TERMINATED) {\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java\nindex 0961e455bae..107222bbbcd 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java\n@@ -287,6 +287,14 @@ public void handleRpc(UI ui, Reader reader, VaadinRequest request)\n                 getLogger().info(\n                         \"Ignoring old duplicate message from the client. Expected: \"\n                                 + expectedId + \", got: \" + requestId);\n+            } else if (rpcRequest.isUnloadBeaconRequest()) {\n+                getLogger().debug(\n+                        \"Ignoring unexpected message id from the client on UNLOAD request. \"\n+                                + \"This could happen for example during login process, if concurrent requests \"\n+                                + \"are sent to the server and one of those changes the session identifier, \"\n+                                + \"causing an UIDL request to be rejected because of session expiration. \"\n+                                + \"Expected sync id: {}, got {}.\",\n+                        expectedId, requestId);\n             } else {\n                 /*\n                  * If the reason for ending up here is intermittent, then we\n",
    "test_patch": "diff --git a/flow-client/src/test-gwt/java/com/vaadin/client/GwtMessageHandlerTest.java b/flow-client/src/test-gwt/java/com/vaadin/client/GwtMessageHandlerTest.java\nindex cbcd923d9ec..2582be2f06f 100644\n--- a/flow-client/src/test-gwt/java/com/vaadin/client/GwtMessageHandlerTest.java\n+++ b/flow-client/src/test-gwt/java/com/vaadin/client/GwtMessageHandlerTest.java\n@@ -152,12 +152,13 @@ public void handleSessionExpiredError(String details) {\n \n         @Override\n         public void handleUnrecoverableError(String caption, String message,\n-                                             String details, String url, String querySelector) {\n+                String details, String url, String querySelector) {\n             unrecoverableErrorHandled = true;\n         }\n     }\n \n-    private static class TestApplicationConfiguration extends ApplicationConfiguration {\n+    private static class TestApplicationConfiguration\n+            extends ApplicationConfiguration {\n         @Override\n         public String getApplicationId() {\n             return \"test-application-id\";\n@@ -223,8 +224,7 @@ public void testMessageProcessing_moduleDependencyIsHandledBeforeApplyingChanges\n             assertEquals(ResourceLoader.class.getName(),\n                     eventsOrder.sources.get(0));\n             // the second one is applying changes to StatTree\n-            assertEquals(StateTree.class.getName(),\n-                    eventsOrder.sources.get(1));\n+            assertEquals(StateTree.class.getName(), eventsOrder.sources.get(1));\n         });\n     }\n \n@@ -301,11 +301,13 @@ public void testHandleJSON_uiTerminated_sessionExpiredMessageNotShown() {\n \n         doAssert(() -> {\n             // then: no session expire and unrecoverable error handling expected\n-            assertFalse(\"Session Expired Message handling is not expected \" +\n-                        \"when the page is being redirected\",\n+            assertFalse(\n+                    \"Session Expired Message handling is not expected \"\n+                            + \"when the page is being redirected\",\n                     getSystemErrorHandler().sessionExpiredMessageHandled);\n-            assertFalse(\"Unrecoverable Error Message handling was not \" +\n-                        \"expected when the page is being redirected\",\n+            assertFalse(\n+                    \"Unrecoverable Error Message handling was not \"\n+                            + \"expected when the page is being redirected\",\n                     getSystemErrorHandler().unrecoverableErrorHandled);\n             assertEquals(UILifecycle.UIState.TERMINATED,\n                     getUILifecycle().getState());\n@@ -333,11 +335,13 @@ public void testHandleJSON_uiTerminated_unrecoverableErrorMessageNotShown() {\n \n         doAssert(() -> {\n             // then: no session expire and unrecoverable error handling expected\n-            assertFalse(\"Session Expired Message handling is not expected \" +\n-                        \"when the page is being redirected\",\n+            assertFalse(\n+                    \"Session Expired Message handling is not expected \"\n+                            + \"when the page is being redirected\",\n                     getSystemErrorHandler().sessionExpiredMessageHandled);\n-            assertFalse(\"Unrecoverable Error Message handling was not \" +\n-                        \"expected when the page is being redirected\",\n+            assertFalse(\n+                    \"Unrecoverable Error Message handling was not \"\n+                            + \"expected when the page is being redirected\",\n                     getSystemErrorHandler().unrecoverableErrorHandled);\n             assertEquals(UILifecycle.UIState.TERMINATED,\n                     getUILifecycle().getState());\n@@ -369,7 +373,7 @@ public void testHandleJSON_sessionExpiredAndUIRunning_sessionExpiredMessageShown\n                     getSystemErrorHandler().unrecoverableErrorHandled);\n             assertEquals(UILifecycle.UIState.TERMINATED,\n                     getUILifecycle().getState());\n-        });\n+        }, 300);\n     }\n \n     public void testHandleJSON_unrecoverableErrorAndUIRunning_unrecoverableErrorMessageShown() {\n@@ -416,8 +420,7 @@ private void doAssert(Runnable assertions) {\n         doAssert(assertions, 100);\n     }\n \n-    private void doAssert(Runnable assertions,\n-                          int assertDelayInMillis) {\n+    private void doAssert(Runnable assertions, int assertDelayInMillis) {\n         delayTestFinish(500);\n         new Timer() {\n             @Override\n\ndiff --git a/flow-tests/test-frontend/vite-embedded-webcomponent-resync/src/test/java/com/vaadin/viteapp/BasicComponentIT.java b/flow-tests/test-frontend/vite-embedded-webcomponent-resync/src/test/java/com/vaadin/viteapp/BasicComponentIT.java\nindex f3eb2e382ff..fb1ecbad8d1 100644\n--- a/flow-tests/test-frontend/vite-embedded-webcomponent-resync/src/test/java/com/vaadin/viteapp/BasicComponentIT.java\n+++ b/flow-tests/test-frontend/vite-embedded-webcomponent-resync/src/test/java/com/vaadin/viteapp/BasicComponentIT.java\n@@ -21,10 +21,13 @@\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n+import org.openqa.selenium.By;\n import org.openqa.selenium.Keys;\n import org.openqa.selenium.StaleElementReferenceException;\n+import org.openqa.selenium.support.ui.ExpectedConditions;\n \n import com.vaadin.flow.testutil.ChromeDeviceTest;\n+import com.vaadin.testbench.TestBenchElement;\n \n public class BasicComponentIT extends ChromeDeviceTest {\n \n@@ -50,18 +53,20 @@ public void session_resynced_webcomponent_is_active() throws Exception {\n         Assert.assertEquals(\"Authentication failure\",\n                 getAuthenticationResult());\n \n+        TestBenchElement input = $(\"login-form\").first().$(\"input\").first();\n+\n         // simulate expired session by invalidating current session\n         session.invalidate();\n \n         // init request to resynchronize expired session and recreate components\n         clickButton();\n \n-        try {\n-            // it seems WebDriver needs also sync to new session\n-            setUsername(\"\");\n-        } catch (StaleElementReferenceException ex) {\n-            // NOP\n-        }\n+        // Wait for web component to be detached, session expiration message\n+        // should be delivered by PUSH long polling connection\n+        waitUntil(ExpectedConditions.stalenessOf(input));\n+\n+        waitForElementPresent(By.tagName(\"login-form\"));\n+        waitUntil(d -> \"\".equals(getAuthenticationResult()));\n \n         // check if web component works again\n         setUsername(\"admin\");\n\ndiff --git a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/InternalErrorIT.java b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/InternalErrorIT.java\nindex dd046b0a09d..6c68a969bd4 100644\n--- a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/InternalErrorIT.java\n+++ b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/InternalErrorIT.java\n@@ -83,6 +83,8 @@ public void enableSessionExpiredNotification_sessionExpired_notificationShown()\n         // Just click on any button to make a request after killing the session\n         clickButton(CLOSE_SESSION);\n \n+        waitUntil(d -> isSessionExpiredNotificationPresent());\n+\n         Assert.assertTrue(\"After enabling the 'Session Expired' notification, \"\n                 + \"the page should not be refreshed \"\n                 + \"after killing the session\", isMessageUpdated());\n\ndiff --git a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/RouterSessionExpirationIT.java b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/RouterSessionExpirationIT.java\nindex b1b8ee3184c..85407aacd21 100644\n--- a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/RouterSessionExpirationIT.java\n+++ b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/RouterSessionExpirationIT.java\n@@ -34,11 +34,13 @@ public void should_HaveANewSessionId_when_NavigationAfterSessionExpired() {\n         navigateToSesssionExpireView();\n         // expired session causes page reload, after the page reload there will\n         // be a new session\n-        Assert.assertNotEquals(sessionId, getSessionId());\n-        sessionId = getSessionId();\n+        // Assert.assertNotEquals(sessionId, getSessionId());\n+        waitUntil(d -> !sessionId.equals(getSessionId()));\n+\n+        String newSessionId = getSessionId();\n         navigateToAnotherView();\n         // session is preserved\n-        Assert.assertEquals(sessionId, getSessionId());\n+        Assert.assertEquals(newSessionId, getSessionId());\n     }\n \n     @Test\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20446",
    "pr_id": 20446,
    "issue_id": 20404,
    "repo": "vaadin/flow",
    "problem_statement": "Javascript error: Invalid blocker state transition\n### Description of the bug\r\n\r\nWhen I'm navigating in my Vaadin application I have some javascript errors.\r\n> Uncaught (in promise) Error: Invalid blocker state transition: unblocked -> proceeding\r\n\r\n![image](https://github.com/user-attachments/assets/5287c455-8458-4969-827d-f433f8c8c811)\r\n\r\n\r\n![image](https://github.com/user-attachments/assets/88be118e-ce2a-4451-8cfa-ebc90934ee4e)\r\n\r\n\r\n### Expected behavior\r\n\r\nA javascript error should not appear in a normal case of usage.\r\n\r\n### Minimal reproducible example\r\n\r\nCreate a Vaadin application with two views in a menu, clicks multiple times on the menu.\r\n\r\nI think the error appears when you click on the menu when the application is already navigating so if the view is really fast to load you need to click fast.\r\n\r\n### Versions\r\n\r\n- Vaadin / Flow version: 24.5.2\r\n",
    "issue_word_count": 128,
    "test_files_count": 4,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "flow-server/src/main/resources/com/vaadin/flow/server/frontend/Flow.tsx",
      "flow-tests/test-react-router/pom-production.xml",
      "flow-tests/test-react-router/pom.xml",
      "flow-tests/test-react-router/src/main/frontend/NavigateView.tsx",
      "flow-tests/test-react-router/src/main/java/com/vaadin/flow/ReactNavigateView.java"
    ],
    "pr_changed_test_files": [
      "flow-tests/test-react-router/pom-production.xml",
      "flow-tests/test-react-router/pom.xml",
      "flow-tests/test-react-router/src/main/frontend/NavigateView.tsx",
      "flow-tests/test-react-router/src/main/java/com/vaadin/flow/ReactNavigateView.java"
    ],
    "base_commit": "d418c0ea6919c5f4ff56a14489fbdcb6e7b311c3",
    "head_commit": "e60dba1d32b53d9d74df1fe5fd5d9d72474a10eb",
    "repo_url": "https://github.com/vaadin/flow/pull/20446",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20446",
    "dockerfile": "",
    "pr_merged_at": "2024-11-25T11:06:01.000Z",
    "patch": "diff --git a/flow-server/src/main/resources/com/vaadin/flow/server/frontend/Flow.tsx b/flow-server/src/main/resources/com/vaadin/flow/server/frontend/Flow.tsx\nindex e3e571470c3..687a1598886 100644\n--- a/flow-server/src/main/resources/com/vaadin/flow/server/frontend/Flow.tsx\n+++ b/flow-server/src/main/resources/com/vaadin/flow/server/frontend/Flow.tsx\n@@ -28,7 +28,7 @@ import {\n     useBlocker,\n     useLocation,\n     useNavigate,\n-    type NavigateOptions,\n+    type NavigateOptions, useHref,\n } from \"react-router-dom\";\n import type { AgnosticRouteObject } from '@remix-run/router';\n import { createPortal } from \"react-dom\";\n@@ -273,10 +273,12 @@ function Flow() {\n     });\n     const location = useLocation();\n     const navigated = useRef<boolean>(false);\n+    const blockerHandled = useRef<boolean>(false);\n     const fromAnchor = useRef<boolean>(false);\n     const containerRef = useRef<RouterContainer | undefined>(undefined);\n     const roundTrip = useRef<Promise<void> | undefined>(undefined);\n     const queuedNavigate = useQueuedNavigate(roundTrip, navigated);\n+    const basename = useHref('/');\n \n     // portalsReducer function is used as state outside the Flow component.\n     const [portals, dispatchPortalAction] = useReducer(portalsReducer, []);\n@@ -361,8 +363,18 @@ function Flow() {\n \n     useEffect(() => {\n         if (blocker.state === 'blocked') {\n+            if(blockerHandled.current) {\n+                // Blocker is handled and the new navigation\n+                // gets queued to be executed after the current handling ends.\n+                const {pathname, state} = blocker.location;\n+                queuedNavigate(pathname.substring(basename.length), true, { state: state, replace: true });\n+                return;\n+            }\n+            blockerHandled.current = true;\n             let blockingPromise: any;\n             roundTrip.current = new Promise<void>((resolve,reject) => blockingPromise = {resolve:resolve,reject:reject});\n+            // Release blocker handling after promise is fulfilled\n+            roundTrip.current.then(() => blockerHandled.current = false, () => blockerHandled.current = false);\n \n             // Proceed to the blocked location, unless the navigation originates from a click on a link.\n             // In that case continue with function execution and perform a server round-trip\n",
    "test_patch": "diff --git a/flow-tests/test-react-router/pom-production.xml b/flow-tests/test-react-router/pom-production.xml\nindex f0969878cd1..a9bc48f6154 100644\n--- a/flow-tests/test-react-router/pom-production.xml\n+++ b/flow-tests/test-react-router/pom-production.xml\n@@ -34,6 +34,11 @@\n             <version>${project.version}</version>\n         </dependency>\n \n+        <dependency>\n+            <groupId>com.vaadin</groupId>\n+            <artifactId>flow-react</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n     </dependencies>\n \n     <build>\n\ndiff --git a/flow-tests/test-react-router/pom.xml b/flow-tests/test-react-router/pom.xml\nindex 38ac1b8764e..4c1096eac73 100644\n--- a/flow-tests/test-react-router/pom.xml\n+++ b/flow-tests/test-react-router/pom.xml\n@@ -38,6 +38,12 @@\n             <version>${project.version}</version>\n         </dependency>\n \n+        <dependency>\n+            <groupId>com.vaadin</groupId>\n+            <artifactId>flow-react</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+\n     </dependencies>\n \n     <build>\n\ndiff --git a/flow-tests/test-react-router/src/main/frontend/NavigateView.tsx b/flow-tests/test-react-router/src/main/frontend/NavigateView.tsx\nnew file mode 100644\nindex 00000000000..5fdef49d702\n--- /dev/null\n+++ b/flow-tests/test-react-router/src/main/frontend/NavigateView.tsx\n@@ -0,0 +1,22 @@\n+import {useNavigate} from \"react-router-dom\";\n+import {\n+    ReactAdapterElement,\n+    RenderHooks\n+} from \"Frontend/generated/flow/ReactAdapter\";\n+\n+ class NavigateView extends ReactAdapterElement {\n+     protected render(hooks: RenderHooks): React.ReactElement | null {\n+         const navigate = useNavigate();\n+\n+         return (\n+             <>\n+                 <p id=\"react\">This is a simple view for a React route</p>\n+                 <button id=\"react-navigate\" onClick={() => navigate(\"com.vaadin.flow.RouterView\"!)}>\n+                     Navigate button\n+                 </button>\n+             </>\n+         );\n+     }\n+ }\n+\n+customElements.define('navigate-view', NavigateView);\n\\ No newline at end of file\n\ndiff --git a/flow-tests/test-react-router/src/main/java/com/vaadin/flow/ReactNavigateView.java b/flow-tests/test-react-router/src/main/java/com/vaadin/flow/ReactNavigateView.java\nnew file mode 100644\nindex 00000000000..41cfa2bf0f7\n--- /dev/null\n+++ b/flow-tests/test-react-router/src/main/java/com/vaadin/flow/ReactNavigateView.java\n@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2000-2024 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow;\n+\n+import com.vaadin.flow.component.Tag;\n+import com.vaadin.flow.component.dependency.JsModule;\n+import com.vaadin.flow.component.react.ReactAdapterComponent;\n+import com.vaadin.flow.router.Route;\n+\n+/**\n+ * Test view for vaadin/flow#20404 Set network to slow 4G and quickly click on\n+ * button. No console exceptions should be shown.\n+ */\n+@Route(\"com.vaadin.flow.ReactNavigateView\")\n+@Tag(\"navigate-view\")\n+@JsModule(\"NavigateView.tsx\")\n+public class ReactNavigateView extends ReactAdapterComponent {\n+\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20431",
    "pr_id": 20431,
    "issue_id": 20365,
    "repo": "vaadin/flow",
    "problem_statement": "Synchronized property unexpectedly reverts to last synchronized state\n### Description of the bug\r\n\r\nFlow reverts the property’s value to the last synchronized state if the property changes again while the previous update is scheduled or is still being processed on the server. This behavior has blocked progress on [DatePicker fallback parser feature](https://github.com/vaadin/flow-components/pull/6743).\r\n\r\nhttps://github.com/user-attachments/assets/7ab2dd8b-6a47-48b5-8fee-8bbd5d0aa859\r\n\r\n### Expected behavior\r\n\r\nI'd expect Flow to keep the new value and wait for the next synchronization event to send it to the server.\r\n\r\n### Minimal reproducible example\r\n\r\n```ts\r\n// frontend/my-field/my-field.ts\r\n\r\nimport { html, LitElement } from 'lit';\r\nimport { customElement, query } from 'lit/decorators.js';\r\n\r\n@customElement(\"my-field\")\r\nclass MyField extends LitElement {\r\n  @query('input')\r\n  inputElement!: HTMLInputElement;\r\n\r\n  get inputElementValue() {\r\n    return this.inputElement.value;\r\n  }\r\n\r\n  set inputElementValue(value) {\r\n    console.warn('set inputElementValue', value);\r\n    this.inputElement.value = value;\r\n  }\r\n\r\n  onChange() {\r\n    this.dispatchEvent(new CustomEvent('change', { bubbles: true, composed: true }));\r\n    this.inputElementValue = 'foobar'; // <------ Change the property right after the synchronization event\r\n  }\r\n\r\n  render() {\r\n    return html`<input @change=\"${this.onChange}\" />`\r\n  }\r\n}\r\n```\r\n\r\n```java\r\n@Tag(\"my-field\")\r\n@JsModule(\"my-field/my-field.ts\")\r\npublic class MyField extends Component {\r\n    @Synchronize(property = \"inputElementValue\", value = { \"change\" })\r\n    public String getInputElementValue() {\r\n        return getElement().getProperty(\"inputElementValue\", \"\");\r\n    }\r\n}\r\n```\r\n\r\n```java\r\n@Route(\"my-field\")\r\npublic class MyFieldView extends Div {\r\n    public MyFieldView() {\r\n        MyField myField = new MyField();\r\n        add(myField);\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Versions\r\n\r\n- Vaadin / Flow version: 24.5 and possibly earlier\r\n- Java version: 17\r\n- OS version: Mac OS\r\n",
    "issue_word_count": 234,
    "test_files_count": 2,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "flow-client/src/main/java/com/vaadin/client/flow/binding/SimpleElementBindingStrategy.java",
      "flow-client/src/main/java/com/vaadin/client/flow/nodefeature/MapProperty.java",
      "flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/ClientSideValueChangeView.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/ClientSideValueChangeIT.java"
    ],
    "pr_changed_test_files": [
      "flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/ClientSideValueChangeView.java",
      "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/ClientSideValueChangeIT.java"
    ],
    "base_commit": "9690d076d7a35cc4e2124f535acec4c24812c387",
    "head_commit": "61db99ba26cc9cd8064cf7ba73e8bd17ac568c97",
    "repo_url": "https://github.com/vaadin/flow/pull/20431",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20431",
    "dockerfile": "",
    "pr_merged_at": "2024-11-11T15:27:42.000Z",
    "patch": "diff --git a/flow-client/src/main/java/com/vaadin/client/flow/binding/SimpleElementBindingStrategy.java b/flow-client/src/main/java/com/vaadin/client/flow/binding/SimpleElementBindingStrategy.java\nindex 31c5a8e925c..bf5b876ff22 100644\n--- a/flow-client/src/main/java/com/vaadin/client/flow/binding/SimpleElementBindingStrategy.java\n+++ b/flow-client/src/main/java/com/vaadin/client/flow/binding/SimpleElementBindingStrategy.java\n@@ -15,7 +15,7 @@\n  */\n package com.vaadin.client.flow.binding;\n \n-import java.util.function.BiConsumer;\n+import java.util.Optional;\n import java.util.function.Consumer;\n import java.util.function.Supplier;\n \n@@ -737,11 +737,20 @@ private void updateProperty(MapProperty mapProperty, Element element) {\n         if (mapProperty.hasValue()) {\n             Object treeValue = mapProperty.getValue();\n             Object domValue = WidgetUtil.getJsProperty(element, name);\n+            Optional<Object> previousDomValue = mapProperty\n+                    .getPreviousDomValue();\n+\n+            // User might have modified DOM value during server round-trip.\n+            // That is why we only want to update to the tree value if the tree\n+            // value is different from the pre-server-round-trip DOM value.\n+            boolean updateToTreeValue = previousDomValue\n+                    .map(o -> !WidgetUtil.equals(treeValue, o)).orElse(true);\n+\n             // We compare with the current property to avoid setting properties\n             // which are updated on the client side, e.g. when synchronizing\n             // properties to the server (won't work for readonly properties).\n-            if (WidgetUtil.isUndefined(domValue)\n-                    || !WidgetUtil.equals(domValue, treeValue)) {\n+            if (updateToTreeValue && (WidgetUtil.isUndefined(domValue)\n+                    || !WidgetUtil.equals(domValue, treeValue))) {\n                 Reactive.runWithComputation(null,\n                         () -> WidgetUtil.setJsProperty(element, name,\n                                 PolymerUtils.createModelTree(treeValue)));\n@@ -753,6 +762,7 @@ private void updateProperty(MapProperty mapProperty, Element element) {\n             // the value\n             WidgetUtil.setJsProperty(element, name, null);\n         }\n+        mapProperty.clearPreviousDomValue();\n     }\n \n     private void updateStyleProperty(MapProperty mapProperty, Element element) {\n@@ -1317,6 +1327,12 @@ private void handleDomEvent(Event event, BindingContext context) {\n                 eventData.put(expressionString, expressionValue);\n             }\n         }\n+        synchronizeProperties.forEach(name -> {\n+            NodeMap map = node.getMap(NodeFeatures.ELEMENT_PROPERTIES);\n+            MapProperty mapProperty = map.getProperty(name);\n+            Object domValue = WidgetUtil.getJsProperty(element, name);\n+            mapProperty.setPreviousDomValue(domValue);\n+        });\n \n         JsMap<String, Runnable> commands = JsCollections.map();\n         synchronizeProperties.forEach(name -> commands.set(name,\n\ndiff --git a/flow-client/src/main/java/com/vaadin/client/flow/nodefeature/MapProperty.java b/flow-client/src/main/java/com/vaadin/client/flow/nodefeature/MapProperty.java\nindex 67404d07d9d..4550391f6b0 100644\n--- a/flow-client/src/main/java/com/vaadin/client/flow/nodefeature/MapProperty.java\n+++ b/flow-client/src/main/java/com/vaadin/client/flow/nodefeature/MapProperty.java\n@@ -17,6 +17,7 @@\n \n import java.util.Map;\n import java.util.Objects;\n+import java.util.Optional;\n \n import com.vaadin.client.flow.StateNode;\n import com.vaadin.client.flow.StateTree;\n@@ -65,6 +66,7 @@ protected void dispatchEvent(MapPropertyChangeListener listener,\n     private boolean hasValue = false;\n \n     private final boolean forceValueUpdate;\n+    private Optional<Object> previousDomValue = Optional.empty();\n \n     /**\n      * Creates a new property.\n@@ -333,4 +335,34 @@ public Runnable getSyncToServerCommand(Object newValue) {\n         }\n         return NO_OP;\n     }\n+\n+    /**\n+     * Stores previous DOM value of this property for detection of value\n+     * modification by the user during the server round-trip.\n+     *\n+     * @param previousDomValue\n+     *            DOM value of property prior to server round-trip start. Can be\n+     *            <code>null</code>;\n+     */\n+    public void setPreviousDomValue(Object previousDomValue) {\n+        this.previousDomValue = Optional.ofNullable(previousDomValue);\n+    }\n+\n+    /**\n+     * Returns previous DOM value of this property for detection of value\n+     * modification by the user during the server round-trip.\n+     *\n+     * @return Optional of previous DOM value. Empty optional is returned if\n+     *         previous value has not been stored.\n+     */\n+    public Optional<Object> getPreviousDomValue() {\n+        return previousDomValue;\n+    }\n+\n+    /**\n+     * Clears the previous DOM value of this property.\n+     */\n+    public void clearPreviousDomValue() {\n+        this.previousDomValue = Optional.empty();\n+    }\n }\n",
    "test_patch": "diff --git a/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/ClientSideValueChangeView.java b/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/ClientSideValueChangeView.java\nnew file mode 100644\nindex 00000000000..c5660c95de5\n--- /dev/null\n+++ b/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/ClientSideValueChangeView.java\n@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2000-2024 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.uitest.ui;\n+\n+import com.vaadin.flow.component.html.Input;\n+import com.vaadin.flow.component.html.Span;\n+import com.vaadin.flow.router.Route;\n+import com.vaadin.flow.uitest.servlet.ViewTestLayout;\n+\n+@Route(value = \"com.vaadin.flow.uitest.ui.ClientSideValueChangeView\", layout = ViewTestLayout.class)\n+public class ClientSideValueChangeView extends AbstractDivView {\n+\n+    @Override\n+    protected void onShow() {\n+        Input input = new Input();\n+        input.setId(\"inputfield\");\n+\n+        input.addValueChangeListener(e -> {\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException ex) {\n+                throw new RuntimeException(ex);\n+            }\n+            Span span = new Span(\"done\");\n+            span.setId(\"status\");\n+            add(span);\n+        });\n+\n+        add(input);\n+\n+        Input input2 = new Input();\n+        input2.setId(\"inputfieldserversetsvalue\");\n+\n+        input2.addValueChangeListener(e -> {\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException ex) {\n+                throw new RuntimeException(ex);\n+            }\n+            input2.setValue(\"fromserver\");\n+            Span span = new Span(\"done\");\n+            span.setId(\"statusserversetsvalue\");\n+            add(span);\n+        });\n+\n+        add(input2);\n+    }\n+\n+}\n\ndiff --git a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/ClientSideValueChangeIT.java b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/ClientSideValueChangeIT.java\nnew file mode 100644\nindex 00000000000..22dc2814a66\n--- /dev/null\n+++ b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/ClientSideValueChangeIT.java\n@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2000-2024 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.uitest.ui;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.support.ui.ExpectedConditions;\n+\n+import com.vaadin.flow.component.html.testbench.InputTextElement;\n+import com.vaadin.flow.testutil.ChromeBrowserTest;\n+\n+public class ClientSideValueChangeIT extends ChromeBrowserTest {\n+\n+    @Test\n+    public void clientSideValueEntryDuringRoundTrip_enteredValueShouldNotBeOverridden() {\n+        open();\n+\n+        getCommandExecutor().disableWaitForVaadin();\n+\n+        InputTextElement input = $(InputTextElement.class).id(\"inputfield\");\n+        input.setValue(\"abc\");\n+        input.sendKeys(\"123\");\n+\n+        waitUntil(ExpectedConditions.presenceOfElementLocated(By.id(\"status\")));\n+\n+        Assert.assertEquals(\n+                \"User input during round-trip was unexpectedly overridden\",\n+                \"abc123\",\n+                $(InputTextElement.class).id(\"inputfield\").getValue());\n+    }\n+\n+    @Test\n+    public void clientSideValueEntryDuringRoundTrip_serverChangesValue_serverValueShouldBeUsed() {\n+        open();\n+\n+        getCommandExecutor().disableWaitForVaadin();\n+\n+        InputTextElement input = $(InputTextElement.class)\n+                .id(\"inputfieldserversetsvalue\");\n+        input.setValue(\"abc\");\n+        input.sendKeys(\"123\");\n+\n+        waitUntil(ExpectedConditions\n+                .presenceOfElementLocated(By.id(\"statusserversetsvalue\")));\n+\n+        Assert.assertEquals(\n+                \"Value set by server during round-trip was unexpectedly overridden\",\n+                \"fromserver\", $(InputTextElement.class)\n+                        .id(\"inputfieldserversetsvalue\").getValue());\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20407",
    "pr_id": 20407,
    "issue_id": 19620,
    "repo": "vaadin/flow",
    "problem_statement": "Embedded vaadin flow component disappears after session timeout and also loads styles from wrong location.\n### Description of the bug\r\n\r\nI have a vaadin flow component exported through WebComponentExporter and embedded in another page. When I e.g. let the laptop sleep for longer than session timeout duration or just put the browser to offline in Network tab in Developer tools, the server session expires in meantime and the embedded component disappears from page - it's still there in html source, but with nothing inside its shadow-root except one style element. I managed to replicate it also with latest skeleton starter application downloaded from vaadin.com where I just added the WebComponentExporter for the sample view, added cors filter bean registration and set the servlet session timeout to 60 seconds. After waiting for over 60  seconds in offline mode and then disabling offline mode the embedded component tries to resynchronize on next heartbeat or any other request to server and then disappears.\r\n\r\nAlso the embedded component tries to incorretly download styles from wrong host - my vaadin flow app is running on port 8080 and the embedded components tries to load styles from the page where it is embedded instead.\r\n\r\nBrowser console log: [localhost-1718905756488.log](https://github.com/user-attachments/files/15917917/localhost-1718905756488.log)\r\n\r\n![Screenshot 2024-06-20 at 19 50 37](https://github.com/vaadin/flow/assets/924873/e916d561-3d09-4108-b685-65af1ae2a18c)\r\n\r\n\r\n\r\n\r\n### Expected behavior\r\n\r\nEmbedded flow component should not dissapear after server session expires.\r\nStyles should be loaded from correct url.\r\n\r\n### Minimal reproducible example\r\n\r\nSee https://github.com/ggecy/embedded-component-issues\r\n\r\n1. Clone the repo, build and start the vaadin application. I changed the session timeout to 60 seconds and heartbeat to 15 seconds. There is also cors filter registration bean to add cors headers. I also added WebComponentExporter for sample view.\r\n2. In `react-app` subfolder, I created a blank react app where in `public/index.html` I added the embedded webcomponent. Go to this subfolder and run `npm install` and then `npm run start` to start the app on port 3000.\r\n3. Open the `http://localhost:3000` in chrome, the page should open with embedded component displayed. Open developer tools and in Network tab at the top choose Offline from throttling menu.\r\n4. Wait for longer than 60 seconds until session expires on backend.\r\n5. Change offline mode back to no thottling.\r\n6. The embedded component should try to resynchronize with server on next heartbeat or when you try to submit a value from textfield.\r\n7. Embedded component disappears.\r\n\r\n### Versions\r\n\r\n- Vaadin / Flow version: 24.4.3\r\n- Java version: 17\r\n- OS version: MacOS 14.5\r\n- Browser version (if applicable): Arc 1.47.1 (latest)\r\n- IDE (if applicable): Intellij Idea Ultimate\r\n",
    "issue_word_count": 455,
    "test_files_count": 28,
    "non_test_files_count": 11,
    "pr_changed_files": [
      "flow-client/src/main/java/com/vaadin/client/DefaultRegistry.java",
      "flow-client/src/main/java/com/vaadin/client/SystemErrorHandler.java",
      "flow-client/src/main/java/com/vaadin/client/communication/AtmospherePushConnection.java",
      "flow-client/src/main/java/com/vaadin/client/communication/DefaultConnectionStateHandler.java",
      "flow-client/src/main/java/com/vaadin/client/communication/Heartbeat.java",
      "flow-client/src/main/java/com/vaadin/client/communication/MessageSender.java",
      "flow-client/src/main/java/com/vaadin/client/communication/ServerRpcQueue.java",
      "flow-client/src/main/java/com/vaadin/client/gwt/elemental/js/util/Xhr.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java",
      "flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentProvider.java",
      "flow-tests/test-frontend/pom.xml",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/.gitignore",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/pom.xml",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/main/frontend/index.html",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/main/frontend/web-component.html",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/main/java/com/vaadin/viteapp/LoginForm.java",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/main/java/com/vaadin/viteapp/LoginFormExporter.java",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/main/java/com/vaadin/viteapp/UserService.java",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/main/webapp/basic-component.html",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/test/java/com/vaadin/viteapp/BasicComponentIT.java",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/.gitignore",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/pom.xml",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/main/frontend/index.html",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/main/frontend/web-component.html",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/main/java/com/vaadin/viteapp/LoginForm.java",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/main/java/com/vaadin/viteapp/LoginFormExporter.java",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/main/java/com/vaadin/viteapp/UserService.java",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/main/webapp/basic-component.html",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/test/java/com/vaadin/viteapp/BasicComponentIT.java",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/.gitignore",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/pom.xml",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/main/frontend/index.html",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/main/frontend/web-component.html",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/main/java/com/vaadin/viteapp/LoginForm.java",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/main/java/com/vaadin/viteapp/LoginFormExporter.java",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/main/java/com/vaadin/viteapp/UserService.java",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/main/webapp/basic-component.html",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/test/java/com/vaadin/viteapp/BasicComponentIT.java",
      "scripts/computeMatrix.js"
    ],
    "pr_changed_test_files": [
      "flow-tests/test-frontend/pom.xml",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/.gitignore",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/pom.xml",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/main/frontend/index.html",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/main/frontend/web-component.html",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/main/java/com/vaadin/viteapp/LoginForm.java",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/main/java/com/vaadin/viteapp/LoginFormExporter.java",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/main/java/com/vaadin/viteapp/UserService.java",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/main/webapp/basic-component.html",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/test/java/com/vaadin/viteapp/BasicComponentIT.java",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/.gitignore",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/pom.xml",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/main/frontend/index.html",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/main/frontend/web-component.html",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/main/java/com/vaadin/viteapp/LoginForm.java",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/main/java/com/vaadin/viteapp/LoginFormExporter.java",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/main/java/com/vaadin/viteapp/UserService.java",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/main/webapp/basic-component.html",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/test/java/com/vaadin/viteapp/BasicComponentIT.java",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/.gitignore",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/pom.xml",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/main/frontend/index.html",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/main/frontend/web-component.html",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/main/java/com/vaadin/viteapp/LoginForm.java",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/main/java/com/vaadin/viteapp/LoginFormExporter.java",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/main/java/com/vaadin/viteapp/UserService.java",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/main/webapp/basic-component.html",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/test/java/com/vaadin/viteapp/BasicComponentIT.java"
    ],
    "base_commit": "4a08a103335015b1495d13efb76293d33be724d5",
    "head_commit": "3c3a1fa1bf84a1d76c9e7c0d05cdda30b2bebc0b",
    "repo_url": "https://github.com/vaadin/flow/pull/20407",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20407",
    "dockerfile": "",
    "pr_merged_at": "2024-11-11T12:39:28.000Z",
    "patch": "diff --git a/flow-client/src/main/java/com/vaadin/client/DefaultRegistry.java b/flow-client/src/main/java/com/vaadin/client/DefaultRegistry.java\nindex 174577059a3..8e1b92736c3 100644\n--- a/flow-client/src/main/java/com/vaadin/client/DefaultRegistry.java\n+++ b/flow-client/src/main/java/com/vaadin/client/DefaultRegistry.java\n@@ -79,7 +79,8 @@ public DefaultRegistry(ApplicationConnection connection,\n         set(InitialPropertiesHandler.class, new InitialPropertiesHandler(this));\n \n         // Classes with dependencies, in correct order\n-        set(Heartbeat.class, new Heartbeat(this));\n+        Supplier<Heartbeat> heartbeatSupplier = () -> new Heartbeat(this);\n+        set(Heartbeat.class, heartbeatSupplier);\n         set(ConnectionStateHandler.class,\n                 new DefaultConnectionStateHandler(this));\n         set(XhrConnection.class, new XhrConnection(this));\n\ndiff --git a/flow-client/src/main/java/com/vaadin/client/SystemErrorHandler.java b/flow-client/src/main/java/com/vaadin/client/SystemErrorHandler.java\nindex 2a70a11ebe1..5eb85691cc0 100644\n--- a/flow-client/src/main/java/com/vaadin/client/SystemErrorHandler.java\n+++ b/flow-client/src/main/java/com/vaadin/client/SystemErrorHandler.java\n@@ -23,6 +23,7 @@\n \n import com.google.gwt.core.client.Scheduler;\n import com.google.gwt.xhr.client.XMLHttpRequest;\n+\n import com.vaadin.client.bootstrap.ErrorMessage;\n import com.vaadin.client.communication.MessageHandler;\n import com.vaadin.client.gwt.elemental.js.util.Xhr;\n@@ -144,47 +145,96 @@ public void handleUnrecoverableError(String caption, String message,\n         }\n     }\n \n+    private boolean resyncInProgress = false;\n+\n     /**\n      * Send GET async request to acquire new JSESSIONID, browser will set cookie\n      * automatically based on Set-Cookie response header.\n      */\n     private void resynchronizeSession() {\n+        if (resyncInProgress) {\n+            Console.debug(\n+                    \"Web components resynchronization already in progress\");\n+            return;\n+        }\n+        resyncInProgress = true;\n         String serviceUrl = registry.getApplicationConfiguration()\n                 .getServiceUrl() + \"web-component/web-component-bootstrap.js\";\n+\n+        // Stop heart beat to prevent requests during resynchronization\n+        registry.getHeartbeat().setInterval(-1);\n+        if (registry.getPushConfiguration().isPushEnabled()) {\n+            registry.getMessageSender().setPushEnabled(false, false);\n+        }\n+\n         String sessionResyncUri = SharedUtil.addGetParameter(serviceUrl,\n                 ApplicationConstants.REQUEST_TYPE_PARAMETER,\n                 ApplicationConstants.REQUEST_TYPE_WEBCOMPONENT_RESYNC);\n \n-        Xhr.get(sessionResyncUri, new Xhr.Callback() {\n+        Xhr.getWithCredentials(sessionResyncUri, new Xhr.Callback() {\n             @Override\n             public void onFail(XMLHttpRequest xhr, Exception exception) {\n+                registry.getHeartbeat().setInterval(registry\n+                        .getApplicationConfiguration().getHeartbeatInterval());\n                 handleError(exception);\n             }\n \n             @Override\n             public void onSuccess(XMLHttpRequest xhr) {\n-\n                 Console.log(\n                         \"Received xhr HTTP session resynchronization message: \"\n                                 + xhr.getResponseText());\n \n-                registry.reset();\n-                registry.getUILifecycle().setState(UILifecycle.UIState.RUNNING);\n+                // Make sure heartbeat has not been restarted. This is\n+                // especially important if the uiId gets reset after session\n+                // expiration, to prevent multiple heartbeats requests for\n+                // different ui\n+                registry.getHeartbeat().setInterval(-1);\n \n+                int uiId = registry.getApplicationConfiguration().getUIId();\n                 ValueMap json = MessageHandler\n                         .parseWrappedJson(xhr.getResponseText());\n+                int newUiId = json.getInt(ApplicationConstants.UI_ID);\n+                if (newUiId != uiId) {\n+                    Console.debug(\"UI ID switched from \" + uiId + \" to \"\n+                            + newUiId + \" after resynchronization\");\n+                    registry.getApplicationConfiguration().setUIId(newUiId);\n+                }\n+                registry.reset();\n+\n+                registry.getUILifecycle().setState(UILifecycle.UIState.RUNNING);\n                 registry.getMessageHandler().handleMessage(json);\n-                registry.getApplicationConfiguration()\n-                        .setUIId(json.getInt(ApplicationConstants.UI_ID));\n \n-                Scheduler.get().scheduleDeferred(() -> Arrays\n-                        .stream(registry.getApplicationConfiguration()\n-                                .getExportedWebComponents())\n-                        .forEach(SystemErrorHandler.this::recreateNodes));\n+                boolean pushEnabled = registry.getPushConfiguration()\n+                        .isPushEnabled();\n+                if (pushEnabled) {\n+                    // PUSH connection might have been closed in response to\n+                    // sever session expiration. If PUSH is required, reconnect\n+                    // before recreating web components to make sure the\n+                    // connected events can be propagated to the server.\n+                    // PUSH reconnection is deferred to allow current request\n+                    // to complete and process the Set-Cookie header.\n+                    Scheduler.get().scheduleDeferred(() -> {\n+                        Console.debug(\"Re-establish PUSH connection\");\n+                        registry.getMessageSender().setPushEnabled(true);\n+                        Scheduler.get().scheduleDeferred(\n+                                () -> recreateWebComponents());\n+                    });\n+                } else {\n+                    Scheduler.get()\n+                            .scheduleDeferred(() -> recreateWebComponents());\n+                }\n             }\n         });\n     }\n \n+    private void recreateWebComponents() {\n+        Arrays.stream(registry.getApplicationConfiguration()\n+                .getExportedWebComponents())\n+                .forEach(SystemErrorHandler.this::recreateNodes);\n+        resyncInProgress = false;\n+    }\n+\n     private native void recreateNodes(String elementName)\n     /*-{\n         var elements = document.getElementsByTagName(elementName);\n\ndiff --git a/flow-client/src/main/java/com/vaadin/client/communication/AtmospherePushConnection.java b/flow-client/src/main/java/com/vaadin/client/communication/AtmospherePushConnection.java\nindex c745b56592a..bdbef4cdb02 100644\n--- a/flow-client/src/main/java/com/vaadin/client/communication/AtmospherePushConnection.java\n+++ b/flow-client/src/main/java/com/vaadin/client/communication/AtmospherePushConnection.java\n@@ -186,7 +186,6 @@ public AtmospherePushConnection(Registry registry) {\n             } else {\n                 config.setStringValue(key, value);\n             }\n-\n         });\n \n         String pushServletMapping = getPushConfiguration()\n@@ -686,6 +685,7 @@ protected final native AtmosphereConfiguration createConfig()\n             fallbackTransport: 'long-polling',\n             contentType: 'application/json; charset=UTF-8',\n             reconnectInterval: 5000,\n+            withCredentials: true,\n             maxWebsocketErrorRetries: 12,\n             timeout: -1,\n             maxReconnectOnClose: 10000000,\n\ndiff --git a/flow-client/src/main/java/com/vaadin/client/communication/DefaultConnectionStateHandler.java b/flow-client/src/main/java/com/vaadin/client/communication/DefaultConnectionStateHandler.java\nindex b023ecca5ee..b2d2aa09b7b 100644\n--- a/flow-client/src/main/java/com/vaadin/client/communication/DefaultConnectionStateHandler.java\n+++ b/flow-client/src/main/java/com/vaadin/client/communication/DefaultConnectionStateHandler.java\n@@ -534,8 +534,11 @@ private void pauseHeartbeats() {\n     }\n \n     private void resumeHeartbeats() {\n-        registry.getHeartbeat().setInterval(\n-                registry.getApplicationConfiguration().getHeartbeatInterval());\n+        // Resume heart beat only if it was not terminated (interval == -1)\n+        if (registry.getHeartbeat().getInterval() >= 0) {\n+            registry.getHeartbeat().setInterval(registry\n+                    .getApplicationConfiguration().getHeartbeatInterval());\n+        }\n     }\n \n     private boolean redirectIfRefreshToken(String message) {\n\ndiff --git a/flow-client/src/main/java/com/vaadin/client/communication/Heartbeat.java b/flow-client/src/main/java/com/vaadin/client/communication/Heartbeat.java\nindex 9844f310564..945d194f955 100644\n--- a/flow-client/src/main/java/com/vaadin/client/communication/Heartbeat.java\n+++ b/flow-client/src/main/java/com/vaadin/client/communication/Heartbeat.java\n@@ -17,6 +17,7 @@\n \n import com.google.gwt.user.client.Timer;\n import com.google.gwt.xhr.client.XMLHttpRequest;\n+\n import com.vaadin.client.Console;\n import com.vaadin.client.Registry;\n import com.vaadin.client.gwt.elemental.js.util.Xhr;\n@@ -74,8 +75,13 @@ public Heartbeat(Registry registry) {\n      */\n     public void send() {\n         timer.cancel();\n+        if (interval < 0) {\n+            Console.debug(\"Heartbeat terminated, skipping request\");\n+            return;\n+        }\n \n         Console.debug(\"Sending heartbeat request...\");\n+\n         Xhr.post(uri, null, \"text/plain; charset=utf-8\", new Xhr.Callback() {\n \n             @Override\n@@ -86,12 +92,19 @@ public void onSuccess(XMLHttpRequest xhr) {\n \n             @Override\n             public void onFail(XMLHttpRequest xhr, Exception e) {\n-\n                 // Handler should stop the application if heartbeat should no\n                 // longer be sent\n                 if (e == null) {\n-                    registry.getConnectionStateHandler()\n-                            .heartbeatInvalidStatusCode(xhr);\n+                    // Heartbeat has been terminated before response processing.\n+                    // Most likely a session expiration happened, and it has\n+                    // already been handled by another component.\n+                    if (interval < 0) {\n+                        Console.debug(\n+                                \"Heartbeat terminated, ignoring failure.\");\n+                    } else {\n+                        registry.getConnectionStateHandler()\n+                                .heartbeatInvalidStatusCode(xhr);\n+                    }\n                 } else {\n                     registry.getConnectionStateHandler().heartbeatException(xhr,\n                             e);\n\ndiff --git a/flow-client/src/main/java/com/vaadin/client/communication/MessageSender.java b/flow-client/src/main/java/com/vaadin/client/communication/MessageSender.java\nindex 80e65ecf702..9a563ff153b 100644\n--- a/flow-client/src/main/java/com/vaadin/client/communication/MessageSender.java\n+++ b/flow-client/src/main/java/com/vaadin/client/communication/MessageSender.java\n@@ -16,8 +16,9 @@\n package com.vaadin.client.communication;\n \n import com.google.gwt.core.client.GWT;\n-import com.vaadin.client.Console;\n+\n import com.vaadin.client.ConnectionIndicator;\n+import com.vaadin.client.Console;\n import com.vaadin.client.Registry;\n import com.vaadin.flow.shared.ApplicationConstants;\n \n@@ -91,10 +92,14 @@ public void sendInvocationsToServer() {\n             return;\n         }\n \n-        if (registry.getRequestResponseTracker().hasActiveRequest()\n-                || (push != null && !push.isActive())) {\n+        boolean hasActiveRequest = registry.getRequestResponseTracker()\n+                .hasActiveRequest();\n+        if (hasActiveRequest || (push != null && !push.isActive())) {\n             // There is an active request or push is enabled but not active\n             // -> send when current request completes or push becomes active\n+            Console.debug(\"Postpone sending invocations to server because of \"\n+                    + (hasActiveRequest ? \"active request\"\n+                            : \"PUSH not active\"));\n         } else {\n             doSendInvocationsToServer();\n         }\n@@ -200,9 +205,11 @@ public void send(final JsonObject payload) {\n             // server after a reconnection.\n             // Reference will be cleaned up once the server confirms it has\n             // seen this message\n+            Console.debug(\"send PUSH\");\n             pushPendingMessage = payload;\n             push.push(payload);\n         } else {\n+            Console.log(\"send XHR\");\n             registry.getXhrConnection().send(payload);\n         }\n     }\n@@ -215,7 +222,22 @@ public void send(final JsonObject payload) {\n      *            <code>false</code> to disable the push connection.\n      */\n     public void setPushEnabled(boolean enabled) {\n-        if (enabled && push == null) {\n+        setPushEnabled(enabled, true);\n+    }\n+\n+    /**\n+     * Sets the status for the push connection.\n+     *\n+     * @param enabled\n+     *            <code>true</code> to enable the push connection;\n+     *            <code>false</code> to disable the push connection.\n+     * @param reEnableIfNeeded\n+     *            <code>true</code> if push should be re-enabled after\n+     *            disconnection if configuration changed; <code>false</code> to\n+     *            prevent reconnection.\n+     */\n+    public void setPushEnabled(boolean enabled, boolean reEnableIfNeeded) {\n+        if (enabled && (push == null || !push.isActive())) {\n             push = pushConnectionFactory.create(registry);\n         } else if (!enabled && push != null && push.isActive()) {\n             push.disconnect(() -> {\n@@ -225,7 +247,8 @@ public void setPushEnabled(boolean enabled) {\n                  * old connection to disconnect, now is the right time to open a\n                  * new connection\n                  */\n-                if (registry.getPushConfiguration().isPushEnabled()) {\n+                if (reEnableIfNeeded\n+                        && registry.getPushConfiguration().isPushEnabled()) {\n                     setPushEnabled(true);\n                 }\n \n\ndiff --git a/flow-client/src/main/java/com/vaadin/client/communication/ServerRpcQueue.java b/flow-client/src/main/java/com/vaadin/client/communication/ServerRpcQueue.java\nindex be8f0ea706f..93f31598a05 100644\n--- a/flow-client/src/main/java/com/vaadin/client/communication/ServerRpcQueue.java\n+++ b/flow-client/src/main/java/com/vaadin/client/communication/ServerRpcQueue.java\n@@ -16,6 +16,7 @@\n package com.vaadin.client.communication;\n \n import com.google.gwt.core.client.Scheduler;\n+\n import com.vaadin.client.Console;\n import com.vaadin.client.Registry;\n \n\ndiff --git a/flow-client/src/main/java/com/vaadin/client/gwt/elemental/js/util/Xhr.java b/flow-client/src/main/java/com/vaadin/client/gwt/elemental/js/util/Xhr.java\nindex 59e4c609141..ef8811e319f 100644\n--- a/flow-client/src/main/java/com/vaadin/client/gwt/elemental/js/util/Xhr.java\n+++ b/flow-client/src/main/java/com/vaadin/client/gwt/elemental/js/util/Xhr.java\n@@ -18,6 +18,7 @@\n import com.google.gwt.core.client.JavaScriptException;\n import com.google.gwt.xhr.client.ReadyStateChangeHandler;\n import com.google.gwt.xhr.client.XMLHttpRequest;\n+\n import com.vaadin.client.Console;\n \n import elemental.client.Browser;\n@@ -90,6 +91,23 @@ public static XMLHttpRequest get(String url, Callback callback) {\n         return request(create(), \"GET\", url, callback);\n     }\n \n+    /**\n+     * Send a GET request to the <code>url</code> including credentials in XHR,\n+     * and dispatch updates to the <code>callback</code>.\n+     *\n+     * @param url\n+     *            the URL\n+     * @param callback\n+     *            the callback to be notified\n+     * @return a reference to the sent XmlHttpRequest\n+     */\n+    public static XMLHttpRequest getWithCredentials(String url,\n+            Callback callback) {\n+        XMLHttpRequest request = create();\n+        request.setWithCredentials(true);\n+        return request(request, \"GET\", url, callback);\n+    }\n+\n     /**\n      * Send a GET request to the <code>url</code> and dispatch updates to the\n      * <code>callback</code>.\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java\nindex 120cce42620..11a0fdb92c9 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java\n@@ -629,6 +629,8 @@ protected boolean handleWebComponentResyncRequest(BootstrapContext context,\n         json.put(ApplicationConstants.UI_ID, context.getUI().getUIId());\n         json.put(ApplicationConstants.UIDL_SECURITY_TOKEN_ID,\n                 context.getUI().getCsrfToken());\n+        json.put(ApplicationConstants.UIDL_PUSH_ID,\n+                context.getUI().getSession().getPushId());\n         String responseString = \"for(;;);[\" + JsonUtil.stringify(json) + \"]\";\n \n         try {\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentProvider.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentProvider.java\nindex 5da1a5e719d..b2cd0f0f80a 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentProvider.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentProvider.java\n@@ -229,7 +229,7 @@ protected String bootstrapNpm(boolean productionMode) {\n                         const delay = 200;\n                         const poll = async () => {\n                           try {\n-                            const response = await fetch(bootstrapSrc, { method: 'HEAD', headers: { 'X-DevModePoll': 'true' } });\n+                            const response = await fetch(bootstrapSrc, { method: 'HEAD', credentials: 'include', headers: { 'X-DevModePoll': 'true' } });\n                             if (response.headers.has('X-DevModePending')) {\n                               setTimeout(poll, delay);\n                             } else {\n\ndiff --git a/scripts/computeMatrix.js b/scripts/computeMatrix.js\nindex e81a61d5a83..f271bf98fd2 100755\n--- a/scripts/computeMatrix.js\n+++ b/scripts/computeMatrix.js\n@@ -132,6 +132,9 @@ const moduleWeights = {\n   'flow-plugins/flow-maven-plugin': { weight: 4 },\n   'flow-plugins/flow-gradle-plugin': { weight: 4 },\n   'flow-tests/test-frontend/vite-embedded-webcomponent-resync': { weight: 4 },\n+  'flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws': { weight: 4 },\n+  'flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr': { weight: 4 },\n+  'flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling': { weight: 4 },\n   'flow-tests/test-npm-only-features/test-npm-no-buildmojo': { weight: 4 },\n   'flow-tests/test-ccdm/pom-production.xml': { weight: 3 },\n   'flow-tests/test-application-theme/test-theme-component-live-reload': { weight: 3 },\n",
    "test_patch": "diff --git a/flow-tests/test-frontend/pom.xml b/flow-tests/test-frontend/pom.xml\nindex e3785a473aa..9be65dd7f3a 100644\n--- a/flow-tests/test-frontend/pom.xml\n+++ b/flow-tests/test-frontend/pom.xml\n@@ -46,6 +46,9 @@\n                 <!-- npm and pnpm dev mode and prod mode -->\n                 <!-- run production build before dev build as dev build has npm i in thread -->\n                 <module>vite-embedded-webcomponent-resync</module>\n+                <module>vite-embedded-webcomponent-resync-ws</module>\n+                <module>vite-embedded-webcomponent-resync-wsxhr</module>\n+                <module>vite-embedded-webcomponent-resync-longpolling</module>\n                 <module>test-npm/pom-production.xml</module>\n                 <module>test-npm</module>\n                 <module>test-pnpm/pom-production.xml</module>\n\ndiff --git a/flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/.gitignore b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/.gitignore\nnew file mode 100644\nindex 00000000000..3dee652a777\n--- /dev/null\n+++ b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/.gitignore\n@@ -0,0 +1 @@\n+!**/index.html\n\ndiff --git a/flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/pom.xml b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/pom.xml\nnew file mode 100644\nindex 00000000000..d66cd7aa8bf\n--- /dev/null\n+++ b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/pom.xml\n@@ -0,0 +1,105 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <!-- Vaadin project from https://start.vaadin.com/project/null -->\n+    <parent>\n+        <groupId>com.vaadin</groupId>\n+        <artifactId>test-frontend</artifactId>\n+        <version>24.6-SNAPSHOT</version>\n+    </parent>\n+    <artifactId>vite-embedded-webcomponent-resync-long-polling</artifactId>\n+    <name>Vite embedded app - session resync with long polling PUSH</name>\n+    <packaging>war</packaging>\n+\n+    <dependencyManagement>\n+        <dependencies>\n+            <dependency>\n+                <groupId>com.vaadin</groupId>\n+                <artifactId>flow-bom</artifactId>\n+                <version>${project.version}</version>\n+                <type>pom</type>\n+                <scope>import</scope>\n+            </dependency>\n+        </dependencies>\n+    </dependencyManagement>\n+\n+    <dependencies>\n+        <!-- Project dependencies -->\n+        <dependency>\n+            <groupId>com.vaadin</groupId>\n+            <artifactId>vaadin-dev-server</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.vaadin</groupId>\n+            <artifactId>flow-test-lumo</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.eclipse.jetty</groupId>\n+            <artifactId>jetty-server</artifactId>\n+            <version>${jetty.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.eclipse.jetty.ee10</groupId>\n+            <artifactId>jetty-ee10-webapp</artifactId>\n+            <version>${jetty.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.eclipse.jetty</groupId>\n+            <artifactId>jetty-http</artifactId>\n+            <version>${jetty.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.eclipse.jetty.ee10</groupId>\n+            <artifactId>jetty-ee10-annotations</artifactId>\n+            <version>${jetty.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.eclipse.jetty</groupId>\n+            <artifactId>jetty-util</artifactId>\n+            <version>${jetty.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.eclipse.jetty.ee10</groupId>\n+            <artifactId>jetty-ee10-servlet</artifactId>\n+            <version>${jetty.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.eclipse.jetty.ee10.websocket</groupId>\n+            <artifactId>jetty-ee10-websocket-jakarta-server</artifactId>\n+            <version>${jetty.version}</version>\n+        </dependency>\n+\n+        <!-- Fix dependency convergence issue in Jetty artifacts -->\n+        <dependency>\n+            <groupId>org.eclipse.jetty.ee10</groupId>\n+            <artifactId>jetty-ee10-plus</artifactId>\n+            <version>${jetty.version}</version>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>jakarta.annotation</groupId>\n+                    <artifactId>jakarta.annotation-api</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>com.vaadin</groupId>\n+                <artifactId>flow-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>prepare-frontend</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+</project>\n\ndiff --git a/flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/main/frontend/index.html b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/main/frontend/index.html\nnew file mode 100644\nindex 00000000000..d36e593475c\n--- /dev/null\n+++ b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/main/frontend/index.html\n@@ -0,0 +1,23 @@\n+<!DOCTYPE html>\n+<!--\n+This file is auto-generated by Vaadin.\n+-->\n+\n+<html>\n+<head>\n+  <meta charset=\"UTF-8\" />\n+  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n+  <style>\n+    body, #outlet {\n+      height: 100vh;\n+      width: 100%;\n+      margin: 0;\n+    }\n+  </style>\n+  <!-- index.ts is included here automatically (either by the dev server or during the build) -->\n+</head>\n+<body>\n+  <!-- This outlet div is where the views are rendered -->\n+  <div id=\"outlet\"></div>\n+</body>\n+</html>\n\ndiff --git a/flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/main/frontend/web-component.html b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/main/frontend/web-component.html\nnew file mode 100644\nindex 00000000000..fd598bbbadf\n--- /dev/null\n+++ b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/main/frontend/web-component.html\n@@ -0,0 +1,10 @@\n+<!DOCTYPE html>\n+<!--\n+This file is auto-generated by Vaadin.\n+-->\n+\n+<html>\n+  <head>\n+    <!-- vaadin-web-component.ts is included here automatically (either by the dev server or during the build) -->\n+  </head>\n+</html>\n\ndiff --git a/flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/main/java/com/vaadin/viteapp/LoginForm.java b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/main/java/com/vaadin/viteapp/LoginForm.java\nnew file mode 100644\nindex 00000000000..79484427374\n--- /dev/null\n+++ b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/main/java/com/vaadin/viteapp/LoginForm.java\n@@ -0,0 +1,57 @@\n+package com.vaadin.viteapp;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.component.html.Input;\n+import com.vaadin.flow.component.html.NativeButton;\n+import com.vaadin.flow.component.html.Span;\n+import com.vaadin.flow.function.SerializableRunnable;\n+\n+public class LoginForm extends Div {\n+    private Input userName = new Input();\n+    private Input password = new Input();\n+    private Div errorMsg = new Div();\n+    private String userLabel;\n+    private String pwdLabel;\n+    private Div layout = new Div();\n+    private List<SerializableRunnable> loginListeners = new CopyOnWriteArrayList<>();\n+\n+    public LoginForm() {\n+        updateForm();\n+\n+        add(layout);\n+\n+        NativeButton login = new NativeButton(\"Login\", event -> login());\n+        add(login, errorMsg);\n+    }\n+\n+    public void setUserNameLabel(String userNameLabelString) {\n+        userLabel = userNameLabelString;\n+        updateForm();\n+    }\n+\n+    public void setPasswordLabel(String pwd) {\n+        pwdLabel = pwd;\n+        updateForm();\n+    }\n+\n+    public void updateForm() {\n+        layout.removeAll();\n+        layout.add(new Span(userLabel), userName);\n+        layout.add(new Span(pwdLabel), password);\n+    }\n+\n+    private void login() {\n+        Optional<Object> authToken = UserService.getInstance()\n+                .authenticate(userName.getValue(), password.getValue());\n+        if (authToken.isPresent()) {\n+            errorMsg.setText(\"Authentication success\");\n+        } else {\n+            errorMsg.setText(\"Authentication failure\");\n+        }\n+    }\n+\n+}\n\ndiff --git a/flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/main/java/com/vaadin/viteapp/LoginFormExporter.java b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/main/java/com/vaadin/viteapp/LoginFormExporter.java\nnew file mode 100644\nindex 00000000000..c630bf04f06\n--- /dev/null\n+++ b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/main/java/com/vaadin/viteapp/LoginFormExporter.java\n@@ -0,0 +1,20 @@\n+package com.vaadin.viteapp;\n+\n+import com.vaadin.flow.component.WebComponentExporter;\n+import com.vaadin.flow.component.page.Push;\n+import com.vaadin.flow.component.webcomponent.WebComponent;\n+import com.vaadin.flow.shared.ui.Transport;\n+\n+@Push(transport = Transport.LONG_POLLING)\n+public class LoginFormExporter extends WebComponentExporter<LoginForm> {\n+    public LoginFormExporter() {\n+        super(\"login-form\");\n+        addProperty(\"userlbl\", \"\").onChange(LoginForm::setUserNameLabel);\n+        addProperty(\"pwdlbl\", \"\").onChange(LoginForm::setPasswordLabel);\n+    }\n+\n+    @Override\n+    protected void configureInstance(WebComponent<LoginForm> webComponent,\n+            LoginForm form) {\n+    }\n+}\n\ndiff --git a/flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/main/java/com/vaadin/viteapp/UserService.java b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/main/java/com/vaadin/viteapp/UserService.java\nnew file mode 100644\nindex 00000000000..a74e2ec4ba6\n--- /dev/null\n+++ b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/main/java/com/vaadin/viteapp/UserService.java\n@@ -0,0 +1,27 @@\n+package com.vaadin.viteapp;\n+\n+import java.util.Optional;\n+\n+public final class UserService {\n+\n+    private static final UserService INSTANCE = new UserService();\n+\n+    private UserService() {\n+    }\n+\n+    public static UserService getInstance() {\n+        return INSTANCE;\n+    }\n+\n+    public String getName(Object authToken) {\n+        return \"Joe\";\n+    }\n+\n+    public Optional<Object> authenticate(String user, String passwd) {\n+        if (\"admin\".equals(user) && \"admin\".equals(passwd)) {\n+            return Optional.of(new Object());\n+        } else {\n+            return Optional.empty();\n+        }\n+    }\n+}\n\ndiff --git a/flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/main/webapp/basic-component.html b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/main/webapp/basic-component.html\nnew file mode 100644\nindex 00000000000..ab6da8a6997\n--- /dev/null\n+++ b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/main/webapp/basic-component.html\n@@ -0,0 +1,13 @@\n+\n+<!doctype html>\n+<html>\n+<head>\n+  <script src=\"web-component/login-form.js\"></script>\n+</head>\n+<body>\n+  <div>\n+    <login-form userlbl=\"Username\" pwdlbl=\"Password\"></login-form>\n+  </div>\n+</body>\n+</html>\n+\n\ndiff --git a/flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/test/java/com/vaadin/viteapp/BasicComponentIT.java b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/test/java/com/vaadin/viteapp/BasicComponentIT.java\nnew file mode 100644\nindex 00000000000..071c7382da2\n--- /dev/null\n+++ b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-longpolling/src/test/java/com/vaadin/viteapp/BasicComponentIT.java\n@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2000-2024 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.viteapp;\n+\n+import jakarta.servlet.http.HttpSession;\n+import jakarta.servlet.http.HttpSessionEvent;\n+import jakarta.servlet.http.HttpSessionListener;\n+\n+import java.io.File;\n+\n+import org.eclipse.jetty.ee10.webapp.WebAppContext;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.openqa.selenium.Keys;\n+import org.openqa.selenium.StaleElementReferenceException;\n+\n+import com.vaadin.flow.server.InitParameters;\n+import com.vaadin.flow.testutil.ChromeDeviceTest;\n+\n+public class BasicComponentIT extends ChromeDeviceTest {\n+\n+    private static final String HOTDEPLOY_PROPERTY = \"vaadin.\"\n+            + InitParameters.FRONTEND_HOTDEPLOY;\n+\n+    private Server server;\n+\n+    private WebAppContext context;\n+\n+    private String hotdeploy;\n+\n+    protected HttpSession session;\n+\n+    @Before\n+    public void init() throws Exception {\n+        setup(8888);\n+        getDriver().get(getRootURL());\n+        waitForDevServer();\n+        getDriver().get(getRootURL() + \"/basic-component.html\");\n+    }\n+\n+    @Test\n+    public void session_resynced_webcomponent_is_active() throws Exception {\n+        waitForWebComponent(\"login-form\");\n+        // check if web component works\n+        clickButton();\n+        Assert.assertEquals(\"Authentication failure\",\n+                getAuthenticationResult());\n+\n+        // simulate expired session by invalidating current session\n+        session.invalidate();\n+        waitForWebComponent(\"login-form\");\n+\n+        // init request to resynchronize expired session and recreate components\n+        clickButton();\n+\n+        try {\n+            // it seems WebDriver needs also sync to new session\n+            setUsername(\"\");\n+        } catch (StaleElementReferenceException ex) {\n+            // NOP\n+        }\n+\n+        // check if web component works again\n+        setUsername(\"admin\");\n+        setPassword(\"admin\");\n+        clickButton();\n+        Assert.assertEquals(\"Authentication success\",\n+                getAuthenticationResult());\n+    }\n+\n+    private void clickButton() {\n+        waitUntil(d -> $(\"login-form\").first().$(\"button\").first()).click();\n+    }\n+\n+    private String getAuthenticationResult() {\n+        return $(\"login-form\").first().$(\"div\").last().getText();\n+    }\n+\n+    private void setUsername(String value) {\n+        $(\"login-form\").first().$(\"input\").first().sendKeys(value + Keys.TAB);\n+    }\n+\n+    private void setPassword(String value) {\n+        $(\"login-form\").first().$(\"input\").last().sendKeys(value + Keys.TAB);\n+    }\n+\n+    @Override\n+    public void checkIfServerAvailable() {\n+        // NOP\n+    }\n+\n+    public void setup(int port) throws Exception {\n+        hotdeploy = System.getProperty(HOTDEPLOY_PROPERTY);\n+        System.setProperty(HOTDEPLOY_PROPERTY, \"true\");\n+        server = new Server();\n+        try (ServerConnector connector = new ServerConnector(server)) {\n+            connector.setPort(port);\n+            server.setConnectors(new ServerConnector[] { connector });\n+        }\n+\n+        File[] warDirs = new File(\"target\")\n+                .listFiles(file -> file.getName().matches(\n+                        \"vite-embedded-webcomponent-resync-.*-SNAPSHOT\\\\.war\"));\n+        String warfile = \"target/\" + warDirs[0].getName();\n+\n+        context = new WebAppContext(warfile, \"/\");\n+\n+        // store session id to be able to invalidate it during test\n+        context.getSessionHandler().addEventListener(new HttpSessionListener() {\n+            @Override\n+            public void sessionCreated(HttpSessionEvent httpSessionEvent) {\n+                session = httpSessionEvent.getSession();\n+            }\n+        });\n+\n+        server.setHandler(context);\n+        server.start();\n+    }\n+\n+    @After\n+    public void shutdown() throws Exception {\n+        try {\n+            context.stop();\n+            context.destroy();\n+            context = null;\n+        } finally {\n+            server.stop();\n+            if (hotdeploy == null) {\n+                System.clearProperty(HOTDEPLOY_PROPERTY);\n+            } else {\n+                System.setProperty(HOTDEPLOY_PROPERTY, hotdeploy);\n+            }\n+        }\n+    }\n+}\n\ndiff --git a/flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/.gitignore b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/.gitignore\nnew file mode 100644\nindex 00000000000..3dee652a777\n--- /dev/null\n+++ b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/.gitignore\n@@ -0,0 +1 @@\n+!**/index.html\n\ndiff --git a/flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/pom.xml b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/pom.xml\nnew file mode 100644\nindex 00000000000..63fbbdf7e89\n--- /dev/null\n+++ b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/pom.xml\n@@ -0,0 +1,105 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <!-- Vaadin project from https://start.vaadin.com/project/null -->\n+    <parent>\n+        <groupId>com.vaadin</groupId>\n+        <artifactId>test-frontend</artifactId>\n+        <version>24.6-SNAPSHOT</version>\n+    </parent>\n+    <artifactId>vite-embedded-webcomponent-resync-ws</artifactId>\n+    <name>Vite embedded app - session resync with websocket PUSH</name>\n+    <packaging>war</packaging>\n+\n+    <dependencyManagement>\n+        <dependencies>\n+            <dependency>\n+                <groupId>com.vaadin</groupId>\n+                <artifactId>flow-bom</artifactId>\n+                <version>${project.version}</version>\n+                <type>pom</type>\n+                <scope>import</scope>\n+            </dependency>\n+        </dependencies>\n+    </dependencyManagement>\n+\n+    <dependencies>\n+        <!-- Project dependencies -->\n+        <dependency>\n+            <groupId>com.vaadin</groupId>\n+            <artifactId>vaadin-dev-server</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.vaadin</groupId>\n+            <artifactId>flow-test-lumo</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.eclipse.jetty</groupId>\n+            <artifactId>jetty-server</artifactId>\n+            <version>${jetty.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.eclipse.jetty.ee10</groupId>\n+            <artifactId>jetty-ee10-webapp</artifactId>\n+            <version>${jetty.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.eclipse.jetty</groupId>\n+            <artifactId>jetty-http</artifactId>\n+            <version>${jetty.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.eclipse.jetty.ee10</groupId>\n+            <artifactId>jetty-ee10-annotations</artifactId>\n+            <version>${jetty.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.eclipse.jetty</groupId>\n+            <artifactId>jetty-util</artifactId>\n+            <version>${jetty.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.eclipse.jetty.ee10</groupId>\n+            <artifactId>jetty-ee10-servlet</artifactId>\n+            <version>${jetty.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.eclipse.jetty.ee10.websocket</groupId>\n+            <artifactId>jetty-ee10-websocket-jakarta-server</artifactId>\n+            <version>${jetty.version}</version>\n+        </dependency>\n+\n+        <!-- Fix dependency convergence issue in Jetty artifacts -->\n+        <dependency>\n+            <groupId>org.eclipse.jetty.ee10</groupId>\n+            <artifactId>jetty-ee10-plus</artifactId>\n+            <version>${jetty.version}</version>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>jakarta.annotation</groupId>\n+                    <artifactId>jakarta.annotation-api</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>com.vaadin</groupId>\n+                <artifactId>flow-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>prepare-frontend</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+</project>\n\ndiff --git a/flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/main/frontend/index.html b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/main/frontend/index.html\nnew file mode 100644\nindex 00000000000..d36e593475c\n--- /dev/null\n+++ b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/main/frontend/index.html\n@@ -0,0 +1,23 @@\n+<!DOCTYPE html>\n+<!--\n+This file is auto-generated by Vaadin.\n+-->\n+\n+<html>\n+<head>\n+  <meta charset=\"UTF-8\" />\n+  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n+  <style>\n+    body, #outlet {\n+      height: 100vh;\n+      width: 100%;\n+      margin: 0;\n+    }\n+  </style>\n+  <!-- index.ts is included here automatically (either by the dev server or during the build) -->\n+</head>\n+<body>\n+  <!-- This outlet div is where the views are rendered -->\n+  <div id=\"outlet\"></div>\n+</body>\n+</html>\n\ndiff --git a/flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/main/frontend/web-component.html b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/main/frontend/web-component.html\nnew file mode 100644\nindex 00000000000..fd598bbbadf\n--- /dev/null\n+++ b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/main/frontend/web-component.html\n@@ -0,0 +1,10 @@\n+<!DOCTYPE html>\n+<!--\n+This file is auto-generated by Vaadin.\n+-->\n+\n+<html>\n+  <head>\n+    <!-- vaadin-web-component.ts is included here automatically (either by the dev server or during the build) -->\n+  </head>\n+</html>\n\ndiff --git a/flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/main/java/com/vaadin/viteapp/LoginForm.java b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/main/java/com/vaadin/viteapp/LoginForm.java\nnew file mode 100644\nindex 00000000000..79484427374\n--- /dev/null\n+++ b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/main/java/com/vaadin/viteapp/LoginForm.java\n@@ -0,0 +1,57 @@\n+package com.vaadin.viteapp;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.component.html.Input;\n+import com.vaadin.flow.component.html.NativeButton;\n+import com.vaadin.flow.component.html.Span;\n+import com.vaadin.flow.function.SerializableRunnable;\n+\n+public class LoginForm extends Div {\n+    private Input userName = new Input();\n+    private Input password = new Input();\n+    private Div errorMsg = new Div();\n+    private String userLabel;\n+    private String pwdLabel;\n+    private Div layout = new Div();\n+    private List<SerializableRunnable> loginListeners = new CopyOnWriteArrayList<>();\n+\n+    public LoginForm() {\n+        updateForm();\n+\n+        add(layout);\n+\n+        NativeButton login = new NativeButton(\"Login\", event -> login());\n+        add(login, errorMsg);\n+    }\n+\n+    public void setUserNameLabel(String userNameLabelString) {\n+        userLabel = userNameLabelString;\n+        updateForm();\n+    }\n+\n+    public void setPasswordLabel(String pwd) {\n+        pwdLabel = pwd;\n+        updateForm();\n+    }\n+\n+    public void updateForm() {\n+        layout.removeAll();\n+        layout.add(new Span(userLabel), userName);\n+        layout.add(new Span(pwdLabel), password);\n+    }\n+\n+    private void login() {\n+        Optional<Object> authToken = UserService.getInstance()\n+                .authenticate(userName.getValue(), password.getValue());\n+        if (authToken.isPresent()) {\n+            errorMsg.setText(\"Authentication success\");\n+        } else {\n+            errorMsg.setText(\"Authentication failure\");\n+        }\n+    }\n+\n+}\n\ndiff --git a/flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/main/java/com/vaadin/viteapp/LoginFormExporter.java b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/main/java/com/vaadin/viteapp/LoginFormExporter.java\nnew file mode 100644\nindex 00000000000..542a10ea7f4\n--- /dev/null\n+++ b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/main/java/com/vaadin/viteapp/LoginFormExporter.java\n@@ -0,0 +1,20 @@\n+package com.vaadin.viteapp;\n+\n+import com.vaadin.flow.component.WebComponentExporter;\n+import com.vaadin.flow.component.page.Push;\n+import com.vaadin.flow.component.webcomponent.WebComponent;\n+import com.vaadin.flow.shared.ui.Transport;\n+\n+@Push(transport = Transport.WEBSOCKET)\n+public class LoginFormExporter extends WebComponentExporter<LoginForm> {\n+    public LoginFormExporter() {\n+        super(\"login-form\");\n+        addProperty(\"userlbl\", \"\").onChange(LoginForm::setUserNameLabel);\n+        addProperty(\"pwdlbl\", \"\").onChange(LoginForm::setPasswordLabel);\n+    }\n+\n+    @Override\n+    protected void configureInstance(WebComponent<LoginForm> webComponent,\n+            LoginForm form) {\n+    }\n+}\n\ndiff --git a/flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/main/java/com/vaadin/viteapp/UserService.java b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/main/java/com/vaadin/viteapp/UserService.java\nnew file mode 100644\nindex 00000000000..a74e2ec4ba6\n--- /dev/null\n+++ b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/main/java/com/vaadin/viteapp/UserService.java\n@@ -0,0 +1,27 @@\n+package com.vaadin.viteapp;\n+\n+import java.util.Optional;\n+\n+public final class UserService {\n+\n+    private static final UserService INSTANCE = new UserService();\n+\n+    private UserService() {\n+    }\n+\n+    public static UserService getInstance() {\n+        return INSTANCE;\n+    }\n+\n+    public String getName(Object authToken) {\n+        return \"Joe\";\n+    }\n+\n+    public Optional<Object> authenticate(String user, String passwd) {\n+        if (\"admin\".equals(user) && \"admin\".equals(passwd)) {\n+            return Optional.of(new Object());\n+        } else {\n+            return Optional.empty();\n+        }\n+    }\n+}\n\ndiff --git a/flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/main/webapp/basic-component.html b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/main/webapp/basic-component.html\nnew file mode 100644\nindex 00000000000..ab6da8a6997\n--- /dev/null\n+++ b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/main/webapp/basic-component.html\n@@ -0,0 +1,13 @@\n+\n+<!doctype html>\n+<html>\n+<head>\n+  <script src=\"web-component/login-form.js\"></script>\n+</head>\n+<body>\n+  <div>\n+    <login-form userlbl=\"Username\" pwdlbl=\"Password\"></login-form>\n+  </div>\n+</body>\n+</html>\n+\n\ndiff --git a/flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/test/java/com/vaadin/viteapp/BasicComponentIT.java b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/test/java/com/vaadin/viteapp/BasicComponentIT.java\nnew file mode 100644\nindex 00000000000..071c7382da2\n--- /dev/null\n+++ b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-ws/src/test/java/com/vaadin/viteapp/BasicComponentIT.java\n@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2000-2024 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.viteapp;\n+\n+import jakarta.servlet.http.HttpSession;\n+import jakarta.servlet.http.HttpSessionEvent;\n+import jakarta.servlet.http.HttpSessionListener;\n+\n+import java.io.File;\n+\n+import org.eclipse.jetty.ee10.webapp.WebAppContext;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.openqa.selenium.Keys;\n+import org.openqa.selenium.StaleElementReferenceException;\n+\n+import com.vaadin.flow.server.InitParameters;\n+import com.vaadin.flow.testutil.ChromeDeviceTest;\n+\n+public class BasicComponentIT extends ChromeDeviceTest {\n+\n+    private static final String HOTDEPLOY_PROPERTY = \"vaadin.\"\n+            + InitParameters.FRONTEND_HOTDEPLOY;\n+\n+    private Server server;\n+\n+    private WebAppContext context;\n+\n+    private String hotdeploy;\n+\n+    protected HttpSession session;\n+\n+    @Before\n+    public void init() throws Exception {\n+        setup(8888);\n+        getDriver().get(getRootURL());\n+        waitForDevServer();\n+        getDriver().get(getRootURL() + \"/basic-component.html\");\n+    }\n+\n+    @Test\n+    public void session_resynced_webcomponent_is_active() throws Exception {\n+        waitForWebComponent(\"login-form\");\n+        // check if web component works\n+        clickButton();\n+        Assert.assertEquals(\"Authentication failure\",\n+                getAuthenticationResult());\n+\n+        // simulate expired session by invalidating current session\n+        session.invalidate();\n+        waitForWebComponent(\"login-form\");\n+\n+        // init request to resynchronize expired session and recreate components\n+        clickButton();\n+\n+        try {\n+            // it seems WebDriver needs also sync to new session\n+            setUsername(\"\");\n+        } catch (StaleElementReferenceException ex) {\n+            // NOP\n+        }\n+\n+        // check if web component works again\n+        setUsername(\"admin\");\n+        setPassword(\"admin\");\n+        clickButton();\n+        Assert.assertEquals(\"Authentication success\",\n+                getAuthenticationResult());\n+    }\n+\n+    private void clickButton() {\n+        waitUntil(d -> $(\"login-form\").first().$(\"button\").first()).click();\n+    }\n+\n+    private String getAuthenticationResult() {\n+        return $(\"login-form\").first().$(\"div\").last().getText();\n+    }\n+\n+    private void setUsername(String value) {\n+        $(\"login-form\").first().$(\"input\").first().sendKeys(value + Keys.TAB);\n+    }\n+\n+    private void setPassword(String value) {\n+        $(\"login-form\").first().$(\"input\").last().sendKeys(value + Keys.TAB);\n+    }\n+\n+    @Override\n+    public void checkIfServerAvailable() {\n+        // NOP\n+    }\n+\n+    public void setup(int port) throws Exception {\n+        hotdeploy = System.getProperty(HOTDEPLOY_PROPERTY);\n+        System.setProperty(HOTDEPLOY_PROPERTY, \"true\");\n+        server = new Server();\n+        try (ServerConnector connector = new ServerConnector(server)) {\n+            connector.setPort(port);\n+            server.setConnectors(new ServerConnector[] { connector });\n+        }\n+\n+        File[] warDirs = new File(\"target\")\n+                .listFiles(file -> file.getName().matches(\n+                        \"vite-embedded-webcomponent-resync-.*-SNAPSHOT\\\\.war\"));\n+        String warfile = \"target/\" + warDirs[0].getName();\n+\n+        context = new WebAppContext(warfile, \"/\");\n+\n+        // store session id to be able to invalidate it during test\n+        context.getSessionHandler().addEventListener(new HttpSessionListener() {\n+            @Override\n+            public void sessionCreated(HttpSessionEvent httpSessionEvent) {\n+                session = httpSessionEvent.getSession();\n+            }\n+        });\n+\n+        server.setHandler(context);\n+        server.start();\n+    }\n+\n+    @After\n+    public void shutdown() throws Exception {\n+        try {\n+            context.stop();\n+            context.destroy();\n+            context = null;\n+        } finally {\n+            server.stop();\n+            if (hotdeploy == null) {\n+                System.clearProperty(HOTDEPLOY_PROPERTY);\n+            } else {\n+                System.setProperty(HOTDEPLOY_PROPERTY, hotdeploy);\n+            }\n+        }\n+    }\n+}\n\ndiff --git a/flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/.gitignore b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/.gitignore\nnew file mode 100644\nindex 00000000000..3dee652a777\n--- /dev/null\n+++ b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/.gitignore\n@@ -0,0 +1 @@\n+!**/index.html\n\ndiff --git a/flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/pom.xml b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/pom.xml\nnew file mode 100644\nindex 00000000000..a1e0d5eb372\n--- /dev/null\n+++ b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/pom.xml\n@@ -0,0 +1,105 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <!-- Vaadin project from https://start.vaadin.com/project/null -->\n+    <parent>\n+        <groupId>com.vaadin</groupId>\n+        <artifactId>test-frontend</artifactId>\n+        <version>24.6-SNAPSHOT</version>\n+    </parent>\n+    <artifactId>vite-embedded-webcomponent-resync-wsxhr</artifactId>\n+    <name>Vite embedded app - session resync with websocket XHR PUSH</name>\n+    <packaging>war</packaging>\n+\n+    <dependencyManagement>\n+        <dependencies>\n+            <dependency>\n+                <groupId>com.vaadin</groupId>\n+                <artifactId>flow-bom</artifactId>\n+                <version>${project.version}</version>\n+                <type>pom</type>\n+                <scope>import</scope>\n+            </dependency>\n+        </dependencies>\n+    </dependencyManagement>\n+\n+    <dependencies>\n+        <!-- Project dependencies -->\n+        <dependency>\n+            <groupId>com.vaadin</groupId>\n+            <artifactId>vaadin-dev-server</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.vaadin</groupId>\n+            <artifactId>flow-test-lumo</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.eclipse.jetty</groupId>\n+            <artifactId>jetty-server</artifactId>\n+            <version>${jetty.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.eclipse.jetty.ee10</groupId>\n+            <artifactId>jetty-ee10-webapp</artifactId>\n+            <version>${jetty.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.eclipse.jetty</groupId>\n+            <artifactId>jetty-http</artifactId>\n+            <version>${jetty.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.eclipse.jetty.ee10</groupId>\n+            <artifactId>jetty-ee10-annotations</artifactId>\n+            <version>${jetty.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.eclipse.jetty</groupId>\n+            <artifactId>jetty-util</artifactId>\n+            <version>${jetty.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.eclipse.jetty.ee10</groupId>\n+            <artifactId>jetty-ee10-servlet</artifactId>\n+            <version>${jetty.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.eclipse.jetty.ee10.websocket</groupId>\n+            <artifactId>jetty-ee10-websocket-jakarta-server</artifactId>\n+            <version>${jetty.version}</version>\n+        </dependency>\n+\n+        <!-- Fix dependency convergence issue in Jetty artifacts -->\n+        <dependency>\n+            <groupId>org.eclipse.jetty.ee10</groupId>\n+            <artifactId>jetty-ee10-plus</artifactId>\n+            <version>${jetty.version}</version>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>jakarta.annotation</groupId>\n+                    <artifactId>jakarta.annotation-api</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>com.vaadin</groupId>\n+                <artifactId>flow-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>prepare-frontend</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+</project>\n\ndiff --git a/flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/main/frontend/index.html b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/main/frontend/index.html\nnew file mode 100644\nindex 00000000000..d36e593475c\n--- /dev/null\n+++ b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/main/frontend/index.html\n@@ -0,0 +1,23 @@\n+<!DOCTYPE html>\n+<!--\n+This file is auto-generated by Vaadin.\n+-->\n+\n+<html>\n+<head>\n+  <meta charset=\"UTF-8\" />\n+  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n+  <style>\n+    body, #outlet {\n+      height: 100vh;\n+      width: 100%;\n+      margin: 0;\n+    }\n+  </style>\n+  <!-- index.ts is included here automatically (either by the dev server or during the build) -->\n+</head>\n+<body>\n+  <!-- This outlet div is where the views are rendered -->\n+  <div id=\"outlet\"></div>\n+</body>\n+</html>\n\ndiff --git a/flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/main/frontend/web-component.html b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/main/frontend/web-component.html\nnew file mode 100644\nindex 00000000000..fd598bbbadf\n--- /dev/null\n+++ b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/main/frontend/web-component.html\n@@ -0,0 +1,10 @@\n+<!DOCTYPE html>\n+<!--\n+This file is auto-generated by Vaadin.\n+-->\n+\n+<html>\n+  <head>\n+    <!-- vaadin-web-component.ts is included here automatically (either by the dev server or during the build) -->\n+  </head>\n+</html>\n\ndiff --git a/flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/main/java/com/vaadin/viteapp/LoginForm.java b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/main/java/com/vaadin/viteapp/LoginForm.java\nnew file mode 100644\nindex 00000000000..79484427374\n--- /dev/null\n+++ b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/main/java/com/vaadin/viteapp/LoginForm.java\n@@ -0,0 +1,57 @@\n+package com.vaadin.viteapp;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.component.html.Input;\n+import com.vaadin.flow.component.html.NativeButton;\n+import com.vaadin.flow.component.html.Span;\n+import com.vaadin.flow.function.SerializableRunnable;\n+\n+public class LoginForm extends Div {\n+    private Input userName = new Input();\n+    private Input password = new Input();\n+    private Div errorMsg = new Div();\n+    private String userLabel;\n+    private String pwdLabel;\n+    private Div layout = new Div();\n+    private List<SerializableRunnable> loginListeners = new CopyOnWriteArrayList<>();\n+\n+    public LoginForm() {\n+        updateForm();\n+\n+        add(layout);\n+\n+        NativeButton login = new NativeButton(\"Login\", event -> login());\n+        add(login, errorMsg);\n+    }\n+\n+    public void setUserNameLabel(String userNameLabelString) {\n+        userLabel = userNameLabelString;\n+        updateForm();\n+    }\n+\n+    public void setPasswordLabel(String pwd) {\n+        pwdLabel = pwd;\n+        updateForm();\n+    }\n+\n+    public void updateForm() {\n+        layout.removeAll();\n+        layout.add(new Span(userLabel), userName);\n+        layout.add(new Span(pwdLabel), password);\n+    }\n+\n+    private void login() {\n+        Optional<Object> authToken = UserService.getInstance()\n+                .authenticate(userName.getValue(), password.getValue());\n+        if (authToken.isPresent()) {\n+            errorMsg.setText(\"Authentication success\");\n+        } else {\n+            errorMsg.setText(\"Authentication failure\");\n+        }\n+    }\n+\n+}\n\ndiff --git a/flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/main/java/com/vaadin/viteapp/LoginFormExporter.java b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/main/java/com/vaadin/viteapp/LoginFormExporter.java\nnew file mode 100644\nindex 00000000000..8123c8c80fb\n--- /dev/null\n+++ b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/main/java/com/vaadin/viteapp/LoginFormExporter.java\n@@ -0,0 +1,20 @@\n+package com.vaadin.viteapp;\n+\n+import com.vaadin.flow.component.WebComponentExporter;\n+import com.vaadin.flow.component.page.Push;\n+import com.vaadin.flow.component.webcomponent.WebComponent;\n+import com.vaadin.flow.shared.ui.Transport;\n+\n+@Push(transport = Transport.WEBSOCKET_XHR)\n+public class LoginFormExporter extends WebComponentExporter<LoginForm> {\n+    public LoginFormExporter() {\n+        super(\"login-form\");\n+        addProperty(\"userlbl\", \"\").onChange(LoginForm::setUserNameLabel);\n+        addProperty(\"pwdlbl\", \"\").onChange(LoginForm::setPasswordLabel);\n+    }\n+\n+    @Override\n+    protected void configureInstance(WebComponent<LoginForm> webComponent,\n+            LoginForm form) {\n+    }\n+}\n\ndiff --git a/flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/main/java/com/vaadin/viteapp/UserService.java b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/main/java/com/vaadin/viteapp/UserService.java\nnew file mode 100644\nindex 00000000000..a74e2ec4ba6\n--- /dev/null\n+++ b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/main/java/com/vaadin/viteapp/UserService.java\n@@ -0,0 +1,27 @@\n+package com.vaadin.viteapp;\n+\n+import java.util.Optional;\n+\n+public final class UserService {\n+\n+    private static final UserService INSTANCE = new UserService();\n+\n+    private UserService() {\n+    }\n+\n+    public static UserService getInstance() {\n+        return INSTANCE;\n+    }\n+\n+    public String getName(Object authToken) {\n+        return \"Joe\";\n+    }\n+\n+    public Optional<Object> authenticate(String user, String passwd) {\n+        if (\"admin\".equals(user) && \"admin\".equals(passwd)) {\n+            return Optional.of(new Object());\n+        } else {\n+            return Optional.empty();\n+        }\n+    }\n+}\n\ndiff --git a/flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/main/webapp/basic-component.html b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/main/webapp/basic-component.html\nnew file mode 100644\nindex 00000000000..ab6da8a6997\n--- /dev/null\n+++ b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/main/webapp/basic-component.html\n@@ -0,0 +1,13 @@\n+\n+<!doctype html>\n+<html>\n+<head>\n+  <script src=\"web-component/login-form.js\"></script>\n+</head>\n+<body>\n+  <div>\n+    <login-form userlbl=\"Username\" pwdlbl=\"Password\"></login-form>\n+  </div>\n+</body>\n+</html>\n+\n\ndiff --git a/flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/test/java/com/vaadin/viteapp/BasicComponentIT.java b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/test/java/com/vaadin/viteapp/BasicComponentIT.java\nnew file mode 100644\nindex 00000000000..071c7382da2\n--- /dev/null\n+++ b/flow-tests/test-frontend/vite-embedded-webcomponent-resync-wsxhr/src/test/java/com/vaadin/viteapp/BasicComponentIT.java\n@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2000-2024 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.viteapp;\n+\n+import jakarta.servlet.http.HttpSession;\n+import jakarta.servlet.http.HttpSessionEvent;\n+import jakarta.servlet.http.HttpSessionListener;\n+\n+import java.io.File;\n+\n+import org.eclipse.jetty.ee10.webapp.WebAppContext;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.openqa.selenium.Keys;\n+import org.openqa.selenium.StaleElementReferenceException;\n+\n+import com.vaadin.flow.server.InitParameters;\n+import com.vaadin.flow.testutil.ChromeDeviceTest;\n+\n+public class BasicComponentIT extends ChromeDeviceTest {\n+\n+    private static final String HOTDEPLOY_PROPERTY = \"vaadin.\"\n+            + InitParameters.FRONTEND_HOTDEPLOY;\n+\n+    private Server server;\n+\n+    private WebAppContext context;\n+\n+    private String hotdeploy;\n+\n+    protected HttpSession session;\n+\n+    @Before\n+    public void init() throws Exception {\n+        setup(8888);\n+        getDriver().get(getRootURL());\n+        waitForDevServer();\n+        getDriver().get(getRootURL() + \"/basic-component.html\");\n+    }\n+\n+    @Test\n+    public void session_resynced_webcomponent_is_active() throws Exception {\n+        waitForWebComponent(\"login-form\");\n+        // check if web component works\n+        clickButton();\n+        Assert.assertEquals(\"Authentication failure\",\n+                getAuthenticationResult());\n+\n+        // simulate expired session by invalidating current session\n+        session.invalidate();\n+        waitForWebComponent(\"login-form\");\n+\n+        // init request to resynchronize expired session and recreate components\n+        clickButton();\n+\n+        try {\n+            // it seems WebDriver needs also sync to new session\n+            setUsername(\"\");\n+        } catch (StaleElementReferenceException ex) {\n+            // NOP\n+        }\n+\n+        // check if web component works again\n+        setUsername(\"admin\");\n+        setPassword(\"admin\");\n+        clickButton();\n+        Assert.assertEquals(\"Authentication success\",\n+                getAuthenticationResult());\n+    }\n+\n+    private void clickButton() {\n+        waitUntil(d -> $(\"login-form\").first().$(\"button\").first()).click();\n+    }\n+\n+    private String getAuthenticationResult() {\n+        return $(\"login-form\").first().$(\"div\").last().getText();\n+    }\n+\n+    private void setUsername(String value) {\n+        $(\"login-form\").first().$(\"input\").first().sendKeys(value + Keys.TAB);\n+    }\n+\n+    private void setPassword(String value) {\n+        $(\"login-form\").first().$(\"input\").last().sendKeys(value + Keys.TAB);\n+    }\n+\n+    @Override\n+    public void checkIfServerAvailable() {\n+        // NOP\n+    }\n+\n+    public void setup(int port) throws Exception {\n+        hotdeploy = System.getProperty(HOTDEPLOY_PROPERTY);\n+        System.setProperty(HOTDEPLOY_PROPERTY, \"true\");\n+        server = new Server();\n+        try (ServerConnector connector = new ServerConnector(server)) {\n+            connector.setPort(port);\n+            server.setConnectors(new ServerConnector[] { connector });\n+        }\n+\n+        File[] warDirs = new File(\"target\")\n+                .listFiles(file -> file.getName().matches(\n+                        \"vite-embedded-webcomponent-resync-.*-SNAPSHOT\\\\.war\"));\n+        String warfile = \"target/\" + warDirs[0].getName();\n+\n+        context = new WebAppContext(warfile, \"/\");\n+\n+        // store session id to be able to invalidate it during test\n+        context.getSessionHandler().addEventListener(new HttpSessionListener() {\n+            @Override\n+            public void sessionCreated(HttpSessionEvent httpSessionEvent) {\n+                session = httpSessionEvent.getSession();\n+            }\n+        });\n+\n+        server.setHandler(context);\n+        server.start();\n+    }\n+\n+    @After\n+    public void shutdown() throws Exception {\n+        try {\n+            context.stop();\n+            context.destroy();\n+            context = null;\n+        } finally {\n+            server.stop();\n+            if (hotdeploy == null) {\n+                System.clearProperty(HOTDEPLOY_PROPERTY);\n+            } else {\n+                System.setProperty(HOTDEPLOY_PROPERTY, hotdeploy);\n+            }\n+        }\n+    }\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20397",
    "pr_id": 20397,
    "issue_id": 19527,
    "repo": "vaadin/flow",
    "problem_statement": "Include `.scss` and `.sass` in `stats.json` hashes\n### Describe your motivation\r\n\r\nWe use SASS (`.scss`) stylesheets under `/frontend/styles`. These are imported and fully supported by Vite. It seems that the `vaadin:stats` Vite plugin does not generate hashes for them and store in `stats.json#frontendHashes`. Because of this, even with `prod.bundle`, the Vaadin Maven/Gradle plugins think there are new files, and thus, do not use the existing bundle.\r\n\r\n### Describe the solution you'd like\r\n\r\n`const projectFileExtensions = ['.js', '.js.map', '.ts', '.ts.map', '.tsx', '.tsx.map', '.css', '.css.map'];` needs to also support `.scss` and `.sass`.\r\n\r\nIs there a reason those file extensions are not already included? If not, happy to contribute this simple PR.\r\n\r\n### Describe alternatives you've considered\r\n\r\nI could write a Vite plugin that computes and adds the hashes.\r\n\r\nI could create a Gradle task that compiles the SASS files and outputs them to `/frontend/styles`.\r\n\r\nBoth options seem messy.\r\n\r\n### Additional context\r\n\r\nI discovered this while investigating ways to speed up our builds, in lieu of Vaadin's proper Gradle caching support. https://github.com/vaadin/flow/issues/17941\r\n\r\nThis idea came from our recent endeavour to speed up builds. Relevant issues:\r\n* https://github.com/vaadin/flow/issues/17941\r\n* https://github.com/gradle/gradle/issues/27696\r\n* https://github.com/vaadin/flow/issues/19527\r\n* https://github.com/vaadin/flow/issues/19528\r\n* https://github.com/vaadin/docs/issues/3477\r\n* https://github.com/vaadin/flow/issues/19543\r\n\r\n",
    "issue_word_count": 240,
    "test_files_count": 7,
    "non_test_files_count": 13,
    "pr_changed_files": [
      "flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildDevBundleMojo.java",
      "flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/GradlePluginAdapter.kt",
      "flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/PrepareFrontendInputProperties.kt",
      "flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinFlowPluginExtension.kt",
      "flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/FlowModeAbstractMojo.java",
      "flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/BuildFrontendUtil.java",
      "flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/PluginAdapterBase.java",
      "flow-server/src/main/java/com/vaadin/flow/server/InitParameters.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/Options.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdateVite.java",
      "flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java",
      "flow-server/src/main/resources/vite.generated.ts",
      "flow-server/src/test/java/com/vaadin/flow/server/DeploymentConfigurationFactoryTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdateViteTest.java",
      "flow-tests/test-express-build/test-dev-bundle-frontend-add-on/pom.xml",
      "flow-tests/test-express-build/test-dev-bundle-frontend-add-on/src/main/frontend/styles/my-sass.scss",
      "flow-tests/test-express-build/test-dev-bundle-frontend-add-on/src/main/java/com/vaadin/flow/frontend/DevBundleCssImportView.java",
      "flow-tests/test-express-build/test-dev-bundle-frontend-add-on/src/test/java/com/vaadin/flow/frontend/DevBundleCssImportIT.java",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync/pom.xml",
      "vaadin-dev-server/src/main/java/com/vaadin/base/devserver/startup/DevModeInitializer.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/server/DeploymentConfigurationFactoryTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdateViteTest.java",
      "flow-tests/test-express-build/test-dev-bundle-frontend-add-on/pom.xml",
      "flow-tests/test-express-build/test-dev-bundle-frontend-add-on/src/main/frontend/styles/my-sass.scss",
      "flow-tests/test-express-build/test-dev-bundle-frontend-add-on/src/main/java/com/vaadin/flow/frontend/DevBundleCssImportView.java",
      "flow-tests/test-express-build/test-dev-bundle-frontend-add-on/src/test/java/com/vaadin/flow/frontend/DevBundleCssImportIT.java",
      "flow-tests/test-frontend/vite-embedded-webcomponent-resync/pom.xml"
    ],
    "base_commit": "4a08a103335015b1495d13efb76293d33be724d5",
    "head_commit": "00cb72b94ececb0f055e608c4c90f9615c212c6a",
    "repo_url": "https://github.com/vaadin/flow/pull/20397",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20397",
    "dockerfile": "",
    "pr_merged_at": "2024-11-11T12:41:15.000Z",
    "patch": "diff --git a/flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildDevBundleMojo.java b/flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildDevBundleMojo.java\nindex 6248509201f..ede91310d0d 100644\n--- a/flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildDevBundleMojo.java\n+++ b/flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildDevBundleMojo.java\n@@ -21,6 +21,7 @@\n import java.net.URISyntaxException;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n import java.util.function.Consumer;\n@@ -467,6 +468,11 @@ public String applicationIdentifier() {\n         return project.getGroupId() + \":\" + project.getArtifactId();\n     }\n \n+    @Override\n+    public List<String> frontendExtraFileExtensions() {\n+        return Collections.emptyList();\n+    }\n+\n     @Override\n     public boolean checkRuntimeDependency(String groupId, String artifactId,\n             Consumer<String> missingDependencyMessageConsumer) {\n\ndiff --git a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/GradlePluginAdapter.kt b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/GradlePluginAdapter.kt\nindex 84ea3e5add4..745ca936ec7 100644\n--- a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/GradlePluginAdapter.kt\n+++ b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/GradlePluginAdapter.kt\n@@ -241,4 +241,7 @@ internal class GradlePluginAdapter(\n         }\n         return dependencyAbsent\n     }\n+\n+    override fun frontendExtraFileExtensions(): List<String> =\n+        config.frontendExtraFileExtensions.get()\n }\n\ndiff --git a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/PrepareFrontendInputProperties.kt b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/PrepareFrontendInputProperties.kt\nindex f5467c90f2e..f7b8e78f053 100644\n--- a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/PrepareFrontendInputProperties.kt\n+++ b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/PrepareFrontendInputProperties.kt\n@@ -139,6 +139,9 @@ internal class PrepareFrontendInputProperties(private val config: PluginEffectiv\n     @Input\n     public fun getReactEnable(): Provider<Boolean> = config.reactEnable\n \n+    @Input\n+    public fun getFrontendExtraFileExtensions(): ListProperty<String> = config.frontendExtraFileExtensions\n+\n     @Input\n     public fun getApplicationIdentifier(): Provider<String> = config.applicationIdentifier\n \n\ndiff --git a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinFlowPluginExtension.kt b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinFlowPluginExtension.kt\nindex 1dfcf839177..93380385efa 100644\n--- a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinFlowPluginExtension.kt\n+++ b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinFlowPluginExtension.kt\n@@ -282,6 +282,16 @@ public abstract class VaadinFlowPluginExtension @Inject constructor(private val\n \n     public abstract val applicationIdentifier: Property<String>\n \n+    /**\n+     * The list of extra file extensions that are considered project files.\n+     * Hashes are calculated for these files as part of detecting if a new\n+     * bundle should be generated.\n+     */\n+    public abstract val frontendExtraFileExtensions: ListProperty<String>\n+\n+    /**\n+     * Whether to include web component npm packages in packages.json\n+     */\n     public abstract val npmExcludeWebComponents: Property<Boolean>\n \n     public fun filterClasspath(@DelegatesTo(value = ClasspathFilter::class, strategy = Closure.DELEGATE_FIRST) block: Closure<*>) {\n@@ -441,6 +451,10 @@ public class PluginEffectiveConfiguration(\n             ))\n         .overrideWithSystemProperty(\"vaadin.${InitParameters.APPLICATION_IDENTIFIER}\")\n \n+    // TODO: Possibly get value from system param InitParameters.FRONTEND_EXTRA_EXTENSIONS\n+    public val frontendExtraFileExtensions: ListProperty<String> = extension.frontendExtraFileExtensions\n+            .convention(listOf())\n+\n     public val npmExcludeWebComponents: Provider<Boolean> = extension\n             .npmExcludeWebComponents.convention(false)\n \n@@ -505,6 +519,7 @@ public class PluginEffectiveConfiguration(\n             \"frontendHotdeploy=${frontendHotdeploy.get()},\" +\n             \"reactEnable=${reactEnable.get()},\" +\n             \"cleanFrontendFiles=${cleanFrontendFiles.get()},\" +\n+            \"frontendExtraFileExtensions=${frontendExtraFileExtensions.get()},\" +\n             \"npmExcludeWebComponents=${npmExcludeWebComponents.get()}\" +\n             \")\"\n     public companion object {\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/FlowModeAbstractMojo.java b/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/FlowModeAbstractMojo.java\nindex 62bc3d37fc0..c4dc8291a3e 100644\n--- a/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/FlowModeAbstractMojo.java\n+++ b/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/FlowModeAbstractMojo.java\n@@ -21,6 +21,7 @@\n import java.nio.charset.StandardCharsets;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n import java.util.function.Function;\n@@ -237,6 +238,22 @@ public abstract class FlowModeAbstractMojo extends AbstractMojo\n     @Parameter(property = InitParameters.NPM_EXCLUDE_WEB_COMPONENTS, defaultValue = \"false\")\n     private boolean npmExcludeWebComponents;\n \n+    /**\n+     * Parameter for adding file extensions to handle during frontend tasks.\n+     * <p>\n+     * From the commandline use comma separated list\n+     * {@code -Ddevmode.frontendExtraFileExtensions=\"svg,ico\"}\n+     * <p>\n+     * In plugin configuration use comma separated values\n+     *\n+     * <configuration>\n+     * <frontendExtraFileExtensions>svg,ico</frontendExtraFileExtensions>\n+     * </configuration>\n+     *\n+     */\n+    @Parameter(property = InitParameters.FRONTEND_EXTRA_EXTENSIONS, defaultValue = \"${null}\")\n+    private List<String> frontendExtraFileExtensions;\n+\n     /**\n      * Identifier for the application.\n      * <p>\n@@ -574,6 +591,15 @@ public String applicationIdentifier() {\n                 StandardCharsets.UTF_8);\n     }\n \n+    @Override\n+    public List<String> frontendExtraFileExtensions() {\n+        if (frontendExtraFileExtensions != null) {\n+            return frontendExtraFileExtensions;\n+        }\n+\n+        return Collections.emptyList();\n+    }\n+\n     @Override\n     public boolean isNpmExcludeWebComponents() {\n         return npmExcludeWebComponents;\n\ndiff --git a/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/BuildFrontendUtil.java b/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/BuildFrontendUtil.java\nindex dd8c5679207..e496e70fda9 100644\n--- a/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/BuildFrontendUtil.java\n+++ b/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/BuildFrontendUtil.java\n@@ -33,6 +33,7 @@\n import java.util.jar.Attributes;\n import java.util.jar.JarFile;\n import java.util.jar.Manifest;\n+import java.util.stream.Collectors;\n \n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n@@ -74,6 +75,7 @@\n import static com.vaadin.flow.server.Constants.NPM_TOKEN;\n import static com.vaadin.flow.server.Constants.PROJECT_FRONTEND_GENERATED_DIR_TOKEN;\n import static com.vaadin.flow.server.InitParameters.APPLICATION_IDENTIFIER;\n+import static com.vaadin.flow.server.InitParameters.FRONTEND_EXTRA_EXTENSIONS;\n import static com.vaadin.flow.server.InitParameters.FRONTEND_HOTDEPLOY;\n import static com.vaadin.flow.server.InitParameters.NODE_DOWNLOAD_ROOT;\n import static com.vaadin.flow.server.InitParameters.NODE_VERSION;\n@@ -167,6 +169,8 @@ public static void prepareFrontend(PluginAdapterBase adapter)\n                 .withHomeNodeExecRequired(adapter.requireHomeNodeExec())\n                 .setJavaResourceFolder(adapter.javaResourceFolder())\n                 .withProductionMode(false).withReact(adapter.isReactEnabled())\n+                .withFrontendExtraFileExtensions(\n+                        adapter.frontendExtraFileExtensions())\n                 .withNpmExcludeWebComponents(\n                         adapter.isNpmExcludeWebComponents());\n \n@@ -271,6 +275,12 @@ public static File propagateBuildInfo(PluginAdapterBase adapter) {\n                     adapter.isNpmExcludeWebComponents());\n         }\n \n+        if (!adapter.frontendExtraFileExtensions().isEmpty()) {\n+            buildInfo.put(FRONTEND_EXTRA_EXTENSIONS,\n+                    adapter.frontendExtraFileExtensions().stream()\n+                            .collect(Collectors.joining(\",\")));\n+        }\n+\n         try {\n             FileUtils.forceMkdir(token.getParentFile());\n             FileIOUtils.writeIfChanged(token,\n@@ -415,6 +425,8 @@ public static void runDevBuildNodeUpdater(PluginAdapterBuild adapter)\n                     .skipDevBundleBuild(adapter.skipDevBundleBuild())\n                     .withCompressBundle(adapter.compressBundle())\n                     .withReact(adapter.isReactEnabled())\n+                    .withFrontendExtraFileExtensions(\n+                            adapter.frontendExtraFileExtensions())\n                     .withNpmExcludeWebComponents(\n                             adapter.isNpmExcludeWebComponents());\n             new NodeTasks(options).execute();\n@@ -750,6 +762,7 @@ public static void updateBuildFile(PluginAdapterBuild adapter,\n             buildInfo.remove(NODE_DOWNLOAD_ROOT);\n             buildInfo.remove(FRONTEND_TOKEN);\n             buildInfo.remove(FRONTEND_HOTDEPLOY);\n+            buildInfo.remove(FRONTEND_EXTRA_EXTENSIONS);\n             buildInfo.remove(InitParameters.SERVLET_PARAMETER_ENABLE_PNPM);\n             buildInfo.remove(InitParameters.SERVLET_PARAMETER_ENABLE_BUN);\n             buildInfo.remove(InitParameters.CI_BUILD);\n\ndiff --git a/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/PluginAdapterBase.java b/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/PluginAdapterBase.java\nindex 4c431d0b4a7..d084c6ca631 100644\n--- a/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/PluginAdapterBase.java\n+++ b/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/PluginAdapterBase.java\n@@ -338,6 +338,16 @@ default Lookup createLookup(ClassFinder classFinder) {\n      */\n     String applicationIdentifier();\n \n+    /**\n+     * Get the list of project file extensions.\n+     * <p>\n+     * File extensions are given with or without . prefix eg \"png\" and \".png\"\n+     * are both accepted.\n+     *\n+     * @return list of project file extensions\n+     */\n+    List<String> frontendExtraFileExtensions();\n+\n     /**\n      * Whether to include web component npm packages in packages.json.\n      *\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/InitParameters.java b/flow-server/src/main/java/com/vaadin/flow/server/InitParameters.java\nindex 6f0a8df3bc0..ca0e346acfa 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/InitParameters.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/InitParameters.java\n@@ -179,6 +179,12 @@ public class InitParameters implements Serializable {\n      */\n     public static final String APPLICATION_PARAMETER_DEVMODE_ENABLE_COMPONENT_TRACKER = \"devmode.componentTracker.enabled\";\n \n+    /**\n+     * Configuration parameter name for adding extra file extensions for stats\n+     * bundle to generate hashes for.\n+     */\n+    public static final String FRONTEND_EXTRA_EXTENSIONS = \"devmode.frontendExtraFileExtensions\";\n+\n     /**\n      * I18N provider property.\n      */\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/Options.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/Options.java\nindex 124bb597954..7d87fbc8925 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/Options.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/Options.java\n@@ -4,6 +4,7 @@\n import java.io.Serializable;\n import java.net.URI;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.Objects;\n import java.util.Set;\n@@ -84,6 +85,8 @@ public class Options implements Serializable {\n \n     private boolean compressBundle = true;\n \n+    private List<String> frontendExtraFileExtensions = null;\n+\n     /**\n      * The node.js version to be used when node.js is installed automatically by\n      * Vaadin, for example <code>\"v16.0.0\"</code>. Defaults to\n@@ -970,6 +973,28 @@ public boolean isCleanOldGeneratedFiles() {\n         return cleanOldGeneratedFiles;\n     }\n \n+    /**\n+     * Sets the extra file extensions used in the project.\n+     *\n+     * @param frontendExtraFileExtensions\n+     *            the file extensions to add for the project\n+     * @return this builder\n+     */\n+    public Options withFrontendExtraFileExtensions(\n+            List<String> frontendExtraFileExtensions) {\n+        this.frontendExtraFileExtensions = frontendExtraFileExtensions;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the project file extensions.\n+     *\n+     * @return the project file extensions\n+     */\n+    public List<String> getFrontendExtraFileExtensions() {\n+        return frontendExtraFileExtensions;\n+    }\n+\n     /**\n      * Sets whether to exclude web component npm packages in packages.json.\n      *\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdateVite.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdateVite.java\nindex e76b2e62f3d..2c3060adae5 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdateVite.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdateVite.java\n@@ -22,7 +22,11 @@\n import java.io.UncheckedIOException;\n import java.net.URL;\n import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n+import java.util.stream.Collectors;\n \n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n@@ -127,7 +131,9 @@ private void createGeneratedConfig() throws IOException {\n                 .replace(\"#webComponentTags#\",\n                         webComponentTags == null || webComponentTags.isEmpty()\n                                 ? \"\"\n-                                : String.join(\";\", webComponentTags));\n+                                : String.join(\";\", webComponentTags))\n+                .replace(\"#frontendExtraFileExtensions#\",\n+                        getFrontendExtraFileExtensions());\n         template = updateFileSystemRouterVitePlugin(template);\n \n         FileIOUtils.writeIfChanged(generatedConfigFile, template);\n@@ -135,6 +141,19 @@ private void createGeneratedConfig() throws IOException {\n                 generatedConfigFile);\n     }\n \n+    private String getFrontendExtraFileExtensions() {\n+        Optional<List<String>> frontendExtraFileExtensions = Optional\n+                .ofNullable(options.getFrontendExtraFileExtensions());\n+        if (frontendExtraFileExtensions.isPresent()\n+                && frontendExtraFileExtensions.get().size() > 0) {\n+            return frontendExtraFileExtensions.get().stream()\n+                    .map(ext -> ext.replace(\"'\", \"\\\\'\")).map(ext -> ext.trim())\n+                    .map(ext -> ext.startsWith(\".\") ? ext : \".\" + ext)\n+                    .collect(Collectors.joining(\"', '\", \", '\", \"'\"));\n+        }\n+        return \"\";\n+    }\n+\n     private String updateFileSystemRouterVitePlugin(String template) {\n         if (options.isReactEnabled() && FrontendUtils.isHillaUsed(\n                 options.getFrontendDirectory(), options.getClassFinder())) {\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java b/flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java\nindex 5c7b44a2381..ce9505e9f64 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java\n@@ -188,6 +188,11 @@ protected Map<String, String> getConfigParametersUsingTokenData(\n                     String.valueOf(buildInfo.getBoolean(PREMIUM_FEATURES)));\n         }\n \n+        if (buildInfo.hasKey(InitParameters.FRONTEND_EXTRA_EXTENSIONS)) {\n+            params.put(InitParameters.FRONTEND_EXTRA_EXTENSIONS, buildInfo\n+                    .getString(InitParameters.FRONTEND_EXTRA_EXTENSIONS));\n+        }\n+\n         if (buildInfo.hasKey(NPM_EXCLUDE_WEB_COMPONENTS)) {\n             params.put(NPM_EXCLUDE_WEB_COMPONENTS, String\n                     .valueOf(buildInfo.getBoolean(NPM_EXCLUDE_WEB_COMPONENTS)));\n\ndiff --git a/flow-server/src/main/resources/vite.generated.ts b/flow-server/src/main/resources/vite.generated.ts\nindex c5e59f6f726..7d323d8a9bc 100644\n--- a/flow-server/src/main/resources/vite.generated.ts\n+++ b/flow-server/src/main/resources/vite.generated.ts\n@@ -298,7 +298,7 @@ function statsExtracterPlugin(): PluginOption {\n \n       const frontendFiles: Record<string, string> = {};\n \n-      const projectFileExtensions = ['.js', '.js.map', '.ts', '.ts.map', '.tsx', '.tsx.map', '.css', '.css.map'];\n+      const projectFileExtensions = ['.js', '.js.map', '.ts', '.ts.map', '.tsx', '.tsx.map', '.css', '.css.map'#frontendExtraFileExtensions#];\n \n       const isThemeComponentsResource = (id: string) =>\n           id.startsWith(themeOptions.frontendGeneratedFolder.replace(/\\\\/g, '/'))\n\ndiff --git a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/startup/DevModeInitializer.java b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/startup/DevModeInitializer.java\nindex 02665d9c1fc..6b7da24ee24 100644\n--- a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/startup/DevModeInitializer.java\n+++ b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/startup/DevModeInitializer.java\n@@ -266,13 +266,14 @@ public static DevModeHandler initDevModeHandler(Set<Class<?>> classes,\n         File frontendGeneratedFolder = new File(frontendGeneratedFolderName);\n         File jarFrontendResourcesFolder = new File(frontendGeneratedFolder,\n                 FrontendUtils.JAR_RESOURCES_FOLDER);\n-        JsonObject tokenFileData = Json.createObject();\n         Mode mode = config.getMode();\n         boolean reactEnable = config.getBooleanProperty(REACT_ENABLE,\n                 FrontendUtils\n                         .isReactRouterRequired(options.getFrontendDirectory()));\n+\n         boolean npmExcludeWebComponents = config\n                 .getBooleanProperty(NPM_EXCLUDE_WEB_COMPONENTS, false);\n+\n         options.enablePackagesUpdate(true)\n                 .useByteCodeScanner(useByteCodeScanner)\n                 .withFrontendGeneratedFolder(frontendGeneratedFolder)\n@@ -282,7 +283,6 @@ public static DevModeHandler initDevModeHandler(Set<Class<?>> classes,\n                         Constants.LOCAL_FRONTEND_RESOURCES_PATH))\n                 .enableImportsUpdate(true)\n                 .withRunNpmInstall(mode == Mode.DEVELOPMENT_FRONTEND_LIVERELOAD)\n-                .populateTokenFileData(tokenFileData)\n                 .withEmbeddableWebComponents(true).withEnablePnpm(enablePnpm)\n                 .withEnableBun(enableBun).useGlobalPnpm(useGlobalPnpm)\n                 .withHomeNodeExecRequired(useHomeNodeExec)\n@@ -292,13 +292,15 @@ public static DevModeHandler initDevModeHandler(Set<Class<?>> classes,\n                 .withFrontendHotdeploy(\n                         mode == Mode.DEVELOPMENT_FRONTEND_LIVERELOAD)\n                 .withBundleBuild(mode == Mode.DEVELOPMENT_BUNDLE)\n+                .withFrontendExtraFileExtensions(\n+                        getFrontendExtraFileExtensions(config))\n                 .withReact(reactEnable)\n                 .withNpmExcludeWebComponents(npmExcludeWebComponents);\n \n+        // Do not execute inside runnable thread as static mocking doesn't work.\n         NodeTasks tasks = new NodeTasks(options);\n-\n         Runnable runnable = () -> {\n-            runNodeTasks(context, tokenFileData, tasks);\n+            runNodeTasks(tasks);\n             if (mode == Mode.DEVELOPMENT_FRONTEND_LIVERELOAD) {\n                 // For Vite, wait until a VaadinServlet is deployed so we know\n                 // which frontend servlet path to use\n@@ -333,6 +335,14 @@ public static DevModeHandler initDevModeHandler(Set<Class<?>> classes,\n         }\n     }\n \n+    private static List<String> getFrontendExtraFileExtensions(\n+            ApplicationConfiguration config) {\n+        List<String> stringProperty = Arrays.asList(config\n+                .getStringProperty(InitParameters.FRONTEND_EXTRA_EXTENSIONS, \"\")\n+                .split(\",\"));\n+        return stringProperty;\n+    }\n+\n     private static Logger log() {\n         return LoggerFactory.getLogger(DevModeStartupListener.class);\n     }\n@@ -354,8 +364,7 @@ static Set<File> getFrontendLocationsFromClassloader(\n         return frontendFiles;\n     }\n \n-    private static void runNodeTasks(VaadinContext vaadinContext,\n-            JsonObject tokenFileData, NodeTasks tasks) {\n+    private static void runNodeTasks(NodeTasks tasks) {\n         try {\n             tasks.execute();\n         } catch (ExecutionFailedException exception) {\n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/DeploymentConfigurationFactoryTest.java b/flow-server/src/test/java/com/vaadin/flow/server/DeploymentConfigurationFactoryTest.java\nindex 62e1bdb1913..c9fd429591e 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/DeploymentConfigurationFactoryTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/DeploymentConfigurationFactoryTest.java\n@@ -350,7 +350,8 @@ public void createInitParameters_valuesAreTakenFromservletConfigAndTokenFile_val\n                 InitParameters.COMPILED_WEB_COMPONENTS_PATH,\n                 InitParameters.NODE_VERSION, InitParameters.NODE_DOWNLOAD_ROOT,\n                 InitParameters.BUILD_FOLDER,\n-                InitParameters.APPLICATION_IDENTIFIER));\n+                InitParameters.APPLICATION_IDENTIFIER,\n+                InitParameters.FRONTEND_EXTRA_EXTENSIONS));\n         Field[] initParamFields = InitParameters.class.getDeclaredFields();\n         String mockTokenJsonString = generateJsonStringFromFields(\n                 initParamFields, stringParams);\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdateViteTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdateViteTest.java\nindex 01810db521a..f78241aff8e 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdateViteTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdateViteTest.java\n@@ -3,6 +3,7 @@\n import java.io.File;\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n@@ -174,4 +175,48 @@ public void generatedTemplate_reactDisabled_correctFileRouterImport()\n                 template.contains(\", vitePluginFileSystemRouter()\"));\n \n     }\n+\n+    @Test\n+    public void generatedTemplate_extraFrontendExtension_addedToViteConfiguration()\n+            throws IOException {\n+        options.withFrontendExtraFileExtensions(\n+                Arrays.asList(\".svg\", \".ico\", \"png\"));\n+        TaskUpdateVite task = new TaskUpdateVite(options, null);\n+        task.execute();\n+\n+        File configFile = new File(temporaryFolder.getRoot(),\n+                FrontendUtils.VITE_GENERATED_CONFIG);\n+\n+        String template = IOUtils.toString(configFile.toURI(),\n+                StandardCharsets.UTF_8);\n+        Pattern matchSelection = Pattern\n+                .compile(\"const projectFileExtensions = \\\\[(.*)];\");\n+        Matcher matcher = matchSelection.matcher(template);\n+        Assert.assertTrue(\"No projectFileExtensions found\", matcher.find());\n+        Assert.assertEquals(\n+                \"Extra frontend extensions should be added to vite configuration, but was not.\",\n+                \"'.js', '.js.map', '.ts', '.ts.map', '.tsx', '.tsx.map', '.css', '.css.map', '.svg', '.ico', '.png'\",\n+                matcher.group(1));\n+    }\n+\n+    @Test\n+    public void generatedTemplate_noEraFrontendExtension_viteConfigurationWithoutExtraSelections()\n+            throws IOException {\n+        TaskUpdateVite task = new TaskUpdateVite(options, null);\n+        task.execute();\n+\n+        File configFile = new File(temporaryFolder.getRoot(),\n+                FrontendUtils.VITE_GENERATED_CONFIG);\n+\n+        String template = IOUtils.toString(configFile.toURI(),\n+                StandardCharsets.UTF_8);\n+        Pattern matchSelection = Pattern\n+                .compile(\"const projectFileExtensions = \\\\[(.*)];\");\n+        Matcher matcher = matchSelection.matcher(template);\n+        Assert.assertTrue(\"No projectFileExtensions found\", matcher.find());\n+        Assert.assertEquals(\n+                \"Extra frontend extensions should be added to vite configuration, but was not.\",\n+                \"'.js', '.js.map', '.ts', '.ts.map', '.tsx', '.tsx.map', '.css', '.css.map'\",\n+                matcher.group(1));\n+    }\n }\n\ndiff --git a/flow-tests/test-express-build/test-dev-bundle-frontend-add-on/pom.xml b/flow-tests/test-express-build/test-dev-bundle-frontend-add-on/pom.xml\nindex b5edddbdbed..4ef597ebb9d 100644\n--- a/flow-tests/test-express-build/test-dev-bundle-frontend-add-on/pom.xml\n+++ b/flow-tests/test-express-build/test-dev-bundle-frontend-add-on/pom.xml\n@@ -111,6 +111,9 @@\n                         </goals>\n                     </execution>\n                 </executions>\n+                <configuration>\n+                    <frontendExtraFileExtensions>scss</frontendExtraFileExtensions>\n+                </configuration>\n             </plugin>\n             <plugin>\n                 <artifactId>maven-clean-plugin</artifactId>\n\ndiff --git a/flow-tests/test-express-build/test-dev-bundle-frontend-add-on/src/main/frontend/styles/my-sass.scss b/flow-tests/test-express-build/test-dev-bundle-frontend-add-on/src/main/frontend/styles/my-sass.scss\nnew file mode 100644\nindex 00000000000..b07e52815e5\n--- /dev/null\n+++ b/flow-tests/test-express-build/test-dev-bundle-frontend-add-on/src/main/frontend/styles/my-sass.scss\n@@ -0,0 +1,3 @@\n+p {\n+    border: 3px solid orange;\n+}\n\ndiff --git a/flow-tests/test-express-build/test-dev-bundle-frontend-add-on/src/main/java/com/vaadin/flow/frontend/DevBundleCssImportView.java b/flow-tests/test-express-build/test-dev-bundle-frontend-add-on/src/main/java/com/vaadin/flow/frontend/DevBundleCssImportView.java\nindex 8b26a4018ab..fe4a4c96812 100644\n--- a/flow-tests/test-express-build/test-dev-bundle-frontend-add-on/src/main/java/com/vaadin/flow/frontend/DevBundleCssImportView.java\n+++ b/flow-tests/test-express-build/test-dev-bundle-frontend-add-on/src/main/java/com/vaadin/flow/frontend/DevBundleCssImportView.java\n@@ -16,12 +16,15 @@\n package com.vaadin.flow.frontend;\n \n import com.vaadin.flow.component.dependency.CssImport;\n+import com.vaadin.flow.component.dependency.NpmPackage;\n import com.vaadin.flow.component.html.Div;\n import com.vaadin.flow.component.html.Span;\n import com.vaadin.flow.router.Route;\n \n @Route(\"com.vaadin.flow.frontend.DevBundleCssImportView\")\n @CssImport(\"./styles/my-styles.css\")\n+@CssImport(\"./styles/my-sass.scss\")\n+@NpmPackage(value = \"sass-embedded\", version = \"1.80.6\")\n public class DevBundleCssImportView extends Div {\n     static final String MY_COMPONENT_ID = \"test-css-import-meta-inf-resources-span\";\n \n\ndiff --git a/flow-tests/test-express-build/test-dev-bundle-frontend-add-on/src/test/java/com/vaadin/flow/frontend/DevBundleCssImportIT.java b/flow-tests/test-express-build/test-dev-bundle-frontend-add-on/src/test/java/com/vaadin/flow/frontend/DevBundleCssImportIT.java\nindex 831a6b9894d..769d0167791 100644\n--- a/flow-tests/test-express-build/test-dev-bundle-frontend-add-on/src/test/java/com/vaadin/flow/frontend/DevBundleCssImportIT.java\n+++ b/flow-tests/test-express-build/test-dev-bundle-frontend-add-on/src/test/java/com/vaadin/flow/frontend/DevBundleCssImportIT.java\n@@ -59,7 +59,22 @@ public void cssImportedStyles_hashCalculatedWithNotQuestionMark()\n                 found = true;\n             }\n         }\n-        Assert.assertTrue(\"My-styles.css import is expected\", found);\n+\n+        Assert.assertTrue(\"my-sass.scss content hash is expected\",\n+                frontendHashes.hasKey(\"styles/my-sass.scss\"));\n+        Assert.assertEquals(\"Unexpected my-sass.scss content hash\",\n+                \"719cbd39e90caeecd2290124044e7cefb9e6150d3c338d4df71c21bcad825ab5\",\n+                frontendHashes.getString(\"styles/my-sass.scss\"));\n+\n+        Assert.assertTrue(\"my-sass.scss import is expected\", found);\n+        found = false;\n+        for (int i = 0; i < bundleImports.length(); i++) {\n+            if (bundleImports.get(i).asString()\n+                    .equals(\"Frontend/styles/my-sass.scss\")) {\n+                found = true;\n+            }\n+        }\n+        Assert.assertTrue(\"my-sass.scss import is expected\", found);\n     }\n \n     @Test\n\ndiff --git a/flow-tests/test-frontend/vite-embedded-webcomponent-resync/pom.xml b/flow-tests/test-frontend/vite-embedded-webcomponent-resync/pom.xml\nindex fbbb51ae3e4..dce8bfc80a9 100644\n--- a/flow-tests/test-frontend/vite-embedded-webcomponent-resync/pom.xml\n+++ b/flow-tests/test-frontend/vite-embedded-webcomponent-resync/pom.xml\n@@ -99,6 +99,12 @@\n                         </goals>\n                     </execution>\n                 </executions>\n+                <configuration>\n+                    <frontendExtraFileExtensions>\n+                        <extension>swg</extension>\n+                        <extension>ico</extension>\n+                    </frontendExtraFileExtensions>\n+                </configuration>\n             </plugin>\n         </plugins>\n     </build>\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "vaadin__flow-20392",
    "pr_id": 20392,
    "issue_id": 19948,
    "repo": "vaadin/flow",
    "problem_statement": "Implement a possibility to optimize development environment for Vaadin/Hilla dev without components\n### Describe your motivation\r\n\r\nUse case: an application development where no Vaadin components are used, but only Vaadin/Hilla TypeScript generation and middleware are utilized. \r\n\r\nFor production builds unused Vaadin/React component will be removed more or less automatically. But, to be able to speed up the development environment it would be good to have a possibility to exclude all Vaadin components from the package.json.\r\n\r\n### Describe the solution you'd like\r\n\r\nA setting or a documented dependency exclusion for excluding Vaadin components from the package.json.\r\n",
    "issue_word_count": 99,
    "test_files_count": 3,
    "non_test_files_count": 17,
    "pr_changed_files": [
      "flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildDevBundleMojo.java",
      "flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/GradlePluginAdapter.kt",
      "flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/PrepareFrontendInputProperties.kt",
      "flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinFlowPluginExtension.kt",
      "flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/FlowModeAbstractMojo.java",
      "flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/GenerateNpmBOMMojo.java",
      "flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/BuildFrontendUtil.java",
      "flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/PluginAdapterBase.java",
      "flow-server/src/main/java/com/vaadin/flow/server/InitParameters.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleValidationUtil.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/ExclusionFilter.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/Options.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdatePackages.java",
      "flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonConverter.java",
      "flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdatePackagesNpmTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonConverterTest.java",
      "vaadin-dev-server/src/main/java/com/vaadin/base/devserver/startup/DevModeInitializer.java"
    ],
    "pr_changed_test_files": [
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdatePackagesNpmTest.java",
      "flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonConverterTest.java"
    ],
    "base_commit": "9378d4639fc09322c78169ec7f0a45dd2e316d02",
    "head_commit": "d8364f35e5d74960e7262b67d9b65fb653d4c5d7",
    "repo_url": "https://github.com/vaadin/flow/pull/20392",
    "swe_url": "https://swe-bench-plus.turing.com/repos/vaadin__flow/20392",
    "dockerfile": "",
    "pr_merged_at": "2024-11-07T13:01:17.000Z",
    "patch": "diff --git a/flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildDevBundleMojo.java b/flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildDevBundleMojo.java\nindex b6562f494ab..6248509201f 100644\n--- a/flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildDevBundleMojo.java\n+++ b/flow-plugins/flow-dev-bundle-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildDevBundleMojo.java\n@@ -171,6 +171,9 @@ public class BuildDevBundleMojo extends AbstractMojo\n     @Parameter(defaultValue = \"${project.basedir}/src/main/\" + FRONTEND)\n     private File frontendDirectory;\n \n+    @Parameter(property = InitParameters.NPM_EXCLUDE_WEB_COMPONENTS, defaultValue = \"false\")\n+    private boolean npmExcludeWebComponents;\n+\n     @Override\n     public void execute() throws MojoFailureException {\n         long start = System.nanoTime();\n@@ -469,4 +472,9 @@ public boolean checkRuntimeDependency(String groupId, String artifactId,\n             Consumer<String> missingDependencyMessageConsumer) {\n         return false;\n     }\n+\n+    @Override\n+    public boolean isNpmExcludeWebComponents() {\n+        return npmExcludeWebComponents;\n+    }\n }\n\ndiff --git a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/GradlePluginAdapter.kt b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/GradlePluginAdapter.kt\nindex 977572330ad..84ea3e5add4 100644\n--- a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/GradlePluginAdapter.kt\n+++ b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/GradlePluginAdapter.kt\n@@ -218,6 +218,8 @@ internal class GradlePluginAdapter(\n \n     override fun applicationIdentifier(): String = config.applicationIdentifier.get()\n \n+    override fun isNpmExcludeWebComponents(): Boolean = config.npmExcludeWebComponents.get()\n+\n     override fun checkRuntimeDependency(\n         groupId: String,\n         artifactId: String,\n\ndiff --git a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/PrepareFrontendInputProperties.kt b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/PrepareFrontendInputProperties.kt\nindex 79498ac60de..f5467c90f2e 100644\n--- a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/PrepareFrontendInputProperties.kt\n+++ b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/PrepareFrontendInputProperties.kt\n@@ -142,6 +142,9 @@ internal class PrepareFrontendInputProperties(private val config: PluginEffectiv\n     @Input\n     public fun getApplicationIdentifier(): Provider<String> = config.applicationIdentifier\n \n+    @Input\n+    public fun getNpmExcludeWebComponents(): Provider<Boolean> = config.npmExcludeWebComponents\n+\n     @Input\n     @Optional\n     public fun getNodeExecutablePath(): Provider<String> = tools\n\ndiff --git a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinFlowPluginExtension.kt b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinFlowPluginExtension.kt\nindex 0924369e56c..1dfcf839177 100644\n--- a/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinFlowPluginExtension.kt\n+++ b/flow-plugins/flow-gradle-plugin/src/main/kotlin/com/vaadin/gradle/VaadinFlowPluginExtension.kt\n@@ -282,6 +282,8 @@ public abstract class VaadinFlowPluginExtension @Inject constructor(private val\n \n     public abstract val applicationIdentifier: Property<String>\n \n+    public abstract val npmExcludeWebComponents: Property<Boolean>\n+\n     public fun filterClasspath(@DelegatesTo(value = ClasspathFilter::class, strategy = Closure.DELEGATE_FIRST) block: Closure<*>) {\n         block.delegate = classpathFilter\n         block.resolveStrategy = Closure.DELEGATE_FIRST\n@@ -439,6 +441,9 @@ public class PluginEffectiveConfiguration(\n             ))\n         .overrideWithSystemProperty(\"vaadin.${InitParameters.APPLICATION_IDENTIFIER}\")\n \n+    public val npmExcludeWebComponents: Provider<Boolean> = extension\n+            .npmExcludeWebComponents.convention(false)\n+\n     /**\n      * Finds the value of a boolean property. It searches in gradle and system properties.\n      *\n@@ -499,7 +504,8 @@ public class PluginEffectiveConfiguration(\n             \"alwaysExecutePrepareFrontend=${alwaysExecutePrepareFrontend.get()}, \" +\n             \"frontendHotdeploy=${frontendHotdeploy.get()},\" +\n             \"reactEnable=${reactEnable.get()},\" +\n-            \"cleanFrontendFiles=${cleanFrontendFiles.get()}\" +\n+            \"cleanFrontendFiles=${cleanFrontendFiles.get()},\" +\n+            \"npmExcludeWebComponents=${npmExcludeWebComponents.get()}\" +\n             \")\"\n     public companion object {\n         public fun get(project: Project): PluginEffectiveConfiguration =\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/FlowModeAbstractMojo.java b/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/FlowModeAbstractMojo.java\nindex ae3b389c61f..62bc3d37fc0 100644\n--- a/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/FlowModeAbstractMojo.java\n+++ b/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/FlowModeAbstractMojo.java\n@@ -234,6 +234,9 @@ public abstract class FlowModeAbstractMojo extends AbstractMojo\n     @Parameter(property = InitParameters.REACT_ENABLE, defaultValue = \"${null}\")\n     private Boolean reactEnable;\n \n+    @Parameter(property = InitParameters.NPM_EXCLUDE_WEB_COMPONENTS, defaultValue = \"false\")\n+    private boolean npmExcludeWebComponents;\n+\n     /**\n      * Identifier for the application.\n      * <p>\n@@ -570,4 +573,9 @@ public String applicationIdentifier() {\n                 project.getGroupId() + \":\" + project.getArtifactId(),\n                 StandardCharsets.UTF_8);\n     }\n+\n+    @Override\n+    public boolean isNpmExcludeWebComponents() {\n+        return npmExcludeWebComponents;\n+    }\n }\n\ndiff --git a/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/GenerateNpmBOMMojo.java b/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/GenerateNpmBOMMojo.java\nindex 479e6cbbf48..5926cc68f68 100644\n--- a/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/GenerateNpmBOMMojo.java\n+++ b/flow-plugins/flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/GenerateNpmBOMMojo.java\n@@ -176,7 +176,9 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n                         .withHomeNodeExecRequired(requireHomeNodeExec())\n                         .setJavaResourceFolder(javaResourceFolder())\n                         .withProductionMode(productionMode)\n-                        .withReact(isReactEnabled());\n+                        .withReact(isReactEnabled())\n+                        .withNpmExcludeWebComponents(\n+                                isNpmExcludeWebComponents());\n                 new NodeTasks(options).execute();\n                 logInfo(\"SBOM generation created node_modules and all needed metadata. \"\n                         + \"If you don't need it, please run mvn vaadin:clean-frontend\");\n\ndiff --git a/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/BuildFrontendUtil.java b/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/BuildFrontendUtil.java\nindex afd1511c7cb..dd8c5679207 100644\n--- a/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/BuildFrontendUtil.java\n+++ b/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/BuildFrontendUtil.java\n@@ -77,6 +77,7 @@\n import static com.vaadin.flow.server.InitParameters.FRONTEND_HOTDEPLOY;\n import static com.vaadin.flow.server.InitParameters.NODE_DOWNLOAD_ROOT;\n import static com.vaadin.flow.server.InitParameters.NODE_VERSION;\n+import static com.vaadin.flow.server.InitParameters.NPM_EXCLUDE_WEB_COMPONENTS;\n import static com.vaadin.flow.server.InitParameters.REACT_ENABLE;\n import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_INITIAL_UIDL;\n import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_PRODUCTION_MODE;\n@@ -165,7 +166,9 @@ public static void prepareFrontend(PluginAdapterBase adapter)\n                 .setNodeAutoUpdate(adapter.nodeAutoUpdate())\n                 .withHomeNodeExecRequired(adapter.requireHomeNodeExec())\n                 .setJavaResourceFolder(adapter.javaResourceFolder())\n-                .withProductionMode(false).withReact(adapter.isReactEnabled());\n+                .withProductionMode(false).withReact(adapter.isReactEnabled())\n+                .withNpmExcludeWebComponents(\n+                        adapter.isNpmExcludeWebComponents());\n \n         // Copy jar artifact contents in TaskCopyFrontendFiles\n         options.copyResources(adapter.getJarFiles());\n@@ -263,6 +266,10 @@ public static File propagateBuildInfo(PluginAdapterBase adapter) {\n         }\n \n         buildInfo.put(REACT_ENABLE, adapter.isReactEnabled());\n+        if (adapter.isNpmExcludeWebComponents()) {\n+            buildInfo.put(NPM_EXCLUDE_WEB_COMPONENTS,\n+                    adapter.isNpmExcludeWebComponents());\n+        }\n \n         try {\n             FileUtils.forceMkdir(token.getParentFile());\n@@ -339,7 +346,9 @@ public static void runNodeUpdater(PluginAdapterBuild adapter)\n                     .withPostinstallPackages(adapter.postinstallPackages())\n                     .withCiBuild(adapter.ciBuild())\n                     .withForceProductionBuild(adapter.forceProductionBuild())\n-                    .withReact(adapter.isReactEnabled());\n+                    .withReact(adapter.isReactEnabled())\n+                    .withNpmExcludeWebComponents(\n+                            adapter.isNpmExcludeWebComponents());\n             new NodeTasks(options).execute();\n         } catch (ExecutionFailedException exception) {\n             throw exception;\n@@ -405,7 +414,9 @@ public static void runDevBuildNodeUpdater(PluginAdapterBuild adapter)\n                     .withBundleBuild(true)\n                     .skipDevBundleBuild(adapter.skipDevBundleBuild())\n                     .withCompressBundle(adapter.compressBundle())\n-                    .withReact(adapter.isReactEnabled());\n+                    .withReact(adapter.isReactEnabled())\n+                    .withNpmExcludeWebComponents(\n+                            adapter.isNpmExcludeWebComponents());\n             new NodeTasks(options).execute();\n         } catch (ExecutionFailedException exception) {\n             throw exception;\n@@ -751,6 +762,7 @@ public static void updateBuildFile(PluginAdapterBuild adapter,\n             buildInfo.remove(Constants.CONNECT_OPEN_API_FILE_TOKEN);\n             buildInfo.remove(Constants.PROJECT_FRONTEND_GENERATED_DIR_TOKEN);\n             buildInfo.remove(InitParameters.BUILD_FOLDER);\n+            buildInfo.remove(InitParameters.NPM_EXCLUDE_WEB_COMPONENTS);\n             // Premium features flag is always true, because Vaadin CI server\n             // uses Enterprise sub, thus it's always true.\n             // Thus, resets the premium feature flag and DAU flag before asking\n\ndiff --git a/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/PluginAdapterBase.java b/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/PluginAdapterBase.java\nindex 2a3186651ad..4c431d0b4a7 100644\n--- a/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/PluginAdapterBase.java\n+++ b/flow-plugins/flow-plugin-base/src/main/java/com/vaadin/flow/plugin/base/PluginAdapterBase.java\n@@ -337,4 +337,11 @@ default Lookup createLookup(ClassFinder classFinder) {\n      *         {@literal blank}.\n      */\n     String applicationIdentifier();\n+\n+    /**\n+     * Whether to include web component npm packages in packages.json.\n+     *\n+     * @return {@code true} to include web component npm packages.\n+     */\n+    boolean isNpmExcludeWebComponents();\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/InitParameters.java b/flow-server/src/main/java/com/vaadin/flow/server/InitParameters.java\nindex a9889197a45..6f0a8df3bc0 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/InitParameters.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/InitParameters.java\n@@ -285,4 +285,9 @@ public class InitParameters implements Serializable {\n      */\n     public static final String APPLICATION_IDENTIFIER = \"applicationIdentifier\";\n \n+    /**\n+     * Configuration name for excluding npm packages for web components.\n+     */\n+    public static final String NPM_EXCLUDE_WEB_COMPONENTS = \"npm.excludeWebComponents\";\n+\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleValidationUtil.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleValidationUtil.java\nindex 4c7a335a3b3..ac1542d1fc7 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleValidationUtil.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleValidationUtil.java\n@@ -316,7 +316,8 @@ public void execute() {\n             Map<String, String> filteredApplicationDependencies = new ExclusionFilter(\n                     options.getClassFinder(),\n                     options.isReactEnabled()\n-                            && FrontendUtils.isReactModuleAvailable(options))\n+                            && FrontendUtils.isReactModuleAvailable(options),\n+                    options.isNpmExcludeWebComponents())\n                     .exclude(applicationDependencies);\n \n             // Add application dependencies\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/ExclusionFilter.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/ExclusionFilter.java\nindex 361fe37402b..5ae30bb629f 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/ExclusionFilter.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/ExclusionFilter.java\n@@ -43,6 +43,8 @@ public class ExclusionFilter implements Serializable {\n \n     private final boolean reactEnabled;\n \n+    private final boolean excludeWebComponentNpmPackages;\n+\n     /**\n      * Create a new exclusion filter.\n      *\n@@ -52,8 +54,24 @@ public class ExclusionFilter implements Serializable {\n      *            whether React is enabled\n      */\n     public ExclusionFilter(ClassFinder finder, boolean reactEnabled) {\n+        this(finder, reactEnabled, false);\n+    }\n+\n+    /**\n+     * Create a new exclusion filter.\n+     *\n+     * @param finder\n+     *            the class finder to use\n+     * @param reactEnabled\n+     *            whether React is enabled\n+     * @param excludeWebComponentNpmPackages\n+     *            whether to exclude web component npm packages\n+     */\n+    public ExclusionFilter(ClassFinder finder, boolean reactEnabled,\n+            boolean excludeWebComponentNpmPackages) {\n         this.finder = finder;\n         this.reactEnabled = reactEnabled;\n+        this.excludeWebComponentNpmPackages = excludeWebComponentNpmPackages;\n     }\n \n     /**\n@@ -95,7 +113,7 @@ private Set<String> getExclusions(URL versionsResource) throws IOException {\n             VersionsJsonConverter convert = new VersionsJsonConverter(\n                     Json.parse(\n                             IOUtils.toString(content, StandardCharsets.UTF_8)),\n-                    reactEnabled);\n+                    reactEnabled, excludeWebComponentNpmPackages);\n             return convert.getExclusions();\n         }\n     }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java\nindex 1f2535feaca..21f6f0fa1f6 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java\n@@ -177,7 +177,8 @@ private JsonObject getFilteredVersionsFromResource(URL versionsResource,\n                     Json.parse(\n                             IOUtils.toString(content, StandardCharsets.UTF_8)),\n                     options.isReactEnabled()\n-                            && FrontendUtils.isReactModuleAvailable(options));\n+                            && FrontendUtils.isReactModuleAvailable(options),\n+                    options.isNpmExcludeWebComponents());\n             versionsJson = convert.getConvertedJson();\n             versionsJson = new VersionsJsonFilter(getPackageJson(),\n                     DEPENDENCIES)\n@@ -617,6 +618,10 @@ private void putHillaComponentsDependencies(\n             if (options.isReactEnabled()) {\n                 dependencies.putAll(readDependenciesIfAvailable(\n                         \"hilla/components/react\", packageJsonKey));\n+                if (options.isNpmExcludeWebComponents()) {\n+                    // remove dependencies that depends on web components\n+                    dependencies.remove(\"@vaadin/hilla-react-crud\");\n+                }\n             } else {\n                 dependencies.putAll(readDependenciesIfAvailable(\n                         \"hilla/components/lit\", packageJsonKey));\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/Options.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/Options.java\nindex db72b6a31bb..124bb597954 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/Options.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/Options.java\n@@ -125,6 +125,8 @@ public class Options implements Serializable {\n \n     private boolean reactEnable = true;\n \n+    private boolean npmExcludeWebComponents = false;\n+\n     /**\n      * Removes generated files from a previous execution that are no more\n      * created.\n@@ -967,4 +969,25 @@ public Options withCleanOldGeneratedFiles(boolean clean) {\n     public boolean isCleanOldGeneratedFiles() {\n         return cleanOldGeneratedFiles;\n     }\n+\n+    /**\n+     * Sets whether to exclude web component npm packages in packages.json.\n+     *\n+     * @return this builder\n+     */\n+    public boolean isNpmExcludeWebComponents() {\n+        return npmExcludeWebComponents;\n+    }\n+\n+    /**\n+     * Sets whether to exclude web component npm packages in packages.json.\n+     *\n+     * @param exclude\n+     *            whether to exclude web component npm packages\n+     * @return this builder\n+     */\n+    public Options withNpmExcludeWebComponents(boolean exclude) {\n+        this.npmExcludeWebComponents = exclude;\n+        return this;\n+    }\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdatePackages.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdatePackages.java\nindex 6017d5ceb55..94d157159a2 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdatePackages.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdatePackages.java\n@@ -217,7 +217,8 @@ private boolean updatePackageJsonDependencies(JsonObject packageJson,\n         Map<String, String> filteredApplicationDependencies = new ExclusionFilter(\n                 finder,\n                 options.isReactEnabled()\n-                        && FrontendUtils.isReactModuleAvailable(options))\n+                        && FrontendUtils.isReactModuleAvailable(options),\n+                options.isNpmExcludeWebComponents())\n                 .exclude(applicationDependencies);\n \n         // Add application dependencies\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonConverter.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonConverter.java\nindex bfeb9afacd0..bd2219d8928 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonConverter.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonConverter.java\n@@ -42,6 +42,7 @@\n class VersionsJsonConverter {\n \n     static final String VAADIN_CORE_NPM_PACKAGE = \"@vaadin/vaadin-core\";\n+    static final String VAADIN_BUNDLES = \"@vaadin/bundles\";\n     private static final String JS_VERSION = \"jsVersion\";\n     private static final String NPM_NAME = \"npmName\";\n     private static final String NPM_VERSION = \"npmVersion\";\n@@ -74,15 +75,18 @@ class VersionsJsonConverter {\n \n     private boolean reactEnabled;\n \n+    private boolean excludeWebComponents;\n+\n     private Set<String> exclusions;\n \n     private static Logger getLogger() {\n         return LoggerFactory.getLogger(VersionsJsonConverter.class);\n     }\n \n-    VersionsJsonConverter(JsonObject platformVersions,\n-            boolean collectReactComponents) {\n-        this.reactEnabled = collectReactComponents;\n+    VersionsJsonConverter(JsonObject platformVersions, boolean reactEnabled,\n+            boolean excludeWebComponents) {\n+        this.reactEnabled = reactEnabled;\n+        this.excludeWebComponents = excludeWebComponents;\n         exclusions = new HashSet<>();\n         convertedObject = Json.createObject();\n \n@@ -135,6 +139,8 @@ private void excludeDependencies() {\n     private boolean isIncludedByMode(String mode) {\n         if (mode == null || mode.isBlank() || MODE_ALL.equalsIgnoreCase(mode)) {\n             return true;\n+        } else if (excludeWebComponents) {\n+            return false;\n         } else if (reactEnabled) {\n             return MODE_REACT.equalsIgnoreCase(mode);\n         } else {\n@@ -151,7 +157,19 @@ private void addDependency(JsonObject obj) {\n         if (Objects.equals(npmName, VAADIN_CORE_NPM_PACKAGE)) {\n             return;\n         }\n+        if (excludeWebComponents && Objects.equals(npmName, VAADIN_BUNDLES)) {\n+            exclusions.add(npmName);\n+            return;\n+        }\n         if (!isIncludedByMode(mode)) {\n+            if (excludeWebComponents) {\n+                // collecting exclusions also from non-included dependencies\n+                // with a mode (react), when web components are not wanted.\n+                if (MODE_REACT.equalsIgnoreCase(mode)) {\n+                    exclusions.add(npmName);\n+                }\n+                collectExclusions(obj);\n+            }\n             return;\n         }\n         if (obj.hasKey(NPM_VERSION)) {\n@@ -166,6 +184,12 @@ private void addDependency(JsonObject obj) {\n         }\n         convertedObject.put(npmName, version);\n \n+        collectExclusions(obj);\n+        getLogger().debug(\"versions.json adds dependency {} with version {}{}\",\n+                npmName, version, (mode != null ? \" for mode \" + mode : \"\"));\n+    }\n+\n+    private void collectExclusions(JsonObject obj) {\n         if (obj.hasKey(EXCLUSIONS)) {\n             JsonArray array = obj.getArray(EXCLUSIONS);\n             if (array != null) {\n@@ -173,8 +197,6 @@ private void addDependency(JsonObject obj) {\n                         .forEach(i -> exclusions.add(array.getString(i)));\n             }\n         }\n-        getLogger().debug(\"versions.json adds dependency {} with version {}{}\",\n-                npmName, version, (mode != null ? \" for mode \" + mode : \"\"));\n     }\n \n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java b/flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java\nindex 5063bbbc1d9..5c7b44a2381 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java\n@@ -52,6 +52,7 @@\n import static com.vaadin.flow.server.InitParameters.FRONTEND_HOTDEPLOY;\n import static com.vaadin.flow.server.InitParameters.NODE_DOWNLOAD_ROOT;\n import static com.vaadin.flow.server.InitParameters.NODE_VERSION;\n+import static com.vaadin.flow.server.InitParameters.NPM_EXCLUDE_WEB_COMPONENTS;\n import static com.vaadin.flow.server.InitParameters.REACT_ENABLE;\n import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_ENABLE_DEV_SERVER;\n import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_INITIAL_UIDL;\n@@ -187,6 +188,11 @@ protected Map<String, String> getConfigParametersUsingTokenData(\n                     String.valueOf(buildInfo.getBoolean(PREMIUM_FEATURES)));\n         }\n \n+        if (buildInfo.hasKey(NPM_EXCLUDE_WEB_COMPONENTS)) {\n+            params.put(NPM_EXCLUDE_WEB_COMPONENTS, String\n+                    .valueOf(buildInfo.getBoolean(NPM_EXCLUDE_WEB_COMPONENTS)));\n+        }\n+\n         setDevModePropertiesUsingTokenData(params, buildInfo);\n         return params;\n     }\n\ndiff --git a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/startup/DevModeInitializer.java b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/startup/DevModeInitializer.java\nindex 67b2bc729b9..02665d9c1fc 100644\n--- a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/startup/DevModeInitializer.java\n+++ b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/startup/DevModeInitializer.java\n@@ -81,6 +81,7 @@\n import static com.vaadin.flow.server.Constants.PROJECT_FRONTEND_GENERATED_DIR_TOKEN;\n import static com.vaadin.flow.server.Constants.VAADIN_SERVLET_RESOURCES;\n import static com.vaadin.flow.server.Constants.VAADIN_WEBAPP_RESOURCES;\n+import static com.vaadin.flow.server.InitParameters.NPM_EXCLUDE_WEB_COMPONENTS;\n import static com.vaadin.flow.server.InitParameters.REACT_ENABLE;\n import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_DEVMODE_OPTIMIZE_BUNDLE;\n import static com.vaadin.flow.server.frontend.FrontendUtils.GENERATED;\n@@ -270,6 +271,8 @@ public static DevModeHandler initDevModeHandler(Set<Class<?>> classes,\n         boolean reactEnable = config.getBooleanProperty(REACT_ENABLE,\n                 FrontendUtils\n                         .isReactRouterRequired(options.getFrontendDirectory()));\n+        boolean npmExcludeWebComponents = config\n+                .getBooleanProperty(NPM_EXCLUDE_WEB_COMPONENTS, false);\n         options.enablePackagesUpdate(true)\n                 .useByteCodeScanner(useByteCodeScanner)\n                 .withFrontendGeneratedFolder(frontendGeneratedFolder)\n@@ -289,7 +292,8 @@ public static DevModeHandler initDevModeHandler(Set<Class<?>> classes,\n                 .withFrontendHotdeploy(\n                         mode == Mode.DEVELOPMENT_FRONTEND_LIVERELOAD)\n                 .withBundleBuild(mode == Mode.DEVELOPMENT_BUNDLE)\n-                .withReact(reactEnable);\n+                .withReact(reactEnable)\n+                .withNpmExcludeWebComponents(npmExcludeWebComponents);\n \n         NodeTasks tasks = new NodeTasks(options);\n \n",
    "test_patch": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java\nindex 0cef96601bf..8bfa41a1c36 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java\n@@ -470,6 +470,49 @@ public void testGetPlatformPinnedDependencies_reactNotAvailable_noReactComponent\n     @Test\n     public void testGetPlatformPinnedDependencies_reactAvailable_containsReactComponents()\n             throws IOException, ClassNotFoundException {\n+        generateTestDataForReactComponents();\n+\n+        JsonObject pinnedVersions = nodeUpdater.getPlatformPinnedDependencies();\n+\n+        Assert.assertTrue(pinnedVersions.hasKey(\"@vaadin/button\"));\n+        Assert.assertTrue(pinnedVersions.hasKey(\"@vaadin/react-components\"));\n+        Assert.assertTrue(\n+                pinnedVersions.hasKey(\"@vaadin/react-components-pro\"));\n+    }\n+\n+    @Test\n+    public void testGetPlatformPinnedDependencies_reactAvailable_excludeWebComponents()\n+            throws IOException, ClassNotFoundException {\n+        options.withNpmExcludeWebComponents(true);\n+        generateTestDataForReactComponents();\n+\n+        JsonObject pinnedVersions = nodeUpdater.getPlatformPinnedDependencies();\n+\n+        // @vaadin/button doesn't have 'mode' set, so it should be included\n+        Assert.assertTrue(pinnedVersions.hasKey(\"@vaadin/button\"));\n+        Assert.assertFalse(pinnedVersions.hasKey(\"@vaadin/react-components\"));\n+        Assert.assertFalse(\n+                pinnedVersions.hasKey(\"@vaadin/react-components-pro\"));\n+    }\n+\n+    @Test\n+    public void testGetPlatformPinnedDependencies_reactDisabled_excludeWebComponents()\n+            throws IOException, ClassNotFoundException {\n+        options.withReact(false);\n+        options.withNpmExcludeWebComponents(true);\n+        generateTestDataForReactComponents();\n+\n+        JsonObject pinnedVersions = nodeUpdater.getPlatformPinnedDependencies();\n+\n+        // @vaadin/button doesn't have 'mode' set, so it should be included\n+        Assert.assertTrue(pinnedVersions.hasKey(\"@vaadin/button\"));\n+        Assert.assertFalse(pinnedVersions.hasKey(\"@vaadin/react-components\"));\n+        Assert.assertFalse(\n+                pinnedVersions.hasKey(\"@vaadin/react-components-pro\"));\n+    }\n+\n+    private void generateTestDataForReactComponents()\n+            throws IOException, ClassNotFoundException {\n         File coreVersionsFile = File.createTempFile(\"vaadin-core-versions\",\n                 \".json\", temporaryFolder.newFolder());\n         File vaadinVersionsFile = File.createTempFile(\"vaadin-versions\",\n@@ -514,13 +557,6 @@ public void testGetPlatformPinnedDependencies_reactAvailable_containsReactCompon\n         Class clazz = FeatureFlags.class; // actual class doesn't matter\n         Mockito.doReturn(clazz).when(finder).loadClass(\n                 \"com.vaadin.flow.component.react.ReactAdapterComponent\");\n-\n-        JsonObject pinnedVersions = nodeUpdater.getPlatformPinnedDependencies();\n-\n-        Assert.assertTrue(pinnedVersions.hasKey(\"@vaadin/button\"));\n-        Assert.assertTrue(pinnedVersions.hasKey(\"@vaadin/react-components\"));\n-        Assert.assertTrue(\n-                pinnedVersions.hasKey(\"@vaadin/react-components-pro\"));\n     }\n \n     @Test\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdatePackagesNpmTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdatePackagesNpmTest.java\nindex 196cf990dca..298aabb27e2 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdatePackagesNpmTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdatePackagesNpmTest.java\n@@ -23,6 +23,8 @@\n import static com.vaadin.flow.server.frontend.NodeUpdater.OVERRIDES;\n import static com.vaadin.flow.server.frontend.NodeUpdater.VAADIN_DEP_KEY;\n import static com.vaadin.flow.server.frontend.VersionsJsonConverter.VAADIN_CORE_NPM_PACKAGE;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertFalse;\n \n import java.io.File;\n import java.io.IOException;\n@@ -50,7 +52,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.vaadin.flow.di.Lookup;\n import com.vaadin.flow.server.Constants;\n import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n import com.vaadin.flow.server.frontend.scanner.FrontendDependencies;\n@@ -848,6 +849,163 @@ public void reactDisabled_coreDependenciesAdded() throws IOException {\n \n     }\n \n+    @Test\n+    public void webComponentsExcluded_reactDisabled_noExclusionsInVersions()\n+            throws IOException {\n+        createVaadinVersionsJson(PLATFORM_DIALOG_VERSION,\n+                PLATFORM_ELEMENT_MIXIN_VERSION, PLATFORM_OVERLAY_VERSION);\n+        Options options = new MockOptions(finder, npmFolder)\n+                .withBuildDirectory(TARGET).withEnablePnpm(false)\n+                .withBundleBuild(true).withReact(false)\n+                .withNpmExcludeWebComponents(true);\n+        // with scanned application dependencies\n+        execTaskUpdatePackages(createApplicationDependencies(), options);\n+        JsonObject pkgJson = getOrCreatePackageJson();\n+\n+        assertTrue(hasInDependencies(pkgJson, VAADIN_DIALOG));\n+        assertTrue(hasInVaadinDependencies(pkgJson, VAADIN_DIALOG));\n+        assertTrue(hasInDependencies(pkgJson, VAADIN_OVERLAY));\n+        assertTrue(hasInVaadinDependencies(pkgJson, VAADIN_OVERLAY));\n+        assertFalse(hasInDependencies(pkgJson, REACT_COMPONENTS));\n+        assertFalse(hasInVaadinDependencies(pkgJson, REACT_COMPONENTS));\n+\n+        // without scanned application dependencies\n+        execTaskUpdatePackages(new HashMap<>(), options);\n+        pkgJson = getOrCreatePackageJson();\n+\n+        assertFalse(hasInDependencies(pkgJson, VAADIN_DIALOG));\n+        assertFalse(hasInVaadinDependencies(pkgJson, VAADIN_DIALOG));\n+        assertTrue(hasInDependencies(pkgJson, VAADIN_OVERLAY));\n+        assertTrue(hasInVaadinDependencies(pkgJson, VAADIN_OVERLAY));\n+        assertFalse(hasInDependencies(pkgJson, REACT_COMPONENTS));\n+        assertFalse(hasInVaadinDependencies(pkgJson, REACT_COMPONENTS));\n+    }\n+\n+    @Test\n+    public void webComponentsExcluded_reactDisabled_exclusionsInVersions_noWebComponentsIncluded()\n+            throws IOException {\n+        createVaadinVersionsJson(PLATFORM_DIALOG_VERSION,\n+                PLATFORM_ELEMENT_MIXIN_VERSION, PLATFORM_OVERLAY_VERSION,\n+                Set.of(VAADIN_DIALOG));\n+        Options options = new MockOptions(finder, npmFolder)\n+                .withBuildDirectory(TARGET).withEnablePnpm(false)\n+                .withBundleBuild(true).withReact(false)\n+                .withNpmExcludeWebComponents(true);\n+\n+        // with scanned application dependencies\n+        execTaskUpdatePackages(createApplicationDependencies(), options);\n+        JsonObject pkgJson = getOrCreatePackageJson();\n+\n+        assertFalse(hasInDependencies(pkgJson, VAADIN_DIALOG));\n+        assertFalse(hasInVaadinDependencies(pkgJson, VAADIN_DIALOG));\n+        assertTrue(hasInDependencies(pkgJson, VAADIN_OVERLAY));\n+        assertTrue(hasInVaadinDependencies(pkgJson, VAADIN_OVERLAY));\n+        assertFalse(hasInDependencies(pkgJson, REACT_COMPONENTS));\n+        assertFalse(hasInVaadinDependencies(pkgJson, REACT_COMPONENTS));\n+\n+        // without scanned application dependencies\n+        execTaskUpdatePackages(new HashMap<>(), options);\n+        pkgJson = getOrCreatePackageJson();\n+\n+        assertFalse(hasInDependencies(pkgJson, VAADIN_DIALOG));\n+        assertFalse(hasInVaadinDependencies(pkgJson, VAADIN_DIALOG));\n+        assertTrue(hasInDependencies(pkgJson, VAADIN_OVERLAY));\n+        assertTrue(hasInVaadinDependencies(pkgJson, VAADIN_OVERLAY));\n+        assertFalse(hasInDependencies(pkgJson, REACT_COMPONENTS));\n+        assertFalse(hasInVaadinDependencies(pkgJson, REACT_COMPONENTS));\n+    }\n+\n+    @Test\n+    public void webComponentsExcluded_reactEnabled_noExclusionsInVersions()\n+            throws IOException {\n+        createVaadinVersionsJson(PLATFORM_DIALOG_VERSION,\n+                PLATFORM_ELEMENT_MIXIN_VERSION, PLATFORM_OVERLAY_VERSION);\n+        Options options = new MockOptions(finder, npmFolder)\n+                .withBuildDirectory(TARGET).withEnablePnpm(false)\n+                .withBundleBuild(true).withReact(true)\n+                .withNpmExcludeWebComponents(true);\n+\n+        // with scanned application dependencies\n+        execTaskUpdatePackages(createApplicationDependencies(), options);\n+        JsonObject pkgJson = getOrCreatePackageJson();\n+\n+        assertTrue(hasInDependencies(pkgJson, VAADIN_DIALOG));\n+        assertTrue(hasInVaadinDependencies(pkgJson, VAADIN_DIALOG));\n+        assertTrue(hasInDependencies(pkgJson, VAADIN_OVERLAY));\n+        assertTrue(hasInVaadinDependencies(pkgJson, VAADIN_OVERLAY));\n+        assertFalse(hasInDependencies(pkgJson, REACT_COMPONENTS));\n+        assertFalse(hasInVaadinDependencies(pkgJson, REACT_COMPONENTS));\n+\n+        // without scanned application dependencies\n+        execTaskUpdatePackages(new HashMap<>(), options);\n+        pkgJson = getOrCreatePackageJson();\n+\n+        assertFalse(hasInDependencies(pkgJson, VAADIN_DIALOG));\n+        assertFalse(hasInVaadinDependencies(pkgJson, VAADIN_DIALOG));\n+        assertTrue(hasInDependencies(pkgJson, VAADIN_OVERLAY));\n+        assertTrue(hasInVaadinDependencies(pkgJson, VAADIN_OVERLAY));\n+        assertFalse(hasInDependencies(pkgJson, REACT_COMPONENTS));\n+        assertFalse(hasInVaadinDependencies(pkgJson, REACT_COMPONENTS));\n+    }\n+\n+    @Test\n+    public void webComponentsExcluded_reactEnabled_exclusionsInVersions_noWebComponentsIncluded()\n+            throws IOException {\n+        createVaadinVersionsJson(PLATFORM_DIALOG_VERSION,\n+                PLATFORM_ELEMENT_MIXIN_VERSION, PLATFORM_OVERLAY_VERSION,\n+                Set.of(VAADIN_DIALOG));\n+        Options options = new MockOptions(finder, npmFolder)\n+                .withBuildDirectory(TARGET).withEnablePnpm(false)\n+                .withBundleBuild(true).withReact(true)\n+                .withNpmExcludeWebComponents(true);\n+\n+        // with scanned application dependencies\n+        execTaskUpdatePackages(createApplicationDependencies(), options);\n+        JsonObject pkgJson = getOrCreatePackageJson();\n+\n+        assertFalse(hasInDependencies(pkgJson, VAADIN_DIALOG));\n+        assertFalse(hasInVaadinDependencies(pkgJson, VAADIN_DIALOG));\n+        assertTrue(hasInDependencies(pkgJson, VAADIN_OVERLAY));\n+        assertTrue(hasInVaadinDependencies(pkgJson, VAADIN_OVERLAY));\n+        assertFalse(hasInDependencies(pkgJson, REACT_COMPONENTS));\n+        assertFalse(hasInVaadinDependencies(pkgJson, REACT_COMPONENTS));\n+\n+        // without scanned application dependencies\n+        execTaskUpdatePackages(new HashMap<>(), options);\n+        pkgJson = getOrCreatePackageJson();\n+\n+        assertFalse(hasInDependencies(pkgJson, VAADIN_DIALOG));\n+        assertFalse(hasInVaadinDependencies(pkgJson, VAADIN_DIALOG));\n+        assertTrue(hasInDependencies(pkgJson, VAADIN_OVERLAY));\n+        assertTrue(hasInVaadinDependencies(pkgJson, VAADIN_OVERLAY));\n+        assertFalse(hasInDependencies(pkgJson, REACT_COMPONENTS));\n+        assertFalse(hasInVaadinDependencies(pkgJson, REACT_COMPONENTS));\n+    }\n+\n+    private void execTaskUpdatePackages(\n+            Map<String, String> scannedApplicationDependencies,\n+            Options options) {\n+        final FrontendDependencies frontendDependenciesScanner = Mockito\n+                .mock(FrontendDependencies.class);\n+        Mockito.when(frontendDependenciesScanner.getPackages())\n+                .thenReturn(scannedApplicationDependencies);\n+        final TaskUpdatePackages task = new TaskUpdatePackages(\n+                frontendDependenciesScanner, options) {\n+        };\n+        task.execute();\n+    }\n+\n+    private boolean hasInDependencies(JsonObject newPackageJson, String key) {\n+        return newPackageJson.hasKey(\"dependencies\")\n+                && newPackageJson.getObject(\"dependencies\").hasKey(key);\n+    }\n+\n+    private boolean hasInVaadinDependencies(JsonObject newPackageJson,\n+            String key) {\n+        return newPackageJson.hasKey(\"vaadin\") && newPackageJson\n+                .getObject(\"vaadin\").getObject(\"dependencies\").hasKey(key);\n+    }\n+\n     private void createBasicVaadinVersionsJson() {\n         createVaadinVersionsJson(PLATFORM_DIALOG_VERSION,\n                 PLATFORM_ELEMENT_MIXIN_VERSION, PLATFORM_OVERLAY_VERSION);\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonConverterTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonConverterTest.java\nindex 4a9a3aecfc6..f5b694c66fb 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonConverterTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonConverterTest.java\n@@ -64,7 +64,7 @@ public void convertPlatformVersions() throws IOException {\n         // @formatter:on\n \n         VersionsJsonConverter convert = new VersionsJsonConverter(\n-                Json.parse(json), false);\n+                Json.parse(json), false, false);\n         JsonObject convertedJson = convert.getConvertedJson();\n         Assert.assertTrue(convertedJson.hasKey(\"@vaadin/vaadin-progress-bar\"));\n         Assert.assertTrue(convertedJson.hasKey(\"@vaadin/vaadin-upload\"));\n@@ -127,7 +127,7 @@ public void reactRouterInUse_reactComponentsAreAdded() {\n                 \"\"\".formatted(VAADIN_CORE_NPM_PACKAGE);\n \n         VersionsJsonConverter convert = new VersionsJsonConverter(\n-                Json.parse(json), true);\n+                Json.parse(json), true, true);\n         JsonObject convertedJson = convert.getConvertedJson();\n         Assert.assertTrue(convertedJson.hasKey(\"@vaadin/vaadin-progress-bar\"));\n         Assert.assertTrue(convertedJson.hasKey(\"@vaadin/vaadin-upload\"));\n@@ -202,7 +202,7 @@ public void reactRouterNotUsed_reactComponentsIgnored() {\n                 \"\"\".formatted(VAADIN_CORE_NPM_PACKAGE);\n \n         VersionsJsonConverter convert = new VersionsJsonConverter(\n-                Json.parse(json), false);\n+                Json.parse(json), false, true);\n         JsonObject convertedJson = convert.getConvertedJson();\n         Assert.assertTrue(convertedJson.hasKey(\"@vaadin/vaadin-progress-bar\"));\n         Assert.assertTrue(convertedJson.hasKey(\"@vaadin/vaadin-upload\"));\n@@ -278,7 +278,7 @@ public void testModeProperty() {\n \n         // react enabled\n         VersionsJsonConverter convert = new VersionsJsonConverter(\n-                Json.parse(json), true);\n+                Json.parse(json), true, false);\n         JsonObject convertedJson = convert.getConvertedJson();\n         Assert.assertFalse(convertedJson.hasKey(\"@vaadin/vaadin-progress-bar\"));\n         Assert.assertTrue(convertedJson.hasKey(\"@vaadin/vaadin-upload\"));\n@@ -295,8 +295,27 @@ public void testModeProperty() {\n         Assert.assertFalse(convertedJson.hasKey(\"react-components\"));\n         Assert.assertFalse(convertedJson.hasKey(\"react-components-pro\"));\n \n+        // react enabled, exclude web components\n+        convert = new VersionsJsonConverter(Json.parse(json), true, true);\n+        convertedJson = convert.getConvertedJson();\n+        Assert.assertFalse(convertedJson.hasKey(\"@vaadin/vaadin-progress-bar\"));\n+        Assert.assertTrue(convertedJson.hasKey(\"@vaadin/vaadin-upload\"));\n+        Assert.assertTrue(convertedJson.hasKey(\"@polymer/iron-list\"));\n+        Assert.assertFalse(\n+                convertedJson.hasKey(\"@vaadin/react-components-pro\"));\n+        Assert.assertFalse(convertedJson.hasKey(\"@vaadin/react-components\"));\n+\n+        Assert.assertFalse(convertedJson.hasKey(\"flow\"));\n+        Assert.assertFalse(convertedJson.hasKey(\"core\"));\n+        Assert.assertFalse(convertedJson.hasKey(VAADIN_CORE_NPM_PACKAGE));\n+        Assert.assertFalse(convertedJson.hasKey(\"platform\"));\n+        Assert.assertFalse(convertedJson.hasKey(\"react\"));\n+        Assert.assertFalse(convertedJson.hasKey(\"react-pro\"));\n+        Assert.assertFalse(convertedJson.hasKey(\"react-components\"));\n+        Assert.assertFalse(convertedJson.hasKey(\"react-components-pro\"));\n+\n         // react disabled\n-        convert = new VersionsJsonConverter(Json.parse(json), false);\n+        convert = new VersionsJsonConverter(Json.parse(json), false, false);\n         convertedJson = convert.getConvertedJson();\n         Assert.assertTrue(convertedJson.hasKey(\"@vaadin/vaadin-progress-bar\"));\n         Assert.assertTrue(convertedJson.hasKey(\"@vaadin/vaadin-upload\"));\n@@ -305,6 +324,24 @@ public void testModeProperty() {\n                 convertedJson.hasKey(\"@vaadin/react-components-pro\"));\n         Assert.assertFalse(convertedJson.hasKey(\"@vaadin/react-components\"));\n \n+        Assert.assertFalse(convertedJson.hasKey(\"flow\"));\n+        Assert.assertFalse(convertedJson.hasKey(\"core\"));\n+        Assert.assertFalse(convertedJson.hasKey(VAADIN_CORE_NPM_PACKAGE));\n+        Assert.assertFalse(convertedJson.hasKey(\"platform\"));\n+        Assert.assertFalse(convertedJson.hasKey(\"react\"));\n+        Assert.assertFalse(convertedJson.hasKey(\"react-pro\"));\n+        Assert.assertFalse(convertedJson.hasKey(\"react-components\"));\n+\n+        // react disabled, exclude web components\n+        convert = new VersionsJsonConverter(Json.parse(json), false, true);\n+        convertedJson = convert.getConvertedJson();\n+        Assert.assertFalse(convertedJson.hasKey(\"@vaadin/vaadin-progress-bar\"));\n+        Assert.assertTrue(convertedJson.hasKey(\"@vaadin/vaadin-upload\"));\n+        Assert.assertTrue(convertedJson.hasKey(\"@polymer/iron-list\"));\n+        Assert.assertFalse(\n+                convertedJson.hasKey(\"@vaadin/react-components-pro\"));\n+        Assert.assertFalse(convertedJson.hasKey(\"@vaadin/react-components\"));\n+\n         Assert.assertFalse(convertedJson.hasKey(\"flow\"));\n         Assert.assertFalse(convertedJson.hasKey(\"core\"));\n         Assert.assertFalse(convertedJson.hasKey(VAADIN_CORE_NPM_PACKAGE));\n@@ -371,7 +408,7 @@ public void testExclusionsArrayProperty() {\n \n         // react enabled\n         VersionsJsonConverter convert = new VersionsJsonConverter(\n-                Json.parse(json), true);\n+                Json.parse(json), true, false);\n         JsonObject convertedJson = convert.getConvertedJson();\n         Assert.assertFalse(convertedJson.hasKey(\"@vaadin/vaadin-progress-bar\"));\n         Assert.assertFalse(convertedJson.hasKey(\"@vaadin/vaadin-upload\"));\n@@ -390,7 +427,7 @@ public void testExclusionsArrayProperty() {\n         Assert.assertFalse(convertedJson.hasKey(\"react-components-pro\"));\n \n         // react disabled\n-        convert = new VersionsJsonConverter(Json.parse(json), false);\n+        convert = new VersionsJsonConverter(Json.parse(json), false, false);\n         convertedJson = convert.getConvertedJson();\n         Assert.assertTrue(convertedJson.hasKey(\"@vaadin/vaadin-progress-bar\"));\n         Assert.assertTrue(convertedJson.hasKey(\"@vaadin/vaadin-upload\"));\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  }
]