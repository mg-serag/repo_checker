[
  {
    "instance_id": "iluwatar__java-design-patterns-3271",
    "pr_id": 3271,
    "issue_id": 3226,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Implement Thread-Pool Executor pattern\n## Description\n\nThe Thread-Pool Executor is a concurrency design pattern that maintains a pool of worker threads to process tasks. Rather than creating a new thread each time a task is submitted, the pattern reuses existing threads in the pool. This leads to more efficient CPU usage, less overhead from thread creation/destruction, and improved overall application performance.\n\n### Key Elements\n\n- **Thread Pool**: A fixed or dynamically sized set of threads that carry out tasks.\n- **Task Submission**: Tasks (e.g., `Runnable` or `Callable`) are placed in a queue for execution.\n- **Executor / ExecutorService**: Provides an interface for submitting tasks (`execute`, `submit`) and managing the pool (shutdown, etc.).\n- **Resource Management**: Reusing threads reduces overhead and improves response time in high-load scenarios.\n\n## References\n\n1. [Java Documentation for `ThreadPoolExecutor`](https://docs.oracle.com/en/java/javase/21//docs/api/java.base/java/util/concurrent/ThreadPoolExecutor.html)  \n2. [Java Concurrency in Practice](https://www.amazon.com/Java-Concurrency-Practice-Brian-Goetz/dp/0321349601) (Brian Goetz)  \n3. [Java Design Patterns - Contribution Guidelines](https://github.com/iluwatar/java-design-patterns/wiki)\n\n## Acceptance Criteria\n- [ ] Create a new module or package named `thread-pool-executor` (or similar).\n- [ ] Demonstrate how tasks can be submitted to an executor service and processed by a pool of threads.\n- [ ] Provide a README (or `.md` file) explaining the pattern, including code examples, diagrams, or both.\n- [ ] Ensure all code follows the repository’s style, naming conventions, and best practices.\n- [ ] Include unit tests that confirm correct behavior under load (multiple tasks) and confirm proper shutdown.\n- [ ] Pass all continuous integration checks and meet the project’s contribution guidelines.\n",
    "issue_word_count": 260,
    "test_files_count": 4,
    "non_test_files_count": 9,
    "pr_changed_files": [
      "pom.xml",
      "thread-pool-executor/README.md",
      "thread-pool-executor/etc/thread-pool-executor.urm.png",
      "thread-pool-executor/etc/thread-pool-executor.urm.puml",
      "thread-pool-executor/pom.xml",
      "thread-pool-executor/src/main/java/com/iluwatar/threadpoolexecutor/App.java",
      "thread-pool-executor/src/main/java/com/iluwatar/threadpoolexecutor/FrontDeskService.java",
      "thread-pool-executor/src/main/java/com/iluwatar/threadpoolexecutor/GuestCheckInTask.java",
      "thread-pool-executor/src/main/java/com/iluwatar/threadpoolexecutor/VipGuestCheckInTask.java",
      "thread-pool-executor/src/test/java/com/iluwatar/threadpoolexecutor/AppTest.java",
      "thread-pool-executor/src/test/java/com/iluwatar/threadpoolexecutor/FrontDeskServiceTest.java",
      "thread-pool-executor/src/test/java/com/iluwatar/threadpoolexecutor/GuestCheckInTaskTest.java",
      "thread-pool-executor/src/test/java/com/iluwatar/threadpoolexecutor/VipGuestCheckInTaskTest.java"
    ],
    "pr_changed_test_files": [
      "thread-pool-executor/src/test/java/com/iluwatar/threadpoolexecutor/AppTest.java",
      "thread-pool-executor/src/test/java/com/iluwatar/threadpoolexecutor/FrontDeskServiceTest.java",
      "thread-pool-executor/src/test/java/com/iluwatar/threadpoolexecutor/GuestCheckInTaskTest.java",
      "thread-pool-executor/src/test/java/com/iluwatar/threadpoolexecutor/VipGuestCheckInTaskTest.java"
    ],
    "base_commit": "8a64f4c5743f41a2b4fc8d28ecf1e9f13acb5a3b",
    "head_commit": "3ac5ce70c8f21d8127904d055a9763ef207ad8c6",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/3271",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/3271",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2025-05-15T18:53:38.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-3255",
    "pr_id": 3255,
    "issue_id": 3251,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Implement Actor Model pattern #3232Actor model\n## Description\r\n\r\nThis PR adds an implementation of the **Actor Model** pattern in Java as part of the ongoing effort to expand the collection of design patterns in this repository.\r\n\r\n### What's Included:\r\n- `src/`: Core Java classes implementing the Actor Model (`Actor`, `Message`, `ActorSystem`, `PrinterActor`, and `App`)\r\n- `README.md`: Description of the pattern, explanation, example usage, and when to apply\r\n- `etc/`: UML class diagram in both `.png` and `.urm.puml` format\r\n- `pom.xml`: Maven module configuration\r\n- Added the pattern module to the root `pom.xml`\r\n\r\nCloses #3232\r\n\r\n## Checklist ✅\r\n\r\n- [x] Code follows the [Google Java Style Guide](https://google.github.io/styleguide/javaguide.html)\r\n- [x] Code formatted using the Spotless Maven plugin (`./mvnw spotless:apply`)\r\n- [x] Pattern directory includes:\r\n  - [x] `src/`\r\n  - [x] `README.md`\r\n  - [x] `etc/` with diagrams\r\n  - [x] `pom.xml`\r\n- [x] Pattern added to parent `pom.xml`\r\n- [x] All links in `README.md` are relative\r\n- [x] Project compiles successfully using `./mvnw clean install`\r\n\r\n---\r\n\r\nLet me know if there are any required changes or improvements. I'm happy to collaborate and iterate!\r\n\r\n",
    "issue_word_count": 170,
    "test_files_count": 1,
    "non_test_files_count": 11,
    "pr_changed_files": [
      "actor-model/README.md",
      "actor-model/etc/Actor_Model_UML_Class_Diagram.png",
      "actor-model/etc/actor-model.urm.puml",
      "actor-model/pom.xml",
      "actor-model/src/main/java/com/iluwatar/actormodel/Actor.java",
      "actor-model/src/main/java/com/iluwatar/actormodel/ActorSystem.java",
      "actor-model/src/main/java/com/iluwatar/actormodel/App.java",
      "actor-model/src/main/java/com/iluwatar/actormodel/ExampleActor.java",
      "actor-model/src/main/java/com/iluwatar/actormodel/ExampleActor2.java",
      "actor-model/src/main/java/com/iluwatar/actormodel/Message.java",
      "actor-model/src/test/java/com/iluwatar/actor/ActorModelTest.java",
      "pom.xml"
    ],
    "pr_changed_test_files": [
      "actor-model/src/test/java/com/iluwatar/actor/ActorModelTest.java"
    ],
    "base_commit": "b8aa775d488e7297831c91ce74c411ef817ee39a",
    "head_commit": "afd64e0a40fb91448c6d8860aeb1999940fd6f2c",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/3255",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/3255",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2025-04-22T18:29:58.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-3249",
    "pr_id": 3249,
    "issue_id": 3233,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Implement Backpressure pattern\n## Description\n\nBackpressure is a mechanism used in reactive or streaming systems to prevent overwhelm by controlling the flow of data from producers to consumers. When a consumer cannot process data quickly enough, it signals the producer to slow down or buffer output. This ensures the system remains stable under high load and avoids excessive memory usage or dropped messages.\n\n### Key Elements\n\n- **Reactive Streams**: In Java, frameworks like Project Reactor or RxJava implement backpressure with APIs allowing consumers to request data at a sustainable rate.\n- **Flow Control**: Producers honor the consumer’s demand by sending data only as requested.\n- **Buffering & Throttling**: If the consumer is busy, the producer may buffer data or reduce emission rate.\n- **Stability & Resilience**: Helps prevent overproduction, out-of-memory errors, and overall system degradation under heavy load.\n\n## References\n\n1. [Reactive Streams Specification](https://www.reactive-streams.org/)\n2. [Project Reactor Reference Guide (Backpressure)](https://projectreactor.io/docs/core/release/reference/#backpressure)\n3. [Java Design Patterns – Contribution Guidelines](https://github.com/iluwatar/java-design-patterns/wiki)\n\n## Acceptance Criteria\n\n- [ ] Create a new module or package named `backpressure` (or similar).\n- [ ] Implement a simple producer-consumer flow illustrating how backpressure prevents overload.\n- [ ] Demonstrate how a consumer can signal demand and how a producer respects that demand.\n- [ ] Provide a README (or `.md` file) explaining the pattern and code architecture, along with diagrams if needed.\n- [ ] Include tests showcasing the system’s behavior under normal and high load.\n- [ ] Ensure compliance with project style and that all CI checks pass.\n",
    "issue_word_count": 245,
    "test_files_count": 4,
    "non_test_files_count": 7,
    "pr_changed_files": [
      "backpressure/README.md",
      "backpressure/etc/backpressure.png",
      "backpressure/pom.xml",
      "backpressure/src/main/java/com/iluwatar/backpressure/App.java",
      "backpressure/src/main/java/com/iluwatar/backpressure/Publisher.java",
      "backpressure/src/main/java/com/iluwatar/backpressure/Subscriber.java",
      "backpressure/src/test/java/com/iluwatar/backpressure/AppTest.java",
      "backpressure/src/test/java/com/iluwatar/backpressure/LoggerExtension.java",
      "backpressure/src/test/java/com/iluwatar/backpressure/PublisherTest.java",
      "backpressure/src/test/java/com/iluwatar/backpressure/SubscriberTest.java",
      "pom.xml"
    ],
    "pr_changed_test_files": [
      "backpressure/src/test/java/com/iluwatar/backpressure/AppTest.java",
      "backpressure/src/test/java/com/iluwatar/backpressure/LoggerExtension.java",
      "backpressure/src/test/java/com/iluwatar/backpressure/PublisherTest.java",
      "backpressure/src/test/java/com/iluwatar/backpressure/SubscriberTest.java"
    ],
    "base_commit": "cd224ea5fe969d90fabf86764224aff3283c8a6c",
    "head_commit": "817cfbce86fba34f6297945b5e2da2378d01398f",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/3249",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/3249",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2025-04-12T05:46:49.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-3223",
    "pr_id": 3223,
    "issue_id": 2898,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Publish/Subscribe pattern\nIntroduce the Publish/Subscribe pattern to provide a flexible event-handling system.\n\nThe Publish/Subscribe pattern is a messaging paradigm used in software architecture with several key points:\n\n* Decoupling of publishers and subscribers: Publishers and subscribers operate independently, and there's no direct link between them. This enhances the scalability and modularity of applications.\n\n* Event-driven communication: The pattern facilitates event-driven architectures by allowing publishers to broadcast events without concerning themselves with who receives the events.\n\n* Dynamic subscription: Subscribers can dynamically choose to listen for specific events or messages they are interested in, often by subscribing to a particular topic or channel.\n\n* Asynchronous processing: The pattern inherently supports asynchronous message processing, enabling efficient handling of events and improving application responsiveness.\n\n* Scalability: By decoupling senders and receivers, the pattern can support a large number of publishers and subscribers, making it suitable for scalable systems.\n\n* Flexibility and adaptability: New subscribers or publishers can be added to the system without significant changes to the existing components, making the system highly adaptable to evolving requirements.\n\nAcceptance Criteria:\n\n* The implementation must follow the project's coding standards and directory structure as outlined in the contribution guidelines.\n* Comprehensive unit tests must cover the new pattern implementation, ensuring all major use cases are accounted for.\n* Documentation must be provided, explaining the pattern, its use cases, and how the implementation solves a particular problem, including UML diagrams where applicable.",
    "issue_word_count": 232,
    "test_files_count": 6,
    "non_test_files_count": 13,
    "pr_changed_files": [
      "pom.xml",
      "publish-subscribe/README.md",
      "publish-subscribe/etc/pub-sub.png",
      "publish-subscribe/pom.xml",
      "publish-subscribe/src/main/java/com/iluwatar/publish/subscribe/App.java",
      "publish-subscribe/src/main/java/com/iluwatar/publish/subscribe/model/Message.java",
      "publish-subscribe/src/main/java/com/iluwatar/publish/subscribe/model/Topic.java",
      "publish-subscribe/src/main/java/com/iluwatar/publish/subscribe/publisher/Publisher.java",
      "publish-subscribe/src/main/java/com/iluwatar/publish/subscribe/publisher/PublisherImpl.java",
      "publish-subscribe/src/main/java/com/iluwatar/publish/subscribe/subscriber/CustomerSupportSubscriber.java",
      "publish-subscribe/src/main/java/com/iluwatar/publish/subscribe/subscriber/DelayedWeatherSubscriber.java",
      "publish-subscribe/src/main/java/com/iluwatar/publish/subscribe/subscriber/Subscriber.java",
      "publish-subscribe/src/main/java/com/iluwatar/publish/subscribe/subscriber/WeatherSubscriber.java",
      "publish-subscribe/src/test/java/com/iluwatar/publish/subscribe/AppTest.java",
      "publish-subscribe/src/test/java/com/iluwatar/publish/subscribe/LoggerExtension.java",
      "publish-subscribe/src/test/java/com/iluwatar/publish/subscribe/model/MessageTest.java",
      "publish-subscribe/src/test/java/com/iluwatar/publish/subscribe/model/TopicTest.java",
      "publish-subscribe/src/test/java/com/iluwatar/publish/subscribe/publisher/PublisherTest.java",
      "publish-subscribe/src/test/java/com/iluwatar/publish/subscribe/subscriber/SubscriberTest.java"
    ],
    "pr_changed_test_files": [
      "publish-subscribe/src/test/java/com/iluwatar/publish/subscribe/AppTest.java",
      "publish-subscribe/src/test/java/com/iluwatar/publish/subscribe/LoggerExtension.java",
      "publish-subscribe/src/test/java/com/iluwatar/publish/subscribe/model/MessageTest.java",
      "publish-subscribe/src/test/java/com/iluwatar/publish/subscribe/model/TopicTest.java",
      "publish-subscribe/src/test/java/com/iluwatar/publish/subscribe/publisher/PublisherTest.java",
      "publish-subscribe/src/test/java/com/iluwatar/publish/subscribe/subscriber/SubscriberTest.java"
    ],
    "base_commit": "0ca162a55cb0b81f687b7dc3ae991db1b90dca51",
    "head_commit": "f68c624ee0408c3b96bc69a2b17d13686a3d5111",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/3223",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/3223",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2025-03-30T17:24:16.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-3215",
    "pr_id": 3215,
    "issue_id": 381,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Service Stub pattern\n### Description\nThe Service Stub design pattern is used to create a simplified version of a service that mimics the behavior of a real service in a controlled manner. This is especially useful during development and testing phases when the actual service might be unavailable or its usage might be costly or impractical. The stub can return predefined responses and simulate various scenarios to ensure the application behaves as expected.\n\n#### Main Elements of the Pattern:\n- **Stub Creation:** Develop a stub that implements the same interface as the real service.\n- **Predefined Responses:** Configure the stub to return predefined responses based on input parameters.\n- **Behavior Simulation:** Simulate various behaviors such as success, failure, and exceptions.\n- **Seamless Replacement:** Ensure the stub can be seamlessly replaced with the real service with minimal changes to the application code.\n\n### References\n1. [Service Stub Pattern - Martin Fowler](http://martinfowler.com/eaaCatalog/serviceStub.html)\n2. [Mock and Stub in Unit Testing](https://www.baeldung.com/mockito-vs-easymock-vs-jmockit)\n3. [Java Design Patterns Wiki - Contribution Guidelines](https://github.com/iluwatar/java-design-patterns/wiki)\n\n### Acceptance Criteria\n1. Create a new package `service-stub` under the `patterns` directory.\n2. Implement the service stub following the principles of the pattern, including predefined responses and behavior simulation.\n3. Provide comprehensive unit tests to validate the stub's behavior in different scenarios.\n4. Update the README with an explanation of the Service Stub pattern, including example usage and code snippets.\n",
    "issue_word_count": 238,
    "test_files_count": 3,
    "non_test_files_count": 7,
    "pr_changed_files": [
      "pom.xml",
      "service-stub/README.md",
      "service-stub/pom.xml",
      "service-stub/src/main/java/com/iluwatar/servicestub/App.java",
      "service-stub/src/main/java/com/iluwatar/servicestub/RealSentimentAnalysisServer.java",
      "service-stub/src/main/java/com/iluwatar/servicestub/SentimentAnalysisServer.java",
      "service-stub/src/main/java/com/iluwatar/servicestub/StubSentimentAnalysisServer.java",
      "service-stub/src/test/java/com/iluwatar/servicestub/AppTest.java",
      "service-stub/src/test/java/com/iluwatar/servicestub/RealSentimentAnalysisServerTest.java",
      "service-stub/src/test/java/com/iluwatar/servicestub/StubSentimentAnalysisServerTest.java"
    ],
    "pr_changed_test_files": [
      "service-stub/src/test/java/com/iluwatar/servicestub/AppTest.java",
      "service-stub/src/test/java/com/iluwatar/servicestub/RealSentimentAnalysisServerTest.java",
      "service-stub/src/test/java/com/iluwatar/servicestub/StubSentimentAnalysisServerTest.java"
    ],
    "base_commit": "894ae8f10ca32b4a7876416f01f381cf49f15f83",
    "head_commit": "9a1cccc856ec2695d29b60ac3114a36f8016dd86",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/3215",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/3215",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2025-03-23T05:37:35.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-3203",
    "pr_id": 3203,
    "issue_id": 3202,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Typo fix and extending reflection handling to remaining Singleton implementations\nA small typo was found in ThreadSafeDoubleCheckLockingTest.\n`refection instead of reflection`\n\nOnly ThreadSafeDoubleCheckLockingTest had a test case for handling instantiation through Reflection, but this could be handled by the other Singleton implementations.",
    "issue_word_count": 32,
    "test_files_count": 3,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "singleton/src/main/java/com/iluwatar/singleton/BillPughImplementation.java",
      "singleton/src/main/java/com/iluwatar/singleton/InitializingOnDemandHolderIdiom.java",
      "singleton/src/main/java/com/iluwatar/singleton/IvoryTower.java",
      "singleton/src/test/java/com/iluwatar/singleton/EnumIvoryTowerTest.java",
      "singleton/src/test/java/com/iluwatar/singleton/SingletonTest.java",
      "singleton/src/test/java/com/iluwatar/singleton/ThreadSafeDoubleCheckLockingTest.java"
    ],
    "pr_changed_test_files": [
      "singleton/src/test/java/com/iluwatar/singleton/EnumIvoryTowerTest.java",
      "singleton/src/test/java/com/iluwatar/singleton/SingletonTest.java",
      "singleton/src/test/java/com/iluwatar/singleton/ThreadSafeDoubleCheckLockingTest.java"
    ],
    "base_commit": "17267493c6f5f5e7bf747244e57b07ea99b0ec3a",
    "head_commit": "28bb7da5c8f879ad9f667cc1ad72c5d3611c45e2",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/3203",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/3203",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2025-03-18T07:42:14.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-3184",
    "pr_id": 3184,
    "issue_id": 2927,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "MapReduce design pattern\nThe MapReduce design pattern is designed to process large volumes of data in a distributed and parallel manner, improving scalability and performance by utilizing multiple processing nodes. Originating from functional programming paradigms, it was popularized by Google as a way to perform distributed processing on huge datasets across many servers. Here’s a breakdown of its intent, main components, and data flow:\n\n**Intent**\n\nThe main intent of the MapReduce design pattern is to allow for the processing of large data sets with a distributed algorithm, minimizing the overall time of computation by exploiting various parallel computing nodes. This design pattern simplifies the complexity of concurrency and hides the details of data distribution, fault tolerance, and load balancing, making it an effective model for processing vast amounts of data.\n\n**Main Components**\n\nThe MapReduce design pattern primarily consists of three components:\n\n- Map Function: This component takes an input pair and produces a set of intermediate key/value pairs. The Map tasks are distributed across different nodes so that each node processes a subset of the data independently of others.\n- Reduce Function: This component processes all the intermediate values associated with the same intermediate key. It merges these values to form a possibly smaller set of values. Typically, each Reduce function operates in a way that it processes the outputs of multiple Map functions.\n- Master Node: The Master node orchestrates the process by dividing the input data into smaller sub-problems and assigning them to worker nodes. After the workers complete their tasks, the Master node collects the answers to form the output dataset.\n\n**Typical Data Flow**\n\nThe typical data flow in a MapReduce operation involves several key steps:\n\n- Input Slicing: The input data is divided into smaller chunks, which are then assigned to different worker nodes for processing. This is usually handled by the Master node.\n- Map Phase: Each worker node processes its assigned chunk of data, applying the Map function to each element. The results are intermediate key/value pairs stored in memory.\n- Shuffling: After the Map phase, the system reorganizes the intermediate data so that all data belonging to one key is sent to the same reducer. This involves sorting and transferring data across nodes.\n- Reduce Phase: Each reducer node processes the intermediate data pertaining to a specific key. The Reduce function is applied to merge these values into a smaller set of values or a single output value.\n- Output Generation: The final output of the Reduce functions is collected and often stored in a file system or returned to the application.\n\nBy breaking down data into smaller pieces that can be processed in parallel, and by organizing the processing so that each stage builds appropriately on the last, MapReduce can efficiently handle tasks that are too large for a single processing unit. This model is well-suited for tasks like large-scale text processing, data mining, and log analysis.\n\nAcceptance Criteria:\n\n- The implementation must clearly define and separate the 'Map' function for mapping input data into intermediate key/value pairs, and the 'Reduce' function for merging all intermediate values associated with the same intermediate key.\n- Include comprehensive unit tests to verify both the map and reduce functions operate as expected on test datasets.\n- Ensure the code adheres to the coding conventions and documentation requirements outlined in the project's contribution guidelines.\n",
    "issue_word_count": 552,
    "test_files_count": 4,
    "non_test_files_count": 10,
    "pr_changed_files": [
      "map-reduce/README.md",
      "map-reduce/etc/map-reduce.png",
      "map-reduce/etc/map-reduce.urm.puml",
      "map-reduce/pom.xml",
      "map-reduce/src/main/java/com/iluwatar/Main.java",
      "map-reduce/src/main/java/com/iluwatar/MapReduce.java",
      "map-reduce/src/main/java/com/iluwatar/Mapper.java",
      "map-reduce/src/main/java/com/iluwatar/Reducer.java",
      "map-reduce/src/main/java/com/iluwatar/Shuffler.java",
      "map-reduce/src/test/java/com/iluwatar/MapReduceTest.java",
      "map-reduce/src/test/java/com/iluwatar/MapperTest.java",
      "map-reduce/src/test/java/com/iluwatar/ReducerTest.java",
      "map-reduce/src/test/java/com/iluwatar/ShufflerTest.java",
      "pom.xml"
    ],
    "pr_changed_test_files": [
      "map-reduce/src/test/java/com/iluwatar/MapReduceTest.java",
      "map-reduce/src/test/java/com/iluwatar/MapperTest.java",
      "map-reduce/src/test/java/com/iluwatar/ReducerTest.java",
      "map-reduce/src/test/java/com/iluwatar/ShufflerTest.java"
    ],
    "base_commit": "e17f138223e61bcac673183bfa3adeedd8432f61",
    "head_commit": "30f97de843c9037fe3bbd9433bb0657c6fafe68d",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/3184",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/3184",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2025-02-22T18:08:05.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-3128",
    "pr_id": 3128,
    "issue_id": 2374,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "BLoC design pattern\n### Description\nThe BloC (Business Logic Component) design pattern helps separate business logic from UI components, making applications more modular, testable, and maintainable. This pattern is widely used in Flutter development and involves three main components: **Event**, **State**, and **Bloc**. Events are dispatched by the UI, which are processed by the Bloc to produce new States that the UI listens to and reacts accordingly.\n\nThe key elements of the BloC pattern are:\n1. **Event**: Represents the actions taken by the user or system.\n2. **State**: Represents the state of the UI at any point in time.\n3. **Bloc**: Handles the business logic, receives events, processes them, and emits new states.\n\n### References\n- [Flutter Clutter - What is the BloC Pattern?](https://www.flutterclutter.dev/flutter/basics/what-is-the-bloc-pattern/2021/2084/)\n- [Medium - Building Basic Flutter App with BloC Pattern](https://makb.medium.com/building-basic-flutter-app-with-bloc-pattern-acc5cd9f3472)\n- [Kodeco - Getting Started with the BloC Pattern](https://www.kodeco.com/31973428-getting-started-with-the-bloc-pattern)\n- [Mitrais - Getting Started with Flutter BloC Pattern](https://www.mitrais.com/news-updates/getting-started-with-flutter-bloc-pattern/)\n\n### Acceptance Criteria\n1. Implement a basic BloC pattern structure including Event, State, and Bloc classes.\n2. Provide a simple example demonstrating the pattern in action.\n3. Ensure the implementation follows the project contribution guidelines outlined [here](https://github.com/iluwatar/java-design-patterns/wiki).",
    "issue_word_count": 231,
    "test_files_count": 3,
    "non_test_files_count": 11,
    "pr_changed_files": [
      "bloc/README.md",
      "bloc/etc/bloc.png",
      "bloc/etc/bloc.puml",
      "bloc/pom.xml",
      "bloc/src/main/java/com/iluwatar/bloc/Bloc.java",
      "bloc/src/main/java/com/iluwatar/bloc/BlocUi.java",
      "bloc/src/main/java/com/iluwatar/bloc/ListenerManager.java",
      "bloc/src/main/java/com/iluwatar/bloc/Main.java",
      "bloc/src/main/java/com/iluwatar/bloc/State.java",
      "bloc/src/main/java/com/iluwatar/bloc/StateListener.java",
      "bloc/src/test/java/com/iluwatar/bloc/BlocTest.java",
      "bloc/src/test/java/com/iluwatar/bloc/BlocUiTest.java",
      "bloc/src/test/java/com/iluwatar/bloc/MainTest.java",
      "pom.xml"
    ],
    "pr_changed_test_files": [
      "bloc/src/test/java/com/iluwatar/bloc/BlocTest.java",
      "bloc/src/test/java/com/iluwatar/bloc/BlocUiTest.java",
      "bloc/src/test/java/com/iluwatar/bloc/MainTest.java"
    ],
    "base_commit": "3a1a71405bd2d78ba3e0dffcaa9f84b632259bae",
    "head_commit": "b5f255132447c942070c7deac357647275384417",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/3128",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/3128",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2025-01-16T14:56:54.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-3121",
    "pr_id": 3121,
    "issue_id": 1278,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Session Facade pattern\n### Description:\nImplement the Session Facade design pattern to simplify interactions between clients and complex subsystems within our project. The Session Facade pattern provides a unified interface to a set of interfaces in a subsystem, making it easier for clients to use the system by reducing the number of interactions required. This pattern promotes loose coupling and enhances scalability and maintainability by encapsulating the complexities of the subsystem.\n\nMain Elements of the Pattern:\n- **Facade Class:** A single class that provides a simplified interface to the complex subsystem.\n- **Subsystem Classes:** The classes that implement the subsystem functionality. These classes are hidden from the client.\n- **Client:** The user of the facade class.\n\n### References:\n1. [Java Design Patterns Wiki](https://github.com/iluwatar/java-design-patterns/wiki)\n2. [Session Facade Pattern - Google Books](https://books.google.fi/books?id=x-7_W0P9KGsC&printsec=frontcover&hl=fi&source=gbs_ge_summary_r&cad=0#v=onepage&q&f=false)\n\n### Acceptance Criteria:\n1. Implement a Facade class that provides a simplified interface to interact with the subsystem.\n2. Ensure that the subsystem classes are encapsulated and not exposed to the client.\n3. Add unit tests to verify the functionality and integration of the facade with the subsystem.\n",
    "issue_word_count": 197,
    "test_files_count": 5,
    "non_test_files_count": 12,
    "pr_changed_files": [
      "pom.xml",
      "session-facade/README.md",
      "session-facade/etc/session-facade.urm.png",
      "session-facade/etc/session-facade.urm.puml",
      "session-facade/pom.xml",
      "session-facade/src/main/java/com/iluwatar/sessionfacade/App.java",
      "session-facade/src/main/java/com/iluwatar/sessionfacade/CartService.java",
      "session-facade/src/main/java/com/iluwatar/sessionfacade/OrderService.java",
      "session-facade/src/main/java/com/iluwatar/sessionfacade/PaymentService.java",
      "session-facade/src/main/java/com/iluwatar/sessionfacade/Product.java",
      "session-facade/src/main/java/com/iluwatar/sessionfacade/ProductCatalogService.java",
      "session-facade/src/main/java/com/iluwatar/sessionfacade/ShoppingFacade.java",
      "session-facade/src/test/java/com/iluwatar/sessionfacade/AppTest.java",
      "session-facade/src/test/java/com/iluwatar/sessionfacade/CartServiceTest.java",
      "session-facade/src/test/java/com/iluwatar/sessionfacade/PaymentServiceTest.java",
      "session-facade/src/test/java/com/iluwatar/sessionfacade/ProductTest.java",
      "session-facade/src/test/java/com/iluwatar/sessionfacade/ShoppingFacadeTest.java"
    ],
    "pr_changed_test_files": [
      "session-facade/src/test/java/com/iluwatar/sessionfacade/AppTest.java",
      "session-facade/src/test/java/com/iluwatar/sessionfacade/CartServiceTest.java",
      "session-facade/src/test/java/com/iluwatar/sessionfacade/PaymentServiceTest.java",
      "session-facade/src/test/java/com/iluwatar/sessionfacade/ProductTest.java",
      "session-facade/src/test/java/com/iluwatar/sessionfacade/ShoppingFacadeTest.java"
    ],
    "base_commit": "bcad5b1aa31fbbe3d924ad7758e073e28495f240",
    "head_commit": "986449542c9a1b7b0b66fc50ae301b1fc6f1da93",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/3121",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/3121",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2025-01-11T15:45:01.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-3111",
    "pr_id": 3111,
    "issue_id": 2664,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Monolithic architecture\n### Description:\nThe Monolithic Architecture design pattern structures an application as a single, unified codebase where all modules and components are tightly integrated and run as a single service. This pattern simplifies development, testing, and deployment processes, making it suitable for smaller teams and applications with straightforward requirements. \n\nKey elements of the Monolithic Architecture:\n- **Single Codebase**: All the functionality of the application resides in a single code repository.\n- **Tight Coupling**: Components are closely interconnected, making it easy to share code and data within the application.\n- **Centralized Logic**: All business logic, data access, and user interfaces are housed in one application.\n- **Unified Deployment**: The entire application is deployed as a single unit.\n\nThis pattern is advantageous for applications that do not require complex scaling and have limited functional scope.\n\n### References:\n- [Monolithic Architecture](https://martinfowler.com/bliki/Monolith.html)\n- [Monolithic vs Microservices Architecture](https://microservices.io/patterns/monolithic.html)\n- [GitHub Contribution Guidelines](https://github.com/iluwatar/java-design-patterns/wiki)\n\n### Acceptance Criteria:\n1. **Project Structure**: Create a new module following the project structure guidelines.\n2. **Implementation**: Develop a simple monolithic application that incorporates all business logic, data access, and user interfaces within the single application.\n3. **Functionality**: Ensure the application covers a basic but comprehensive use case that demonstrates the Monolithic Architecture effectively.\n4. **Testing**: Write unit tests to cover key functionalities, ensuring robust test coverage.\n5. **Documentation**: Provide a detailed README file explaining:\n    - What the Monolithic Architecture is.\n    - Use cases and scenarios where it is applicable.\n    - How the provided example demonstrates the Monolithic Architecture pattern.\n6. **Quality Assurance**: Ensure all existing and new tests pass successfully.\n7. **Code Review**: Conduct a thorough code review to ensure the implementation adheres to the project's coding standards and best practices.\n8. **References**: Include references to relevant documentation and external resources that explain the Monolithic Architecture in detail.\n",
    "issue_word_count": 303,
    "test_files_count": 1,
    "non_test_files_count": 19,
    "pr_changed_files": [
      "monolithic-architecture/README.md",
      "monolithic-architecture/etc/Monolithic-Ecommerce.urm.puml",
      "monolithic-architecture/etc/monolithic-architecture.urm.puml",
      "monolithic-architecture/pom.xml",
      "monolithic-architecture/src/main/java/com/iluwatar/monolithic/EcommerceApp.java",
      "monolithic-architecture/src/main/java/com/iluwatar/monolithic/controller/OrderController.java",
      "monolithic-architecture/src/main/java/com/iluwatar/monolithic/controller/ProductController.java",
      "monolithic-architecture/src/main/java/com/iluwatar/monolithic/controller/UserController.java",
      "monolithic-architecture/src/main/java/com/iluwatar/monolithic/exceptions/InsufficientStockException.java",
      "monolithic-architecture/src/main/java/com/iluwatar/monolithic/exceptions/NonExistentProductException.java",
      "monolithic-architecture/src/main/java/com/iluwatar/monolithic/exceptions/NonExistentUserException.java",
      "monolithic-architecture/src/main/java/com/iluwatar/monolithic/model/Order.java",
      "monolithic-architecture/src/main/java/com/iluwatar/monolithic/model/Product.java",
      "monolithic-architecture/src/main/java/com/iluwatar/monolithic/model/User.java",
      "monolithic-architecture/src/main/java/com/iluwatar/monolithic/repository/OrderRepository.java",
      "monolithic-architecture/src/main/java/com/iluwatar/monolithic/repository/ProductRepository.java",
      "monolithic-architecture/src/main/java/com/iluwatar/monolithic/repository/UserRepository.java",
      "monolithic-architecture/src/main/resources/application.properties",
      "monolithic-architecture/src/test/java/com/iluwatar/monolithic/MonolithicAppTest.java",
      "pom.xml"
    ],
    "pr_changed_test_files": [
      "monolithic-architecture/src/test/java/com/iluwatar/monolithic/MonolithicAppTest.java"
    ],
    "base_commit": "9ad38a4f3ca3d26b1fe9eb9b13f10591a802adeb",
    "head_commit": "dfbfc1ec25fc3ee53af8ac2dfaeb9367328cdd43",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/3111",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/3111",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2025-02-15T07:53:59.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-3110",
    "pr_id": 3110,
    "issue_id": 1320,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Template View pattern\n### Description:\nThe Template View design pattern is aimed at creating a consistent structure for rendering views, ensuring that the core layout and styling are maintained while allowing for specific content to be dynamic. This pattern is particularly useful for web applications where views share a common framework but differ in the specific data or content they present. The main elements of the Template View design pattern include:\n\n- **Template Layout**: A base layout that defines the structure of the view, including headers, footers, and other common elements.\n- **Dynamic Content**: Sections within the template where specific data can be injected dynamically.\n- **Separation of Concerns**: Clear separation between the template (structure) and the content (data), allowing for easier maintenance and updates.\n\n### References:\n- [Martin Fowler's Template View](https://www.martinfowler.com/eaaCatalog/templateView.html)\n- [P of EAA](https://books.google.fi/books?id=vqTfNFDzzdIC&pg=PA303#v=onepage&q&f=false)\n- [Project Contribution Guidelines](https://github.com/iluwatar/java-design-patterns/wiki)\n\n### Acceptance Criteria:\n1. Implement a base template class that defines the overall structure of the view.\n2. Create dynamic content sections that can be overridden by specific view implementations.\n3. Ensure clear documentation and examples demonstrating the usage of the Template View pattern in different scenarios.",
    "issue_word_count": 205,
    "test_files_count": 4,
    "non_test_files_count": 9,
    "pr_changed_files": [
      "pom.xml",
      "templateview/README.md",
      "templateview/etc/template-view.urm.puml",
      "templateview/etc/template_view_urm.png",
      "templateview/pom.xml",
      "templateview/src/main/java/com/iluwatar/templateview/App.java",
      "templateview/src/main/java/com/iluwatar/templateview/ContactPageView.java",
      "templateview/src/main/java/com/iluwatar/templateview/HomePageView.java",
      "templateview/src/main/java/com/iluwatar/templateview/TemplateView.java",
      "templateview/src/test/java/com/iluwatar/templateview/AppTest.java",
      "templateview/src/test/java/com/iluwatar/templateview/ContactPageViewTest.java",
      "templateview/src/test/java/com/iluwatar/templateview/HomePageViewTest.java",
      "templateview/src/test/java/com/iluwatar/templateview/TemplateViewTest.java"
    ],
    "pr_changed_test_files": [
      "templateview/src/test/java/com/iluwatar/templateview/AppTest.java",
      "templateview/src/test/java/com/iluwatar/templateview/ContactPageViewTest.java",
      "templateview/src/test/java/com/iluwatar/templateview/HomePageViewTest.java",
      "templateview/src/test/java/com/iluwatar/templateview/TemplateViewTest.java"
    ],
    "base_commit": "ebcc070e11a2a81be761a71ea03263504b671656",
    "head_commit": "4afffa0ef764217d83338cc861ee82c5c49835ce",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/3110",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/3110",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2025-01-06T17:24:40.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-3109",
    "pr_id": 3109,
    "issue_id": 1305,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Money pattern\n### Description\nThe Money design pattern, as described by Martin Fowler, provides a way to encapsulate monetary values and their associated currencies. This pattern helps in handling calculations and operations involving money in a clear and reliable manner, avoiding common issues like rounding errors and ensuring currency consistency.\n\nKey Elements of the Money Pattern:\n- Encapsulation of a monetary value along with its currency.\n- Operations involving monetary values, such as addition, subtraction, and multiplication, which consider the currency.\n- Proper handling of rounding issues.\n- Conversion between different currencies using an exchange rate.\n\n### References\n- [Martin Fowler's Money Pattern](https://martinfowler.com/eaaCatalog/money.html)\n- [Patterns of Enterprise Application Architecture by Martin Fowler (Page 303)](https://books.google.fi/books?id=vqTfNFDzzdIC&pg=PA303#v=onepage&q&f=false)\n\n### Acceptance Criteria\n1. Create a `Money` class that encapsulates a monetary value and its associated currency.\n2. Implement operations (addition, subtraction, multiplication) on the `Money` class that handle currency consistency and rounding issues.\n3. Add functionality for currency conversion with appropriate handling of exchange rates.",
    "issue_word_count": 170,
    "test_files_count": 1,
    "non_test_files_count": 7,
    "pr_changed_files": [
      "money/README.md",
      "money/pom.xml",
      "money/src/main/java/com/iluwatar/App.java",
      "money/src/main/java/com/iluwatar/CannotAddTwoCurrienciesException.java",
      "money/src/main/java/com/iluwatar/CannotSubtractException.java",
      "money/src/main/java/com/iluwatar/Money.java",
      "money/src/test/java/com/iluwater/money/MoneyTest.java",
      "pom.xml"
    ],
    "pr_changed_test_files": [
      "money/src/test/java/com/iluwater/money/MoneyTest.java"
    ],
    "base_commit": "ac539606b1749ac895c0656262c5f4f00ca18560",
    "head_commit": "5fa526ce43d4f55514e8c28a5f271bd4ccc4d902",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/3109",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/3109",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2025-01-06T17:19:22.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-3105",
    "pr_id": 3105,
    "issue_id": 1274,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Table Inheritance pattern\n### Description\nThe Table Inheritance design pattern involves modeling a class hierarchy in a relational database. Each class in the hierarchy is mapped to its own table. The main elements of this pattern include:\n\n- **Class Hierarchy Representation**: Each class in the hierarchy has its own table.\n- **Primary Key**: All tables share a common primary key.\n- **Relationships**: Tables are related through foreign keys representing the inheritance structure.\n\nThis pattern is particularly useful when different subclasses have distinct properties that need to be stored in separate tables, and it helps in organizing complex data models efficiently.\n\n### References\n- [Table Inheritance Pattern - Martin Fowler](https://books.google.fi/books?id=x-7_W0P9KGsC&printsec=frontcover&hl=fi&source=gbs_ge_summary_r&cad=0#v=onepage&q&f=false)\n- [Java Design Patterns Contribution Guidelines](https://github.com/iluwatar/java-design-patterns/wiki)\n- [Book](https://books.google.fi/books?id=x-7_W0P9KGsC&printsec=frontcover&hl=fi&source=gbs_ge_summary_r&cad=0#v=onepage&q&f=false)\n\n### Acceptance Criteria\n1. Implement the Table Inheritance pattern with a sample class hierarchy.\n2. Ensure that each class in the hierarchy has its own table with a common primary key.\n3. Write unit tests to verify the correct behavior of the pattern implementation, ensuring proper data retrieval across the hierarchy.",
    "issue_word_count": 205,
    "test_files_count": 2,
    "non_test_files_count": 8,
    "pr_changed_files": [
      "pom.xml",
      "table-inheritance/README.md",
      "table-inheritance/pom.xml",
      "table-inheritance/src/main/java/com/iluwatar/table/inheritance/App.java",
      "table-inheritance/src/main/java/com/iluwatar/table/inheritance/Car.java",
      "table-inheritance/src/main/java/com/iluwatar/table/inheritance/Truck.java",
      "table-inheritance/src/main/java/com/iluwatar/table/inheritance/Vehicle.java",
      "table-inheritance/src/main/java/com/iluwatar/table/inheritance/VehicleDatabase.java",
      "table-inheritance/src/test/java/AppTest.java",
      "table-inheritance/src/test/java/VehicleDatabaseTest.java"
    ],
    "pr_changed_test_files": [
      "table-inheritance/src/test/java/AppTest.java",
      "table-inheritance/src/test/java/VehicleDatabaseTest.java"
    ],
    "base_commit": "8938054691c4d6e249f7ebad123381b7e0853be8",
    "head_commit": "f3346784272dbba02866b57c128c3ad78bd33270",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/3105",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/3105",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2025-01-06T17:03:28.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-3103",
    "pr_id": 3103,
    "issue_id": 2865,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Fix high severity issues reported by SonarCloud\nSonarCloud is used for static code analysis. It currently reports 48 high severity issues.\n\nSee https://sonarcloud.io/project/issues?impactSeverities=HIGH&resolved=false&id=iluwatar_java-design-patterns\n\nIt is possible to run the same analysis on local machine using SonarLint plugin. See instructions at https://github.com/iluwatar/java-design-patterns/wiki/12.-IDE-instructions\n\nAcceptance criteria\n\n- High severity issues reported by SonarCloud have been fixed",
    "issue_word_count": 67,
    "test_files_count": 3,
    "non_test_files_count": 6,
    "pr_changed_files": [
      "event-aggregator/src/main/java/com/iluwatar/event/aggregator/KingsHand.java",
      "filterer/src/main/java/com/iluwatar/filterer/threat/ThreatAwareSystem.java",
      "game-loop/src/test/java/com/iluwatar/gameloop/GameLoopTest.java",
      "serialized-lob/src/main/java/com/iluwatar/slob/dbservice/DatabaseService.java",
      "serialized-lob/src/main/java/com/iluwatar/slob/lob/Forest.java",
      "server-session/src/test/java/com/iluwatar/sessionserver/LoginHandlerTest.java",
      "server-session/src/test/java/com/iluwatar/sessionserver/LogoutHandlerTest.java",
      "type-object/src/main/java/com/iluwatar/typeobject/App.java",
      "type-object/src/main/java/com/iluwatar/typeobject/CandyGame.java"
    ],
    "pr_changed_test_files": [
      "game-loop/src/test/java/com/iluwatar/gameloop/GameLoopTest.java",
      "server-session/src/test/java/com/iluwatar/sessionserver/LoginHandlerTest.java",
      "server-session/src/test/java/com/iluwatar/sessionserver/LogoutHandlerTest.java"
    ],
    "base_commit": "b375919db5e5309c2bd3e524eb85634d65cb0336",
    "head_commit": "3290acc1eb07e9acc5090e3fe9c0c5d089367c0a",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/3103",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/3103",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2024-12-07T18:31:59.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-3082",
    "pr_id": 3082,
    "issue_id": 2683,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Microservice pattern: Idempotent consumer\n**Description:**\nThe Idempotent Customer design pattern is essential in microservices architectures to ensure that repeated processing of the same request does not produce different outcomes. This pattern helps in avoiding duplicate operations in distributed systems where network issues or retries might cause the same request to be sent multiple times.\n\n**Main Elements of the Pattern:**\n1. **Unique Request Identifier:** Assign a unique identifier to each request to track and manage its state.\n2. **Request Storage:** Store the request data and its state to check for duplicates.\n3. **State Management:** Implement mechanisms to manage the state of requests (e.g., pending, processing, completed) and to handle retries gracefully.\n4. **Response Handling:** Ensure that the same response is returned for repeated requests, preventing inconsistent outcomes.\n5. **Concurrency Control:** Use locking mechanisms or transactional processes to manage concurrent requests and ensure data integrity.\n\n**References:**\n- [Microservices Architecture - Idempotent Operations](https://martinfowler.com/bliki/IdempotentOperations.html)\n- [Microservices Patterns - Chris Richardson](https://microservices.io/patterns/fault-tolerance/idempotent-consumer.html)\n- [Project Contribution Guidelines](https://github.com/iluwatar/java-design-patterns/wiki)\n\n**Acceptance Criteria:**\n1. Implement a unique request identifier mechanism for the Idempotent Customer design pattern.\n2. Develop a request storage and state management system to handle and track the state of requests.\n3. Ensure that repeated requests return consistent responses and implement concurrency control mechanisms to maintain data integrity.",
    "issue_word_count": 224,
    "test_files_count": 3,
    "non_test_files_count": 10,
    "pr_changed_files": [
      "microservices-idempotent-consumer/README.md",
      "microservices-idempotent-consumer/pom.xml",
      "microservices-idempotent-consumer/src/main/java/com/iluwatar/idempotentconsumer/App.java",
      "microservices-idempotent-consumer/src/main/java/com/iluwatar/idempotentconsumer/InvalidNextStateException.java",
      "microservices-idempotent-consumer/src/main/java/com/iluwatar/idempotentconsumer/Request.java",
      "microservices-idempotent-consumer/src/main/java/com/iluwatar/idempotentconsumer/RequestNotFoundException.java",
      "microservices-idempotent-consumer/src/main/java/com/iluwatar/idempotentconsumer/RequestRepository.java",
      "microservices-idempotent-consumer/src/main/java/com/iluwatar/idempotentconsumer/RequestService.java",
      "microservices-idempotent-consumer/src/main/java/com/iluwatar/idempotentconsumer/RequestStateMachine.java",
      "microservices-idempotent-consumer/src/test/java/com/iluwatar/idempotentconsumer/AppTest.java",
      "microservices-idempotent-consumer/src/test/java/com/iluwatar/idempotentconsumer/RequestServiceTests.java",
      "microservices-idempotent-consumer/src/test/java/com/iluwatar/idempotentconsumer/RequestStateMachineTests.java",
      "pom.xml"
    ],
    "pr_changed_test_files": [
      "microservices-idempotent-consumer/src/test/java/com/iluwatar/idempotentconsumer/AppTest.java",
      "microservices-idempotent-consumer/src/test/java/com/iluwatar/idempotentconsumer/RequestServiceTests.java",
      "microservices-idempotent-consumer/src/test/java/com/iluwatar/idempotentconsumer/RequestStateMachineTests.java"
    ],
    "base_commit": "25bb77eee729686ee2d5ed88ecf983a77e536b79",
    "head_commit": "6696afc309e24f37d88c0efcc594f8a054415c3b",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/3082",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/3082",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2024-11-11T15:59:35.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-3062",
    "pr_id": 3062,
    "issue_id": 2698,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Microservice pattern: Client-side UI composition\n### Description:\nThe Client-Side UI Composition pattern is a design strategy used in microservices architectures to assemble the user interface on the client side. This pattern is particularly useful in complex applications where the UI is composed of multiple components, each served by different microservices. The key elements of this pattern include:\n\n1. **Micro Frontends:** Each UI component is developed and deployed independently, often by different teams, ensuring modularity and flexibility.\n2. **API Gateway:** Serves as a single entry point for the client, routing requests to the appropriate microservice.\n3. **Integration Layer:** Manages the integration of various UI components into a cohesive user experience on the client side.\n4. **Asynchronous Data Fetching:** Each component fetches its data asynchronously, often using techniques like AJAX or WebSockets.\n\n### References:\n- [Client-Side UI Composition pattern](https://microservices.io/patterns/ui/client-side-ui-composition.html)\n- [Project Contribution Guidelines](https://github.com/iluwatar/java-design-patterns/wiki)\n- [Micro Frontends Architecture](https://micro-frontends.org/)\n- [API Gateway Pattern](https://microservices.io/patterns/apigateway.html)\n- [Asynchronous JavaScript: AJAX and Fetch API](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Fetching_data)\n\n### Acceptance Criteria:\n1. **Micro Frontends Implementation:** \n   - Create multiple independent frontend modules.\n   - Ensure each module can be developed, tested, and deployed independently.\n\n2. **API Gateway Configuration:** \n   - Implement an API Gateway that routes client requests to the appropriate microservice.\n   - Ensure secure and efficient routing.\n\n3. **Client-Side Integration Layer:**\n   - Develop an integration layer that dynamically assembles the UI components on the client side.\n   - Ensure seamless communication between components.\n\n4. **Asynchronous Data Fetching:**\n   - Implement asynchronous data fetching for each UI component.\n   - Ensure data is fetched and displayed in a non-blocking manner to enhance user experience.\n\n5. **Documentation and Testing:**\n   - Provide detailed documentation on how to set up and use the Client-Side UI Composition pattern.\n   - Write comprehensive tests to ensure the integrity and functionality of the integrated UI.\n",
    "issue_word_count": 312,
    "test_files_count": 1,
    "non_test_files_count": 9,
    "pr_changed_files": [
      "microservices-client-side-ui-composition/ReadME.md",
      "microservices-client-side-ui-composition/etc/client-side-ui-composition.urm.puml",
      "microservices-client-side-ui-composition/pom.xml",
      "microservices-client-side-ui-composition/src/main/java/com/iluwatar/clientsideuicomposition/ApiGateway.java",
      "microservices-client-side-ui-composition/src/main/java/com/iluwatar/clientsideuicomposition/CartFrontend.java",
      "microservices-client-side-ui-composition/src/main/java/com/iluwatar/clientsideuicomposition/ClientSideIntegrator.java",
      "microservices-client-side-ui-composition/src/main/java/com/iluwatar/clientsideuicomposition/FrontendComponent.java",
      "microservices-client-side-ui-composition/src/main/java/com/iluwatar/clientsideuicomposition/ProductFrontend.java",
      "microservices-client-side-ui-composition/src/test/java/com/iluwatar/clientsideuicomposition/ClientSideCompositionTest.java",
      "pom.xml"
    ],
    "pr_changed_test_files": [
      "microservices-client-side-ui-composition/src/test/java/com/iluwatar/clientsideuicomposition/ClientSideCompositionTest.java"
    ],
    "base_commit": "c06bd2c5a188567784a4736e9516b681fb502397",
    "head_commit": "471ee47747545718cfd9a5f83311b945c8446323",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/3062",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/3062",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2025-01-06T18:55:08.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-3006",
    "pr_id": 3006,
    "issue_id": 2693,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Microservice pattern: Distributed tracing\n### Description\nThe objective is to implement the Distributed Tracing design pattern within the context of a microservices architecture. Distributed Tracing is essential for monitoring and troubleshooting complex microservices systems, as it provides visibility into the flow of requests across various services.\n\nMain elements of the Distributed Tracing pattern include:\n- **Trace Collection:** Collecting trace data from each microservice involved in processing a request.\n- **Trace Propagation:** Ensuring trace context is propagated across service boundaries.\n- **Trace Aggregation:** Aggregating trace data centrally for analysis and visualization.\n- **Trace Visualization:** Providing tools to visualize and analyze traces to identify performance bottlenecks, errors, and latency issues.\n\n### References\n- [Microservices Patterns](https://microservices.io/patterns/observability/distributed-tracing.html)\n- [Distributed Tracing on DZone](https://dzone.com/articles/distributed-tracing-1)\n- [OpenTracing Documentation](https://opentracing.io/docs/)\n- [Jaeger: open source, end-to-end distributed tracing](https://www.jaegertracing.io/)\n- [Project Contribution Guidelines](https://github.com/iluwatar/java-design-patterns/wiki)\n\n### Acceptance Criteria\n- **Trace Collection Implementation:** Implement trace collection mechanisms in each microservice, ensuring that trace data is collected and associated with individual requests.\n- **Trace Propagation Mechanism:** Develop and integrate a mechanism for propagating trace context across service boundaries, ensuring that trace data remains consistent as requests traverse different microservices.\n- **Trace Aggregation System:** Set up a centralized system for aggregating trace data from all microservices. This can be an existing solution like Jaeger or a custom implementation.\n- **Trace Visualization Tools:** Integrate tools for visualizing trace data, allowing for detailed analysis of request flows, performance bottlenecks, and errors.\n- **Documentation:** Provide comprehensive documentation detailing the implementation, configuration, and usage of the Distributed Tracing system within the microservices architecture.\n- **Testing:** Thoroughly test the implementation to ensure trace data is accurate, trace context is consistently propagated, and the visualization tools effectively display the aggregated trace data.\n",
    "issue_word_count": 291,
    "test_files_count": 5,
    "non_test_files_count": 25,
    "pr_changed_files": [
      "microservices-distributed-tracing/README.md",
      "microservices-distributed-tracing/etc/microservices-distributed-tracing.png",
      "microservices-distributed-tracing/etc/microservices-distributed-tracing.puml",
      "microservices-distributed-tracing/etc/microservices-distributed-tracing.urm.puml",
      "microservices-distributed-tracing/order-microservice/etc/order-microservice.png",
      "microservices-distributed-tracing/order-microservice/etc/order-microservice.puml",
      "microservices-distributed-tracing/order-microservice/etc/order-microservice.urm.puml",
      "microservices-distributed-tracing/order-microservice/pom.xml",
      "microservices-distributed-tracing/order-microservice/src/main/java/com/iluwatar/order/microservice/Main.java",
      "microservices-distributed-tracing/order-microservice/src/main/java/com/iluwatar/order/microservice/OrderController.java",
      "microservices-distributed-tracing/order-microservice/src/main/java/com/iluwatar/order/microservice/OrderService.java",
      "microservices-distributed-tracing/order-microservice/src/main/resources/application.properties",
      "microservices-distributed-tracing/order-microservice/src/test/java/com/iluwatar/order/microservice/MainTest.java",
      "microservices-distributed-tracing/order-microservice/src/test/java/com/iluwatar/order/microservice/OrderControllerTest.java",
      "microservices-distributed-tracing/order-microservice/src/test/java/com/iluwatar/order/microservice/OrderServiceTest.java",
      "microservices-distributed-tracing/payment-microservice/etc/payment-microservice.png",
      "microservices-distributed-tracing/payment-microservice/etc/payment-microservice.puml",
      "microservices-distributed-tracing/payment-microservice/etc/payment-microservice.urm.puml",
      "microservices-distributed-tracing/payment-microservice/pom.xml",
      "microservices-distributed-tracing/payment-microservice/src/main/java/com/iluwatar/payment/microservice/Main.java",
      "microservices-distributed-tracing/payment-microservice/src/main/java/com/iluwatar/payment/microservice/PaymentController.java",
      "microservices-distributed-tracing/payment-microservice/src/main/resources/application.properties",
      "microservices-distributed-tracing/payment-microservice/src/test/java/com/iluwatar/payment/microservice/MainTest.java",
      "microservices-distributed-tracing/payment-microservice/src/test/java/com/iluwatar/payment/microservice/ProductControllerTest.java",
      "microservices-distributed-tracing/pom.xml",
      "microservices-distributed-tracing/product-microservice/etc/product-microservice.png",
      "microservices-distributed-tracing/product-microservice/etc/product-microservice.puml",
      "microservices-distributed-tracing/product-microservice/etc/product-microservice.urm.puml",
      "microservices-distributed-tracing/product-microservice/pom.xml",
      "microservices-distributed-tracing/product-microservice/src/main/java/com/iluwatar/product/microservice/microservice/Main.java"
    ],
    "pr_changed_test_files": [
      "microservices-distributed-tracing/order-microservice/src/test/java/com/iluwatar/order/microservice/MainTest.java",
      "microservices-distributed-tracing/order-microservice/src/test/java/com/iluwatar/order/microservice/OrderControllerTest.java",
      "microservices-distributed-tracing/order-microservice/src/test/java/com/iluwatar/order/microservice/OrderServiceTest.java",
      "microservices-distributed-tracing/payment-microservice/src/test/java/com/iluwatar/payment/microservice/MainTest.java",
      "microservices-distributed-tracing/payment-microservice/src/test/java/com/iluwatar/payment/microservice/ProductControllerTest.java"
    ],
    "base_commit": "1d454f7721477ba8bab8d5f91326a3565450e7e8",
    "head_commit": "e1fc40e4996f4e157bfa03fee4f0e1544b5ed689",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/3006",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/3006",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2024-07-20T10:42:12.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-3001",
    "pr_id": 3001,
    "issue_id": 2975,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Refactor Visitor\n### Description\n\n`VisitorTest` has some code smells regarding `Optional` usage.\n\n1. `Optional<String>` has been used as class field type.\n2. `Optional<String>` has been used as parameter type.\n\n`Optional` is primarily intended for use as a method return type where there is a clear need to represent \"no result,\" and where using `null` is likely to cause errors. A variable whose type is `Optional` should never itself be null; it should always point to an `Optional` instance.\n\n### Acceptance Criteria\n\n- Code smells refactored\n",
    "issue_word_count": 82,
    "test_files_count": 4,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "visitor/src/test/java/com/iluwatar/visitor/CommanderVisitorTest.java",
      "visitor/src/test/java/com/iluwatar/visitor/SergeantVisitorTest.java",
      "visitor/src/test/java/com/iluwatar/visitor/SoldierVisitorTest.java",
      "visitor/src/test/java/com/iluwatar/visitor/VisitorTest.java"
    ],
    "pr_changed_test_files": [
      "visitor/src/test/java/com/iluwatar/visitor/CommanderVisitorTest.java",
      "visitor/src/test/java/com/iluwatar/visitor/SergeantVisitorTest.java",
      "visitor/src/test/java/com/iluwatar/visitor/SoldierVisitorTest.java",
      "visitor/src/test/java/com/iluwatar/visitor/VisitorTest.java"
    ],
    "base_commit": "fab64a262272a74036c57086f31ea63176788d8d",
    "head_commit": "e4f556652747ab9aba49861371d0221dfcdfb277",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/3001",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/3001",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2024-06-30T03:47:40.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-2986",
    "pr_id": 2986,
    "issue_id": 2979,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Refactor Front Controller\n### Description\n\nThe Front Controller design pattern typically consists of the following key parts:  \n\n1. Front Controller: A single handler that handles all the requests. It's responsible for processing application-level requests, performing common operations like authentication, authorization, logging, or tracking, and then delegating the business-level processing to a suitable handler.  \n2. Dispatcher: The dispatcher is responsible for view management and navigation, dispatching the request to the appropriate handler or view.  \n3. View: The view represents the presentation layer of the application. It's responsible for displaying the user interface and the data.  \n4. Command: The command encapsulates a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations.  \n\nLooking at the provided code from the front-controller module, it seems to have the Front Controller (FrontController), Command (Command), and View (View, ArcherView, CatapultView, ErrorView) components. However, it appears to be missing a distinct Dispatcher component.  In the current implementation, the Front Controller (FrontController) is directly handling the dispatching of requests to the appropriate views. While this might work for a simple application, for a more complex application with a larger number of views, having a separate Dispatcher can help keep the Front Controller from becoming overly complex and hard to maintain.\n\n### Acceptance Criteria\n\n- Dispatcher component added to the Front Controller example\n- README.md updated as necessary\n",
    "issue_word_count": 228,
    "test_files_count": 1,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "front-controller/README.md",
      "front-controller/src/main/java/com/iluwatar/front/controller/App.java",
      "front-controller/src/main/java/com/iluwatar/front/controller/Dispatcher.java",
      "front-controller/src/main/java/com/iluwatar/front/controller/FrontController.java",
      "front-controller/src/test/java/com/iluwatar/front/controller/DispatcherTest.java"
    ],
    "pr_changed_test_files": [
      "front-controller/src/test/java/com/iluwatar/front/controller/DispatcherTest.java"
    ],
    "base_commit": "f0611bcb108048999355596b48bf07964b840428",
    "head_commit": "dd821a5c1118033f1b89764c2797e29bbc321e27",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/2986",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/2986",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2024-06-06T05:02:53.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-2983",
    "pr_id": 2983,
    "issue_id": 2978,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Refactor Commander\n### Description\n\nCommander pattern has some dead code and it should be refactored. At the moment it has 4 different `App` classes and `main` functions. Each `App`'s `main` function only executes the success case, but not the failure cases (dead code).\n\n### Acceptance Criteria\n\n- 4 `App` classes refactored into one\n- There is only one `main` function\n- The `main` function executes all the success cases and the failure cases\n",
    "issue_word_count": 67,
    "test_files_count": 1,
    "non_test_files_count": 8,
    "pr_changed_files": [
      "commander/pom.xml",
      "commander/src/main/java/com/iluwatar/commander/AppAllCases.java",
      "commander/src/main/java/com/iluwatar/commander/AppEmployeeDbFailCases.java",
      "commander/src/main/java/com/iluwatar/commander/AppMessagingFailCases.java",
      "commander/src/main/java/com/iluwatar/commander/AppPaymentFailCases.java",
      "commander/src/main/java/com/iluwatar/commander/AppQueueFailCases.java",
      "commander/src/main/java/com/iluwatar/commander/AppShippingFailCases.java",
      "commander/src/main/java/com/iluwatar/commander/Commander.java",
      "commander/src/test/java/com/iluwatar/commander/CommanderTest.java"
    ],
    "pr_changed_test_files": [
      "commander/src/test/java/com/iluwatar/commander/CommanderTest.java"
    ],
    "base_commit": "d872bf97c9d26c068cd4fe6123576534865c02a2",
    "head_commit": "436b4837ef89aebcae5b79ef29cd5fe3afc5e5c6",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/2983",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/2983",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2024-06-04T03:42:26.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-2955",
    "pr_id": 2955,
    "issue_id": 2940,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Implement Virtual Proxy pattern\nThe Virtual Proxy design pattern is used to delay the creation and loading of expensive objects until their actual use, thereby reducing resource consumption. Here are the main points to consider when implementing this pattern:\n\n1. **Proxy Class:**\n   - Implement a proxy class that implements the same interface or inherits from the same base class as the actual expensive object. This class acts as a stand-in for the real object.\n   - The proxy class holds a reference to the real object, but initializes it only when necessary.\n\n2. **Real Subject (Expensive Object):**\n   - Implement the actual, resource-intensive object, known as the real subject or real object.\n   - Ensure that the interface provided by the real object matches that of the proxy.\n\n3. **Deferred Initialization:**\n   - In the proxy class, encapsulate the creation logic of the real object.\n   - Initialize the real object lazily, meaning that it is created only when one of its methods is accessed.\n\n4. **Transparent Usage:**\n   - The proxy should appear to be the real object to clients.\n   - The client should not notice whether they are accessing the proxy or the real object. All interactions should be routed seamlessly to the real object through the proxy.\n\n5. **Efficiency Considerations:**\n   - Implement caching mechanisms or logic to prevent redundant initialization.\n   - Make sure that the proxy introduces minimal overhead and improves performance in cases where the real object is not always required.\n\nBy encapsulating resource management in this way, the Virtual Proxy pattern makes expensive operations more efficient and ensures that unnecessary resource usage is avoided.\n\n**Acceptance Criteria:**\n\n- Implementation: The Virtual Proxy pattern is implemented following the project's contribution guidelines and includes an interface and a proxy class to encapsulate the actual object.\n\n- Documentation: The implementation is documented with clear examples, diagrams, and explanations in the README.md file.\n\n- Tests: Comprehensive unit tests validate the behavior of the proxy in controlling object creation and access.\n",
    "issue_word_count": 311,
    "test_files_count": 3,
    "non_test_files_count": 10,
    "pr_changed_files": [
      "pom.xml",
      "virtual-proxy/.gitignore",
      "virtual-proxy/README.md",
      "virtual-proxy/etc/virtual.proxy.urm.png",
      "virtual-proxy/etc/virtual.proxy.urm.puml",
      "virtual-proxy/pom.xml",
      "virtual-proxy/src/main/java/com/iluwatar/virtual/proxy/App.java",
      "virtual-proxy/src/main/java/com/iluwatar/virtual/proxy/ExpensiveObject.java",
      "virtual-proxy/src/main/java/com/iluwatar/virtual/proxy/RealVideoObject.java",
      "virtual-proxy/src/main/java/com/iluwatar/virtual/proxy/VideoObjectProxy.java",
      "virtual-proxy/src/test/java/com/iluwatar/virtual/proxy/AppTest.java",
      "virtual-proxy/src/test/java/com/iluwatar/virtual/proxy/RealVideoObjectTest.java",
      "virtual-proxy/src/test/java/com/iluwatar/virtual/proxy/VideoObjectProxyTest.java"
    ],
    "pr_changed_test_files": [
      "virtual-proxy/src/test/java/com/iluwatar/virtual/proxy/AppTest.java",
      "virtual-proxy/src/test/java/com/iluwatar/virtual/proxy/RealVideoObjectTest.java",
      "virtual-proxy/src/test/java/com/iluwatar/virtual/proxy/VideoObjectProxyTest.java"
    ],
    "base_commit": "1f7aaef392ed09444664ee1dc40780e1b38b4b45",
    "head_commit": "b83df0263132837763357a478ecca93cd81ccfa8",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/2955",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/2955",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2024-05-15T06:53:37.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-2954",
    "pr_id": 2954,
    "issue_id": 2897,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Function Composition pattern\nIntroduce the Function Composition pattern to enhance modularity and code reusability by composing complex functionalities from simpler functions.\n\nFor additional information, see the following links:\n\n- https://www.baeldung.com/java-functional-programming\n- https://functionalprogramming.medium.com/function-composition-in-java-beaf39426f52\n\nAcceptance Criteria:\n\n- Pattern Implementation: The Function Composition pattern should be correctly implemented in Java, demonstrating how smaller functions can be composed into more complex ones.\n- Documentation and Examples: Provide comprehensive documentation in the README, including a clear explanation of the pattern, its applicability, and a real-world example illustrating its use.\n- Test Coverage: Ensure the implementation is fully covered by unit tests, demonstrating the correctness and effectiveness of the function composition.",
    "issue_word_count": 112,
    "test_files_count": 2,
    "non_test_files_count": 8,
    "pr_changed_files": [
      "function-composition/.gitignore",
      "function-composition/README.md",
      "function-composition/etc/function.composition.urm.png",
      "function-composition/etc/function.composition.urm.puml",
      "function-composition/pom.xml",
      "function-composition/src/main/java/com/iluwatar/function/composition/App.java",
      "function-composition/src/main/java/com/iluwatar/function/composition/FunctionComposer.java",
      "function-composition/src/test/java/com/iluwatar/function/composition/AppTest.java",
      "function-composition/src/test/java/com/iluwatar/function/composition/FunctionComposerTest.java",
      "pom.xml"
    ],
    "pr_changed_test_files": [
      "function-composition/src/test/java/com/iluwatar/function/composition/AppTest.java",
      "function-composition/src/test/java/com/iluwatar/function/composition/FunctionComposerTest.java"
    ],
    "base_commit": "584e949714da5ef15e3fba872edfdbf66b98cee6",
    "head_commit": "5d879197ec67ce31431e9c91fb2956176b685766",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/2954",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/2954",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2024-06-01T02:26:46.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-2939",
    "pr_id": 2939,
    "issue_id": 2237,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Explanation for Lazy Loading\nIn this issue, let's add a proper explanation for the pattern.\n\nAcceptance criteria\n\n- The pattern's README.md has been amended with an explanation\n- The explanation consists of\n  - Real world example\n  - In plain words\n  - Wikipedia says\n  - Programmatic example\n",
    "issue_word_count": 39,
    "test_files_count": 4,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "lazy-loading/README.md",
      "lazy-loading/src/test/java/com/iluwatar/lazy/loading/AbstractHolderTest.java",
      "lazy-loading/src/test/java/com/iluwatar/lazy/loading/HolderNaiveTest.java",
      "lazy-loading/src/test/java/com/iluwatar/lazy/loading/HolderThreadSafeTest.java",
      "lazy-loading/src/test/java/com/iluwatar/lazy/loading/Java8HolderTest.java"
    ],
    "pr_changed_test_files": [
      "lazy-loading/src/test/java/com/iluwatar/lazy/loading/AbstractHolderTest.java",
      "lazy-loading/src/test/java/com/iluwatar/lazy/loading/HolderNaiveTest.java",
      "lazy-loading/src/test/java/com/iluwatar/lazy/loading/HolderThreadSafeTest.java",
      "lazy-loading/src/test/java/com/iluwatar/lazy/loading/Java8HolderTest.java"
    ],
    "base_commit": "7460e46f9c47492651ae33f8a7198f699d19cbb4",
    "head_commit": "dd82b660fc4ef70f56a33e47489630605e8d884f",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/2939",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/2939",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2024-05-06T07:16:02.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-2932",
    "pr_id": 2932,
    "issue_id": 2235,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Explanation for Hexagonal Architecture\nIn this issue, let's add a proper explanation for the pattern.\n\nAcceptance criteria\n\n- The pattern's README.md has been amended with an explanation\n- The explanation consists of\n  - Real world example\n  - In plain words\n  - Wikipedia says\n  - Programmatic example\n",
    "issue_word_count": 39,
    "test_files_count": 1,
    "non_test_files_count": 13,
    "pr_changed_files": [
      "hexagonal/README.md",
      "hexagonal/src/main/java/com/iluwatar/hexagonal/administration/ConsoleAdministrationSrvImpl.java",
      "hexagonal/src/main/java/com/iluwatar/hexagonal/banking/MongoBank.java",
      "hexagonal/src/main/java/com/iluwatar/hexagonal/database/MongoTicketRepository.java",
      "hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryAdministration.java",
      "hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryService.java",
      "hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryTicket.java",
      "hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryUtils.java",
      "hexagonal/src/main/java/com/iluwatar/hexagonal/domain/PlayerDetails.java",
      "hexagonal/src/main/java/com/iluwatar/hexagonal/eventlog/MongoEventLog.java",
      "hexagonal/src/main/java/com/iluwatar/hexagonal/eventlog/StdOutEventLog.java",
      "hexagonal/src/main/java/com/iluwatar/hexagonal/mongo/MongoConnectionPropertiesLoader.java",
      "hexagonal/src/main/java/com/iluwatar/hexagonal/sampledata/SampleData.java",
      "hexagonal/src/test/java/com/iluwatar/hexagonal/database/MongoTicketRepositoryTest.java"
    ],
    "pr_changed_test_files": [
      "hexagonal/src/test/java/com/iluwatar/hexagonal/database/MongoTicketRepositoryTest.java"
    ],
    "base_commit": "a2e43070448bde744ada07d350bd2a54135828ae",
    "head_commit": "9f74d7e975ff954ad9bafbbd5cb00d41e7b70c23",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/2932",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/2932",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2024-04-29T18:59:25.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-2925",
    "pr_id": 2925,
    "issue_id": 2865,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Fix high severity issues reported by SonarCloud\nSonarCloud is used for static code analysis. It currently reports 48 high severity issues.\n\nSee https://sonarcloud.io/project/issues?impactSeverities=HIGH&resolved=false&id=iluwatar_java-design-patterns\n\nIt is possible to run the same analysis on local machine using SonarLint plugin. See instructions at https://github.com/iluwatar/java-design-patterns/wiki/12.-IDE-instructions\n\nAcceptance criteria\n\n- High severity issues reported by SonarCloud have been fixed",
    "issue_word_count": 67,
    "test_files_count": 4,
    "non_test_files_count": 26,
    "pr_changed_files": [
      "commander/src/main/java/com/iluwatar/commander/AppEmployeeDbFailCases.java",
      "commander/src/main/java/com/iluwatar/commander/AppMessagingFailCases.java",
      "commander/src/main/java/com/iluwatar/commander/AppPaymentFailCases.java",
      "commander/src/main/java/com/iluwatar/commander/AppQueueFailCases.java",
      "commander/src/main/java/com/iluwatar/commander/AppShippingFailCases.java",
      "commander/src/main/java/com/iluwatar/commander/Commander.java",
      "commander/src/main/java/com/iluwatar/commander/RetryParams.java",
      "commander/src/main/java/com/iluwatar/commander/TimeLimits.java",
      "commander/src/main/java/com/iluwatar/commander/queue/QueueTask.java",
      "commander/src/test/java/com/iluwatar/commander/CommanderTest.java",
      "composite-view/src/main/java/com/iluwatar/compositeview/AppServlet.java",
      "context-object/src/main/java/com/iluwatar/context/object/App.java",
      "data-transfer-object/src/main/java/com/iluwatar/datatransfer/product/ProductResource.java",
      "double-dispatch/src/main/java/com/iluwatar/doubledispatch/SpaceStationMir.java",
      "embedded-value/src/main/java/com/iluwatar/embedded/value/App.java",
      "embedded-value/src/main/java/com/iluwatar/embedded/value/DataSource.java",
      "embedded-value/src/test/java/com/iluwatar/embedded/value/AppTest.java",
      "event-based-asynchronous/pom.xml",
      "event-based-asynchronous/src/main/java/com/iluwatar/event/asynchronous/App.java",
      "event-based-asynchronous/src/main/java/com/iluwatar/event/asynchronous/AsyncEvent.java",
      "event-based-asynchronous/src/main/java/com/iluwatar/event/asynchronous/EventManager.java",
      "event-based-asynchronous/src/test/java/com/iluwatar/event/asynchronous/EventAsynchronousTest.java",
      "execute-around/src/test/java/com/iluwatar/execute/around/SimpleFileWriterTest.java",
      "health-check/src/main/java/com/iluwatar/health/check/CpuHealthIndicator.java",
      "model-view-intent/src/main/java/com/iluwatar/model/view/intent/CalculatorViewModel.java",
      "model-view-intent/src/main/java/com/iluwatar/model/view/intent/actions/AdditionCalculatorAction.java",
      "model-view-intent/src/main/java/com/iluwatar/model/view/intent/actions/DivisionCalculatorAction.java",
      "model-view-intent/src/main/java/com/iluwatar/model/view/intent/actions/MultiplicationCalculatorAction.java",
      "model-view-intent/src/main/java/com/iluwatar/model/view/intent/actions/SetVariableCalculatorAction.java",
      "model-view-intent/src/main/java/com/iluwatar/model/view/intent/actions/SubtractionCalculatorAction.java"
    ],
    "pr_changed_test_files": [
      "commander/src/test/java/com/iluwatar/commander/CommanderTest.java",
      "embedded-value/src/test/java/com/iluwatar/embedded/value/AppTest.java",
      "event-based-asynchronous/src/test/java/com/iluwatar/event/asynchronous/EventAsynchronousTest.java",
      "execute-around/src/test/java/com/iluwatar/execute/around/SimpleFileWriterTest.java"
    ],
    "base_commit": "5e12bc588a97a21f395337c7b59005a0f0371206",
    "head_commit": "db8f8e83f4d8a5562fcb0325279d33c102c2b92e",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/2925",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/2925",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2024-05-04T05:20:01.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-2921",
    "pr_id": 2921,
    "issue_id": 2860,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Fix subclass sandbox tests\nThe tests for Subclass Sandbox are currently disabled since they don't work anymore after logging dependency upgrade.\n\nAcceptance criteria\n\n- Subclass Sandbox tests fixed and re-enabled\n",
    "issue_word_count": 27,
    "test_files_count": 2,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "subclass-sandbox/src/test/java/com/iluwatar/subclasssandbox/GroundDiveTest.java",
      "subclass-sandbox/src/test/java/com/iluwatar/subclasssandbox/SkyLaunchTest.java"
    ],
    "pr_changed_test_files": [
      "subclass-sandbox/src/test/java/com/iluwatar/subclasssandbox/GroundDiveTest.java",
      "subclass-sandbox/src/test/java/com/iluwatar/subclasssandbox/SkyLaunchTest.java"
    ],
    "base_commit": "7cebde007bad4cae27bbb024b31d8e7840d42aec",
    "head_commit": "835018cc69f57b457e1159cff8bedab0154be5ed",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/2921",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/2921",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2024-04-17T17:59:55.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-2916",
    "pr_id": 2916,
    "issue_id": 2226,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Explanation for Event-Based Asynchronous\nIn this issue, let's add a proper explanation for the pattern.\n\nAcceptance criteria\n\n- The pattern's README.md has been amended with an explanation\n- The explanation consists of\n  - Real world example\n  - In plain words\n  - Wikipedia says\n  - Programmatic example\n",
    "issue_word_count": 39,
    "test_files_count": 2,
    "non_test_files_count": 18,
    "pr_changed_files": [
      "event-asynchronous/README.md",
      "event-based-asynchronous/README.md",
      "event-based-asynchronous/etc/event-asynchronous.png",
      "event-based-asynchronous/etc/event-asynchronous.ucls",
      "event-based-asynchronous/etc/event-asynchronous.urm.puml",
      "event-based-asynchronous/etc/event-based-asynchronous.urm.puml",
      "event-based-asynchronous/pom.xml",
      "event-based-asynchronous/src/main/java/com/iluwatar/event/asynchronous/App.java",
      "event-based-asynchronous/src/main/java/com/iluwatar/event/asynchronous/AsyncEvent.java",
      "event-based-asynchronous/src/main/java/com/iluwatar/event/asynchronous/Event.java",
      "event-based-asynchronous/src/main/java/com/iluwatar/event/asynchronous/EventDoesNotExistException.java",
      "event-based-asynchronous/src/main/java/com/iluwatar/event/asynchronous/EventManager.java",
      "event-based-asynchronous/src/main/java/com/iluwatar/event/asynchronous/InvalidOperationException.java",
      "event-based-asynchronous/src/main/java/com/iluwatar/event/asynchronous/LongRunningEventException.java",
      "event-based-asynchronous/src/main/java/com/iluwatar/event/asynchronous/MaxNumOfEventsAllowedException.java",
      "event-based-asynchronous/src/main/java/com/iluwatar/event/asynchronous/ThreadCompleteListener.java",
      "event-based-asynchronous/src/main/resources/config.properties",
      "event-based-asynchronous/src/test/java/com/iluwatar/event/asynchronous/AppTest.java",
      "event-based-asynchronous/src/test/java/com/iluwatar/event/asynchronous/EventAsynchronousTest.java",
      "pom.xml"
    ],
    "pr_changed_test_files": [
      "event-based-asynchronous/src/test/java/com/iluwatar/event/asynchronous/AppTest.java",
      "event-based-asynchronous/src/test/java/com/iluwatar/event/asynchronous/EventAsynchronousTest.java"
    ],
    "base_commit": "8a3bed0e950cbc5d9030aa51caf070ecd70cba94",
    "head_commit": "d2e21b17fbbf380a41dd7737d5ecf96a5d126b3a",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/2916",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/2916",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2024-04-14T10:10:39.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-2915",
    "pr_id": 2915,
    "issue_id": 2225,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Explanation for Double Dispatch\nIn this issue, let's add a proper explanation for the pattern.\n\nAcceptance criteria\n\n- The pattern's README.md has been amended with an explanation\n- The explanation consists of\n  - Real world example\n  - In plain words\n  - Wikipedia says\n  - Programmatic example\n",
    "issue_word_count": 39,
    "test_files_count": 2,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "double-dispatch/README.md",
      "double-dispatch/src/main/java/com/iluwatar/doubledispatch/GameObject.java",
      "double-dispatch/src/test/java/com/iluwatar/doubledispatch/AppTest.java",
      "double-dispatch/src/test/java/com/iluwatar/doubledispatch/RectangleTest.java"
    ],
    "pr_changed_test_files": [
      "double-dispatch/src/test/java/com/iluwatar/doubledispatch/AppTest.java",
      "double-dispatch/src/test/java/com/iluwatar/doubledispatch/RectangleTest.java"
    ],
    "base_commit": "9240d80ef2b0eb35c92be3baec74c6e4b95de06a",
    "head_commit": "bb89ce2391e5a06df0e8ee020111a5087c4ef599",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/2915",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/2915",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2024-04-13T05:30:48.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-2914",
    "pr_id": 2914,
    "issue_id": 2224,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Explanation for Double Checked Locking\nIn this issue, let's add a proper explanation for the pattern.\n\nAcceptance criteria\n\n- The pattern's README.md has been amended with an explanation\n- The explanation consists of\n  - Real world example\n  - In plain words\n  - Wikipedia says\n  - Programmatic example\n",
    "issue_word_count": 39,
    "test_files_count": 2,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "double-checked-locking/README.md",
      "double-checked-locking/src/test/java/com/iluwatar/doublechecked/locking/AppTest.java",
      "double-checked-locking/src/test/java/com/iluwatar/doublechecked/locking/InventoryTest.java"
    ],
    "pr_changed_test_files": [
      "double-checked-locking/src/test/java/com/iluwatar/doublechecked/locking/AppTest.java",
      "double-checked-locking/src/test/java/com/iluwatar/doublechecked/locking/InventoryTest.java"
    ],
    "base_commit": "2807f1f97642082c5458df680b1844f75546a93c",
    "head_commit": "fa0a4a0ea47049821b537e1f877ce76ae9cf0fc3",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/2914",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/2914",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2024-04-13T05:02:30.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-2910",
    "pr_id": 2910,
    "issue_id": 2904,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "api-gateway - create a new class, PriceService to return the price to the controller\nWe should remove the whole of the logic from the controller and move this logic to a service. \r\nmove logic from \r\n`api-gateway/price-microservice/src/main/java/com/iluwatar/price/microservice/PriceController.java`\r\nto a new class\r\n`api-gateway/price-microservice/src/main/java/com/iluwatar/price/microservice/PriceService.java`\r\nand call from the controller to this service.",
    "issue_word_count": 59,
    "test_files_count": 2,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "api-gateway/price-microservice/src/main/java/com/iluwatar/price/microservice/PriceController.java",
      "api-gateway/price-microservice/src/main/java/com/iluwatar/price/microservice/PriceService.java",
      "api-gateway/price-microservice/src/main/java/com/iluwatar/price/microservice/PriceServiceImpl.java",
      "api-gateway/price-microservice/src/test/java/com/iluwatar/price/microservice/PriceControllerTest.java",
      "api-gateway/price-microservice/src/test/java/com/iluwatar/price/microservice/PriceServiceTest.java"
    ],
    "pr_changed_test_files": [
      "api-gateway/price-microservice/src/test/java/com/iluwatar/price/microservice/PriceControllerTest.java",
      "api-gateway/price-microservice/src/test/java/com/iluwatar/price/microservice/PriceServiceTest.java"
    ],
    "base_commit": "66538ddcdad120deb86c580164ca7c4f3bdb7b3a",
    "head_commit": "79074cd6243779656ae625b5ed4923bd9c27f9f6",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/2910",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/2910",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2024-04-10T18:13:35.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-2909",
    "pr_id": 2909,
    "issue_id": 2848,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Implement Server Session pattern\nThe Server Session pattern is a design pattern primarily used in web development to manage user sessions on the server-side. When a user interacts with a web application, a unique session is created and maintained on the server for that user. This session stores information about the user's state and interactions with the application, such as login credentials, user preferences, and shopping cart contents.\n\nIn this pattern, the server generates a unique session identifier (session ID) for each user session, which is typically sent to the client's browser as a cookie. The client's browser then sends this session ID back to the server with each subsequent request, allowing the server to retrieve the session data and maintain continuity in the user's experience.\n\nKey aspects of the Server Session pattern include:\n\n- Session Creation: When a user first accesses the application, a new session is created on the server if one does not already exist.\n- Session Storage: Session data is stored on the server, which can be in memory, a database, or other persistent storage mechanisms.\n- Session Expiry: Sessions have a defined lifetime after which they expire, requiring re-authentication or creating a new session to ensure security.\n- Session Cleanup: Periodically, the server cleans up expired sessions to free resources.\n\nThis pattern is essential for maintaining a stateful interaction between a stateless HTTP client and server, providing a personalized user experience across web requests.\n\nAcceptance Criteria:\n\n- The implementation should follow the architectural style and conventions outlined in the project's contribution guidelines.\n- Adequate unit and integration tests must be included to ensure the pattern's functionality and reliability.\n- Documentation should be provided to explain the pattern's purpose, how it was implemented, and a basic usage example.\n",
    "issue_word_count": 290,
    "test_files_count": 2,
    "non_test_files_count": 5,
    "pr_changed_files": [
      "server-session/README.md",
      "server-session/pom.xml",
      "server-session/src/main/java/com/iluwatar/sessionserver/App.java",
      "server-session/src/main/java/com/iluwatar/sessionserver/LoginHandler.java",
      "server-session/src/main/java/com/iluwatar/sessionserver/LogoutHandler.java",
      "server-session/src/test/java/com.iluwatar.sessionserver/LoginHandlerTest.java",
      "server-session/src/test/java/com.iluwatar.sessionserver/LogoutHandlerTest.java"
    ],
    "pr_changed_test_files": [
      "server-session/src/test/java/com.iluwatar.sessionserver/LoginHandlerTest.java",
      "server-session/src/test/java/com.iluwatar.sessionserver/LogoutHandlerTest.java"
    ],
    "base_commit": "70fc5736f626a0d12da4531abf8940929300eadc",
    "head_commit": "00a7d1312c0200d47c06970c944e69873851bd7b",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/2909",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/2909",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2024-04-11T15:55:47.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-2908",
    "pr_id": 2908,
    "issue_id": 2222,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Explanation for Dirty Flag\nIn this issue, let's add a proper explanation for the pattern.\n\nAcceptance criteria\n\n- The pattern's README.md has been amended with an explanation\n- The explanation consists of\n  - Real world example\n  - In plain words\n  - Wikipedia says\n  - Programmatic example\n",
    "issue_word_count": 39,
    "test_files_count": 1,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "dirty-flag/README.md",
      "dirty-flag/src/main/java/com/iluwatar/dirtyflag/DataFetcher.java",
      "dirty-flag/src/main/resources/world.txt",
      "dirty-flag/src/test/java/org/dirty/flag/AppTest.java"
    ],
    "pr_changed_test_files": [
      "dirty-flag/src/test/java/org/dirty/flag/AppTest.java"
    ],
    "base_commit": "317f9c3920da97fa7b5e7d64f6f53b06512bfc5a",
    "head_commit": "ba70667be0073ee983068c3451f63f9c21d2e261",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/2908",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/2908",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2024-04-09T18:02:36.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-2900",
    "pr_id": 2900,
    "issue_id": 2220,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Explanation for Data Mapper\nIn this issue, let's add a proper explanation for the pattern.\n\nAcceptance criteria\n\n- The pattern's README.md has been amended with an explanation\n- The explanation consists of\n  - Real world example\n  - In plain words\n  - Wikipedia says\n  - Programmatic example\n",
    "issue_word_count": 39,
    "test_files_count": 2,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "data-mapper/README.md",
      "data-mapper/src/main/java/com/iluwatar/datamapper/DataMapperException.java",
      "data-mapper/src/main/java/com/iluwatar/datamapper/Student.java",
      "data-mapper/src/main/java/com/iluwatar/datamapper/StudentDataMapperImpl.java",
      "data-mapper/src/test/java/com/iluwatar/datamapper/AppTest.java",
      "data-mapper/src/test/java/com/iluwatar/datamapper/StudentTest.java"
    ],
    "pr_changed_test_files": [
      "data-mapper/src/test/java/com/iluwatar/datamapper/AppTest.java",
      "data-mapper/src/test/java/com/iluwatar/datamapper/StudentTest.java"
    ],
    "base_commit": "ea55eb4e58dc7c0b3517dfb92c3a9b7cec1f6954",
    "head_commit": "70631f78281e8aa2642186a821cf500f906ed235",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/2900",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/2900",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2024-04-07T10:59:27.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-2899",
    "pr_id": 2899,
    "issue_id": 2219,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Explanation for Data Locality\nIn this issue, let's add a proper explanation for the pattern.\n\nAcceptance criteria\n\n- The pattern's README.md has been amended with an explanation\n- The explanation consists of\n  - Real world example\n  - In plain words\n  - Wikipedia says\n  - Programmatic example\n",
    "issue_word_count": 39,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "data-locality/README.md",
      "data-locality/src/test/java/com/iluwatar/data/locality/ApplicationTest.java"
    ],
    "pr_changed_test_files": [
      "data-locality/src/test/java/com/iluwatar/data/locality/ApplicationTest.java"
    ],
    "base_commit": "356ba272720da7eb9cf3d622a4768c0957fa0e87",
    "head_commit": "7c7f8ba21ae94a0017c36a9a7588d49265d09f86",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/2899",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/2899",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2024-04-07T09:15:09.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-2884",
    "pr_id": 2884,
    "issue_id": 2880,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Flaky test in Thread Local Storage\nThe build randomly fails due to Thread-local Storage test failure. See the log below:\n\n```\n[INFO] -------------------------------------------------------\n[INFO]  T E S T S\n[INFO] -------------------------------------------------------\n[INFO] Running ThreadLocalTest\nError:  Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 6.086 s <<< FAILURE! -- in ThreadLocalTest\nError:  ThreadLocalTest.withoutThreadLocal -- Time elapsed: 3.052 s <<< FAILURE!\norg.opentest4j.AssertionFailedError: expected: <false> but was: <true>\n\tat org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:55)\n\tat org.junit.jupiter.api.AssertFalse.assertFalse(AssertFalse.java:40)\n\tat org.junit.jupiter.api.AssertFalse.assertFalse(AssertFalse.java:35)\n\tat org.junit.jupiter.api.Assertions.assertFalse(Assertions.java:227)\n\tat ThreadLocalTest.withoutThreadLocal(ThreadLocalTest.java:68)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:725)\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:214)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:210)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:135)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:66)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)\n\tat org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)\n\tat org.apache.maven.surefire.junitplatform.LazyLauncher.execute(LazyLauncher.java:56)\n\tat org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:184)\n\tat org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:148)\n\tat org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:122)\n\tat org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)\n\tat org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)\n\tat org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)\n\tat org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)\n\n[INFO] \n[INFO] Results:\n[INFO] \nError:  Failures: \nError:    ThreadLocalTest.withoutThreadLocal:68 expected: <false> but was: <true>\n[INFO] \nError:  Tests run: 2, Failures: 1, Errors: 0, Skipped: 0\n```\n\nAcceptance criteria\n- Flaky test fixed\n",
    "issue_word_count": 965,
    "test_files_count": 1,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "thread-local-storage/src/test/java/ThreadLocalTest.java"
    ],
    "pr_changed_test_files": [
      "thread-local-storage/src/test/java/ThreadLocalTest.java"
    ],
    "base_commit": "de5a93c499e3879d8ca0a09353896b64b98bff9a",
    "head_commit": "a4b15e9a7a27b10949be95f2de38d4e7bc7697b6",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/2884",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/2884",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2024-04-01T14:54:50.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-2878",
    "pr_id": 2878,
    "issue_id": 2216,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Explanation for Commander\nIn this issue, let's add a proper explanation for the pattern.\n\nAcceptance criteria\n\n- The pattern's README.md has been amended with an explanation\n- The explanation consists of\n  - Real world example\n  - In plain words\n  - Wikipedia says\n  - Programmatic example\n",
    "issue_word_count": 39,
    "test_files_count": 1,
    "non_test_files_count": 8,
    "pr_changed_files": [
      "commander/README.md",
      "commander/src/main/java/com/iluwatar/commander/Commander.java",
      "commander/src/main/java/com/iluwatar/commander/Retry.java",
      "commander/src/main/java/com/iluwatar/commander/employeehandle/EmployeeHandle.java",
      "commander/src/main/java/com/iluwatar/commander/messagingservice/MessagingDatabase.java",
      "commander/src/main/java/com/iluwatar/commander/messagingservice/MessagingService.java",
      "commander/src/main/java/com/iluwatar/commander/paymentservice/PaymentService.java",
      "commander/src/main/java/com/iluwatar/commander/queue/QueueDatabase.java",
      "commander/src/test/java/com/iluwatar/commander/RetryTest.java"
    ],
    "pr_changed_test_files": [
      "commander/src/test/java/com/iluwatar/commander/RetryTest.java"
    ],
    "base_commit": "2228212c2361c3ed54babe2b3778f386f5aac9d5",
    "head_commit": "bdf5c9452f45f60fb4718f226f9977a290f51b9e",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/2878",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/2878",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2024-03-30T15:37:03.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "iluwatar__java-design-patterns-2877",
    "pr_id": 2877,
    "issue_id": 2876,
    "repo": "iluwatar/java-design-patterns",
    "problem_statement": "Explanation for Combinator pattern\nIn this issue, let's add a proper explanation for the pattern.\n\nAcceptance criteria\n\n- The pattern's README.md has been amended with an explanation\n- The explanation consists of\n    - Real world example\n    - In plain words\n    - Wikipedia says\n    - Programmatic example",
    "issue_word_count": 39,
    "test_files_count": 2,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "combinator/README.md",
      "combinator/src/test/java/com/iluwatar/combinator/FinderTest.java",
      "combinator/src/test/java/com/iluwatar/combinator/FindersTest.java"
    ],
    "pr_changed_test_files": [
      "combinator/src/test/java/com/iluwatar/combinator/FinderTest.java",
      "combinator/src/test/java/com/iluwatar/combinator/FindersTest.java"
    ],
    "base_commit": "8471c93035b643528455cbba3957a0922d17e4de",
    "head_commit": "1fff9347e43f89225fd2965693dcbd43bd44dbeb",
    "repo_url": "https://github.com/iluwatar/java-design-patterns/pull/2877",
    "swe_url": "https://swe-bench-plus.turing.com/repos/iluwatar__java-design-patterns/2877",
    "dockerfile": "FROM openjdk:21\n\nWORKDIR /app\nCOPY . .\n\nRUN apt-get update && apt-get install -y maven\n\nRUN if [ -f \"pom.xml\" ]; then mvn dependency:go-offline; fi\n\nCMD [\"mvn\", \"test\"]",
    "pr_merged_at": "2024-03-30T12:44:43.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  }
]